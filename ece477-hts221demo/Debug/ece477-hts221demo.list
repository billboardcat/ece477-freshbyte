
ece477-hts221demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  080094a0  080094a0  000194a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab4  08009ab4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009abc  08009abc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ac0  08009ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200001dc  08009ca0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08009ca0  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112a9  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002503  00000000  00000000  000314ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  000339b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00034860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ce5  00000000  00000000  00035628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c43  00000000  00000000  0004b30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000812c9  00000000  00000000  0005bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f0  00000000  00000000  000dd26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009488 	.word	0x08009488

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009488 	.word	0x08009488

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fc6f 	bl	8001d20 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fbb9 	bl	8001bc4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc61 	bl	8001d20 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc57 	bl	8001d20 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fbdb 	bl	8001c3c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fbd1 	bl	8001c3c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f82e 	bl	8000538 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	000f      	movs	r7, r1
 80004f0:	0001      	movs	r1, r0
 80004f2:	002e      	movs	r6, r5
 80004f4:	46c6      	mov	lr, r8
 80004f6:	4684      	mov	ip, r0
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	0c14      	lsrs	r4, r2, #16
 80004fc:	0c00      	lsrs	r0, r0, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	4346      	muls	r6, r0
 8000502:	434d      	muls	r5, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	1940      	adds	r0, r0, r5
 800050a:	0c34      	lsrs	r4, r6, #16
 800050c:	1824      	adds	r4, r4, r0
 800050e:	b500      	push	{lr}
 8000510:	42a5      	cmp	r5, r4
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x34>
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	4680      	mov	r8, r0
 800051a:	4441      	add	r1, r8
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	186d      	adds	r5, r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4359      	muls	r1, r3
 8000524:	437a      	muls	r2, r7
 8000526:	0430      	lsls	r0, r6, #16
 8000528:	1949      	adds	r1, r1, r5
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	0c00      	lsrs	r0, r0, #16
 800052e:	1820      	adds	r0, r4, r0
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bc80      	pop	{r7}
 8000534:	46b8      	mov	r8, r7
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f002 fb18 	bl	8002b8c <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f002 fb13 	bl	8002b8c <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	469b      	mov	fp, r3
 800056e:	d433      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 8000570:	465a      	mov	r2, fp
 8000572:	4653      	mov	r3, sl
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83a      	bhi.n	80005fa <__udivmoddi4+0xc2>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e078      	b.n	800067c <__udivmoddi4+0x144>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e075      	b.n	8000682 <__udivmoddi4+0x14a>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e028      	b.n	8000602 <__udivmoddi4+0xca>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	2320      	movs	r3, #32
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	4652      	mov	r2, sl
 80005e0:	40da      	lsrs	r2, r3
 80005e2:	4641      	mov	r1, r8
 80005e4:	0013      	movs	r3, r2
 80005e6:	464a      	mov	r2, r9
 80005e8:	408a      	lsls	r2, r1
 80005ea:	0017      	movs	r7, r2
 80005ec:	4642      	mov	r2, r8
 80005ee:	431f      	orrs	r7, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	4093      	lsls	r3, r2
 80005f4:	001e      	movs	r6, r3
 80005f6:	42af      	cmp	r7, r5
 80005f8:	d9c4      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	4643      	mov	r3, r8
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0d9      	beq.n	80005bc <__udivmoddi4+0x84>
 8000608:	07fb      	lsls	r3, r7, #31
 800060a:	0872      	lsrs	r2, r6, #1
 800060c:	431a      	orrs	r2, r3
 800060e:	4646      	mov	r6, r8
 8000610:	087b      	lsrs	r3, r7, #1
 8000612:	e00e      	b.n	8000632 <__udivmoddi4+0xfa>
 8000614:	42ab      	cmp	r3, r5
 8000616:	d101      	bne.n	800061c <__udivmoddi4+0xe4>
 8000618:	42a2      	cmp	r2, r4
 800061a:	d80c      	bhi.n	8000636 <__udivmoddi4+0xfe>
 800061c:	1aa4      	subs	r4, r4, r2
 800061e:	419d      	sbcs	r5, r3
 8000620:	2001      	movs	r0, #1
 8000622:	1924      	adds	r4, r4, r4
 8000624:	416d      	adcs	r5, r5
 8000626:	2100      	movs	r1, #0
 8000628:	3e01      	subs	r6, #1
 800062a:	1824      	adds	r4, r4, r0
 800062c:	414d      	adcs	r5, r1
 800062e:	2e00      	cmp	r6, #0
 8000630:	d006      	beq.n	8000640 <__udivmoddi4+0x108>
 8000632:	42ab      	cmp	r3, r5
 8000634:	d9ee      	bls.n	8000614 <__udivmoddi4+0xdc>
 8000636:	3e01      	subs	r6, #1
 8000638:	1924      	adds	r4, r4, r4
 800063a:	416d      	adcs	r5, r5
 800063c:	2e00      	cmp	r6, #0
 800063e:	d1f8      	bne.n	8000632 <__udivmoddi4+0xfa>
 8000640:	9800      	ldr	r0, [sp, #0]
 8000642:	9901      	ldr	r1, [sp, #4]
 8000644:	465b      	mov	r3, fp
 8000646:	1900      	adds	r0, r0, r4
 8000648:	4169      	adcs	r1, r5
 800064a:	2b00      	cmp	r3, #0
 800064c:	db24      	blt.n	8000698 <__udivmoddi4+0x160>
 800064e:	002b      	movs	r3, r5
 8000650:	465a      	mov	r2, fp
 8000652:	4644      	mov	r4, r8
 8000654:	40d3      	lsrs	r3, r2
 8000656:	002a      	movs	r2, r5
 8000658:	40e2      	lsrs	r2, r4
 800065a:	001c      	movs	r4, r3
 800065c:	465b      	mov	r3, fp
 800065e:	0015      	movs	r5, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	db2a      	blt.n	80006ba <__udivmoddi4+0x182>
 8000664:	0026      	movs	r6, r4
 8000666:	409e      	lsls	r6, r3
 8000668:	0033      	movs	r3, r6
 800066a:	0026      	movs	r6, r4
 800066c:	4647      	mov	r7, r8
 800066e:	40be      	lsls	r6, r7
 8000670:	0032      	movs	r2, r6
 8000672:	1a80      	subs	r0, r0, r2
 8000674:	4199      	sbcs	r1, r3
 8000676:	9000      	str	r0, [sp, #0]
 8000678:	9101      	str	r1, [sp, #4]
 800067a:	e79f      	b.n	80005bc <__udivmoddi4+0x84>
 800067c:	42a3      	cmp	r3, r4
 800067e:	d8bc      	bhi.n	80005fa <__udivmoddi4+0xc2>
 8000680:	e783      	b.n	800058a <__udivmoddi4+0x52>
 8000682:	4642      	mov	r2, r8
 8000684:	2320      	movs	r3, #32
 8000686:	2100      	movs	r1, #0
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	2200      	movs	r2, #0
 800068c:	9100      	str	r1, [sp, #0]
 800068e:	9201      	str	r2, [sp, #4]
 8000690:	2201      	movs	r2, #1
 8000692:	40da      	lsrs	r2, r3
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	e786      	b.n	80005a6 <__udivmoddi4+0x6e>
 8000698:	4642      	mov	r2, r8
 800069a:	2320      	movs	r3, #32
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	4646      	mov	r6, r8
 80006a2:	409a      	lsls	r2, r3
 80006a4:	0023      	movs	r3, r4
 80006a6:	40f3      	lsrs	r3, r6
 80006a8:	4644      	mov	r4, r8
 80006aa:	4313      	orrs	r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	40e2      	lsrs	r2, r4
 80006b0:	001c      	movs	r4, r3
 80006b2:	465b      	mov	r3, fp
 80006b4:	0015      	movs	r5, r2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	dad4      	bge.n	8000664 <__udivmoddi4+0x12c>
 80006ba:	4642      	mov	r2, r8
 80006bc:	002f      	movs	r7, r5
 80006be:	2320      	movs	r3, #32
 80006c0:	0026      	movs	r6, r4
 80006c2:	4097      	lsls	r7, r2
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	40de      	lsrs	r6, r3
 80006c8:	003b      	movs	r3, r7
 80006ca:	4333      	orrs	r3, r6
 80006cc:	e7cd      	b.n	800066a <__udivmoddi4+0x132>
 80006ce:	46c0      	nop			; (mov r8, r8)

080006d0 <__aeabi_fadd>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	4646      	mov	r6, r8
 80006d4:	46d6      	mov	lr, sl
 80006d6:	464f      	mov	r7, r9
 80006d8:	024d      	lsls	r5, r1, #9
 80006da:	0242      	lsls	r2, r0, #9
 80006dc:	b5c0      	push	{r6, r7, lr}
 80006de:	0a52      	lsrs	r2, r2, #9
 80006e0:	0a6e      	lsrs	r6, r5, #9
 80006e2:	0047      	lsls	r7, r0, #1
 80006e4:	46b0      	mov	r8, r6
 80006e6:	0e3f      	lsrs	r7, r7, #24
 80006e8:	004e      	lsls	r6, r1, #1
 80006ea:	0fc4      	lsrs	r4, r0, #31
 80006ec:	00d0      	lsls	r0, r2, #3
 80006ee:	4694      	mov	ip, r2
 80006f0:	003b      	movs	r3, r7
 80006f2:	4682      	mov	sl, r0
 80006f4:	0e36      	lsrs	r6, r6, #24
 80006f6:	0fc9      	lsrs	r1, r1, #31
 80006f8:	09ad      	lsrs	r5, r5, #6
 80006fa:	428c      	cmp	r4, r1
 80006fc:	d06d      	beq.n	80007da <__aeabi_fadd+0x10a>
 80006fe:	1bb8      	subs	r0, r7, r6
 8000700:	4681      	mov	r9, r0
 8000702:	2800      	cmp	r0, #0
 8000704:	dd4d      	ble.n	80007a2 <__aeabi_fadd+0xd2>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x3c>
 800070a:	e088      	b.n	800081e <__aeabi_fadd+0x14e>
 800070c:	2fff      	cmp	r7, #255	; 0xff
 800070e:	d05a      	beq.n	80007c6 <__aeabi_fadd+0xf6>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	04db      	lsls	r3, r3, #19
 8000714:	431d      	orrs	r5, r3
 8000716:	464b      	mov	r3, r9
 8000718:	2201      	movs	r2, #1
 800071a:	2b1b      	cmp	r3, #27
 800071c:	dc0a      	bgt.n	8000734 <__aeabi_fadd+0x64>
 800071e:	002b      	movs	r3, r5
 8000720:	464a      	mov	r2, r9
 8000722:	4649      	mov	r1, r9
 8000724:	40d3      	lsrs	r3, r2
 8000726:	2220      	movs	r2, #32
 8000728:	1a52      	subs	r2, r2, r1
 800072a:	4095      	lsls	r5, r2
 800072c:	002a      	movs	r2, r5
 800072e:	1e55      	subs	r5, r2, #1
 8000730:	41aa      	sbcs	r2, r5
 8000732:	431a      	orrs	r2, r3
 8000734:	4653      	mov	r3, sl
 8000736:	1a9a      	subs	r2, r3, r2
 8000738:	0153      	lsls	r3, r2, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x6e>
 800073c:	e0b9      	b.n	80008b2 <__aeabi_fadd+0x1e2>
 800073e:	0192      	lsls	r2, r2, #6
 8000740:	0996      	lsrs	r6, r2, #6
 8000742:	0030      	movs	r0, r6
 8000744:	f002 fa04 	bl	8002b50 <__clzsi2>
 8000748:	3805      	subs	r0, #5
 800074a:	4086      	lsls	r6, r0
 800074c:	4287      	cmp	r7, r0
 800074e:	dd00      	ble.n	8000752 <__aeabi_fadd+0x82>
 8000750:	e0d4      	b.n	80008fc <__aeabi_fadd+0x22c>
 8000752:	0033      	movs	r3, r6
 8000754:	1bc7      	subs	r7, r0, r7
 8000756:	2020      	movs	r0, #32
 8000758:	3701      	adds	r7, #1
 800075a:	40fb      	lsrs	r3, r7
 800075c:	1bc7      	subs	r7, r0, r7
 800075e:	40be      	lsls	r6, r7
 8000760:	0032      	movs	r2, r6
 8000762:	1e56      	subs	r6, r2, #1
 8000764:	41b2      	sbcs	r2, r6
 8000766:	2700      	movs	r7, #0
 8000768:	431a      	orrs	r2, r3
 800076a:	0753      	lsls	r3, r2, #29
 800076c:	d004      	beq.n	8000778 <__aeabi_fadd+0xa8>
 800076e:	230f      	movs	r3, #15
 8000770:	4013      	ands	r3, r2
 8000772:	2b04      	cmp	r3, #4
 8000774:	d000      	beq.n	8000778 <__aeabi_fadd+0xa8>
 8000776:	3204      	adds	r2, #4
 8000778:	0153      	lsls	r3, r2, #5
 800077a:	d400      	bmi.n	800077e <__aeabi_fadd+0xae>
 800077c:	e09c      	b.n	80008b8 <__aeabi_fadd+0x1e8>
 800077e:	1c7b      	adds	r3, r7, #1
 8000780:	2ffe      	cmp	r7, #254	; 0xfe
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0xb6>
 8000784:	e09a      	b.n	80008bc <__aeabi_fadd+0x1ec>
 8000786:	0192      	lsls	r2, r2, #6
 8000788:	0a52      	lsrs	r2, r2, #9
 800078a:	4694      	mov	ip, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	05d8      	lsls	r0, r3, #23
 8000790:	4663      	mov	r3, ip
 8000792:	07e4      	lsls	r4, r4, #31
 8000794:	4318      	orrs	r0, r3
 8000796:	4320      	orrs	r0, r4
 8000798:	bce0      	pop	{r5, r6, r7}
 800079a:	46ba      	mov	sl, r7
 800079c:	46b1      	mov	r9, r6
 800079e:	46a8      	mov	r8, r5
 80007a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a2:	2800      	cmp	r0, #0
 80007a4:	d049      	beq.n	800083a <__aeabi_fadd+0x16a>
 80007a6:	1bf3      	subs	r3, r6, r7
 80007a8:	2f00      	cmp	r7, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0xde>
 80007ac:	e0b6      	b.n	800091c <__aeabi_fadd+0x24c>
 80007ae:	4652      	mov	r2, sl
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d060      	beq.n	8000876 <__aeabi_fadd+0x1a6>
 80007b4:	3b01      	subs	r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0xec>
 80007ba:	e0fc      	b.n	80009b6 <__aeabi_fadd+0x2e6>
 80007bc:	2eff      	cmp	r6, #255	; 0xff
 80007be:	d000      	beq.n	80007c2 <__aeabi_fadd+0xf2>
 80007c0:	e0b4      	b.n	800092c <__aeabi_fadd+0x25c>
 80007c2:	000c      	movs	r4, r1
 80007c4:	4642      	mov	r2, r8
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d078      	beq.n	80008bc <__aeabi_fadd+0x1ec>
 80007ca:	2080      	movs	r0, #128	; 0x80
 80007cc:	03c0      	lsls	r0, r0, #15
 80007ce:	4310      	orrs	r0, r2
 80007d0:	0242      	lsls	r2, r0, #9
 80007d2:	0a53      	lsrs	r3, r2, #9
 80007d4:	469c      	mov	ip, r3
 80007d6:	23ff      	movs	r3, #255	; 0xff
 80007d8:	e7d9      	b.n	800078e <__aeabi_fadd+0xbe>
 80007da:	1bb9      	subs	r1, r7, r6
 80007dc:	2900      	cmp	r1, #0
 80007de:	dd71      	ble.n	80008c4 <__aeabi_fadd+0x1f4>
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d03f      	beq.n	8000864 <__aeabi_fadd+0x194>
 80007e4:	2fff      	cmp	r7, #255	; 0xff
 80007e6:	d0ee      	beq.n	80007c6 <__aeabi_fadd+0xf6>
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	04db      	lsls	r3, r3, #19
 80007ec:	431d      	orrs	r5, r3
 80007ee:	2201      	movs	r2, #1
 80007f0:	291b      	cmp	r1, #27
 80007f2:	dc07      	bgt.n	8000804 <__aeabi_fadd+0x134>
 80007f4:	002a      	movs	r2, r5
 80007f6:	2320      	movs	r3, #32
 80007f8:	40ca      	lsrs	r2, r1
 80007fa:	1a59      	subs	r1, r3, r1
 80007fc:	408d      	lsls	r5, r1
 80007fe:	1e6b      	subs	r3, r5, #1
 8000800:	419d      	sbcs	r5, r3
 8000802:	432a      	orrs	r2, r5
 8000804:	4452      	add	r2, sl
 8000806:	0153      	lsls	r3, r2, #5
 8000808:	d553      	bpl.n	80008b2 <__aeabi_fadd+0x1e2>
 800080a:	3701      	adds	r7, #1
 800080c:	2fff      	cmp	r7, #255	; 0xff
 800080e:	d055      	beq.n	80008bc <__aeabi_fadd+0x1ec>
 8000810:	2301      	movs	r3, #1
 8000812:	497b      	ldr	r1, [pc, #492]	; (8000a00 <__aeabi_fadd+0x330>)
 8000814:	4013      	ands	r3, r2
 8000816:	0852      	lsrs	r2, r2, #1
 8000818:	400a      	ands	r2, r1
 800081a:	431a      	orrs	r2, r3
 800081c:	e7a5      	b.n	800076a <__aeabi_fadd+0x9a>
 800081e:	2d00      	cmp	r5, #0
 8000820:	d02c      	beq.n	800087c <__aeabi_fadd+0x1ac>
 8000822:	2301      	movs	r3, #1
 8000824:	425b      	negs	r3, r3
 8000826:	469c      	mov	ip, r3
 8000828:	44e1      	add	r9, ip
 800082a:	464b      	mov	r3, r9
 800082c:	2b00      	cmp	r3, #0
 800082e:	d100      	bne.n	8000832 <__aeabi_fadd+0x162>
 8000830:	e0ad      	b.n	800098e <__aeabi_fadd+0x2be>
 8000832:	2fff      	cmp	r7, #255	; 0xff
 8000834:	d000      	beq.n	8000838 <__aeabi_fadd+0x168>
 8000836:	e76e      	b.n	8000716 <__aeabi_fadd+0x46>
 8000838:	e7c5      	b.n	80007c6 <__aeabi_fadd+0xf6>
 800083a:	20fe      	movs	r0, #254	; 0xfe
 800083c:	1c7e      	adds	r6, r7, #1
 800083e:	4230      	tst	r0, r6
 8000840:	d160      	bne.n	8000904 <__aeabi_fadd+0x234>
 8000842:	2f00      	cmp	r7, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_fadd+0x178>
 8000846:	e093      	b.n	8000970 <__aeabi_fadd+0x2a0>
 8000848:	4652      	mov	r2, sl
 800084a:	2a00      	cmp	r2, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x180>
 800084e:	e0b6      	b.n	80009be <__aeabi_fadd+0x2ee>
 8000850:	2d00      	cmp	r5, #0
 8000852:	d09c      	beq.n	800078e <__aeabi_fadd+0xbe>
 8000854:	1b52      	subs	r2, r2, r5
 8000856:	0150      	lsls	r0, r2, #5
 8000858:	d400      	bmi.n	800085c <__aeabi_fadd+0x18c>
 800085a:	e0c3      	b.n	80009e4 <__aeabi_fadd+0x314>
 800085c:	4653      	mov	r3, sl
 800085e:	000c      	movs	r4, r1
 8000860:	1aea      	subs	r2, r5, r3
 8000862:	e782      	b.n	800076a <__aeabi_fadd+0x9a>
 8000864:	2d00      	cmp	r5, #0
 8000866:	d009      	beq.n	800087c <__aeabi_fadd+0x1ac>
 8000868:	3901      	subs	r1, #1
 800086a:	2900      	cmp	r1, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x1a0>
 800086e:	e08b      	b.n	8000988 <__aeabi_fadd+0x2b8>
 8000870:	2fff      	cmp	r7, #255	; 0xff
 8000872:	d1bc      	bne.n	80007ee <__aeabi_fadd+0x11e>
 8000874:	e7a7      	b.n	80007c6 <__aeabi_fadd+0xf6>
 8000876:	000c      	movs	r4, r1
 8000878:	4642      	mov	r2, r8
 800087a:	0037      	movs	r7, r6
 800087c:	2fff      	cmp	r7, #255	; 0xff
 800087e:	d0a2      	beq.n	80007c6 <__aeabi_fadd+0xf6>
 8000880:	0252      	lsls	r2, r2, #9
 8000882:	0a53      	lsrs	r3, r2, #9
 8000884:	469c      	mov	ip, r3
 8000886:	b2fb      	uxtb	r3, r7
 8000888:	e781      	b.n	800078e <__aeabi_fadd+0xbe>
 800088a:	21fe      	movs	r1, #254	; 0xfe
 800088c:	3701      	adds	r7, #1
 800088e:	4239      	tst	r1, r7
 8000890:	d165      	bne.n	800095e <__aeabi_fadd+0x28e>
 8000892:	2b00      	cmp	r3, #0
 8000894:	d17e      	bne.n	8000994 <__aeabi_fadd+0x2c4>
 8000896:	2800      	cmp	r0, #0
 8000898:	d100      	bne.n	800089c <__aeabi_fadd+0x1cc>
 800089a:	e0aa      	b.n	80009f2 <__aeabi_fadd+0x322>
 800089c:	2d00      	cmp	r5, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_fadd+0x1d2>
 80008a0:	e775      	b.n	800078e <__aeabi_fadd+0xbe>
 80008a2:	002a      	movs	r2, r5
 80008a4:	4452      	add	r2, sl
 80008a6:	2700      	movs	r7, #0
 80008a8:	0153      	lsls	r3, r2, #5
 80008aa:	d502      	bpl.n	80008b2 <__aeabi_fadd+0x1e2>
 80008ac:	4b55      	ldr	r3, [pc, #340]	; (8000a04 <__aeabi_fadd+0x334>)
 80008ae:	3701      	adds	r7, #1
 80008b0:	401a      	ands	r2, r3
 80008b2:	0753      	lsls	r3, r2, #29
 80008b4:	d000      	beq.n	80008b8 <__aeabi_fadd+0x1e8>
 80008b6:	e75a      	b.n	800076e <__aeabi_fadd+0x9e>
 80008b8:	08d2      	lsrs	r2, r2, #3
 80008ba:	e7df      	b.n	800087c <__aeabi_fadd+0x1ac>
 80008bc:	2200      	movs	r2, #0
 80008be:	23ff      	movs	r3, #255	; 0xff
 80008c0:	4694      	mov	ip, r2
 80008c2:	e764      	b.n	800078e <__aeabi_fadd+0xbe>
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d0e0      	beq.n	800088a <__aeabi_fadd+0x1ba>
 80008c8:	1bf3      	subs	r3, r6, r7
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d03e      	beq.n	800094c <__aeabi_fadd+0x27c>
 80008ce:	2eff      	cmp	r6, #255	; 0xff
 80008d0:	d100      	bne.n	80008d4 <__aeabi_fadd+0x204>
 80008d2:	e777      	b.n	80007c4 <__aeabi_fadd+0xf4>
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	0001      	movs	r1, r0
 80008d8:	04d2      	lsls	r2, r2, #19
 80008da:	4311      	orrs	r1, r2
 80008dc:	468a      	mov	sl, r1
 80008de:	2201      	movs	r2, #1
 80008e0:	2b1b      	cmp	r3, #27
 80008e2:	dc08      	bgt.n	80008f6 <__aeabi_fadd+0x226>
 80008e4:	4652      	mov	r2, sl
 80008e6:	2120      	movs	r1, #32
 80008e8:	4650      	mov	r0, sl
 80008ea:	40da      	lsrs	r2, r3
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	4098      	lsls	r0, r3
 80008f0:	1e43      	subs	r3, r0, #1
 80008f2:	4198      	sbcs	r0, r3
 80008f4:	4302      	orrs	r2, r0
 80008f6:	0037      	movs	r7, r6
 80008f8:	1952      	adds	r2, r2, r5
 80008fa:	e784      	b.n	8000806 <__aeabi_fadd+0x136>
 80008fc:	4a41      	ldr	r2, [pc, #260]	; (8000a04 <__aeabi_fadd+0x334>)
 80008fe:	1a3f      	subs	r7, r7, r0
 8000900:	4032      	ands	r2, r6
 8000902:	e732      	b.n	800076a <__aeabi_fadd+0x9a>
 8000904:	4653      	mov	r3, sl
 8000906:	1b5e      	subs	r6, r3, r5
 8000908:	0173      	lsls	r3, r6, #5
 800090a:	d42d      	bmi.n	8000968 <__aeabi_fadd+0x298>
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0x242>
 8000910:	e717      	b.n	8000742 <__aeabi_fadd+0x72>
 8000912:	2200      	movs	r2, #0
 8000914:	2400      	movs	r4, #0
 8000916:	2300      	movs	r3, #0
 8000918:	4694      	mov	ip, r2
 800091a:	e738      	b.n	800078e <__aeabi_fadd+0xbe>
 800091c:	2eff      	cmp	r6, #255	; 0xff
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x252>
 8000920:	e74f      	b.n	80007c2 <__aeabi_fadd+0xf2>
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	4650      	mov	r0, sl
 8000926:	04d2      	lsls	r2, r2, #19
 8000928:	4310      	orrs	r0, r2
 800092a:	4682      	mov	sl, r0
 800092c:	2201      	movs	r2, #1
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dc08      	bgt.n	8000944 <__aeabi_fadd+0x274>
 8000932:	4652      	mov	r2, sl
 8000934:	2420      	movs	r4, #32
 8000936:	4650      	mov	r0, sl
 8000938:	40da      	lsrs	r2, r3
 800093a:	1ae3      	subs	r3, r4, r3
 800093c:	4098      	lsls	r0, r3
 800093e:	1e43      	subs	r3, r0, #1
 8000940:	4198      	sbcs	r0, r3
 8000942:	4302      	orrs	r2, r0
 8000944:	000c      	movs	r4, r1
 8000946:	0037      	movs	r7, r6
 8000948:	1aaa      	subs	r2, r5, r2
 800094a:	e6f5      	b.n	8000738 <__aeabi_fadd+0x68>
 800094c:	2800      	cmp	r0, #0
 800094e:	d093      	beq.n	8000878 <__aeabi_fadd+0x1a8>
 8000950:	3b01      	subs	r3, #1
 8000952:	2b00      	cmp	r3, #0
 8000954:	d04f      	beq.n	80009f6 <__aeabi_fadd+0x326>
 8000956:	2eff      	cmp	r6, #255	; 0xff
 8000958:	d1c1      	bne.n	80008de <__aeabi_fadd+0x20e>
 800095a:	4642      	mov	r2, r8
 800095c:	e733      	b.n	80007c6 <__aeabi_fadd+0xf6>
 800095e:	2fff      	cmp	r7, #255	; 0xff
 8000960:	d0ac      	beq.n	80008bc <__aeabi_fadd+0x1ec>
 8000962:	4455      	add	r5, sl
 8000964:	086a      	lsrs	r2, r5, #1
 8000966:	e7a4      	b.n	80008b2 <__aeabi_fadd+0x1e2>
 8000968:	4653      	mov	r3, sl
 800096a:	000c      	movs	r4, r1
 800096c:	1aee      	subs	r6, r5, r3
 800096e:	e6e8      	b.n	8000742 <__aeabi_fadd+0x72>
 8000970:	4653      	mov	r3, sl
 8000972:	2b00      	cmp	r3, #0
 8000974:	d128      	bne.n	80009c8 <__aeabi_fadd+0x2f8>
 8000976:	2d00      	cmp	r5, #0
 8000978:	d000      	beq.n	800097c <__aeabi_fadd+0x2ac>
 800097a:	e722      	b.n	80007c2 <__aeabi_fadd+0xf2>
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	03db      	lsls	r3, r3, #15
 8000980:	469c      	mov	ip, r3
 8000982:	2400      	movs	r4, #0
 8000984:	23ff      	movs	r3, #255	; 0xff
 8000986:	e702      	b.n	800078e <__aeabi_fadd+0xbe>
 8000988:	002a      	movs	r2, r5
 800098a:	4452      	add	r2, sl
 800098c:	e73b      	b.n	8000806 <__aeabi_fadd+0x136>
 800098e:	4653      	mov	r3, sl
 8000990:	1b5a      	subs	r2, r3, r5
 8000992:	e6d1      	b.n	8000738 <__aeabi_fadd+0x68>
 8000994:	2800      	cmp	r0, #0
 8000996:	d100      	bne.n	800099a <__aeabi_fadd+0x2ca>
 8000998:	e714      	b.n	80007c4 <__aeabi_fadd+0xf4>
 800099a:	2d00      	cmp	r5, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_fadd+0x2d0>
 800099e:	e712      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	03db      	lsls	r3, r3, #15
 80009a4:	421a      	tst	r2, r3
 80009a6:	d100      	bne.n	80009aa <__aeabi_fadd+0x2da>
 80009a8:	e70d      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009aa:	4641      	mov	r1, r8
 80009ac:	4219      	tst	r1, r3
 80009ae:	d000      	beq.n	80009b2 <__aeabi_fadd+0x2e2>
 80009b0:	e709      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009b2:	4642      	mov	r2, r8
 80009b4:	e707      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009b6:	000c      	movs	r4, r1
 80009b8:	0037      	movs	r7, r6
 80009ba:	1aaa      	subs	r2, r5, r2
 80009bc:	e6bc      	b.n	8000738 <__aeabi_fadd+0x68>
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d013      	beq.n	80009ea <__aeabi_fadd+0x31a>
 80009c2:	000c      	movs	r4, r1
 80009c4:	46c4      	mov	ip, r8
 80009c6:	e6e2      	b.n	800078e <__aeabi_fadd+0xbe>
 80009c8:	2d00      	cmp	r5, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_fadd+0x2fe>
 80009cc:	e6fb      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	03db      	lsls	r3, r3, #15
 80009d2:	421a      	tst	r2, r3
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fadd+0x308>
 80009d6:	e6f6      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009d8:	4640      	mov	r0, r8
 80009da:	4218      	tst	r0, r3
 80009dc:	d000      	beq.n	80009e0 <__aeabi_fadd+0x310>
 80009de:	e6f2      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009e0:	000c      	movs	r4, r1
 80009e2:	e6ef      	b.n	80007c4 <__aeabi_fadd+0xf4>
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	d000      	beq.n	80009ea <__aeabi_fadd+0x31a>
 80009e8:	e763      	b.n	80008b2 <__aeabi_fadd+0x1e2>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2400      	movs	r4, #0
 80009ee:	4694      	mov	ip, r2
 80009f0:	e6cd      	b.n	800078e <__aeabi_fadd+0xbe>
 80009f2:	46c4      	mov	ip, r8
 80009f4:	e6cb      	b.n	800078e <__aeabi_fadd+0xbe>
 80009f6:	002a      	movs	r2, r5
 80009f8:	0037      	movs	r7, r6
 80009fa:	4452      	add	r2, sl
 80009fc:	e703      	b.n	8000806 <__aeabi_fadd+0x136>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	7dffffff 	.word	0x7dffffff
 8000a04:	fbffffff 	.word	0xfbffffff

08000a08 <__aeabi_fdiv>:
 8000a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0a:	464f      	mov	r7, r9
 8000a0c:	4646      	mov	r6, r8
 8000a0e:	46d6      	mov	lr, sl
 8000a10:	0245      	lsls	r5, r0, #9
 8000a12:	b5c0      	push	{r6, r7, lr}
 8000a14:	0047      	lsls	r7, r0, #1
 8000a16:	1c0c      	adds	r4, r1, #0
 8000a18:	0a6d      	lsrs	r5, r5, #9
 8000a1a:	0e3f      	lsrs	r7, r7, #24
 8000a1c:	0fc6      	lsrs	r6, r0, #31
 8000a1e:	2f00      	cmp	r7, #0
 8000a20:	d066      	beq.n	8000af0 <__aeabi_fdiv+0xe8>
 8000a22:	2fff      	cmp	r7, #255	; 0xff
 8000a24:	d06c      	beq.n	8000b00 <__aeabi_fdiv+0xf8>
 8000a26:	2300      	movs	r3, #0
 8000a28:	00ea      	lsls	r2, r5, #3
 8000a2a:	2580      	movs	r5, #128	; 0x80
 8000a2c:	4699      	mov	r9, r3
 8000a2e:	469a      	mov	sl, r3
 8000a30:	04ed      	lsls	r5, r5, #19
 8000a32:	4315      	orrs	r5, r2
 8000a34:	3f7f      	subs	r7, #127	; 0x7f
 8000a36:	0260      	lsls	r0, r4, #9
 8000a38:	0061      	lsls	r1, r4, #1
 8000a3a:	0a43      	lsrs	r3, r0, #9
 8000a3c:	4698      	mov	r8, r3
 8000a3e:	0e09      	lsrs	r1, r1, #24
 8000a40:	0fe4      	lsrs	r4, r4, #31
 8000a42:	2900      	cmp	r1, #0
 8000a44:	d048      	beq.n	8000ad8 <__aeabi_fdiv+0xd0>
 8000a46:	29ff      	cmp	r1, #255	; 0xff
 8000a48:	d010      	beq.n	8000a6c <__aeabi_fdiv+0x64>
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	00d8      	lsls	r0, r3, #3
 8000a4e:	04d2      	lsls	r2, r2, #19
 8000a50:	4302      	orrs	r2, r0
 8000a52:	4690      	mov	r8, r2
 8000a54:	2000      	movs	r0, #0
 8000a56:	397f      	subs	r1, #127	; 0x7f
 8000a58:	464a      	mov	r2, r9
 8000a5a:	0033      	movs	r3, r6
 8000a5c:	1a7f      	subs	r7, r7, r1
 8000a5e:	4302      	orrs	r2, r0
 8000a60:	496c      	ldr	r1, [pc, #432]	; (8000c14 <__aeabi_fdiv+0x20c>)
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	588a      	ldr	r2, [r1, r2]
 8000a66:	4063      	eors	r3, r4
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4697      	mov	pc, r2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d16d      	bne.n	8000b4c <__aeabi_fdiv+0x144>
 8000a70:	2002      	movs	r0, #2
 8000a72:	3fff      	subs	r7, #255	; 0xff
 8000a74:	e033      	b.n	8000ade <__aeabi_fdiv+0xd6>
 8000a76:	2300      	movs	r3, #0
 8000a78:	4698      	mov	r8, r3
 8000a7a:	0026      	movs	r6, r4
 8000a7c:	4645      	mov	r5, r8
 8000a7e:	4682      	mov	sl, r0
 8000a80:	4653      	mov	r3, sl
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fdiv+0x80>
 8000a86:	e07f      	b.n	8000b88 <__aeabi_fdiv+0x180>
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_fdiv+0x86>
 8000a8c:	e094      	b.n	8000bb8 <__aeabi_fdiv+0x1b0>
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d017      	beq.n	8000ac2 <__aeabi_fdiv+0xba>
 8000a92:	0038      	movs	r0, r7
 8000a94:	307f      	adds	r0, #127	; 0x7f
 8000a96:	2800      	cmp	r0, #0
 8000a98:	dd5f      	ble.n	8000b5a <__aeabi_fdiv+0x152>
 8000a9a:	076b      	lsls	r3, r5, #29
 8000a9c:	d004      	beq.n	8000aa8 <__aeabi_fdiv+0xa0>
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	402b      	ands	r3, r5
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fdiv+0xa0>
 8000aa6:	3504      	adds	r5, #4
 8000aa8:	012b      	lsls	r3, r5, #4
 8000aaa:	d503      	bpl.n	8000ab4 <__aeabi_fdiv+0xac>
 8000aac:	0038      	movs	r0, r7
 8000aae:	4b5a      	ldr	r3, [pc, #360]	; (8000c18 <__aeabi_fdiv+0x210>)
 8000ab0:	3080      	adds	r0, #128	; 0x80
 8000ab2:	401d      	ands	r5, r3
 8000ab4:	28fe      	cmp	r0, #254	; 0xfe
 8000ab6:	dc67      	bgt.n	8000b88 <__aeabi_fdiv+0x180>
 8000ab8:	01ad      	lsls	r5, r5, #6
 8000aba:	0a6d      	lsrs	r5, r5, #9
 8000abc:	b2c0      	uxtb	r0, r0
 8000abe:	e002      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000ac0:	001e      	movs	r6, r3
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2500      	movs	r5, #0
 8000ac6:	05c0      	lsls	r0, r0, #23
 8000ac8:	4328      	orrs	r0, r5
 8000aca:	07f6      	lsls	r6, r6, #31
 8000acc:	4330      	orrs	r0, r6
 8000ace:	bce0      	pop	{r5, r6, r7}
 8000ad0:	46ba      	mov	sl, r7
 8000ad2:	46b1      	mov	r9, r6
 8000ad4:	46a8      	mov	r8, r5
 8000ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d12b      	bne.n	8000b34 <__aeabi_fdiv+0x12c>
 8000adc:	2001      	movs	r0, #1
 8000ade:	464a      	mov	r2, r9
 8000ae0:	0033      	movs	r3, r6
 8000ae2:	494e      	ldr	r1, [pc, #312]	; (8000c1c <__aeabi_fdiv+0x214>)
 8000ae4:	4302      	orrs	r2, r0
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	588a      	ldr	r2, [r1, r2]
 8000aea:	4063      	eors	r3, r4
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4697      	mov	pc, r2
 8000af0:	2d00      	cmp	r5, #0
 8000af2:	d113      	bne.n	8000b1c <__aeabi_fdiv+0x114>
 8000af4:	2304      	movs	r3, #4
 8000af6:	4699      	mov	r9, r3
 8000af8:	3b03      	subs	r3, #3
 8000afa:	2700      	movs	r7, #0
 8000afc:	469a      	mov	sl, r3
 8000afe:	e79a      	b.n	8000a36 <__aeabi_fdiv+0x2e>
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d105      	bne.n	8000b10 <__aeabi_fdiv+0x108>
 8000b04:	2308      	movs	r3, #8
 8000b06:	4699      	mov	r9, r3
 8000b08:	3b06      	subs	r3, #6
 8000b0a:	27ff      	movs	r7, #255	; 0xff
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	e792      	b.n	8000a36 <__aeabi_fdiv+0x2e>
 8000b10:	230c      	movs	r3, #12
 8000b12:	4699      	mov	r9, r3
 8000b14:	3b09      	subs	r3, #9
 8000b16:	27ff      	movs	r7, #255	; 0xff
 8000b18:	469a      	mov	sl, r3
 8000b1a:	e78c      	b.n	8000a36 <__aeabi_fdiv+0x2e>
 8000b1c:	0028      	movs	r0, r5
 8000b1e:	f002 f817 	bl	8002b50 <__clzsi2>
 8000b22:	2776      	movs	r7, #118	; 0x76
 8000b24:	1f43      	subs	r3, r0, #5
 8000b26:	409d      	lsls	r5, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	427f      	negs	r7, r7
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	469a      	mov	sl, r3
 8000b30:	1a3f      	subs	r7, r7, r0
 8000b32:	e780      	b.n	8000a36 <__aeabi_fdiv+0x2e>
 8000b34:	0018      	movs	r0, r3
 8000b36:	f002 f80b 	bl	8002b50 <__clzsi2>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	1f43      	subs	r3, r0, #5
 8000b3e:	2176      	movs	r1, #118	; 0x76
 8000b40:	409a      	lsls	r2, r3
 8000b42:	4249      	negs	r1, r1
 8000b44:	1a09      	subs	r1, r1, r0
 8000b46:	4690      	mov	r8, r2
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e785      	b.n	8000a58 <__aeabi_fdiv+0x50>
 8000b4c:	21ff      	movs	r1, #255	; 0xff
 8000b4e:	2003      	movs	r0, #3
 8000b50:	e782      	b.n	8000a58 <__aeabi_fdiv+0x50>
 8000b52:	001e      	movs	r6, r3
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	2500      	movs	r5, #0
 8000b58:	e7b5      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	1a1b      	subs	r3, r3, r0
 8000b5e:	2b1b      	cmp	r3, #27
 8000b60:	dcaf      	bgt.n	8000ac2 <__aeabi_fdiv+0xba>
 8000b62:	379e      	adds	r7, #158	; 0x9e
 8000b64:	0029      	movs	r1, r5
 8000b66:	40bd      	lsls	r5, r7
 8000b68:	40d9      	lsrs	r1, r3
 8000b6a:	1e6a      	subs	r2, r5, #1
 8000b6c:	4195      	sbcs	r5, r2
 8000b6e:	430d      	orrs	r5, r1
 8000b70:	076b      	lsls	r3, r5, #29
 8000b72:	d004      	beq.n	8000b7e <__aeabi_fdiv+0x176>
 8000b74:	230f      	movs	r3, #15
 8000b76:	402b      	ands	r3, r5
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d000      	beq.n	8000b7e <__aeabi_fdiv+0x176>
 8000b7c:	3504      	adds	r5, #4
 8000b7e:	016b      	lsls	r3, r5, #5
 8000b80:	d544      	bpl.n	8000c0c <__aeabi_fdiv+0x204>
 8000b82:	2001      	movs	r0, #1
 8000b84:	2500      	movs	r5, #0
 8000b86:	e79e      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000b88:	20ff      	movs	r0, #255	; 0xff
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	e79b      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000b8e:	2580      	movs	r5, #128	; 0x80
 8000b90:	2600      	movs	r6, #0
 8000b92:	20ff      	movs	r0, #255	; 0xff
 8000b94:	03ed      	lsls	r5, r5, #15
 8000b96:	e796      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	4698      	mov	r8, r3
 8000b9c:	2080      	movs	r0, #128	; 0x80
 8000b9e:	03c0      	lsls	r0, r0, #15
 8000ba0:	4205      	tst	r5, r0
 8000ba2:	d009      	beq.n	8000bb8 <__aeabi_fdiv+0x1b0>
 8000ba4:	4643      	mov	r3, r8
 8000ba6:	4203      	tst	r3, r0
 8000ba8:	d106      	bne.n	8000bb8 <__aeabi_fdiv+0x1b0>
 8000baa:	4645      	mov	r5, r8
 8000bac:	4305      	orrs	r5, r0
 8000bae:	026d      	lsls	r5, r5, #9
 8000bb0:	0026      	movs	r6, r4
 8000bb2:	20ff      	movs	r0, #255	; 0xff
 8000bb4:	0a6d      	lsrs	r5, r5, #9
 8000bb6:	e786      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000bb8:	2080      	movs	r0, #128	; 0x80
 8000bba:	03c0      	lsls	r0, r0, #15
 8000bbc:	4305      	orrs	r5, r0
 8000bbe:	026d      	lsls	r5, r5, #9
 8000bc0:	20ff      	movs	r0, #255	; 0xff
 8000bc2:	0a6d      	lsrs	r5, r5, #9
 8000bc4:	e77f      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000bc6:	4641      	mov	r1, r8
 8000bc8:	016a      	lsls	r2, r5, #5
 8000bca:	0148      	lsls	r0, r1, #5
 8000bcc:	4282      	cmp	r2, r0
 8000bce:	d219      	bcs.n	8000c04 <__aeabi_fdiv+0x1fc>
 8000bd0:	211b      	movs	r1, #27
 8000bd2:	2500      	movs	r5, #0
 8000bd4:	3f01      	subs	r7, #1
 8000bd6:	2601      	movs	r6, #1
 8000bd8:	0014      	movs	r4, r2
 8000bda:	006d      	lsls	r5, r5, #1
 8000bdc:	0052      	lsls	r2, r2, #1
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	db01      	blt.n	8000be6 <__aeabi_fdiv+0x1de>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	d801      	bhi.n	8000bea <__aeabi_fdiv+0x1e2>
 8000be6:	1a12      	subs	r2, r2, r0
 8000be8:	4335      	orrs	r5, r6
 8000bea:	3901      	subs	r1, #1
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d1f3      	bne.n	8000bd8 <__aeabi_fdiv+0x1d0>
 8000bf0:	1e50      	subs	r0, r2, #1
 8000bf2:	4182      	sbcs	r2, r0
 8000bf4:	0038      	movs	r0, r7
 8000bf6:	307f      	adds	r0, #127	; 0x7f
 8000bf8:	001e      	movs	r6, r3
 8000bfa:	4315      	orrs	r5, r2
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	dd00      	ble.n	8000c02 <__aeabi_fdiv+0x1fa>
 8000c00:	e74b      	b.n	8000a9a <__aeabi_fdiv+0x92>
 8000c02:	e7aa      	b.n	8000b5a <__aeabi_fdiv+0x152>
 8000c04:	211a      	movs	r1, #26
 8000c06:	2501      	movs	r5, #1
 8000c08:	1a12      	subs	r2, r2, r0
 8000c0a:	e7e4      	b.n	8000bd6 <__aeabi_fdiv+0x1ce>
 8000c0c:	01ad      	lsls	r5, r5, #6
 8000c0e:	2000      	movs	r0, #0
 8000c10:	0a6d      	lsrs	r5, r5, #9
 8000c12:	e758      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000c14:	08009524 	.word	0x08009524
 8000c18:	f7ffffff 	.word	0xf7ffffff
 8000c1c:	08009564 	.word	0x08009564

08000c20 <__aeabi_fmul>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	4657      	mov	r7, sl
 8000c24:	464e      	mov	r6, r9
 8000c26:	4645      	mov	r5, r8
 8000c28:	46de      	mov	lr, fp
 8000c2a:	0244      	lsls	r4, r0, #9
 8000c2c:	b5e0      	push	{r5, r6, r7, lr}
 8000c2e:	0045      	lsls	r5, r0, #1
 8000c30:	1c0f      	adds	r7, r1, #0
 8000c32:	0a64      	lsrs	r4, r4, #9
 8000c34:	0e2d      	lsrs	r5, r5, #24
 8000c36:	0fc6      	lsrs	r6, r0, #31
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d047      	beq.n	8000ccc <__aeabi_fmul+0xac>
 8000c3c:	2dff      	cmp	r5, #255	; 0xff
 8000c3e:	d04d      	beq.n	8000cdc <__aeabi_fmul+0xbc>
 8000c40:	2300      	movs	r3, #0
 8000c42:	2080      	movs	r0, #128	; 0x80
 8000c44:	469a      	mov	sl, r3
 8000c46:	469b      	mov	fp, r3
 8000c48:	00e4      	lsls	r4, r4, #3
 8000c4a:	04c0      	lsls	r0, r0, #19
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	3d7f      	subs	r5, #127	; 0x7f
 8000c50:	0278      	lsls	r0, r7, #9
 8000c52:	0a43      	lsrs	r3, r0, #9
 8000c54:	4699      	mov	r9, r3
 8000c56:	007a      	lsls	r2, r7, #1
 8000c58:	0ffb      	lsrs	r3, r7, #31
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	0e12      	lsrs	r2, r2, #24
 8000c5e:	464b      	mov	r3, r9
 8000c60:	d044      	beq.n	8000cec <__aeabi_fmul+0xcc>
 8000c62:	2aff      	cmp	r2, #255	; 0xff
 8000c64:	d011      	beq.n	8000c8a <__aeabi_fmul+0x6a>
 8000c66:	00d8      	lsls	r0, r3, #3
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	04db      	lsls	r3, r3, #19
 8000c6c:	4303      	orrs	r3, r0
 8000c6e:	4699      	mov	r9, r3
 8000c70:	2000      	movs	r0, #0
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	18ad      	adds	r5, r5, r2
 8000c76:	4647      	mov	r7, r8
 8000c78:	4653      	mov	r3, sl
 8000c7a:	4077      	eors	r7, r6
 8000c7c:	1c69      	adds	r1, r5, #1
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d83f      	bhi.n	8000d02 <__aeabi_fmul+0xe2>
 8000c82:	4a72      	ldr	r2, [pc, #456]	; (8000e4c <__aeabi_fmul+0x22c>)
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	58d3      	ldr	r3, [r2, r3]
 8000c88:	469f      	mov	pc, r3
 8000c8a:	35ff      	adds	r5, #255	; 0xff
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fmul+0x72>
 8000c90:	e079      	b.n	8000d86 <__aeabi_fmul+0x166>
 8000c92:	4652      	mov	r2, sl
 8000c94:	2302      	movs	r3, #2
 8000c96:	431a      	orrs	r2, r3
 8000c98:	4692      	mov	sl, r2
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	e7eb      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000c9e:	4647      	mov	r7, r8
 8000ca0:	464c      	mov	r4, r9
 8000ca2:	4683      	mov	fp, r0
 8000ca4:	465b      	mov	r3, fp
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d028      	beq.n	8000cfc <__aeabi_fmul+0xdc>
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fmul+0x90>
 8000cae:	e0c6      	b.n	8000e3e <__aeabi_fmul+0x21e>
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d14f      	bne.n	8000d54 <__aeabi_fmul+0x134>
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	2400      	movs	r4, #0
 8000cb8:	05c0      	lsls	r0, r0, #23
 8000cba:	07ff      	lsls	r7, r7, #31
 8000cbc:	4320      	orrs	r0, r4
 8000cbe:	4338      	orrs	r0, r7
 8000cc0:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc2:	46bb      	mov	fp, r7
 8000cc4:	46b2      	mov	sl, r6
 8000cc6:	46a9      	mov	r9, r5
 8000cc8:	46a0      	mov	r8, r4
 8000cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d171      	bne.n	8000db4 <__aeabi_fmul+0x194>
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e7b9      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000cdc:	2c00      	cmp	r4, #0
 8000cde:	d163      	bne.n	8000da8 <__aeabi_fmul+0x188>
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	469a      	mov	sl, r3
 8000ce4:	3b06      	subs	r3, #6
 8000ce6:	25ff      	movs	r5, #255	; 0xff
 8000ce8:	469b      	mov	fp, r3
 8000cea:	e7b1      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d150      	bne.n	8000d92 <__aeabi_fmul+0x172>
 8000cf0:	4652      	mov	r2, sl
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	4692      	mov	sl, r2
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	e7bc      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000cfc:	20ff      	movs	r0, #255	; 0xff
 8000cfe:	2400      	movs	r4, #0
 8000d00:	e7da      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000d02:	4648      	mov	r0, r9
 8000d04:	0c26      	lsrs	r6, r4, #16
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	0c22      	lsrs	r2, r4, #16
 8000d0a:	0404      	lsls	r4, r0, #16
 8000d0c:	0c24      	lsrs	r4, r4, #16
 8000d0e:	464b      	mov	r3, r9
 8000d10:	0020      	movs	r0, r4
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	4350      	muls	r0, r2
 8000d16:	4374      	muls	r4, r6
 8000d18:	435a      	muls	r2, r3
 8000d1a:	435e      	muls	r6, r3
 8000d1c:	1912      	adds	r2, r2, r4
 8000d1e:	0c03      	lsrs	r3, r0, #16
 8000d20:	189b      	adds	r3, r3, r2
 8000d22:	429c      	cmp	r4, r3
 8000d24:	d903      	bls.n	8000d2e <__aeabi_fmul+0x10e>
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	0252      	lsls	r2, r2, #9
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	4466      	add	r6, ip
 8000d2e:	0400      	lsls	r0, r0, #16
 8000d30:	041a      	lsls	r2, r3, #16
 8000d32:	0c00      	lsrs	r0, r0, #16
 8000d34:	1812      	adds	r2, r2, r0
 8000d36:	0194      	lsls	r4, r2, #6
 8000d38:	1e60      	subs	r0, r4, #1
 8000d3a:	4184      	sbcs	r4, r0
 8000d3c:	0c1b      	lsrs	r3, r3, #16
 8000d3e:	0e92      	lsrs	r2, r2, #26
 8000d40:	199b      	adds	r3, r3, r6
 8000d42:	4314      	orrs	r4, r2
 8000d44:	019b      	lsls	r3, r3, #6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	d572      	bpl.n	8000e32 <__aeabi_fmul+0x212>
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	0863      	lsrs	r3, r4, #1
 8000d50:	4004      	ands	r4, r0
 8000d52:	431c      	orrs	r4, r3
 8000d54:	0008      	movs	r0, r1
 8000d56:	307f      	adds	r0, #127	; 0x7f
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	dd3c      	ble.n	8000dd6 <__aeabi_fmul+0x1b6>
 8000d5c:	0763      	lsls	r3, r4, #29
 8000d5e:	d004      	beq.n	8000d6a <__aeabi_fmul+0x14a>
 8000d60:	230f      	movs	r3, #15
 8000d62:	4023      	ands	r3, r4
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d000      	beq.n	8000d6a <__aeabi_fmul+0x14a>
 8000d68:	3404      	adds	r4, #4
 8000d6a:	0123      	lsls	r3, r4, #4
 8000d6c:	d503      	bpl.n	8000d76 <__aeabi_fmul+0x156>
 8000d6e:	3180      	adds	r1, #128	; 0x80
 8000d70:	0008      	movs	r0, r1
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <__aeabi_fmul+0x230>)
 8000d74:	401c      	ands	r4, r3
 8000d76:	28fe      	cmp	r0, #254	; 0xfe
 8000d78:	dcc0      	bgt.n	8000cfc <__aeabi_fmul+0xdc>
 8000d7a:	01a4      	lsls	r4, r4, #6
 8000d7c:	0a64      	lsrs	r4, r4, #9
 8000d7e:	b2c0      	uxtb	r0, r0
 8000d80:	e79a      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000d82:	0037      	movs	r7, r6
 8000d84:	e78e      	b.n	8000ca4 <__aeabi_fmul+0x84>
 8000d86:	4652      	mov	r2, sl
 8000d88:	2303      	movs	r3, #3
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	4692      	mov	sl, r2
 8000d8e:	2003      	movs	r0, #3
 8000d90:	e771      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000d92:	4648      	mov	r0, r9
 8000d94:	f001 fedc 	bl	8002b50 <__clzsi2>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	1f43      	subs	r3, r0, #5
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	1a2d      	subs	r5, r5, r0
 8000da0:	4691      	mov	r9, r2
 8000da2:	2000      	movs	r0, #0
 8000da4:	3d76      	subs	r5, #118	; 0x76
 8000da6:	e766      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000da8:	230c      	movs	r3, #12
 8000daa:	469a      	mov	sl, r3
 8000dac:	3b09      	subs	r3, #9
 8000dae:	25ff      	movs	r5, #255	; 0xff
 8000db0:	469b      	mov	fp, r3
 8000db2:	e74d      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000db4:	0020      	movs	r0, r4
 8000db6:	f001 fecb 	bl	8002b50 <__clzsi2>
 8000dba:	2576      	movs	r5, #118	; 0x76
 8000dbc:	1f43      	subs	r3, r0, #5
 8000dbe:	409c      	lsls	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	426d      	negs	r5, r5
 8000dc4:	469a      	mov	sl, r3
 8000dc6:	469b      	mov	fp, r3
 8000dc8:	1a2d      	subs	r5, r5, r0
 8000dca:	e741      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000dcc:	2480      	movs	r4, #128	; 0x80
 8000dce:	2700      	movs	r7, #0
 8000dd0:	20ff      	movs	r0, #255	; 0xff
 8000dd2:	03e4      	lsls	r4, r4, #15
 8000dd4:	e770      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	1a1b      	subs	r3, r3, r0
 8000dda:	2b1b      	cmp	r3, #27
 8000ddc:	dd00      	ble.n	8000de0 <__aeabi_fmul+0x1c0>
 8000dde:	e769      	b.n	8000cb4 <__aeabi_fmul+0x94>
 8000de0:	319e      	adds	r1, #158	; 0x9e
 8000de2:	0020      	movs	r0, r4
 8000de4:	408c      	lsls	r4, r1
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	1e63      	subs	r3, r4, #1
 8000dea:	419c      	sbcs	r4, r3
 8000dec:	4304      	orrs	r4, r0
 8000dee:	0763      	lsls	r3, r4, #29
 8000df0:	d004      	beq.n	8000dfc <__aeabi_fmul+0x1dc>
 8000df2:	230f      	movs	r3, #15
 8000df4:	4023      	ands	r3, r4
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d000      	beq.n	8000dfc <__aeabi_fmul+0x1dc>
 8000dfa:	3404      	adds	r4, #4
 8000dfc:	0163      	lsls	r3, r4, #5
 8000dfe:	d51a      	bpl.n	8000e36 <__aeabi_fmul+0x216>
 8000e00:	2001      	movs	r0, #1
 8000e02:	2400      	movs	r4, #0
 8000e04:	e758      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e06:	2080      	movs	r0, #128	; 0x80
 8000e08:	03c0      	lsls	r0, r0, #15
 8000e0a:	4204      	tst	r4, r0
 8000e0c:	d009      	beq.n	8000e22 <__aeabi_fmul+0x202>
 8000e0e:	464b      	mov	r3, r9
 8000e10:	4203      	tst	r3, r0
 8000e12:	d106      	bne.n	8000e22 <__aeabi_fmul+0x202>
 8000e14:	464c      	mov	r4, r9
 8000e16:	4304      	orrs	r4, r0
 8000e18:	0264      	lsls	r4, r4, #9
 8000e1a:	4647      	mov	r7, r8
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	0a64      	lsrs	r4, r4, #9
 8000e20:	e74a      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e22:	2080      	movs	r0, #128	; 0x80
 8000e24:	03c0      	lsls	r0, r0, #15
 8000e26:	4304      	orrs	r4, r0
 8000e28:	0264      	lsls	r4, r4, #9
 8000e2a:	0037      	movs	r7, r6
 8000e2c:	20ff      	movs	r0, #255	; 0xff
 8000e2e:	0a64      	lsrs	r4, r4, #9
 8000e30:	e742      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e32:	0029      	movs	r1, r5
 8000e34:	e78e      	b.n	8000d54 <__aeabi_fmul+0x134>
 8000e36:	01a4      	lsls	r4, r4, #6
 8000e38:	2000      	movs	r0, #0
 8000e3a:	0a64      	lsrs	r4, r4, #9
 8000e3c:	e73c      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e3e:	2080      	movs	r0, #128	; 0x80
 8000e40:	03c0      	lsls	r0, r0, #15
 8000e42:	4304      	orrs	r4, r0
 8000e44:	0264      	lsls	r4, r4, #9
 8000e46:	20ff      	movs	r0, #255	; 0xff
 8000e48:	0a64      	lsrs	r4, r4, #9
 8000e4a:	e735      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e4c:	080095a4 	.word	0x080095a4
 8000e50:	f7ffffff 	.word	0xf7ffffff

08000e54 <__aeabi_f2iz>:
 8000e54:	0241      	lsls	r1, r0, #9
 8000e56:	0042      	lsls	r2, r0, #1
 8000e58:	0fc3      	lsrs	r3, r0, #31
 8000e5a:	0a49      	lsrs	r1, r1, #9
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	0e12      	lsrs	r2, r2, #24
 8000e60:	2a7e      	cmp	r2, #126	; 0x7e
 8000e62:	d903      	bls.n	8000e6c <__aeabi_f2iz+0x18>
 8000e64:	2a9d      	cmp	r2, #157	; 0x9d
 8000e66:	d902      	bls.n	8000e6e <__aeabi_f2iz+0x1a>
 8000e68:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <__aeabi_f2iz+0x3c>)
 8000e6a:	1898      	adds	r0, r3, r2
 8000e6c:	4770      	bx	lr
 8000e6e:	2080      	movs	r0, #128	; 0x80
 8000e70:	0400      	lsls	r0, r0, #16
 8000e72:	4301      	orrs	r1, r0
 8000e74:	2a95      	cmp	r2, #149	; 0x95
 8000e76:	dc07      	bgt.n	8000e88 <__aeabi_f2iz+0x34>
 8000e78:	2096      	movs	r0, #150	; 0x96
 8000e7a:	1a82      	subs	r2, r0, r2
 8000e7c:	40d1      	lsrs	r1, r2
 8000e7e:	4248      	negs	r0, r1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f3      	bne.n	8000e6c <__aeabi_f2iz+0x18>
 8000e84:	0008      	movs	r0, r1
 8000e86:	e7f1      	b.n	8000e6c <__aeabi_f2iz+0x18>
 8000e88:	3a96      	subs	r2, #150	; 0x96
 8000e8a:	4091      	lsls	r1, r2
 8000e8c:	e7f7      	b.n	8000e7e <__aeabi_f2iz+0x2a>
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	7fffffff 	.word	0x7fffffff

08000e94 <__aeabi_i2f>:
 8000e94:	b570      	push	{r4, r5, r6, lr}
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d013      	beq.n	8000ec2 <__aeabi_i2f+0x2e>
 8000e9a:	17c3      	asrs	r3, r0, #31
 8000e9c:	18c5      	adds	r5, r0, r3
 8000e9e:	405d      	eors	r5, r3
 8000ea0:	0fc4      	lsrs	r4, r0, #31
 8000ea2:	0028      	movs	r0, r5
 8000ea4:	f001 fe54 	bl	8002b50 <__clzsi2>
 8000ea8:	239e      	movs	r3, #158	; 0x9e
 8000eaa:	0001      	movs	r1, r0
 8000eac:	1a1b      	subs	r3, r3, r0
 8000eae:	2b96      	cmp	r3, #150	; 0x96
 8000eb0:	dc0f      	bgt.n	8000ed2 <__aeabi_i2f+0x3e>
 8000eb2:	2808      	cmp	r0, #8
 8000eb4:	dd01      	ble.n	8000eba <__aeabi_i2f+0x26>
 8000eb6:	3908      	subs	r1, #8
 8000eb8:	408d      	lsls	r5, r1
 8000eba:	026d      	lsls	r5, r5, #9
 8000ebc:	0a6d      	lsrs	r5, r5, #9
 8000ebe:	b2d8      	uxtb	r0, r3
 8000ec0:	e002      	b.n	8000ec8 <__aeabi_i2f+0x34>
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	05c0      	lsls	r0, r0, #23
 8000eca:	4328      	orrs	r0, r5
 8000ecc:	07e4      	lsls	r4, r4, #31
 8000ece:	4320      	orrs	r0, r4
 8000ed0:	bd70      	pop	{r4, r5, r6, pc}
 8000ed2:	2b99      	cmp	r3, #153	; 0x99
 8000ed4:	dd0b      	ble.n	8000eee <__aeabi_i2f+0x5a>
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	002e      	movs	r6, r5
 8000eda:	1a12      	subs	r2, r2, r0
 8000edc:	40d6      	lsrs	r6, r2
 8000ede:	0002      	movs	r2, r0
 8000ee0:	321b      	adds	r2, #27
 8000ee2:	4095      	lsls	r5, r2
 8000ee4:	0028      	movs	r0, r5
 8000ee6:	1e45      	subs	r5, r0, #1
 8000ee8:	41a8      	sbcs	r0, r5
 8000eea:	0035      	movs	r5, r6
 8000eec:	4305      	orrs	r5, r0
 8000eee:	2905      	cmp	r1, #5
 8000ef0:	dd01      	ble.n	8000ef6 <__aeabi_i2f+0x62>
 8000ef2:	1f4a      	subs	r2, r1, #5
 8000ef4:	4095      	lsls	r5, r2
 8000ef6:	002a      	movs	r2, r5
 8000ef8:	4e08      	ldr	r6, [pc, #32]	; (8000f1c <__aeabi_i2f+0x88>)
 8000efa:	4032      	ands	r2, r6
 8000efc:	0768      	lsls	r0, r5, #29
 8000efe:	d009      	beq.n	8000f14 <__aeabi_i2f+0x80>
 8000f00:	200f      	movs	r0, #15
 8000f02:	4028      	ands	r0, r5
 8000f04:	2804      	cmp	r0, #4
 8000f06:	d005      	beq.n	8000f14 <__aeabi_i2f+0x80>
 8000f08:	3204      	adds	r2, #4
 8000f0a:	0150      	lsls	r0, r2, #5
 8000f0c:	d502      	bpl.n	8000f14 <__aeabi_i2f+0x80>
 8000f0e:	239f      	movs	r3, #159	; 0x9f
 8000f10:	4032      	ands	r2, r6
 8000f12:	1a5b      	subs	r3, r3, r1
 8000f14:	0192      	lsls	r2, r2, #6
 8000f16:	0a55      	lsrs	r5, r2, #9
 8000f18:	b2d8      	uxtb	r0, r3
 8000f1a:	e7d5      	b.n	8000ec8 <__aeabi_i2f+0x34>
 8000f1c:	fbffffff 	.word	0xfbffffff

08000f20 <__aeabi_dadd>:
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f22:	464f      	mov	r7, r9
 8000f24:	46d6      	mov	lr, sl
 8000f26:	4646      	mov	r6, r8
 8000f28:	000d      	movs	r5, r1
 8000f2a:	0001      	movs	r1, r0
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	b5c0      	push	{r6, r7, lr}
 8000f30:	0017      	movs	r7, r2
 8000f32:	032b      	lsls	r3, r5, #12
 8000f34:	0a5a      	lsrs	r2, r3, #9
 8000f36:	0f4b      	lsrs	r3, r1, #29
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	00ca      	lsls	r2, r1, #3
 8000f3c:	4691      	mov	r9, r2
 8000f3e:	0302      	lsls	r2, r0, #12
 8000f40:	006e      	lsls	r6, r5, #1
 8000f42:	0041      	lsls	r1, r0, #1
 8000f44:	0a52      	lsrs	r2, r2, #9
 8000f46:	0fec      	lsrs	r4, r5, #31
 8000f48:	0f7d      	lsrs	r5, r7, #29
 8000f4a:	4315      	orrs	r5, r2
 8000f4c:	0d76      	lsrs	r6, r6, #21
 8000f4e:	0d49      	lsrs	r1, r1, #21
 8000f50:	0fc0      	lsrs	r0, r0, #31
 8000f52:	4682      	mov	sl, r0
 8000f54:	46ac      	mov	ip, r5
 8000f56:	00ff      	lsls	r7, r7, #3
 8000f58:	1a72      	subs	r2, r6, r1
 8000f5a:	4284      	cmp	r4, r0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_dadd+0x40>
 8000f5e:	e098      	b.n	8001092 <__aeabi_dadd+0x172>
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	dc00      	bgt.n	8000f66 <__aeabi_dadd+0x46>
 8000f64:	e081      	b.n	800106a <__aeabi_dadd+0x14a>
 8000f66:	2900      	cmp	r1, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_dadd+0x4c>
 8000f6a:	e0b6      	b.n	80010da <__aeabi_dadd+0x1ba>
 8000f6c:	49c9      	ldr	r1, [pc, #804]	; (8001294 <__aeabi_dadd+0x374>)
 8000f6e:	428e      	cmp	r6, r1
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dadd+0x54>
 8000f72:	e172      	b.n	800125a <__aeabi_dadd+0x33a>
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	0028      	movs	r0, r5
 8000f78:	0409      	lsls	r1, r1, #16
 8000f7a:	4308      	orrs	r0, r1
 8000f7c:	4684      	mov	ip, r0
 8000f7e:	2a38      	cmp	r2, #56	; 0x38
 8000f80:	dd00      	ble.n	8000f84 <__aeabi_dadd+0x64>
 8000f82:	e15e      	b.n	8001242 <__aeabi_dadd+0x322>
 8000f84:	2a1f      	cmp	r2, #31
 8000f86:	dd00      	ble.n	8000f8a <__aeabi_dadd+0x6a>
 8000f88:	e1ee      	b.n	8001368 <__aeabi_dadd+0x448>
 8000f8a:	2020      	movs	r0, #32
 8000f8c:	0039      	movs	r1, r7
 8000f8e:	4665      	mov	r5, ip
 8000f90:	1a80      	subs	r0, r0, r2
 8000f92:	4087      	lsls	r7, r0
 8000f94:	40d1      	lsrs	r1, r2
 8000f96:	4085      	lsls	r5, r0
 8000f98:	430d      	orrs	r5, r1
 8000f9a:	0039      	movs	r1, r7
 8000f9c:	1e4f      	subs	r7, r1, #1
 8000f9e:	41b9      	sbcs	r1, r7
 8000fa0:	4667      	mov	r7, ip
 8000fa2:	40d7      	lsrs	r7, r2
 8000fa4:	4329      	orrs	r1, r5
 8000fa6:	1bdb      	subs	r3, r3, r7
 8000fa8:	464a      	mov	r2, r9
 8000faa:	1a55      	subs	r5, r2, r1
 8000fac:	45a9      	cmp	r9, r5
 8000fae:	4189      	sbcs	r1, r1
 8000fb0:	4249      	negs	r1, r1
 8000fb2:	1a5b      	subs	r3, r3, r1
 8000fb4:	4698      	mov	r8, r3
 8000fb6:	4643      	mov	r3, r8
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	d400      	bmi.n	8000fbe <__aeabi_dadd+0x9e>
 8000fbc:	e0cc      	b.n	8001158 <__aeabi_dadd+0x238>
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	0a5b      	lsrs	r3, r3, #9
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	4643      	mov	r3, r8
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_dadd+0xae>
 8000fcc:	e12c      	b.n	8001228 <__aeabi_dadd+0x308>
 8000fce:	4640      	mov	r0, r8
 8000fd0:	f001 fdbe 	bl	8002b50 <__clzsi2>
 8000fd4:	0001      	movs	r1, r0
 8000fd6:	3908      	subs	r1, #8
 8000fd8:	2220      	movs	r2, #32
 8000fda:	0028      	movs	r0, r5
 8000fdc:	4643      	mov	r3, r8
 8000fde:	1a52      	subs	r2, r2, r1
 8000fe0:	408b      	lsls	r3, r1
 8000fe2:	40d0      	lsrs	r0, r2
 8000fe4:	408d      	lsls	r5, r1
 8000fe6:	4303      	orrs	r3, r0
 8000fe8:	428e      	cmp	r6, r1
 8000fea:	dd00      	ble.n	8000fee <__aeabi_dadd+0xce>
 8000fec:	e117      	b.n	800121e <__aeabi_dadd+0x2fe>
 8000fee:	1b8e      	subs	r6, r1, r6
 8000ff0:	1c72      	adds	r2, r6, #1
 8000ff2:	2a1f      	cmp	r2, #31
 8000ff4:	dd00      	ble.n	8000ff8 <__aeabi_dadd+0xd8>
 8000ff6:	e1a7      	b.n	8001348 <__aeabi_dadd+0x428>
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	002e      	movs	r6, r5
 8000ffe:	1a89      	subs	r1, r1, r2
 8001000:	408d      	lsls	r5, r1
 8001002:	4088      	lsls	r0, r1
 8001004:	40d6      	lsrs	r6, r2
 8001006:	40d3      	lsrs	r3, r2
 8001008:	1e69      	subs	r1, r5, #1
 800100a:	418d      	sbcs	r5, r1
 800100c:	4330      	orrs	r0, r6
 800100e:	4698      	mov	r8, r3
 8001010:	2600      	movs	r6, #0
 8001012:	4305      	orrs	r5, r0
 8001014:	076b      	lsls	r3, r5, #29
 8001016:	d009      	beq.n	800102c <__aeabi_dadd+0x10c>
 8001018:	230f      	movs	r3, #15
 800101a:	402b      	ands	r3, r5
 800101c:	2b04      	cmp	r3, #4
 800101e:	d005      	beq.n	800102c <__aeabi_dadd+0x10c>
 8001020:	1d2b      	adds	r3, r5, #4
 8001022:	42ab      	cmp	r3, r5
 8001024:	41ad      	sbcs	r5, r5
 8001026:	426d      	negs	r5, r5
 8001028:	44a8      	add	r8, r5
 800102a:	001d      	movs	r5, r3
 800102c:	4643      	mov	r3, r8
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	d400      	bmi.n	8001034 <__aeabi_dadd+0x114>
 8001032:	e094      	b.n	800115e <__aeabi_dadd+0x23e>
 8001034:	4b97      	ldr	r3, [pc, #604]	; (8001294 <__aeabi_dadd+0x374>)
 8001036:	1c72      	adds	r2, r6, #1
 8001038:	429a      	cmp	r2, r3
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x11e>
 800103c:	e09d      	b.n	800117a <__aeabi_dadd+0x25a>
 800103e:	4641      	mov	r1, r8
 8001040:	4b95      	ldr	r3, [pc, #596]	; (8001298 <__aeabi_dadd+0x378>)
 8001042:	08ed      	lsrs	r5, r5, #3
 8001044:	4019      	ands	r1, r3
 8001046:	000b      	movs	r3, r1
 8001048:	0552      	lsls	r2, r2, #21
 800104a:	0749      	lsls	r1, r1, #29
 800104c:	025b      	lsls	r3, r3, #9
 800104e:	4329      	orrs	r1, r5
 8001050:	0b1b      	lsrs	r3, r3, #12
 8001052:	0d52      	lsrs	r2, r2, #21
 8001054:	0512      	lsls	r2, r2, #20
 8001056:	4313      	orrs	r3, r2
 8001058:	07e4      	lsls	r4, r4, #31
 800105a:	4323      	orrs	r3, r4
 800105c:	0008      	movs	r0, r1
 800105e:	0019      	movs	r1, r3
 8001060:	bce0      	pop	{r5, r6, r7}
 8001062:	46ba      	mov	sl, r7
 8001064:	46b1      	mov	r9, r6
 8001066:	46a8      	mov	r8, r5
 8001068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800106a:	2a00      	cmp	r2, #0
 800106c:	d043      	beq.n	80010f6 <__aeabi_dadd+0x1d6>
 800106e:	1b8a      	subs	r2, r1, r6
 8001070:	2e00      	cmp	r6, #0
 8001072:	d000      	beq.n	8001076 <__aeabi_dadd+0x156>
 8001074:	e12a      	b.n	80012cc <__aeabi_dadd+0x3ac>
 8001076:	464c      	mov	r4, r9
 8001078:	431c      	orrs	r4, r3
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x15e>
 800107c:	e1d1      	b.n	8001422 <__aeabi_dadd+0x502>
 800107e:	1e54      	subs	r4, r2, #1
 8001080:	2a01      	cmp	r2, #1
 8001082:	d100      	bne.n	8001086 <__aeabi_dadd+0x166>
 8001084:	e21f      	b.n	80014c6 <__aeabi_dadd+0x5a6>
 8001086:	4d83      	ldr	r5, [pc, #524]	; (8001294 <__aeabi_dadd+0x374>)
 8001088:	42aa      	cmp	r2, r5
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x16e>
 800108c:	e272      	b.n	8001574 <__aeabi_dadd+0x654>
 800108e:	0022      	movs	r2, r4
 8001090:	e123      	b.n	80012da <__aeabi_dadd+0x3ba>
 8001092:	2a00      	cmp	r2, #0
 8001094:	dc00      	bgt.n	8001098 <__aeabi_dadd+0x178>
 8001096:	e098      	b.n	80011ca <__aeabi_dadd+0x2aa>
 8001098:	2900      	cmp	r1, #0
 800109a:	d042      	beq.n	8001122 <__aeabi_dadd+0x202>
 800109c:	497d      	ldr	r1, [pc, #500]	; (8001294 <__aeabi_dadd+0x374>)
 800109e:	428e      	cmp	r6, r1
 80010a0:	d100      	bne.n	80010a4 <__aeabi_dadd+0x184>
 80010a2:	e0da      	b.n	800125a <__aeabi_dadd+0x33a>
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	0028      	movs	r0, r5
 80010a8:	0409      	lsls	r1, r1, #16
 80010aa:	4308      	orrs	r0, r1
 80010ac:	4684      	mov	ip, r0
 80010ae:	2a38      	cmp	r2, #56	; 0x38
 80010b0:	dd00      	ble.n	80010b4 <__aeabi_dadd+0x194>
 80010b2:	e129      	b.n	8001308 <__aeabi_dadd+0x3e8>
 80010b4:	2a1f      	cmp	r2, #31
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_dadd+0x19a>
 80010b8:	e187      	b.n	80013ca <__aeabi_dadd+0x4aa>
 80010ba:	0011      	movs	r1, r2
 80010bc:	4665      	mov	r5, ip
 80010be:	3920      	subs	r1, #32
 80010c0:	40cd      	lsrs	r5, r1
 80010c2:	2a20      	cmp	r2, #32
 80010c4:	d004      	beq.n	80010d0 <__aeabi_dadd+0x1b0>
 80010c6:	2040      	movs	r0, #64	; 0x40
 80010c8:	4661      	mov	r1, ip
 80010ca:	1a82      	subs	r2, r0, r2
 80010cc:	4091      	lsls	r1, r2
 80010ce:	430f      	orrs	r7, r1
 80010d0:	0039      	movs	r1, r7
 80010d2:	1e4f      	subs	r7, r1, #1
 80010d4:	41b9      	sbcs	r1, r7
 80010d6:	430d      	orrs	r5, r1
 80010d8:	e11b      	b.n	8001312 <__aeabi_dadd+0x3f2>
 80010da:	0029      	movs	r1, r5
 80010dc:	4339      	orrs	r1, r7
 80010de:	d100      	bne.n	80010e2 <__aeabi_dadd+0x1c2>
 80010e0:	e0b5      	b.n	800124e <__aeabi_dadd+0x32e>
 80010e2:	1e51      	subs	r1, r2, #1
 80010e4:	2a01      	cmp	r2, #1
 80010e6:	d100      	bne.n	80010ea <__aeabi_dadd+0x1ca>
 80010e8:	e1ab      	b.n	8001442 <__aeabi_dadd+0x522>
 80010ea:	486a      	ldr	r0, [pc, #424]	; (8001294 <__aeabi_dadd+0x374>)
 80010ec:	4282      	cmp	r2, r0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_dadd+0x1d2>
 80010f0:	e1b2      	b.n	8001458 <__aeabi_dadd+0x538>
 80010f2:	000a      	movs	r2, r1
 80010f4:	e743      	b.n	8000f7e <__aeabi_dadd+0x5e>
 80010f6:	4969      	ldr	r1, [pc, #420]	; (800129c <__aeabi_dadd+0x37c>)
 80010f8:	1c75      	adds	r5, r6, #1
 80010fa:	420d      	tst	r5, r1
 80010fc:	d000      	beq.n	8001100 <__aeabi_dadd+0x1e0>
 80010fe:	e0cf      	b.n	80012a0 <__aeabi_dadd+0x380>
 8001100:	2e00      	cmp	r6, #0
 8001102:	d000      	beq.n	8001106 <__aeabi_dadd+0x1e6>
 8001104:	e193      	b.n	800142e <__aeabi_dadd+0x50e>
 8001106:	4649      	mov	r1, r9
 8001108:	4319      	orrs	r1, r3
 800110a:	d100      	bne.n	800110e <__aeabi_dadd+0x1ee>
 800110c:	e1d1      	b.n	80014b2 <__aeabi_dadd+0x592>
 800110e:	4661      	mov	r1, ip
 8001110:	4339      	orrs	r1, r7
 8001112:	d000      	beq.n	8001116 <__aeabi_dadd+0x1f6>
 8001114:	e1e3      	b.n	80014de <__aeabi_dadd+0x5be>
 8001116:	4649      	mov	r1, r9
 8001118:	0758      	lsls	r0, r3, #29
 800111a:	08c9      	lsrs	r1, r1, #3
 800111c:	4301      	orrs	r1, r0
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	e026      	b.n	8001170 <__aeabi_dadd+0x250>
 8001122:	0029      	movs	r1, r5
 8001124:	4339      	orrs	r1, r7
 8001126:	d100      	bne.n	800112a <__aeabi_dadd+0x20a>
 8001128:	e091      	b.n	800124e <__aeabi_dadd+0x32e>
 800112a:	1e51      	subs	r1, r2, #1
 800112c:	2a01      	cmp	r2, #1
 800112e:	d005      	beq.n	800113c <__aeabi_dadd+0x21c>
 8001130:	4858      	ldr	r0, [pc, #352]	; (8001294 <__aeabi_dadd+0x374>)
 8001132:	4282      	cmp	r2, r0
 8001134:	d100      	bne.n	8001138 <__aeabi_dadd+0x218>
 8001136:	e18f      	b.n	8001458 <__aeabi_dadd+0x538>
 8001138:	000a      	movs	r2, r1
 800113a:	e7b8      	b.n	80010ae <__aeabi_dadd+0x18e>
 800113c:	003d      	movs	r5, r7
 800113e:	444d      	add	r5, r9
 8001140:	454d      	cmp	r5, r9
 8001142:	4189      	sbcs	r1, r1
 8001144:	4463      	add	r3, ip
 8001146:	4698      	mov	r8, r3
 8001148:	4249      	negs	r1, r1
 800114a:	4488      	add	r8, r1
 800114c:	4643      	mov	r3, r8
 800114e:	2602      	movs	r6, #2
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	d500      	bpl.n	8001156 <__aeabi_dadd+0x236>
 8001154:	e0eb      	b.n	800132e <__aeabi_dadd+0x40e>
 8001156:	3e01      	subs	r6, #1
 8001158:	076b      	lsls	r3, r5, #29
 800115a:	d000      	beq.n	800115e <__aeabi_dadd+0x23e>
 800115c:	e75c      	b.n	8001018 <__aeabi_dadd+0xf8>
 800115e:	4643      	mov	r3, r8
 8001160:	08e9      	lsrs	r1, r5, #3
 8001162:	075a      	lsls	r2, r3, #29
 8001164:	4311      	orrs	r1, r2
 8001166:	0032      	movs	r2, r6
 8001168:	08db      	lsrs	r3, r3, #3
 800116a:	484a      	ldr	r0, [pc, #296]	; (8001294 <__aeabi_dadd+0x374>)
 800116c:	4282      	cmp	r2, r0
 800116e:	d021      	beq.n	80011b4 <__aeabi_dadd+0x294>
 8001170:	031b      	lsls	r3, r3, #12
 8001172:	0552      	lsls	r2, r2, #21
 8001174:	0b1b      	lsrs	r3, r3, #12
 8001176:	0d52      	lsrs	r2, r2, #21
 8001178:	e76c      	b.n	8001054 <__aeabi_dadd+0x134>
 800117a:	2300      	movs	r3, #0
 800117c:	2100      	movs	r1, #0
 800117e:	e769      	b.n	8001054 <__aeabi_dadd+0x134>
 8001180:	002a      	movs	r2, r5
 8001182:	433a      	orrs	r2, r7
 8001184:	d069      	beq.n	800125a <__aeabi_dadd+0x33a>
 8001186:	464a      	mov	r2, r9
 8001188:	0758      	lsls	r0, r3, #29
 800118a:	08d1      	lsrs	r1, r2, #3
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	031b      	lsls	r3, r3, #12
 8001192:	4308      	orrs	r0, r1
 8001194:	421a      	tst	r2, r3
 8001196:	d007      	beq.n	80011a8 <__aeabi_dadd+0x288>
 8001198:	0029      	movs	r1, r5
 800119a:	08ed      	lsrs	r5, r5, #3
 800119c:	421d      	tst	r5, r3
 800119e:	d103      	bne.n	80011a8 <__aeabi_dadd+0x288>
 80011a0:	002a      	movs	r2, r5
 80011a2:	08ff      	lsrs	r7, r7, #3
 80011a4:	0748      	lsls	r0, r1, #29
 80011a6:	4338      	orrs	r0, r7
 80011a8:	0f43      	lsrs	r3, r0, #29
 80011aa:	00c1      	lsls	r1, r0, #3
 80011ac:	075b      	lsls	r3, r3, #29
 80011ae:	08c9      	lsrs	r1, r1, #3
 80011b0:	4319      	orrs	r1, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	000a      	movs	r2, r1
 80011b6:	431a      	orrs	r2, r3
 80011b8:	d100      	bne.n	80011bc <__aeabi_dadd+0x29c>
 80011ba:	e213      	b.n	80015e4 <__aeabi_dadd+0x6c4>
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	0312      	lsls	r2, r2, #12
 80011c0:	4313      	orrs	r3, r2
 80011c2:	031b      	lsls	r3, r3, #12
 80011c4:	4a33      	ldr	r2, [pc, #204]	; (8001294 <__aeabi_dadd+0x374>)
 80011c6:	0b1b      	lsrs	r3, r3, #12
 80011c8:	e744      	b.n	8001054 <__aeabi_dadd+0x134>
 80011ca:	2a00      	cmp	r2, #0
 80011cc:	d04b      	beq.n	8001266 <__aeabi_dadd+0x346>
 80011ce:	1b8a      	subs	r2, r1, r6
 80011d0:	2e00      	cmp	r6, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dadd+0x2b6>
 80011d4:	e0e7      	b.n	80013a6 <__aeabi_dadd+0x486>
 80011d6:	482f      	ldr	r0, [pc, #188]	; (8001294 <__aeabi_dadd+0x374>)
 80011d8:	4281      	cmp	r1, r0
 80011da:	d100      	bne.n	80011de <__aeabi_dadd+0x2be>
 80011dc:	e195      	b.n	800150a <__aeabi_dadd+0x5ea>
 80011de:	2080      	movs	r0, #128	; 0x80
 80011e0:	0400      	lsls	r0, r0, #16
 80011e2:	4303      	orrs	r3, r0
 80011e4:	2a38      	cmp	r2, #56	; 0x38
 80011e6:	dd00      	ble.n	80011ea <__aeabi_dadd+0x2ca>
 80011e8:	e143      	b.n	8001472 <__aeabi_dadd+0x552>
 80011ea:	2a1f      	cmp	r2, #31
 80011ec:	dd00      	ble.n	80011f0 <__aeabi_dadd+0x2d0>
 80011ee:	e1db      	b.n	80015a8 <__aeabi_dadd+0x688>
 80011f0:	2020      	movs	r0, #32
 80011f2:	001d      	movs	r5, r3
 80011f4:	464e      	mov	r6, r9
 80011f6:	1a80      	subs	r0, r0, r2
 80011f8:	4085      	lsls	r5, r0
 80011fa:	40d6      	lsrs	r6, r2
 80011fc:	4335      	orrs	r5, r6
 80011fe:	464e      	mov	r6, r9
 8001200:	4086      	lsls	r6, r0
 8001202:	0030      	movs	r0, r6
 8001204:	40d3      	lsrs	r3, r2
 8001206:	1e46      	subs	r6, r0, #1
 8001208:	41b0      	sbcs	r0, r6
 800120a:	449c      	add	ip, r3
 800120c:	4305      	orrs	r5, r0
 800120e:	19ed      	adds	r5, r5, r7
 8001210:	42bd      	cmp	r5, r7
 8001212:	419b      	sbcs	r3, r3
 8001214:	425b      	negs	r3, r3
 8001216:	4463      	add	r3, ip
 8001218:	4698      	mov	r8, r3
 800121a:	000e      	movs	r6, r1
 800121c:	e07f      	b.n	800131e <__aeabi_dadd+0x3fe>
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <__aeabi_dadd+0x378>)
 8001220:	1a76      	subs	r6, r6, r1
 8001222:	4013      	ands	r3, r2
 8001224:	4698      	mov	r8, r3
 8001226:	e6f5      	b.n	8001014 <__aeabi_dadd+0xf4>
 8001228:	0028      	movs	r0, r5
 800122a:	f001 fc91 	bl	8002b50 <__clzsi2>
 800122e:	0001      	movs	r1, r0
 8001230:	3118      	adds	r1, #24
 8001232:	291f      	cmp	r1, #31
 8001234:	dc00      	bgt.n	8001238 <__aeabi_dadd+0x318>
 8001236:	e6cf      	b.n	8000fd8 <__aeabi_dadd+0xb8>
 8001238:	002b      	movs	r3, r5
 800123a:	3808      	subs	r0, #8
 800123c:	4083      	lsls	r3, r0
 800123e:	2500      	movs	r5, #0
 8001240:	e6d2      	b.n	8000fe8 <__aeabi_dadd+0xc8>
 8001242:	4662      	mov	r2, ip
 8001244:	433a      	orrs	r2, r7
 8001246:	0011      	movs	r1, r2
 8001248:	1e4f      	subs	r7, r1, #1
 800124a:	41b9      	sbcs	r1, r7
 800124c:	e6ac      	b.n	8000fa8 <__aeabi_dadd+0x88>
 800124e:	4649      	mov	r1, r9
 8001250:	0758      	lsls	r0, r3, #29
 8001252:	08c9      	lsrs	r1, r1, #3
 8001254:	4301      	orrs	r1, r0
 8001256:	08db      	lsrs	r3, r3, #3
 8001258:	e787      	b.n	800116a <__aeabi_dadd+0x24a>
 800125a:	4649      	mov	r1, r9
 800125c:	075a      	lsls	r2, r3, #29
 800125e:	08c9      	lsrs	r1, r1, #3
 8001260:	4311      	orrs	r1, r2
 8001262:	08db      	lsrs	r3, r3, #3
 8001264:	e7a6      	b.n	80011b4 <__aeabi_dadd+0x294>
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <__aeabi_dadd+0x37c>)
 8001268:	1c70      	adds	r0, r6, #1
 800126a:	4208      	tst	r0, r1
 800126c:	d000      	beq.n	8001270 <__aeabi_dadd+0x350>
 800126e:	e0bb      	b.n	80013e8 <__aeabi_dadd+0x4c8>
 8001270:	2e00      	cmp	r6, #0
 8001272:	d000      	beq.n	8001276 <__aeabi_dadd+0x356>
 8001274:	e114      	b.n	80014a0 <__aeabi_dadd+0x580>
 8001276:	4649      	mov	r1, r9
 8001278:	4319      	orrs	r1, r3
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x35e>
 800127c:	e175      	b.n	800156a <__aeabi_dadd+0x64a>
 800127e:	0029      	movs	r1, r5
 8001280:	4339      	orrs	r1, r7
 8001282:	d000      	beq.n	8001286 <__aeabi_dadd+0x366>
 8001284:	e17e      	b.n	8001584 <__aeabi_dadd+0x664>
 8001286:	4649      	mov	r1, r9
 8001288:	0758      	lsls	r0, r3, #29
 800128a:	08c9      	lsrs	r1, r1, #3
 800128c:	4301      	orrs	r1, r0
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	e76e      	b.n	8001170 <__aeabi_dadd+0x250>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	000007ff 	.word	0x000007ff
 8001298:	ff7fffff 	.word	0xff7fffff
 800129c:	000007fe 	.word	0x000007fe
 80012a0:	4649      	mov	r1, r9
 80012a2:	1bcd      	subs	r5, r1, r7
 80012a4:	4661      	mov	r1, ip
 80012a6:	1a58      	subs	r0, r3, r1
 80012a8:	45a9      	cmp	r9, r5
 80012aa:	4189      	sbcs	r1, r1
 80012ac:	4249      	negs	r1, r1
 80012ae:	4688      	mov	r8, r1
 80012b0:	0001      	movs	r1, r0
 80012b2:	4640      	mov	r0, r8
 80012b4:	1a09      	subs	r1, r1, r0
 80012b6:	4688      	mov	r8, r1
 80012b8:	0209      	lsls	r1, r1, #8
 80012ba:	d500      	bpl.n	80012be <__aeabi_dadd+0x39e>
 80012bc:	e0a6      	b.n	800140c <__aeabi_dadd+0x4ec>
 80012be:	4641      	mov	r1, r8
 80012c0:	4329      	orrs	r1, r5
 80012c2:	d000      	beq.n	80012c6 <__aeabi_dadd+0x3a6>
 80012c4:	e67f      	b.n	8000fc6 <__aeabi_dadd+0xa6>
 80012c6:	2300      	movs	r3, #0
 80012c8:	2400      	movs	r4, #0
 80012ca:	e751      	b.n	8001170 <__aeabi_dadd+0x250>
 80012cc:	4cc7      	ldr	r4, [pc, #796]	; (80015ec <__aeabi_dadd+0x6cc>)
 80012ce:	42a1      	cmp	r1, r4
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x3b4>
 80012d2:	e0c7      	b.n	8001464 <__aeabi_dadd+0x544>
 80012d4:	2480      	movs	r4, #128	; 0x80
 80012d6:	0424      	lsls	r4, r4, #16
 80012d8:	4323      	orrs	r3, r4
 80012da:	2a38      	cmp	r2, #56	; 0x38
 80012dc:	dc54      	bgt.n	8001388 <__aeabi_dadd+0x468>
 80012de:	2a1f      	cmp	r2, #31
 80012e0:	dd00      	ble.n	80012e4 <__aeabi_dadd+0x3c4>
 80012e2:	e0cc      	b.n	800147e <__aeabi_dadd+0x55e>
 80012e4:	2420      	movs	r4, #32
 80012e6:	4648      	mov	r0, r9
 80012e8:	1aa4      	subs	r4, r4, r2
 80012ea:	001d      	movs	r5, r3
 80012ec:	464e      	mov	r6, r9
 80012ee:	40a0      	lsls	r0, r4
 80012f0:	40d6      	lsrs	r6, r2
 80012f2:	40a5      	lsls	r5, r4
 80012f4:	0004      	movs	r4, r0
 80012f6:	40d3      	lsrs	r3, r2
 80012f8:	4662      	mov	r2, ip
 80012fa:	4335      	orrs	r5, r6
 80012fc:	1e66      	subs	r6, r4, #1
 80012fe:	41b4      	sbcs	r4, r6
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	469c      	mov	ip, r3
 8001304:	4325      	orrs	r5, r4
 8001306:	e044      	b.n	8001392 <__aeabi_dadd+0x472>
 8001308:	4662      	mov	r2, ip
 800130a:	433a      	orrs	r2, r7
 800130c:	0015      	movs	r5, r2
 800130e:	1e6f      	subs	r7, r5, #1
 8001310:	41bd      	sbcs	r5, r7
 8001312:	444d      	add	r5, r9
 8001314:	454d      	cmp	r5, r9
 8001316:	4189      	sbcs	r1, r1
 8001318:	4249      	negs	r1, r1
 800131a:	4688      	mov	r8, r1
 800131c:	4498      	add	r8, r3
 800131e:	4643      	mov	r3, r8
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	d400      	bmi.n	8001326 <__aeabi_dadd+0x406>
 8001324:	e718      	b.n	8001158 <__aeabi_dadd+0x238>
 8001326:	4bb1      	ldr	r3, [pc, #708]	; (80015ec <__aeabi_dadd+0x6cc>)
 8001328:	3601      	adds	r6, #1
 800132a:	429e      	cmp	r6, r3
 800132c:	d049      	beq.n	80013c2 <__aeabi_dadd+0x4a2>
 800132e:	4642      	mov	r2, r8
 8001330:	4baf      	ldr	r3, [pc, #700]	; (80015f0 <__aeabi_dadd+0x6d0>)
 8001332:	2101      	movs	r1, #1
 8001334:	401a      	ands	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	086a      	lsrs	r2, r5, #1
 800133a:	400d      	ands	r5, r1
 800133c:	4315      	orrs	r5, r2
 800133e:	07d9      	lsls	r1, r3, #31
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	4698      	mov	r8, r3
 8001344:	430d      	orrs	r5, r1
 8001346:	e665      	b.n	8001014 <__aeabi_dadd+0xf4>
 8001348:	0018      	movs	r0, r3
 800134a:	3e1f      	subs	r6, #31
 800134c:	40f0      	lsrs	r0, r6
 800134e:	2a20      	cmp	r2, #32
 8001350:	d003      	beq.n	800135a <__aeabi_dadd+0x43a>
 8001352:	2140      	movs	r1, #64	; 0x40
 8001354:	1a8a      	subs	r2, r1, r2
 8001356:	4093      	lsls	r3, r2
 8001358:	431d      	orrs	r5, r3
 800135a:	1e69      	subs	r1, r5, #1
 800135c:	418d      	sbcs	r5, r1
 800135e:	2300      	movs	r3, #0
 8001360:	2600      	movs	r6, #0
 8001362:	4698      	mov	r8, r3
 8001364:	4305      	orrs	r5, r0
 8001366:	e6f7      	b.n	8001158 <__aeabi_dadd+0x238>
 8001368:	0011      	movs	r1, r2
 800136a:	4665      	mov	r5, ip
 800136c:	3920      	subs	r1, #32
 800136e:	40cd      	lsrs	r5, r1
 8001370:	2a20      	cmp	r2, #32
 8001372:	d004      	beq.n	800137e <__aeabi_dadd+0x45e>
 8001374:	2040      	movs	r0, #64	; 0x40
 8001376:	4661      	mov	r1, ip
 8001378:	1a82      	subs	r2, r0, r2
 800137a:	4091      	lsls	r1, r2
 800137c:	430f      	orrs	r7, r1
 800137e:	0039      	movs	r1, r7
 8001380:	1e4f      	subs	r7, r1, #1
 8001382:	41b9      	sbcs	r1, r7
 8001384:	4329      	orrs	r1, r5
 8001386:	e60f      	b.n	8000fa8 <__aeabi_dadd+0x88>
 8001388:	464a      	mov	r2, r9
 800138a:	4313      	orrs	r3, r2
 800138c:	001d      	movs	r5, r3
 800138e:	1e6b      	subs	r3, r5, #1
 8001390:	419d      	sbcs	r5, r3
 8001392:	1b7d      	subs	r5, r7, r5
 8001394:	42af      	cmp	r7, r5
 8001396:	419b      	sbcs	r3, r3
 8001398:	4662      	mov	r2, ip
 800139a:	425b      	negs	r3, r3
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4698      	mov	r8, r3
 80013a0:	4654      	mov	r4, sl
 80013a2:	000e      	movs	r6, r1
 80013a4:	e607      	b.n	8000fb6 <__aeabi_dadd+0x96>
 80013a6:	4648      	mov	r0, r9
 80013a8:	4318      	orrs	r0, r3
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0x48e>
 80013ac:	e0b3      	b.n	8001516 <__aeabi_dadd+0x5f6>
 80013ae:	1e50      	subs	r0, r2, #1
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dadd+0x496>
 80013b4:	e10d      	b.n	80015d2 <__aeabi_dadd+0x6b2>
 80013b6:	4d8d      	ldr	r5, [pc, #564]	; (80015ec <__aeabi_dadd+0x6cc>)
 80013b8:	42aa      	cmp	r2, r5
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x49e>
 80013bc:	e0a5      	b.n	800150a <__aeabi_dadd+0x5ea>
 80013be:	0002      	movs	r2, r0
 80013c0:	e710      	b.n	80011e4 <__aeabi_dadd+0x2c4>
 80013c2:	0032      	movs	r2, r6
 80013c4:	2300      	movs	r3, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	e644      	b.n	8001054 <__aeabi_dadd+0x134>
 80013ca:	2120      	movs	r1, #32
 80013cc:	0038      	movs	r0, r7
 80013ce:	1a89      	subs	r1, r1, r2
 80013d0:	4665      	mov	r5, ip
 80013d2:	408f      	lsls	r7, r1
 80013d4:	408d      	lsls	r5, r1
 80013d6:	40d0      	lsrs	r0, r2
 80013d8:	1e79      	subs	r1, r7, #1
 80013da:	418f      	sbcs	r7, r1
 80013dc:	4305      	orrs	r5, r0
 80013de:	433d      	orrs	r5, r7
 80013e0:	4667      	mov	r7, ip
 80013e2:	40d7      	lsrs	r7, r2
 80013e4:	19db      	adds	r3, r3, r7
 80013e6:	e794      	b.n	8001312 <__aeabi_dadd+0x3f2>
 80013e8:	4a80      	ldr	r2, [pc, #512]	; (80015ec <__aeabi_dadd+0x6cc>)
 80013ea:	4290      	cmp	r0, r2
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dadd+0x4d0>
 80013ee:	e0ec      	b.n	80015ca <__aeabi_dadd+0x6aa>
 80013f0:	0039      	movs	r1, r7
 80013f2:	4449      	add	r1, r9
 80013f4:	4549      	cmp	r1, r9
 80013f6:	4192      	sbcs	r2, r2
 80013f8:	4463      	add	r3, ip
 80013fa:	4252      	negs	r2, r2
 80013fc:	189b      	adds	r3, r3, r2
 80013fe:	07dd      	lsls	r5, r3, #31
 8001400:	0849      	lsrs	r1, r1, #1
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	4698      	mov	r8, r3
 8001406:	0006      	movs	r6, r0
 8001408:	430d      	orrs	r5, r1
 800140a:	e6a5      	b.n	8001158 <__aeabi_dadd+0x238>
 800140c:	464a      	mov	r2, r9
 800140e:	1abd      	subs	r5, r7, r2
 8001410:	42af      	cmp	r7, r5
 8001412:	4189      	sbcs	r1, r1
 8001414:	4662      	mov	r2, ip
 8001416:	4249      	negs	r1, r1
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	1a5b      	subs	r3, r3, r1
 800141c:	4698      	mov	r8, r3
 800141e:	4654      	mov	r4, sl
 8001420:	e5d1      	b.n	8000fc6 <__aeabi_dadd+0xa6>
 8001422:	076c      	lsls	r4, r5, #29
 8001424:	08f9      	lsrs	r1, r7, #3
 8001426:	4321      	orrs	r1, r4
 8001428:	08eb      	lsrs	r3, r5, #3
 800142a:	0004      	movs	r4, r0
 800142c:	e69d      	b.n	800116a <__aeabi_dadd+0x24a>
 800142e:	464a      	mov	r2, r9
 8001430:	431a      	orrs	r2, r3
 8001432:	d175      	bne.n	8001520 <__aeabi_dadd+0x600>
 8001434:	4661      	mov	r1, ip
 8001436:	4339      	orrs	r1, r7
 8001438:	d114      	bne.n	8001464 <__aeabi_dadd+0x544>
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	2400      	movs	r4, #0
 800143e:	031b      	lsls	r3, r3, #12
 8001440:	e6bc      	b.n	80011bc <__aeabi_dadd+0x29c>
 8001442:	464a      	mov	r2, r9
 8001444:	1bd5      	subs	r5, r2, r7
 8001446:	45a9      	cmp	r9, r5
 8001448:	4189      	sbcs	r1, r1
 800144a:	4662      	mov	r2, ip
 800144c:	4249      	negs	r1, r1
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	1a5b      	subs	r3, r3, r1
 8001452:	4698      	mov	r8, r3
 8001454:	2601      	movs	r6, #1
 8001456:	e5ae      	b.n	8000fb6 <__aeabi_dadd+0x96>
 8001458:	464a      	mov	r2, r9
 800145a:	08d1      	lsrs	r1, r2, #3
 800145c:	075a      	lsls	r2, r3, #29
 800145e:	4311      	orrs	r1, r2
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	e6a7      	b.n	80011b4 <__aeabi_dadd+0x294>
 8001464:	4663      	mov	r3, ip
 8001466:	08f9      	lsrs	r1, r7, #3
 8001468:	075a      	lsls	r2, r3, #29
 800146a:	4654      	mov	r4, sl
 800146c:	4311      	orrs	r1, r2
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	e6a0      	b.n	80011b4 <__aeabi_dadd+0x294>
 8001472:	464a      	mov	r2, r9
 8001474:	4313      	orrs	r3, r2
 8001476:	001d      	movs	r5, r3
 8001478:	1e6b      	subs	r3, r5, #1
 800147a:	419d      	sbcs	r5, r3
 800147c:	e6c7      	b.n	800120e <__aeabi_dadd+0x2ee>
 800147e:	0014      	movs	r4, r2
 8001480:	001e      	movs	r6, r3
 8001482:	3c20      	subs	r4, #32
 8001484:	40e6      	lsrs	r6, r4
 8001486:	2a20      	cmp	r2, #32
 8001488:	d005      	beq.n	8001496 <__aeabi_dadd+0x576>
 800148a:	2440      	movs	r4, #64	; 0x40
 800148c:	1aa2      	subs	r2, r4, r2
 800148e:	4093      	lsls	r3, r2
 8001490:	464a      	mov	r2, r9
 8001492:	431a      	orrs	r2, r3
 8001494:	4691      	mov	r9, r2
 8001496:	464d      	mov	r5, r9
 8001498:	1e6b      	subs	r3, r5, #1
 800149a:	419d      	sbcs	r5, r3
 800149c:	4335      	orrs	r5, r6
 800149e:	e778      	b.n	8001392 <__aeabi_dadd+0x472>
 80014a0:	464a      	mov	r2, r9
 80014a2:	431a      	orrs	r2, r3
 80014a4:	d000      	beq.n	80014a8 <__aeabi_dadd+0x588>
 80014a6:	e66b      	b.n	8001180 <__aeabi_dadd+0x260>
 80014a8:	076b      	lsls	r3, r5, #29
 80014aa:	08f9      	lsrs	r1, r7, #3
 80014ac:	4319      	orrs	r1, r3
 80014ae:	08eb      	lsrs	r3, r5, #3
 80014b0:	e680      	b.n	80011b4 <__aeabi_dadd+0x294>
 80014b2:	4661      	mov	r1, ip
 80014b4:	4339      	orrs	r1, r7
 80014b6:	d054      	beq.n	8001562 <__aeabi_dadd+0x642>
 80014b8:	4663      	mov	r3, ip
 80014ba:	08f9      	lsrs	r1, r7, #3
 80014bc:	075c      	lsls	r4, r3, #29
 80014be:	4321      	orrs	r1, r4
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	0004      	movs	r4, r0
 80014c4:	e654      	b.n	8001170 <__aeabi_dadd+0x250>
 80014c6:	464a      	mov	r2, r9
 80014c8:	1abd      	subs	r5, r7, r2
 80014ca:	42af      	cmp	r7, r5
 80014cc:	4189      	sbcs	r1, r1
 80014ce:	4662      	mov	r2, ip
 80014d0:	4249      	negs	r1, r1
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	1a5b      	subs	r3, r3, r1
 80014d6:	4698      	mov	r8, r3
 80014d8:	0004      	movs	r4, r0
 80014da:	2601      	movs	r6, #1
 80014dc:	e56b      	b.n	8000fb6 <__aeabi_dadd+0x96>
 80014de:	464a      	mov	r2, r9
 80014e0:	1bd5      	subs	r5, r2, r7
 80014e2:	45a9      	cmp	r9, r5
 80014e4:	4189      	sbcs	r1, r1
 80014e6:	4662      	mov	r2, ip
 80014e8:	4249      	negs	r1, r1
 80014ea:	1a9a      	subs	r2, r3, r2
 80014ec:	1a52      	subs	r2, r2, r1
 80014ee:	4690      	mov	r8, r2
 80014f0:	0212      	lsls	r2, r2, #8
 80014f2:	d532      	bpl.n	800155a <__aeabi_dadd+0x63a>
 80014f4:	464a      	mov	r2, r9
 80014f6:	1abd      	subs	r5, r7, r2
 80014f8:	42af      	cmp	r7, r5
 80014fa:	4189      	sbcs	r1, r1
 80014fc:	4662      	mov	r2, ip
 80014fe:	4249      	negs	r1, r1
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	4698      	mov	r8, r3
 8001506:	0004      	movs	r4, r0
 8001508:	e584      	b.n	8001014 <__aeabi_dadd+0xf4>
 800150a:	4663      	mov	r3, ip
 800150c:	08f9      	lsrs	r1, r7, #3
 800150e:	075a      	lsls	r2, r3, #29
 8001510:	4311      	orrs	r1, r2
 8001512:	08db      	lsrs	r3, r3, #3
 8001514:	e64e      	b.n	80011b4 <__aeabi_dadd+0x294>
 8001516:	08f9      	lsrs	r1, r7, #3
 8001518:	0768      	lsls	r0, r5, #29
 800151a:	4301      	orrs	r1, r0
 800151c:	08eb      	lsrs	r3, r5, #3
 800151e:	e624      	b.n	800116a <__aeabi_dadd+0x24a>
 8001520:	4662      	mov	r2, ip
 8001522:	433a      	orrs	r2, r7
 8001524:	d100      	bne.n	8001528 <__aeabi_dadd+0x608>
 8001526:	e698      	b.n	800125a <__aeabi_dadd+0x33a>
 8001528:	464a      	mov	r2, r9
 800152a:	08d1      	lsrs	r1, r2, #3
 800152c:	075a      	lsls	r2, r3, #29
 800152e:	4311      	orrs	r1, r2
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	031b      	lsls	r3, r3, #12
 8001536:	421a      	tst	r2, r3
 8001538:	d008      	beq.n	800154c <__aeabi_dadd+0x62c>
 800153a:	4660      	mov	r0, ip
 800153c:	08c5      	lsrs	r5, r0, #3
 800153e:	421d      	tst	r5, r3
 8001540:	d104      	bne.n	800154c <__aeabi_dadd+0x62c>
 8001542:	4654      	mov	r4, sl
 8001544:	002a      	movs	r2, r5
 8001546:	08f9      	lsrs	r1, r7, #3
 8001548:	0743      	lsls	r3, r0, #29
 800154a:	4319      	orrs	r1, r3
 800154c:	0f4b      	lsrs	r3, r1, #29
 800154e:	00c9      	lsls	r1, r1, #3
 8001550:	075b      	lsls	r3, r3, #29
 8001552:	08c9      	lsrs	r1, r1, #3
 8001554:	4319      	orrs	r1, r3
 8001556:	0013      	movs	r3, r2
 8001558:	e62c      	b.n	80011b4 <__aeabi_dadd+0x294>
 800155a:	4641      	mov	r1, r8
 800155c:	4329      	orrs	r1, r5
 800155e:	d000      	beq.n	8001562 <__aeabi_dadd+0x642>
 8001560:	e5fa      	b.n	8001158 <__aeabi_dadd+0x238>
 8001562:	2300      	movs	r3, #0
 8001564:	000a      	movs	r2, r1
 8001566:	2400      	movs	r4, #0
 8001568:	e602      	b.n	8001170 <__aeabi_dadd+0x250>
 800156a:	076b      	lsls	r3, r5, #29
 800156c:	08f9      	lsrs	r1, r7, #3
 800156e:	4319      	orrs	r1, r3
 8001570:	08eb      	lsrs	r3, r5, #3
 8001572:	e5fd      	b.n	8001170 <__aeabi_dadd+0x250>
 8001574:	4663      	mov	r3, ip
 8001576:	08f9      	lsrs	r1, r7, #3
 8001578:	075b      	lsls	r3, r3, #29
 800157a:	4319      	orrs	r1, r3
 800157c:	4663      	mov	r3, ip
 800157e:	0004      	movs	r4, r0
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	e617      	b.n	80011b4 <__aeabi_dadd+0x294>
 8001584:	003d      	movs	r5, r7
 8001586:	444d      	add	r5, r9
 8001588:	4463      	add	r3, ip
 800158a:	454d      	cmp	r5, r9
 800158c:	4189      	sbcs	r1, r1
 800158e:	4698      	mov	r8, r3
 8001590:	4249      	negs	r1, r1
 8001592:	4488      	add	r8, r1
 8001594:	4643      	mov	r3, r8
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	d400      	bmi.n	800159c <__aeabi_dadd+0x67c>
 800159a:	e5dd      	b.n	8001158 <__aeabi_dadd+0x238>
 800159c:	4642      	mov	r2, r8
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <__aeabi_dadd+0x6d0>)
 80015a0:	2601      	movs	r6, #1
 80015a2:	401a      	ands	r2, r3
 80015a4:	4690      	mov	r8, r2
 80015a6:	e5d7      	b.n	8001158 <__aeabi_dadd+0x238>
 80015a8:	0010      	movs	r0, r2
 80015aa:	001e      	movs	r6, r3
 80015ac:	3820      	subs	r0, #32
 80015ae:	40c6      	lsrs	r6, r0
 80015b0:	2a20      	cmp	r2, #32
 80015b2:	d005      	beq.n	80015c0 <__aeabi_dadd+0x6a0>
 80015b4:	2040      	movs	r0, #64	; 0x40
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	4093      	lsls	r3, r2
 80015ba:	464a      	mov	r2, r9
 80015bc:	431a      	orrs	r2, r3
 80015be:	4691      	mov	r9, r2
 80015c0:	464d      	mov	r5, r9
 80015c2:	1e6b      	subs	r3, r5, #1
 80015c4:	419d      	sbcs	r5, r3
 80015c6:	4335      	orrs	r5, r6
 80015c8:	e621      	b.n	800120e <__aeabi_dadd+0x2ee>
 80015ca:	0002      	movs	r2, r0
 80015cc:	2300      	movs	r3, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	e540      	b.n	8001054 <__aeabi_dadd+0x134>
 80015d2:	464a      	mov	r2, r9
 80015d4:	19d5      	adds	r5, r2, r7
 80015d6:	42bd      	cmp	r5, r7
 80015d8:	4189      	sbcs	r1, r1
 80015da:	4463      	add	r3, ip
 80015dc:	4698      	mov	r8, r3
 80015de:	4249      	negs	r1, r1
 80015e0:	4488      	add	r8, r1
 80015e2:	e5b3      	b.n	800114c <__aeabi_dadd+0x22c>
 80015e4:	2100      	movs	r1, #0
 80015e6:	4a01      	ldr	r2, [pc, #4]	; (80015ec <__aeabi_dadd+0x6cc>)
 80015e8:	000b      	movs	r3, r1
 80015ea:	e533      	b.n	8001054 <__aeabi_dadd+0x134>
 80015ec:	000007ff 	.word	0x000007ff
 80015f0:	ff7fffff 	.word	0xff7fffff

080015f4 <__aeabi_ddiv>:
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	4657      	mov	r7, sl
 80015f8:	464e      	mov	r6, r9
 80015fa:	4645      	mov	r5, r8
 80015fc:	46de      	mov	lr, fp
 80015fe:	b5e0      	push	{r5, r6, r7, lr}
 8001600:	4681      	mov	r9, r0
 8001602:	0005      	movs	r5, r0
 8001604:	030c      	lsls	r4, r1, #12
 8001606:	0048      	lsls	r0, r1, #1
 8001608:	4692      	mov	sl, r2
 800160a:	001f      	movs	r7, r3
 800160c:	b085      	sub	sp, #20
 800160e:	0b24      	lsrs	r4, r4, #12
 8001610:	0d40      	lsrs	r0, r0, #21
 8001612:	0fce      	lsrs	r6, r1, #31
 8001614:	2800      	cmp	r0, #0
 8001616:	d059      	beq.n	80016cc <__aeabi_ddiv+0xd8>
 8001618:	4b87      	ldr	r3, [pc, #540]	; (8001838 <__aeabi_ddiv+0x244>)
 800161a:	4298      	cmp	r0, r3
 800161c:	d100      	bne.n	8001620 <__aeabi_ddiv+0x2c>
 800161e:	e098      	b.n	8001752 <__aeabi_ddiv+0x15e>
 8001620:	0f6b      	lsrs	r3, r5, #29
 8001622:	00e4      	lsls	r4, r4, #3
 8001624:	431c      	orrs	r4, r3
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	4323      	orrs	r3, r4
 800162c:	4698      	mov	r8, r3
 800162e:	4b83      	ldr	r3, [pc, #524]	; (800183c <__aeabi_ddiv+0x248>)
 8001630:	00ed      	lsls	r5, r5, #3
 8001632:	469b      	mov	fp, r3
 8001634:	2300      	movs	r3, #0
 8001636:	4699      	mov	r9, r3
 8001638:	4483      	add	fp, r0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	033c      	lsls	r4, r7, #12
 800163e:	007b      	lsls	r3, r7, #1
 8001640:	4650      	mov	r0, sl
 8001642:	0b24      	lsrs	r4, r4, #12
 8001644:	0d5b      	lsrs	r3, r3, #21
 8001646:	0fff      	lsrs	r7, r7, #31
 8001648:	2b00      	cmp	r3, #0
 800164a:	d067      	beq.n	800171c <__aeabi_ddiv+0x128>
 800164c:	4a7a      	ldr	r2, [pc, #488]	; (8001838 <__aeabi_ddiv+0x244>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d018      	beq.n	8001684 <__aeabi_ddiv+0x90>
 8001652:	497a      	ldr	r1, [pc, #488]	; (800183c <__aeabi_ddiv+0x248>)
 8001654:	0f42      	lsrs	r2, r0, #29
 8001656:	468c      	mov	ip, r1
 8001658:	00e4      	lsls	r4, r4, #3
 800165a:	4659      	mov	r1, fp
 800165c:	4314      	orrs	r4, r2
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	4463      	add	r3, ip
 8001662:	0412      	lsls	r2, r2, #16
 8001664:	1acb      	subs	r3, r1, r3
 8001666:	4314      	orrs	r4, r2
 8001668:	469b      	mov	fp, r3
 800166a:	00c2      	lsls	r2, r0, #3
 800166c:	2000      	movs	r0, #0
 800166e:	0033      	movs	r3, r6
 8001670:	407b      	eors	r3, r7
 8001672:	469a      	mov	sl, r3
 8001674:	464b      	mov	r3, r9
 8001676:	2b0f      	cmp	r3, #15
 8001678:	d900      	bls.n	800167c <__aeabi_ddiv+0x88>
 800167a:	e0ef      	b.n	800185c <__aeabi_ddiv+0x268>
 800167c:	4970      	ldr	r1, [pc, #448]	; (8001840 <__aeabi_ddiv+0x24c>)
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	58cb      	ldr	r3, [r1, r3]
 8001682:	469f      	mov	pc, r3
 8001684:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <__aeabi_ddiv+0x250>)
 8001686:	4652      	mov	r2, sl
 8001688:	469c      	mov	ip, r3
 800168a:	4322      	orrs	r2, r4
 800168c:	44e3      	add	fp, ip
 800168e:	2a00      	cmp	r2, #0
 8001690:	d000      	beq.n	8001694 <__aeabi_ddiv+0xa0>
 8001692:	e095      	b.n	80017c0 <__aeabi_ddiv+0x1cc>
 8001694:	4649      	mov	r1, r9
 8001696:	2302      	movs	r3, #2
 8001698:	4319      	orrs	r1, r3
 800169a:	4689      	mov	r9, r1
 800169c:	2400      	movs	r4, #0
 800169e:	2002      	movs	r0, #2
 80016a0:	e7e5      	b.n	800166e <__aeabi_ddiv+0x7a>
 80016a2:	2300      	movs	r3, #0
 80016a4:	2400      	movs	r4, #0
 80016a6:	2500      	movs	r5, #0
 80016a8:	4652      	mov	r2, sl
 80016aa:	051b      	lsls	r3, r3, #20
 80016ac:	4323      	orrs	r3, r4
 80016ae:	07d2      	lsls	r2, r2, #31
 80016b0:	4313      	orrs	r3, r2
 80016b2:	0028      	movs	r0, r5
 80016b4:	0019      	movs	r1, r3
 80016b6:	b005      	add	sp, #20
 80016b8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ba:	46bb      	mov	fp, r7
 80016bc:	46b2      	mov	sl, r6
 80016be:	46a9      	mov	r9, r5
 80016c0:	46a0      	mov	r8, r4
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	2400      	movs	r4, #0
 80016c6:	2500      	movs	r5, #0
 80016c8:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <__aeabi_ddiv+0x244>)
 80016ca:	e7ed      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 80016cc:	464b      	mov	r3, r9
 80016ce:	4323      	orrs	r3, r4
 80016d0:	4698      	mov	r8, r3
 80016d2:	d100      	bne.n	80016d6 <__aeabi_ddiv+0xe2>
 80016d4:	e089      	b.n	80017ea <__aeabi_ddiv+0x1f6>
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d100      	bne.n	80016dc <__aeabi_ddiv+0xe8>
 80016da:	e1e0      	b.n	8001a9e <__aeabi_ddiv+0x4aa>
 80016dc:	0020      	movs	r0, r4
 80016de:	f001 fa37 	bl	8002b50 <__clzsi2>
 80016e2:	0001      	movs	r1, r0
 80016e4:	0002      	movs	r2, r0
 80016e6:	390b      	subs	r1, #11
 80016e8:	231d      	movs	r3, #29
 80016ea:	1a5b      	subs	r3, r3, r1
 80016ec:	4649      	mov	r1, r9
 80016ee:	0010      	movs	r0, r2
 80016f0:	40d9      	lsrs	r1, r3
 80016f2:	3808      	subs	r0, #8
 80016f4:	4084      	lsls	r4, r0
 80016f6:	000b      	movs	r3, r1
 80016f8:	464d      	mov	r5, r9
 80016fa:	4323      	orrs	r3, r4
 80016fc:	4698      	mov	r8, r3
 80016fe:	4085      	lsls	r5, r0
 8001700:	4851      	ldr	r0, [pc, #324]	; (8001848 <__aeabi_ddiv+0x254>)
 8001702:	033c      	lsls	r4, r7, #12
 8001704:	1a83      	subs	r3, r0, r2
 8001706:	469b      	mov	fp, r3
 8001708:	2300      	movs	r3, #0
 800170a:	4699      	mov	r9, r3
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	007b      	lsls	r3, r7, #1
 8001710:	4650      	mov	r0, sl
 8001712:	0b24      	lsrs	r4, r4, #12
 8001714:	0d5b      	lsrs	r3, r3, #21
 8001716:	0fff      	lsrs	r7, r7, #31
 8001718:	2b00      	cmp	r3, #0
 800171a:	d197      	bne.n	800164c <__aeabi_ddiv+0x58>
 800171c:	4652      	mov	r2, sl
 800171e:	4322      	orrs	r2, r4
 8001720:	d055      	beq.n	80017ce <__aeabi_ddiv+0x1da>
 8001722:	2c00      	cmp	r4, #0
 8001724:	d100      	bne.n	8001728 <__aeabi_ddiv+0x134>
 8001726:	e1ca      	b.n	8001abe <__aeabi_ddiv+0x4ca>
 8001728:	0020      	movs	r0, r4
 800172a:	f001 fa11 	bl	8002b50 <__clzsi2>
 800172e:	0002      	movs	r2, r0
 8001730:	3a0b      	subs	r2, #11
 8001732:	231d      	movs	r3, #29
 8001734:	0001      	movs	r1, r0
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	4652      	mov	r2, sl
 800173a:	3908      	subs	r1, #8
 800173c:	40da      	lsrs	r2, r3
 800173e:	408c      	lsls	r4, r1
 8001740:	4314      	orrs	r4, r2
 8001742:	4652      	mov	r2, sl
 8001744:	408a      	lsls	r2, r1
 8001746:	4b41      	ldr	r3, [pc, #260]	; (800184c <__aeabi_ddiv+0x258>)
 8001748:	4458      	add	r0, fp
 800174a:	469b      	mov	fp, r3
 800174c:	4483      	add	fp, r0
 800174e:	2000      	movs	r0, #0
 8001750:	e78d      	b.n	800166e <__aeabi_ddiv+0x7a>
 8001752:	464b      	mov	r3, r9
 8001754:	4323      	orrs	r3, r4
 8001756:	4698      	mov	r8, r3
 8001758:	d140      	bne.n	80017dc <__aeabi_ddiv+0x1e8>
 800175a:	2308      	movs	r3, #8
 800175c:	4699      	mov	r9, r3
 800175e:	3b06      	subs	r3, #6
 8001760:	2500      	movs	r5, #0
 8001762:	4683      	mov	fp, r0
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	e769      	b.n	800163c <__aeabi_ddiv+0x48>
 8001768:	46b2      	mov	sl, r6
 800176a:	9b00      	ldr	r3, [sp, #0]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d0a9      	beq.n	80016c4 <__aeabi_ddiv+0xd0>
 8001770:	2b03      	cmp	r3, #3
 8001772:	d100      	bne.n	8001776 <__aeabi_ddiv+0x182>
 8001774:	e211      	b.n	8001b9a <__aeabi_ddiv+0x5a6>
 8001776:	2b01      	cmp	r3, #1
 8001778:	d093      	beq.n	80016a2 <__aeabi_ddiv+0xae>
 800177a:	4a35      	ldr	r2, [pc, #212]	; (8001850 <__aeabi_ddiv+0x25c>)
 800177c:	445a      	add	r2, fp
 800177e:	2a00      	cmp	r2, #0
 8001780:	dc00      	bgt.n	8001784 <__aeabi_ddiv+0x190>
 8001782:	e13c      	b.n	80019fe <__aeabi_ddiv+0x40a>
 8001784:	076b      	lsls	r3, r5, #29
 8001786:	d000      	beq.n	800178a <__aeabi_ddiv+0x196>
 8001788:	e1a7      	b.n	8001ada <__aeabi_ddiv+0x4e6>
 800178a:	08ed      	lsrs	r5, r5, #3
 800178c:	4643      	mov	r3, r8
 800178e:	01db      	lsls	r3, r3, #7
 8001790:	d506      	bpl.n	80017a0 <__aeabi_ddiv+0x1ac>
 8001792:	4642      	mov	r2, r8
 8001794:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <__aeabi_ddiv+0x260>)
 8001796:	401a      	ands	r2, r3
 8001798:	4690      	mov	r8, r2
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	00d2      	lsls	r2, r2, #3
 800179e:	445a      	add	r2, fp
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <__aeabi_ddiv+0x264>)
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dc8e      	bgt.n	80016c4 <__aeabi_ddiv+0xd0>
 80017a6:	4643      	mov	r3, r8
 80017a8:	0552      	lsls	r2, r2, #21
 80017aa:	0758      	lsls	r0, r3, #29
 80017ac:	025c      	lsls	r4, r3, #9
 80017ae:	4305      	orrs	r5, r0
 80017b0:	0b24      	lsrs	r4, r4, #12
 80017b2:	0d53      	lsrs	r3, r2, #21
 80017b4:	e778      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 80017b6:	46ba      	mov	sl, r7
 80017b8:	46a0      	mov	r8, r4
 80017ba:	0015      	movs	r5, r2
 80017bc:	9000      	str	r0, [sp, #0]
 80017be:	e7d4      	b.n	800176a <__aeabi_ddiv+0x176>
 80017c0:	464a      	mov	r2, r9
 80017c2:	2303      	movs	r3, #3
 80017c4:	431a      	orrs	r2, r3
 80017c6:	4691      	mov	r9, r2
 80017c8:	2003      	movs	r0, #3
 80017ca:	4652      	mov	r2, sl
 80017cc:	e74f      	b.n	800166e <__aeabi_ddiv+0x7a>
 80017ce:	4649      	mov	r1, r9
 80017d0:	2301      	movs	r3, #1
 80017d2:	4319      	orrs	r1, r3
 80017d4:	4689      	mov	r9, r1
 80017d6:	2400      	movs	r4, #0
 80017d8:	2001      	movs	r0, #1
 80017da:	e748      	b.n	800166e <__aeabi_ddiv+0x7a>
 80017dc:	230c      	movs	r3, #12
 80017de:	4699      	mov	r9, r3
 80017e0:	3b09      	subs	r3, #9
 80017e2:	46a0      	mov	r8, r4
 80017e4:	4683      	mov	fp, r0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	e728      	b.n	800163c <__aeabi_ddiv+0x48>
 80017ea:	2304      	movs	r3, #4
 80017ec:	4699      	mov	r9, r3
 80017ee:	2300      	movs	r3, #0
 80017f0:	469b      	mov	fp, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	2500      	movs	r5, #0
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	e720      	b.n	800163c <__aeabi_ddiv+0x48>
 80017fa:	2300      	movs	r3, #0
 80017fc:	2480      	movs	r4, #128	; 0x80
 80017fe:	469a      	mov	sl, r3
 8001800:	2500      	movs	r5, #0
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <__aeabi_ddiv+0x244>)
 8001804:	0324      	lsls	r4, r4, #12
 8001806:	e74f      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	4641      	mov	r1, r8
 800180c:	031b      	lsls	r3, r3, #12
 800180e:	4219      	tst	r1, r3
 8001810:	d008      	beq.n	8001824 <__aeabi_ddiv+0x230>
 8001812:	421c      	tst	r4, r3
 8001814:	d106      	bne.n	8001824 <__aeabi_ddiv+0x230>
 8001816:	431c      	orrs	r4, r3
 8001818:	0324      	lsls	r4, r4, #12
 800181a:	46ba      	mov	sl, r7
 800181c:	0015      	movs	r5, r2
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <__aeabi_ddiv+0x244>)
 8001820:	0b24      	lsrs	r4, r4, #12
 8001822:	e741      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001824:	2480      	movs	r4, #128	; 0x80
 8001826:	4643      	mov	r3, r8
 8001828:	0324      	lsls	r4, r4, #12
 800182a:	431c      	orrs	r4, r3
 800182c:	0324      	lsls	r4, r4, #12
 800182e:	46b2      	mov	sl, r6
 8001830:	4b01      	ldr	r3, [pc, #4]	; (8001838 <__aeabi_ddiv+0x244>)
 8001832:	0b24      	lsrs	r4, r4, #12
 8001834:	e738      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	000007ff 	.word	0x000007ff
 800183c:	fffffc01 	.word	0xfffffc01
 8001840:	080095e4 	.word	0x080095e4
 8001844:	fffff801 	.word	0xfffff801
 8001848:	fffffc0d 	.word	0xfffffc0d
 800184c:	000003f3 	.word	0x000003f3
 8001850:	000003ff 	.word	0x000003ff
 8001854:	feffffff 	.word	0xfeffffff
 8001858:	000007fe 	.word	0x000007fe
 800185c:	4544      	cmp	r4, r8
 800185e:	d200      	bcs.n	8001862 <__aeabi_ddiv+0x26e>
 8001860:	e116      	b.n	8001a90 <__aeabi_ddiv+0x49c>
 8001862:	d100      	bne.n	8001866 <__aeabi_ddiv+0x272>
 8001864:	e111      	b.n	8001a8a <__aeabi_ddiv+0x496>
 8001866:	2301      	movs	r3, #1
 8001868:	425b      	negs	r3, r3
 800186a:	469c      	mov	ip, r3
 800186c:	002e      	movs	r6, r5
 800186e:	4640      	mov	r0, r8
 8001870:	2500      	movs	r5, #0
 8001872:	44e3      	add	fp, ip
 8001874:	0223      	lsls	r3, r4, #8
 8001876:	0e14      	lsrs	r4, r2, #24
 8001878:	431c      	orrs	r4, r3
 800187a:	0c1b      	lsrs	r3, r3, #16
 800187c:	4699      	mov	r9, r3
 800187e:	0423      	lsls	r3, r4, #16
 8001880:	0c1f      	lsrs	r7, r3, #16
 8001882:	0212      	lsls	r2, r2, #8
 8001884:	4649      	mov	r1, r9
 8001886:	9200      	str	r2, [sp, #0]
 8001888:	9701      	str	r7, [sp, #4]
 800188a:	f7fe fcdf 	bl	800024c <__aeabi_uidivmod>
 800188e:	0002      	movs	r2, r0
 8001890:	437a      	muls	r2, r7
 8001892:	040b      	lsls	r3, r1, #16
 8001894:	0c31      	lsrs	r1, r6, #16
 8001896:	4680      	mov	r8, r0
 8001898:	4319      	orrs	r1, r3
 800189a:	428a      	cmp	r2, r1
 800189c:	d90b      	bls.n	80018b6 <__aeabi_ddiv+0x2c2>
 800189e:	2301      	movs	r3, #1
 80018a0:	425b      	negs	r3, r3
 80018a2:	469c      	mov	ip, r3
 80018a4:	1909      	adds	r1, r1, r4
 80018a6:	44e0      	add	r8, ip
 80018a8:	428c      	cmp	r4, r1
 80018aa:	d804      	bhi.n	80018b6 <__aeabi_ddiv+0x2c2>
 80018ac:	428a      	cmp	r2, r1
 80018ae:	d902      	bls.n	80018b6 <__aeabi_ddiv+0x2c2>
 80018b0:	1e83      	subs	r3, r0, #2
 80018b2:	4698      	mov	r8, r3
 80018b4:	1909      	adds	r1, r1, r4
 80018b6:	1a88      	subs	r0, r1, r2
 80018b8:	4649      	mov	r1, r9
 80018ba:	f7fe fcc7 	bl	800024c <__aeabi_uidivmod>
 80018be:	0409      	lsls	r1, r1, #16
 80018c0:	468c      	mov	ip, r1
 80018c2:	0431      	lsls	r1, r6, #16
 80018c4:	4666      	mov	r6, ip
 80018c6:	9a01      	ldr	r2, [sp, #4]
 80018c8:	0c09      	lsrs	r1, r1, #16
 80018ca:	4342      	muls	r2, r0
 80018cc:	0003      	movs	r3, r0
 80018ce:	4331      	orrs	r1, r6
 80018d0:	428a      	cmp	r2, r1
 80018d2:	d904      	bls.n	80018de <__aeabi_ddiv+0x2ea>
 80018d4:	1909      	adds	r1, r1, r4
 80018d6:	3b01      	subs	r3, #1
 80018d8:	428c      	cmp	r4, r1
 80018da:	d800      	bhi.n	80018de <__aeabi_ddiv+0x2ea>
 80018dc:	e111      	b.n	8001b02 <__aeabi_ddiv+0x50e>
 80018de:	1a89      	subs	r1, r1, r2
 80018e0:	4642      	mov	r2, r8
 80018e2:	9e00      	ldr	r6, [sp, #0]
 80018e4:	0412      	lsls	r2, r2, #16
 80018e6:	431a      	orrs	r2, r3
 80018e8:	0c33      	lsrs	r3, r6, #16
 80018ea:	001f      	movs	r7, r3
 80018ec:	0c10      	lsrs	r0, r2, #16
 80018ee:	4690      	mov	r8, r2
 80018f0:	9302      	str	r3, [sp, #8]
 80018f2:	0413      	lsls	r3, r2, #16
 80018f4:	0432      	lsls	r2, r6, #16
 80018f6:	0c16      	lsrs	r6, r2, #16
 80018f8:	0032      	movs	r2, r6
 80018fa:	0c1b      	lsrs	r3, r3, #16
 80018fc:	435a      	muls	r2, r3
 80018fe:	9603      	str	r6, [sp, #12]
 8001900:	437b      	muls	r3, r7
 8001902:	4346      	muls	r6, r0
 8001904:	4378      	muls	r0, r7
 8001906:	0c17      	lsrs	r7, r2, #16
 8001908:	46bc      	mov	ip, r7
 800190a:	199b      	adds	r3, r3, r6
 800190c:	4463      	add	r3, ip
 800190e:	429e      	cmp	r6, r3
 8001910:	d903      	bls.n	800191a <__aeabi_ddiv+0x326>
 8001912:	2680      	movs	r6, #128	; 0x80
 8001914:	0276      	lsls	r6, r6, #9
 8001916:	46b4      	mov	ip, r6
 8001918:	4460      	add	r0, ip
 800191a:	0c1e      	lsrs	r6, r3, #16
 800191c:	1830      	adds	r0, r6, r0
 800191e:	0416      	lsls	r6, r2, #16
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	0c36      	lsrs	r6, r6, #16
 8001924:	199e      	adds	r6, r3, r6
 8001926:	4281      	cmp	r1, r0
 8001928:	d200      	bcs.n	800192c <__aeabi_ddiv+0x338>
 800192a:	e09c      	b.n	8001a66 <__aeabi_ddiv+0x472>
 800192c:	d100      	bne.n	8001930 <__aeabi_ddiv+0x33c>
 800192e:	e097      	b.n	8001a60 <__aeabi_ddiv+0x46c>
 8001930:	1bae      	subs	r6, r5, r6
 8001932:	1a09      	subs	r1, r1, r0
 8001934:	42b5      	cmp	r5, r6
 8001936:	4180      	sbcs	r0, r0
 8001938:	4240      	negs	r0, r0
 800193a:	1a08      	subs	r0, r1, r0
 800193c:	4284      	cmp	r4, r0
 800193e:	d100      	bne.n	8001942 <__aeabi_ddiv+0x34e>
 8001940:	e111      	b.n	8001b66 <__aeabi_ddiv+0x572>
 8001942:	4649      	mov	r1, r9
 8001944:	f7fe fc82 	bl	800024c <__aeabi_uidivmod>
 8001948:	9a01      	ldr	r2, [sp, #4]
 800194a:	040b      	lsls	r3, r1, #16
 800194c:	4342      	muls	r2, r0
 800194e:	0c31      	lsrs	r1, r6, #16
 8001950:	0005      	movs	r5, r0
 8001952:	4319      	orrs	r1, r3
 8001954:	428a      	cmp	r2, r1
 8001956:	d907      	bls.n	8001968 <__aeabi_ddiv+0x374>
 8001958:	1909      	adds	r1, r1, r4
 800195a:	3d01      	subs	r5, #1
 800195c:	428c      	cmp	r4, r1
 800195e:	d803      	bhi.n	8001968 <__aeabi_ddiv+0x374>
 8001960:	428a      	cmp	r2, r1
 8001962:	d901      	bls.n	8001968 <__aeabi_ddiv+0x374>
 8001964:	1e85      	subs	r5, r0, #2
 8001966:	1909      	adds	r1, r1, r4
 8001968:	1a88      	subs	r0, r1, r2
 800196a:	4649      	mov	r1, r9
 800196c:	f7fe fc6e 	bl	800024c <__aeabi_uidivmod>
 8001970:	0409      	lsls	r1, r1, #16
 8001972:	468c      	mov	ip, r1
 8001974:	0431      	lsls	r1, r6, #16
 8001976:	4666      	mov	r6, ip
 8001978:	9a01      	ldr	r2, [sp, #4]
 800197a:	0c09      	lsrs	r1, r1, #16
 800197c:	4342      	muls	r2, r0
 800197e:	0003      	movs	r3, r0
 8001980:	4331      	orrs	r1, r6
 8001982:	428a      	cmp	r2, r1
 8001984:	d907      	bls.n	8001996 <__aeabi_ddiv+0x3a2>
 8001986:	1909      	adds	r1, r1, r4
 8001988:	3b01      	subs	r3, #1
 800198a:	428c      	cmp	r4, r1
 800198c:	d803      	bhi.n	8001996 <__aeabi_ddiv+0x3a2>
 800198e:	428a      	cmp	r2, r1
 8001990:	d901      	bls.n	8001996 <__aeabi_ddiv+0x3a2>
 8001992:	1e83      	subs	r3, r0, #2
 8001994:	1909      	adds	r1, r1, r4
 8001996:	9e03      	ldr	r6, [sp, #12]
 8001998:	1a89      	subs	r1, r1, r2
 800199a:	0032      	movs	r2, r6
 800199c:	042d      	lsls	r5, r5, #16
 800199e:	431d      	orrs	r5, r3
 80019a0:	9f02      	ldr	r7, [sp, #8]
 80019a2:	042b      	lsls	r3, r5, #16
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	435a      	muls	r2, r3
 80019a8:	437b      	muls	r3, r7
 80019aa:	469c      	mov	ip, r3
 80019ac:	0c28      	lsrs	r0, r5, #16
 80019ae:	4346      	muls	r6, r0
 80019b0:	0c13      	lsrs	r3, r2, #16
 80019b2:	44b4      	add	ip, r6
 80019b4:	4463      	add	r3, ip
 80019b6:	4378      	muls	r0, r7
 80019b8:	429e      	cmp	r6, r3
 80019ba:	d903      	bls.n	80019c4 <__aeabi_ddiv+0x3d0>
 80019bc:	2680      	movs	r6, #128	; 0x80
 80019be:	0276      	lsls	r6, r6, #9
 80019c0:	46b4      	mov	ip, r6
 80019c2:	4460      	add	r0, ip
 80019c4:	0c1e      	lsrs	r6, r3, #16
 80019c6:	0412      	lsls	r2, r2, #16
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	0c12      	lsrs	r2, r2, #16
 80019cc:	1830      	adds	r0, r6, r0
 80019ce:	189b      	adds	r3, r3, r2
 80019d0:	4281      	cmp	r1, r0
 80019d2:	d306      	bcc.n	80019e2 <__aeabi_ddiv+0x3ee>
 80019d4:	d002      	beq.n	80019dc <__aeabi_ddiv+0x3e8>
 80019d6:	2301      	movs	r3, #1
 80019d8:	431d      	orrs	r5, r3
 80019da:	e6ce      	b.n	800177a <__aeabi_ddiv+0x186>
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d100      	bne.n	80019e2 <__aeabi_ddiv+0x3ee>
 80019e0:	e6cb      	b.n	800177a <__aeabi_ddiv+0x186>
 80019e2:	1861      	adds	r1, r4, r1
 80019e4:	1e6e      	subs	r6, r5, #1
 80019e6:	42a1      	cmp	r1, r4
 80019e8:	d200      	bcs.n	80019ec <__aeabi_ddiv+0x3f8>
 80019ea:	e0a4      	b.n	8001b36 <__aeabi_ddiv+0x542>
 80019ec:	4281      	cmp	r1, r0
 80019ee:	d200      	bcs.n	80019f2 <__aeabi_ddiv+0x3fe>
 80019f0:	e0c9      	b.n	8001b86 <__aeabi_ddiv+0x592>
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0x402>
 80019f4:	e0d9      	b.n	8001baa <__aeabi_ddiv+0x5b6>
 80019f6:	0035      	movs	r5, r6
 80019f8:	e7ed      	b.n	80019d6 <__aeabi_ddiv+0x3e2>
 80019fa:	2501      	movs	r5, #1
 80019fc:	426d      	negs	r5, r5
 80019fe:	2101      	movs	r1, #1
 8001a00:	1a89      	subs	r1, r1, r2
 8001a02:	2938      	cmp	r1, #56	; 0x38
 8001a04:	dd00      	ble.n	8001a08 <__aeabi_ddiv+0x414>
 8001a06:	e64c      	b.n	80016a2 <__aeabi_ddiv+0xae>
 8001a08:	291f      	cmp	r1, #31
 8001a0a:	dc00      	bgt.n	8001a0e <__aeabi_ddiv+0x41a>
 8001a0c:	e07f      	b.n	8001b0e <__aeabi_ddiv+0x51a>
 8001a0e:	231f      	movs	r3, #31
 8001a10:	425b      	negs	r3, r3
 8001a12:	1a9a      	subs	r2, r3, r2
 8001a14:	4643      	mov	r3, r8
 8001a16:	40d3      	lsrs	r3, r2
 8001a18:	2920      	cmp	r1, #32
 8001a1a:	d004      	beq.n	8001a26 <__aeabi_ddiv+0x432>
 8001a1c:	4644      	mov	r4, r8
 8001a1e:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <__aeabi_ddiv+0x5c0>)
 8001a20:	445a      	add	r2, fp
 8001a22:	4094      	lsls	r4, r2
 8001a24:	4325      	orrs	r5, r4
 8001a26:	1e6a      	subs	r2, r5, #1
 8001a28:	4195      	sbcs	r5, r2
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	432b      	orrs	r3, r5
 8001a2e:	0015      	movs	r5, r2
 8001a30:	2400      	movs	r4, #0
 8001a32:	401d      	ands	r5, r3
 8001a34:	421a      	tst	r2, r3
 8001a36:	d100      	bne.n	8001a3a <__aeabi_ddiv+0x446>
 8001a38:	e0a1      	b.n	8001b7e <__aeabi_ddiv+0x58a>
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	401a      	ands	r2, r3
 8001a40:	2a04      	cmp	r2, #4
 8001a42:	d100      	bne.n	8001a46 <__aeabi_ddiv+0x452>
 8001a44:	e098      	b.n	8001b78 <__aeabi_ddiv+0x584>
 8001a46:	1d1a      	adds	r2, r3, #4
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	419b      	sbcs	r3, r3
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	18e4      	adds	r4, r4, r3
 8001a50:	0013      	movs	r3, r2
 8001a52:	0222      	lsls	r2, r4, #8
 8001a54:	d400      	bmi.n	8001a58 <__aeabi_ddiv+0x464>
 8001a56:	e08f      	b.n	8001b78 <__aeabi_ddiv+0x584>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2400      	movs	r4, #0
 8001a5c:	2500      	movs	r5, #0
 8001a5e:	e623      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001a60:	42b5      	cmp	r5, r6
 8001a62:	d300      	bcc.n	8001a66 <__aeabi_ddiv+0x472>
 8001a64:	e764      	b.n	8001930 <__aeabi_ddiv+0x33c>
 8001a66:	4643      	mov	r3, r8
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	9b00      	ldr	r3, [sp, #0]
 8001a6c:	469c      	mov	ip, r3
 8001a6e:	4465      	add	r5, ip
 8001a70:	001f      	movs	r7, r3
 8001a72:	429d      	cmp	r5, r3
 8001a74:	419b      	sbcs	r3, r3
 8001a76:	425b      	negs	r3, r3
 8001a78:	191b      	adds	r3, r3, r4
 8001a7a:	18c9      	adds	r1, r1, r3
 8001a7c:	428c      	cmp	r4, r1
 8001a7e:	d23a      	bcs.n	8001af6 <__aeabi_ddiv+0x502>
 8001a80:	4288      	cmp	r0, r1
 8001a82:	d863      	bhi.n	8001b4c <__aeabi_ddiv+0x558>
 8001a84:	d060      	beq.n	8001b48 <__aeabi_ddiv+0x554>
 8001a86:	4690      	mov	r8, r2
 8001a88:	e752      	b.n	8001930 <__aeabi_ddiv+0x33c>
 8001a8a:	42aa      	cmp	r2, r5
 8001a8c:	d900      	bls.n	8001a90 <__aeabi_ddiv+0x49c>
 8001a8e:	e6ea      	b.n	8001866 <__aeabi_ddiv+0x272>
 8001a90:	4643      	mov	r3, r8
 8001a92:	07de      	lsls	r6, r3, #31
 8001a94:	0858      	lsrs	r0, r3, #1
 8001a96:	086b      	lsrs	r3, r5, #1
 8001a98:	431e      	orrs	r6, r3
 8001a9a:	07ed      	lsls	r5, r5, #31
 8001a9c:	e6ea      	b.n	8001874 <__aeabi_ddiv+0x280>
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	f001 f856 	bl	8002b50 <__clzsi2>
 8001aa4:	0001      	movs	r1, r0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	3115      	adds	r1, #21
 8001aaa:	3220      	adds	r2, #32
 8001aac:	291c      	cmp	r1, #28
 8001aae:	dc00      	bgt.n	8001ab2 <__aeabi_ddiv+0x4be>
 8001ab0:	e61a      	b.n	80016e8 <__aeabi_ddiv+0xf4>
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	3808      	subs	r0, #8
 8001ab6:	4083      	lsls	r3, r0
 8001ab8:	2500      	movs	r5, #0
 8001aba:	4698      	mov	r8, r3
 8001abc:	e620      	b.n	8001700 <__aeabi_ddiv+0x10c>
 8001abe:	f001 f847 	bl	8002b50 <__clzsi2>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	3215      	adds	r2, #21
 8001ac8:	3020      	adds	r0, #32
 8001aca:	2a1c      	cmp	r2, #28
 8001acc:	dc00      	bgt.n	8001ad0 <__aeabi_ddiv+0x4dc>
 8001ace:	e630      	b.n	8001732 <__aeabi_ddiv+0x13e>
 8001ad0:	4654      	mov	r4, sl
 8001ad2:	3b08      	subs	r3, #8
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	409c      	lsls	r4, r3
 8001ad8:	e635      	b.n	8001746 <__aeabi_ddiv+0x152>
 8001ada:	230f      	movs	r3, #15
 8001adc:	402b      	ands	r3, r5
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_ddiv+0x4f0>
 8001ae2:	e652      	b.n	800178a <__aeabi_ddiv+0x196>
 8001ae4:	2305      	movs	r3, #5
 8001ae6:	425b      	negs	r3, r3
 8001ae8:	42ab      	cmp	r3, r5
 8001aea:	419b      	sbcs	r3, r3
 8001aec:	3504      	adds	r5, #4
 8001aee:	425b      	negs	r3, r3
 8001af0:	08ed      	lsrs	r5, r5, #3
 8001af2:	4498      	add	r8, r3
 8001af4:	e64a      	b.n	800178c <__aeabi_ddiv+0x198>
 8001af6:	428c      	cmp	r4, r1
 8001af8:	d1c5      	bne.n	8001a86 <__aeabi_ddiv+0x492>
 8001afa:	42af      	cmp	r7, r5
 8001afc:	d9c0      	bls.n	8001a80 <__aeabi_ddiv+0x48c>
 8001afe:	4690      	mov	r8, r2
 8001b00:	e716      	b.n	8001930 <__aeabi_ddiv+0x33c>
 8001b02:	428a      	cmp	r2, r1
 8001b04:	d800      	bhi.n	8001b08 <__aeabi_ddiv+0x514>
 8001b06:	e6ea      	b.n	80018de <__aeabi_ddiv+0x2ea>
 8001b08:	1e83      	subs	r3, r0, #2
 8001b0a:	1909      	adds	r1, r1, r4
 8001b0c:	e6e7      	b.n	80018de <__aeabi_ddiv+0x2ea>
 8001b0e:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <__aeabi_ddiv+0x5c4>)
 8001b10:	0028      	movs	r0, r5
 8001b12:	445a      	add	r2, fp
 8001b14:	4643      	mov	r3, r8
 8001b16:	4095      	lsls	r5, r2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	40c8      	lsrs	r0, r1
 8001b1c:	1e6a      	subs	r2, r5, #1
 8001b1e:	4195      	sbcs	r5, r2
 8001b20:	4644      	mov	r4, r8
 8001b22:	4303      	orrs	r3, r0
 8001b24:	432b      	orrs	r3, r5
 8001b26:	40cc      	lsrs	r4, r1
 8001b28:	075a      	lsls	r2, r3, #29
 8001b2a:	d092      	beq.n	8001a52 <__aeabi_ddiv+0x45e>
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	401a      	ands	r2, r3
 8001b30:	2a04      	cmp	r2, #4
 8001b32:	d188      	bne.n	8001a46 <__aeabi_ddiv+0x452>
 8001b34:	e78d      	b.n	8001a52 <__aeabi_ddiv+0x45e>
 8001b36:	0035      	movs	r5, r6
 8001b38:	4281      	cmp	r1, r0
 8001b3a:	d000      	beq.n	8001b3e <__aeabi_ddiv+0x54a>
 8001b3c:	e74b      	b.n	80019d6 <__aeabi_ddiv+0x3e2>
 8001b3e:	9a00      	ldr	r2, [sp, #0]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d000      	beq.n	8001b46 <__aeabi_ddiv+0x552>
 8001b44:	e747      	b.n	80019d6 <__aeabi_ddiv+0x3e2>
 8001b46:	e618      	b.n	800177a <__aeabi_ddiv+0x186>
 8001b48:	42ae      	cmp	r6, r5
 8001b4a:	d99c      	bls.n	8001a86 <__aeabi_ddiv+0x492>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	425b      	negs	r3, r3
 8001b50:	469c      	mov	ip, r3
 8001b52:	9b00      	ldr	r3, [sp, #0]
 8001b54:	44e0      	add	r8, ip
 8001b56:	469c      	mov	ip, r3
 8001b58:	4465      	add	r5, ip
 8001b5a:	429d      	cmp	r5, r3
 8001b5c:	419b      	sbcs	r3, r3
 8001b5e:	425b      	negs	r3, r3
 8001b60:	191b      	adds	r3, r3, r4
 8001b62:	18c9      	adds	r1, r1, r3
 8001b64:	e6e4      	b.n	8001930 <__aeabi_ddiv+0x33c>
 8001b66:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <__aeabi_ddiv+0x5c8>)
 8001b68:	445a      	add	r2, fp
 8001b6a:	2a00      	cmp	r2, #0
 8001b6c:	dc00      	bgt.n	8001b70 <__aeabi_ddiv+0x57c>
 8001b6e:	e744      	b.n	80019fa <__aeabi_ddiv+0x406>
 8001b70:	2301      	movs	r3, #1
 8001b72:	2500      	movs	r5, #0
 8001b74:	4498      	add	r8, r3
 8001b76:	e609      	b.n	800178c <__aeabi_ddiv+0x198>
 8001b78:	0765      	lsls	r5, r4, #29
 8001b7a:	0264      	lsls	r4, r4, #9
 8001b7c:	0b24      	lsrs	r4, r4, #12
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	431d      	orrs	r5, r3
 8001b82:	2300      	movs	r3, #0
 8001b84:	e590      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001b86:	9e00      	ldr	r6, [sp, #0]
 8001b88:	3d02      	subs	r5, #2
 8001b8a:	0072      	lsls	r2, r6, #1
 8001b8c:	42b2      	cmp	r2, r6
 8001b8e:	41bf      	sbcs	r7, r7
 8001b90:	427f      	negs	r7, r7
 8001b92:	193c      	adds	r4, r7, r4
 8001b94:	1909      	adds	r1, r1, r4
 8001b96:	9200      	str	r2, [sp, #0]
 8001b98:	e7ce      	b.n	8001b38 <__aeabi_ddiv+0x544>
 8001b9a:	2480      	movs	r4, #128	; 0x80
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	0324      	lsls	r4, r4, #12
 8001ba0:	431c      	orrs	r4, r3
 8001ba2:	0324      	lsls	r4, r4, #12
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <__aeabi_ddiv+0x5cc>)
 8001ba6:	0b24      	lsrs	r4, r4, #12
 8001ba8:	e57e      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001baa:	9a00      	ldr	r2, [sp, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d3ea      	bcc.n	8001b86 <__aeabi_ddiv+0x592>
 8001bb0:	0035      	movs	r5, r6
 8001bb2:	e7c4      	b.n	8001b3e <__aeabi_ddiv+0x54a>
 8001bb4:	0000043e 	.word	0x0000043e
 8001bb8:	0000041e 	.word	0x0000041e
 8001bbc:	000003ff 	.word	0x000003ff
 8001bc0:	000007ff 	.word	0x000007ff

08001bc4 <__eqdf2>:
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	464f      	mov	r7, r9
 8001bc8:	4646      	mov	r6, r8
 8001bca:	46d6      	mov	lr, sl
 8001bcc:	4694      	mov	ip, r2
 8001bce:	4691      	mov	r9, r2
 8001bd0:	031a      	lsls	r2, r3, #12
 8001bd2:	0b12      	lsrs	r2, r2, #12
 8001bd4:	4d18      	ldr	r5, [pc, #96]	; (8001c38 <__eqdf2+0x74>)
 8001bd6:	b5c0      	push	{r6, r7, lr}
 8001bd8:	004c      	lsls	r4, r1, #1
 8001bda:	030f      	lsls	r7, r1, #12
 8001bdc:	4692      	mov	sl, r2
 8001bde:	005a      	lsls	r2, r3, #1
 8001be0:	0006      	movs	r6, r0
 8001be2:	4680      	mov	r8, r0
 8001be4:	0b3f      	lsrs	r7, r7, #12
 8001be6:	2001      	movs	r0, #1
 8001be8:	0d64      	lsrs	r4, r4, #21
 8001bea:	0fc9      	lsrs	r1, r1, #31
 8001bec:	0d52      	lsrs	r2, r2, #21
 8001bee:	0fdb      	lsrs	r3, r3, #31
 8001bf0:	42ac      	cmp	r4, r5
 8001bf2:	d00a      	beq.n	8001c0a <__eqdf2+0x46>
 8001bf4:	42aa      	cmp	r2, r5
 8001bf6:	d003      	beq.n	8001c00 <__eqdf2+0x3c>
 8001bf8:	4294      	cmp	r4, r2
 8001bfa:	d101      	bne.n	8001c00 <__eqdf2+0x3c>
 8001bfc:	4557      	cmp	r7, sl
 8001bfe:	d00d      	beq.n	8001c1c <__eqdf2+0x58>
 8001c00:	bce0      	pop	{r5, r6, r7}
 8001c02:	46ba      	mov	sl, r7
 8001c04:	46b1      	mov	r9, r6
 8001c06:	46a8      	mov	r8, r5
 8001c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c0a:	003d      	movs	r5, r7
 8001c0c:	4335      	orrs	r5, r6
 8001c0e:	d1f7      	bne.n	8001c00 <__eqdf2+0x3c>
 8001c10:	42a2      	cmp	r2, r4
 8001c12:	d1f5      	bne.n	8001c00 <__eqdf2+0x3c>
 8001c14:	4652      	mov	r2, sl
 8001c16:	4665      	mov	r5, ip
 8001c18:	432a      	orrs	r2, r5
 8001c1a:	d1f1      	bne.n	8001c00 <__eqdf2+0x3c>
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	45c8      	cmp	r8, r9
 8001c20:	d1ee      	bne.n	8001c00 <__eqdf2+0x3c>
 8001c22:	4299      	cmp	r1, r3
 8001c24:	d006      	beq.n	8001c34 <__eqdf2+0x70>
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	d1ea      	bne.n	8001c00 <__eqdf2+0x3c>
 8001c2a:	433e      	orrs	r6, r7
 8001c2c:	0030      	movs	r0, r6
 8001c2e:	1e46      	subs	r6, r0, #1
 8001c30:	41b0      	sbcs	r0, r6
 8001c32:	e7e5      	b.n	8001c00 <__eqdf2+0x3c>
 8001c34:	2000      	movs	r0, #0
 8001c36:	e7e3      	b.n	8001c00 <__eqdf2+0x3c>
 8001c38:	000007ff 	.word	0x000007ff

08001c3c <__gedf2>:
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	464e      	mov	r6, r9
 8001c40:	4645      	mov	r5, r8
 8001c42:	4657      	mov	r7, sl
 8001c44:	46de      	mov	lr, fp
 8001c46:	0004      	movs	r4, r0
 8001c48:	0018      	movs	r0, r3
 8001c4a:	b5e0      	push	{r5, r6, r7, lr}
 8001c4c:	0016      	movs	r6, r2
 8001c4e:	031b      	lsls	r3, r3, #12
 8001c50:	0b1b      	lsrs	r3, r3, #12
 8001c52:	4d32      	ldr	r5, [pc, #200]	; (8001d1c <__gedf2+0xe0>)
 8001c54:	030f      	lsls	r7, r1, #12
 8001c56:	004a      	lsls	r2, r1, #1
 8001c58:	4699      	mov	r9, r3
 8001c5a:	0043      	lsls	r3, r0, #1
 8001c5c:	46a4      	mov	ip, r4
 8001c5e:	46b0      	mov	r8, r6
 8001c60:	0b3f      	lsrs	r7, r7, #12
 8001c62:	0d52      	lsrs	r2, r2, #21
 8001c64:	0fc9      	lsrs	r1, r1, #31
 8001c66:	0d5b      	lsrs	r3, r3, #21
 8001c68:	0fc0      	lsrs	r0, r0, #31
 8001c6a:	42aa      	cmp	r2, r5
 8001c6c:	d029      	beq.n	8001cc2 <__gedf2+0x86>
 8001c6e:	42ab      	cmp	r3, r5
 8001c70:	d018      	beq.n	8001ca4 <__gedf2+0x68>
 8001c72:	2a00      	cmp	r2, #0
 8001c74:	d12a      	bne.n	8001ccc <__gedf2+0x90>
 8001c76:	433c      	orrs	r4, r7
 8001c78:	46a3      	mov	fp, r4
 8001c7a:	4265      	negs	r5, r4
 8001c7c:	4165      	adcs	r5, r4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d102      	bne.n	8001c88 <__gedf2+0x4c>
 8001c82:	464c      	mov	r4, r9
 8001c84:	4326      	orrs	r6, r4
 8001c86:	d027      	beq.n	8001cd8 <__gedf2+0x9c>
 8001c88:	2d00      	cmp	r5, #0
 8001c8a:	d115      	bne.n	8001cb8 <__gedf2+0x7c>
 8001c8c:	4281      	cmp	r1, r0
 8001c8e:	d028      	beq.n	8001ce2 <__gedf2+0xa6>
 8001c90:	2002      	movs	r0, #2
 8001c92:	3901      	subs	r1, #1
 8001c94:	4008      	ands	r0, r1
 8001c96:	3801      	subs	r0, #1
 8001c98:	bcf0      	pop	{r4, r5, r6, r7}
 8001c9a:	46bb      	mov	fp, r7
 8001c9c:	46b2      	mov	sl, r6
 8001c9e:	46a9      	mov	r9, r5
 8001ca0:	46a0      	mov	r8, r4
 8001ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca4:	464d      	mov	r5, r9
 8001ca6:	432e      	orrs	r6, r5
 8001ca8:	d12f      	bne.n	8001d0a <__gedf2+0xce>
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d1ee      	bne.n	8001c8c <__gedf2+0x50>
 8001cae:	433c      	orrs	r4, r7
 8001cb0:	4265      	negs	r5, r4
 8001cb2:	4165      	adcs	r5, r4
 8001cb4:	2d00      	cmp	r5, #0
 8001cb6:	d0e9      	beq.n	8001c8c <__gedf2+0x50>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d1ed      	bne.n	8001c98 <__gedf2+0x5c>
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	4240      	negs	r0, r0
 8001cc0:	e7ea      	b.n	8001c98 <__gedf2+0x5c>
 8001cc2:	003d      	movs	r5, r7
 8001cc4:	4325      	orrs	r5, r4
 8001cc6:	d120      	bne.n	8001d0a <__gedf2+0xce>
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d0eb      	beq.n	8001ca4 <__gedf2+0x68>
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1dd      	bne.n	8001c8c <__gedf2+0x50>
 8001cd0:	464c      	mov	r4, r9
 8001cd2:	4326      	orrs	r6, r4
 8001cd4:	d1da      	bne.n	8001c8c <__gedf2+0x50>
 8001cd6:	e7db      	b.n	8001c90 <__gedf2+0x54>
 8001cd8:	465b      	mov	r3, fp
 8001cda:	2000      	movs	r0, #0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0db      	beq.n	8001c98 <__gedf2+0x5c>
 8001ce0:	e7d6      	b.n	8001c90 <__gedf2+0x54>
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dc0a      	bgt.n	8001cfc <__gedf2+0xc0>
 8001ce6:	dbe7      	blt.n	8001cb8 <__gedf2+0x7c>
 8001ce8:	454f      	cmp	r7, r9
 8001cea:	d8d1      	bhi.n	8001c90 <__gedf2+0x54>
 8001cec:	d010      	beq.n	8001d10 <__gedf2+0xd4>
 8001cee:	2000      	movs	r0, #0
 8001cf0:	454f      	cmp	r7, r9
 8001cf2:	d2d1      	bcs.n	8001c98 <__gedf2+0x5c>
 8001cf4:	2900      	cmp	r1, #0
 8001cf6:	d0e1      	beq.n	8001cbc <__gedf2+0x80>
 8001cf8:	0008      	movs	r0, r1
 8001cfa:	e7cd      	b.n	8001c98 <__gedf2+0x5c>
 8001cfc:	4243      	negs	r3, r0
 8001cfe:	4158      	adcs	r0, r3
 8001d00:	2302      	movs	r3, #2
 8001d02:	4240      	negs	r0, r0
 8001d04:	4018      	ands	r0, r3
 8001d06:	3801      	subs	r0, #1
 8001d08:	e7c6      	b.n	8001c98 <__gedf2+0x5c>
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	4240      	negs	r0, r0
 8001d0e:	e7c3      	b.n	8001c98 <__gedf2+0x5c>
 8001d10:	45c4      	cmp	ip, r8
 8001d12:	d8bd      	bhi.n	8001c90 <__gedf2+0x54>
 8001d14:	2000      	movs	r0, #0
 8001d16:	45c4      	cmp	ip, r8
 8001d18:	d2be      	bcs.n	8001c98 <__gedf2+0x5c>
 8001d1a:	e7eb      	b.n	8001cf4 <__gedf2+0xb8>
 8001d1c:	000007ff 	.word	0x000007ff

08001d20 <__ledf2>:
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	464e      	mov	r6, r9
 8001d24:	4645      	mov	r5, r8
 8001d26:	4657      	mov	r7, sl
 8001d28:	46de      	mov	lr, fp
 8001d2a:	0004      	movs	r4, r0
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	b5e0      	push	{r5, r6, r7, lr}
 8001d30:	0016      	movs	r6, r2
 8001d32:	031b      	lsls	r3, r3, #12
 8001d34:	0b1b      	lsrs	r3, r3, #12
 8001d36:	4d31      	ldr	r5, [pc, #196]	; (8001dfc <__ledf2+0xdc>)
 8001d38:	030f      	lsls	r7, r1, #12
 8001d3a:	004a      	lsls	r2, r1, #1
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	0043      	lsls	r3, r0, #1
 8001d40:	46a4      	mov	ip, r4
 8001d42:	46b0      	mov	r8, r6
 8001d44:	0b3f      	lsrs	r7, r7, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0fc9      	lsrs	r1, r1, #31
 8001d4a:	0d5b      	lsrs	r3, r3, #21
 8001d4c:	0fc0      	lsrs	r0, r0, #31
 8001d4e:	42aa      	cmp	r2, r5
 8001d50:	d011      	beq.n	8001d76 <__ledf2+0x56>
 8001d52:	42ab      	cmp	r3, r5
 8001d54:	d014      	beq.n	8001d80 <__ledf2+0x60>
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	d12f      	bne.n	8001dba <__ledf2+0x9a>
 8001d5a:	433c      	orrs	r4, r7
 8001d5c:	46a3      	mov	fp, r4
 8001d5e:	4265      	negs	r5, r4
 8001d60:	4165      	adcs	r5, r4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d114      	bne.n	8001d90 <__ledf2+0x70>
 8001d66:	464c      	mov	r4, r9
 8001d68:	4326      	orrs	r6, r4
 8001d6a:	d111      	bne.n	8001d90 <__ledf2+0x70>
 8001d6c:	465b      	mov	r3, fp
 8001d6e:	2000      	movs	r0, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d017      	beq.n	8001da4 <__ledf2+0x84>
 8001d74:	e010      	b.n	8001d98 <__ledf2+0x78>
 8001d76:	003d      	movs	r5, r7
 8001d78:	4325      	orrs	r5, r4
 8001d7a:	d112      	bne.n	8001da2 <__ledf2+0x82>
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d11c      	bne.n	8001dba <__ledf2+0x9a>
 8001d80:	464d      	mov	r5, r9
 8001d82:	432e      	orrs	r6, r5
 8001d84:	d10d      	bne.n	8001da2 <__ledf2+0x82>
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	d104      	bne.n	8001d94 <__ledf2+0x74>
 8001d8a:	433c      	orrs	r4, r7
 8001d8c:	4265      	negs	r5, r4
 8001d8e:	4165      	adcs	r5, r4
 8001d90:	2d00      	cmp	r5, #0
 8001d92:	d10d      	bne.n	8001db0 <__ledf2+0x90>
 8001d94:	4281      	cmp	r1, r0
 8001d96:	d016      	beq.n	8001dc6 <__ledf2+0xa6>
 8001d98:	2002      	movs	r0, #2
 8001d9a:	3901      	subs	r1, #1
 8001d9c:	4008      	ands	r0, r1
 8001d9e:	3801      	subs	r0, #1
 8001da0:	e000      	b.n	8001da4 <__ledf2+0x84>
 8001da2:	2002      	movs	r0, #2
 8001da4:	bcf0      	pop	{r4, r5, r6, r7}
 8001da6:	46bb      	mov	fp, r7
 8001da8:	46b2      	mov	sl, r6
 8001daa:	46a9      	mov	r9, r5
 8001dac:	46a0      	mov	r8, r4
 8001dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d1f7      	bne.n	8001da4 <__ledf2+0x84>
 8001db4:	2001      	movs	r0, #1
 8001db6:	4240      	negs	r0, r0
 8001db8:	e7f4      	b.n	8001da4 <__ledf2+0x84>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ea      	bne.n	8001d94 <__ledf2+0x74>
 8001dbe:	464c      	mov	r4, r9
 8001dc0:	4326      	orrs	r6, r4
 8001dc2:	d1e7      	bne.n	8001d94 <__ledf2+0x74>
 8001dc4:	e7e8      	b.n	8001d98 <__ledf2+0x78>
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dd06      	ble.n	8001dd8 <__ledf2+0xb8>
 8001dca:	4243      	negs	r3, r0
 8001dcc:	4158      	adcs	r0, r3
 8001dce:	2302      	movs	r3, #2
 8001dd0:	4240      	negs	r0, r0
 8001dd2:	4018      	ands	r0, r3
 8001dd4:	3801      	subs	r0, #1
 8001dd6:	e7e5      	b.n	8001da4 <__ledf2+0x84>
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbe9      	blt.n	8001db0 <__ledf2+0x90>
 8001ddc:	454f      	cmp	r7, r9
 8001dde:	d8db      	bhi.n	8001d98 <__ledf2+0x78>
 8001de0:	d006      	beq.n	8001df0 <__ledf2+0xd0>
 8001de2:	2000      	movs	r0, #0
 8001de4:	454f      	cmp	r7, r9
 8001de6:	d2dd      	bcs.n	8001da4 <__ledf2+0x84>
 8001de8:	2900      	cmp	r1, #0
 8001dea:	d0e3      	beq.n	8001db4 <__ledf2+0x94>
 8001dec:	0008      	movs	r0, r1
 8001dee:	e7d9      	b.n	8001da4 <__ledf2+0x84>
 8001df0:	45c4      	cmp	ip, r8
 8001df2:	d8d1      	bhi.n	8001d98 <__ledf2+0x78>
 8001df4:	2000      	movs	r0, #0
 8001df6:	45c4      	cmp	ip, r8
 8001df8:	d2d4      	bcs.n	8001da4 <__ledf2+0x84>
 8001dfa:	e7f5      	b.n	8001de8 <__ledf2+0xc8>
 8001dfc:	000007ff 	.word	0x000007ff

08001e00 <__aeabi_dmul>:
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	4657      	mov	r7, sl
 8001e04:	464e      	mov	r6, r9
 8001e06:	4645      	mov	r5, r8
 8001e08:	46de      	mov	lr, fp
 8001e0a:	b5e0      	push	{r5, r6, r7, lr}
 8001e0c:	4698      	mov	r8, r3
 8001e0e:	030c      	lsls	r4, r1, #12
 8001e10:	004b      	lsls	r3, r1, #1
 8001e12:	0006      	movs	r6, r0
 8001e14:	4692      	mov	sl, r2
 8001e16:	b087      	sub	sp, #28
 8001e18:	0b24      	lsrs	r4, r4, #12
 8001e1a:	0d5b      	lsrs	r3, r3, #21
 8001e1c:	0fcf      	lsrs	r7, r1, #31
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d06c      	beq.n	8001efc <__aeabi_dmul+0xfc>
 8001e22:	4add      	ldr	r2, [pc, #884]	; (8002198 <__aeabi_dmul+0x398>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dmul+0x2a>
 8001e28:	e086      	b.n	8001f38 <__aeabi_dmul+0x138>
 8001e2a:	0f42      	lsrs	r2, r0, #29
 8001e2c:	00e4      	lsls	r4, r4, #3
 8001e2e:	4314      	orrs	r4, r2
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0412      	lsls	r2, r2, #16
 8001e34:	4314      	orrs	r4, r2
 8001e36:	4ad9      	ldr	r2, [pc, #868]	; (800219c <__aeabi_dmul+0x39c>)
 8001e38:	00c5      	lsls	r5, r0, #3
 8001e3a:	4694      	mov	ip, r2
 8001e3c:	4463      	add	r3, ip
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2300      	movs	r3, #0
 8001e42:	4699      	mov	r9, r3
 8001e44:	469b      	mov	fp, r3
 8001e46:	4643      	mov	r3, r8
 8001e48:	4642      	mov	r2, r8
 8001e4a:	031e      	lsls	r6, r3, #12
 8001e4c:	0fd2      	lsrs	r2, r2, #31
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4650      	mov	r0, sl
 8001e52:	4690      	mov	r8, r2
 8001e54:	0b36      	lsrs	r6, r6, #12
 8001e56:	0d5b      	lsrs	r3, r3, #21
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dmul+0x5c>
 8001e5a:	e078      	b.n	8001f4e <__aeabi_dmul+0x14e>
 8001e5c:	4ace      	ldr	r2, [pc, #824]	; (8002198 <__aeabi_dmul+0x398>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01d      	beq.n	8001e9e <__aeabi_dmul+0x9e>
 8001e62:	49ce      	ldr	r1, [pc, #824]	; (800219c <__aeabi_dmul+0x39c>)
 8001e64:	0f42      	lsrs	r2, r0, #29
 8001e66:	468c      	mov	ip, r1
 8001e68:	9900      	ldr	r1, [sp, #0]
 8001e6a:	4463      	add	r3, ip
 8001e6c:	00f6      	lsls	r6, r6, #3
 8001e6e:	468c      	mov	ip, r1
 8001e70:	4316      	orrs	r6, r2
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	449c      	add	ip, r3
 8001e76:	0412      	lsls	r2, r2, #16
 8001e78:	4663      	mov	r3, ip
 8001e7a:	4316      	orrs	r6, r2
 8001e7c:	00c2      	lsls	r2, r0, #3
 8001e7e:	2000      	movs	r0, #0
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	9900      	ldr	r1, [sp, #0]
 8001e84:	4643      	mov	r3, r8
 8001e86:	3101      	adds	r1, #1
 8001e88:	468c      	mov	ip, r1
 8001e8a:	4649      	mov	r1, r9
 8001e8c:	407b      	eors	r3, r7
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	290f      	cmp	r1, #15
 8001e92:	d900      	bls.n	8001e96 <__aeabi_dmul+0x96>
 8001e94:	e07e      	b.n	8001f94 <__aeabi_dmul+0x194>
 8001e96:	4bc2      	ldr	r3, [pc, #776]	; (80021a0 <__aeabi_dmul+0x3a0>)
 8001e98:	0089      	lsls	r1, r1, #2
 8001e9a:	5859      	ldr	r1, [r3, r1]
 8001e9c:	468f      	mov	pc, r1
 8001e9e:	4652      	mov	r2, sl
 8001ea0:	9b00      	ldr	r3, [sp, #0]
 8001ea2:	4332      	orrs	r2, r6
 8001ea4:	d000      	beq.n	8001ea8 <__aeabi_dmul+0xa8>
 8001ea6:	e156      	b.n	8002156 <__aeabi_dmul+0x356>
 8001ea8:	49bb      	ldr	r1, [pc, #748]	; (8002198 <__aeabi_dmul+0x398>)
 8001eaa:	2600      	movs	r6, #0
 8001eac:	468c      	mov	ip, r1
 8001eae:	4463      	add	r3, ip
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	4319      	orrs	r1, r3
 8001eb8:	4689      	mov	r9, r1
 8001eba:	2002      	movs	r0, #2
 8001ebc:	e7e1      	b.n	8001e82 <__aeabi_dmul+0x82>
 8001ebe:	4643      	mov	r3, r8
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	0034      	movs	r4, r6
 8001ec4:	0015      	movs	r5, r2
 8001ec6:	4683      	mov	fp, r0
 8001ec8:	465b      	mov	r3, fp
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d05e      	beq.n	8001f8c <__aeabi_dmul+0x18c>
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dmul+0xd4>
 8001ed2:	e1f3      	b.n	80022bc <__aeabi_dmul+0x4bc>
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d000      	beq.n	8001eda <__aeabi_dmul+0xda>
 8001ed8:	e118      	b.n	800210c <__aeabi_dmul+0x30c>
 8001eda:	2200      	movs	r2, #0
 8001edc:	2400      	movs	r4, #0
 8001ede:	2500      	movs	r5, #0
 8001ee0:	9b01      	ldr	r3, [sp, #4]
 8001ee2:	0512      	lsls	r2, r2, #20
 8001ee4:	4322      	orrs	r2, r4
 8001ee6:	07db      	lsls	r3, r3, #31
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	0028      	movs	r0, r5
 8001eec:	0011      	movs	r1, r2
 8001eee:	b007      	add	sp, #28
 8001ef0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ef2:	46bb      	mov	fp, r7
 8001ef4:	46b2      	mov	sl, r6
 8001ef6:	46a9      	mov	r9, r5
 8001ef8:	46a0      	mov	r8, r4
 8001efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efc:	0025      	movs	r5, r4
 8001efe:	4305      	orrs	r5, r0
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dmul+0x104>
 8001f02:	e141      	b.n	8002188 <__aeabi_dmul+0x388>
 8001f04:	2c00      	cmp	r4, #0
 8001f06:	d100      	bne.n	8001f0a <__aeabi_dmul+0x10a>
 8001f08:	e1ad      	b.n	8002266 <__aeabi_dmul+0x466>
 8001f0a:	0020      	movs	r0, r4
 8001f0c:	f000 fe20 	bl	8002b50 <__clzsi2>
 8001f10:	0001      	movs	r1, r0
 8001f12:	0002      	movs	r2, r0
 8001f14:	390b      	subs	r1, #11
 8001f16:	231d      	movs	r3, #29
 8001f18:	0010      	movs	r0, r2
 8001f1a:	1a5b      	subs	r3, r3, r1
 8001f1c:	0031      	movs	r1, r6
 8001f1e:	0035      	movs	r5, r6
 8001f20:	3808      	subs	r0, #8
 8001f22:	4084      	lsls	r4, r0
 8001f24:	40d9      	lsrs	r1, r3
 8001f26:	4085      	lsls	r5, r0
 8001f28:	430c      	orrs	r4, r1
 8001f2a:	489e      	ldr	r0, [pc, #632]	; (80021a4 <__aeabi_dmul+0x3a4>)
 8001f2c:	1a83      	subs	r3, r0, r2
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2300      	movs	r3, #0
 8001f32:	4699      	mov	r9, r3
 8001f34:	469b      	mov	fp, r3
 8001f36:	e786      	b.n	8001e46 <__aeabi_dmul+0x46>
 8001f38:	0005      	movs	r5, r0
 8001f3a:	4325      	orrs	r5, r4
 8001f3c:	d000      	beq.n	8001f40 <__aeabi_dmul+0x140>
 8001f3e:	e11c      	b.n	800217a <__aeabi_dmul+0x37a>
 8001f40:	2208      	movs	r2, #8
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2302      	movs	r3, #2
 8001f46:	2400      	movs	r4, #0
 8001f48:	4691      	mov	r9, r2
 8001f4a:	469b      	mov	fp, r3
 8001f4c:	e77b      	b.n	8001e46 <__aeabi_dmul+0x46>
 8001f4e:	4652      	mov	r2, sl
 8001f50:	4332      	orrs	r2, r6
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dmul+0x156>
 8001f54:	e10a      	b.n	800216c <__aeabi_dmul+0x36c>
 8001f56:	2e00      	cmp	r6, #0
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dmul+0x15c>
 8001f5a:	e176      	b.n	800224a <__aeabi_dmul+0x44a>
 8001f5c:	0030      	movs	r0, r6
 8001f5e:	f000 fdf7 	bl	8002b50 <__clzsi2>
 8001f62:	0002      	movs	r2, r0
 8001f64:	3a0b      	subs	r2, #11
 8001f66:	231d      	movs	r3, #29
 8001f68:	0001      	movs	r1, r0
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	4652      	mov	r2, sl
 8001f6e:	3908      	subs	r1, #8
 8001f70:	40da      	lsrs	r2, r3
 8001f72:	408e      	lsls	r6, r1
 8001f74:	4316      	orrs	r6, r2
 8001f76:	4652      	mov	r2, sl
 8001f78:	408a      	lsls	r2, r1
 8001f7a:	9b00      	ldr	r3, [sp, #0]
 8001f7c:	4989      	ldr	r1, [pc, #548]	; (80021a4 <__aeabi_dmul+0x3a4>)
 8001f7e:	1a18      	subs	r0, r3, r0
 8001f80:	0003      	movs	r3, r0
 8001f82:	468c      	mov	ip, r1
 8001f84:	4463      	add	r3, ip
 8001f86:	2000      	movs	r0, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	e77a      	b.n	8001e82 <__aeabi_dmul+0x82>
 8001f8c:	2400      	movs	r4, #0
 8001f8e:	2500      	movs	r5, #0
 8001f90:	4a81      	ldr	r2, [pc, #516]	; (8002198 <__aeabi_dmul+0x398>)
 8001f92:	e7a5      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 8001f94:	0c2f      	lsrs	r7, r5, #16
 8001f96:	042d      	lsls	r5, r5, #16
 8001f98:	0c2d      	lsrs	r5, r5, #16
 8001f9a:	002b      	movs	r3, r5
 8001f9c:	0c11      	lsrs	r1, r2, #16
 8001f9e:	0412      	lsls	r2, r2, #16
 8001fa0:	0c12      	lsrs	r2, r2, #16
 8001fa2:	4353      	muls	r3, r2
 8001fa4:	4698      	mov	r8, r3
 8001fa6:	0013      	movs	r3, r2
 8001fa8:	0028      	movs	r0, r5
 8001faa:	437b      	muls	r3, r7
 8001fac:	4699      	mov	r9, r3
 8001fae:	4348      	muls	r0, r1
 8001fb0:	4448      	add	r0, r9
 8001fb2:	4683      	mov	fp, r0
 8001fb4:	4640      	mov	r0, r8
 8001fb6:	000b      	movs	r3, r1
 8001fb8:	0c00      	lsrs	r0, r0, #16
 8001fba:	4682      	mov	sl, r0
 8001fbc:	4658      	mov	r0, fp
 8001fbe:	437b      	muls	r3, r7
 8001fc0:	4450      	add	r0, sl
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	4581      	cmp	r9, r0
 8001fc6:	d906      	bls.n	8001fd6 <__aeabi_dmul+0x1d6>
 8001fc8:	469a      	mov	sl, r3
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	025b      	lsls	r3, r3, #9
 8001fce:	4699      	mov	r9, r3
 8001fd0:	44ca      	add	sl, r9
 8001fd2:	4653      	mov	r3, sl
 8001fd4:	9302      	str	r3, [sp, #8]
 8001fd6:	0c03      	lsrs	r3, r0, #16
 8001fd8:	469b      	mov	fp, r3
 8001fda:	4643      	mov	r3, r8
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	0400      	lsls	r0, r0, #16
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	4698      	mov	r8, r3
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	4443      	add	r3, r8
 8001fe8:	9304      	str	r3, [sp, #16]
 8001fea:	0c33      	lsrs	r3, r6, #16
 8001fec:	4699      	mov	r9, r3
 8001fee:	002b      	movs	r3, r5
 8001ff0:	0436      	lsls	r6, r6, #16
 8001ff2:	0c36      	lsrs	r6, r6, #16
 8001ff4:	4373      	muls	r3, r6
 8001ff6:	4698      	mov	r8, r3
 8001ff8:	0033      	movs	r3, r6
 8001ffa:	437b      	muls	r3, r7
 8001ffc:	469a      	mov	sl, r3
 8001ffe:	464b      	mov	r3, r9
 8002000:	435d      	muls	r5, r3
 8002002:	435f      	muls	r7, r3
 8002004:	4643      	mov	r3, r8
 8002006:	4455      	add	r5, sl
 8002008:	0c18      	lsrs	r0, r3, #16
 800200a:	1940      	adds	r0, r0, r5
 800200c:	4582      	cmp	sl, r0
 800200e:	d903      	bls.n	8002018 <__aeabi_dmul+0x218>
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	469a      	mov	sl, r3
 8002016:	4457      	add	r7, sl
 8002018:	0c05      	lsrs	r5, r0, #16
 800201a:	19eb      	adds	r3, r5, r7
 800201c:	9305      	str	r3, [sp, #20]
 800201e:	4643      	mov	r3, r8
 8002020:	041d      	lsls	r5, r3, #16
 8002022:	0c2d      	lsrs	r5, r5, #16
 8002024:	0400      	lsls	r0, r0, #16
 8002026:	1940      	adds	r0, r0, r5
 8002028:	0c25      	lsrs	r5, r4, #16
 800202a:	0424      	lsls	r4, r4, #16
 800202c:	0c24      	lsrs	r4, r4, #16
 800202e:	0027      	movs	r7, r4
 8002030:	4357      	muls	r7, r2
 8002032:	436a      	muls	r2, r5
 8002034:	4690      	mov	r8, r2
 8002036:	002a      	movs	r2, r5
 8002038:	0c3b      	lsrs	r3, r7, #16
 800203a:	469a      	mov	sl, r3
 800203c:	434a      	muls	r2, r1
 800203e:	4361      	muls	r1, r4
 8002040:	4441      	add	r1, r8
 8002042:	4451      	add	r1, sl
 8002044:	4483      	add	fp, r0
 8002046:	4588      	cmp	r8, r1
 8002048:	d903      	bls.n	8002052 <__aeabi_dmul+0x252>
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	025b      	lsls	r3, r3, #9
 800204e:	4698      	mov	r8, r3
 8002050:	4442      	add	r2, r8
 8002052:	043f      	lsls	r7, r7, #16
 8002054:	0c0b      	lsrs	r3, r1, #16
 8002056:	0c3f      	lsrs	r7, r7, #16
 8002058:	0409      	lsls	r1, r1, #16
 800205a:	19c9      	adds	r1, r1, r7
 800205c:	0027      	movs	r7, r4
 800205e:	4698      	mov	r8, r3
 8002060:	464b      	mov	r3, r9
 8002062:	4377      	muls	r7, r6
 8002064:	435c      	muls	r4, r3
 8002066:	436e      	muls	r6, r5
 8002068:	435d      	muls	r5, r3
 800206a:	0c3b      	lsrs	r3, r7, #16
 800206c:	4699      	mov	r9, r3
 800206e:	19a4      	adds	r4, r4, r6
 8002070:	444c      	add	r4, r9
 8002072:	4442      	add	r2, r8
 8002074:	9503      	str	r5, [sp, #12]
 8002076:	42a6      	cmp	r6, r4
 8002078:	d904      	bls.n	8002084 <__aeabi_dmul+0x284>
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	4698      	mov	r8, r3
 8002080:	4445      	add	r5, r8
 8002082:	9503      	str	r5, [sp, #12]
 8002084:	9b02      	ldr	r3, [sp, #8]
 8002086:	043f      	lsls	r7, r7, #16
 8002088:	445b      	add	r3, fp
 800208a:	001e      	movs	r6, r3
 800208c:	4283      	cmp	r3, r0
 800208e:	4180      	sbcs	r0, r0
 8002090:	0423      	lsls	r3, r4, #16
 8002092:	4698      	mov	r8, r3
 8002094:	9b05      	ldr	r3, [sp, #20]
 8002096:	0c3f      	lsrs	r7, r7, #16
 8002098:	4447      	add	r7, r8
 800209a:	4698      	mov	r8, r3
 800209c:	1876      	adds	r6, r6, r1
 800209e:	428e      	cmp	r6, r1
 80020a0:	4189      	sbcs	r1, r1
 80020a2:	4447      	add	r7, r8
 80020a4:	4240      	negs	r0, r0
 80020a6:	183d      	adds	r5, r7, r0
 80020a8:	46a8      	mov	r8, r5
 80020aa:	4693      	mov	fp, r2
 80020ac:	4249      	negs	r1, r1
 80020ae:	468a      	mov	sl, r1
 80020b0:	44c3      	add	fp, r8
 80020b2:	429f      	cmp	r7, r3
 80020b4:	41bf      	sbcs	r7, r7
 80020b6:	4580      	cmp	r8, r0
 80020b8:	4180      	sbcs	r0, r0
 80020ba:	9b03      	ldr	r3, [sp, #12]
 80020bc:	44da      	add	sl, fp
 80020be:	4698      	mov	r8, r3
 80020c0:	4653      	mov	r3, sl
 80020c2:	4240      	negs	r0, r0
 80020c4:	427f      	negs	r7, r7
 80020c6:	4307      	orrs	r7, r0
 80020c8:	0c24      	lsrs	r4, r4, #16
 80020ca:	4593      	cmp	fp, r2
 80020cc:	4192      	sbcs	r2, r2
 80020ce:	458a      	cmp	sl, r1
 80020d0:	4189      	sbcs	r1, r1
 80020d2:	193f      	adds	r7, r7, r4
 80020d4:	0ddc      	lsrs	r4, r3, #23
 80020d6:	9b04      	ldr	r3, [sp, #16]
 80020d8:	0275      	lsls	r5, r6, #9
 80020da:	431d      	orrs	r5, r3
 80020dc:	1e68      	subs	r0, r5, #1
 80020de:	4185      	sbcs	r5, r0
 80020e0:	4653      	mov	r3, sl
 80020e2:	4252      	negs	r2, r2
 80020e4:	4249      	negs	r1, r1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	18bf      	adds	r7, r7, r2
 80020ea:	4447      	add	r7, r8
 80020ec:	0df6      	lsrs	r6, r6, #23
 80020ee:	027f      	lsls	r7, r7, #9
 80020f0:	4335      	orrs	r5, r6
 80020f2:	025a      	lsls	r2, r3, #9
 80020f4:	433c      	orrs	r4, r7
 80020f6:	4315      	orrs	r5, r2
 80020f8:	01fb      	lsls	r3, r7, #7
 80020fa:	d400      	bmi.n	80020fe <__aeabi_dmul+0x2fe>
 80020fc:	e0c1      	b.n	8002282 <__aeabi_dmul+0x482>
 80020fe:	2101      	movs	r1, #1
 8002100:	086a      	lsrs	r2, r5, #1
 8002102:	400d      	ands	r5, r1
 8002104:	4315      	orrs	r5, r2
 8002106:	07e2      	lsls	r2, r4, #31
 8002108:	4315      	orrs	r5, r2
 800210a:	0864      	lsrs	r4, r4, #1
 800210c:	4926      	ldr	r1, [pc, #152]	; (80021a8 <__aeabi_dmul+0x3a8>)
 800210e:	4461      	add	r1, ip
 8002110:	2900      	cmp	r1, #0
 8002112:	dd56      	ble.n	80021c2 <__aeabi_dmul+0x3c2>
 8002114:	076b      	lsls	r3, r5, #29
 8002116:	d009      	beq.n	800212c <__aeabi_dmul+0x32c>
 8002118:	220f      	movs	r2, #15
 800211a:	402a      	ands	r2, r5
 800211c:	2a04      	cmp	r2, #4
 800211e:	d005      	beq.n	800212c <__aeabi_dmul+0x32c>
 8002120:	1d2a      	adds	r2, r5, #4
 8002122:	42aa      	cmp	r2, r5
 8002124:	41ad      	sbcs	r5, r5
 8002126:	426d      	negs	r5, r5
 8002128:	1964      	adds	r4, r4, r5
 800212a:	0015      	movs	r5, r2
 800212c:	01e3      	lsls	r3, r4, #7
 800212e:	d504      	bpl.n	800213a <__aeabi_dmul+0x33a>
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <__aeabi_dmul+0x3ac>)
 8002134:	00c9      	lsls	r1, r1, #3
 8002136:	4014      	ands	r4, r2
 8002138:	4461      	add	r1, ip
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <__aeabi_dmul+0x3b0>)
 800213c:	4291      	cmp	r1, r2
 800213e:	dd00      	ble.n	8002142 <__aeabi_dmul+0x342>
 8002140:	e724      	b.n	8001f8c <__aeabi_dmul+0x18c>
 8002142:	0762      	lsls	r2, r4, #29
 8002144:	08ed      	lsrs	r5, r5, #3
 8002146:	0264      	lsls	r4, r4, #9
 8002148:	0549      	lsls	r1, r1, #21
 800214a:	4315      	orrs	r5, r2
 800214c:	0b24      	lsrs	r4, r4, #12
 800214e:	0d4a      	lsrs	r2, r1, #21
 8002150:	e6c6      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 8002152:	9701      	str	r7, [sp, #4]
 8002154:	e6b8      	b.n	8001ec8 <__aeabi_dmul+0xc8>
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <__aeabi_dmul+0x398>)
 8002158:	2003      	movs	r0, #3
 800215a:	4694      	mov	ip, r2
 800215c:	4463      	add	r3, ip
 800215e:	464a      	mov	r2, r9
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2303      	movs	r3, #3
 8002164:	431a      	orrs	r2, r3
 8002166:	4691      	mov	r9, r2
 8002168:	4652      	mov	r2, sl
 800216a:	e68a      	b.n	8001e82 <__aeabi_dmul+0x82>
 800216c:	4649      	mov	r1, r9
 800216e:	2301      	movs	r3, #1
 8002170:	4319      	orrs	r1, r3
 8002172:	4689      	mov	r9, r1
 8002174:	2600      	movs	r6, #0
 8002176:	2001      	movs	r0, #1
 8002178:	e683      	b.n	8001e82 <__aeabi_dmul+0x82>
 800217a:	220c      	movs	r2, #12
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2303      	movs	r3, #3
 8002180:	0005      	movs	r5, r0
 8002182:	4691      	mov	r9, r2
 8002184:	469b      	mov	fp, r3
 8002186:	e65e      	b.n	8001e46 <__aeabi_dmul+0x46>
 8002188:	2304      	movs	r3, #4
 800218a:	4699      	mov	r9, r3
 800218c:	2300      	movs	r3, #0
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	2400      	movs	r4, #0
 8002194:	469b      	mov	fp, r3
 8002196:	e656      	b.n	8001e46 <__aeabi_dmul+0x46>
 8002198:	000007ff 	.word	0x000007ff
 800219c:	fffffc01 	.word	0xfffffc01
 80021a0:	08009624 	.word	0x08009624
 80021a4:	fffffc0d 	.word	0xfffffc0d
 80021a8:	000003ff 	.word	0x000003ff
 80021ac:	feffffff 	.word	0xfeffffff
 80021b0:	000007fe 	.word	0x000007fe
 80021b4:	2300      	movs	r3, #0
 80021b6:	2480      	movs	r4, #128	; 0x80
 80021b8:	2500      	movs	r5, #0
 80021ba:	4a44      	ldr	r2, [pc, #272]	; (80022cc <__aeabi_dmul+0x4cc>)
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	0324      	lsls	r4, r4, #12
 80021c0:	e68e      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 80021c2:	2001      	movs	r0, #1
 80021c4:	1a40      	subs	r0, r0, r1
 80021c6:	2838      	cmp	r0, #56	; 0x38
 80021c8:	dd00      	ble.n	80021cc <__aeabi_dmul+0x3cc>
 80021ca:	e686      	b.n	8001eda <__aeabi_dmul+0xda>
 80021cc:	281f      	cmp	r0, #31
 80021ce:	dd5b      	ble.n	8002288 <__aeabi_dmul+0x488>
 80021d0:	221f      	movs	r2, #31
 80021d2:	0023      	movs	r3, r4
 80021d4:	4252      	negs	r2, r2
 80021d6:	1a51      	subs	r1, r2, r1
 80021d8:	40cb      	lsrs	r3, r1
 80021da:	0019      	movs	r1, r3
 80021dc:	2820      	cmp	r0, #32
 80021de:	d003      	beq.n	80021e8 <__aeabi_dmul+0x3e8>
 80021e0:	4a3b      	ldr	r2, [pc, #236]	; (80022d0 <__aeabi_dmul+0x4d0>)
 80021e2:	4462      	add	r2, ip
 80021e4:	4094      	lsls	r4, r2
 80021e6:	4325      	orrs	r5, r4
 80021e8:	1e6a      	subs	r2, r5, #1
 80021ea:	4195      	sbcs	r5, r2
 80021ec:	002a      	movs	r2, r5
 80021ee:	430a      	orrs	r2, r1
 80021f0:	2107      	movs	r1, #7
 80021f2:	000d      	movs	r5, r1
 80021f4:	2400      	movs	r4, #0
 80021f6:	4015      	ands	r5, r2
 80021f8:	4211      	tst	r1, r2
 80021fa:	d05b      	beq.n	80022b4 <__aeabi_dmul+0x4b4>
 80021fc:	210f      	movs	r1, #15
 80021fe:	2400      	movs	r4, #0
 8002200:	4011      	ands	r1, r2
 8002202:	2904      	cmp	r1, #4
 8002204:	d053      	beq.n	80022ae <__aeabi_dmul+0x4ae>
 8002206:	1d11      	adds	r1, r2, #4
 8002208:	4291      	cmp	r1, r2
 800220a:	4192      	sbcs	r2, r2
 800220c:	4252      	negs	r2, r2
 800220e:	18a4      	adds	r4, r4, r2
 8002210:	000a      	movs	r2, r1
 8002212:	0223      	lsls	r3, r4, #8
 8002214:	d54b      	bpl.n	80022ae <__aeabi_dmul+0x4ae>
 8002216:	2201      	movs	r2, #1
 8002218:	2400      	movs	r4, #0
 800221a:	2500      	movs	r5, #0
 800221c:	e660      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	031b      	lsls	r3, r3, #12
 8002222:	421c      	tst	r4, r3
 8002224:	d009      	beq.n	800223a <__aeabi_dmul+0x43a>
 8002226:	421e      	tst	r6, r3
 8002228:	d107      	bne.n	800223a <__aeabi_dmul+0x43a>
 800222a:	4333      	orrs	r3, r6
 800222c:	031c      	lsls	r4, r3, #12
 800222e:	4643      	mov	r3, r8
 8002230:	0015      	movs	r5, r2
 8002232:	0b24      	lsrs	r4, r4, #12
 8002234:	4a25      	ldr	r2, [pc, #148]	; (80022cc <__aeabi_dmul+0x4cc>)
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	e652      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 800223a:	2280      	movs	r2, #128	; 0x80
 800223c:	0312      	lsls	r2, r2, #12
 800223e:	4314      	orrs	r4, r2
 8002240:	0324      	lsls	r4, r4, #12
 8002242:	4a22      	ldr	r2, [pc, #136]	; (80022cc <__aeabi_dmul+0x4cc>)
 8002244:	0b24      	lsrs	r4, r4, #12
 8002246:	9701      	str	r7, [sp, #4]
 8002248:	e64a      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 800224a:	f000 fc81 	bl	8002b50 <__clzsi2>
 800224e:	0003      	movs	r3, r0
 8002250:	001a      	movs	r2, r3
 8002252:	3215      	adds	r2, #21
 8002254:	3020      	adds	r0, #32
 8002256:	2a1c      	cmp	r2, #28
 8002258:	dc00      	bgt.n	800225c <__aeabi_dmul+0x45c>
 800225a:	e684      	b.n	8001f66 <__aeabi_dmul+0x166>
 800225c:	4656      	mov	r6, sl
 800225e:	3b08      	subs	r3, #8
 8002260:	2200      	movs	r2, #0
 8002262:	409e      	lsls	r6, r3
 8002264:	e689      	b.n	8001f7a <__aeabi_dmul+0x17a>
 8002266:	f000 fc73 	bl	8002b50 <__clzsi2>
 800226a:	0001      	movs	r1, r0
 800226c:	0002      	movs	r2, r0
 800226e:	3115      	adds	r1, #21
 8002270:	3220      	adds	r2, #32
 8002272:	291c      	cmp	r1, #28
 8002274:	dc00      	bgt.n	8002278 <__aeabi_dmul+0x478>
 8002276:	e64e      	b.n	8001f16 <__aeabi_dmul+0x116>
 8002278:	0034      	movs	r4, r6
 800227a:	3808      	subs	r0, #8
 800227c:	2500      	movs	r5, #0
 800227e:	4084      	lsls	r4, r0
 8002280:	e653      	b.n	8001f2a <__aeabi_dmul+0x12a>
 8002282:	9b00      	ldr	r3, [sp, #0]
 8002284:	469c      	mov	ip, r3
 8002286:	e741      	b.n	800210c <__aeabi_dmul+0x30c>
 8002288:	4912      	ldr	r1, [pc, #72]	; (80022d4 <__aeabi_dmul+0x4d4>)
 800228a:	0022      	movs	r2, r4
 800228c:	4461      	add	r1, ip
 800228e:	002e      	movs	r6, r5
 8002290:	408d      	lsls	r5, r1
 8002292:	408a      	lsls	r2, r1
 8002294:	40c6      	lsrs	r6, r0
 8002296:	1e69      	subs	r1, r5, #1
 8002298:	418d      	sbcs	r5, r1
 800229a:	4332      	orrs	r2, r6
 800229c:	432a      	orrs	r2, r5
 800229e:	40c4      	lsrs	r4, r0
 80022a0:	0753      	lsls	r3, r2, #29
 80022a2:	d0b6      	beq.n	8002212 <__aeabi_dmul+0x412>
 80022a4:	210f      	movs	r1, #15
 80022a6:	4011      	ands	r1, r2
 80022a8:	2904      	cmp	r1, #4
 80022aa:	d1ac      	bne.n	8002206 <__aeabi_dmul+0x406>
 80022ac:	e7b1      	b.n	8002212 <__aeabi_dmul+0x412>
 80022ae:	0765      	lsls	r5, r4, #29
 80022b0:	0264      	lsls	r4, r4, #9
 80022b2:	0b24      	lsrs	r4, r4, #12
 80022b4:	08d2      	lsrs	r2, r2, #3
 80022b6:	4315      	orrs	r5, r2
 80022b8:	2200      	movs	r2, #0
 80022ba:	e611      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	0312      	lsls	r2, r2, #12
 80022c0:	4314      	orrs	r4, r2
 80022c2:	0324      	lsls	r4, r4, #12
 80022c4:	4a01      	ldr	r2, [pc, #4]	; (80022cc <__aeabi_dmul+0x4cc>)
 80022c6:	0b24      	lsrs	r4, r4, #12
 80022c8:	e60a      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	000007ff 	.word	0x000007ff
 80022d0:	0000043e 	.word	0x0000043e
 80022d4:	0000041e 	.word	0x0000041e

080022d8 <__aeabi_dsub>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	4645      	mov	r5, r8
 80022e0:	46de      	mov	lr, fp
 80022e2:	0004      	movs	r4, r0
 80022e4:	b5e0      	push	{r5, r6, r7, lr}
 80022e6:	001f      	movs	r7, r3
 80022e8:	0010      	movs	r0, r2
 80022ea:	030b      	lsls	r3, r1, #12
 80022ec:	0f62      	lsrs	r2, r4, #29
 80022ee:	004e      	lsls	r6, r1, #1
 80022f0:	0fcd      	lsrs	r5, r1, #31
 80022f2:	0a5b      	lsrs	r3, r3, #9
 80022f4:	0339      	lsls	r1, r7, #12
 80022f6:	4313      	orrs	r3, r2
 80022f8:	0a49      	lsrs	r1, r1, #9
 80022fa:	00e2      	lsls	r2, r4, #3
 80022fc:	0f44      	lsrs	r4, r0, #29
 80022fe:	4321      	orrs	r1, r4
 8002300:	4cc2      	ldr	r4, [pc, #776]	; (800260c <__aeabi_dsub+0x334>)
 8002302:	4691      	mov	r9, r2
 8002304:	4692      	mov	sl, r2
 8002306:	00c0      	lsls	r0, r0, #3
 8002308:	007a      	lsls	r2, r7, #1
 800230a:	4680      	mov	r8, r0
 800230c:	0d76      	lsrs	r6, r6, #21
 800230e:	0d52      	lsrs	r2, r2, #21
 8002310:	0fff      	lsrs	r7, r7, #31
 8002312:	42a2      	cmp	r2, r4
 8002314:	d100      	bne.n	8002318 <__aeabi_dsub+0x40>
 8002316:	e0b4      	b.n	8002482 <__aeabi_dsub+0x1aa>
 8002318:	2401      	movs	r4, #1
 800231a:	4067      	eors	r7, r4
 800231c:	46bb      	mov	fp, r7
 800231e:	42bd      	cmp	r5, r7
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x4c>
 8002322:	e088      	b.n	8002436 <__aeabi_dsub+0x15e>
 8002324:	1ab4      	subs	r4, r6, r2
 8002326:	46a4      	mov	ip, r4
 8002328:	2c00      	cmp	r4, #0
 800232a:	dc00      	bgt.n	800232e <__aeabi_dsub+0x56>
 800232c:	e0b2      	b.n	8002494 <__aeabi_dsub+0x1bc>
 800232e:	2a00      	cmp	r2, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dsub+0x5c>
 8002332:	e0c5      	b.n	80024c0 <__aeabi_dsub+0x1e8>
 8002334:	4ab5      	ldr	r2, [pc, #724]	; (800260c <__aeabi_dsub+0x334>)
 8002336:	4296      	cmp	r6, r2
 8002338:	d100      	bne.n	800233c <__aeabi_dsub+0x64>
 800233a:	e28b      	b.n	8002854 <__aeabi_dsub+0x57c>
 800233c:	2280      	movs	r2, #128	; 0x80
 800233e:	0412      	lsls	r2, r2, #16
 8002340:	4311      	orrs	r1, r2
 8002342:	4662      	mov	r2, ip
 8002344:	2a38      	cmp	r2, #56	; 0x38
 8002346:	dd00      	ble.n	800234a <__aeabi_dsub+0x72>
 8002348:	e1a1      	b.n	800268e <__aeabi_dsub+0x3b6>
 800234a:	2a1f      	cmp	r2, #31
 800234c:	dd00      	ble.n	8002350 <__aeabi_dsub+0x78>
 800234e:	e216      	b.n	800277e <__aeabi_dsub+0x4a6>
 8002350:	2720      	movs	r7, #32
 8002352:	000c      	movs	r4, r1
 8002354:	1abf      	subs	r7, r7, r2
 8002356:	40bc      	lsls	r4, r7
 8002358:	0002      	movs	r2, r0
 800235a:	46a0      	mov	r8, r4
 800235c:	4664      	mov	r4, ip
 800235e:	40b8      	lsls	r0, r7
 8002360:	40e2      	lsrs	r2, r4
 8002362:	4644      	mov	r4, r8
 8002364:	4314      	orrs	r4, r2
 8002366:	0002      	movs	r2, r0
 8002368:	1e50      	subs	r0, r2, #1
 800236a:	4182      	sbcs	r2, r0
 800236c:	4660      	mov	r0, ip
 800236e:	40c1      	lsrs	r1, r0
 8002370:	4322      	orrs	r2, r4
 8002372:	1a5b      	subs	r3, r3, r1
 8002374:	4649      	mov	r1, r9
 8002376:	1a8c      	subs	r4, r1, r2
 8002378:	45a1      	cmp	r9, r4
 800237a:	4192      	sbcs	r2, r2
 800237c:	4252      	negs	r2, r2
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	4698      	mov	r8, r3
 8002382:	4643      	mov	r3, r8
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	d400      	bmi.n	800238a <__aeabi_dsub+0xb2>
 8002388:	e117      	b.n	80025ba <__aeabi_dsub+0x2e2>
 800238a:	4643      	mov	r3, r8
 800238c:	025b      	lsls	r3, r3, #9
 800238e:	0a5b      	lsrs	r3, r3, #9
 8002390:	4698      	mov	r8, r3
 8002392:	4643      	mov	r3, r8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d100      	bne.n	800239a <__aeabi_dsub+0xc2>
 8002398:	e16c      	b.n	8002674 <__aeabi_dsub+0x39c>
 800239a:	4640      	mov	r0, r8
 800239c:	f000 fbd8 	bl	8002b50 <__clzsi2>
 80023a0:	0002      	movs	r2, r0
 80023a2:	3a08      	subs	r2, #8
 80023a4:	2120      	movs	r1, #32
 80023a6:	0020      	movs	r0, r4
 80023a8:	4643      	mov	r3, r8
 80023aa:	1a89      	subs	r1, r1, r2
 80023ac:	4093      	lsls	r3, r2
 80023ae:	40c8      	lsrs	r0, r1
 80023b0:	4094      	lsls	r4, r2
 80023b2:	4303      	orrs	r3, r0
 80023b4:	4296      	cmp	r6, r2
 80023b6:	dd00      	ble.n	80023ba <__aeabi_dsub+0xe2>
 80023b8:	e157      	b.n	800266a <__aeabi_dsub+0x392>
 80023ba:	1b96      	subs	r6, r2, r6
 80023bc:	1c71      	adds	r1, r6, #1
 80023be:	291f      	cmp	r1, #31
 80023c0:	dd00      	ble.n	80023c4 <__aeabi_dsub+0xec>
 80023c2:	e1cb      	b.n	800275c <__aeabi_dsub+0x484>
 80023c4:	2220      	movs	r2, #32
 80023c6:	0018      	movs	r0, r3
 80023c8:	0026      	movs	r6, r4
 80023ca:	1a52      	subs	r2, r2, r1
 80023cc:	4094      	lsls	r4, r2
 80023ce:	4090      	lsls	r0, r2
 80023d0:	40ce      	lsrs	r6, r1
 80023d2:	40cb      	lsrs	r3, r1
 80023d4:	1e62      	subs	r2, r4, #1
 80023d6:	4194      	sbcs	r4, r2
 80023d8:	4330      	orrs	r0, r6
 80023da:	4698      	mov	r8, r3
 80023dc:	2600      	movs	r6, #0
 80023de:	4304      	orrs	r4, r0
 80023e0:	0763      	lsls	r3, r4, #29
 80023e2:	d009      	beq.n	80023f8 <__aeabi_dsub+0x120>
 80023e4:	230f      	movs	r3, #15
 80023e6:	4023      	ands	r3, r4
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d005      	beq.n	80023f8 <__aeabi_dsub+0x120>
 80023ec:	1d23      	adds	r3, r4, #4
 80023ee:	42a3      	cmp	r3, r4
 80023f0:	41a4      	sbcs	r4, r4
 80023f2:	4264      	negs	r4, r4
 80023f4:	44a0      	add	r8, r4
 80023f6:	001c      	movs	r4, r3
 80023f8:	4643      	mov	r3, r8
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	d400      	bmi.n	8002400 <__aeabi_dsub+0x128>
 80023fe:	e0df      	b.n	80025c0 <__aeabi_dsub+0x2e8>
 8002400:	4b82      	ldr	r3, [pc, #520]	; (800260c <__aeabi_dsub+0x334>)
 8002402:	3601      	adds	r6, #1
 8002404:	429e      	cmp	r6, r3
 8002406:	d100      	bne.n	800240a <__aeabi_dsub+0x132>
 8002408:	e0fb      	b.n	8002602 <__aeabi_dsub+0x32a>
 800240a:	4642      	mov	r2, r8
 800240c:	4b80      	ldr	r3, [pc, #512]	; (8002610 <__aeabi_dsub+0x338>)
 800240e:	08e4      	lsrs	r4, r4, #3
 8002410:	401a      	ands	r2, r3
 8002412:	0013      	movs	r3, r2
 8002414:	0571      	lsls	r1, r6, #21
 8002416:	0752      	lsls	r2, r2, #29
 8002418:	025b      	lsls	r3, r3, #9
 800241a:	4322      	orrs	r2, r4
 800241c:	0b1b      	lsrs	r3, r3, #12
 800241e:	0d49      	lsrs	r1, r1, #21
 8002420:	0509      	lsls	r1, r1, #20
 8002422:	07ed      	lsls	r5, r5, #31
 8002424:	4319      	orrs	r1, r3
 8002426:	4329      	orrs	r1, r5
 8002428:	0010      	movs	r0, r2
 800242a:	bcf0      	pop	{r4, r5, r6, r7}
 800242c:	46bb      	mov	fp, r7
 800242e:	46b2      	mov	sl, r6
 8002430:	46a9      	mov	r9, r5
 8002432:	46a0      	mov	r8, r4
 8002434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002436:	1ab4      	subs	r4, r6, r2
 8002438:	46a4      	mov	ip, r4
 800243a:	2c00      	cmp	r4, #0
 800243c:	dd58      	ble.n	80024f0 <__aeabi_dsub+0x218>
 800243e:	2a00      	cmp	r2, #0
 8002440:	d100      	bne.n	8002444 <__aeabi_dsub+0x16c>
 8002442:	e09e      	b.n	8002582 <__aeabi_dsub+0x2aa>
 8002444:	4a71      	ldr	r2, [pc, #452]	; (800260c <__aeabi_dsub+0x334>)
 8002446:	4296      	cmp	r6, r2
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x174>
 800244a:	e13b      	b.n	80026c4 <__aeabi_dsub+0x3ec>
 800244c:	2280      	movs	r2, #128	; 0x80
 800244e:	0412      	lsls	r2, r2, #16
 8002450:	4311      	orrs	r1, r2
 8002452:	4662      	mov	r2, ip
 8002454:	2a38      	cmp	r2, #56	; 0x38
 8002456:	dd00      	ble.n	800245a <__aeabi_dsub+0x182>
 8002458:	e0c1      	b.n	80025de <__aeabi_dsub+0x306>
 800245a:	2a1f      	cmp	r2, #31
 800245c:	dc00      	bgt.n	8002460 <__aeabi_dsub+0x188>
 800245e:	e1bb      	b.n	80027d8 <__aeabi_dsub+0x500>
 8002460:	000c      	movs	r4, r1
 8002462:	3a20      	subs	r2, #32
 8002464:	40d4      	lsrs	r4, r2
 8002466:	0022      	movs	r2, r4
 8002468:	4664      	mov	r4, ip
 800246a:	2c20      	cmp	r4, #32
 800246c:	d004      	beq.n	8002478 <__aeabi_dsub+0x1a0>
 800246e:	2740      	movs	r7, #64	; 0x40
 8002470:	1b3f      	subs	r7, r7, r4
 8002472:	40b9      	lsls	r1, r7
 8002474:	4308      	orrs	r0, r1
 8002476:	4680      	mov	r8, r0
 8002478:	4644      	mov	r4, r8
 800247a:	1e61      	subs	r1, r4, #1
 800247c:	418c      	sbcs	r4, r1
 800247e:	4314      	orrs	r4, r2
 8002480:	e0b1      	b.n	80025e6 <__aeabi_dsub+0x30e>
 8002482:	000c      	movs	r4, r1
 8002484:	4304      	orrs	r4, r0
 8002486:	d02a      	beq.n	80024de <__aeabi_dsub+0x206>
 8002488:	46bb      	mov	fp, r7
 800248a:	42bd      	cmp	r5, r7
 800248c:	d02d      	beq.n	80024ea <__aeabi_dsub+0x212>
 800248e:	4c61      	ldr	r4, [pc, #388]	; (8002614 <__aeabi_dsub+0x33c>)
 8002490:	46a4      	mov	ip, r4
 8002492:	44b4      	add	ip, r6
 8002494:	4664      	mov	r4, ip
 8002496:	2c00      	cmp	r4, #0
 8002498:	d05c      	beq.n	8002554 <__aeabi_dsub+0x27c>
 800249a:	1b94      	subs	r4, r2, r6
 800249c:	46a4      	mov	ip, r4
 800249e:	2e00      	cmp	r6, #0
 80024a0:	d000      	beq.n	80024a4 <__aeabi_dsub+0x1cc>
 80024a2:	e115      	b.n	80026d0 <__aeabi_dsub+0x3f8>
 80024a4:	464d      	mov	r5, r9
 80024a6:	431d      	orrs	r5, r3
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x1d4>
 80024aa:	e1c3      	b.n	8002834 <__aeabi_dsub+0x55c>
 80024ac:	1e65      	subs	r5, r4, #1
 80024ae:	2c01      	cmp	r4, #1
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x1dc>
 80024b2:	e20c      	b.n	80028ce <__aeabi_dsub+0x5f6>
 80024b4:	4e55      	ldr	r6, [pc, #340]	; (800260c <__aeabi_dsub+0x334>)
 80024b6:	42b4      	cmp	r4, r6
 80024b8:	d100      	bne.n	80024bc <__aeabi_dsub+0x1e4>
 80024ba:	e1f8      	b.n	80028ae <__aeabi_dsub+0x5d6>
 80024bc:	46ac      	mov	ip, r5
 80024be:	e10e      	b.n	80026de <__aeabi_dsub+0x406>
 80024c0:	000a      	movs	r2, r1
 80024c2:	4302      	orrs	r2, r0
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x1f0>
 80024c6:	e136      	b.n	8002736 <__aeabi_dsub+0x45e>
 80024c8:	0022      	movs	r2, r4
 80024ca:	3a01      	subs	r2, #1
 80024cc:	2c01      	cmp	r4, #1
 80024ce:	d100      	bne.n	80024d2 <__aeabi_dsub+0x1fa>
 80024d0:	e1c6      	b.n	8002860 <__aeabi_dsub+0x588>
 80024d2:	4c4e      	ldr	r4, [pc, #312]	; (800260c <__aeabi_dsub+0x334>)
 80024d4:	45a4      	cmp	ip, r4
 80024d6:	d100      	bne.n	80024da <__aeabi_dsub+0x202>
 80024d8:	e0f4      	b.n	80026c4 <__aeabi_dsub+0x3ec>
 80024da:	4694      	mov	ip, r2
 80024dc:	e731      	b.n	8002342 <__aeabi_dsub+0x6a>
 80024de:	2401      	movs	r4, #1
 80024e0:	4067      	eors	r7, r4
 80024e2:	46bb      	mov	fp, r7
 80024e4:	42bd      	cmp	r5, r7
 80024e6:	d000      	beq.n	80024ea <__aeabi_dsub+0x212>
 80024e8:	e71c      	b.n	8002324 <__aeabi_dsub+0x4c>
 80024ea:	4c4a      	ldr	r4, [pc, #296]	; (8002614 <__aeabi_dsub+0x33c>)
 80024ec:	46a4      	mov	ip, r4
 80024ee:	44b4      	add	ip, r6
 80024f0:	4664      	mov	r4, ip
 80024f2:	2c00      	cmp	r4, #0
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dsub+0x220>
 80024f6:	e0cf      	b.n	8002698 <__aeabi_dsub+0x3c0>
 80024f8:	1b94      	subs	r4, r2, r6
 80024fa:	46a4      	mov	ip, r4
 80024fc:	2e00      	cmp	r6, #0
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0x22a>
 8002500:	e15c      	b.n	80027bc <__aeabi_dsub+0x4e4>
 8002502:	4e42      	ldr	r6, [pc, #264]	; (800260c <__aeabi_dsub+0x334>)
 8002504:	42b2      	cmp	r2, r6
 8002506:	d100      	bne.n	800250a <__aeabi_dsub+0x232>
 8002508:	e1ec      	b.n	80028e4 <__aeabi_dsub+0x60c>
 800250a:	2680      	movs	r6, #128	; 0x80
 800250c:	0436      	lsls	r6, r6, #16
 800250e:	4333      	orrs	r3, r6
 8002510:	4664      	mov	r4, ip
 8002512:	2c38      	cmp	r4, #56	; 0x38
 8002514:	dd00      	ble.n	8002518 <__aeabi_dsub+0x240>
 8002516:	e1b3      	b.n	8002880 <__aeabi_dsub+0x5a8>
 8002518:	2c1f      	cmp	r4, #31
 800251a:	dd00      	ble.n	800251e <__aeabi_dsub+0x246>
 800251c:	e238      	b.n	8002990 <__aeabi_dsub+0x6b8>
 800251e:	2620      	movs	r6, #32
 8002520:	1b36      	subs	r6, r6, r4
 8002522:	001c      	movs	r4, r3
 8002524:	40b4      	lsls	r4, r6
 8002526:	464f      	mov	r7, r9
 8002528:	46a0      	mov	r8, r4
 800252a:	4664      	mov	r4, ip
 800252c:	40e7      	lsrs	r7, r4
 800252e:	4644      	mov	r4, r8
 8002530:	433c      	orrs	r4, r7
 8002532:	464f      	mov	r7, r9
 8002534:	40b7      	lsls	r7, r6
 8002536:	003e      	movs	r6, r7
 8002538:	1e77      	subs	r7, r6, #1
 800253a:	41be      	sbcs	r6, r7
 800253c:	4334      	orrs	r4, r6
 800253e:	4666      	mov	r6, ip
 8002540:	40f3      	lsrs	r3, r6
 8002542:	18c9      	adds	r1, r1, r3
 8002544:	1824      	adds	r4, r4, r0
 8002546:	4284      	cmp	r4, r0
 8002548:	419b      	sbcs	r3, r3
 800254a:	425b      	negs	r3, r3
 800254c:	4698      	mov	r8, r3
 800254e:	0016      	movs	r6, r2
 8002550:	4488      	add	r8, r1
 8002552:	e04e      	b.n	80025f2 <__aeabi_dsub+0x31a>
 8002554:	4a30      	ldr	r2, [pc, #192]	; (8002618 <__aeabi_dsub+0x340>)
 8002556:	1c74      	adds	r4, r6, #1
 8002558:	4214      	tst	r4, r2
 800255a:	d000      	beq.n	800255e <__aeabi_dsub+0x286>
 800255c:	e0d6      	b.n	800270c <__aeabi_dsub+0x434>
 800255e:	464a      	mov	r2, r9
 8002560:	431a      	orrs	r2, r3
 8002562:	2e00      	cmp	r6, #0
 8002564:	d000      	beq.n	8002568 <__aeabi_dsub+0x290>
 8002566:	e15b      	b.n	8002820 <__aeabi_dsub+0x548>
 8002568:	2a00      	cmp	r2, #0
 800256a:	d100      	bne.n	800256e <__aeabi_dsub+0x296>
 800256c:	e1a5      	b.n	80028ba <__aeabi_dsub+0x5e2>
 800256e:	000a      	movs	r2, r1
 8002570:	4302      	orrs	r2, r0
 8002572:	d000      	beq.n	8002576 <__aeabi_dsub+0x29e>
 8002574:	e1bb      	b.n	80028ee <__aeabi_dsub+0x616>
 8002576:	464a      	mov	r2, r9
 8002578:	0759      	lsls	r1, r3, #29
 800257a:	08d2      	lsrs	r2, r2, #3
 800257c:	430a      	orrs	r2, r1
 800257e:	08db      	lsrs	r3, r3, #3
 8002580:	e027      	b.n	80025d2 <__aeabi_dsub+0x2fa>
 8002582:	000a      	movs	r2, r1
 8002584:	4302      	orrs	r2, r0
 8002586:	d100      	bne.n	800258a <__aeabi_dsub+0x2b2>
 8002588:	e174      	b.n	8002874 <__aeabi_dsub+0x59c>
 800258a:	0022      	movs	r2, r4
 800258c:	3a01      	subs	r2, #1
 800258e:	2c01      	cmp	r4, #1
 8002590:	d005      	beq.n	800259e <__aeabi_dsub+0x2c6>
 8002592:	4c1e      	ldr	r4, [pc, #120]	; (800260c <__aeabi_dsub+0x334>)
 8002594:	45a4      	cmp	ip, r4
 8002596:	d100      	bne.n	800259a <__aeabi_dsub+0x2c2>
 8002598:	e094      	b.n	80026c4 <__aeabi_dsub+0x3ec>
 800259a:	4694      	mov	ip, r2
 800259c:	e759      	b.n	8002452 <__aeabi_dsub+0x17a>
 800259e:	4448      	add	r0, r9
 80025a0:	4548      	cmp	r0, r9
 80025a2:	4192      	sbcs	r2, r2
 80025a4:	185b      	adds	r3, r3, r1
 80025a6:	4698      	mov	r8, r3
 80025a8:	0004      	movs	r4, r0
 80025aa:	4252      	negs	r2, r2
 80025ac:	4490      	add	r8, r2
 80025ae:	4643      	mov	r3, r8
 80025b0:	2602      	movs	r6, #2
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	d500      	bpl.n	80025b8 <__aeabi_dsub+0x2e0>
 80025b6:	e0c4      	b.n	8002742 <__aeabi_dsub+0x46a>
 80025b8:	3e01      	subs	r6, #1
 80025ba:	0763      	lsls	r3, r4, #29
 80025bc:	d000      	beq.n	80025c0 <__aeabi_dsub+0x2e8>
 80025be:	e711      	b.n	80023e4 <__aeabi_dsub+0x10c>
 80025c0:	4643      	mov	r3, r8
 80025c2:	46b4      	mov	ip, r6
 80025c4:	0759      	lsls	r1, r3, #29
 80025c6:	08e2      	lsrs	r2, r4, #3
 80025c8:	430a      	orrs	r2, r1
 80025ca:	08db      	lsrs	r3, r3, #3
 80025cc:	490f      	ldr	r1, [pc, #60]	; (800260c <__aeabi_dsub+0x334>)
 80025ce:	458c      	cmp	ip, r1
 80025d0:	d040      	beq.n	8002654 <__aeabi_dsub+0x37c>
 80025d2:	4661      	mov	r1, ip
 80025d4:	031b      	lsls	r3, r3, #12
 80025d6:	0549      	lsls	r1, r1, #21
 80025d8:	0b1b      	lsrs	r3, r3, #12
 80025da:	0d49      	lsrs	r1, r1, #21
 80025dc:	e720      	b.n	8002420 <__aeabi_dsub+0x148>
 80025de:	4301      	orrs	r1, r0
 80025e0:	000c      	movs	r4, r1
 80025e2:	1e61      	subs	r1, r4, #1
 80025e4:	418c      	sbcs	r4, r1
 80025e6:	444c      	add	r4, r9
 80025e8:	454c      	cmp	r4, r9
 80025ea:	4192      	sbcs	r2, r2
 80025ec:	4252      	negs	r2, r2
 80025ee:	4690      	mov	r8, r2
 80025f0:	4498      	add	r8, r3
 80025f2:	4643      	mov	r3, r8
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	d5e0      	bpl.n	80025ba <__aeabi_dsub+0x2e2>
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__aeabi_dsub+0x334>)
 80025fa:	3601      	adds	r6, #1
 80025fc:	429e      	cmp	r6, r3
 80025fe:	d000      	beq.n	8002602 <__aeabi_dsub+0x32a>
 8002600:	e09f      	b.n	8002742 <__aeabi_dsub+0x46a>
 8002602:	0031      	movs	r1, r6
 8002604:	2300      	movs	r3, #0
 8002606:	2200      	movs	r2, #0
 8002608:	e70a      	b.n	8002420 <__aeabi_dsub+0x148>
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	000007ff 	.word	0x000007ff
 8002610:	ff7fffff 	.word	0xff7fffff
 8002614:	fffff801 	.word	0xfffff801
 8002618:	000007fe 	.word	0x000007fe
 800261c:	2a00      	cmp	r2, #0
 800261e:	d100      	bne.n	8002622 <__aeabi_dsub+0x34a>
 8002620:	e160      	b.n	80028e4 <__aeabi_dsub+0x60c>
 8002622:	000a      	movs	r2, r1
 8002624:	4302      	orrs	r2, r0
 8002626:	d04d      	beq.n	80026c4 <__aeabi_dsub+0x3ec>
 8002628:	464a      	mov	r2, r9
 800262a:	075c      	lsls	r4, r3, #29
 800262c:	08d2      	lsrs	r2, r2, #3
 800262e:	4322      	orrs	r2, r4
 8002630:	2480      	movs	r4, #128	; 0x80
 8002632:	08db      	lsrs	r3, r3, #3
 8002634:	0324      	lsls	r4, r4, #12
 8002636:	4223      	tst	r3, r4
 8002638:	d007      	beq.n	800264a <__aeabi_dsub+0x372>
 800263a:	08ce      	lsrs	r6, r1, #3
 800263c:	4226      	tst	r6, r4
 800263e:	d104      	bne.n	800264a <__aeabi_dsub+0x372>
 8002640:	465d      	mov	r5, fp
 8002642:	0033      	movs	r3, r6
 8002644:	08c2      	lsrs	r2, r0, #3
 8002646:	0749      	lsls	r1, r1, #29
 8002648:	430a      	orrs	r2, r1
 800264a:	0f51      	lsrs	r1, r2, #29
 800264c:	00d2      	lsls	r2, r2, #3
 800264e:	08d2      	lsrs	r2, r2, #3
 8002650:	0749      	lsls	r1, r1, #29
 8002652:	430a      	orrs	r2, r1
 8002654:	0011      	movs	r1, r2
 8002656:	4319      	orrs	r1, r3
 8002658:	d100      	bne.n	800265c <__aeabi_dsub+0x384>
 800265a:	e1c8      	b.n	80029ee <__aeabi_dsub+0x716>
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	0309      	lsls	r1, r1, #12
 8002660:	430b      	orrs	r3, r1
 8002662:	031b      	lsls	r3, r3, #12
 8002664:	49d5      	ldr	r1, [pc, #852]	; (80029bc <__aeabi_dsub+0x6e4>)
 8002666:	0b1b      	lsrs	r3, r3, #12
 8002668:	e6da      	b.n	8002420 <__aeabi_dsub+0x148>
 800266a:	49d5      	ldr	r1, [pc, #852]	; (80029c0 <__aeabi_dsub+0x6e8>)
 800266c:	1ab6      	subs	r6, r6, r2
 800266e:	400b      	ands	r3, r1
 8002670:	4698      	mov	r8, r3
 8002672:	e6b5      	b.n	80023e0 <__aeabi_dsub+0x108>
 8002674:	0020      	movs	r0, r4
 8002676:	f000 fa6b 	bl	8002b50 <__clzsi2>
 800267a:	0002      	movs	r2, r0
 800267c:	3218      	adds	r2, #24
 800267e:	2a1f      	cmp	r2, #31
 8002680:	dc00      	bgt.n	8002684 <__aeabi_dsub+0x3ac>
 8002682:	e68f      	b.n	80023a4 <__aeabi_dsub+0xcc>
 8002684:	0023      	movs	r3, r4
 8002686:	3808      	subs	r0, #8
 8002688:	4083      	lsls	r3, r0
 800268a:	2400      	movs	r4, #0
 800268c:	e692      	b.n	80023b4 <__aeabi_dsub+0xdc>
 800268e:	4308      	orrs	r0, r1
 8002690:	0002      	movs	r2, r0
 8002692:	1e50      	subs	r0, r2, #1
 8002694:	4182      	sbcs	r2, r0
 8002696:	e66d      	b.n	8002374 <__aeabi_dsub+0x9c>
 8002698:	4cca      	ldr	r4, [pc, #808]	; (80029c4 <__aeabi_dsub+0x6ec>)
 800269a:	1c72      	adds	r2, r6, #1
 800269c:	4222      	tst	r2, r4
 800269e:	d000      	beq.n	80026a2 <__aeabi_dsub+0x3ca>
 80026a0:	e0ad      	b.n	80027fe <__aeabi_dsub+0x526>
 80026a2:	464a      	mov	r2, r9
 80026a4:	431a      	orrs	r2, r3
 80026a6:	2e00      	cmp	r6, #0
 80026a8:	d1b8      	bne.n	800261c <__aeabi_dsub+0x344>
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x3d8>
 80026ae:	e158      	b.n	8002962 <__aeabi_dsub+0x68a>
 80026b0:	000a      	movs	r2, r1
 80026b2:	4302      	orrs	r2, r0
 80026b4:	d000      	beq.n	80026b8 <__aeabi_dsub+0x3e0>
 80026b6:	e159      	b.n	800296c <__aeabi_dsub+0x694>
 80026b8:	464a      	mov	r2, r9
 80026ba:	0759      	lsls	r1, r3, #29
 80026bc:	08d2      	lsrs	r2, r2, #3
 80026be:	430a      	orrs	r2, r1
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	e786      	b.n	80025d2 <__aeabi_dsub+0x2fa>
 80026c4:	464a      	mov	r2, r9
 80026c6:	0759      	lsls	r1, r3, #29
 80026c8:	08d2      	lsrs	r2, r2, #3
 80026ca:	430a      	orrs	r2, r1
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	e7c1      	b.n	8002654 <__aeabi_dsub+0x37c>
 80026d0:	4dba      	ldr	r5, [pc, #744]	; (80029bc <__aeabi_dsub+0x6e4>)
 80026d2:	42aa      	cmp	r2, r5
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x400>
 80026d6:	e11e      	b.n	8002916 <__aeabi_dsub+0x63e>
 80026d8:	2580      	movs	r5, #128	; 0x80
 80026da:	042d      	lsls	r5, r5, #16
 80026dc:	432b      	orrs	r3, r5
 80026de:	4664      	mov	r4, ip
 80026e0:	2c38      	cmp	r4, #56	; 0x38
 80026e2:	dc5d      	bgt.n	80027a0 <__aeabi_dsub+0x4c8>
 80026e4:	2c1f      	cmp	r4, #31
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0x412>
 80026e8:	e0d0      	b.n	800288c <__aeabi_dsub+0x5b4>
 80026ea:	2520      	movs	r5, #32
 80026ec:	4667      	mov	r7, ip
 80026ee:	1b2d      	subs	r5, r5, r4
 80026f0:	464e      	mov	r6, r9
 80026f2:	001c      	movs	r4, r3
 80026f4:	40fe      	lsrs	r6, r7
 80026f6:	40ac      	lsls	r4, r5
 80026f8:	4334      	orrs	r4, r6
 80026fa:	464e      	mov	r6, r9
 80026fc:	40ae      	lsls	r6, r5
 80026fe:	0035      	movs	r5, r6
 8002700:	40fb      	lsrs	r3, r7
 8002702:	1e6e      	subs	r6, r5, #1
 8002704:	41b5      	sbcs	r5, r6
 8002706:	1ac9      	subs	r1, r1, r3
 8002708:	432c      	orrs	r4, r5
 800270a:	e04e      	b.n	80027aa <__aeabi_dsub+0x4d2>
 800270c:	464a      	mov	r2, r9
 800270e:	1a14      	subs	r4, r2, r0
 8002710:	45a1      	cmp	r9, r4
 8002712:	4192      	sbcs	r2, r2
 8002714:	4252      	negs	r2, r2
 8002716:	4690      	mov	r8, r2
 8002718:	1a5f      	subs	r7, r3, r1
 800271a:	003a      	movs	r2, r7
 800271c:	4647      	mov	r7, r8
 800271e:	1bd2      	subs	r2, r2, r7
 8002720:	4690      	mov	r8, r2
 8002722:	0212      	lsls	r2, r2, #8
 8002724:	d500      	bpl.n	8002728 <__aeabi_dsub+0x450>
 8002726:	e08b      	b.n	8002840 <__aeabi_dsub+0x568>
 8002728:	4642      	mov	r2, r8
 800272a:	4322      	orrs	r2, r4
 800272c:	d000      	beq.n	8002730 <__aeabi_dsub+0x458>
 800272e:	e630      	b.n	8002392 <__aeabi_dsub+0xba>
 8002730:	2300      	movs	r3, #0
 8002732:	2500      	movs	r5, #0
 8002734:	e74d      	b.n	80025d2 <__aeabi_dsub+0x2fa>
 8002736:	464a      	mov	r2, r9
 8002738:	0759      	lsls	r1, r3, #29
 800273a:	08d2      	lsrs	r2, r2, #3
 800273c:	430a      	orrs	r2, r1
 800273e:	08db      	lsrs	r3, r3, #3
 8002740:	e744      	b.n	80025cc <__aeabi_dsub+0x2f4>
 8002742:	4642      	mov	r2, r8
 8002744:	4b9e      	ldr	r3, [pc, #632]	; (80029c0 <__aeabi_dsub+0x6e8>)
 8002746:	0861      	lsrs	r1, r4, #1
 8002748:	401a      	ands	r2, r3
 800274a:	0013      	movs	r3, r2
 800274c:	2201      	movs	r2, #1
 800274e:	4014      	ands	r4, r2
 8002750:	430c      	orrs	r4, r1
 8002752:	07da      	lsls	r2, r3, #31
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	4698      	mov	r8, r3
 8002758:	4314      	orrs	r4, r2
 800275a:	e641      	b.n	80023e0 <__aeabi_dsub+0x108>
 800275c:	001a      	movs	r2, r3
 800275e:	3e1f      	subs	r6, #31
 8002760:	40f2      	lsrs	r2, r6
 8002762:	0016      	movs	r6, r2
 8002764:	2920      	cmp	r1, #32
 8002766:	d003      	beq.n	8002770 <__aeabi_dsub+0x498>
 8002768:	2240      	movs	r2, #64	; 0x40
 800276a:	1a51      	subs	r1, r2, r1
 800276c:	408b      	lsls	r3, r1
 800276e:	431c      	orrs	r4, r3
 8002770:	1e62      	subs	r2, r4, #1
 8002772:	4194      	sbcs	r4, r2
 8002774:	2300      	movs	r3, #0
 8002776:	4334      	orrs	r4, r6
 8002778:	4698      	mov	r8, r3
 800277a:	2600      	movs	r6, #0
 800277c:	e71d      	b.n	80025ba <__aeabi_dsub+0x2e2>
 800277e:	000c      	movs	r4, r1
 8002780:	3a20      	subs	r2, #32
 8002782:	40d4      	lsrs	r4, r2
 8002784:	0022      	movs	r2, r4
 8002786:	4664      	mov	r4, ip
 8002788:	2c20      	cmp	r4, #32
 800278a:	d004      	beq.n	8002796 <__aeabi_dsub+0x4be>
 800278c:	2740      	movs	r7, #64	; 0x40
 800278e:	1b3f      	subs	r7, r7, r4
 8002790:	40b9      	lsls	r1, r7
 8002792:	4308      	orrs	r0, r1
 8002794:	4680      	mov	r8, r0
 8002796:	4644      	mov	r4, r8
 8002798:	1e61      	subs	r1, r4, #1
 800279a:	418c      	sbcs	r4, r1
 800279c:	4322      	orrs	r2, r4
 800279e:	e5e9      	b.n	8002374 <__aeabi_dsub+0x9c>
 80027a0:	464c      	mov	r4, r9
 80027a2:	4323      	orrs	r3, r4
 80027a4:	001c      	movs	r4, r3
 80027a6:	1e63      	subs	r3, r4, #1
 80027a8:	419c      	sbcs	r4, r3
 80027aa:	1b04      	subs	r4, r0, r4
 80027ac:	42a0      	cmp	r0, r4
 80027ae:	419b      	sbcs	r3, r3
 80027b0:	425b      	negs	r3, r3
 80027b2:	1acb      	subs	r3, r1, r3
 80027b4:	4698      	mov	r8, r3
 80027b6:	465d      	mov	r5, fp
 80027b8:	0016      	movs	r6, r2
 80027ba:	e5e2      	b.n	8002382 <__aeabi_dsub+0xaa>
 80027bc:	464e      	mov	r6, r9
 80027be:	431e      	orrs	r6, r3
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x4ec>
 80027c2:	e0ae      	b.n	8002922 <__aeabi_dsub+0x64a>
 80027c4:	1e66      	subs	r6, r4, #1
 80027c6:	2c01      	cmp	r4, #1
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x4f4>
 80027ca:	e0fd      	b.n	80029c8 <__aeabi_dsub+0x6f0>
 80027cc:	4f7b      	ldr	r7, [pc, #492]	; (80029bc <__aeabi_dsub+0x6e4>)
 80027ce:	42bc      	cmp	r4, r7
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x4fc>
 80027d2:	e107      	b.n	80029e4 <__aeabi_dsub+0x70c>
 80027d4:	46b4      	mov	ip, r6
 80027d6:	e69b      	b.n	8002510 <__aeabi_dsub+0x238>
 80027d8:	4664      	mov	r4, ip
 80027da:	2220      	movs	r2, #32
 80027dc:	1b12      	subs	r2, r2, r4
 80027de:	000c      	movs	r4, r1
 80027e0:	4094      	lsls	r4, r2
 80027e2:	0007      	movs	r7, r0
 80027e4:	4090      	lsls	r0, r2
 80027e6:	46a0      	mov	r8, r4
 80027e8:	4664      	mov	r4, ip
 80027ea:	1e42      	subs	r2, r0, #1
 80027ec:	4190      	sbcs	r0, r2
 80027ee:	4662      	mov	r2, ip
 80027f0:	40e7      	lsrs	r7, r4
 80027f2:	4644      	mov	r4, r8
 80027f4:	40d1      	lsrs	r1, r2
 80027f6:	433c      	orrs	r4, r7
 80027f8:	4304      	orrs	r4, r0
 80027fa:	185b      	adds	r3, r3, r1
 80027fc:	e6f3      	b.n	80025e6 <__aeabi_dsub+0x30e>
 80027fe:	4c6f      	ldr	r4, [pc, #444]	; (80029bc <__aeabi_dsub+0x6e4>)
 8002800:	42a2      	cmp	r2, r4
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x52e>
 8002804:	e0d5      	b.n	80029b2 <__aeabi_dsub+0x6da>
 8002806:	4448      	add	r0, r9
 8002808:	185b      	adds	r3, r3, r1
 800280a:	4548      	cmp	r0, r9
 800280c:	4189      	sbcs	r1, r1
 800280e:	4249      	negs	r1, r1
 8002810:	185b      	adds	r3, r3, r1
 8002812:	07dc      	lsls	r4, r3, #31
 8002814:	0840      	lsrs	r0, r0, #1
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	4698      	mov	r8, r3
 800281a:	0016      	movs	r6, r2
 800281c:	4304      	orrs	r4, r0
 800281e:	e6cc      	b.n	80025ba <__aeabi_dsub+0x2e2>
 8002820:	2a00      	cmp	r2, #0
 8002822:	d000      	beq.n	8002826 <__aeabi_dsub+0x54e>
 8002824:	e082      	b.n	800292c <__aeabi_dsub+0x654>
 8002826:	000a      	movs	r2, r1
 8002828:	4302      	orrs	r2, r0
 800282a:	d140      	bne.n	80028ae <__aeabi_dsub+0x5d6>
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	2500      	movs	r5, #0
 8002830:	031b      	lsls	r3, r3, #12
 8002832:	e713      	b.n	800265c <__aeabi_dsub+0x384>
 8002834:	074b      	lsls	r3, r1, #29
 8002836:	08c2      	lsrs	r2, r0, #3
 8002838:	431a      	orrs	r2, r3
 800283a:	465d      	mov	r5, fp
 800283c:	08cb      	lsrs	r3, r1, #3
 800283e:	e6c5      	b.n	80025cc <__aeabi_dsub+0x2f4>
 8002840:	464a      	mov	r2, r9
 8002842:	1a84      	subs	r4, r0, r2
 8002844:	42a0      	cmp	r0, r4
 8002846:	4192      	sbcs	r2, r2
 8002848:	1acb      	subs	r3, r1, r3
 800284a:	4252      	negs	r2, r2
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	4698      	mov	r8, r3
 8002850:	465d      	mov	r5, fp
 8002852:	e59e      	b.n	8002392 <__aeabi_dsub+0xba>
 8002854:	464a      	mov	r2, r9
 8002856:	0759      	lsls	r1, r3, #29
 8002858:	08d2      	lsrs	r2, r2, #3
 800285a:	430a      	orrs	r2, r1
 800285c:	08db      	lsrs	r3, r3, #3
 800285e:	e6f9      	b.n	8002654 <__aeabi_dsub+0x37c>
 8002860:	464a      	mov	r2, r9
 8002862:	1a14      	subs	r4, r2, r0
 8002864:	45a1      	cmp	r9, r4
 8002866:	4192      	sbcs	r2, r2
 8002868:	1a5b      	subs	r3, r3, r1
 800286a:	4252      	negs	r2, r2
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	4698      	mov	r8, r3
 8002870:	2601      	movs	r6, #1
 8002872:	e586      	b.n	8002382 <__aeabi_dsub+0xaa>
 8002874:	464a      	mov	r2, r9
 8002876:	0759      	lsls	r1, r3, #29
 8002878:	08d2      	lsrs	r2, r2, #3
 800287a:	430a      	orrs	r2, r1
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	e6a5      	b.n	80025cc <__aeabi_dsub+0x2f4>
 8002880:	464c      	mov	r4, r9
 8002882:	4323      	orrs	r3, r4
 8002884:	001c      	movs	r4, r3
 8002886:	1e63      	subs	r3, r4, #1
 8002888:	419c      	sbcs	r4, r3
 800288a:	e65b      	b.n	8002544 <__aeabi_dsub+0x26c>
 800288c:	4665      	mov	r5, ip
 800288e:	001e      	movs	r6, r3
 8002890:	3d20      	subs	r5, #32
 8002892:	40ee      	lsrs	r6, r5
 8002894:	2c20      	cmp	r4, #32
 8002896:	d005      	beq.n	80028a4 <__aeabi_dsub+0x5cc>
 8002898:	2540      	movs	r5, #64	; 0x40
 800289a:	1b2d      	subs	r5, r5, r4
 800289c:	40ab      	lsls	r3, r5
 800289e:	464c      	mov	r4, r9
 80028a0:	431c      	orrs	r4, r3
 80028a2:	46a2      	mov	sl, r4
 80028a4:	4654      	mov	r4, sl
 80028a6:	1e63      	subs	r3, r4, #1
 80028a8:	419c      	sbcs	r4, r3
 80028aa:	4334      	orrs	r4, r6
 80028ac:	e77d      	b.n	80027aa <__aeabi_dsub+0x4d2>
 80028ae:	074b      	lsls	r3, r1, #29
 80028b0:	08c2      	lsrs	r2, r0, #3
 80028b2:	431a      	orrs	r2, r3
 80028b4:	465d      	mov	r5, fp
 80028b6:	08cb      	lsrs	r3, r1, #3
 80028b8:	e6cc      	b.n	8002654 <__aeabi_dsub+0x37c>
 80028ba:	000a      	movs	r2, r1
 80028bc:	4302      	orrs	r2, r0
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x5ea>
 80028c0:	e736      	b.n	8002730 <__aeabi_dsub+0x458>
 80028c2:	074b      	lsls	r3, r1, #29
 80028c4:	08c2      	lsrs	r2, r0, #3
 80028c6:	431a      	orrs	r2, r3
 80028c8:	465d      	mov	r5, fp
 80028ca:	08cb      	lsrs	r3, r1, #3
 80028cc:	e681      	b.n	80025d2 <__aeabi_dsub+0x2fa>
 80028ce:	464a      	mov	r2, r9
 80028d0:	1a84      	subs	r4, r0, r2
 80028d2:	42a0      	cmp	r0, r4
 80028d4:	4192      	sbcs	r2, r2
 80028d6:	1acb      	subs	r3, r1, r3
 80028d8:	4252      	negs	r2, r2
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	4698      	mov	r8, r3
 80028de:	465d      	mov	r5, fp
 80028e0:	2601      	movs	r6, #1
 80028e2:	e54e      	b.n	8002382 <__aeabi_dsub+0xaa>
 80028e4:	074b      	lsls	r3, r1, #29
 80028e6:	08c2      	lsrs	r2, r0, #3
 80028e8:	431a      	orrs	r2, r3
 80028ea:	08cb      	lsrs	r3, r1, #3
 80028ec:	e6b2      	b.n	8002654 <__aeabi_dsub+0x37c>
 80028ee:	464a      	mov	r2, r9
 80028f0:	1a14      	subs	r4, r2, r0
 80028f2:	45a1      	cmp	r9, r4
 80028f4:	4192      	sbcs	r2, r2
 80028f6:	1a5f      	subs	r7, r3, r1
 80028f8:	4252      	negs	r2, r2
 80028fa:	1aba      	subs	r2, r7, r2
 80028fc:	4690      	mov	r8, r2
 80028fe:	0212      	lsls	r2, r2, #8
 8002900:	d56b      	bpl.n	80029da <__aeabi_dsub+0x702>
 8002902:	464a      	mov	r2, r9
 8002904:	1a84      	subs	r4, r0, r2
 8002906:	42a0      	cmp	r0, r4
 8002908:	4192      	sbcs	r2, r2
 800290a:	1acb      	subs	r3, r1, r3
 800290c:	4252      	negs	r2, r2
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	4698      	mov	r8, r3
 8002912:	465d      	mov	r5, fp
 8002914:	e564      	b.n	80023e0 <__aeabi_dsub+0x108>
 8002916:	074b      	lsls	r3, r1, #29
 8002918:	08c2      	lsrs	r2, r0, #3
 800291a:	431a      	orrs	r2, r3
 800291c:	465d      	mov	r5, fp
 800291e:	08cb      	lsrs	r3, r1, #3
 8002920:	e698      	b.n	8002654 <__aeabi_dsub+0x37c>
 8002922:	074b      	lsls	r3, r1, #29
 8002924:	08c2      	lsrs	r2, r0, #3
 8002926:	431a      	orrs	r2, r3
 8002928:	08cb      	lsrs	r3, r1, #3
 800292a:	e64f      	b.n	80025cc <__aeabi_dsub+0x2f4>
 800292c:	000a      	movs	r2, r1
 800292e:	4302      	orrs	r2, r0
 8002930:	d090      	beq.n	8002854 <__aeabi_dsub+0x57c>
 8002932:	464a      	mov	r2, r9
 8002934:	075c      	lsls	r4, r3, #29
 8002936:	08d2      	lsrs	r2, r2, #3
 8002938:	4314      	orrs	r4, r2
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	0312      	lsls	r2, r2, #12
 8002940:	4213      	tst	r3, r2
 8002942:	d008      	beq.n	8002956 <__aeabi_dsub+0x67e>
 8002944:	08ce      	lsrs	r6, r1, #3
 8002946:	4216      	tst	r6, r2
 8002948:	d105      	bne.n	8002956 <__aeabi_dsub+0x67e>
 800294a:	08c0      	lsrs	r0, r0, #3
 800294c:	0749      	lsls	r1, r1, #29
 800294e:	4308      	orrs	r0, r1
 8002950:	0004      	movs	r4, r0
 8002952:	465d      	mov	r5, fp
 8002954:	0033      	movs	r3, r6
 8002956:	0f61      	lsrs	r1, r4, #29
 8002958:	00e2      	lsls	r2, r4, #3
 800295a:	0749      	lsls	r1, r1, #29
 800295c:	08d2      	lsrs	r2, r2, #3
 800295e:	430a      	orrs	r2, r1
 8002960:	e678      	b.n	8002654 <__aeabi_dsub+0x37c>
 8002962:	074b      	lsls	r3, r1, #29
 8002964:	08c2      	lsrs	r2, r0, #3
 8002966:	431a      	orrs	r2, r3
 8002968:	08cb      	lsrs	r3, r1, #3
 800296a:	e632      	b.n	80025d2 <__aeabi_dsub+0x2fa>
 800296c:	4448      	add	r0, r9
 800296e:	185b      	adds	r3, r3, r1
 8002970:	4548      	cmp	r0, r9
 8002972:	4192      	sbcs	r2, r2
 8002974:	4698      	mov	r8, r3
 8002976:	4252      	negs	r2, r2
 8002978:	4490      	add	r8, r2
 800297a:	4643      	mov	r3, r8
 800297c:	0004      	movs	r4, r0
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	d400      	bmi.n	8002984 <__aeabi_dsub+0x6ac>
 8002982:	e61a      	b.n	80025ba <__aeabi_dsub+0x2e2>
 8002984:	4642      	mov	r2, r8
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <__aeabi_dsub+0x6e8>)
 8002988:	2601      	movs	r6, #1
 800298a:	401a      	ands	r2, r3
 800298c:	4690      	mov	r8, r2
 800298e:	e614      	b.n	80025ba <__aeabi_dsub+0x2e2>
 8002990:	4666      	mov	r6, ip
 8002992:	001f      	movs	r7, r3
 8002994:	3e20      	subs	r6, #32
 8002996:	40f7      	lsrs	r7, r6
 8002998:	2c20      	cmp	r4, #32
 800299a:	d005      	beq.n	80029a8 <__aeabi_dsub+0x6d0>
 800299c:	2640      	movs	r6, #64	; 0x40
 800299e:	1b36      	subs	r6, r6, r4
 80029a0:	40b3      	lsls	r3, r6
 80029a2:	464c      	mov	r4, r9
 80029a4:	431c      	orrs	r4, r3
 80029a6:	46a2      	mov	sl, r4
 80029a8:	4654      	mov	r4, sl
 80029aa:	1e63      	subs	r3, r4, #1
 80029ac:	419c      	sbcs	r4, r3
 80029ae:	433c      	orrs	r4, r7
 80029b0:	e5c8      	b.n	8002544 <__aeabi_dsub+0x26c>
 80029b2:	0011      	movs	r1, r2
 80029b4:	2300      	movs	r3, #0
 80029b6:	2200      	movs	r2, #0
 80029b8:	e532      	b.n	8002420 <__aeabi_dsub+0x148>
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	000007ff 	.word	0x000007ff
 80029c0:	ff7fffff 	.word	0xff7fffff
 80029c4:	000007fe 	.word	0x000007fe
 80029c8:	464a      	mov	r2, r9
 80029ca:	1814      	adds	r4, r2, r0
 80029cc:	4284      	cmp	r4, r0
 80029ce:	4192      	sbcs	r2, r2
 80029d0:	185b      	adds	r3, r3, r1
 80029d2:	4698      	mov	r8, r3
 80029d4:	4252      	negs	r2, r2
 80029d6:	4490      	add	r8, r2
 80029d8:	e5e9      	b.n	80025ae <__aeabi_dsub+0x2d6>
 80029da:	4642      	mov	r2, r8
 80029dc:	4322      	orrs	r2, r4
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x70a>
 80029e0:	e6a6      	b.n	8002730 <__aeabi_dsub+0x458>
 80029e2:	e5ea      	b.n	80025ba <__aeabi_dsub+0x2e2>
 80029e4:	074b      	lsls	r3, r1, #29
 80029e6:	08c2      	lsrs	r2, r0, #3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	08cb      	lsrs	r3, r1, #3
 80029ec:	e632      	b.n	8002654 <__aeabi_dsub+0x37c>
 80029ee:	2200      	movs	r2, #0
 80029f0:	4901      	ldr	r1, [pc, #4]	; (80029f8 <__aeabi_dsub+0x720>)
 80029f2:	0013      	movs	r3, r2
 80029f4:	e514      	b.n	8002420 <__aeabi_dsub+0x148>
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	000007ff 	.word	0x000007ff

080029fc <__aeabi_dcmpun>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	0005      	movs	r5, r0
 8002a00:	480c      	ldr	r0, [pc, #48]	; (8002a34 <__aeabi_dcmpun+0x38>)
 8002a02:	030c      	lsls	r4, r1, #12
 8002a04:	0016      	movs	r6, r2
 8002a06:	0049      	lsls	r1, r1, #1
 8002a08:	031a      	lsls	r2, r3, #12
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	0b24      	lsrs	r4, r4, #12
 8002a0e:	0d49      	lsrs	r1, r1, #21
 8002a10:	0b12      	lsrs	r2, r2, #12
 8002a12:	0d5b      	lsrs	r3, r3, #21
 8002a14:	4281      	cmp	r1, r0
 8002a16:	d008      	beq.n	8002a2a <__aeabi_dcmpun+0x2e>
 8002a18:	4906      	ldr	r1, [pc, #24]	; (8002a34 <__aeabi_dcmpun+0x38>)
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	d103      	bne.n	8002a28 <__aeabi_dcmpun+0x2c>
 8002a20:	4332      	orrs	r2, r6
 8002a22:	0010      	movs	r0, r2
 8002a24:	1e42      	subs	r2, r0, #1
 8002a26:	4190      	sbcs	r0, r2
 8002a28:	bd70      	pop	{r4, r5, r6, pc}
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	432c      	orrs	r4, r5
 8002a2e:	d1fb      	bne.n	8002a28 <__aeabi_dcmpun+0x2c>
 8002a30:	e7f2      	b.n	8002a18 <__aeabi_dcmpun+0x1c>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000007ff 	.word	0x000007ff

08002a38 <__aeabi_d2iz>:
 8002a38:	000a      	movs	r2, r1
 8002a3a:	b530      	push	{r4, r5, lr}
 8002a3c:	4c13      	ldr	r4, [pc, #76]	; (8002a8c <__aeabi_d2iz+0x54>)
 8002a3e:	0053      	lsls	r3, r2, #1
 8002a40:	0309      	lsls	r1, r1, #12
 8002a42:	0005      	movs	r5, r0
 8002a44:	0b09      	lsrs	r1, r1, #12
 8002a46:	2000      	movs	r0, #0
 8002a48:	0d5b      	lsrs	r3, r3, #21
 8002a4a:	0fd2      	lsrs	r2, r2, #31
 8002a4c:	42a3      	cmp	r3, r4
 8002a4e:	dd04      	ble.n	8002a5a <__aeabi_d2iz+0x22>
 8002a50:	480f      	ldr	r0, [pc, #60]	; (8002a90 <__aeabi_d2iz+0x58>)
 8002a52:	4283      	cmp	r3, r0
 8002a54:	dd02      	ble.n	8002a5c <__aeabi_d2iz+0x24>
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <__aeabi_d2iz+0x5c>)
 8002a58:	18d0      	adds	r0, r2, r3
 8002a5a:	bd30      	pop	{r4, r5, pc}
 8002a5c:	2080      	movs	r0, #128	; 0x80
 8002a5e:	0340      	lsls	r0, r0, #13
 8002a60:	4301      	orrs	r1, r0
 8002a62:	480d      	ldr	r0, [pc, #52]	; (8002a98 <__aeabi_d2iz+0x60>)
 8002a64:	1ac0      	subs	r0, r0, r3
 8002a66:	281f      	cmp	r0, #31
 8002a68:	dd08      	ble.n	8002a7c <__aeabi_d2iz+0x44>
 8002a6a:	480c      	ldr	r0, [pc, #48]	; (8002a9c <__aeabi_d2iz+0x64>)
 8002a6c:	1ac3      	subs	r3, r0, r3
 8002a6e:	40d9      	lsrs	r1, r3
 8002a70:	000b      	movs	r3, r1
 8002a72:	4258      	negs	r0, r3
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d1f0      	bne.n	8002a5a <__aeabi_d2iz+0x22>
 8002a78:	0018      	movs	r0, r3
 8002a7a:	e7ee      	b.n	8002a5a <__aeabi_d2iz+0x22>
 8002a7c:	4c08      	ldr	r4, [pc, #32]	; (8002aa0 <__aeabi_d2iz+0x68>)
 8002a7e:	40c5      	lsrs	r5, r0
 8002a80:	46a4      	mov	ip, r4
 8002a82:	4463      	add	r3, ip
 8002a84:	4099      	lsls	r1, r3
 8002a86:	000b      	movs	r3, r1
 8002a88:	432b      	orrs	r3, r5
 8002a8a:	e7f2      	b.n	8002a72 <__aeabi_d2iz+0x3a>
 8002a8c:	000003fe 	.word	0x000003fe
 8002a90:	0000041d 	.word	0x0000041d
 8002a94:	7fffffff 	.word	0x7fffffff
 8002a98:	00000433 	.word	0x00000433
 8002a9c:	00000413 	.word	0x00000413
 8002aa0:	fffffbed 	.word	0xfffffbed

08002aa4 <__aeabi_i2d>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d016      	beq.n	8002ad8 <__aeabi_i2d+0x34>
 8002aaa:	17c3      	asrs	r3, r0, #31
 8002aac:	18c5      	adds	r5, r0, r3
 8002aae:	405d      	eors	r5, r3
 8002ab0:	0fc4      	lsrs	r4, r0, #31
 8002ab2:	0028      	movs	r0, r5
 8002ab4:	f000 f84c 	bl	8002b50 <__clzsi2>
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <__aeabi_i2d+0x5c>)
 8002aba:	1a12      	subs	r2, r2, r0
 8002abc:	280a      	cmp	r0, #10
 8002abe:	dc16      	bgt.n	8002aee <__aeabi_i2d+0x4a>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	002e      	movs	r6, r5
 8002ac4:	3315      	adds	r3, #21
 8002ac6:	409e      	lsls	r6, r3
 8002ac8:	230b      	movs	r3, #11
 8002aca:	1a18      	subs	r0, r3, r0
 8002acc:	40c5      	lsrs	r5, r0
 8002ace:	0553      	lsls	r3, r2, #21
 8002ad0:	032d      	lsls	r5, r5, #12
 8002ad2:	0b2d      	lsrs	r5, r5, #12
 8002ad4:	0d5b      	lsrs	r3, r3, #21
 8002ad6:	e003      	b.n	8002ae0 <__aeabi_i2d+0x3c>
 8002ad8:	2400      	movs	r4, #0
 8002ada:	2300      	movs	r3, #0
 8002adc:	2500      	movs	r5, #0
 8002ade:	2600      	movs	r6, #0
 8002ae0:	051b      	lsls	r3, r3, #20
 8002ae2:	432b      	orrs	r3, r5
 8002ae4:	07e4      	lsls	r4, r4, #31
 8002ae6:	4323      	orrs	r3, r4
 8002ae8:	0030      	movs	r0, r6
 8002aea:	0019      	movs	r1, r3
 8002aec:	bd70      	pop	{r4, r5, r6, pc}
 8002aee:	380b      	subs	r0, #11
 8002af0:	4085      	lsls	r5, r0
 8002af2:	0553      	lsls	r3, r2, #21
 8002af4:	032d      	lsls	r5, r5, #12
 8002af6:	2600      	movs	r6, #0
 8002af8:	0b2d      	lsrs	r5, r5, #12
 8002afa:	0d5b      	lsrs	r3, r3, #21
 8002afc:	e7f0      	b.n	8002ae0 <__aeabi_i2d+0x3c>
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	0000041e 	.word	0x0000041e

08002b04 <__aeabi_ui2d>:
 8002b04:	b510      	push	{r4, lr}
 8002b06:	1e04      	subs	r4, r0, #0
 8002b08:	d010      	beq.n	8002b2c <__aeabi_ui2d+0x28>
 8002b0a:	f000 f821 	bl	8002b50 <__clzsi2>
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <__aeabi_ui2d+0x48>)
 8002b10:	1a1b      	subs	r3, r3, r0
 8002b12:	280a      	cmp	r0, #10
 8002b14:	dc11      	bgt.n	8002b3a <__aeabi_ui2d+0x36>
 8002b16:	220b      	movs	r2, #11
 8002b18:	0021      	movs	r1, r4
 8002b1a:	1a12      	subs	r2, r2, r0
 8002b1c:	40d1      	lsrs	r1, r2
 8002b1e:	3015      	adds	r0, #21
 8002b20:	030a      	lsls	r2, r1, #12
 8002b22:	055b      	lsls	r3, r3, #21
 8002b24:	4084      	lsls	r4, r0
 8002b26:	0b12      	lsrs	r2, r2, #12
 8002b28:	0d5b      	lsrs	r3, r3, #21
 8002b2a:	e001      	b.n	8002b30 <__aeabi_ui2d+0x2c>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2200      	movs	r2, #0
 8002b30:	051b      	lsls	r3, r3, #20
 8002b32:	4313      	orrs	r3, r2
 8002b34:	0020      	movs	r0, r4
 8002b36:	0019      	movs	r1, r3
 8002b38:	bd10      	pop	{r4, pc}
 8002b3a:	0022      	movs	r2, r4
 8002b3c:	380b      	subs	r0, #11
 8002b3e:	4082      	lsls	r2, r0
 8002b40:	055b      	lsls	r3, r3, #21
 8002b42:	0312      	lsls	r2, r2, #12
 8002b44:	2400      	movs	r4, #0
 8002b46:	0b12      	lsrs	r2, r2, #12
 8002b48:	0d5b      	lsrs	r3, r3, #21
 8002b4a:	e7f1      	b.n	8002b30 <__aeabi_ui2d+0x2c>
 8002b4c:	0000041e 	.word	0x0000041e

08002b50 <__clzsi2>:
 8002b50:	211c      	movs	r1, #28
 8002b52:	2301      	movs	r3, #1
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	4298      	cmp	r0, r3
 8002b58:	d301      	bcc.n	8002b5e <__clzsi2+0xe>
 8002b5a:	0c00      	lsrs	r0, r0, #16
 8002b5c:	3910      	subs	r1, #16
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	4298      	cmp	r0, r3
 8002b62:	d301      	bcc.n	8002b68 <__clzsi2+0x18>
 8002b64:	0a00      	lsrs	r0, r0, #8
 8002b66:	3908      	subs	r1, #8
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	4298      	cmp	r0, r3
 8002b6c:	d301      	bcc.n	8002b72 <__clzsi2+0x22>
 8002b6e:	0900      	lsrs	r0, r0, #4
 8002b70:	3904      	subs	r1, #4
 8002b72:	a202      	add	r2, pc, #8	; (adr r2, 8002b7c <__clzsi2+0x2c>)
 8002b74:	5c10      	ldrb	r0, [r2, r0]
 8002b76:	1840      	adds	r0, r0, r1
 8002b78:	4770      	bx	lr
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	02020304 	.word	0x02020304
 8002b80:	01010101 	.word	0x01010101
	...

08002b8c <__clzdi2>:
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	2900      	cmp	r1, #0
 8002b90:	d103      	bne.n	8002b9a <__clzdi2+0xe>
 8002b92:	f7ff ffdd 	bl	8002b50 <__clzsi2>
 8002b96:	3020      	adds	r0, #32
 8002b98:	e002      	b.n	8002ba0 <__clzdi2+0x14>
 8002b9a:	1c08      	adds	r0, r1, #0
 8002b9c:	f7ff ffd8 	bl	8002b50 <__clzsi2>
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)

08002ba4 <hts221_init>:
#include "stm32l0xx_hal.h"
extern UART_HandleTypeDef huart1;

extern I2C_HandleTypeDef hi2c1; // TODO: How do we handle this if I2C controller is changed?

HTS_Cal * hts221_init () {
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba6:	b08f      	sub	sp, #60	; 0x3c
 8002ba8:	af04      	add	r7, sp, #16

	HAL_StatusTypeDef ret;	// I2C return status
	uint8_t buf[13];			// read buffer

	/* === Set HTS221 to wake mode === */
	buf[0] = HTS_CTRL_REG1_PD | HTS_CTRL_REG1_BUD;
 8002baa:	003b      	movs	r3, r7
 8002bac:	2284      	movs	r2, #132	; 0x84
 8002bae:	701a      	strb	r2, [r3, #0]

//	ret = HAL_I2C_Master_Transmit(&hi2c1, (HTS_ADDR << 1), buf, 2, HAL_MAX_DELAY);
	ret = HAL_I2C_Mem_Write(&hi2c1, (HTS_ADDR << 1), HTS_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002bb0:	2527      	movs	r5, #39	; 0x27
 8002bb2:	197c      	adds	r4, r7, r5
 8002bb4:	48db      	ldr	r0, [pc, #876]	; (8002f24 <hts221_init+0x380>)
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	425b      	negs	r3, r3
 8002bba:	9302      	str	r3, [sp, #8]
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	003b      	movs	r3, r7
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	21be      	movs	r1, #190	; 0xbe
 8002bca:	f001 fa2d 	bl	8004028 <HAL_I2C_Mem_Write>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8002bd2:	197b      	adds	r3, r7, r5
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d000      	beq.n	8002bdc <hts221_init+0x38>
 8002bda:	e19d      	b.n	8002f18 <hts221_init+0x374>
	else  {
		/* === Read in temperature + humidity calibration data === */
		//Temp

		// buf[0] = T0_degC_x8
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_T0_degC_x8, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002bdc:	197c      	adds	r4, r7, r5
 8002bde:	48d1      	ldr	r0, [pc, #836]	; (8002f24 <hts221_init+0x380>)
 8002be0:	2301      	movs	r3, #1
 8002be2:	425b      	negs	r3, r3
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	2301      	movs	r3, #1
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	003b      	movs	r3, r7
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2301      	movs	r3, #1
 8002bf0:	2232      	movs	r2, #50	; 0x32
 8002bf2:	21be      	movs	r1, #190	; 0xbe
 8002bf4:	f001 fb46 	bl	8004284 <HAL_I2C_Mem_Read>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[1] = T1_degC_x8
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_T1_degC_x8, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8002bfc:	003b      	movs	r3, r7
 8002bfe:	3301      	adds	r3, #1
 8002c00:	197c      	adds	r4, r7, r5
 8002c02:	48c8      	ldr	r0, [pc, #800]	; (8002f24 <hts221_init+0x380>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	4252      	negs	r2, r2
 8002c08:	9202      	str	r2, [sp, #8]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	9201      	str	r2, [sp, #4]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2301      	movs	r3, #1
 8002c12:	2233      	movs	r2, #51	; 0x33
 8002c14:	21be      	movs	r1, #190	; 0xbe
 8002c16:	f001 fb35 	bl	8004284 <HAL_I2C_Mem_Read>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[2] = T1_T0_msb
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_T1_T0_msb, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8002c1e:	003b      	movs	r3, r7
 8002c20:	3302      	adds	r3, #2
 8002c22:	197c      	adds	r4, r7, r5
 8002c24:	48bf      	ldr	r0, [pc, #764]	; (8002f24 <hts221_init+0x380>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	4252      	negs	r2, r2
 8002c2a:	9202      	str	r2, [sp, #8]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	9201      	str	r2, [sp, #4]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2301      	movs	r3, #1
 8002c34:	2235      	movs	r2, #53	; 0x35
 8002c36:	21be      	movs	r1, #190	; 0xbe
 8002c38:	f001 fb24 	bl	8004284 <HAL_I2C_Mem_Read>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[3] = HTS_CAL_T0_OUT_L
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 3, 1, HAL_MAX_DELAY);
 8002c40:	003b      	movs	r3, r7
 8002c42:	3303      	adds	r3, #3
 8002c44:	197c      	adds	r4, r7, r5
 8002c46:	48b7      	ldr	r0, [pc, #732]	; (8002f24 <hts221_init+0x380>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4252      	negs	r2, r2
 8002c4c:	9202      	str	r2, [sp, #8]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	9201      	str	r2, [sp, #4]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2301      	movs	r3, #1
 8002c56:	223c      	movs	r2, #60	; 0x3c
 8002c58:	21be      	movs	r1, #190	; 0xbe
 8002c5a:	f001 fb13 	bl	8004284 <HAL_I2C_Mem_Read>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[4] = HTS_CAL_T0_OUT_H
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 4, 1, HAL_MAX_DELAY);
 8002c62:	003b      	movs	r3, r7
 8002c64:	3304      	adds	r3, #4
 8002c66:	197c      	adds	r4, r7, r5
 8002c68:	48ae      	ldr	r0, [pc, #696]	; (8002f24 <hts221_init+0x380>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4252      	negs	r2, r2
 8002c6e:	9202      	str	r2, [sp, #8]
 8002c70:	2201      	movs	r2, #1
 8002c72:	9201      	str	r2, [sp, #4]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2301      	movs	r3, #1
 8002c78:	223d      	movs	r2, #61	; 0x3d
 8002c7a:	21be      	movs	r1, #190	; 0xbe
 8002c7c:	f001 fb02 	bl	8004284 <HAL_I2C_Mem_Read>
 8002c80:	0003      	movs	r3, r0
 8002c82:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[5] = HTS_CAL_T1_OUT_L
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_T1_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 5, 1, HAL_MAX_DELAY);
 8002c84:	003b      	movs	r3, r7
 8002c86:	3305      	adds	r3, #5
 8002c88:	197c      	adds	r4, r7, r5
 8002c8a:	48a6      	ldr	r0, [pc, #664]	; (8002f24 <hts221_init+0x380>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	4252      	negs	r2, r2
 8002c90:	9202      	str	r2, [sp, #8]
 8002c92:	2201      	movs	r2, #1
 8002c94:	9201      	str	r2, [sp, #4]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	2301      	movs	r3, #1
 8002c9a:	223e      	movs	r2, #62	; 0x3e
 8002c9c:	21be      	movs	r1, #190	; 0xbe
 8002c9e:	f001 faf1 	bl	8004284 <HAL_I2C_Mem_Read>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[6] = HTS_CAL_T1_OUT_H
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_T1_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 6, 1, HAL_MAX_DELAY);
 8002ca6:	003b      	movs	r3, r7
 8002ca8:	3306      	adds	r3, #6
 8002caa:	197c      	adds	r4, r7, r5
 8002cac:	489d      	ldr	r0, [pc, #628]	; (8002f24 <hts221_init+0x380>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4252      	negs	r2, r2
 8002cb2:	9202      	str	r2, [sp, #8]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	9201      	str	r2, [sp, #4]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	223f      	movs	r2, #63	; 0x3f
 8002cbe:	21be      	movs	r1, #190	; 0xbe
 8002cc0:	f001 fae0 	bl	8004284 <HAL_I2C_Mem_Read>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	7023      	strb	r3, [r4, #0]
		}

		//Humidity

		// buf[7] = HTS_CAL_H0_T0_OUT_L
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 7, 1, HAL_MAX_DELAY);
 8002cc8:	003b      	movs	r3, r7
 8002cca:	3307      	adds	r3, #7
 8002ccc:	197c      	adds	r4, r7, r5
 8002cce:	4895      	ldr	r0, [pc, #596]	; (8002f24 <hts221_init+0x380>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4252      	negs	r2, r2
 8002cd4:	9202      	str	r2, [sp, #8]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	9201      	str	r2, [sp, #4]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2301      	movs	r3, #1
 8002cde:	2236      	movs	r2, #54	; 0x36
 8002ce0:	21be      	movs	r1, #190	; 0xbe
 8002ce2:	f001 facf 	bl	8004284 <HAL_I2C_Mem_Read>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[8] = HTS_CAL_H0_T0_OUT_H
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 8, 1, HAL_MAX_DELAY);
 8002cea:	003b      	movs	r3, r7
 8002cec:	3308      	adds	r3, #8
 8002cee:	197c      	adds	r4, r7, r5
 8002cf0:	488c      	ldr	r0, [pc, #560]	; (8002f24 <hts221_init+0x380>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4252      	negs	r2, r2
 8002cf6:	9202      	str	r2, [sp, #8]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	9201      	str	r2, [sp, #4]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	2237      	movs	r2, #55	; 0x37
 8002d02:	21be      	movs	r1, #190	; 0xbe
 8002d04:	f001 fabe 	bl	8004284 <HAL_I2C_Mem_Read>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[9] = HTS_CAL_H1_T0_OUT_L
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 9, 1, HAL_MAX_DELAY);
 8002d0c:	003b      	movs	r3, r7
 8002d0e:	3309      	adds	r3, #9
 8002d10:	197c      	adds	r4, r7, r5
 8002d12:	4884      	ldr	r0, [pc, #528]	; (8002f24 <hts221_init+0x380>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	4252      	negs	r2, r2
 8002d18:	9202      	str	r2, [sp, #8]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	9201      	str	r2, [sp, #4]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2301      	movs	r3, #1
 8002d22:	223a      	movs	r2, #58	; 0x3a
 8002d24:	21be      	movs	r1, #190	; 0xbe
 8002d26:	f001 faad 	bl	8004284 <HAL_I2C_Mem_Read>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[10] = HTS_CAL_H1_T0_OUT_H
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 10, 1, HAL_MAX_DELAY);
 8002d2e:	003b      	movs	r3, r7
 8002d30:	330a      	adds	r3, #10
 8002d32:	197c      	adds	r4, r7, r5
 8002d34:	487b      	ldr	r0, [pc, #492]	; (8002f24 <hts221_init+0x380>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	4252      	negs	r2, r2
 8002d3a:	9202      	str	r2, [sp, #8]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	9201      	str	r2, [sp, #4]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2301      	movs	r3, #1
 8002d44:	223b      	movs	r2, #59	; 0x3b
 8002d46:	21be      	movs	r1, #190	; 0xbe
 8002d48:	f001 fa9c 	bl	8004284 <HAL_I2C_Mem_Read>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[11] = HTS_CAL_H0_rH_x2
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_H0_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 11, 1, HAL_MAX_DELAY);
 8002d50:	003b      	movs	r3, r7
 8002d52:	330b      	adds	r3, #11
 8002d54:	197c      	adds	r4, r7, r5
 8002d56:	4873      	ldr	r0, [pc, #460]	; (8002f24 <hts221_init+0x380>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4252      	negs	r2, r2
 8002d5c:	9202      	str	r2, [sp, #8]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	9201      	str	r2, [sp, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2301      	movs	r3, #1
 8002d66:	2230      	movs	r2, #48	; 0x30
 8002d68:	21be      	movs	r1, #190	; 0xbe
 8002d6a:	f001 fa8b 	bl	8004284 <HAL_I2C_Mem_Read>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}

		// buf[12] = HTS_CAL_H1_rH_x2
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_CAL_H1_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 12, 1, HAL_MAX_DELAY);
 8002d72:	003b      	movs	r3, r7
 8002d74:	330c      	adds	r3, #12
 8002d76:	197c      	adds	r4, r7, r5
 8002d78:	486a      	ldr	r0, [pc, #424]	; (8002f24 <hts221_init+0x380>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	4252      	negs	r2, r2
 8002d7e:	9202      	str	r2, [sp, #8]
 8002d80:	2201      	movs	r2, #1
 8002d82:	9201      	str	r2, [sp, #4]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2301      	movs	r3, #1
 8002d88:	2231      	movs	r2, #49	; 0x31
 8002d8a:	21be      	movs	r1, #190	; 0xbe
 8002d8c:	f001 fa7a 	bl	8004284 <HAL_I2C_Mem_Read>
 8002d90:	0003      	movs	r3, r0
 8002d92:	7023      	strb	r3, [r4, #0]
			// TODO: error handling
		}

		/* === Process temperature + humidity calibration data === */

		uint16_t T0_degC_R32 = buf[0] >> 3; //divide x8 value by 8
 8002d94:	003b      	movs	r3, r7
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	08db      	lsrs	r3, r3, #3
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	2024      	movs	r0, #36	; 0x24
 8002d9e:	183b      	adds	r3, r7, r0
 8002da0:	801a      	strh	r2, [r3, #0]
		uint16_t T1_degC_R33 = buf[1] >> 3; //divide x8 value by 8
 8002da2:	003b      	movs	r3, r7
 8002da4:	785b      	ldrb	r3, [r3, #1]
 8002da6:	08db      	lsrs	r3, r3, #3
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	2522      	movs	r5, #34	; 0x22
 8002dac:	197b      	adds	r3, r7, r5
 8002dae:	801a      	strh	r2, [r3, #0]
		uint8_t T1_T0_msb 	= buf[2];
 8002db0:	2421      	movs	r4, #33	; 0x21
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	003a      	movs	r2, r7
 8002db6:	7892      	ldrb	r2, [r2, #2]
 8002db8:	701a      	strb	r2, [r3, #0]
		int16_t T0_OUT = (buf[3] | (buf[4] << 8)); // This should be signed int
 8002dba:	003b      	movs	r3, r7
 8002dbc:	78db      	ldrb	r3, [r3, #3]
 8002dbe:	b219      	sxth	r1, r3
 8002dc0:	003b      	movs	r3, r7
 8002dc2:	791b      	ldrb	r3, [r3, #4]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	b21a      	sxth	r2, r3
 8002dc8:	261e      	movs	r6, #30
 8002dca:	19bb      	adds	r3, r7, r6
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	801a      	strh	r2, [r3, #0]
		int16_t T1_OUT = (buf[5] | (buf[6] << 8)); // This should be signed int
 8002dd0:	003b      	movs	r3, r7
 8002dd2:	795b      	ldrb	r3, [r3, #5]
 8002dd4:	b219      	sxth	r1, r3
 8002dd6:	003b      	movs	r3, r7
 8002dd8:	799b      	ldrb	r3, [r3, #6]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	b21a      	sxth	r2, r3
 8002dde:	231c      	movs	r3, #28
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	430a      	orrs	r2, r1
 8002de4:	801a      	strh	r2, [r3, #0]

		uint8_t H0_Rh_R30 = buf[11] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 8002de6:	003b      	movs	r3, r7
 8002de8:	7ada      	ldrb	r2, [r3, #11]
 8002dea:	231b      	movs	r3, #27
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	0852      	lsrs	r2, r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
		uint8_t H1_Rh_R31 = buf[12] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 8002df2:	003b      	movs	r3, r7
 8002df4:	7b1a      	ldrb	r2, [r3, #12]
 8002df6:	211a      	movs	r1, #26
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	0852      	lsrs	r2, r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
		int16_t H0_T0_OUT = (buf[7] | (buf[8] << 8)); // This should be signed int
 8002dfe:	003b      	movs	r3, r7
 8002e00:	79db      	ldrb	r3, [r3, #7]
 8002e02:	b219      	sxth	r1, r3
 8002e04:	003b      	movs	r3, r7
 8002e06:	7a1b      	ldrb	r3, [r3, #8]
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	b21a      	sxth	r2, r3
 8002e0c:	2318      	movs	r3, #24
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	430a      	orrs	r2, r1
 8002e12:	801a      	strh	r2, [r3, #0]
		int16_t H1_T0_OUT = (buf[9] | (buf[10] << 8)); // This should be signed int
 8002e14:	003b      	movs	r3, r7
 8002e16:	7a5b      	ldrb	r3, [r3, #9]
 8002e18:	b219      	sxth	r1, r3
 8002e1a:	003b      	movs	r3, r7
 8002e1c:	7a9b      	ldrb	r3, [r3, #10]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	b21a      	sxth	r2, r3
 8002e22:	2316      	movs	r3, #22
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	430a      	orrs	r2, r1
 8002e28:	801a      	strh	r2, [r3, #0]

		// add msb's for 10 bit values
		T0_degC_R32 |= (T1_T0_msb & 0b0011) << 8;
 8002e2a:	0021      	movs	r1, r4
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	b21a      	sxth	r2, r3
 8002e34:	23c0      	movs	r3, #192	; 0xc0
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b21a      	sxth	r2, r3
 8002e3c:	183b      	adds	r3, r7, r0
 8002e3e:	2400      	movs	r4, #0
 8002e40:	5f1b      	ldrsh	r3, [r3, r4]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	b21a      	sxth	r2, r3
 8002e46:	0004      	movs	r4, r0
 8002e48:	183b      	adds	r3, r7, r0
 8002e4a:	801a      	strh	r2, [r3, #0]
		T1_degC_R33 |= (T1_T0_msb & 0b1100) << 6;
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	019b      	lsls	r3, r3, #6
 8002e52:	b21a      	sxth	r2, r3
 8002e54:	23c0      	movs	r3, #192	; 0xc0
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b21a      	sxth	r2, r3
 8002e5c:	197b      	adds	r3, r7, r5
 8002e5e:	2000      	movs	r0, #0
 8002e60:	5e1b      	ldrsh	r3, [r3, r0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	197b      	adds	r3, r7, r5
 8002e68:	801a      	strh	r2, [r3, #0]

		// init struct to store calibration data
		HTS_Cal * hts_cal_data = malloc(sizeof(HTS_Cal));
 8002e6a:	2018      	movs	r0, #24
 8002e6c:	f003 fce8 	bl	8006840 <malloc>
 8002e70:	0003      	movs	r3, r0
 8002e72:	613b      	str	r3, [r7, #16]

		// Store Temp
		hts_cal_data->T0_OUT = T0_OUT;
 8002e74:	19bb      	adds	r3, r7, r6
 8002e76:	2000      	movs	r0, #0
 8002e78:	5e1a      	ldrsh	r2, [r3, r0]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	601a      	str	r2, [r3, #0]
		hts_cal_data->temp_correction_factor = (float) (T1_degC_R33 - T0_degC_R32) / (T1_OUT - T0_OUT);
 8002e7e:	197b      	adds	r3, r7, r5
 8002e80:	881a      	ldrh	r2, [r3, #0]
 8002e82:	0025      	movs	r5, r4
 8002e84:	193b      	adds	r3, r7, r4
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7fe f802 	bl	8000e94 <__aeabi_i2f>
 8002e90:	1c04      	adds	r4, r0, #0
 8002e92:	221c      	movs	r2, #28
 8002e94:	18bb      	adds	r3, r7, r2
 8002e96:	2000      	movs	r0, #0
 8002e98:	5e1a      	ldrsh	r2, [r3, r0]
 8002e9a:	19bb      	adds	r3, r7, r6
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	5e1b      	ldrsh	r3, [r3, r0]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7fd fff6 	bl	8000e94 <__aeabi_i2f>
 8002ea8:	1c03      	adds	r3, r0, #0
 8002eaa:	1c19      	adds	r1, r3, #0
 8002eac:	1c20      	adds	r0, r4, #0
 8002eae:	f7fd fdab 	bl	8000a08 <__aeabi_fdiv>
 8002eb2:	1c03      	adds	r3, r0, #0
 8002eb4:	1c1a      	adds	r2, r3, #0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	605a      	str	r2, [r3, #4]
		hts_cal_data->temp_offset = T0_degC_R32;
 8002eba:	197b      	adds	r3, r7, r5
 8002ebc:	881a      	ldrh	r2, [r3, #0]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]

		//zeroed_temp = T_out - T0_Out
		//temp_adj = (zeroed_temp * correction_factor) + offset

		//Store Humid.
		hts_cal_data->H0_OUT = H0_T0_OUT;
 8002ec2:	2618      	movs	r6, #24
 8002ec4:	19bb      	adds	r3, r7, r6
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	5e1a      	ldrsh	r2, [r3, r0]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	60da      	str	r2, [r3, #12]
		hts_cal_data->humid_correction_factor = (float) (H1_Rh_R31 - H0_Rh_R30) / (H1_T0_OUT - H0_T0_OUT);
 8002ece:	211a      	movs	r1, #26
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	251b      	movs	r5, #27
 8002ed6:	197b      	adds	r3, r7, r5
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7fd ffd9 	bl	8000e94 <__aeabi_i2f>
 8002ee2:	1c04      	adds	r4, r0, #0
 8002ee4:	2316      	movs	r3, #22
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2200      	movs	r2, #0
 8002eea:	5e9a      	ldrsh	r2, [r3, r2]
 8002eec:	19bb      	adds	r3, r7, r6
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5e5b      	ldrsh	r3, [r3, r1]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7fd ffcd 	bl	8000e94 <__aeabi_i2f>
 8002efa:	1c03      	adds	r3, r0, #0
 8002efc:	1c19      	adds	r1, r3, #0
 8002efe:	1c20      	adds	r0, r4, #0
 8002f00:	f7fd fd82 	bl	8000a08 <__aeabi_fdiv>
 8002f04:	1c03      	adds	r3, r0, #0
 8002f06:	1c1a      	adds	r2, r3, #0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	611a      	str	r2, [r3, #16]
		hts_cal_data->humid_offset = H0_Rh_R30;
 8002f0c:	197b      	adds	r3, r7, r5
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	615a      	str	r2, [r3, #20]

		return hts_cal_data;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	e000      	b.n	8002f1a <hts221_init+0x376>
	}

	return NULL;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b00b      	add	sp, #44	; 0x2c
 8002f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	20000204 	.word	0x20000204

08002f28 <hts221_get_temp>:

int hts221_get_temp(char unit, HTS_Cal * hts_cal_data){
 8002f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2a:	b08d      	sub	sp, #52	; 0x34
 8002f2c:	af04      	add	r7, sp, #16
 8002f2e:	0002      	movs	r2, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	1dfb      	adds	r3, r7, #7
 8002f34:	701a      	strb	r2, [r3, #0]
	uint8_t buf[3];			// read buffer
	int16_t T_OUT;			// T_OUT raw temperature reading
	int temp_adj;			// calibrated temperature value

	/* === Start a temperature reading === */
	buf[0] = HTS_CTRL_REG2_ONE_SHOT;
 8002f36:	250c      	movs	r5, #12
 8002f38:	197b      	adds	r3, r7, r5
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(&hi2c1, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002f3e:	261f      	movs	r6, #31
 8002f40:	19bc      	adds	r4, r7, r6
 8002f42:	484e      	ldr	r0, [pc, #312]	; (800307c <hts221_get_temp+0x154>)
 8002f44:	2301      	movs	r3, #1
 8002f46:	425b      	negs	r3, r3
 8002f48:	9302      	str	r3, [sp, #8]
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	197b      	adds	r3, r7, r5
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2301      	movs	r3, #1
 8002f54:	2221      	movs	r2, #33	; 0x21
 8002f56:	21be      	movs	r1, #190	; 0xbe
 8002f58:	f001 f866 	bl	8004028 <HAL_I2C_Mem_Write>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	7023      	strb	r3, [r4, #0]

	/* === Read in temperature data === */

	//TODO check that this loop is right...
	// Try three times for temp data to be ready
	for (int i = 0; i < 3; ++i) {
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	dc18      	bgt.n	8002f9c <hts221_get_temp+0x74>
		// buf[0] = HTS_STATUS_REG
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002f6a:	19bc      	adds	r4, r7, r6
 8002f6c:	4843      	ldr	r0, [pc, #268]	; (800307c <hts221_get_temp+0x154>)
 8002f6e:	2301      	movs	r3, #1
 8002f70:	425b      	negs	r3, r3
 8002f72:	9302      	str	r3, [sp, #8]
 8002f74:	2301      	movs	r3, #1
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	197b      	adds	r3, r7, r5
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	2227      	movs	r2, #39	; 0x27
 8002f80:	21be      	movs	r1, #190	; 0xbe
 8002f82:	f001 f97f 	bl	8004284 <HAL_I2C_Mem_Read>
 8002f86:	0003      	movs	r3, r0
 8002f88:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}
		if (buf[0] & 1){
 8002f8a:	197b      	adds	r3, r7, r5
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	001a      	movs	r2, r3
 8002f90:	2301      	movs	r3, #1
 8002f92:	4013      	ands	r3, r2
 8002f94:	d101      	bne.n	8002f9a <hts221_get_temp+0x72>
			// new temp. data ready
			break;
		}
		//TODO - HAL_WAIT?
		return TEMP_ERROR;
 8002f96:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <hts221_get_temp+0x158>)
 8002f98:	e06c      	b.n	8003074 <hts221_get_temp+0x14c>
			break;
 8002f9a:	46c0      	nop			; (mov r8, r8)
	}

	// buf[1] = HTS_TEMP_OUT_L
	ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8002f9c:	230c      	movs	r3, #12
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	251f      	movs	r5, #31
 8002fa4:	197c      	adds	r4, r7, r5
 8002fa6:	4835      	ldr	r0, [pc, #212]	; (800307c <hts221_get_temp+0x154>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4252      	negs	r2, r2
 8002fac:	9202      	str	r2, [sp, #8]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	9201      	str	r2, [sp, #4]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	222a      	movs	r2, #42	; 0x2a
 8002fb8:	21be      	movs	r1, #190	; 0xbe
 8002fba:	f001 f963 	bl	8004284 <HAL_I2C_Mem_Read>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8002fc2:	197b      	adds	r3, r7, r5
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <hts221_get_temp+0xa6>
		// TODO: error handling
		return TEMP_ERROR;
 8002fca:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <hts221_get_temp+0x158>)
 8002fcc:	e052      	b.n	8003074 <hts221_get_temp+0x14c>
	}

	// buf[2] = HTS_TEMP_OUT_H
	ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8002fce:	230c      	movs	r3, #12
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	251f      	movs	r5, #31
 8002fd6:	197c      	adds	r4, r7, r5
 8002fd8:	4828      	ldr	r0, [pc, #160]	; (800307c <hts221_get_temp+0x154>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4252      	negs	r2, r2
 8002fde:	9202      	str	r2, [sp, #8]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	9201      	str	r2, [sp, #4]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	222b      	movs	r2, #43	; 0x2b
 8002fea:	21be      	movs	r1, #190	; 0xbe
 8002fec:	f001 f94a 	bl	8004284 <HAL_I2C_Mem_Read>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8002ff4:	197b      	adds	r3, r7, r5
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <hts221_get_temp+0xd8>
		// TODO: error handling
		return TEMP_ERROR;
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <hts221_get_temp+0x158>)
 8002ffe:	e039      	b.n	8003074 <hts221_get_temp+0x14c>
	}

	T_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 8003000:	220c      	movs	r2, #12
 8003002:	18bb      	adds	r3, r7, r2
 8003004:	785b      	ldrb	r3, [r3, #1]
 8003006:	b219      	sxth	r1, r3
 8003008:	18bb      	adds	r3, r7, r2
 800300a:	789b      	ldrb	r3, [r3, #2]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	b21a      	sxth	r2, r3
 8003010:	2016      	movs	r0, #22
 8003012:	183b      	adds	r3, r7, r0
 8003014:	430a      	orrs	r2, r1
 8003016:	801a      	strh	r2, [r3, #0]

	temp_adj = hts221_calc_temp(T_OUT, hts_cal_data);
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	183b      	adds	r3, r7, r0
 800301c:	2100      	movs	r1, #0
 800301e:	5e5b      	ldrsh	r3, [r3, r1]
 8003020:	0011      	movs	r1, r2
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f834 	bl	8003090 <hts221_calc_temp>
 8003028:	0003      	movs	r3, r0
 800302a:	613b      	str	r3, [r7, #16]

	// Return in correct units
	if (unit == 'F'){
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b46      	cmp	r3, #70	; 0x46
 8003032:	d11e      	bne.n	8003072 <hts221_get_temp+0x14a>
		//Fahrenheit
		return (temp_adj * 9.0 / 5.0) + 32;
 8003034:	6938      	ldr	r0, [r7, #16]
 8003036:	f7ff fd35 	bl	8002aa4 <__aeabi_i2d>
 800303a:	2200      	movs	r2, #0
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <hts221_get_temp+0x15c>)
 800303e:	f7fe fedf 	bl	8001e00 <__aeabi_dmul>
 8003042:	0002      	movs	r2, r0
 8003044:	000b      	movs	r3, r1
 8003046:	0010      	movs	r0, r2
 8003048:	0019      	movs	r1, r3
 800304a:	2200      	movs	r2, #0
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <hts221_get_temp+0x160>)
 800304e:	f7fe fad1 	bl	80015f4 <__aeabi_ddiv>
 8003052:	0002      	movs	r2, r0
 8003054:	000b      	movs	r3, r1
 8003056:	0010      	movs	r0, r2
 8003058:	0019      	movs	r1, r3
 800305a:	2200      	movs	r2, #0
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <hts221_get_temp+0x164>)
 800305e:	f7fd ff5f 	bl	8000f20 <__aeabi_dadd>
 8003062:	0002      	movs	r2, r0
 8003064:	000b      	movs	r3, r1
 8003066:	0010      	movs	r0, r2
 8003068:	0019      	movs	r1, r3
 800306a:	f7ff fce5 	bl	8002a38 <__aeabi_d2iz>
 800306e:	0003      	movs	r3, r0
 8003070:	e000      	b.n	8003074 <hts221_get_temp+0x14c>

	}
	else {
		//Celsius
		return temp_adj;
 8003072:	693b      	ldr	r3, [r7, #16]
	}

}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b009      	add	sp, #36	; 0x24
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800307c:	20000204 	.word	0x20000204
 8003080:	fffffe34 	.word	0xfffffe34
 8003084:	40220000 	.word	0x40220000
 8003088:	40140000 	.word	0x40140000
 800308c:	40400000 	.word	0x40400000

08003090 <hts221_calc_temp>:

int hts221_calc_temp(int16_t T_OUT, HTS_Cal * hts_cal_data){
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	0002      	movs	r2, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	1dbb      	adds	r3, r7, #6
 800309c:	801a      	strh	r2, [r3, #0]

	int zeroed_temp = T_OUT - hts_cal_data->T0_OUT;
 800309e:	1dbb      	adds	r3, r7, #6
 80030a0:	2200      	movs	r2, #0
 80030a2:	5e9a      	ldrsh	r2, [r3, r2]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	60fb      	str	r3, [r7, #12]
	int temp_adj = (zeroed_temp * hts_cal_data->temp_correction_factor) + hts_cal_data->temp_offset;
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7fd fef1 	bl	8000e94 <__aeabi_i2f>
 80030b2:	1c02      	adds	r2, r0, #0
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	1c19      	adds	r1, r3, #0
 80030ba:	1c10      	adds	r0, r2, #0
 80030bc:	f7fd fdb0 	bl	8000c20 <__aeabi_fmul>
 80030c0:	1c03      	adds	r3, r0, #0
 80030c2:	1c1c      	adds	r4, r3, #0
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7fd fee3 	bl	8000e94 <__aeabi_i2f>
 80030ce:	1c03      	adds	r3, r0, #0
 80030d0:	1c19      	adds	r1, r3, #0
 80030d2:	1c20      	adds	r0, r4, #0
 80030d4:	f7fd fafc 	bl	80006d0 <__aeabi_fadd>
 80030d8:	1c03      	adds	r3, r0, #0
 80030da:	1c18      	adds	r0, r3, #0
 80030dc:	f7fd feba 	bl	8000e54 <__aeabi_f2iz>
 80030e0:	0003      	movs	r3, r0
 80030e2:	60bb      	str	r3, [r7, #8]

	return temp_adj;
 80030e4:	68bb      	ldr	r3, [r7, #8]

}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b005      	add	sp, #20
 80030ec:	bd90      	pop	{r4, r7, pc}
	...

080030f0 <hts221_get_humid>:

int hts221_get_humid(HTS_Cal * hts_cal_data){
 80030f0:	b5b0      	push	{r4, r5, r7, lr}
 80030f2:	b08c      	sub	sp, #48	; 0x30
 80030f4:	af04      	add	r7, sp, #16
 80030f6:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];			// read buffer
	int16_t H_OUT;			// H_OUT raw temperature reading
	int humid_adj;			// calibrated temperature value

	/* === Start a humidity reading === */
	buf[0] = HTS_CTRL_REG2_ONE_SHOT;
 80030f8:	210c      	movs	r1, #12
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(&hi2c1, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003100:	251f      	movs	r5, #31
 8003102:	197c      	adds	r4, r7, r5
 8003104:	4842      	ldr	r0, [pc, #264]	; (8003210 <hts221_get_humid+0x120>)
 8003106:	2301      	movs	r3, #1
 8003108:	425b      	negs	r3, r3
 800310a:	9302      	str	r3, [sp, #8]
 800310c:	2301      	movs	r3, #1
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	187b      	adds	r3, r7, r1
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	2221      	movs	r2, #33	; 0x21
 8003118:	21be      	movs	r1, #190	; 0xbe
 800311a:	f000 ff85 	bl	8004028 <HAL_I2C_Mem_Write>
 800311e:	0003      	movs	r3, r0
 8003120:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8003122:	197b      	adds	r3, r7, r5
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <hts221_get_humid+0x40>
		// TODO: error handling
		return HUMID_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	425b      	negs	r3, r3
 800312e:	e06b      	b.n	8003208 <hts221_get_humid+0x118>

	/* === Read in humidity data === */

	//TODO check that this loop is right...
	// Try three times for temp data to be ready
	for (int i = 0; i < 3; ++i) {
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b02      	cmp	r3, #2
 8003138:	dc1b      	bgt.n	8003172 <hts221_get_humid+0x82>
		// buf[0] = HTS_STATUS_REG
		ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 800313a:	231f      	movs	r3, #31
 800313c:	18fc      	adds	r4, r7, r3
 800313e:	4834      	ldr	r0, [pc, #208]	; (8003210 <hts221_get_humid+0x120>)
 8003140:	2301      	movs	r3, #1
 8003142:	425b      	negs	r3, r3
 8003144:	9302      	str	r3, [sp, #8]
 8003146:	2301      	movs	r3, #1
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	250c      	movs	r5, #12
 800314c:	197b      	adds	r3, r7, r5
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2301      	movs	r3, #1
 8003152:	2227      	movs	r2, #39	; 0x27
 8003154:	21be      	movs	r1, #190	; 0xbe
 8003156:	f001 f895 	bl	8004284 <HAL_I2C_Mem_Read>
 800315a:	0003      	movs	r3, r0
 800315c:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
			// TODO: error handling
		}
		if (buf[0] & 2){
 800315e:	197b      	adds	r3, r7, r5
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	001a      	movs	r2, r3
 8003164:	2302      	movs	r3, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d102      	bne.n	8003170 <hts221_get_humid+0x80>
			// new humid. data ready
			break;
		}
		//TODO - HAL_WAIT?
		return HUMID_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	425b      	negs	r3, r3
 800316e:	e04b      	b.n	8003208 <hts221_get_humid+0x118>
			break;
 8003170:	46c0      	nop			; (mov r8, r8)
	}

	// buf[1] = HTS_HUMIDITY_OUT_L
	ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8003172:	230c      	movs	r3, #12
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	3301      	adds	r3, #1
 8003178:	251f      	movs	r5, #31
 800317a:	197c      	adds	r4, r7, r5
 800317c:	4824      	ldr	r0, [pc, #144]	; (8003210 <hts221_get_humid+0x120>)
 800317e:	2201      	movs	r2, #1
 8003180:	4252      	negs	r2, r2
 8003182:	9202      	str	r2, [sp, #8]
 8003184:	2201      	movs	r2, #1
 8003186:	9201      	str	r2, [sp, #4]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2301      	movs	r3, #1
 800318c:	2228      	movs	r2, #40	; 0x28
 800318e:	21be      	movs	r1, #190	; 0xbe
 8003190:	f001 f878 	bl	8004284 <HAL_I2C_Mem_Read>
 8003194:	0003      	movs	r3, r0
 8003196:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8003198:	197b      	adds	r3, r7, r5
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <hts221_get_humid+0xb6>
		// TODO: error handling
		return HUMID_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	425b      	negs	r3, r3
 80031a4:	e030      	b.n	8003208 <hts221_get_humid+0x118>
	}

	// buf[2] = HTS_HUMIDITY_OUT_H
	ret = HAL_I2C_Mem_Read(&hi2c1, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 80031a6:	230c      	movs	r3, #12
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	3302      	adds	r3, #2
 80031ac:	251f      	movs	r5, #31
 80031ae:	197c      	adds	r4, r7, r5
 80031b0:	4817      	ldr	r0, [pc, #92]	; (8003210 <hts221_get_humid+0x120>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	4252      	negs	r2, r2
 80031b6:	9202      	str	r2, [sp, #8]
 80031b8:	2201      	movs	r2, #1
 80031ba:	9201      	str	r2, [sp, #4]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2301      	movs	r3, #1
 80031c0:	2229      	movs	r2, #41	; 0x29
 80031c2:	21be      	movs	r1, #190	; 0xbe
 80031c4:	f001 f85e 	bl	8004284 <HAL_I2C_Mem_Read>
 80031c8:	0003      	movs	r3, r0
 80031ca:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 80031cc:	197b      	adds	r3, r7, r5
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <hts221_get_humid+0xea>
		// TODO: error handling
		return HUMID_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	425b      	negs	r3, r3
 80031d8:	e016      	b.n	8003208 <hts221_get_humid+0x118>
	}

	H_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 80031da:	220c      	movs	r2, #12
 80031dc:	18bb      	adds	r3, r7, r2
 80031de:	785b      	ldrb	r3, [r3, #1]
 80031e0:	b219      	sxth	r1, r3
 80031e2:	18bb      	adds	r3, r7, r2
 80031e4:	789b      	ldrb	r3, [r3, #2]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	b21a      	sxth	r2, r3
 80031ea:	2016      	movs	r0, #22
 80031ec:	183b      	adds	r3, r7, r0
 80031ee:	430a      	orrs	r2, r1
 80031f0:	801a      	strh	r2, [r3, #0]

	humid_adj = hts221_calc_humid(H_OUT, hts_cal_data);
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	183b      	adds	r3, r7, r0
 80031f6:	2100      	movs	r1, #0
 80031f8:	5e5b      	ldrsh	r3, [r3, r1]
 80031fa:	0011      	movs	r1, r2
 80031fc:	0018      	movs	r0, r3
 80031fe:	f000 f809 	bl	8003214 <hts221_calc_humid>
 8003202:	0003      	movs	r3, r0
 8003204:	613b      	str	r3, [r7, #16]

	return humid_adj;
 8003206:	693b      	ldr	r3, [r7, #16]

}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b008      	add	sp, #32
 800320e:	bdb0      	pop	{r4, r5, r7, pc}
 8003210:	20000204 	.word	0x20000204

08003214 <hts221_calc_humid>:

int hts221_calc_humid(int16_t H_OUT, HTS_Cal * hts_cal_data){
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	0002      	movs	r2, r0
 800321c:	6039      	str	r1, [r7, #0]
 800321e:	1dbb      	adds	r3, r7, #6
 8003220:	801a      	strh	r2, [r3, #0]

	int zeroed_humid = H_OUT - hts_cal_data->H0_OUT;
 8003222:	1dbb      	adds	r3, r7, #6
 8003224:	2200      	movs	r2, #0
 8003226:	5e9a      	ldrsh	r2, [r3, r2]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	60fb      	str	r3, [r7, #12]
	int humid_adj = (zeroed_humid * hts_cal_data->humid_correction_factor) + hts_cal_data->humid_offset;
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7fd fe2f 	bl	8000e94 <__aeabi_i2f>
 8003236:	1c02      	adds	r2, r0, #0
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	1c19      	adds	r1, r3, #0
 800323e:	1c10      	adds	r0, r2, #0
 8003240:	f7fd fcee 	bl	8000c20 <__aeabi_fmul>
 8003244:	1c03      	adds	r3, r0, #0
 8003246:	1c1c      	adds	r4, r3, #0
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	0018      	movs	r0, r3
 800324e:	f7fd fe21 	bl	8000e94 <__aeabi_i2f>
 8003252:	1c03      	adds	r3, r0, #0
 8003254:	1c19      	adds	r1, r3, #0
 8003256:	1c20      	adds	r0, r4, #0
 8003258:	f7fd fa3a 	bl	80006d0 <__aeabi_fadd>
 800325c:	1c03      	adds	r3, r0, #0
 800325e:	1c18      	adds	r0, r3, #0
 8003260:	f7fd fdf8 	bl	8000e54 <__aeabi_f2iz>
 8003264:	0003      	movs	r3, r0
 8003266:	60bb      	str	r3, [r7, #8]

	return humid_adj;
 8003268:	68bb      	ldr	r3, [r7, #8]

}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b005      	add	sp, #20
 8003270:	bd90      	pop	{r4, r7, pc}
	...

08003274 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <__io_putchar+0x20>)
 800327e:	1d39      	adds	r1, r7, #4
 8003280:	4805      	ldr	r0, [pc, #20]	; (8003298 <__io_putchar+0x24>)
 8003282:	2201      	movs	r2, #1
 8003284:	f002 fdf0 	bl	8005e68 <HAL_UART_Transmit>

  return ch;
 8003288:	687b      	ldr	r3, [r7, #4]
}
 800328a:	0018      	movs	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	b002      	add	sp, #8
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	0000ffff 	.word	0x0000ffff
 8003298:	20000254 	.word	0x20000254

0800329c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032a0:	f000 fb68 	bl	8003974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032a4:	f000 f81c 	bl	80032e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032a8:	f000 f934 	bl	8003514 <MX_GPIO_Init>
  MX_I2C1_Init();
 80032ac:	f000 f886 	bl	80033bc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80032b0:	f000 f900 	bl	80034b4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80032b4:	f000 f8c2 	bl	800343c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

//  HTS_Cal * hts_cal_data = hts221_init();

  puts("\033[2J\033[H"); // This clears the terminal
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <main+0x38>)
 80032ba:	0018      	movs	r0, r3
 80032bc:	f004 f880 	bl	80073c0 <puts>

  hts_cal_data = hts221_init();
 80032c0:	f7ff fc70 	bl	8002ba4 <hts221_init>
 80032c4:	0002      	movs	r2, r0
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <main+0x3c>)
 80032c8:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim6);
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <main+0x40>)
 80032cc:	0018      	movs	r0, r3
 80032ce:	f002 fb6f 	bl	80059b0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032d2:	e7fe      	b.n	80032d2 <main+0x36>
 80032d4:	080094a0 	.word	0x080094a0
 80032d8:	20000250 	.word	0x20000250
 80032dc:	200002d8 	.word	0x200002d8

080032e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b09d      	sub	sp, #116	; 0x74
 80032e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032e6:	2438      	movs	r4, #56	; 0x38
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	0018      	movs	r0, r3
 80032ec:	2338      	movs	r3, #56	; 0x38
 80032ee:	001a      	movs	r2, r3
 80032f0:	2100      	movs	r1, #0
 80032f2:	f003 faaf 	bl	8006854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032f6:	2324      	movs	r3, #36	; 0x24
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	0018      	movs	r0, r3
 80032fc:	2314      	movs	r3, #20
 80032fe:	001a      	movs	r2, r3
 8003300:	2100      	movs	r1, #0
 8003302:	f003 faa7 	bl	8006854 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003306:	003b      	movs	r3, r7
 8003308:	0018      	movs	r0, r3
 800330a:	2324      	movs	r3, #36	; 0x24
 800330c:	001a      	movs	r2, r3
 800330e:	2100      	movs	r1, #0
 8003310:	f003 faa0 	bl	8006854 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <SystemClock_Config+0xd4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a27      	ldr	r2, [pc, #156]	; (80033b8 <SystemClock_Config+0xd8>)
 800331a:	401a      	ands	r2, r3
 800331c:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <SystemClock_Config+0xd4>)
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	0109      	lsls	r1, r1, #4
 8003322:	430a      	orrs	r2, r1
 8003324:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003326:	0021      	movs	r1, r4
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2210      	movs	r2, #16
 800332c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800332e:	187b      	adds	r3, r7, r1
 8003330:	2201      	movs	r2, #1
 8003332:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003334:	187b      	adds	r3, r7, r1
 8003336:	2200      	movs	r2, #0
 8003338:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800333a:	187b      	adds	r3, r7, r1
 800333c:	22a0      	movs	r2, #160	; 0xa0
 800333e:	0212      	lsls	r2, r2, #8
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003342:	187b      	adds	r3, r7, r1
 8003344:	2200      	movs	r2, #0
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003348:	187b      	adds	r3, r7, r1
 800334a:	0018      	movs	r0, r3
 800334c:	f001 fba4 	bl	8004a98 <HAL_RCC_OscConfig>
 8003350:	1e03      	subs	r3, r0, #0
 8003352:	d001      	beq.n	8003358 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003354:	f000 f900 	bl	8003558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003358:	2124      	movs	r1, #36	; 0x24
 800335a:	187b      	adds	r3, r7, r1
 800335c:	220f      	movs	r2, #15
 800335e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003360:	187b      	adds	r3, r7, r1
 8003362:	2200      	movs	r2, #0
 8003364:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003366:	187b      	adds	r3, r7, r1
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003378:	187b      	adds	r3, r7, r1
 800337a:	2100      	movs	r1, #0
 800337c:	0018      	movs	r0, r3
 800337e:	f001 ff4f 	bl	8005220 <HAL_RCC_ClockConfig>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d001      	beq.n	800338a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003386:	f000 f8e7 	bl	8003558 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800338a:	003b      	movs	r3, r7
 800338c:	2209      	movs	r2, #9
 800338e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003390:	003b      	movs	r3, r7
 8003392:	2200      	movs	r2, #0
 8003394:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003396:	003b      	movs	r3, r7
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800339c:	003b      	movs	r3, r7
 800339e:	0018      	movs	r0, r3
 80033a0:	f002 f962 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 80033a4:	1e03      	subs	r3, r0, #0
 80033a6:	d001      	beq.n	80033ac <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80033a8:	f000 f8d6 	bl	8003558 <Error_Handler>
  }
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b01d      	add	sp, #116	; 0x74
 80033b2:	bd90      	pop	{r4, r7, pc}
 80033b4:	40007000 	.word	0x40007000
 80033b8:	ffffe7ff 	.word	0xffffe7ff

080033bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033c0:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <MX_I2C1_Init+0x78>)
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <MX_I2C1_Init+0x7c>)
 80033c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <MX_I2C1_Init+0x78>)
 80033c8:	22e1      	movs	r2, #225	; 0xe1
 80033ca:	00d2      	lsls	r2, r2, #3
 80033cc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <MX_I2C1_Init+0x78>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033d4:	4b17      	ldr	r3, [pc, #92]	; (8003434 <MX_I2C1_Init+0x78>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <MX_I2C1_Init+0x78>)
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <MX_I2C1_Init+0x78>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <MX_I2C1_Init+0x78>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <MX_I2C1_Init+0x78>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <MX_I2C1_Init+0x78>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <MX_I2C1_Init+0x78>)
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 fd7e 	bl	8003efc <HAL_I2C_Init>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d001      	beq.n	8003408 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003404:	f000 f8a8 	bl	8003558 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <MX_I2C1_Init+0x78>)
 800340a:	2100      	movs	r1, #0
 800340c:	0018      	movs	r0, r3
 800340e:	f001 faab 	bl	8004968 <HAL_I2CEx_ConfigAnalogFilter>
 8003412:	1e03      	subs	r3, r0, #0
 8003414:	d001      	beq.n	800341a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003416:	f000 f89f 	bl	8003558 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <MX_I2C1_Init+0x78>)
 800341c:	2100      	movs	r1, #0
 800341e:	0018      	movs	r0, r3
 8003420:	f001 faee 	bl	8004a00 <HAL_I2CEx_ConfigDigitalFilter>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d001      	beq.n	800342c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003428:	f000 f896 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	20000204 	.word	0x20000204
 8003438:	40005400 	.word	0x40005400

0800343c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003442:	003b      	movs	r3, r7
 8003444:	0018      	movs	r0, r3
 8003446:	2308      	movs	r3, #8
 8003448:	001a      	movs	r2, r3
 800344a:	2100      	movs	r1, #0
 800344c:	f003 fa02 	bl	8006854 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003450:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <MX_TIM6_Init+0x6c>)
 8003452:	4a16      	ldr	r2, [pc, #88]	; (80034ac <MX_TIM6_Init+0x70>)
 8003454:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2097 - 1;
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <MX_TIM6_Init+0x6c>)
 8003458:	2283      	movs	r2, #131	; 0x83
 800345a:	0112      	lsls	r2, r2, #4
 800345c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <MX_TIM6_Init+0x6c>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8003464:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <MX_TIM6_Init+0x6c>)
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <MX_TIM6_Init+0x74>)
 8003468:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800346a:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <MX_TIM6_Init+0x6c>)
 800346c:	2200      	movs	r2, #0
 800346e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003470:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <MX_TIM6_Init+0x6c>)
 8003472:	0018      	movs	r0, r3
 8003474:	f002 fa5c 	bl	8005930 <HAL_TIM_Base_Init>
 8003478:	1e03      	subs	r3, r0, #0
 800347a:	d001      	beq.n	8003480 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 800347c:	f000 f86c 	bl	8003558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003480:	003b      	movs	r3, r7
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003486:	003b      	movs	r3, r7
 8003488:	2200      	movs	r2, #0
 800348a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800348c:	003a      	movs	r2, r7
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <MX_TIM6_Init+0x6c>)
 8003490:	0011      	movs	r1, r2
 8003492:	0018      	movs	r0, r3
 8003494:	f002 fc3c 	bl	8005d10 <HAL_TIMEx_MasterConfigSynchronization>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 800349c:	f000 f85c 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	200002d8 	.word	0x200002d8
 80034ac:	40001000 	.word	0x40001000
 80034b0:	000003e7 	.word	0x000003e7

080034b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034ba:	4a15      	ldr	r2, [pc, #84]	; (8003510 <MX_USART1_UART_Init+0x5c>)
 80034bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034c0:	22e1      	movs	r2, #225	; 0xe1
 80034c2:	0252      	lsls	r2, r2, #9
 80034c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034da:	220c      	movs	r2, #12
 80034dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <MX_USART1_UART_Init+0x58>)
 80034f8:	0018      	movs	r0, r3
 80034fa:	f002 fc61 	bl	8005dc0 <HAL_UART_Init>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d001      	beq.n	8003506 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003502:	f000 f829 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000254 	.word	0x20000254
 8003510:	40013800 	.word	0x40013800

08003514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <MX_GPIO_Init+0x40>)
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <MX_GPIO_Init+0x40>)
 8003520:	2101      	movs	r1, #1
 8003522:	430a      	orrs	r2, r1
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <MX_GPIO_Init+0x40>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	2201      	movs	r2, #1
 800352c:	4013      	ands	r3, r2
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <MX_GPIO_Init+0x40>)
 8003534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003536:	4b07      	ldr	r3, [pc, #28]	; (8003554 <MX_GPIO_Init+0x40>)
 8003538:	2102      	movs	r1, #2
 800353a:	430a      	orrs	r2, r1
 800353c:	62da      	str	r2, [r3, #44]	; 0x2c
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <MX_GPIO_Init+0x40>)
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	2202      	movs	r2, #2
 8003544:	4013      	ands	r3, r2
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	683b      	ldr	r3, [r7, #0]

}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b002      	add	sp, #8
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	40021000 	.word	0x40021000

08003558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800355c:	b672      	cpsid	i
}
 800355e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003560:	e7fe      	b.n	8003560 <Error_Handler+0x8>
	...

08003564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_MspInit+0x24>)
 800356a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_MspInit+0x24>)
 800356e:	2101      	movs	r1, #1
 8003570:	430a      	orrs	r2, r1
 8003572:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <HAL_MspInit+0x24>)
 8003576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_MspInit+0x24>)
 800357a:	2180      	movs	r1, #128	; 0x80
 800357c:	0549      	lsls	r1, r1, #21
 800357e:	430a      	orrs	r2, r1
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000

0800358c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b089      	sub	sp, #36	; 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	240c      	movs	r4, #12
 8003596:	193b      	adds	r3, r7, r4
 8003598:	0018      	movs	r0, r3
 800359a:	2314      	movs	r3, #20
 800359c:	001a      	movs	r2, r3
 800359e:	2100      	movs	r1, #0
 80035a0:	f003 f958 	bl	8006854 <memset>
  if(hi2c->Instance==I2C1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <HAL_I2C_MspInit+0x7c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d128      	bne.n	8003600 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	4b17      	ldr	r3, [pc, #92]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035b4:	2102      	movs	r1, #2
 80035b6:	430a      	orrs	r2, r1
 80035b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80035ba:	4b14      	ldr	r3, [pc, #80]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	2202      	movs	r2, #2
 80035c0:	4013      	ands	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035c6:	0021      	movs	r1, r4
 80035c8:	187b      	adds	r3, r7, r1
 80035ca:	22c0      	movs	r2, #192	; 0xc0
 80035cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2212      	movs	r2, #18
 80035d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	2201      	movs	r2, #1
 80035d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	2203      	movs	r2, #3
 80035de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	2201      	movs	r2, #1
 80035e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	4a09      	ldr	r2, [pc, #36]	; (8003610 <HAL_I2C_MspInit+0x84>)
 80035ea:	0019      	movs	r1, r3
 80035ec:	0010      	movs	r0, r2
 80035ee:	f000 fb0f 	bl	8003c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_I2C_MspInit+0x80>)
 80035f8:	2180      	movs	r1, #128	; 0x80
 80035fa:	0389      	lsls	r1, r1, #14
 80035fc:	430a      	orrs	r2, r1
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b009      	add	sp, #36	; 0x24
 8003606:	bd90      	pop	{r4, r7, pc}
 8003608:	40005400 	.word	0x40005400
 800360c:	40021000 	.word	0x40021000
 8003610:	50000400 	.word	0x50000400

08003614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0a      	ldr	r2, [pc, #40]	; (800364c <HAL_TIM_Base_MspInit+0x38>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10d      	bne.n	8003642 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_TIM_Base_MspInit+0x3c>)
 8003628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_TIM_Base_MspInit+0x3c>)
 800362c:	2110      	movs	r1, #16
 800362e:	430a      	orrs	r2, r1
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2100      	movs	r1, #0
 8003636:	2011      	movs	r0, #17
 8003638:	f000 fab8 	bl	8003bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800363c:	2011      	movs	r0, #17
 800363e:	f000 faca 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	40001000 	.word	0x40001000
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	240c      	movs	r4, #12
 800365e:	193b      	adds	r3, r7, r4
 8003660:	0018      	movs	r0, r3
 8003662:	2314      	movs	r3, #20
 8003664:	001a      	movs	r2, r3
 8003666:	2100      	movs	r1, #0
 8003668:	f003 f8f4 	bl	8006854 <memset>
  if(huart->Instance==USART1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_UART_MspInit+0x80>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d12a      	bne.n	80036cc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <HAL_UART_MspInit+0x84>)
 8003678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367a:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_UART_MspInit+0x84>)
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	01c9      	lsls	r1, r1, #7
 8003680:	430a      	orrs	r2, r1
 8003682:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_UART_MspInit+0x84>)
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_UART_MspInit+0x84>)
 800368a:	2101      	movs	r1, #1
 800368c:	430a      	orrs	r2, r1
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_UART_MspInit+0x84>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	2201      	movs	r2, #1
 8003696:	4013      	ands	r3, r2
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800369c:	193b      	adds	r3, r7, r4
 800369e:	22c0      	movs	r2, #192	; 0xc0
 80036a0:	00d2      	lsls	r2, r2, #3
 80036a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	0021      	movs	r1, r4
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2202      	movs	r2, #2
 80036aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2203      	movs	r2, #3
 80036b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2204      	movs	r2, #4
 80036bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036be:	187a      	adds	r2, r7, r1
 80036c0:	23a0      	movs	r3, #160	; 0xa0
 80036c2:	05db      	lsls	r3, r3, #23
 80036c4:	0011      	movs	r1, r2
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 faa2 	bl	8003c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b009      	add	sp, #36	; 0x24
 80036d2:	bd90      	pop	{r4, r7, pc}
 80036d4:	40013800 	.word	0x40013800
 80036d8:	40021000 	.word	0x40021000

080036dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036e0:	e7fe      	b.n	80036e0 <NMI_Handler+0x4>

080036e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036e6:	e7fe      	b.n	80036e6 <HardFault_Handler+0x4>

080036e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003700:	f000 f98c 	bl	8003a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <TIM6_DAC_IRQHandler+0x70>)
 8003714:	0018      	movs	r0, r3
 8003716:	f002 f997 	bl	8005a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  int temp = hts221_get_temp('C', hts_cal_data);
 800371a:	4b19      	ldr	r3, [pc, #100]	; (8003780 <TIM6_DAC_IRQHandler+0x74>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0019      	movs	r1, r3
 8003720:	2043      	movs	r0, #67	; 0x43
 8003722:	f7ff fc01 	bl	8002f28 <hts221_get_temp>
 8003726:	0003      	movs	r3, r0
 8003728:	607b      	str	r3, [r7, #4]
  if (temp == TEMP_ERROR) printf("Error reading temperature\r\n");
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a15      	ldr	r2, [pc, #84]	; (8003784 <TIM6_DAC_IRQHandler+0x78>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d104      	bne.n	800373c <TIM6_DAC_IRQHandler+0x30>
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <TIM6_DAC_IRQHandler+0x7c>)
 8003734:	0018      	movs	r0, r3
 8003736:	f003 fe43 	bl	80073c0 <puts>
 800373a:	e005      	b.n	8003748 <TIM6_DAC_IRQHandler+0x3c>
  else printf("Current temperature is %d C\r\n", temp);
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <TIM6_DAC_IRQHandler+0x80>)
 8003740:	0011      	movs	r1, r2
 8003742:	0018      	movs	r0, r3
 8003744:	f003 fdb0 	bl	80072a8 <iprintf>

  int humid = hts221_get_humid(hts_cal_data);
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <TIM6_DAC_IRQHandler+0x74>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0018      	movs	r0, r3
 800374e:	f7ff fccf 	bl	80030f0 <hts221_get_humid>
 8003752:	0003      	movs	r3, r0
 8003754:	603b      	str	r3, [r7, #0]
  if (humid == HUMID_ERROR) printf("Error reading humidity\r\n");
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	d104      	bne.n	8003766 <TIM6_DAC_IRQHandler+0x5a>
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <TIM6_DAC_IRQHandler+0x84>)
 800375e:	0018      	movs	r0, r3
 8003760:	f003 fe2e 	bl	80073c0 <puts>
  else printf("Current Relative Humidity is %d%% \r\n", humid);

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003764:	e005      	b.n	8003772 <TIM6_DAC_IRQHandler+0x66>
  else printf("Current Relative Humidity is %d%% \r\n", humid);
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <TIM6_DAC_IRQHandler+0x88>)
 800376a:	0011      	movs	r1, r2
 800376c:	0018      	movs	r0, r3
 800376e:	f003 fd9b 	bl	80072a8 <iprintf>
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b002      	add	sp, #8
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	200002d8 	.word	0x200002d8
 8003780:	20000250 	.word	0x20000250
 8003784:	fffffe34 	.word	0xfffffe34
 8003788:	080094a8 	.word	0x080094a8
 800378c:	080094c4 	.word	0x080094c4
 8003790:	080094e4 	.word	0x080094e4
 8003794:	080094fc 	.word	0x080094fc

08003798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
	return 1;
 800379c:	2301      	movs	r3, #1
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_kill>:

int _kill(int pid, int sig)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037ae:	f003 f81d 	bl	80067ec <__errno>
 80037b2:	0003      	movs	r3, r0
 80037b4:	2216      	movs	r2, #22
 80037b6:	601a      	str	r2, [r3, #0]
	return -1;
 80037b8:	2301      	movs	r3, #1
 80037ba:	425b      	negs	r3, r3
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_exit>:

void _exit (int status)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037cc:	2301      	movs	r3, #1
 80037ce:	425a      	negs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff ffe5 	bl	80037a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037da:	e7fe      	b.n	80037da <_exit+0x16>

080037dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e00a      	b.n	8003804 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037ee:	e000      	b.n	80037f2 <_read+0x16>
 80037f0:	bf00      	nop
 80037f2:	0001      	movs	r1, r0
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	60ba      	str	r2, [r7, #8]
 80037fa:	b2ca      	uxtb	r2, r1
 80037fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3301      	adds	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	dbf0      	blt.n	80037ee <_read+0x12>
	}

return len;
 800380c:	687b      	ldr	r3, [r7, #4]
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b006      	add	sp, #24
 8003814:	bd80      	pop	{r7, pc}

08003816 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e009      	b.n	800383c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	60ba      	str	r2, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	0018      	movs	r0, r3
 8003832:	f7ff fd1f 	bl	8003274 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3301      	adds	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	dbf1      	blt.n	8003828 <_write+0x12>
	}
	return len;
 8003844:	687b      	ldr	r3, [r7, #4]
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b006      	add	sp, #24
 800384c:	bd80      	pop	{r7, pc}

0800384e <_close>:

int _close(int file)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
	return -1;
 8003856:	2301      	movs	r3, #1
 8003858:	425b      	negs	r3, r3
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b002      	add	sp, #8
 8003860:	bd80      	pop	{r7, pc}

08003862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	0192      	lsls	r2, r2, #6
 8003872:	605a      	str	r2, [r3, #4]
	return 0;
 8003874:	2300      	movs	r3, #0
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b002      	add	sp, #8
 800387c:	bd80      	pop	{r7, pc}

0800387e <_isatty>:

int _isatty(int file)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
	return 1;
 8003886:	2301      	movs	r3, #1
}
 8003888:	0018      	movs	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	b002      	add	sp, #8
 800388e:	bd80      	pop	{r7, pc}

08003890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
	return 0;
 800389c:	2300      	movs	r3, #0
}
 800389e:	0018      	movs	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b004      	add	sp, #16
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <_sbrk+0x5c>)
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <_sbrk+0x60>)
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <_sbrk+0x64>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <_sbrk+0x64>)
 80038c6:	4a12      	ldr	r2, [pc, #72]	; (8003910 <_sbrk+0x68>)
 80038c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <_sbrk+0x64>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	18d3      	adds	r3, r2, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d207      	bcs.n	80038e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038d8:	f002 ff88 	bl	80067ec <__errno>
 80038dc:	0003      	movs	r3, r0
 80038de:	220c      	movs	r2, #12
 80038e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	425b      	negs	r3, r3
 80038e6:	e009      	b.n	80038fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <_sbrk+0x64>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <_sbrk+0x64>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	18d2      	adds	r2, r2, r3
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <_sbrk+0x64>)
 80038f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80038fa:	68fb      	ldr	r3, [r7, #12]
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	b006      	add	sp, #24
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20002000 	.word	0x20002000
 8003908:	00000400 	.word	0x00000400
 800390c:	200001f8 	.word	0x200001f8
 8003910:	20000330 	.word	0x20000330

08003914 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003920:	480d      	ldr	r0, [pc, #52]	; (8003958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003922:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003924:	480d      	ldr	r0, [pc, #52]	; (800395c <LoopForever+0x6>)
  ldr r1, =_edata
 8003926:	490e      	ldr	r1, [pc, #56]	; (8003960 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003928:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <LoopForever+0xe>)
  movs r3, #0
 800392a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800392c:	e002      	b.n	8003934 <LoopCopyDataInit>

0800392e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800392e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003932:	3304      	adds	r3, #4

08003934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003938:	d3f9      	bcc.n	800392e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800393a:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <LoopForever+0x12>)
  ldr r4, =_ebss
 800393c:	4c0b      	ldr	r4, [pc, #44]	; (800396c <LoopForever+0x16>)
  movs r3, #0
 800393e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003940:	e001      	b.n	8003946 <LoopFillZerobss>

08003942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003944:	3204      	adds	r2, #4

08003946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003948:	d3fb      	bcc.n	8003942 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800394a:	f7ff ffe3 	bl	8003914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800394e:	f002 ff53 	bl	80067f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003952:	f7ff fca3 	bl	800329c <main>

08003956 <LoopForever>:

LoopForever:
    b LoopForever
 8003956:	e7fe      	b.n	8003956 <LoopForever>
  ldr   r0, =_estack
 8003958:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800395c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003960:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003964:	08009ac4 	.word	0x08009ac4
  ldr r2, =_sbss
 8003968:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800396c:	2000032c 	.word	0x2000032c

08003970 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003970:	e7fe      	b.n	8003970 <ADC1_COMP_IRQHandler>
	...

08003974 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_Init+0x3c>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_Init+0x3c>)
 8003986:	2140      	movs	r1, #64	; 0x40
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800398c:	2000      	movs	r0, #0
 800398e:	f000 f811 	bl	80039b4 <HAL_InitTick>
 8003992:	1e03      	subs	r3, r0, #0
 8003994:	d003      	beq.n	800399e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003996:	1dfb      	adds	r3, r7, #7
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	e001      	b.n	80039a2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800399e:	f7ff fde1 	bl	8003564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039a2:	1dfb      	adds	r3, r7, #7
 80039a4:	781b      	ldrb	r3, [r3, #0]
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	40022000 	.word	0x40022000

080039b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <HAL_InitTick+0x5c>)
 80039be:	681c      	ldr	r4, [r3, #0]
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <HAL_InitTick+0x60>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	0019      	movs	r1, r3
 80039c6:	23fa      	movs	r3, #250	; 0xfa
 80039c8:	0098      	lsls	r0, r3, #2
 80039ca:	f7fc fbb9 	bl	8000140 <__udivsi3>
 80039ce:	0003      	movs	r3, r0
 80039d0:	0019      	movs	r1, r3
 80039d2:	0020      	movs	r0, r4
 80039d4:	f7fc fbb4 	bl	8000140 <__udivsi3>
 80039d8:	0003      	movs	r3, r0
 80039da:	0018      	movs	r0, r3
 80039dc:	f000 f90b 	bl	8003bf6 <HAL_SYSTICK_Config>
 80039e0:	1e03      	subs	r3, r0, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e00f      	b.n	8003a08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d80b      	bhi.n	8003a06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	2301      	movs	r3, #1
 80039f2:	425b      	negs	r3, r3
 80039f4:	2200      	movs	r2, #0
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 f8d8 	bl	8003bac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_InitTick+0x64>)
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
}
 8003a08:	0018      	movs	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b003      	add	sp, #12
 8003a0e:	bd90      	pop	{r4, r7, pc}
 8003a10:	20000000 	.word	0x20000000
 8003a14:	20000008 	.word	0x20000008
 8003a18:	20000004 	.word	0x20000004

08003a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_IncTick+0x1c>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	001a      	movs	r2, r3
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_IncTick+0x20>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	18d2      	adds	r2, r2, r3
 8003a2c:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <HAL_IncTick+0x20>)
 8003a2e:	601a      	str	r2, [r3, #0]
}
 8003a30:	46c0      	nop			; (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	20000008 	.word	0x20000008
 8003a3c:	20000318 	.word	0x20000318

08003a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  return uwTick;
 8003a44:	4b02      	ldr	r3, [pc, #8]	; (8003a50 <HAL_GetTick+0x10>)
 8003a46:	681b      	ldr	r3, [r3, #0]
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	20000318 	.word	0x20000318

08003a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	1dfb      	adds	r3, r7, #7
 8003a5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a60:	1dfb      	adds	r3, r7, #7
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b7f      	cmp	r3, #127	; 0x7f
 8003a66:	d809      	bhi.n	8003a7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	231f      	movs	r3, #31
 8003a70:	401a      	ands	r2, r3
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <__NVIC_EnableIRQ+0x30>)
 8003a74:	2101      	movs	r1, #1
 8003a76:	4091      	lsls	r1, r2
 8003a78:	000a      	movs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]
  }
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	e000e100 	.word	0xe000e100

08003a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	0002      	movs	r2, r0
 8003a90:	6039      	str	r1, [r7, #0]
 8003a92:	1dfb      	adds	r3, r7, #7
 8003a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a96:	1dfb      	adds	r3, r7, #7
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a9c:	d828      	bhi.n	8003af0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a9e:	4a2f      	ldr	r2, [pc, #188]	; (8003b5c <__NVIC_SetPriority+0xd4>)
 8003aa0:	1dfb      	adds	r3, r7, #7
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b25b      	sxtb	r3, r3
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	33c0      	adds	r3, #192	; 0xc0
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	589b      	ldr	r3, [r3, r2]
 8003aae:	1dfa      	adds	r2, r7, #7
 8003ab0:	7812      	ldrb	r2, [r2, #0]
 8003ab2:	0011      	movs	r1, r2
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	00d2      	lsls	r2, r2, #3
 8003aba:	21ff      	movs	r1, #255	; 0xff
 8003abc:	4091      	lsls	r1, r2
 8003abe:	000a      	movs	r2, r1
 8003ac0:	43d2      	mvns	r2, r2
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	019b      	lsls	r3, r3, #6
 8003aca:	22ff      	movs	r2, #255	; 0xff
 8003acc:	401a      	ands	r2, r3
 8003ace:	1dfb      	adds	r3, r7, #7
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	4003      	ands	r3, r0
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003adc:	481f      	ldr	r0, [pc, #124]	; (8003b5c <__NVIC_SetPriority+0xd4>)
 8003ade:	1dfb      	adds	r3, r7, #7
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	b25b      	sxtb	r3, r3
 8003ae4:	089b      	lsrs	r3, r3, #2
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	33c0      	adds	r3, #192	; 0xc0
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003aee:	e031      	b.n	8003b54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003af0:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <__NVIC_SetPriority+0xd8>)
 8003af2:	1dfb      	adds	r3, r7, #7
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	0019      	movs	r1, r3
 8003af8:	230f      	movs	r3, #15
 8003afa:	400b      	ands	r3, r1
 8003afc:	3b08      	subs	r3, #8
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	3306      	adds	r3, #6
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	18d3      	adds	r3, r2, r3
 8003b06:	3304      	adds	r3, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1dfa      	adds	r2, r7, #7
 8003b0c:	7812      	ldrb	r2, [r2, #0]
 8003b0e:	0011      	movs	r1, r2
 8003b10:	2203      	movs	r2, #3
 8003b12:	400a      	ands	r2, r1
 8003b14:	00d2      	lsls	r2, r2, #3
 8003b16:	21ff      	movs	r1, #255	; 0xff
 8003b18:	4091      	lsls	r1, r2
 8003b1a:	000a      	movs	r2, r1
 8003b1c:	43d2      	mvns	r2, r2
 8003b1e:	401a      	ands	r2, r3
 8003b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	019b      	lsls	r3, r3, #6
 8003b26:	22ff      	movs	r2, #255	; 0xff
 8003b28:	401a      	ands	r2, r3
 8003b2a:	1dfb      	adds	r3, r7, #7
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	0018      	movs	r0, r3
 8003b30:	2303      	movs	r3, #3
 8003b32:	4003      	ands	r3, r0
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b38:	4809      	ldr	r0, [pc, #36]	; (8003b60 <__NVIC_SetPriority+0xd8>)
 8003b3a:	1dfb      	adds	r3, r7, #7
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	001c      	movs	r4, r3
 8003b40:	230f      	movs	r3, #15
 8003b42:	4023      	ands	r3, r4
 8003b44:	3b08      	subs	r3, #8
 8003b46:	089b      	lsrs	r3, r3, #2
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	3306      	adds	r3, #6
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	18c3      	adds	r3, r0, r3
 8003b50:	3304      	adds	r3, #4
 8003b52:	601a      	str	r2, [r3, #0]
}
 8003b54:	46c0      	nop			; (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b003      	add	sp, #12
 8003b5a:	bd90      	pop	{r4, r7, pc}
 8003b5c:	e000e100 	.word	0xe000e100
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	1e5a      	subs	r2, r3, #1
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	045b      	lsls	r3, r3, #17
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d301      	bcc.n	8003b7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e010      	b.n	8003b9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <SysTick_Config+0x44>)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	3a01      	subs	r2, #1
 8003b82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b84:	2301      	movs	r3, #1
 8003b86:	425b      	negs	r3, r3
 8003b88:	2103      	movs	r1, #3
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7ff ff7c 	bl	8003a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <SysTick_Config+0x44>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b96:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <SysTick_Config+0x44>)
 8003b98:	2207      	movs	r2, #7
 8003b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b002      	add	sp, #8
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	e000e010 	.word	0xe000e010

08003bac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	210f      	movs	r1, #15
 8003bb8:	187b      	adds	r3, r7, r1
 8003bba:	1c02      	adds	r2, r0, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	b25b      	sxtb	r3, r3
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7ff ff5d 	bl	8003a88 <__NVIC_SetPriority>
}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b004      	add	sp, #16
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	0002      	movs	r2, r0
 8003bde:	1dfb      	adds	r3, r7, #7
 8003be0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be2:	1dfb      	adds	r3, r7, #7
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b25b      	sxtb	r3, r3
 8003be8:	0018      	movs	r0, r3
 8003bea:	f7ff ff33 	bl	8003a54 <__NVIC_EnableIRQ>
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7ff ffaf 	bl	8003b64 <SysTick_Config>
 8003c06:	0003      	movs	r3, r0
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003c26:	e14f      	b.n	8003ec8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4091      	lsls	r1, r2
 8003c32:	000a      	movs	r2, r1
 8003c34:	4013      	ands	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d100      	bne.n	8003c40 <HAL_GPIO_Init+0x30>
 8003c3e:	e140      	b.n	8003ec2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d00b      	beq.n	8003c60 <HAL_GPIO_Init+0x50>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d007      	beq.n	8003c60 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c54:	2b11      	cmp	r3, #17
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b12      	cmp	r3, #18
 8003c5e:	d130      	bne.n	8003cc2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	0013      	movs	r3, r2
 8003c70:	43da      	mvns	r2, r3
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	409a      	lsls	r2, r3
 8003c82:	0013      	movs	r3, r2
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c96:	2201      	movs	r2, #1
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	0013      	movs	r3, r2
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	2201      	movs	r2, #1
 8003cae:	401a      	ands	r2, r3
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	0013      	movs	r3, r2
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	2203      	movs	r2, #3
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	0013      	movs	r3, r2
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	0013      	movs	r3, r2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0xf2>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b12      	cmp	r3, #18
 8003d00:	d123      	bne.n	8003d4a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	08da      	lsrs	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3208      	adds	r2, #8
 8003d0a:	0092      	lsls	r2, r2, #2
 8003d0c:	58d3      	ldr	r3, [r2, r3]
 8003d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2207      	movs	r2, #7
 8003d14:	4013      	ands	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	220f      	movs	r2, #15
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	0013      	movs	r3, r2
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2107      	movs	r1, #7
 8003d2e:	400b      	ands	r3, r1
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	409a      	lsls	r2, r3
 8003d34:	0013      	movs	r3, r2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	08da      	lsrs	r2, r3, #3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3208      	adds	r2, #8
 8003d44:	0092      	lsls	r2, r2, #2
 8003d46:	6939      	ldr	r1, [r7, #16]
 8003d48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	2203      	movs	r2, #3
 8003d56:	409a      	lsls	r2, r3
 8003d58:	0013      	movs	r3, r2
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2203      	movs	r2, #3
 8003d68:	401a      	ands	r2, r3
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	0013      	movs	r3, r2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	055b      	lsls	r3, r3, #21
 8003d86:	4013      	ands	r3, r2
 8003d88:	d100      	bne.n	8003d8c <HAL_GPIO_Init+0x17c>
 8003d8a:	e09a      	b.n	8003ec2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8c:	4b54      	ldr	r3, [pc, #336]	; (8003ee0 <HAL_GPIO_Init+0x2d0>)
 8003d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d90:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <HAL_GPIO_Init+0x2d0>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	430a      	orrs	r2, r1
 8003d96:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d98:	4a52      	ldr	r2, [pc, #328]	; (8003ee4 <HAL_GPIO_Init+0x2d4>)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	3302      	adds	r3, #2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	589b      	ldr	r3, [r3, r2]
 8003da4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2203      	movs	r2, #3
 8003daa:	4013      	ands	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	220f      	movs	r2, #15
 8003db0:	409a      	lsls	r2, r3
 8003db2:	0013      	movs	r3, r2
 8003db4:	43da      	mvns	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	23a0      	movs	r3, #160	; 0xa0
 8003dc0:	05db      	lsls	r3, r3, #23
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d019      	beq.n	8003dfa <HAL_GPIO_Init+0x1ea>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a47      	ldr	r2, [pc, #284]	; (8003ee8 <HAL_GPIO_Init+0x2d8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_GPIO_Init+0x1e6>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a46      	ldr	r2, [pc, #280]	; (8003eec <HAL_GPIO_Init+0x2dc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00d      	beq.n	8003df2 <HAL_GPIO_Init+0x1e2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a45      	ldr	r2, [pc, #276]	; (8003ef0 <HAL_GPIO_Init+0x2e0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <HAL_GPIO_Init+0x1de>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a44      	ldr	r2, [pc, #272]	; (8003ef4 <HAL_GPIO_Init+0x2e4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <HAL_GPIO_Init+0x1da>
 8003de6:	2305      	movs	r3, #5
 8003de8:	e008      	b.n	8003dfc <HAL_GPIO_Init+0x1ec>
 8003dea:	2306      	movs	r3, #6
 8003dec:	e006      	b.n	8003dfc <HAL_GPIO_Init+0x1ec>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e004      	b.n	8003dfc <HAL_GPIO_Init+0x1ec>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e002      	b.n	8003dfc <HAL_GPIO_Init+0x1ec>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_GPIO_Init+0x1ec>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	2103      	movs	r1, #3
 8003e00:	400a      	ands	r2, r1
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	4093      	lsls	r3, r2
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e0c:	4935      	ldr	r1, [pc, #212]	; (8003ee4 <HAL_GPIO_Init+0x2d4>)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	3302      	adds	r3, #2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e1a:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <HAL_GPIO_Init+0x2e8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	43da      	mvns	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	025b      	lsls	r3, r3, #9
 8003e32:	4013      	ands	r3, r2
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_GPIO_Init+0x2e8>)
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <HAL_GPIO_Init+0x2e8>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	029b      	lsls	r3, r3, #10
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_GPIO_Init+0x2e8>)
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_GPIO_Init+0x2e8>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	035b      	lsls	r3, r3, #13
 8003e86:	4013      	ands	r3, r2
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e92:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <HAL_GPIO_Init+0x2e8>)
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003e98:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <HAL_GPIO_Init+0x2e8>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	039b      	lsls	r3, r3, #14
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <HAL_GPIO_Init+0x2e8>)
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	40da      	lsrs	r2, r3
 8003ed0:	1e13      	subs	r3, r2, #0
 8003ed2:	d000      	beq.n	8003ed6 <HAL_GPIO_Init+0x2c6>
 8003ed4:	e6a8      	b.n	8003c28 <HAL_GPIO_Init+0x18>
  }
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b006      	add	sp, #24
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	50000400 	.word	0x50000400
 8003eec:	50000800 	.word	0x50000800
 8003ef0:	50000c00 	.word	0x50000c00
 8003ef4:	50001c00 	.word	0x50001c00
 8003ef8:	40010400 	.word	0x40010400

08003efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e082      	b.n	8004014 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2241      	movs	r2, #65	; 0x41
 8003f12:	5c9b      	ldrb	r3, [r3, r2]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d107      	bne.n	8003f2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2240      	movs	r2, #64	; 0x40
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7ff fb31 	bl	800358c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2241      	movs	r2, #65	; 0x41
 8003f2e:	2124      	movs	r1, #36	; 0x24
 8003f30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	438a      	bics	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4934      	ldr	r1, [pc, #208]	; (800401c <HAL_I2C_Init+0x120>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4931      	ldr	r1, [pc, #196]	; (8004020 <HAL_I2C_Init+0x124>)
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d108      	bne.n	8003f7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	0209      	lsls	r1, r1, #8
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	e007      	b.n	8003f8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2184      	movs	r1, #132	; 0x84
 8003f84:	0209      	lsls	r1, r1, #8
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d104      	bne.n	8003f9c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	0112      	lsls	r2, r2, #4
 8003f9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	491f      	ldr	r1, [pc, #124]	; (8004024 <HAL_I2C_Init+0x128>)
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	491a      	ldr	r1, [pc, #104]	; (8004020 <HAL_I2C_Init+0x124>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	021a      	lsls	r2, r3, #8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69d9      	ldr	r1, [r3, #28]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1a      	ldr	r2, [r3, #32]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2241      	movs	r2, #65	; 0x41
 8004000:	2120      	movs	r1, #32
 8004002:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2242      	movs	r2, #66	; 0x42
 800400e:	2100      	movs	r1, #0
 8004010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	0018      	movs	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	b002      	add	sp, #8
 800401a:	bd80      	pop	{r7, pc}
 800401c:	f0ffffff 	.word	0xf0ffffff
 8004020:	ffff7fff 	.word	0xffff7fff
 8004024:	02008000 	.word	0x02008000

08004028 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	000c      	movs	r4, r1
 8004032:	0010      	movs	r0, r2
 8004034:	0019      	movs	r1, r3
 8004036:	230a      	movs	r3, #10
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	1c22      	adds	r2, r4, #0
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	2308      	movs	r3, #8
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	1c02      	adds	r2, r0, #0
 8004044:	801a      	strh	r2, [r3, #0]
 8004046:	1dbb      	adds	r3, r7, #6
 8004048:	1c0a      	adds	r2, r1, #0
 800404a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2241      	movs	r2, #65	; 0x41
 8004050:	5c9b      	ldrb	r3, [r3, r2]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b20      	cmp	r3, #32
 8004056:	d000      	beq.n	800405a <HAL_I2C_Mem_Write+0x32>
 8004058:	e10c      	b.n	8004274 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <HAL_I2C_Mem_Write+0x42>
 8004060:	232c      	movs	r3, #44	; 0x2c
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d105      	bne.n	8004076 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0ff      	b.n	8004276 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2240      	movs	r2, #64	; 0x40
 800407a:	5c9b      	ldrb	r3, [r3, r2]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_I2C_Mem_Write+0x5c>
 8004080:	2302      	movs	r3, #2
 8004082:	e0f8      	b.n	8004276 <HAL_I2C_Mem_Write+0x24e>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2240      	movs	r2, #64	; 0x40
 8004088:	2101      	movs	r1, #1
 800408a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800408c:	f7ff fcd8 	bl	8003a40 <HAL_GetTick>
 8004090:	0003      	movs	r3, r0
 8004092:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	0219      	lsls	r1, r3, #8
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	2319      	movs	r3, #25
 80040a0:	2201      	movs	r2, #1
 80040a2:	f000 fb0b 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80040a6:	1e03      	subs	r3, r0, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e0e3      	b.n	8004276 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2241      	movs	r2, #65	; 0x41
 80040b2:	2121      	movs	r1, #33	; 0x21
 80040b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2242      	movs	r2, #66	; 0x42
 80040ba:	2140      	movs	r1, #64	; 0x40
 80040bc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	222c      	movs	r2, #44	; 0x2c
 80040ce:	18ba      	adds	r2, r7, r2
 80040d0:	8812      	ldrh	r2, [r2, #0]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040da:	1dbb      	adds	r3, r7, #6
 80040dc:	881c      	ldrh	r4, [r3, #0]
 80040de:	2308      	movs	r3, #8
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	881a      	ldrh	r2, [r3, #0]
 80040e4:	230a      	movs	r3, #10
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	8819      	ldrh	r1, [r3, #0]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	0023      	movs	r3, r4
 80040f6:	f000 f9f9 	bl	80044ec <I2C_RequestMemoryWrite>
 80040fa:	1e03      	subs	r3, r0, #0
 80040fc:	d005      	beq.n	800410a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2240      	movs	r2, #64	; 0x40
 8004102:	2100      	movs	r1, #0
 8004104:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0b5      	b.n	8004276 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2bff      	cmp	r3, #255	; 0xff
 8004112:	d911      	bls.n	8004138 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	22ff      	movs	r2, #255	; 0xff
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	b2da      	uxtb	r2, r3
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	045c      	lsls	r4, r3, #17
 8004124:	230a      	movs	r3, #10
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	8819      	ldrh	r1, [r3, #0]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	2300      	movs	r3, #0
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	0023      	movs	r3, r4
 8004132:	f000 fbe3 	bl	80048fc <I2C_TransferConfig>
 8004136:	e012      	b.n	800415e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004146:	b2da      	uxtb	r2, r3
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	049c      	lsls	r4, r3, #18
 800414c:	230a      	movs	r3, #10
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	8819      	ldrh	r1, [r3, #0]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	2300      	movs	r3, #0
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	0023      	movs	r3, r4
 800415a:	f000 fbcf 	bl	80048fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	0018      	movs	r0, r3
 8004166:	f000 fae8 	bl	800473a <I2C_WaitOnTXISFlagUntilTimeout>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e081      	b.n	8004276 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	781a      	ldrb	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d03a      	beq.n	8004222 <HAL_I2C_Mem_Write+0x1fa>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d136      	bne.n	8004222 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	0013      	movs	r3, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	2180      	movs	r1, #128	; 0x80
 80041c2:	f000 fa7b 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80041c6:	1e03      	subs	r3, r0, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e053      	b.n	8004276 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2bff      	cmp	r3, #255	; 0xff
 80041d6:	d911      	bls.n	80041fc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	22ff      	movs	r2, #255	; 0xff
 80041dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	045c      	lsls	r4, r3, #17
 80041e8:	230a      	movs	r3, #10
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	8819      	ldrh	r1, [r3, #0]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	2300      	movs	r3, #0
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	0023      	movs	r3, r4
 80041f6:	f000 fb81 	bl	80048fc <I2C_TransferConfig>
 80041fa:	e012      	b.n	8004222 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	b2da      	uxtb	r2, r3
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	049c      	lsls	r4, r3, #18
 8004210:	230a      	movs	r3, #10
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	8819      	ldrh	r1, [r3, #0]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	0023      	movs	r3, r4
 800421e:	f000 fb6d 	bl	80048fc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d198      	bne.n	800415e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	0018      	movs	r0, r3
 8004234:	f000 fac0 	bl	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004238:	1e03      	subs	r3, r0, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e01a      	b.n	8004276 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2220      	movs	r2, #32
 8004246:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	490b      	ldr	r1, [pc, #44]	; (8004280 <HAL_I2C_Mem_Write+0x258>)
 8004254:	400a      	ands	r2, r1
 8004256:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2241      	movs	r2, #65	; 0x41
 800425c:	2120      	movs	r1, #32
 800425e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2242      	movs	r2, #66	; 0x42
 8004264:	2100      	movs	r1, #0
 8004266:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2240      	movs	r2, #64	; 0x40
 800426c:	2100      	movs	r1, #0
 800426e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	0018      	movs	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	b007      	add	sp, #28
 800427c:	bd90      	pop	{r4, r7, pc}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	fe00e800 	.word	0xfe00e800

08004284 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	000c      	movs	r4, r1
 800428e:	0010      	movs	r0, r2
 8004290:	0019      	movs	r1, r3
 8004292:	230a      	movs	r3, #10
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	1c22      	adds	r2, r4, #0
 8004298:	801a      	strh	r2, [r3, #0]
 800429a:	2308      	movs	r3, #8
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	1c02      	adds	r2, r0, #0
 80042a0:	801a      	strh	r2, [r3, #0]
 80042a2:	1dbb      	adds	r3, r7, #6
 80042a4:	1c0a      	adds	r2, r1, #0
 80042a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2241      	movs	r2, #65	; 0x41
 80042ac:	5c9b      	ldrb	r3, [r3, r2]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d000      	beq.n	80042b6 <HAL_I2C_Mem_Read+0x32>
 80042b4:	e110      	b.n	80044d8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <HAL_I2C_Mem_Read+0x42>
 80042bc:	232c      	movs	r3, #44	; 0x2c
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d105      	bne.n	80042d2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2280      	movs	r2, #128	; 0x80
 80042ca:	0092      	lsls	r2, r2, #2
 80042cc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e103      	b.n	80044da <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2240      	movs	r2, #64	; 0x40
 80042d6:	5c9b      	ldrb	r3, [r3, r2]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_I2C_Mem_Read+0x5c>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0fc      	b.n	80044da <HAL_I2C_Mem_Read+0x256>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2240      	movs	r2, #64	; 0x40
 80042e4:	2101      	movs	r1, #1
 80042e6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042e8:	f7ff fbaa 	bl	8003a40 <HAL_GetTick>
 80042ec:	0003      	movs	r3, r0
 80042ee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	0219      	lsls	r1, r3, #8
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	2319      	movs	r3, #25
 80042fc:	2201      	movs	r2, #1
 80042fe:	f000 f9dd 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8004302:	1e03      	subs	r3, r0, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0e7      	b.n	80044da <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2241      	movs	r2, #65	; 0x41
 800430e:	2122      	movs	r1, #34	; 0x22
 8004310:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2242      	movs	r2, #66	; 0x42
 8004316:	2140      	movs	r1, #64	; 0x40
 8004318:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	222c      	movs	r2, #44	; 0x2c
 800432a:	18ba      	adds	r2, r7, r2
 800432c:	8812      	ldrh	r2, [r2, #0]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004336:	1dbb      	adds	r3, r7, #6
 8004338:	881c      	ldrh	r4, [r3, #0]
 800433a:	2308      	movs	r3, #8
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	881a      	ldrh	r2, [r3, #0]
 8004340:	230a      	movs	r3, #10
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	8819      	ldrh	r1, [r3, #0]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	0023      	movs	r3, r4
 8004352:	f000 f92f 	bl	80045b4 <I2C_RequestMemoryRead>
 8004356:	1e03      	subs	r3, r0, #0
 8004358:	d005      	beq.n	8004366 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2240      	movs	r2, #64	; 0x40
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0b9      	b.n	80044da <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2bff      	cmp	r3, #255	; 0xff
 800436e:	d911      	bls.n	8004394 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	22ff      	movs	r2, #255	; 0xff
 8004374:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	b2da      	uxtb	r2, r3
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	045c      	lsls	r4, r3, #17
 8004380:	230a      	movs	r3, #10
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	8819      	ldrh	r1, [r3, #0]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	4b56      	ldr	r3, [pc, #344]	; (80044e4 <HAL_I2C_Mem_Read+0x260>)
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	0023      	movs	r3, r4
 800438e:	f000 fab5 	bl	80048fc <I2C_TransferConfig>
 8004392:	e012      	b.n	80043ba <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	049c      	lsls	r4, r3, #18
 80043a8:	230a      	movs	r3, #10
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	8819      	ldrh	r1, [r3, #0]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	4b4c      	ldr	r3, [pc, #304]	; (80044e4 <HAL_I2C_Mem_Read+0x260>)
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	0023      	movs	r3, r4
 80043b6:	f000 faa1 	bl	80048fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	0013      	movs	r3, r2
 80043c4:	2200      	movs	r2, #0
 80043c6:	2104      	movs	r1, #4
 80043c8:	f000 f978 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80043cc:	1e03      	subs	r3, r0, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e082      	b.n	80044da <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d03a      	beq.n	8004486 <HAL_I2C_Mem_Read+0x202>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004414:	2b00      	cmp	r3, #0
 8004416:	d136      	bne.n	8004486 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	0013      	movs	r3, r2
 8004422:	2200      	movs	r2, #0
 8004424:	2180      	movs	r1, #128	; 0x80
 8004426:	f000 f949 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 800442a:	1e03      	subs	r3, r0, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e053      	b.n	80044da <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	2bff      	cmp	r3, #255	; 0xff
 800443a:	d911      	bls.n	8004460 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	22ff      	movs	r2, #255	; 0xff
 8004440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	b2da      	uxtb	r2, r3
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	045c      	lsls	r4, r3, #17
 800444c:	230a      	movs	r3, #10
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	8819      	ldrh	r1, [r3, #0]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	2300      	movs	r3, #0
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	0023      	movs	r3, r4
 800445a:	f000 fa4f 	bl	80048fc <I2C_TransferConfig>
 800445e:	e012      	b.n	8004486 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446e:	b2da      	uxtb	r2, r3
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	049c      	lsls	r4, r3, #18
 8004474:	230a      	movs	r3, #10
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	8819      	ldrh	r1, [r3, #0]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	2300      	movs	r3, #0
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	0023      	movs	r3, r4
 8004482:	f000 fa3b 	bl	80048fc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d194      	bne.n	80043ba <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	0018      	movs	r0, r3
 8004498:	f000 f98e 	bl	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d001      	beq.n	80044a4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e01a      	b.n	80044da <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2220      	movs	r2, #32
 80044aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	490c      	ldr	r1, [pc, #48]	; (80044e8 <HAL_I2C_Mem_Read+0x264>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2241      	movs	r2, #65	; 0x41
 80044c0:	2120      	movs	r1, #32
 80044c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2242      	movs	r2, #66	; 0x42
 80044c8:	2100      	movs	r1, #0
 80044ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	2100      	movs	r1, #0
 80044d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b007      	add	sp, #28
 80044e0:	bd90      	pop	{r4, r7, pc}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	80002400 	.word	0x80002400
 80044e8:	fe00e800 	.word	0xfe00e800

080044ec <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b5b0      	push	{r4, r5, r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	000c      	movs	r4, r1
 80044f6:	0010      	movs	r0, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	250a      	movs	r5, #10
 80044fc:	197b      	adds	r3, r7, r5
 80044fe:	1c22      	adds	r2, r4, #0
 8004500:	801a      	strh	r2, [r3, #0]
 8004502:	2308      	movs	r3, #8
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	1c02      	adds	r2, r0, #0
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	1dbb      	adds	r3, r7, #6
 800450c:	1c0a      	adds	r2, r1, #0
 800450e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004510:	1dbb      	adds	r3, r7, #6
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	045c      	lsls	r4, r3, #17
 800451a:	197b      	adds	r3, r7, r5
 800451c:	8819      	ldrh	r1, [r3, #0]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <I2C_RequestMemoryWrite+0xc4>)
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	0023      	movs	r3, r4
 8004526:	f000 f9e9 	bl	80048fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800452a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452c:	6a39      	ldr	r1, [r7, #32]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f902 	bl	800473a <I2C_WaitOnTXISFlagUntilTimeout>
 8004536:	1e03      	subs	r3, r0, #0
 8004538:	d001      	beq.n	800453e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e033      	b.n	80045a6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d107      	bne.n	8004556 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004546:	2308      	movs	r3, #8
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	629a      	str	r2, [r3, #40]	; 0x28
 8004554:	e019      	b.n	800458a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004556:	2308      	movs	r3, #8
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	b29b      	uxth	r3, r3
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	6a39      	ldr	r1, [r7, #32]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	0018      	movs	r0, r3
 8004570:	f000 f8e3 	bl	800473a <I2C_WaitOnTXISFlagUntilTimeout>
 8004574:	1e03      	subs	r3, r0, #0
 8004576:	d001      	beq.n	800457c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e014      	b.n	80045a6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800457c:	2308      	movs	r3, #8
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800458a:	6a3a      	ldr	r2, [r7, #32]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	0013      	movs	r3, r2
 8004594:	2200      	movs	r2, #0
 8004596:	2180      	movs	r1, #128	; 0x80
 8004598:	f000 f890 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 800459c:	1e03      	subs	r3, r0, #0
 800459e:	d001      	beq.n	80045a4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	0018      	movs	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b004      	add	sp, #16
 80045ac:	bdb0      	pop	{r4, r5, r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	80002000 	.word	0x80002000

080045b4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045b4:	b5b0      	push	{r4, r5, r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	000c      	movs	r4, r1
 80045be:	0010      	movs	r0, r2
 80045c0:	0019      	movs	r1, r3
 80045c2:	250a      	movs	r5, #10
 80045c4:	197b      	adds	r3, r7, r5
 80045c6:	1c22      	adds	r2, r4, #0
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	2308      	movs	r3, #8
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	1c02      	adds	r2, r0, #0
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	1c0a      	adds	r2, r1, #0
 80045d6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045d8:	1dbb      	adds	r3, r7, #6
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	197b      	adds	r3, r7, r5
 80045e0:	8819      	ldrh	r1, [r3, #0]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	4b23      	ldr	r3, [pc, #140]	; (8004674 <I2C_RequestMemoryRead+0xc0>)
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2300      	movs	r3, #0
 80045ea:	f000 f987 	bl	80048fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	6a39      	ldr	r1, [r7, #32]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f000 f8a0 	bl	800473a <I2C_WaitOnTXISFlagUntilTimeout>
 80045fa:	1e03      	subs	r3, r0, #0
 80045fc:	d001      	beq.n	8004602 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e033      	b.n	800466a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004602:	1dbb      	adds	r3, r7, #6
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800460a:	2308      	movs	r3, #8
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
 8004618:	e019      	b.n	800464e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800461a:	2308      	movs	r3, #8
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	b29b      	uxth	r3, r3
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	6a39      	ldr	r1, [r7, #32]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	0018      	movs	r0, r3
 8004634:	f000 f881 	bl	800473a <I2C_WaitOnTXISFlagUntilTimeout>
 8004638:	1e03      	subs	r3, r0, #0
 800463a:	d001      	beq.n	8004640 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e014      	b.n	800466a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004640:	2308      	movs	r3, #8
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b2da      	uxtb	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800464e:	6a3a      	ldr	r2, [r7, #32]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	0013      	movs	r3, r2
 8004658:	2200      	movs	r2, #0
 800465a:	2140      	movs	r1, #64	; 0x40
 800465c:	f000 f82e 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 8004660:	1e03      	subs	r3, r0, #0
 8004662:	d001      	beq.n	8004668 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b004      	add	sp, #16
 8004670:	bdb0      	pop	{r4, r5, r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	80002000 	.word	0x80002000

08004678 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2202      	movs	r2, #2
 8004688:	4013      	ands	r3, r2
 800468a:	2b02      	cmp	r3, #2
 800468c:	d103      	bne.n	8004696 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2200      	movs	r2, #0
 8004694:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2201      	movs	r2, #1
 800469e:	4013      	ands	r3, r2
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d007      	beq.n	80046b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2101      	movs	r1, #1
 80046b0:	430a      	orrs	r2, r1
 80046b2:	619a      	str	r2, [r3, #24]
  }
}
 80046b4:	46c0      	nop			; (mov r8, r8)
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b002      	add	sp, #8
 80046ba:	bd80      	pop	{r7, pc}

080046bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	1dfb      	adds	r3, r7, #7
 80046ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046cc:	e021      	b.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	d01e      	beq.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d4:	f7ff f9b4 	bl	8003a40 <HAL_GetTick>
 80046d8:	0002      	movs	r2, r0
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x2e>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d113      	bne.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	2220      	movs	r2, #32
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2241      	movs	r2, #65	; 0x41
 80046fa:	2120      	movs	r1, #32
 80046fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2242      	movs	r2, #66	; 0x42
 8004702:	2100      	movs	r1, #0
 8004704:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2240      	movs	r2, #64	; 0x40
 800470a:	2100      	movs	r1, #0
 800470c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e00f      	b.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	4013      	ands	r3, r2
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	425a      	negs	r2, r3
 8004722:	4153      	adcs	r3, r2
 8004724:	b2db      	uxtb	r3, r3
 8004726:	001a      	movs	r2, r3
 8004728:	1dfb      	adds	r3, r7, #7
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d0ce      	beq.n	80046ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b004      	add	sp, #16
 8004738:	bd80      	pop	{r7, pc}

0800473a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004746:	e02b      	b.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	0018      	movs	r0, r3
 8004750:	f000 f86e 	bl	8004830 <I2C_IsAcknowledgeFailed>
 8004754:	1e03      	subs	r3, r0, #0
 8004756:	d001      	beq.n	800475c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e029      	b.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3301      	adds	r3, #1
 8004760:	d01e      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004762:	f7ff f96d 	bl	8003a40 <HAL_GetTick>
 8004766:	0002      	movs	r2, r0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	d302      	bcc.n	8004778 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d113      	bne.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	2220      	movs	r2, #32
 800477e:	431a      	orrs	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2241      	movs	r2, #65	; 0x41
 8004788:	2120      	movs	r1, #32
 800478a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2242      	movs	r2, #66	; 0x42
 8004790:	2100      	movs	r1, #0
 8004792:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2240      	movs	r2, #64	; 0x40
 8004798:	2100      	movs	r1, #0
 800479a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e007      	b.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2202      	movs	r2, #2
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d1cc      	bne.n	8004748 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	0018      	movs	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b004      	add	sp, #16
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c4:	e028      	b.n	8004818 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 f82f 	bl	8004830 <I2C_IsAcknowledgeFailed>
 80047d2:	1e03      	subs	r3, r0, #0
 80047d4:	d001      	beq.n	80047da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e026      	b.n	8004828 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7ff f931 	bl	8003a40 <HAL_GetTick>
 80047de:	0002      	movs	r2, r0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d113      	bne.n	8004818 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	2220      	movs	r2, #32
 80047f6:	431a      	orrs	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2241      	movs	r2, #65	; 0x41
 8004800:	2120      	movs	r1, #32
 8004802:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2242      	movs	r2, #66	; 0x42
 8004808:	2100      	movs	r1, #0
 800480a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	2100      	movs	r1, #0
 8004812:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e007      	b.n	8004828 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2220      	movs	r2, #32
 8004820:	4013      	ands	r3, r2
 8004822:	2b20      	cmp	r3, #32
 8004824:	d1cf      	bne.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b004      	add	sp, #16
 800482e:	bd80      	pop	{r7, pc}

08004830 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2210      	movs	r2, #16
 8004844:	4013      	ands	r3, r2
 8004846:	2b10      	cmp	r3, #16
 8004848:	d151      	bne.n	80048ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800484a:	e021      	b.n	8004890 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3301      	adds	r3, #1
 8004850:	d01e      	beq.n	8004890 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004852:	f7ff f8f5 	bl	8003a40 <HAL_GetTick>
 8004856:	0002      	movs	r2, r0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	429a      	cmp	r2, r3
 8004860:	d302      	bcc.n	8004868 <I2C_IsAcknowledgeFailed+0x38>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d113      	bne.n	8004890 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	2220      	movs	r2, #32
 800486e:	431a      	orrs	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2241      	movs	r2, #65	; 0x41
 8004878:	2120      	movs	r1, #32
 800487a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2242      	movs	r2, #66	; 0x42
 8004880:	2100      	movs	r1, #0
 8004882:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e02f      	b.n	80048f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2220      	movs	r2, #32
 8004898:	4013      	ands	r3, r2
 800489a:	2b20      	cmp	r3, #32
 800489c:	d1d6      	bne.n	800484c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2210      	movs	r2, #16
 80048a4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2220      	movs	r2, #32
 80048ac:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff fee1 	bl	8004678 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	490d      	ldr	r1, [pc, #52]	; (80048f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80048c2:	400a      	ands	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	2204      	movs	r2, #4
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2241      	movs	r2, #65	; 0x41
 80048d6:	2120      	movs	r1, #32
 80048d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2242      	movs	r2, #66	; 0x42
 80048de:	2100      	movs	r1, #0
 80048e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2240      	movs	r2, #64	; 0x40
 80048e6:	2100      	movs	r1, #0
 80048e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	0018      	movs	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b004      	add	sp, #16
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	fe00e800 	.word	0xfe00e800

080048fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	0008      	movs	r0, r1
 8004906:	0011      	movs	r1, r2
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	240a      	movs	r4, #10
 800490c:	193b      	adds	r3, r7, r4
 800490e:	1c02      	adds	r2, r0, #0
 8004910:	801a      	strh	r2, [r3, #0]
 8004912:	2009      	movs	r0, #9
 8004914:	183b      	adds	r3, r7, r0
 8004916:	1c0a      	adds	r2, r1, #0
 8004918:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	6a3a      	ldr	r2, [r7, #32]
 8004922:	0d51      	lsrs	r1, r2, #21
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	00d2      	lsls	r2, r2, #3
 8004928:	400a      	ands	r2, r1
 800492a:	490e      	ldr	r1, [pc, #56]	; (8004964 <I2C_TransferConfig+0x68>)
 800492c:	430a      	orrs	r2, r1
 800492e:	43d2      	mvns	r2, r2
 8004930:	401a      	ands	r2, r3
 8004932:	0011      	movs	r1, r2
 8004934:	193b      	adds	r3, r7, r4
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	059b      	lsls	r3, r3, #22
 800493a:	0d9a      	lsrs	r2, r3, #22
 800493c:	183b      	adds	r3, r7, r0
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	0418      	lsls	r0, r3, #16
 8004942:	23ff      	movs	r3, #255	; 0xff
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	4003      	ands	r3, r0
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	431a      	orrs	r2, r3
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	431a      	orrs	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b005      	add	sp, #20
 8004960:	bd90      	pop	{r4, r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	03ff63ff 	.word	0x03ff63ff

08004968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2241      	movs	r2, #65	; 0x41
 8004976:	5c9b      	ldrb	r3, [r3, r2]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b20      	cmp	r3, #32
 800497c:	d138      	bne.n	80049f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2240      	movs	r2, #64	; 0x40
 8004982:	5c9b      	ldrb	r3, [r3, r2]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004988:	2302      	movs	r3, #2
 800498a:	e032      	b.n	80049f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	2101      	movs	r1, #1
 8004992:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2241      	movs	r2, #65	; 0x41
 8004998:	2124      	movs	r1, #36	; 0x24
 800499a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2101      	movs	r1, #1
 80049a8:	438a      	bics	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4911      	ldr	r1, [pc, #68]	; (80049fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80049b8:	400a      	ands	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6819      	ldr	r1, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2101      	movs	r1, #1
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2241      	movs	r2, #65	; 0x41
 80049e0:	2120      	movs	r1, #32
 80049e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2240      	movs	r2, #64	; 0x40
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049f0:	2302      	movs	r3, #2
  }
}
 80049f2:	0018      	movs	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b002      	add	sp, #8
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	ffffefff 	.word	0xffffefff

08004a00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2241      	movs	r2, #65	; 0x41
 8004a0e:	5c9b      	ldrb	r3, [r3, r2]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d139      	bne.n	8004a8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2240      	movs	r2, #64	; 0x40
 8004a1a:	5c9b      	ldrb	r3, [r3, r2]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e033      	b.n	8004a8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2240      	movs	r2, #64	; 0x40
 8004a28:	2101      	movs	r1, #1
 8004a2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2241      	movs	r2, #65	; 0x41
 8004a30:	2124      	movs	r1, #36	; 0x24
 8004a32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2101      	movs	r1, #1
 8004a40:	438a      	bics	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2101      	movs	r1, #1
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2241      	movs	r2, #65	; 0x41
 8004a7a:	2120      	movs	r1, #32
 8004a7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	2100      	movs	r1, #0
 8004a84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a8a:	2302      	movs	r3, #2
  }
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	fffff0ff 	.word	0xfffff0ff

08004a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a98:	b5b0      	push	{r4, r5, r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d102      	bne.n	8004aac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f000 fbaf 	bl	800520a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aac:	4bcf      	ldr	r3, [pc, #828]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	220c      	movs	r2, #12
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ab6:	4bcd      	ldr	r3, [pc, #820]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	025b      	lsls	r3, r3, #9
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d100      	bne.n	8004ace <HAL_RCC_OscConfig+0x36>
 8004acc:	e07e      	b.n	8004bcc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d007      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d112      	bne.n	8004b00 <HAL_RCC_OscConfig+0x68>
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	025b      	lsls	r3, r3, #9
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d10d      	bne.n	8004b00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae4:	4bc1      	ldr	r3, [pc, #772]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	029b      	lsls	r3, r3, #10
 8004aec:	4013      	ands	r3, r2
 8004aee:	d100      	bne.n	8004af2 <HAL_RCC_OscConfig+0x5a>
 8004af0:	e06b      	b.n	8004bca <HAL_RCC_OscConfig+0x132>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d167      	bne.n	8004bca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f000 fb85 	bl	800520a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	025b      	lsls	r3, r3, #9
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_OscConfig+0x84>
 8004b0c:	4bb7      	ldr	r3, [pc, #732]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4bb6      	ldr	r3, [pc, #728]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b12:	2180      	movs	r1, #128	; 0x80
 8004b14:	0249      	lsls	r1, r1, #9
 8004b16:	430a      	orrs	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e027      	b.n	8004b6c <HAL_RCC_OscConfig+0xd4>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	23a0      	movs	r3, #160	; 0xa0
 8004b22:	02db      	lsls	r3, r3, #11
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d10e      	bne.n	8004b46 <HAL_RCC_OscConfig+0xae>
 8004b28:	4bb0      	ldr	r3, [pc, #704]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4baf      	ldr	r3, [pc, #700]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b2e:	2180      	movs	r1, #128	; 0x80
 8004b30:	02c9      	lsls	r1, r1, #11
 8004b32:	430a      	orrs	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	4bad      	ldr	r3, [pc, #692]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4bac      	ldr	r3, [pc, #688]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b3c:	2180      	movs	r1, #128	; 0x80
 8004b3e:	0249      	lsls	r1, r1, #9
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	e012      	b.n	8004b6c <HAL_RCC_OscConfig+0xd4>
 8004b46:	4ba9      	ldr	r3, [pc, #676]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4ba8      	ldr	r3, [pc, #672]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b4c:	49a8      	ldr	r1, [pc, #672]	; (8004df0 <HAL_RCC_OscConfig+0x358>)
 8004b4e:	400a      	ands	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	4ba6      	ldr	r3, [pc, #664]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	025b      	lsls	r3, r3, #9
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4ba2      	ldr	r3, [pc, #648]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4ba1      	ldr	r3, [pc, #644]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b66:	49a3      	ldr	r1, [pc, #652]	; (8004df4 <HAL_RCC_OscConfig+0x35c>)
 8004b68:	400a      	ands	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d015      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fe ff64 	bl	8003a40 <HAL_GetTick>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b7c:	e009      	b.n	8004b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b7e:	f7fe ff5f 	bl	8003a40 <HAL_GetTick>
 8004b82:	0002      	movs	r2, r0
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b64      	cmp	r3, #100	; 0x64
 8004b8a:	d902      	bls.n	8004b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	f000 fb3c 	bl	800520a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b92:	4b96      	ldr	r3, [pc, #600]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	2380      	movs	r3, #128	; 0x80
 8004b98:	029b      	lsls	r3, r3, #10
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d0ef      	beq.n	8004b7e <HAL_RCC_OscConfig+0xe6>
 8004b9e:	e015      	b.n	8004bcc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fe ff4e 	bl	8003a40 <HAL_GetTick>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004baa:	f7fe ff49 	bl	8003a40 <HAL_GetTick>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b64      	cmp	r3, #100	; 0x64
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e326      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bbc:	4b8b      	ldr	r3, [pc, #556]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	029b      	lsls	r3, r3, #10
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d1f0      	bne.n	8004baa <HAL_RCC_OscConfig+0x112>
 8004bc8:	e000      	b.n	8004bcc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d100      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x140>
 8004bd6:	e08b      	b.n	8004cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	2b0c      	cmp	r3, #12
 8004be8:	d13e      	bne.n	8004c68 <HAL_RCC_OscConfig+0x1d0>
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d13b      	bne.n	8004c68 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004bf0:	4b7e      	ldr	r3, [pc, #504]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_RCC_OscConfig+0x16c>
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e302      	b.n	800520a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c04:	4b79      	ldr	r3, [pc, #484]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	4a7b      	ldr	r2, [pc, #492]	; (8004df8 <HAL_RCC_OscConfig+0x360>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	021a      	lsls	r2, r3, #8
 8004c14:	4b75      	ldr	r3, [pc, #468]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c1a:	4b74      	ldr	r3, [pc, #464]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2209      	movs	r2, #9
 8004c20:	4393      	bics	r3, r2
 8004c22:	0019      	movs	r1, r3
 8004c24:	4b71      	ldr	r3, [pc, #452]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c2c:	f000 fc40 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8004c30:	0001      	movs	r1, r0
 8004c32:	4b6e      	ldr	r3, [pc, #440]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	220f      	movs	r2, #15
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	4a6f      	ldr	r2, [pc, #444]	; (8004dfc <HAL_RCC_OscConfig+0x364>)
 8004c3e:	5cd3      	ldrb	r3, [r2, r3]
 8004c40:	000a      	movs	r2, r1
 8004c42:	40da      	lsrs	r2, r3
 8004c44:	4b6e      	ldr	r3, [pc, #440]	; (8004e00 <HAL_RCC_OscConfig+0x368>)
 8004c46:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004c48:	4b6e      	ldr	r3, [pc, #440]	; (8004e04 <HAL_RCC_OscConfig+0x36c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2513      	movs	r5, #19
 8004c4e:	197c      	adds	r4, r7, r5
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7fe feaf 	bl	80039b4 <HAL_InitTick>
 8004c56:	0003      	movs	r3, r0
 8004c58:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004c5a:	197b      	adds	r3, r7, r5
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d046      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004c62:	197b      	adds	r3, r7, r5
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	e2d0      	b.n	800520a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d027      	beq.n	8004cbe <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c6e:	4b5f      	ldr	r3, [pc, #380]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2209      	movs	r2, #9
 8004c74:	4393      	bics	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	4b5c      	ldr	r3, [pc, #368]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fe fede 	bl	8003a40 <HAL_GetTick>
 8004c84:	0003      	movs	r3, r0
 8004c86:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8a:	f7fe fed9 	bl	8003a40 <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e2b6      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c9c:	4b53      	ldr	r3, [pc, #332]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d0f1      	beq.n	8004c8a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca6:	4b51      	ldr	r3, [pc, #324]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4a53      	ldr	r2, [pc, #332]	; (8004df8 <HAL_RCC_OscConfig+0x360>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	0019      	movs	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	021a      	lsls	r2, r3, #8
 8004cb6:	4b4d      	ldr	r3, [pc, #308]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	e018      	b.n	8004cf0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b4b      	ldr	r3, [pc, #300]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b4a      	ldr	r3, [pc, #296]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	438a      	bics	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cca:	f7fe feb9 	bl	8003a40 <HAL_GetTick>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd4:	f7fe feb4 	bl	8003a40 <HAL_GetTick>
 8004cd8:	0002      	movs	r2, r0
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e291      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ce6:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2204      	movs	r2, #4
 8004cec:	4013      	ands	r3, r2
 8004cee:	d1f1      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2210      	movs	r2, #16
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d100      	bne.n	8004cfc <HAL_RCC_OscConfig+0x264>
 8004cfa:	e0a1      	b.n	8004e40 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d140      	bne.n	8004d84 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d02:	4b3a      	ldr	r3, [pc, #232]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d005      	beq.n	8004d1a <HAL_RCC_OscConfig+0x282>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e277      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d1a:	4b34      	ldr	r3, [pc, #208]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4a3a      	ldr	r2, [pc, #232]	; (8004e08 <HAL_RCC_OscConfig+0x370>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	0019      	movs	r1, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d28:	4b30      	ldr	r3, [pc, #192]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d2e:	4b2f      	ldr	r3, [pc, #188]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	0a19      	lsrs	r1, r3, #8
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	061a      	lsls	r2, r3, #24
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	0b5b      	lsrs	r3, r3, #13
 8004d48:	3301      	adds	r3, #1
 8004d4a:	2280      	movs	r2, #128	; 0x80
 8004d4c:	0212      	lsls	r2, r2, #8
 8004d4e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004d50:	4b26      	ldr	r3, [pc, #152]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	210f      	movs	r1, #15
 8004d58:	400b      	ands	r3, r1
 8004d5a:	4928      	ldr	r1, [pc, #160]	; (8004dfc <HAL_RCC_OscConfig+0x364>)
 8004d5c:	5ccb      	ldrb	r3, [r1, r3]
 8004d5e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <HAL_RCC_OscConfig+0x368>)
 8004d62:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004d64:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <HAL_RCC_OscConfig+0x36c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2513      	movs	r5, #19
 8004d6a:	197c      	adds	r4, r7, r5
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7fe fe21 	bl	80039b4 <HAL_InitTick>
 8004d72:	0003      	movs	r3, r0
 8004d74:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004d76:	197b      	adds	r3, r7, r5
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d060      	beq.n	8004e40 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004d7e:	197b      	adds	r3, r7, r5
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	e242      	b.n	800520a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d03f      	beq.n	8004e0c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d8c:	4b17      	ldr	r3, [pc, #92]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b16      	ldr	r3, [pc, #88]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004d92:	2180      	movs	r1, #128	; 0x80
 8004d94:	0049      	lsls	r1, r1, #1
 8004d96:	430a      	orrs	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9a:	f7fe fe51 	bl	8003a40 <HAL_GetTick>
 8004d9e:	0003      	movs	r3, r0
 8004da0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004da4:	f7fe fe4c 	bl	8003a40 <HAL_GetTick>
 8004da8:	0002      	movs	r2, r0
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e229      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4a10      	ldr	r2, [pc, #64]	; (8004e08 <HAL_RCC_OscConfig+0x370>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	0019      	movs	r1, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	0a19      	lsrs	r1, r3, #8
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	061a      	lsls	r2, r3, #24
 8004de4:	4b01      	ldr	r3, [pc, #4]	; (8004dec <HAL_RCC_OscConfig+0x354>)
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	e029      	b.n	8004e40 <HAL_RCC_OscConfig+0x3a8>
 8004dec:	40021000 	.word	0x40021000
 8004df0:	fffeffff 	.word	0xfffeffff
 8004df4:	fffbffff 	.word	0xfffbffff
 8004df8:	ffffe0ff 	.word	0xffffe0ff
 8004dfc:	08009664 	.word	0x08009664
 8004e00:	20000000 	.word	0x20000000
 8004e04:	20000004 	.word	0x20000004
 8004e08:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e0c:	4bbd      	ldr	r3, [pc, #756]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4bbc      	ldr	r3, [pc, #752]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004e12:	49bd      	ldr	r1, [pc, #756]	; (8005108 <HAL_RCC_OscConfig+0x670>)
 8004e14:	400a      	ands	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fe fe12 	bl	8003a40 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e22:	f7fe fe0d 	bl	8003a40 <HAL_GetTick>
 8004e26:	0002      	movs	r2, r0
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e1ea      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e34:	4bb3      	ldr	r3, [pc, #716]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d1f0      	bne.n	8004e22 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2208      	movs	r2, #8
 8004e46:	4013      	ands	r3, r2
 8004e48:	d036      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d019      	beq.n	8004e86 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e52:	4bac      	ldr	r3, [pc, #688]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e56:	4bab      	ldr	r3, [pc, #684]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004e58:	2101      	movs	r1, #1
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e5e:	f7fe fdef 	bl	8003a40 <HAL_GetTick>
 8004e62:	0003      	movs	r3, r0
 8004e64:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e68:	f7fe fdea 	bl	8003a40 <HAL_GetTick>
 8004e6c:	0002      	movs	r2, r0
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e1c7      	b.n	800520a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e7a:	4ba2      	ldr	r3, [pc, #648]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7e:	2202      	movs	r2, #2
 8004e80:	4013      	ands	r3, r2
 8004e82:	d0f1      	beq.n	8004e68 <HAL_RCC_OscConfig+0x3d0>
 8004e84:	e018      	b.n	8004eb8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e86:	4b9f      	ldr	r3, [pc, #636]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004e88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e8a:	4b9e      	ldr	r3, [pc, #632]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	438a      	bics	r2, r1
 8004e90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e92:	f7fe fdd5 	bl	8003a40 <HAL_GetTick>
 8004e96:	0003      	movs	r3, r0
 8004e98:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7fe fdd0 	bl	8003a40 <HAL_GetTick>
 8004ea0:	0002      	movs	r2, r0
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1ad      	b.n	800520a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eae:	4b95      	ldr	r3, [pc, #596]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d1f1      	bne.n	8004e9c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d100      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x42c>
 8004ec2:	e0ae      	b.n	8005022 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec4:	2027      	movs	r0, #39	; 0x27
 8004ec6:	183b      	adds	r3, r7, r0
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ecc:	4b8d      	ldr	r3, [pc, #564]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	055b      	lsls	r3, r3, #21
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d109      	bne.n	8004eec <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed8:	4b8a      	ldr	r3, [pc, #552]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004edc:	4b89      	ldr	r3, [pc, #548]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	0549      	lsls	r1, r1, #21
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004ee6:	183b      	adds	r3, r7, r0
 8004ee8:	2201      	movs	r2, #1
 8004eea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eec:	4b87      	ldr	r3, [pc, #540]	; (800510c <HAL_RCC_OscConfig+0x674>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d11a      	bne.n	8004f2e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ef8:	4b84      	ldr	r3, [pc, #528]	; (800510c <HAL_RCC_OscConfig+0x674>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b83      	ldr	r3, [pc, #524]	; (800510c <HAL_RCC_OscConfig+0x674>)
 8004efe:	2180      	movs	r1, #128	; 0x80
 8004f00:	0049      	lsls	r1, r1, #1
 8004f02:	430a      	orrs	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f06:	f7fe fd9b 	bl	8003a40 <HAL_GetTick>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f10:	f7fe fd96 	bl	8003a40 <HAL_GetTick>
 8004f14:	0002      	movs	r2, r0
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b64      	cmp	r3, #100	; 0x64
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e173      	b.n	800520a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b7a      	ldr	r3, [pc, #488]	; (800510c <HAL_RCC_OscConfig+0x674>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_OscConfig+0x4b2>
 8004f3a:	4b72      	ldr	r3, [pc, #456]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f3e:	4b71      	ldr	r3, [pc, #452]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	0049      	lsls	r1, r1, #1
 8004f44:	430a      	orrs	r2, r1
 8004f46:	651a      	str	r2, [r3, #80]	; 0x50
 8004f48:	e031      	b.n	8004fae <HAL_RCC_OscConfig+0x516>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x4d4>
 8004f52:	4b6c      	ldr	r3, [pc, #432]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f56:	4b6b      	ldr	r3, [pc, #428]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f58:	496b      	ldr	r1, [pc, #428]	; (8005108 <HAL_RCC_OscConfig+0x670>)
 8004f5a:	400a      	ands	r2, r1
 8004f5c:	651a      	str	r2, [r3, #80]	; 0x50
 8004f5e:	4b69      	ldr	r3, [pc, #420]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f62:	4b68      	ldr	r3, [pc, #416]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f64:	496a      	ldr	r1, [pc, #424]	; (8005110 <HAL_RCC_OscConfig+0x678>)
 8004f66:	400a      	ands	r2, r1
 8004f68:	651a      	str	r2, [r3, #80]	; 0x50
 8004f6a:	e020      	b.n	8004fae <HAL_RCC_OscConfig+0x516>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	23a0      	movs	r3, #160	; 0xa0
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d10e      	bne.n	8004f96 <HAL_RCC_OscConfig+0x4fe>
 8004f78:	4b62      	ldr	r3, [pc, #392]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f7c:	4b61      	ldr	r3, [pc, #388]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	00c9      	lsls	r1, r1, #3
 8004f82:	430a      	orrs	r2, r1
 8004f84:	651a      	str	r2, [r3, #80]	; 0x50
 8004f86:	4b5f      	ldr	r3, [pc, #380]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f8a:	4b5e      	ldr	r3, [pc, #376]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	0049      	lsls	r1, r1, #1
 8004f90:	430a      	orrs	r2, r1
 8004f92:	651a      	str	r2, [r3, #80]	; 0x50
 8004f94:	e00b      	b.n	8004fae <HAL_RCC_OscConfig+0x516>
 8004f96:	4b5b      	ldr	r3, [pc, #364]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f9a:	4b5a      	ldr	r3, [pc, #360]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004f9c:	495a      	ldr	r1, [pc, #360]	; (8005108 <HAL_RCC_OscConfig+0x670>)
 8004f9e:	400a      	ands	r2, r1
 8004fa0:	651a      	str	r2, [r3, #80]	; 0x50
 8004fa2:	4b58      	ldr	r3, [pc, #352]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fa6:	4b57      	ldr	r3, [pc, #348]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004fa8:	4959      	ldr	r1, [pc, #356]	; (8005110 <HAL_RCC_OscConfig+0x678>)
 8004faa:	400a      	ands	r2, r1
 8004fac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d015      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb6:	f7fe fd43 	bl	8003a40 <HAL_GetTick>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fbe:	e009      	b.n	8004fd4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fe fd3e 	bl	8003a40 <HAL_GetTick>
 8004fc4:	0002      	movs	r2, r0
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	4a52      	ldr	r2, [pc, #328]	; (8005114 <HAL_RCC_OscConfig+0x67c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e11a      	b.n	800520a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fd4:	4b4b      	ldr	r3, [pc, #300]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8004fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d0ef      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x528>
 8004fe0:	e014      	b.n	800500c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe2:	f7fe fd2d 	bl	8003a40 <HAL_GetTick>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fea:	e009      	b.n	8005000 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fe fd28 	bl	8003a40 <HAL_GetTick>
 8004ff0:	0002      	movs	r2, r0
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	4a47      	ldr	r2, [pc, #284]	; (8005114 <HAL_RCC_OscConfig+0x67c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e104      	b.n	800520a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005000:	4b40      	ldr	r3, [pc, #256]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8005002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4013      	ands	r3, r2
 800500a:	d1ef      	bne.n	8004fec <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800500c:	2327      	movs	r3, #39	; 0x27
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d105      	bne.n	8005022 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005016:	4b3b      	ldr	r3, [pc, #236]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8005018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501a:	4b3a      	ldr	r3, [pc, #232]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 800501c:	493e      	ldr	r1, [pc, #248]	; (8005118 <HAL_RCC_OscConfig+0x680>)
 800501e:	400a      	ands	r2, r1
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2220      	movs	r2, #32
 8005028:	4013      	ands	r3, r2
 800502a:	d049      	beq.n	80050c0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d026      	beq.n	8005082 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005034:	4b33      	ldr	r3, [pc, #204]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	4b32      	ldr	r3, [pc, #200]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 800503a:	2101      	movs	r1, #1
 800503c:	430a      	orrs	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	4b30      	ldr	r3, [pc, #192]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8005042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005044:	4b2f      	ldr	r3, [pc, #188]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8005046:	2101      	movs	r1, #1
 8005048:	430a      	orrs	r2, r1
 800504a:	635a      	str	r2, [r3, #52]	; 0x34
 800504c:	4b33      	ldr	r3, [pc, #204]	; (800511c <HAL_RCC_OscConfig+0x684>)
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	4b32      	ldr	r3, [pc, #200]	; (800511c <HAL_RCC_OscConfig+0x684>)
 8005052:	2180      	movs	r1, #128	; 0x80
 8005054:	0189      	lsls	r1, r1, #6
 8005056:	430a      	orrs	r2, r1
 8005058:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505a:	f7fe fcf1 	bl	8003a40 <HAL_GetTick>
 800505e:	0003      	movs	r3, r0
 8005060:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005064:	f7fe fcec 	bl	8003a40 <HAL_GetTick>
 8005068:	0002      	movs	r2, r0
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e0c9      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005076:	4b23      	ldr	r3, [pc, #140]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2202      	movs	r2, #2
 800507c:	4013      	ands	r3, r2
 800507e:	d0f1      	beq.n	8005064 <HAL_RCC_OscConfig+0x5cc>
 8005080:	e01e      	b.n	80050c0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005082:	4b20      	ldr	r3, [pc, #128]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	4b1f      	ldr	r3, [pc, #124]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 8005088:	2101      	movs	r1, #1
 800508a:	438a      	bics	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
 800508e:	4b23      	ldr	r3, [pc, #140]	; (800511c <HAL_RCC_OscConfig+0x684>)
 8005090:	6a1a      	ldr	r2, [r3, #32]
 8005092:	4b22      	ldr	r3, [pc, #136]	; (800511c <HAL_RCC_OscConfig+0x684>)
 8005094:	4922      	ldr	r1, [pc, #136]	; (8005120 <HAL_RCC_OscConfig+0x688>)
 8005096:	400a      	ands	r2, r1
 8005098:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fe fcd1 	bl	8003a40 <HAL_GetTick>
 800509e:	0003      	movs	r3, r0
 80050a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050a4:	f7fe fccc 	bl	8003a40 <HAL_GetTick>
 80050a8:	0002      	movs	r2, r0
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e0a9      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050b6:	4b13      	ldr	r3, [pc, #76]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2202      	movs	r2, #2
 80050bc:	4013      	ands	r3, r2
 80050be:	d1f1      	bne.n	80050a4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d100      	bne.n	80050ca <HAL_RCC_OscConfig+0x632>
 80050c8:	e09e      	b.n	8005208 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	d100      	bne.n	80050d2 <HAL_RCC_OscConfig+0x63a>
 80050d0:	e077      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d158      	bne.n	800518c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <HAL_RCC_OscConfig+0x66c>)
 80050e0:	4910      	ldr	r1, [pc, #64]	; (8005124 <HAL_RCC_OscConfig+0x68c>)
 80050e2:	400a      	ands	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e6:	f7fe fcab 	bl	8003a40 <HAL_GetTick>
 80050ea:	0003      	movs	r3, r0
 80050ec:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050ee:	e01b      	b.n	8005128 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f0:	f7fe fca6 	bl	8003a40 <HAL_GetTick>
 80050f4:	0002      	movs	r2, r0
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d914      	bls.n	8005128 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e083      	b.n	800520a <HAL_RCC_OscConfig+0x772>
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	40021000 	.word	0x40021000
 8005108:	fffffeff 	.word	0xfffffeff
 800510c:	40007000 	.word	0x40007000
 8005110:	fffffbff 	.word	0xfffffbff
 8005114:	00001388 	.word	0x00001388
 8005118:	efffffff 	.word	0xefffffff
 800511c:	40010000 	.word	0x40010000
 8005120:	ffffdfff 	.word	0xffffdfff
 8005124:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005128:	4b3a      	ldr	r3, [pc, #232]	; (8005214 <HAL_RCC_OscConfig+0x77c>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	049b      	lsls	r3, r3, #18
 8005130:	4013      	ands	r3, r2
 8005132:	d1dd      	bne.n	80050f0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005134:	4b37      	ldr	r3, [pc, #220]	; (8005214 <HAL_RCC_OscConfig+0x77c>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a37      	ldr	r2, [pc, #220]	; (8005218 <HAL_RCC_OscConfig+0x780>)
 800513a:	4013      	ands	r3, r2
 800513c:	0019      	movs	r1, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514c:	431a      	orrs	r2, r3
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_RCC_OscConfig+0x77c>)
 8005150:	430a      	orrs	r2, r1
 8005152:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005154:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <HAL_RCC_OscConfig+0x77c>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b2e      	ldr	r3, [pc, #184]	; (8005214 <HAL_RCC_OscConfig+0x77c>)
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	0449      	lsls	r1, r1, #17
 800515e:	430a      	orrs	r2, r1
 8005160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005162:	f7fe fc6d 	bl	8003a40 <HAL_GetTick>
 8005166:	0003      	movs	r3, r0
 8005168:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800516c:	f7fe fc68 	bl	8003a40 <HAL_GetTick>
 8005170:	0002      	movs	r2, r0
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e045      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800517e:	4b25      	ldr	r3, [pc, #148]	; (8005214 <HAL_RCC_OscConfig+0x77c>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	049b      	lsls	r3, r3, #18
 8005186:	4013      	ands	r3, r2
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0x6d4>
 800518a:	e03d      	b.n	8005208 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518c:	4b21      	ldr	r3, [pc, #132]	; (8005214 <HAL_RCC_OscConfig+0x77c>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b20      	ldr	r3, [pc, #128]	; (8005214 <HAL_RCC_OscConfig+0x77c>)
 8005192:	4922      	ldr	r1, [pc, #136]	; (800521c <HAL_RCC_OscConfig+0x784>)
 8005194:	400a      	ands	r2, r1
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fe fc52 	bl	8003a40 <HAL_GetTick>
 800519c:	0003      	movs	r3, r0
 800519e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a2:	f7fe fc4d 	bl	8003a40 <HAL_GetTick>
 80051a6:	0002      	movs	r2, r0
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e02a      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80051b4:	4b17      	ldr	r3, [pc, #92]	; (8005214 <HAL_RCC_OscConfig+0x77c>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	049b      	lsls	r3, r3, #18
 80051bc:	4013      	ands	r3, r2
 80051be:	d1f0      	bne.n	80051a2 <HAL_RCC_OscConfig+0x70a>
 80051c0:	e022      	b.n	8005208 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e01d      	b.n	800520a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <HAL_RCC_OscConfig+0x77c>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	025b      	lsls	r3, r3, #9
 80051da:	401a      	ands	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d10f      	bne.n	8005204 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	23f0      	movs	r3, #240	; 0xf0
 80051e8:	039b      	lsls	r3, r3, #14
 80051ea:	401a      	ands	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d107      	bne.n	8005204 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	23c0      	movs	r3, #192	; 0xc0
 80051f8:	041b      	lsls	r3, r3, #16
 80051fa:	401a      	ands	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	0018      	movs	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	b00a      	add	sp, #40	; 0x28
 8005210:	bdb0      	pop	{r4, r5, r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	40021000 	.word	0x40021000
 8005218:	ff02ffff 	.word	0xff02ffff
 800521c:	feffffff 	.word	0xfeffffff

08005220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005220:	b5b0      	push	{r4, r5, r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e128      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005234:	4b96      	ldr	r3, [pc, #600]	; (8005490 <HAL_RCC_ClockConfig+0x270>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	4013      	ands	r3, r2
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d91e      	bls.n	8005280 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b93      	ldr	r3, [pc, #588]	; (8005490 <HAL_RCC_ClockConfig+0x270>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2201      	movs	r2, #1
 8005248:	4393      	bics	r3, r2
 800524a:	0019      	movs	r1, r3
 800524c:	4b90      	ldr	r3, [pc, #576]	; (8005490 <HAL_RCC_ClockConfig+0x270>)
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005254:	f7fe fbf4 	bl	8003a40 <HAL_GetTick>
 8005258:	0003      	movs	r3, r0
 800525a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800525c:	e009      	b.n	8005272 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800525e:	f7fe fbef 	bl	8003a40 <HAL_GetTick>
 8005262:	0002      	movs	r2, r0
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	4a8a      	ldr	r2, [pc, #552]	; (8005494 <HAL_RCC_ClockConfig+0x274>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e109      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	4b87      	ldr	r3, [pc, #540]	; (8005490 <HAL_RCC_ClockConfig+0x270>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2201      	movs	r2, #1
 8005278:	4013      	ands	r3, r2
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d1ee      	bne.n	800525e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2202      	movs	r2, #2
 8005286:	4013      	ands	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800528a:	4b83      	ldr	r3, [pc, #524]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	22f0      	movs	r2, #240	; 0xf0
 8005290:	4393      	bics	r3, r2
 8005292:	0019      	movs	r1, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	4b7f      	ldr	r3, [pc, #508]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 800529a:	430a      	orrs	r2, r1
 800529c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2201      	movs	r2, #1
 80052a4:	4013      	ands	r3, r2
 80052a6:	d100      	bne.n	80052aa <HAL_RCC_ClockConfig+0x8a>
 80052a8:	e089      	b.n	80053be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052b2:	4b79      	ldr	r3, [pc, #484]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	2380      	movs	r3, #128	; 0x80
 80052b8:	029b      	lsls	r3, r3, #10
 80052ba:	4013      	ands	r3, r2
 80052bc:	d120      	bne.n	8005300 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e0e1      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d107      	bne.n	80052da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052ca:	4b73      	ldr	r3, [pc, #460]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	049b      	lsls	r3, r3, #18
 80052d2:	4013      	ands	r3, r2
 80052d4:	d114      	bne.n	8005300 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e0d5      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d106      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052e2:	4b6d      	ldr	r3, [pc, #436]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2204      	movs	r2, #4
 80052e8:	4013      	ands	r3, r2
 80052ea:	d109      	bne.n	8005300 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0ca      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052f0:	4b69      	ldr	r3, [pc, #420]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4013      	ands	r3, r2
 80052fa:	d101      	bne.n	8005300 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0c2      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005300:	4b65      	ldr	r3, [pc, #404]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2203      	movs	r2, #3
 8005306:	4393      	bics	r3, r2
 8005308:	0019      	movs	r1, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	4b62      	ldr	r3, [pc, #392]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 8005310:	430a      	orrs	r2, r1
 8005312:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005314:	f7fe fb94 	bl	8003a40 <HAL_GetTick>
 8005318:	0003      	movs	r3, r0
 800531a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d111      	bne.n	8005348 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005324:	e009      	b.n	800533a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005326:	f7fe fb8b 	bl	8003a40 <HAL_GetTick>
 800532a:	0002      	movs	r2, r0
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	4a58      	ldr	r2, [pc, #352]	; (8005494 <HAL_RCC_ClockConfig+0x274>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e0a5      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800533a:	4b57      	ldr	r3, [pc, #348]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	220c      	movs	r2, #12
 8005340:	4013      	ands	r3, r2
 8005342:	2b08      	cmp	r3, #8
 8005344:	d1ef      	bne.n	8005326 <HAL_RCC_ClockConfig+0x106>
 8005346:	e03a      	b.n	80053be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d111      	bne.n	8005374 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005350:	e009      	b.n	8005366 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005352:	f7fe fb75 	bl	8003a40 <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	4a4d      	ldr	r2, [pc, #308]	; (8005494 <HAL_RCC_ClockConfig+0x274>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e08f      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005366:	4b4c      	ldr	r3, [pc, #304]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	220c      	movs	r2, #12
 800536c:	4013      	ands	r3, r2
 800536e:	2b0c      	cmp	r3, #12
 8005370:	d1ef      	bne.n	8005352 <HAL_RCC_ClockConfig+0x132>
 8005372:	e024      	b.n	80053be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d11b      	bne.n	80053b4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800537c:	e009      	b.n	8005392 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800537e:	f7fe fb5f 	bl	8003a40 <HAL_GetTick>
 8005382:	0002      	movs	r2, r0
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	4a42      	ldr	r2, [pc, #264]	; (8005494 <HAL_RCC_ClockConfig+0x274>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e079      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005392:	4b41      	ldr	r3, [pc, #260]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	220c      	movs	r2, #12
 8005398:	4013      	ands	r3, r2
 800539a:	2b04      	cmp	r3, #4
 800539c:	d1ef      	bne.n	800537e <HAL_RCC_ClockConfig+0x15e>
 800539e:	e00e      	b.n	80053be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a0:	f7fe fb4e 	bl	8003a40 <HAL_GetTick>
 80053a4:	0002      	movs	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	4a3a      	ldr	r2, [pc, #232]	; (8005494 <HAL_RCC_ClockConfig+0x274>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e068      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80053b4:	4b38      	ldr	r3, [pc, #224]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	220c      	movs	r2, #12
 80053ba:	4013      	ands	r3, r2
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053be:	4b34      	ldr	r3, [pc, #208]	; (8005490 <HAL_RCC_ClockConfig+0x270>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2201      	movs	r2, #1
 80053c4:	4013      	ands	r3, r2
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d21e      	bcs.n	800540a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053cc:	4b30      	ldr	r3, [pc, #192]	; (8005490 <HAL_RCC_ClockConfig+0x270>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2201      	movs	r2, #1
 80053d2:	4393      	bics	r3, r2
 80053d4:	0019      	movs	r1, r3
 80053d6:	4b2e      	ldr	r3, [pc, #184]	; (8005490 <HAL_RCC_ClockConfig+0x270>)
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053de:	f7fe fb2f 	bl	8003a40 <HAL_GetTick>
 80053e2:	0003      	movs	r3, r0
 80053e4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e6:	e009      	b.n	80053fc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e8:	f7fe fb2a 	bl	8003a40 <HAL_GetTick>
 80053ec:	0002      	movs	r2, r0
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	4a28      	ldr	r2, [pc, #160]	; (8005494 <HAL_RCC_ClockConfig+0x274>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e044      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fc:	4b24      	ldr	r3, [pc, #144]	; (8005490 <HAL_RCC_ClockConfig+0x270>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	4013      	ands	r3, r2
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d1ee      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2204      	movs	r2, #4
 8005410:	4013      	ands	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005414:	4b20      	ldr	r3, [pc, #128]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4a20      	ldr	r2, [pc, #128]	; (800549c <HAL_RCC_ClockConfig+0x27c>)
 800541a:	4013      	ands	r3, r2
 800541c:	0019      	movs	r1, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 8005424:	430a      	orrs	r2, r1
 8005426:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2208      	movs	r2, #8
 800542e:	4013      	ands	r3, r2
 8005430:	d00a      	beq.n	8005448 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005432:	4b19      	ldr	r3, [pc, #100]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	4a1a      	ldr	r2, [pc, #104]	; (80054a0 <HAL_RCC_ClockConfig+0x280>)
 8005438:	4013      	ands	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	00da      	lsls	r2, r3, #3
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 8005444:	430a      	orrs	r2, r1
 8005446:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005448:	f000 f832 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 800544c:	0001      	movs	r1, r0
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_RCC_ClockConfig+0x278>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	091b      	lsrs	r3, r3, #4
 8005454:	220f      	movs	r2, #15
 8005456:	4013      	ands	r3, r2
 8005458:	4a12      	ldr	r2, [pc, #72]	; (80054a4 <HAL_RCC_ClockConfig+0x284>)
 800545a:	5cd3      	ldrb	r3, [r2, r3]
 800545c:	000a      	movs	r2, r1
 800545e:	40da      	lsrs	r2, r3
 8005460:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <HAL_RCC_ClockConfig+0x288>)
 8005462:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005464:	4b11      	ldr	r3, [pc, #68]	; (80054ac <HAL_RCC_ClockConfig+0x28c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	250b      	movs	r5, #11
 800546a:	197c      	adds	r4, r7, r5
 800546c:	0018      	movs	r0, r3
 800546e:	f7fe faa1 	bl	80039b4 <HAL_InitTick>
 8005472:	0003      	movs	r3, r0
 8005474:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005476:	197b      	adds	r3, r7, r5
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800547e:	197b      	adds	r3, r7, r5
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	e000      	b.n	8005486 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	b004      	add	sp, #16
 800548c:	bdb0      	pop	{r4, r5, r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	40022000 	.word	0x40022000
 8005494:	00001388 	.word	0x00001388
 8005498:	40021000 	.word	0x40021000
 800549c:	fffff8ff 	.word	0xfffff8ff
 80054a0:	ffffc7ff 	.word	0xffffc7ff
 80054a4:	08009664 	.word	0x08009664
 80054a8:	20000000 	.word	0x20000000
 80054ac:	20000004 	.word	0x20000004

080054b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054b0:	b5b0      	push	{r4, r5, r7, lr}
 80054b2:	b08e      	sub	sp, #56	; 0x38
 80054b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80054b6:	4b4c      	ldr	r3, [pc, #304]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054be:	230c      	movs	r3, #12
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d014      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0x40>
 80054c6:	d900      	bls.n	80054ca <HAL_RCC_GetSysClockFreq+0x1a>
 80054c8:	e07b      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x112>
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d002      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x24>
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d00b      	beq.n	80054ea <HAL_RCC_GetSysClockFreq+0x3a>
 80054d2:	e076      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80054d4:	4b44      	ldr	r3, [pc, #272]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2210      	movs	r2, #16
 80054da:	4013      	ands	r3, r2
 80054dc:	d002      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80054de:	4b43      	ldr	r3, [pc, #268]	; (80055ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80054e0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80054e2:	e07c      	b.n	80055de <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80054e4:	4b42      	ldr	r3, [pc, #264]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x140>)
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054e8:	e079      	b.n	80055de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054ea:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x144>)
 80054ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054ee:	e076      	b.n	80055de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	0c9a      	lsrs	r2, r3, #18
 80054f4:	230f      	movs	r3, #15
 80054f6:	401a      	ands	r2, r3
 80054f8:	4b3f      	ldr	r3, [pc, #252]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x148>)
 80054fa:	5c9b      	ldrb	r3, [r3, r2]
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	0d9a      	lsrs	r2, r3, #22
 8005502:	2303      	movs	r3, #3
 8005504:	4013      	ands	r3, r2
 8005506:	3301      	adds	r3, #1
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800550a:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	025b      	lsls	r3, r3, #9
 8005512:	4013      	ands	r3, r2
 8005514:	d01a      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
 800551e:	4a35      	ldr	r2, [pc, #212]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x144>)
 8005520:	2300      	movs	r3, #0
 8005522:	69b8      	ldr	r0, [r7, #24]
 8005524:	69f9      	ldr	r1, [r7, #28]
 8005526:	f7fa ffdf 	bl	80004e8 <__aeabi_lmul>
 800552a:	0002      	movs	r2, r0
 800552c:	000b      	movs	r3, r1
 800552e:	0010      	movs	r0, r2
 8005530:	0019      	movs	r1, r3
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f7fa ffb3 	bl	80004a8 <__aeabi_uldivmod>
 8005542:	0002      	movs	r2, r0
 8005544:	000b      	movs	r3, r1
 8005546:	0013      	movs	r3, r2
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
 800554a:	e037      	b.n	80055bc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800554c:	4b26      	ldr	r3, [pc, #152]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2210      	movs	r2, #16
 8005552:	4013      	ands	r3, r2
 8005554:	d01a      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	4a23      	ldr	r2, [pc, #140]	; (80055ec <HAL_RCC_GetSysClockFreq+0x13c>)
 8005560:	2300      	movs	r3, #0
 8005562:	68b8      	ldr	r0, [r7, #8]
 8005564:	68f9      	ldr	r1, [r7, #12]
 8005566:	f7fa ffbf 	bl	80004e8 <__aeabi_lmul>
 800556a:	0002      	movs	r2, r0
 800556c:	000b      	movs	r3, r1
 800556e:	0010      	movs	r0, r2
 8005570:	0019      	movs	r1, r3
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	603b      	str	r3, [r7, #0]
 8005576:	2300      	movs	r3, #0
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f7fa ff93 	bl	80004a8 <__aeabi_uldivmod>
 8005582:	0002      	movs	r2, r0
 8005584:	000b      	movs	r3, r1
 8005586:	0013      	movs	r3, r2
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
 800558a:	e017      	b.n	80055bc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	0018      	movs	r0, r3
 8005590:	2300      	movs	r3, #0
 8005592:	0019      	movs	r1, r3
 8005594:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x140>)
 8005596:	2300      	movs	r3, #0
 8005598:	f7fa ffa6 	bl	80004e8 <__aeabi_lmul>
 800559c:	0002      	movs	r2, r0
 800559e:	000b      	movs	r3, r1
 80055a0:	0010      	movs	r0, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	001c      	movs	r4, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	001d      	movs	r5, r3
 80055ac:	0022      	movs	r2, r4
 80055ae:	002b      	movs	r3, r5
 80055b0:	f7fa ff7a 	bl	80004a8 <__aeabi_uldivmod>
 80055b4:	0002      	movs	r2, r0
 80055b6:	000b      	movs	r3, r1
 80055b8:	0013      	movs	r3, r2
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80055bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80055c0:	e00d      	b.n	80055de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80055c2:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	0b5b      	lsrs	r3, r3, #13
 80055c8:	2207      	movs	r2, #7
 80055ca:	4013      	ands	r3, r2
 80055cc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	3301      	adds	r3, #1
 80055d2:	2280      	movs	r2, #128	; 0x80
 80055d4:	0212      	lsls	r2, r2, #8
 80055d6:	409a      	lsls	r2, r3
 80055d8:	0013      	movs	r3, r2
 80055da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80055dc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80055e0:	0018      	movs	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b00e      	add	sp, #56	; 0x38
 80055e6:	bdb0      	pop	{r4, r5, r7, pc}
 80055e8:	40021000 	.word	0x40021000
 80055ec:	003d0900 	.word	0x003d0900
 80055f0:	00f42400 	.word	0x00f42400
 80055f4:	007a1200 	.word	0x007a1200
 80055f8:	0800967c 	.word	0x0800967c

080055fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005600:	4b02      	ldr	r3, [pc, #8]	; (800560c <HAL_RCC_GetHCLKFreq+0x10>)
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	0018      	movs	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	20000000 	.word	0x20000000

08005610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005614:	f7ff fff2 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005618:	0001      	movs	r1, r0
 800561a:	4b06      	ldr	r3, [pc, #24]	; (8005634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	2207      	movs	r2, #7
 8005622:	4013      	ands	r3, r2
 8005624:	4a04      	ldr	r2, [pc, #16]	; (8005638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005626:	5cd3      	ldrb	r3, [r2, r3]
 8005628:	40d9      	lsrs	r1, r3
 800562a:	000b      	movs	r3, r1
}
 800562c:	0018      	movs	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	40021000 	.word	0x40021000
 8005638:	08009674 	.word	0x08009674

0800563c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005640:	f7ff ffdc 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005644:	0001      	movs	r1, r0
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	0adb      	lsrs	r3, r3, #11
 800564c:	2207      	movs	r2, #7
 800564e:	4013      	ands	r3, r2
 8005650:	4a04      	ldr	r2, [pc, #16]	; (8005664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	40d9      	lsrs	r1, r3
 8005656:	000b      	movs	r3, r1
}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	40021000 	.word	0x40021000
 8005664:	08009674 	.word	0x08009674

08005668 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005670:	2317      	movs	r3, #23
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2220      	movs	r2, #32
 800567e:	4013      	ands	r3, r2
 8005680:	d106      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	2380      	movs	r3, #128	; 0x80
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	4013      	ands	r3, r2
 800568c:	d100      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800568e:	e0d9      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005690:	4b9c      	ldr	r3, [pc, #624]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	055b      	lsls	r3, r3, #21
 8005698:	4013      	ands	r3, r2
 800569a:	d10a      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800569c:	4b99      	ldr	r3, [pc, #612]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800569e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a0:	4b98      	ldr	r3, [pc, #608]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80056a2:	2180      	movs	r1, #128	; 0x80
 80056a4:	0549      	lsls	r1, r1, #21
 80056a6:	430a      	orrs	r2, r1
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80056aa:	2317      	movs	r3, #23
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b2:	4b95      	ldr	r3, [pc, #596]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4013      	ands	r3, r2
 80056bc:	d11a      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056be:	4b92      	ldr	r3, [pc, #584]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b91      	ldr	r3, [pc, #580]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	0049      	lsls	r1, r1, #1
 80056c8:	430a      	orrs	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056cc:	f7fe f9b8 	bl	8003a40 <HAL_GetTick>
 80056d0:	0003      	movs	r3, r0
 80056d2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d4:	e008      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d6:	f7fe f9b3 	bl	8003a40 <HAL_GetTick>
 80056da:	0002      	movs	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b64      	cmp	r3, #100	; 0x64
 80056e2:	d901      	bls.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e108      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e8:	4b87      	ldr	r3, [pc, #540]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	4013      	ands	r3, r2
 80056f2:	d0f0      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80056f4:	4b83      	ldr	r3, [pc, #524]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	23c0      	movs	r3, #192	; 0xc0
 80056fa:	039b      	lsls	r3, r3, #14
 80056fc:	4013      	ands	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	23c0      	movs	r3, #192	; 0xc0
 8005706:	039b      	lsls	r3, r3, #14
 8005708:	4013      	ands	r3, r2
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	429a      	cmp	r2, r3
 800570e:	d107      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	23c0      	movs	r3, #192	; 0xc0
 8005716:	039b      	lsls	r3, r3, #14
 8005718:	4013      	ands	r3, r2
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	429a      	cmp	r2, r3
 800571e:	d013      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	23c0      	movs	r3, #192	; 0xc0
 8005726:	029b      	lsls	r3, r3, #10
 8005728:	401a      	ands	r2, r3
 800572a:	23c0      	movs	r3, #192	; 0xc0
 800572c:	029b      	lsls	r3, r3, #10
 800572e:	429a      	cmp	r2, r3
 8005730:	d10a      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005732:	4b74      	ldr	r3, [pc, #464]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	029b      	lsls	r3, r3, #10
 800573a:	401a      	ands	r2, r3
 800573c:	2380      	movs	r3, #128	; 0x80
 800573e:	029b      	lsls	r3, r3, #10
 8005740:	429a      	cmp	r2, r3
 8005742:	d101      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e0d8      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005748:	4b6e      	ldr	r3, [pc, #440]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800574a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800574c:	23c0      	movs	r3, #192	; 0xc0
 800574e:	029b      	lsls	r3, r3, #10
 8005750:	4013      	ands	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d049      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x186>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	23c0      	movs	r3, #192	; 0xc0
 8005760:	029b      	lsls	r3, r3, #10
 8005762:	4013      	ands	r3, r2
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	429a      	cmp	r2, r3
 8005768:	d004      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2220      	movs	r2, #32
 8005770:	4013      	ands	r3, r2
 8005772:	d10d      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	23c0      	movs	r3, #192	; 0xc0
 800577a:	029b      	lsls	r3, r3, #10
 800577c:	4013      	ands	r3, r2
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	429a      	cmp	r2, r3
 8005782:	d034      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	2380      	movs	r3, #128	; 0x80
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	4013      	ands	r3, r2
 800578e:	d02e      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005790:	4b5c      	ldr	r3, [pc, #368]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005794:	4a5d      	ldr	r2, [pc, #372]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005796:	4013      	ands	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800579a:	4b5a      	ldr	r3, [pc, #360]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800579c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800579e:	4b59      	ldr	r3, [pc, #356]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	0309      	lsls	r1, r1, #12
 80057a4:	430a      	orrs	r2, r1
 80057a6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057a8:	4b56      	ldr	r3, [pc, #344]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ac:	4b55      	ldr	r3, [pc, #340]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057ae:	4958      	ldr	r1, [pc, #352]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80057b0:	400a      	ands	r2, r1
 80057b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80057b4:	4b53      	ldr	r3, [pc, #332]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4013      	ands	r3, r2
 80057c2:	d014      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c4:	f7fe f93c 	bl	8003a40 <HAL_GetTick>
 80057c8:	0003      	movs	r3, r0
 80057ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057cc:	e009      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ce:	f7fe f937 	bl	8003a40 <HAL_GetTick>
 80057d2:	0002      	movs	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	4a4e      	ldr	r2, [pc, #312]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e08b      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057e2:	4b48      	ldr	r3, [pc, #288]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057e6:	2380      	movs	r3, #128	; 0x80
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4013      	ands	r3, r2
 80057ec:	d0ef      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	23c0      	movs	r3, #192	; 0xc0
 80057f4:	029b      	lsls	r3, r3, #10
 80057f6:	401a      	ands	r2, r3
 80057f8:	23c0      	movs	r3, #192	; 0xc0
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d10c      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005800:	4b40      	ldr	r3, [pc, #256]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a44      	ldr	r2, [pc, #272]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005806:	4013      	ands	r3, r2
 8005808:	0019      	movs	r1, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	23c0      	movs	r3, #192	; 0xc0
 8005810:	039b      	lsls	r3, r3, #14
 8005812:	401a      	ands	r2, r3
 8005814:	4b3b      	ldr	r3, [pc, #236]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005816:	430a      	orrs	r2, r1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	4b3a      	ldr	r3, [pc, #232]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800581c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	23c0      	movs	r3, #192	; 0xc0
 8005824:	029b      	lsls	r3, r3, #10
 8005826:	401a      	ands	r2, r3
 8005828:	4b36      	ldr	r3, [pc, #216]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800582a:	430a      	orrs	r2, r1
 800582c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800582e:	2317      	movs	r3, #23
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d105      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005838:	4b32      	ldr	r3, [pc, #200]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800583a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583c:	4b31      	ldr	r3, [pc, #196]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800583e:	4937      	ldr	r1, [pc, #220]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005840:	400a      	ands	r2, r1
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2201      	movs	r2, #1
 800584a:	4013      	ands	r3, r2
 800584c:	d009      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800584e:	4b2d      	ldr	r3, [pc, #180]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	2203      	movs	r2, #3
 8005854:	4393      	bics	r3, r2
 8005856:	0019      	movs	r1, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	4b29      	ldr	r3, [pc, #164]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800585e:	430a      	orrs	r2, r1
 8005860:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2202      	movs	r2, #2
 8005868:	4013      	ands	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800586c:	4b25      	ldr	r3, [pc, #148]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	220c      	movs	r2, #12
 8005872:	4393      	bics	r3, r2
 8005874:	0019      	movs	r1, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	4b22      	ldr	r3, [pc, #136]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800587c:	430a      	orrs	r2, r1
 800587e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2204      	movs	r2, #4
 8005886:	4013      	ands	r3, r2
 8005888:	d009      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800588a:	4b1e      	ldr	r3, [pc, #120]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800588c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588e:	4a24      	ldr	r2, [pc, #144]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005890:	4013      	ands	r3, r2
 8005892:	0019      	movs	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800589a:	430a      	orrs	r2, r1
 800589c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2208      	movs	r2, #8
 80058a4:	4013      	ands	r3, r2
 80058a6:	d009      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058a8:	4b16      	ldr	r3, [pc, #88]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80058aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ac:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	0019      	movs	r1, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	4b13      	ldr	r3, [pc, #76]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80058b8:	430a      	orrs	r2, r1
 80058ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2240      	movs	r2, #64	; 0x40
 80058c2:	4013      	ands	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058c6:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80058c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ca:	4a17      	ldr	r2, [pc, #92]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	0019      	movs	r1, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1a      	ldr	r2, [r3, #32]
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80058d6:	430a      	orrs	r2, r1
 80058d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	4013      	ands	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80058e4:	4b07      	ldr	r3, [pc, #28]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80058e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e8:	4a10      	ldr	r2, [pc, #64]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	0019      	movs	r1, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69da      	ldr	r2, [r3, #28]
 80058f2:	4b04      	ldr	r3, [pc, #16]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80058f4:	430a      	orrs	r2, r1
 80058f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	0018      	movs	r0, r3
 80058fc:	46bd      	mov	sp, r7
 80058fe:	b006      	add	sp, #24
 8005900:	bd80      	pop	{r7, pc}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	40021000 	.word	0x40021000
 8005908:	40007000 	.word	0x40007000
 800590c:	fffcffff 	.word	0xfffcffff
 8005910:	fff7ffff 	.word	0xfff7ffff
 8005914:	00001388 	.word	0x00001388
 8005918:	ffcfffff 	.word	0xffcfffff
 800591c:	efffffff 	.word	0xefffffff
 8005920:	fffff3ff 	.word	0xfffff3ff
 8005924:	ffffcfff 	.word	0xffffcfff
 8005928:	fbffffff 	.word	0xfbffffff
 800592c:	fff3ffff 	.word	0xfff3ffff

08005930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e032      	b.n	80059a8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2239      	movs	r2, #57	; 0x39
 8005946:	5c9b      	ldrb	r3, [r3, r2]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d107      	bne.n	800595e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2238      	movs	r2, #56	; 0x38
 8005952:	2100      	movs	r1, #0
 8005954:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	0018      	movs	r0, r3
 800595a:	f7fd fe5b 	bl	8003614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2239      	movs	r2, #57	; 0x39
 8005962:	2102      	movs	r1, #2
 8005964:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3304      	adds	r3, #4
 800596e:	0019      	movs	r1, r3
 8005970:	0010      	movs	r0, r2
 8005972:	f000 f979 	bl	8005c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	223e      	movs	r2, #62	; 0x3e
 800597a:	2101      	movs	r1, #1
 800597c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	223a      	movs	r2, #58	; 0x3a
 8005982:	2101      	movs	r1, #1
 8005984:	5499      	strb	r1, [r3, r2]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	223b      	movs	r2, #59	; 0x3b
 800598a:	2101      	movs	r1, #1
 800598c:	5499      	strb	r1, [r3, r2]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	223c      	movs	r2, #60	; 0x3c
 8005992:	2101      	movs	r1, #1
 8005994:	5499      	strb	r1, [r3, r2]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	223d      	movs	r2, #61	; 0x3d
 800599a:	2101      	movs	r1, #1
 800599c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2239      	movs	r2, #57	; 0x39
 80059a2:	2101      	movs	r1, #1
 80059a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b002      	add	sp, #8
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2239      	movs	r2, #57	; 0x39
 80059bc:	5c9b      	ldrb	r3, [r3, r2]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d001      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e036      	b.n	8005a36 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2239      	movs	r2, #57	; 0x39
 80059cc:	2102      	movs	r1, #2
 80059ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2101      	movs	r1, #1
 80059dc:	430a      	orrs	r2, r1
 80059de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	2380      	movs	r3, #128	; 0x80
 80059e6:	05db      	lsls	r3, r3, #23
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d009      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x50>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <HAL_TIM_Base_Start_IT+0x90>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x50>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <HAL_TIM_Base_Start_IT+0x94>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d111      	bne.n	8005a24 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2207      	movs	r2, #7
 8005a08:	4013      	ands	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d010      	beq.n	8005a34 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a22:	e007      	b.n	8005a34 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2101      	movs	r1, #1
 8005a30:	430a      	orrs	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	0018      	movs	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b004      	add	sp, #16
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	40010800 	.word	0x40010800
 8005a44:	40011400 	.word	0x40011400

08005a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2202      	movs	r2, #2
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d124      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2202      	movs	r2, #2
 8005a66:	4013      	ands	r3, r2
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d11d      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2203      	movs	r2, #3
 8005a72:	4252      	negs	r2, r2
 8005a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	2203      	movs	r2, #3
 8005a84:	4013      	ands	r3, r2
 8005a86:	d004      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 f8d4 	bl	8005c38 <HAL_TIM_IC_CaptureCallback>
 8005a90:	e007      	b.n	8005aa2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f000 f8c7 	bl	8005c28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f000 f8d3 	bl	8005c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2204      	movs	r2, #4
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d125      	bne.n	8005b02 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2204      	movs	r2, #4
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d11e      	bne.n	8005b02 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2205      	movs	r2, #5
 8005aca:	4252      	negs	r2, r2
 8005acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	23c0      	movs	r3, #192	; 0xc0
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d004      	beq.n	8005aec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f000 f8a7 	bl	8005c38 <HAL_TIM_IC_CaptureCallback>
 8005aea:	e007      	b.n	8005afc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f000 f89a 	bl	8005c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	0018      	movs	r0, r3
 8005af8:	f000 f8a6 	bl	8005c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d124      	bne.n	8005b5a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2208      	movs	r2, #8
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d11d      	bne.n	8005b5a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2209      	movs	r2, #9
 8005b24:	4252      	negs	r2, r2
 8005b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	2203      	movs	r2, #3
 8005b36:	4013      	ands	r3, r2
 8005b38:	d004      	beq.n	8005b44 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f000 f87b 	bl	8005c38 <HAL_TIM_IC_CaptureCallback>
 8005b42:	e007      	b.n	8005b54 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f000 f86e 	bl	8005c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f000 f87a 	bl	8005c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2210      	movs	r2, #16
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d125      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	2210      	movs	r2, #16
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d11e      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2211      	movs	r2, #17
 8005b7c:	4252      	negs	r2, r2
 8005b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2208      	movs	r2, #8
 8005b84:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	23c0      	movs	r3, #192	; 0xc0
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4013      	ands	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	0018      	movs	r0, r3
 8005b98:	f000 f84e 	bl	8005c38 <HAL_TIM_IC_CaptureCallback>
 8005b9c:	e007      	b.n	8005bae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f000 f841 	bl	8005c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f000 f84d 	bl	8005c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d10f      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d108      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	4252      	negs	r2, r2
 8005bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 f81b 	bl	8005c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2240      	movs	r2, #64	; 0x40
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b40      	cmp	r3, #64	; 0x40
 8005bee:	d10f      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	2240      	movs	r2, #64	; 0x40
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b40      	cmp	r3, #64	; 0x40
 8005bfc:	d108      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2241      	movs	r2, #65	; 0x41
 8005c04:	4252      	negs	r2, r2
 8005c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f000 f824 	bl	8005c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c10:	46c0      	nop			; (mov r8, r8)
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b002      	add	sp, #8
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c20:	46c0      	nop			; (mov r8, r8)
 8005c22:	46bd      	mov	sp, r7
 8005c24:	b002      	add	sp, #8
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b002      	add	sp, #8
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c40:	46c0      	nop			; (mov r8, r8)
 8005c42:	46bd      	mov	sp, r7
 8005c44:	b002      	add	sp, #8
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c50:	46c0      	nop			; (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b002      	add	sp, #8
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b002      	add	sp, #8
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	2380      	movs	r3, #128	; 0x80
 8005c7c:	05db      	lsls	r3, r3, #23
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d007      	beq.n	8005c92 <TIM_Base_SetConfig+0x2a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <TIM_Base_SetConfig+0x9c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_Base_SetConfig+0x2a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1e      	ldr	r2, [pc, #120]	; (8005d08 <TIM_Base_SetConfig+0xa0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d108      	bne.n	8005ca4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2270      	movs	r2, #112	; 0x70
 8005c96:	4393      	bics	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	05db      	lsls	r3, r3, #23
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d007      	beq.n	8005cbe <TIM_Base_SetConfig+0x56>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <TIM_Base_SetConfig+0x9c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_Base_SetConfig+0x56>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <TIM_Base_SetConfig+0xa0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d108      	bne.n	8005cd0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4a12      	ldr	r2, [pc, #72]	; (8005d0c <TIM_Base_SetConfig+0xa4>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	4393      	bics	r3, r2
 8005cd6:	001a      	movs	r2, r3
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	615a      	str	r2, [r3, #20]
}
 8005cfc:	46c0      	nop			; (mov r8, r8)
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	b004      	add	sp, #16
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40010800 	.word	0x40010800
 8005d08:	40011400 	.word	0x40011400
 8005d0c:	fffffcff 	.word	0xfffffcff

08005d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2238      	movs	r2, #56	; 0x38
 8005d1e:	5c9b      	ldrb	r3, [r3, r2]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e042      	b.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2238      	movs	r2, #56	; 0x38
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2239      	movs	r2, #57	; 0x39
 8005d34:	2102      	movs	r1, #2
 8005d36:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2270      	movs	r2, #112	; 0x70
 8005d4c:	4393      	bics	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	2380      	movs	r3, #128	; 0x80
 8005d68:	05db      	lsls	r3, r3, #23
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d009      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a11      	ldr	r2, [pc, #68]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a0f      	ldr	r2, [pc, #60]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d10c      	bne.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2280      	movs	r2, #128	; 0x80
 8005d86:	4393      	bics	r3, r2
 8005d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2239      	movs	r2, #57	; 0x39
 8005da0:	2101      	movs	r1, #1
 8005da2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2238      	movs	r2, #56	; 0x38
 8005da8:	2100      	movs	r1, #0
 8005daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	0018      	movs	r0, r3
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b004      	add	sp, #16
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	40010800 	.word	0x40010800
 8005dbc:	40011400 	.word	0x40011400

08005dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e044      	b.n	8005e5c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d107      	bne.n	8005dea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2274      	movs	r2, #116	; 0x74
 8005dde:	2100      	movs	r1, #0
 8005de0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7fd fc35 	bl	8003654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2224      	movs	r2, #36	; 0x24
 8005dee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	438a      	bics	r2, r1
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	0018      	movs	r0, r3
 8005e04:	f000 f8d8 	bl	8005fb8 <UART_SetConfig>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e024      	b.n	8005e5c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f000 fb6b 	bl	80064f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	490d      	ldr	r1, [pc, #52]	; (8005e64 <HAL_UART_Init+0xa4>)
 8005e2e:	400a      	ands	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	212a      	movs	r1, #42	; 0x2a
 8005e3e:	438a      	bics	r2, r1
 8005e40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	0018      	movs	r0, r3
 8005e56:	f000 fc03 	bl	8006660 <UART_CheckIdleState>
 8005e5a:	0003      	movs	r3, r0
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b002      	add	sp, #8
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	ffffb7ff 	.word	0xffffb7ff

08005e68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	1dbb      	adds	r3, r7, #6
 8005e76:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d000      	beq.n	8005e82 <HAL_UART_Transmit+0x1a>
 8005e80:	e095      	b.n	8005fae <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <HAL_UART_Transmit+0x28>
 8005e88:	1dbb      	adds	r3, r7, #6
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e08d      	b.n	8005fb0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	015b      	lsls	r3, r3, #5
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d109      	bne.n	8005eb4 <HAL_UART_Transmit+0x4c>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	4013      	ands	r3, r2
 8005eae:	d001      	beq.n	8005eb4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e07d      	b.n	8005fb0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2274      	movs	r2, #116	; 0x74
 8005eb8:	5c9b      	ldrb	r3, [r3, r2]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Transmit+0x5a>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e076      	b.n	8005fb0 <HAL_UART_Transmit+0x148>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2274      	movs	r2, #116	; 0x74
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2280      	movs	r2, #128	; 0x80
 8005ece:	2100      	movs	r1, #0
 8005ed0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2221      	movs	r2, #33	; 0x21
 8005ed6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ed8:	f7fd fdb2 	bl	8003a40 <HAL_GetTick>
 8005edc:	0003      	movs	r3, r0
 8005ede:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	1dba      	adds	r2, r7, #6
 8005ee4:	2150      	movs	r1, #80	; 0x50
 8005ee6:	8812      	ldrh	r2, [r2, #0]
 8005ee8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1dba      	adds	r2, r7, #6
 8005eee:	2152      	movs	r1, #82	; 0x52
 8005ef0:	8812      	ldrh	r2, [r2, #0]
 8005ef2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	015b      	lsls	r3, r3, #5
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d108      	bne.n	8005f12 <HAL_UART_Transmit+0xaa>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	61bb      	str	r3, [r7, #24]
 8005f10:	e003      	b.n	8005f1a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2274      	movs	r2, #116	; 0x74
 8005f1e:	2100      	movs	r1, #0
 8005f20:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005f22:	e02c      	b.n	8005f7e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	0013      	movs	r3, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2180      	movs	r1, #128	; 0x80
 8005f32:	f000 fbdd 	bl	80066f0 <UART_WaitOnFlagUntilTimeout>
 8005f36:	1e03      	subs	r3, r0, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e038      	b.n	8005fb0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10b      	bne.n	8005f5c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	001a      	movs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	05d2      	lsls	r2, r2, #23
 8005f50:	0dd2      	lsrs	r2, r2, #23
 8005f52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	3302      	adds	r3, #2
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	e007      	b.n	8005f6c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	781a      	ldrb	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2252      	movs	r2, #82	; 0x52
 8005f70:	5a9b      	ldrh	r3, [r3, r2]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b299      	uxth	r1, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2252      	movs	r2, #82	; 0x52
 8005f7c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2252      	movs	r2, #82	; 0x52
 8005f82:	5a9b      	ldrh	r3, [r3, r2]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1cc      	bne.n	8005f24 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	0013      	movs	r3, r2
 8005f94:	2200      	movs	r2, #0
 8005f96:	2140      	movs	r1, #64	; 0x40
 8005f98:	f000 fbaa 	bl	80066f0 <UART_WaitOnFlagUntilTimeout>
 8005f9c:	1e03      	subs	r3, r0, #0
 8005f9e:	d001      	beq.n	8005fa4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e005      	b.n	8005fb0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e000      	b.n	8005fb0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005fae:	2302      	movs	r3, #2
  }
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b008      	add	sp, #32
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb8:	b5b0      	push	{r4, r5, r7, lr}
 8005fba:	b08e      	sub	sp, #56	; 0x38
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fc0:	231a      	movs	r3, #26
 8005fc2:	2218      	movs	r2, #24
 8005fc4:	4694      	mov	ip, r2
 8005fc6:	44bc      	add	ip, r7
 8005fc8:	4463      	add	r3, ip
 8005fca:	2200      	movs	r2, #0
 8005fcc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4ac1      	ldr	r2, [pc, #772]	; (80062f4 <UART_SetConfig+0x33c>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	0019      	movs	r1, r3
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4abd      	ldr	r2, [pc, #756]	; (80062f8 <UART_SetConfig+0x340>)
 8006004:	4013      	ands	r3, r2
 8006006:	0019      	movs	r1, r3
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4ab7      	ldr	r2, [pc, #732]	; (80062fc <UART_SetConfig+0x344>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602a:	4313      	orrs	r3, r2
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	4ab2      	ldr	r2, [pc, #712]	; (8006300 <UART_SetConfig+0x348>)
 8006036:	4013      	ands	r3, r2
 8006038:	0019      	movs	r1, r3
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006040:	430a      	orrs	r2, r1
 8006042:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4aae      	ldr	r2, [pc, #696]	; (8006304 <UART_SetConfig+0x34c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d136      	bne.n	80060bc <UART_SetConfig+0x104>
 800604e:	4bae      	ldr	r3, [pc, #696]	; (8006308 <UART_SetConfig+0x350>)
 8006050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006052:	2203      	movs	r2, #3
 8006054:	4013      	ands	r3, r2
 8006056:	2b03      	cmp	r3, #3
 8006058:	d020      	beq.n	800609c <UART_SetConfig+0xe4>
 800605a:	d827      	bhi.n	80060ac <UART_SetConfig+0xf4>
 800605c:	2b02      	cmp	r3, #2
 800605e:	d00d      	beq.n	800607c <UART_SetConfig+0xc4>
 8006060:	d824      	bhi.n	80060ac <UART_SetConfig+0xf4>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <UART_SetConfig+0xb4>
 8006066:	2b01      	cmp	r3, #1
 8006068:	d010      	beq.n	800608c <UART_SetConfig+0xd4>
 800606a:	e01f      	b.n	80060ac <UART_SetConfig+0xf4>
 800606c:	231b      	movs	r3, #27
 800606e:	2218      	movs	r2, #24
 8006070:	4694      	mov	ip, r2
 8006072:	44bc      	add	ip, r7
 8006074:	4463      	add	r3, ip
 8006076:	2201      	movs	r2, #1
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e0ab      	b.n	80061d4 <UART_SetConfig+0x21c>
 800607c:	231b      	movs	r3, #27
 800607e:	2218      	movs	r2, #24
 8006080:	4694      	mov	ip, r2
 8006082:	44bc      	add	ip, r7
 8006084:	4463      	add	r3, ip
 8006086:	2202      	movs	r2, #2
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	e0a3      	b.n	80061d4 <UART_SetConfig+0x21c>
 800608c:	231b      	movs	r3, #27
 800608e:	2218      	movs	r2, #24
 8006090:	4694      	mov	ip, r2
 8006092:	44bc      	add	ip, r7
 8006094:	4463      	add	r3, ip
 8006096:	2204      	movs	r2, #4
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e09b      	b.n	80061d4 <UART_SetConfig+0x21c>
 800609c:	231b      	movs	r3, #27
 800609e:	2218      	movs	r2, #24
 80060a0:	4694      	mov	ip, r2
 80060a2:	44bc      	add	ip, r7
 80060a4:	4463      	add	r3, ip
 80060a6:	2208      	movs	r2, #8
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e093      	b.n	80061d4 <UART_SetConfig+0x21c>
 80060ac:	231b      	movs	r3, #27
 80060ae:	2218      	movs	r2, #24
 80060b0:	4694      	mov	ip, r2
 80060b2:	44bc      	add	ip, r7
 80060b4:	4463      	add	r3, ip
 80060b6:	2210      	movs	r2, #16
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	e08b      	b.n	80061d4 <UART_SetConfig+0x21c>
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a92      	ldr	r2, [pc, #584]	; (800630c <UART_SetConfig+0x354>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d136      	bne.n	8006134 <UART_SetConfig+0x17c>
 80060c6:	4b90      	ldr	r3, [pc, #576]	; (8006308 <UART_SetConfig+0x350>)
 80060c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ca:	220c      	movs	r2, #12
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b0c      	cmp	r3, #12
 80060d0:	d020      	beq.n	8006114 <UART_SetConfig+0x15c>
 80060d2:	d827      	bhi.n	8006124 <UART_SetConfig+0x16c>
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d00d      	beq.n	80060f4 <UART_SetConfig+0x13c>
 80060d8:	d824      	bhi.n	8006124 <UART_SetConfig+0x16c>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <UART_SetConfig+0x12c>
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d010      	beq.n	8006104 <UART_SetConfig+0x14c>
 80060e2:	e01f      	b.n	8006124 <UART_SetConfig+0x16c>
 80060e4:	231b      	movs	r3, #27
 80060e6:	2218      	movs	r2, #24
 80060e8:	4694      	mov	ip, r2
 80060ea:	44bc      	add	ip, r7
 80060ec:	4463      	add	r3, ip
 80060ee:	2200      	movs	r2, #0
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e06f      	b.n	80061d4 <UART_SetConfig+0x21c>
 80060f4:	231b      	movs	r3, #27
 80060f6:	2218      	movs	r2, #24
 80060f8:	4694      	mov	ip, r2
 80060fa:	44bc      	add	ip, r7
 80060fc:	4463      	add	r3, ip
 80060fe:	2202      	movs	r2, #2
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	e067      	b.n	80061d4 <UART_SetConfig+0x21c>
 8006104:	231b      	movs	r3, #27
 8006106:	2218      	movs	r2, #24
 8006108:	4694      	mov	ip, r2
 800610a:	44bc      	add	ip, r7
 800610c:	4463      	add	r3, ip
 800610e:	2204      	movs	r2, #4
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e05f      	b.n	80061d4 <UART_SetConfig+0x21c>
 8006114:	231b      	movs	r3, #27
 8006116:	2218      	movs	r2, #24
 8006118:	4694      	mov	ip, r2
 800611a:	44bc      	add	ip, r7
 800611c:	4463      	add	r3, ip
 800611e:	2208      	movs	r2, #8
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	e057      	b.n	80061d4 <UART_SetConfig+0x21c>
 8006124:	231b      	movs	r3, #27
 8006126:	2218      	movs	r2, #24
 8006128:	4694      	mov	ip, r2
 800612a:	44bc      	add	ip, r7
 800612c:	4463      	add	r3, ip
 800612e:	2210      	movs	r2, #16
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	e04f      	b.n	80061d4 <UART_SetConfig+0x21c>
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a70      	ldr	r2, [pc, #448]	; (80062fc <UART_SetConfig+0x344>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d143      	bne.n	80061c6 <UART_SetConfig+0x20e>
 800613e:	4b72      	ldr	r3, [pc, #456]	; (8006308 <UART_SetConfig+0x350>)
 8006140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006142:	23c0      	movs	r3, #192	; 0xc0
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	4013      	ands	r3, r2
 8006148:	22c0      	movs	r2, #192	; 0xc0
 800614a:	0112      	lsls	r2, r2, #4
 800614c:	4293      	cmp	r3, r2
 800614e:	d02a      	beq.n	80061a6 <UART_SetConfig+0x1ee>
 8006150:	22c0      	movs	r2, #192	; 0xc0
 8006152:	0112      	lsls	r2, r2, #4
 8006154:	4293      	cmp	r3, r2
 8006156:	d82e      	bhi.n	80061b6 <UART_SetConfig+0x1fe>
 8006158:	2280      	movs	r2, #128	; 0x80
 800615a:	0112      	lsls	r2, r2, #4
 800615c:	4293      	cmp	r3, r2
 800615e:	d012      	beq.n	8006186 <UART_SetConfig+0x1ce>
 8006160:	2280      	movs	r2, #128	; 0x80
 8006162:	0112      	lsls	r2, r2, #4
 8006164:	4293      	cmp	r3, r2
 8006166:	d826      	bhi.n	80061b6 <UART_SetConfig+0x1fe>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d004      	beq.n	8006176 <UART_SetConfig+0x1be>
 800616c:	2280      	movs	r2, #128	; 0x80
 800616e:	00d2      	lsls	r2, r2, #3
 8006170:	4293      	cmp	r3, r2
 8006172:	d010      	beq.n	8006196 <UART_SetConfig+0x1de>
 8006174:	e01f      	b.n	80061b6 <UART_SetConfig+0x1fe>
 8006176:	231b      	movs	r3, #27
 8006178:	2218      	movs	r2, #24
 800617a:	4694      	mov	ip, r2
 800617c:	44bc      	add	ip, r7
 800617e:	4463      	add	r3, ip
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	e026      	b.n	80061d4 <UART_SetConfig+0x21c>
 8006186:	231b      	movs	r3, #27
 8006188:	2218      	movs	r2, #24
 800618a:	4694      	mov	ip, r2
 800618c:	44bc      	add	ip, r7
 800618e:	4463      	add	r3, ip
 8006190:	2202      	movs	r2, #2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	e01e      	b.n	80061d4 <UART_SetConfig+0x21c>
 8006196:	231b      	movs	r3, #27
 8006198:	2218      	movs	r2, #24
 800619a:	4694      	mov	ip, r2
 800619c:	44bc      	add	ip, r7
 800619e:	4463      	add	r3, ip
 80061a0:	2204      	movs	r2, #4
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	e016      	b.n	80061d4 <UART_SetConfig+0x21c>
 80061a6:	231b      	movs	r3, #27
 80061a8:	2218      	movs	r2, #24
 80061aa:	4694      	mov	ip, r2
 80061ac:	44bc      	add	ip, r7
 80061ae:	4463      	add	r3, ip
 80061b0:	2208      	movs	r2, #8
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	e00e      	b.n	80061d4 <UART_SetConfig+0x21c>
 80061b6:	231b      	movs	r3, #27
 80061b8:	2218      	movs	r2, #24
 80061ba:	4694      	mov	ip, r2
 80061bc:	44bc      	add	ip, r7
 80061be:	4463      	add	r3, ip
 80061c0:	2210      	movs	r2, #16
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e006      	b.n	80061d4 <UART_SetConfig+0x21c>
 80061c6:	231b      	movs	r3, #27
 80061c8:	2218      	movs	r2, #24
 80061ca:	4694      	mov	ip, r2
 80061cc:	44bc      	add	ip, r7
 80061ce:	4463      	add	r3, ip
 80061d0:	2210      	movs	r2, #16
 80061d2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a48      	ldr	r2, [pc, #288]	; (80062fc <UART_SetConfig+0x344>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d000      	beq.n	80061e0 <UART_SetConfig+0x228>
 80061de:	e09b      	b.n	8006318 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061e0:	231b      	movs	r3, #27
 80061e2:	2218      	movs	r2, #24
 80061e4:	4694      	mov	ip, r2
 80061e6:	44bc      	add	ip, r7
 80061e8:	4463      	add	r3, ip
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d01d      	beq.n	800622c <UART_SetConfig+0x274>
 80061f0:	dc20      	bgt.n	8006234 <UART_SetConfig+0x27c>
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d015      	beq.n	8006222 <UART_SetConfig+0x26a>
 80061f6:	dc1d      	bgt.n	8006234 <UART_SetConfig+0x27c>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <UART_SetConfig+0x24a>
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d005      	beq.n	800620c <UART_SetConfig+0x254>
 8006200:	e018      	b.n	8006234 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006202:	f7ff fa05 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 8006206:	0003      	movs	r3, r0
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800620a:	e01d      	b.n	8006248 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800620c:	4b3e      	ldr	r3, [pc, #248]	; (8006308 <UART_SetConfig+0x350>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2210      	movs	r2, #16
 8006212:	4013      	ands	r3, r2
 8006214:	d002      	beq.n	800621c <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006216:	4b3e      	ldr	r3, [pc, #248]	; (8006310 <UART_SetConfig+0x358>)
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800621a:	e015      	b.n	8006248 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 800621c:	4b3d      	ldr	r3, [pc, #244]	; (8006314 <UART_SetConfig+0x35c>)
 800621e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006220:	e012      	b.n	8006248 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006222:	f7ff f945 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8006226:	0003      	movs	r3, r0
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800622a:	e00d      	b.n	8006248 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006232:	e009      	b.n	8006248 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006238:	231a      	movs	r3, #26
 800623a:	2218      	movs	r2, #24
 800623c:	4694      	mov	ip, r2
 800623e:	44bc      	add	ip, r7
 8006240:	4463      	add	r3, ip
 8006242:	2201      	movs	r2, #1
 8006244:	701a      	strb	r2, [r3, #0]
        break;
 8006246:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d100      	bne.n	8006250 <UART_SetConfig+0x298>
 800624e:	e139      	b.n	80064c4 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	0013      	movs	r3, r2
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	189b      	adds	r3, r3, r2
 800625a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800625c:	429a      	cmp	r2, r3
 800625e:	d305      	bcc.n	800626c <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006268:	429a      	cmp	r2, r3
 800626a:	d907      	bls.n	800627c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800626c:	231a      	movs	r3, #26
 800626e:	2218      	movs	r2, #24
 8006270:	4694      	mov	ip, r2
 8006272:	44bc      	add	ip, r7
 8006274:	4463      	add	r3, ip
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e123      	b.n	80064c4 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	2300      	movs	r3, #0
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	6939      	ldr	r1, [r7, #16]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	000b      	movs	r3, r1
 800628a:	0e1b      	lsrs	r3, r3, #24
 800628c:	0010      	movs	r0, r2
 800628e:	0205      	lsls	r5, r0, #8
 8006290:	431d      	orrs	r5, r3
 8006292:	000b      	movs	r3, r1
 8006294:	021c      	lsls	r4, r3, #8
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	68b8      	ldr	r0, [r7, #8]
 80062a4:	68f9      	ldr	r1, [r7, #12]
 80062a6:	1900      	adds	r0, r0, r4
 80062a8:	4169      	adcs	r1, r5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	2300      	movs	r3, #0
 80062b2:	607b      	str	r3, [r7, #4]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f7fa f8f6 	bl	80004a8 <__aeabi_uldivmod>
 80062bc:	0002      	movs	r2, r0
 80062be:	000b      	movs	r3, r1
 80062c0:	0013      	movs	r3, r2
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c6:	23c0      	movs	r3, #192	; 0xc0
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d309      	bcc.n	80062e2 <UART_SetConfig+0x32a>
 80062ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d0:	2380      	movs	r3, #128	; 0x80
 80062d2:	035b      	lsls	r3, r3, #13
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d204      	bcs.n	80062e2 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062de:	60da      	str	r2, [r3, #12]
 80062e0:	e0f0      	b.n	80064c4 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80062e2:	231a      	movs	r3, #26
 80062e4:	2218      	movs	r2, #24
 80062e6:	4694      	mov	ip, r2
 80062e8:	44bc      	add	ip, r7
 80062ea:	4463      	add	r3, ip
 80062ec:	2201      	movs	r2, #1
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	e0e8      	b.n	80064c4 <UART_SetConfig+0x50c>
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	efff69f3 	.word	0xefff69f3
 80062f8:	ffffcfff 	.word	0xffffcfff
 80062fc:	40004800 	.word	0x40004800
 8006300:	fffff4ff 	.word	0xfffff4ff
 8006304:	40013800 	.word	0x40013800
 8006308:	40021000 	.word	0x40021000
 800630c:	40004400 	.word	0x40004400
 8006310:	003d0900 	.word	0x003d0900
 8006314:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	429a      	cmp	r2, r3
 8006322:	d000      	beq.n	8006326 <UART_SetConfig+0x36e>
 8006324:	e074      	b.n	8006410 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006326:	231b      	movs	r3, #27
 8006328:	2218      	movs	r2, #24
 800632a:	4694      	mov	ip, r2
 800632c:	44bc      	add	ip, r7
 800632e:	4463      	add	r3, ip
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b08      	cmp	r3, #8
 8006334:	d822      	bhi.n	800637c <UART_SetConfig+0x3c4>
 8006336:	009a      	lsls	r2, r3, #2
 8006338:	4b6a      	ldr	r3, [pc, #424]	; (80064e4 <UART_SetConfig+0x52c>)
 800633a:	18d3      	adds	r3, r2, r3
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006340:	f7ff f966 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 8006344:	0003      	movs	r3, r0
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006348:	e022      	b.n	8006390 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800634a:	f7ff f977 	bl	800563c <HAL_RCC_GetPCLK2Freq>
 800634e:	0003      	movs	r3, r0
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006352:	e01d      	b.n	8006390 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006354:	4b64      	ldr	r3, [pc, #400]	; (80064e8 <UART_SetConfig+0x530>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2210      	movs	r2, #16
 800635a:	4013      	ands	r3, r2
 800635c:	d002      	beq.n	8006364 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800635e:	4b63      	ldr	r3, [pc, #396]	; (80064ec <UART_SetConfig+0x534>)
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006362:	e015      	b.n	8006390 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8006364:	4b62      	ldr	r3, [pc, #392]	; (80064f0 <UART_SetConfig+0x538>)
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006368:	e012      	b.n	8006390 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800636a:	f7ff f8a1 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 800636e:	0003      	movs	r3, r0
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006372:	e00d      	b.n	8006390 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800637a:	e009      	b.n	8006390 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006380:	231a      	movs	r3, #26
 8006382:	2218      	movs	r2, #24
 8006384:	4694      	mov	ip, r2
 8006386:	44bc      	add	ip, r7
 8006388:	4463      	add	r3, ip
 800638a:	2201      	movs	r2, #1
 800638c:	701a      	strb	r2, [r3, #0]
        break;
 800638e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d100      	bne.n	8006398 <UART_SetConfig+0x3e0>
 8006396:	e095      	b.n	80064c4 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	005a      	lsls	r2, r3, #1
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	18d2      	adds	r2, r2, r3
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	0019      	movs	r1, r3
 80063aa:	0010      	movs	r0, r2
 80063ac:	f7f9 fec8 	bl	8000140 <__udivsi3>
 80063b0:	0003      	movs	r3, r0
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2b0f      	cmp	r3, #15
 80063ba:	d921      	bls.n	8006400 <UART_SetConfig+0x448>
 80063bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063be:	2380      	movs	r3, #128	; 0x80
 80063c0:	025b      	lsls	r3, r3, #9
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d21c      	bcs.n	8006400 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	200e      	movs	r0, #14
 80063cc:	2418      	movs	r4, #24
 80063ce:	193b      	adds	r3, r7, r4
 80063d0:	181b      	adds	r3, r3, r0
 80063d2:	210f      	movs	r1, #15
 80063d4:	438a      	bics	r2, r1
 80063d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	085b      	lsrs	r3, r3, #1
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2207      	movs	r2, #7
 80063e0:	4013      	ands	r3, r2
 80063e2:	b299      	uxth	r1, r3
 80063e4:	193b      	adds	r3, r7, r4
 80063e6:	181b      	adds	r3, r3, r0
 80063e8:	193a      	adds	r2, r7, r4
 80063ea:	1812      	adds	r2, r2, r0
 80063ec:	8812      	ldrh	r2, [r2, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	193a      	adds	r2, r7, r4
 80063f8:	1812      	adds	r2, r2, r0
 80063fa:	8812      	ldrh	r2, [r2, #0]
 80063fc:	60da      	str	r2, [r3, #12]
 80063fe:	e061      	b.n	80064c4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006400:	231a      	movs	r3, #26
 8006402:	2218      	movs	r2, #24
 8006404:	4694      	mov	ip, r2
 8006406:	44bc      	add	ip, r7
 8006408:	4463      	add	r3, ip
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e059      	b.n	80064c4 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006410:	231b      	movs	r3, #27
 8006412:	2218      	movs	r2, #24
 8006414:	4694      	mov	ip, r2
 8006416:	44bc      	add	ip, r7
 8006418:	4463      	add	r3, ip
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b08      	cmp	r3, #8
 800641e:	d822      	bhi.n	8006466 <UART_SetConfig+0x4ae>
 8006420:	009a      	lsls	r2, r3, #2
 8006422:	4b34      	ldr	r3, [pc, #208]	; (80064f4 <UART_SetConfig+0x53c>)
 8006424:	18d3      	adds	r3, r2, r3
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800642a:	f7ff f8f1 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 800642e:	0003      	movs	r3, r0
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006432:	e022      	b.n	800647a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006434:	f7ff f902 	bl	800563c <HAL_RCC_GetPCLK2Freq>
 8006438:	0003      	movs	r3, r0
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800643c:	e01d      	b.n	800647a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800643e:	4b2a      	ldr	r3, [pc, #168]	; (80064e8 <UART_SetConfig+0x530>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2210      	movs	r2, #16
 8006444:	4013      	ands	r3, r2
 8006446:	d002      	beq.n	800644e <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006448:	4b28      	ldr	r3, [pc, #160]	; (80064ec <UART_SetConfig+0x534>)
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800644c:	e015      	b.n	800647a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800644e:	4b28      	ldr	r3, [pc, #160]	; (80064f0 <UART_SetConfig+0x538>)
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006452:	e012      	b.n	800647a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006454:	f7ff f82c 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8006458:	0003      	movs	r3, r0
 800645a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800645c:	e00d      	b.n	800647a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645e:	2380      	movs	r3, #128	; 0x80
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006464:	e009      	b.n	800647a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800646a:	231a      	movs	r3, #26
 800646c:	2218      	movs	r2, #24
 800646e:	4694      	mov	ip, r2
 8006470:	44bc      	add	ip, r7
 8006472:	4463      	add	r3, ip
 8006474:	2201      	movs	r2, #1
 8006476:	701a      	strb	r2, [r3, #0]
        break;
 8006478:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d021      	beq.n	80064c4 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	085a      	lsrs	r2, r3, #1
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	18d2      	adds	r2, r2, r3
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	0019      	movs	r1, r3
 8006490:	0010      	movs	r0, r2
 8006492:	f7f9 fe55 	bl	8000140 <__udivsi3>
 8006496:	0003      	movs	r3, r0
 8006498:	b29b      	uxth	r3, r3
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d909      	bls.n	80064b6 <UART_SetConfig+0x4fe>
 80064a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a4:	2380      	movs	r3, #128	; 0x80
 80064a6:	025b      	lsls	r3, r3, #9
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d204      	bcs.n	80064b6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b2:	60da      	str	r2, [r3, #12]
 80064b4:	e006      	b.n	80064c4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80064b6:	231a      	movs	r3, #26
 80064b8:	2218      	movs	r2, #24
 80064ba:	4694      	mov	ip, r2
 80064bc:	44bc      	add	ip, r7
 80064be:	4463      	add	r3, ip
 80064c0:	2201      	movs	r2, #1
 80064c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	2200      	movs	r2, #0
 80064c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	2200      	movs	r2, #0
 80064ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064d0:	231a      	movs	r3, #26
 80064d2:	2218      	movs	r2, #24
 80064d4:	4694      	mov	ip, r2
 80064d6:	44bc      	add	ip, r7
 80064d8:	4463      	add	r3, ip
 80064da:	781b      	ldrb	r3, [r3, #0]
}
 80064dc:	0018      	movs	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	b00e      	add	sp, #56	; 0x38
 80064e2:	bdb0      	pop	{r4, r5, r7, pc}
 80064e4:	08009688 	.word	0x08009688
 80064e8:	40021000 	.word	0x40021000
 80064ec:	003d0900 	.word	0x003d0900
 80064f0:	00f42400 	.word	0x00f42400
 80064f4:	080096ac 	.word	0x080096ac

080064f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	2201      	movs	r2, #1
 8006506:	4013      	ands	r3, r2
 8006508:	d00b      	beq.n	8006522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	4a4a      	ldr	r2, [pc, #296]	; (800663c <UART_AdvFeatureConfig+0x144>)
 8006512:	4013      	ands	r3, r2
 8006514:	0019      	movs	r1, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	2202      	movs	r2, #2
 8006528:	4013      	ands	r3, r2
 800652a:	d00b      	beq.n	8006544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4a43      	ldr	r2, [pc, #268]	; (8006640 <UART_AdvFeatureConfig+0x148>)
 8006534:	4013      	ands	r3, r2
 8006536:	0019      	movs	r1, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	2204      	movs	r2, #4
 800654a:	4013      	ands	r3, r2
 800654c:	d00b      	beq.n	8006566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4a3b      	ldr	r2, [pc, #236]	; (8006644 <UART_AdvFeatureConfig+0x14c>)
 8006556:	4013      	ands	r3, r2
 8006558:	0019      	movs	r1, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	2208      	movs	r2, #8
 800656c:	4013      	ands	r3, r2
 800656e:	d00b      	beq.n	8006588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4a34      	ldr	r2, [pc, #208]	; (8006648 <UART_AdvFeatureConfig+0x150>)
 8006578:	4013      	ands	r3, r2
 800657a:	0019      	movs	r1, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	2210      	movs	r2, #16
 800658e:	4013      	ands	r3, r2
 8006590:	d00b      	beq.n	80065aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	4a2c      	ldr	r2, [pc, #176]	; (800664c <UART_AdvFeatureConfig+0x154>)
 800659a:	4013      	ands	r3, r2
 800659c:	0019      	movs	r1, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	2220      	movs	r2, #32
 80065b0:	4013      	ands	r3, r2
 80065b2:	d00b      	beq.n	80065cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	4a25      	ldr	r2, [pc, #148]	; (8006650 <UART_AdvFeatureConfig+0x158>)
 80065bc:	4013      	ands	r3, r2
 80065be:	0019      	movs	r1, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2240      	movs	r2, #64	; 0x40
 80065d2:	4013      	ands	r3, r2
 80065d4:	d01d      	beq.n	8006612 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4a1d      	ldr	r2, [pc, #116]	; (8006654 <UART_AdvFeatureConfig+0x15c>)
 80065de:	4013      	ands	r3, r2
 80065e0:	0019      	movs	r1, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	035b      	lsls	r3, r3, #13
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d10b      	bne.n	8006612 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	4a15      	ldr	r2, [pc, #84]	; (8006658 <UART_AdvFeatureConfig+0x160>)
 8006602:	4013      	ands	r3, r2
 8006604:	0019      	movs	r1, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	2280      	movs	r2, #128	; 0x80
 8006618:	4013      	ands	r3, r2
 800661a:	d00b      	beq.n	8006634 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	4a0e      	ldr	r2, [pc, #56]	; (800665c <UART_AdvFeatureConfig+0x164>)
 8006624:	4013      	ands	r3, r2
 8006626:	0019      	movs	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  }
}
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	46bd      	mov	sp, r7
 8006638:	b002      	add	sp, #8
 800663a:	bd80      	pop	{r7, pc}
 800663c:	fffdffff 	.word	0xfffdffff
 8006640:	fffeffff 	.word	0xfffeffff
 8006644:	fffbffff 	.word	0xfffbffff
 8006648:	ffff7fff 	.word	0xffff7fff
 800664c:	ffffefff 	.word	0xffffefff
 8006650:	ffffdfff 	.word	0xffffdfff
 8006654:	ffefffff 	.word	0xffefffff
 8006658:	ff9fffff 	.word	0xff9fffff
 800665c:	fff7ffff 	.word	0xfff7ffff

08006660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af02      	add	r7, sp, #8
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2280      	movs	r2, #128	; 0x80
 800666c:	2100      	movs	r1, #0
 800666e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006670:	f7fd f9e6 	bl	8003a40 <HAL_GetTick>
 8006674:	0003      	movs	r3, r0
 8006676:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2208      	movs	r2, #8
 8006680:	4013      	ands	r3, r2
 8006682:	2b08      	cmp	r3, #8
 8006684:	d10c      	bne.n	80066a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2280      	movs	r2, #128	; 0x80
 800668a:	0391      	lsls	r1, r2, #14
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4a17      	ldr	r2, [pc, #92]	; (80066ec <UART_CheckIdleState+0x8c>)
 8006690:	9200      	str	r2, [sp, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	f000 f82c 	bl	80066f0 <UART_WaitOnFlagUntilTimeout>
 8006698:	1e03      	subs	r3, r0, #0
 800669a:	d001      	beq.n	80066a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e021      	b.n	80066e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2204      	movs	r2, #4
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d10c      	bne.n	80066c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2280      	movs	r2, #128	; 0x80
 80066b2:	03d1      	lsls	r1, r2, #15
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4a0d      	ldr	r2, [pc, #52]	; (80066ec <UART_CheckIdleState+0x8c>)
 80066b8:	9200      	str	r2, [sp, #0]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f000 f818 	bl	80066f0 <UART_WaitOnFlagUntilTimeout>
 80066c0:	1e03      	subs	r3, r0, #0
 80066c2:	d001      	beq.n	80066c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e00d      	b.n	80066e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2274      	movs	r2, #116	; 0x74
 80066de:	2100      	movs	r1, #0
 80066e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	0018      	movs	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b004      	add	sp, #16
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	01ffffff 	.word	0x01ffffff

080066f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	1dfb      	adds	r3, r7, #7
 80066fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006700:	e05e      	b.n	80067c0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	3301      	adds	r3, #1
 8006706:	d05b      	beq.n	80067c0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006708:	f7fd f99a 	bl	8003a40 <HAL_GetTick>
 800670c:	0002      	movs	r2, r0
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	429a      	cmp	r2, r3
 8006716:	d302      	bcc.n	800671e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d11b      	bne.n	8006756 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	492f      	ldr	r1, [pc, #188]	; (80067e8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800672a:	400a      	ands	r2, r1
 800672c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2101      	movs	r1, #1
 800673a:	438a      	bics	r2, r1
 800673c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2274      	movs	r2, #116	; 0x74
 800674e:	2100      	movs	r1, #0
 8006750:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e044      	b.n	80067e0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2204      	movs	r2, #4
 800675e:	4013      	ands	r3, r2
 8006760:	d02e      	beq.n	80067c0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69da      	ldr	r2, [r3, #28]
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	401a      	ands	r2, r3
 800676e:	2380      	movs	r3, #128	; 0x80
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	429a      	cmp	r2, r3
 8006774:	d124      	bne.n	80067c0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2280      	movs	r2, #128	; 0x80
 800677c:	0112      	lsls	r2, r2, #4
 800677e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4917      	ldr	r1, [pc, #92]	; (80067e8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800678c:	400a      	ands	r2, r1
 800678e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689a      	ldr	r2, [r3, #8]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2101      	movs	r1, #1
 800679c:	438a      	bics	r2, r1
 800679e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2280      	movs	r2, #128	; 0x80
 80067b0:	2120      	movs	r1, #32
 80067b2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2274      	movs	r2, #116	; 0x74
 80067b8:	2100      	movs	r1, #0
 80067ba:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e00f      	b.n	80067e0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	4013      	ands	r3, r2
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	425a      	negs	r2, r3
 80067d0:	4153      	adcs	r3, r2
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	001a      	movs	r2, r3
 80067d6:	1dfb      	adds	r3, r7, #7
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d091      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	0018      	movs	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b004      	add	sp, #16
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	fffffe5f 	.word	0xfffffe5f

080067ec <__errno>:
 80067ec:	4b01      	ldr	r3, [pc, #4]	; (80067f4 <__errno+0x8>)
 80067ee:	6818      	ldr	r0, [r3, #0]
 80067f0:	4770      	bx	lr
 80067f2:	46c0      	nop			; (mov r8, r8)
 80067f4:	2000000c 	.word	0x2000000c

080067f8 <__libc_init_array>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	2600      	movs	r6, #0
 80067fc:	4d0c      	ldr	r5, [pc, #48]	; (8006830 <__libc_init_array+0x38>)
 80067fe:	4c0d      	ldr	r4, [pc, #52]	; (8006834 <__libc_init_array+0x3c>)
 8006800:	1b64      	subs	r4, r4, r5
 8006802:	10a4      	asrs	r4, r4, #2
 8006804:	42a6      	cmp	r6, r4
 8006806:	d109      	bne.n	800681c <__libc_init_array+0x24>
 8006808:	2600      	movs	r6, #0
 800680a:	f002 fe3d 	bl	8009488 <_init>
 800680e:	4d0a      	ldr	r5, [pc, #40]	; (8006838 <__libc_init_array+0x40>)
 8006810:	4c0a      	ldr	r4, [pc, #40]	; (800683c <__libc_init_array+0x44>)
 8006812:	1b64      	subs	r4, r4, r5
 8006814:	10a4      	asrs	r4, r4, #2
 8006816:	42a6      	cmp	r6, r4
 8006818:	d105      	bne.n	8006826 <__libc_init_array+0x2e>
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	00b3      	lsls	r3, r6, #2
 800681e:	58eb      	ldr	r3, [r5, r3]
 8006820:	4798      	blx	r3
 8006822:	3601      	adds	r6, #1
 8006824:	e7ee      	b.n	8006804 <__libc_init_array+0xc>
 8006826:	00b3      	lsls	r3, r6, #2
 8006828:	58eb      	ldr	r3, [r5, r3]
 800682a:	4798      	blx	r3
 800682c:	3601      	adds	r6, #1
 800682e:	e7f2      	b.n	8006816 <__libc_init_array+0x1e>
 8006830:	08009abc 	.word	0x08009abc
 8006834:	08009abc 	.word	0x08009abc
 8006838:	08009abc 	.word	0x08009abc
 800683c:	08009ac0 	.word	0x08009ac0

08006840 <malloc>:
 8006840:	b510      	push	{r4, lr}
 8006842:	4b03      	ldr	r3, [pc, #12]	; (8006850 <malloc+0x10>)
 8006844:	0001      	movs	r1, r0
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	f000 f856 	bl	80068f8 <_malloc_r>
 800684c:	bd10      	pop	{r4, pc}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	2000000c 	.word	0x2000000c

08006854 <memset>:
 8006854:	0003      	movs	r3, r0
 8006856:	1882      	adds	r2, r0, r2
 8006858:	4293      	cmp	r3, r2
 800685a:	d100      	bne.n	800685e <memset+0xa>
 800685c:	4770      	bx	lr
 800685e:	7019      	strb	r1, [r3, #0]
 8006860:	3301      	adds	r3, #1
 8006862:	e7f9      	b.n	8006858 <memset+0x4>

08006864 <_free_r>:
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	0005      	movs	r5, r0
 8006868:	2900      	cmp	r1, #0
 800686a:	d010      	beq.n	800688e <_free_r+0x2a>
 800686c:	1f0c      	subs	r4, r1, #4
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	da00      	bge.n	8006876 <_free_r+0x12>
 8006874:	18e4      	adds	r4, r4, r3
 8006876:	0028      	movs	r0, r5
 8006878:	f001 ff8c 	bl	8008794 <__malloc_lock>
 800687c:	4a1d      	ldr	r2, [pc, #116]	; (80068f4 <_free_r+0x90>)
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <_free_r+0x2c>
 8006884:	6063      	str	r3, [r4, #4]
 8006886:	6014      	str	r4, [r2, #0]
 8006888:	0028      	movs	r0, r5
 800688a:	f001 ff8b 	bl	80087a4 <__malloc_unlock>
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	42a3      	cmp	r3, r4
 8006892:	d908      	bls.n	80068a6 <_free_r+0x42>
 8006894:	6821      	ldr	r1, [r4, #0]
 8006896:	1860      	adds	r0, r4, r1
 8006898:	4283      	cmp	r3, r0
 800689a:	d1f3      	bne.n	8006884 <_free_r+0x20>
 800689c:	6818      	ldr	r0, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	1841      	adds	r1, r0, r1
 80068a2:	6021      	str	r1, [r4, #0]
 80068a4:	e7ee      	b.n	8006884 <_free_r+0x20>
 80068a6:	001a      	movs	r2, r3
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <_free_r+0x4e>
 80068ae:	42a3      	cmp	r3, r4
 80068b0:	d9f9      	bls.n	80068a6 <_free_r+0x42>
 80068b2:	6811      	ldr	r1, [r2, #0]
 80068b4:	1850      	adds	r0, r2, r1
 80068b6:	42a0      	cmp	r0, r4
 80068b8:	d10b      	bne.n	80068d2 <_free_r+0x6e>
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	1809      	adds	r1, r1, r0
 80068be:	1850      	adds	r0, r2, r1
 80068c0:	6011      	str	r1, [r2, #0]
 80068c2:	4283      	cmp	r3, r0
 80068c4:	d1e0      	bne.n	8006888 <_free_r+0x24>
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	1841      	adds	r1, r0, r1
 80068cc:	6011      	str	r1, [r2, #0]
 80068ce:	6053      	str	r3, [r2, #4]
 80068d0:	e7da      	b.n	8006888 <_free_r+0x24>
 80068d2:	42a0      	cmp	r0, r4
 80068d4:	d902      	bls.n	80068dc <_free_r+0x78>
 80068d6:	230c      	movs	r3, #12
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	e7d5      	b.n	8006888 <_free_r+0x24>
 80068dc:	6821      	ldr	r1, [r4, #0]
 80068de:	1860      	adds	r0, r4, r1
 80068e0:	4283      	cmp	r3, r0
 80068e2:	d103      	bne.n	80068ec <_free_r+0x88>
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	1841      	adds	r1, r0, r1
 80068ea:	6021      	str	r1, [r4, #0]
 80068ec:	6063      	str	r3, [r4, #4]
 80068ee:	6054      	str	r4, [r2, #4]
 80068f0:	e7ca      	b.n	8006888 <_free_r+0x24>
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	200001fc 	.word	0x200001fc

080068f8 <_malloc_r>:
 80068f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fa:	2303      	movs	r3, #3
 80068fc:	1ccd      	adds	r5, r1, #3
 80068fe:	439d      	bics	r5, r3
 8006900:	3508      	adds	r5, #8
 8006902:	0006      	movs	r6, r0
 8006904:	2d0c      	cmp	r5, #12
 8006906:	d21f      	bcs.n	8006948 <_malloc_r+0x50>
 8006908:	250c      	movs	r5, #12
 800690a:	42a9      	cmp	r1, r5
 800690c:	d81e      	bhi.n	800694c <_malloc_r+0x54>
 800690e:	0030      	movs	r0, r6
 8006910:	f001 ff40 	bl	8008794 <__malloc_lock>
 8006914:	4925      	ldr	r1, [pc, #148]	; (80069ac <_malloc_r+0xb4>)
 8006916:	680a      	ldr	r2, [r1, #0]
 8006918:	0014      	movs	r4, r2
 800691a:	2c00      	cmp	r4, #0
 800691c:	d11a      	bne.n	8006954 <_malloc_r+0x5c>
 800691e:	4f24      	ldr	r7, [pc, #144]	; (80069b0 <_malloc_r+0xb8>)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <_malloc_r+0x38>
 8006926:	0021      	movs	r1, r4
 8006928:	0030      	movs	r0, r6
 800692a:	f000 fd53 	bl	80073d4 <_sbrk_r>
 800692e:	6038      	str	r0, [r7, #0]
 8006930:	0029      	movs	r1, r5
 8006932:	0030      	movs	r0, r6
 8006934:	f000 fd4e 	bl	80073d4 <_sbrk_r>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d12b      	bne.n	8006994 <_malloc_r+0x9c>
 800693c:	230c      	movs	r3, #12
 800693e:	0030      	movs	r0, r6
 8006940:	6033      	str	r3, [r6, #0]
 8006942:	f001 ff2f 	bl	80087a4 <__malloc_unlock>
 8006946:	e003      	b.n	8006950 <_malloc_r+0x58>
 8006948:	2d00      	cmp	r5, #0
 800694a:	dade      	bge.n	800690a <_malloc_r+0x12>
 800694c:	230c      	movs	r3, #12
 800694e:	6033      	str	r3, [r6, #0]
 8006950:	2000      	movs	r0, #0
 8006952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	1b5b      	subs	r3, r3, r5
 8006958:	d419      	bmi.n	800698e <_malloc_r+0x96>
 800695a:	2b0b      	cmp	r3, #11
 800695c:	d903      	bls.n	8006966 <_malloc_r+0x6e>
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	18e4      	adds	r4, r4, r3
 8006962:	6025      	str	r5, [r4, #0]
 8006964:	e003      	b.n	800696e <_malloc_r+0x76>
 8006966:	6863      	ldr	r3, [r4, #4]
 8006968:	42a2      	cmp	r2, r4
 800696a:	d10e      	bne.n	800698a <_malloc_r+0x92>
 800696c:	600b      	str	r3, [r1, #0]
 800696e:	0030      	movs	r0, r6
 8006970:	f001 ff18 	bl	80087a4 <__malloc_unlock>
 8006974:	0020      	movs	r0, r4
 8006976:	2207      	movs	r2, #7
 8006978:	300b      	adds	r0, #11
 800697a:	1d23      	adds	r3, r4, #4
 800697c:	4390      	bics	r0, r2
 800697e:	1ac2      	subs	r2, r0, r3
 8006980:	4298      	cmp	r0, r3
 8006982:	d0e6      	beq.n	8006952 <_malloc_r+0x5a>
 8006984:	1a1b      	subs	r3, r3, r0
 8006986:	50a3      	str	r3, [r4, r2]
 8006988:	e7e3      	b.n	8006952 <_malloc_r+0x5a>
 800698a:	6053      	str	r3, [r2, #4]
 800698c:	e7ef      	b.n	800696e <_malloc_r+0x76>
 800698e:	0022      	movs	r2, r4
 8006990:	6864      	ldr	r4, [r4, #4]
 8006992:	e7c2      	b.n	800691a <_malloc_r+0x22>
 8006994:	2303      	movs	r3, #3
 8006996:	1cc4      	adds	r4, r0, #3
 8006998:	439c      	bics	r4, r3
 800699a:	42a0      	cmp	r0, r4
 800699c:	d0e1      	beq.n	8006962 <_malloc_r+0x6a>
 800699e:	1a21      	subs	r1, r4, r0
 80069a0:	0030      	movs	r0, r6
 80069a2:	f000 fd17 	bl	80073d4 <_sbrk_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d1db      	bne.n	8006962 <_malloc_r+0x6a>
 80069aa:	e7c7      	b.n	800693c <_malloc_r+0x44>
 80069ac:	200001fc 	.word	0x200001fc
 80069b0:	20000200 	.word	0x20000200

080069b4 <__cvt>:
 80069b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069b6:	001e      	movs	r6, r3
 80069b8:	2300      	movs	r3, #0
 80069ba:	0014      	movs	r4, r2
 80069bc:	b08b      	sub	sp, #44	; 0x2c
 80069be:	429e      	cmp	r6, r3
 80069c0:	da04      	bge.n	80069cc <__cvt+0x18>
 80069c2:	2180      	movs	r1, #128	; 0x80
 80069c4:	0609      	lsls	r1, r1, #24
 80069c6:	1873      	adds	r3, r6, r1
 80069c8:	001e      	movs	r6, r3
 80069ca:	232d      	movs	r3, #45	; 0x2d
 80069cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069ce:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80069d0:	7013      	strb	r3, [r2, #0]
 80069d2:	2320      	movs	r3, #32
 80069d4:	2203      	movs	r2, #3
 80069d6:	439f      	bics	r7, r3
 80069d8:	2f46      	cmp	r7, #70	; 0x46
 80069da:	d007      	beq.n	80069ec <__cvt+0x38>
 80069dc:	003b      	movs	r3, r7
 80069de:	3b45      	subs	r3, #69	; 0x45
 80069e0:	4259      	negs	r1, r3
 80069e2:	414b      	adcs	r3, r1
 80069e4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80069e6:	3a01      	subs	r2, #1
 80069e8:	18cb      	adds	r3, r1, r3
 80069ea:	9310      	str	r3, [sp, #64]	; 0x40
 80069ec:	ab09      	add	r3, sp, #36	; 0x24
 80069ee:	9304      	str	r3, [sp, #16]
 80069f0:	ab08      	add	r3, sp, #32
 80069f2:	9303      	str	r3, [sp, #12]
 80069f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069f6:	9200      	str	r2, [sp, #0]
 80069f8:	9302      	str	r3, [sp, #8]
 80069fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069fc:	0022      	movs	r2, r4
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	0033      	movs	r3, r6
 8006a02:	f000 fe53 	bl	80076ac <_dtoa_r>
 8006a06:	0005      	movs	r5, r0
 8006a08:	2f47      	cmp	r7, #71	; 0x47
 8006a0a:	d102      	bne.n	8006a12 <__cvt+0x5e>
 8006a0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a0e:	07db      	lsls	r3, r3, #31
 8006a10:	d528      	bpl.n	8006a64 <__cvt+0xb0>
 8006a12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a14:	18eb      	adds	r3, r5, r3
 8006a16:	9307      	str	r3, [sp, #28]
 8006a18:	2f46      	cmp	r7, #70	; 0x46
 8006a1a:	d114      	bne.n	8006a46 <__cvt+0x92>
 8006a1c:	782b      	ldrb	r3, [r5, #0]
 8006a1e:	2b30      	cmp	r3, #48	; 0x30
 8006a20:	d10c      	bne.n	8006a3c <__cvt+0x88>
 8006a22:	2200      	movs	r2, #0
 8006a24:	2300      	movs	r3, #0
 8006a26:	0020      	movs	r0, r4
 8006a28:	0031      	movs	r1, r6
 8006a2a:	f7f9 fd0f 	bl	800044c <__aeabi_dcmpeq>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d104      	bne.n	8006a3c <__cvt+0x88>
 8006a32:	2301      	movs	r3, #1
 8006a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a3e:	9a07      	ldr	r2, [sp, #28]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	18d3      	adds	r3, r2, r3
 8006a44:	9307      	str	r3, [sp, #28]
 8006a46:	2200      	movs	r2, #0
 8006a48:	2300      	movs	r3, #0
 8006a4a:	0020      	movs	r0, r4
 8006a4c:	0031      	movs	r1, r6
 8006a4e:	f7f9 fcfd 	bl	800044c <__aeabi_dcmpeq>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d001      	beq.n	8006a5a <__cvt+0xa6>
 8006a56:	9b07      	ldr	r3, [sp, #28]
 8006a58:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5a:	2230      	movs	r2, #48	; 0x30
 8006a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5e:	9907      	ldr	r1, [sp, #28]
 8006a60:	428b      	cmp	r3, r1
 8006a62:	d306      	bcc.n	8006a72 <__cvt+0xbe>
 8006a64:	0028      	movs	r0, r5
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a6a:	1b5b      	subs	r3, r3, r5
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	b00b      	add	sp, #44	; 0x2c
 8006a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a72:	1c59      	adds	r1, r3, #1
 8006a74:	9109      	str	r1, [sp, #36]	; 0x24
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	e7f0      	b.n	8006a5c <__cvt+0xa8>

08006a7a <__exponent>:
 8006a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a7c:	1c83      	adds	r3, r0, #2
 8006a7e:	b087      	sub	sp, #28
 8006a80:	9303      	str	r3, [sp, #12]
 8006a82:	0005      	movs	r5, r0
 8006a84:	000c      	movs	r4, r1
 8006a86:	232b      	movs	r3, #43	; 0x2b
 8006a88:	7002      	strb	r2, [r0, #0]
 8006a8a:	2900      	cmp	r1, #0
 8006a8c:	da01      	bge.n	8006a92 <__exponent+0x18>
 8006a8e:	424c      	negs	r4, r1
 8006a90:	3302      	adds	r3, #2
 8006a92:	706b      	strb	r3, [r5, #1]
 8006a94:	2c09      	cmp	r4, #9
 8006a96:	dd31      	ble.n	8006afc <__exponent+0x82>
 8006a98:	270a      	movs	r7, #10
 8006a9a:	ab04      	add	r3, sp, #16
 8006a9c:	1dde      	adds	r6, r3, #7
 8006a9e:	0020      	movs	r0, r4
 8006aa0:	0039      	movs	r1, r7
 8006aa2:	9601      	str	r6, [sp, #4]
 8006aa4:	f7f9 fcbc 	bl	8000420 <__aeabi_idivmod>
 8006aa8:	3e01      	subs	r6, #1
 8006aaa:	3130      	adds	r1, #48	; 0x30
 8006aac:	0020      	movs	r0, r4
 8006aae:	7031      	strb	r1, [r6, #0]
 8006ab0:	0039      	movs	r1, r7
 8006ab2:	9402      	str	r4, [sp, #8]
 8006ab4:	f7f9 fbce 	bl	8000254 <__divsi3>
 8006ab8:	9b02      	ldr	r3, [sp, #8]
 8006aba:	0004      	movs	r4, r0
 8006abc:	2b63      	cmp	r3, #99	; 0x63
 8006abe:	dcee      	bgt.n	8006a9e <__exponent+0x24>
 8006ac0:	9b01      	ldr	r3, [sp, #4]
 8006ac2:	3430      	adds	r4, #48	; 0x30
 8006ac4:	1e9a      	subs	r2, r3, #2
 8006ac6:	0013      	movs	r3, r2
 8006ac8:	9903      	ldr	r1, [sp, #12]
 8006aca:	7014      	strb	r4, [r2, #0]
 8006acc:	a804      	add	r0, sp, #16
 8006ace:	3007      	adds	r0, #7
 8006ad0:	4298      	cmp	r0, r3
 8006ad2:	d80e      	bhi.n	8006af2 <__exponent+0x78>
 8006ad4:	ab04      	add	r3, sp, #16
 8006ad6:	3307      	adds	r3, #7
 8006ad8:	2000      	movs	r0, #0
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d804      	bhi.n	8006ae8 <__exponent+0x6e>
 8006ade:	ab04      	add	r3, sp, #16
 8006ae0:	3009      	adds	r0, #9
 8006ae2:	18c0      	adds	r0, r0, r3
 8006ae4:	9b01      	ldr	r3, [sp, #4]
 8006ae6:	1ac0      	subs	r0, r0, r3
 8006ae8:	9b03      	ldr	r3, [sp, #12]
 8006aea:	1818      	adds	r0, r3, r0
 8006aec:	1b40      	subs	r0, r0, r5
 8006aee:	b007      	add	sp, #28
 8006af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006af2:	7818      	ldrb	r0, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	7008      	strb	r0, [r1, #0]
 8006af8:	3101      	adds	r1, #1
 8006afa:	e7e7      	b.n	8006acc <__exponent+0x52>
 8006afc:	2330      	movs	r3, #48	; 0x30
 8006afe:	18e4      	adds	r4, r4, r3
 8006b00:	70ab      	strb	r3, [r5, #2]
 8006b02:	1d28      	adds	r0, r5, #4
 8006b04:	70ec      	strb	r4, [r5, #3]
 8006b06:	e7f1      	b.n	8006aec <__exponent+0x72>

08006b08 <_printf_float>:
 8006b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b0a:	b095      	sub	sp, #84	; 0x54
 8006b0c:	000c      	movs	r4, r1
 8006b0e:	9208      	str	r2, [sp, #32]
 8006b10:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006b12:	9309      	str	r3, [sp, #36]	; 0x24
 8006b14:	0007      	movs	r7, r0
 8006b16:	f001 fdb5 	bl	8008684 <_localeconv_r>
 8006b1a:	6803      	ldr	r3, [r0, #0]
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b20:	f7f9 faf2 	bl	8000108 <strlen>
 8006b24:	2300      	movs	r3, #0
 8006b26:	9312      	str	r3, [sp, #72]	; 0x48
 8006b28:	7e23      	ldrb	r3, [r4, #24]
 8006b2a:	2207      	movs	r2, #7
 8006b2c:	001e      	movs	r6, r3
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	900d      	str	r0, [sp, #52]	; 0x34
 8006b32:	930c      	str	r3, [sp, #48]	; 0x30
 8006b34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b36:	682b      	ldr	r3, [r5, #0]
 8006b38:	05c9      	lsls	r1, r1, #23
 8006b3a:	d547      	bpl.n	8006bcc <_printf_float+0xc4>
 8006b3c:	189b      	adds	r3, r3, r2
 8006b3e:	4393      	bics	r3, r2
 8006b40:	001a      	movs	r2, r3
 8006b42:	3208      	adds	r2, #8
 8006b44:	602a      	str	r2, [r5, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	64a2      	str	r2, [r4, #72]	; 0x48
 8006b4c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006b4e:	2201      	movs	r2, #1
 8006b50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006b52:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006b54:	930a      	str	r3, [sp, #40]	; 0x28
 8006b56:	006b      	lsls	r3, r5, #1
 8006b58:	085b      	lsrs	r3, r3, #1
 8006b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8006b5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b5e:	4ba8      	ldr	r3, [pc, #672]	; (8006e00 <_printf_float+0x2f8>)
 8006b60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006b62:	4252      	negs	r2, r2
 8006b64:	f7fb ff4a 	bl	80029fc <__aeabi_dcmpun>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d131      	bne.n	8006bd0 <_printf_float+0xc8>
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	4ba4      	ldr	r3, [pc, #656]	; (8006e00 <_printf_float+0x2f8>)
 8006b70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b72:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006b74:	4252      	negs	r2, r2
 8006b76:	f7f9 fc79 	bl	800046c <__aeabi_dcmple>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d128      	bne.n	8006bd0 <_printf_float+0xc8>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2300      	movs	r3, #0
 8006b82:	0029      	movs	r1, r5
 8006b84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b86:	f7f9 fc67 	bl	8000458 <__aeabi_dcmplt>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d003      	beq.n	8006b96 <_printf_float+0x8e>
 8006b8e:	0023      	movs	r3, r4
 8006b90:	222d      	movs	r2, #45	; 0x2d
 8006b92:	3343      	adds	r3, #67	; 0x43
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	4d9b      	ldr	r5, [pc, #620]	; (8006e04 <_printf_float+0x2fc>)
 8006b98:	2e47      	cmp	r6, #71	; 0x47
 8006b9a:	d900      	bls.n	8006b9e <_printf_float+0x96>
 8006b9c:	4d9a      	ldr	r5, [pc, #616]	; (8006e08 <_printf_float+0x300>)
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	439a      	bics	r2, r3
 8006ba8:	2300      	movs	r3, #0
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	930a      	str	r3, [sp, #40]	; 0x28
 8006bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb0:	0021      	movs	r1, r4
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	0038      	movs	r0, r7
 8006bb6:	9b08      	ldr	r3, [sp, #32]
 8006bb8:	aa13      	add	r2, sp, #76	; 0x4c
 8006bba:	f000 f9f3 	bl	8006fa4 <_printf_common>
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	d000      	beq.n	8006bc4 <_printf_float+0xbc>
 8006bc2:	e09e      	b.n	8006d02 <_printf_float+0x1fa>
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	4240      	negs	r0, r0
 8006bc8:	b015      	add	sp, #84	; 0x54
 8006bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bcc:	3307      	adds	r3, #7
 8006bce:	e7b6      	b.n	8006b3e <_printf_float+0x36>
 8006bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bd2:	002b      	movs	r3, r5
 8006bd4:	0010      	movs	r0, r2
 8006bd6:	0029      	movs	r1, r5
 8006bd8:	f7fb ff10 	bl	80029fc <__aeabi_dcmpun>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d00a      	beq.n	8006bf6 <_printf_float+0xee>
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	da03      	bge.n	8006bec <_printf_float+0xe4>
 8006be4:	0023      	movs	r3, r4
 8006be6:	222d      	movs	r2, #45	; 0x2d
 8006be8:	3343      	adds	r3, #67	; 0x43
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	4d87      	ldr	r5, [pc, #540]	; (8006e0c <_printf_float+0x304>)
 8006bee:	2e47      	cmp	r6, #71	; 0x47
 8006bf0:	d9d5      	bls.n	8006b9e <_printf_float+0x96>
 8006bf2:	4d87      	ldr	r5, [pc, #540]	; (8006e10 <_printf_float+0x308>)
 8006bf4:	e7d3      	b.n	8006b9e <_printf_float+0x96>
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	0031      	movs	r1, r6
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	4391      	bics	r1, r2
 8006bfe:	910e      	str	r1, [sp, #56]	; 0x38
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	d147      	bne.n	8006c94 <_printf_float+0x18c>
 8006c04:	3307      	adds	r3, #7
 8006c06:	6063      	str	r3, [r4, #4]
 8006c08:	2380      	movs	r3, #128	; 0x80
 8006c0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	2200      	movs	r2, #0
 8006c12:	9206      	str	r2, [sp, #24]
 8006c14:	aa12      	add	r2, sp, #72	; 0x48
 8006c16:	9205      	str	r2, [sp, #20]
 8006c18:	aa11      	add	r2, sp, #68	; 0x44
 8006c1a:	9203      	str	r2, [sp, #12]
 8006c1c:	2223      	movs	r2, #35	; 0x23
 8006c1e:	a908      	add	r1, sp, #32
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	9301      	str	r3, [sp, #4]
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	1852      	adds	r2, r2, r1
 8006c28:	9202      	str	r2, [sp, #8]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	0038      	movs	r0, r7
 8006c2e:	002b      	movs	r3, r5
 8006c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c32:	9604      	str	r6, [sp, #16]
 8006c34:	f7ff febe 	bl	80069b4 <__cvt>
 8006c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c3a:	0005      	movs	r5, r0
 8006c3c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c3e:	2b47      	cmp	r3, #71	; 0x47
 8006c40:	d108      	bne.n	8006c54 <_printf_float+0x14c>
 8006c42:	1ccb      	adds	r3, r1, #3
 8006c44:	db02      	blt.n	8006c4c <_printf_float+0x144>
 8006c46:	6863      	ldr	r3, [r4, #4]
 8006c48:	4299      	cmp	r1, r3
 8006c4a:	dd46      	ble.n	8006cda <_printf_float+0x1d2>
 8006c4c:	0033      	movs	r3, r6
 8006c4e:	3b02      	subs	r3, #2
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	001e      	movs	r6, r3
 8006c54:	2e65      	cmp	r6, #101	; 0x65
 8006c56:	d824      	bhi.n	8006ca2 <_printf_float+0x19a>
 8006c58:	0020      	movs	r0, r4
 8006c5a:	0032      	movs	r2, r6
 8006c5c:	3901      	subs	r1, #1
 8006c5e:	3050      	adds	r0, #80	; 0x50
 8006c60:	9111      	str	r1, [sp, #68]	; 0x44
 8006c62:	f7ff ff0a 	bl	8006a7a <__exponent>
 8006c66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c68:	900a      	str	r0, [sp, #40]	; 0x28
 8006c6a:	1813      	adds	r3, r2, r0
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	2a01      	cmp	r2, #1
 8006c70:	dc02      	bgt.n	8006c78 <_printf_float+0x170>
 8006c72:	6822      	ldr	r2, [r4, #0]
 8006c74:	07d2      	lsls	r2, r2, #31
 8006c76:	d501      	bpl.n	8006c7c <_printf_float+0x174>
 8006c78:	3301      	adds	r3, #1
 8006c7a:	6123      	str	r3, [r4, #16]
 8006c7c:	2323      	movs	r3, #35	; 0x23
 8006c7e:	aa08      	add	r2, sp, #32
 8006c80:	189b      	adds	r3, r3, r2
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d100      	bne.n	8006c8a <_printf_float+0x182>
 8006c88:	e791      	b.n	8006bae <_printf_float+0xa6>
 8006c8a:	0023      	movs	r3, r4
 8006c8c:	222d      	movs	r2, #45	; 0x2d
 8006c8e:	3343      	adds	r3, #67	; 0x43
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e78c      	b.n	8006bae <_printf_float+0xa6>
 8006c94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c96:	2a47      	cmp	r2, #71	; 0x47
 8006c98:	d1b6      	bne.n	8006c08 <_printf_float+0x100>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1b4      	bne.n	8006c08 <_printf_float+0x100>
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	e7b1      	b.n	8006c06 <_printf_float+0xfe>
 8006ca2:	2e66      	cmp	r6, #102	; 0x66
 8006ca4:	d11b      	bne.n	8006cde <_printf_float+0x1d6>
 8006ca6:	6863      	ldr	r3, [r4, #4]
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	dd0d      	ble.n	8006cc8 <_printf_float+0x1c0>
 8006cac:	6121      	str	r1, [r4, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <_printf_float+0x1b0>
 8006cb2:	6822      	ldr	r2, [r4, #0]
 8006cb4:	07d2      	lsls	r2, r2, #31
 8006cb6:	d502      	bpl.n	8006cbe <_printf_float+0x1b6>
 8006cb8:	3301      	adds	r3, #1
 8006cba:	1859      	adds	r1, r3, r1
 8006cbc:	6121      	str	r1, [r4, #16]
 8006cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cc0:	65a3      	str	r3, [r4, #88]	; 0x58
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8006cc6:	e7d9      	b.n	8006c7c <_printf_float+0x174>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d103      	bne.n	8006cd4 <_printf_float+0x1cc>
 8006ccc:	2201      	movs	r2, #1
 8006cce:	6821      	ldr	r1, [r4, #0]
 8006cd0:	4211      	tst	r1, r2
 8006cd2:	d000      	beq.n	8006cd6 <_printf_float+0x1ce>
 8006cd4:	1c9a      	adds	r2, r3, #2
 8006cd6:	6122      	str	r2, [r4, #16]
 8006cd8:	e7f1      	b.n	8006cbe <_printf_float+0x1b6>
 8006cda:	2367      	movs	r3, #103	; 0x67
 8006cdc:	001e      	movs	r6, r3
 8006cde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ce0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	db06      	blt.n	8006cf4 <_printf_float+0x1ec>
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	07d2      	lsls	r2, r2, #31
 8006cec:	d5e7      	bpl.n	8006cbe <_printf_float+0x1b6>
 8006cee:	3301      	adds	r3, #1
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	e7e4      	b.n	8006cbe <_printf_float+0x1b6>
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	dc01      	bgt.n	8006cfe <_printf_float+0x1f6>
 8006cfa:	1849      	adds	r1, r1, r1
 8006cfc:	1ac9      	subs	r1, r1, r3
 8006cfe:	1852      	adds	r2, r2, r1
 8006d00:	e7e9      	b.n	8006cd6 <_printf_float+0x1ce>
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	0553      	lsls	r3, r2, #21
 8006d06:	d408      	bmi.n	8006d1a <_printf_float+0x212>
 8006d08:	6923      	ldr	r3, [r4, #16]
 8006d0a:	002a      	movs	r2, r5
 8006d0c:	0038      	movs	r0, r7
 8006d0e:	9908      	ldr	r1, [sp, #32]
 8006d10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d12:	47a8      	blx	r5
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d129      	bne.n	8006d6c <_printf_float+0x264>
 8006d18:	e754      	b.n	8006bc4 <_printf_float+0xbc>
 8006d1a:	2e65      	cmp	r6, #101	; 0x65
 8006d1c:	d800      	bhi.n	8006d20 <_printf_float+0x218>
 8006d1e:	e0ec      	b.n	8006efa <_printf_float+0x3f2>
 8006d20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006d22:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006d24:	2200      	movs	r2, #0
 8006d26:	2300      	movs	r3, #0
 8006d28:	f7f9 fb90 	bl	800044c <__aeabi_dcmpeq>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d034      	beq.n	8006d9a <_printf_float+0x292>
 8006d30:	2301      	movs	r3, #1
 8006d32:	0038      	movs	r0, r7
 8006d34:	4a37      	ldr	r2, [pc, #220]	; (8006e14 <_printf_float+0x30c>)
 8006d36:	9908      	ldr	r1, [sp, #32]
 8006d38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d3a:	47a8      	blx	r5
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	d100      	bne.n	8006d42 <_printf_float+0x23a>
 8006d40:	e740      	b.n	8006bc4 <_printf_float+0xbc>
 8006d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d46:	4293      	cmp	r3, r2
 8006d48:	db02      	blt.n	8006d50 <_printf_float+0x248>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	07db      	lsls	r3, r3, #31
 8006d4e:	d50d      	bpl.n	8006d6c <_printf_float+0x264>
 8006d50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d52:	0038      	movs	r0, r7
 8006d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d58:	9908      	ldr	r1, [sp, #32]
 8006d5a:	47a8      	blx	r5
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	d100      	bne.n	8006d64 <_printf_float+0x25c>
 8006d62:	e72f      	b.n	8006bc4 <_printf_float+0xbc>
 8006d64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d66:	3b01      	subs	r3, #1
 8006d68:	42ab      	cmp	r3, r5
 8006d6a:	dc0a      	bgt.n	8006d82 <_printf_float+0x27a>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	079b      	lsls	r3, r3, #30
 8006d70:	d500      	bpl.n	8006d74 <_printf_float+0x26c>
 8006d72:	e114      	b.n	8006f9e <_printf_float+0x496>
 8006d74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d76:	68e0      	ldr	r0, [r4, #12]
 8006d78:	4298      	cmp	r0, r3
 8006d7a:	db00      	blt.n	8006d7e <_printf_float+0x276>
 8006d7c:	e724      	b.n	8006bc8 <_printf_float+0xc0>
 8006d7e:	0018      	movs	r0, r3
 8006d80:	e722      	b.n	8006bc8 <_printf_float+0xc0>
 8006d82:	0022      	movs	r2, r4
 8006d84:	2301      	movs	r3, #1
 8006d86:	0038      	movs	r0, r7
 8006d88:	9908      	ldr	r1, [sp, #32]
 8006d8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006d8c:	321a      	adds	r2, #26
 8006d8e:	47b0      	blx	r6
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d100      	bne.n	8006d96 <_printf_float+0x28e>
 8006d94:	e716      	b.n	8006bc4 <_printf_float+0xbc>
 8006d96:	3501      	adds	r5, #1
 8006d98:	e7e4      	b.n	8006d64 <_printf_float+0x25c>
 8006d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dc3b      	bgt.n	8006e18 <_printf_float+0x310>
 8006da0:	2301      	movs	r3, #1
 8006da2:	0038      	movs	r0, r7
 8006da4:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <_printf_float+0x30c>)
 8006da6:	9908      	ldr	r1, [sp, #32]
 8006da8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006daa:	47b0      	blx	r6
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d100      	bne.n	8006db2 <_printf_float+0x2aa>
 8006db0:	e708      	b.n	8006bc4 <_printf_float+0xbc>
 8006db2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006db4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006db6:	4313      	orrs	r3, r2
 8006db8:	d102      	bne.n	8006dc0 <_printf_float+0x2b8>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	07db      	lsls	r3, r3, #31
 8006dbe:	d5d5      	bpl.n	8006d6c <_printf_float+0x264>
 8006dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dc2:	0038      	movs	r0, r7
 8006dc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dc6:	9908      	ldr	r1, [sp, #32]
 8006dc8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006dca:	47b0      	blx	r6
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d100      	bne.n	8006dd2 <_printf_float+0x2ca>
 8006dd0:	e6f8      	b.n	8006bc4 <_printf_float+0xbc>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8006dd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dda:	425b      	negs	r3, r3
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	dc01      	bgt.n	8006de4 <_printf_float+0x2dc>
 8006de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006de2:	e792      	b.n	8006d0a <_printf_float+0x202>
 8006de4:	0022      	movs	r2, r4
 8006de6:	2301      	movs	r3, #1
 8006de8:	0038      	movs	r0, r7
 8006dea:	9908      	ldr	r1, [sp, #32]
 8006dec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006dee:	321a      	adds	r2, #26
 8006df0:	47b0      	blx	r6
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	d100      	bne.n	8006df8 <_printf_float+0x2f0>
 8006df6:	e6e5      	b.n	8006bc4 <_printf_float+0xbc>
 8006df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	e7ea      	b.n	8006dd4 <_printf_float+0x2cc>
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	7fefffff 	.word	0x7fefffff
 8006e04:	080096d4 	.word	0x080096d4
 8006e08:	080096d8 	.word	0x080096d8
 8006e0c:	080096dc 	.word	0x080096dc
 8006e10:	080096e0 	.word	0x080096e0
 8006e14:	080096e4 	.word	0x080096e4
 8006e18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e1c:	920a      	str	r2, [sp, #40]	; 0x28
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	dd00      	ble.n	8006e24 <_printf_float+0x31c>
 8006e22:	930a      	str	r3, [sp, #40]	; 0x28
 8006e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	dc3d      	bgt.n	8006ea6 <_printf_float+0x39e>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	930e      	str	r3, [sp, #56]	; 0x38
 8006e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e30:	43db      	mvns	r3, r3
 8006e32:	17db      	asrs	r3, r3, #31
 8006e34:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3e:	4013      	ands	r3, r2
 8006e40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e46:	4293      	cmp	r3, r2
 8006e48:	dc36      	bgt.n	8006eb8 <_printf_float+0x3b0>
 8006e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	db40      	blt.n	8006ed4 <_printf_float+0x3cc>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	07db      	lsls	r3, r3, #31
 8006e56:	d43d      	bmi.n	8006ed4 <_printf_float+0x3cc>
 8006e58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e5c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	1a52      	subs	r2, r2, r1
 8006e62:	920a      	str	r2, [sp, #40]	; 0x28
 8006e64:	429a      	cmp	r2, r3
 8006e66:	dd00      	ble.n	8006e6a <_printf_float+0x362>
 8006e68:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dc3a      	bgt.n	8006ee6 <_printf_float+0x3de>
 8006e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e72:	2500      	movs	r5, #0
 8006e74:	43db      	mvns	r3, r3
 8006e76:	17db      	asrs	r3, r3, #31
 8006e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006e7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e80:	1a9b      	subs	r3, r3, r2
 8006e82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e84:	400a      	ands	r2, r1
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	dc00      	bgt.n	8006e8e <_printf_float+0x386>
 8006e8c:	e76e      	b.n	8006d6c <_printf_float+0x264>
 8006e8e:	0022      	movs	r2, r4
 8006e90:	2301      	movs	r3, #1
 8006e92:	0038      	movs	r0, r7
 8006e94:	9908      	ldr	r1, [sp, #32]
 8006e96:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006e98:	321a      	adds	r2, #26
 8006e9a:	47b0      	blx	r6
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d100      	bne.n	8006ea2 <_printf_float+0x39a>
 8006ea0:	e690      	b.n	8006bc4 <_printf_float+0xbc>
 8006ea2:	3501      	adds	r5, #1
 8006ea4:	e7e9      	b.n	8006e7a <_printf_float+0x372>
 8006ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea8:	002a      	movs	r2, r5
 8006eaa:	0038      	movs	r0, r7
 8006eac:	9908      	ldr	r1, [sp, #32]
 8006eae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006eb0:	47b0      	blx	r6
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	d1b9      	bne.n	8006e2a <_printf_float+0x322>
 8006eb6:	e685      	b.n	8006bc4 <_printf_float+0xbc>
 8006eb8:	0022      	movs	r2, r4
 8006eba:	2301      	movs	r3, #1
 8006ebc:	0038      	movs	r0, r7
 8006ebe:	9908      	ldr	r1, [sp, #32]
 8006ec0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ec2:	321a      	adds	r2, #26
 8006ec4:	47b0      	blx	r6
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	d100      	bne.n	8006ecc <_printf_float+0x3c4>
 8006eca:	e67b      	b.n	8006bc4 <_printf_float+0xbc>
 8006ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ece:	3301      	adds	r3, #1
 8006ed0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ed2:	e7b0      	b.n	8006e36 <_printf_float+0x32e>
 8006ed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ed6:	0038      	movs	r0, r7
 8006ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eda:	9908      	ldr	r1, [sp, #32]
 8006edc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ede:	47b0      	blx	r6
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d1b9      	bne.n	8006e58 <_printf_float+0x350>
 8006ee4:	e66e      	b.n	8006bc4 <_printf_float+0xbc>
 8006ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ee8:	0038      	movs	r0, r7
 8006eea:	18ea      	adds	r2, r5, r3
 8006eec:	9908      	ldr	r1, [sp, #32]
 8006eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ef2:	47a8      	blx	r5
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d1bb      	bne.n	8006e70 <_printf_float+0x368>
 8006ef8:	e664      	b.n	8006bc4 <_printf_float+0xbc>
 8006efa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	dc02      	bgt.n	8006f06 <_printf_float+0x3fe>
 8006f00:	2301      	movs	r3, #1
 8006f02:	421a      	tst	r2, r3
 8006f04:	d038      	beq.n	8006f78 <_printf_float+0x470>
 8006f06:	2301      	movs	r3, #1
 8006f08:	002a      	movs	r2, r5
 8006f0a:	0038      	movs	r0, r7
 8006f0c:	9908      	ldr	r1, [sp, #32]
 8006f0e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f10:	47b0      	blx	r6
 8006f12:	1c43      	adds	r3, r0, #1
 8006f14:	d100      	bne.n	8006f18 <_printf_float+0x410>
 8006f16:	e655      	b.n	8006bc4 <_printf_float+0xbc>
 8006f18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f1a:	0038      	movs	r0, r7
 8006f1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f1e:	9908      	ldr	r1, [sp, #32]
 8006f20:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f22:	47b0      	blx	r6
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d100      	bne.n	8006f2a <_printf_float+0x422>
 8006f28:	e64c      	b.n	8006bc4 <_printf_float+0xbc>
 8006f2a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006f2c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2300      	movs	r3, #0
 8006f32:	f7f9 fa8b 	bl	800044c <__aeabi_dcmpeq>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d11c      	bne.n	8006f74 <_printf_float+0x46c>
 8006f3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f3c:	1c6a      	adds	r2, r5, #1
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	0038      	movs	r0, r7
 8006f42:	9908      	ldr	r1, [sp, #32]
 8006f44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f46:	47a8      	blx	r5
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d10f      	bne.n	8006f6c <_printf_float+0x464>
 8006f4c:	e63a      	b.n	8006bc4 <_printf_float+0xbc>
 8006f4e:	0022      	movs	r2, r4
 8006f50:	2301      	movs	r3, #1
 8006f52:	0038      	movs	r0, r7
 8006f54:	9908      	ldr	r1, [sp, #32]
 8006f56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f58:	321a      	adds	r2, #26
 8006f5a:	47b0      	blx	r6
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d100      	bne.n	8006f62 <_printf_float+0x45a>
 8006f60:	e630      	b.n	8006bc4 <_printf_float+0xbc>
 8006f62:	3501      	adds	r5, #1
 8006f64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f66:	3b01      	subs	r3, #1
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	dcf0      	bgt.n	8006f4e <_printf_float+0x446>
 8006f6c:	0022      	movs	r2, r4
 8006f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f70:	3250      	adds	r2, #80	; 0x50
 8006f72:	e6cb      	b.n	8006d0c <_printf_float+0x204>
 8006f74:	2500      	movs	r5, #0
 8006f76:	e7f5      	b.n	8006f64 <_printf_float+0x45c>
 8006f78:	002a      	movs	r2, r5
 8006f7a:	e7e1      	b.n	8006f40 <_printf_float+0x438>
 8006f7c:	0022      	movs	r2, r4
 8006f7e:	2301      	movs	r3, #1
 8006f80:	0038      	movs	r0, r7
 8006f82:	9908      	ldr	r1, [sp, #32]
 8006f84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f86:	3219      	adds	r2, #25
 8006f88:	47b0      	blx	r6
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	d100      	bne.n	8006f90 <_printf_float+0x488>
 8006f8e:	e619      	b.n	8006bc4 <_printf_float+0xbc>
 8006f90:	3501      	adds	r5, #1
 8006f92:	68e3      	ldr	r3, [r4, #12]
 8006f94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	dcef      	bgt.n	8006f7c <_printf_float+0x474>
 8006f9c:	e6ea      	b.n	8006d74 <_printf_float+0x26c>
 8006f9e:	2500      	movs	r5, #0
 8006fa0:	e7f7      	b.n	8006f92 <_printf_float+0x48a>
 8006fa2:	46c0      	nop			; (mov r8, r8)

08006fa4 <_printf_common>:
 8006fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fa6:	0015      	movs	r5, r2
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	688a      	ldr	r2, [r1, #8]
 8006fac:	690b      	ldr	r3, [r1, #16]
 8006fae:	000c      	movs	r4, r1
 8006fb0:	9000      	str	r0, [sp, #0]
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	da00      	bge.n	8006fb8 <_printf_common+0x14>
 8006fb6:	0013      	movs	r3, r2
 8006fb8:	0022      	movs	r2, r4
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	3243      	adds	r2, #67	; 0x43
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	2a00      	cmp	r2, #0
 8006fc2:	d001      	beq.n	8006fc8 <_printf_common+0x24>
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	069b      	lsls	r3, r3, #26
 8006fcc:	d502      	bpl.n	8006fd4 <_printf_common+0x30>
 8006fce:	682b      	ldr	r3, [r5, #0]
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	2306      	movs	r3, #6
 8006fd8:	0017      	movs	r7, r2
 8006fda:	401f      	ands	r7, r3
 8006fdc:	421a      	tst	r2, r3
 8006fde:	d027      	beq.n	8007030 <_printf_common+0x8c>
 8006fe0:	0023      	movs	r3, r4
 8006fe2:	3343      	adds	r3, #67	; 0x43
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	1e5a      	subs	r2, r3, #1
 8006fe8:	4193      	sbcs	r3, r2
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	0692      	lsls	r2, r2, #26
 8006fee:	d430      	bmi.n	8007052 <_printf_common+0xae>
 8006ff0:	0022      	movs	r2, r4
 8006ff2:	9901      	ldr	r1, [sp, #4]
 8006ff4:	9800      	ldr	r0, [sp, #0]
 8006ff6:	9e08      	ldr	r6, [sp, #32]
 8006ff8:	3243      	adds	r2, #67	; 0x43
 8006ffa:	47b0      	blx	r6
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d025      	beq.n	800704c <_printf_common+0xa8>
 8007000:	2306      	movs	r3, #6
 8007002:	6820      	ldr	r0, [r4, #0]
 8007004:	682a      	ldr	r2, [r5, #0]
 8007006:	68e1      	ldr	r1, [r4, #12]
 8007008:	2500      	movs	r5, #0
 800700a:	4003      	ands	r3, r0
 800700c:	2b04      	cmp	r3, #4
 800700e:	d103      	bne.n	8007018 <_printf_common+0x74>
 8007010:	1a8d      	subs	r5, r1, r2
 8007012:	43eb      	mvns	r3, r5
 8007014:	17db      	asrs	r3, r3, #31
 8007016:	401d      	ands	r5, r3
 8007018:	68a3      	ldr	r3, [r4, #8]
 800701a:	6922      	ldr	r2, [r4, #16]
 800701c:	4293      	cmp	r3, r2
 800701e:	dd01      	ble.n	8007024 <_printf_common+0x80>
 8007020:	1a9b      	subs	r3, r3, r2
 8007022:	18ed      	adds	r5, r5, r3
 8007024:	2700      	movs	r7, #0
 8007026:	42bd      	cmp	r5, r7
 8007028:	d120      	bne.n	800706c <_printf_common+0xc8>
 800702a:	2000      	movs	r0, #0
 800702c:	e010      	b.n	8007050 <_printf_common+0xac>
 800702e:	3701      	adds	r7, #1
 8007030:	68e3      	ldr	r3, [r4, #12]
 8007032:	682a      	ldr	r2, [r5, #0]
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	42bb      	cmp	r3, r7
 8007038:	ddd2      	ble.n	8006fe0 <_printf_common+0x3c>
 800703a:	0022      	movs	r2, r4
 800703c:	2301      	movs	r3, #1
 800703e:	9901      	ldr	r1, [sp, #4]
 8007040:	9800      	ldr	r0, [sp, #0]
 8007042:	9e08      	ldr	r6, [sp, #32]
 8007044:	3219      	adds	r2, #25
 8007046:	47b0      	blx	r6
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d1f0      	bne.n	800702e <_printf_common+0x8a>
 800704c:	2001      	movs	r0, #1
 800704e:	4240      	negs	r0, r0
 8007050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007052:	2030      	movs	r0, #48	; 0x30
 8007054:	18e1      	adds	r1, r4, r3
 8007056:	3143      	adds	r1, #67	; 0x43
 8007058:	7008      	strb	r0, [r1, #0]
 800705a:	0021      	movs	r1, r4
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	3145      	adds	r1, #69	; 0x45
 8007060:	7809      	ldrb	r1, [r1, #0]
 8007062:	18a2      	adds	r2, r4, r2
 8007064:	3243      	adds	r2, #67	; 0x43
 8007066:	3302      	adds	r3, #2
 8007068:	7011      	strb	r1, [r2, #0]
 800706a:	e7c1      	b.n	8006ff0 <_printf_common+0x4c>
 800706c:	0022      	movs	r2, r4
 800706e:	2301      	movs	r3, #1
 8007070:	9901      	ldr	r1, [sp, #4]
 8007072:	9800      	ldr	r0, [sp, #0]
 8007074:	9e08      	ldr	r6, [sp, #32]
 8007076:	321a      	adds	r2, #26
 8007078:	47b0      	blx	r6
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	d0e6      	beq.n	800704c <_printf_common+0xa8>
 800707e:	3701      	adds	r7, #1
 8007080:	e7d1      	b.n	8007026 <_printf_common+0x82>
	...

08007084 <_printf_i>:
 8007084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007086:	b08b      	sub	sp, #44	; 0x2c
 8007088:	9206      	str	r2, [sp, #24]
 800708a:	000a      	movs	r2, r1
 800708c:	3243      	adds	r2, #67	; 0x43
 800708e:	9307      	str	r3, [sp, #28]
 8007090:	9005      	str	r0, [sp, #20]
 8007092:	9204      	str	r2, [sp, #16]
 8007094:	7e0a      	ldrb	r2, [r1, #24]
 8007096:	000c      	movs	r4, r1
 8007098:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800709a:	2a78      	cmp	r2, #120	; 0x78
 800709c:	d806      	bhi.n	80070ac <_printf_i+0x28>
 800709e:	2a62      	cmp	r2, #98	; 0x62
 80070a0:	d808      	bhi.n	80070b4 <_printf_i+0x30>
 80070a2:	2a00      	cmp	r2, #0
 80070a4:	d100      	bne.n	80070a8 <_printf_i+0x24>
 80070a6:	e0c0      	b.n	800722a <_printf_i+0x1a6>
 80070a8:	2a58      	cmp	r2, #88	; 0x58
 80070aa:	d052      	beq.n	8007152 <_printf_i+0xce>
 80070ac:	0026      	movs	r6, r4
 80070ae:	3642      	adds	r6, #66	; 0x42
 80070b0:	7032      	strb	r2, [r6, #0]
 80070b2:	e022      	b.n	80070fa <_printf_i+0x76>
 80070b4:	0010      	movs	r0, r2
 80070b6:	3863      	subs	r0, #99	; 0x63
 80070b8:	2815      	cmp	r0, #21
 80070ba:	d8f7      	bhi.n	80070ac <_printf_i+0x28>
 80070bc:	f7f9 f836 	bl	800012c <__gnu_thumb1_case_shi>
 80070c0:	001f0016 	.word	0x001f0016
 80070c4:	fff6fff6 	.word	0xfff6fff6
 80070c8:	fff6fff6 	.word	0xfff6fff6
 80070cc:	fff6001f 	.word	0xfff6001f
 80070d0:	fff6fff6 	.word	0xfff6fff6
 80070d4:	00a8fff6 	.word	0x00a8fff6
 80070d8:	009a0036 	.word	0x009a0036
 80070dc:	fff6fff6 	.word	0xfff6fff6
 80070e0:	fff600b9 	.word	0xfff600b9
 80070e4:	fff60036 	.word	0xfff60036
 80070e8:	009efff6 	.word	0x009efff6
 80070ec:	0026      	movs	r6, r4
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	3642      	adds	r6, #66	; 0x42
 80070f2:	1d11      	adds	r1, r2, #4
 80070f4:	6019      	str	r1, [r3, #0]
 80070f6:	6813      	ldr	r3, [r2, #0]
 80070f8:	7033      	strb	r3, [r6, #0]
 80070fa:	2301      	movs	r3, #1
 80070fc:	e0a7      	b.n	800724e <_printf_i+0x1ca>
 80070fe:	6808      	ldr	r0, [r1, #0]
 8007100:	6819      	ldr	r1, [r3, #0]
 8007102:	1d0a      	adds	r2, r1, #4
 8007104:	0605      	lsls	r5, r0, #24
 8007106:	d50b      	bpl.n	8007120 <_printf_i+0x9c>
 8007108:	680d      	ldr	r5, [r1, #0]
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	2d00      	cmp	r5, #0
 800710e:	da03      	bge.n	8007118 <_printf_i+0x94>
 8007110:	232d      	movs	r3, #45	; 0x2d
 8007112:	9a04      	ldr	r2, [sp, #16]
 8007114:	426d      	negs	r5, r5
 8007116:	7013      	strb	r3, [r2, #0]
 8007118:	4b61      	ldr	r3, [pc, #388]	; (80072a0 <_printf_i+0x21c>)
 800711a:	270a      	movs	r7, #10
 800711c:	9303      	str	r3, [sp, #12]
 800711e:	e032      	b.n	8007186 <_printf_i+0x102>
 8007120:	680d      	ldr	r5, [r1, #0]
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	0641      	lsls	r1, r0, #25
 8007126:	d5f1      	bpl.n	800710c <_printf_i+0x88>
 8007128:	b22d      	sxth	r5, r5
 800712a:	e7ef      	b.n	800710c <_printf_i+0x88>
 800712c:	680d      	ldr	r5, [r1, #0]
 800712e:	6819      	ldr	r1, [r3, #0]
 8007130:	1d08      	adds	r0, r1, #4
 8007132:	6018      	str	r0, [r3, #0]
 8007134:	062e      	lsls	r6, r5, #24
 8007136:	d501      	bpl.n	800713c <_printf_i+0xb8>
 8007138:	680d      	ldr	r5, [r1, #0]
 800713a:	e003      	b.n	8007144 <_printf_i+0xc0>
 800713c:	066d      	lsls	r5, r5, #25
 800713e:	d5fb      	bpl.n	8007138 <_printf_i+0xb4>
 8007140:	680d      	ldr	r5, [r1, #0]
 8007142:	b2ad      	uxth	r5, r5
 8007144:	4b56      	ldr	r3, [pc, #344]	; (80072a0 <_printf_i+0x21c>)
 8007146:	270a      	movs	r7, #10
 8007148:	9303      	str	r3, [sp, #12]
 800714a:	2a6f      	cmp	r2, #111	; 0x6f
 800714c:	d117      	bne.n	800717e <_printf_i+0xfa>
 800714e:	2708      	movs	r7, #8
 8007150:	e015      	b.n	800717e <_printf_i+0xfa>
 8007152:	3145      	adds	r1, #69	; 0x45
 8007154:	700a      	strb	r2, [r1, #0]
 8007156:	4a52      	ldr	r2, [pc, #328]	; (80072a0 <_printf_i+0x21c>)
 8007158:	9203      	str	r2, [sp, #12]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	6821      	ldr	r1, [r4, #0]
 800715e:	ca20      	ldmia	r2!, {r5}
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	0608      	lsls	r0, r1, #24
 8007164:	d550      	bpl.n	8007208 <_printf_i+0x184>
 8007166:	07cb      	lsls	r3, r1, #31
 8007168:	d502      	bpl.n	8007170 <_printf_i+0xec>
 800716a:	2320      	movs	r3, #32
 800716c:	4319      	orrs	r1, r3
 800716e:	6021      	str	r1, [r4, #0]
 8007170:	2710      	movs	r7, #16
 8007172:	2d00      	cmp	r5, #0
 8007174:	d103      	bne.n	800717e <_printf_i+0xfa>
 8007176:	2320      	movs	r3, #32
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	439a      	bics	r2, r3
 800717c:	6022      	str	r2, [r4, #0]
 800717e:	0023      	movs	r3, r4
 8007180:	2200      	movs	r2, #0
 8007182:	3343      	adds	r3, #67	; 0x43
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	6863      	ldr	r3, [r4, #4]
 8007188:	60a3      	str	r3, [r4, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	db03      	blt.n	8007196 <_printf_i+0x112>
 800718e:	2204      	movs	r2, #4
 8007190:	6821      	ldr	r1, [r4, #0]
 8007192:	4391      	bics	r1, r2
 8007194:	6021      	str	r1, [r4, #0]
 8007196:	2d00      	cmp	r5, #0
 8007198:	d102      	bne.n	80071a0 <_printf_i+0x11c>
 800719a:	9e04      	ldr	r6, [sp, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00c      	beq.n	80071ba <_printf_i+0x136>
 80071a0:	9e04      	ldr	r6, [sp, #16]
 80071a2:	0028      	movs	r0, r5
 80071a4:	0039      	movs	r1, r7
 80071a6:	f7f9 f851 	bl	800024c <__aeabi_uidivmod>
 80071aa:	9b03      	ldr	r3, [sp, #12]
 80071ac:	3e01      	subs	r6, #1
 80071ae:	5c5b      	ldrb	r3, [r3, r1]
 80071b0:	7033      	strb	r3, [r6, #0]
 80071b2:	002b      	movs	r3, r5
 80071b4:	0005      	movs	r5, r0
 80071b6:	429f      	cmp	r7, r3
 80071b8:	d9f3      	bls.n	80071a2 <_printf_i+0x11e>
 80071ba:	2f08      	cmp	r7, #8
 80071bc:	d109      	bne.n	80071d2 <_printf_i+0x14e>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	07db      	lsls	r3, r3, #31
 80071c2:	d506      	bpl.n	80071d2 <_printf_i+0x14e>
 80071c4:	6863      	ldr	r3, [r4, #4]
 80071c6:	6922      	ldr	r2, [r4, #16]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	dc02      	bgt.n	80071d2 <_printf_i+0x14e>
 80071cc:	2330      	movs	r3, #48	; 0x30
 80071ce:	3e01      	subs	r6, #1
 80071d0:	7033      	strb	r3, [r6, #0]
 80071d2:	9b04      	ldr	r3, [sp, #16]
 80071d4:	1b9b      	subs	r3, r3, r6
 80071d6:	6123      	str	r3, [r4, #16]
 80071d8:	9b07      	ldr	r3, [sp, #28]
 80071da:	0021      	movs	r1, r4
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	9805      	ldr	r0, [sp, #20]
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	aa09      	add	r2, sp, #36	; 0x24
 80071e4:	f7ff fede 	bl	8006fa4 <_printf_common>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d135      	bne.n	8007258 <_printf_i+0x1d4>
 80071ec:	2001      	movs	r0, #1
 80071ee:	4240      	negs	r0, r0
 80071f0:	b00b      	add	sp, #44	; 0x2c
 80071f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f4:	2220      	movs	r2, #32
 80071f6:	6809      	ldr	r1, [r1, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	6022      	str	r2, [r4, #0]
 80071fc:	0022      	movs	r2, r4
 80071fe:	2178      	movs	r1, #120	; 0x78
 8007200:	3245      	adds	r2, #69	; 0x45
 8007202:	7011      	strb	r1, [r2, #0]
 8007204:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <_printf_i+0x220>)
 8007206:	e7a7      	b.n	8007158 <_printf_i+0xd4>
 8007208:	0648      	lsls	r0, r1, #25
 800720a:	d5ac      	bpl.n	8007166 <_printf_i+0xe2>
 800720c:	b2ad      	uxth	r5, r5
 800720e:	e7aa      	b.n	8007166 <_printf_i+0xe2>
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	680d      	ldr	r5, [r1, #0]
 8007214:	1d10      	adds	r0, r2, #4
 8007216:	6949      	ldr	r1, [r1, #20]
 8007218:	6018      	str	r0, [r3, #0]
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	062e      	lsls	r6, r5, #24
 800721e:	d501      	bpl.n	8007224 <_printf_i+0x1a0>
 8007220:	6019      	str	r1, [r3, #0]
 8007222:	e002      	b.n	800722a <_printf_i+0x1a6>
 8007224:	066d      	lsls	r5, r5, #25
 8007226:	d5fb      	bpl.n	8007220 <_printf_i+0x19c>
 8007228:	8019      	strh	r1, [r3, #0]
 800722a:	2300      	movs	r3, #0
 800722c:	9e04      	ldr	r6, [sp, #16]
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	e7d2      	b.n	80071d8 <_printf_i+0x154>
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	1d11      	adds	r1, r2, #4
 8007236:	6019      	str	r1, [r3, #0]
 8007238:	6816      	ldr	r6, [r2, #0]
 800723a:	2100      	movs	r1, #0
 800723c:	0030      	movs	r0, r6
 800723e:	6862      	ldr	r2, [r4, #4]
 8007240:	f001 fa94 	bl	800876c <memchr>
 8007244:	2800      	cmp	r0, #0
 8007246:	d001      	beq.n	800724c <_printf_i+0x1c8>
 8007248:	1b80      	subs	r0, r0, r6
 800724a:	6060      	str	r0, [r4, #4]
 800724c:	6863      	ldr	r3, [r4, #4]
 800724e:	6123      	str	r3, [r4, #16]
 8007250:	2300      	movs	r3, #0
 8007252:	9a04      	ldr	r2, [sp, #16]
 8007254:	7013      	strb	r3, [r2, #0]
 8007256:	e7bf      	b.n	80071d8 <_printf_i+0x154>
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	0032      	movs	r2, r6
 800725c:	9906      	ldr	r1, [sp, #24]
 800725e:	9805      	ldr	r0, [sp, #20]
 8007260:	9d07      	ldr	r5, [sp, #28]
 8007262:	47a8      	blx	r5
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d0c1      	beq.n	80071ec <_printf_i+0x168>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	079b      	lsls	r3, r3, #30
 800726c:	d415      	bmi.n	800729a <_printf_i+0x216>
 800726e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007270:	68e0      	ldr	r0, [r4, #12]
 8007272:	4298      	cmp	r0, r3
 8007274:	dabc      	bge.n	80071f0 <_printf_i+0x16c>
 8007276:	0018      	movs	r0, r3
 8007278:	e7ba      	b.n	80071f0 <_printf_i+0x16c>
 800727a:	0022      	movs	r2, r4
 800727c:	2301      	movs	r3, #1
 800727e:	9906      	ldr	r1, [sp, #24]
 8007280:	9805      	ldr	r0, [sp, #20]
 8007282:	9e07      	ldr	r6, [sp, #28]
 8007284:	3219      	adds	r2, #25
 8007286:	47b0      	blx	r6
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d0af      	beq.n	80071ec <_printf_i+0x168>
 800728c:	3501      	adds	r5, #1
 800728e:	68e3      	ldr	r3, [r4, #12]
 8007290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	42ab      	cmp	r3, r5
 8007296:	dcf0      	bgt.n	800727a <_printf_i+0x1f6>
 8007298:	e7e9      	b.n	800726e <_printf_i+0x1ea>
 800729a:	2500      	movs	r5, #0
 800729c:	e7f7      	b.n	800728e <_printf_i+0x20a>
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	080096e6 	.word	0x080096e6
 80072a4:	080096f7 	.word	0x080096f7

080072a8 <iprintf>:
 80072a8:	b40f      	push	{r0, r1, r2, r3}
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <iprintf+0x30>)
 80072ac:	b513      	push	{r0, r1, r4, lr}
 80072ae:	681c      	ldr	r4, [r3, #0]
 80072b0:	2c00      	cmp	r4, #0
 80072b2:	d005      	beq.n	80072c0 <iprintf+0x18>
 80072b4:	69a3      	ldr	r3, [r4, #24]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <iprintf+0x18>
 80072ba:	0020      	movs	r0, r4
 80072bc:	f001 f942 	bl	8008544 <__sinit>
 80072c0:	ab05      	add	r3, sp, #20
 80072c2:	0020      	movs	r0, r4
 80072c4:	9a04      	ldr	r2, [sp, #16]
 80072c6:	68a1      	ldr	r1, [r4, #8]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	f001 fe47 	bl	8008f5c <_vfiprintf_r>
 80072ce:	bc16      	pop	{r1, r2, r4}
 80072d0:	bc08      	pop	{r3}
 80072d2:	b004      	add	sp, #16
 80072d4:	4718      	bx	r3
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	2000000c 	.word	0x2000000c

080072dc <_puts_r>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	0005      	movs	r5, r0
 80072e0:	000e      	movs	r6, r1
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d004      	beq.n	80072f0 <_puts_r+0x14>
 80072e6:	6983      	ldr	r3, [r0, #24]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <_puts_r+0x14>
 80072ec:	f001 f92a 	bl	8008544 <__sinit>
 80072f0:	69ab      	ldr	r3, [r5, #24]
 80072f2:	68ac      	ldr	r4, [r5, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d102      	bne.n	80072fe <_puts_r+0x22>
 80072f8:	0028      	movs	r0, r5
 80072fa:	f001 f923 	bl	8008544 <__sinit>
 80072fe:	4b2d      	ldr	r3, [pc, #180]	; (80073b4 <_puts_r+0xd8>)
 8007300:	429c      	cmp	r4, r3
 8007302:	d122      	bne.n	800734a <_puts_r+0x6e>
 8007304:	686c      	ldr	r4, [r5, #4]
 8007306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007308:	07db      	lsls	r3, r3, #31
 800730a:	d405      	bmi.n	8007318 <_puts_r+0x3c>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	059b      	lsls	r3, r3, #22
 8007310:	d402      	bmi.n	8007318 <_puts_r+0x3c>
 8007312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007314:	f001 f9bb 	bl	800868e <__retarget_lock_acquire_recursive>
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	071b      	lsls	r3, r3, #28
 800731c:	d502      	bpl.n	8007324 <_puts_r+0x48>
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d129      	bne.n	8007378 <_puts_r+0x9c>
 8007324:	0021      	movs	r1, r4
 8007326:	0028      	movs	r0, r5
 8007328:	f000 f8bc 	bl	80074a4 <__swsetup_r>
 800732c:	2800      	cmp	r0, #0
 800732e:	d023      	beq.n	8007378 <_puts_r+0x9c>
 8007330:	2501      	movs	r5, #1
 8007332:	426d      	negs	r5, r5
 8007334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007336:	07db      	lsls	r3, r3, #31
 8007338:	d405      	bmi.n	8007346 <_puts_r+0x6a>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	059b      	lsls	r3, r3, #22
 800733e:	d402      	bmi.n	8007346 <_puts_r+0x6a>
 8007340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007342:	f001 f9a5 	bl	8008690 <__retarget_lock_release_recursive>
 8007346:	0028      	movs	r0, r5
 8007348:	bd70      	pop	{r4, r5, r6, pc}
 800734a:	4b1b      	ldr	r3, [pc, #108]	; (80073b8 <_puts_r+0xdc>)
 800734c:	429c      	cmp	r4, r3
 800734e:	d101      	bne.n	8007354 <_puts_r+0x78>
 8007350:	68ac      	ldr	r4, [r5, #8]
 8007352:	e7d8      	b.n	8007306 <_puts_r+0x2a>
 8007354:	4b19      	ldr	r3, [pc, #100]	; (80073bc <_puts_r+0xe0>)
 8007356:	429c      	cmp	r4, r3
 8007358:	d1d5      	bne.n	8007306 <_puts_r+0x2a>
 800735a:	68ec      	ldr	r4, [r5, #12]
 800735c:	e7d3      	b.n	8007306 <_puts_r+0x2a>
 800735e:	3601      	adds	r6, #1
 8007360:	60a3      	str	r3, [r4, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	da04      	bge.n	8007370 <_puts_r+0x94>
 8007366:	69a2      	ldr	r2, [r4, #24]
 8007368:	429a      	cmp	r2, r3
 800736a:	dc16      	bgt.n	800739a <_puts_r+0xbe>
 800736c:	290a      	cmp	r1, #10
 800736e:	d014      	beq.n	800739a <_puts_r+0xbe>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	6022      	str	r2, [r4, #0]
 8007376:	7019      	strb	r1, [r3, #0]
 8007378:	68a3      	ldr	r3, [r4, #8]
 800737a:	7831      	ldrb	r1, [r6, #0]
 800737c:	3b01      	subs	r3, #1
 800737e:	2900      	cmp	r1, #0
 8007380:	d1ed      	bne.n	800735e <_puts_r+0x82>
 8007382:	60a3      	str	r3, [r4, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	da0f      	bge.n	80073a8 <_puts_r+0xcc>
 8007388:	0028      	movs	r0, r5
 800738a:	0022      	movs	r2, r4
 800738c:	310a      	adds	r1, #10
 800738e:	f000 f833 	bl	80073f8 <__swbuf_r>
 8007392:	250a      	movs	r5, #10
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d1cd      	bne.n	8007334 <_puts_r+0x58>
 8007398:	e7ca      	b.n	8007330 <_puts_r+0x54>
 800739a:	0022      	movs	r2, r4
 800739c:	0028      	movs	r0, r5
 800739e:	f000 f82b 	bl	80073f8 <__swbuf_r>
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	d1e8      	bne.n	8007378 <_puts_r+0x9c>
 80073a6:	e7c3      	b.n	8007330 <_puts_r+0x54>
 80073a8:	250a      	movs	r5, #10
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	6022      	str	r2, [r4, #0]
 80073b0:	701d      	strb	r5, [r3, #0]
 80073b2:	e7bf      	b.n	8007334 <_puts_r+0x58>
 80073b4:	080097bc 	.word	0x080097bc
 80073b8:	080097dc 	.word	0x080097dc
 80073bc:	0800979c 	.word	0x0800979c

080073c0 <puts>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <puts+0x10>)
 80073c4:	0001      	movs	r1, r0
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	f7ff ff88 	bl	80072dc <_puts_r>
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	2000000c 	.word	0x2000000c

080073d4 <_sbrk_r>:
 80073d4:	2300      	movs	r3, #0
 80073d6:	b570      	push	{r4, r5, r6, lr}
 80073d8:	4d06      	ldr	r5, [pc, #24]	; (80073f4 <_sbrk_r+0x20>)
 80073da:	0004      	movs	r4, r0
 80073dc:	0008      	movs	r0, r1
 80073de:	602b      	str	r3, [r5, #0]
 80073e0:	f7fc fa62 	bl	80038a8 <_sbrk>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d103      	bne.n	80073f0 <_sbrk_r+0x1c>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d000      	beq.n	80073f0 <_sbrk_r+0x1c>
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	bd70      	pop	{r4, r5, r6, pc}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	20000328 	.word	0x20000328

080073f8 <__swbuf_r>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	0005      	movs	r5, r0
 80073fc:	000e      	movs	r6, r1
 80073fe:	0014      	movs	r4, r2
 8007400:	2800      	cmp	r0, #0
 8007402:	d004      	beq.n	800740e <__swbuf_r+0x16>
 8007404:	6983      	ldr	r3, [r0, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <__swbuf_r+0x16>
 800740a:	f001 f89b 	bl	8008544 <__sinit>
 800740e:	4b22      	ldr	r3, [pc, #136]	; (8007498 <__swbuf_r+0xa0>)
 8007410:	429c      	cmp	r4, r3
 8007412:	d12e      	bne.n	8007472 <__swbuf_r+0x7a>
 8007414:	686c      	ldr	r4, [r5, #4]
 8007416:	69a3      	ldr	r3, [r4, #24]
 8007418:	60a3      	str	r3, [r4, #8]
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	071b      	lsls	r3, r3, #28
 800741e:	d532      	bpl.n	8007486 <__swbuf_r+0x8e>
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d02f      	beq.n	8007486 <__swbuf_r+0x8e>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	6922      	ldr	r2, [r4, #16]
 800742a:	b2f7      	uxtb	r7, r6
 800742c:	1a98      	subs	r0, r3, r2
 800742e:	6963      	ldr	r3, [r4, #20]
 8007430:	b2f6      	uxtb	r6, r6
 8007432:	4283      	cmp	r3, r0
 8007434:	dc05      	bgt.n	8007442 <__swbuf_r+0x4a>
 8007436:	0021      	movs	r1, r4
 8007438:	0028      	movs	r0, r5
 800743a:	f000 ffe1 	bl	8008400 <_fflush_r>
 800743e:	2800      	cmp	r0, #0
 8007440:	d127      	bne.n	8007492 <__swbuf_r+0x9a>
 8007442:	68a3      	ldr	r3, [r4, #8]
 8007444:	3001      	adds	r0, #1
 8007446:	3b01      	subs	r3, #1
 8007448:	60a3      	str	r3, [r4, #8]
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	6022      	str	r2, [r4, #0]
 8007450:	701f      	strb	r7, [r3, #0]
 8007452:	6963      	ldr	r3, [r4, #20]
 8007454:	4283      	cmp	r3, r0
 8007456:	d004      	beq.n	8007462 <__swbuf_r+0x6a>
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	07db      	lsls	r3, r3, #31
 800745c:	d507      	bpl.n	800746e <__swbuf_r+0x76>
 800745e:	2e0a      	cmp	r6, #10
 8007460:	d105      	bne.n	800746e <__swbuf_r+0x76>
 8007462:	0021      	movs	r1, r4
 8007464:	0028      	movs	r0, r5
 8007466:	f000 ffcb 	bl	8008400 <_fflush_r>
 800746a:	2800      	cmp	r0, #0
 800746c:	d111      	bne.n	8007492 <__swbuf_r+0x9a>
 800746e:	0030      	movs	r0, r6
 8007470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007472:	4b0a      	ldr	r3, [pc, #40]	; (800749c <__swbuf_r+0xa4>)
 8007474:	429c      	cmp	r4, r3
 8007476:	d101      	bne.n	800747c <__swbuf_r+0x84>
 8007478:	68ac      	ldr	r4, [r5, #8]
 800747a:	e7cc      	b.n	8007416 <__swbuf_r+0x1e>
 800747c:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <__swbuf_r+0xa8>)
 800747e:	429c      	cmp	r4, r3
 8007480:	d1c9      	bne.n	8007416 <__swbuf_r+0x1e>
 8007482:	68ec      	ldr	r4, [r5, #12]
 8007484:	e7c7      	b.n	8007416 <__swbuf_r+0x1e>
 8007486:	0021      	movs	r1, r4
 8007488:	0028      	movs	r0, r5
 800748a:	f000 f80b 	bl	80074a4 <__swsetup_r>
 800748e:	2800      	cmp	r0, #0
 8007490:	d0c9      	beq.n	8007426 <__swbuf_r+0x2e>
 8007492:	2601      	movs	r6, #1
 8007494:	4276      	negs	r6, r6
 8007496:	e7ea      	b.n	800746e <__swbuf_r+0x76>
 8007498:	080097bc 	.word	0x080097bc
 800749c:	080097dc 	.word	0x080097dc
 80074a0:	0800979c 	.word	0x0800979c

080074a4 <__swsetup_r>:
 80074a4:	4b37      	ldr	r3, [pc, #220]	; (8007584 <__swsetup_r+0xe0>)
 80074a6:	b570      	push	{r4, r5, r6, lr}
 80074a8:	681d      	ldr	r5, [r3, #0]
 80074aa:	0006      	movs	r6, r0
 80074ac:	000c      	movs	r4, r1
 80074ae:	2d00      	cmp	r5, #0
 80074b0:	d005      	beq.n	80074be <__swsetup_r+0x1a>
 80074b2:	69ab      	ldr	r3, [r5, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <__swsetup_r+0x1a>
 80074b8:	0028      	movs	r0, r5
 80074ba:	f001 f843 	bl	8008544 <__sinit>
 80074be:	4b32      	ldr	r3, [pc, #200]	; (8007588 <__swsetup_r+0xe4>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	d10f      	bne.n	80074e4 <__swsetup_r+0x40>
 80074c4:	686c      	ldr	r4, [r5, #4]
 80074c6:	230c      	movs	r3, #12
 80074c8:	5ee2      	ldrsh	r2, [r4, r3]
 80074ca:	b293      	uxth	r3, r2
 80074cc:	0711      	lsls	r1, r2, #28
 80074ce:	d42d      	bmi.n	800752c <__swsetup_r+0x88>
 80074d0:	06d9      	lsls	r1, r3, #27
 80074d2:	d411      	bmi.n	80074f8 <__swsetup_r+0x54>
 80074d4:	2309      	movs	r3, #9
 80074d6:	2001      	movs	r0, #1
 80074d8:	6033      	str	r3, [r6, #0]
 80074da:	3337      	adds	r3, #55	; 0x37
 80074dc:	4313      	orrs	r3, r2
 80074de:	81a3      	strh	r3, [r4, #12]
 80074e0:	4240      	negs	r0, r0
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	4b29      	ldr	r3, [pc, #164]	; (800758c <__swsetup_r+0xe8>)
 80074e6:	429c      	cmp	r4, r3
 80074e8:	d101      	bne.n	80074ee <__swsetup_r+0x4a>
 80074ea:	68ac      	ldr	r4, [r5, #8]
 80074ec:	e7eb      	b.n	80074c6 <__swsetup_r+0x22>
 80074ee:	4b28      	ldr	r3, [pc, #160]	; (8007590 <__swsetup_r+0xec>)
 80074f0:	429c      	cmp	r4, r3
 80074f2:	d1e8      	bne.n	80074c6 <__swsetup_r+0x22>
 80074f4:	68ec      	ldr	r4, [r5, #12]
 80074f6:	e7e6      	b.n	80074c6 <__swsetup_r+0x22>
 80074f8:	075b      	lsls	r3, r3, #29
 80074fa:	d513      	bpl.n	8007524 <__swsetup_r+0x80>
 80074fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074fe:	2900      	cmp	r1, #0
 8007500:	d008      	beq.n	8007514 <__swsetup_r+0x70>
 8007502:	0023      	movs	r3, r4
 8007504:	3344      	adds	r3, #68	; 0x44
 8007506:	4299      	cmp	r1, r3
 8007508:	d002      	beq.n	8007510 <__swsetup_r+0x6c>
 800750a:	0030      	movs	r0, r6
 800750c:	f7ff f9aa 	bl	8006864 <_free_r>
 8007510:	2300      	movs	r3, #0
 8007512:	6363      	str	r3, [r4, #52]	; 0x34
 8007514:	2224      	movs	r2, #36	; 0x24
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	4393      	bics	r3, r2
 800751a:	81a3      	strh	r3, [r4, #12]
 800751c:	2300      	movs	r3, #0
 800751e:	6063      	str	r3, [r4, #4]
 8007520:	6923      	ldr	r3, [r4, #16]
 8007522:	6023      	str	r3, [r4, #0]
 8007524:	2308      	movs	r3, #8
 8007526:	89a2      	ldrh	r2, [r4, #12]
 8007528:	4313      	orrs	r3, r2
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	6923      	ldr	r3, [r4, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10b      	bne.n	800754a <__swsetup_r+0xa6>
 8007532:	21a0      	movs	r1, #160	; 0xa0
 8007534:	2280      	movs	r2, #128	; 0x80
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	0089      	lsls	r1, r1, #2
 800753a:	0092      	lsls	r2, r2, #2
 800753c:	400b      	ands	r3, r1
 800753e:	4293      	cmp	r3, r2
 8007540:	d003      	beq.n	800754a <__swsetup_r+0xa6>
 8007542:	0021      	movs	r1, r4
 8007544:	0030      	movs	r0, r6
 8007546:	f001 f8cd 	bl	80086e4 <__smakebuf_r>
 800754a:	220c      	movs	r2, #12
 800754c:	5ea3      	ldrsh	r3, [r4, r2]
 800754e:	2001      	movs	r0, #1
 8007550:	001a      	movs	r2, r3
 8007552:	b299      	uxth	r1, r3
 8007554:	4002      	ands	r2, r0
 8007556:	4203      	tst	r3, r0
 8007558:	d00f      	beq.n	800757a <__swsetup_r+0xd6>
 800755a:	2200      	movs	r2, #0
 800755c:	60a2      	str	r2, [r4, #8]
 800755e:	6962      	ldr	r2, [r4, #20]
 8007560:	4252      	negs	r2, r2
 8007562:	61a2      	str	r2, [r4, #24]
 8007564:	2000      	movs	r0, #0
 8007566:	6922      	ldr	r2, [r4, #16]
 8007568:	4282      	cmp	r2, r0
 800756a:	d1ba      	bne.n	80074e2 <__swsetup_r+0x3e>
 800756c:	060a      	lsls	r2, r1, #24
 800756e:	d5b8      	bpl.n	80074e2 <__swsetup_r+0x3e>
 8007570:	2240      	movs	r2, #64	; 0x40
 8007572:	4313      	orrs	r3, r2
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	3801      	subs	r0, #1
 8007578:	e7b3      	b.n	80074e2 <__swsetup_r+0x3e>
 800757a:	0788      	lsls	r0, r1, #30
 800757c:	d400      	bmi.n	8007580 <__swsetup_r+0xdc>
 800757e:	6962      	ldr	r2, [r4, #20]
 8007580:	60a2      	str	r2, [r4, #8]
 8007582:	e7ef      	b.n	8007564 <__swsetup_r+0xc0>
 8007584:	2000000c 	.word	0x2000000c
 8007588:	080097bc 	.word	0x080097bc
 800758c:	080097dc 	.word	0x080097dc
 8007590:	0800979c 	.word	0x0800979c

08007594 <quorem>:
 8007594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007596:	0006      	movs	r6, r0
 8007598:	690d      	ldr	r5, [r1, #16]
 800759a:	6933      	ldr	r3, [r6, #16]
 800759c:	b087      	sub	sp, #28
 800759e:	2000      	movs	r0, #0
 80075a0:	9102      	str	r1, [sp, #8]
 80075a2:	42ab      	cmp	r3, r5
 80075a4:	db6b      	blt.n	800767e <quorem+0xea>
 80075a6:	000b      	movs	r3, r1
 80075a8:	3d01      	subs	r5, #1
 80075aa:	00ac      	lsls	r4, r5, #2
 80075ac:	3314      	adds	r3, #20
 80075ae:	9305      	str	r3, [sp, #20]
 80075b0:	191b      	adds	r3, r3, r4
 80075b2:	9303      	str	r3, [sp, #12]
 80075b4:	0033      	movs	r3, r6
 80075b6:	3314      	adds	r3, #20
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	191c      	adds	r4, r3, r4
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	6827      	ldr	r7, [r4, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	0038      	movs	r0, r7
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	3301      	adds	r3, #1
 80075c8:	0019      	movs	r1, r3
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	f7f8 fdb8 	bl	8000140 <__udivsi3>
 80075d0:	9b04      	ldr	r3, [sp, #16]
 80075d2:	9000      	str	r0, [sp, #0]
 80075d4:	429f      	cmp	r7, r3
 80075d6:	d329      	bcc.n	800762c <quorem+0x98>
 80075d8:	2300      	movs	r3, #0
 80075da:	469c      	mov	ip, r3
 80075dc:	9801      	ldr	r0, [sp, #4]
 80075de:	9f05      	ldr	r7, [sp, #20]
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	cf08      	ldmia	r7!, {r3}
 80075e4:	9a00      	ldr	r2, [sp, #0]
 80075e6:	b299      	uxth	r1, r3
 80075e8:	4351      	muls	r1, r2
 80075ea:	0c1b      	lsrs	r3, r3, #16
 80075ec:	4353      	muls	r3, r2
 80075ee:	4461      	add	r1, ip
 80075f0:	0c0a      	lsrs	r2, r1, #16
 80075f2:	189b      	adds	r3, r3, r2
 80075f4:	0c1a      	lsrs	r2, r3, #16
 80075f6:	9305      	str	r3, [sp, #20]
 80075f8:	6803      	ldr	r3, [r0, #0]
 80075fa:	4694      	mov	ip, r2
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	9b04      	ldr	r3, [sp, #16]
 8007600:	b289      	uxth	r1, r1
 8007602:	18d2      	adds	r2, r2, r3
 8007604:	6803      	ldr	r3, [r0, #0]
 8007606:	1a52      	subs	r2, r2, r1
 8007608:	0c19      	lsrs	r1, r3, #16
 800760a:	466b      	mov	r3, sp
 800760c:	8a9b      	ldrh	r3, [r3, #20]
 800760e:	1acb      	subs	r3, r1, r3
 8007610:	1411      	asrs	r1, r2, #16
 8007612:	185b      	adds	r3, r3, r1
 8007614:	1419      	asrs	r1, r3, #16
 8007616:	b292      	uxth	r2, r2
 8007618:	041b      	lsls	r3, r3, #16
 800761a:	431a      	orrs	r2, r3
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	9104      	str	r1, [sp, #16]
 8007620:	c004      	stmia	r0!, {r2}
 8007622:	42bb      	cmp	r3, r7
 8007624:	d2dd      	bcs.n	80075e2 <quorem+0x4e>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d02e      	beq.n	800768a <quorem+0xf6>
 800762c:	0030      	movs	r0, r6
 800762e:	9902      	ldr	r1, [sp, #8]
 8007630:	f001 fb46 	bl	8008cc0 <__mcmp>
 8007634:	2800      	cmp	r0, #0
 8007636:	db21      	blt.n	800767c <quorem+0xe8>
 8007638:	0030      	movs	r0, r6
 800763a:	2400      	movs	r4, #0
 800763c:	9b00      	ldr	r3, [sp, #0]
 800763e:	9902      	ldr	r1, [sp, #8]
 8007640:	3301      	adds	r3, #1
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	3014      	adds	r0, #20
 8007646:	3114      	adds	r1, #20
 8007648:	6802      	ldr	r2, [r0, #0]
 800764a:	c908      	ldmia	r1!, {r3}
 800764c:	b292      	uxth	r2, r2
 800764e:	1914      	adds	r4, r2, r4
 8007650:	b29a      	uxth	r2, r3
 8007652:	1aa2      	subs	r2, r4, r2
 8007654:	6804      	ldr	r4, [r0, #0]
 8007656:	0c1b      	lsrs	r3, r3, #16
 8007658:	0c24      	lsrs	r4, r4, #16
 800765a:	1ae3      	subs	r3, r4, r3
 800765c:	1414      	asrs	r4, r2, #16
 800765e:	191b      	adds	r3, r3, r4
 8007660:	141c      	asrs	r4, r3, #16
 8007662:	b292      	uxth	r2, r2
 8007664:	041b      	lsls	r3, r3, #16
 8007666:	4313      	orrs	r3, r2
 8007668:	c008      	stmia	r0!, {r3}
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	428b      	cmp	r3, r1
 800766e:	d2eb      	bcs.n	8007648 <quorem+0xb4>
 8007670:	9a01      	ldr	r2, [sp, #4]
 8007672:	00ab      	lsls	r3, r5, #2
 8007674:	18d3      	adds	r3, r2, r3
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	2a00      	cmp	r2, #0
 800767a:	d010      	beq.n	800769e <quorem+0x10a>
 800767c:	9800      	ldr	r0, [sp, #0]
 800767e:	b007      	add	sp, #28
 8007680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <quorem+0xfe>
 8007688:	3d01      	subs	r5, #1
 800768a:	9b01      	ldr	r3, [sp, #4]
 800768c:	3c04      	subs	r4, #4
 800768e:	42a3      	cmp	r3, r4
 8007690:	d3f7      	bcc.n	8007682 <quorem+0xee>
 8007692:	6135      	str	r5, [r6, #16]
 8007694:	e7ca      	b.n	800762c <quorem+0x98>
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	2a00      	cmp	r2, #0
 800769a:	d104      	bne.n	80076a6 <quorem+0x112>
 800769c:	3d01      	subs	r5, #1
 800769e:	9a01      	ldr	r2, [sp, #4]
 80076a0:	3b04      	subs	r3, #4
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d3f7      	bcc.n	8007696 <quorem+0x102>
 80076a6:	6135      	str	r5, [r6, #16]
 80076a8:	e7e8      	b.n	800767c <quorem+0xe8>
	...

080076ac <_dtoa_r>:
 80076ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ae:	b09d      	sub	sp, #116	; 0x74
 80076b0:	9202      	str	r2, [sp, #8]
 80076b2:	9303      	str	r3, [sp, #12]
 80076b4:	9b02      	ldr	r3, [sp, #8]
 80076b6:	9c03      	ldr	r4, [sp, #12]
 80076b8:	930a      	str	r3, [sp, #40]	; 0x28
 80076ba:	940b      	str	r4, [sp, #44]	; 0x2c
 80076bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076be:	0007      	movs	r7, r0
 80076c0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80076c2:	2c00      	cmp	r4, #0
 80076c4:	d10e      	bne.n	80076e4 <_dtoa_r+0x38>
 80076c6:	2010      	movs	r0, #16
 80076c8:	f7ff f8ba 	bl	8006840 <malloc>
 80076cc:	1e02      	subs	r2, r0, #0
 80076ce:	6278      	str	r0, [r7, #36]	; 0x24
 80076d0:	d104      	bne.n	80076dc <_dtoa_r+0x30>
 80076d2:	21ea      	movs	r1, #234	; 0xea
 80076d4:	4bc0      	ldr	r3, [pc, #768]	; (80079d8 <_dtoa_r+0x32c>)
 80076d6:	48c1      	ldr	r0, [pc, #772]	; (80079dc <_dtoa_r+0x330>)
 80076d8:	f001 fdda 	bl	8009290 <__assert_func>
 80076dc:	6044      	str	r4, [r0, #4]
 80076de:	6084      	str	r4, [r0, #8]
 80076e0:	6004      	str	r4, [r0, #0]
 80076e2:	60c4      	str	r4, [r0, #12]
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	6819      	ldr	r1, [r3, #0]
 80076e8:	2900      	cmp	r1, #0
 80076ea:	d00a      	beq.n	8007702 <_dtoa_r+0x56>
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	2301      	movs	r3, #1
 80076f0:	4093      	lsls	r3, r2
 80076f2:	604a      	str	r2, [r1, #4]
 80076f4:	608b      	str	r3, [r1, #8]
 80076f6:	0038      	movs	r0, r7
 80076f8:	f001 f8a0 	bl	800883c <_Bfree>
 80076fc:	2200      	movs	r2, #0
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	9b03      	ldr	r3, [sp, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	da21      	bge.n	800774c <_dtoa_r+0xa0>
 8007708:	2301      	movs	r3, #1
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	085b      	lsrs	r3, r3, #1
 8007712:	930b      	str	r3, [sp, #44]	; 0x2c
 8007714:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007716:	4bb2      	ldr	r3, [pc, #712]	; (80079e0 <_dtoa_r+0x334>)
 8007718:	002a      	movs	r2, r5
 800771a:	9318      	str	r3, [sp, #96]	; 0x60
 800771c:	401a      	ands	r2, r3
 800771e:	429a      	cmp	r2, r3
 8007720:	d117      	bne.n	8007752 <_dtoa_r+0xa6>
 8007722:	4bb0      	ldr	r3, [pc, #704]	; (80079e4 <_dtoa_r+0x338>)
 8007724:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007726:	0328      	lsls	r0, r5, #12
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	9b02      	ldr	r3, [sp, #8]
 800772c:	0b00      	lsrs	r0, r0, #12
 800772e:	4318      	orrs	r0, r3
 8007730:	d101      	bne.n	8007736 <_dtoa_r+0x8a>
 8007732:	f000 fdc3 	bl	80082bc <_dtoa_r+0xc10>
 8007736:	48ac      	ldr	r0, [pc, #688]	; (80079e8 <_dtoa_r+0x33c>)
 8007738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800773a:	9005      	str	r0, [sp, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <_dtoa_r+0x9a>
 8007740:	4baa      	ldr	r3, [pc, #680]	; (80079ec <_dtoa_r+0x340>)
 8007742:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	9805      	ldr	r0, [sp, #20]
 8007748:	b01d      	add	sp, #116	; 0x74
 800774a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800774c:	2300      	movs	r3, #0
 800774e:	602b      	str	r3, [r5, #0]
 8007750:	e7e0      	b.n	8007714 <_dtoa_r+0x68>
 8007752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007754:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007756:	9312      	str	r3, [sp, #72]	; 0x48
 8007758:	9413      	str	r4, [sp, #76]	; 0x4c
 800775a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800775c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800775e:	2200      	movs	r2, #0
 8007760:	2300      	movs	r3, #0
 8007762:	f7f8 fe73 	bl	800044c <__aeabi_dcmpeq>
 8007766:	1e04      	subs	r4, r0, #0
 8007768:	d00b      	beq.n	8007782 <_dtoa_r+0xd6>
 800776a:	2301      	movs	r3, #1
 800776c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	4b9f      	ldr	r3, [pc, #636]	; (80079f0 <_dtoa_r+0x344>)
 8007772:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007774:	9305      	str	r3, [sp, #20]
 8007776:	2a00      	cmp	r2, #0
 8007778:	d0e5      	beq.n	8007746 <_dtoa_r+0x9a>
 800777a:	4a9e      	ldr	r2, [pc, #632]	; (80079f4 <_dtoa_r+0x348>)
 800777c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800777e:	600a      	str	r2, [r1, #0]
 8007780:	e7e1      	b.n	8007746 <_dtoa_r+0x9a>
 8007782:	ab1a      	add	r3, sp, #104	; 0x68
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	ab1b      	add	r3, sp, #108	; 0x6c
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	0038      	movs	r0, r7
 800778c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800778e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007790:	f001 fb4a 	bl	8008e28 <__d2b>
 8007794:	006e      	lsls	r6, r5, #1
 8007796:	9004      	str	r0, [sp, #16]
 8007798:	0d76      	lsrs	r6, r6, #21
 800779a:	d100      	bne.n	800779e <_dtoa_r+0xf2>
 800779c:	e07c      	b.n	8007898 <_dtoa_r+0x1ec>
 800779e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80077a0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80077a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077a4:	4a94      	ldr	r2, [pc, #592]	; (80079f8 <_dtoa_r+0x34c>)
 80077a6:	031b      	lsls	r3, r3, #12
 80077a8:	0b1b      	lsrs	r3, r3, #12
 80077aa:	431a      	orrs	r2, r3
 80077ac:	0011      	movs	r1, r2
 80077ae:	4b93      	ldr	r3, [pc, #588]	; (80079fc <_dtoa_r+0x350>)
 80077b0:	9416      	str	r4, [sp, #88]	; 0x58
 80077b2:	18f6      	adds	r6, r6, r3
 80077b4:	2200      	movs	r2, #0
 80077b6:	4b92      	ldr	r3, [pc, #584]	; (8007a00 <_dtoa_r+0x354>)
 80077b8:	f7fa fd8e 	bl	80022d8 <__aeabi_dsub>
 80077bc:	4a91      	ldr	r2, [pc, #580]	; (8007a04 <_dtoa_r+0x358>)
 80077be:	4b92      	ldr	r3, [pc, #584]	; (8007a08 <_dtoa_r+0x35c>)
 80077c0:	f7fa fb1e 	bl	8001e00 <__aeabi_dmul>
 80077c4:	4a91      	ldr	r2, [pc, #580]	; (8007a0c <_dtoa_r+0x360>)
 80077c6:	4b92      	ldr	r3, [pc, #584]	; (8007a10 <_dtoa_r+0x364>)
 80077c8:	f7f9 fbaa 	bl	8000f20 <__aeabi_dadd>
 80077cc:	0004      	movs	r4, r0
 80077ce:	0030      	movs	r0, r6
 80077d0:	000d      	movs	r5, r1
 80077d2:	f7fb f967 	bl	8002aa4 <__aeabi_i2d>
 80077d6:	4a8f      	ldr	r2, [pc, #572]	; (8007a14 <_dtoa_r+0x368>)
 80077d8:	4b8f      	ldr	r3, [pc, #572]	; (8007a18 <_dtoa_r+0x36c>)
 80077da:	f7fa fb11 	bl	8001e00 <__aeabi_dmul>
 80077de:	0002      	movs	r2, r0
 80077e0:	000b      	movs	r3, r1
 80077e2:	0020      	movs	r0, r4
 80077e4:	0029      	movs	r1, r5
 80077e6:	f7f9 fb9b 	bl	8000f20 <__aeabi_dadd>
 80077ea:	0004      	movs	r4, r0
 80077ec:	000d      	movs	r5, r1
 80077ee:	f7fb f923 	bl	8002a38 <__aeabi_d2iz>
 80077f2:	2200      	movs	r2, #0
 80077f4:	9002      	str	r0, [sp, #8]
 80077f6:	2300      	movs	r3, #0
 80077f8:	0020      	movs	r0, r4
 80077fa:	0029      	movs	r1, r5
 80077fc:	f7f8 fe2c 	bl	8000458 <__aeabi_dcmplt>
 8007800:	2800      	cmp	r0, #0
 8007802:	d00b      	beq.n	800781c <_dtoa_r+0x170>
 8007804:	9802      	ldr	r0, [sp, #8]
 8007806:	f7fb f94d 	bl	8002aa4 <__aeabi_i2d>
 800780a:	002b      	movs	r3, r5
 800780c:	0022      	movs	r2, r4
 800780e:	f7f8 fe1d 	bl	800044c <__aeabi_dcmpeq>
 8007812:	4243      	negs	r3, r0
 8007814:	4158      	adcs	r0, r3
 8007816:	9b02      	ldr	r3, [sp, #8]
 8007818:	1a1b      	subs	r3, r3, r0
 800781a:	9302      	str	r3, [sp, #8]
 800781c:	2301      	movs	r3, #1
 800781e:	9315      	str	r3, [sp, #84]	; 0x54
 8007820:	9b02      	ldr	r3, [sp, #8]
 8007822:	2b16      	cmp	r3, #22
 8007824:	d80f      	bhi.n	8007846 <_dtoa_r+0x19a>
 8007826:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007828:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800782a:	00da      	lsls	r2, r3, #3
 800782c:	4b7b      	ldr	r3, [pc, #492]	; (8007a1c <_dtoa_r+0x370>)
 800782e:	189b      	adds	r3, r3, r2
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f7f8 fe10 	bl	8000458 <__aeabi_dcmplt>
 8007838:	2800      	cmp	r0, #0
 800783a:	d049      	beq.n	80078d0 <_dtoa_r+0x224>
 800783c:	9b02      	ldr	r3, [sp, #8]
 800783e:	3b01      	subs	r3, #1
 8007840:	9302      	str	r3, [sp, #8]
 8007842:	2300      	movs	r3, #0
 8007844:	9315      	str	r3, [sp, #84]	; 0x54
 8007846:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007848:	1b9e      	subs	r6, r3, r6
 800784a:	2300      	movs	r3, #0
 800784c:	9308      	str	r3, [sp, #32]
 800784e:	0033      	movs	r3, r6
 8007850:	3b01      	subs	r3, #1
 8007852:	930d      	str	r3, [sp, #52]	; 0x34
 8007854:	d504      	bpl.n	8007860 <_dtoa_r+0x1b4>
 8007856:	2301      	movs	r3, #1
 8007858:	1b9b      	subs	r3, r3, r6
 800785a:	9308      	str	r3, [sp, #32]
 800785c:	2300      	movs	r3, #0
 800785e:	930d      	str	r3, [sp, #52]	; 0x34
 8007860:	9b02      	ldr	r3, [sp, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	db36      	blt.n	80078d4 <_dtoa_r+0x228>
 8007866:	9a02      	ldr	r2, [sp, #8]
 8007868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800786a:	4694      	mov	ip, r2
 800786c:	4463      	add	r3, ip
 800786e:	930d      	str	r3, [sp, #52]	; 0x34
 8007870:	2300      	movs	r3, #0
 8007872:	9214      	str	r2, [sp, #80]	; 0x50
 8007874:	930e      	str	r3, [sp, #56]	; 0x38
 8007876:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007878:	2401      	movs	r4, #1
 800787a:	2b09      	cmp	r3, #9
 800787c:	d862      	bhi.n	8007944 <_dtoa_r+0x298>
 800787e:	2b05      	cmp	r3, #5
 8007880:	dd02      	ble.n	8007888 <_dtoa_r+0x1dc>
 8007882:	2400      	movs	r4, #0
 8007884:	3b04      	subs	r3, #4
 8007886:	9322      	str	r3, [sp, #136]	; 0x88
 8007888:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800788a:	1e98      	subs	r0, r3, #2
 800788c:	2803      	cmp	r0, #3
 800788e:	d862      	bhi.n	8007956 <_dtoa_r+0x2aa>
 8007890:	f7f8 fc42 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007894:	56343629 	.word	0x56343629
 8007898:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800789a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800789c:	189e      	adds	r6, r3, r2
 800789e:	4b60      	ldr	r3, [pc, #384]	; (8007a20 <_dtoa_r+0x374>)
 80078a0:	18f2      	adds	r2, r6, r3
 80078a2:	2a20      	cmp	r2, #32
 80078a4:	dd0f      	ble.n	80078c6 <_dtoa_r+0x21a>
 80078a6:	2340      	movs	r3, #64	; 0x40
 80078a8:	1a9b      	subs	r3, r3, r2
 80078aa:	409d      	lsls	r5, r3
 80078ac:	4b5d      	ldr	r3, [pc, #372]	; (8007a24 <_dtoa_r+0x378>)
 80078ae:	9802      	ldr	r0, [sp, #8]
 80078b0:	18f3      	adds	r3, r6, r3
 80078b2:	40d8      	lsrs	r0, r3
 80078b4:	4328      	orrs	r0, r5
 80078b6:	f7fb f925 	bl	8002b04 <__aeabi_ui2d>
 80078ba:	2301      	movs	r3, #1
 80078bc:	4c5a      	ldr	r4, [pc, #360]	; (8007a28 <_dtoa_r+0x37c>)
 80078be:	3e01      	subs	r6, #1
 80078c0:	1909      	adds	r1, r1, r4
 80078c2:	9316      	str	r3, [sp, #88]	; 0x58
 80078c4:	e776      	b.n	80077b4 <_dtoa_r+0x108>
 80078c6:	2320      	movs	r3, #32
 80078c8:	9802      	ldr	r0, [sp, #8]
 80078ca:	1a9b      	subs	r3, r3, r2
 80078cc:	4098      	lsls	r0, r3
 80078ce:	e7f2      	b.n	80078b6 <_dtoa_r+0x20a>
 80078d0:	9015      	str	r0, [sp, #84]	; 0x54
 80078d2:	e7b8      	b.n	8007846 <_dtoa_r+0x19a>
 80078d4:	9b08      	ldr	r3, [sp, #32]
 80078d6:	9a02      	ldr	r2, [sp, #8]
 80078d8:	1a9b      	subs	r3, r3, r2
 80078da:	9308      	str	r3, [sp, #32]
 80078dc:	4253      	negs	r3, r2
 80078de:	930e      	str	r3, [sp, #56]	; 0x38
 80078e0:	2300      	movs	r3, #0
 80078e2:	9314      	str	r3, [sp, #80]	; 0x50
 80078e4:	e7c7      	b.n	8007876 <_dtoa_r+0x1ca>
 80078e6:	2300      	movs	r3, #0
 80078e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80078ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dc36      	bgt.n	800795e <_dtoa_r+0x2b2>
 80078f0:	2301      	movs	r3, #1
 80078f2:	001a      	movs	r2, r3
 80078f4:	930c      	str	r3, [sp, #48]	; 0x30
 80078f6:	9306      	str	r3, [sp, #24]
 80078f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80078fa:	e00d      	b.n	8007918 <_dtoa_r+0x26c>
 80078fc:	2301      	movs	r3, #1
 80078fe:	e7f3      	b.n	80078e8 <_dtoa_r+0x23c>
 8007900:	2300      	movs	r3, #0
 8007902:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007904:	930f      	str	r3, [sp, #60]	; 0x3c
 8007906:	4694      	mov	ip, r2
 8007908:	9b02      	ldr	r3, [sp, #8]
 800790a:	4463      	add	r3, ip
 800790c:	930c      	str	r3, [sp, #48]	; 0x30
 800790e:	3301      	adds	r3, #1
 8007910:	9306      	str	r3, [sp, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	dc00      	bgt.n	8007918 <_dtoa_r+0x26c>
 8007916:	2301      	movs	r3, #1
 8007918:	2200      	movs	r2, #0
 800791a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800791c:	6042      	str	r2, [r0, #4]
 800791e:	3204      	adds	r2, #4
 8007920:	0015      	movs	r5, r2
 8007922:	3514      	adds	r5, #20
 8007924:	6841      	ldr	r1, [r0, #4]
 8007926:	429d      	cmp	r5, r3
 8007928:	d91d      	bls.n	8007966 <_dtoa_r+0x2ba>
 800792a:	0038      	movs	r0, r7
 800792c:	f000 ff42 	bl	80087b4 <_Balloc>
 8007930:	9005      	str	r0, [sp, #20]
 8007932:	2800      	cmp	r0, #0
 8007934:	d11b      	bne.n	800796e <_dtoa_r+0x2c2>
 8007936:	21d5      	movs	r1, #213	; 0xd5
 8007938:	0002      	movs	r2, r0
 800793a:	4b3c      	ldr	r3, [pc, #240]	; (8007a2c <_dtoa_r+0x380>)
 800793c:	0049      	lsls	r1, r1, #1
 800793e:	e6ca      	b.n	80076d6 <_dtoa_r+0x2a>
 8007940:	2301      	movs	r3, #1
 8007942:	e7de      	b.n	8007902 <_dtoa_r+0x256>
 8007944:	2300      	movs	r3, #0
 8007946:	940f      	str	r4, [sp, #60]	; 0x3c
 8007948:	9322      	str	r3, [sp, #136]	; 0x88
 800794a:	3b01      	subs	r3, #1
 800794c:	930c      	str	r3, [sp, #48]	; 0x30
 800794e:	9306      	str	r3, [sp, #24]
 8007950:	2200      	movs	r2, #0
 8007952:	3313      	adds	r3, #19
 8007954:	e7d0      	b.n	80078f8 <_dtoa_r+0x24c>
 8007956:	2301      	movs	r3, #1
 8007958:	930f      	str	r3, [sp, #60]	; 0x3c
 800795a:	3b02      	subs	r3, #2
 800795c:	e7f6      	b.n	800794c <_dtoa_r+0x2a0>
 800795e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007960:	930c      	str	r3, [sp, #48]	; 0x30
 8007962:	9306      	str	r3, [sp, #24]
 8007964:	e7d8      	b.n	8007918 <_dtoa_r+0x26c>
 8007966:	3101      	adds	r1, #1
 8007968:	6041      	str	r1, [r0, #4]
 800796a:	0052      	lsls	r2, r2, #1
 800796c:	e7d8      	b.n	8007920 <_dtoa_r+0x274>
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	9a05      	ldr	r2, [sp, #20]
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	9b06      	ldr	r3, [sp, #24]
 8007976:	2b0e      	cmp	r3, #14
 8007978:	d900      	bls.n	800797c <_dtoa_r+0x2d0>
 800797a:	e0eb      	b.n	8007b54 <_dtoa_r+0x4a8>
 800797c:	2c00      	cmp	r4, #0
 800797e:	d100      	bne.n	8007982 <_dtoa_r+0x2d6>
 8007980:	e0e8      	b.n	8007b54 <_dtoa_r+0x4a8>
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dd68      	ble.n	8007a5a <_dtoa_r+0x3ae>
 8007988:	001a      	movs	r2, r3
 800798a:	210f      	movs	r1, #15
 800798c:	4b23      	ldr	r3, [pc, #140]	; (8007a1c <_dtoa_r+0x370>)
 800798e:	400a      	ands	r2, r1
 8007990:	00d2      	lsls	r2, r2, #3
 8007992:	189b      	adds	r3, r3, r2
 8007994:	681d      	ldr	r5, [r3, #0]
 8007996:	685e      	ldr	r6, [r3, #4]
 8007998:	9b02      	ldr	r3, [sp, #8]
 800799a:	111c      	asrs	r4, r3, #4
 800799c:	2302      	movs	r3, #2
 800799e:	9310      	str	r3, [sp, #64]	; 0x40
 80079a0:	9b02      	ldr	r3, [sp, #8]
 80079a2:	05db      	lsls	r3, r3, #23
 80079a4:	d50b      	bpl.n	80079be <_dtoa_r+0x312>
 80079a6:	4b22      	ldr	r3, [pc, #136]	; (8007a30 <_dtoa_r+0x384>)
 80079a8:	400c      	ands	r4, r1
 80079aa:	6a1a      	ldr	r2, [r3, #32]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	9812      	ldr	r0, [sp, #72]	; 0x48
 80079b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80079b2:	f7f9 fe1f 	bl	80015f4 <__aeabi_ddiv>
 80079b6:	2303      	movs	r3, #3
 80079b8:	900a      	str	r0, [sp, #40]	; 0x28
 80079ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80079bc:	9310      	str	r3, [sp, #64]	; 0x40
 80079be:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <_dtoa_r+0x384>)
 80079c0:	9307      	str	r3, [sp, #28]
 80079c2:	2c00      	cmp	r4, #0
 80079c4:	d136      	bne.n	8007a34 <_dtoa_r+0x388>
 80079c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079ca:	002a      	movs	r2, r5
 80079cc:	0033      	movs	r3, r6
 80079ce:	f7f9 fe11 	bl	80015f4 <__aeabi_ddiv>
 80079d2:	900a      	str	r0, [sp, #40]	; 0x28
 80079d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80079d6:	e05c      	b.n	8007a92 <_dtoa_r+0x3e6>
 80079d8:	08009715 	.word	0x08009715
 80079dc:	0800972c 	.word	0x0800972c
 80079e0:	7ff00000 	.word	0x7ff00000
 80079e4:	0000270f 	.word	0x0000270f
 80079e8:	08009711 	.word	0x08009711
 80079ec:	08009714 	.word	0x08009714
 80079f0:	080096e4 	.word	0x080096e4
 80079f4:	080096e5 	.word	0x080096e5
 80079f8:	3ff00000 	.word	0x3ff00000
 80079fc:	fffffc01 	.word	0xfffffc01
 8007a00:	3ff80000 	.word	0x3ff80000
 8007a04:	636f4361 	.word	0x636f4361
 8007a08:	3fd287a7 	.word	0x3fd287a7
 8007a0c:	8b60c8b3 	.word	0x8b60c8b3
 8007a10:	3fc68a28 	.word	0x3fc68a28
 8007a14:	509f79fb 	.word	0x509f79fb
 8007a18:	3fd34413 	.word	0x3fd34413
 8007a1c:	08009888 	.word	0x08009888
 8007a20:	00000432 	.word	0x00000432
 8007a24:	00000412 	.word	0x00000412
 8007a28:	fe100000 	.word	0xfe100000
 8007a2c:	0800978b 	.word	0x0800978b
 8007a30:	08009860 	.word	0x08009860
 8007a34:	2301      	movs	r3, #1
 8007a36:	421c      	tst	r4, r3
 8007a38:	d00b      	beq.n	8007a52 <_dtoa_r+0x3a6>
 8007a3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a3c:	0028      	movs	r0, r5
 8007a3e:	3301      	adds	r3, #1
 8007a40:	9310      	str	r3, [sp, #64]	; 0x40
 8007a42:	9b07      	ldr	r3, [sp, #28]
 8007a44:	0031      	movs	r1, r6
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f7fa f9d9 	bl	8001e00 <__aeabi_dmul>
 8007a4e:	0005      	movs	r5, r0
 8007a50:	000e      	movs	r6, r1
 8007a52:	9b07      	ldr	r3, [sp, #28]
 8007a54:	1064      	asrs	r4, r4, #1
 8007a56:	3308      	adds	r3, #8
 8007a58:	e7b2      	b.n	80079c0 <_dtoa_r+0x314>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	9310      	str	r3, [sp, #64]	; 0x40
 8007a5e:	9b02      	ldr	r3, [sp, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d016      	beq.n	8007a92 <_dtoa_r+0x3e6>
 8007a64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007a66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007a68:	425c      	negs	r4, r3
 8007a6a:	230f      	movs	r3, #15
 8007a6c:	4ab5      	ldr	r2, [pc, #724]	; (8007d44 <_dtoa_r+0x698>)
 8007a6e:	4023      	ands	r3, r4
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	18d3      	adds	r3, r2, r3
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f7fa f9c2 	bl	8001e00 <__aeabi_dmul>
 8007a7c:	2601      	movs	r6, #1
 8007a7e:	2300      	movs	r3, #0
 8007a80:	900a      	str	r0, [sp, #40]	; 0x28
 8007a82:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a84:	4db0      	ldr	r5, [pc, #704]	; (8007d48 <_dtoa_r+0x69c>)
 8007a86:	1124      	asrs	r4, r4, #4
 8007a88:	2c00      	cmp	r4, #0
 8007a8a:	d000      	beq.n	8007a8e <_dtoa_r+0x3e2>
 8007a8c:	e094      	b.n	8007bb8 <_dtoa_r+0x50c>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d19f      	bne.n	80079d2 <_dtoa_r+0x326>
 8007a92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d100      	bne.n	8007a9a <_dtoa_r+0x3ee>
 8007a98:	e09b      	b.n	8007bd2 <_dtoa_r+0x526>
 8007a9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	0020      	movs	r0, r4
 8007aa2:	0029      	movs	r1, r5
 8007aa4:	4ba9      	ldr	r3, [pc, #676]	; (8007d4c <_dtoa_r+0x6a0>)
 8007aa6:	f7f8 fcd7 	bl	8000458 <__aeabi_dcmplt>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d100      	bne.n	8007ab0 <_dtoa_r+0x404>
 8007aae:	e090      	b.n	8007bd2 <_dtoa_r+0x526>
 8007ab0:	9b06      	ldr	r3, [sp, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d100      	bne.n	8007ab8 <_dtoa_r+0x40c>
 8007ab6:	e08c      	b.n	8007bd2 <_dtoa_r+0x526>
 8007ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	dd46      	ble.n	8007b4c <_dtoa_r+0x4a0>
 8007abe:	9b02      	ldr	r3, [sp, #8]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	0020      	movs	r0, r4
 8007ac4:	0029      	movs	r1, r5
 8007ac6:	1e5e      	subs	r6, r3, #1
 8007ac8:	4ba1      	ldr	r3, [pc, #644]	; (8007d50 <_dtoa_r+0x6a4>)
 8007aca:	f7fa f999 	bl	8001e00 <__aeabi_dmul>
 8007ace:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ad0:	900a      	str	r0, [sp, #40]	; 0x28
 8007ad2:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	9310      	str	r3, [sp, #64]	; 0x40
 8007ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ada:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007adc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ade:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007ae0:	9307      	str	r3, [sp, #28]
 8007ae2:	f7fa ffdf 	bl	8002aa4 <__aeabi_i2d>
 8007ae6:	0022      	movs	r2, r4
 8007ae8:	002b      	movs	r3, r5
 8007aea:	f7fa f989 	bl	8001e00 <__aeabi_dmul>
 8007aee:	2200      	movs	r2, #0
 8007af0:	4b98      	ldr	r3, [pc, #608]	; (8007d54 <_dtoa_r+0x6a8>)
 8007af2:	f7f9 fa15 	bl	8000f20 <__aeabi_dadd>
 8007af6:	9010      	str	r0, [sp, #64]	; 0x40
 8007af8:	9111      	str	r1, [sp, #68]	; 0x44
 8007afa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007afc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007afe:	920a      	str	r2, [sp, #40]	; 0x28
 8007b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b02:	4a95      	ldr	r2, [pc, #596]	; (8007d58 <_dtoa_r+0x6ac>)
 8007b04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b06:	4694      	mov	ip, r2
 8007b08:	4463      	add	r3, ip
 8007b0a:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b0e:	9b07      	ldr	r3, [sp, #28]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d161      	bne.n	8007bd8 <_dtoa_r+0x52c>
 8007b14:	2200      	movs	r2, #0
 8007b16:	0020      	movs	r0, r4
 8007b18:	0029      	movs	r1, r5
 8007b1a:	4b90      	ldr	r3, [pc, #576]	; (8007d5c <_dtoa_r+0x6b0>)
 8007b1c:	f7fa fbdc 	bl	80022d8 <__aeabi_dsub>
 8007b20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b24:	0004      	movs	r4, r0
 8007b26:	000d      	movs	r5, r1
 8007b28:	f7f8 fcaa 	bl	8000480 <__aeabi_dcmpgt>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d000      	beq.n	8007b32 <_dtoa_r+0x486>
 8007b30:	e2b5      	b.n	800809e <_dtoa_r+0x9f2>
 8007b32:	488b      	ldr	r0, [pc, #556]	; (8007d60 <_dtoa_r+0x6b4>)
 8007b34:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007b36:	4684      	mov	ip, r0
 8007b38:	4461      	add	r1, ip
 8007b3a:	000b      	movs	r3, r1
 8007b3c:	0020      	movs	r0, r4
 8007b3e:	0029      	movs	r1, r5
 8007b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b42:	f7f8 fc89 	bl	8000458 <__aeabi_dcmplt>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d000      	beq.n	8007b4c <_dtoa_r+0x4a0>
 8007b4a:	e2a5      	b.n	8008098 <_dtoa_r+0x9ec>
 8007b4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007b50:	930a      	str	r3, [sp, #40]	; 0x28
 8007b52:	940b      	str	r4, [sp, #44]	; 0x2c
 8007b54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	da00      	bge.n	8007b5c <_dtoa_r+0x4b0>
 8007b5a:	e171      	b.n	8007e40 <_dtoa_r+0x794>
 8007b5c:	9a02      	ldr	r2, [sp, #8]
 8007b5e:	2a0e      	cmp	r2, #14
 8007b60:	dd00      	ble.n	8007b64 <_dtoa_r+0x4b8>
 8007b62:	e16d      	b.n	8007e40 <_dtoa_r+0x794>
 8007b64:	4b77      	ldr	r3, [pc, #476]	; (8007d44 <_dtoa_r+0x698>)
 8007b66:	00d2      	lsls	r2, r2, #3
 8007b68:	189b      	adds	r3, r3, r2
 8007b6a:	685c      	ldr	r4, [r3, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	9308      	str	r3, [sp, #32]
 8007b70:	9409      	str	r4, [sp, #36]	; 0x24
 8007b72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	db00      	blt.n	8007b7a <_dtoa_r+0x4ce>
 8007b78:	e0f6      	b.n	8007d68 <_dtoa_r+0x6bc>
 8007b7a:	9b06      	ldr	r3, [sp, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dd00      	ble.n	8007b82 <_dtoa_r+0x4d6>
 8007b80:	e0f2      	b.n	8007d68 <_dtoa_r+0x6bc>
 8007b82:	d000      	beq.n	8007b86 <_dtoa_r+0x4da>
 8007b84:	e288      	b.n	8008098 <_dtoa_r+0x9ec>
 8007b86:	9808      	ldr	r0, [sp, #32]
 8007b88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	4b73      	ldr	r3, [pc, #460]	; (8007d5c <_dtoa_r+0x6b0>)
 8007b8e:	f7fa f937 	bl	8001e00 <__aeabi_dmul>
 8007b92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b96:	f7f8 fc7d 	bl	8000494 <__aeabi_dcmpge>
 8007b9a:	9e06      	ldr	r6, [sp, #24]
 8007b9c:	0035      	movs	r5, r6
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d000      	beq.n	8007ba4 <_dtoa_r+0x4f8>
 8007ba2:	e25f      	b.n	8008064 <_dtoa_r+0x9b8>
 8007ba4:	9b05      	ldr	r3, [sp, #20]
 8007ba6:	9a05      	ldr	r2, [sp, #20]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	9307      	str	r3, [sp, #28]
 8007bac:	2331      	movs	r3, #49	; 0x31
 8007bae:	7013      	strb	r3, [r2, #0]
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	9302      	str	r3, [sp, #8]
 8007bb6:	e25a      	b.n	800806e <_dtoa_r+0x9c2>
 8007bb8:	4234      	tst	r4, r6
 8007bba:	d007      	beq.n	8007bcc <_dtoa_r+0x520>
 8007bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	9310      	str	r3, [sp, #64]	; 0x40
 8007bc2:	682a      	ldr	r2, [r5, #0]
 8007bc4:	686b      	ldr	r3, [r5, #4]
 8007bc6:	f7fa f91b 	bl	8001e00 <__aeabi_dmul>
 8007bca:	0033      	movs	r3, r6
 8007bcc:	1064      	asrs	r4, r4, #1
 8007bce:	3508      	adds	r5, #8
 8007bd0:	e75a      	b.n	8007a88 <_dtoa_r+0x3dc>
 8007bd2:	9e02      	ldr	r6, [sp, #8]
 8007bd4:	9b06      	ldr	r3, [sp, #24]
 8007bd6:	e780      	b.n	8007ada <_dtoa_r+0x42e>
 8007bd8:	9b07      	ldr	r3, [sp, #28]
 8007bda:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007bdc:	1e5a      	subs	r2, r3, #1
 8007bde:	4b59      	ldr	r3, [pc, #356]	; (8007d44 <_dtoa_r+0x698>)
 8007be0:	00d2      	lsls	r2, r2, #3
 8007be2:	189b      	adds	r3, r3, r2
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2900      	cmp	r1, #0
 8007bea:	d051      	beq.n	8007c90 <_dtoa_r+0x5e4>
 8007bec:	2000      	movs	r0, #0
 8007bee:	495d      	ldr	r1, [pc, #372]	; (8007d64 <_dtoa_r+0x6b8>)
 8007bf0:	f7f9 fd00 	bl	80015f4 <__aeabi_ddiv>
 8007bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf8:	f7fa fb6e 	bl	80022d8 <__aeabi_dsub>
 8007bfc:	9a05      	ldr	r2, [sp, #20]
 8007bfe:	9b05      	ldr	r3, [sp, #20]
 8007c00:	4694      	mov	ip, r2
 8007c02:	9310      	str	r3, [sp, #64]	; 0x40
 8007c04:	9b07      	ldr	r3, [sp, #28]
 8007c06:	900a      	str	r0, [sp, #40]	; 0x28
 8007c08:	910b      	str	r1, [sp, #44]	; 0x2c
 8007c0a:	4463      	add	r3, ip
 8007c0c:	9319      	str	r3, [sp, #100]	; 0x64
 8007c0e:	0029      	movs	r1, r5
 8007c10:	0020      	movs	r0, r4
 8007c12:	f7fa ff11 	bl	8002a38 <__aeabi_d2iz>
 8007c16:	9017      	str	r0, [sp, #92]	; 0x5c
 8007c18:	f7fa ff44 	bl	8002aa4 <__aeabi_i2d>
 8007c1c:	0002      	movs	r2, r0
 8007c1e:	000b      	movs	r3, r1
 8007c20:	0020      	movs	r0, r4
 8007c22:	0029      	movs	r1, r5
 8007c24:	f7fa fb58 	bl	80022d8 <__aeabi_dsub>
 8007c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	9307      	str	r3, [sp, #28]
 8007c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c32:	0004      	movs	r4, r0
 8007c34:	3330      	adds	r3, #48	; 0x30
 8007c36:	7013      	strb	r3, [r2, #0]
 8007c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3c:	000d      	movs	r5, r1
 8007c3e:	f7f8 fc0b 	bl	8000458 <__aeabi_dcmplt>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d175      	bne.n	8007d32 <_dtoa_r+0x686>
 8007c46:	0022      	movs	r2, r4
 8007c48:	002b      	movs	r3, r5
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	493f      	ldr	r1, [pc, #252]	; (8007d4c <_dtoa_r+0x6a0>)
 8007c4e:	f7fa fb43 	bl	80022d8 <__aeabi_dsub>
 8007c52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c56:	f7f8 fbff 	bl	8000458 <__aeabi_dcmplt>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d000      	beq.n	8007c60 <_dtoa_r+0x5b4>
 8007c5e:	e0d1      	b.n	8007e04 <_dtoa_r+0x758>
 8007c60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c62:	9a07      	ldr	r2, [sp, #28]
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d100      	bne.n	8007c6a <_dtoa_r+0x5be>
 8007c68:	e770      	b.n	8007b4c <_dtoa_r+0x4a0>
 8007c6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4b37      	ldr	r3, [pc, #220]	; (8007d50 <_dtoa_r+0x6a4>)
 8007c72:	f7fa f8c5 	bl	8001e00 <__aeabi_dmul>
 8007c76:	4b36      	ldr	r3, [pc, #216]	; (8007d50 <_dtoa_r+0x6a4>)
 8007c78:	900a      	str	r0, [sp, #40]	; 0x28
 8007c7a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	0020      	movs	r0, r4
 8007c80:	0029      	movs	r1, r5
 8007c82:	f7fa f8bd 	bl	8001e00 <__aeabi_dmul>
 8007c86:	9b07      	ldr	r3, [sp, #28]
 8007c88:	0004      	movs	r4, r0
 8007c8a:	000d      	movs	r5, r1
 8007c8c:	9310      	str	r3, [sp, #64]	; 0x40
 8007c8e:	e7be      	b.n	8007c0e <_dtoa_r+0x562>
 8007c90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c94:	f7fa f8b4 	bl	8001e00 <__aeabi_dmul>
 8007c98:	9a05      	ldr	r2, [sp, #20]
 8007c9a:	9b05      	ldr	r3, [sp, #20]
 8007c9c:	4694      	mov	ip, r2
 8007c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca0:	9b07      	ldr	r3, [sp, #28]
 8007ca2:	9010      	str	r0, [sp, #64]	; 0x40
 8007ca4:	9111      	str	r1, [sp, #68]	; 0x44
 8007ca6:	4463      	add	r3, ip
 8007ca8:	9319      	str	r3, [sp, #100]	; 0x64
 8007caa:	0029      	movs	r1, r5
 8007cac:	0020      	movs	r0, r4
 8007cae:	f7fa fec3 	bl	8002a38 <__aeabi_d2iz>
 8007cb2:	9017      	str	r0, [sp, #92]	; 0x5c
 8007cb4:	f7fa fef6 	bl	8002aa4 <__aeabi_i2d>
 8007cb8:	0002      	movs	r2, r0
 8007cba:	000b      	movs	r3, r1
 8007cbc:	0020      	movs	r0, r4
 8007cbe:	0029      	movs	r1, r5
 8007cc0:	f7fa fb0a 	bl	80022d8 <__aeabi_dsub>
 8007cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cc8:	3330      	adds	r3, #48	; 0x30
 8007cca:	7013      	strb	r3, [r2, #0]
 8007ccc:	0013      	movs	r3, r2
 8007cce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	0004      	movs	r4, r0
 8007cd4:	000d      	movs	r5, r1
 8007cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d12c      	bne.n	8007d36 <_dtoa_r+0x68a>
 8007cdc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007cde:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ce0:	9a05      	ldr	r2, [sp, #20]
 8007ce2:	9b07      	ldr	r3, [sp, #28]
 8007ce4:	4694      	mov	ip, r2
 8007ce6:	4463      	add	r3, ip
 8007ce8:	2200      	movs	r2, #0
 8007cea:	9307      	str	r3, [sp, #28]
 8007cec:	4b1d      	ldr	r3, [pc, #116]	; (8007d64 <_dtoa_r+0x6b8>)
 8007cee:	f7f9 f917 	bl	8000f20 <__aeabi_dadd>
 8007cf2:	0002      	movs	r2, r0
 8007cf4:	000b      	movs	r3, r1
 8007cf6:	0020      	movs	r0, r4
 8007cf8:	0029      	movs	r1, r5
 8007cfa:	f7f8 fbc1 	bl	8000480 <__aeabi_dcmpgt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d000      	beq.n	8007d04 <_dtoa_r+0x658>
 8007d02:	e07f      	b.n	8007e04 <_dtoa_r+0x758>
 8007d04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d08:	2000      	movs	r0, #0
 8007d0a:	4916      	ldr	r1, [pc, #88]	; (8007d64 <_dtoa_r+0x6b8>)
 8007d0c:	f7fa fae4 	bl	80022d8 <__aeabi_dsub>
 8007d10:	0002      	movs	r2, r0
 8007d12:	000b      	movs	r3, r1
 8007d14:	0020      	movs	r0, r4
 8007d16:	0029      	movs	r1, r5
 8007d18:	f7f8 fb9e 	bl	8000458 <__aeabi_dcmplt>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d100      	bne.n	8007d22 <_dtoa_r+0x676>
 8007d20:	e714      	b.n	8007b4c <_dtoa_r+0x4a0>
 8007d22:	9b07      	ldr	r3, [sp, #28]
 8007d24:	001a      	movs	r2, r3
 8007d26:	3a01      	subs	r2, #1
 8007d28:	9207      	str	r2, [sp, #28]
 8007d2a:	7812      	ldrb	r2, [r2, #0]
 8007d2c:	2a30      	cmp	r2, #48	; 0x30
 8007d2e:	d0f8      	beq.n	8007d22 <_dtoa_r+0x676>
 8007d30:	9307      	str	r3, [sp, #28]
 8007d32:	9602      	str	r6, [sp, #8]
 8007d34:	e054      	b.n	8007de0 <_dtoa_r+0x734>
 8007d36:	2200      	movs	r2, #0
 8007d38:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <_dtoa_r+0x6a4>)
 8007d3a:	f7fa f861 	bl	8001e00 <__aeabi_dmul>
 8007d3e:	0004      	movs	r4, r0
 8007d40:	000d      	movs	r5, r1
 8007d42:	e7b2      	b.n	8007caa <_dtoa_r+0x5fe>
 8007d44:	08009888 	.word	0x08009888
 8007d48:	08009860 	.word	0x08009860
 8007d4c:	3ff00000 	.word	0x3ff00000
 8007d50:	40240000 	.word	0x40240000
 8007d54:	401c0000 	.word	0x401c0000
 8007d58:	fcc00000 	.word	0xfcc00000
 8007d5c:	40140000 	.word	0x40140000
 8007d60:	7cc00000 	.word	0x7cc00000
 8007d64:	3fe00000 	.word	0x3fe00000
 8007d68:	9b06      	ldr	r3, [sp, #24]
 8007d6a:	9e05      	ldr	r6, [sp, #20]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	199b      	adds	r3, r3, r6
 8007d70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d72:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007d74:	930a      	str	r3, [sp, #40]	; 0x28
 8007d76:	9a08      	ldr	r2, [sp, #32]
 8007d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7a:	0020      	movs	r0, r4
 8007d7c:	0029      	movs	r1, r5
 8007d7e:	f7f9 fc39 	bl	80015f4 <__aeabi_ddiv>
 8007d82:	f7fa fe59 	bl	8002a38 <__aeabi_d2iz>
 8007d86:	9006      	str	r0, [sp, #24]
 8007d88:	f7fa fe8c 	bl	8002aa4 <__aeabi_i2d>
 8007d8c:	9a08      	ldr	r2, [sp, #32]
 8007d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d90:	f7fa f836 	bl	8001e00 <__aeabi_dmul>
 8007d94:	0002      	movs	r2, r0
 8007d96:	000b      	movs	r3, r1
 8007d98:	0020      	movs	r0, r4
 8007d9a:	0029      	movs	r1, r5
 8007d9c:	f7fa fa9c 	bl	80022d8 <__aeabi_dsub>
 8007da0:	0033      	movs	r3, r6
 8007da2:	9a06      	ldr	r2, [sp, #24]
 8007da4:	3601      	adds	r6, #1
 8007da6:	3230      	adds	r2, #48	; 0x30
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dac:	9607      	str	r6, [sp, #28]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d139      	bne.n	8007e26 <_dtoa_r+0x77a>
 8007db2:	0002      	movs	r2, r0
 8007db4:	000b      	movs	r3, r1
 8007db6:	f7f9 f8b3 	bl	8000f20 <__aeabi_dadd>
 8007dba:	9a08      	ldr	r2, [sp, #32]
 8007dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dbe:	0004      	movs	r4, r0
 8007dc0:	000d      	movs	r5, r1
 8007dc2:	f7f8 fb5d 	bl	8000480 <__aeabi_dcmpgt>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d11b      	bne.n	8007e02 <_dtoa_r+0x756>
 8007dca:	9a08      	ldr	r2, [sp, #32]
 8007dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dce:	0020      	movs	r0, r4
 8007dd0:	0029      	movs	r1, r5
 8007dd2:	f7f8 fb3b 	bl	800044c <__aeabi_dcmpeq>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d002      	beq.n	8007de0 <_dtoa_r+0x734>
 8007dda:	9b06      	ldr	r3, [sp, #24]
 8007ddc:	07db      	lsls	r3, r3, #31
 8007dde:	d410      	bmi.n	8007e02 <_dtoa_r+0x756>
 8007de0:	0038      	movs	r0, r7
 8007de2:	9904      	ldr	r1, [sp, #16]
 8007de4:	f000 fd2a 	bl	800883c <_Bfree>
 8007de8:	2300      	movs	r3, #0
 8007dea:	9a07      	ldr	r2, [sp, #28]
 8007dec:	9802      	ldr	r0, [sp, #8]
 8007dee:	7013      	strb	r3, [r2, #0]
 8007df0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007df2:	3001      	adds	r0, #1
 8007df4:	6018      	str	r0, [r3, #0]
 8007df6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d100      	bne.n	8007dfe <_dtoa_r+0x752>
 8007dfc:	e4a3      	b.n	8007746 <_dtoa_r+0x9a>
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	e4a1      	b.n	8007746 <_dtoa_r+0x9a>
 8007e02:	9e02      	ldr	r6, [sp, #8]
 8007e04:	9b07      	ldr	r3, [sp, #28]
 8007e06:	9307      	str	r3, [sp, #28]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	2a39      	cmp	r2, #57	; 0x39
 8007e0e:	d106      	bne.n	8007e1e <_dtoa_r+0x772>
 8007e10:	9a05      	ldr	r2, [sp, #20]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d1f7      	bne.n	8007e06 <_dtoa_r+0x75a>
 8007e16:	2230      	movs	r2, #48	; 0x30
 8007e18:	9905      	ldr	r1, [sp, #20]
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	700a      	strb	r2, [r1, #0]
 8007e1e:	781a      	ldrb	r2, [r3, #0]
 8007e20:	3201      	adds	r2, #1
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	e785      	b.n	8007d32 <_dtoa_r+0x686>
 8007e26:	2200      	movs	r2, #0
 8007e28:	4bad      	ldr	r3, [pc, #692]	; (80080e0 <_dtoa_r+0xa34>)
 8007e2a:	f7f9 ffe9 	bl	8001e00 <__aeabi_dmul>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2300      	movs	r3, #0
 8007e32:	0004      	movs	r4, r0
 8007e34:	000d      	movs	r5, r1
 8007e36:	f7f8 fb09 	bl	800044c <__aeabi_dcmpeq>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d09b      	beq.n	8007d76 <_dtoa_r+0x6ca>
 8007e3e:	e7cf      	b.n	8007de0 <_dtoa_r+0x734>
 8007e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e42:	2a00      	cmp	r2, #0
 8007e44:	d100      	bne.n	8007e48 <_dtoa_r+0x79c>
 8007e46:	e082      	b.n	8007f4e <_dtoa_r+0x8a2>
 8007e48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e4a:	2a01      	cmp	r2, #1
 8007e4c:	dc66      	bgt.n	8007f1c <_dtoa_r+0x870>
 8007e4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	d05f      	beq.n	8007f14 <_dtoa_r+0x868>
 8007e54:	4aa3      	ldr	r2, [pc, #652]	; (80080e4 <_dtoa_r+0xa38>)
 8007e56:	189b      	adds	r3, r3, r2
 8007e58:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007e5a:	9c08      	ldr	r4, [sp, #32]
 8007e5c:	9a08      	ldr	r2, [sp, #32]
 8007e5e:	2101      	movs	r1, #1
 8007e60:	18d2      	adds	r2, r2, r3
 8007e62:	9208      	str	r2, [sp, #32]
 8007e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e66:	0038      	movs	r0, r7
 8007e68:	18d3      	adds	r3, r2, r3
 8007e6a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e6c:	f000 fd96 	bl	800899c <__i2b>
 8007e70:	0005      	movs	r5, r0
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	dd0e      	ble.n	8007e94 <_dtoa_r+0x7e8>
 8007e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dd0b      	ble.n	8007e94 <_dtoa_r+0x7e8>
 8007e7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e7e:	0023      	movs	r3, r4
 8007e80:	4294      	cmp	r4, r2
 8007e82:	dd00      	ble.n	8007e86 <_dtoa_r+0x7da>
 8007e84:	0013      	movs	r3, r2
 8007e86:	9a08      	ldr	r2, [sp, #32]
 8007e88:	1ae4      	subs	r4, r4, r3
 8007e8a:	1ad2      	subs	r2, r2, r3
 8007e8c:	9208      	str	r2, [sp, #32]
 8007e8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	930d      	str	r3, [sp, #52]	; 0x34
 8007e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01f      	beq.n	8007eda <_dtoa_r+0x82e>
 8007e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d05a      	beq.n	8007f56 <_dtoa_r+0x8aa>
 8007ea0:	2e00      	cmp	r6, #0
 8007ea2:	dd11      	ble.n	8007ec8 <_dtoa_r+0x81c>
 8007ea4:	0029      	movs	r1, r5
 8007ea6:	0032      	movs	r2, r6
 8007ea8:	0038      	movs	r0, r7
 8007eaa:	f000 fe3d 	bl	8008b28 <__pow5mult>
 8007eae:	9a04      	ldr	r2, [sp, #16]
 8007eb0:	0001      	movs	r1, r0
 8007eb2:	0005      	movs	r5, r0
 8007eb4:	0038      	movs	r0, r7
 8007eb6:	f000 fd87 	bl	80089c8 <__multiply>
 8007eba:	9904      	ldr	r1, [sp, #16]
 8007ebc:	9007      	str	r0, [sp, #28]
 8007ebe:	0038      	movs	r0, r7
 8007ec0:	f000 fcbc 	bl	800883c <_Bfree>
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eca:	1b9a      	subs	r2, r3, r6
 8007ecc:	42b3      	cmp	r3, r6
 8007ece:	d004      	beq.n	8007eda <_dtoa_r+0x82e>
 8007ed0:	0038      	movs	r0, r7
 8007ed2:	9904      	ldr	r1, [sp, #16]
 8007ed4:	f000 fe28 	bl	8008b28 <__pow5mult>
 8007ed8:	9004      	str	r0, [sp, #16]
 8007eda:	2101      	movs	r1, #1
 8007edc:	0038      	movs	r0, r7
 8007ede:	f000 fd5d 	bl	800899c <__i2b>
 8007ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ee4:	0006      	movs	r6, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dd37      	ble.n	8007f5a <_dtoa_r+0x8ae>
 8007eea:	001a      	movs	r2, r3
 8007eec:	0001      	movs	r1, r0
 8007eee:	0038      	movs	r0, r7
 8007ef0:	f000 fe1a 	bl	8008b28 <__pow5mult>
 8007ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ef6:	0006      	movs	r6, r0
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	dd33      	ble.n	8007f64 <_dtoa_r+0x8b8>
 8007efc:	2300      	movs	r3, #0
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	6933      	ldr	r3, [r6, #16]
 8007f02:	3303      	adds	r3, #3
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	18f3      	adds	r3, r6, r3
 8007f08:	6858      	ldr	r0, [r3, #4]
 8007f0a:	f000 fcff 	bl	800890c <__hi0bits>
 8007f0e:	2320      	movs	r3, #32
 8007f10:	1a18      	subs	r0, r3, r0
 8007f12:	e03f      	b.n	8007f94 <_dtoa_r+0x8e8>
 8007f14:	2336      	movs	r3, #54	; 0x36
 8007f16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	e79d      	b.n	8007e58 <_dtoa_r+0x7ac>
 8007f1c:	9b06      	ldr	r3, [sp, #24]
 8007f1e:	1e5e      	subs	r6, r3, #1
 8007f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f22:	42b3      	cmp	r3, r6
 8007f24:	db08      	blt.n	8007f38 <_dtoa_r+0x88c>
 8007f26:	1b9e      	subs	r6, r3, r6
 8007f28:	9b06      	ldr	r3, [sp, #24]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da0c      	bge.n	8007f48 <_dtoa_r+0x89c>
 8007f2e:	9b08      	ldr	r3, [sp, #32]
 8007f30:	9a06      	ldr	r2, [sp, #24]
 8007f32:	1a9c      	subs	r4, r3, r2
 8007f34:	2300      	movs	r3, #0
 8007f36:	e791      	b.n	8007e5c <_dtoa_r+0x7b0>
 8007f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f3c:	1af3      	subs	r3, r6, r3
 8007f3e:	18d3      	adds	r3, r2, r3
 8007f40:	960e      	str	r6, [sp, #56]	; 0x38
 8007f42:	9314      	str	r3, [sp, #80]	; 0x50
 8007f44:	2600      	movs	r6, #0
 8007f46:	e7ef      	b.n	8007f28 <_dtoa_r+0x87c>
 8007f48:	9c08      	ldr	r4, [sp, #32]
 8007f4a:	9b06      	ldr	r3, [sp, #24]
 8007f4c:	e786      	b.n	8007e5c <_dtoa_r+0x7b0>
 8007f4e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007f50:	9c08      	ldr	r4, [sp, #32]
 8007f52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f54:	e78d      	b.n	8007e72 <_dtoa_r+0x7c6>
 8007f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f58:	e7ba      	b.n	8007ed0 <_dtoa_r+0x824>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9307      	str	r3, [sp, #28]
 8007f5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	dc13      	bgt.n	8007f8c <_dtoa_r+0x8e0>
 8007f64:	2300      	movs	r3, #0
 8007f66:	9307      	str	r3, [sp, #28]
 8007f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10e      	bne.n	8007f8c <_dtoa_r+0x8e0>
 8007f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f70:	031b      	lsls	r3, r3, #12
 8007f72:	d10b      	bne.n	8007f8c <_dtoa_r+0x8e0>
 8007f74:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007f76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f78:	4213      	tst	r3, r2
 8007f7a:	d007      	beq.n	8007f8c <_dtoa_r+0x8e0>
 8007f7c:	9b08      	ldr	r3, [sp, #32]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	9308      	str	r3, [sp, #32]
 8007f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f84:	3301      	adds	r3, #1
 8007f86:	930d      	str	r3, [sp, #52]	; 0x34
 8007f88:	2301      	movs	r3, #1
 8007f8a:	9307      	str	r3, [sp, #28]
 8007f8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f8e:	2001      	movs	r0, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1b5      	bne.n	8007f00 <_dtoa_r+0x854>
 8007f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f96:	221f      	movs	r2, #31
 8007f98:	1818      	adds	r0, r3, r0
 8007f9a:	0003      	movs	r3, r0
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	4210      	tst	r0, r2
 8007fa0:	d046      	beq.n	8008030 <_dtoa_r+0x984>
 8007fa2:	3201      	adds	r2, #1
 8007fa4:	1ad2      	subs	r2, r2, r3
 8007fa6:	2a04      	cmp	r2, #4
 8007fa8:	dd3f      	ble.n	800802a <_dtoa_r+0x97e>
 8007faa:	221c      	movs	r2, #28
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	9a08      	ldr	r2, [sp, #32]
 8007fb0:	18e4      	adds	r4, r4, r3
 8007fb2:	18d2      	adds	r2, r2, r3
 8007fb4:	9208      	str	r2, [sp, #32]
 8007fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fb8:	18d3      	adds	r3, r2, r3
 8007fba:	930d      	str	r3, [sp, #52]	; 0x34
 8007fbc:	9b08      	ldr	r3, [sp, #32]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd05      	ble.n	8007fce <_dtoa_r+0x922>
 8007fc2:	001a      	movs	r2, r3
 8007fc4:	0038      	movs	r0, r7
 8007fc6:	9904      	ldr	r1, [sp, #16]
 8007fc8:	f000 fe0a 	bl	8008be0 <__lshift>
 8007fcc:	9004      	str	r0, [sp, #16]
 8007fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dd05      	ble.n	8007fe0 <_dtoa_r+0x934>
 8007fd4:	0031      	movs	r1, r6
 8007fd6:	001a      	movs	r2, r3
 8007fd8:	0038      	movs	r0, r7
 8007fda:	f000 fe01 	bl	8008be0 <__lshift>
 8007fde:	0006      	movs	r6, r0
 8007fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d026      	beq.n	8008034 <_dtoa_r+0x988>
 8007fe6:	0031      	movs	r1, r6
 8007fe8:	9804      	ldr	r0, [sp, #16]
 8007fea:	f000 fe69 	bl	8008cc0 <__mcmp>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	da20      	bge.n	8008034 <_dtoa_r+0x988>
 8007ff2:	9b02      	ldr	r3, [sp, #8]
 8007ff4:	220a      	movs	r2, #10
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	9302      	str	r3, [sp, #8]
 8007ffa:	0038      	movs	r0, r7
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9904      	ldr	r1, [sp, #16]
 8008000:	f000 fc40 	bl	8008884 <__multadd>
 8008004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008006:	9004      	str	r0, [sp, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d100      	bne.n	800800e <_dtoa_r+0x962>
 800800c:	e160      	b.n	80082d0 <_dtoa_r+0xc24>
 800800e:	2300      	movs	r3, #0
 8008010:	0029      	movs	r1, r5
 8008012:	220a      	movs	r2, #10
 8008014:	0038      	movs	r0, r7
 8008016:	f000 fc35 	bl	8008884 <__multadd>
 800801a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800801c:	0005      	movs	r5, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	dc47      	bgt.n	80080b2 <_dtoa_r+0xa06>
 8008022:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008024:	2b02      	cmp	r3, #2
 8008026:	dc0d      	bgt.n	8008044 <_dtoa_r+0x998>
 8008028:	e043      	b.n	80080b2 <_dtoa_r+0xa06>
 800802a:	2a04      	cmp	r2, #4
 800802c:	d0c6      	beq.n	8007fbc <_dtoa_r+0x910>
 800802e:	0013      	movs	r3, r2
 8008030:	331c      	adds	r3, #28
 8008032:	e7bc      	b.n	8007fae <_dtoa_r+0x902>
 8008034:	9b06      	ldr	r3, [sp, #24]
 8008036:	2b00      	cmp	r3, #0
 8008038:	dc35      	bgt.n	80080a6 <_dtoa_r+0x9fa>
 800803a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800803c:	2b02      	cmp	r3, #2
 800803e:	dd32      	ble.n	80080a6 <_dtoa_r+0x9fa>
 8008040:	9b06      	ldr	r3, [sp, #24]
 8008042:	930c      	str	r3, [sp, #48]	; 0x30
 8008044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10c      	bne.n	8008064 <_dtoa_r+0x9b8>
 800804a:	0031      	movs	r1, r6
 800804c:	2205      	movs	r2, #5
 800804e:	0038      	movs	r0, r7
 8008050:	f000 fc18 	bl	8008884 <__multadd>
 8008054:	0006      	movs	r6, r0
 8008056:	0001      	movs	r1, r0
 8008058:	9804      	ldr	r0, [sp, #16]
 800805a:	f000 fe31 	bl	8008cc0 <__mcmp>
 800805e:	2800      	cmp	r0, #0
 8008060:	dd00      	ble.n	8008064 <_dtoa_r+0x9b8>
 8008062:	e59f      	b.n	8007ba4 <_dtoa_r+0x4f8>
 8008064:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008066:	43db      	mvns	r3, r3
 8008068:	9302      	str	r3, [sp, #8]
 800806a:	9b05      	ldr	r3, [sp, #20]
 800806c:	9307      	str	r3, [sp, #28]
 800806e:	2400      	movs	r4, #0
 8008070:	0031      	movs	r1, r6
 8008072:	0038      	movs	r0, r7
 8008074:	f000 fbe2 	bl	800883c <_Bfree>
 8008078:	2d00      	cmp	r5, #0
 800807a:	d100      	bne.n	800807e <_dtoa_r+0x9d2>
 800807c:	e6b0      	b.n	8007de0 <_dtoa_r+0x734>
 800807e:	2c00      	cmp	r4, #0
 8008080:	d005      	beq.n	800808e <_dtoa_r+0x9e2>
 8008082:	42ac      	cmp	r4, r5
 8008084:	d003      	beq.n	800808e <_dtoa_r+0x9e2>
 8008086:	0021      	movs	r1, r4
 8008088:	0038      	movs	r0, r7
 800808a:	f000 fbd7 	bl	800883c <_Bfree>
 800808e:	0029      	movs	r1, r5
 8008090:	0038      	movs	r0, r7
 8008092:	f000 fbd3 	bl	800883c <_Bfree>
 8008096:	e6a3      	b.n	8007de0 <_dtoa_r+0x734>
 8008098:	2600      	movs	r6, #0
 800809a:	0035      	movs	r5, r6
 800809c:	e7e2      	b.n	8008064 <_dtoa_r+0x9b8>
 800809e:	9602      	str	r6, [sp, #8]
 80080a0:	9e07      	ldr	r6, [sp, #28]
 80080a2:	0035      	movs	r5, r6
 80080a4:	e57e      	b.n	8007ba4 <_dtoa_r+0x4f8>
 80080a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d100      	bne.n	80080ae <_dtoa_r+0xa02>
 80080ac:	e0c8      	b.n	8008240 <_dtoa_r+0xb94>
 80080ae:	9b06      	ldr	r3, [sp, #24]
 80080b0:	930c      	str	r3, [sp, #48]	; 0x30
 80080b2:	2c00      	cmp	r4, #0
 80080b4:	dd05      	ble.n	80080c2 <_dtoa_r+0xa16>
 80080b6:	0029      	movs	r1, r5
 80080b8:	0022      	movs	r2, r4
 80080ba:	0038      	movs	r0, r7
 80080bc:	f000 fd90 	bl	8008be0 <__lshift>
 80080c0:	0005      	movs	r5, r0
 80080c2:	9b07      	ldr	r3, [sp, #28]
 80080c4:	0028      	movs	r0, r5
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d01f      	beq.n	800810a <_dtoa_r+0xa5e>
 80080ca:	0038      	movs	r0, r7
 80080cc:	6869      	ldr	r1, [r5, #4]
 80080ce:	f000 fb71 	bl	80087b4 <_Balloc>
 80080d2:	1e04      	subs	r4, r0, #0
 80080d4:	d10c      	bne.n	80080f0 <_dtoa_r+0xa44>
 80080d6:	0002      	movs	r2, r0
 80080d8:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <_dtoa_r+0xa3c>)
 80080da:	4904      	ldr	r1, [pc, #16]	; (80080ec <_dtoa_r+0xa40>)
 80080dc:	f7ff fafb 	bl	80076d6 <_dtoa_r+0x2a>
 80080e0:	40240000 	.word	0x40240000
 80080e4:	00000433 	.word	0x00000433
 80080e8:	0800978b 	.word	0x0800978b
 80080ec:	000002ea 	.word	0x000002ea
 80080f0:	0029      	movs	r1, r5
 80080f2:	692b      	ldr	r3, [r5, #16]
 80080f4:	310c      	adds	r1, #12
 80080f6:	1c9a      	adds	r2, r3, #2
 80080f8:	0092      	lsls	r2, r2, #2
 80080fa:	300c      	adds	r0, #12
 80080fc:	f000 fb41 	bl	8008782 <memcpy>
 8008100:	2201      	movs	r2, #1
 8008102:	0021      	movs	r1, r4
 8008104:	0038      	movs	r0, r7
 8008106:	f000 fd6b 	bl	8008be0 <__lshift>
 800810a:	002c      	movs	r4, r5
 800810c:	0005      	movs	r5, r0
 800810e:	9b05      	ldr	r3, [sp, #20]
 8008110:	9308      	str	r3, [sp, #32]
 8008112:	0031      	movs	r1, r6
 8008114:	9804      	ldr	r0, [sp, #16]
 8008116:	f7ff fa3d 	bl	8007594 <quorem>
 800811a:	0003      	movs	r3, r0
 800811c:	0021      	movs	r1, r4
 800811e:	3330      	adds	r3, #48	; 0x30
 8008120:	900e      	str	r0, [sp, #56]	; 0x38
 8008122:	9804      	ldr	r0, [sp, #16]
 8008124:	9306      	str	r3, [sp, #24]
 8008126:	f000 fdcb 	bl	8008cc0 <__mcmp>
 800812a:	002a      	movs	r2, r5
 800812c:	900f      	str	r0, [sp, #60]	; 0x3c
 800812e:	0031      	movs	r1, r6
 8008130:	0038      	movs	r0, r7
 8008132:	f000 fde1 	bl	8008cf8 <__mdiff>
 8008136:	68c3      	ldr	r3, [r0, #12]
 8008138:	9007      	str	r0, [sp, #28]
 800813a:	9310      	str	r3, [sp, #64]	; 0x40
 800813c:	2301      	movs	r3, #1
 800813e:	930d      	str	r3, [sp, #52]	; 0x34
 8008140:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d104      	bne.n	8008150 <_dtoa_r+0xaa4>
 8008146:	0001      	movs	r1, r0
 8008148:	9804      	ldr	r0, [sp, #16]
 800814a:	f000 fdb9 	bl	8008cc0 <__mcmp>
 800814e:	900d      	str	r0, [sp, #52]	; 0x34
 8008150:	0038      	movs	r0, r7
 8008152:	9907      	ldr	r1, [sp, #28]
 8008154:	f000 fb72 	bl	800883c <_Bfree>
 8008158:	2301      	movs	r3, #1
 800815a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800815c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800815e:	4018      	ands	r0, r3
 8008160:	9b08      	ldr	r3, [sp, #32]
 8008162:	3301      	adds	r3, #1
 8008164:	9307      	str	r3, [sp, #28]
 8008166:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008168:	4313      	orrs	r3, r2
 800816a:	4303      	orrs	r3, r0
 800816c:	d10c      	bne.n	8008188 <_dtoa_r+0xadc>
 800816e:	9b06      	ldr	r3, [sp, #24]
 8008170:	2b39      	cmp	r3, #57	; 0x39
 8008172:	d025      	beq.n	80081c0 <_dtoa_r+0xb14>
 8008174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd02      	ble.n	8008180 <_dtoa_r+0xad4>
 800817a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800817c:	3331      	adds	r3, #49	; 0x31
 800817e:	9306      	str	r3, [sp, #24]
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	9a06      	ldr	r2, [sp, #24]
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e773      	b.n	8008070 <_dtoa_r+0x9c4>
 8008188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800818a:	2b00      	cmp	r3, #0
 800818c:	db03      	blt.n	8008196 <_dtoa_r+0xaea>
 800818e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008190:	4313      	orrs	r3, r2
 8008192:	4303      	orrs	r3, r0
 8008194:	d11f      	bne.n	80081d6 <_dtoa_r+0xb2a>
 8008196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008198:	2b00      	cmp	r3, #0
 800819a:	ddf1      	ble.n	8008180 <_dtoa_r+0xad4>
 800819c:	9904      	ldr	r1, [sp, #16]
 800819e:	2201      	movs	r2, #1
 80081a0:	0038      	movs	r0, r7
 80081a2:	f000 fd1d 	bl	8008be0 <__lshift>
 80081a6:	0031      	movs	r1, r6
 80081a8:	9004      	str	r0, [sp, #16]
 80081aa:	f000 fd89 	bl	8008cc0 <__mcmp>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	dc03      	bgt.n	80081ba <_dtoa_r+0xb0e>
 80081b2:	d1e5      	bne.n	8008180 <_dtoa_r+0xad4>
 80081b4:	9b06      	ldr	r3, [sp, #24]
 80081b6:	07db      	lsls	r3, r3, #31
 80081b8:	d5e2      	bpl.n	8008180 <_dtoa_r+0xad4>
 80081ba:	9b06      	ldr	r3, [sp, #24]
 80081bc:	2b39      	cmp	r3, #57	; 0x39
 80081be:	d1dc      	bne.n	800817a <_dtoa_r+0xace>
 80081c0:	2339      	movs	r3, #57	; 0x39
 80081c2:	9a08      	ldr	r2, [sp, #32]
 80081c4:	7013      	strb	r3, [r2, #0]
 80081c6:	9b07      	ldr	r3, [sp, #28]
 80081c8:	9307      	str	r3, [sp, #28]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	781a      	ldrb	r2, [r3, #0]
 80081ce:	2a39      	cmp	r2, #57	; 0x39
 80081d0:	d06c      	beq.n	80082ac <_dtoa_r+0xc00>
 80081d2:	3201      	adds	r2, #1
 80081d4:	e7d6      	b.n	8008184 <_dtoa_r+0xad8>
 80081d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081d8:	2b00      	cmp	r3, #0
 80081da:	dd07      	ble.n	80081ec <_dtoa_r+0xb40>
 80081dc:	9b06      	ldr	r3, [sp, #24]
 80081de:	2b39      	cmp	r3, #57	; 0x39
 80081e0:	d0ee      	beq.n	80081c0 <_dtoa_r+0xb14>
 80081e2:	9b06      	ldr	r3, [sp, #24]
 80081e4:	9a08      	ldr	r2, [sp, #32]
 80081e6:	3301      	adds	r3, #1
 80081e8:	7013      	strb	r3, [r2, #0]
 80081ea:	e741      	b.n	8008070 <_dtoa_r+0x9c4>
 80081ec:	9b08      	ldr	r3, [sp, #32]
 80081ee:	9a06      	ldr	r2, [sp, #24]
 80081f0:	701a      	strb	r2, [r3, #0]
 80081f2:	2301      	movs	r3, #1
 80081f4:	9a05      	ldr	r2, [sp, #20]
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	9a08      	ldr	r2, [sp, #32]
 80081fa:	189b      	adds	r3, r3, r2
 80081fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081fe:	429a      	cmp	r2, r3
 8008200:	d03e      	beq.n	8008280 <_dtoa_r+0xbd4>
 8008202:	2300      	movs	r3, #0
 8008204:	220a      	movs	r2, #10
 8008206:	9904      	ldr	r1, [sp, #16]
 8008208:	0038      	movs	r0, r7
 800820a:	f000 fb3b 	bl	8008884 <__multadd>
 800820e:	2300      	movs	r3, #0
 8008210:	9004      	str	r0, [sp, #16]
 8008212:	220a      	movs	r2, #10
 8008214:	0021      	movs	r1, r4
 8008216:	0038      	movs	r0, r7
 8008218:	42ac      	cmp	r4, r5
 800821a:	d106      	bne.n	800822a <_dtoa_r+0xb7e>
 800821c:	f000 fb32 	bl	8008884 <__multadd>
 8008220:	0004      	movs	r4, r0
 8008222:	0005      	movs	r5, r0
 8008224:	9b07      	ldr	r3, [sp, #28]
 8008226:	9308      	str	r3, [sp, #32]
 8008228:	e773      	b.n	8008112 <_dtoa_r+0xa66>
 800822a:	f000 fb2b 	bl	8008884 <__multadd>
 800822e:	0029      	movs	r1, r5
 8008230:	0004      	movs	r4, r0
 8008232:	2300      	movs	r3, #0
 8008234:	220a      	movs	r2, #10
 8008236:	0038      	movs	r0, r7
 8008238:	f000 fb24 	bl	8008884 <__multadd>
 800823c:	0005      	movs	r5, r0
 800823e:	e7f1      	b.n	8008224 <_dtoa_r+0xb78>
 8008240:	9b06      	ldr	r3, [sp, #24]
 8008242:	930c      	str	r3, [sp, #48]	; 0x30
 8008244:	2400      	movs	r4, #0
 8008246:	0031      	movs	r1, r6
 8008248:	9804      	ldr	r0, [sp, #16]
 800824a:	f7ff f9a3 	bl	8007594 <quorem>
 800824e:	9b05      	ldr	r3, [sp, #20]
 8008250:	3030      	adds	r0, #48	; 0x30
 8008252:	5518      	strb	r0, [r3, r4]
 8008254:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008256:	3401      	adds	r4, #1
 8008258:	9006      	str	r0, [sp, #24]
 800825a:	42a3      	cmp	r3, r4
 800825c:	dd07      	ble.n	800826e <_dtoa_r+0xbc2>
 800825e:	2300      	movs	r3, #0
 8008260:	220a      	movs	r2, #10
 8008262:	0038      	movs	r0, r7
 8008264:	9904      	ldr	r1, [sp, #16]
 8008266:	f000 fb0d 	bl	8008884 <__multadd>
 800826a:	9004      	str	r0, [sp, #16]
 800826c:	e7eb      	b.n	8008246 <_dtoa_r+0xb9a>
 800826e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008270:	2001      	movs	r0, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	dd00      	ble.n	8008278 <_dtoa_r+0xbcc>
 8008276:	0018      	movs	r0, r3
 8008278:	2400      	movs	r4, #0
 800827a:	9b05      	ldr	r3, [sp, #20]
 800827c:	181b      	adds	r3, r3, r0
 800827e:	9307      	str	r3, [sp, #28]
 8008280:	9904      	ldr	r1, [sp, #16]
 8008282:	2201      	movs	r2, #1
 8008284:	0038      	movs	r0, r7
 8008286:	f000 fcab 	bl	8008be0 <__lshift>
 800828a:	0031      	movs	r1, r6
 800828c:	9004      	str	r0, [sp, #16]
 800828e:	f000 fd17 	bl	8008cc0 <__mcmp>
 8008292:	2800      	cmp	r0, #0
 8008294:	dc97      	bgt.n	80081c6 <_dtoa_r+0xb1a>
 8008296:	d102      	bne.n	800829e <_dtoa_r+0xbf2>
 8008298:	9b06      	ldr	r3, [sp, #24]
 800829a:	07db      	lsls	r3, r3, #31
 800829c:	d493      	bmi.n	80081c6 <_dtoa_r+0xb1a>
 800829e:	9b07      	ldr	r3, [sp, #28]
 80082a0:	9307      	str	r3, [sp, #28]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	781a      	ldrb	r2, [r3, #0]
 80082a6:	2a30      	cmp	r2, #48	; 0x30
 80082a8:	d0fa      	beq.n	80082a0 <_dtoa_r+0xbf4>
 80082aa:	e6e1      	b.n	8008070 <_dtoa_r+0x9c4>
 80082ac:	9a05      	ldr	r2, [sp, #20]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d18a      	bne.n	80081c8 <_dtoa_r+0xb1c>
 80082b2:	9b02      	ldr	r3, [sp, #8]
 80082b4:	3301      	adds	r3, #1
 80082b6:	9302      	str	r3, [sp, #8]
 80082b8:	2331      	movs	r3, #49	; 0x31
 80082ba:	e795      	b.n	80081e8 <_dtoa_r+0xb3c>
 80082bc:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <_dtoa_r+0xc34>)
 80082be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80082c0:	9305      	str	r3, [sp, #20]
 80082c2:	4b08      	ldr	r3, [pc, #32]	; (80082e4 <_dtoa_r+0xc38>)
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	d001      	beq.n	80082cc <_dtoa_r+0xc20>
 80082c8:	f7ff fa3b 	bl	8007742 <_dtoa_r+0x96>
 80082cc:	f7ff fa3b 	bl	8007746 <_dtoa_r+0x9a>
 80082d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dcb6      	bgt.n	8008244 <_dtoa_r+0xb98>
 80082d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082d8:	2b02      	cmp	r3, #2
 80082da:	dd00      	ble.n	80082de <_dtoa_r+0xc32>
 80082dc:	e6b2      	b.n	8008044 <_dtoa_r+0x998>
 80082de:	e7b1      	b.n	8008244 <_dtoa_r+0xb98>
 80082e0:	08009708 	.word	0x08009708
 80082e4:	08009710 	.word	0x08009710

080082e8 <__sflush_r>:
 80082e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ea:	898b      	ldrh	r3, [r1, #12]
 80082ec:	0005      	movs	r5, r0
 80082ee:	000c      	movs	r4, r1
 80082f0:	071a      	lsls	r2, r3, #28
 80082f2:	d45f      	bmi.n	80083b4 <__sflush_r+0xcc>
 80082f4:	684a      	ldr	r2, [r1, #4]
 80082f6:	2a00      	cmp	r2, #0
 80082f8:	dc04      	bgt.n	8008304 <__sflush_r+0x1c>
 80082fa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80082fc:	2a00      	cmp	r2, #0
 80082fe:	dc01      	bgt.n	8008304 <__sflush_r+0x1c>
 8008300:	2000      	movs	r0, #0
 8008302:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008304:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008306:	2f00      	cmp	r7, #0
 8008308:	d0fa      	beq.n	8008300 <__sflush_r+0x18>
 800830a:	2200      	movs	r2, #0
 800830c:	2180      	movs	r1, #128	; 0x80
 800830e:	682e      	ldr	r6, [r5, #0]
 8008310:	602a      	str	r2, [r5, #0]
 8008312:	001a      	movs	r2, r3
 8008314:	0149      	lsls	r1, r1, #5
 8008316:	400a      	ands	r2, r1
 8008318:	420b      	tst	r3, r1
 800831a:	d034      	beq.n	8008386 <__sflush_r+0x9e>
 800831c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	075b      	lsls	r3, r3, #29
 8008322:	d506      	bpl.n	8008332 <__sflush_r+0x4a>
 8008324:	6863      	ldr	r3, [r4, #4]
 8008326:	1ac0      	subs	r0, r0, r3
 8008328:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <__sflush_r+0x4a>
 800832e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008330:	1ac0      	subs	r0, r0, r3
 8008332:	0002      	movs	r2, r0
 8008334:	6a21      	ldr	r1, [r4, #32]
 8008336:	2300      	movs	r3, #0
 8008338:	0028      	movs	r0, r5
 800833a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800833c:	47b8      	blx	r7
 800833e:	89a1      	ldrh	r1, [r4, #12]
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d106      	bne.n	8008352 <__sflush_r+0x6a>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	2b1d      	cmp	r3, #29
 8008348:	d831      	bhi.n	80083ae <__sflush_r+0xc6>
 800834a:	4a2c      	ldr	r2, [pc, #176]	; (80083fc <__sflush_r+0x114>)
 800834c:	40da      	lsrs	r2, r3
 800834e:	07d3      	lsls	r3, r2, #31
 8008350:	d52d      	bpl.n	80083ae <__sflush_r+0xc6>
 8008352:	2300      	movs	r3, #0
 8008354:	6063      	str	r3, [r4, #4]
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	04cb      	lsls	r3, r1, #19
 800835c:	d505      	bpl.n	800836a <__sflush_r+0x82>
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	d102      	bne.n	8008368 <__sflush_r+0x80>
 8008362:	682b      	ldr	r3, [r5, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d100      	bne.n	800836a <__sflush_r+0x82>
 8008368:	6560      	str	r0, [r4, #84]	; 0x54
 800836a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800836c:	602e      	str	r6, [r5, #0]
 800836e:	2900      	cmp	r1, #0
 8008370:	d0c6      	beq.n	8008300 <__sflush_r+0x18>
 8008372:	0023      	movs	r3, r4
 8008374:	3344      	adds	r3, #68	; 0x44
 8008376:	4299      	cmp	r1, r3
 8008378:	d002      	beq.n	8008380 <__sflush_r+0x98>
 800837a:	0028      	movs	r0, r5
 800837c:	f7fe fa72 	bl	8006864 <_free_r>
 8008380:	2000      	movs	r0, #0
 8008382:	6360      	str	r0, [r4, #52]	; 0x34
 8008384:	e7bd      	b.n	8008302 <__sflush_r+0x1a>
 8008386:	2301      	movs	r3, #1
 8008388:	0028      	movs	r0, r5
 800838a:	6a21      	ldr	r1, [r4, #32]
 800838c:	47b8      	blx	r7
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d1c5      	bne.n	800831e <__sflush_r+0x36>
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0c2      	beq.n	800831e <__sflush_r+0x36>
 8008398:	2b1d      	cmp	r3, #29
 800839a:	d001      	beq.n	80083a0 <__sflush_r+0xb8>
 800839c:	2b16      	cmp	r3, #22
 800839e:	d101      	bne.n	80083a4 <__sflush_r+0xbc>
 80083a0:	602e      	str	r6, [r5, #0]
 80083a2:	e7ad      	b.n	8008300 <__sflush_r+0x18>
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	89a2      	ldrh	r2, [r4, #12]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	e7a9      	b.n	8008302 <__sflush_r+0x1a>
 80083ae:	2340      	movs	r3, #64	; 0x40
 80083b0:	430b      	orrs	r3, r1
 80083b2:	e7fa      	b.n	80083aa <__sflush_r+0xc2>
 80083b4:	690f      	ldr	r7, [r1, #16]
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	d0a2      	beq.n	8008300 <__sflush_r+0x18>
 80083ba:	680a      	ldr	r2, [r1, #0]
 80083bc:	600f      	str	r7, [r1, #0]
 80083be:	1bd2      	subs	r2, r2, r7
 80083c0:	9201      	str	r2, [sp, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	079b      	lsls	r3, r3, #30
 80083c6:	d100      	bne.n	80083ca <__sflush_r+0xe2>
 80083c8:	694a      	ldr	r2, [r1, #20]
 80083ca:	60a2      	str	r2, [r4, #8]
 80083cc:	9b01      	ldr	r3, [sp, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	dc00      	bgt.n	80083d4 <__sflush_r+0xec>
 80083d2:	e795      	b.n	8008300 <__sflush_r+0x18>
 80083d4:	003a      	movs	r2, r7
 80083d6:	0028      	movs	r0, r5
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	6a21      	ldr	r1, [r4, #32]
 80083dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083de:	47b0      	blx	r6
 80083e0:	2800      	cmp	r0, #0
 80083e2:	dc06      	bgt.n	80083f2 <__sflush_r+0x10a>
 80083e4:	2340      	movs	r3, #64	; 0x40
 80083e6:	2001      	movs	r0, #1
 80083e8:	89a2      	ldrh	r2, [r4, #12]
 80083ea:	4240      	negs	r0, r0
 80083ec:	4313      	orrs	r3, r2
 80083ee:	81a3      	strh	r3, [r4, #12]
 80083f0:	e787      	b.n	8008302 <__sflush_r+0x1a>
 80083f2:	9b01      	ldr	r3, [sp, #4]
 80083f4:	183f      	adds	r7, r7, r0
 80083f6:	1a1b      	subs	r3, r3, r0
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	e7e7      	b.n	80083cc <__sflush_r+0xe4>
 80083fc:	20400001 	.word	0x20400001

08008400 <_fflush_r>:
 8008400:	690b      	ldr	r3, [r1, #16]
 8008402:	b570      	push	{r4, r5, r6, lr}
 8008404:	0005      	movs	r5, r0
 8008406:	000c      	movs	r4, r1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d102      	bne.n	8008412 <_fflush_r+0x12>
 800840c:	2500      	movs	r5, #0
 800840e:	0028      	movs	r0, r5
 8008410:	bd70      	pop	{r4, r5, r6, pc}
 8008412:	2800      	cmp	r0, #0
 8008414:	d004      	beq.n	8008420 <_fflush_r+0x20>
 8008416:	6983      	ldr	r3, [r0, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <_fflush_r+0x20>
 800841c:	f000 f892 	bl	8008544 <__sinit>
 8008420:	4b14      	ldr	r3, [pc, #80]	; (8008474 <_fflush_r+0x74>)
 8008422:	429c      	cmp	r4, r3
 8008424:	d11b      	bne.n	800845e <_fflush_r+0x5e>
 8008426:	686c      	ldr	r4, [r5, #4]
 8008428:	220c      	movs	r2, #12
 800842a:	5ea3      	ldrsh	r3, [r4, r2]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0ed      	beq.n	800840c <_fflush_r+0xc>
 8008430:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008432:	07d2      	lsls	r2, r2, #31
 8008434:	d404      	bmi.n	8008440 <_fflush_r+0x40>
 8008436:	059b      	lsls	r3, r3, #22
 8008438:	d402      	bmi.n	8008440 <_fflush_r+0x40>
 800843a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800843c:	f000 f927 	bl	800868e <__retarget_lock_acquire_recursive>
 8008440:	0028      	movs	r0, r5
 8008442:	0021      	movs	r1, r4
 8008444:	f7ff ff50 	bl	80082e8 <__sflush_r>
 8008448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800844a:	0005      	movs	r5, r0
 800844c:	07db      	lsls	r3, r3, #31
 800844e:	d4de      	bmi.n	800840e <_fflush_r+0xe>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	059b      	lsls	r3, r3, #22
 8008454:	d4db      	bmi.n	800840e <_fflush_r+0xe>
 8008456:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008458:	f000 f91a 	bl	8008690 <__retarget_lock_release_recursive>
 800845c:	e7d7      	b.n	800840e <_fflush_r+0xe>
 800845e:	4b06      	ldr	r3, [pc, #24]	; (8008478 <_fflush_r+0x78>)
 8008460:	429c      	cmp	r4, r3
 8008462:	d101      	bne.n	8008468 <_fflush_r+0x68>
 8008464:	68ac      	ldr	r4, [r5, #8]
 8008466:	e7df      	b.n	8008428 <_fflush_r+0x28>
 8008468:	4b04      	ldr	r3, [pc, #16]	; (800847c <_fflush_r+0x7c>)
 800846a:	429c      	cmp	r4, r3
 800846c:	d1dc      	bne.n	8008428 <_fflush_r+0x28>
 800846e:	68ec      	ldr	r4, [r5, #12]
 8008470:	e7da      	b.n	8008428 <_fflush_r+0x28>
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	080097bc 	.word	0x080097bc
 8008478:	080097dc 	.word	0x080097dc
 800847c:	0800979c 	.word	0x0800979c

08008480 <std>:
 8008480:	2300      	movs	r3, #0
 8008482:	b510      	push	{r4, lr}
 8008484:	0004      	movs	r4, r0
 8008486:	6003      	str	r3, [r0, #0]
 8008488:	6043      	str	r3, [r0, #4]
 800848a:	6083      	str	r3, [r0, #8]
 800848c:	8181      	strh	r1, [r0, #12]
 800848e:	6643      	str	r3, [r0, #100]	; 0x64
 8008490:	0019      	movs	r1, r3
 8008492:	81c2      	strh	r2, [r0, #14]
 8008494:	6103      	str	r3, [r0, #16]
 8008496:	6143      	str	r3, [r0, #20]
 8008498:	6183      	str	r3, [r0, #24]
 800849a:	2208      	movs	r2, #8
 800849c:	305c      	adds	r0, #92	; 0x5c
 800849e:	f7fe f9d9 	bl	8006854 <memset>
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <std+0x38>)
 80084a4:	6263      	str	r3, [r4, #36]	; 0x24
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <std+0x3c>)
 80084a8:	6224      	str	r4, [r4, #32]
 80084aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <std+0x40>)
 80084ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084b0:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <std+0x44>)
 80084b2:	6323      	str	r3, [r4, #48]	; 0x30
 80084b4:	bd10      	pop	{r4, pc}
 80084b6:	46c0      	nop			; (mov r8, r8)
 80084b8:	080091d1 	.word	0x080091d1
 80084bc:	080091f9 	.word	0x080091f9
 80084c0:	08009231 	.word	0x08009231
 80084c4:	0800925d 	.word	0x0800925d

080084c8 <_cleanup_r>:
 80084c8:	b510      	push	{r4, lr}
 80084ca:	4902      	ldr	r1, [pc, #8]	; (80084d4 <_cleanup_r+0xc>)
 80084cc:	f000 f8ba 	bl	8008644 <_fwalk_reent>
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	46c0      	nop			; (mov r8, r8)
 80084d4:	08008401 	.word	0x08008401

080084d8 <__sfmoreglue>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	2568      	movs	r5, #104	; 0x68
 80084dc:	1e4a      	subs	r2, r1, #1
 80084de:	4355      	muls	r5, r2
 80084e0:	000e      	movs	r6, r1
 80084e2:	0029      	movs	r1, r5
 80084e4:	3174      	adds	r1, #116	; 0x74
 80084e6:	f7fe fa07 	bl	80068f8 <_malloc_r>
 80084ea:	1e04      	subs	r4, r0, #0
 80084ec:	d008      	beq.n	8008500 <__sfmoreglue+0x28>
 80084ee:	2100      	movs	r1, #0
 80084f0:	002a      	movs	r2, r5
 80084f2:	6001      	str	r1, [r0, #0]
 80084f4:	6046      	str	r6, [r0, #4]
 80084f6:	300c      	adds	r0, #12
 80084f8:	60a0      	str	r0, [r4, #8]
 80084fa:	3268      	adds	r2, #104	; 0x68
 80084fc:	f7fe f9aa 	bl	8006854 <memset>
 8008500:	0020      	movs	r0, r4
 8008502:	bd70      	pop	{r4, r5, r6, pc}

08008504 <__sfp_lock_acquire>:
 8008504:	b510      	push	{r4, lr}
 8008506:	4802      	ldr	r0, [pc, #8]	; (8008510 <__sfp_lock_acquire+0xc>)
 8008508:	f000 f8c1 	bl	800868e <__retarget_lock_acquire_recursive>
 800850c:	bd10      	pop	{r4, pc}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	20000324 	.word	0x20000324

08008514 <__sfp_lock_release>:
 8008514:	b510      	push	{r4, lr}
 8008516:	4802      	ldr	r0, [pc, #8]	; (8008520 <__sfp_lock_release+0xc>)
 8008518:	f000 f8ba 	bl	8008690 <__retarget_lock_release_recursive>
 800851c:	bd10      	pop	{r4, pc}
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	20000324 	.word	0x20000324

08008524 <__sinit_lock_acquire>:
 8008524:	b510      	push	{r4, lr}
 8008526:	4802      	ldr	r0, [pc, #8]	; (8008530 <__sinit_lock_acquire+0xc>)
 8008528:	f000 f8b1 	bl	800868e <__retarget_lock_acquire_recursive>
 800852c:	bd10      	pop	{r4, pc}
 800852e:	46c0      	nop			; (mov r8, r8)
 8008530:	2000031f 	.word	0x2000031f

08008534 <__sinit_lock_release>:
 8008534:	b510      	push	{r4, lr}
 8008536:	4802      	ldr	r0, [pc, #8]	; (8008540 <__sinit_lock_release+0xc>)
 8008538:	f000 f8aa 	bl	8008690 <__retarget_lock_release_recursive>
 800853c:	bd10      	pop	{r4, pc}
 800853e:	46c0      	nop			; (mov r8, r8)
 8008540:	2000031f 	.word	0x2000031f

08008544 <__sinit>:
 8008544:	b513      	push	{r0, r1, r4, lr}
 8008546:	0004      	movs	r4, r0
 8008548:	f7ff ffec 	bl	8008524 <__sinit_lock_acquire>
 800854c:	69a3      	ldr	r3, [r4, #24]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d002      	beq.n	8008558 <__sinit+0x14>
 8008552:	f7ff ffef 	bl	8008534 <__sinit_lock_release>
 8008556:	bd13      	pop	{r0, r1, r4, pc}
 8008558:	64a3      	str	r3, [r4, #72]	; 0x48
 800855a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800855c:	6523      	str	r3, [r4, #80]	; 0x50
 800855e:	4b13      	ldr	r3, [pc, #76]	; (80085ac <__sinit+0x68>)
 8008560:	4a13      	ldr	r2, [pc, #76]	; (80085b0 <__sinit+0x6c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	62a2      	str	r2, [r4, #40]	; 0x28
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	42a3      	cmp	r3, r4
 800856a:	d101      	bne.n	8008570 <__sinit+0x2c>
 800856c:	2301      	movs	r3, #1
 800856e:	61a3      	str	r3, [r4, #24]
 8008570:	0020      	movs	r0, r4
 8008572:	f000 f81f 	bl	80085b4 <__sfp>
 8008576:	6060      	str	r0, [r4, #4]
 8008578:	0020      	movs	r0, r4
 800857a:	f000 f81b 	bl	80085b4 <__sfp>
 800857e:	60a0      	str	r0, [r4, #8]
 8008580:	0020      	movs	r0, r4
 8008582:	f000 f817 	bl	80085b4 <__sfp>
 8008586:	2200      	movs	r2, #0
 8008588:	2104      	movs	r1, #4
 800858a:	60e0      	str	r0, [r4, #12]
 800858c:	6860      	ldr	r0, [r4, #4]
 800858e:	f7ff ff77 	bl	8008480 <std>
 8008592:	2201      	movs	r2, #1
 8008594:	2109      	movs	r1, #9
 8008596:	68a0      	ldr	r0, [r4, #8]
 8008598:	f7ff ff72 	bl	8008480 <std>
 800859c:	2202      	movs	r2, #2
 800859e:	2112      	movs	r1, #18
 80085a0:	68e0      	ldr	r0, [r4, #12]
 80085a2:	f7ff ff6d 	bl	8008480 <std>
 80085a6:	2301      	movs	r3, #1
 80085a8:	61a3      	str	r3, [r4, #24]
 80085aa:	e7d2      	b.n	8008552 <__sinit+0xe>
 80085ac:	080096d0 	.word	0x080096d0
 80085b0:	080084c9 	.word	0x080084c9

080085b4 <__sfp>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	0007      	movs	r7, r0
 80085b8:	f7ff ffa4 	bl	8008504 <__sfp_lock_acquire>
 80085bc:	4b1f      	ldr	r3, [pc, #124]	; (800863c <__sfp+0x88>)
 80085be:	681e      	ldr	r6, [r3, #0]
 80085c0:	69b3      	ldr	r3, [r6, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <__sfp+0x18>
 80085c6:	0030      	movs	r0, r6
 80085c8:	f7ff ffbc 	bl	8008544 <__sinit>
 80085cc:	3648      	adds	r6, #72	; 0x48
 80085ce:	68b4      	ldr	r4, [r6, #8]
 80085d0:	6873      	ldr	r3, [r6, #4]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	d504      	bpl.n	80085e0 <__sfp+0x2c>
 80085d6:	6833      	ldr	r3, [r6, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d022      	beq.n	8008622 <__sfp+0x6e>
 80085dc:	6836      	ldr	r6, [r6, #0]
 80085de:	e7f6      	b.n	80085ce <__sfp+0x1a>
 80085e0:	220c      	movs	r2, #12
 80085e2:	5ea5      	ldrsh	r5, [r4, r2]
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	d11a      	bne.n	800861e <__sfp+0x6a>
 80085e8:	0020      	movs	r0, r4
 80085ea:	4b15      	ldr	r3, [pc, #84]	; (8008640 <__sfp+0x8c>)
 80085ec:	3058      	adds	r0, #88	; 0x58
 80085ee:	60e3      	str	r3, [r4, #12]
 80085f0:	6665      	str	r5, [r4, #100]	; 0x64
 80085f2:	f000 f84b 	bl	800868c <__retarget_lock_init_recursive>
 80085f6:	f7ff ff8d 	bl	8008514 <__sfp_lock_release>
 80085fa:	0020      	movs	r0, r4
 80085fc:	2208      	movs	r2, #8
 80085fe:	0029      	movs	r1, r5
 8008600:	6025      	str	r5, [r4, #0]
 8008602:	60a5      	str	r5, [r4, #8]
 8008604:	6065      	str	r5, [r4, #4]
 8008606:	6125      	str	r5, [r4, #16]
 8008608:	6165      	str	r5, [r4, #20]
 800860a:	61a5      	str	r5, [r4, #24]
 800860c:	305c      	adds	r0, #92	; 0x5c
 800860e:	f7fe f921 	bl	8006854 <memset>
 8008612:	6365      	str	r5, [r4, #52]	; 0x34
 8008614:	63a5      	str	r5, [r4, #56]	; 0x38
 8008616:	64a5      	str	r5, [r4, #72]	; 0x48
 8008618:	64e5      	str	r5, [r4, #76]	; 0x4c
 800861a:	0020      	movs	r0, r4
 800861c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800861e:	3468      	adds	r4, #104	; 0x68
 8008620:	e7d7      	b.n	80085d2 <__sfp+0x1e>
 8008622:	2104      	movs	r1, #4
 8008624:	0038      	movs	r0, r7
 8008626:	f7ff ff57 	bl	80084d8 <__sfmoreglue>
 800862a:	1e04      	subs	r4, r0, #0
 800862c:	6030      	str	r0, [r6, #0]
 800862e:	d1d5      	bne.n	80085dc <__sfp+0x28>
 8008630:	f7ff ff70 	bl	8008514 <__sfp_lock_release>
 8008634:	230c      	movs	r3, #12
 8008636:	603b      	str	r3, [r7, #0]
 8008638:	e7ef      	b.n	800861a <__sfp+0x66>
 800863a:	46c0      	nop			; (mov r8, r8)
 800863c:	080096d0 	.word	0x080096d0
 8008640:	ffff0001 	.word	0xffff0001

08008644 <_fwalk_reent>:
 8008644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008646:	0004      	movs	r4, r0
 8008648:	0006      	movs	r6, r0
 800864a:	2700      	movs	r7, #0
 800864c:	9101      	str	r1, [sp, #4]
 800864e:	3448      	adds	r4, #72	; 0x48
 8008650:	6863      	ldr	r3, [r4, #4]
 8008652:	68a5      	ldr	r5, [r4, #8]
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	9b00      	ldr	r3, [sp, #0]
 8008658:	3b01      	subs	r3, #1
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	d504      	bpl.n	8008668 <_fwalk_reent+0x24>
 800865e:	6824      	ldr	r4, [r4, #0]
 8008660:	2c00      	cmp	r4, #0
 8008662:	d1f5      	bne.n	8008650 <_fwalk_reent+0xc>
 8008664:	0038      	movs	r0, r7
 8008666:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008668:	89ab      	ldrh	r3, [r5, #12]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d908      	bls.n	8008680 <_fwalk_reent+0x3c>
 800866e:	220e      	movs	r2, #14
 8008670:	5eab      	ldrsh	r3, [r5, r2]
 8008672:	3301      	adds	r3, #1
 8008674:	d004      	beq.n	8008680 <_fwalk_reent+0x3c>
 8008676:	0029      	movs	r1, r5
 8008678:	0030      	movs	r0, r6
 800867a:	9b01      	ldr	r3, [sp, #4]
 800867c:	4798      	blx	r3
 800867e:	4307      	orrs	r7, r0
 8008680:	3568      	adds	r5, #104	; 0x68
 8008682:	e7e8      	b.n	8008656 <_fwalk_reent+0x12>

08008684 <_localeconv_r>:
 8008684:	4800      	ldr	r0, [pc, #0]	; (8008688 <_localeconv_r+0x4>)
 8008686:	4770      	bx	lr
 8008688:	20000160 	.word	0x20000160

0800868c <__retarget_lock_init_recursive>:
 800868c:	4770      	bx	lr

0800868e <__retarget_lock_acquire_recursive>:
 800868e:	4770      	bx	lr

08008690 <__retarget_lock_release_recursive>:
 8008690:	4770      	bx	lr
	...

08008694 <__swhatbuf_r>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	000e      	movs	r6, r1
 8008698:	001d      	movs	r5, r3
 800869a:	230e      	movs	r3, #14
 800869c:	5ec9      	ldrsh	r1, [r1, r3]
 800869e:	0014      	movs	r4, r2
 80086a0:	b096      	sub	sp, #88	; 0x58
 80086a2:	2900      	cmp	r1, #0
 80086a4:	da07      	bge.n	80086b6 <__swhatbuf_r+0x22>
 80086a6:	2300      	movs	r3, #0
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	89b3      	ldrh	r3, [r6, #12]
 80086ac:	061b      	lsls	r3, r3, #24
 80086ae:	d411      	bmi.n	80086d4 <__swhatbuf_r+0x40>
 80086b0:	2380      	movs	r3, #128	; 0x80
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	e00f      	b.n	80086d6 <__swhatbuf_r+0x42>
 80086b6:	466a      	mov	r2, sp
 80086b8:	f000 fe2a 	bl	8009310 <_fstat_r>
 80086bc:	2800      	cmp	r0, #0
 80086be:	dbf2      	blt.n	80086a6 <__swhatbuf_r+0x12>
 80086c0:	23f0      	movs	r3, #240	; 0xf0
 80086c2:	9901      	ldr	r1, [sp, #4]
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	4019      	ands	r1, r3
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <__swhatbuf_r+0x4c>)
 80086ca:	18c9      	adds	r1, r1, r3
 80086cc:	424b      	negs	r3, r1
 80086ce:	4159      	adcs	r1, r3
 80086d0:	6029      	str	r1, [r5, #0]
 80086d2:	e7ed      	b.n	80086b0 <__swhatbuf_r+0x1c>
 80086d4:	2340      	movs	r3, #64	; 0x40
 80086d6:	2000      	movs	r0, #0
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	b016      	add	sp, #88	; 0x58
 80086dc:	bd70      	pop	{r4, r5, r6, pc}
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	ffffe000 	.word	0xffffe000

080086e4 <__smakebuf_r>:
 80086e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086e6:	2602      	movs	r6, #2
 80086e8:	898b      	ldrh	r3, [r1, #12]
 80086ea:	0005      	movs	r5, r0
 80086ec:	000c      	movs	r4, r1
 80086ee:	4233      	tst	r3, r6
 80086f0:	d006      	beq.n	8008700 <__smakebuf_r+0x1c>
 80086f2:	0023      	movs	r3, r4
 80086f4:	3347      	adds	r3, #71	; 0x47
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	6123      	str	r3, [r4, #16]
 80086fa:	2301      	movs	r3, #1
 80086fc:	6163      	str	r3, [r4, #20]
 80086fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008700:	466a      	mov	r2, sp
 8008702:	ab01      	add	r3, sp, #4
 8008704:	f7ff ffc6 	bl	8008694 <__swhatbuf_r>
 8008708:	9900      	ldr	r1, [sp, #0]
 800870a:	0007      	movs	r7, r0
 800870c:	0028      	movs	r0, r5
 800870e:	f7fe f8f3 	bl	80068f8 <_malloc_r>
 8008712:	2800      	cmp	r0, #0
 8008714:	d108      	bne.n	8008728 <__smakebuf_r+0x44>
 8008716:	220c      	movs	r2, #12
 8008718:	5ea3      	ldrsh	r3, [r4, r2]
 800871a:	059a      	lsls	r2, r3, #22
 800871c:	d4ef      	bmi.n	80086fe <__smakebuf_r+0x1a>
 800871e:	2203      	movs	r2, #3
 8008720:	4393      	bics	r3, r2
 8008722:	431e      	orrs	r6, r3
 8008724:	81a6      	strh	r6, [r4, #12]
 8008726:	e7e4      	b.n	80086f2 <__smakebuf_r+0xe>
 8008728:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <__smakebuf_r+0x84>)
 800872a:	62ab      	str	r3, [r5, #40]	; 0x28
 800872c:	2380      	movs	r3, #128	; 0x80
 800872e:	89a2      	ldrh	r2, [r4, #12]
 8008730:	6020      	str	r0, [r4, #0]
 8008732:	4313      	orrs	r3, r2
 8008734:	81a3      	strh	r3, [r4, #12]
 8008736:	9b00      	ldr	r3, [sp, #0]
 8008738:	6120      	str	r0, [r4, #16]
 800873a:	6163      	str	r3, [r4, #20]
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00d      	beq.n	800875e <__smakebuf_r+0x7a>
 8008742:	0028      	movs	r0, r5
 8008744:	230e      	movs	r3, #14
 8008746:	5ee1      	ldrsh	r1, [r4, r3]
 8008748:	f000 fdf4 	bl	8009334 <_isatty_r>
 800874c:	2800      	cmp	r0, #0
 800874e:	d006      	beq.n	800875e <__smakebuf_r+0x7a>
 8008750:	2203      	movs	r2, #3
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	4393      	bics	r3, r2
 8008756:	001a      	movs	r2, r3
 8008758:	2301      	movs	r3, #1
 800875a:	4313      	orrs	r3, r2
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	89a0      	ldrh	r0, [r4, #12]
 8008760:	4307      	orrs	r7, r0
 8008762:	81a7      	strh	r7, [r4, #12]
 8008764:	e7cb      	b.n	80086fe <__smakebuf_r+0x1a>
 8008766:	46c0      	nop			; (mov r8, r8)
 8008768:	080084c9 	.word	0x080084c9

0800876c <memchr>:
 800876c:	b2c9      	uxtb	r1, r1
 800876e:	1882      	adds	r2, r0, r2
 8008770:	4290      	cmp	r0, r2
 8008772:	d101      	bne.n	8008778 <memchr+0xc>
 8008774:	2000      	movs	r0, #0
 8008776:	4770      	bx	lr
 8008778:	7803      	ldrb	r3, [r0, #0]
 800877a:	428b      	cmp	r3, r1
 800877c:	d0fb      	beq.n	8008776 <memchr+0xa>
 800877e:	3001      	adds	r0, #1
 8008780:	e7f6      	b.n	8008770 <memchr+0x4>

08008782 <memcpy>:
 8008782:	2300      	movs	r3, #0
 8008784:	b510      	push	{r4, lr}
 8008786:	429a      	cmp	r2, r3
 8008788:	d100      	bne.n	800878c <memcpy+0xa>
 800878a:	bd10      	pop	{r4, pc}
 800878c:	5ccc      	ldrb	r4, [r1, r3]
 800878e:	54c4      	strb	r4, [r0, r3]
 8008790:	3301      	adds	r3, #1
 8008792:	e7f8      	b.n	8008786 <memcpy+0x4>

08008794 <__malloc_lock>:
 8008794:	b510      	push	{r4, lr}
 8008796:	4802      	ldr	r0, [pc, #8]	; (80087a0 <__malloc_lock+0xc>)
 8008798:	f7ff ff79 	bl	800868e <__retarget_lock_acquire_recursive>
 800879c:	bd10      	pop	{r4, pc}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	20000320 	.word	0x20000320

080087a4 <__malloc_unlock>:
 80087a4:	b510      	push	{r4, lr}
 80087a6:	4802      	ldr	r0, [pc, #8]	; (80087b0 <__malloc_unlock+0xc>)
 80087a8:	f7ff ff72 	bl	8008690 <__retarget_lock_release_recursive>
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	20000320 	.word	0x20000320

080087b4 <_Balloc>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80087b8:	0006      	movs	r6, r0
 80087ba:	000c      	movs	r4, r1
 80087bc:	2d00      	cmp	r5, #0
 80087be:	d10e      	bne.n	80087de <_Balloc+0x2a>
 80087c0:	2010      	movs	r0, #16
 80087c2:	f7fe f83d 	bl	8006840 <malloc>
 80087c6:	1e02      	subs	r2, r0, #0
 80087c8:	6270      	str	r0, [r6, #36]	; 0x24
 80087ca:	d104      	bne.n	80087d6 <_Balloc+0x22>
 80087cc:	2166      	movs	r1, #102	; 0x66
 80087ce:	4b19      	ldr	r3, [pc, #100]	; (8008834 <_Balloc+0x80>)
 80087d0:	4819      	ldr	r0, [pc, #100]	; (8008838 <_Balloc+0x84>)
 80087d2:	f000 fd5d 	bl	8009290 <__assert_func>
 80087d6:	6045      	str	r5, [r0, #4]
 80087d8:	6085      	str	r5, [r0, #8]
 80087da:	6005      	str	r5, [r0, #0]
 80087dc:	60c5      	str	r5, [r0, #12]
 80087de:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80087e0:	68eb      	ldr	r3, [r5, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d013      	beq.n	800880e <_Balloc+0x5a>
 80087e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80087e8:	00a2      	lsls	r2, r4, #2
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	189b      	adds	r3, r3, r2
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d118      	bne.n	8008826 <_Balloc+0x72>
 80087f4:	2101      	movs	r1, #1
 80087f6:	000d      	movs	r5, r1
 80087f8:	40a5      	lsls	r5, r4
 80087fa:	1d6a      	adds	r2, r5, #5
 80087fc:	0030      	movs	r0, r6
 80087fe:	0092      	lsls	r2, r2, #2
 8008800:	f000 fb76 	bl	8008ef0 <_calloc_r>
 8008804:	2800      	cmp	r0, #0
 8008806:	d00c      	beq.n	8008822 <_Balloc+0x6e>
 8008808:	6044      	str	r4, [r0, #4]
 800880a:	6085      	str	r5, [r0, #8]
 800880c:	e00d      	b.n	800882a <_Balloc+0x76>
 800880e:	2221      	movs	r2, #33	; 0x21
 8008810:	2104      	movs	r1, #4
 8008812:	0030      	movs	r0, r6
 8008814:	f000 fb6c 	bl	8008ef0 <_calloc_r>
 8008818:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800881a:	60e8      	str	r0, [r5, #12]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e1      	bne.n	80087e6 <_Balloc+0x32>
 8008822:	2000      	movs	r0, #0
 8008824:	bd70      	pop	{r4, r5, r6, pc}
 8008826:	6802      	ldr	r2, [r0, #0]
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	2300      	movs	r3, #0
 800882c:	6103      	str	r3, [r0, #16]
 800882e:	60c3      	str	r3, [r0, #12]
 8008830:	e7f8      	b.n	8008824 <_Balloc+0x70>
 8008832:	46c0      	nop			; (mov r8, r8)
 8008834:	08009715 	.word	0x08009715
 8008838:	080097fc 	.word	0x080097fc

0800883c <_Bfree>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008840:	0005      	movs	r5, r0
 8008842:	000c      	movs	r4, r1
 8008844:	2e00      	cmp	r6, #0
 8008846:	d10e      	bne.n	8008866 <_Bfree+0x2a>
 8008848:	2010      	movs	r0, #16
 800884a:	f7fd fff9 	bl	8006840 <malloc>
 800884e:	1e02      	subs	r2, r0, #0
 8008850:	6268      	str	r0, [r5, #36]	; 0x24
 8008852:	d104      	bne.n	800885e <_Bfree+0x22>
 8008854:	218a      	movs	r1, #138	; 0x8a
 8008856:	4b09      	ldr	r3, [pc, #36]	; (800887c <_Bfree+0x40>)
 8008858:	4809      	ldr	r0, [pc, #36]	; (8008880 <_Bfree+0x44>)
 800885a:	f000 fd19 	bl	8009290 <__assert_func>
 800885e:	6046      	str	r6, [r0, #4]
 8008860:	6086      	str	r6, [r0, #8]
 8008862:	6006      	str	r6, [r0, #0]
 8008864:	60c6      	str	r6, [r0, #12]
 8008866:	2c00      	cmp	r4, #0
 8008868:	d007      	beq.n	800887a <_Bfree+0x3e>
 800886a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800886c:	6862      	ldr	r2, [r4, #4]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	0092      	lsls	r2, r2, #2
 8008872:	189b      	adds	r3, r3, r2
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	6022      	str	r2, [r4, #0]
 8008878:	601c      	str	r4, [r3, #0]
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	08009715 	.word	0x08009715
 8008880:	080097fc 	.word	0x080097fc

08008884 <__multadd>:
 8008884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008886:	000e      	movs	r6, r1
 8008888:	9001      	str	r0, [sp, #4]
 800888a:	000c      	movs	r4, r1
 800888c:	001d      	movs	r5, r3
 800888e:	2000      	movs	r0, #0
 8008890:	690f      	ldr	r7, [r1, #16]
 8008892:	3614      	adds	r6, #20
 8008894:	6833      	ldr	r3, [r6, #0]
 8008896:	3001      	adds	r0, #1
 8008898:	b299      	uxth	r1, r3
 800889a:	4351      	muls	r1, r2
 800889c:	0c1b      	lsrs	r3, r3, #16
 800889e:	4353      	muls	r3, r2
 80088a0:	1949      	adds	r1, r1, r5
 80088a2:	0c0d      	lsrs	r5, r1, #16
 80088a4:	195b      	adds	r3, r3, r5
 80088a6:	0c1d      	lsrs	r5, r3, #16
 80088a8:	b289      	uxth	r1, r1
 80088aa:	041b      	lsls	r3, r3, #16
 80088ac:	185b      	adds	r3, r3, r1
 80088ae:	c608      	stmia	r6!, {r3}
 80088b0:	4287      	cmp	r7, r0
 80088b2:	dcef      	bgt.n	8008894 <__multadd+0x10>
 80088b4:	2d00      	cmp	r5, #0
 80088b6:	d022      	beq.n	80088fe <__multadd+0x7a>
 80088b8:	68a3      	ldr	r3, [r4, #8]
 80088ba:	42bb      	cmp	r3, r7
 80088bc:	dc19      	bgt.n	80088f2 <__multadd+0x6e>
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	9801      	ldr	r0, [sp, #4]
 80088c2:	1c59      	adds	r1, r3, #1
 80088c4:	f7ff ff76 	bl	80087b4 <_Balloc>
 80088c8:	1e06      	subs	r6, r0, #0
 80088ca:	d105      	bne.n	80088d8 <__multadd+0x54>
 80088cc:	0002      	movs	r2, r0
 80088ce:	21b5      	movs	r1, #181	; 0xb5
 80088d0:	4b0c      	ldr	r3, [pc, #48]	; (8008904 <__multadd+0x80>)
 80088d2:	480d      	ldr	r0, [pc, #52]	; (8008908 <__multadd+0x84>)
 80088d4:	f000 fcdc 	bl	8009290 <__assert_func>
 80088d8:	0021      	movs	r1, r4
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	310c      	adds	r1, #12
 80088de:	1c9a      	adds	r2, r3, #2
 80088e0:	0092      	lsls	r2, r2, #2
 80088e2:	300c      	adds	r0, #12
 80088e4:	f7ff ff4d 	bl	8008782 <memcpy>
 80088e8:	0021      	movs	r1, r4
 80088ea:	9801      	ldr	r0, [sp, #4]
 80088ec:	f7ff ffa6 	bl	800883c <_Bfree>
 80088f0:	0034      	movs	r4, r6
 80088f2:	1d3b      	adds	r3, r7, #4
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	18e3      	adds	r3, r4, r3
 80088f8:	605d      	str	r5, [r3, #4]
 80088fa:	1c7b      	adds	r3, r7, #1
 80088fc:	6123      	str	r3, [r4, #16]
 80088fe:	0020      	movs	r0, r4
 8008900:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008902:	46c0      	nop			; (mov r8, r8)
 8008904:	0800978b 	.word	0x0800978b
 8008908:	080097fc 	.word	0x080097fc

0800890c <__hi0bits>:
 800890c:	0003      	movs	r3, r0
 800890e:	0c02      	lsrs	r2, r0, #16
 8008910:	2000      	movs	r0, #0
 8008912:	4282      	cmp	r2, r0
 8008914:	d101      	bne.n	800891a <__hi0bits+0xe>
 8008916:	041b      	lsls	r3, r3, #16
 8008918:	3010      	adds	r0, #16
 800891a:	0e1a      	lsrs	r2, r3, #24
 800891c:	d101      	bne.n	8008922 <__hi0bits+0x16>
 800891e:	3008      	adds	r0, #8
 8008920:	021b      	lsls	r3, r3, #8
 8008922:	0f1a      	lsrs	r2, r3, #28
 8008924:	d101      	bne.n	800892a <__hi0bits+0x1e>
 8008926:	3004      	adds	r0, #4
 8008928:	011b      	lsls	r3, r3, #4
 800892a:	0f9a      	lsrs	r2, r3, #30
 800892c:	d101      	bne.n	8008932 <__hi0bits+0x26>
 800892e:	3002      	adds	r0, #2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	db03      	blt.n	800893e <__hi0bits+0x32>
 8008936:	3001      	adds	r0, #1
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	d400      	bmi.n	800893e <__hi0bits+0x32>
 800893c:	2020      	movs	r0, #32
 800893e:	4770      	bx	lr

08008940 <__lo0bits>:
 8008940:	6803      	ldr	r3, [r0, #0]
 8008942:	0002      	movs	r2, r0
 8008944:	2107      	movs	r1, #7
 8008946:	0018      	movs	r0, r3
 8008948:	4008      	ands	r0, r1
 800894a:	420b      	tst	r3, r1
 800894c:	d00d      	beq.n	800896a <__lo0bits+0x2a>
 800894e:	3906      	subs	r1, #6
 8008950:	2000      	movs	r0, #0
 8008952:	420b      	tst	r3, r1
 8008954:	d105      	bne.n	8008962 <__lo0bits+0x22>
 8008956:	3002      	adds	r0, #2
 8008958:	4203      	tst	r3, r0
 800895a:	d003      	beq.n	8008964 <__lo0bits+0x24>
 800895c:	40cb      	lsrs	r3, r1
 800895e:	0008      	movs	r0, r1
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	4770      	bx	lr
 8008964:	089b      	lsrs	r3, r3, #2
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	e7fb      	b.n	8008962 <__lo0bits+0x22>
 800896a:	b299      	uxth	r1, r3
 800896c:	2900      	cmp	r1, #0
 800896e:	d101      	bne.n	8008974 <__lo0bits+0x34>
 8008970:	2010      	movs	r0, #16
 8008972:	0c1b      	lsrs	r3, r3, #16
 8008974:	b2d9      	uxtb	r1, r3
 8008976:	2900      	cmp	r1, #0
 8008978:	d101      	bne.n	800897e <__lo0bits+0x3e>
 800897a:	3008      	adds	r0, #8
 800897c:	0a1b      	lsrs	r3, r3, #8
 800897e:	0719      	lsls	r1, r3, #28
 8008980:	d101      	bne.n	8008986 <__lo0bits+0x46>
 8008982:	3004      	adds	r0, #4
 8008984:	091b      	lsrs	r3, r3, #4
 8008986:	0799      	lsls	r1, r3, #30
 8008988:	d101      	bne.n	800898e <__lo0bits+0x4e>
 800898a:	3002      	adds	r0, #2
 800898c:	089b      	lsrs	r3, r3, #2
 800898e:	07d9      	lsls	r1, r3, #31
 8008990:	d4e9      	bmi.n	8008966 <__lo0bits+0x26>
 8008992:	3001      	adds	r0, #1
 8008994:	085b      	lsrs	r3, r3, #1
 8008996:	d1e6      	bne.n	8008966 <__lo0bits+0x26>
 8008998:	2020      	movs	r0, #32
 800899a:	e7e2      	b.n	8008962 <__lo0bits+0x22>

0800899c <__i2b>:
 800899c:	b510      	push	{r4, lr}
 800899e:	000c      	movs	r4, r1
 80089a0:	2101      	movs	r1, #1
 80089a2:	f7ff ff07 	bl	80087b4 <_Balloc>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d106      	bne.n	80089b8 <__i2b+0x1c>
 80089aa:	21a0      	movs	r1, #160	; 0xa0
 80089ac:	0002      	movs	r2, r0
 80089ae:	4b04      	ldr	r3, [pc, #16]	; (80089c0 <__i2b+0x24>)
 80089b0:	4804      	ldr	r0, [pc, #16]	; (80089c4 <__i2b+0x28>)
 80089b2:	0049      	lsls	r1, r1, #1
 80089b4:	f000 fc6c 	bl	8009290 <__assert_func>
 80089b8:	2301      	movs	r3, #1
 80089ba:	6144      	str	r4, [r0, #20]
 80089bc:	6103      	str	r3, [r0, #16]
 80089be:	bd10      	pop	{r4, pc}
 80089c0:	0800978b 	.word	0x0800978b
 80089c4:	080097fc 	.word	0x080097fc

080089c8 <__multiply>:
 80089c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ca:	690b      	ldr	r3, [r1, #16]
 80089cc:	0014      	movs	r4, r2
 80089ce:	6912      	ldr	r2, [r2, #16]
 80089d0:	000d      	movs	r5, r1
 80089d2:	b089      	sub	sp, #36	; 0x24
 80089d4:	4293      	cmp	r3, r2
 80089d6:	da01      	bge.n	80089dc <__multiply+0x14>
 80089d8:	0025      	movs	r5, r4
 80089da:	000c      	movs	r4, r1
 80089dc:	692f      	ldr	r7, [r5, #16]
 80089de:	6926      	ldr	r6, [r4, #16]
 80089e0:	6869      	ldr	r1, [r5, #4]
 80089e2:	19bb      	adds	r3, r7, r6
 80089e4:	9302      	str	r3, [sp, #8]
 80089e6:	68ab      	ldr	r3, [r5, #8]
 80089e8:	19ba      	adds	r2, r7, r6
 80089ea:	4293      	cmp	r3, r2
 80089ec:	da00      	bge.n	80089f0 <__multiply+0x28>
 80089ee:	3101      	adds	r1, #1
 80089f0:	f7ff fee0 	bl	80087b4 <_Balloc>
 80089f4:	9001      	str	r0, [sp, #4]
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d106      	bne.n	8008a08 <__multiply+0x40>
 80089fa:	215e      	movs	r1, #94	; 0x5e
 80089fc:	0002      	movs	r2, r0
 80089fe:	4b48      	ldr	r3, [pc, #288]	; (8008b20 <__multiply+0x158>)
 8008a00:	4848      	ldr	r0, [pc, #288]	; (8008b24 <__multiply+0x15c>)
 8008a02:	31ff      	adds	r1, #255	; 0xff
 8008a04:	f000 fc44 	bl	8009290 <__assert_func>
 8008a08:	9b01      	ldr	r3, [sp, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	3314      	adds	r3, #20
 8008a0e:	469c      	mov	ip, r3
 8008a10:	19bb      	adds	r3, r7, r6
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4463      	add	r3, ip
 8008a16:	9303      	str	r3, [sp, #12]
 8008a18:	4663      	mov	r3, ip
 8008a1a:	9903      	ldr	r1, [sp, #12]
 8008a1c:	428b      	cmp	r3, r1
 8008a1e:	d32c      	bcc.n	8008a7a <__multiply+0xb2>
 8008a20:	002b      	movs	r3, r5
 8008a22:	0022      	movs	r2, r4
 8008a24:	3314      	adds	r3, #20
 8008a26:	00bf      	lsls	r7, r7, #2
 8008a28:	3214      	adds	r2, #20
 8008a2a:	9306      	str	r3, [sp, #24]
 8008a2c:	00b6      	lsls	r6, r6, #2
 8008a2e:	19db      	adds	r3, r3, r7
 8008a30:	9304      	str	r3, [sp, #16]
 8008a32:	1993      	adds	r3, r2, r6
 8008a34:	9307      	str	r3, [sp, #28]
 8008a36:	2304      	movs	r3, #4
 8008a38:	9305      	str	r3, [sp, #20]
 8008a3a:	002b      	movs	r3, r5
 8008a3c:	9904      	ldr	r1, [sp, #16]
 8008a3e:	3315      	adds	r3, #21
 8008a40:	9200      	str	r2, [sp, #0]
 8008a42:	4299      	cmp	r1, r3
 8008a44:	d305      	bcc.n	8008a52 <__multiply+0x8a>
 8008a46:	1b4b      	subs	r3, r1, r5
 8008a48:	3b15      	subs	r3, #21
 8008a4a:	089b      	lsrs	r3, r3, #2
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	9305      	str	r3, [sp, #20]
 8008a52:	9b07      	ldr	r3, [sp, #28]
 8008a54:	9a00      	ldr	r2, [sp, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d311      	bcc.n	8008a7e <__multiply+0xb6>
 8008a5a:	9b02      	ldr	r3, [sp, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dd06      	ble.n	8008a6e <__multiply+0xa6>
 8008a60:	9b03      	ldr	r3, [sp, #12]
 8008a62:	3b04      	subs	r3, #4
 8008a64:	9303      	str	r3, [sp, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d054      	beq.n	8008b18 <__multiply+0x150>
 8008a6e:	9b01      	ldr	r3, [sp, #4]
 8008a70:	9a02      	ldr	r2, [sp, #8]
 8008a72:	0018      	movs	r0, r3
 8008a74:	611a      	str	r2, [r3, #16]
 8008a76:	b009      	add	sp, #36	; 0x24
 8008a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a7a:	c304      	stmia	r3!, {r2}
 8008a7c:	e7cd      	b.n	8008a1a <__multiply+0x52>
 8008a7e:	9b00      	ldr	r3, [sp, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	b298      	uxth	r0, r3
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d01c      	beq.n	8008ac2 <__multiply+0xfa>
 8008a88:	4667      	mov	r7, ip
 8008a8a:	2400      	movs	r4, #0
 8008a8c:	9e06      	ldr	r6, [sp, #24]
 8008a8e:	ce02      	ldmia	r6!, {r1}
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	b28b      	uxth	r3, r1
 8008a94:	4343      	muls	r3, r0
 8008a96:	0c09      	lsrs	r1, r1, #16
 8008a98:	4341      	muls	r1, r0
 8008a9a:	b292      	uxth	r2, r2
 8008a9c:	189b      	adds	r3, r3, r2
 8008a9e:	191b      	adds	r3, r3, r4
 8008aa0:	000c      	movs	r4, r1
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	0c11      	lsrs	r1, r2, #16
 8008aa6:	1861      	adds	r1, r4, r1
 8008aa8:	0c1c      	lsrs	r4, r3, #16
 8008aaa:	1909      	adds	r1, r1, r4
 8008aac:	0c0c      	lsrs	r4, r1, #16
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	0409      	lsls	r1, r1, #16
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	c708      	stmia	r7!, {r3}
 8008ab6:	9b04      	ldr	r3, [sp, #16]
 8008ab8:	42b3      	cmp	r3, r6
 8008aba:	d8e8      	bhi.n	8008a8e <__multiply+0xc6>
 8008abc:	4663      	mov	r3, ip
 8008abe:	9a05      	ldr	r2, [sp, #20]
 8008ac0:	509c      	str	r4, [r3, r2]
 8008ac2:	9b00      	ldr	r3, [sp, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	0c1e      	lsrs	r6, r3, #16
 8008ac8:	d020      	beq.n	8008b0c <__multiply+0x144>
 8008aca:	4663      	mov	r3, ip
 8008acc:	002c      	movs	r4, r5
 8008ace:	4660      	mov	r0, ip
 8008ad0:	2700      	movs	r7, #0
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3414      	adds	r4, #20
 8008ad6:	6822      	ldr	r2, [r4, #0]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	b291      	uxth	r1, r2
 8008adc:	4371      	muls	r1, r6
 8008ade:	6802      	ldr	r2, [r0, #0]
 8008ae0:	0c12      	lsrs	r2, r2, #16
 8008ae2:	1889      	adds	r1, r1, r2
 8008ae4:	19cf      	adds	r7, r1, r7
 8008ae6:	0439      	lsls	r1, r7, #16
 8008ae8:	430b      	orrs	r3, r1
 8008aea:	6003      	str	r3, [r0, #0]
 8008aec:	cc02      	ldmia	r4!, {r1}
 8008aee:	6843      	ldr	r3, [r0, #4]
 8008af0:	0c09      	lsrs	r1, r1, #16
 8008af2:	4371      	muls	r1, r6
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	0c3f      	lsrs	r7, r7, #16
 8008af8:	18cb      	adds	r3, r1, r3
 8008afa:	9a04      	ldr	r2, [sp, #16]
 8008afc:	19db      	adds	r3, r3, r7
 8008afe:	0c1f      	lsrs	r7, r3, #16
 8008b00:	3004      	adds	r0, #4
 8008b02:	42a2      	cmp	r2, r4
 8008b04:	d8e7      	bhi.n	8008ad6 <__multiply+0x10e>
 8008b06:	4662      	mov	r2, ip
 8008b08:	9905      	ldr	r1, [sp, #20]
 8008b0a:	5053      	str	r3, [r2, r1]
 8008b0c:	9b00      	ldr	r3, [sp, #0]
 8008b0e:	3304      	adds	r3, #4
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	2304      	movs	r3, #4
 8008b14:	449c      	add	ip, r3
 8008b16:	e79c      	b.n	8008a52 <__multiply+0x8a>
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	9302      	str	r3, [sp, #8]
 8008b1e:	e79c      	b.n	8008a5a <__multiply+0x92>
 8008b20:	0800978b 	.word	0x0800978b
 8008b24:	080097fc 	.word	0x080097fc

08008b28 <__pow5mult>:
 8008b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	0015      	movs	r5, r2
 8008b2e:	0007      	movs	r7, r0
 8008b30:	000e      	movs	r6, r1
 8008b32:	401a      	ands	r2, r3
 8008b34:	421d      	tst	r5, r3
 8008b36:	d008      	beq.n	8008b4a <__pow5mult+0x22>
 8008b38:	4925      	ldr	r1, [pc, #148]	; (8008bd0 <__pow5mult+0xa8>)
 8008b3a:	3a01      	subs	r2, #1
 8008b3c:	0092      	lsls	r2, r2, #2
 8008b3e:	5852      	ldr	r2, [r2, r1]
 8008b40:	2300      	movs	r3, #0
 8008b42:	0031      	movs	r1, r6
 8008b44:	f7ff fe9e 	bl	8008884 <__multadd>
 8008b48:	0006      	movs	r6, r0
 8008b4a:	10ad      	asrs	r5, r5, #2
 8008b4c:	d03d      	beq.n	8008bca <__pow5mult+0xa2>
 8008b4e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008b50:	2c00      	cmp	r4, #0
 8008b52:	d10f      	bne.n	8008b74 <__pow5mult+0x4c>
 8008b54:	2010      	movs	r0, #16
 8008b56:	f7fd fe73 	bl	8006840 <malloc>
 8008b5a:	1e02      	subs	r2, r0, #0
 8008b5c:	6278      	str	r0, [r7, #36]	; 0x24
 8008b5e:	d105      	bne.n	8008b6c <__pow5mult+0x44>
 8008b60:	21d7      	movs	r1, #215	; 0xd7
 8008b62:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <__pow5mult+0xac>)
 8008b64:	481c      	ldr	r0, [pc, #112]	; (8008bd8 <__pow5mult+0xb0>)
 8008b66:	0049      	lsls	r1, r1, #1
 8008b68:	f000 fb92 	bl	8009290 <__assert_func>
 8008b6c:	6044      	str	r4, [r0, #4]
 8008b6e:	6084      	str	r4, [r0, #8]
 8008b70:	6004      	str	r4, [r0, #0]
 8008b72:	60c4      	str	r4, [r0, #12]
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	689c      	ldr	r4, [r3, #8]
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	2c00      	cmp	r4, #0
 8008b7c:	d108      	bne.n	8008b90 <__pow5mult+0x68>
 8008b7e:	0038      	movs	r0, r7
 8008b80:	4916      	ldr	r1, [pc, #88]	; (8008bdc <__pow5mult+0xb4>)
 8008b82:	f7ff ff0b 	bl	800899c <__i2b>
 8008b86:	9b01      	ldr	r3, [sp, #4]
 8008b88:	0004      	movs	r4, r0
 8008b8a:	6098      	str	r0, [r3, #8]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	6003      	str	r3, [r0, #0]
 8008b90:	2301      	movs	r3, #1
 8008b92:	421d      	tst	r5, r3
 8008b94:	d00a      	beq.n	8008bac <__pow5mult+0x84>
 8008b96:	0031      	movs	r1, r6
 8008b98:	0022      	movs	r2, r4
 8008b9a:	0038      	movs	r0, r7
 8008b9c:	f7ff ff14 	bl	80089c8 <__multiply>
 8008ba0:	0031      	movs	r1, r6
 8008ba2:	9001      	str	r0, [sp, #4]
 8008ba4:	0038      	movs	r0, r7
 8008ba6:	f7ff fe49 	bl	800883c <_Bfree>
 8008baa:	9e01      	ldr	r6, [sp, #4]
 8008bac:	106d      	asrs	r5, r5, #1
 8008bae:	d00c      	beq.n	8008bca <__pow5mult+0xa2>
 8008bb0:	6820      	ldr	r0, [r4, #0]
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d107      	bne.n	8008bc6 <__pow5mult+0x9e>
 8008bb6:	0022      	movs	r2, r4
 8008bb8:	0021      	movs	r1, r4
 8008bba:	0038      	movs	r0, r7
 8008bbc:	f7ff ff04 	bl	80089c8 <__multiply>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	6020      	str	r0, [r4, #0]
 8008bc4:	6003      	str	r3, [r0, #0]
 8008bc6:	0004      	movs	r4, r0
 8008bc8:	e7e2      	b.n	8008b90 <__pow5mult+0x68>
 8008bca:	0030      	movs	r0, r6
 8008bcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bce:	46c0      	nop			; (mov r8, r8)
 8008bd0:	08009950 	.word	0x08009950
 8008bd4:	08009715 	.word	0x08009715
 8008bd8:	080097fc 	.word	0x080097fc
 8008bdc:	00000271 	.word	0x00000271

08008be0 <__lshift>:
 8008be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be2:	000c      	movs	r4, r1
 8008be4:	0017      	movs	r7, r2
 8008be6:	6923      	ldr	r3, [r4, #16]
 8008be8:	1155      	asrs	r5, r2, #5
 8008bea:	b087      	sub	sp, #28
 8008bec:	18eb      	adds	r3, r5, r3
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	6849      	ldr	r1, [r1, #4]
 8008bf6:	68a3      	ldr	r3, [r4, #8]
 8008bf8:	9004      	str	r0, [sp, #16]
 8008bfa:	9a01      	ldr	r2, [sp, #4]
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	db11      	blt.n	8008c24 <__lshift+0x44>
 8008c00:	9804      	ldr	r0, [sp, #16]
 8008c02:	f7ff fdd7 	bl	80087b4 <_Balloc>
 8008c06:	0002      	movs	r2, r0
 8008c08:	2300      	movs	r3, #0
 8008c0a:	3214      	adds	r2, #20
 8008c0c:	0006      	movs	r6, r0
 8008c0e:	0011      	movs	r1, r2
 8008c10:	9203      	str	r2, [sp, #12]
 8008c12:	4298      	cmp	r0, r3
 8008c14:	d10d      	bne.n	8008c32 <__lshift+0x52>
 8008c16:	21da      	movs	r1, #218	; 0xda
 8008c18:	0002      	movs	r2, r0
 8008c1a:	4b27      	ldr	r3, [pc, #156]	; (8008cb8 <__lshift+0xd8>)
 8008c1c:	4827      	ldr	r0, [pc, #156]	; (8008cbc <__lshift+0xdc>)
 8008c1e:	31ff      	adds	r1, #255	; 0xff
 8008c20:	f000 fb36 	bl	8009290 <__assert_func>
 8008c24:	3101      	adds	r1, #1
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	e7e7      	b.n	8008bfa <__lshift+0x1a>
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	0098      	lsls	r0, r3, #2
 8008c2e:	500a      	str	r2, [r1, r0]
 8008c30:	3301      	adds	r3, #1
 8008c32:	42ab      	cmp	r3, r5
 8008c34:	dbf9      	blt.n	8008c2a <__lshift+0x4a>
 8008c36:	43eb      	mvns	r3, r5
 8008c38:	17db      	asrs	r3, r3, #31
 8008c3a:	401d      	ands	r5, r3
 8008c3c:	9b03      	ldr	r3, [sp, #12]
 8008c3e:	00ad      	lsls	r5, r5, #2
 8008c40:	211f      	movs	r1, #31
 8008c42:	0038      	movs	r0, r7
 8008c44:	195d      	adds	r5, r3, r5
 8008c46:	0023      	movs	r3, r4
 8008c48:	6922      	ldr	r2, [r4, #16]
 8008c4a:	3314      	adds	r3, #20
 8008c4c:	0092      	lsls	r2, r2, #2
 8008c4e:	4008      	ands	r0, r1
 8008c50:	4684      	mov	ip, r0
 8008c52:	189a      	adds	r2, r3, r2
 8008c54:	420f      	tst	r7, r1
 8008c56:	d02a      	beq.n	8008cae <__lshift+0xce>
 8008c58:	3101      	adds	r1, #1
 8008c5a:	1a09      	subs	r1, r1, r0
 8008c5c:	9105      	str	r1, [sp, #20]
 8008c5e:	2100      	movs	r1, #0
 8008c60:	9503      	str	r5, [sp, #12]
 8008c62:	4667      	mov	r7, ip
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	40b8      	lsls	r0, r7
 8008c68:	4301      	orrs	r1, r0
 8008c6a:	9803      	ldr	r0, [sp, #12]
 8008c6c:	c002      	stmia	r0!, {r1}
 8008c6e:	cb02      	ldmia	r3!, {r1}
 8008c70:	9003      	str	r0, [sp, #12]
 8008c72:	9805      	ldr	r0, [sp, #20]
 8008c74:	40c1      	lsrs	r1, r0
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d8f3      	bhi.n	8008c62 <__lshift+0x82>
 8008c7a:	0020      	movs	r0, r4
 8008c7c:	3015      	adds	r0, #21
 8008c7e:	2304      	movs	r3, #4
 8008c80:	4282      	cmp	r2, r0
 8008c82:	d304      	bcc.n	8008c8e <__lshift+0xae>
 8008c84:	1b13      	subs	r3, r2, r4
 8008c86:	3b15      	subs	r3, #21
 8008c88:	089b      	lsrs	r3, r3, #2
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	50e9      	str	r1, [r5, r3]
 8008c90:	2900      	cmp	r1, #0
 8008c92:	d002      	beq.n	8008c9a <__lshift+0xba>
 8008c94:	9b02      	ldr	r3, [sp, #8]
 8008c96:	3302      	adds	r3, #2
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	9b01      	ldr	r3, [sp, #4]
 8008c9c:	9804      	ldr	r0, [sp, #16]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	0021      	movs	r1, r4
 8008ca2:	6133      	str	r3, [r6, #16]
 8008ca4:	f7ff fdca 	bl	800883c <_Bfree>
 8008ca8:	0030      	movs	r0, r6
 8008caa:	b007      	add	sp, #28
 8008cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cae:	cb02      	ldmia	r3!, {r1}
 8008cb0:	c502      	stmia	r5!, {r1}
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d8fb      	bhi.n	8008cae <__lshift+0xce>
 8008cb6:	e7f0      	b.n	8008c9a <__lshift+0xba>
 8008cb8:	0800978b 	.word	0x0800978b
 8008cbc:	080097fc 	.word	0x080097fc

08008cc0 <__mcmp>:
 8008cc0:	6902      	ldr	r2, [r0, #16]
 8008cc2:	690b      	ldr	r3, [r1, #16]
 8008cc4:	b530      	push	{r4, r5, lr}
 8008cc6:	0004      	movs	r4, r0
 8008cc8:	1ad0      	subs	r0, r2, r3
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d10d      	bne.n	8008cea <__mcmp+0x2a>
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	3414      	adds	r4, #20
 8008cd2:	3114      	adds	r1, #20
 8008cd4:	18e2      	adds	r2, r4, r3
 8008cd6:	18c9      	adds	r1, r1, r3
 8008cd8:	3a04      	subs	r2, #4
 8008cda:	3904      	subs	r1, #4
 8008cdc:	6815      	ldr	r5, [r2, #0]
 8008cde:	680b      	ldr	r3, [r1, #0]
 8008ce0:	429d      	cmp	r5, r3
 8008ce2:	d003      	beq.n	8008cec <__mcmp+0x2c>
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	429d      	cmp	r5, r3
 8008ce8:	d303      	bcc.n	8008cf2 <__mcmp+0x32>
 8008cea:	bd30      	pop	{r4, r5, pc}
 8008cec:	4294      	cmp	r4, r2
 8008cee:	d3f3      	bcc.n	8008cd8 <__mcmp+0x18>
 8008cf0:	e7fb      	b.n	8008cea <__mcmp+0x2a>
 8008cf2:	4240      	negs	r0, r0
 8008cf4:	e7f9      	b.n	8008cea <__mcmp+0x2a>
	...

08008cf8 <__mdiff>:
 8008cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cfa:	000e      	movs	r6, r1
 8008cfc:	0007      	movs	r7, r0
 8008cfe:	0011      	movs	r1, r2
 8008d00:	0030      	movs	r0, r6
 8008d02:	b087      	sub	sp, #28
 8008d04:	0014      	movs	r4, r2
 8008d06:	f7ff ffdb 	bl	8008cc0 <__mcmp>
 8008d0a:	1e05      	subs	r5, r0, #0
 8008d0c:	d110      	bne.n	8008d30 <__mdiff+0x38>
 8008d0e:	0001      	movs	r1, r0
 8008d10:	0038      	movs	r0, r7
 8008d12:	f7ff fd4f 	bl	80087b4 <_Balloc>
 8008d16:	1e02      	subs	r2, r0, #0
 8008d18:	d104      	bne.n	8008d24 <__mdiff+0x2c>
 8008d1a:	4b40      	ldr	r3, [pc, #256]	; (8008e1c <__mdiff+0x124>)
 8008d1c:	4940      	ldr	r1, [pc, #256]	; (8008e20 <__mdiff+0x128>)
 8008d1e:	4841      	ldr	r0, [pc, #260]	; (8008e24 <__mdiff+0x12c>)
 8008d20:	f000 fab6 	bl	8009290 <__assert_func>
 8008d24:	2301      	movs	r3, #1
 8008d26:	6145      	str	r5, [r0, #20]
 8008d28:	6103      	str	r3, [r0, #16]
 8008d2a:	0010      	movs	r0, r2
 8008d2c:	b007      	add	sp, #28
 8008d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d30:	2301      	movs	r3, #1
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	2800      	cmp	r0, #0
 8008d36:	db04      	blt.n	8008d42 <__mdiff+0x4a>
 8008d38:	0023      	movs	r3, r4
 8008d3a:	0034      	movs	r4, r6
 8008d3c:	001e      	movs	r6, r3
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	0038      	movs	r0, r7
 8008d44:	6861      	ldr	r1, [r4, #4]
 8008d46:	f7ff fd35 	bl	80087b4 <_Balloc>
 8008d4a:	1e02      	subs	r2, r0, #0
 8008d4c:	d103      	bne.n	8008d56 <__mdiff+0x5e>
 8008d4e:	2190      	movs	r1, #144	; 0x90
 8008d50:	4b32      	ldr	r3, [pc, #200]	; (8008e1c <__mdiff+0x124>)
 8008d52:	0089      	lsls	r1, r1, #2
 8008d54:	e7e3      	b.n	8008d1e <__mdiff+0x26>
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	2700      	movs	r7, #0
 8008d5a:	60c3      	str	r3, [r0, #12]
 8008d5c:	6920      	ldr	r0, [r4, #16]
 8008d5e:	3414      	adds	r4, #20
 8008d60:	9401      	str	r4, [sp, #4]
 8008d62:	9b01      	ldr	r3, [sp, #4]
 8008d64:	0084      	lsls	r4, r0, #2
 8008d66:	191b      	adds	r3, r3, r4
 8008d68:	0034      	movs	r4, r6
 8008d6a:	9302      	str	r3, [sp, #8]
 8008d6c:	6933      	ldr	r3, [r6, #16]
 8008d6e:	3414      	adds	r4, #20
 8008d70:	0099      	lsls	r1, r3, #2
 8008d72:	1863      	adds	r3, r4, r1
 8008d74:	9303      	str	r3, [sp, #12]
 8008d76:	0013      	movs	r3, r2
 8008d78:	3314      	adds	r3, #20
 8008d7a:	469c      	mov	ip, r3
 8008d7c:	9305      	str	r3, [sp, #20]
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	9304      	str	r3, [sp, #16]
 8008d82:	9b04      	ldr	r3, [sp, #16]
 8008d84:	cc02      	ldmia	r4!, {r1}
 8008d86:	cb20      	ldmia	r3!, {r5}
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	b2ab      	uxth	r3, r5
 8008d8c:	19df      	adds	r7, r3, r7
 8008d8e:	b28b      	uxth	r3, r1
 8008d90:	1afb      	subs	r3, r7, r3
 8008d92:	0c2d      	lsrs	r5, r5, #16
 8008d94:	0c09      	lsrs	r1, r1, #16
 8008d96:	1a69      	subs	r1, r5, r1
 8008d98:	141d      	asrs	r5, r3, #16
 8008d9a:	1949      	adds	r1, r1, r5
 8008d9c:	140f      	asrs	r7, r1, #16
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	0409      	lsls	r1, r1, #16
 8008da2:	430b      	orrs	r3, r1
 8008da4:	4661      	mov	r1, ip
 8008da6:	c108      	stmia	r1!, {r3}
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	468c      	mov	ip, r1
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	d8e8      	bhi.n	8008d82 <__mdiff+0x8a>
 8008db0:	0031      	movs	r1, r6
 8008db2:	9c03      	ldr	r4, [sp, #12]
 8008db4:	3115      	adds	r1, #21
 8008db6:	2304      	movs	r3, #4
 8008db8:	428c      	cmp	r4, r1
 8008dba:	d304      	bcc.n	8008dc6 <__mdiff+0xce>
 8008dbc:	1ba3      	subs	r3, r4, r6
 8008dbe:	3b15      	subs	r3, #21
 8008dc0:	089b      	lsrs	r3, r3, #2
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	9901      	ldr	r1, [sp, #4]
 8008dc8:	18cc      	adds	r4, r1, r3
 8008dca:	9905      	ldr	r1, [sp, #20]
 8008dcc:	0026      	movs	r6, r4
 8008dce:	18cb      	adds	r3, r1, r3
 8008dd0:	469c      	mov	ip, r3
 8008dd2:	9902      	ldr	r1, [sp, #8]
 8008dd4:	428e      	cmp	r6, r1
 8008dd6:	d310      	bcc.n	8008dfa <__mdiff+0x102>
 8008dd8:	9e02      	ldr	r6, [sp, #8]
 8008dda:	1ee5      	subs	r5, r4, #3
 8008ddc:	2100      	movs	r1, #0
 8008dde:	42ae      	cmp	r6, r5
 8008de0:	d304      	bcc.n	8008dec <__mdiff+0xf4>
 8008de2:	0031      	movs	r1, r6
 8008de4:	3103      	adds	r1, #3
 8008de6:	1b09      	subs	r1, r1, r4
 8008de8:	0889      	lsrs	r1, r1, #2
 8008dea:	0089      	lsls	r1, r1, #2
 8008dec:	185b      	adds	r3, r3, r1
 8008dee:	3b04      	subs	r3, #4
 8008df0:	6819      	ldr	r1, [r3, #0]
 8008df2:	2900      	cmp	r1, #0
 8008df4:	d00f      	beq.n	8008e16 <__mdiff+0x11e>
 8008df6:	6110      	str	r0, [r2, #16]
 8008df8:	e797      	b.n	8008d2a <__mdiff+0x32>
 8008dfa:	ce02      	ldmia	r6!, {r1}
 8008dfc:	b28d      	uxth	r5, r1
 8008dfe:	19ed      	adds	r5, r5, r7
 8008e00:	0c0f      	lsrs	r7, r1, #16
 8008e02:	1429      	asrs	r1, r5, #16
 8008e04:	1879      	adds	r1, r7, r1
 8008e06:	140f      	asrs	r7, r1, #16
 8008e08:	b2ad      	uxth	r5, r5
 8008e0a:	0409      	lsls	r1, r1, #16
 8008e0c:	430d      	orrs	r5, r1
 8008e0e:	4661      	mov	r1, ip
 8008e10:	c120      	stmia	r1!, {r5}
 8008e12:	468c      	mov	ip, r1
 8008e14:	e7dd      	b.n	8008dd2 <__mdiff+0xda>
 8008e16:	3801      	subs	r0, #1
 8008e18:	e7e9      	b.n	8008dee <__mdiff+0xf6>
 8008e1a:	46c0      	nop			; (mov r8, r8)
 8008e1c:	0800978b 	.word	0x0800978b
 8008e20:	00000232 	.word	0x00000232
 8008e24:	080097fc 	.word	0x080097fc

08008e28 <__d2b>:
 8008e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	0014      	movs	r4, r2
 8008e2e:	001e      	movs	r6, r3
 8008e30:	9f08      	ldr	r7, [sp, #32]
 8008e32:	f7ff fcbf 	bl	80087b4 <_Balloc>
 8008e36:	1e05      	subs	r5, r0, #0
 8008e38:	d105      	bne.n	8008e46 <__d2b+0x1e>
 8008e3a:	0002      	movs	r2, r0
 8008e3c:	4b26      	ldr	r3, [pc, #152]	; (8008ed8 <__d2b+0xb0>)
 8008e3e:	4927      	ldr	r1, [pc, #156]	; (8008edc <__d2b+0xb4>)
 8008e40:	4827      	ldr	r0, [pc, #156]	; (8008ee0 <__d2b+0xb8>)
 8008e42:	f000 fa25 	bl	8009290 <__assert_func>
 8008e46:	0333      	lsls	r3, r6, #12
 8008e48:	0076      	lsls	r6, r6, #1
 8008e4a:	0b1b      	lsrs	r3, r3, #12
 8008e4c:	0d76      	lsrs	r6, r6, #21
 8008e4e:	d124      	bne.n	8008e9a <__d2b+0x72>
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	2c00      	cmp	r4, #0
 8008e54:	d027      	beq.n	8008ea6 <__d2b+0x7e>
 8008e56:	4668      	mov	r0, sp
 8008e58:	9400      	str	r4, [sp, #0]
 8008e5a:	f7ff fd71 	bl	8008940 <__lo0bits>
 8008e5e:	9c00      	ldr	r4, [sp, #0]
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d01e      	beq.n	8008ea2 <__d2b+0x7a>
 8008e64:	9b01      	ldr	r3, [sp, #4]
 8008e66:	2120      	movs	r1, #32
 8008e68:	001a      	movs	r2, r3
 8008e6a:	1a09      	subs	r1, r1, r0
 8008e6c:	408a      	lsls	r2, r1
 8008e6e:	40c3      	lsrs	r3, r0
 8008e70:	4322      	orrs	r2, r4
 8008e72:	616a      	str	r2, [r5, #20]
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	9c01      	ldr	r4, [sp, #4]
 8008e78:	61ac      	str	r4, [r5, #24]
 8008e7a:	1e63      	subs	r3, r4, #1
 8008e7c:	419c      	sbcs	r4, r3
 8008e7e:	3401      	adds	r4, #1
 8008e80:	612c      	str	r4, [r5, #16]
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	d018      	beq.n	8008eb8 <__d2b+0x90>
 8008e86:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <__d2b+0xbc>)
 8008e88:	18f6      	adds	r6, r6, r3
 8008e8a:	2335      	movs	r3, #53	; 0x35
 8008e8c:	1836      	adds	r6, r6, r0
 8008e8e:	1a18      	subs	r0, r3, r0
 8008e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e92:	603e      	str	r6, [r7, #0]
 8008e94:	6018      	str	r0, [r3, #0]
 8008e96:	0028      	movs	r0, r5
 8008e98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e9a:	2280      	movs	r2, #128	; 0x80
 8008e9c:	0352      	lsls	r2, r2, #13
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	e7d6      	b.n	8008e50 <__d2b+0x28>
 8008ea2:	616c      	str	r4, [r5, #20]
 8008ea4:	e7e7      	b.n	8008e76 <__d2b+0x4e>
 8008ea6:	a801      	add	r0, sp, #4
 8008ea8:	f7ff fd4a 	bl	8008940 <__lo0bits>
 8008eac:	2401      	movs	r4, #1
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	612c      	str	r4, [r5, #16]
 8008eb2:	616b      	str	r3, [r5, #20]
 8008eb4:	3020      	adds	r0, #32
 8008eb6:	e7e4      	b.n	8008e82 <__d2b+0x5a>
 8008eb8:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <__d2b+0xc0>)
 8008eba:	18c0      	adds	r0, r0, r3
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <__d2b+0xc4>)
 8008ebe:	6038      	str	r0, [r7, #0]
 8008ec0:	18e3      	adds	r3, r4, r3
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	18eb      	adds	r3, r5, r3
 8008ec6:	6958      	ldr	r0, [r3, #20]
 8008ec8:	f7ff fd20 	bl	800890c <__hi0bits>
 8008ecc:	0164      	lsls	r4, r4, #5
 8008ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed0:	1a24      	subs	r4, r4, r0
 8008ed2:	601c      	str	r4, [r3, #0]
 8008ed4:	e7df      	b.n	8008e96 <__d2b+0x6e>
 8008ed6:	46c0      	nop			; (mov r8, r8)
 8008ed8:	0800978b 	.word	0x0800978b
 8008edc:	0000030a 	.word	0x0000030a
 8008ee0:	080097fc 	.word	0x080097fc
 8008ee4:	fffffbcd 	.word	0xfffffbcd
 8008ee8:	fffffbce 	.word	0xfffffbce
 8008eec:	3fffffff 	.word	0x3fffffff

08008ef0 <_calloc_r>:
 8008ef0:	434a      	muls	r2, r1
 8008ef2:	b570      	push	{r4, r5, r6, lr}
 8008ef4:	0011      	movs	r1, r2
 8008ef6:	0015      	movs	r5, r2
 8008ef8:	f7fd fcfe 	bl	80068f8 <_malloc_r>
 8008efc:	1e04      	subs	r4, r0, #0
 8008efe:	d003      	beq.n	8008f08 <_calloc_r+0x18>
 8008f00:	002a      	movs	r2, r5
 8008f02:	2100      	movs	r1, #0
 8008f04:	f7fd fca6 	bl	8006854 <memset>
 8008f08:	0020      	movs	r0, r4
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}

08008f0c <__sfputc_r>:
 8008f0c:	6893      	ldr	r3, [r2, #8]
 8008f0e:	b510      	push	{r4, lr}
 8008f10:	3b01      	subs	r3, #1
 8008f12:	6093      	str	r3, [r2, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	da04      	bge.n	8008f22 <__sfputc_r+0x16>
 8008f18:	6994      	ldr	r4, [r2, #24]
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	db07      	blt.n	8008f2e <__sfputc_r+0x22>
 8008f1e:	290a      	cmp	r1, #10
 8008f20:	d005      	beq.n	8008f2e <__sfputc_r+0x22>
 8008f22:	6813      	ldr	r3, [r2, #0]
 8008f24:	1c58      	adds	r0, r3, #1
 8008f26:	6010      	str	r0, [r2, #0]
 8008f28:	7019      	strb	r1, [r3, #0]
 8008f2a:	0008      	movs	r0, r1
 8008f2c:	bd10      	pop	{r4, pc}
 8008f2e:	f7fe fa63 	bl	80073f8 <__swbuf_r>
 8008f32:	0001      	movs	r1, r0
 8008f34:	e7f9      	b.n	8008f2a <__sfputc_r+0x1e>

08008f36 <__sfputs_r>:
 8008f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f38:	0006      	movs	r6, r0
 8008f3a:	000f      	movs	r7, r1
 8008f3c:	0014      	movs	r4, r2
 8008f3e:	18d5      	adds	r5, r2, r3
 8008f40:	42ac      	cmp	r4, r5
 8008f42:	d101      	bne.n	8008f48 <__sfputs_r+0x12>
 8008f44:	2000      	movs	r0, #0
 8008f46:	e007      	b.n	8008f58 <__sfputs_r+0x22>
 8008f48:	7821      	ldrb	r1, [r4, #0]
 8008f4a:	003a      	movs	r2, r7
 8008f4c:	0030      	movs	r0, r6
 8008f4e:	f7ff ffdd 	bl	8008f0c <__sfputc_r>
 8008f52:	3401      	adds	r4, #1
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d1f3      	bne.n	8008f40 <__sfputs_r+0xa>
 8008f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f5c <_vfiprintf_r>:
 8008f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f5e:	b0a1      	sub	sp, #132	; 0x84
 8008f60:	0006      	movs	r6, r0
 8008f62:	000c      	movs	r4, r1
 8008f64:	001f      	movs	r7, r3
 8008f66:	9203      	str	r2, [sp, #12]
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d004      	beq.n	8008f76 <_vfiprintf_r+0x1a>
 8008f6c:	6983      	ldr	r3, [r0, #24]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <_vfiprintf_r+0x1a>
 8008f72:	f7ff fae7 	bl	8008544 <__sinit>
 8008f76:	4b8e      	ldr	r3, [pc, #568]	; (80091b0 <_vfiprintf_r+0x254>)
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	d11c      	bne.n	8008fb6 <_vfiprintf_r+0x5a>
 8008f7c:	6874      	ldr	r4, [r6, #4]
 8008f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f80:	07db      	lsls	r3, r3, #31
 8008f82:	d405      	bmi.n	8008f90 <_vfiprintf_r+0x34>
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	059b      	lsls	r3, r3, #22
 8008f88:	d402      	bmi.n	8008f90 <_vfiprintf_r+0x34>
 8008f8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f8c:	f7ff fb7f 	bl	800868e <__retarget_lock_acquire_recursive>
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	071b      	lsls	r3, r3, #28
 8008f94:	d502      	bpl.n	8008f9c <_vfiprintf_r+0x40>
 8008f96:	6923      	ldr	r3, [r4, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d11d      	bne.n	8008fd8 <_vfiprintf_r+0x7c>
 8008f9c:	0021      	movs	r1, r4
 8008f9e:	0030      	movs	r0, r6
 8008fa0:	f7fe fa80 	bl	80074a4 <__swsetup_r>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d017      	beq.n	8008fd8 <_vfiprintf_r+0x7c>
 8008fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008faa:	07db      	lsls	r3, r3, #31
 8008fac:	d50d      	bpl.n	8008fca <_vfiprintf_r+0x6e>
 8008fae:	2001      	movs	r0, #1
 8008fb0:	4240      	negs	r0, r0
 8008fb2:	b021      	add	sp, #132	; 0x84
 8008fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb6:	4b7f      	ldr	r3, [pc, #508]	; (80091b4 <_vfiprintf_r+0x258>)
 8008fb8:	429c      	cmp	r4, r3
 8008fba:	d101      	bne.n	8008fc0 <_vfiprintf_r+0x64>
 8008fbc:	68b4      	ldr	r4, [r6, #8]
 8008fbe:	e7de      	b.n	8008f7e <_vfiprintf_r+0x22>
 8008fc0:	4b7d      	ldr	r3, [pc, #500]	; (80091b8 <_vfiprintf_r+0x25c>)
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	d1db      	bne.n	8008f7e <_vfiprintf_r+0x22>
 8008fc6:	68f4      	ldr	r4, [r6, #12]
 8008fc8:	e7d9      	b.n	8008f7e <_vfiprintf_r+0x22>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	059b      	lsls	r3, r3, #22
 8008fce:	d4ee      	bmi.n	8008fae <_vfiprintf_r+0x52>
 8008fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fd2:	f7ff fb5d 	bl	8008690 <__retarget_lock_release_recursive>
 8008fd6:	e7ea      	b.n	8008fae <_vfiprintf_r+0x52>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	ad08      	add	r5, sp, #32
 8008fdc:	616b      	str	r3, [r5, #20]
 8008fde:	3320      	adds	r3, #32
 8008fe0:	766b      	strb	r3, [r5, #25]
 8008fe2:	3310      	adds	r3, #16
 8008fe4:	76ab      	strb	r3, [r5, #26]
 8008fe6:	9707      	str	r7, [sp, #28]
 8008fe8:	9f03      	ldr	r7, [sp, #12]
 8008fea:	783b      	ldrb	r3, [r7, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d001      	beq.n	8008ff4 <_vfiprintf_r+0x98>
 8008ff0:	2b25      	cmp	r3, #37	; 0x25
 8008ff2:	d14e      	bne.n	8009092 <_vfiprintf_r+0x136>
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	1afb      	subs	r3, r7, r3
 8008ff8:	9305      	str	r3, [sp, #20]
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	429f      	cmp	r7, r3
 8008ffe:	d00d      	beq.n	800901c <_vfiprintf_r+0xc0>
 8009000:	9b05      	ldr	r3, [sp, #20]
 8009002:	0021      	movs	r1, r4
 8009004:	0030      	movs	r0, r6
 8009006:	9a03      	ldr	r2, [sp, #12]
 8009008:	f7ff ff95 	bl	8008f36 <__sfputs_r>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d100      	bne.n	8009012 <_vfiprintf_r+0xb6>
 8009010:	e0b5      	b.n	800917e <_vfiprintf_r+0x222>
 8009012:	696a      	ldr	r2, [r5, #20]
 8009014:	9b05      	ldr	r3, [sp, #20]
 8009016:	4694      	mov	ip, r2
 8009018:	4463      	add	r3, ip
 800901a:	616b      	str	r3, [r5, #20]
 800901c:	783b      	ldrb	r3, [r7, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d100      	bne.n	8009024 <_vfiprintf_r+0xc8>
 8009022:	e0ac      	b.n	800917e <_vfiprintf_r+0x222>
 8009024:	2201      	movs	r2, #1
 8009026:	1c7b      	adds	r3, r7, #1
 8009028:	9303      	str	r3, [sp, #12]
 800902a:	2300      	movs	r3, #0
 800902c:	4252      	negs	r2, r2
 800902e:	606a      	str	r2, [r5, #4]
 8009030:	a904      	add	r1, sp, #16
 8009032:	3254      	adds	r2, #84	; 0x54
 8009034:	1852      	adds	r2, r2, r1
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	60eb      	str	r3, [r5, #12]
 800903a:	60ab      	str	r3, [r5, #8]
 800903c:	7013      	strb	r3, [r2, #0]
 800903e:	65ab      	str	r3, [r5, #88]	; 0x58
 8009040:	9b03      	ldr	r3, [sp, #12]
 8009042:	2205      	movs	r2, #5
 8009044:	7819      	ldrb	r1, [r3, #0]
 8009046:	485d      	ldr	r0, [pc, #372]	; (80091bc <_vfiprintf_r+0x260>)
 8009048:	f7ff fb90 	bl	800876c <memchr>
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	1c5f      	adds	r7, r3, #1
 8009050:	2800      	cmp	r0, #0
 8009052:	d120      	bne.n	8009096 <_vfiprintf_r+0x13a>
 8009054:	682a      	ldr	r2, [r5, #0]
 8009056:	06d3      	lsls	r3, r2, #27
 8009058:	d504      	bpl.n	8009064 <_vfiprintf_r+0x108>
 800905a:	2353      	movs	r3, #83	; 0x53
 800905c:	a904      	add	r1, sp, #16
 800905e:	185b      	adds	r3, r3, r1
 8009060:	2120      	movs	r1, #32
 8009062:	7019      	strb	r1, [r3, #0]
 8009064:	0713      	lsls	r3, r2, #28
 8009066:	d504      	bpl.n	8009072 <_vfiprintf_r+0x116>
 8009068:	2353      	movs	r3, #83	; 0x53
 800906a:	a904      	add	r1, sp, #16
 800906c:	185b      	adds	r3, r3, r1
 800906e:	212b      	movs	r1, #43	; 0x2b
 8009070:	7019      	strb	r1, [r3, #0]
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	2b2a      	cmp	r3, #42	; 0x2a
 8009078:	d016      	beq.n	80090a8 <_vfiprintf_r+0x14c>
 800907a:	2100      	movs	r1, #0
 800907c:	68eb      	ldr	r3, [r5, #12]
 800907e:	9f03      	ldr	r7, [sp, #12]
 8009080:	783a      	ldrb	r2, [r7, #0]
 8009082:	1c78      	adds	r0, r7, #1
 8009084:	3a30      	subs	r2, #48	; 0x30
 8009086:	4684      	mov	ip, r0
 8009088:	2a09      	cmp	r2, #9
 800908a:	d94f      	bls.n	800912c <_vfiprintf_r+0x1d0>
 800908c:	2900      	cmp	r1, #0
 800908e:	d111      	bne.n	80090b4 <_vfiprintf_r+0x158>
 8009090:	e017      	b.n	80090c2 <_vfiprintf_r+0x166>
 8009092:	3701      	adds	r7, #1
 8009094:	e7a9      	b.n	8008fea <_vfiprintf_r+0x8e>
 8009096:	4b49      	ldr	r3, [pc, #292]	; (80091bc <_vfiprintf_r+0x260>)
 8009098:	682a      	ldr	r2, [r5, #0]
 800909a:	1ac0      	subs	r0, r0, r3
 800909c:	2301      	movs	r3, #1
 800909e:	4083      	lsls	r3, r0
 80090a0:	4313      	orrs	r3, r2
 80090a2:	602b      	str	r3, [r5, #0]
 80090a4:	9703      	str	r7, [sp, #12]
 80090a6:	e7cb      	b.n	8009040 <_vfiprintf_r+0xe4>
 80090a8:	9b07      	ldr	r3, [sp, #28]
 80090aa:	1d19      	adds	r1, r3, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	9107      	str	r1, [sp, #28]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	db01      	blt.n	80090b8 <_vfiprintf_r+0x15c>
 80090b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80090b6:	e004      	b.n	80090c2 <_vfiprintf_r+0x166>
 80090b8:	425b      	negs	r3, r3
 80090ba:	60eb      	str	r3, [r5, #12]
 80090bc:	2302      	movs	r3, #2
 80090be:	4313      	orrs	r3, r2
 80090c0:	602b      	str	r3, [r5, #0]
 80090c2:	783b      	ldrb	r3, [r7, #0]
 80090c4:	2b2e      	cmp	r3, #46	; 0x2e
 80090c6:	d10a      	bne.n	80090de <_vfiprintf_r+0x182>
 80090c8:	787b      	ldrb	r3, [r7, #1]
 80090ca:	2b2a      	cmp	r3, #42	; 0x2a
 80090cc:	d137      	bne.n	800913e <_vfiprintf_r+0x1e2>
 80090ce:	9b07      	ldr	r3, [sp, #28]
 80090d0:	3702      	adds	r7, #2
 80090d2:	1d1a      	adds	r2, r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	9207      	str	r2, [sp, #28]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	db2d      	blt.n	8009138 <_vfiprintf_r+0x1dc>
 80090dc:	9309      	str	r3, [sp, #36]	; 0x24
 80090de:	2203      	movs	r2, #3
 80090e0:	7839      	ldrb	r1, [r7, #0]
 80090e2:	4837      	ldr	r0, [pc, #220]	; (80091c0 <_vfiprintf_r+0x264>)
 80090e4:	f7ff fb42 	bl	800876c <memchr>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	d007      	beq.n	80090fc <_vfiprintf_r+0x1a0>
 80090ec:	4b34      	ldr	r3, [pc, #208]	; (80091c0 <_vfiprintf_r+0x264>)
 80090ee:	682a      	ldr	r2, [r5, #0]
 80090f0:	1ac0      	subs	r0, r0, r3
 80090f2:	2340      	movs	r3, #64	; 0x40
 80090f4:	4083      	lsls	r3, r0
 80090f6:	4313      	orrs	r3, r2
 80090f8:	3701      	adds	r7, #1
 80090fa:	602b      	str	r3, [r5, #0]
 80090fc:	7839      	ldrb	r1, [r7, #0]
 80090fe:	1c7b      	adds	r3, r7, #1
 8009100:	2206      	movs	r2, #6
 8009102:	4830      	ldr	r0, [pc, #192]	; (80091c4 <_vfiprintf_r+0x268>)
 8009104:	9303      	str	r3, [sp, #12]
 8009106:	7629      	strb	r1, [r5, #24]
 8009108:	f7ff fb30 	bl	800876c <memchr>
 800910c:	2800      	cmp	r0, #0
 800910e:	d045      	beq.n	800919c <_vfiprintf_r+0x240>
 8009110:	4b2d      	ldr	r3, [pc, #180]	; (80091c8 <_vfiprintf_r+0x26c>)
 8009112:	2b00      	cmp	r3, #0
 8009114:	d127      	bne.n	8009166 <_vfiprintf_r+0x20a>
 8009116:	2207      	movs	r2, #7
 8009118:	9b07      	ldr	r3, [sp, #28]
 800911a:	3307      	adds	r3, #7
 800911c:	4393      	bics	r3, r2
 800911e:	3308      	adds	r3, #8
 8009120:	9307      	str	r3, [sp, #28]
 8009122:	696b      	ldr	r3, [r5, #20]
 8009124:	9a04      	ldr	r2, [sp, #16]
 8009126:	189b      	adds	r3, r3, r2
 8009128:	616b      	str	r3, [r5, #20]
 800912a:	e75d      	b.n	8008fe8 <_vfiprintf_r+0x8c>
 800912c:	210a      	movs	r1, #10
 800912e:	434b      	muls	r3, r1
 8009130:	4667      	mov	r7, ip
 8009132:	189b      	adds	r3, r3, r2
 8009134:	3909      	subs	r1, #9
 8009136:	e7a3      	b.n	8009080 <_vfiprintf_r+0x124>
 8009138:	2301      	movs	r3, #1
 800913a:	425b      	negs	r3, r3
 800913c:	e7ce      	b.n	80090dc <_vfiprintf_r+0x180>
 800913e:	2300      	movs	r3, #0
 8009140:	001a      	movs	r2, r3
 8009142:	3701      	adds	r7, #1
 8009144:	606b      	str	r3, [r5, #4]
 8009146:	7839      	ldrb	r1, [r7, #0]
 8009148:	1c78      	adds	r0, r7, #1
 800914a:	3930      	subs	r1, #48	; 0x30
 800914c:	4684      	mov	ip, r0
 800914e:	2909      	cmp	r1, #9
 8009150:	d903      	bls.n	800915a <_vfiprintf_r+0x1fe>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0c3      	beq.n	80090de <_vfiprintf_r+0x182>
 8009156:	9209      	str	r2, [sp, #36]	; 0x24
 8009158:	e7c1      	b.n	80090de <_vfiprintf_r+0x182>
 800915a:	230a      	movs	r3, #10
 800915c:	435a      	muls	r2, r3
 800915e:	4667      	mov	r7, ip
 8009160:	1852      	adds	r2, r2, r1
 8009162:	3b09      	subs	r3, #9
 8009164:	e7ef      	b.n	8009146 <_vfiprintf_r+0x1ea>
 8009166:	ab07      	add	r3, sp, #28
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	0022      	movs	r2, r4
 800916c:	0029      	movs	r1, r5
 800916e:	0030      	movs	r0, r6
 8009170:	4b16      	ldr	r3, [pc, #88]	; (80091cc <_vfiprintf_r+0x270>)
 8009172:	f7fd fcc9 	bl	8006b08 <_printf_float>
 8009176:	9004      	str	r0, [sp, #16]
 8009178:	9b04      	ldr	r3, [sp, #16]
 800917a:	3301      	adds	r3, #1
 800917c:	d1d1      	bne.n	8009122 <_vfiprintf_r+0x1c6>
 800917e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009180:	07db      	lsls	r3, r3, #31
 8009182:	d405      	bmi.n	8009190 <_vfiprintf_r+0x234>
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	059b      	lsls	r3, r3, #22
 8009188:	d402      	bmi.n	8009190 <_vfiprintf_r+0x234>
 800918a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800918c:	f7ff fa80 	bl	8008690 <__retarget_lock_release_recursive>
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	065b      	lsls	r3, r3, #25
 8009194:	d500      	bpl.n	8009198 <_vfiprintf_r+0x23c>
 8009196:	e70a      	b.n	8008fae <_vfiprintf_r+0x52>
 8009198:	980d      	ldr	r0, [sp, #52]	; 0x34
 800919a:	e70a      	b.n	8008fb2 <_vfiprintf_r+0x56>
 800919c:	ab07      	add	r3, sp, #28
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	0022      	movs	r2, r4
 80091a2:	0029      	movs	r1, r5
 80091a4:	0030      	movs	r0, r6
 80091a6:	4b09      	ldr	r3, [pc, #36]	; (80091cc <_vfiprintf_r+0x270>)
 80091a8:	f7fd ff6c 	bl	8007084 <_printf_i>
 80091ac:	e7e3      	b.n	8009176 <_vfiprintf_r+0x21a>
 80091ae:	46c0      	nop			; (mov r8, r8)
 80091b0:	080097bc 	.word	0x080097bc
 80091b4:	080097dc 	.word	0x080097dc
 80091b8:	0800979c 	.word	0x0800979c
 80091bc:	0800995c 	.word	0x0800995c
 80091c0:	08009962 	.word	0x08009962
 80091c4:	08009966 	.word	0x08009966
 80091c8:	08006b09 	.word	0x08006b09
 80091cc:	08008f37 	.word	0x08008f37

080091d0 <__sread>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	000c      	movs	r4, r1
 80091d4:	250e      	movs	r5, #14
 80091d6:	5f49      	ldrsh	r1, [r1, r5]
 80091d8:	f000 f8e4 	bl	80093a4 <_read_r>
 80091dc:	2800      	cmp	r0, #0
 80091de:	db03      	blt.n	80091e8 <__sread+0x18>
 80091e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80091e2:	181b      	adds	r3, r3, r0
 80091e4:	6563      	str	r3, [r4, #84]	; 0x54
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	4a02      	ldr	r2, [pc, #8]	; (80091f4 <__sread+0x24>)
 80091ec:	4013      	ands	r3, r2
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	e7f9      	b.n	80091e6 <__sread+0x16>
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	ffffefff 	.word	0xffffefff

080091f8 <__swrite>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	001f      	movs	r7, r3
 80091fc:	898b      	ldrh	r3, [r1, #12]
 80091fe:	0005      	movs	r5, r0
 8009200:	000c      	movs	r4, r1
 8009202:	0016      	movs	r6, r2
 8009204:	05db      	lsls	r3, r3, #23
 8009206:	d505      	bpl.n	8009214 <__swrite+0x1c>
 8009208:	230e      	movs	r3, #14
 800920a:	5ec9      	ldrsh	r1, [r1, r3]
 800920c:	2200      	movs	r2, #0
 800920e:	2302      	movs	r3, #2
 8009210:	f000 f8a2 	bl	8009358 <_lseek_r>
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	4a05      	ldr	r2, [pc, #20]	; (800922c <__swrite+0x34>)
 8009218:	0028      	movs	r0, r5
 800921a:	4013      	ands	r3, r2
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	0032      	movs	r2, r6
 8009220:	230e      	movs	r3, #14
 8009222:	5ee1      	ldrsh	r1, [r4, r3]
 8009224:	003b      	movs	r3, r7
 8009226:	f000 f81f 	bl	8009268 <_write_r>
 800922a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800922c:	ffffefff 	.word	0xffffefff

08009230 <__sseek>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	000c      	movs	r4, r1
 8009234:	250e      	movs	r5, #14
 8009236:	5f49      	ldrsh	r1, [r1, r5]
 8009238:	f000 f88e 	bl	8009358 <_lseek_r>
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	1c42      	adds	r2, r0, #1
 8009240:	d103      	bne.n	800924a <__sseek+0x1a>
 8009242:	4a05      	ldr	r2, [pc, #20]	; (8009258 <__sseek+0x28>)
 8009244:	4013      	ands	r3, r2
 8009246:	81a3      	strh	r3, [r4, #12]
 8009248:	bd70      	pop	{r4, r5, r6, pc}
 800924a:	2280      	movs	r2, #128	; 0x80
 800924c:	0152      	lsls	r2, r2, #5
 800924e:	4313      	orrs	r3, r2
 8009250:	81a3      	strh	r3, [r4, #12]
 8009252:	6560      	str	r0, [r4, #84]	; 0x54
 8009254:	e7f8      	b.n	8009248 <__sseek+0x18>
 8009256:	46c0      	nop			; (mov r8, r8)
 8009258:	ffffefff 	.word	0xffffefff

0800925c <__sclose>:
 800925c:	b510      	push	{r4, lr}
 800925e:	230e      	movs	r3, #14
 8009260:	5ec9      	ldrsh	r1, [r1, r3]
 8009262:	f000 f833 	bl	80092cc <_close_r>
 8009266:	bd10      	pop	{r4, pc}

08009268 <_write_r>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	0004      	movs	r4, r0
 800926c:	0008      	movs	r0, r1
 800926e:	0011      	movs	r1, r2
 8009270:	001a      	movs	r2, r3
 8009272:	2300      	movs	r3, #0
 8009274:	4d05      	ldr	r5, [pc, #20]	; (800928c <_write_r+0x24>)
 8009276:	602b      	str	r3, [r5, #0]
 8009278:	f7fa facd 	bl	8003816 <_write>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d103      	bne.n	8009288 <_write_r+0x20>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d000      	beq.n	8009288 <_write_r+0x20>
 8009286:	6023      	str	r3, [r4, #0]
 8009288:	bd70      	pop	{r4, r5, r6, pc}
 800928a:	46c0      	nop			; (mov r8, r8)
 800928c:	20000328 	.word	0x20000328

08009290 <__assert_func>:
 8009290:	b530      	push	{r4, r5, lr}
 8009292:	0014      	movs	r4, r2
 8009294:	001a      	movs	r2, r3
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <__assert_func+0x2c>)
 8009298:	0005      	movs	r5, r0
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	b085      	sub	sp, #20
 800929e:	68d8      	ldr	r0, [r3, #12]
 80092a0:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <__assert_func+0x30>)
 80092a2:	2c00      	cmp	r4, #0
 80092a4:	d101      	bne.n	80092aa <__assert_func+0x1a>
 80092a6:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <__assert_func+0x34>)
 80092a8:	001c      	movs	r4, r3
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	9100      	str	r1, [sp, #0]
 80092ae:	002b      	movs	r3, r5
 80092b0:	4905      	ldr	r1, [pc, #20]	; (80092c8 <__assert_func+0x38>)
 80092b2:	9402      	str	r4, [sp, #8]
 80092b4:	f000 f81c 	bl	80092f0 <fiprintf>
 80092b8:	f000 f895 	bl	80093e6 <abort>
 80092bc:	2000000c 	.word	0x2000000c
 80092c0:	0800996d 	.word	0x0800996d
 80092c4:	080099a8 	.word	0x080099a8
 80092c8:	0800997a 	.word	0x0800997a

080092cc <_close_r>:
 80092cc:	2300      	movs	r3, #0
 80092ce:	b570      	push	{r4, r5, r6, lr}
 80092d0:	4d06      	ldr	r5, [pc, #24]	; (80092ec <_close_r+0x20>)
 80092d2:	0004      	movs	r4, r0
 80092d4:	0008      	movs	r0, r1
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	f7fa fab9 	bl	800384e <_close>
 80092dc:	1c43      	adds	r3, r0, #1
 80092de:	d103      	bne.n	80092e8 <_close_r+0x1c>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d000      	beq.n	80092e8 <_close_r+0x1c>
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
 80092ea:	46c0      	nop			; (mov r8, r8)
 80092ec:	20000328 	.word	0x20000328

080092f0 <fiprintf>:
 80092f0:	b40e      	push	{r1, r2, r3}
 80092f2:	b503      	push	{r0, r1, lr}
 80092f4:	0001      	movs	r1, r0
 80092f6:	ab03      	add	r3, sp, #12
 80092f8:	4804      	ldr	r0, [pc, #16]	; (800930c <fiprintf+0x1c>)
 80092fa:	cb04      	ldmia	r3!, {r2}
 80092fc:	6800      	ldr	r0, [r0, #0]
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	f7ff fe2c 	bl	8008f5c <_vfiprintf_r>
 8009304:	b002      	add	sp, #8
 8009306:	bc08      	pop	{r3}
 8009308:	b003      	add	sp, #12
 800930a:	4718      	bx	r3
 800930c:	2000000c 	.word	0x2000000c

08009310 <_fstat_r>:
 8009310:	2300      	movs	r3, #0
 8009312:	b570      	push	{r4, r5, r6, lr}
 8009314:	4d06      	ldr	r5, [pc, #24]	; (8009330 <_fstat_r+0x20>)
 8009316:	0004      	movs	r4, r0
 8009318:	0008      	movs	r0, r1
 800931a:	0011      	movs	r1, r2
 800931c:	602b      	str	r3, [r5, #0]
 800931e:	f7fa faa0 	bl	8003862 <_fstat>
 8009322:	1c43      	adds	r3, r0, #1
 8009324:	d103      	bne.n	800932e <_fstat_r+0x1e>
 8009326:	682b      	ldr	r3, [r5, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d000      	beq.n	800932e <_fstat_r+0x1e>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	20000328 	.word	0x20000328

08009334 <_isatty_r>:
 8009334:	2300      	movs	r3, #0
 8009336:	b570      	push	{r4, r5, r6, lr}
 8009338:	4d06      	ldr	r5, [pc, #24]	; (8009354 <_isatty_r+0x20>)
 800933a:	0004      	movs	r4, r0
 800933c:	0008      	movs	r0, r1
 800933e:	602b      	str	r3, [r5, #0]
 8009340:	f7fa fa9d 	bl	800387e <_isatty>
 8009344:	1c43      	adds	r3, r0, #1
 8009346:	d103      	bne.n	8009350 <_isatty_r+0x1c>
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d000      	beq.n	8009350 <_isatty_r+0x1c>
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	bd70      	pop	{r4, r5, r6, pc}
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	20000328 	.word	0x20000328

08009358 <_lseek_r>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	0004      	movs	r4, r0
 800935c:	0008      	movs	r0, r1
 800935e:	0011      	movs	r1, r2
 8009360:	001a      	movs	r2, r3
 8009362:	2300      	movs	r3, #0
 8009364:	4d05      	ldr	r5, [pc, #20]	; (800937c <_lseek_r+0x24>)
 8009366:	602b      	str	r3, [r5, #0]
 8009368:	f7fa fa92 	bl	8003890 <_lseek>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d103      	bne.n	8009378 <_lseek_r+0x20>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d000      	beq.n	8009378 <_lseek_r+0x20>
 8009376:	6023      	str	r3, [r4, #0]
 8009378:	bd70      	pop	{r4, r5, r6, pc}
 800937a:	46c0      	nop			; (mov r8, r8)
 800937c:	20000328 	.word	0x20000328

08009380 <__ascii_mbtowc>:
 8009380:	b082      	sub	sp, #8
 8009382:	2900      	cmp	r1, #0
 8009384:	d100      	bne.n	8009388 <__ascii_mbtowc+0x8>
 8009386:	a901      	add	r1, sp, #4
 8009388:	1e10      	subs	r0, r2, #0
 800938a:	d006      	beq.n	800939a <__ascii_mbtowc+0x1a>
 800938c:	2b00      	cmp	r3, #0
 800938e:	d006      	beq.n	800939e <__ascii_mbtowc+0x1e>
 8009390:	7813      	ldrb	r3, [r2, #0]
 8009392:	600b      	str	r3, [r1, #0]
 8009394:	7810      	ldrb	r0, [r2, #0]
 8009396:	1e43      	subs	r3, r0, #1
 8009398:	4198      	sbcs	r0, r3
 800939a:	b002      	add	sp, #8
 800939c:	4770      	bx	lr
 800939e:	2002      	movs	r0, #2
 80093a0:	4240      	negs	r0, r0
 80093a2:	e7fa      	b.n	800939a <__ascii_mbtowc+0x1a>

080093a4 <_read_r>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	0004      	movs	r4, r0
 80093a8:	0008      	movs	r0, r1
 80093aa:	0011      	movs	r1, r2
 80093ac:	001a      	movs	r2, r3
 80093ae:	2300      	movs	r3, #0
 80093b0:	4d05      	ldr	r5, [pc, #20]	; (80093c8 <_read_r+0x24>)
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	f7fa fa12 	bl	80037dc <_read>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d103      	bne.n	80093c4 <_read_r+0x20>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d000      	beq.n	80093c4 <_read_r+0x20>
 80093c2:	6023      	str	r3, [r4, #0]
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
 80093c6:	46c0      	nop			; (mov r8, r8)
 80093c8:	20000328 	.word	0x20000328

080093cc <__ascii_wctomb>:
 80093cc:	0003      	movs	r3, r0
 80093ce:	1e08      	subs	r0, r1, #0
 80093d0:	d005      	beq.n	80093de <__ascii_wctomb+0x12>
 80093d2:	2aff      	cmp	r2, #255	; 0xff
 80093d4:	d904      	bls.n	80093e0 <__ascii_wctomb+0x14>
 80093d6:	228a      	movs	r2, #138	; 0x8a
 80093d8:	2001      	movs	r0, #1
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	4240      	negs	r0, r0
 80093de:	4770      	bx	lr
 80093e0:	2001      	movs	r0, #1
 80093e2:	700a      	strb	r2, [r1, #0]
 80093e4:	e7fb      	b.n	80093de <__ascii_wctomb+0x12>

080093e6 <abort>:
 80093e6:	2006      	movs	r0, #6
 80093e8:	b510      	push	{r4, lr}
 80093ea:	f000 f82d 	bl	8009448 <raise>
 80093ee:	2001      	movs	r0, #1
 80093f0:	f7fa f9e8 	bl	80037c4 <_exit>

080093f4 <_raise_r>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	0004      	movs	r4, r0
 80093f8:	000d      	movs	r5, r1
 80093fa:	291f      	cmp	r1, #31
 80093fc:	d904      	bls.n	8009408 <_raise_r+0x14>
 80093fe:	2316      	movs	r3, #22
 8009400:	6003      	str	r3, [r0, #0]
 8009402:	2001      	movs	r0, #1
 8009404:	4240      	negs	r0, r0
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800940a:	2b00      	cmp	r3, #0
 800940c:	d004      	beq.n	8009418 <_raise_r+0x24>
 800940e:	008a      	lsls	r2, r1, #2
 8009410:	189b      	adds	r3, r3, r2
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	2a00      	cmp	r2, #0
 8009416:	d108      	bne.n	800942a <_raise_r+0x36>
 8009418:	0020      	movs	r0, r4
 800941a:	f000 f831 	bl	8009480 <_getpid_r>
 800941e:	002a      	movs	r2, r5
 8009420:	0001      	movs	r1, r0
 8009422:	0020      	movs	r0, r4
 8009424:	f000 f81a 	bl	800945c <_kill_r>
 8009428:	e7ed      	b.n	8009406 <_raise_r+0x12>
 800942a:	2000      	movs	r0, #0
 800942c:	2a01      	cmp	r2, #1
 800942e:	d0ea      	beq.n	8009406 <_raise_r+0x12>
 8009430:	1c51      	adds	r1, r2, #1
 8009432:	d103      	bne.n	800943c <_raise_r+0x48>
 8009434:	2316      	movs	r3, #22
 8009436:	3001      	adds	r0, #1
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	e7e4      	b.n	8009406 <_raise_r+0x12>
 800943c:	2400      	movs	r4, #0
 800943e:	0028      	movs	r0, r5
 8009440:	601c      	str	r4, [r3, #0]
 8009442:	4790      	blx	r2
 8009444:	0020      	movs	r0, r4
 8009446:	e7de      	b.n	8009406 <_raise_r+0x12>

08009448 <raise>:
 8009448:	b510      	push	{r4, lr}
 800944a:	4b03      	ldr	r3, [pc, #12]	; (8009458 <raise+0x10>)
 800944c:	0001      	movs	r1, r0
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	f7ff ffd0 	bl	80093f4 <_raise_r>
 8009454:	bd10      	pop	{r4, pc}
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	2000000c 	.word	0x2000000c

0800945c <_kill_r>:
 800945c:	2300      	movs	r3, #0
 800945e:	b570      	push	{r4, r5, r6, lr}
 8009460:	4d06      	ldr	r5, [pc, #24]	; (800947c <_kill_r+0x20>)
 8009462:	0004      	movs	r4, r0
 8009464:	0008      	movs	r0, r1
 8009466:	0011      	movs	r1, r2
 8009468:	602b      	str	r3, [r5, #0]
 800946a:	f7fa f99b 	bl	80037a4 <_kill>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d103      	bne.n	800947a <_kill_r+0x1e>
 8009472:	682b      	ldr	r3, [r5, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d000      	beq.n	800947a <_kill_r+0x1e>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	20000328 	.word	0x20000328

08009480 <_getpid_r>:
 8009480:	b510      	push	{r4, lr}
 8009482:	f7fa f989 	bl	8003798 <_getpid>
 8009486:	bd10      	pop	{r4, pc}

08009488 <_init>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948e:	bc08      	pop	{r3}
 8009490:	469e      	mov	lr, r3
 8009492:	4770      	bx	lr

08009494 <_fini>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr
