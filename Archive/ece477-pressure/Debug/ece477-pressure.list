
ece477-pressure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002154  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002214  08002214  00012214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002230  08002230  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002230  08002230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002238  08002238  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002238  08002238  00012238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800223c  0800223c  0001223c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  0800224c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  0800224c  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005016  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001339  00000000  00000000  0002504a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f0  00000000  00000000  00026388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000438  00000000  00000000  00026878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a25  00000000  00000000  00026cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b36  00000000  00000000  000396d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000721cf  00000000  00000000  0004020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b23da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001004  00000000  00000000  000b2430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080021fc 	.word	0x080021fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080021fc 	.word	0x080021fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004a2:	003b      	movs	r3, r7
 80004a4:	0018      	movs	r0, r3
 80004a6:	2308      	movs	r3, #8
 80004a8:	001a      	movs	r2, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	f001 fe9e 	bl	80021ec <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004b0:	4b30      	ldr	r3, [pc, #192]	; (8000574 <MX_ADC_Init+0xd8>)
 80004b2:	4a31      	ldr	r2, [pc, #196]	; (8000578 <MX_ADC_Init+0xdc>)
 80004b4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80004b6:	4b2f      	ldr	r3, [pc, #188]	; (8000574 <MX_ADC_Init+0xd8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004bc:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <MX_ADC_Init+0xd8>)
 80004be:	22c0      	movs	r2, #192	; 0xc0
 80004c0:	0612      	lsls	r2, r2, #24
 80004c2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004c4:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <MX_ADC_Init+0xd8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004ca:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <MX_ADC_Init+0xd8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004d0:	4b28      	ldr	r3, [pc, #160]	; (8000574 <MX_ADC_Init+0xd8>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d6:	4b27      	ldr	r3, [pc, #156]	; (8000574 <MX_ADC_Init+0xd8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
  //hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
 80004dc:	4b25      	ldr	r3, [pc, #148]	; (8000574 <MX_ADC_Init+0xd8>)
 80004de:	2220      	movs	r2, #32
 80004e0:	2101      	movs	r1, #1
 80004e2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004e4:	4b23      	ldr	r3, [pc, #140]	; (8000574 <MX_ADC_Init+0xd8>)
 80004e6:	2221      	movs	r2, #33	; 0x21
 80004e8:	2100      	movs	r1, #0
 80004ea:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_ADC_Init+0xd8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f2:	4b20      	ldr	r3, [pc, #128]	; (8000574 <MX_ADC_Init+0xd8>)
 80004f4:	22c2      	movs	r2, #194	; 0xc2
 80004f6:	32ff      	adds	r2, #255	; 0xff
 80004f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_ADC_Init+0xd8>)
 80004fc:	222c      	movs	r2, #44	; 0x2c
 80004fe:	2100      	movs	r1, #0
 8000500:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_ADC_Init+0xd8>)
 8000504:	2204      	movs	r2, #4
 8000506:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_ADC_Init+0xd8>)
 800050a:	2200      	movs	r2, #0
 800050c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_ADC_Init+0xd8>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_ADC_Init+0xd8>)
 8000516:	2200      	movs	r2, #0
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_ADC_Init+0xd8>)
 800051c:	2200      	movs	r2, #0
 800051e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_ADC_Init+0xd8>)
 8000522:	0018      	movs	r0, r3
 8000524:	f000 f9f2 	bl	800090c <HAL_ADC_Init>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800052c:	f000 f91e 	bl	800076c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000530:	003b      	movs	r3, r7
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000536:	003b      	movs	r3, r7
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0152      	lsls	r2, r2, #5
 800053c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800053e:	003a      	movs	r2, r7
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_ADC_Init+0xd8>)
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fc8b 	bl	8000e60 <HAL_ADC_ConfigChannel>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800054e:	f000 f90d 	bl	800076c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000552:	003b      	movs	r3, r7
 8000554:	4a09      	ldr	r2, [pc, #36]	; (800057c <MX_ADC_Init+0xe0>)
 8000556:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000558:	003a      	movs	r2, r7
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_ADC_Init+0xd8>)
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fc7e 	bl	8000e60 <HAL_ADC_ConfigChannel>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000568:	f000 f900 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000028 	.word	0x20000028
 8000578:	40012400 	.word	0x40012400
 800057c:	08000004 	.word	0x08000004

08000580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	240c      	movs	r4, #12
 800058a:	193b      	adds	r3, r7, r4
 800058c:	0018      	movs	r0, r3
 800058e:	2314      	movs	r3, #20
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f001 fe2a 	bl	80021ec <memset>
  if(adcHandle->Instance==ADC1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <HAL_ADC_MspInit+0x70>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d122      	bne.n	80005e8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_ADC_MspInit+0x74>)
 80005a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <HAL_ADC_MspInit+0x74>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0089      	lsls	r1, r1, #2
 80005ac:	430a      	orrs	r2, r1
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <HAL_ADC_MspInit+0x74>)
 80005b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_ADC_MspInit+0x74>)
 80005b6:	2101      	movs	r1, #1
 80005b8:	430a      	orrs	r2, r1
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <HAL_ADC_MspInit+0x74>)
 80005be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c0:	2201      	movs	r2, #1
 80005c2:	4013      	ands	r3, r2
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2205      	movs	r2, #5
 80005cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	2203      	movs	r2, #3
 80005d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	193a      	adds	r2, r7, r4
 80005dc:	23a0      	movs	r3, #160	; 0xa0
 80005de:	05db      	lsls	r3, r3, #23
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 feb6 	bl	8001354 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b009      	add	sp, #36	; 0x24
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40012400 	.word	0x40012400
 80005f4:	40021000 	.word	0x40021000

080005f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_GPIO_Init+0x28>)
 8000600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_GPIO_Init+0x28>)
 8000604:	2101      	movs	r1, #1
 8000606:	430a      	orrs	r2, r1
 8000608:	62da      	str	r2, [r3, #44]	; 0x2c
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <MX_GPIO_Init+0x28>)
 800060c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060e:	2201      	movs	r2, #1
 8000610:	4013      	ands	r3, r2
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40021000 	.word	0x40021000

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 f8ff 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f841 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f7ff ffe1 	bl	80005f8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000636:	f7ff ff31 	bl	800049c <MX_ADC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t pressure = 0;
 800063a:	1dbb      	adds	r3, r7, #6
 800063c:	2200      	movs	r2, #0
 800063e:	801a      	strh	r2, [r3, #0]
  uint16_t methane = 0;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	801a      	strh	r2, [r3, #0]
  //uint16_t check = 0;

  while(1){
	  ADC1->CHSELR = ADC_CHSELR_CHSEL0;
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <main+0x88>)
 8000648:	2201      	movs	r2, #1
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_ADC_Start(&hadc);
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <main+0x8c>)
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fad0 	bl	8000bf4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000654:	2301      	movs	r3, #1
 8000656:	425a      	negs	r2, r3
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <main+0x8c>)
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fb5d 	bl	8000d1c <HAL_ADC_PollForConversion>
	  pressure = HAL_ADC_GetValue(&hadc);
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <main+0x8c>)
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fbef 	bl	8000e48 <HAL_ADC_GetValue>
 800066a:	0002      	movs	r2, r0
 800066c:	1dbb      	adds	r3, r7, #6
 800066e:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <main+0x8c>)
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fb12 	bl	8000c9c <HAL_ADC_Stop>
	  //}
	  //if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
	      //raw = HAL_ADC_GetValue(&hadc1);
	  //}

	  ADC1->CHSELR = ADC_CHSELR_CHSEL2;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <main+0x88>)
 800067a:	2204      	movs	r2, #4
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_ADC_Start(&hadc);
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <main+0x8c>)
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fab7 	bl	8000bf4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000686:	2301      	movs	r3, #1
 8000688:	425a      	negs	r2, r3
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <main+0x8c>)
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f000 fb44 	bl	8000d1c <HAL_ADC_PollForConversion>
	  methane = HAL_ADC_GetValue(&hadc);
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <main+0x8c>)
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fbd6 	bl	8000e48 <HAL_ADC_GetValue>
 800069c:	0002      	movs	r2, r0
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 80006a2:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <main+0x8c>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 faf9 	bl	8000c9c <HAL_ADC_Stop>
	  ADC1->CHSELR = ADC_CHSELR_CHSEL0;
 80006aa:	e7cc      	b.n	8000646 <main+0x22>
 80006ac:	40012400 	.word	0x40012400
 80006b0:	20000028 	.word	0x20000028

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b095      	sub	sp, #84	; 0x54
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	2418      	movs	r4, #24
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	0018      	movs	r0, r3
 80006c0:	2338      	movs	r3, #56	; 0x38
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f001 fd91 	bl	80021ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	0018      	movs	r0, r3
 80006ce:	2314      	movs	r3, #20
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f001 fd8a 	bl	80021ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xb0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a22      	ldr	r2, [pc, #136]	; (8000768 <SystemClock_Config+0xb4>)
 80006de:	401a      	ands	r2, r3
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <SystemClock_Config+0xb0>)
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	0109      	lsls	r1, r1, #4
 80006e6:	430a      	orrs	r2, r1
 80006e8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ea:	0021      	movs	r1, r4
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2202      	movs	r2, #2
 80006f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2201      	movs	r2, #1
 80006f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2210      	movs	r2, #16
 80006fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2202      	movs	r2, #2
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	0412      	lsls	r2, r2, #16
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	187b      	adds	r3, r7, r1
 800071a:	0018      	movs	r0, r3
 800071c:	f000 ff90 	bl	8001640 <HAL_RCC_OscConfig>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000724:	f000 f822 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	220f      	movs	r2, #15
 800072c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2203      	movs	r2, #3
 8000732:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	00d2      	lsls	r2, r2, #3
 8000740:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2100      	movs	r1, #0
 800074c:	0018      	movs	r0, r3
 800074e:	f001 fb3b 	bl	8001dc8 <HAL_RCC_ClockConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000756:	f000 f809 	bl	800076c <Error_Handler>
  }
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b015      	add	sp, #84	; 0x54
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40007000 	.word	0x40007000
 8000768:	ffffe7ff 	.word	0xffffe7ff

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_MspInit+0x24>)
 800077e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x24>)
 8000782:	2101      	movs	r1, #1
 8000784:	430a      	orrs	r2, r1
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <HAL_MspInit+0x24>)
 800078a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <HAL_MspInit+0x24>)
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	0549      	lsls	r1, r1, #21
 8000792:	430a      	orrs	r2, r1
 8000794:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f886 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <LoopForever+0x6>)
  ldr r1, =_edata
 80007de:	490e      	ldr	r1, [pc, #56]	; (8000818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <LoopForever+0xe>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f4:	4c0b      	ldr	r4, [pc, #44]	; (8000824 <LoopForever+0x16>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000802:	f7ff ffe4 	bl	80007ce <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000806:	f001 fccd 	bl	80021a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800080a:	f7ff ff0b 	bl	8000624 <main>

0800080e <LoopForever>:

LoopForever:
    b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   r0, =_estack
 8000810:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800081c:	08002240 	.word	0x08002240
  ldr r2, =_sbss
 8000820:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000824:	20000088 	.word	0x20000088

08000828 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_COMP_IRQHandler>
	...

0800082c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_Init+0x3c>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_Init+0x3c>)
 800083e:	2140      	movs	r1, #64	; 0x40
 8000840:	430a      	orrs	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000844:	2000      	movs	r0, #0
 8000846:	f000 f811 	bl	800086c <HAL_InitTick>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d003      	beq.n	8000856 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e001      	b.n	800085a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000856:	f7ff ff8f 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
}
 800085e:	0018      	movs	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	40022000 	.word	0x40022000

0800086c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_InitTick+0x5c>)
 8000876:	681c      	ldr	r4, [r3, #0]
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_InitTick+0x60>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	0019      	movs	r1, r3
 800087e:	23fa      	movs	r3, #250	; 0xfa
 8000880:	0098      	lsls	r0, r3, #2
 8000882:	f7ff fc41 	bl	8000108 <__udivsi3>
 8000886:	0003      	movs	r3, r0
 8000888:	0019      	movs	r1, r3
 800088a:	0020      	movs	r0, r4
 800088c:	f7ff fc3c 	bl	8000108 <__udivsi3>
 8000890:	0003      	movs	r3, r0
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fd51 	bl	800133a <HAL_SYSTICK_Config>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	e00f      	b.n	80008c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d80b      	bhi.n	80008be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	2301      	movs	r3, #1
 80008aa:	425b      	negs	r3, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 fd2e 	bl	8001310 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_InitTick+0x64>)
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b003      	add	sp, #12
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	001a      	movs	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	18d2      	adds	r2, r2, r3
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <HAL_IncTick+0x20>)
 80008e6:	601a      	str	r2, [r3, #0]
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000084 	.word	0x20000084

080008f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	20000084 	.word	0x20000084

0800090c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e159      	b.n	8000bd2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10a      	bne.n	800093c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2250      	movs	r2, #80	; 0x50
 8000930:	2100      	movs	r1, #0
 8000932:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fe22 	bl	8000580 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000940:	2210      	movs	r2, #16
 8000942:	4013      	ands	r3, r2
 8000944:	2b10      	cmp	r3, #16
 8000946:	d005      	beq.n	8000954 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2204      	movs	r2, #4
 8000950:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000952:	d00b      	beq.n	800096c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000958:	2210      	movs	r2, #16
 800095a:	431a      	orrs	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2250      	movs	r2, #80	; 0x50
 8000964:	2100      	movs	r1, #0
 8000966:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	e132      	b.n	8000bd2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000970:	4a9a      	ldr	r2, [pc, #616]	; (8000bdc <HAL_ADC_Init+0x2d0>)
 8000972:	4013      	ands	r3, r2
 8000974:	2202      	movs	r2, #2
 8000976:	431a      	orrs	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2203      	movs	r2, #3
 8000984:	4013      	ands	r3, r2
 8000986:	2b01      	cmp	r3, #1
 8000988:	d108      	bne.n	800099c <HAL_ADC_Init+0x90>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2201      	movs	r2, #1
 8000992:	4013      	ands	r3, r2
 8000994:	2b01      	cmp	r3, #1
 8000996:	d101      	bne.n	800099c <HAL_ADC_Init+0x90>
 8000998:	2301      	movs	r3, #1
 800099a:	e000      	b.n	800099e <HAL_ADC_Init+0x92>
 800099c:	2300      	movs	r3, #0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d149      	bne.n	8000a36 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	23c0      	movs	r3, #192	; 0xc0
 80009a8:	061b      	lsls	r3, r3, #24
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d00b      	beq.n	80009c6 <HAL_ADC_Init+0xba>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685a      	ldr	r2, [r3, #4]
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d005      	beq.n	80009c6 <HAL_ADC_Init+0xba>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	061b      	lsls	r3, r3, #24
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d111      	bne.n	80009ea <HAL_ADC_Init+0xde>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	691a      	ldr	r2, [r3, #16]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	0892      	lsrs	r2, r2, #2
 80009d4:	611a      	str	r2, [r3, #16]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6919      	ldr	r1, [r3, #16]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	430a      	orrs	r2, r1
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	e014      	b.n	8000a14 <HAL_ADC_Init+0x108>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	691a      	ldr	r2, [r3, #16]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	0092      	lsls	r2, r2, #2
 80009f6:	0892      	lsrs	r2, r2, #2
 80009f8:	611a      	str	r2, [r3, #16]
 80009fa:	4b79      	ldr	r3, [pc, #484]	; (8000be0 <HAL_ADC_Init+0x2d4>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4b78      	ldr	r3, [pc, #480]	; (8000be0 <HAL_ADC_Init+0x2d4>)
 8000a00:	4978      	ldr	r1, [pc, #480]	; (8000be4 <HAL_ADC_Init+0x2d8>)
 8000a02:	400a      	ands	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	4b76      	ldr	r3, [pc, #472]	; (8000be0 <HAL_ADC_Init+0x2d4>)
 8000a08:	6819      	ldr	r1, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	4b74      	ldr	r3, [pc, #464]	; (8000be0 <HAL_ADC_Init+0x2d4>)
 8000a10:	430a      	orrs	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2118      	movs	r1, #24
 8000a20:	438a      	bics	r2, r1
 8000a22:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68d9      	ldr	r1, [r3, #12]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000a36:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <HAL_ADC_Init+0x2d4>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <HAL_ADC_Init+0x2d4>)
 8000a3c:	496a      	ldr	r1, [pc, #424]	; (8000be8 <HAL_ADC_Init+0x2dc>)
 8000a3e:	400a      	ands	r2, r1
 8000a40:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000a42:	4b67      	ldr	r3, [pc, #412]	; (8000be0 <HAL_ADC_Init+0x2d4>)
 8000a44:	6819      	ldr	r1, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	065a      	lsls	r2, r3, #25
 8000a4c:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <HAL_ADC_Init+0x2d4>)
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	055b      	lsls	r3, r3, #21
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	d108      	bne.n	8000a72 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0549      	lsls	r1, r1, #21
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	495b      	ldr	r1, [pc, #364]	; (8000bec <HAL_ADC_Init+0x2e0>)
 8000a7e:	400a      	ands	r2, r1
 8000a80:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	68d9      	ldr	r1, [r3, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d101      	bne.n	8000a98 <HAL_ADC_Init+0x18c>
 8000a94:	2304      	movs	r3, #4
 8000a96:	e000      	b.n	8000a9a <HAL_ADC_Init+0x18e>
 8000a98:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a9a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2020      	movs	r0, #32
 8000aa0:	5c1b      	ldrb	r3, [r3, r0]
 8000aa2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000aa4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	202c      	movs	r0, #44	; 0x2c
 8000aaa:	5c1b      	ldrb	r3, [r3, r0]
 8000aac:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000aae:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ab4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000abc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ac4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	430a      	orrs	r2, r1
 8000acc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ad2:	23c2      	movs	r3, #194	; 0xc2
 8000ad4:	33ff      	adds	r3, #255	; 0xff
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d00b      	beq.n	8000af2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68d9      	ldr	r1, [r3, #12]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2221      	movs	r2, #33	; 0x21
 8000af6:	5c9b      	ldrb	r3, [r3, r2]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d11a      	bne.n	8000b32 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2220      	movs	r2, #32
 8000b00:	5c9b      	ldrb	r3, [r3, r2]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d109      	bne.n	8000b1a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	0249      	lsls	r1, r1, #9
 8000b14:	430a      	orrs	r2, r1
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	e00b      	b.n	8000b32 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b1e:	2220      	movs	r2, #32
 8000b20:	431a      	orrs	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d11f      	bne.n	8000b7a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	691a      	ldr	r2, [r3, #16]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	492a      	ldr	r1, [pc, #168]	; (8000bf0 <HAL_ADC_Init+0x2e4>)
 8000b46:	400a      	ands	r2, r1
 8000b48:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6919      	ldr	r1, [r3, #16]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b58:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000b5e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2101      	movs	r1, #1
 8000b74:	430a      	orrs	r2, r1
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	e00e      	b.n	8000b98 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	2201      	movs	r2, #1
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d107      	bne.n	8000b98 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	691a      	ldr	r2, [r3, #16]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2101      	movs	r1, #1
 8000b94:	438a      	bics	r2, r1
 8000b96:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2107      	movs	r1, #7
 8000ba4:	438a      	bics	r2, r1
 8000ba6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6959      	ldr	r1, [r3, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	4393      	bics	r3, r2
 8000bc8:	2201      	movs	r2, #1
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	fffffefd 	.word	0xfffffefd
 8000be0:	40012708 	.word	0x40012708
 8000be4:	ffc3ffff 	.word	0xffc3ffff
 8000be8:	fdffffff 	.word	0xfdffffff
 8000bec:	fffe0219 	.word	0xfffe0219
 8000bf0:	fffffc03 	.word	0xfffffc03

08000bf4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d138      	bne.n	8000c82 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2250      	movs	r2, #80	; 0x50
 8000c14:	5c9b      	ldrb	r3, [r3, r2]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Start+0x2a>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e038      	b.n	8000c90 <HAL_ADC_Start+0x9c>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2250      	movs	r2, #80	; 0x50
 8000c22:	2101      	movs	r1, #1
 8000c24:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d007      	beq.n	8000c3e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000c2e:	230f      	movs	r3, #15
 8000c30:	18fc      	adds	r4, r7, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 f9b3 	bl	8000fa0 <ADC_Enable>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c3e:	230f      	movs	r3, #15
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d120      	bne.n	8000c8a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <HAL_ADC_Start+0xa4>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	0052      	lsls	r2, r2, #1
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2250      	movs	r2, #80	; 0x50
 8000c64:	2100      	movs	r1, #0
 8000c66:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	221c      	movs	r2, #28
 8000c6e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	e003      	b.n	8000c8a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000c82:	230f      	movs	r3, #15
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	2202      	movs	r2, #2
 8000c88:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	781b      	ldrb	r3, [r3, #0]
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b005      	add	sp, #20
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	fffff0fe 	.word	0xfffff0fe

08000c9c <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2250      	movs	r2, #80	; 0x50
 8000cb0:	5c9b      	ldrb	r3, [r3, r2]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d101      	bne.n	8000cba <HAL_ADC_Stop+0x1e>
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e029      	b.n	8000d0e <HAL_ADC_Stop+0x72>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2250      	movs	r2, #80	; 0x50
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000cc2:	250f      	movs	r5, #15
 8000cc4:	197c      	adds	r4, r7, r5
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 fa29 	bl	8001120 <ADC_ConversionStop>
 8000cce:	0003      	movs	r3, r0
 8000cd0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000cd2:	197b      	adds	r3, r7, r5
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d112      	bne.n	8000d00 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000cda:	197c      	adds	r4, r7, r5
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 f9be 	bl	8001060 <ADC_Disable>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000ce8:	197b      	adds	r3, r7, r5
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d107      	bne.n	8000d00 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf4:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_ADC_Stop+0x7c>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2250      	movs	r2, #80	; 0x50
 8000d04:	2100      	movs	r1, #0
 8000d06:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	781b      	ldrb	r3, [r3, #0]
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b004      	add	sp, #16
 8000d14:	bdb0      	pop	{r4, r5, r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	fffffefe 	.word	0xfffffefe

08000d1c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d102      	bne.n	8000d3c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000d36:	2308      	movs	r3, #8
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	e014      	b.n	8000d66 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	2201      	movs	r2, #1
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d10b      	bne.n	8000d62 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d4e:	2220      	movs	r2, #32
 8000d50:	431a      	orrs	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2250      	movs	r2, #80	; 0x50
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e06c      	b.n	8000e3c <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000d62:	230c      	movs	r3, #12
 8000d64:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d66:	f7ff fdc7 	bl	80008f8 <HAL_GetTick>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000d6e:	e019      	b.n	8000da4 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	d016      	beq.n	8000da4 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d007      	beq.n	8000d8c <HAL_ADC_PollForConversion+0x70>
 8000d7c:	f7ff fdbc 	bl	80008f8 <HAL_GetTick>
 8000d80:	0002      	movs	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d20b      	bcs.n	8000da4 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d90:	2204      	movs	r2, #4
 8000d92:	431a      	orrs	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2250      	movs	r2, #80	; 0x50
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e04b      	b.n	8000e3c <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	d0df      	beq.n	8000d70 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d12e      	bne.n	8000e2a <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2220      	movs	r2, #32
 8000dd0:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d129      	bne.n	8000e2a <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2208      	movs	r2, #8
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d122      	bne.n	8000e2a <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2204      	movs	r2, #4
 8000dec:	4013      	ands	r3, r2
 8000dee:	d110      	bne.n	8000e12 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	210c      	movs	r1, #12
 8000dfc:	438a      	bics	r2, r1
 8000dfe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e04:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <HAL_ADC_PollForConversion+0x128>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	2201      	movs	r2, #1
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	655a      	str	r2, [r3, #84]	; 0x54
 8000e10:	e00b      	b.n	8000e2a <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e16:	2220      	movs	r2, #32
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	2201      	movs	r2, #1
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d103      	bne.n	8000e3a <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b004      	add	sp, #16
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	fffffefe 	.word	0xfffffefe

08000e48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2250      	movs	r2, #80	; 0x50
 8000e6e:	5c9b      	ldrb	r3, [r3, r2]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d101      	bne.n	8000e78 <HAL_ADC_ConfigChannel+0x18>
 8000e74:	2302      	movs	r3, #2
 8000e76:	e085      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x124>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2250      	movs	r2, #80	; 0x50
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2204      	movs	r2, #4
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d00b      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e90:	2220      	movs	r2, #32
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2250      	movs	r2, #80	; 0x50
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e06f      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4a38      	ldr	r2, [pc, #224]	; (8000f8c <HAL_ADC_ConfigChannel+0x12c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d035      	beq.n	8000f1a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	035b      	lsls	r3, r3, #13
 8000eba:	0b5a      	lsrs	r2, r3, #13
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	02db      	lsls	r3, r3, #11
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d009      	beq.n	8000ee4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	0409      	lsls	r1, r1, #16
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 f964 	bl	80011ac <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	4013      	ands	r3, r2
 8000eee:	d006      	beq.n	8000efe <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	03c9      	lsls	r1, r1, #15
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	025b      	lsls	r3, r3, #9
 8000f06:	4013      	ands	r3, r2
 8000f08:	d037      	beq.n	8000f7a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	0449      	lsls	r1, r1, #17
 8000f14:	430a      	orrs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e02f      	b.n	8000f7a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	035b      	lsls	r3, r3, #13
 8000f26:	0b5b      	lsrs	r3, r3, #13
 8000f28:	43d9      	mvns	r1, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	400a      	ands	r2, r1
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	02db      	lsls	r3, r3, #11
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d005      	beq.n	8000f4a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000f44:	4913      	ldr	r1, [pc, #76]	; (8000f94 <HAL_ADC_ConfigChannel+0x134>)
 8000f46:	400a      	ands	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	029b      	lsls	r3, r3, #10
 8000f52:	4013      	ands	r3, r2
 8000f54:	d005      	beq.n	8000f62 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000f5c:	490e      	ldr	r1, [pc, #56]	; (8000f98 <HAL_ADC_ConfigChannel+0x138>)
 8000f5e:	400a      	ands	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	025b      	lsls	r3, r3, #9
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d005      	beq.n	8000f7a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_ADC_ConfigChannel+0x130>)
 8000f74:	4909      	ldr	r1, [pc, #36]	; (8000f9c <HAL_ADC_ConfigChannel+0x13c>)
 8000f76:	400a      	ands	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2250      	movs	r2, #80	; 0x50
 8000f7e:	2100      	movs	r1, #0
 8000f80:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	00001001 	.word	0x00001001
 8000f90:	40012708 	.word	0x40012708
 8000f94:	ff7fffff 	.word	0xff7fffff
 8000f98:	ffbfffff 	.word	0xffbfffff
 8000f9c:	feffffff 	.word	0xfeffffff

08000fa0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d108      	bne.n	8000fcc <ADC_Enable+0x2c>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <ADC_Enable+0x2c>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <ADC_Enable+0x2e>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d13f      	bne.n	8001052 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4a20      	ldr	r2, [pc, #128]	; (800105c <ADC_Enable+0xbc>)
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	2201      	movs	r2, #1
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e02c      	b.n	8001054 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	430a      	orrs	r2, r1
 8001008:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800100a:	2001      	movs	r0, #1
 800100c:	f000 f8ce 	bl	80011ac <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001010:	f7ff fc72 	bl	80008f8 <HAL_GetTick>
 8001014:	0003      	movs	r3, r0
 8001016:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001018:	e014      	b.n	8001044 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800101a:	f7ff fc6d 	bl	80008f8 <HAL_GetTick>
 800101e:	0002      	movs	r2, r0
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b0a      	cmp	r3, #10
 8001026:	d90d      	bls.n	8001044 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102c:	2210      	movs	r2, #16
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001038:	2201      	movs	r2, #1
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e007      	b.n	8001054 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2201      	movs	r2, #1
 800104c:	4013      	ands	r3, r2
 800104e:	2b01      	cmp	r3, #1
 8001050:	d1e3      	bne.n	800101a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b004      	add	sp, #16
 800105a:	bd80      	pop	{r7, pc}
 800105c:	80000017 	.word	0x80000017

08001060 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2203      	movs	r2, #3
 8001074:	4013      	ands	r3, r2
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <ADC_Disable+0x2c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <ADC_Disable+0x2c>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <ADC_Disable+0x2e>
 800108c:	2300      	movs	r3, #0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d041      	beq.n	8001116 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2205      	movs	r2, #5
 800109a:	4013      	ands	r3, r2
 800109c:	2b01      	cmp	r3, #1
 800109e:	d110      	bne.n	80010c2 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2102      	movs	r1, #2
 80010ac:	430a      	orrs	r2, r1
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2203      	movs	r2, #3
 80010b6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010b8:	f7ff fc1e 	bl	80008f8 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80010c0:	e022      	b.n	8001108 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c6:	2210      	movs	r2, #16
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	2201      	movs	r2, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e01c      	b.n	8001118 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010de:	f7ff fc0b 	bl	80008f8 <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b0a      	cmp	r3, #10
 80010ea:	d90d      	bls.n	8001108 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f0:	2210      	movs	r2, #16
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	2201      	movs	r2, #1
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e007      	b.n	8001118 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2201      	movs	r2, #1
 8001110:	4013      	ands	r3, r2
 8001112:	2b01      	cmp	r3, #1
 8001114:	d0e3      	beq.n	80010de <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b004      	add	sp, #16
 800111e:	bd80      	pop	{r7, pc}

08001120 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2204      	movs	r2, #4
 8001134:	4013      	ands	r3, r2
 8001136:	d034      	beq.n	80011a2 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2204      	movs	r2, #4
 8001140:	4013      	ands	r3, r2
 8001142:	2b04      	cmp	r3, #4
 8001144:	d10d      	bne.n	8001162 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2202      	movs	r2, #2
 800114e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001150:	d107      	bne.n	8001162 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2110      	movs	r1, #16
 800115e:	430a      	orrs	r2, r1
 8001160:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001162:	f7ff fbc9 	bl	80008f8 <HAL_GetTick>
 8001166:	0003      	movs	r3, r0
 8001168:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800116a:	e014      	b.n	8001196 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800116c:	f7ff fbc4 	bl	80008f8 <HAL_GetTick>
 8001170:	0002      	movs	r2, r0
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b0a      	cmp	r3, #10
 8001178:	d90d      	bls.n	8001196 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117e:	2210      	movs	r2, #16
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	2201      	movs	r2, #1
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e006      	b.n	80011a4 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2204      	movs	r2, #4
 800119e:	4013      	ands	r3, r2
 80011a0:	d1e4      	bne.n	800116c <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b004      	add	sp, #16
 80011aa:	bd80      	pop	{r7, pc}

080011ac <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <ADC_DelayMicroSecond+0x38>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	490b      	ldr	r1, [pc, #44]	; (80011e8 <ADC_DelayMicroSecond+0x3c>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7fe ffa4 	bl	8000108 <__udivsi3>
 80011c0:	0003      	movs	r3, r0
 80011c2:	001a      	movs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4353      	muls	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80011ca:	e002      	b.n	80011d2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f9      	bne.n	80011cc <ADC_DelayMicroSecond+0x20>
  } 
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	20000000 	.word	0x20000000
 80011e8:	000f4240 	.word	0x000f4240

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	0002      	movs	r2, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001200:	d828      	bhi.n	8001254 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001202:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <__NVIC_SetPriority+0xd4>)
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	33c0      	adds	r3, #192	; 0xc0
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	589b      	ldr	r3, [r3, r2]
 8001212:	1dfa      	adds	r2, r7, #7
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	0011      	movs	r1, r2
 8001218:	2203      	movs	r2, #3
 800121a:	400a      	ands	r2, r1
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	21ff      	movs	r1, #255	; 0xff
 8001220:	4091      	lsls	r1, r2
 8001222:	000a      	movs	r2, r1
 8001224:	43d2      	mvns	r2, r2
 8001226:	401a      	ands	r2, r3
 8001228:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	22ff      	movs	r2, #255	; 0xff
 8001230:	401a      	ands	r2, r3
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	0018      	movs	r0, r3
 8001238:	2303      	movs	r3, #3
 800123a:	4003      	ands	r3, r0
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001240:	481f      	ldr	r0, [pc, #124]	; (80012c0 <__NVIC_SetPriority+0xd4>)
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b25b      	sxtb	r3, r3
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	430a      	orrs	r2, r1
 800124c:	33c0      	adds	r3, #192	; 0xc0
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001252:	e031      	b.n	80012b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <__NVIC_SetPriority+0xd8>)
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	0019      	movs	r1, r3
 800125c:	230f      	movs	r3, #15
 800125e:	400b      	ands	r3, r1
 8001260:	3b08      	subs	r3, #8
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3306      	adds	r3, #6
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	3304      	adds	r3, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	1dfa      	adds	r2, r7, #7
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	0011      	movs	r1, r2
 8001274:	2203      	movs	r2, #3
 8001276:	400a      	ands	r2, r1
 8001278:	00d2      	lsls	r2, r2, #3
 800127a:	21ff      	movs	r1, #255	; 0xff
 800127c:	4091      	lsls	r1, r2
 800127e:	000a      	movs	r2, r1
 8001280:	43d2      	mvns	r2, r2
 8001282:	401a      	ands	r2, r3
 8001284:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	019b      	lsls	r3, r3, #6
 800128a:	22ff      	movs	r2, #255	; 0xff
 800128c:	401a      	ands	r2, r3
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	0018      	movs	r0, r3
 8001294:	2303      	movs	r3, #3
 8001296:	4003      	ands	r3, r0
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <__NVIC_SetPriority+0xd8>)
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	001c      	movs	r4, r3
 80012a4:	230f      	movs	r3, #15
 80012a6:	4023      	ands	r3, r4
 80012a8:	3b08      	subs	r3, #8
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	430a      	orrs	r2, r1
 80012ae:	3306      	adds	r3, #6
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	18c3      	adds	r3, r0, r3
 80012b4:	3304      	adds	r3, #4
 80012b6:	601a      	str	r2, [r3, #0]
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b003      	add	sp, #12
 80012be:	bd90      	pop	{r4, r7, pc}
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	1e5a      	subs	r2, r3, #1
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	045b      	lsls	r3, r3, #17
 80012d8:	429a      	cmp	r2, r3
 80012da:	d301      	bcc.n	80012e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012dc:	2301      	movs	r3, #1
 80012de:	e010      	b.n	8001302 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <SysTick_Config+0x44>)
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	3a01      	subs	r2, #1
 80012e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e8:	2301      	movs	r3, #1
 80012ea:	425b      	negs	r3, r3
 80012ec:	2103      	movs	r1, #3
 80012ee:	0018      	movs	r0, r3
 80012f0:	f7ff ff7c 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x44>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x44>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b002      	add	sp, #8
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	210f      	movs	r1, #15
 800131c:	187b      	adds	r3, r7, r1
 800131e:	1c02      	adds	r2, r0, #0
 8001320:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	187b      	adds	r3, r7, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b25b      	sxtb	r3, r3
 800132a:	0011      	movs	r1, r2
 800132c:	0018      	movs	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b004      	add	sp, #16
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff ffbf 	bl	80012c8 <SysTick_Config>
 800134a:	0003      	movs	r3, r0
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b002      	add	sp, #8
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800136a:	e14f      	b.n	800160c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4091      	lsls	r1, r2
 8001376:	000a      	movs	r2, r1
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <HAL_GPIO_Init+0x30>
 8001382:	e140      	b.n	8001606 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d00b      	beq.n	80013a4 <HAL_GPIO_Init+0x50>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d007      	beq.n	80013a4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001398:	2b11      	cmp	r3, #17
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b12      	cmp	r3, #18
 80013a2:	d130      	bne.n	8001406 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	409a      	lsls	r2, r3
 80013c6:	0013      	movs	r3, r2
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013da:	2201      	movs	r2, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	43da      	mvns	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	2201      	movs	r2, #1
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0xf2>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b12      	cmp	r3, #18
 8001444:	d123      	bne.n	800148e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	58d3      	ldr	r3, [r2, r3]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2207      	movs	r2, #7
 8001458:	4013      	ands	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2107      	movs	r1, #7
 8001472:	400b      	ands	r3, r1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	6939      	ldr	r1, [r7, #16]
 800148c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2203      	movs	r2, #3
 80014ac:	401a      	ands	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	055b      	lsls	r3, r3, #21
 80014ca:	4013      	ands	r3, r2
 80014cc:	d100      	bne.n	80014d0 <HAL_GPIO_Init+0x17c>
 80014ce:	e09a      	b.n	8001606 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d0:	4b54      	ldr	r3, [pc, #336]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80014d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d4:	4b53      	ldr	r3, [pc, #332]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	430a      	orrs	r2, r1
 80014da:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80014dc:	4a52      	ldr	r2, [pc, #328]	; (8001628 <HAL_GPIO_Init+0x2d4>)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	589b      	ldr	r3, [r3, r2]
 80014e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2203      	movs	r2, #3
 80014ee:	4013      	ands	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	220f      	movs	r2, #15
 80014f4:	409a      	lsls	r2, r3
 80014f6:	0013      	movs	r3, r2
 80014f8:	43da      	mvns	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	23a0      	movs	r3, #160	; 0xa0
 8001504:	05db      	lsls	r3, r3, #23
 8001506:	429a      	cmp	r2, r3
 8001508:	d019      	beq.n	800153e <HAL_GPIO_Init+0x1ea>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a47      	ldr	r2, [pc, #284]	; (800162c <HAL_GPIO_Init+0x2d8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x1e6>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a46      	ldr	r2, [pc, #280]	; (8001630 <HAL_GPIO_Init+0x2dc>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x1e2>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a45      	ldr	r2, [pc, #276]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x1de>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a44      	ldr	r2, [pc, #272]	; (8001638 <HAL_GPIO_Init+0x2e4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x1da>
 800152a:	2305      	movs	r3, #5
 800152c:	e008      	b.n	8001540 <HAL_GPIO_Init+0x1ec>
 800152e:	2306      	movs	r3, #6
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x1ec>
 8001532:	2303      	movs	r3, #3
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x1ec>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x1ec>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x1ec>
 800153e:	2300      	movs	r3, #0
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	2103      	movs	r1, #3
 8001544:	400a      	ands	r2, r1
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001550:	4935      	ldr	r1, [pc, #212]	; (8001628 <HAL_GPIO_Init+0x2d4>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <HAL_GPIO_Init+0x2e8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43da      	mvns	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	4013      	ands	r3, r2
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <HAL_GPIO_Init+0x2e8>)
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <HAL_GPIO_Init+0x2e8>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43da      	mvns	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	029b      	lsls	r3, r3, #10
 80015a0:	4013      	ands	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_GPIO_Init+0x2e8>)
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_GPIO_Init+0x2e8>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	035b      	lsls	r3, r3, #13
 80015ca:	4013      	ands	r3, r2
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_GPIO_Init+0x2e8>)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_GPIO_Init+0x2e8>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43da      	mvns	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	039b      	lsls	r3, r3, #14
 80015f4:	4013      	ands	r3, r2
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_GPIO_Init+0x2e8>)
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	40da      	lsrs	r2, r3
 8001614:	1e13      	subs	r3, r2, #0
 8001616:	d000      	beq.n	800161a <HAL_GPIO_Init+0x2c6>
 8001618:	e6a8      	b.n	800136c <HAL_GPIO_Init+0x18>
  }
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b006      	add	sp, #24
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	50000400 	.word	0x50000400
 8001630:	50000800 	.word	0x50000800
 8001634:	50000c00 	.word	0x50000c00
 8001638:	50001c00 	.word	0x50001c00
 800163c:	40010400 	.word	0x40010400

08001640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	f000 fbaf 	bl	8001db2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001654:	4bcf      	ldr	r3, [pc, #828]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	220c      	movs	r2, #12
 800165a:	4013      	ands	r3, r2
 800165c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165e:	4bcd      	ldr	r3, [pc, #820]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	025b      	lsls	r3, r3, #9
 8001666:	4013      	ands	r3, r2
 8001668:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2201      	movs	r2, #1
 8001670:	4013      	ands	r3, r2
 8001672:	d100      	bne.n	8001676 <HAL_RCC_OscConfig+0x36>
 8001674:	e07e      	b.n	8001774 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	2b08      	cmp	r3, #8
 800167a:	d007      	beq.n	800168c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d112      	bne.n	80016a8 <HAL_RCC_OscConfig+0x68>
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	025b      	lsls	r3, r3, #9
 8001688:	429a      	cmp	r2, r3
 800168a:	d10d      	bne.n	80016a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	4bc1      	ldr	r3, [pc, #772]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	4013      	ands	r3, r2
 8001696:	d100      	bne.n	800169a <HAL_RCC_OscConfig+0x5a>
 8001698:	e06b      	b.n	8001772 <HAL_RCC_OscConfig+0x132>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d167      	bne.n	8001772 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f000 fb85 	bl	8001db2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	025b      	lsls	r3, r3, #9
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d107      	bne.n	80016c4 <HAL_RCC_OscConfig+0x84>
 80016b4:	4bb7      	ldr	r3, [pc, #732]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4bb6      	ldr	r3, [pc, #728]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	0249      	lsls	r1, r1, #9
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e027      	b.n	8001714 <HAL_RCC_OscConfig+0xd4>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	23a0      	movs	r3, #160	; 0xa0
 80016ca:	02db      	lsls	r3, r3, #11
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d10e      	bne.n	80016ee <HAL_RCC_OscConfig+0xae>
 80016d0:	4bb0      	ldr	r3, [pc, #704]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4baf      	ldr	r3, [pc, #700]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	02c9      	lsls	r1, r1, #11
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	4bad      	ldr	r3, [pc, #692]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4bac      	ldr	r3, [pc, #688]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0249      	lsls	r1, r1, #9
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e012      	b.n	8001714 <HAL_RCC_OscConfig+0xd4>
 80016ee:	4ba9      	ldr	r3, [pc, #676]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4ba8      	ldr	r3, [pc, #672]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80016f4:	49a8      	ldr	r1, [pc, #672]	; (8001998 <HAL_RCC_OscConfig+0x358>)
 80016f6:	400a      	ands	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	4ba6      	ldr	r3, [pc, #664]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	025b      	lsls	r3, r3, #9
 8001702:	4013      	ands	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4ba2      	ldr	r3, [pc, #648]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4ba1      	ldr	r3, [pc, #644]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 800170e:	49a3      	ldr	r1, [pc, #652]	; (800199c <HAL_RCC_OscConfig+0x35c>)
 8001710:	400a      	ands	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d015      	beq.n	8001748 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff f8ec 	bl	80008f8 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001724:	e009      	b.n	800173a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001726:	f7ff f8e7 	bl	80008f8 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b64      	cmp	r3, #100	; 0x64
 8001732:	d902      	bls.n	800173a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	f000 fb3c 	bl	8001db2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800173a:	4b96      	ldr	r3, [pc, #600]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	029b      	lsls	r3, r3, #10
 8001742:	4013      	ands	r3, r2
 8001744:	d0ef      	beq.n	8001726 <HAL_RCC_OscConfig+0xe6>
 8001746:	e015      	b.n	8001774 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff f8d6 	bl	80008f8 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001752:	f7ff f8d1 	bl	80008f8 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b64      	cmp	r3, #100	; 0x64
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e326      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001764:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	029b      	lsls	r3, r3, #10
 800176c:	4013      	ands	r3, r2
 800176e:	d1f0      	bne.n	8001752 <HAL_RCC_OscConfig+0x112>
 8001770:	e000      	b.n	8001774 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001772:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d100      	bne.n	8001780 <HAL_RCC_OscConfig+0x140>
 800177e:	e08b      	b.n	8001898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d005      	beq.n	8001798 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d13e      	bne.n	8001810 <HAL_RCC_OscConfig+0x1d0>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d13b      	bne.n	8001810 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001798:	4b7e      	ldr	r3, [pc, #504]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2204      	movs	r2, #4
 800179e:	4013      	ands	r3, r2
 80017a0:	d004      	beq.n	80017ac <HAL_RCC_OscConfig+0x16c>
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e302      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b79      	ldr	r3, [pc, #484]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a7b      	ldr	r2, [pc, #492]	; (80019a0 <HAL_RCC_OscConfig+0x360>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	021a      	lsls	r2, r3, #8
 80017bc:	4b75      	ldr	r3, [pc, #468]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017c2:	4b74      	ldr	r3, [pc, #464]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2209      	movs	r2, #9
 80017c8:	4393      	bics	r3, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	4b71      	ldr	r3, [pc, #452]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d4:	f000 fc40 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 80017d8:	0001      	movs	r1, r0
 80017da:	4b6e      	ldr	r3, [pc, #440]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	220f      	movs	r2, #15
 80017e2:	4013      	ands	r3, r2
 80017e4:	4a6f      	ldr	r2, [pc, #444]	; (80019a4 <HAL_RCC_OscConfig+0x364>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	000a      	movs	r2, r1
 80017ea:	40da      	lsrs	r2, r3
 80017ec:	4b6e      	ldr	r3, [pc, #440]	; (80019a8 <HAL_RCC_OscConfig+0x368>)
 80017ee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017f0:	4b6e      	ldr	r3, [pc, #440]	; (80019ac <HAL_RCC_OscConfig+0x36c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2513      	movs	r5, #19
 80017f6:	197c      	adds	r4, r7, r5
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff f837 	bl	800086c <HAL_InitTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001802:	197b      	adds	r3, r7, r5
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d046      	beq.n	8001898 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800180a:	197b      	adds	r3, r7, r5
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	e2d0      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d027      	beq.n	8001866 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001816:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2209      	movs	r2, #9
 800181c:	4393      	bics	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff f866 	bl	80008f8 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff f861 	bl	80008f8 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e2b6      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2204      	movs	r2, #4
 800184a:	4013      	ands	r3, r2
 800184c:	d0f1      	beq.n	8001832 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b51      	ldr	r3, [pc, #324]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4a53      	ldr	r2, [pc, #332]	; (80019a0 <HAL_RCC_OscConfig+0x360>)
 8001854:	4013      	ands	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	021a      	lsls	r2, r3, #8
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001860:	430a      	orrs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	e018      	b.n	8001898 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 800186c:	2101      	movs	r1, #1
 800186e:	438a      	bics	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff f841 	bl	80008f8 <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187c:	f7ff f83c 	bl	80008f8 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e291      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800188e:	4b41      	ldr	r3, [pc, #260]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2204      	movs	r2, #4
 8001894:	4013      	ands	r3, r2
 8001896:	d1f1      	bne.n	800187c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2210      	movs	r2, #16
 800189e:	4013      	ands	r3, r2
 80018a0:	d100      	bne.n	80018a4 <HAL_RCC_OscConfig+0x264>
 80018a2:	e0a1      	b.n	80019e8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d140      	bne.n	800192c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018aa:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x282>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e277      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a3a      	ldr	r2, [pc, #232]	; (80019b0 <HAL_RCC_OscConfig+0x370>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018d0:	4b30      	ldr	r3, [pc, #192]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	0a19      	lsrs	r1, r3, #8
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	061a      	lsls	r2, r3, #24
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	0b5b      	lsrs	r3, r3, #13
 80018f0:	3301      	adds	r3, #1
 80018f2:	2280      	movs	r2, #128	; 0x80
 80018f4:	0212      	lsls	r2, r2, #8
 80018f6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	210f      	movs	r1, #15
 8001900:	400b      	ands	r3, r1
 8001902:	4928      	ldr	r1, [pc, #160]	; (80019a4 <HAL_RCC_OscConfig+0x364>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x368>)
 800190a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_OscConfig+0x36c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2513      	movs	r5, #19
 8001912:	197c      	adds	r4, r7, r5
 8001914:	0018      	movs	r0, r3
 8001916:	f7fe ffa9 	bl	800086c <HAL_InitTick>
 800191a:	0003      	movs	r3, r0
 800191c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800191e:	197b      	adds	r3, r7, r5
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d060      	beq.n	80019e8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001926:	197b      	adds	r3, r7, r5
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	e242      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d03f      	beq.n	80019b4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 800193a:	2180      	movs	r1, #128	; 0x80
 800193c:	0049      	lsls	r1, r1, #1
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7fe ffd9 	bl	80008f8 <HAL_GetTick>
 8001946:	0003      	movs	r3, r0
 8001948:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194c:	f7fe ffd4 	bl	80008f8 <HAL_GetTick>
 8001950:	0002      	movs	r2, r0
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e229      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_RCC_OscConfig+0x370>)
 8001970:	4013      	ands	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	0a19      	lsrs	r1, r3, #8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	061a      	lsls	r2, r3, #24
 800198c:	4b01      	ldr	r3, [pc, #4]	; (8001994 <HAL_RCC_OscConfig+0x354>)
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	e029      	b.n	80019e8 <HAL_RCC_OscConfig+0x3a8>
 8001994:	40021000 	.word	0x40021000
 8001998:	fffeffff 	.word	0xfffeffff
 800199c:	fffbffff 	.word	0xfffbffff
 80019a0:	ffffe0ff 	.word	0xffffe0ff
 80019a4:	08002214 	.word	0x08002214
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004
 80019b0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019b4:	4bbd      	ldr	r3, [pc, #756]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4bbc      	ldr	r3, [pc, #752]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 80019ba:	49bd      	ldr	r1, [pc, #756]	; (8001cb0 <HAL_RCC_OscConfig+0x670>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7fe ff9a 	bl	80008f8 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ca:	f7fe ff95 	bl	80008f8 <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1ea      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019dc:	4bb3      	ldr	r3, [pc, #716]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4013      	ands	r3, r2
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2208      	movs	r2, #8
 80019ee:	4013      	ands	r3, r2
 80019f0:	d036      	beq.n	8001a60 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d019      	beq.n	8001a2e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fa:	4bac      	ldr	r3, [pc, #688]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 80019fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fe:	4bab      	ldr	r3, [pc, #684]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001a00:	2101      	movs	r1, #1
 8001a02:	430a      	orrs	r2, r1
 8001a04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7fe ff77 	bl	80008f8 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a10:	f7fe ff72 	bl	80008f8 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1c7      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a22:	4ba2      	ldr	r3, [pc, #648]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f1      	beq.n	8001a10 <HAL_RCC_OscConfig+0x3d0>
 8001a2c:	e018      	b.n	8001a60 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2e:	4b9f      	ldr	r3, [pc, #636]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a32:	4b9e      	ldr	r3, [pc, #632]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	438a      	bics	r2, r1
 8001a38:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe ff5d 	bl	80008f8 <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a44:	f7fe ff58 	bl	80008f8 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1ad      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a56:	4b95      	ldr	r3, [pc, #596]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d1f1      	bne.n	8001a44 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2204      	movs	r2, #4
 8001a66:	4013      	ands	r3, r2
 8001a68:	d100      	bne.n	8001a6c <HAL_RCC_OscConfig+0x42c>
 8001a6a:	e0ae      	b.n	8001bca <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6c:	2027      	movs	r0, #39	; 0x27
 8001a6e:	183b      	adds	r3, r7, r0
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a74:	4b8d      	ldr	r3, [pc, #564]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	055b      	lsls	r3, r3, #21
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d109      	bne.n	8001a94 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	4b8a      	ldr	r3, [pc, #552]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a84:	4b89      	ldr	r3, [pc, #548]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	0549      	lsls	r1, r1, #21
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a8e:	183b      	adds	r3, r7, r0
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	4b87      	ldr	r3, [pc, #540]	; (8001cb4 <HAL_RCC_OscConfig+0x674>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d11a      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa0:	4b84      	ldr	r3, [pc, #528]	; (8001cb4 <HAL_RCC_OscConfig+0x674>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b83      	ldr	r3, [pc, #524]	; (8001cb4 <HAL_RCC_OscConfig+0x674>)
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	0049      	lsls	r1, r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aae:	f7fe ff23 	bl	80008f8 <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab8:	f7fe ff1e 	bl	80008f8 <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e173      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b7a      	ldr	r3, [pc, #488]	; (8001cb4 <HAL_RCC_OscConfig+0x674>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_OscConfig+0x4b2>
 8001ae2:	4b72      	ldr	r3, [pc, #456]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae6:	4b71      	ldr	r3, [pc, #452]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	0049      	lsls	r1, r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	651a      	str	r2, [r3, #80]	; 0x50
 8001af0:	e031      	b.n	8001b56 <HAL_RCC_OscConfig+0x516>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x4d4>
 8001afa:	4b6c      	ldr	r3, [pc, #432]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001afe:	4b6b      	ldr	r3, [pc, #428]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b00:	496b      	ldr	r1, [pc, #428]	; (8001cb0 <HAL_RCC_OscConfig+0x670>)
 8001b02:	400a      	ands	r2, r1
 8001b04:	651a      	str	r2, [r3, #80]	; 0x50
 8001b06:	4b69      	ldr	r3, [pc, #420]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b0a:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b0c:	496a      	ldr	r1, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x678>)
 8001b0e:	400a      	ands	r2, r1
 8001b10:	651a      	str	r2, [r3, #80]	; 0x50
 8001b12:	e020      	b.n	8001b56 <HAL_RCC_OscConfig+0x516>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	23a0      	movs	r3, #160	; 0xa0
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d10e      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4fe>
 8001b20:	4b62      	ldr	r3, [pc, #392]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b24:	4b61      	ldr	r3, [pc, #388]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	00c9      	lsls	r1, r1, #3
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b32:	4b5e      	ldr	r3, [pc, #376]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	0049      	lsls	r1, r1, #1
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b3c:	e00b      	b.n	8001b56 <HAL_RCC_OscConfig+0x516>
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b42:	4b5a      	ldr	r3, [pc, #360]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b44:	495a      	ldr	r1, [pc, #360]	; (8001cb0 <HAL_RCC_OscConfig+0x670>)
 8001b46:	400a      	ands	r2, r1
 8001b48:	651a      	str	r2, [r3, #80]	; 0x50
 8001b4a:	4b58      	ldr	r3, [pc, #352]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b4e:	4b57      	ldr	r3, [pc, #348]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b50:	4959      	ldr	r1, [pc, #356]	; (8001cb8 <HAL_RCC_OscConfig+0x678>)
 8001b52:	400a      	ands	r2, r1
 8001b54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d015      	beq.n	8001b8a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7fe fecb 	bl	80008f8 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b66:	e009      	b.n	8001b7c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7fe fec6 	bl	80008f8 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <HAL_RCC_OscConfig+0x67c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e11a      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b7c:	4b4b      	ldr	r3, [pc, #300]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001b7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d0ef      	beq.n	8001b68 <HAL_RCC_OscConfig+0x528>
 8001b88:	e014      	b.n	8001bb4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8a:	f7fe feb5 	bl	80008f8 <HAL_GetTick>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b92:	e009      	b.n	8001ba8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7fe feb0 	bl	80008f8 <HAL_GetTick>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	4a47      	ldr	r2, [pc, #284]	; (8001cbc <HAL_RCC_OscConfig+0x67c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e104      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ba8:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001baa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d1ef      	bne.n	8001b94 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bb4:	2327      	movs	r3, #39	; 0x27
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d105      	bne.n	8001bca <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001bc4:	493e      	ldr	r1, [pc, #248]	; (8001cc0 <HAL_RCC_OscConfig+0x680>)
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d049      	beq.n	8001c68 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d026      	beq.n	8001c2a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001bdc:	4b33      	ldr	r3, [pc, #204]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <HAL_RCC_OscConfig+0x684>)
 8001bf6:	6a1a      	ldr	r2, [r3, #32]
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_RCC_OscConfig+0x684>)
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	0189      	lsls	r1, r1, #6
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7fe fe79 	bl	80008f8 <HAL_GetTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0c:	f7fe fe74 	bl	80008f8 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e0c9      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c1e:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d0f1      	beq.n	8001c0c <HAL_RCC_OscConfig+0x5cc>
 8001c28:	e01e      	b.n	8001c68 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	438a      	bics	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_RCC_OscConfig+0x684>)
 8001c38:	6a1a      	ldr	r2, [r3, #32]
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_RCC_OscConfig+0x684>)
 8001c3c:	4922      	ldr	r1, [pc, #136]	; (8001cc8 <HAL_RCC_OscConfig+0x688>)
 8001c3e:	400a      	ands	r2, r1
 8001c40:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7fe fe59 	bl	80008f8 <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c4c:	f7fe fe54 	bl	80008f8 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0a9      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d1f1      	bne.n	8001c4c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d100      	bne.n	8001c72 <HAL_RCC_OscConfig+0x632>
 8001c70:	e09e      	b.n	8001db0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	d100      	bne.n	8001c7a <HAL_RCC_OscConfig+0x63a>
 8001c78:	e077      	b.n	8001d6a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d158      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_OscConfig+0x66c>)
 8001c88:	4910      	ldr	r1, [pc, #64]	; (8001ccc <HAL_RCC_OscConfig+0x68c>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe fe33 	bl	80008f8 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c96:	e01b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c98:	f7fe fe2e 	bl	80008f8 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d914      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e083      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	fffffeff 	.word	0xfffffeff
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	fffffbff 	.word	0xfffffbff
 8001cbc:	00001388 	.word	0x00001388
 8001cc0:	efffffff 	.word	0xefffffff
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	ffffdfff 	.word	0xffffdfff
 8001ccc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	049b      	lsls	r3, r3, #18
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d1dd      	bne.n	8001c98 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cdc:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a37      	ldr	r2, [pc, #220]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	0449      	lsls	r1, r1, #17
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe fdf5 	bl	80008f8 <HAL_GetTick>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7fe fdf0 	bl	80008f8 <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e045      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	049b      	lsls	r3, r3, #18
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x6d4>
 8001d32:	e03d      	b.n	8001db0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001d3a:	4922      	ldr	r1, [pc, #136]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7fe fdda 	bl	80008f8 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7fe fdd5 	bl	80008f8 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e02a      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d5c:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	049b      	lsls	r3, r3, #18
 8001d64:	4013      	ands	r3, r2
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x70a>
 8001d68:	e022      	b.n	8001db0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e01d      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	025b      	lsls	r3, r3, #9
 8001d82:	401a      	ands	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d10f      	bne.n	8001dac <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	23f0      	movs	r3, #240	; 0xf0
 8001d90:	039b      	lsls	r3, r3, #14
 8001d92:	401a      	ands	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	23c0      	movs	r3, #192	; 0xc0
 8001da0:	041b      	lsls	r3, r3, #16
 8001da2:	401a      	ands	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b00a      	add	sp, #40	; 0x28
 8001db8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	ff02ffff 	.word	0xff02ffff
 8001dc4:	feffffff 	.word	0xfeffffff

08001dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e128      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b96      	ldr	r3, [pc, #600]	; (8002038 <HAL_RCC_ClockConfig+0x270>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2201      	movs	r2, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d91e      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b93      	ldr	r3, [pc, #588]	; (8002038 <HAL_RCC_ClockConfig+0x270>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	4b90      	ldr	r3, [pc, #576]	; (8002038 <HAL_RCC_ClockConfig+0x270>)
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dfc:	f7fe fd7c 	bl	80008f8 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e04:	e009      	b.n	8001e1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e06:	f7fe fd77 	bl	80008f8 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	4a8a      	ldr	r2, [pc, #552]	; (800203c <HAL_RCC_ClockConfig+0x274>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e109      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b87      	ldr	r3, [pc, #540]	; (8002038 <HAL_RCC_ClockConfig+0x270>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1ee      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e32:	4b83      	ldr	r3, [pc, #524]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	22f0      	movs	r2, #240	; 0xf0
 8001e38:	4393      	bics	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b7f      	ldr	r3, [pc, #508]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d100      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x8a>
 8001e50:	e089      	b.n	8001f66 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e5a:	4b79      	ldr	r3, [pc, #484]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	029b      	lsls	r3, r3, #10
 8001e62:	4013      	ands	r3, r2
 8001e64:	d120      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0e1      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e72:	4b73      	ldr	r3, [pc, #460]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	049b      	lsls	r3, r3, #18
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d114      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0d5      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e8a:	4b6d      	ldr	r3, [pc, #436]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	4013      	ands	r3, r2
 8001e92:	d109      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0ca      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e98:	4b69      	ldr	r3, [pc, #420]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0c2      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea8:	4b65      	ldr	r3, [pc, #404]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2203      	movs	r2, #3
 8001eae:	4393      	bics	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4b62      	ldr	r3, [pc, #392]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fd1c 	bl	80008f8 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d111      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ece:	f7fe fd13 	bl	80008f8 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_ClockConfig+0x274>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0a5      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d1ef      	bne.n	8001ece <HAL_RCC_ClockConfig+0x106>
 8001eee:	e03a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d111      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef8:	e009      	b.n	8001f0e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efa:	f7fe fcfd 	bl	80008f8 <HAL_GetTick>
 8001efe:	0002      	movs	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	4a4d      	ldr	r2, [pc, #308]	; (800203c <HAL_RCC_ClockConfig+0x274>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e08f      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	220c      	movs	r2, #12
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d1ef      	bne.n	8001efa <HAL_RCC_ClockConfig+0x132>
 8001f1a:	e024      	b.n	8001f66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d11b      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f24:	e009      	b.n	8001f3a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f26:	f7fe fce7 	bl	80008f8 <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	4a42      	ldr	r2, [pc, #264]	; (800203c <HAL_RCC_ClockConfig+0x274>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e079      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	220c      	movs	r2, #12
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d1ef      	bne.n	8001f26 <HAL_RCC_ClockConfig+0x15e>
 8001f46:	e00e      	b.n	8001f66 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7fe fcd6 	bl	80008f8 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	4a3a      	ldr	r2, [pc, #232]	; (800203c <HAL_RCC_ClockConfig+0x274>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e068      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f5c:	4b38      	ldr	r3, [pc, #224]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	220c      	movs	r2, #12
 8001f62:	4013      	ands	r3, r2
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f66:	4b34      	ldr	r3, [pc, #208]	; (8002038 <HAL_RCC_ClockConfig+0x270>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d21e      	bcs.n	8001fb2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f74:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_RCC_ClockConfig+0x270>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4393      	bics	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <HAL_RCC_ClockConfig+0x270>)
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f86:	f7fe fcb7 	bl	80008f8 <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	e009      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7fe fcb2 	bl	80008f8 <HAL_GetTick>
 8001f94:	0002      	movs	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	4a28      	ldr	r2, [pc, #160]	; (800203c <HAL_RCC_ClockConfig+0x274>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e044      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_RCC_ClockConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4013      	ands	r3, r2
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d1ee      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d009      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a20      	ldr	r2, [pc, #128]	; (8002044 <HAL_RCC_ClockConfig+0x27c>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <HAL_RCC_ClockConfig+0x280>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	00da      	lsls	r2, r3, #3
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ff0:	f000 f832 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8001ff4:	0001      	movs	r1, r0
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x278>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	4013      	ands	r3, r2
 8002000:	4a12      	ldr	r2, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x284>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	000a      	movs	r2, r1
 8002006:	40da      	lsrs	r2, r3
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_RCC_ClockConfig+0x288>)
 800200a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_RCC_ClockConfig+0x28c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	250b      	movs	r5, #11
 8002012:	197c      	adds	r4, r7, r5
 8002014:	0018      	movs	r0, r3
 8002016:	f7fe fc29 	bl	800086c <HAL_InitTick>
 800201a:	0003      	movs	r3, r0
 800201c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800201e:	197b      	adds	r3, r7, r5
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002026:	197b      	adds	r3, r7, r5
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	e000      	b.n	800202e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bdb0      	pop	{r4, r5, r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	40022000 	.word	0x40022000
 800203c:	00001388 	.word	0x00001388
 8002040:	40021000 	.word	0x40021000
 8002044:	fffff8ff 	.word	0xfffff8ff
 8002048:	ffffc7ff 	.word	0xffffc7ff
 800204c:	08002214 	.word	0x08002214
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800205e:	4b4c      	ldr	r3, [pc, #304]	; (8002190 <HAL_RCC_GetSysClockFreq+0x138>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002066:	230c      	movs	r3, #12
 8002068:	4013      	ands	r3, r2
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d014      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x40>
 800206e:	d900      	bls.n	8002072 <HAL_RCC_GetSysClockFreq+0x1a>
 8002070:	e07b      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x112>
 8002072:	2b04      	cmp	r3, #4
 8002074:	d002      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x24>
 8002076:	2b08      	cmp	r3, #8
 8002078:	d00b      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x3a>
 800207a:	e076      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800207c:	4b44      	ldr	r3, [pc, #272]	; (8002190 <HAL_RCC_GetSysClockFreq+0x138>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2210      	movs	r2, #16
 8002082:	4013      	ands	r3, r2
 8002084:	d002      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002086:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800208a:	e07c      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800208c:	4b42      	ldr	r3, [pc, #264]	; (8002198 <HAL_RCC_GetSysClockFreq+0x140>)
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002090:	e079      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002092:	4b42      	ldr	r3, [pc, #264]	; (800219c <HAL_RCC_GetSysClockFreq+0x144>)
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002096:	e076      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	0c9a      	lsrs	r2, r3, #18
 800209c:	230f      	movs	r3, #15
 800209e:	401a      	ands	r2, r3
 80020a0:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x148>)
 80020a2:	5c9b      	ldrb	r3, [r3, r2]
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	0d9a      	lsrs	r2, r3, #22
 80020aa:	2303      	movs	r3, #3
 80020ac:	4013      	ands	r3, r2
 80020ae:	3301      	adds	r3, #1
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_RCC_GetSysClockFreq+0x138>)
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	025b      	lsls	r3, r3, #9
 80020ba:	4013      	ands	r3, r2
 80020bc:	d01a      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	4a35      	ldr	r2, [pc, #212]	; (800219c <HAL_RCC_GetSysClockFreq+0x144>)
 80020c8:	2300      	movs	r3, #0
 80020ca:	69b8      	ldr	r0, [r7, #24]
 80020cc:	69f9      	ldr	r1, [r7, #28]
 80020ce:	f7fe f8c7 	bl	8000260 <__aeabi_lmul>
 80020d2:	0002      	movs	r2, r0
 80020d4:	000b      	movs	r3, r1
 80020d6:	0010      	movs	r0, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f7fe f89b 	bl	8000220 <__aeabi_uldivmod>
 80020ea:	0002      	movs	r2, r0
 80020ec:	000b      	movs	r3, r1
 80020ee:	0013      	movs	r3, r2
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
 80020f2:	e037      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020f4:	4b26      	ldr	r3, [pc, #152]	; (8002190 <HAL_RCC_GetSysClockFreq+0x138>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2210      	movs	r2, #16
 80020fa:	4013      	ands	r3, r2
 80020fc:	d01a      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4a23      	ldr	r2, [pc, #140]	; (8002194 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002108:	2300      	movs	r3, #0
 800210a:	68b8      	ldr	r0, [r7, #8]
 800210c:	68f9      	ldr	r1, [r7, #12]
 800210e:	f7fe f8a7 	bl	8000260 <__aeabi_lmul>
 8002112:	0002      	movs	r2, r0
 8002114:	000b      	movs	r3, r1
 8002116:	0010      	movs	r0, r2
 8002118:	0019      	movs	r1, r3
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f7fe f87b 	bl	8000220 <__aeabi_uldivmod>
 800212a:	0002      	movs	r2, r0
 800212c:	000b      	movs	r3, r1
 800212e:	0013      	movs	r3, r2
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
 8002132:	e017      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	0018      	movs	r0, r3
 8002138:	2300      	movs	r3, #0
 800213a:	0019      	movs	r1, r3
 800213c:	4a16      	ldr	r2, [pc, #88]	; (8002198 <HAL_RCC_GetSysClockFreq+0x140>)
 800213e:	2300      	movs	r3, #0
 8002140:	f7fe f88e 	bl	8000260 <__aeabi_lmul>
 8002144:	0002      	movs	r2, r0
 8002146:	000b      	movs	r3, r1
 8002148:	0010      	movs	r0, r2
 800214a:	0019      	movs	r1, r3
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	001c      	movs	r4, r3
 8002150:	2300      	movs	r3, #0
 8002152:	001d      	movs	r5, r3
 8002154:	0022      	movs	r2, r4
 8002156:	002b      	movs	r3, r5
 8002158:	f7fe f862 	bl	8000220 <__aeabi_uldivmod>
 800215c:	0002      	movs	r2, r0
 800215e:	000b      	movs	r3, r1
 8002160:	0013      	movs	r3, r2
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002168:	e00d      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_GetSysClockFreq+0x138>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0b5b      	lsrs	r3, r3, #13
 8002170:	2207      	movs	r2, #7
 8002172:	4013      	ands	r3, r2
 8002174:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	3301      	adds	r3, #1
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	0212      	lsls	r2, r2, #8
 800217e:	409a      	lsls	r2, r3
 8002180:	0013      	movs	r3, r2
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002184:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b00e      	add	sp, #56	; 0x38
 800218e:	bdb0      	pop	{r4, r5, r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	003d0900 	.word	0x003d0900
 8002198:	00f42400 	.word	0x00f42400
 800219c:	007a1200 	.word	0x007a1200
 80021a0:	08002224 	.word	0x08002224

080021a4 <__libc_init_array>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	2600      	movs	r6, #0
 80021a8:	4d0c      	ldr	r5, [pc, #48]	; (80021dc <__libc_init_array+0x38>)
 80021aa:	4c0d      	ldr	r4, [pc, #52]	; (80021e0 <__libc_init_array+0x3c>)
 80021ac:	1b64      	subs	r4, r4, r5
 80021ae:	10a4      	asrs	r4, r4, #2
 80021b0:	42a6      	cmp	r6, r4
 80021b2:	d109      	bne.n	80021c8 <__libc_init_array+0x24>
 80021b4:	2600      	movs	r6, #0
 80021b6:	f000 f821 	bl	80021fc <_init>
 80021ba:	4d0a      	ldr	r5, [pc, #40]	; (80021e4 <__libc_init_array+0x40>)
 80021bc:	4c0a      	ldr	r4, [pc, #40]	; (80021e8 <__libc_init_array+0x44>)
 80021be:	1b64      	subs	r4, r4, r5
 80021c0:	10a4      	asrs	r4, r4, #2
 80021c2:	42a6      	cmp	r6, r4
 80021c4:	d105      	bne.n	80021d2 <__libc_init_array+0x2e>
 80021c6:	bd70      	pop	{r4, r5, r6, pc}
 80021c8:	00b3      	lsls	r3, r6, #2
 80021ca:	58eb      	ldr	r3, [r5, r3]
 80021cc:	4798      	blx	r3
 80021ce:	3601      	adds	r6, #1
 80021d0:	e7ee      	b.n	80021b0 <__libc_init_array+0xc>
 80021d2:	00b3      	lsls	r3, r6, #2
 80021d4:	58eb      	ldr	r3, [r5, r3]
 80021d6:	4798      	blx	r3
 80021d8:	3601      	adds	r6, #1
 80021da:	e7f2      	b.n	80021c2 <__libc_init_array+0x1e>
 80021dc:	08002238 	.word	0x08002238
 80021e0:	08002238 	.word	0x08002238
 80021e4:	08002238 	.word	0x08002238
 80021e8:	0800223c 	.word	0x0800223c

080021ec <memset>:
 80021ec:	0003      	movs	r3, r0
 80021ee:	1882      	adds	r2, r0, r2
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d100      	bne.n	80021f6 <memset+0xa>
 80021f4:	4770      	bx	lr
 80021f6:	7019      	strb	r1, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	e7f9      	b.n	80021f0 <memset+0x4>

080021fc <_init>:
 80021fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002202:	bc08      	pop	{r3}
 8002204:	469e      	mov	lr, r3
 8002206:	4770      	bx	lr

08002208 <_fini>:
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220e:	bc08      	pop	{r3}
 8002210:	469e      	mov	lr, r3
 8002212:	4770      	bx	lr
