
ece477-esp8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030fc  080030fc  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003104  08003104  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800310c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000024  08003130  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003130  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7c2  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e18  00000000  00000000  0002a80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002d080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013538  00000000  00000000  0002d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5b9  00000000  00000000  00040f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074527  00000000  00000000  0004e4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2a08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d8  00000000  00000000  000c2a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e74 	.word	0x08002e74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08002e74 	.word	0x08002e74

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <setup_wifi>:
#include <stdarg.h>

int session_id = 1;

// This function sets the wifi mode to station, sets the AP to connect to,
int setup_wifi(char * ssid, char * password){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]

  //TODO - define error

//  serial_select(WIFI);
  serial_println("AT+CWMODE=1");
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <setup_wifi+0x38>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fa3f 	bl	800092c <serial_println>
  HAL_Delay(50); //dealy of 50 ms
 80004ae:	2032      	movs	r0, #50	; 0x32
 80004b0:	f000 fccc 	bl	8000e4c <HAL_Delay>
  serial_printf("AT+CWJAP=\"%s\",\"%s\"\n", ssid, password);
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	6879      	ldr	r1, [r7, #4]
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <setup_wifi+0x3c>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fa76 	bl	80009ac <serial_printf>
  HAL_Delay(2000);
 80004c0:	23fa      	movs	r3, #250	; 0xfa
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fcc1 	bl	8000e4c <HAL_Delay>

  return AT_SUCCESS;
 80004ca:	2300      	movs	r3, #0
}
 80004cc:	0018      	movs	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	08002e8c 	.word	0x08002e8c
 80004d8:	08002e98 	.word	0x08002e98

080004dc <sent_freshbyte_data>:

int sent_freshbyte_data(int temp_F, int humid, int methane){
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b087      	sub	sp, #28
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]

  //TODO - define error

  serial_printf("AT+HTTPCLIENT=3,0,\"http://maker.ifttt.com/trigger/ece477/"
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <sent_freshbyte_data+0x3c>)
 80004ea:	6819      	ldr	r1, [r3, #0]
 80004ec:	68bc      	ldr	r4, [r7, #8]
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	480a      	ldr	r0, [pc, #40]	; (800051c <sent_freshbyte_data+0x40>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	0023      	movs	r3, r4
 80004f8:	f000 fa58 	bl	80009ac <serial_printf>
                "with/key/cRY9n1jJnl-fCLuPYsZZ-8\",\"maker.ifttt.com\",\""
                "/trigger/ece477/with/key/cRY9n1jJnl-fCLuPYsZZ-8\",1,\""
                "value1=%d%%7C%%7C%%7C%dF&value2=%d%%25&value3=%d\"\n", session_id, temp_F, humid, methane);
  HAL_Delay(50);
 80004fc:	2032      	movs	r0, #50	; 0x32
 80004fe:	f000 fca5 	bl	8000e4c <HAL_Delay>
  session_id++;
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <sent_freshbyte_data+0x3c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <sent_freshbyte_data+0x3c>)
 800050a:	601a      	str	r2, [r3, #0]

  return AT_SUCCESS;
 800050c:	2300      	movs	r3, #0
 800050e:	0018      	movs	r0, r3
 8000510:	46bd      	mov	sp, r7
 8000512:	b005      	add	sp, #20
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	20000000 	.word	0x20000000
 800051c:	08002eac 	.word	0x08002eac

08000520 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_GPIO_Init+0x40>)
 8000528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_GPIO_Init+0x40>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_GPIO_Init+0x40>)
 8000534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000536:	2201      	movs	r2, #1
 8000538:	4013      	ands	r3, r2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_GPIO_Init+0x40>)
 8000540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <MX_GPIO_Init+0x40>)
 8000544:	2102      	movs	r1, #2
 8000546:	430a      	orrs	r2, r1
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <MX_GPIO_Init+0x40>)
 800054c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054e:	2202      	movs	r2, #2
 8000550:	4013      	ands	r3, r2
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]

}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b002      	add	sp, #8
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000

08000564 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_I2C1_Init+0x78>)
 800056a:	4a1d      	ldr	r2, [pc, #116]	; (80005e0 <MX_I2C1_Init+0x7c>)
 800056c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800056e:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_I2C1_Init+0x78>)
 8000570:	22e1      	movs	r2, #225	; 0xe1
 8000572:	00d2      	lsls	r2, r2, #3
 8000574:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_I2C1_Init+0x78>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_I2C1_Init+0x78>)
 800057e:	2201      	movs	r2, #1
 8000580:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_I2C1_Init+0x78>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_I2C1_Init+0x78>)
 800058a:	2200      	movs	r2, #0
 800058c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_I2C1_Init+0x78>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_I2C1_Init+0x78>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <MX_I2C1_Init+0x78>)
 800059c:	2200      	movs	r2, #0
 800059e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_I2C1_Init+0x78>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 fea0 	bl	80012e8 <HAL_I2C_Init>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005ac:	f000 f910 	bl	80007d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <MX_I2C1_Init+0x78>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 ff2d 	bl	8001414 <HAL_I2CEx_ConfigAnalogFilter>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005be:	f000 f907 	bl	80007d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_I2C1_Init+0x78>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 ff70 	bl	80014ac <HAL_I2CEx_ConfigDigitalFilter>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005d0:	f000 f8fe 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	20000074 	.word	0x20000074
 80005e0:	40005400 	.word	0x40005400

080005e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	240c      	movs	r4, #12
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	0018      	movs	r0, r3
 80005f2:	2314      	movs	r3, #20
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f002 fc33 	bl	8002e62 <memset>
  if(i2cHandle->Instance==I2C1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a18      	ldr	r2, [pc, #96]	; (8000664 <HAL_I2C_MspInit+0x80>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d129      	bne.n	800065a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <HAL_I2C_MspInit+0x84>)
 8000608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <HAL_I2C_MspInit+0x84>)
 800060c:	2102      	movs	r1, #2
 800060e:	430a      	orrs	r2, r1
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_I2C_MspInit+0x84>)
 8000614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000616:	2202      	movs	r2, #2
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	22c0      	movs	r2, #192	; 0xc0
 8000622:	0092      	lsls	r2, r2, #2
 8000624:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000626:	0021      	movs	r1, r4
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2212      	movs	r2, #18
 800062c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2201      	movs	r2, #1
 8000632:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2203      	movs	r2, #3
 8000638:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2204      	movs	r2, #4
 800063e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	187b      	adds	r3, r7, r1
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <HAL_I2C_MspInit+0x88>)
 8000644:	0019      	movs	r1, r3
 8000646:	0010      	movs	r0, r2
 8000648:	f000 fcd8 	bl	8000ffc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_I2C_MspInit+0x84>)
 800064e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_I2C_MspInit+0x84>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	0389      	lsls	r1, r1, #14
 8000656:	430a      	orrs	r2, r1
 8000658:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b009      	add	sp, #36	; 0x24
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40005400 	.word	0x40005400
 8000668:	40021000 	.word	0x40021000
 800066c:	50000400 	.word	0x50000400

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fb7a 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f838 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f7ff ff50 	bl	8000520 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000680:	f7ff ff70 	bl	8000564 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000684:	f000 fa72 	bl	8000b6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000688:	f000 faa0 	bl	8000bcc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

    serial_select(DEBUG_PRINT);
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f8e9 	bl	8000864 <serial_select>
    serial_clear();
 8000692:	f000 f91b 	bl	80008cc <serial_clear>
    serial_println("Hello world, this is a test of the new serial print functions!");
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <main+0x64>)
 8000698:	0018      	movs	r0, r3
 800069a:	f000 f947 	bl	800092c <serial_println>
    serial_select(WIFI);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f8e0 	bl	8000864 <serial_select>
//    serial_println("AT");
    HAL_Delay(50);
 80006a4:	2032      	movs	r0, #50	; 0x32
 80006a6:	f000 fbd1 	bl	8000e4c <HAL_Delay>
//    serial_printf("AT\n");
    if (setup_wifi("ASUS", "rickroll362") == AT_FAIL){
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <main+0x68>)
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <main+0x6c>)
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff fef3 	bl	800049c <setup_wifi>
      // try again
    }
    sent_freshbyte_data(5000, 5000, 50000);
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <main+0x70>)
 80006b8:	490a      	ldr	r1, [pc, #40]	; (80006e4 <main+0x74>)
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <main+0x74>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff ff0d 	bl	80004dc <sent_freshbyte_data>
    serial_select(DEBUG_PRINT);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 f8ce 	bl	8000864 <serial_select>
    serial_println("Did you see that? I was chatting with the wi-fi module for a little bit ;)");
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <main+0x78>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f92e 	bl	800092c <serial_println>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <main+0x60>
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	08002f80 	.word	0x08002f80
 80006d8:	08002fc0 	.word	0x08002fc0
 80006dc:	08002fcc 	.word	0x08002fcc
 80006e0:	0000c350 	.word	0x0000c350
 80006e4:	00001388 	.word	0x00001388
 80006e8:	08002fd4 	.word	0x08002fd4

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b09d      	sub	sp, #116	; 0x74
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	2438      	movs	r4, #56	; 0x38
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	0018      	movs	r0, r3
 80006f8:	2338      	movs	r3, #56	; 0x38
 80006fa:	001a      	movs	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	f002 fbb0 	bl	8002e62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000702:	2324      	movs	r3, #36	; 0x24
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	2314      	movs	r3, #20
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f002 fba8 	bl	8002e62 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2324      	movs	r3, #36	; 0x24
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f002 fba1 	bl	8002e62 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <SystemClock_Config+0xdc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a29      	ldr	r2, [pc, #164]	; (80007cc <SystemClock_Config+0xe0>)
 8000726:	401a      	ands	r2, r3
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <SystemClock_Config+0xdc>)
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	0109      	lsls	r1, r1, #4
 800072e:	430a      	orrs	r2, r1
 8000730:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2210      	movs	r2, #16
 8000738:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2201      	movs	r2, #1
 800073e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	22a0      	movs	r2, #160	; 0xa0
 800074a:	0212      	lsls	r2, r2, #8
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	187b      	adds	r3, r7, r1
 8000756:	0018      	movs	r0, r3
 8000758:	f000 fef4 	bl	8001544 <HAL_RCC_OscConfig>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000760:	f000 f836 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	2124      	movs	r1, #36	; 0x24
 8000766:	187b      	adds	r3, r7, r1
 8000768:	220f      	movs	r2, #15
 800076a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2100      	movs	r1, #0
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fa9f 	bl	8001ccc <HAL_RCC_ClockConfig>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000792:	f000 f81d 	bl	80007d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000796:	003b      	movs	r3, r7
 8000798:	220b      	movs	r2, #11
 800079a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800079c:	003b      	movs	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ae:	003b      	movs	r3, r7
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fcaf 	bl	8002114 <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007ba:	f000 f809 	bl	80007d0 <Error_Handler>
  }
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b01d      	add	sp, #116	; 0x74
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40007000 	.word	0x40007000
 80007cc:	ffffe7ff 	.word	0xffffe7ff

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <convert>:

// Internal functions to serial_print
char *convert(unsigned int num, int base);
size_t strlen(const char *str);

char *convert(unsigned int num, int base) { 
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	static char Representation[]= "0123456789ABCDEF";
	static char buffer[50]; 
	char *ptr; 
	
	ptr = &buffer[49]; 
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <convert+0x50>)
 80007e8:	60fb      	str	r3, [r7, #12]
	*ptr = '\0'; 
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
	
	do { 
		*--ptr = Representation[num%base]; 
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff fd0c 	bl	8000214 <__aeabi_uidivmod>
 80007fc:	000b      	movs	r3, r1
 80007fe:	001a      	movs	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3b01      	subs	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <convert+0x54>)
 8000808:	5c9a      	ldrb	r2, [r3, r2]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	701a      	strb	r2, [r3, #0]
		num /= base; 
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	0019      	movs	r1, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fc78 	bl	8000108 <__udivsi3>
 8000818:	0003      	movs	r3, r0
 800081a:	607b      	str	r3, [r7, #4]
	} while(num != 0); 
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1e6      	bne.n	80007f0 <convert+0x14>
	
	return(ptr); 
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b004      	add	sp, #16
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000071 	.word	0x20000071
 8000830:	20000004 	.word	0x20000004

08000834 <strlen>:

/*!
    @brief https://stackoverflow.com/questions/22520413/c-strlen-implementation-in-one-line-of-code
*/
size_t strlen (const char *str) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    return (*str) ? strlen(++str) + 1 : 0;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d009      	beq.n	8000858 <strlen+0x24>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3301      	adds	r3, #1
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff fff1 	bl	8000834 <strlen>
 8000852:	0003      	movs	r3, r0
 8000854:	3301      	adds	r3, #1
 8000856:	e000      	b.n	800085a <strlen+0x26>
 8000858:	2300      	movs	r3, #0
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <serial_select>:
// End of internal functions for serial_print

void serial_select(enum uart_line_t line) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	0002      	movs	r2, r0
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	701a      	strb	r2, [r3, #0]
    switch (line) {
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <serial_select+0x1a>
 8000878:	2b01      	cmp	r3, #1
 800087a:	d00d      	beq.n	8000898 <serial_select+0x34>
        case DEBUG_PRINT:
            current_line = line;
            serial_line = SERIAL_UART;
            break;
    }
}
 800087c:	e019      	b.n	80008b2 <serial_select+0x4e>
            current_line = line;
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <serial_select+0x58>)
 8000880:	1dfa      	adds	r2, r7, #7
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	701a      	strb	r2, [r3, #0]
            serial_line = WIFI_UART;
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <serial_select+0x5c>)
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <serial_select+0x60>)
 800088a:	0010      	movs	r0, r2
 800088c:	0019      	movs	r1, r3
 800088e:	2384      	movs	r3, #132	; 0x84
 8000890:	001a      	movs	r2, r3
 8000892:	f002 fadd 	bl	8002e50 <memcpy>
            break;
 8000896:	e00c      	b.n	80008b2 <serial_select+0x4e>
            current_line = line;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <serial_select+0x58>)
 800089a:	1dfa      	adds	r2, r7, #7
 800089c:	7812      	ldrb	r2, [r2, #0]
 800089e:	701a      	strb	r2, [r3, #0]
            serial_line = SERIAL_UART;
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <serial_select+0x5c>)
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <serial_select+0x64>)
 80008a4:	0010      	movs	r0, r2
 80008a6:	0019      	movs	r1, r3
 80008a8:	2384      	movs	r3, #132	; 0x84
 80008aa:	001a      	movs	r2, r3
 80008ac:	f002 fad0 	bl	8002e50 <memcpy>
            break;
 80008b0:	46c0      	nop			; (mov r8, r8)
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	200000c0 	.word	0x200000c0
 80008c0:	200000c4 	.word	0x200000c4
 80008c4:	20000148 	.word	0x20000148
 80008c8:	200001cc 	.word	0x200001cc

080008cc <serial_clear>:

void serial_clear() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  char clear_sequence[] = {0x1b, 0x5B, 0x32, 0x4A, 0x1b, 0x5B, 0x48};
 80008d2:	003b      	movs	r3, r7
 80008d4:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <serial_clear+0x2c>)
 80008d6:	6811      	ldr	r1, [r2, #0]
 80008d8:	6019      	str	r1, [r3, #0]
 80008da:	8891      	ldrh	r1, [r2, #4]
 80008dc:	8099      	strh	r1, [r3, #4]
 80008de:	7992      	ldrb	r2, [r2, #6]
 80008e0:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&serial_line, (unsigned char*) clear_sequence, sizeof clear_sequence, HAL_MAX_DELAY);
 80008e2:	2301      	movs	r3, #1
 80008e4:	425b      	negs	r3, r3
 80008e6:	0039      	movs	r1, r7
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <serial_clear+0x30>)
 80008ea:	2207      	movs	r2, #7
 80008ec:	f001 fdca 	bl	8002484 <HAL_UART_Transmit>
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	08003020 	.word	0x08003020
 80008fc:	200000c4 	.word	0x200000c4

08000900 <serial_print>:

void serial_print(char string[]) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serial_line, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff ff92 	bl	8000834 <strlen>
 8000910:	0003      	movs	r3, r0
 8000912:	b29a      	uxth	r2, r3
 8000914:	2301      	movs	r3, #1
 8000916:	425b      	negs	r3, r3
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <serial_print+0x28>)
 800091c:	f001 fdb2 	bl	8002484 <HAL_UART_Transmit>
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000c4 	.word	0x200000c4

0800092c <serial_println>:

void serial_println(char *string) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serial_line, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff ff7c 	bl	8000834 <strlen>
 800093c:	0003      	movs	r3, r0
 800093e:	b29a      	uxth	r2, r3
 8000940:	2301      	movs	r3, #1
 8000942:	425b      	negs	r3, r3
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <serial_println+0x48>)
 8000948:	f001 fd9c 	bl	8002484 <HAL_UART_Transmit>
  char* newline = ((current_line == WIFI) ? "\r\n" : "\r\f");
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <serial_println+0x4c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <serial_println+0x2c>
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <serial_println+0x50>)
 8000956:	e000      	b.n	800095a <serial_println+0x2e>
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <serial_println+0x54>)
 800095a:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&serial_line, (unsigned char*) newline, 2, HAL_MAX_DELAY);
 800095c:	2301      	movs	r3, #1
 800095e:	425b      	negs	r3, r3
 8000960:	68f9      	ldr	r1, [r7, #12]
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <serial_println+0x48>)
 8000964:	2202      	movs	r2, #2
 8000966:	f001 fd8d 	bl	8002484 <HAL_UART_Transmit>
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	200000c4 	.word	0x200000c4
 8000978:	200000c0 	.word	0x200000c0
 800097c:	08003028 	.word	0x08003028
 8000980:	0800302c 	.word	0x0800302c

08000984 <serial_putc>:

void serial_putc(char c) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	0002      	movs	r2, r0
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&serial_line, (unsigned char*) &c, 1, HAL_MAX_DELAY);
 8000990:	2301      	movs	r3, #1
 8000992:	425b      	negs	r3, r3
 8000994:	1df9      	adds	r1, r7, #7
 8000996:	4804      	ldr	r0, [pc, #16]	; (80009a8 <serial_putc+0x24>)
 8000998:	2201      	movs	r2, #1
 800099a:	f001 fd73 	bl	8002484 <HAL_UART_Transmit>
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	200000c4 	.word	0x200000c4

080009ac <serial_printf>:

/*!
    @brief a version of printf implmented from http://www.firmcodes.com/write-printf-function-c/
*/
void serial_printf(char format[], ...) { 
 80009ac:	b40f      	push	{r0, r1, r2, r3}
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
    char c;
	char *s; 
	
	//Module 1: Initializing Myprintf's arguments 
	va_list arg; 
	va_start(arg, format); 
 80009b4:	2324      	movs	r3, #36	; 0x24
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	603b      	str	r3, [r7, #0]
	
	for(traverse = format; *traverse != '\0'; traverse++) { 
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e08c      	b.n	8000ada <serial_printf+0x12e>
		while( (*traverse != '%') && (*traverse != '\0')) {
            if (*traverse == '\n') {
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b0a      	cmp	r3, #10
 80009c6:	d10a      	bne.n	80009de <serial_printf+0x32>
            	serial_print(((current_line == WIFI) ? "\r\n" : "\r\f"));
 80009c8:	4b4a      	ldr	r3, [pc, #296]	; (8000af4 <serial_printf+0x148>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <serial_printf+0x28>
 80009d0:	4b49      	ldr	r3, [pc, #292]	; (8000af8 <serial_printf+0x14c>)
 80009d2:	e000      	b.n	80009d6 <serial_printf+0x2a>
 80009d4:	4b49      	ldr	r3, [pc, #292]	; (8000afc <serial_printf+0x150>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff ff92 	bl	8000900 <serial_print>
 80009dc:	e004      	b.n	80009e8 <serial_printf+0x3c>
            }
            else {
            	serial_putc(*traverse);
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0018      	movs	r0, r3
 80009e4:	f7ff ffce 	bl	8000984 <serial_putc>
            }
			traverse++; 
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
		while( (*traverse != '%') && (*traverse != '\0')) {
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b25      	cmp	r3, #37	; 0x25
 80009f4:	d003      	beq.n	80009fe <serial_printf+0x52>
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1e0      	bne.n	80009c0 <serial_printf+0x14>
		} 

		if (*traverse == '\0') break;
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d100      	bne.n	8000a08 <serial_printf+0x5c>
 8000a06:	e06d      	b.n	8000ae4 <serial_printf+0x138>
		traverse++; 
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	617b      	str	r3, [r7, #20]
		
		//Module 2: Fetching and executing arguments
		switch(*traverse) { 
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b25      	cmp	r3, #37	; 0x25
 8000a14:	d059      	beq.n	8000aca <serial_printf+0x11e>
 8000a16:	db5d      	blt.n	8000ad4 <serial_printf+0x128>
 8000a18:	2b78      	cmp	r3, #120	; 0x78
 8000a1a:	dc5b      	bgt.n	8000ad4 <serial_printf+0x128>
 8000a1c:	2b63      	cmp	r3, #99	; 0x63
 8000a1e:	db59      	blt.n	8000ad4 <serial_printf+0x128>
 8000a20:	3b63      	subs	r3, #99	; 0x63
 8000a22:	2b15      	cmp	r3, #21
 8000a24:	d856      	bhi.n	8000ad4 <serial_printf+0x128>
 8000a26:	009a      	lsls	r2, r3, #2
 8000a28:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <serial_printf+0x154>)
 8000a2a:	18d3      	adds	r3, r2, r3
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	469f      	mov	pc, r3
			case 'c' : 
                c = va_arg(arg,int);		//Fetch char argument
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	1d1a      	adds	r2, r3, #4
 8000a34:	603a      	str	r2, [r7, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	701a      	strb	r2, [r3, #0]
				serial_putc(c);
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff ff9f 	bl	8000984 <serial_putc>
				break; 	
 8000a46:	e045      	b.n	8000ad4 <serial_printf+0x128>
			case 'd' : 
                signed_i = va_arg(arg,int); 		//Fetch Decimal/Integer argument
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	1d1a      	adds	r2, r3, #4
 8000a4c:	603a      	str	r2, [r7, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	613b      	str	r3, [r7, #16]
				if (signed_i < 0) {
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da06      	bge.n	8000a66 <serial_printf+0xba>
                    signed_i = -signed_i;
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	425b      	negs	r3, r3
 8000a5c:	613b      	str	r3, [r7, #16]
                    serial_print("-");
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <serial_printf+0x158>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff ff4d 	bl	8000900 <serial_print>
                } 
                serial_print(convert(signed_i, 10));
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	210a      	movs	r1, #10
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff feb6 	bl	80007dc <convert>
 8000a70:	0003      	movs	r3, r0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff ff44 	bl	8000900 <serial_print>
                break; 	
 8000a78:	e02c      	b.n	8000ad4 <serial_printf+0x128>
			case 'o':
                i = va_arg(arg,unsigned int); //Fetch Octal representation
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	1d1a      	adds	r2, r3, #4
 8000a7e:	603a      	str	r2, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 8));
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2108      	movs	r1, #8
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff fea7 	bl	80007dc <convert>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff ff35 	bl	8000900 <serial_print>
                break; 
 8000a96:	e01d      	b.n	8000ad4 <serial_printf+0x128>
			case 's': 
                s = va_arg(arg,char *); 		//Fetch string
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	1d1a      	adds	r2, r3, #4
 8000a9c:	603a      	str	r2, [r7, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60bb      	str	r3, [r7, #8]
                serial_print(s);
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff ff2b 	bl	8000900 <serial_print>
                break; 
 8000aaa:	e013      	b.n	8000ad4 <serial_printf+0x128>
			case 'x': 
                i = va_arg(arg,unsigned int); //Fetch Hexadecimal representation
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	1d1a      	adds	r2, r3, #4
 8000ab0:	603a      	str	r2, [r7, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 16));
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2110      	movs	r1, #16
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff fe8e 	bl	80007dc <convert>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff ff1c 	bl	8000900 <serial_print>
                break;
 8000ac8:	e004      	b.n	8000ad4 <serial_printf+0x128>

      case '%':
                serial_print("%");
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <serial_printf+0x15c>)
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff ff17 	bl	8000900 <serial_print>
                break;
 8000ad2:	46c0      	nop			; (mov r8, r8)
	for(traverse = format; *traverse != '\0'; traverse++) { 
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d185      	bne.n	80009ee <serial_printf+0x42>
		}	
	} 

	//Module 3: Closing argument list to necessary clean-up
	va_end(arg); 
} 
 8000ae2:	e000      	b.n	8000ae6 <serial_printf+0x13a>
		if (*traverse == '\0') break;
 8000ae4:	46c0      	nop			; (mov r8, r8)
} 
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b006      	add	sp, #24
 8000aec:	bc80      	pop	{r7}
 8000aee:	bc08      	pop	{r3}
 8000af0:	b004      	add	sp, #16
 8000af2:	4718      	bx	r3
 8000af4:	200000c0 	.word	0x200000c0
 8000af8:	08003028 	.word	0x08003028
 8000afc:	0800302c 	.word	0x0800302c
 8000b00:	08003038 	.word	0x08003038
 8000b04:	08003030 	.word	0x08003030
 8000b08:	08003034 	.word	0x08003034

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <HAL_MspInit+0x24>)
 8000b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x24>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <HAL_MspInit+0x24>)
 8000b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_MspInit+0x24>)
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	0549      	lsls	r1, r1, #21
 8000b26:	430a      	orrs	r2, r1
 8000b28:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f95c 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MX_USART1_UART_Init+0x5c>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b78:	22e1      	movs	r2, #225	; 0xe1
 8000b7a:	0252      	lsls	r2, r2, #9
 8000b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <MX_USART1_UART_Init+0x58>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 fc13 	bl	80023dc <HAL_UART_Init>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bba:	f7ff fe09 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000148 	.word	0x20000148
 8000bc8:	40013800 	.word	0x40013800

08000bcc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bd2:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <MX_USART2_UART_Init+0x5c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bd8:	2296      	movs	r2, #150	; 0x96
 8000bda:	0192      	lsls	r2, r2, #6
 8000bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x58>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fbe3 	bl	80023dc <HAL_UART_Init>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f7ff fdd9 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200001cc 	.word	0x200001cc
 8000c28:	40004400 	.word	0x40004400

08000c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b08b      	sub	sp, #44	; 0x2c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	2414      	movs	r4, #20
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f002 f90f 	bl	8002e62 <memset>
  if(uartHandle->Instance==USART1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12b      	bne.n	8000ca6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c4e:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	01c9      	lsls	r1, r1, #7
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c62:	2101      	movs	r1, #1
 8000c64:	430a      	orrs	r2, r1
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	22c0      	movs	r2, #192	; 0xc0
 8000c78:	00d2      	lsls	r2, r2, #3
 8000c7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	0021      	movs	r1, r4
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2202      	movs	r2, #2
 8000c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2204      	movs	r2, #4
 8000c94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	187a      	adds	r2, r7, r1
 8000c98:	23a0      	movs	r3, #160	; 0xa0
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	0011      	movs	r1, r2
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 f9ac 	bl	8000ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ca4:	e02e      	b.n	8000d04 <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <HAL_UART_MspInit+0xe8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d129      	bne.n	8000d04 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	0289      	lsls	r1, r1, #10
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cd6:	2114      	movs	r1, #20
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	220c      	movs	r2, #12
 8000cdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2203      	movs	r2, #3
 8000cee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	187a      	adds	r2, r7, r1
 8000cf8:	23a0      	movs	r3, #160	; 0xa0
 8000cfa:	05db      	lsls	r3, r3, #23
 8000cfc:	0011      	movs	r1, r2
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 f97c 	bl	8000ffc <HAL_GPIO_Init>
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b00b      	add	sp, #44	; 0x2c
 8000d0a:	bd90      	pop	{r4, r7, pc}
 8000d0c:	40013800 	.word	0x40013800
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40004400 	.word	0x40004400

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490e      	ldr	r1, [pc, #56]	; (8000d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0b      	ldr	r4, [pc, #44]	; (8000d64 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d42:	f7ff ff0e 	bl	8000b62 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f002 f85f 	bl	8002e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fc91 	bl	8000670 <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
  ldr   r0, =_estack
 8000d50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000d5c:	0800310c 	.word	0x0800310c
  ldr r2, =_sbss
 8000d60:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d64:	20000254 	.word	0x20000254

08000d68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC1_COMP_IRQHandler>
	...

08000d6c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x3c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_Init+0x3c>)
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	430a      	orrs	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f811 	bl	8000dac <HAL_InitTick>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e001      	b.n	8000d9a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d96:	f7ff feb9 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_InitTick+0x5c>)
 8000db6:	681c      	ldr	r4, [r3, #0]
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_InitTick+0x60>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	23fa      	movs	r3, #250	; 0xfa
 8000dc0:	0098      	lsls	r0, r3, #2
 8000dc2:	f7ff f9a1 	bl	8000108 <__udivsi3>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	0019      	movs	r1, r3
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f7ff f99c 	bl	8000108 <__udivsi3>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 f905 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e00f      	b.n	8000e00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d80b      	bhi.n	8000dfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	2301      	movs	r3, #1
 8000dea:	425b      	negs	r3, r3
 8000dec:	2200      	movs	r2, #0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 f8e2 	bl	8000fb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_InitTick+0x64>)
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b003      	add	sp, #12
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	20000018 	.word	0x20000018
 8000e0c:	20000020 	.word	0x20000020
 8000e10:	2000001c 	.word	0x2000001c

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x1c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x20>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	18d2      	adds	r2, r2, r3
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_IncTick+0x20>)
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000020 	.word	0x20000020
 8000e34:	20000250 	.word	0x20000250

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <HAL_GetTick+0x10>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000250 	.word	0x20000250

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff fff0 	bl	8000e38 <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	189b      	adds	r3, r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	f7ff ffe0 	bl	8000e38 <HAL_GetTick>
 8000e78:	0002      	movs	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b004      	add	sp, #16
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	20000020 	.word	0x20000020

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ea8:	d828      	bhi.n	8000efc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <__NVIC_SetPriority+0xd4>)
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	33c0      	adds	r3, #192	; 0xc0
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	589b      	ldr	r3, [r3, r2]
 8000eba:	1dfa      	adds	r2, r7, #7
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	00d2      	lsls	r2, r2, #3
 8000ec6:	21ff      	movs	r1, #255	; 0xff
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	43d2      	mvns	r2, r2
 8000ece:	401a      	ands	r2, r3
 8000ed0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	019b      	lsls	r3, r3, #6
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	401a      	ands	r2, r3
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	0018      	movs	r0, r3
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	4003      	ands	r3, r0
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee8:	481f      	ldr	r0, [pc, #124]	; (8000f68 <__NVIC_SetPriority+0xd4>)
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	33c0      	adds	r3, #192	; 0xc0
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000efa:	e031      	b.n	8000f60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efc:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <__NVIC_SetPriority+0xd8>)
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	0019      	movs	r1, r3
 8000f04:	230f      	movs	r3, #15
 8000f06:	400b      	ands	r3, r1
 8000f08:	3b08      	subs	r3, #8
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3306      	adds	r3, #6
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	18d3      	adds	r3, r2, r3
 8000f12:	3304      	adds	r3, #4
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1dfa      	adds	r2, r7, #7
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	400a      	ands	r2, r1
 8000f20:	00d2      	lsls	r2, r2, #3
 8000f22:	21ff      	movs	r1, #255	; 0xff
 8000f24:	4091      	lsls	r1, r2
 8000f26:	000a      	movs	r2, r1
 8000f28:	43d2      	mvns	r2, r2
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	019b      	lsls	r3, r3, #6
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	401a      	ands	r2, r3
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	4003      	ands	r3, r0
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <__NVIC_SetPriority+0xd8>)
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	001c      	movs	r4, r3
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	4023      	ands	r3, r4
 8000f50:	3b08      	subs	r3, #8
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	430a      	orrs	r2, r1
 8000f56:	3306      	adds	r3, #6
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	18c3      	adds	r3, r0, r3
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	601a      	str	r2, [r3, #0]
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b003      	add	sp, #12
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	045b      	lsls	r3, r3, #17
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d301      	bcc.n	8000f88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f84:	2301      	movs	r3, #1
 8000f86:	e010      	b.n	8000faa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <SysTick_Config+0x44>)
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	3a01      	subs	r2, #1
 8000f8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f90:	2301      	movs	r3, #1
 8000f92:	425b      	negs	r3, r3
 8000f94:	2103      	movs	r1, #3
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff ff7c 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SysTick_Config+0x44>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SysTick_Config+0x44>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	1c02      	adds	r2, r0, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff ff5d 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b004      	add	sp, #16
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	0018      	movs	r0, r3
 8000fee:	f7ff ffbf 	bl	8000f70 <SysTick_Config>
 8000ff2:	0003      	movs	r3, r0
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001012:	e14f      	b.n	80012b4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <HAL_GPIO_Init+0x30>
 800102a:	e140      	b.n	80012ae <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d00b      	beq.n	800104c <HAL_GPIO_Init+0x50>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d007      	beq.n	800104c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001040:	2b11      	cmp	r3, #17
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b12      	cmp	r3, #18
 800104a:	d130      	bne.n	80010ae <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	409a      	lsls	r2, r3
 800105a:	0013      	movs	r3, r2
 800105c:	43da      	mvns	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001082:	2201      	movs	r2, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	2201      	movs	r2, #1
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0xf2>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d123      	bne.n	8001136 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	58d3      	ldr	r3, [r2, r3]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2207      	movs	r2, #7
 8001100:	4013      	ands	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2107      	movs	r1, #7
 800111a:	400b      	ands	r3, r1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	6939      	ldr	r1, [r7, #16]
 8001134:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	43da      	mvns	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	401a      	ands	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	055b      	lsls	r3, r3, #21
 8001172:	4013      	ands	r3, r2
 8001174:	d100      	bne.n	8001178 <HAL_GPIO_Init+0x17c>
 8001176:	e09a      	b.n	80012ae <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800117a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800117e:	2101      	movs	r1, #1
 8001180:	430a      	orrs	r2, r1
 8001182:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_GPIO_Init+0x2d4>)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	589b      	ldr	r3, [r3, r2]
 8001190:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2203      	movs	r2, #3
 8001196:	4013      	ands	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	409a      	lsls	r2, r3
 800119e:	0013      	movs	r3, r2
 80011a0:	43da      	mvns	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	23a0      	movs	r3, #160	; 0xa0
 80011ac:	05db      	lsls	r3, r3, #23
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x1ea>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a47      	ldr	r2, [pc, #284]	; (80012d4 <HAL_GPIO_Init+0x2d8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x1e6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a46      	ldr	r2, [pc, #280]	; (80012d8 <HAL_GPIO_Init+0x2dc>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x1e2>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a45      	ldr	r2, [pc, #276]	; (80012dc <HAL_GPIO_Init+0x2e0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x1de>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a44      	ldr	r2, [pc, #272]	; (80012e0 <HAL_GPIO_Init+0x2e4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x1da>
 80011d2:	2305      	movs	r3, #5
 80011d4:	e008      	b.n	80011e8 <HAL_GPIO_Init+0x1ec>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x1ec>
 80011da:	2303      	movs	r3, #3
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x1ec>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x1ec>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x1ec>
 80011e6:	2300      	movs	r3, #0
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	2103      	movs	r1, #3
 80011ec:	400a      	ands	r2, r1
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f8:	4935      	ldr	r1, [pc, #212]	; (80012d0 <HAL_GPIO_Init+0x2d4>)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	025b      	lsls	r3, r3, #9
 800121e:	4013      	ands	r3, r2
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	029b      	lsls	r3, r3, #10
 8001248:	4013      	ands	r3, r2
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	035b      	lsls	r3, r3, #13
 8001272:	4013      	ands	r3, r2
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	039b      	lsls	r3, r3, #14
 800129c:	4013      	ands	r3, r2
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	40da      	lsrs	r2, r3
 80012bc:	1e13      	subs	r3, r2, #0
 80012be:	d000      	beq.n	80012c2 <HAL_GPIO_Init+0x2c6>
 80012c0:	e6a8      	b.n	8001014 <HAL_GPIO_Init+0x18>
  }
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b006      	add	sp, #24
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	50000400 	.word	0x50000400
 80012d8:	50000800 	.word	0x50000800
 80012dc:	50000c00 	.word	0x50000c00
 80012e0:	50001c00 	.word	0x50001c00
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e082      	b.n	8001400 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2241      	movs	r2, #65	; 0x41
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d107      	bne.n	8001316 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2240      	movs	r2, #64	; 0x40
 800130a:	2100      	movs	r1, #0
 800130c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff f967 	bl	80005e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2241      	movs	r2, #65	; 0x41
 800131a:	2124      	movs	r1, #36	; 0x24
 800131c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2101      	movs	r1, #1
 800132a:	438a      	bics	r2, r1
 800132c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4934      	ldr	r1, [pc, #208]	; (8001408 <HAL_I2C_Init+0x120>)
 8001338:	400a      	ands	r2, r1
 800133a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4931      	ldr	r1, [pc, #196]	; (800140c <HAL_I2C_Init+0x124>)
 8001348:	400a      	ands	r2, r1
 800134a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d108      	bne.n	8001366 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	0209      	lsls	r1, r1, #8
 8001360:	430a      	orrs	r2, r1
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	e007      	b.n	8001376 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2184      	movs	r1, #132	; 0x84
 8001370:	0209      	lsls	r1, r1, #8
 8001372:	430a      	orrs	r2, r1
 8001374:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d104      	bne.n	8001388 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	491f      	ldr	r1, [pc, #124]	; (8001410 <HAL_I2C_Init+0x128>)
 8001394:	430a      	orrs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	491a      	ldr	r1, [pc, #104]	; (800140c <HAL_I2C_Init+0x124>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	0011      	movs	r1, r2
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	021a      	lsls	r2, r3, #8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69d9      	ldr	r1, [r3, #28]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2241      	movs	r2, #65	; 0x41
 80013ec:	2120      	movs	r1, #32
 80013ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2242      	movs	r2, #66	; 0x42
 80013fa:	2100      	movs	r1, #0
 80013fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}
 8001408:	f0ffffff 	.word	0xf0ffffff
 800140c:	ffff7fff 	.word	0xffff7fff
 8001410:	02008000 	.word	0x02008000

08001414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2241      	movs	r2, #65	; 0x41
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b20      	cmp	r3, #32
 8001428:	d138      	bne.n	800149c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2240      	movs	r2, #64	; 0x40
 800142e:	5c9b      	ldrb	r3, [r3, r2]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001434:	2302      	movs	r3, #2
 8001436:	e032      	b.n	800149e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2240      	movs	r2, #64	; 0x40
 800143c:	2101      	movs	r1, #1
 800143e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2241      	movs	r2, #65	; 0x41
 8001444:	2124      	movs	r1, #36	; 0x24
 8001446:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2101      	movs	r1, #1
 8001454:	438a      	bics	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4911      	ldr	r1, [pc, #68]	; (80014a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2241      	movs	r2, #65	; 0x41
 800148c:	2120      	movs	r1, #32
 800148e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2240      	movs	r2, #64	; 0x40
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	e000      	b.n	800149e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800149c:	2302      	movs	r3, #2
  }
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	ffffefff 	.word	0xffffefff

080014ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2241      	movs	r2, #65	; 0x41
 80014ba:	5c9b      	ldrb	r3, [r3, r2]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b20      	cmp	r3, #32
 80014c0:	d139      	bne.n	8001536 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2240      	movs	r2, #64	; 0x40
 80014c6:	5c9b      	ldrb	r3, [r3, r2]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e033      	b.n	8001538 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2240      	movs	r2, #64	; 0x40
 80014d4:	2101      	movs	r1, #1
 80014d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2241      	movs	r2, #65	; 0x41
 80014dc:	2124      	movs	r1, #36	; 0x24
 80014de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2241      	movs	r2, #65	; 0x41
 8001526:	2120      	movs	r1, #32
 8001528:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2240      	movs	r2, #64	; 0x40
 800152e:	2100      	movs	r1, #0
 8001530:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001536:	2302      	movs	r3, #2
  }
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b004      	add	sp, #16
 800153e:	bd80      	pop	{r7, pc}
 8001540:	fffff0ff 	.word	0xfffff0ff

08001544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	f000 fbaf 	bl	8001cb6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001558:	4bcf      	ldr	r3, [pc, #828]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	220c      	movs	r2, #12
 800155e:	4013      	ands	r3, r2
 8001560:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001562:	4bcd      	ldr	r3, [pc, #820]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	025b      	lsls	r3, r3, #9
 800156a:	4013      	ands	r3, r2
 800156c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	4013      	ands	r3, r2
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x36>
 8001578:	e07e      	b.n	8001678 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	2b08      	cmp	r3, #8
 800157e:	d007      	beq.n	8001590 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	2b0c      	cmp	r3, #12
 8001584:	d112      	bne.n	80015ac <HAL_RCC_OscConfig+0x68>
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	025b      	lsls	r3, r3, #9
 800158c:	429a      	cmp	r2, r3
 800158e:	d10d      	bne.n	80015ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	4bc1      	ldr	r3, [pc, #772]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	4013      	ands	r3, r2
 800159a:	d100      	bne.n	800159e <HAL_RCC_OscConfig+0x5a>
 800159c:	e06b      	b.n	8001676 <HAL_RCC_OscConfig+0x132>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d167      	bne.n	8001676 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f000 fb85 	bl	8001cb6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_OscConfig+0x84>
 80015b8:	4bb7      	ldr	r3, [pc, #732]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4bb6      	ldr	r3, [pc, #728]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	0249      	lsls	r1, r1, #9
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e027      	b.n	8001618 <HAL_RCC_OscConfig+0xd4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	23a0      	movs	r3, #160	; 0xa0
 80015ce:	02db      	lsls	r3, r3, #11
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d10e      	bne.n	80015f2 <HAL_RCC_OscConfig+0xae>
 80015d4:	4bb0      	ldr	r3, [pc, #704]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4baf      	ldr	r3, [pc, #700]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	02c9      	lsls	r1, r1, #11
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	4bad      	ldr	r3, [pc, #692]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4bac      	ldr	r3, [pc, #688]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0249      	lsls	r1, r1, #9
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e012      	b.n	8001618 <HAL_RCC_OscConfig+0xd4>
 80015f2:	4ba9      	ldr	r3, [pc, #676]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4ba8      	ldr	r3, [pc, #672]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80015f8:	49a8      	ldr	r1, [pc, #672]	; (800189c <HAL_RCC_OscConfig+0x358>)
 80015fa:	400a      	ands	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	4ba6      	ldr	r3, [pc, #664]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4ba2      	ldr	r3, [pc, #648]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4ba1      	ldr	r3, [pc, #644]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001612:	49a3      	ldr	r1, [pc, #652]	; (80018a0 <HAL_RCC_OscConfig+0x35c>)
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d015      	beq.n	800164c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fc0a 	bl	8000e38 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001628:	e009      	b.n	800163e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800162a:	f7ff fc05 	bl	8000e38 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b64      	cmp	r3, #100	; 0x64
 8001636:	d902      	bls.n	800163e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	f000 fb3c 	bl	8001cb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800163e:	4b96      	ldr	r3, [pc, #600]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	029b      	lsls	r3, r3, #10
 8001646:	4013      	ands	r3, r2
 8001648:	d0ef      	beq.n	800162a <HAL_RCC_OscConfig+0xe6>
 800164a:	e015      	b.n	8001678 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fbf4 	bl	8000e38 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001656:	f7ff fbef 	bl	8000e38 <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b64      	cmp	r3, #100	; 0x64
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e326      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001668:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	029b      	lsls	r3, r3, #10
 8001670:	4013      	ands	r3, r2
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x112>
 8001674:	e000      	b.n	8001678 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001676:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2202      	movs	r2, #2
 800167e:	4013      	ands	r3, r2
 8001680:	d100      	bne.n	8001684 <HAL_RCC_OscConfig+0x140>
 8001682:	e08b      	b.n	800179c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d005      	beq.n	800169c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	2b0c      	cmp	r3, #12
 8001694:	d13e      	bne.n	8001714 <HAL_RCC_OscConfig+0x1d0>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d13b      	bne.n	8001714 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800169c:	4b7e      	ldr	r3, [pc, #504]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2204      	movs	r2, #4
 80016a2:	4013      	ands	r3, r2
 80016a4:	d004      	beq.n	80016b0 <HAL_RCC_OscConfig+0x16c>
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e302      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b79      	ldr	r3, [pc, #484]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a7b      	ldr	r2, [pc, #492]	; (80018a4 <HAL_RCC_OscConfig+0x360>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	021a      	lsls	r2, r3, #8
 80016c0:	4b75      	ldr	r3, [pc, #468]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80016c2:	430a      	orrs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016c6:	4b74      	ldr	r3, [pc, #464]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2209      	movs	r2, #9
 80016cc:	4393      	bics	r3, r2
 80016ce:	0019      	movs	r1, r3
 80016d0:	4b71      	ldr	r3, [pc, #452]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d8:	f000 fc40 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 80016dc:	0001      	movs	r1, r0
 80016de:	4b6e      	ldr	r3, [pc, #440]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	220f      	movs	r2, #15
 80016e6:	4013      	ands	r3, r2
 80016e8:	4a6f      	ldr	r2, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x364>)
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	000a      	movs	r2, r1
 80016ee:	40da      	lsrs	r2, r3
 80016f0:	4b6e      	ldr	r3, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x368>)
 80016f2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80016f4:	4b6e      	ldr	r3, [pc, #440]	; (80018b0 <HAL_RCC_OscConfig+0x36c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2513      	movs	r5, #19
 80016fa:	197c      	adds	r4, r7, r5
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff fb55 	bl	8000dac <HAL_InitTick>
 8001702:	0003      	movs	r3, r0
 8001704:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001706:	197b      	adds	r3, r7, r5
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d046      	beq.n	800179c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800170e:	197b      	adds	r3, r7, r5
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	e2d0      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d027      	beq.n	800176a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2209      	movs	r2, #9
 8001720:	4393      	bics	r3, r2
 8001722:	0019      	movs	r1, r3
 8001724:	4b5c      	ldr	r3, [pc, #368]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fb84 	bl	8000e38 <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fb7f 	bl	8000e38 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e2b6      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001748:	4b53      	ldr	r3, [pc, #332]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2204      	movs	r2, #4
 800174e:	4013      	ands	r3, r2
 8001750:	d0f1      	beq.n	8001736 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b51      	ldr	r3, [pc, #324]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4a53      	ldr	r2, [pc, #332]	; (80018a4 <HAL_RCC_OscConfig+0x360>)
 8001758:	4013      	ands	r3, r2
 800175a:	0019      	movs	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	021a      	lsls	r2, r3, #8
 8001762:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	e018      	b.n	800179c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001770:	2101      	movs	r1, #1
 8001772:	438a      	bics	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fb5f 	bl	8000e38 <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff fb5a 	bl	8000e38 <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e291      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2204      	movs	r2, #4
 8001798:	4013      	ands	r3, r2
 800179a:	d1f1      	bne.n	8001780 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2210      	movs	r2, #16
 80017a2:	4013      	ands	r3, r2
 80017a4:	d100      	bne.n	80017a8 <HAL_RCC_OscConfig+0x264>
 80017a6:	e0a1      	b.n	80018ec <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d140      	bne.n	8001830 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ae:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d005      	beq.n	80017c6 <HAL_RCC_OscConfig+0x282>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e277      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4a3a      	ldr	r2, [pc, #232]	; (80018b4 <HAL_RCC_OscConfig+0x370>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80017d6:	430a      	orrs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	0a19      	lsrs	r1, r3, #8
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	061a      	lsls	r2, r3, #24
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80017ea:	430a      	orrs	r2, r1
 80017ec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	0b5b      	lsrs	r3, r3, #13
 80017f4:	3301      	adds	r3, #1
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	0212      	lsls	r2, r2, #8
 80017fa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	210f      	movs	r1, #15
 8001804:	400b      	ands	r3, r1
 8001806:	4928      	ldr	r1, [pc, #160]	; (80018a8 <HAL_RCC_OscConfig+0x364>)
 8001808:	5ccb      	ldrb	r3, [r1, r3]
 800180a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x368>)
 800180e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x36c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2513      	movs	r5, #19
 8001816:	197c      	adds	r4, r7, r5
 8001818:	0018      	movs	r0, r3
 800181a:	f7ff fac7 	bl	8000dac <HAL_InitTick>
 800181e:	0003      	movs	r3, r0
 8001820:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001822:	197b      	adds	r3, r7, r5
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d060      	beq.n	80018ec <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800182a:	197b      	adds	r3, r7, r5
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	e242      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d03f      	beq.n	80018b8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	0049      	lsls	r1, r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff faf7 	bl	8000e38 <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001850:	f7ff faf2 	bl	8000e38 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e229      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4013      	ands	r3, r2
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <HAL_RCC_OscConfig+0x370>)
 8001874:	4013      	ands	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	0a19      	lsrs	r1, r3, #8
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	061a      	lsls	r2, r3, #24
 8001890:	4b01      	ldr	r3, [pc, #4]	; (8001898 <HAL_RCC_OscConfig+0x354>)
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	e029      	b.n	80018ec <HAL_RCC_OscConfig+0x3a8>
 8001898:	40021000 	.word	0x40021000
 800189c:	fffeffff 	.word	0xfffeffff
 80018a0:	fffbffff 	.word	0xfffbffff
 80018a4:	ffffe0ff 	.word	0xffffe0ff
 80018a8:	08003090 	.word	0x08003090
 80018ac:	20000018 	.word	0x20000018
 80018b0:	2000001c 	.word	0x2000001c
 80018b4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018b8:	4bbd      	ldr	r3, [pc, #756]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4bbc      	ldr	r3, [pc, #752]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 80018be:	49bd      	ldr	r1, [pc, #756]	; (8001bb4 <HAL_RCC_OscConfig+0x670>)
 80018c0:	400a      	ands	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fab8 	bl	8000e38 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ce:	f7ff fab3 	bl	8000e38 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1ea      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018e0:	4bb3      	ldr	r3, [pc, #716]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2208      	movs	r2, #8
 80018f2:	4013      	ands	r3, r2
 80018f4:	d036      	beq.n	8001964 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d019      	beq.n	8001932 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4bac      	ldr	r3, [pc, #688]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001902:	4bab      	ldr	r3, [pc, #684]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001904:	2101      	movs	r1, #1
 8001906:	430a      	orrs	r2, r1
 8001908:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190a:	f7ff fa95 	bl	8000e38 <HAL_GetTick>
 800190e:	0003      	movs	r3, r0
 8001910:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff fa90 	bl	8000e38 <HAL_GetTick>
 8001918:	0002      	movs	r2, r0
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1c7      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001926:	4ba2      	ldr	r3, [pc, #648]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192a:	2202      	movs	r2, #2
 800192c:	4013      	ands	r3, r2
 800192e:	d0f1      	beq.n	8001914 <HAL_RCC_OscConfig+0x3d0>
 8001930:	e018      	b.n	8001964 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001932:	4b9f      	ldr	r3, [pc, #636]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001934:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001936:	4b9e      	ldr	r3, [pc, #632]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001938:	2101      	movs	r1, #1
 800193a:	438a      	bics	r2, r1
 800193c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff fa7b 	bl	8000e38 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001948:	f7ff fa76 	bl	8000e38 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e1ad      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800195a:	4b95      	ldr	r3, [pc, #596]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 800195c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	d1f1      	bne.n	8001948 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2204      	movs	r2, #4
 800196a:	4013      	ands	r3, r2
 800196c:	d100      	bne.n	8001970 <HAL_RCC_OscConfig+0x42c>
 800196e:	e0ae      	b.n	8001ace <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001970:	2027      	movs	r0, #39	; 0x27
 8001972:	183b      	adds	r3, r7, r0
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001978:	4b8d      	ldr	r3, [pc, #564]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 800197a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	055b      	lsls	r3, r3, #21
 8001980:	4013      	ands	r3, r2
 8001982:	d109      	bne.n	8001998 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	4b8a      	ldr	r3, [pc, #552]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001988:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	0549      	lsls	r1, r1, #21
 800198e:	430a      	orrs	r2, r1
 8001990:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001992:	183b      	adds	r3, r7, r0
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <HAL_RCC_OscConfig+0x674>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	d11a      	bne.n	80019da <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a4:	4b84      	ldr	r3, [pc, #528]	; (8001bb8 <HAL_RCC_OscConfig+0x674>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b83      	ldr	r3, [pc, #524]	; (8001bb8 <HAL_RCC_OscConfig+0x674>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0049      	lsls	r1, r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fa41 	bl	8000e38 <HAL_GetTick>
 80019b6:	0003      	movs	r3, r0
 80019b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019bc:	f7ff fa3c 	bl	8000e38 <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e173      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ce:	4b7a      	ldr	r3, [pc, #488]	; (8001bb8 <HAL_RCC_OscConfig+0x674>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4013      	ands	r3, r2
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_OscConfig+0x4b2>
 80019e6:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 80019e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ea:	4b71      	ldr	r3, [pc, #452]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	0049      	lsls	r1, r1, #1
 80019f0:	430a      	orrs	r2, r1
 80019f2:	651a      	str	r2, [r3, #80]	; 0x50
 80019f4:	e031      	b.n	8001a5a <HAL_RCC_OscConfig+0x516>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4d4>
 80019fe:	4b6c      	ldr	r3, [pc, #432]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a02:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a04:	496b      	ldr	r1, [pc, #428]	; (8001bb4 <HAL_RCC_OscConfig+0x670>)
 8001a06:	400a      	ands	r2, r1
 8001a08:	651a      	str	r2, [r3, #80]	; 0x50
 8001a0a:	4b69      	ldr	r3, [pc, #420]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a0e:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a10:	496a      	ldr	r1, [pc, #424]	; (8001bbc <HAL_RCC_OscConfig+0x678>)
 8001a12:	400a      	ands	r2, r1
 8001a14:	651a      	str	r2, [r3, #80]	; 0x50
 8001a16:	e020      	b.n	8001a5a <HAL_RCC_OscConfig+0x516>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	23a0      	movs	r3, #160	; 0xa0
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d10e      	bne.n	8001a42 <HAL_RCC_OscConfig+0x4fe>
 8001a24:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a28:	4b61      	ldr	r3, [pc, #388]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	00c9      	lsls	r1, r1, #3
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	651a      	str	r2, [r3, #80]	; 0x50
 8001a32:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a36:	4b5e      	ldr	r3, [pc, #376]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	0049      	lsls	r1, r1, #1
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	651a      	str	r2, [r3, #80]	; 0x50
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x516>
 8001a42:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a48:	495a      	ldr	r1, [pc, #360]	; (8001bb4 <HAL_RCC_OscConfig+0x670>)
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a4e:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a52:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a54:	4959      	ldr	r1, [pc, #356]	; (8001bbc <HAL_RCC_OscConfig+0x678>)
 8001a56:	400a      	ands	r2, r1
 8001a58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff f9e9 	bl	8000e38 <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a6a:	e009      	b.n	8001a80 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f9e4 	bl	8000e38 <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e11a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a80:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001a82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d0ef      	beq.n	8001a6c <HAL_RCC_OscConfig+0x528>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f9d3 	bl	8000e38 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a96:	e009      	b.n	8001aac <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff f9ce 	bl	8000e38 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <HAL_RCC_OscConfig+0x67c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e104      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aac:	4b40      	ldr	r3, [pc, #256]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d1ef      	bne.n	8001a98 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ab8:	2327      	movs	r3, #39	; 0x27
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d105      	bne.n	8001ace <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001ac8:	493e      	ldr	r1, [pc, #248]	; (8001bc4 <HAL_RCC_OscConfig+0x680>)
 8001aca:	400a      	ands	r2, r1
 8001acc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d049      	beq.n	8001b6c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d026      	beq.n	8001b2e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	430a      	orrs	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_RCC_OscConfig+0x684>)
 8001afa:	6a1a      	ldr	r2, [r3, #32]
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <HAL_RCC_OscConfig+0x684>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	0189      	lsls	r1, r1, #6
 8001b02:	430a      	orrs	r2, r1
 8001b04:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7ff f997 	bl	8000e38 <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b10:	f7ff f992 	bl	8000e38 <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0c9      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d0f1      	beq.n	8001b10 <HAL_RCC_OscConfig+0x5cc>
 8001b2c:	e01e      	b.n	8001b6c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	438a      	bics	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <HAL_RCC_OscConfig+0x684>)
 8001b3c:	6a1a      	ldr	r2, [r3, #32]
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_RCC_OscConfig+0x684>)
 8001b40:	4922      	ldr	r1, [pc, #136]	; (8001bcc <HAL_RCC_OscConfig+0x688>)
 8001b42:	400a      	ands	r2, r1
 8001b44:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff f977 	bl	8000e38 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b50:	f7ff f972 	bl	8000e38 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e0a9      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d1f1      	bne.n	8001b50 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <HAL_RCC_OscConfig+0x632>
 8001b74:	e09e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d100      	bne.n	8001b7e <HAL_RCC_OscConfig+0x63a>
 8001b7c:	e077      	b.n	8001c6e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d158      	bne.n	8001c38 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_OscConfig+0x66c>)
 8001b8c:	4910      	ldr	r1, [pc, #64]	; (8001bd0 <HAL_RCC_OscConfig+0x68c>)
 8001b8e:	400a      	ands	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff f951 	bl	8000e38 <HAL_GetTick>
 8001b96:	0003      	movs	r3, r0
 8001b98:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff f94c 	bl	8000e38 <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d914      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e083      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	fffffeff 	.word	0xfffffeff
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	fffffbff 	.word	0xfffffbff
 8001bc0:	00001388 	.word	0x00001388
 8001bc4:	efffffff 	.word	0xefffffff
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	ffffdfff 	.word	0xffffdfff
 8001bd0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	049b      	lsls	r3, r3, #18
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d1dd      	bne.n	8001b9c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a37      	ldr	r2, [pc, #220]	; (8001cc4 <HAL_RCC_OscConfig+0x780>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	0449      	lsls	r1, r1, #17
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f913 	bl	8000e38 <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f90e 	bl	8000e38 <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e045      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	049b      	lsls	r3, r3, #18
 8001c32:	4013      	ands	r3, r2
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x6d4>
 8001c36:	e03d      	b.n	8001cb4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001c3e:	4922      	ldr	r1, [pc, #136]	; (8001cc8 <HAL_RCC_OscConfig+0x784>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff f8f8 	bl	8000e38 <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff f8f3 	bl	8000e38 <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e02a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	049b      	lsls	r3, r3, #18
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x70a>
 8001c6c:	e022      	b.n	8001cb4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e01d      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	025b      	lsls	r3, r3, #9
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d10f      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	23f0      	movs	r3, #240	; 0xf0
 8001c94:	039b      	lsls	r3, r3, #14
 8001c96:	401a      	ands	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	23c0      	movs	r3, #192	; 0xc0
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b00a      	add	sp, #40	; 0x28
 8001cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	ff02ffff 	.word	0xff02ffff
 8001cc8:	feffffff 	.word	0xfeffffff

08001ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b5b0      	push	{r4, r5, r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e128      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b96      	ldr	r3, [pc, #600]	; (8001f3c <HAL_RCC_ClockConfig+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d91e      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b93      	ldr	r3, [pc, #588]	; (8001f3c <HAL_RCC_ClockConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	4b90      	ldr	r3, [pc, #576]	; (8001f3c <HAL_RCC_ClockConfig+0x270>)
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d00:	f7ff f89a 	bl	8000e38 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7ff f895 	bl	8000e38 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a8a      	ldr	r2, [pc, #552]	; (8001f40 <HAL_RCC_ClockConfig+0x274>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e109      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b87      	ldr	r3, [pc, #540]	; (8001f3c <HAL_RCC_ClockConfig+0x270>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2201      	movs	r2, #1
 8001d24:	4013      	ands	r3, r2
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2202      	movs	r2, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d36:	4b83      	ldr	r3, [pc, #524]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	22f0      	movs	r2, #240	; 0xf0
 8001d3c:	4393      	bics	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	4b7f      	ldr	r3, [pc, #508]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x8a>
 8001d54:	e089      	b.n	8001e6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d5e:	4b79      	ldr	r3, [pc, #484]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	029b      	lsls	r3, r3, #10
 8001d66:	4013      	ands	r3, r2
 8001d68:	d120      	bne.n	8001dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0e1      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d76:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	049b      	lsls	r3, r3, #18
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d114      	bne.n	8001dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0d5      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d8e:	4b6d      	ldr	r3, [pc, #436]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2204      	movs	r2, #4
 8001d94:	4013      	ands	r3, r2
 8001d96:	d109      	bne.n	8001dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0ca      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d9c:	4b69      	ldr	r3, [pc, #420]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0c2      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dac:	4b65      	ldr	r3, [pc, #404]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2203      	movs	r2, #3
 8001db2:	4393      	bics	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4b62      	ldr	r3, [pc, #392]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f83a 	bl	8000e38 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d111      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd0:	e009      	b.n	8001de6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd2:	f7ff f831 	bl	8000e38 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <HAL_RCC_ClockConfig+0x274>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0a5      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de6:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	220c      	movs	r2, #12
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d1ef      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x106>
 8001df2:	e03a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d111      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dfc:	e009      	b.n	8001e12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfe:	f7ff f81b 	bl	8000e38 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4a4d      	ldr	r2, [pc, #308]	; (8001f40 <HAL_RCC_ClockConfig+0x274>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e08f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e12:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	220c      	movs	r2, #12
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d1ef      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x132>
 8001e1e:	e024      	b.n	8001e6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d11b      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e28:	e009      	b.n	8001e3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2a:	f7ff f805 	bl	8000e38 <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a42      	ldr	r2, [pc, #264]	; (8001f40 <HAL_RCC_ClockConfig+0x274>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e079      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	220c      	movs	r2, #12
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d1ef      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x15e>
 8001e4a:	e00e      	b.n	8001e6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7fe fff4 	bl	8000e38 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	4a3a      	ldr	r2, [pc, #232]	; (8001f40 <HAL_RCC_ClockConfig+0x274>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e068      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	220c      	movs	r2, #12
 8001e66:	4013      	ands	r3, r2
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <HAL_RCC_ClockConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d21e      	bcs.n	8001eb6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_ClockConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4393      	bics	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_RCC_ClockConfig+0x270>)
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e8a:	f7fe ffd5 	bl	8000e38 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	e009      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e94:	f7fe ffd0 	bl	8000e38 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <HAL_RCC_ClockConfig+0x274>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e044      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_ClockConfig+0x270>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d1ee      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d009      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_RCC_ClockConfig+0x27c>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	4013      	ands	r3, r2
 8001edc:	d00a      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <HAL_RCC_ClockConfig+0x280>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	00da      	lsls	r2, r3, #3
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef4:	f000 f832 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001ef8:	0001      	movs	r1, r0
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_RCC_ClockConfig+0x278>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	220f      	movs	r2, #15
 8001f02:	4013      	ands	r3, r2
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <HAL_RCC_ClockConfig+0x284>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	000a      	movs	r2, r1
 8001f0a:	40da      	lsrs	r2, r3
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_RCC_ClockConfig+0x288>)
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_RCC_ClockConfig+0x28c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	250b      	movs	r5, #11
 8001f16:	197c      	adds	r4, r7, r5
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7fe ff47 	bl	8000dac <HAL_InitTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f22:	197b      	adds	r3, r7, r5
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f2a:	197b      	adds	r3, r7, r5
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b004      	add	sp, #16
 8001f38:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	00001388 	.word	0x00001388
 8001f44:	40021000 	.word	0x40021000
 8001f48:	fffff8ff 	.word	0xfffff8ff
 8001f4c:	ffffc7ff 	.word	0xffffc7ff
 8001f50:	08003090 	.word	0x08003090
 8001f54:	20000018 	.word	0x20000018
 8001f58:	2000001c 	.word	0x2000001c

08001f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b08e      	sub	sp, #56	; 0x38
 8001f60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f62:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d014      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x40>
 8001f72:	d900      	bls.n	8001f76 <HAL_RCC_GetSysClockFreq+0x1a>
 8001f74:	e07b      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x112>
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x24>
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d00b      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f7e:	e076      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f80:	4b44      	ldr	r3, [pc, #272]	; (8002094 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2210      	movs	r2, #16
 8001f86:	4013      	ands	r3, r2
 8001f88:	d002      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f8a:	4b43      	ldr	r3, [pc, #268]	; (8002098 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f8e:	e07c      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001f90:	4b42      	ldr	r3, [pc, #264]	; (800209c <HAL_RCC_GetSysClockFreq+0x140>)
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f94:	e079      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f96:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f9a:	e076      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9e:	0c9a      	lsrs	r2, r3, #18
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001fa6:	5c9b      	ldrb	r3, [r3, r2]
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fac:	0d9a      	lsrs	r2, r3, #22
 8001fae:	2303      	movs	r3, #3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb6:	4b37      	ldr	r3, [pc, #220]	; (8002094 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	025b      	lsls	r3, r3, #9
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d01a      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	4a35      	ldr	r2, [pc, #212]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	69b8      	ldr	r0, [r7, #24]
 8001fd0:	69f9      	ldr	r1, [r7, #28]
 8001fd2:	f7fe f945 	bl	8000260 <__aeabi_lmul>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	000b      	movs	r3, r1
 8001fda:	0010      	movs	r0, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f7fe f919 	bl	8000220 <__aeabi_uldivmod>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	000b      	movs	r3, r1
 8001ff2:	0013      	movs	r3, r2
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ff6:	e037      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	4013      	ands	r3, r2
 8002000:	d01a      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4a23      	ldr	r2, [pc, #140]	; (8002098 <HAL_RCC_GetSysClockFreq+0x13c>)
 800200c:	2300      	movs	r3, #0
 800200e:	68b8      	ldr	r0, [r7, #8]
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	f7fe f925 	bl	8000260 <__aeabi_lmul>
 8002016:	0002      	movs	r2, r0
 8002018:	000b      	movs	r3, r1
 800201a:	0010      	movs	r0, r2
 800201c:	0019      	movs	r1, r3
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f7fe f8f9 	bl	8000220 <__aeabi_uldivmod>
 800202e:	0002      	movs	r2, r0
 8002030:	000b      	movs	r3, r1
 8002032:	0013      	movs	r3, r2
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
 8002036:	e017      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203a:	0018      	movs	r0, r3
 800203c:	2300      	movs	r3, #0
 800203e:	0019      	movs	r1, r3
 8002040:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_RCC_GetSysClockFreq+0x140>)
 8002042:	2300      	movs	r3, #0
 8002044:	f7fe f90c 	bl	8000260 <__aeabi_lmul>
 8002048:	0002      	movs	r2, r0
 800204a:	000b      	movs	r3, r1
 800204c:	0010      	movs	r0, r2
 800204e:	0019      	movs	r1, r3
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	001c      	movs	r4, r3
 8002054:	2300      	movs	r3, #0
 8002056:	001d      	movs	r5, r3
 8002058:	0022      	movs	r2, r4
 800205a:	002b      	movs	r3, r5
 800205c:	f7fe f8e0 	bl	8000220 <__aeabi_uldivmod>
 8002060:	0002      	movs	r2, r0
 8002062:	000b      	movs	r3, r1
 8002064:	0013      	movs	r3, r2
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800206c:	e00d      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_GetSysClockFreq+0x138>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0b5b      	lsrs	r3, r3, #13
 8002074:	2207      	movs	r2, #7
 8002076:	4013      	ands	r3, r2
 8002078:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	3301      	adds	r3, #1
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	0212      	lsls	r2, r2, #8
 8002082:	409a      	lsls	r2, r3
 8002084:	0013      	movs	r3, r2
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002088:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b00e      	add	sp, #56	; 0x38
 8002092:	bdb0      	pop	{r4, r5, r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	003d0900 	.word	0x003d0900
 800209c:	00f42400 	.word	0x00f42400
 80020a0:	007a1200 	.word	0x007a1200
 80020a4:	080030a8 	.word	0x080030a8

080020a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	20000018 	.word	0x20000018

080020bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c0:	f7ff fff2 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c4:	0001      	movs	r1, r0
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	2207      	movs	r2, #7
 80020ce:	4013      	ands	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	40d9      	lsrs	r1, r3
 80020d6:	000b      	movs	r3, r1
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	40021000 	.word	0x40021000
 80020e4:	080030a0 	.word	0x080030a0

080020e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020ec:	f7ff ffdc 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020f0:	0001      	movs	r1, r0
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	0adb      	lsrs	r3, r3, #11
 80020f8:	2207      	movs	r2, #7
 80020fa:	4013      	ands	r3, r2
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	40d9      	lsrs	r1, r3
 8002102:	000b      	movs	r3, r1
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	40021000 	.word	0x40021000
 8002110:	080030a0 	.word	0x080030a0

08002114 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800211c:	2317      	movs	r3, #23
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2220      	movs	r2, #32
 800212a:	4013      	ands	r3, r2
 800212c:	d106      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	4013      	ands	r3, r2
 8002138:	d100      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800213a:	e0d9      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213c:	4b9c      	ldr	r3, [pc, #624]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800213e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	055b      	lsls	r3, r3, #21
 8002144:	4013      	ands	r3, r2
 8002146:	d10a      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002148:	4b99      	ldr	r3, [pc, #612]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800214a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800214c:	4b98      	ldr	r3, [pc, #608]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	0549      	lsls	r1, r1, #21
 8002152:	430a      	orrs	r2, r1
 8002154:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002156:	2317      	movs	r3, #23
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215e:	4b95      	ldr	r3, [pc, #596]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4013      	ands	r3, r2
 8002168:	d11a      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216a:	4b92      	ldr	r3, [pc, #584]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b91      	ldr	r3, [pc, #580]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	0049      	lsls	r1, r1, #1
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002178:	f7fe fe5e 	bl	8000e38 <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	e008      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7fe fe59 	bl	8000e38 <HAL_GetTick>
 8002186:	0002      	movs	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b64      	cmp	r3, #100	; 0x64
 800218e:	d901      	bls.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e108      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	4b87      	ldr	r3, [pc, #540]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4013      	ands	r3, r2
 800219e:	d0f0      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80021a0:	4b83      	ldr	r3, [pc, #524]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	23c0      	movs	r3, #192	; 0xc0
 80021a6:	039b      	lsls	r3, r3, #14
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	23c0      	movs	r3, #192	; 0xc0
 80021b2:	039b      	lsls	r3, r3, #14
 80021b4:	4013      	ands	r3, r2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	23c0      	movs	r3, #192	; 0xc0
 80021c2:	039b      	lsls	r3, r3, #14
 80021c4:	4013      	ands	r3, r2
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d013      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	029b      	lsls	r3, r3, #10
 80021d4:	401a      	ands	r2, r3
 80021d6:	23c0      	movs	r3, #192	; 0xc0
 80021d8:	029b      	lsls	r3, r3, #10
 80021da:	429a      	cmp	r2, r3
 80021dc:	d10a      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021de:	4b74      	ldr	r3, [pc, #464]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	401a      	ands	r2, r3
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	029b      	lsls	r3, r3, #10
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d101      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0d8      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021f4:	4b6e      	ldr	r3, [pc, #440]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021f8:	23c0      	movs	r3, #192	; 0xc0
 80021fa:	029b      	lsls	r3, r3, #10
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d049      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	23c0      	movs	r3, #192	; 0xc0
 800220c:	029b      	lsls	r3, r3, #10
 800220e:	4013      	ands	r3, r2
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	429a      	cmp	r2, r3
 8002214:	d004      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2220      	movs	r2, #32
 800221c:	4013      	ands	r3, r2
 800221e:	d10d      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	23c0      	movs	r3, #192	; 0xc0
 8002226:	029b      	lsls	r3, r3, #10
 8002228:	4013      	ands	r3, r2
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	429a      	cmp	r2, r3
 800222e:	d034      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	4013      	ands	r3, r2
 800223a:	d02e      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800223c:	4b5c      	ldr	r3, [pc, #368]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800223e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002240:	4a5d      	ldr	r2, [pc, #372]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002242:	4013      	ands	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002246:	4b5a      	ldr	r3, [pc, #360]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800224a:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	0309      	lsls	r1, r1, #12
 8002250:	430a      	orrs	r2, r1
 8002252:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002254:	4b56      	ldr	r3, [pc, #344]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002258:	4b55      	ldr	r3, [pc, #340]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800225a:	4958      	ldr	r1, [pc, #352]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800225c:	400a      	ands	r2, r1
 800225e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4013      	ands	r3, r2
 800226e:	d014      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe fde2 	bl	8000e38 <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002278:	e009      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7fe fddd 	bl	8000e38 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	4a4e      	ldr	r2, [pc, #312]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e08b      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800228e:	4b48      	ldr	r3, [pc, #288]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4013      	ands	r3, r2
 8002298:	d0ef      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	23c0      	movs	r3, #192	; 0xc0
 80022a0:	029b      	lsls	r3, r3, #10
 80022a2:	401a      	ands	r2, r3
 80022a4:	23c0      	movs	r3, #192	; 0xc0
 80022a6:	029b      	lsls	r3, r3, #10
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d10c      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80022ac:	4b40      	ldr	r3, [pc, #256]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a44      	ldr	r2, [pc, #272]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	23c0      	movs	r3, #192	; 0xc0
 80022bc:	039b      	lsls	r3, r3, #14
 80022be:	401a      	ands	r2, r3
 80022c0:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022c2:	430a      	orrs	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	23c0      	movs	r3, #192	; 0xc0
 80022d0:	029b      	lsls	r3, r3, #10
 80022d2:	401a      	ands	r2, r3
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022d6:	430a      	orrs	r2, r1
 80022d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022da:	2317      	movs	r3, #23
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e4:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022ea:	4937      	ldr	r1, [pc, #220]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	d009      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022fa:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	2203      	movs	r2, #3
 8002300:	4393      	bics	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800230a:	430a      	orrs	r2, r1
 800230c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2202      	movs	r2, #2
 8002314:	4013      	ands	r3, r2
 8002316:	d009      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800231a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231c:	220c      	movs	r2, #12
 800231e:	4393      	bics	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002328:	430a      	orrs	r2, r1
 800232a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2204      	movs	r2, #4
 8002332:	4013      	ands	r3, r2
 8002334:	d009      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002336:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	4a24      	ldr	r2, [pc, #144]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800233c:	4013      	ands	r3, r2
 800233e:	0019      	movs	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002346:	430a      	orrs	r2, r1
 8002348:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2208      	movs	r2, #8
 8002350:	4013      	ands	r3, r2
 8002352:	d009      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800235a:	4013      	ands	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002364:	430a      	orrs	r2, r1
 8002366:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2240      	movs	r2, #64	; 0x40
 800236e:	4013      	ands	r3, r2
 8002370:	d009      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002378:	4013      	ands	r3, r2
 800237a:	0019      	movs	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1a      	ldr	r2, [r3, #32]
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002382:	430a      	orrs	r2, r1
 8002384:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	4013      	ands	r3, r2
 800238e:	d009      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b006      	add	sp, #24
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40007000 	.word	0x40007000
 80023b8:	fffcffff 	.word	0xfffcffff
 80023bc:	fff7ffff 	.word	0xfff7ffff
 80023c0:	00001388 	.word	0x00001388
 80023c4:	ffcfffff 	.word	0xffcfffff
 80023c8:	efffffff 	.word	0xefffffff
 80023cc:	fffff3ff 	.word	0xfffff3ff
 80023d0:	ffffcfff 	.word	0xffffcfff
 80023d4:	fbffffff 	.word	0xfbffffff
 80023d8:	fff3ffff 	.word	0xfff3ffff

080023dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e044      	b.n	8002478 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d107      	bne.n	8002406 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2274      	movs	r2, #116	; 0x74
 80023fa:	2100      	movs	r1, #0
 80023fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f7fe fc13 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2224      	movs	r2, #36	; 0x24
 800240a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 f8d8 	bl	80025d4 <UART_SetConfig>
 8002424:	0003      	movs	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e024      	b.n	8002478 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 fb6b 	bl	8002b14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	490d      	ldr	r1, [pc, #52]	; (8002480 <HAL_UART_Init+0xa4>)
 800244a:	400a      	ands	r2, r1
 800244c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	212a      	movs	r1, #42	; 0x2a
 800245a:	438a      	bics	r2, r1
 800245c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f000 fc03 	bl	8002c7c <UART_CheckIdleState>
 8002476:	0003      	movs	r3, r0
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}
 8002480:	ffffb7ff 	.word	0xffffb7ff

08002484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	1dbb      	adds	r3, r7, #6
 8002492:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002498:	2b20      	cmp	r3, #32
 800249a:	d000      	beq.n	800249e <HAL_UART_Transmit+0x1a>
 800249c:	e095      	b.n	80025ca <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_UART_Transmit+0x28>
 80024a4:	1dbb      	adds	r3, r7, #6
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e08d      	b.n	80025cc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	015b      	lsls	r3, r3, #5
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d109      	bne.n	80024d0 <HAL_UART_Transmit+0x4c>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d001      	beq.n	80024d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e07d      	b.n	80025cc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2274      	movs	r2, #116	; 0x74
 80024d4:	5c9b      	ldrb	r3, [r3, r2]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_UART_Transmit+0x5a>
 80024da:	2302      	movs	r3, #2
 80024dc:	e076      	b.n	80025cc <HAL_UART_Transmit+0x148>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2274      	movs	r2, #116	; 0x74
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2280      	movs	r2, #128	; 0x80
 80024ea:	2100      	movs	r1, #0
 80024ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2221      	movs	r2, #33	; 0x21
 80024f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024f4:	f7fe fca0 	bl	8000e38 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1dba      	adds	r2, r7, #6
 8002500:	2150      	movs	r1, #80	; 0x50
 8002502:	8812      	ldrh	r2, [r2, #0]
 8002504:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1dba      	adds	r2, r7, #6
 800250a:	2152      	movs	r1, #82	; 0x52
 800250c:	8812      	ldrh	r2, [r2, #0]
 800250e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	015b      	lsls	r3, r3, #5
 8002518:	429a      	cmp	r2, r3
 800251a:	d108      	bne.n	800252e <HAL_UART_Transmit+0xaa>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	e003      	b.n	8002536 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2274      	movs	r2, #116	; 0x74
 800253a:	2100      	movs	r1, #0
 800253c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800253e:	e02c      	b.n	800259a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	0013      	movs	r3, r2
 800254a:	2200      	movs	r2, #0
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	f000 fbdd 	bl	8002d0c <UART_WaitOnFlagUntilTimeout>
 8002552:	1e03      	subs	r3, r0, #0
 8002554:	d001      	beq.n	800255a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e038      	b.n	80025cc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	001a      	movs	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	05d2      	lsls	r2, r2, #23
 800256c:	0dd2      	lsrs	r2, r2, #23
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	3302      	adds	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e007      	b.n	8002588 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2252      	movs	r2, #82	; 0x52
 800258c:	5a9b      	ldrh	r3, [r3, r2]
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b299      	uxth	r1, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2252      	movs	r2, #82	; 0x52
 8002598:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2252      	movs	r2, #82	; 0x52
 800259e:	5a9b      	ldrh	r3, [r3, r2]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1cc      	bne.n	8002540 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	0013      	movs	r3, r2
 80025b0:	2200      	movs	r2, #0
 80025b2:	2140      	movs	r1, #64	; 0x40
 80025b4:	f000 fbaa 	bl	8002d0c <UART_WaitOnFlagUntilTimeout>
 80025b8:	1e03      	subs	r3, r0, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e005      	b.n	80025cc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e000      	b.n	80025cc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
  }
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b008      	add	sp, #32
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b08e      	sub	sp, #56	; 0x38
 80025d8:	af00      	add	r7, sp, #0
 80025da:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025dc:	231a      	movs	r3, #26
 80025de:	2218      	movs	r2, #24
 80025e0:	4694      	mov	ip, r2
 80025e2:	44bc      	add	ip, r7
 80025e4:	4463      	add	r3, ip
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4313      	orrs	r3, r2
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4ac1      	ldr	r2, [pc, #772]	; (8002910 <UART_SetConfig+0x33c>)
 800260a:	4013      	ands	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4abd      	ldr	r2, [pc, #756]	; (8002914 <UART_SetConfig+0x340>)
 8002620:	4013      	ands	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4ab7      	ldr	r2, [pc, #732]	; (8002918 <UART_SetConfig+0x344>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d004      	beq.n	800264a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002646:	4313      	orrs	r3, r2
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4ab2      	ldr	r2, [pc, #712]	; (800291c <UART_SetConfig+0x348>)
 8002652:	4013      	ands	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4aae      	ldr	r2, [pc, #696]	; (8002920 <UART_SetConfig+0x34c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d136      	bne.n	80026d8 <UART_SetConfig+0x104>
 800266a:	4bae      	ldr	r3, [pc, #696]	; (8002924 <UART_SetConfig+0x350>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	2203      	movs	r2, #3
 8002670:	4013      	ands	r3, r2
 8002672:	2b03      	cmp	r3, #3
 8002674:	d020      	beq.n	80026b8 <UART_SetConfig+0xe4>
 8002676:	d827      	bhi.n	80026c8 <UART_SetConfig+0xf4>
 8002678:	2b02      	cmp	r3, #2
 800267a:	d00d      	beq.n	8002698 <UART_SetConfig+0xc4>
 800267c:	d824      	bhi.n	80026c8 <UART_SetConfig+0xf4>
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <UART_SetConfig+0xb4>
 8002682:	2b01      	cmp	r3, #1
 8002684:	d010      	beq.n	80026a8 <UART_SetConfig+0xd4>
 8002686:	e01f      	b.n	80026c8 <UART_SetConfig+0xf4>
 8002688:	231b      	movs	r3, #27
 800268a:	2218      	movs	r2, #24
 800268c:	4694      	mov	ip, r2
 800268e:	44bc      	add	ip, r7
 8002690:	4463      	add	r3, ip
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e0ab      	b.n	80027f0 <UART_SetConfig+0x21c>
 8002698:	231b      	movs	r3, #27
 800269a:	2218      	movs	r2, #24
 800269c:	4694      	mov	ip, r2
 800269e:	44bc      	add	ip, r7
 80026a0:	4463      	add	r3, ip
 80026a2:	2202      	movs	r2, #2
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e0a3      	b.n	80027f0 <UART_SetConfig+0x21c>
 80026a8:	231b      	movs	r3, #27
 80026aa:	2218      	movs	r2, #24
 80026ac:	4694      	mov	ip, r2
 80026ae:	44bc      	add	ip, r7
 80026b0:	4463      	add	r3, ip
 80026b2:	2204      	movs	r2, #4
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e09b      	b.n	80027f0 <UART_SetConfig+0x21c>
 80026b8:	231b      	movs	r3, #27
 80026ba:	2218      	movs	r2, #24
 80026bc:	4694      	mov	ip, r2
 80026be:	44bc      	add	ip, r7
 80026c0:	4463      	add	r3, ip
 80026c2:	2208      	movs	r2, #8
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e093      	b.n	80027f0 <UART_SetConfig+0x21c>
 80026c8:	231b      	movs	r3, #27
 80026ca:	2218      	movs	r2, #24
 80026cc:	4694      	mov	ip, r2
 80026ce:	44bc      	add	ip, r7
 80026d0:	4463      	add	r3, ip
 80026d2:	2210      	movs	r2, #16
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e08b      	b.n	80027f0 <UART_SetConfig+0x21c>
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a92      	ldr	r2, [pc, #584]	; (8002928 <UART_SetConfig+0x354>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d136      	bne.n	8002750 <UART_SetConfig+0x17c>
 80026e2:	4b90      	ldr	r3, [pc, #576]	; (8002924 <UART_SetConfig+0x350>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	220c      	movs	r2, #12
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d020      	beq.n	8002730 <UART_SetConfig+0x15c>
 80026ee:	d827      	bhi.n	8002740 <UART_SetConfig+0x16c>
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d00d      	beq.n	8002710 <UART_SetConfig+0x13c>
 80026f4:	d824      	bhi.n	8002740 <UART_SetConfig+0x16c>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <UART_SetConfig+0x12c>
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d010      	beq.n	8002720 <UART_SetConfig+0x14c>
 80026fe:	e01f      	b.n	8002740 <UART_SetConfig+0x16c>
 8002700:	231b      	movs	r3, #27
 8002702:	2218      	movs	r2, #24
 8002704:	4694      	mov	ip, r2
 8002706:	44bc      	add	ip, r7
 8002708:	4463      	add	r3, ip
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e06f      	b.n	80027f0 <UART_SetConfig+0x21c>
 8002710:	231b      	movs	r3, #27
 8002712:	2218      	movs	r2, #24
 8002714:	4694      	mov	ip, r2
 8002716:	44bc      	add	ip, r7
 8002718:	4463      	add	r3, ip
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e067      	b.n	80027f0 <UART_SetConfig+0x21c>
 8002720:	231b      	movs	r3, #27
 8002722:	2218      	movs	r2, #24
 8002724:	4694      	mov	ip, r2
 8002726:	44bc      	add	ip, r7
 8002728:	4463      	add	r3, ip
 800272a:	2204      	movs	r2, #4
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e05f      	b.n	80027f0 <UART_SetConfig+0x21c>
 8002730:	231b      	movs	r3, #27
 8002732:	2218      	movs	r2, #24
 8002734:	4694      	mov	ip, r2
 8002736:	44bc      	add	ip, r7
 8002738:	4463      	add	r3, ip
 800273a:	2208      	movs	r2, #8
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e057      	b.n	80027f0 <UART_SetConfig+0x21c>
 8002740:	231b      	movs	r3, #27
 8002742:	2218      	movs	r2, #24
 8002744:	4694      	mov	ip, r2
 8002746:	44bc      	add	ip, r7
 8002748:	4463      	add	r3, ip
 800274a:	2210      	movs	r2, #16
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e04f      	b.n	80027f0 <UART_SetConfig+0x21c>
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a70      	ldr	r2, [pc, #448]	; (8002918 <UART_SetConfig+0x344>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d143      	bne.n	80027e2 <UART_SetConfig+0x20e>
 800275a:	4b72      	ldr	r3, [pc, #456]	; (8002924 <UART_SetConfig+0x350>)
 800275c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800275e:	23c0      	movs	r3, #192	; 0xc0
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	4013      	ands	r3, r2
 8002764:	22c0      	movs	r2, #192	; 0xc0
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	4293      	cmp	r3, r2
 800276a:	d02a      	beq.n	80027c2 <UART_SetConfig+0x1ee>
 800276c:	22c0      	movs	r2, #192	; 0xc0
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	4293      	cmp	r3, r2
 8002772:	d82e      	bhi.n	80027d2 <UART_SetConfig+0x1fe>
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	4293      	cmp	r3, r2
 800277a:	d012      	beq.n	80027a2 <UART_SetConfig+0x1ce>
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	4293      	cmp	r3, r2
 8002782:	d826      	bhi.n	80027d2 <UART_SetConfig+0x1fe>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <UART_SetConfig+0x1be>
 8002788:	2280      	movs	r2, #128	; 0x80
 800278a:	00d2      	lsls	r2, r2, #3
 800278c:	4293      	cmp	r3, r2
 800278e:	d010      	beq.n	80027b2 <UART_SetConfig+0x1de>
 8002790:	e01f      	b.n	80027d2 <UART_SetConfig+0x1fe>
 8002792:	231b      	movs	r3, #27
 8002794:	2218      	movs	r2, #24
 8002796:	4694      	mov	ip, r2
 8002798:	44bc      	add	ip, r7
 800279a:	4463      	add	r3, ip
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e026      	b.n	80027f0 <UART_SetConfig+0x21c>
 80027a2:	231b      	movs	r3, #27
 80027a4:	2218      	movs	r2, #24
 80027a6:	4694      	mov	ip, r2
 80027a8:	44bc      	add	ip, r7
 80027aa:	4463      	add	r3, ip
 80027ac:	2202      	movs	r2, #2
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e01e      	b.n	80027f0 <UART_SetConfig+0x21c>
 80027b2:	231b      	movs	r3, #27
 80027b4:	2218      	movs	r2, #24
 80027b6:	4694      	mov	ip, r2
 80027b8:	44bc      	add	ip, r7
 80027ba:	4463      	add	r3, ip
 80027bc:	2204      	movs	r2, #4
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e016      	b.n	80027f0 <UART_SetConfig+0x21c>
 80027c2:	231b      	movs	r3, #27
 80027c4:	2218      	movs	r2, #24
 80027c6:	4694      	mov	ip, r2
 80027c8:	44bc      	add	ip, r7
 80027ca:	4463      	add	r3, ip
 80027cc:	2208      	movs	r2, #8
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e00e      	b.n	80027f0 <UART_SetConfig+0x21c>
 80027d2:	231b      	movs	r3, #27
 80027d4:	2218      	movs	r2, #24
 80027d6:	4694      	mov	ip, r2
 80027d8:	44bc      	add	ip, r7
 80027da:	4463      	add	r3, ip
 80027dc:	2210      	movs	r2, #16
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e006      	b.n	80027f0 <UART_SetConfig+0x21c>
 80027e2:	231b      	movs	r3, #27
 80027e4:	2218      	movs	r2, #24
 80027e6:	4694      	mov	ip, r2
 80027e8:	44bc      	add	ip, r7
 80027ea:	4463      	add	r3, ip
 80027ec:	2210      	movs	r2, #16
 80027ee:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a48      	ldr	r2, [pc, #288]	; (8002918 <UART_SetConfig+0x344>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d000      	beq.n	80027fc <UART_SetConfig+0x228>
 80027fa:	e09b      	b.n	8002934 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027fc:	231b      	movs	r3, #27
 80027fe:	2218      	movs	r2, #24
 8002800:	4694      	mov	ip, r2
 8002802:	44bc      	add	ip, r7
 8002804:	4463      	add	r3, ip
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d01d      	beq.n	8002848 <UART_SetConfig+0x274>
 800280c:	dc20      	bgt.n	8002850 <UART_SetConfig+0x27c>
 800280e:	2b04      	cmp	r3, #4
 8002810:	d015      	beq.n	800283e <UART_SetConfig+0x26a>
 8002812:	dc1d      	bgt.n	8002850 <UART_SetConfig+0x27c>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <UART_SetConfig+0x24a>
 8002818:	2b02      	cmp	r3, #2
 800281a:	d005      	beq.n	8002828 <UART_SetConfig+0x254>
 800281c:	e018      	b.n	8002850 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800281e:	f7ff fc4d 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 8002822:	0003      	movs	r3, r0
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002826:	e01d      	b.n	8002864 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002828:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <UART_SetConfig+0x350>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2210      	movs	r2, #16
 800282e:	4013      	ands	r3, r2
 8002830:	d002      	beq.n	8002838 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002832:	4b3e      	ldr	r3, [pc, #248]	; (800292c <UART_SetConfig+0x358>)
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002836:	e015      	b.n	8002864 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8002838:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <UART_SetConfig+0x35c>)
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800283c:	e012      	b.n	8002864 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800283e:	f7ff fb8d 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8002842:	0003      	movs	r3, r0
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002846:	e00d      	b.n	8002864 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800284e:	e009      	b.n	8002864 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002854:	231a      	movs	r3, #26
 8002856:	2218      	movs	r2, #24
 8002858:	4694      	mov	ip, r2
 800285a:	44bc      	add	ip, r7
 800285c:	4463      	add	r3, ip
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
        break;
 8002862:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d100      	bne.n	800286c <UART_SetConfig+0x298>
 800286a:	e139      	b.n	8002ae0 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	0013      	movs	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	189b      	adds	r3, r3, r2
 8002876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002878:	429a      	cmp	r2, r3
 800287a:	d305      	bcc.n	8002888 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002884:	429a      	cmp	r2, r3
 8002886:	d907      	bls.n	8002898 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002888:	231a      	movs	r3, #26
 800288a:	2218      	movs	r2, #24
 800288c:	4694      	mov	ip, r2
 800288e:	44bc      	add	ip, r7
 8002890:	4463      	add	r3, ip
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	e123      	b.n	8002ae0 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	6939      	ldr	r1, [r7, #16]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	000b      	movs	r3, r1
 80028a6:	0e1b      	lsrs	r3, r3, #24
 80028a8:	0010      	movs	r0, r2
 80028aa:	0205      	lsls	r5, r0, #8
 80028ac:	431d      	orrs	r5, r3
 80028ae:	000b      	movs	r3, r1
 80028b0:	021c      	lsls	r4, r3, #8
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68b8      	ldr	r0, [r7, #8]
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	1900      	adds	r0, r0, r4
 80028c4:	4169      	adcs	r1, r5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f7fd fca4 	bl	8000220 <__aeabi_uldivmod>
 80028d8:	0002      	movs	r2, r0
 80028da:	000b      	movs	r3, r1
 80028dc:	0013      	movs	r3, r2
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e2:	23c0      	movs	r3, #192	; 0xc0
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d309      	bcc.n	80028fe <UART_SetConfig+0x32a>
 80028ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	035b      	lsls	r3, r3, #13
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d204      	bcs.n	80028fe <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e0f0      	b.n	8002ae0 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80028fe:	231a      	movs	r3, #26
 8002900:	2218      	movs	r2, #24
 8002902:	4694      	mov	ip, r2
 8002904:	44bc      	add	ip, r7
 8002906:	4463      	add	r3, ip
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e0e8      	b.n	8002ae0 <UART_SetConfig+0x50c>
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	efff69f3 	.word	0xefff69f3
 8002914:	ffffcfff 	.word	0xffffcfff
 8002918:	40004800 	.word	0x40004800
 800291c:	fffff4ff 	.word	0xfffff4ff
 8002920:	40013800 	.word	0x40013800
 8002924:	40021000 	.word	0x40021000
 8002928:	40004400 	.word	0x40004400
 800292c:	003d0900 	.word	0x003d0900
 8002930:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	429a      	cmp	r2, r3
 800293e:	d000      	beq.n	8002942 <UART_SetConfig+0x36e>
 8002940:	e074      	b.n	8002a2c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002942:	231b      	movs	r3, #27
 8002944:	2218      	movs	r2, #24
 8002946:	4694      	mov	ip, r2
 8002948:	44bc      	add	ip, r7
 800294a:	4463      	add	r3, ip
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b08      	cmp	r3, #8
 8002950:	d822      	bhi.n	8002998 <UART_SetConfig+0x3c4>
 8002952:	009a      	lsls	r2, r3, #2
 8002954:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <UART_SetConfig+0x52c>)
 8002956:	18d3      	adds	r3, r2, r3
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800295c:	f7ff fbae 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 8002960:	0003      	movs	r3, r0
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002964:	e022      	b.n	80029ac <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002966:	f7ff fbbf 	bl	80020e8 <HAL_RCC_GetPCLK2Freq>
 800296a:	0003      	movs	r3, r0
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800296e:	e01d      	b.n	80029ac <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002970:	4b64      	ldr	r3, [pc, #400]	; (8002b04 <UART_SetConfig+0x530>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2210      	movs	r2, #16
 8002976:	4013      	ands	r3, r2
 8002978:	d002      	beq.n	8002980 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800297a:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <UART_SetConfig+0x534>)
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800297e:	e015      	b.n	80029ac <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8002980:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <UART_SetConfig+0x538>)
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002984:	e012      	b.n	80029ac <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002986:	f7ff fae9 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 800298a:	0003      	movs	r3, r0
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800298e:	e00d      	b.n	80029ac <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002996:	e009      	b.n	80029ac <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800299c:	231a      	movs	r3, #26
 800299e:	2218      	movs	r2, #24
 80029a0:	4694      	mov	ip, r2
 80029a2:	44bc      	add	ip, r7
 80029a4:	4463      	add	r3, ip
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
        break;
 80029aa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d100      	bne.n	80029b4 <UART_SetConfig+0x3e0>
 80029b2:	e095      	b.n	8002ae0 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	005a      	lsls	r2, r3, #1
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	18d2      	adds	r2, r2, r3
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0019      	movs	r1, r3
 80029c6:	0010      	movs	r0, r2
 80029c8:	f7fd fb9e 	bl	8000108 <__udivsi3>
 80029cc:	0003      	movs	r3, r0
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	2b0f      	cmp	r3, #15
 80029d6:	d921      	bls.n	8002a1c <UART_SetConfig+0x448>
 80029d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	025b      	lsls	r3, r3, #9
 80029de:	429a      	cmp	r2, r3
 80029e0:	d21c      	bcs.n	8002a1c <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	200e      	movs	r0, #14
 80029e8:	2418      	movs	r4, #24
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	181b      	adds	r3, r3, r0
 80029ee:	210f      	movs	r1, #15
 80029f0:	438a      	bics	r2, r1
 80029f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2207      	movs	r2, #7
 80029fc:	4013      	ands	r3, r2
 80029fe:	b299      	uxth	r1, r3
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	181b      	adds	r3, r3, r0
 8002a04:	193a      	adds	r2, r7, r4
 8002a06:	1812      	adds	r2, r2, r0
 8002a08:	8812      	ldrh	r2, [r2, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	193a      	adds	r2, r7, r4
 8002a14:	1812      	adds	r2, r2, r0
 8002a16:	8812      	ldrh	r2, [r2, #0]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	e061      	b.n	8002ae0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a1c:	231a      	movs	r3, #26
 8002a1e:	2218      	movs	r2, #24
 8002a20:	4694      	mov	ip, r2
 8002a22:	44bc      	add	ip, r7
 8002a24:	4463      	add	r3, ip
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e059      	b.n	8002ae0 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a2c:	231b      	movs	r3, #27
 8002a2e:	2218      	movs	r2, #24
 8002a30:	4694      	mov	ip, r2
 8002a32:	44bc      	add	ip, r7
 8002a34:	4463      	add	r3, ip
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d822      	bhi.n	8002a82 <UART_SetConfig+0x4ae>
 8002a3c:	009a      	lsls	r2, r3, #2
 8002a3e:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <UART_SetConfig+0x53c>)
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a46:	f7ff fb39 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a4e:	e022      	b.n	8002a96 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a50:	f7ff fb4a 	bl	80020e8 <HAL_RCC_GetPCLK2Freq>
 8002a54:	0003      	movs	r3, r0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a58:	e01d      	b.n	8002a96 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <UART_SetConfig+0x530>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2210      	movs	r2, #16
 8002a60:	4013      	ands	r3, r2
 8002a62:	d002      	beq.n	8002a6a <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a64:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <UART_SetConfig+0x534>)
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a68:	e015      	b.n	8002a96 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002a6a:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <UART_SetConfig+0x538>)
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a6e:	e012      	b.n	8002a96 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a70:	f7ff fa74 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8002a74:	0003      	movs	r3, r0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a78:	e00d      	b.n	8002a96 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a80:	e009      	b.n	8002a96 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a86:	231a      	movs	r3, #26
 8002a88:	2218      	movs	r2, #24
 8002a8a:	4694      	mov	ip, r2
 8002a8c:	44bc      	add	ip, r7
 8002a8e:	4463      	add	r3, ip
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
        break;
 8002a94:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d021      	beq.n	8002ae0 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	085a      	lsrs	r2, r3, #1
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	18d2      	adds	r2, r2, r3
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	0019      	movs	r1, r3
 8002aac:	0010      	movs	r0, r2
 8002aae:	f7fd fb2b 	bl	8000108 <__udivsi3>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	2b0f      	cmp	r3, #15
 8002abc:	d909      	bls.n	8002ad2 <UART_SetConfig+0x4fe>
 8002abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	025b      	lsls	r3, r3, #9
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d204      	bcs.n	8002ad2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	e006      	b.n	8002ae0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ad2:	231a      	movs	r3, #26
 8002ad4:	2218      	movs	r2, #24
 8002ad6:	4694      	mov	ip, r2
 8002ad8:	44bc      	add	ip, r7
 8002ada:	4463      	add	r3, ip
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002aec:	231a      	movs	r3, #26
 8002aee:	2218      	movs	r2, #24
 8002af0:	4694      	mov	ip, r2
 8002af2:	44bc      	add	ip, r7
 8002af4:	4463      	add	r3, ip
 8002af6:	781b      	ldrb	r3, [r3, #0]
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b00e      	add	sp, #56	; 0x38
 8002afe:	bdb0      	pop	{r4, r5, r7, pc}
 8002b00:	080030b4 	.word	0x080030b4
 8002b04:	40021000 	.word	0x40021000
 8002b08:	003d0900 	.word	0x003d0900
 8002b0c:	00f42400 	.word	0x00f42400
 8002b10:	080030d8 	.word	0x080030d8

08002b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2201      	movs	r2, #1
 8002b22:	4013      	ands	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a4a      	ldr	r2, [pc, #296]	; (8002c58 <UART_AdvFeatureConfig+0x144>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	0019      	movs	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d00b      	beq.n	8002b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4a43      	ldr	r2, [pc, #268]	; (8002c5c <UART_AdvFeatureConfig+0x148>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2204      	movs	r2, #4
 8002b66:	4013      	ands	r3, r2
 8002b68:	d00b      	beq.n	8002b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a3b      	ldr	r2, [pc, #236]	; (8002c60 <UART_AdvFeatureConfig+0x14c>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2208      	movs	r2, #8
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d00b      	beq.n	8002ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <UART_AdvFeatureConfig+0x150>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	0019      	movs	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2210      	movs	r2, #16
 8002baa:	4013      	ands	r3, r2
 8002bac:	d00b      	beq.n	8002bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a2c      	ldr	r2, [pc, #176]	; (8002c68 <UART_AdvFeatureConfig+0x154>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2220      	movs	r2, #32
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d00b      	beq.n	8002be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <UART_AdvFeatureConfig+0x158>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	0019      	movs	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	2240      	movs	r2, #64	; 0x40
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d01d      	beq.n	8002c2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <UART_AdvFeatureConfig+0x15c>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	0019      	movs	r1, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	035b      	lsls	r3, r3, #13
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d10b      	bne.n	8002c2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <UART_AdvFeatureConfig+0x160>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	4013      	ands	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <UART_AdvFeatureConfig+0x164>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b002      	add	sp, #8
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	fffdffff 	.word	0xfffdffff
 8002c5c:	fffeffff 	.word	0xfffeffff
 8002c60:	fffbffff 	.word	0xfffbffff
 8002c64:	ffff7fff 	.word	0xffff7fff
 8002c68:	ffffefff 	.word	0xffffefff
 8002c6c:	ffffdfff 	.word	0xffffdfff
 8002c70:	ffefffff 	.word	0xffefffff
 8002c74:	ff9fffff 	.word	0xff9fffff
 8002c78:	fff7ffff 	.word	0xfff7ffff

08002c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	2100      	movs	r1, #0
 8002c8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c8c:	f7fe f8d4 	bl	8000e38 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d10c      	bne.n	8002cbc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	0391      	lsls	r1, r2, #14
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <UART_CheckIdleState+0x8c>)
 8002cac:	9200      	str	r2, [sp, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f000 f82c 	bl	8002d0c <UART_WaitOnFlagUntilTimeout>
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	d001      	beq.n	8002cbc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e021      	b.n	8002d00 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d10c      	bne.n	8002ce4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	03d1      	lsls	r1, r2, #15
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <UART_CheckIdleState+0x8c>)
 8002cd4:	9200      	str	r2, [sp, #0]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f000 f818 	bl	8002d0c <UART_WaitOnFlagUntilTimeout>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d001      	beq.n	8002ce4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e00d      	b.n	8002d00 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2274      	movs	r2, #116	; 0x74
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b004      	add	sp, #16
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	01ffffff 	.word	0x01ffffff

08002d0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	1dfb      	adds	r3, r7, #7
 8002d1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d1c:	e05e      	b.n	8002ddc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	3301      	adds	r3, #1
 8002d22:	d05b      	beq.n	8002ddc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d24:	f7fe f888 	bl	8000e38 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d302      	bcc.n	8002d3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d11b      	bne.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	492f      	ldr	r1, [pc, #188]	; (8002e04 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	438a      	bics	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2274      	movs	r2, #116	; 0x74
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e044      	b.n	8002dfc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d02e      	beq.n	8002ddc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	401a      	ands	r2, r3
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d124      	bne.n	8002ddc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	0112      	lsls	r2, r2, #4
 8002d9a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4917      	ldr	r1, [pc, #92]	; (8002e04 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002da8:	400a      	ands	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	438a      	bics	r2, r1
 8002dba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	2120      	movs	r1, #32
 8002dce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2274      	movs	r2, #116	; 0x74
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e00f      	b.n	8002dfc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	4013      	ands	r3, r2
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	425a      	negs	r2, r3
 8002dec:	4153      	adcs	r3, r2
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	001a      	movs	r2, r3
 8002df2:	1dfb      	adds	r3, r7, #7
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d091      	beq.n	8002d1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	fffffe5f 	.word	0xfffffe5f

08002e08 <__libc_init_array>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	4d0c      	ldr	r5, [pc, #48]	; (8002e40 <__libc_init_array+0x38>)
 8002e0e:	4c0d      	ldr	r4, [pc, #52]	; (8002e44 <__libc_init_array+0x3c>)
 8002e10:	1b64      	subs	r4, r4, r5
 8002e12:	10a4      	asrs	r4, r4, #2
 8002e14:	42a6      	cmp	r6, r4
 8002e16:	d109      	bne.n	8002e2c <__libc_init_array+0x24>
 8002e18:	2600      	movs	r6, #0
 8002e1a:	f000 f82b 	bl	8002e74 <_init>
 8002e1e:	4d0a      	ldr	r5, [pc, #40]	; (8002e48 <__libc_init_array+0x40>)
 8002e20:	4c0a      	ldr	r4, [pc, #40]	; (8002e4c <__libc_init_array+0x44>)
 8002e22:	1b64      	subs	r4, r4, r5
 8002e24:	10a4      	asrs	r4, r4, #2
 8002e26:	42a6      	cmp	r6, r4
 8002e28:	d105      	bne.n	8002e36 <__libc_init_array+0x2e>
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	00b3      	lsls	r3, r6, #2
 8002e2e:	58eb      	ldr	r3, [r5, r3]
 8002e30:	4798      	blx	r3
 8002e32:	3601      	adds	r6, #1
 8002e34:	e7ee      	b.n	8002e14 <__libc_init_array+0xc>
 8002e36:	00b3      	lsls	r3, r6, #2
 8002e38:	58eb      	ldr	r3, [r5, r3]
 8002e3a:	4798      	blx	r3
 8002e3c:	3601      	adds	r6, #1
 8002e3e:	e7f2      	b.n	8002e26 <__libc_init_array+0x1e>
 8002e40:	08003104 	.word	0x08003104
 8002e44:	08003104 	.word	0x08003104
 8002e48:	08003104 	.word	0x08003104
 8002e4c:	08003108 	.word	0x08003108

08002e50 <memcpy>:
 8002e50:	2300      	movs	r3, #0
 8002e52:	b510      	push	{r4, lr}
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d100      	bne.n	8002e5a <memcpy+0xa>
 8002e58:	bd10      	pop	{r4, pc}
 8002e5a:	5ccc      	ldrb	r4, [r1, r3]
 8002e5c:	54c4      	strb	r4, [r0, r3]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	e7f8      	b.n	8002e54 <memcpy+0x4>

08002e62 <memset>:
 8002e62:	0003      	movs	r3, r0
 8002e64:	1882      	adds	r2, r0, r2
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d100      	bne.n	8002e6c <memset+0xa>
 8002e6a:	4770      	bx	lr
 8002e6c:	7019      	strb	r1, [r3, #0]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	e7f9      	b.n	8002e66 <memset+0x4>
	...

08002e74 <_init>:
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7a:	bc08      	pop	{r3}
 8002e7c:	469e      	mov	lr, r3
 8002e7e:	4770      	bx	lr

08002e80 <_fini>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr
