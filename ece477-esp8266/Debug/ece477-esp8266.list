
ece477-esp8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de4  08003de4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dec  08003dec  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000088  08003e7c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08003e7c  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce36  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002593  00000000  00000000  0002cee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002f480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ae9  00000000  00000000  000309e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f457  00000000  00000000  000454d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078dbf  00000000  00000000  00054928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd6e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a8  00000000  00000000  000cd73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a6c 	.word	0x08003a6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08003a6c 	.word	0x08003a6c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <setup_wifi>:
//Todo check if busy before sending

//TODO - implement OK check + Error Retry

// This function sets the wifi mode to station, sets the AP to connect to,
int setup_wifi(char * ssid, char * password){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]

  //TODO - define error

//  serial_select(WIFI);
  serial_println("AT+CWMODE=1");
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <setup_wifi+0x38>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fb5d 	bl	8000b68 <serial_println>
  HAL_Delay(50); //dealy of 50 ms
 80004ae:	2032      	movs	r0, #50	; 0x32
 80004b0:	f000 fe68 	bl	8001184 <HAL_Delay>
  serial_printf("AT+CWJAP=\"%s\",\"%s\"\n", ssid, password);
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	6879      	ldr	r1, [r7, #4]
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <setup_wifi+0x3c>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fb94 	bl	8000be8 <serial_printf>
  HAL_Delay(2000);
 80004c0:	23fa      	movs	r3, #250	; 0xfa
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fe5d 	bl	8001184 <HAL_Delay>
  //TODO wait until OK

  return AT_SUCCESS;
 80004ca:	2300      	movs	r3, #0
}
 80004cc:	0018      	movs	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	08003a84 	.word	0x08003a84
 80004d8:	08003a90 	.word	0x08003a90

080004dc <sent_freshbyte_data>:

int sent_freshbyte_data(int temp_F, int humid, int methane){
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b087      	sub	sp, #28
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]

  //TODO - define error

  serial_printf("AT+HTTPCLIENT=3,0,\"http://maker.ifttt.com/trigger/ece477/"
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <sent_freshbyte_data+0x40>)
 80004ea:	6819      	ldr	r1, [r3, #0]
 80004ec:	68bc      	ldr	r4, [r7, #8]
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <sent_freshbyte_data+0x44>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	0023      	movs	r3, r4
 80004f8:	f000 fb76 	bl	8000be8 <serial_printf>
                "with/key/cRY9n1jJnl-fCLuPYsZZ-8\",\"maker.ifttt.com\",\""
                "/trigger/ece477/with/key/cRY9n1jJnl-fCLuPYsZZ-8\",1,\""
                "value1=%d%%7C%%7C%%7C%dF&value2=%d%%25&value3=%d\"\n", session_id, temp_F, humid, methane);
  HAL_Delay(2000);
 80004fc:	23fa      	movs	r3, #250	; 0xfa
 80004fe:	00db      	lsls	r3, r3, #3
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fe3f 	bl	8001184 <HAL_Delay>
  session_id++;
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <sent_freshbyte_data+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <sent_freshbyte_data+0x40>)
 800050e:	601a      	str	r2, [r3, #0]

  return AT_SUCCESS;
 8000510:	2300      	movs	r3, #0
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b005      	add	sp, #20
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	20000000 	.word	0x20000000
 8000520:	08003aa4 	.word	0x08003aa4

08000524 <receive_prediction>:

unsigned char * receive_prediction(unsigned char * prediction){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  //TODO - make this for the real dataset!
  //  unsigned char size[5] = "test";

  serial_select(WIFI);
 800052c:	2000      	movs	r0, #0
 800052e:	f000 fab7 	bl	8000aa0 <serial_select>
  serial_println("AT+HTTPCLIENT=2,0,\"http://gsx2json.com/api?id=17iTAwn0O4Kueubf5SyqEkfCmubj06RWgf51PDx4hfe0&sheet=1&q=Prediction(Days)\",\"gsx2json.com\",\"/get\",1");
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <receive_prediction+0x34>)
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fb17 	bl	8000b68 <serial_println>
  HAL_Delay(5000);
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <receive_prediction+0x38>)
 800053c:	0018      	movs	r0, r3
 800053e:	f000 fe21 	bl	8001184 <HAL_Delay>

  return extract_prediction(UART1_rxBuffer, prediction);
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <receive_prediction+0x3c>)
 8000546:	0011      	movs	r1, r2
 8000548:	0018      	movs	r0, r3
 800054a:	f000 f80b 	bl	8000564 <extract_prediction>
 800054e:	0003      	movs	r3, r0
}
 8000550:	0018      	movs	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}
 8000558:	08003b78 	.word	0x08003b78
 800055c:	00001388 	.word	0x00001388
 8000560:	200000a4 	.word	0x200000a4

08000564 <extract_prediction>:

unsigned char * extract_prediction(unsigned char * str, unsigned char * prediction){
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b08d      	sub	sp, #52	; 0x34
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]

  unsigned char sub[] = "ction\":[";
 800056e:	2108      	movs	r1, #8
 8000570:	187b      	adds	r3, r7, r1
 8000572:	4a3c      	ldr	r2, [pc, #240]	; (8000664 <extract_prediction+0x100>)
 8000574:	ca11      	ldmia	r2!, {r0, r4}
 8000576:	c311      	stmia	r3!, {r0, r4}
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	701a      	strb	r2, [r3, #0]

  unsigned char *p1, *p2, *p3;
  int i=0,j=0,flag=0;
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]

  p1 = str;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  p2 = sub;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i = 0; i<strlen(str); i++)
 8000590:	2300      	movs	r3, #0
 8000592:	623b      	str	r3, [r7, #32]
 8000594:	e038      	b.n	8000608 <extract_prediction+0xa4>
  {
    if(*p1 == *p2)
 8000596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d12c      	bne.n	80005fc <extract_prediction+0x98>
    {
      p3 = p1;
 80005a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
      for(j = 0;j<strlen(sub);j++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
 80005aa:	e00e      	b.n	80005ca <extract_prediction+0x66>
      {
        if(*p3 == *p2)
 80005ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d112      	bne.n	80005de <extract_prediction+0x7a>
        {
          p3++;p2++;
 80005b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ba:	3301      	adds	r3, #1
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
 80005be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c0:	3301      	adds	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
      for(j = 0;j<strlen(sub);j++)
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	3301      	adds	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	2308      	movs	r3, #8
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fa4e 	bl	8000a70 <strlen>
 80005d4:	0002      	movs	r2, r0
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d8e7      	bhi.n	80005ac <extract_prediction+0x48>
 80005dc:	e000      	b.n	80005e0 <extract_prediction+0x7c>
        }
        else
          break;
 80005de:	46c0      	nop			; (mov r8, r8)
      }
      p2 = sub;
 80005e0:	2208      	movs	r2, #8
 80005e2:	18bb      	adds	r3, r7, r2
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if(j == strlen(sub))
 80005e6:	18bb      	adds	r3, r7, r2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fa41 	bl	8000a70 <strlen>
 80005ee:	0002      	movs	r2, r0
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d102      	bne.n	80005fc <extract_prediction+0x98>
      {
        flag = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61bb      	str	r3, [r7, #24]
        // printf("\nSubstring found at index : %d\n",i);
        break;
 80005fa:	e00d      	b.n	8000618 <extract_prediction+0xb4>
      }
    }
    p1++;
 80005fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fe:	3301      	adds	r3, #1
 8000600:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(i = 0; i<strlen(str); i++)
 8000602:	6a3b      	ldr	r3, [r7, #32]
 8000604:	3301      	adds	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fa30 	bl	8000a70 <strlen>
 8000610:	0002      	movs	r2, r0
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	429a      	cmp	r2, r3
 8000616:	d8be      	bhi.n	8000596 <extract_prediction+0x32>
  }
  if(flag==0)
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d102      	bne.n	8000624 <extract_prediction+0xc0>
  {
      //printf("Substring NOT found");
    return -1;
 800061e:	2301      	movs	r3, #1
 8000620:	425b      	negs	r3, r3
 8000622:	e01a      	b.n	800065a <extract_prediction+0xf6>
  }

  p1 += sizeof(sub) - 1; //add length of substring to now point to start of number
 8000624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000626:	3308      	adds	r3, #8
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  i += sizeof(sub) - 1;
 800062a:	6a3b      	ldr	r3, [r7, #32]
 800062c:	3308      	adds	r3, #8
 800062e:	623b      	str	r3, [r7, #32]
//  prediction = strtof(p1);

  //hack for now ...
  //TODO fix this
  p2 = p1;
 8000630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  while (*p2 != ']'){
 8000634:	e002      	b.n	800063c <extract_prediction+0xd8>
    p2++;
 8000636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000638:	3301      	adds	r3, #1
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  while (*p2 != ']'){
 800063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b5d      	cmp	r3, #93	; 0x5d
 8000642:	d1f8      	bne.n	8000636 <extract_prediction+0xd2>
  }
  int prediction_str_len = p2 - p1;
 8000644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
  strncpy(prediction, p1, prediction_str_len);
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	0018      	movs	r0, r3
 8000654:	f003 f9e4 	bl	8003a20 <strncpy>

  return prediction;
 8000658:	683b      	ldr	r3, [r7, #0]
}
 800065a:	0018      	movs	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	b00d      	add	sp, #52	; 0x34
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	08003c08 	.word	0x08003c08

08000668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_DMA_Init+0x38>)
 8000670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_DMA_Init+0x38>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	631a      	str	r2, [r3, #48]	; 0x30
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_DMA_Init+0x38>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	200a      	movs	r0, #10
 800068c:	f000 fe4a 	bl	8001324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000690:	200a      	movs	r0, #10
 8000692:	f000 fe5c 	bl	800134e <HAL_NVIC_EnableIRQ>

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006c8:	2102      	movs	r1, #2
 80006ca:	430a      	orrs	r2, r1
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	2202      	movs	r2, #2
 80006d4:	4013      	ands	r3, r2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_I2C1_Init+0x78>)
 80006ee:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <MX_I2C1_Init+0x7c>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_I2C1_Init+0x78>)
 80006f4:	22e1      	movs	r2, #225	; 0xe1
 80006f6:	00d2      	lsls	r2, r2, #3
 80006f8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_I2C1_Init+0x78>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_I2C1_Init+0x78>)
 8000702:	2201      	movs	r2, #1
 8000704:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_I2C1_Init+0x78>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_I2C1_Init+0x78>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_I2C1_Init+0x78>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_I2C1_Init+0x78>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_I2C1_Init+0x78>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_I2C1_Init+0x78>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 f95e 	bl	80019e8 <HAL_I2C_Init>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 f96c 	bl	8000a0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_I2C1_Init+0x78>)
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f001 f9eb 	bl	8001b14 <HAL_I2CEx_ConfigAnalogFilter>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000742:	f000 f963 	bl	8000a0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_I2C1_Init+0x78>)
 8000748:	2100      	movs	r1, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fa2e 	bl	8001bac <HAL_I2CEx_ConfigDigitalFilter>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000754:	f000 f95a 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	2000033c 	.word	0x2000033c
 8000764:	40005400 	.word	0x40005400

08000768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	240c      	movs	r4, #12
 8000772:	193b      	adds	r3, r7, r4
 8000774:	0018      	movs	r0, r3
 8000776:	2314      	movs	r3, #20
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f003 f8d7 	bl	800392e <memset>
  if(i2cHandle->Instance==I2C1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <HAL_I2C_MspInit+0x80>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d129      	bne.n	80007de <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <HAL_I2C_MspInit+0x84>)
 800078c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_I2C_MspInit+0x84>)
 8000790:	2102      	movs	r1, #2
 8000792:	430a      	orrs	r2, r1
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_I2C_MspInit+0x84>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	2202      	movs	r2, #2
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	22c0      	movs	r2, #192	; 0xc0
 80007a6:	0092      	lsls	r2, r2, #2
 80007a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007aa:	0021      	movs	r1, r4
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2212      	movs	r2, #18
 80007b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2201      	movs	r2, #1
 80007b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2203      	movs	r2, #3
 80007bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2204      	movs	r2, #4
 80007c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 80007c8:	0019      	movs	r1, r3
 80007ca:	0010      	movs	r0, r2
 80007cc:	f000 ff96 	bl	80016fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_I2C_MspInit+0x84>)
 80007d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_I2C_MspInit+0x84>)
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	0389      	lsls	r1, r1, #14
 80007da:	430a      	orrs	r2, r1
 80007dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b009      	add	sp, #36	; 0x24
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40005400 	.word	0x40005400
 80007ec:	40021000 	.word	0x40021000
 80007f0:	50000400 	.word	0x50000400

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 fc53 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f87f 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f7ff ff4f 	bl	80006a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000806:	f7ff ff2f 	bl	8000668 <MX_DMA_Init>
  MX_I2C1_Init();
 800080a:	f7ff ff6d 	bl	80006e8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800080e:	f000 fb1b 	bl	8000e48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000812:	f000 fb49 	bl	8000ea8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 600);
 8000816:	2396      	movs	r3, #150	; 0x96
 8000818:	009a      	lsls	r2, r3, #2
 800081a:	492c      	ldr	r1, [pc, #176]	; (80008cc <main+0xd8>)
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <main+0xdc>)
 800081e:	0018      	movs	r0, r3
 8000820:	f002 fa58 	bl	8002cd4 <HAL_UART_Receive_DMA>

  serial_select(DEBUG_PRINT);
 8000824:	2001      	movs	r0, #1
 8000826:	f000 f93b 	bl	8000aa0 <serial_select>
  serial_clear();
 800082a:	f000 f96d 	bl	8000b08 <serial_clear>
  serial_println("Hello world, this is a test of the new serial print functions!");
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <main+0xe0>)
 8000830:	0018      	movs	r0, r3
 8000832:	f000 f999 	bl	8000b68 <serial_println>
  serial_select(WIFI);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f932 	bl	8000aa0 <serial_select>
  serial_println("AT");
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <main+0xe4>)
 800083e:	0018      	movs	r0, r3
 8000840:	f000 f992 	bl	8000b68 <serial_println>
  HAL_Delay(50);
 8000844:	2032      	movs	r0, #50	; 0x32
 8000846:	f000 fc9d 	bl	8001184 <HAL_Delay>
//    serial_printf("AT\n");
  if (setup_wifi("ASUS", "rickroll362") == AT_FAIL){
 800084a:	4a24      	ldr	r2, [pc, #144]	; (80008dc <main+0xe8>)
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <main+0xec>)
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff fe23 	bl	800049c <setup_wifi>
    // try again
  }
  if (sent_freshbyte_data(5000, 5000, 50000) == AT_FAIL){
 8000856:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <main+0xf0>)
 8000858:	4923      	ldr	r1, [pc, #140]	; (80008e8 <main+0xf4>)
 800085a:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <main+0xf4>)
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff fe3d 	bl	80004dc <sent_freshbyte_data>
    // try again
  }

  if (HAL_UART_Transmit(&huart2, "Predicted Days: ", sizeof("Predicted Days: "), 100) != HAL_OK){
 8000862:	4922      	ldr	r1, [pc, #136]	; (80008ec <main+0xf8>)
 8000864:	4822      	ldr	r0, [pc, #136]	; (80008f0 <main+0xfc>)
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	2211      	movs	r2, #17
 800086a:	f002 f98b 	bl	8002b84 <HAL_UART_Transmit>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d003      	beq.n	800087a <main+0x86>
    serial_println("Error! Predicted Days");
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <main+0x100>)
 8000874:	0018      	movs	r0, r3
 8000876:	f000 f977 	bl	8000b68 <serial_println>
  }

  unsigned char * prediction_days = malloc(sizeof(char) * 15);
 800087a:	200f      	movs	r0, #15
 800087c:	f003 f844 	bl	8003908 <malloc>
 8000880:	0003      	movs	r3, r0
 8000882:	607b      	str	r3, [r7, #4]
  prediction_days = receive_prediction(prediction_days);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff fe4c 	bl	8000524 <receive_prediction>
 800088c:	0003      	movs	r3, r0
 800088e:	607b      	str	r3, [r7, #4]

  if (HAL_UART_Transmit(&huart2, prediction_days, sizeof(prediction_days), 100)!= HAL_OK){
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	4817      	ldr	r0, [pc, #92]	; (80008f0 <main+0xfc>)
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	2204      	movs	r2, #4
 8000898:	f002 f974 	bl	8002b84 <HAL_UART_Transmit>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d003      	beq.n	80008a8 <main+0xb4>
    serial_println("Error! Printing string");
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <main+0x104>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 f960 	bl	8000b68 <serial_println>
  }

  serial_select(DEBUG_PRINT);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 f8f9 	bl	8000aa0 <serial_select>
  serial_clear();
 80008ae:	f000 f92b 	bl	8000b08 <serial_clear>
  serial_printf("Predicted Days: ");
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <main+0xf8>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 f997 	bl	8000be8 <serial_printf>
  serial_println(prediction_days);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 f953 	bl	8000b68 <serial_println>
  serial_println("Did you see that? I was chatting with the wi-fi module for a little bit ;)");
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <main+0x108>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 f94f 	bl	8000b68 <serial_println>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <main+0xd6>
 80008cc:	200000a4 	.word	0x200000a4
 80008d0:	20000458 	.word	0x20000458
 80008d4:	08003c14 	.word	0x08003c14
 80008d8:	08003c54 	.word	0x08003c54
 80008dc:	08003c58 	.word	0x08003c58
 80008e0:	08003c64 	.word	0x08003c64
 80008e4:	0000c350 	.word	0x0000c350
 80008e8:	00001388 	.word	0x00001388
 80008ec:	08003c6c 	.word	0x08003c6c
 80008f0:	200004dc 	.word	0x200004dc
 80008f4:	08003c80 	.word	0x08003c80
 80008f8:	08003c98 	.word	0x08003c98
 80008fc:	08003cb0 	.word	0x08003cb0

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b09d      	sub	sp, #116	; 0x74
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	2438      	movs	r4, #56	; 0x38
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2338      	movs	r3, #56	; 0x38
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f003 f80c 	bl	800392e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000916:	2324      	movs	r3, #36	; 0x24
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	0018      	movs	r0, r3
 800091c:	2314      	movs	r3, #20
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f003 f804 	bl	800392e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000926:	003b      	movs	r3, r7
 8000928:	0018      	movs	r0, r3
 800092a:	2324      	movs	r3, #36	; 0x24
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f002 fffd 	bl	800392e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <SystemClock_Config+0xdc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a29      	ldr	r2, [pc, #164]	; (80009e0 <SystemClock_Config+0xe0>)
 800093a:	401a      	ands	r2, r3
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <SystemClock_Config+0xdc>)
 800093e:	2180      	movs	r1, #128	; 0x80
 8000940:	0109      	lsls	r1, r1, #4
 8000942:	430a      	orrs	r2, r1
 8000944:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000946:	0021      	movs	r1, r4
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2210      	movs	r2, #16
 800094c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2201      	movs	r2, #1
 8000952:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	22a0      	movs	r2, #160	; 0xa0
 800095e:	0212      	lsls	r2, r2, #8
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	187b      	adds	r3, r7, r1
 800096a:	0018      	movs	r0, r3
 800096c:	f001 f96a 	bl	8001c44 <HAL_RCC_OscConfig>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000974:	f000 f84a 	bl	8000a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	2124      	movs	r1, #36	; 0x24
 800097a:	187b      	adds	r3, r7, r1
 800097c:	220f      	movs	r2, #15
 800097e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2100      	movs	r1, #0
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fd15 	bl	80023cc <HAL_RCC_ClockConfig>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009a6:	f000 f831 	bl	8000a0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80009aa:	003b      	movs	r3, r7
 80009ac:	220b      	movs	r2, #11
 80009ae:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009b0:	003b      	movs	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009b6:	003b      	movs	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009bc:	003b      	movs	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c2:	003b      	movs	r3, r7
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 ff25 	bl	8002814 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009ce:	f000 f81d 	bl	8000a0c <Error_Handler>
  }
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b01d      	add	sp, #116	; 0x74
 80009d8:	bd90      	pop	{r4, r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40007000 	.word	0x40007000
 80009e0:	ffffe7ff 	.word	0xffffe7ff

080009e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
//  HAL_UART_Transmit(&huart2, UART1_rxBuffer, 600, 100);
  HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 600);
 80009ec:	2396      	movs	r3, #150	; 0x96
 80009ee:	009a      	lsls	r2, r3, #2
 80009f0:	4904      	ldr	r1, [pc, #16]	; (8000a04 <HAL_UART_RxCpltCallback+0x20>)
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_UART_RxCpltCallback+0x24>)
 80009f4:	0018      	movs	r0, r3
 80009f6:	f002 f96d 	bl	8002cd4 <HAL_UART_Receive_DMA>
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	200000a4 	.word	0x200000a4
 8000a08:	20000458 	.word	0x20000458

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <convert>:

// Internal functions to serial_print
char *convert(unsigned int num, int base);
size_t strlen(const char *str);

char *convert(unsigned int num, int base) { 
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	static char Representation[]= "0123456789ABCDEF";
	static char buffer[50]; 
	char *ptr; 
	
	ptr = &buffer[49]; 
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <convert+0x50>)
 8000a24:	60fb      	str	r3, [r7, #12]
	*ptr = '\0'; 
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
	
	do { 
		*--ptr = Representation[num%base]; 
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	0011      	movs	r1, r2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff fbee 	bl	8000214 <__aeabi_uidivmod>
 8000a38:	000b      	movs	r3, r1
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <convert+0x54>)
 8000a44:	5c9a      	ldrb	r2, [r3, r2]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	701a      	strb	r2, [r3, #0]
		num /= base; 
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff fb5a 	bl	8000108 <__udivsi3>
 8000a54:	0003      	movs	r3, r0
 8000a56:	607b      	str	r3, [r7, #4]
	} while(num != 0); 
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1e6      	bne.n	8000a2c <convert+0x14>
	
	return(ptr); 
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b004      	add	sp, #16
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000032d 	.word	0x2000032d
 8000a6c:	20000004 	.word	0x20000004

08000a70 <strlen>:

/*!
    @brief https://stackoverflow.com/questions/22520413/c-strlen-implementation-in-one-line-of-code
*/
size_t strlen (const char *str) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    return (*str) ? strlen(++str) + 1 : 0;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d009      	beq.n	8000a94 <strlen+0x24>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3301      	adds	r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff fff1 	bl	8000a70 <strlen>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	3301      	adds	r3, #1
 8000a92:	e000      	b.n	8000a96 <strlen+0x26>
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	0018      	movs	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <serial_select>:
// End of internal functions for serial_print

void serial_select(enum uart_line_t line) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	701a      	strb	r2, [r3, #0]
    switch (line) {
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <serial_select+0x1a>
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d00d      	beq.n	8000ad4 <serial_select+0x34>
        case DEBUG_PRINT:
            current_line = line;
            serial_line = SERIAL_UART;
            break;
    }
}
 8000ab8:	e019      	b.n	8000aee <serial_select+0x4e>
            current_line = line;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <serial_select+0x58>)
 8000abc:	1dfa      	adds	r2, r7, #7
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	701a      	strb	r2, [r3, #0]
            serial_line = WIFI_UART;
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <serial_select+0x5c>)
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <serial_select+0x60>)
 8000ac6:	0010      	movs	r0, r2
 8000ac8:	0019      	movs	r1, r3
 8000aca:	2384      	movs	r3, #132	; 0x84
 8000acc:	001a      	movs	r2, r3
 8000ace:	f002 ff25 	bl	800391c <memcpy>
            break;
 8000ad2:	e00c      	b.n	8000aee <serial_select+0x4e>
            current_line = line;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <serial_select+0x58>)
 8000ad6:	1dfa      	adds	r2, r7, #7
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	701a      	strb	r2, [r3, #0]
            serial_line = SERIAL_UART;
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <serial_select+0x5c>)
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <serial_select+0x64>)
 8000ae0:	0010      	movs	r0, r2
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	2384      	movs	r3, #132	; 0x84
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	f002 ff18 	bl	800391c <memcpy>
            break;
 8000aec:	46c0      	nop			; (mov r8, r8)
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	20000388 	.word	0x20000388
 8000afc:	2000038c 	.word	0x2000038c
 8000b00:	20000458 	.word	0x20000458
 8000b04:	200004dc 	.word	0x200004dc

08000b08 <serial_clear>:

void serial_clear() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  char clear_sequence[] = {0x1b, 0x5B, 0x32, 0x4A, 0x1b, 0x5B, 0x48};
 8000b0e:	003b      	movs	r3, r7
 8000b10:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <serial_clear+0x2c>)
 8000b12:	6811      	ldr	r1, [r2, #0]
 8000b14:	6019      	str	r1, [r3, #0]
 8000b16:	8891      	ldrh	r1, [r2, #4]
 8000b18:	8099      	strh	r1, [r3, #4]
 8000b1a:	7992      	ldrb	r2, [r2, #6]
 8000b1c:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&serial_line, (unsigned char*) clear_sequence, sizeof clear_sequence, HAL_MAX_DELAY);
 8000b1e:	2301      	movs	r3, #1
 8000b20:	425b      	negs	r3, r3
 8000b22:	0039      	movs	r1, r7
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <serial_clear+0x30>)
 8000b26:	2207      	movs	r2, #7
 8000b28:	f002 f82c 	bl	8002b84 <HAL_UART_Transmit>
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b002      	add	sp, #8
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	08003cfc 	.word	0x08003cfc
 8000b38:	2000038c 	.word	0x2000038c

08000b3c <serial_print>:

void serial_print(char string[]) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serial_line, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff ff92 	bl	8000a70 <strlen>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	2301      	movs	r3, #1
 8000b52:	425b      	negs	r3, r3
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <serial_print+0x28>)
 8000b58:	f002 f814 	bl	8002b84 <HAL_UART_Transmit>
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000038c 	.word	0x2000038c

08000b68 <serial_println>:

void serial_println(char *string) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serial_line, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff ff7c 	bl	8000a70 <strlen>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	425b      	negs	r3, r3
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <serial_println+0x48>)
 8000b84:	f001 fffe 	bl	8002b84 <HAL_UART_Transmit>
  char* newline = ((current_line == WIFI) ? "\r\n" : "\r\f");
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <serial_println+0x4c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <serial_println+0x2c>
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <serial_println+0x50>)
 8000b92:	e000      	b.n	8000b96 <serial_println+0x2e>
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <serial_println+0x54>)
 8000b96:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&serial_line, (unsigned char*) newline, 2, HAL_MAX_DELAY);
 8000b98:	2301      	movs	r3, #1
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	68f9      	ldr	r1, [r7, #12]
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <serial_println+0x48>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	f001 ffef 	bl	8002b84 <HAL_UART_Transmit>
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	2000038c 	.word	0x2000038c
 8000bb4:	20000388 	.word	0x20000388
 8000bb8:	08003d04 	.word	0x08003d04
 8000bbc:	08003d08 	.word	0x08003d08

08000bc0 <serial_putc>:

void serial_putc(char c) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&serial_line, (unsigned char*) &c, 1, HAL_MAX_DELAY);
 8000bcc:	2301      	movs	r3, #1
 8000bce:	425b      	negs	r3, r3
 8000bd0:	1df9      	adds	r1, r7, #7
 8000bd2:	4804      	ldr	r0, [pc, #16]	; (8000be4 <serial_putc+0x24>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f001 ffd5 	bl	8002b84 <HAL_UART_Transmit>
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	2000038c 	.word	0x2000038c

08000be8 <serial_printf>:
}

/*!
    @brief a version of printf implmented from http://www.firmcodes.com/write-printf-function-c/
*/
void serial_printf(char format[], ...) { 
 8000be8:	b40f      	push	{r0, r1, r2, r3}
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
    char c;
	char *s; 
	
	//Module 1: Initializing Myprintf's arguments 
	va_list arg; 
	va_start(arg, format); 
 8000bf0:	2324      	movs	r3, #36	; 0x24
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	603b      	str	r3, [r7, #0]
	
	for(traverse = format; *traverse != '\0'; traverse++) { 
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e08c      	b.n	8000d16 <serial_printf+0x12e>
		while( (*traverse != '%') && (*traverse != '\0')) {
            if (*traverse == '\n') {
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b0a      	cmp	r3, #10
 8000c02:	d10a      	bne.n	8000c1a <serial_printf+0x32>
            	serial_print(((current_line == WIFI) ? "\r\n" : "\r\f"));
 8000c04:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <serial_printf+0x148>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <serial_printf+0x28>
 8000c0c:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <serial_printf+0x14c>)
 8000c0e:	e000      	b.n	8000c12 <serial_printf+0x2a>
 8000c10:	4b49      	ldr	r3, [pc, #292]	; (8000d38 <serial_printf+0x150>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff ff92 	bl	8000b3c <serial_print>
 8000c18:	e004      	b.n	8000c24 <serial_printf+0x3c>
            }
            else {
            	serial_putc(*traverse);
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff ffce 	bl	8000bc0 <serial_putc>
            }
			traverse++; 
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
		while( (*traverse != '%') && (*traverse != '\0')) {
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b25      	cmp	r3, #37	; 0x25
 8000c30:	d003      	beq.n	8000c3a <serial_printf+0x52>
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1e0      	bne.n	8000bfc <serial_printf+0x14>
		} 

		if (*traverse == '\0') break;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d100      	bne.n	8000c44 <serial_printf+0x5c>
 8000c42:	e06d      	b.n	8000d20 <serial_printf+0x138>
		traverse++; 
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
		
		//Module 2: Fetching and executing arguments
		switch(*traverse) { 
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b25      	cmp	r3, #37	; 0x25
 8000c50:	d059      	beq.n	8000d06 <serial_printf+0x11e>
 8000c52:	db5d      	blt.n	8000d10 <serial_printf+0x128>
 8000c54:	2b78      	cmp	r3, #120	; 0x78
 8000c56:	dc5b      	bgt.n	8000d10 <serial_printf+0x128>
 8000c58:	2b63      	cmp	r3, #99	; 0x63
 8000c5a:	db59      	blt.n	8000d10 <serial_printf+0x128>
 8000c5c:	3b63      	subs	r3, #99	; 0x63
 8000c5e:	2b15      	cmp	r3, #21
 8000c60:	d856      	bhi.n	8000d10 <serial_printf+0x128>
 8000c62:	009a      	lsls	r2, r3, #2
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <serial_printf+0x154>)
 8000c66:	18d3      	adds	r3, r2, r3
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	469f      	mov	pc, r3
			case 'c' : 
                c = va_arg(arg,int);		//Fetch char argument
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	1d1a      	adds	r2, r3, #4
 8000c70:	603a      	str	r2, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	701a      	strb	r2, [r3, #0]
				serial_putc(c);
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ff9f 	bl	8000bc0 <serial_putc>
				break; 	
 8000c82:	e045      	b.n	8000d10 <serial_printf+0x128>
			case 'd' : 
                signed_i = va_arg(arg,int); 		//Fetch Decimal/Integer argument
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	1d1a      	adds	r2, r3, #4
 8000c88:	603a      	str	r2, [r7, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	613b      	str	r3, [r7, #16]
				if (signed_i < 0) {
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	da06      	bge.n	8000ca2 <serial_printf+0xba>
                    signed_i = -signed_i;
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	425b      	negs	r3, r3
 8000c98:	613b      	str	r3, [r7, #16]
                    serial_print("-");
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <serial_printf+0x158>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ff4d 	bl	8000b3c <serial_print>
                } 
                serial_print(convert(signed_i, 10));
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff feb6 	bl	8000a18 <convert>
 8000cac:	0003      	movs	r3, r0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff ff44 	bl	8000b3c <serial_print>
                break; 	
 8000cb4:	e02c      	b.n	8000d10 <serial_printf+0x128>
			case 'o':
                i = va_arg(arg,unsigned int); //Fetch Octal representation
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	1d1a      	adds	r2, r3, #4
 8000cba:	603a      	str	r2, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 8));
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff fea7 	bl	8000a18 <convert>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ff35 	bl	8000b3c <serial_print>
                break; 
 8000cd2:	e01d      	b.n	8000d10 <serial_printf+0x128>
			case 's': 
                s = va_arg(arg,char *); 		//Fetch string
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	1d1a      	adds	r2, r3, #4
 8000cd8:	603a      	str	r2, [r7, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60bb      	str	r3, [r7, #8]
                serial_print(s);
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ff2b 	bl	8000b3c <serial_print>
                break; 
 8000ce6:	e013      	b.n	8000d10 <serial_printf+0x128>
			case 'x': 
                i = va_arg(arg,unsigned int); //Fetch Hexadecimal representation
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	1d1a      	adds	r2, r3, #4
 8000cec:	603a      	str	r2, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 16));
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fe8e 	bl	8000a18 <convert>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff ff1c 	bl	8000b3c <serial_print>
                break;
 8000d04:	e004      	b.n	8000d10 <serial_printf+0x128>

      case '%':
                serial_print("%");
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <serial_printf+0x15c>)
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff17 	bl	8000b3c <serial_print>
                break;
 8000d0e:	46c0      	nop			; (mov r8, r8)
	for(traverse = format; *traverse != '\0'; traverse++) { 
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d185      	bne.n	8000c2a <serial_printf+0x42>
		}	
	} 

	//Module 3: Closing argument list to necessary clean-up
	va_end(arg); 
} 
 8000d1e:	e000      	b.n	8000d22 <serial_printf+0x13a>
		if (*traverse == '\0') break;
 8000d20:	46c0      	nop			; (mov r8, r8)
} 
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b006      	add	sp, #24
 8000d28:	bc80      	pop	{r7}
 8000d2a:	bc08      	pop	{r3}
 8000d2c:	b004      	add	sp, #16
 8000d2e:	4718      	bx	r3
 8000d30:	20000388 	.word	0x20000388
 8000d34:	08003d04 	.word	0x08003d04
 8000d38:	08003d08 	.word	0x08003d08
 8000d3c:	08003d20 	.word	0x08003d20
 8000d40:	08003d0c 	.word	0x08003d0c
 8000d44:	08003d10 	.word	0x08003d10

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_MspInit+0x24>)
 8000d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x24>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	430a      	orrs	r2, r1
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HAL_MspInit+0x24>)
 8000d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_MspInit+0x24>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	0549      	lsls	r1, r1, #21
 8000d62:	430a      	orrs	r2, r1
 8000d64:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>
	...

08000d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_UART_Transmit(&huart2, "Hard Fault", sizeof("Hard Fault"), 100);
 8000d7c:	4903      	ldr	r1, [pc, #12]	; (8000d8c <HardFault_Handler+0x14>)
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <HardFault_Handler+0x18>)
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	220b      	movs	r2, #11
 8000d84:	f001 fefe 	bl	8002b84 <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <HardFault_Handler+0x10>
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	08003d14 	.word	0x08003d14
 8000d90:	200004dc 	.word	0x200004dc

08000d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f9ce 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <DMA1_Channel2_3_IRQHandler+0x14>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fbc0 	bl	8001544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	20000410 	.word	0x20000410

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	18d3      	adds	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f002 fd58 	bl	80038b4 <__errno>
 8000e04:	0003      	movs	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	425b      	negs	r3, r3
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	18d2      	adds	r2, r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b006      	add	sp, #24
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20002000 	.word	0x20002000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	20000330 	.word	0x20000330
 8000e38:	20000578 	.word	0x20000578

08000e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e4e:	4a15      	ldr	r2, [pc, #84]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e54:	22e1      	movs	r2, #225	; 0xe1
 8000e56:	0252      	lsls	r2, r2, #9
 8000e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <MX_USART1_UART_Init+0x58>)
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 fe25 	bl	8002adc <HAL_UART_Init>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e96:	f7ff fdb9 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000458 	.word	0x20000458
 8000ea4:	40013800 	.word	0x40013800

08000ea8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000eae:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000eb4:	2296      	movs	r2, #150	; 0x96
 8000eb6:	0192      	lsls	r2, r2, #6
 8000eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 fdf5 	bl	8002adc <HAL_UART_Init>
 8000ef2:	1e03      	subs	r3, r0, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ef6:	f7ff fd89 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200004dc 	.word	0x200004dc
 8000f04:	40004400 	.word	0x40004400

08000f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b08b      	sub	sp, #44	; 0x2c
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	2414      	movs	r4, #20
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	0018      	movs	r0, r3
 8000f16:	2314      	movs	r3, #20
 8000f18:	001a      	movs	r2, r3
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f002 fd07 	bl	800392e <memset>
  if(uartHandle->Instance==USART1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a45      	ldr	r2, [pc, #276]	; (800103c <HAL_UART_MspInit+0x134>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d154      	bne.n	8000fd4 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f2e:	4b44      	ldr	r3, [pc, #272]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	01c9      	lsls	r1, r1, #7
 8000f34:	430a      	orrs	r2, r1
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b41      	ldr	r3, [pc, #260]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	430a      	orrs	r2, r1
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f50:	193b      	adds	r3, r7, r4
 8000f52:	22c0      	movs	r2, #192	; 0xc0
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	0021      	movs	r1, r4
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2204      	movs	r2, #4
 8000f70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	187a      	adds	r2, r7, r1
 8000f74:	23a0      	movs	r3, #160	; 0xa0
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 fbbe 	bl	80016fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000f82:	4a31      	ldr	r2, [pc, #196]	; (8001048 <HAL_UART_MspInit+0x140>)
 8000f84:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000f88:	2203      	movs	r2, #3
 8000f8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f98:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f9e:	4b29      	ldr	r3, [pc, #164]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000fac:	2220      	movs	r2, #32
 8000fae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f000 f9e5 	bl	8001388 <HAL_DMA_Init>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000fc2:	f7ff fd23 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000fca:	671a      	str	r2, [r3, #112]	; 0x70
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fd2:	e02e      	b.n	8001032 <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1c      	ldr	r2, [pc, #112]	; (800104c <HAL_UART_MspInit+0x144>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d129      	bne.n	8001032 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	0289      	lsls	r1, r1, #10
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4013      	ands	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001004:	2114      	movs	r1, #20
 8001006:	187b      	adds	r3, r7, r1
 8001008:	220c      	movs	r2, #12
 800100a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2202      	movs	r2, #2
 8001010:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2203      	movs	r2, #3
 800101c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2204      	movs	r2, #4
 8001022:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	187a      	adds	r2, r7, r1
 8001026:	23a0      	movs	r3, #160	; 0xa0
 8001028:	05db      	lsls	r3, r3, #23
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f000 fb65 	bl	80016fc <HAL_GPIO_Init>
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b00b      	add	sp, #44	; 0x2c
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	40013800 	.word	0x40013800
 8001040:	40021000 	.word	0x40021000
 8001044:	20000410 	.word	0x20000410
 8001048:	40020030 	.word	0x40020030
 800104c:	40004400 	.word	0x40004400

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001052:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopForever+0x6>)
  ldr r1, =_edata
 8001056:	490e      	ldr	r1, [pc, #56]	; (8001090 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <LoopForever+0xe>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopForever+0x12>)
  ldr r4, =_ebss
 800106c:	4c0b      	ldr	r4, [pc, #44]	; (800109c <LoopForever+0x16>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800107a:	f7ff fedf 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f002 fc1f 	bl	80038c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fbb7 	bl	80007f4 <main>

08001086 <LoopForever>:

LoopForever:
    b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
  ldr   r0, =_estack
 8001088:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001094:	08003df4 	.word	0x08003df4
  ldr r2, =_sbss
 8001098:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800109c:	20000574 	.word	0x20000574

080010a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_COMP_IRQHandler>
	...

080010a4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_Init+0x3c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Init+0x3c>)
 80010b6:	2140      	movs	r1, #64	; 0x40
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 f811 	bl	80010e4 <HAL_InitTick>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d003      	beq.n	80010ce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	e001      	b.n	80010d2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ce:	f7ff fe3b 	bl	8000d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
}
 80010d6:	0018      	movs	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	b002      	add	sp, #8
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_InitTick+0x5c>)
 80010ee:	681c      	ldr	r4, [r3, #0]
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_InitTick+0x60>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	0019      	movs	r1, r3
 80010f6:	23fa      	movs	r3, #250	; 0xfa
 80010f8:	0098      	lsls	r0, r3, #2
 80010fa:	f7ff f805 	bl	8000108 <__udivsi3>
 80010fe:	0003      	movs	r3, r0
 8001100:	0019      	movs	r1, r3
 8001102:	0020      	movs	r0, r4
 8001104:	f7ff f800 	bl	8000108 <__udivsi3>
 8001108:	0003      	movs	r3, r0
 800110a:	0018      	movs	r0, r3
 800110c:	f000 f92f 	bl	800136e <HAL_SYSTICK_Config>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d001      	beq.n	8001118 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e00f      	b.n	8001138 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b03      	cmp	r3, #3
 800111c:	d80b      	bhi.n	8001136 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	2301      	movs	r3, #1
 8001122:	425b      	negs	r3, r3
 8001124:	2200      	movs	r2, #0
 8001126:	0018      	movs	r0, r3
 8001128:	f000 f8fc 	bl	8001324 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_InitTick+0x64>)
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b003      	add	sp, #12
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	20000018 	.word	0x20000018
 8001144:	20000020 	.word	0x20000020
 8001148:	2000001c 	.word	0x2000001c

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	001a      	movs	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	18d2      	adds	r2, r2, r3
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_IncTick+0x20>)
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	20000020 	.word	0x20000020
 800116c:	20000560 	.word	0x20000560

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <HAL_GetTick+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000560 	.word	0x20000560

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff fff0 	bl	8001170 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3301      	adds	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	001a      	movs	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	189b      	adds	r3, r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	f7ff ffe0 	bl	8001170 <HAL_GetTick>
 80011b0:	0002      	movs	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	20000020 	.word	0x20000020

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	0002      	movs	r2, r0
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b7f      	cmp	r3, #127	; 0x7f
 80011de:	d809      	bhi.n	80011f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	001a      	movs	r2, r3
 80011e6:	231f      	movs	r3, #31
 80011e8:	401a      	ands	r2, r3
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_EnableIRQ+0x30>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	4091      	lsls	r1, r2
 80011f0:	000a      	movs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
  }
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b002      	add	sp, #8
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	0002      	movs	r2, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b7f      	cmp	r3, #127	; 0x7f
 8001214:	d828      	bhi.n	8001268 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001216:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <__NVIC_SetPriority+0xd4>)
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b25b      	sxtb	r3, r3
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	33c0      	adds	r3, #192	; 0xc0
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	589b      	ldr	r3, [r3, r2]
 8001226:	1dfa      	adds	r2, r7, #7
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	0011      	movs	r1, r2
 800122c:	2203      	movs	r2, #3
 800122e:	400a      	ands	r2, r1
 8001230:	00d2      	lsls	r2, r2, #3
 8001232:	21ff      	movs	r1, #255	; 0xff
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	43d2      	mvns	r2, r2
 800123a:	401a      	ands	r2, r3
 800123c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	019b      	lsls	r3, r3, #6
 8001242:	22ff      	movs	r2, #255	; 0xff
 8001244:	401a      	ands	r2, r3
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	0018      	movs	r0, r3
 800124c:	2303      	movs	r3, #3
 800124e:	4003      	ands	r3, r0
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001254:	481f      	ldr	r0, [pc, #124]	; (80012d4 <__NVIC_SetPriority+0xd4>)
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b25b      	sxtb	r3, r3
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	430a      	orrs	r2, r1
 8001260:	33c0      	adds	r3, #192	; 0xc0
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001266:	e031      	b.n	80012cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001268:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <__NVIC_SetPriority+0xd8>)
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	0019      	movs	r1, r3
 8001270:	230f      	movs	r3, #15
 8001272:	400b      	ands	r3, r1
 8001274:	3b08      	subs	r3, #8
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3306      	adds	r3, #6
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	18d3      	adds	r3, r2, r3
 800127e:	3304      	adds	r3, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1dfa      	adds	r2, r7, #7
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	0011      	movs	r1, r2
 8001288:	2203      	movs	r2, #3
 800128a:	400a      	ands	r2, r1
 800128c:	00d2      	lsls	r2, r2, #3
 800128e:	21ff      	movs	r1, #255	; 0xff
 8001290:	4091      	lsls	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	43d2      	mvns	r2, r2
 8001296:	401a      	ands	r2, r3
 8001298:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	019b      	lsls	r3, r3, #6
 800129e:	22ff      	movs	r2, #255	; 0xff
 80012a0:	401a      	ands	r2, r3
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	0018      	movs	r0, r3
 80012a8:	2303      	movs	r3, #3
 80012aa:	4003      	ands	r3, r0
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <__NVIC_SetPriority+0xd8>)
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	001c      	movs	r4, r3
 80012b8:	230f      	movs	r3, #15
 80012ba:	4023      	ands	r3, r4
 80012bc:	3b08      	subs	r3, #8
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	430a      	orrs	r2, r1
 80012c2:	3306      	adds	r3, #6
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	18c3      	adds	r3, r0, r3
 80012c8:	3304      	adds	r3, #4
 80012ca:	601a      	str	r2, [r3, #0]
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b003      	add	sp, #12
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	045b      	lsls	r3, r3, #17
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d301      	bcc.n	80012f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f0:	2301      	movs	r3, #1
 80012f2:	e010      	b.n	8001316 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <SysTick_Config+0x44>)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	3a01      	subs	r2, #1
 80012fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fc:	2301      	movs	r3, #1
 80012fe:	425b      	negs	r3, r3
 8001300:	2103      	movs	r1, #3
 8001302:	0018      	movs	r0, r3
 8001304:	f7ff ff7c 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x44>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x44>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	210f      	movs	r1, #15
 8001330:	187b      	adds	r3, r7, r1
 8001332:	1c02      	adds	r2, r0, #0
 8001334:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	187b      	adds	r3, r7, r1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b25b      	sxtb	r3, r3
 800133e:	0011      	movs	r1, r2
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	0002      	movs	r2, r0
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b25b      	sxtb	r3, r3
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff ff33 	bl	80011cc <__NVIC_EnableIRQ>
}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b002      	add	sp, #8
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ffaf 	bl	80012dc <SysTick_Config>
 800137e:	0003      	movs	r3, r0
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e061      	b.n	800145e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a32      	ldr	r2, [pc, #200]	; (8001468 <HAL_DMA_Init+0xe0>)
 80013a0:	4694      	mov	ip, r2
 80013a2:	4463      	add	r3, ip
 80013a4:	2114      	movs	r1, #20
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7fe feae 	bl	8000108 <__udivsi3>
 80013ac:	0003      	movs	r3, r0
 80013ae:	009a      	lsls	r2, r3, #2
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a2d      	ldr	r2, [pc, #180]	; (800146c <HAL_DMA_Init+0xe4>)
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2225      	movs	r2, #37	; 0x25
 80013be:	2102      	movs	r1, #2
 80013c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a28      	ldr	r2, [pc, #160]	; (8001470 <HAL_DMA_Init+0xe8>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	01db      	lsls	r3, r3, #7
 8001410:	429a      	cmp	r2, r3
 8001412:	d018      	beq.n	8001446 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_DMA_Init+0xec>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	211c      	movs	r1, #28
 800141e:	400b      	ands	r3, r1
 8001420:	210f      	movs	r1, #15
 8001422:	4099      	lsls	r1, r3
 8001424:	000b      	movs	r3, r1
 8001426:	43d9      	mvns	r1, r3
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_DMA_Init+0xec>)
 800142a:	400a      	ands	r2, r1
 800142c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_DMA_Init+0xec>)
 8001430:	6819      	ldr	r1, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	201c      	movs	r0, #28
 800143c:	4003      	ands	r3, r0
 800143e:	409a      	lsls	r2, r3
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_DMA_Init+0xec>)
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2225      	movs	r2, #37	; 0x25
 8001450:	2101      	movs	r1, #1
 8001452:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2224      	movs	r2, #36	; 0x24
 8001458:	2100      	movs	r1, #0
 800145a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	bffdfff8 	.word	0xbffdfff8
 800146c:	40020000 	.word	0x40020000
 8001470:	ffff800f 	.word	0xffff800f
 8001474:	400200a8 	.word	0x400200a8

08001478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001486:	2317      	movs	r3, #23
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2224      	movs	r2, #36	; 0x24
 8001492:	5c9b      	ldrb	r3, [r3, r2]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_DMA_Start_IT+0x24>
 8001498:	2302      	movs	r3, #2
 800149a:	e04f      	b.n	800153c <HAL_DMA_Start_IT+0xc4>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2224      	movs	r2, #36	; 0x24
 80014a0:	2101      	movs	r1, #1
 80014a2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2225      	movs	r2, #37	; 0x25
 80014a8:	5c9b      	ldrb	r3, [r3, r2]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d13a      	bne.n	8001526 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2225      	movs	r2, #37	; 0x25
 80014b4:	2102      	movs	r1, #2
 80014b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	438a      	bics	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f8e3 	bl	80016a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	210e      	movs	r1, #14
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e00f      	b.n	8001514 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2104      	movs	r1, #4
 8001500:	438a      	bics	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	210a      	movs	r1, #10
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e007      	b.n	8001536 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2224      	movs	r2, #36	; 0x24
 800152a:	2100      	movs	r1, #0
 800152c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800152e:	2317      	movs	r3, #23
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	2202      	movs	r2, #2
 8001534:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001536:	2317      	movs	r3, #23
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	781b      	ldrb	r3, [r3, #0]
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b006      	add	sp, #24
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	221c      	movs	r2, #28
 8001562:	4013      	ands	r3, r2
 8001564:	2204      	movs	r2, #4
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	d026      	beq.n	80015be <HAL_DMA_IRQHandler+0x7a>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2204      	movs	r2, #4
 8001574:	4013      	ands	r3, r2
 8001576:	d022      	beq.n	80015be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2220      	movs	r2, #32
 8001580:	4013      	ands	r3, r2
 8001582:	d107      	bne.n	8001594 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2104      	movs	r1, #4
 8001590:	438a      	bics	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	221c      	movs	r2, #28
 800159a:	401a      	ands	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	2104      	movs	r1, #4
 80015a2:	4091      	lsls	r1, r2
 80015a4:	000a      	movs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d100      	bne.n	80015b2 <HAL_DMA_IRQHandler+0x6e>
 80015b0:	e071      	b.n	8001696 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	0010      	movs	r0, r2
 80015ba:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80015bc:	e06b      	b.n	8001696 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	221c      	movs	r2, #28
 80015c4:	4013      	ands	r3, r2
 80015c6:	2202      	movs	r2, #2
 80015c8:	409a      	lsls	r2, r3
 80015ca:	0013      	movs	r3, r2
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4013      	ands	r3, r2
 80015d0:	d02d      	beq.n	800162e <HAL_DMA_IRQHandler+0xea>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2202      	movs	r2, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	d029      	beq.n	800162e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2220      	movs	r2, #32
 80015e2:	4013      	ands	r3, r2
 80015e4:	d10b      	bne.n	80015fe <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	210a      	movs	r1, #10
 80015f2:	438a      	bics	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2225      	movs	r2, #37	; 0x25
 80015fa:	2101      	movs	r1, #1
 80015fc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	221c      	movs	r2, #28
 8001604:	401a      	ands	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	2102      	movs	r1, #2
 800160c:	4091      	lsls	r1, r2
 800160e:	000a      	movs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2224      	movs	r2, #36	; 0x24
 8001616:	2100      	movs	r1, #0
 8001618:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	2b00      	cmp	r3, #0
 8001620:	d039      	beq.n	8001696 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	0010      	movs	r0, r2
 800162a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800162c:	e033      	b.n	8001696 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	221c      	movs	r2, #28
 8001634:	4013      	ands	r3, r2
 8001636:	2208      	movs	r2, #8
 8001638:	409a      	lsls	r2, r3
 800163a:	0013      	movs	r3, r2
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	d02a      	beq.n	8001698 <HAL_DMA_IRQHandler+0x154>
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2208      	movs	r2, #8
 8001646:	4013      	ands	r3, r2
 8001648:	d026      	beq.n	8001698 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	210e      	movs	r1, #14
 8001656:	438a      	bics	r2, r1
 8001658:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	221c      	movs	r2, #28
 8001660:	401a      	ands	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	2101      	movs	r1, #1
 8001668:	4091      	lsls	r1, r2
 800166a:	000a      	movs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2225      	movs	r2, #37	; 0x25
 8001678:	2101      	movs	r1, #1
 800167a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2224      	movs	r2, #36	; 0x24
 8001680:	2100      	movs	r1, #0
 8001682:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	0010      	movs	r0, r2
 8001694:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46c0      	nop			; (mov r8, r8)
}
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}

080016a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	221c      	movs	r2, #28
 80016b4:	401a      	ands	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	2101      	movs	r1, #1
 80016bc:	4091      	lsls	r1, r2
 80016be:	000a      	movs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d108      	bne.n	80016e4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016e2:	e007      	b.n	80016f4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	60da      	str	r2, [r3, #12]
}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b004      	add	sp, #16
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001712:	e14f      	b.n	80019b4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4091      	lsls	r1, r2
 800171e:	000a      	movs	r2, r1
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d100      	bne.n	800172c <HAL_GPIO_Init+0x30>
 800172a:	e140      	b.n	80019ae <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d00b      	beq.n	800174c <HAL_GPIO_Init+0x50>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d007      	beq.n	800174c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001740:	2b11      	cmp	r3, #17
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b12      	cmp	r3, #18
 800174a:	d130      	bne.n	80017ae <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	409a      	lsls	r2, r3
 800175a:	0013      	movs	r3, r2
 800175c:	43da      	mvns	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	409a      	lsls	r2, r3
 800176e:	0013      	movs	r3, r2
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001782:	2201      	movs	r2, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	43da      	mvns	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	2201      	movs	r2, #1
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	43da      	mvns	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0xf2>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d123      	bne.n	8001836 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	58d3      	ldr	r3, [r2, r3]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2207      	movs	r2, #7
 8001800:	4013      	ands	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	691a      	ldr	r2, [r3, #16]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2107      	movs	r1, #7
 800181a:	400b      	ands	r3, r1
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	6939      	ldr	r1, [r7, #16]
 8001834:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2203      	movs	r2, #3
 8001854:	401a      	ands	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	055b      	lsls	r3, r3, #21
 8001872:	4013      	ands	r3, r2
 8001874:	d100      	bne.n	8001878 <HAL_GPIO_Init+0x17c>
 8001876:	e09a      	b.n	80019ae <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001878:	4b54      	ldr	r3, [pc, #336]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800187a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800187e:	2101      	movs	r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001884:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <HAL_GPIO_Init+0x2d4>)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	589b      	ldr	r3, [r3, r2]
 8001890:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2203      	movs	r2, #3
 8001896:	4013      	ands	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	409a      	lsls	r2, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	43da      	mvns	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	23a0      	movs	r3, #160	; 0xa0
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d019      	beq.n	80018e6 <HAL_GPIO_Init+0x1ea>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a47      	ldr	r2, [pc, #284]	; (80019d4 <HAL_GPIO_Init+0x2d8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0x1e6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a46      	ldr	r2, [pc, #280]	; (80019d8 <HAL_GPIO_Init+0x2dc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00d      	beq.n	80018de <HAL_GPIO_Init+0x1e2>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a45      	ldr	r2, [pc, #276]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x1de>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a44      	ldr	r2, [pc, #272]	; (80019e0 <HAL_GPIO_Init+0x2e4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_GPIO_Init+0x1da>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e008      	b.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018d6:	2306      	movs	r3, #6
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018e6:	2300      	movs	r3, #0
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	2103      	movs	r1, #3
 80018ec:	400a      	ands	r2, r1
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4093      	lsls	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f8:	4935      	ldr	r1, [pc, #212]	; (80019d0 <HAL_GPIO_Init+0x2d4>)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43da      	mvns	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	4013      	ands	r3, r2
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43da      	mvns	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	029b      	lsls	r3, r3, #10
 8001948:	4013      	ands	r3, r2
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001954:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43da      	mvns	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	035b      	lsls	r3, r3, #13
 8001972:	4013      	ands	r3, r2
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43da      	mvns	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	039b      	lsls	r3, r3, #14
 800199c:	4013      	ands	r3, r2
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a8:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	40da      	lsrs	r2, r3
 80019bc:	1e13      	subs	r3, r2, #0
 80019be:	d000      	beq.n	80019c2 <HAL_GPIO_Init+0x2c6>
 80019c0:	e6a8      	b.n	8001714 <HAL_GPIO_Init+0x18>
  }
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b006      	add	sp, #24
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000
 80019d4:	50000400 	.word	0x50000400
 80019d8:	50000800 	.word	0x50000800
 80019dc:	50000c00 	.word	0x50000c00
 80019e0:	50001c00 	.word	0x50001c00
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e082      	b.n	8001b00 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2241      	movs	r2, #65	; 0x41
 80019fe:	5c9b      	ldrb	r3, [r3, r2]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d107      	bne.n	8001a16 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2240      	movs	r2, #64	; 0x40
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7fe fea9 	bl	8000768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2241      	movs	r2, #65	; 0x41
 8001a1a:	2124      	movs	r1, #36	; 0x24
 8001a1c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	438a      	bics	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4934      	ldr	r1, [pc, #208]	; (8001b08 <HAL_I2C_Init+0x120>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4931      	ldr	r1, [pc, #196]	; (8001b0c <HAL_I2C_Init+0x124>)
 8001a48:	400a      	ands	r2, r1
 8001a4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d108      	bne.n	8001a66 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0209      	lsls	r1, r1, #8
 8001a60:	430a      	orrs	r2, r1
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	e007      	b.n	8001a76 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2184      	movs	r1, #132	; 0x84
 8001a70:	0209      	lsls	r1, r1, #8
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d104      	bne.n	8001a88 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	491f      	ldr	r1, [pc, #124]	; (8001b10 <HAL_I2C_Init+0x128>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	491a      	ldr	r1, [pc, #104]	; (8001b0c <HAL_I2C_Init+0x124>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	021a      	lsls	r2, r3, #8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69d9      	ldr	r1, [r3, #28]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1a      	ldr	r2, [r3, #32]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2241      	movs	r2, #65	; 0x41
 8001aec:	2120      	movs	r1, #32
 8001aee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2242      	movs	r2, #66	; 0x42
 8001afa:	2100      	movs	r1, #0
 8001afc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	f0ffffff 	.word	0xf0ffffff
 8001b0c:	ffff7fff 	.word	0xffff7fff
 8001b10:	02008000 	.word	0x02008000

08001b14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2241      	movs	r2, #65	; 0x41
 8001b22:	5c9b      	ldrb	r3, [r3, r2]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d138      	bne.n	8001b9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2240      	movs	r2, #64	; 0x40
 8001b2e:	5c9b      	ldrb	r3, [r3, r2]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e032      	b.n	8001b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2240      	movs	r2, #64	; 0x40
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2241      	movs	r2, #65	; 0x41
 8001b44:	2124      	movs	r1, #36	; 0x24
 8001b46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2101      	movs	r1, #1
 8001b54:	438a      	bics	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4911      	ldr	r1, [pc, #68]	; (8001ba8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b64:	400a      	ands	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6819      	ldr	r1, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2101      	movs	r1, #1
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2241      	movs	r2, #65	; 0x41
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	2100      	movs	r1, #0
 8001b96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
  }
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	ffffefff 	.word	0xffffefff

08001bac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2241      	movs	r2, #65	; 0x41
 8001bba:	5c9b      	ldrb	r3, [r3, r2]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d139      	bne.n	8001c36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2240      	movs	r2, #64	; 0x40
 8001bc6:	5c9b      	ldrb	r3, [r3, r2]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e033      	b.n	8001c38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2240      	movs	r2, #64	; 0x40
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2241      	movs	r2, #65	; 0x41
 8001bdc:	2124      	movs	r1, #36	; 0x24
 8001bde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2101      	movs	r1, #1
 8001bec:	438a      	bics	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2241      	movs	r2, #65	; 0x41
 8001c26:	2120      	movs	r1, #32
 8001c28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2240      	movs	r2, #64	; 0x40
 8001c2e:	2100      	movs	r1, #0
 8001c30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
  }
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b004      	add	sp, #16
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	fffff0ff 	.word	0xfffff0ff

08001c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f000 fbaf 	bl	80023b6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c58:	4bcf      	ldr	r3, [pc, #828]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	4013      	ands	r3, r2
 8001c60:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c62:	4bcd      	ldr	r3, [pc, #820]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	025b      	lsls	r3, r3, #9
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4013      	ands	r3, r2
 8001c76:	d100      	bne.n	8001c7a <HAL_RCC_OscConfig+0x36>
 8001c78:	e07e      	b.n	8001d78 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d007      	beq.n	8001c90 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d112      	bne.n	8001cac <HAL_RCC_OscConfig+0x68>
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	025b      	lsls	r3, r3, #9
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d10d      	bne.n	8001cac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	4bc1      	ldr	r3, [pc, #772]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	029b      	lsls	r3, r3, #10
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5a>
 8001c9c:	e06b      	b.n	8001d76 <HAL_RCC_OscConfig+0x132>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d167      	bne.n	8001d76 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f000 fb85 	bl	80023b6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	025b      	lsls	r3, r3, #9
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x84>
 8001cb8:	4bb7      	ldr	r3, [pc, #732]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4bb6      	ldr	r3, [pc, #728]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	0249      	lsls	r1, r1, #9
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e027      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	23a0      	movs	r3, #160	; 0xa0
 8001cce:	02db      	lsls	r3, r3, #11
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d10e      	bne.n	8001cf2 <HAL_RCC_OscConfig+0xae>
 8001cd4:	4bb0      	ldr	r3, [pc, #704]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4baf      	ldr	r3, [pc, #700]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	02c9      	lsls	r1, r1, #11
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	4bad      	ldr	r3, [pc, #692]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4bac      	ldr	r3, [pc, #688]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	0249      	lsls	r1, r1, #9
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e012      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001cf2:	4ba9      	ldr	r3, [pc, #676]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4ba8      	ldr	r3, [pc, #672]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001cf8:	49a8      	ldr	r1, [pc, #672]	; (8001f9c <HAL_RCC_OscConfig+0x358>)
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	4ba6      	ldr	r3, [pc, #664]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	025b      	lsls	r3, r3, #9
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4ba2      	ldr	r3, [pc, #648]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4ba1      	ldr	r3, [pc, #644]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001d12:	49a3      	ldr	r1, [pc, #652]	; (8001fa0 <HAL_RCC_OscConfig+0x35c>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d015      	beq.n	8001d4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fa26 	bl	8001170 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d28:	e009      	b.n	8001d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d2a:	f7ff fa21 	bl	8001170 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	; 0x64
 8001d36:	d902      	bls.n	8001d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	f000 fb3c 	bl	80023b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d3e:	4b96      	ldr	r3, [pc, #600]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	029b      	lsls	r3, r3, #10
 8001d46:	4013      	ands	r3, r2
 8001d48:	d0ef      	beq.n	8001d2a <HAL_RCC_OscConfig+0xe6>
 8001d4a:	e015      	b.n	8001d78 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fa10 	bl	8001170 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d56:	f7ff fa0b 	bl	8001170 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e326      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d68:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	d1f0      	bne.n	8001d56 <HAL_RCC_OscConfig+0x112>
 8001d74:	e000      	b.n	8001d78 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d76:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d100      	bne.n	8001d84 <HAL_RCC_OscConfig+0x140>
 8001d82:	e08b      	b.n	8001e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d13e      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1d0>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d13b      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d9c:	4b7e      	ldr	r3, [pc, #504]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2204      	movs	r2, #4
 8001da2:	4013      	ands	r3, r2
 8001da4:	d004      	beq.n	8001db0 <HAL_RCC_OscConfig+0x16c>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e302      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a7b      	ldr	r2, [pc, #492]	; (8001fa4 <HAL_RCC_OscConfig+0x360>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	021a      	lsls	r2, r3, #8
 8001dc0:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dc6:	4b74      	ldr	r3, [pc, #464]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2209      	movs	r2, #9
 8001dcc:	4393      	bics	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	4b71      	ldr	r3, [pc, #452]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dd8:	f000 fc40 	bl	800265c <HAL_RCC_GetSysClockFreq>
 8001ddc:	0001      	movs	r1, r0
 8001dde:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	220f      	movs	r2, #15
 8001de6:	4013      	ands	r3, r2
 8001de8:	4a6f      	ldr	r2, [pc, #444]	; (8001fa8 <HAL_RCC_OscConfig+0x364>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	000a      	movs	r2, r1
 8001dee:	40da      	lsrs	r2, r3
 8001df0:	4b6e      	ldr	r3, [pc, #440]	; (8001fac <HAL_RCC_OscConfig+0x368>)
 8001df2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001df4:	4b6e      	ldr	r3, [pc, #440]	; (8001fb0 <HAL_RCC_OscConfig+0x36c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2513      	movs	r5, #19
 8001dfa:	197c      	adds	r4, r7, r5
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f7ff f971 	bl	80010e4 <HAL_InitTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e06:	197b      	adds	r3, r7, r5
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d046      	beq.n	8001e9c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001e0e:	197b      	adds	r3, r7, r5
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	e2d0      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d027      	beq.n	8001e6a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e1a:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2209      	movs	r2, #9
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	4b5c      	ldr	r3, [pc, #368]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f9a0 	bl	8001170 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e36:	f7ff f99b 	bl	8001170 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e2b6      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d0f1      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <HAL_RCC_OscConfig+0x360>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	021a      	lsls	r2, r3, #8
 8001e62:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	e018      	b.n	8001e9c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6a:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001e70:	2101      	movs	r1, #1
 8001e72:	438a      	bics	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff f97b 	bl	8001170 <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e80:	f7ff f976 	bl	8001170 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e291      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2204      	movs	r2, #4
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d1f1      	bne.n	8001e80 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d100      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x264>
 8001ea6:	e0a1      	b.n	8001fec <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d140      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eae:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x282>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e277      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <HAL_RCC_OscConfig+0x370>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eda:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	0a19      	lsrs	r1, r3, #8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	061a      	lsls	r2, r3, #24
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	0b5b      	lsrs	r3, r3, #13
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	0212      	lsls	r2, r2, #8
 8001efa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	210f      	movs	r1, #15
 8001f04:	400b      	ands	r3, r1
 8001f06:	4928      	ldr	r1, [pc, #160]	; (8001fa8 <HAL_RCC_OscConfig+0x364>)
 8001f08:	5ccb      	ldrb	r3, [r1, r3]
 8001f0a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_OscConfig+0x368>)
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <HAL_RCC_OscConfig+0x36c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2513      	movs	r5, #19
 8001f16:	197c      	adds	r4, r7, r5
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff f8e3 	bl	80010e4 <HAL_InitTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f22:	197b      	adds	r3, r7, r5
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d060      	beq.n	8001fec <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001f2a:	197b      	adds	r3, r7, r5
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	e242      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d03f      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	0049      	lsls	r1, r1, #1
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7ff f913 	bl	8001170 <HAL_GetTick>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f50:	f7ff f90e 	bl	8001170 <HAL_GetTick>
 8001f54:	0002      	movs	r2, r0
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e229      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <HAL_RCC_OscConfig+0x370>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	0a19      	lsrs	r1, r3, #8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	061a      	lsls	r2, r3, #24
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <HAL_RCC_OscConfig+0x354>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	e029      	b.n	8001fec <HAL_RCC_OscConfig+0x3a8>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	fffeffff 	.word	0xfffeffff
 8001fa0:	fffbffff 	.word	0xfffbffff
 8001fa4:	ffffe0ff 	.word	0xffffe0ff
 8001fa8:	08003d78 	.word	0x08003d78
 8001fac:	20000018 	.word	0x20000018
 8001fb0:	2000001c 	.word	0x2000001c
 8001fb4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fb8:	4bbd      	ldr	r3, [pc, #756]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4bbc      	ldr	r3, [pc, #752]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8001fbe:	49bd      	ldr	r1, [pc, #756]	; (80022b4 <HAL_RCC_OscConfig+0x670>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f8d4 	bl	8001170 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fce:	f7ff f8cf 	bl	8001170 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1ea      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fe0:	4bb3      	ldr	r3, [pc, #716]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d036      	beq.n	8002064 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d019      	beq.n	8002032 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4bac      	ldr	r3, [pc, #688]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002002:	4bab      	ldr	r3, [pc, #684]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002004:	2101      	movs	r1, #1
 8002006:	430a      	orrs	r2, r1
 8002008:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff f8b1 	bl	8001170 <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff f8ac 	bl	8001170 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1c7      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002026:	4ba2      	ldr	r3, [pc, #648]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d0f1      	beq.n	8002014 <HAL_RCC_OscConfig+0x3d0>
 8002030:	e018      	b.n	8002064 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002032:	4b9f      	ldr	r3, [pc, #636]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002036:	4b9e      	ldr	r3, [pc, #632]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002038:	2101      	movs	r1, #1
 800203a:	438a      	bics	r2, r1
 800203c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7ff f897 	bl	8001170 <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002048:	f7ff f892 	bl	8001170 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1ad      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800205a:	4b95      	ldr	r3, [pc, #596]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 800205c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205e:	2202      	movs	r2, #2
 8002060:	4013      	ands	r3, r2
 8002062:	d1f1      	bne.n	8002048 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2204      	movs	r2, #4
 800206a:	4013      	ands	r3, r2
 800206c:	d100      	bne.n	8002070 <HAL_RCC_OscConfig+0x42c>
 800206e:	e0ae      	b.n	80021ce <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002070:	2027      	movs	r0, #39	; 0x27
 8002072:	183b      	adds	r3, r7, r0
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002078:	4b8d      	ldr	r3, [pc, #564]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 800207a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	055b      	lsls	r3, r3, #21
 8002080:	4013      	ands	r3, r2
 8002082:	d109      	bne.n	8002098 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	4b8a      	ldr	r3, [pc, #552]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002088:	4b89      	ldr	r3, [pc, #548]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 800208a:	2180      	movs	r1, #128	; 0x80
 800208c:	0549      	lsls	r1, r1, #21
 800208e:	430a      	orrs	r2, r1
 8002090:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002092:	183b      	adds	r3, r7, r0
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b87      	ldr	r3, [pc, #540]	; (80022b8 <HAL_RCC_OscConfig+0x674>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	d11a      	bne.n	80020da <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a4:	4b84      	ldr	r3, [pc, #528]	; (80022b8 <HAL_RCC_OscConfig+0x674>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b83      	ldr	r3, [pc, #524]	; (80022b8 <HAL_RCC_OscConfig+0x674>)
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	0049      	lsls	r1, r1, #1
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7ff f85d 	bl	8001170 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020bc:	f7ff f858 	bl	8001170 <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e173      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ce:	4b7a      	ldr	r3, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x674>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4b2>
 80020e6:	4b72      	ldr	r3, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 80020e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ea:	4b71      	ldr	r3, [pc, #452]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	0049      	lsls	r1, r1, #1
 80020f0:	430a      	orrs	r2, r1
 80020f2:	651a      	str	r2, [r3, #80]	; 0x50
 80020f4:	e031      	b.n	800215a <HAL_RCC_OscConfig+0x516>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x4d4>
 80020fe:	4b6c      	ldr	r3, [pc, #432]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002102:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002104:	496b      	ldr	r1, [pc, #428]	; (80022b4 <HAL_RCC_OscConfig+0x670>)
 8002106:	400a      	ands	r2, r1
 8002108:	651a      	str	r2, [r3, #80]	; 0x50
 800210a:	4b69      	ldr	r3, [pc, #420]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 800210c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800210e:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002110:	496a      	ldr	r1, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x678>)
 8002112:	400a      	ands	r2, r1
 8002114:	651a      	str	r2, [r3, #80]	; 0x50
 8002116:	e020      	b.n	800215a <HAL_RCC_OscConfig+0x516>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	23a0      	movs	r3, #160	; 0xa0
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	429a      	cmp	r2, r3
 8002122:	d10e      	bne.n	8002142 <HAL_RCC_OscConfig+0x4fe>
 8002124:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002126:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002128:	4b61      	ldr	r3, [pc, #388]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	00c9      	lsls	r1, r1, #3
 800212e:	430a      	orrs	r2, r1
 8002130:	651a      	str	r2, [r3, #80]	; 0x50
 8002132:	4b5f      	ldr	r3, [pc, #380]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002136:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0049      	lsls	r1, r1, #1
 800213c:	430a      	orrs	r2, r1
 800213e:	651a      	str	r2, [r3, #80]	; 0x50
 8002140:	e00b      	b.n	800215a <HAL_RCC_OscConfig+0x516>
 8002142:	4b5b      	ldr	r3, [pc, #364]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002146:	4b5a      	ldr	r3, [pc, #360]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002148:	495a      	ldr	r1, [pc, #360]	; (80022b4 <HAL_RCC_OscConfig+0x670>)
 800214a:	400a      	ands	r2, r1
 800214c:	651a      	str	r2, [r3, #80]	; 0x50
 800214e:	4b58      	ldr	r3, [pc, #352]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002152:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002154:	4959      	ldr	r1, [pc, #356]	; (80022bc <HAL_RCC_OscConfig+0x678>)
 8002156:	400a      	ands	r2, r1
 8002158:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d015      	beq.n	800218e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7ff f805 	bl	8001170 <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800216a:	e009      	b.n	8002180 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7ff f800 	bl	8001170 <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_RCC_OscConfig+0x67c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e11a      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002180:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d0ef      	beq.n	800216c <HAL_RCC_OscConfig+0x528>
 800218c:	e014      	b.n	80021b8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7fe ffef 	bl	8001170 <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002196:	e009      	b.n	80021ac <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe ffea 	bl	8001170 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <HAL_RCC_OscConfig+0x67c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e104      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ac:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 80021ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	d1ef      	bne.n	8002198 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021b8:	2327      	movs	r3, #39	; 0x27
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 80021c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c6:	4b3a      	ldr	r3, [pc, #232]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 80021c8:	493e      	ldr	r1, [pc, #248]	; (80022c4 <HAL_RCC_OscConfig+0x680>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2220      	movs	r2, #32
 80021d4:	4013      	ands	r3, r2
 80021d6:	d049      	beq.n	800226c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d026      	beq.n	800222e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021e0:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	430a      	orrs	r2, r1
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 80021ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f0:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 80021f2:	2101      	movs	r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_RCC_OscConfig+0x684>)
 80021fa:	6a1a      	ldr	r2, [r3, #32]
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_RCC_OscConfig+0x684>)
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	0189      	lsls	r1, r1, #6
 8002202:	430a      	orrs	r2, r1
 8002204:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe ffb3 	bl	8001170 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002210:	f7fe ffae 	bl	8001170 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0c9      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2202      	movs	r2, #2
 8002228:	4013      	ands	r3, r2
 800222a:	d0f1      	beq.n	8002210 <HAL_RCC_OscConfig+0x5cc>
 800222c:	e01e      	b.n	800226c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002234:	2101      	movs	r1, #1
 8002236:	438a      	bics	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_RCC_OscConfig+0x684>)
 800223c:	6a1a      	ldr	r2, [r3, #32]
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_OscConfig+0x684>)
 8002240:	4922      	ldr	r1, [pc, #136]	; (80022cc <HAL_RCC_OscConfig+0x688>)
 8002242:	400a      	ands	r2, r1
 8002244:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7fe ff93 	bl	8001170 <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002250:	f7fe ff8e 	bl	8001170 <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0a9      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d1f1      	bne.n	8002250 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d100      	bne.n	8002276 <HAL_RCC_OscConfig+0x632>
 8002274:	e09e      	b.n	80023b4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	2b0c      	cmp	r3, #12
 800227a:	d100      	bne.n	800227e <HAL_RCC_OscConfig+0x63a>
 800227c:	e077      	b.n	800236e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	2b02      	cmp	r3, #2
 8002284:	d158      	bne.n	8002338 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_RCC_OscConfig+0x66c>)
 800228c:	4910      	ldr	r1, [pc, #64]	; (80022d0 <HAL_RCC_OscConfig+0x68c>)
 800228e:	400a      	ands	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7fe ff6d 	bl	8001170 <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800229a:	e01b      	b.n	80022d4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe ff68 	bl	8001170 <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d914      	bls.n	80022d4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e083      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	40021000 	.word	0x40021000
 80022b4:	fffffeff 	.word	0xfffffeff
 80022b8:	40007000 	.word	0x40007000
 80022bc:	fffffbff 	.word	0xfffffbff
 80022c0:	00001388 	.word	0x00001388
 80022c4:	efffffff 	.word	0xefffffff
 80022c8:	40010000 	.word	0x40010000
 80022cc:	ffffdfff 	.word	0xffffdfff
 80022d0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	049b      	lsls	r3, r3, #18
 80022dc:	4013      	ands	r3, r2
 80022de:	d1dd      	bne.n	800229c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e0:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a37      	ldr	r2, [pc, #220]	; (80023c4 <HAL_RCC_OscConfig+0x780>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	431a      	orrs	r2, r3
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	0449      	lsls	r1, r1, #17
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe ff2f 	bl	8001170 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe ff2a 	bl	8001170 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e045      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	049b      	lsls	r3, r3, #18
 8002332:	4013      	ands	r3, r2
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x6d4>
 8002336:	e03d      	b.n	80023b4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 800233e:	4922      	ldr	r1, [pc, #136]	; (80023c8 <HAL_RCC_OscConfig+0x784>)
 8002340:	400a      	ands	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe ff14 	bl	8001170 <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234e:	f7fe ff0f 	bl	8001170 <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e02a      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	049b      	lsls	r3, r3, #18
 8002368:	4013      	ands	r3, r2
 800236a:	d1f0      	bne.n	800234e <HAL_RCC_OscConfig+0x70a>
 800236c:	e022      	b.n	80023b4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e01d      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	025b      	lsls	r3, r3, #9
 8002386:	401a      	ands	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	429a      	cmp	r2, r3
 800238e:	d10f      	bne.n	80023b0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	23f0      	movs	r3, #240	; 0xf0
 8002394:	039b      	lsls	r3, r3, #14
 8002396:	401a      	ands	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	23c0      	movs	r3, #192	; 0xc0
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	401a      	ands	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b00a      	add	sp, #40	; 0x28
 80023bc:	bdb0      	pop	{r4, r5, r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	40021000 	.word	0x40021000
 80023c4:	ff02ffff 	.word	0xff02ffff
 80023c8:	feffffff 	.word	0xfeffffff

080023cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e128      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b96      	ldr	r3, [pc, #600]	; (800263c <HAL_RCC_ClockConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2201      	movs	r2, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d91e      	bls.n	800242c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b93      	ldr	r3, [pc, #588]	; (800263c <HAL_RCC_ClockConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2201      	movs	r2, #1
 80023f4:	4393      	bics	r3, r2
 80023f6:	0019      	movs	r1, r3
 80023f8:	4b90      	ldr	r3, [pc, #576]	; (800263c <HAL_RCC_ClockConfig+0x270>)
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002400:	f7fe feb6 	bl	8001170 <HAL_GetTick>
 8002404:	0003      	movs	r3, r0
 8002406:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002408:	e009      	b.n	800241e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240a:	f7fe feb1 	bl	8001170 <HAL_GetTick>
 800240e:	0002      	movs	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	4a8a      	ldr	r2, [pc, #552]	; (8002640 <HAL_RCC_ClockConfig+0x274>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e109      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b87      	ldr	r3, [pc, #540]	; (800263c <HAL_RCC_ClockConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2201      	movs	r2, #1
 8002424:	4013      	ands	r3, r2
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d1ee      	bne.n	800240a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2202      	movs	r2, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002436:	4b83      	ldr	r3, [pc, #524]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	22f0      	movs	r2, #240	; 0xf0
 800243c:	4393      	bics	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	4b7f      	ldr	r3, [pc, #508]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 8002446:	430a      	orrs	r2, r1
 8002448:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	4013      	ands	r3, r2
 8002452:	d100      	bne.n	8002456 <HAL_RCC_ClockConfig+0x8a>
 8002454:	e089      	b.n	800256a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800245e:	4b79      	ldr	r3, [pc, #484]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	029b      	lsls	r3, r3, #10
 8002466:	4013      	ands	r3, r2
 8002468:	d120      	bne.n	80024ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0e1      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002476:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	049b      	lsls	r3, r3, #18
 800247e:	4013      	ands	r3, r2
 8002480:	d114      	bne.n	80024ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0d5      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d106      	bne.n	800249c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800248e:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2204      	movs	r2, #4
 8002494:	4013      	ands	r3, r2
 8002496:	d109      	bne.n	80024ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0ca      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800249c:	4b69      	ldr	r3, [pc, #420]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0c2      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ac:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2203      	movs	r2, #3
 80024b2:	4393      	bics	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	4b62      	ldr	r3, [pc, #392]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7fe fe56 	bl	8001170 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d111      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d0:	e009      	b.n	80024e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d2:	f7fe fe4d 	bl	8001170 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_ClockConfig+0x274>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0a5      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e6:	4b57      	ldr	r3, [pc, #348]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	220c      	movs	r2, #12
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d1ef      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x106>
 80024f2:	e03a      	b.n	800256a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d111      	bne.n	8002520 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fc:	e009      	b.n	8002512 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fe:	f7fe fe37 	bl	8001170 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	4a4d      	ldr	r2, [pc, #308]	; (8002640 <HAL_RCC_ClockConfig+0x274>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e08f      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002512:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	220c      	movs	r2, #12
 8002518:	4013      	ands	r3, r2
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d1ef      	bne.n	80024fe <HAL_RCC_ClockConfig+0x132>
 800251e:	e024      	b.n	800256a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d11b      	bne.n	8002560 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002528:	e009      	b.n	800253e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252a:	f7fe fe21 	bl	8001170 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	4a42      	ldr	r2, [pc, #264]	; (8002640 <HAL_RCC_ClockConfig+0x274>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e079      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800253e:	4b41      	ldr	r3, [pc, #260]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	220c      	movs	r2, #12
 8002544:	4013      	ands	r3, r2
 8002546:	2b04      	cmp	r3, #4
 8002548:	d1ef      	bne.n	800252a <HAL_RCC_ClockConfig+0x15e>
 800254a:	e00e      	b.n	800256a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7fe fe10 	bl	8001170 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	4a3a      	ldr	r2, [pc, #232]	; (8002640 <HAL_RCC_ClockConfig+0x274>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e068      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002560:	4b38      	ldr	r3, [pc, #224]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	220c      	movs	r2, #12
 8002566:	4013      	ands	r3, r2
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800256a:	4b34      	ldr	r3, [pc, #208]	; (800263c <HAL_RCC_ClockConfig+0x270>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2201      	movs	r2, #1
 8002570:	4013      	ands	r3, r2
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d21e      	bcs.n	80025b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002578:	4b30      	ldr	r3, [pc, #192]	; (800263c <HAL_RCC_ClockConfig+0x270>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	4393      	bics	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	4b2e      	ldr	r3, [pc, #184]	; (800263c <HAL_RCC_ClockConfig+0x270>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800258a:	f7fe fdf1 	bl	8001170 <HAL_GetTick>
 800258e:	0003      	movs	r3, r0
 8002590:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	e009      	b.n	80025a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe fdec 	bl	8001170 <HAL_GetTick>
 8002598:	0002      	movs	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	4a28      	ldr	r2, [pc, #160]	; (8002640 <HAL_RCC_ClockConfig+0x274>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e044      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_ClockConfig+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2201      	movs	r2, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d1ee      	bne.n	8002594 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2204      	movs	r2, #4
 80025bc:	4013      	ands	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a20      	ldr	r2, [pc, #128]	; (8002648 <HAL_RCC_ClockConfig+0x27c>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2208      	movs	r2, #8
 80025da:	4013      	ands	r3, r2
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4a1a      	ldr	r2, [pc, #104]	; (800264c <HAL_RCC_ClockConfig+0x280>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	00da      	lsls	r2, r3, #3
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025f4:	f000 f832 	bl	800265c <HAL_RCC_GetSysClockFreq>
 80025f8:	0001      	movs	r1, r0
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_RCC_ClockConfig+0x278>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	220f      	movs	r2, #15
 8002602:	4013      	ands	r3, r2
 8002604:	4a12      	ldr	r2, [pc, #72]	; (8002650 <HAL_RCC_ClockConfig+0x284>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	000a      	movs	r2, r1
 800260a:	40da      	lsrs	r2, r3
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_RCC_ClockConfig+0x288>)
 800260e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_RCC_ClockConfig+0x28c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	250b      	movs	r5, #11
 8002616:	197c      	adds	r4, r7, r5
 8002618:	0018      	movs	r0, r3
 800261a:	f7fe fd63 	bl	80010e4 <HAL_InitTick>
 800261e:	0003      	movs	r3, r0
 8002620:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002622:	197b      	adds	r3, r7, r5
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800262a:	197b      	adds	r3, r7, r5
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	e000      	b.n	8002632 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b004      	add	sp, #16
 8002638:	bdb0      	pop	{r4, r5, r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	40022000 	.word	0x40022000
 8002640:	00001388 	.word	0x00001388
 8002644:	40021000 	.word	0x40021000
 8002648:	fffff8ff 	.word	0xfffff8ff
 800264c:	ffffc7ff 	.word	0xffffc7ff
 8002650:	08003d78 	.word	0x08003d78
 8002654:	20000018 	.word	0x20000018
 8002658:	2000001c 	.word	0x2000001c

0800265c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b5b0      	push	{r4, r5, r7, lr}
 800265e:	b08e      	sub	sp, #56	; 0x38
 8002660:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002662:	4b4c      	ldr	r3, [pc, #304]	; (8002794 <HAL_RCC_GetSysClockFreq+0x138>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266a:	230c      	movs	r3, #12
 800266c:	4013      	ands	r3, r2
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d014      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x40>
 8002672:	d900      	bls.n	8002676 <HAL_RCC_GetSysClockFreq+0x1a>
 8002674:	e07b      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x112>
 8002676:	2b04      	cmp	r3, #4
 8002678:	d002      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x24>
 800267a:	2b08      	cmp	r3, #8
 800267c:	d00b      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0x3a>
 800267e:	e076      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002680:	4b44      	ldr	r3, [pc, #272]	; (8002794 <HAL_RCC_GetSysClockFreq+0x138>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2210      	movs	r2, #16
 8002686:	4013      	ands	r3, r2
 8002688:	d002      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800268a:	4b43      	ldr	r3, [pc, #268]	; (8002798 <HAL_RCC_GetSysClockFreq+0x13c>)
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800268e:	e07c      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002690:	4b42      	ldr	r3, [pc, #264]	; (800279c <HAL_RCC_GetSysClockFreq+0x140>)
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002694:	e079      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002696:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800269a:	e076      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	0c9a      	lsrs	r2, r3, #18
 80026a0:	230f      	movs	r3, #15
 80026a2:	401a      	ands	r2, r3
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x148>)
 80026a6:	5c9b      	ldrb	r3, [r3, r2]
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	0d9a      	lsrs	r2, r3, #22
 80026ae:	2303      	movs	r3, #3
 80026b0:	4013      	ands	r3, r2
 80026b2:	3301      	adds	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026b6:	4b37      	ldr	r3, [pc, #220]	; (8002794 <HAL_RCC_GetSysClockFreq+0x138>)
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	025b      	lsls	r3, r3, #9
 80026be:	4013      	ands	r3, r2
 80026c0:	d01a      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	4a35      	ldr	r2, [pc, #212]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x144>)
 80026cc:	2300      	movs	r3, #0
 80026ce:	69b8      	ldr	r0, [r7, #24]
 80026d0:	69f9      	ldr	r1, [r7, #28]
 80026d2:	f7fd fdc5 	bl	8000260 <__aeabi_lmul>
 80026d6:	0002      	movs	r2, r0
 80026d8:	000b      	movs	r3, r1
 80026da:	0010      	movs	r0, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f7fd fd99 	bl	8000220 <__aeabi_uldivmod>
 80026ee:	0002      	movs	r2, r0
 80026f0:	000b      	movs	r3, r1
 80026f2:	0013      	movs	r3, r2
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
 80026f6:	e037      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026f8:	4b26      	ldr	r3, [pc, #152]	; (8002794 <HAL_RCC_GetSysClockFreq+0x138>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2210      	movs	r2, #16
 80026fe:	4013      	ands	r3, r2
 8002700:	d01a      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4a23      	ldr	r2, [pc, #140]	; (8002798 <HAL_RCC_GetSysClockFreq+0x13c>)
 800270c:	2300      	movs	r3, #0
 800270e:	68b8      	ldr	r0, [r7, #8]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	f7fd fda5 	bl	8000260 <__aeabi_lmul>
 8002716:	0002      	movs	r2, r0
 8002718:	000b      	movs	r3, r1
 800271a:	0010      	movs	r0, r2
 800271c:	0019      	movs	r1, r3
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f7fd fd79 	bl	8000220 <__aeabi_uldivmod>
 800272e:	0002      	movs	r2, r0
 8002730:	000b      	movs	r3, r1
 8002732:	0013      	movs	r3, r2
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
 8002736:	e017      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	0018      	movs	r0, r3
 800273c:	2300      	movs	r3, #0
 800273e:	0019      	movs	r1, r3
 8002740:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_RCC_GetSysClockFreq+0x140>)
 8002742:	2300      	movs	r3, #0
 8002744:	f7fd fd8c 	bl	8000260 <__aeabi_lmul>
 8002748:	0002      	movs	r2, r0
 800274a:	000b      	movs	r3, r1
 800274c:	0010      	movs	r0, r2
 800274e:	0019      	movs	r1, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	001c      	movs	r4, r3
 8002754:	2300      	movs	r3, #0
 8002756:	001d      	movs	r5, r3
 8002758:	0022      	movs	r2, r4
 800275a:	002b      	movs	r3, r5
 800275c:	f7fd fd60 	bl	8000220 <__aeabi_uldivmod>
 8002760:	0002      	movs	r2, r0
 8002762:	000b      	movs	r3, r1
 8002764:	0013      	movs	r3, r2
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800276c:	e00d      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCC_GetSysClockFreq+0x138>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0b5b      	lsrs	r3, r3, #13
 8002774:	2207      	movs	r2, #7
 8002776:	4013      	ands	r3, r2
 8002778:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	3301      	adds	r3, #1
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	0212      	lsls	r2, r2, #8
 8002782:	409a      	lsls	r2, r3
 8002784:	0013      	movs	r3, r2
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002788:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b00e      	add	sp, #56	; 0x38
 8002792:	bdb0      	pop	{r4, r5, r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	003d0900 	.word	0x003d0900
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	007a1200 	.word	0x007a1200
 80027a4:	08003d90 	.word	0x08003d90

080027a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ac:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000018 	.word	0x20000018

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c0:	f7ff fff2 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027c4:	0001      	movs	r1, r0
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	2207      	movs	r2, #7
 80027ce:	4013      	ands	r3, r2
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	40d9      	lsrs	r1, r3
 80027d6:	000b      	movs	r3, r1
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08003d88 	.word	0x08003d88

080027e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027ec:	f7ff ffdc 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027f0:	0001      	movs	r1, r0
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	0adb      	lsrs	r3, r3, #11
 80027f8:	2207      	movs	r2, #7
 80027fa:	4013      	ands	r3, r2
 80027fc:	4a04      	ldr	r2, [pc, #16]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	40d9      	lsrs	r1, r3
 8002802:	000b      	movs	r3, r1
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	40021000 	.word	0x40021000
 8002810:	08003d88 	.word	0x08003d88

08002814 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800281c:	2317      	movs	r3, #23
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2220      	movs	r2, #32
 800282a:	4013      	ands	r3, r2
 800282c:	d106      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	4013      	ands	r3, r2
 8002838:	d100      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800283a:	e0d9      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283c:	4b9c      	ldr	r3, [pc, #624]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800283e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	055b      	lsls	r3, r3, #21
 8002844:	4013      	ands	r3, r2
 8002846:	d10a      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b99      	ldr	r3, [pc, #612]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800284a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800284c:	4b98      	ldr	r3, [pc, #608]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	0549      	lsls	r1, r1, #21
 8002852:	430a      	orrs	r2, r1
 8002854:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002856:	2317      	movs	r3, #23
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b95      	ldr	r3, [pc, #596]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4013      	ands	r3, r2
 8002868:	d11a      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b92      	ldr	r3, [pc, #584]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b91      	ldr	r3, [pc, #580]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002870:	2180      	movs	r1, #128	; 0x80
 8002872:	0049      	lsls	r1, r1, #1
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002878:	f7fe fc7a 	bl	8001170 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	e008      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7fe fc75 	bl	8001170 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e108      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b87      	ldr	r3, [pc, #540]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4013      	ands	r3, r2
 800289e:	d0f0      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80028a0:	4b83      	ldr	r3, [pc, #524]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	039b      	lsls	r3, r3, #14
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	23c0      	movs	r3, #192	; 0xc0
 80028b2:	039b      	lsls	r3, r3, #14
 80028b4:	4013      	ands	r3, r2
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d107      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	23c0      	movs	r3, #192	; 0xc0
 80028c2:	039b      	lsls	r3, r3, #14
 80028c4:	4013      	ands	r3, r2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d013      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	23c0      	movs	r3, #192	; 0xc0
 80028d2:	029b      	lsls	r3, r3, #10
 80028d4:	401a      	ands	r2, r3
 80028d6:	23c0      	movs	r3, #192	; 0xc0
 80028d8:	029b      	lsls	r3, r3, #10
 80028da:	429a      	cmp	r2, r3
 80028dc:	d10a      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80028de:	4b74      	ldr	r3, [pc, #464]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	029b      	lsls	r3, r3, #10
 80028e6:	401a      	ands	r2, r3
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	029b      	lsls	r3, r3, #10
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d101      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0d8      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80028f4:	4b6e      	ldr	r3, [pc, #440]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028f8:	23c0      	movs	r3, #192	; 0xc0
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	4013      	ands	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d049      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	23c0      	movs	r3, #192	; 0xc0
 800290c:	029b      	lsls	r3, r3, #10
 800290e:	4013      	ands	r3, r2
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	429a      	cmp	r2, r3
 8002914:	d004      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2220      	movs	r2, #32
 800291c:	4013      	ands	r3, r2
 800291e:	d10d      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	23c0      	movs	r3, #192	; 0xc0
 8002926:	029b      	lsls	r3, r3, #10
 8002928:	4013      	ands	r3, r2
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	429a      	cmp	r2, r3
 800292e:	d034      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	4013      	ands	r3, r2
 800293a:	d02e      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800293c:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800293e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002940:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002942:	4013      	ands	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002946:	4b5a      	ldr	r3, [pc, #360]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002948:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800294a:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0309      	lsls	r1, r1, #12
 8002950:	430a      	orrs	r2, r1
 8002952:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002954:	4b56      	ldr	r3, [pc, #344]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002958:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800295a:	4958      	ldr	r1, [pc, #352]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800295c:	400a      	ands	r2, r1
 800295e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4013      	ands	r3, r2
 800296e:	d014      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fbfe 	bl	8001170 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002978:	e009      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe fbf9 	bl	8001170 <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	4a4e      	ldr	r2, [pc, #312]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e08b      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800298e:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4013      	ands	r3, r2
 8002998:	d0ef      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	23c0      	movs	r3, #192	; 0xc0
 80029a0:	029b      	lsls	r3, r3, #10
 80029a2:	401a      	ands	r2, r3
 80029a4:	23c0      	movs	r3, #192	; 0xc0
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d10c      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a44      	ldr	r2, [pc, #272]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	23c0      	movs	r3, #192	; 0xc0
 80029bc:	039b      	lsls	r3, r3, #14
 80029be:	401a      	ands	r2, r3
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	23c0      	movs	r3, #192	; 0xc0
 80029d0:	029b      	lsls	r3, r3, #10
 80029d2:	401a      	ands	r2, r3
 80029d4:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029d6:	430a      	orrs	r2, r1
 80029d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029da:	2317      	movs	r3, #23
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b32      	ldr	r3, [pc, #200]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e8:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029ea:	4937      	ldr	r1, [pc, #220]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2201      	movs	r2, #1
 80029f6:	4013      	ands	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fa:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	2203      	movs	r2, #3
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d009      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1c:	220c      	movs	r2, #12
 8002a1e:	4393      	bics	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2204      	movs	r2, #4
 8002a32:	4013      	ands	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a36:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	4a24      	ldr	r2, [pc, #144]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	0019      	movs	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a46:	430a      	orrs	r2, r1
 8002a48:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2208      	movs	r2, #8
 8002a50:	4013      	ands	r3, r2
 8002a52:	d009      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a64:	430a      	orrs	r2, r1
 8002a66:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2240      	movs	r2, #64	; 0x40
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d009      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a82:	430a      	orrs	r2, r1
 8002a84:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d009      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b006      	add	sp, #24
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	fffcffff 	.word	0xfffcffff
 8002abc:	fff7ffff 	.word	0xfff7ffff
 8002ac0:	00001388 	.word	0x00001388
 8002ac4:	ffcfffff 	.word	0xffcfffff
 8002ac8:	efffffff 	.word	0xefffffff
 8002acc:	fffff3ff 	.word	0xfffff3ff
 8002ad0:	ffffcfff 	.word	0xffffcfff
 8002ad4:	fbffffff 	.word	0xfbffffff
 8002ad8:	fff3ffff 	.word	0xfff3ffff

08002adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e044      	b.n	8002b78 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d107      	bne.n	8002b06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2274      	movs	r2, #116	; 0x74
 8002afa:	2100      	movs	r1, #0
 8002afc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7fe fa01 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2224      	movs	r2, #36	; 0x24
 8002b0a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2101      	movs	r1, #1
 8002b18:	438a      	bics	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f000 f94c 	bl	8002dbc <UART_SetConfig>
 8002b24:	0003      	movs	r3, r0
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e024      	b.n	8002b78 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 fbdf 	bl	80032fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	490d      	ldr	r1, [pc, #52]	; (8002b80 <HAL_UART_Init+0xa4>)
 8002b4a:	400a      	ands	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	212a      	movs	r1, #42	; 0x2a
 8002b5a:	438a      	bics	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 fc77 	bl	8003464 <UART_CheckIdleState>
 8002b76:	0003      	movs	r3, r0
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b002      	add	sp, #8
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	ffffb7ff 	.word	0xffffb7ff

08002b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	1dbb      	adds	r3, r7, #6
 8002b92:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d000      	beq.n	8002b9e <HAL_UART_Transmit+0x1a>
 8002b9c:	e095      	b.n	8002cca <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_UART_Transmit+0x28>
 8002ba4:	1dbb      	adds	r3, r7, #6
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e08d      	b.n	8002ccc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	015b      	lsls	r3, r3, #5
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d109      	bne.n	8002bd0 <HAL_UART_Transmit+0x4c>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d001      	beq.n	8002bd0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e07d      	b.n	8002ccc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2274      	movs	r2, #116	; 0x74
 8002bd4:	5c9b      	ldrb	r3, [r3, r2]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Transmit+0x5a>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e076      	b.n	8002ccc <HAL_UART_Transmit+0x148>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2274      	movs	r2, #116	; 0x74
 8002be2:	2101      	movs	r1, #1
 8002be4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	2100      	movs	r1, #0
 8002bec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2221      	movs	r2, #33	; 0x21
 8002bf2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bf4:	f7fe fabc 	bl	8001170 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1dba      	adds	r2, r7, #6
 8002c00:	2150      	movs	r1, #80	; 0x50
 8002c02:	8812      	ldrh	r2, [r2, #0]
 8002c04:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1dba      	adds	r2, r7, #6
 8002c0a:	2152      	movs	r1, #82	; 0x52
 8002c0c:	8812      	ldrh	r2, [r2, #0]
 8002c0e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	015b      	lsls	r3, r3, #5
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d108      	bne.n	8002c2e <HAL_UART_Transmit+0xaa>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d104      	bne.n	8002c2e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	e003      	b.n	8002c36 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2274      	movs	r2, #116	; 0x74
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002c3e:	e02c      	b.n	8002c9a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	0013      	movs	r3, r2
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	f000 fc51 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8002c52:	1e03      	subs	r3, r0, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e038      	b.n	8002ccc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	001a      	movs	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	05d2      	lsls	r2, r2, #23
 8002c6c:	0dd2      	lsrs	r2, r2, #23
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	3302      	adds	r3, #2
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	e007      	b.n	8002c88 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2252      	movs	r2, #82	; 0x52
 8002c8c:	5a9b      	ldrh	r3, [r3, r2]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b299      	uxth	r1, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2252      	movs	r2, #82	; 0x52
 8002c98:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2252      	movs	r2, #82	; 0x52
 8002c9e:	5a9b      	ldrh	r3, [r3, r2]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1cc      	bne.n	8002c40 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	0013      	movs	r3, r2
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2140      	movs	r1, #64	; 0x40
 8002cb4:	f000 fc1e 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8002cb8:	1e03      	subs	r3, r0, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e005      	b.n	8002ccc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b008      	add	sp, #32
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	1dbb      	adds	r3, r7, #6
 8002ce0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d144      	bne.n	8002d74 <HAL_UART_Receive_DMA+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_UART_Receive_DMA+0x24>
 8002cf0:	1dbb      	adds	r3, r7, #6
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e03c      	b.n	8002d76 <HAL_UART_Receive_DMA+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	015b      	lsls	r3, r3, #5
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d109      	bne.n	8002d1c <HAL_UART_Receive_DMA+0x48>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2201      	movs	r2, #1
 8002d14:	4013      	ands	r3, r2
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e02c      	b.n	8002d76 <HAL_UART_Receive_DMA+0xa2>
      }
    }

    __HAL_LOCK(huart);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2274      	movs	r2, #116	; 0x74
 8002d20:	5c9b      	ldrb	r3, [r3, r2]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_UART_Receive_DMA+0x56>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e025      	b.n	8002d76 <HAL_UART_Receive_DMA+0xa2>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2274      	movs	r2, #116	; 0x74
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <HAL_UART_Receive_DMA+0xac>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00f      	beq.n	8002d62 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d008      	beq.n	8002d62 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2180      	movs	r1, #128	; 0x80
 8002d5c:	04c9      	lsls	r1, r1, #19
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002d62:	1dbb      	adds	r3, r7, #6
 8002d64:	881a      	ldrh	r2, [r3, #0]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 fc40 	bl	80035f0 <UART_Start_Receive_DMA>
 8002d70:	0003      	movs	r3, r0
 8002d72:	e000      	b.n	8002d76 <HAL_UART_Receive_DMA+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b004      	add	sp, #16
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	40004800 	.word	0x40004800

08002d84 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	000a      	movs	r2, r1
 8002dae:	1cbb      	adds	r3, r7, #2
 8002db0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b002      	add	sp, #8
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dbc:	b5b0      	push	{r4, r5, r7, lr}
 8002dbe:	b08e      	sub	sp, #56	; 0x38
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dc4:	231a      	movs	r3, #26
 8002dc6:	2218      	movs	r2, #24
 8002dc8:	4694      	mov	ip, r2
 8002dca:	44bc      	add	ip, r7
 8002dcc:	4463      	add	r3, ip
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4ac1      	ldr	r2, [pc, #772]	; (80030f8 <UART_SetConfig+0x33c>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4abd      	ldr	r2, [pc, #756]	; (80030fc <UART_SetConfig+0x340>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4ab7      	ldr	r2, [pc, #732]	; (8003100 <UART_SetConfig+0x344>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d004      	beq.n	8002e32 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4ab2      	ldr	r2, [pc, #712]	; (8003104 <UART_SetConfig+0x348>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4aae      	ldr	r2, [pc, #696]	; (8003108 <UART_SetConfig+0x34c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d136      	bne.n	8002ec0 <UART_SetConfig+0x104>
 8002e52:	4bae      	ldr	r3, [pc, #696]	; (800310c <UART_SetConfig+0x350>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	2203      	movs	r2, #3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d020      	beq.n	8002ea0 <UART_SetConfig+0xe4>
 8002e5e:	d827      	bhi.n	8002eb0 <UART_SetConfig+0xf4>
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d00d      	beq.n	8002e80 <UART_SetConfig+0xc4>
 8002e64:	d824      	bhi.n	8002eb0 <UART_SetConfig+0xf4>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <UART_SetConfig+0xb4>
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d010      	beq.n	8002e90 <UART_SetConfig+0xd4>
 8002e6e:	e01f      	b.n	8002eb0 <UART_SetConfig+0xf4>
 8002e70:	231b      	movs	r3, #27
 8002e72:	2218      	movs	r2, #24
 8002e74:	4694      	mov	ip, r2
 8002e76:	44bc      	add	ip, r7
 8002e78:	4463      	add	r3, ip
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e0ab      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002e80:	231b      	movs	r3, #27
 8002e82:	2218      	movs	r2, #24
 8002e84:	4694      	mov	ip, r2
 8002e86:	44bc      	add	ip, r7
 8002e88:	4463      	add	r3, ip
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e0a3      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002e90:	231b      	movs	r3, #27
 8002e92:	2218      	movs	r2, #24
 8002e94:	4694      	mov	ip, r2
 8002e96:	44bc      	add	ip, r7
 8002e98:	4463      	add	r3, ip
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e09b      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002ea0:	231b      	movs	r3, #27
 8002ea2:	2218      	movs	r2, #24
 8002ea4:	4694      	mov	ip, r2
 8002ea6:	44bc      	add	ip, r7
 8002ea8:	4463      	add	r3, ip
 8002eaa:	2208      	movs	r2, #8
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e093      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002eb0:	231b      	movs	r3, #27
 8002eb2:	2218      	movs	r2, #24
 8002eb4:	4694      	mov	ip, r2
 8002eb6:	44bc      	add	ip, r7
 8002eb8:	4463      	add	r3, ip
 8002eba:	2210      	movs	r2, #16
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e08b      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a92      	ldr	r2, [pc, #584]	; (8003110 <UART_SetConfig+0x354>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d136      	bne.n	8002f38 <UART_SetConfig+0x17c>
 8002eca:	4b90      	ldr	r3, [pc, #576]	; (800310c <UART_SetConfig+0x350>)
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ece:	220c      	movs	r2, #12
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d020      	beq.n	8002f18 <UART_SetConfig+0x15c>
 8002ed6:	d827      	bhi.n	8002f28 <UART_SetConfig+0x16c>
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d00d      	beq.n	8002ef8 <UART_SetConfig+0x13c>
 8002edc:	d824      	bhi.n	8002f28 <UART_SetConfig+0x16c>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <UART_SetConfig+0x12c>
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d010      	beq.n	8002f08 <UART_SetConfig+0x14c>
 8002ee6:	e01f      	b.n	8002f28 <UART_SetConfig+0x16c>
 8002ee8:	231b      	movs	r3, #27
 8002eea:	2218      	movs	r2, #24
 8002eec:	4694      	mov	ip, r2
 8002eee:	44bc      	add	ip, r7
 8002ef0:	4463      	add	r3, ip
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e06f      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002ef8:	231b      	movs	r3, #27
 8002efa:	2218      	movs	r2, #24
 8002efc:	4694      	mov	ip, r2
 8002efe:	44bc      	add	ip, r7
 8002f00:	4463      	add	r3, ip
 8002f02:	2202      	movs	r2, #2
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e067      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002f08:	231b      	movs	r3, #27
 8002f0a:	2218      	movs	r2, #24
 8002f0c:	4694      	mov	ip, r2
 8002f0e:	44bc      	add	ip, r7
 8002f10:	4463      	add	r3, ip
 8002f12:	2204      	movs	r2, #4
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e05f      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002f18:	231b      	movs	r3, #27
 8002f1a:	2218      	movs	r2, #24
 8002f1c:	4694      	mov	ip, r2
 8002f1e:	44bc      	add	ip, r7
 8002f20:	4463      	add	r3, ip
 8002f22:	2208      	movs	r2, #8
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e057      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002f28:	231b      	movs	r3, #27
 8002f2a:	2218      	movs	r2, #24
 8002f2c:	4694      	mov	ip, r2
 8002f2e:	44bc      	add	ip, r7
 8002f30:	4463      	add	r3, ip
 8002f32:	2210      	movs	r2, #16
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e04f      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a70      	ldr	r2, [pc, #448]	; (8003100 <UART_SetConfig+0x344>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d143      	bne.n	8002fca <UART_SetConfig+0x20e>
 8002f42:	4b72      	ldr	r3, [pc, #456]	; (800310c <UART_SetConfig+0x350>)
 8002f44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f46:	23c0      	movs	r3, #192	; 0xc0
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	22c0      	movs	r2, #192	; 0xc0
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d02a      	beq.n	8002faa <UART_SetConfig+0x1ee>
 8002f54:	22c0      	movs	r2, #192	; 0xc0
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d82e      	bhi.n	8002fba <UART_SetConfig+0x1fe>
 8002f5c:	2280      	movs	r2, #128	; 0x80
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d012      	beq.n	8002f8a <UART_SetConfig+0x1ce>
 8002f64:	2280      	movs	r2, #128	; 0x80
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d826      	bhi.n	8002fba <UART_SetConfig+0x1fe>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <UART_SetConfig+0x1be>
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	00d2      	lsls	r2, r2, #3
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d010      	beq.n	8002f9a <UART_SetConfig+0x1de>
 8002f78:	e01f      	b.n	8002fba <UART_SetConfig+0x1fe>
 8002f7a:	231b      	movs	r3, #27
 8002f7c:	2218      	movs	r2, #24
 8002f7e:	4694      	mov	ip, r2
 8002f80:	44bc      	add	ip, r7
 8002f82:	4463      	add	r3, ip
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e026      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002f8a:	231b      	movs	r3, #27
 8002f8c:	2218      	movs	r2, #24
 8002f8e:	4694      	mov	ip, r2
 8002f90:	44bc      	add	ip, r7
 8002f92:	4463      	add	r3, ip
 8002f94:	2202      	movs	r2, #2
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e01e      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002f9a:	231b      	movs	r3, #27
 8002f9c:	2218      	movs	r2, #24
 8002f9e:	4694      	mov	ip, r2
 8002fa0:	44bc      	add	ip, r7
 8002fa2:	4463      	add	r3, ip
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e016      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002faa:	231b      	movs	r3, #27
 8002fac:	2218      	movs	r2, #24
 8002fae:	4694      	mov	ip, r2
 8002fb0:	44bc      	add	ip, r7
 8002fb2:	4463      	add	r3, ip
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	701a      	strb	r2, [r3, #0]
 8002fb8:	e00e      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002fba:	231b      	movs	r3, #27
 8002fbc:	2218      	movs	r2, #24
 8002fbe:	4694      	mov	ip, r2
 8002fc0:	44bc      	add	ip, r7
 8002fc2:	4463      	add	r3, ip
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e006      	b.n	8002fd8 <UART_SetConfig+0x21c>
 8002fca:	231b      	movs	r3, #27
 8002fcc:	2218      	movs	r2, #24
 8002fce:	4694      	mov	ip, r2
 8002fd0:	44bc      	add	ip, r7
 8002fd2:	4463      	add	r3, ip
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a48      	ldr	r2, [pc, #288]	; (8003100 <UART_SetConfig+0x344>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d000      	beq.n	8002fe4 <UART_SetConfig+0x228>
 8002fe2:	e09b      	b.n	800311c <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fe4:	231b      	movs	r3, #27
 8002fe6:	2218      	movs	r2, #24
 8002fe8:	4694      	mov	ip, r2
 8002fea:	44bc      	add	ip, r7
 8002fec:	4463      	add	r3, ip
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d01d      	beq.n	8003030 <UART_SetConfig+0x274>
 8002ff4:	dc20      	bgt.n	8003038 <UART_SetConfig+0x27c>
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d015      	beq.n	8003026 <UART_SetConfig+0x26a>
 8002ffa:	dc1d      	bgt.n	8003038 <UART_SetConfig+0x27c>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <UART_SetConfig+0x24a>
 8003000:	2b02      	cmp	r3, #2
 8003002:	d005      	beq.n	8003010 <UART_SetConfig+0x254>
 8003004:	e018      	b.n	8003038 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003006:	f7ff fbd9 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 800300a:	0003      	movs	r3, r0
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800300e:	e01d      	b.n	800304c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003010:	4b3e      	ldr	r3, [pc, #248]	; (800310c <UART_SetConfig+0x350>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2210      	movs	r2, #16
 8003016:	4013      	ands	r3, r2
 8003018:	d002      	beq.n	8003020 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800301a:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <UART_SetConfig+0x358>)
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800301e:	e015      	b.n	800304c <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8003020:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <UART_SetConfig+0x35c>)
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003024:	e012      	b.n	800304c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003026:	f7ff fb19 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800302a:	0003      	movs	r3, r0
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800302e:	e00d      	b.n	800304c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003036:	e009      	b.n	800304c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800303c:	231a      	movs	r3, #26
 800303e:	2218      	movs	r2, #24
 8003040:	4694      	mov	ip, r2
 8003042:	44bc      	add	ip, r7
 8003044:	4463      	add	r3, ip
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
        break;
 800304a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d100      	bne.n	8003054 <UART_SetConfig+0x298>
 8003052:	e139      	b.n	80032c8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	0013      	movs	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	189b      	adds	r3, r3, r2
 800305e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003060:	429a      	cmp	r2, r3
 8003062:	d305      	bcc.n	8003070 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800306a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306c:	429a      	cmp	r2, r3
 800306e:	d907      	bls.n	8003080 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003070:	231a      	movs	r3, #26
 8003072:	2218      	movs	r2, #24
 8003074:	4694      	mov	ip, r2
 8003076:	44bc      	add	ip, r7
 8003078:	4463      	add	r3, ip
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e123      	b.n	80032c8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	6939      	ldr	r1, [r7, #16]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	000b      	movs	r3, r1
 800308e:	0e1b      	lsrs	r3, r3, #24
 8003090:	0010      	movs	r0, r2
 8003092:	0205      	lsls	r5, r0, #8
 8003094:	431d      	orrs	r5, r3
 8003096:	000b      	movs	r3, r1
 8003098:	021c      	lsls	r4, r3, #8
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68b8      	ldr	r0, [r7, #8]
 80030a8:	68f9      	ldr	r1, [r7, #12]
 80030aa:	1900      	adds	r0, r0, r4
 80030ac:	4169      	adcs	r1, r5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	2300      	movs	r3, #0
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f7fd f8b0 	bl	8000220 <__aeabi_uldivmod>
 80030c0:	0002      	movs	r2, r0
 80030c2:	000b      	movs	r3, r1
 80030c4:	0013      	movs	r3, r2
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ca:	23c0      	movs	r3, #192	; 0xc0
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d309      	bcc.n	80030e6 <UART_SetConfig+0x32a>
 80030d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	035b      	lsls	r3, r3, #13
 80030d8:	429a      	cmp	r2, r3
 80030da:	d204      	bcs.n	80030e6 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	e0f0      	b.n	80032c8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80030e6:	231a      	movs	r3, #26
 80030e8:	2218      	movs	r2, #24
 80030ea:	4694      	mov	ip, r2
 80030ec:	44bc      	add	ip, r7
 80030ee:	4463      	add	r3, ip
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e0e8      	b.n	80032c8 <UART_SetConfig+0x50c>
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	efff69f3 	.word	0xefff69f3
 80030fc:	ffffcfff 	.word	0xffffcfff
 8003100:	40004800 	.word	0x40004800
 8003104:	fffff4ff 	.word	0xfffff4ff
 8003108:	40013800 	.word	0x40013800
 800310c:	40021000 	.word	0x40021000
 8003110:	40004400 	.word	0x40004400
 8003114:	003d0900 	.word	0x003d0900
 8003118:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	429a      	cmp	r2, r3
 8003126:	d000      	beq.n	800312a <UART_SetConfig+0x36e>
 8003128:	e074      	b.n	8003214 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800312a:	231b      	movs	r3, #27
 800312c:	2218      	movs	r2, #24
 800312e:	4694      	mov	ip, r2
 8003130:	44bc      	add	ip, r7
 8003132:	4463      	add	r3, ip
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d822      	bhi.n	8003180 <UART_SetConfig+0x3c4>
 800313a:	009a      	lsls	r2, r3, #2
 800313c:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <UART_SetConfig+0x52c>)
 800313e:	18d3      	adds	r3, r2, r3
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003144:	f7ff fb3a 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 8003148:	0003      	movs	r3, r0
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800314c:	e022      	b.n	8003194 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800314e:	f7ff fb4b 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 8003152:	0003      	movs	r3, r0
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003156:	e01d      	b.n	8003194 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003158:	4b64      	ldr	r3, [pc, #400]	; (80032ec <UART_SetConfig+0x530>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2210      	movs	r2, #16
 800315e:	4013      	ands	r3, r2
 8003160:	d002      	beq.n	8003168 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <UART_SetConfig+0x534>)
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003166:	e015      	b.n	8003194 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8003168:	4b62      	ldr	r3, [pc, #392]	; (80032f4 <UART_SetConfig+0x538>)
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800316c:	e012      	b.n	8003194 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316e:	f7ff fa75 	bl	800265c <HAL_RCC_GetSysClockFreq>
 8003172:	0003      	movs	r3, r0
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003176:	e00d      	b.n	8003194 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800317e:	e009      	b.n	8003194 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003184:	231a      	movs	r3, #26
 8003186:	2218      	movs	r2, #24
 8003188:	4694      	mov	ip, r2
 800318a:	44bc      	add	ip, r7
 800318c:	4463      	add	r3, ip
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
        break;
 8003192:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d100      	bne.n	800319c <UART_SetConfig+0x3e0>
 800319a:	e095      	b.n	80032c8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	005a      	lsls	r2, r3, #1
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	18d2      	adds	r2, r2, r3
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0019      	movs	r1, r3
 80031ae:	0010      	movs	r0, r2
 80031b0:	f7fc ffaa 	bl	8000108 <__udivsi3>
 80031b4:	0003      	movs	r3, r0
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	2b0f      	cmp	r3, #15
 80031be:	d921      	bls.n	8003204 <UART_SetConfig+0x448>
 80031c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	025b      	lsls	r3, r3, #9
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d21c      	bcs.n	8003204 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	200e      	movs	r0, #14
 80031d0:	2418      	movs	r4, #24
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	181b      	adds	r3, r3, r0
 80031d6:	210f      	movs	r1, #15
 80031d8:	438a      	bics	r2, r1
 80031da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2207      	movs	r2, #7
 80031e4:	4013      	ands	r3, r2
 80031e6:	b299      	uxth	r1, r3
 80031e8:	193b      	adds	r3, r7, r4
 80031ea:	181b      	adds	r3, r3, r0
 80031ec:	193a      	adds	r2, r7, r4
 80031ee:	1812      	adds	r2, r2, r0
 80031f0:	8812      	ldrh	r2, [r2, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	193a      	adds	r2, r7, r4
 80031fc:	1812      	adds	r2, r2, r0
 80031fe:	8812      	ldrh	r2, [r2, #0]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	e061      	b.n	80032c8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003204:	231a      	movs	r3, #26
 8003206:	2218      	movs	r2, #24
 8003208:	4694      	mov	ip, r2
 800320a:	44bc      	add	ip, r7
 800320c:	4463      	add	r3, ip
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e059      	b.n	80032c8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003214:	231b      	movs	r3, #27
 8003216:	2218      	movs	r2, #24
 8003218:	4694      	mov	ip, r2
 800321a:	44bc      	add	ip, r7
 800321c:	4463      	add	r3, ip
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d822      	bhi.n	800326a <UART_SetConfig+0x4ae>
 8003224:	009a      	lsls	r2, r3, #2
 8003226:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <UART_SetConfig+0x53c>)
 8003228:	18d3      	adds	r3, r2, r3
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800322e:	f7ff fac5 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 8003232:	0003      	movs	r3, r0
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003236:	e022      	b.n	800327e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003238:	f7ff fad6 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 800323c:	0003      	movs	r3, r0
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003240:	e01d      	b.n	800327e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <UART_SetConfig+0x530>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2210      	movs	r2, #16
 8003248:	4013      	ands	r3, r2
 800324a:	d002      	beq.n	8003252 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <UART_SetConfig+0x534>)
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003250:	e015      	b.n	800327e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003252:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <UART_SetConfig+0x538>)
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003256:	e012      	b.n	800327e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003258:	f7ff fa00 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800325c:	0003      	movs	r3, r0
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003260:	e00d      	b.n	800327e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003268:	e009      	b.n	800327e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800326e:	231a      	movs	r3, #26
 8003270:	2218      	movs	r2, #24
 8003272:	4694      	mov	ip, r2
 8003274:	44bc      	add	ip, r7
 8003276:	4463      	add	r3, ip
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
        break;
 800327c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d021      	beq.n	80032c8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	085a      	lsrs	r2, r3, #1
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	18d2      	adds	r2, r2, r3
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	0019      	movs	r1, r3
 8003294:	0010      	movs	r0, r2
 8003296:	f7fc ff37 	bl	8000108 <__udivsi3>
 800329a:	0003      	movs	r3, r0
 800329c:	b29b      	uxth	r3, r3
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	2b0f      	cmp	r3, #15
 80032a4:	d909      	bls.n	80032ba <UART_SetConfig+0x4fe>
 80032a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	025b      	lsls	r3, r3, #9
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d204      	bcs.n	80032ba <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b6:	60da      	str	r2, [r3, #12]
 80032b8:	e006      	b.n	80032c8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80032ba:	231a      	movs	r3, #26
 80032bc:	2218      	movs	r2, #24
 80032be:	4694      	mov	ip, r2
 80032c0:	44bc      	add	ip, r7
 80032c2:	4463      	add	r3, ip
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2200      	movs	r2, #0
 80032cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	2200      	movs	r2, #0
 80032d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032d4:	231a      	movs	r3, #26
 80032d6:	2218      	movs	r2, #24
 80032d8:	4694      	mov	ip, r2
 80032da:	44bc      	add	ip, r7
 80032dc:	4463      	add	r3, ip
 80032de:	781b      	ldrb	r3, [r3, #0]
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b00e      	add	sp, #56	; 0x38
 80032e6:	bdb0      	pop	{r4, r5, r7, pc}
 80032e8:	08003d9c 	.word	0x08003d9c
 80032ec:	40021000 	.word	0x40021000
 80032f0:	003d0900 	.word	0x003d0900
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	08003dc0 	.word	0x08003dc0

080032fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
 800330c:	d00b      	beq.n	8003326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a4a      	ldr	r2, [pc, #296]	; (8003440 <UART_AdvFeatureConfig+0x144>)
 8003316:	4013      	ands	r3, r2
 8003318:	0019      	movs	r1, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2202      	movs	r2, #2
 800332c:	4013      	ands	r3, r2
 800332e:	d00b      	beq.n	8003348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4a43      	ldr	r2, [pc, #268]	; (8003444 <UART_AdvFeatureConfig+0x148>)
 8003338:	4013      	ands	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	2204      	movs	r2, #4
 800334e:	4013      	ands	r3, r2
 8003350:	d00b      	beq.n	800336a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a3b      	ldr	r2, [pc, #236]	; (8003448 <UART_AdvFeatureConfig+0x14c>)
 800335a:	4013      	ands	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2208      	movs	r2, #8
 8003370:	4013      	ands	r3, r2
 8003372:	d00b      	beq.n	800338c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a34      	ldr	r2, [pc, #208]	; (800344c <UART_AdvFeatureConfig+0x150>)
 800337c:	4013      	ands	r3, r2
 800337e:	0019      	movs	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	2210      	movs	r2, #16
 8003392:	4013      	ands	r3, r2
 8003394:	d00b      	beq.n	80033ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a2c      	ldr	r2, [pc, #176]	; (8003450 <UART_AdvFeatureConfig+0x154>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2220      	movs	r2, #32
 80033b4:	4013      	ands	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4a25      	ldr	r2, [pc, #148]	; (8003454 <UART_AdvFeatureConfig+0x158>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	2240      	movs	r2, #64	; 0x40
 80033d6:	4013      	ands	r3, r2
 80033d8:	d01d      	beq.n	8003416 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <UART_AdvFeatureConfig+0x15c>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	035b      	lsls	r3, r3, #13
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d10b      	bne.n	8003416 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a15      	ldr	r2, [pc, #84]	; (800345c <UART_AdvFeatureConfig+0x160>)
 8003406:	4013      	ands	r3, r2
 8003408:	0019      	movs	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	4013      	ands	r3, r2
 800341e:	d00b      	beq.n	8003438 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a0e      	ldr	r2, [pc, #56]	; (8003460 <UART_AdvFeatureConfig+0x164>)
 8003428:	4013      	ands	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }
}
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}
 8003440:	fffdffff 	.word	0xfffdffff
 8003444:	fffeffff 	.word	0xfffeffff
 8003448:	fffbffff 	.word	0xfffbffff
 800344c:	ffff7fff 	.word	0xffff7fff
 8003450:	ffffefff 	.word	0xffffefff
 8003454:	ffffdfff 	.word	0xffffdfff
 8003458:	ffefffff 	.word	0xffefffff
 800345c:	ff9fffff 	.word	0xff9fffff
 8003460:	fff7ffff 	.word	0xfff7ffff

08003464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af02      	add	r7, sp, #8
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	2100      	movs	r1, #0
 8003472:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003474:	f7fd fe7c 	bl	8001170 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2208      	movs	r2, #8
 8003484:	4013      	ands	r3, r2
 8003486:	2b08      	cmp	r3, #8
 8003488:	d10c      	bne.n	80034a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2280      	movs	r2, #128	; 0x80
 800348e:	0391      	lsls	r1, r2, #14
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <UART_CheckIdleState+0x8c>)
 8003494:	9200      	str	r2, [sp, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	f000 f82c 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d001      	beq.n	80034a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e021      	b.n	80034e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2204      	movs	r2, #4
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d10c      	bne.n	80034cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2280      	movs	r2, #128	; 0x80
 80034b6:	03d1      	lsls	r1, r2, #15
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <UART_CheckIdleState+0x8c>)
 80034bc:	9200      	str	r2, [sp, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	f000 f818 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 80034c4:	1e03      	subs	r3, r0, #0
 80034c6:	d001      	beq.n	80034cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e00d      	b.n	80034e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2274      	movs	r2, #116	; 0x74
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b004      	add	sp, #16
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	01ffffff 	.word	0x01ffffff

080034f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	1dfb      	adds	r3, r7, #7
 8003502:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003504:	e05e      	b.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	3301      	adds	r3, #1
 800350a:	d05b      	beq.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fd fe30 	bl	8001170 <HAL_GetTick>
 8003510:	0002      	movs	r2, r0
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <UART_WaitOnFlagUntilTimeout+0x2e>
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11b      	bne.n	800355a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	492f      	ldr	r1, [pc, #188]	; (80035ec <UART_WaitOnFlagUntilTimeout+0xf8>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2101      	movs	r1, #1
 800353e:	438a      	bics	r2, r1
 8003540:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2274      	movs	r2, #116	; 0x74
 8003552:	2100      	movs	r1, #0
 8003554:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e044      	b.n	80035e4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2204      	movs	r2, #4
 8003562:	4013      	ands	r3, r2
 8003564:	d02e      	beq.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	401a      	ands	r2, r3
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	429a      	cmp	r2, r3
 8003578:	d124      	bne.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4917      	ldr	r1, [pc, #92]	; (80035ec <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003590:	400a      	ands	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	438a      	bics	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	2120      	movs	r1, #32
 80035b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2274      	movs	r2, #116	; 0x74
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e00f      	b.n	80035e4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	425a      	negs	r2, r3
 80035d4:	4153      	adcs	r3, r2
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	001a      	movs	r2, r3
 80035da:	1dfb      	adds	r3, r7, #7
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d091      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	0018      	movs	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b004      	add	sp, #16
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	fffffe5f 	.word	0xfffffe5f

080035f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	1dbb      	adds	r3, r7, #6
 80035fc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1dba      	adds	r2, r7, #6
 8003608:	2158      	movs	r1, #88	; 0x58
 800360a:	8812      	ldrh	r2, [r2, #0]
 800360c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2280      	movs	r2, #128	; 0x80
 8003612:	2100      	movs	r1, #0
 8003614:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2222      	movs	r2, #34	; 0x22
 800361a:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	2b00      	cmp	r3, #0
 8003622:	d02b      	beq.n	800367c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <UART_Start_Receive_DMA+0xd0>)
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <UART_Start_Receive_DMA+0xd4>)
 8003632:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <UART_Start_Receive_DMA+0xd8>)
 800363a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	2200      	movs	r2, #0
 8003642:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3324      	adds	r3, #36	; 0x24
 800364e:	0019      	movs	r1, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003654:	001a      	movs	r2, r3
 8003656:	1dbb      	adds	r3, r7, #6
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	f7fd ff0d 	bl	8001478 <HAL_DMA_Start_IT>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d00c      	beq.n	800367c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	2110      	movs	r1, #16
 8003668:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2274      	movs	r2, #116	; 0x74
 800366e:	2100      	movs	r1, #0
 8003670:	5499      	strb	r1, [r3, r2]

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e01d      	b.n	80036b8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2274      	movs	r2, #116	; 0x74
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2180      	movs	r1, #128	; 0x80
 8003690:	0049      	lsls	r1, r1, #1
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2101      	movs	r1, #1
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2140      	movs	r1, #64	; 0x40
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	08003755 	.word	0x08003755
 80036c4:	080037f5 	.word	0x080037f5
 80036c8:	08003831 	.word	0x08003831

080036cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	21c0      	movs	r1, #192	; 0xc0
 80036e0:	438a      	bics	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	679a      	str	r2, [r3, #120]	; 0x78
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4912      	ldr	r1, [pc, #72]	; (8003750 <UART_EndRxTransfer+0x5c>)
 8003708:	400a      	ands	r2, r1
 800370a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2101      	movs	r1, #1
 8003718:	438a      	bics	r2, r1
 800371a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003720:	2b01      	cmp	r3, #1
 8003722:	d107      	bne.n	8003734 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2110      	movs	r1, #16
 8003730:	438a      	bics	r2, r1
 8003732:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	b002      	add	sp, #8
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	fffffedf 	.word	0xfffffedf

08003754 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2220      	movs	r2, #32
 800376a:	4013      	ands	r3, r2
 800376c:	d12a      	bne.n	80037c4 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	225a      	movs	r2, #90	; 0x5a
 8003772:	2100      	movs	r1, #0
 8003774:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	491b      	ldr	r1, [pc, #108]	; (80037f0 <UART_DMAReceiveCplt+0x9c>)
 8003782:	400a      	ands	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2101      	movs	r1, #1
 8003792:	438a      	bics	r2, r1
 8003794:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2140      	movs	r1, #64	; 0x40
 80037a2:	438a      	bics	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2110      	movs	r1, #16
 80037c0:	438a      	bics	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d108      	bne.n	80037de <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2258      	movs	r2, #88	; 0x58
 80037d0:	5a9a      	ldrh	r2, [r3, r2]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	0011      	movs	r1, r2
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7ff fae4 	bl	8002da4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037dc:	e003      	b.n	80037e6 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7fd f8ff 	bl	80009e4 <HAL_UART_RxCpltCallback>
}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b004      	add	sp, #16
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	fffffeff 	.word	0xfffffeff

080037f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10a      	bne.n	8003820 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2258      	movs	r2, #88	; 0x58
 800380e:	5a9b      	ldrh	r3, [r3, r2]
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f7ff fac3 	bl	8002da4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800381e:	e003      	b.n	8003828 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	0018      	movs	r0, r3
 8003824:	f7ff faae 	bl	8002d84 <HAL_UART_RxHalfCpltCallback>
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b004      	add	sp, #16
 800382e:	bd80      	pop	{r7, pc}

08003830 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003842:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003848:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2280      	movs	r2, #128	; 0x80
 8003852:	4013      	ands	r3, r2
 8003854:	2b80      	cmp	r3, #128	; 0x80
 8003856:	d10a      	bne.n	800386e <UART_DMAError+0x3e>
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b21      	cmp	r3, #33	; 0x21
 800385c:	d107      	bne.n	800386e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2252      	movs	r2, #82	; 0x52
 8003862:	2100      	movs	r1, #0
 8003864:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff ff2f 	bl	80036cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2240      	movs	r2, #64	; 0x40
 8003876:	4013      	ands	r3, r2
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d10a      	bne.n	8003892 <UART_DMAError+0x62>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b22      	cmp	r3, #34	; 0x22
 8003880:	d107      	bne.n	8003892 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	225a      	movs	r2, #90	; 0x5a
 8003886:	2100      	movs	r1, #0
 8003888:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	0018      	movs	r0, r3
 800388e:	f7ff ff31 	bl	80036f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2280      	movs	r2, #128	; 0x80
 8003896:	589b      	ldr	r3, [r3, r2]
 8003898:	2210      	movs	r2, #16
 800389a:	431a      	orrs	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7ff fa75 	bl	8002d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b006      	add	sp, #24
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <__errno>:
 80038b4:	4b01      	ldr	r3, [pc, #4]	; (80038bc <__errno+0x8>)
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	4770      	bx	lr
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	20000024 	.word	0x20000024

080038c0 <__libc_init_array>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	2600      	movs	r6, #0
 80038c4:	4d0c      	ldr	r5, [pc, #48]	; (80038f8 <__libc_init_array+0x38>)
 80038c6:	4c0d      	ldr	r4, [pc, #52]	; (80038fc <__libc_init_array+0x3c>)
 80038c8:	1b64      	subs	r4, r4, r5
 80038ca:	10a4      	asrs	r4, r4, #2
 80038cc:	42a6      	cmp	r6, r4
 80038ce:	d109      	bne.n	80038e4 <__libc_init_array+0x24>
 80038d0:	2600      	movs	r6, #0
 80038d2:	f000 f8cb 	bl	8003a6c <_init>
 80038d6:	4d0a      	ldr	r5, [pc, #40]	; (8003900 <__libc_init_array+0x40>)
 80038d8:	4c0a      	ldr	r4, [pc, #40]	; (8003904 <__libc_init_array+0x44>)
 80038da:	1b64      	subs	r4, r4, r5
 80038dc:	10a4      	asrs	r4, r4, #2
 80038de:	42a6      	cmp	r6, r4
 80038e0:	d105      	bne.n	80038ee <__libc_init_array+0x2e>
 80038e2:	bd70      	pop	{r4, r5, r6, pc}
 80038e4:	00b3      	lsls	r3, r6, #2
 80038e6:	58eb      	ldr	r3, [r5, r3]
 80038e8:	4798      	blx	r3
 80038ea:	3601      	adds	r6, #1
 80038ec:	e7ee      	b.n	80038cc <__libc_init_array+0xc>
 80038ee:	00b3      	lsls	r3, r6, #2
 80038f0:	58eb      	ldr	r3, [r5, r3]
 80038f2:	4798      	blx	r3
 80038f4:	3601      	adds	r6, #1
 80038f6:	e7f2      	b.n	80038de <__libc_init_array+0x1e>
 80038f8:	08003dec 	.word	0x08003dec
 80038fc:	08003dec 	.word	0x08003dec
 8003900:	08003dec 	.word	0x08003dec
 8003904:	08003df0 	.word	0x08003df0

08003908 <malloc>:
 8003908:	b510      	push	{r4, lr}
 800390a:	4b03      	ldr	r3, [pc, #12]	; (8003918 <malloc+0x10>)
 800390c:	0001      	movs	r1, r0
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	f000 f816 	bl	8003940 <_malloc_r>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	20000024 	.word	0x20000024

0800391c <memcpy>:
 800391c:	2300      	movs	r3, #0
 800391e:	b510      	push	{r4, lr}
 8003920:	429a      	cmp	r2, r3
 8003922:	d100      	bne.n	8003926 <memcpy+0xa>
 8003924:	bd10      	pop	{r4, pc}
 8003926:	5ccc      	ldrb	r4, [r1, r3]
 8003928:	54c4      	strb	r4, [r0, r3]
 800392a:	3301      	adds	r3, #1
 800392c:	e7f8      	b.n	8003920 <memcpy+0x4>

0800392e <memset>:
 800392e:	0003      	movs	r3, r0
 8003930:	1882      	adds	r2, r0, r2
 8003932:	4293      	cmp	r3, r2
 8003934:	d100      	bne.n	8003938 <memset+0xa>
 8003936:	4770      	bx	lr
 8003938:	7019      	strb	r1, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	e7f9      	b.n	8003932 <memset+0x4>
	...

08003940 <_malloc_r>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	2303      	movs	r3, #3
 8003944:	1ccd      	adds	r5, r1, #3
 8003946:	439d      	bics	r5, r3
 8003948:	3508      	adds	r5, #8
 800394a:	0006      	movs	r6, r0
 800394c:	2d0c      	cmp	r5, #12
 800394e:	d21f      	bcs.n	8003990 <_malloc_r+0x50>
 8003950:	250c      	movs	r5, #12
 8003952:	42a9      	cmp	r1, r5
 8003954:	d81e      	bhi.n	8003994 <_malloc_r+0x54>
 8003956:	0030      	movs	r0, r6
 8003958:	f000 f876 	bl	8003a48 <__malloc_lock>
 800395c:	4925      	ldr	r1, [pc, #148]	; (80039f4 <_malloc_r+0xb4>)
 800395e:	680a      	ldr	r2, [r1, #0]
 8003960:	0014      	movs	r4, r2
 8003962:	2c00      	cmp	r4, #0
 8003964:	d11a      	bne.n	800399c <_malloc_r+0x5c>
 8003966:	4f24      	ldr	r7, [pc, #144]	; (80039f8 <_malloc_r+0xb8>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <_malloc_r+0x38>
 800396e:	0021      	movs	r1, r4
 8003970:	0030      	movs	r0, r6
 8003972:	f000 f843 	bl	80039fc <_sbrk_r>
 8003976:	6038      	str	r0, [r7, #0]
 8003978:	0029      	movs	r1, r5
 800397a:	0030      	movs	r0, r6
 800397c:	f000 f83e 	bl	80039fc <_sbrk_r>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d12b      	bne.n	80039dc <_malloc_r+0x9c>
 8003984:	230c      	movs	r3, #12
 8003986:	0030      	movs	r0, r6
 8003988:	6033      	str	r3, [r6, #0]
 800398a:	f000 f865 	bl	8003a58 <__malloc_unlock>
 800398e:	e003      	b.n	8003998 <_malloc_r+0x58>
 8003990:	2d00      	cmp	r5, #0
 8003992:	dade      	bge.n	8003952 <_malloc_r+0x12>
 8003994:	230c      	movs	r3, #12
 8003996:	6033      	str	r3, [r6, #0]
 8003998:	2000      	movs	r0, #0
 800399a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	1b5b      	subs	r3, r3, r5
 80039a0:	d419      	bmi.n	80039d6 <_malloc_r+0x96>
 80039a2:	2b0b      	cmp	r3, #11
 80039a4:	d903      	bls.n	80039ae <_malloc_r+0x6e>
 80039a6:	6023      	str	r3, [r4, #0]
 80039a8:	18e4      	adds	r4, r4, r3
 80039aa:	6025      	str	r5, [r4, #0]
 80039ac:	e003      	b.n	80039b6 <_malloc_r+0x76>
 80039ae:	6863      	ldr	r3, [r4, #4]
 80039b0:	42a2      	cmp	r2, r4
 80039b2:	d10e      	bne.n	80039d2 <_malloc_r+0x92>
 80039b4:	600b      	str	r3, [r1, #0]
 80039b6:	0030      	movs	r0, r6
 80039b8:	f000 f84e 	bl	8003a58 <__malloc_unlock>
 80039bc:	0020      	movs	r0, r4
 80039be:	2207      	movs	r2, #7
 80039c0:	300b      	adds	r0, #11
 80039c2:	1d23      	adds	r3, r4, #4
 80039c4:	4390      	bics	r0, r2
 80039c6:	1ac2      	subs	r2, r0, r3
 80039c8:	4298      	cmp	r0, r3
 80039ca:	d0e6      	beq.n	800399a <_malloc_r+0x5a>
 80039cc:	1a1b      	subs	r3, r3, r0
 80039ce:	50a3      	str	r3, [r4, r2]
 80039d0:	e7e3      	b.n	800399a <_malloc_r+0x5a>
 80039d2:	6053      	str	r3, [r2, #4]
 80039d4:	e7ef      	b.n	80039b6 <_malloc_r+0x76>
 80039d6:	0022      	movs	r2, r4
 80039d8:	6864      	ldr	r4, [r4, #4]
 80039da:	e7c2      	b.n	8003962 <_malloc_r+0x22>
 80039dc:	2303      	movs	r3, #3
 80039de:	1cc4      	adds	r4, r0, #3
 80039e0:	439c      	bics	r4, r3
 80039e2:	42a0      	cmp	r0, r4
 80039e4:	d0e1      	beq.n	80039aa <_malloc_r+0x6a>
 80039e6:	1a21      	subs	r1, r4, r0
 80039e8:	0030      	movs	r0, r6
 80039ea:	f000 f807 	bl	80039fc <_sbrk_r>
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	d1db      	bne.n	80039aa <_malloc_r+0x6a>
 80039f2:	e7c7      	b.n	8003984 <_malloc_r+0x44>
 80039f4:	20000334 	.word	0x20000334
 80039f8:	20000338 	.word	0x20000338

080039fc <_sbrk_r>:
 80039fc:	2300      	movs	r3, #0
 80039fe:	b570      	push	{r4, r5, r6, lr}
 8003a00:	4d06      	ldr	r5, [pc, #24]	; (8003a1c <_sbrk_r+0x20>)
 8003a02:	0004      	movs	r4, r0
 8003a04:	0008      	movs	r0, r1
 8003a06:	602b      	str	r3, [r5, #0]
 8003a08:	f7fd f9e2 	bl	8000dd0 <_sbrk>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d103      	bne.n	8003a18 <_sbrk_r+0x1c>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d000      	beq.n	8003a18 <_sbrk_r+0x1c>
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	20000564 	.word	0x20000564

08003a20 <strncpy>:
 8003a20:	0003      	movs	r3, r0
 8003a22:	b530      	push	{r4, r5, lr}
 8003a24:	001d      	movs	r5, r3
 8003a26:	2a00      	cmp	r2, #0
 8003a28:	d006      	beq.n	8003a38 <strncpy+0x18>
 8003a2a:	780c      	ldrb	r4, [r1, #0]
 8003a2c:	3a01      	subs	r2, #1
 8003a2e:	3301      	adds	r3, #1
 8003a30:	702c      	strb	r4, [r5, #0]
 8003a32:	3101      	adds	r1, #1
 8003a34:	2c00      	cmp	r4, #0
 8003a36:	d1f5      	bne.n	8003a24 <strncpy+0x4>
 8003a38:	2100      	movs	r1, #0
 8003a3a:	189a      	adds	r2, r3, r2
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d100      	bne.n	8003a42 <strncpy+0x22>
 8003a40:	bd30      	pop	{r4, r5, pc}
 8003a42:	7019      	strb	r1, [r3, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	e7f9      	b.n	8003a3c <strncpy+0x1c>

08003a48 <__malloc_lock>:
 8003a48:	b510      	push	{r4, lr}
 8003a4a:	4802      	ldr	r0, [pc, #8]	; (8003a54 <__malloc_lock+0xc>)
 8003a4c:	f000 f80c 	bl	8003a68 <__retarget_lock_acquire_recursive>
 8003a50:	bd10      	pop	{r4, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	2000056c 	.word	0x2000056c

08003a58 <__malloc_unlock>:
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4802      	ldr	r0, [pc, #8]	; (8003a64 <__malloc_unlock+0xc>)
 8003a5c:	f000 f805 	bl	8003a6a <__retarget_lock_release_recursive>
 8003a60:	bd10      	pop	{r4, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	2000056c 	.word	0x2000056c

08003a68 <__retarget_lock_acquire_recursive>:
 8003a68:	4770      	bx	lr

08003a6a <__retarget_lock_release_recursive>:
 8003a6a:	4770      	bx	lr

08003a6c <_init>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr

08003a78 <_fini>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr
