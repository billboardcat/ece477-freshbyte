
ece477-nucleo-integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cef4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002708  0800cfb4  0800cfb4  0001cfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6bc  0800f6bc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6bc  0800f6bc  0001f6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6c4  0800f6c4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6c4  0800f6c4  0001f6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6c8  0800f6c8  0001f6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800f6cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000090  0800f75c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  0800f75c  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d422  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004872  00000000  00000000  0003d4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  00041d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  000434e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198e4  00000000  00000000  00044a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e519  00000000  00000000  0005e37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2c8  00000000  00000000  0007c895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ab5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  0010abb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cf9c 	.word	0x0800cf9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	0800cf9c 	.word	0x0800cf9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 ff4d 	bl	80020d0 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fe97 	bl	8001f74 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 ff3f 	bl	80020d0 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 ff35 	bl	80020d0 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 feb9 	bl	8001fec <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 feaf 	bl	8001fec <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fc81 	bl	8000bac <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 fc05 	bl	8000ac4 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fc73 	bl	8000bac <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fc69 	bl	8000bac <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fc13 	bl	8000b14 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fc09 	bl	8000b14 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_uldivmod>:
 8000310:	2b00      	cmp	r3, #0
 8000312:	d111      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000314:	2a00      	cmp	r2, #0
 8000316:	d10f      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000318:	2900      	cmp	r1, #0
 800031a:	d100      	bne.n	800031e <__aeabi_uldivmod+0xe>
 800031c:	2800      	cmp	r0, #0
 800031e:	d002      	beq.n	8000326 <__aeabi_uldivmod+0x16>
 8000320:	2100      	movs	r1, #0
 8000322:	43c9      	mvns	r1, r1
 8000324:	1c08      	adds	r0, r1, #0
 8000326:	b407      	push	{r0, r1, r2}
 8000328:	4802      	ldr	r0, [pc, #8]	; (8000334 <__aeabi_uldivmod+0x24>)
 800032a:	a102      	add	r1, pc, #8	; (adr r1, 8000334 <__aeabi_uldivmod+0x24>)
 800032c:	1840      	adds	r0, r0, r1
 800032e:	9002      	str	r0, [sp, #8]
 8000330:	bd03      	pop	{r0, r1, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	fffffee9 	.word	0xfffffee9
 8000338:	b403      	push	{r0, r1}
 800033a:	4668      	mov	r0, sp
 800033c:	b501      	push	{r0, lr}
 800033e:	9802      	ldr	r0, [sp, #8]
 8000340:	f000 f84c 	bl	80003dc <__udivmoddi4>
 8000344:	9b01      	ldr	r3, [sp, #4]
 8000346:	469e      	mov	lr, r3
 8000348:	b002      	add	sp, #8
 800034a:	bc0c      	pop	{r2, r3}
 800034c:	4770      	bx	lr
 800034e:	46c0      	nop			; (mov r8, r8)

08000350 <__aeabi_lmul>:
 8000350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000352:	0415      	lsls	r5, r2, #16
 8000354:	0c2d      	lsrs	r5, r5, #16
 8000356:	000f      	movs	r7, r1
 8000358:	0001      	movs	r1, r0
 800035a:	002e      	movs	r6, r5
 800035c:	46c6      	mov	lr, r8
 800035e:	4684      	mov	ip, r0
 8000360:	0400      	lsls	r0, r0, #16
 8000362:	0c14      	lsrs	r4, r2, #16
 8000364:	0c00      	lsrs	r0, r0, #16
 8000366:	0c09      	lsrs	r1, r1, #16
 8000368:	4346      	muls	r6, r0
 800036a:	434d      	muls	r5, r1
 800036c:	4360      	muls	r0, r4
 800036e:	4361      	muls	r1, r4
 8000370:	1940      	adds	r0, r0, r5
 8000372:	0c34      	lsrs	r4, r6, #16
 8000374:	1824      	adds	r4, r4, r0
 8000376:	b500      	push	{lr}
 8000378:	42a5      	cmp	r5, r4
 800037a:	d903      	bls.n	8000384 <__aeabi_lmul+0x34>
 800037c:	2080      	movs	r0, #128	; 0x80
 800037e:	0240      	lsls	r0, r0, #9
 8000380:	4680      	mov	r8, r0
 8000382:	4441      	add	r1, r8
 8000384:	0c25      	lsrs	r5, r4, #16
 8000386:	186d      	adds	r5, r5, r1
 8000388:	4661      	mov	r1, ip
 800038a:	4359      	muls	r1, r3
 800038c:	437a      	muls	r2, r7
 800038e:	0430      	lsls	r0, r6, #16
 8000390:	1949      	adds	r1, r1, r5
 8000392:	0424      	lsls	r4, r4, #16
 8000394:	0c00      	lsrs	r0, r0, #16
 8000396:	1820      	adds	r0, r4, r0
 8000398:	1889      	adds	r1, r1, r2
 800039a:	bc80      	pop	{r7}
 800039c:	46b8      	mov	r8, r7
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080003a0 <__aeabi_d2uiz>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	2200      	movs	r2, #0
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <__aeabi_d2uiz+0x38>)
 80003a6:	0004      	movs	r4, r0
 80003a8:	000d      	movs	r5, r1
 80003aa:	f7ff ff6d 	bl	8000288 <__aeabi_dcmpge>
 80003ae:	2800      	cmp	r0, #0
 80003b0:	d104      	bne.n	80003bc <__aeabi_d2uiz+0x1c>
 80003b2:	0020      	movs	r0, r4
 80003b4:	0029      	movs	r1, r5
 80003b6:	f002 fcf9 	bl	8002dac <__aeabi_d2iz>
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <__aeabi_d2uiz+0x38>)
 80003be:	2200      	movs	r2, #0
 80003c0:	0020      	movs	r0, r4
 80003c2:	0029      	movs	r1, r5
 80003c4:	f002 f960 	bl	8002688 <__aeabi_dsub>
 80003c8:	f002 fcf0 	bl	8002dac <__aeabi_d2iz>
 80003cc:	2380      	movs	r3, #128	; 0x80
 80003ce:	061b      	lsls	r3, r3, #24
 80003d0:	469c      	mov	ip, r3
 80003d2:	4460      	add	r0, ip
 80003d4:	e7f1      	b.n	80003ba <__aeabi_d2uiz+0x1a>
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	41e00000 	.word	0x41e00000

080003dc <__udivmoddi4>:
 80003dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003de:	4657      	mov	r7, sl
 80003e0:	464e      	mov	r6, r9
 80003e2:	4645      	mov	r5, r8
 80003e4:	46de      	mov	lr, fp
 80003e6:	b5e0      	push	{r5, r6, r7, lr}
 80003e8:	0004      	movs	r4, r0
 80003ea:	000d      	movs	r5, r1
 80003ec:	4692      	mov	sl, r2
 80003ee:	4699      	mov	r9, r3
 80003f0:	b083      	sub	sp, #12
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d830      	bhi.n	8000458 <__udivmoddi4+0x7c>
 80003f6:	d02d      	beq.n	8000454 <__udivmoddi4+0x78>
 80003f8:	4649      	mov	r1, r9
 80003fa:	4650      	mov	r0, sl
 80003fc:	f002 fe50 	bl	80030a0 <__clzdi2>
 8000400:	0029      	movs	r1, r5
 8000402:	0006      	movs	r6, r0
 8000404:	0020      	movs	r0, r4
 8000406:	f002 fe4b 	bl	80030a0 <__clzdi2>
 800040a:	1a33      	subs	r3, r6, r0
 800040c:	4698      	mov	r8, r3
 800040e:	3b20      	subs	r3, #32
 8000410:	469b      	mov	fp, r3
 8000412:	d433      	bmi.n	800047c <__udivmoddi4+0xa0>
 8000414:	465a      	mov	r2, fp
 8000416:	4653      	mov	r3, sl
 8000418:	4093      	lsls	r3, r2
 800041a:	4642      	mov	r2, r8
 800041c:	001f      	movs	r7, r3
 800041e:	4653      	mov	r3, sl
 8000420:	4093      	lsls	r3, r2
 8000422:	001e      	movs	r6, r3
 8000424:	42af      	cmp	r7, r5
 8000426:	d83a      	bhi.n	800049e <__udivmoddi4+0xc2>
 8000428:	42af      	cmp	r7, r5
 800042a:	d100      	bne.n	800042e <__udivmoddi4+0x52>
 800042c:	e078      	b.n	8000520 <__udivmoddi4+0x144>
 800042e:	465b      	mov	r3, fp
 8000430:	1ba4      	subs	r4, r4, r6
 8000432:	41bd      	sbcs	r5, r7
 8000434:	2b00      	cmp	r3, #0
 8000436:	da00      	bge.n	800043a <__udivmoddi4+0x5e>
 8000438:	e075      	b.n	8000526 <__udivmoddi4+0x14a>
 800043a:	2200      	movs	r2, #0
 800043c:	2300      	movs	r3, #0
 800043e:	9200      	str	r2, [sp, #0]
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	2301      	movs	r3, #1
 8000444:	465a      	mov	r2, fp
 8000446:	4093      	lsls	r3, r2
 8000448:	9301      	str	r3, [sp, #4]
 800044a:	2301      	movs	r3, #1
 800044c:	4642      	mov	r2, r8
 800044e:	4093      	lsls	r3, r2
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	e028      	b.n	80004a6 <__udivmoddi4+0xca>
 8000454:	4282      	cmp	r2, r0
 8000456:	d9cf      	bls.n	80003f8 <__udivmoddi4+0x1c>
 8000458:	2200      	movs	r2, #0
 800045a:	2300      	movs	r3, #0
 800045c:	9200      	str	r2, [sp, #0]
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <__udivmoddi4+0x8e>
 8000466:	601c      	str	r4, [r3, #0]
 8000468:	605d      	str	r5, [r3, #4]
 800046a:	9800      	ldr	r0, [sp, #0]
 800046c:	9901      	ldr	r1, [sp, #4]
 800046e:	b003      	add	sp, #12
 8000470:	bcf0      	pop	{r4, r5, r6, r7}
 8000472:	46bb      	mov	fp, r7
 8000474:	46b2      	mov	sl, r6
 8000476:	46a9      	mov	r9, r5
 8000478:	46a0      	mov	r8, r4
 800047a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800047c:	4642      	mov	r2, r8
 800047e:	2320      	movs	r3, #32
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	4652      	mov	r2, sl
 8000484:	40da      	lsrs	r2, r3
 8000486:	4641      	mov	r1, r8
 8000488:	0013      	movs	r3, r2
 800048a:	464a      	mov	r2, r9
 800048c:	408a      	lsls	r2, r1
 800048e:	0017      	movs	r7, r2
 8000490:	4642      	mov	r2, r8
 8000492:	431f      	orrs	r7, r3
 8000494:	4653      	mov	r3, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	001e      	movs	r6, r3
 800049a:	42af      	cmp	r7, r5
 800049c:	d9c4      	bls.n	8000428 <__udivmoddi4+0x4c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	4643      	mov	r3, r8
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0d9      	beq.n	8000460 <__udivmoddi4+0x84>
 80004ac:	07fb      	lsls	r3, r7, #31
 80004ae:	0872      	lsrs	r2, r6, #1
 80004b0:	431a      	orrs	r2, r3
 80004b2:	4646      	mov	r6, r8
 80004b4:	087b      	lsrs	r3, r7, #1
 80004b6:	e00e      	b.n	80004d6 <__udivmoddi4+0xfa>
 80004b8:	42ab      	cmp	r3, r5
 80004ba:	d101      	bne.n	80004c0 <__udivmoddi4+0xe4>
 80004bc:	42a2      	cmp	r2, r4
 80004be:	d80c      	bhi.n	80004da <__udivmoddi4+0xfe>
 80004c0:	1aa4      	subs	r4, r4, r2
 80004c2:	419d      	sbcs	r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	1924      	adds	r4, r4, r4
 80004c8:	416d      	adcs	r5, r5
 80004ca:	2100      	movs	r1, #0
 80004cc:	3e01      	subs	r6, #1
 80004ce:	1824      	adds	r4, r4, r0
 80004d0:	414d      	adcs	r5, r1
 80004d2:	2e00      	cmp	r6, #0
 80004d4:	d006      	beq.n	80004e4 <__udivmoddi4+0x108>
 80004d6:	42ab      	cmp	r3, r5
 80004d8:	d9ee      	bls.n	80004b8 <__udivmoddi4+0xdc>
 80004da:	3e01      	subs	r6, #1
 80004dc:	1924      	adds	r4, r4, r4
 80004de:	416d      	adcs	r5, r5
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d1f8      	bne.n	80004d6 <__udivmoddi4+0xfa>
 80004e4:	9800      	ldr	r0, [sp, #0]
 80004e6:	9901      	ldr	r1, [sp, #4]
 80004e8:	465b      	mov	r3, fp
 80004ea:	1900      	adds	r0, r0, r4
 80004ec:	4169      	adcs	r1, r5
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	db24      	blt.n	800053c <__udivmoddi4+0x160>
 80004f2:	002b      	movs	r3, r5
 80004f4:	465a      	mov	r2, fp
 80004f6:	4644      	mov	r4, r8
 80004f8:	40d3      	lsrs	r3, r2
 80004fa:	002a      	movs	r2, r5
 80004fc:	40e2      	lsrs	r2, r4
 80004fe:	001c      	movs	r4, r3
 8000500:	465b      	mov	r3, fp
 8000502:	0015      	movs	r5, r2
 8000504:	2b00      	cmp	r3, #0
 8000506:	db2a      	blt.n	800055e <__udivmoddi4+0x182>
 8000508:	0026      	movs	r6, r4
 800050a:	409e      	lsls	r6, r3
 800050c:	0033      	movs	r3, r6
 800050e:	0026      	movs	r6, r4
 8000510:	4647      	mov	r7, r8
 8000512:	40be      	lsls	r6, r7
 8000514:	0032      	movs	r2, r6
 8000516:	1a80      	subs	r0, r0, r2
 8000518:	4199      	sbcs	r1, r3
 800051a:	9000      	str	r0, [sp, #0]
 800051c:	9101      	str	r1, [sp, #4]
 800051e:	e79f      	b.n	8000460 <__udivmoddi4+0x84>
 8000520:	42a3      	cmp	r3, r4
 8000522:	d8bc      	bhi.n	800049e <__udivmoddi4+0xc2>
 8000524:	e783      	b.n	800042e <__udivmoddi4+0x52>
 8000526:	4642      	mov	r2, r8
 8000528:	2320      	movs	r3, #32
 800052a:	2100      	movs	r1, #0
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	2200      	movs	r2, #0
 8000530:	9100      	str	r1, [sp, #0]
 8000532:	9201      	str	r2, [sp, #4]
 8000534:	2201      	movs	r2, #1
 8000536:	40da      	lsrs	r2, r3
 8000538:	9201      	str	r2, [sp, #4]
 800053a:	e786      	b.n	800044a <__udivmoddi4+0x6e>
 800053c:	4642      	mov	r2, r8
 800053e:	2320      	movs	r3, #32
 8000540:	1a9b      	subs	r3, r3, r2
 8000542:	002a      	movs	r2, r5
 8000544:	4646      	mov	r6, r8
 8000546:	409a      	lsls	r2, r3
 8000548:	0023      	movs	r3, r4
 800054a:	40f3      	lsrs	r3, r6
 800054c:	4644      	mov	r4, r8
 800054e:	4313      	orrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	dad4      	bge.n	8000508 <__udivmoddi4+0x12c>
 800055e:	4642      	mov	r2, r8
 8000560:	002f      	movs	r7, r5
 8000562:	2320      	movs	r3, #32
 8000564:	0026      	movs	r6, r4
 8000566:	4097      	lsls	r7, r2
 8000568:	1a9b      	subs	r3, r3, r2
 800056a:	40de      	lsrs	r6, r3
 800056c:	003b      	movs	r3, r7
 800056e:	4333      	orrs	r3, r6
 8000570:	e7cd      	b.n	800050e <__udivmoddi4+0x132>
 8000572:	46c0      	nop			; (mov r8, r8)

08000574 <__aeabi_fadd>:
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	4646      	mov	r6, r8
 8000578:	46d6      	mov	lr, sl
 800057a:	464f      	mov	r7, r9
 800057c:	024d      	lsls	r5, r1, #9
 800057e:	0242      	lsls	r2, r0, #9
 8000580:	b5c0      	push	{r6, r7, lr}
 8000582:	0a52      	lsrs	r2, r2, #9
 8000584:	0a6e      	lsrs	r6, r5, #9
 8000586:	0047      	lsls	r7, r0, #1
 8000588:	46b0      	mov	r8, r6
 800058a:	0e3f      	lsrs	r7, r7, #24
 800058c:	004e      	lsls	r6, r1, #1
 800058e:	0fc4      	lsrs	r4, r0, #31
 8000590:	00d0      	lsls	r0, r2, #3
 8000592:	4694      	mov	ip, r2
 8000594:	003b      	movs	r3, r7
 8000596:	4682      	mov	sl, r0
 8000598:	0e36      	lsrs	r6, r6, #24
 800059a:	0fc9      	lsrs	r1, r1, #31
 800059c:	09ad      	lsrs	r5, r5, #6
 800059e:	428c      	cmp	r4, r1
 80005a0:	d06d      	beq.n	800067e <__aeabi_fadd+0x10a>
 80005a2:	1bb8      	subs	r0, r7, r6
 80005a4:	4681      	mov	r9, r0
 80005a6:	2800      	cmp	r0, #0
 80005a8:	dd4d      	ble.n	8000646 <__aeabi_fadd+0xd2>
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d100      	bne.n	80005b0 <__aeabi_fadd+0x3c>
 80005ae:	e088      	b.n	80006c2 <__aeabi_fadd+0x14e>
 80005b0:	2fff      	cmp	r7, #255	; 0xff
 80005b2:	d05a      	beq.n	800066a <__aeabi_fadd+0xf6>
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	04db      	lsls	r3, r3, #19
 80005b8:	431d      	orrs	r5, r3
 80005ba:	464b      	mov	r3, r9
 80005bc:	2201      	movs	r2, #1
 80005be:	2b1b      	cmp	r3, #27
 80005c0:	dc0a      	bgt.n	80005d8 <__aeabi_fadd+0x64>
 80005c2:	002b      	movs	r3, r5
 80005c4:	464a      	mov	r2, r9
 80005c6:	4649      	mov	r1, r9
 80005c8:	40d3      	lsrs	r3, r2
 80005ca:	2220      	movs	r2, #32
 80005cc:	1a52      	subs	r2, r2, r1
 80005ce:	4095      	lsls	r5, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	1e55      	subs	r5, r2, #1
 80005d4:	41aa      	sbcs	r2, r5
 80005d6:	431a      	orrs	r2, r3
 80005d8:	4653      	mov	r3, sl
 80005da:	1a9a      	subs	r2, r3, r2
 80005dc:	0153      	lsls	r3, r2, #5
 80005de:	d400      	bmi.n	80005e2 <__aeabi_fadd+0x6e>
 80005e0:	e0b9      	b.n	8000756 <__aeabi_fadd+0x1e2>
 80005e2:	0192      	lsls	r2, r2, #6
 80005e4:	0996      	lsrs	r6, r2, #6
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fd3c 	bl	8003064 <__clzsi2>
 80005ec:	3805      	subs	r0, #5
 80005ee:	4086      	lsls	r6, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	dd00      	ble.n	80005f6 <__aeabi_fadd+0x82>
 80005f4:	e0d4      	b.n	80007a0 <__aeabi_fadd+0x22c>
 80005f6:	0033      	movs	r3, r6
 80005f8:	1bc7      	subs	r7, r0, r7
 80005fa:	2020      	movs	r0, #32
 80005fc:	3701      	adds	r7, #1
 80005fe:	40fb      	lsrs	r3, r7
 8000600:	1bc7      	subs	r7, r0, r7
 8000602:	40be      	lsls	r6, r7
 8000604:	0032      	movs	r2, r6
 8000606:	1e56      	subs	r6, r2, #1
 8000608:	41b2      	sbcs	r2, r6
 800060a:	2700      	movs	r7, #0
 800060c:	431a      	orrs	r2, r3
 800060e:	0753      	lsls	r3, r2, #29
 8000610:	d004      	beq.n	800061c <__aeabi_fadd+0xa8>
 8000612:	230f      	movs	r3, #15
 8000614:	4013      	ands	r3, r2
 8000616:	2b04      	cmp	r3, #4
 8000618:	d000      	beq.n	800061c <__aeabi_fadd+0xa8>
 800061a:	3204      	adds	r2, #4
 800061c:	0153      	lsls	r3, r2, #5
 800061e:	d400      	bmi.n	8000622 <__aeabi_fadd+0xae>
 8000620:	e09c      	b.n	800075c <__aeabi_fadd+0x1e8>
 8000622:	1c7b      	adds	r3, r7, #1
 8000624:	2ffe      	cmp	r7, #254	; 0xfe
 8000626:	d100      	bne.n	800062a <__aeabi_fadd+0xb6>
 8000628:	e09a      	b.n	8000760 <__aeabi_fadd+0x1ec>
 800062a:	0192      	lsls	r2, r2, #6
 800062c:	0a52      	lsrs	r2, r2, #9
 800062e:	4694      	mov	ip, r2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	05d8      	lsls	r0, r3, #23
 8000634:	4663      	mov	r3, ip
 8000636:	07e4      	lsls	r4, r4, #31
 8000638:	4318      	orrs	r0, r3
 800063a:	4320      	orrs	r0, r4
 800063c:	bce0      	pop	{r5, r6, r7}
 800063e:	46ba      	mov	sl, r7
 8000640:	46b1      	mov	r9, r6
 8000642:	46a8      	mov	r8, r5
 8000644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000646:	2800      	cmp	r0, #0
 8000648:	d049      	beq.n	80006de <__aeabi_fadd+0x16a>
 800064a:	1bf3      	subs	r3, r6, r7
 800064c:	2f00      	cmp	r7, #0
 800064e:	d000      	beq.n	8000652 <__aeabi_fadd+0xde>
 8000650:	e0b6      	b.n	80007c0 <__aeabi_fadd+0x24c>
 8000652:	4652      	mov	r2, sl
 8000654:	2a00      	cmp	r2, #0
 8000656:	d060      	beq.n	800071a <__aeabi_fadd+0x1a6>
 8000658:	3b01      	subs	r3, #1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_fadd+0xec>
 800065e:	e0fc      	b.n	800085a <__aeabi_fadd+0x2e6>
 8000660:	2eff      	cmp	r6, #255	; 0xff
 8000662:	d000      	beq.n	8000666 <__aeabi_fadd+0xf2>
 8000664:	e0b4      	b.n	80007d0 <__aeabi_fadd+0x25c>
 8000666:	000c      	movs	r4, r1
 8000668:	4642      	mov	r2, r8
 800066a:	2a00      	cmp	r2, #0
 800066c:	d078      	beq.n	8000760 <__aeabi_fadd+0x1ec>
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	03c0      	lsls	r0, r0, #15
 8000672:	4310      	orrs	r0, r2
 8000674:	0242      	lsls	r2, r0, #9
 8000676:	0a53      	lsrs	r3, r2, #9
 8000678:	469c      	mov	ip, r3
 800067a:	23ff      	movs	r3, #255	; 0xff
 800067c:	e7d9      	b.n	8000632 <__aeabi_fadd+0xbe>
 800067e:	1bb9      	subs	r1, r7, r6
 8000680:	2900      	cmp	r1, #0
 8000682:	dd71      	ble.n	8000768 <__aeabi_fadd+0x1f4>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d03f      	beq.n	8000708 <__aeabi_fadd+0x194>
 8000688:	2fff      	cmp	r7, #255	; 0xff
 800068a:	d0ee      	beq.n	800066a <__aeabi_fadd+0xf6>
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	04db      	lsls	r3, r3, #19
 8000690:	431d      	orrs	r5, r3
 8000692:	2201      	movs	r2, #1
 8000694:	291b      	cmp	r1, #27
 8000696:	dc07      	bgt.n	80006a8 <__aeabi_fadd+0x134>
 8000698:	002a      	movs	r2, r5
 800069a:	2320      	movs	r3, #32
 800069c:	40ca      	lsrs	r2, r1
 800069e:	1a59      	subs	r1, r3, r1
 80006a0:	408d      	lsls	r5, r1
 80006a2:	1e6b      	subs	r3, r5, #1
 80006a4:	419d      	sbcs	r5, r3
 80006a6:	432a      	orrs	r2, r5
 80006a8:	4452      	add	r2, sl
 80006aa:	0153      	lsls	r3, r2, #5
 80006ac:	d553      	bpl.n	8000756 <__aeabi_fadd+0x1e2>
 80006ae:	3701      	adds	r7, #1
 80006b0:	2fff      	cmp	r7, #255	; 0xff
 80006b2:	d055      	beq.n	8000760 <__aeabi_fadd+0x1ec>
 80006b4:	2301      	movs	r3, #1
 80006b6:	497b      	ldr	r1, [pc, #492]	; (80008a4 <__aeabi_fadd+0x330>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	0852      	lsrs	r2, r2, #1
 80006bc:	400a      	ands	r2, r1
 80006be:	431a      	orrs	r2, r3
 80006c0:	e7a5      	b.n	800060e <__aeabi_fadd+0x9a>
 80006c2:	2d00      	cmp	r5, #0
 80006c4:	d02c      	beq.n	8000720 <__aeabi_fadd+0x1ac>
 80006c6:	2301      	movs	r3, #1
 80006c8:	425b      	negs	r3, r3
 80006ca:	469c      	mov	ip, r3
 80006cc:	44e1      	add	r9, ip
 80006ce:	464b      	mov	r3, r9
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_fadd+0x162>
 80006d4:	e0ad      	b.n	8000832 <__aeabi_fadd+0x2be>
 80006d6:	2fff      	cmp	r7, #255	; 0xff
 80006d8:	d000      	beq.n	80006dc <__aeabi_fadd+0x168>
 80006da:	e76e      	b.n	80005ba <__aeabi_fadd+0x46>
 80006dc:	e7c5      	b.n	800066a <__aeabi_fadd+0xf6>
 80006de:	20fe      	movs	r0, #254	; 0xfe
 80006e0:	1c7e      	adds	r6, r7, #1
 80006e2:	4230      	tst	r0, r6
 80006e4:	d160      	bne.n	80007a8 <__aeabi_fadd+0x234>
 80006e6:	2f00      	cmp	r7, #0
 80006e8:	d000      	beq.n	80006ec <__aeabi_fadd+0x178>
 80006ea:	e093      	b.n	8000814 <__aeabi_fadd+0x2a0>
 80006ec:	4652      	mov	r2, sl
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fadd+0x180>
 80006f2:	e0b6      	b.n	8000862 <__aeabi_fadd+0x2ee>
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d09c      	beq.n	8000632 <__aeabi_fadd+0xbe>
 80006f8:	1b52      	subs	r2, r2, r5
 80006fa:	0150      	lsls	r0, r2, #5
 80006fc:	d400      	bmi.n	8000700 <__aeabi_fadd+0x18c>
 80006fe:	e0c3      	b.n	8000888 <__aeabi_fadd+0x314>
 8000700:	4653      	mov	r3, sl
 8000702:	000c      	movs	r4, r1
 8000704:	1aea      	subs	r2, r5, r3
 8000706:	e782      	b.n	800060e <__aeabi_fadd+0x9a>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d009      	beq.n	8000720 <__aeabi_fadd+0x1ac>
 800070c:	3901      	subs	r1, #1
 800070e:	2900      	cmp	r1, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_fadd+0x1a0>
 8000712:	e08b      	b.n	800082c <__aeabi_fadd+0x2b8>
 8000714:	2fff      	cmp	r7, #255	; 0xff
 8000716:	d1bc      	bne.n	8000692 <__aeabi_fadd+0x11e>
 8000718:	e7a7      	b.n	800066a <__aeabi_fadd+0xf6>
 800071a:	000c      	movs	r4, r1
 800071c:	4642      	mov	r2, r8
 800071e:	0037      	movs	r7, r6
 8000720:	2fff      	cmp	r7, #255	; 0xff
 8000722:	d0a2      	beq.n	800066a <__aeabi_fadd+0xf6>
 8000724:	0252      	lsls	r2, r2, #9
 8000726:	0a53      	lsrs	r3, r2, #9
 8000728:	469c      	mov	ip, r3
 800072a:	b2fb      	uxtb	r3, r7
 800072c:	e781      	b.n	8000632 <__aeabi_fadd+0xbe>
 800072e:	21fe      	movs	r1, #254	; 0xfe
 8000730:	3701      	adds	r7, #1
 8000732:	4239      	tst	r1, r7
 8000734:	d165      	bne.n	8000802 <__aeabi_fadd+0x28e>
 8000736:	2b00      	cmp	r3, #0
 8000738:	d17e      	bne.n	8000838 <__aeabi_fadd+0x2c4>
 800073a:	2800      	cmp	r0, #0
 800073c:	d100      	bne.n	8000740 <__aeabi_fadd+0x1cc>
 800073e:	e0aa      	b.n	8000896 <__aeabi_fadd+0x322>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x1d2>
 8000744:	e775      	b.n	8000632 <__aeabi_fadd+0xbe>
 8000746:	002a      	movs	r2, r5
 8000748:	4452      	add	r2, sl
 800074a:	2700      	movs	r7, #0
 800074c:	0153      	lsls	r3, r2, #5
 800074e:	d502      	bpl.n	8000756 <__aeabi_fadd+0x1e2>
 8000750:	4b55      	ldr	r3, [pc, #340]	; (80008a8 <__aeabi_fadd+0x334>)
 8000752:	3701      	adds	r7, #1
 8000754:	401a      	ands	r2, r3
 8000756:	0753      	lsls	r3, r2, #29
 8000758:	d000      	beq.n	800075c <__aeabi_fadd+0x1e8>
 800075a:	e75a      	b.n	8000612 <__aeabi_fadd+0x9e>
 800075c:	08d2      	lsrs	r2, r2, #3
 800075e:	e7df      	b.n	8000720 <__aeabi_fadd+0x1ac>
 8000760:	2200      	movs	r2, #0
 8000762:	23ff      	movs	r3, #255	; 0xff
 8000764:	4694      	mov	ip, r2
 8000766:	e764      	b.n	8000632 <__aeabi_fadd+0xbe>
 8000768:	2900      	cmp	r1, #0
 800076a:	d0e0      	beq.n	800072e <__aeabi_fadd+0x1ba>
 800076c:	1bf3      	subs	r3, r6, r7
 800076e:	2f00      	cmp	r7, #0
 8000770:	d03e      	beq.n	80007f0 <__aeabi_fadd+0x27c>
 8000772:	2eff      	cmp	r6, #255	; 0xff
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x204>
 8000776:	e777      	b.n	8000668 <__aeabi_fadd+0xf4>
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	0001      	movs	r1, r0
 800077c:	04d2      	lsls	r2, r2, #19
 800077e:	4311      	orrs	r1, r2
 8000780:	468a      	mov	sl, r1
 8000782:	2201      	movs	r2, #1
 8000784:	2b1b      	cmp	r3, #27
 8000786:	dc08      	bgt.n	800079a <__aeabi_fadd+0x226>
 8000788:	4652      	mov	r2, sl
 800078a:	2120      	movs	r1, #32
 800078c:	4650      	mov	r0, sl
 800078e:	40da      	lsrs	r2, r3
 8000790:	1acb      	subs	r3, r1, r3
 8000792:	4098      	lsls	r0, r3
 8000794:	1e43      	subs	r3, r0, #1
 8000796:	4198      	sbcs	r0, r3
 8000798:	4302      	orrs	r2, r0
 800079a:	0037      	movs	r7, r6
 800079c:	1952      	adds	r2, r2, r5
 800079e:	e784      	b.n	80006aa <__aeabi_fadd+0x136>
 80007a0:	4a41      	ldr	r2, [pc, #260]	; (80008a8 <__aeabi_fadd+0x334>)
 80007a2:	1a3f      	subs	r7, r7, r0
 80007a4:	4032      	ands	r2, r6
 80007a6:	e732      	b.n	800060e <__aeabi_fadd+0x9a>
 80007a8:	4653      	mov	r3, sl
 80007aa:	1b5e      	subs	r6, r3, r5
 80007ac:	0173      	lsls	r3, r6, #5
 80007ae:	d42d      	bmi.n	800080c <__aeabi_fadd+0x298>
 80007b0:	2e00      	cmp	r6, #0
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fadd+0x242>
 80007b4:	e717      	b.n	80005e6 <__aeabi_fadd+0x72>
 80007b6:	2200      	movs	r2, #0
 80007b8:	2400      	movs	r4, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	4694      	mov	ip, r2
 80007be:	e738      	b.n	8000632 <__aeabi_fadd+0xbe>
 80007c0:	2eff      	cmp	r6, #255	; 0xff
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0x252>
 80007c4:	e74f      	b.n	8000666 <__aeabi_fadd+0xf2>
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	4650      	mov	r0, sl
 80007ca:	04d2      	lsls	r2, r2, #19
 80007cc:	4310      	orrs	r0, r2
 80007ce:	4682      	mov	sl, r0
 80007d0:	2201      	movs	r2, #1
 80007d2:	2b1b      	cmp	r3, #27
 80007d4:	dc08      	bgt.n	80007e8 <__aeabi_fadd+0x274>
 80007d6:	4652      	mov	r2, sl
 80007d8:	2420      	movs	r4, #32
 80007da:	4650      	mov	r0, sl
 80007dc:	40da      	lsrs	r2, r3
 80007de:	1ae3      	subs	r3, r4, r3
 80007e0:	4098      	lsls	r0, r3
 80007e2:	1e43      	subs	r3, r0, #1
 80007e4:	4198      	sbcs	r0, r3
 80007e6:	4302      	orrs	r2, r0
 80007e8:	000c      	movs	r4, r1
 80007ea:	0037      	movs	r7, r6
 80007ec:	1aaa      	subs	r2, r5, r2
 80007ee:	e6f5      	b.n	80005dc <__aeabi_fadd+0x68>
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d093      	beq.n	800071c <__aeabi_fadd+0x1a8>
 80007f4:	3b01      	subs	r3, #1
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d04f      	beq.n	800089a <__aeabi_fadd+0x326>
 80007fa:	2eff      	cmp	r6, #255	; 0xff
 80007fc:	d1c1      	bne.n	8000782 <__aeabi_fadd+0x20e>
 80007fe:	4642      	mov	r2, r8
 8000800:	e733      	b.n	800066a <__aeabi_fadd+0xf6>
 8000802:	2fff      	cmp	r7, #255	; 0xff
 8000804:	d0ac      	beq.n	8000760 <__aeabi_fadd+0x1ec>
 8000806:	4455      	add	r5, sl
 8000808:	086a      	lsrs	r2, r5, #1
 800080a:	e7a4      	b.n	8000756 <__aeabi_fadd+0x1e2>
 800080c:	4653      	mov	r3, sl
 800080e:	000c      	movs	r4, r1
 8000810:	1aee      	subs	r6, r5, r3
 8000812:	e6e8      	b.n	80005e6 <__aeabi_fadd+0x72>
 8000814:	4653      	mov	r3, sl
 8000816:	2b00      	cmp	r3, #0
 8000818:	d128      	bne.n	800086c <__aeabi_fadd+0x2f8>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x2ac>
 800081e:	e722      	b.n	8000666 <__aeabi_fadd+0xf2>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	03db      	lsls	r3, r3, #15
 8000824:	469c      	mov	ip, r3
 8000826:	2400      	movs	r4, #0
 8000828:	23ff      	movs	r3, #255	; 0xff
 800082a:	e702      	b.n	8000632 <__aeabi_fadd+0xbe>
 800082c:	002a      	movs	r2, r5
 800082e:	4452      	add	r2, sl
 8000830:	e73b      	b.n	80006aa <__aeabi_fadd+0x136>
 8000832:	4653      	mov	r3, sl
 8000834:	1b5a      	subs	r2, r3, r5
 8000836:	e6d1      	b.n	80005dc <__aeabi_fadd+0x68>
 8000838:	2800      	cmp	r0, #0
 800083a:	d100      	bne.n	800083e <__aeabi_fadd+0x2ca>
 800083c:	e714      	b.n	8000668 <__aeabi_fadd+0xf4>
 800083e:	2d00      	cmp	r5, #0
 8000840:	d100      	bne.n	8000844 <__aeabi_fadd+0x2d0>
 8000842:	e712      	b.n	800066a <__aeabi_fadd+0xf6>
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	03db      	lsls	r3, r3, #15
 8000848:	421a      	tst	r2, r3
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x2da>
 800084c:	e70d      	b.n	800066a <__aeabi_fadd+0xf6>
 800084e:	4641      	mov	r1, r8
 8000850:	4219      	tst	r1, r3
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x2e2>
 8000854:	e709      	b.n	800066a <__aeabi_fadd+0xf6>
 8000856:	4642      	mov	r2, r8
 8000858:	e707      	b.n	800066a <__aeabi_fadd+0xf6>
 800085a:	000c      	movs	r4, r1
 800085c:	0037      	movs	r7, r6
 800085e:	1aaa      	subs	r2, r5, r2
 8000860:	e6bc      	b.n	80005dc <__aeabi_fadd+0x68>
 8000862:	2d00      	cmp	r5, #0
 8000864:	d013      	beq.n	800088e <__aeabi_fadd+0x31a>
 8000866:	000c      	movs	r4, r1
 8000868:	46c4      	mov	ip, r8
 800086a:	e6e2      	b.n	8000632 <__aeabi_fadd+0xbe>
 800086c:	2d00      	cmp	r5, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x2fe>
 8000870:	e6fb      	b.n	800066a <__aeabi_fadd+0xf6>
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	03db      	lsls	r3, r3, #15
 8000876:	421a      	tst	r2, r3
 8000878:	d100      	bne.n	800087c <__aeabi_fadd+0x308>
 800087a:	e6f6      	b.n	800066a <__aeabi_fadd+0xf6>
 800087c:	4640      	mov	r0, r8
 800087e:	4218      	tst	r0, r3
 8000880:	d000      	beq.n	8000884 <__aeabi_fadd+0x310>
 8000882:	e6f2      	b.n	800066a <__aeabi_fadd+0xf6>
 8000884:	000c      	movs	r4, r1
 8000886:	e6ef      	b.n	8000668 <__aeabi_fadd+0xf4>
 8000888:	2a00      	cmp	r2, #0
 800088a:	d000      	beq.n	800088e <__aeabi_fadd+0x31a>
 800088c:	e763      	b.n	8000756 <__aeabi_fadd+0x1e2>
 800088e:	2200      	movs	r2, #0
 8000890:	2400      	movs	r4, #0
 8000892:	4694      	mov	ip, r2
 8000894:	e6cd      	b.n	8000632 <__aeabi_fadd+0xbe>
 8000896:	46c4      	mov	ip, r8
 8000898:	e6cb      	b.n	8000632 <__aeabi_fadd+0xbe>
 800089a:	002a      	movs	r2, r5
 800089c:	0037      	movs	r7, r6
 800089e:	4452      	add	r2, sl
 80008a0:	e703      	b.n	80006aa <__aeabi_fadd+0x136>
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	7dffffff 	.word	0x7dffffff
 80008a8:	fbffffff 	.word	0xfbffffff

080008ac <__aeabi_fdiv>:
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	464f      	mov	r7, r9
 80008b0:	4646      	mov	r6, r8
 80008b2:	46d6      	mov	lr, sl
 80008b4:	0245      	lsls	r5, r0, #9
 80008b6:	b5c0      	push	{r6, r7, lr}
 80008b8:	0047      	lsls	r7, r0, #1
 80008ba:	1c0c      	adds	r4, r1, #0
 80008bc:	0a6d      	lsrs	r5, r5, #9
 80008be:	0e3f      	lsrs	r7, r7, #24
 80008c0:	0fc6      	lsrs	r6, r0, #31
 80008c2:	2f00      	cmp	r7, #0
 80008c4:	d066      	beq.n	8000994 <__aeabi_fdiv+0xe8>
 80008c6:	2fff      	cmp	r7, #255	; 0xff
 80008c8:	d06c      	beq.n	80009a4 <__aeabi_fdiv+0xf8>
 80008ca:	2300      	movs	r3, #0
 80008cc:	00ea      	lsls	r2, r5, #3
 80008ce:	2580      	movs	r5, #128	; 0x80
 80008d0:	4699      	mov	r9, r3
 80008d2:	469a      	mov	sl, r3
 80008d4:	04ed      	lsls	r5, r5, #19
 80008d6:	4315      	orrs	r5, r2
 80008d8:	3f7f      	subs	r7, #127	; 0x7f
 80008da:	0260      	lsls	r0, r4, #9
 80008dc:	0061      	lsls	r1, r4, #1
 80008de:	0a43      	lsrs	r3, r0, #9
 80008e0:	4698      	mov	r8, r3
 80008e2:	0e09      	lsrs	r1, r1, #24
 80008e4:	0fe4      	lsrs	r4, r4, #31
 80008e6:	2900      	cmp	r1, #0
 80008e8:	d048      	beq.n	800097c <__aeabi_fdiv+0xd0>
 80008ea:	29ff      	cmp	r1, #255	; 0xff
 80008ec:	d010      	beq.n	8000910 <__aeabi_fdiv+0x64>
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	00d8      	lsls	r0, r3, #3
 80008f2:	04d2      	lsls	r2, r2, #19
 80008f4:	4302      	orrs	r2, r0
 80008f6:	4690      	mov	r8, r2
 80008f8:	2000      	movs	r0, #0
 80008fa:	397f      	subs	r1, #127	; 0x7f
 80008fc:	464a      	mov	r2, r9
 80008fe:	0033      	movs	r3, r6
 8000900:	1a7f      	subs	r7, r7, r1
 8000902:	4302      	orrs	r2, r0
 8000904:	496c      	ldr	r1, [pc, #432]	; (8000ab8 <__aeabi_fdiv+0x20c>)
 8000906:	0092      	lsls	r2, r2, #2
 8000908:	588a      	ldr	r2, [r1, r2]
 800090a:	4063      	eors	r3, r4
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4697      	mov	pc, r2
 8000910:	2b00      	cmp	r3, #0
 8000912:	d16d      	bne.n	80009f0 <__aeabi_fdiv+0x144>
 8000914:	2002      	movs	r0, #2
 8000916:	3fff      	subs	r7, #255	; 0xff
 8000918:	e033      	b.n	8000982 <__aeabi_fdiv+0xd6>
 800091a:	2300      	movs	r3, #0
 800091c:	4698      	mov	r8, r3
 800091e:	0026      	movs	r6, r4
 8000920:	4645      	mov	r5, r8
 8000922:	4682      	mov	sl, r0
 8000924:	4653      	mov	r3, sl
 8000926:	2b02      	cmp	r3, #2
 8000928:	d100      	bne.n	800092c <__aeabi_fdiv+0x80>
 800092a:	e07f      	b.n	8000a2c <__aeabi_fdiv+0x180>
 800092c:	2b03      	cmp	r3, #3
 800092e:	d100      	bne.n	8000932 <__aeabi_fdiv+0x86>
 8000930:	e094      	b.n	8000a5c <__aeabi_fdiv+0x1b0>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d017      	beq.n	8000966 <__aeabi_fdiv+0xba>
 8000936:	0038      	movs	r0, r7
 8000938:	307f      	adds	r0, #127	; 0x7f
 800093a:	2800      	cmp	r0, #0
 800093c:	dd5f      	ble.n	80009fe <__aeabi_fdiv+0x152>
 800093e:	076b      	lsls	r3, r5, #29
 8000940:	d004      	beq.n	800094c <__aeabi_fdiv+0xa0>
 8000942:	230f      	movs	r3, #15
 8000944:	402b      	ands	r3, r5
 8000946:	2b04      	cmp	r3, #4
 8000948:	d000      	beq.n	800094c <__aeabi_fdiv+0xa0>
 800094a:	3504      	adds	r5, #4
 800094c:	012b      	lsls	r3, r5, #4
 800094e:	d503      	bpl.n	8000958 <__aeabi_fdiv+0xac>
 8000950:	0038      	movs	r0, r7
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <__aeabi_fdiv+0x210>)
 8000954:	3080      	adds	r0, #128	; 0x80
 8000956:	401d      	ands	r5, r3
 8000958:	28fe      	cmp	r0, #254	; 0xfe
 800095a:	dc67      	bgt.n	8000a2c <__aeabi_fdiv+0x180>
 800095c:	01ad      	lsls	r5, r5, #6
 800095e:	0a6d      	lsrs	r5, r5, #9
 8000960:	b2c0      	uxtb	r0, r0
 8000962:	e002      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000964:	001e      	movs	r6, r3
 8000966:	2000      	movs	r0, #0
 8000968:	2500      	movs	r5, #0
 800096a:	05c0      	lsls	r0, r0, #23
 800096c:	4328      	orrs	r0, r5
 800096e:	07f6      	lsls	r6, r6, #31
 8000970:	4330      	orrs	r0, r6
 8000972:	bce0      	pop	{r5, r6, r7}
 8000974:	46ba      	mov	sl, r7
 8000976:	46b1      	mov	r9, r6
 8000978:	46a8      	mov	r8, r5
 800097a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097c:	2b00      	cmp	r3, #0
 800097e:	d12b      	bne.n	80009d8 <__aeabi_fdiv+0x12c>
 8000980:	2001      	movs	r0, #1
 8000982:	464a      	mov	r2, r9
 8000984:	0033      	movs	r3, r6
 8000986:	494e      	ldr	r1, [pc, #312]	; (8000ac0 <__aeabi_fdiv+0x214>)
 8000988:	4302      	orrs	r2, r0
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	588a      	ldr	r2, [r1, r2]
 800098e:	4063      	eors	r3, r4
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4697      	mov	pc, r2
 8000994:	2d00      	cmp	r5, #0
 8000996:	d113      	bne.n	80009c0 <__aeabi_fdiv+0x114>
 8000998:	2304      	movs	r3, #4
 800099a:	4699      	mov	r9, r3
 800099c:	3b03      	subs	r3, #3
 800099e:	2700      	movs	r7, #0
 80009a0:	469a      	mov	sl, r3
 80009a2:	e79a      	b.n	80008da <__aeabi_fdiv+0x2e>
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d105      	bne.n	80009b4 <__aeabi_fdiv+0x108>
 80009a8:	2308      	movs	r3, #8
 80009aa:	4699      	mov	r9, r3
 80009ac:	3b06      	subs	r3, #6
 80009ae:	27ff      	movs	r7, #255	; 0xff
 80009b0:	469a      	mov	sl, r3
 80009b2:	e792      	b.n	80008da <__aeabi_fdiv+0x2e>
 80009b4:	230c      	movs	r3, #12
 80009b6:	4699      	mov	r9, r3
 80009b8:	3b09      	subs	r3, #9
 80009ba:	27ff      	movs	r7, #255	; 0xff
 80009bc:	469a      	mov	sl, r3
 80009be:	e78c      	b.n	80008da <__aeabi_fdiv+0x2e>
 80009c0:	0028      	movs	r0, r5
 80009c2:	f002 fb4f 	bl	8003064 <__clzsi2>
 80009c6:	2776      	movs	r7, #118	; 0x76
 80009c8:	1f43      	subs	r3, r0, #5
 80009ca:	409d      	lsls	r5, r3
 80009cc:	2300      	movs	r3, #0
 80009ce:	427f      	negs	r7, r7
 80009d0:	4699      	mov	r9, r3
 80009d2:	469a      	mov	sl, r3
 80009d4:	1a3f      	subs	r7, r7, r0
 80009d6:	e780      	b.n	80008da <__aeabi_fdiv+0x2e>
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 fb43 	bl	8003064 <__clzsi2>
 80009de:	4642      	mov	r2, r8
 80009e0:	1f43      	subs	r3, r0, #5
 80009e2:	2176      	movs	r1, #118	; 0x76
 80009e4:	409a      	lsls	r2, r3
 80009e6:	4249      	negs	r1, r1
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	4690      	mov	r8, r2
 80009ec:	2000      	movs	r0, #0
 80009ee:	e785      	b.n	80008fc <__aeabi_fdiv+0x50>
 80009f0:	21ff      	movs	r1, #255	; 0xff
 80009f2:	2003      	movs	r0, #3
 80009f4:	e782      	b.n	80008fc <__aeabi_fdiv+0x50>
 80009f6:	001e      	movs	r6, r3
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	2500      	movs	r5, #0
 80009fc:	e7b5      	b.n	800096a <__aeabi_fdiv+0xbe>
 80009fe:	2301      	movs	r3, #1
 8000a00:	1a1b      	subs	r3, r3, r0
 8000a02:	2b1b      	cmp	r3, #27
 8000a04:	dcaf      	bgt.n	8000966 <__aeabi_fdiv+0xba>
 8000a06:	379e      	adds	r7, #158	; 0x9e
 8000a08:	0029      	movs	r1, r5
 8000a0a:	40bd      	lsls	r5, r7
 8000a0c:	40d9      	lsrs	r1, r3
 8000a0e:	1e6a      	subs	r2, r5, #1
 8000a10:	4195      	sbcs	r5, r2
 8000a12:	430d      	orrs	r5, r1
 8000a14:	076b      	lsls	r3, r5, #29
 8000a16:	d004      	beq.n	8000a22 <__aeabi_fdiv+0x176>
 8000a18:	230f      	movs	r3, #15
 8000a1a:	402b      	ands	r3, r5
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_fdiv+0x176>
 8000a20:	3504      	adds	r5, #4
 8000a22:	016b      	lsls	r3, r5, #5
 8000a24:	d544      	bpl.n	8000ab0 <__aeabi_fdiv+0x204>
 8000a26:	2001      	movs	r0, #1
 8000a28:	2500      	movs	r5, #0
 8000a2a:	e79e      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000a2c:	20ff      	movs	r0, #255	; 0xff
 8000a2e:	2500      	movs	r5, #0
 8000a30:	e79b      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000a32:	2580      	movs	r5, #128	; 0x80
 8000a34:	2600      	movs	r6, #0
 8000a36:	20ff      	movs	r0, #255	; 0xff
 8000a38:	03ed      	lsls	r5, r5, #15
 8000a3a:	e796      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	4698      	mov	r8, r3
 8000a40:	2080      	movs	r0, #128	; 0x80
 8000a42:	03c0      	lsls	r0, r0, #15
 8000a44:	4205      	tst	r5, r0
 8000a46:	d009      	beq.n	8000a5c <__aeabi_fdiv+0x1b0>
 8000a48:	4643      	mov	r3, r8
 8000a4a:	4203      	tst	r3, r0
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_fdiv+0x1b0>
 8000a4e:	4645      	mov	r5, r8
 8000a50:	4305      	orrs	r5, r0
 8000a52:	026d      	lsls	r5, r5, #9
 8000a54:	0026      	movs	r6, r4
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	e786      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	03c0      	lsls	r0, r0, #15
 8000a60:	4305      	orrs	r5, r0
 8000a62:	026d      	lsls	r5, r5, #9
 8000a64:	20ff      	movs	r0, #255	; 0xff
 8000a66:	0a6d      	lsrs	r5, r5, #9
 8000a68:	e77f      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000a6a:	4641      	mov	r1, r8
 8000a6c:	016a      	lsls	r2, r5, #5
 8000a6e:	0148      	lsls	r0, r1, #5
 8000a70:	4282      	cmp	r2, r0
 8000a72:	d219      	bcs.n	8000aa8 <__aeabi_fdiv+0x1fc>
 8000a74:	211b      	movs	r1, #27
 8000a76:	2500      	movs	r5, #0
 8000a78:	3f01      	subs	r7, #1
 8000a7a:	2601      	movs	r6, #1
 8000a7c:	0014      	movs	r4, r2
 8000a7e:	006d      	lsls	r5, r5, #1
 8000a80:	0052      	lsls	r2, r2, #1
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	db01      	blt.n	8000a8a <__aeabi_fdiv+0x1de>
 8000a86:	4290      	cmp	r0, r2
 8000a88:	d801      	bhi.n	8000a8e <__aeabi_fdiv+0x1e2>
 8000a8a:	1a12      	subs	r2, r2, r0
 8000a8c:	4335      	orrs	r5, r6
 8000a8e:	3901      	subs	r1, #1
 8000a90:	2900      	cmp	r1, #0
 8000a92:	d1f3      	bne.n	8000a7c <__aeabi_fdiv+0x1d0>
 8000a94:	1e50      	subs	r0, r2, #1
 8000a96:	4182      	sbcs	r2, r0
 8000a98:	0038      	movs	r0, r7
 8000a9a:	307f      	adds	r0, #127	; 0x7f
 8000a9c:	001e      	movs	r6, r3
 8000a9e:	4315      	orrs	r5, r2
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	dd00      	ble.n	8000aa6 <__aeabi_fdiv+0x1fa>
 8000aa4:	e74b      	b.n	800093e <__aeabi_fdiv+0x92>
 8000aa6:	e7aa      	b.n	80009fe <__aeabi_fdiv+0x152>
 8000aa8:	211a      	movs	r1, #26
 8000aaa:	2501      	movs	r5, #1
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	e7e4      	b.n	8000a7a <__aeabi_fdiv+0x1ce>
 8000ab0:	01ad      	lsls	r5, r5, #6
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	0a6d      	lsrs	r5, r5, #9
 8000ab6:	e758      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000ab8:	0800d750 	.word	0x0800d750
 8000abc:	f7ffffff 	.word	0xf7ffffff
 8000ac0:	0800d790 	.word	0x0800d790

08000ac4 <__eqsf2>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	0042      	lsls	r2, r0, #1
 8000ac8:	024e      	lsls	r6, r1, #9
 8000aca:	004c      	lsls	r4, r1, #1
 8000acc:	0245      	lsls	r5, r0, #9
 8000ace:	0a6d      	lsrs	r5, r5, #9
 8000ad0:	0e12      	lsrs	r2, r2, #24
 8000ad2:	0fc3      	lsrs	r3, r0, #31
 8000ad4:	0a76      	lsrs	r6, r6, #9
 8000ad6:	0e24      	lsrs	r4, r4, #24
 8000ad8:	0fc9      	lsrs	r1, r1, #31
 8000ada:	2aff      	cmp	r2, #255	; 0xff
 8000adc:	d00f      	beq.n	8000afe <__eqsf2+0x3a>
 8000ade:	2cff      	cmp	r4, #255	; 0xff
 8000ae0:	d011      	beq.n	8000b06 <__eqsf2+0x42>
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	42a2      	cmp	r2, r4
 8000ae6:	d000      	beq.n	8000aea <__eqsf2+0x26>
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	42b5      	cmp	r5, r6
 8000aec:	d1fc      	bne.n	8000ae8 <__eqsf2+0x24>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d00d      	beq.n	8000b0e <__eqsf2+0x4a>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d1f8      	bne.n	8000ae8 <__eqsf2+0x24>
 8000af6:	0028      	movs	r0, r5
 8000af8:	1e45      	subs	r5, r0, #1
 8000afa:	41a8      	sbcs	r0, r5
 8000afc:	e7f4      	b.n	8000ae8 <__eqsf2+0x24>
 8000afe:	2001      	movs	r0, #1
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d1f1      	bne.n	8000ae8 <__eqsf2+0x24>
 8000b04:	e7eb      	b.n	8000ade <__eqsf2+0x1a>
 8000b06:	2001      	movs	r0, #1
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d1ed      	bne.n	8000ae8 <__eqsf2+0x24>
 8000b0c:	e7e9      	b.n	8000ae2 <__eqsf2+0x1e>
 8000b0e:	2000      	movs	r0, #0
 8000b10:	e7ea      	b.n	8000ae8 <__eqsf2+0x24>
 8000b12:	46c0      	nop			; (mov r8, r8)

08000b14 <__gesf2>:
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	0042      	lsls	r2, r0, #1
 8000b18:	0246      	lsls	r6, r0, #9
 8000b1a:	024d      	lsls	r5, r1, #9
 8000b1c:	004c      	lsls	r4, r1, #1
 8000b1e:	0fc3      	lsrs	r3, r0, #31
 8000b20:	0a76      	lsrs	r6, r6, #9
 8000b22:	0e12      	lsrs	r2, r2, #24
 8000b24:	0a6d      	lsrs	r5, r5, #9
 8000b26:	0e24      	lsrs	r4, r4, #24
 8000b28:	0fc8      	lsrs	r0, r1, #31
 8000b2a:	2aff      	cmp	r2, #255	; 0xff
 8000b2c:	d01f      	beq.n	8000b6e <__gesf2+0x5a>
 8000b2e:	2cff      	cmp	r4, #255	; 0xff
 8000b30:	d010      	beq.n	8000b54 <__gesf2+0x40>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d11f      	bne.n	8000b76 <__gesf2+0x62>
 8000b36:	4271      	negs	r1, r6
 8000b38:	4171      	adcs	r1, r6
 8000b3a:	2c00      	cmp	r4, #0
 8000b3c:	d101      	bne.n	8000b42 <__gesf2+0x2e>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d01e      	beq.n	8000b80 <__gesf2+0x6c>
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d10e      	bne.n	8000b64 <__gesf2+0x50>
 8000b46:	4283      	cmp	r3, r0
 8000b48:	d01e      	beq.n	8000b88 <__gesf2+0x74>
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	1e58      	subs	r0, r3, #1
 8000b4e:	4008      	ands	r0, r1
 8000b50:	3801      	subs	r0, #1
 8000b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d126      	bne.n	8000ba6 <__gesf2+0x92>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d1f4      	bne.n	8000b46 <__gesf2+0x32>
 8000b5c:	4271      	negs	r1, r6
 8000b5e:	4171      	adcs	r1, r6
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d0f0      	beq.n	8000b46 <__gesf2+0x32>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d1f4      	bne.n	8000b52 <__gesf2+0x3e>
 8000b68:	2001      	movs	r0, #1
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	e7f1      	b.n	8000b52 <__gesf2+0x3e>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d119      	bne.n	8000ba6 <__gesf2+0x92>
 8000b72:	2cff      	cmp	r4, #255	; 0xff
 8000b74:	d0ee      	beq.n	8000b54 <__gesf2+0x40>
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d1e5      	bne.n	8000b46 <__gesf2+0x32>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d1e3      	bne.n	8000b46 <__gesf2+0x32>
 8000b7e:	e7e4      	b.n	8000b4a <__gesf2+0x36>
 8000b80:	2000      	movs	r0, #0
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d0e5      	beq.n	8000b52 <__gesf2+0x3e>
 8000b86:	e7e0      	b.n	8000b4a <__gesf2+0x36>
 8000b88:	42a2      	cmp	r2, r4
 8000b8a:	dc05      	bgt.n	8000b98 <__gesf2+0x84>
 8000b8c:	dbea      	blt.n	8000b64 <__gesf2+0x50>
 8000b8e:	42ae      	cmp	r6, r5
 8000b90:	d802      	bhi.n	8000b98 <__gesf2+0x84>
 8000b92:	d3e7      	bcc.n	8000b64 <__gesf2+0x50>
 8000b94:	2000      	movs	r0, #0
 8000b96:	e7dc      	b.n	8000b52 <__gesf2+0x3e>
 8000b98:	4241      	negs	r1, r0
 8000b9a:	4141      	adcs	r1, r0
 8000b9c:	4248      	negs	r0, r1
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	4008      	ands	r0, r1
 8000ba2:	3801      	subs	r0, #1
 8000ba4:	e7d5      	b.n	8000b52 <__gesf2+0x3e>
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	4240      	negs	r0, r0
 8000baa:	e7d2      	b.n	8000b52 <__gesf2+0x3e>

08000bac <__lesf2>:
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	0042      	lsls	r2, r0, #1
 8000bb0:	0246      	lsls	r6, r0, #9
 8000bb2:	024d      	lsls	r5, r1, #9
 8000bb4:	004c      	lsls	r4, r1, #1
 8000bb6:	0fc3      	lsrs	r3, r0, #31
 8000bb8:	0a76      	lsrs	r6, r6, #9
 8000bba:	0e12      	lsrs	r2, r2, #24
 8000bbc:	0a6d      	lsrs	r5, r5, #9
 8000bbe:	0e24      	lsrs	r4, r4, #24
 8000bc0:	0fc8      	lsrs	r0, r1, #31
 8000bc2:	2aff      	cmp	r2, #255	; 0xff
 8000bc4:	d00d      	beq.n	8000be2 <__lesf2+0x36>
 8000bc6:	2cff      	cmp	r4, #255	; 0xff
 8000bc8:	d00f      	beq.n	8000bea <__lesf2+0x3e>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d123      	bne.n	8000c16 <__lesf2+0x6a>
 8000bce:	4271      	negs	r1, r6
 8000bd0:	4171      	adcs	r1, r6
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d10f      	bne.n	8000bf6 <__lesf2+0x4a>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d10d      	bne.n	8000bf6 <__lesf2+0x4a>
 8000bda:	2000      	movs	r0, #0
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d014      	beq.n	8000c0a <__lesf2+0x5e>
 8000be0:	e00d      	b.n	8000bfe <__lesf2+0x52>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d110      	bne.n	8000c08 <__lesf2+0x5c>
 8000be6:	2cff      	cmp	r4, #255	; 0xff
 8000be8:	d115      	bne.n	8000c16 <__lesf2+0x6a>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d10c      	bne.n	8000c08 <__lesf2+0x5c>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d103      	bne.n	8000bfa <__lesf2+0x4e>
 8000bf2:	4271      	negs	r1, r6
 8000bf4:	4171      	adcs	r1, r6
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	d108      	bne.n	8000c0c <__lesf2+0x60>
 8000bfa:	4283      	cmp	r3, r0
 8000bfc:	d010      	beq.n	8000c20 <__lesf2+0x74>
 8000bfe:	2102      	movs	r1, #2
 8000c00:	1e58      	subs	r0, r3, #1
 8000c02:	4008      	ands	r0, r1
 8000c04:	3801      	subs	r0, #1
 8000c06:	e000      	b.n	8000c0a <__lesf2+0x5e>
 8000c08:	2002      	movs	r0, #2
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	d1fc      	bne.n	8000c0a <__lesf2+0x5e>
 8000c10:	2001      	movs	r0, #1
 8000c12:	4240      	negs	r0, r0
 8000c14:	e7f9      	b.n	8000c0a <__lesf2+0x5e>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1ef      	bne.n	8000bfa <__lesf2+0x4e>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d1ed      	bne.n	8000bfa <__lesf2+0x4e>
 8000c1e:	e7ee      	b.n	8000bfe <__lesf2+0x52>
 8000c20:	42a2      	cmp	r2, r4
 8000c22:	dc05      	bgt.n	8000c30 <__lesf2+0x84>
 8000c24:	dbf2      	blt.n	8000c0c <__lesf2+0x60>
 8000c26:	42ae      	cmp	r6, r5
 8000c28:	d802      	bhi.n	8000c30 <__lesf2+0x84>
 8000c2a:	d3ef      	bcc.n	8000c0c <__lesf2+0x60>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7ec      	b.n	8000c0a <__lesf2+0x5e>
 8000c30:	4241      	negs	r1, r0
 8000c32:	4141      	adcs	r1, r0
 8000c34:	4248      	negs	r0, r1
 8000c36:	2102      	movs	r1, #2
 8000c38:	4008      	ands	r0, r1
 8000c3a:	3801      	subs	r0, #1
 8000c3c:	e7e5      	b.n	8000c0a <__lesf2+0x5e>
 8000c3e:	46c0      	nop			; (mov r8, r8)

08000c40 <__aeabi_fmul>:
 8000c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c42:	4657      	mov	r7, sl
 8000c44:	464e      	mov	r6, r9
 8000c46:	4645      	mov	r5, r8
 8000c48:	46de      	mov	lr, fp
 8000c4a:	0244      	lsls	r4, r0, #9
 8000c4c:	b5e0      	push	{r5, r6, r7, lr}
 8000c4e:	0045      	lsls	r5, r0, #1
 8000c50:	1c0f      	adds	r7, r1, #0
 8000c52:	0a64      	lsrs	r4, r4, #9
 8000c54:	0e2d      	lsrs	r5, r5, #24
 8000c56:	0fc6      	lsrs	r6, r0, #31
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d047      	beq.n	8000cec <__aeabi_fmul+0xac>
 8000c5c:	2dff      	cmp	r5, #255	; 0xff
 8000c5e:	d04d      	beq.n	8000cfc <__aeabi_fmul+0xbc>
 8000c60:	2300      	movs	r3, #0
 8000c62:	2080      	movs	r0, #128	; 0x80
 8000c64:	469a      	mov	sl, r3
 8000c66:	469b      	mov	fp, r3
 8000c68:	00e4      	lsls	r4, r4, #3
 8000c6a:	04c0      	lsls	r0, r0, #19
 8000c6c:	4304      	orrs	r4, r0
 8000c6e:	3d7f      	subs	r5, #127	; 0x7f
 8000c70:	0278      	lsls	r0, r7, #9
 8000c72:	0a43      	lsrs	r3, r0, #9
 8000c74:	4699      	mov	r9, r3
 8000c76:	007a      	lsls	r2, r7, #1
 8000c78:	0ffb      	lsrs	r3, r7, #31
 8000c7a:	4698      	mov	r8, r3
 8000c7c:	0e12      	lsrs	r2, r2, #24
 8000c7e:	464b      	mov	r3, r9
 8000c80:	d044      	beq.n	8000d0c <__aeabi_fmul+0xcc>
 8000c82:	2aff      	cmp	r2, #255	; 0xff
 8000c84:	d011      	beq.n	8000caa <__aeabi_fmul+0x6a>
 8000c86:	00d8      	lsls	r0, r3, #3
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	04db      	lsls	r3, r3, #19
 8000c8c:	4303      	orrs	r3, r0
 8000c8e:	4699      	mov	r9, r3
 8000c90:	2000      	movs	r0, #0
 8000c92:	3a7f      	subs	r2, #127	; 0x7f
 8000c94:	18ad      	adds	r5, r5, r2
 8000c96:	4647      	mov	r7, r8
 8000c98:	4653      	mov	r3, sl
 8000c9a:	4077      	eors	r7, r6
 8000c9c:	1c69      	adds	r1, r5, #1
 8000c9e:	2b0f      	cmp	r3, #15
 8000ca0:	d83f      	bhi.n	8000d22 <__aeabi_fmul+0xe2>
 8000ca2:	4a72      	ldr	r2, [pc, #456]	; (8000e6c <__aeabi_fmul+0x22c>)
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	58d3      	ldr	r3, [r2, r3]
 8000ca8:	469f      	mov	pc, r3
 8000caa:	35ff      	adds	r5, #255	; 0xff
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fmul+0x72>
 8000cb0:	e079      	b.n	8000da6 <__aeabi_fmul+0x166>
 8000cb2:	4652      	mov	r2, sl
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	4692      	mov	sl, r2
 8000cba:	2002      	movs	r0, #2
 8000cbc:	e7eb      	b.n	8000c96 <__aeabi_fmul+0x56>
 8000cbe:	4647      	mov	r7, r8
 8000cc0:	464c      	mov	r4, r9
 8000cc2:	4683      	mov	fp, r0
 8000cc4:	465b      	mov	r3, fp
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d028      	beq.n	8000d1c <__aeabi_fmul+0xdc>
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_fmul+0x90>
 8000cce:	e0c6      	b.n	8000e5e <__aeabi_fmul+0x21e>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d14f      	bne.n	8000d74 <__aeabi_fmul+0x134>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ff      	lsls	r7, r7, #31
 8000cdc:	4320      	orrs	r0, r4
 8000cde:	4338      	orrs	r0, r7
 8000ce0:	bcf0      	pop	{r4, r5, r6, r7}
 8000ce2:	46bb      	mov	fp, r7
 8000ce4:	46b2      	mov	sl, r6
 8000ce6:	46a9      	mov	r9, r5
 8000ce8:	46a0      	mov	r8, r4
 8000cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d171      	bne.n	8000dd4 <__aeabi_fmul+0x194>
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	469a      	mov	sl, r3
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	2500      	movs	r5, #0
 8000cf8:	469b      	mov	fp, r3
 8000cfa:	e7b9      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000cfc:	2c00      	cmp	r4, #0
 8000cfe:	d163      	bne.n	8000dc8 <__aeabi_fmul+0x188>
 8000d00:	2308      	movs	r3, #8
 8000d02:	469a      	mov	sl, r3
 8000d04:	3b06      	subs	r3, #6
 8000d06:	25ff      	movs	r5, #255	; 0xff
 8000d08:	469b      	mov	fp, r3
 8000d0a:	e7b1      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d150      	bne.n	8000db2 <__aeabi_fmul+0x172>
 8000d10:	4652      	mov	r2, sl
 8000d12:	3301      	adds	r3, #1
 8000d14:	431a      	orrs	r2, r3
 8000d16:	4692      	mov	sl, r2
 8000d18:	2001      	movs	r0, #1
 8000d1a:	e7bc      	b.n	8000c96 <__aeabi_fmul+0x56>
 8000d1c:	20ff      	movs	r0, #255	; 0xff
 8000d1e:	2400      	movs	r4, #0
 8000d20:	e7da      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000d22:	4648      	mov	r0, r9
 8000d24:	0c26      	lsrs	r6, r4, #16
 8000d26:	0424      	lsls	r4, r4, #16
 8000d28:	0c22      	lsrs	r2, r4, #16
 8000d2a:	0404      	lsls	r4, r0, #16
 8000d2c:	0c24      	lsrs	r4, r4, #16
 8000d2e:	464b      	mov	r3, r9
 8000d30:	0020      	movs	r0, r4
 8000d32:	0c1b      	lsrs	r3, r3, #16
 8000d34:	4350      	muls	r0, r2
 8000d36:	4374      	muls	r4, r6
 8000d38:	435a      	muls	r2, r3
 8000d3a:	435e      	muls	r6, r3
 8000d3c:	1912      	adds	r2, r2, r4
 8000d3e:	0c03      	lsrs	r3, r0, #16
 8000d40:	189b      	adds	r3, r3, r2
 8000d42:	429c      	cmp	r4, r3
 8000d44:	d903      	bls.n	8000d4e <__aeabi_fmul+0x10e>
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	0252      	lsls	r2, r2, #9
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	4466      	add	r6, ip
 8000d4e:	0400      	lsls	r0, r0, #16
 8000d50:	041a      	lsls	r2, r3, #16
 8000d52:	0c00      	lsrs	r0, r0, #16
 8000d54:	1812      	adds	r2, r2, r0
 8000d56:	0194      	lsls	r4, r2, #6
 8000d58:	1e60      	subs	r0, r4, #1
 8000d5a:	4184      	sbcs	r4, r0
 8000d5c:	0c1b      	lsrs	r3, r3, #16
 8000d5e:	0e92      	lsrs	r2, r2, #26
 8000d60:	199b      	adds	r3, r3, r6
 8000d62:	4314      	orrs	r4, r2
 8000d64:	019b      	lsls	r3, r3, #6
 8000d66:	431c      	orrs	r4, r3
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	d572      	bpl.n	8000e52 <__aeabi_fmul+0x212>
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	0863      	lsrs	r3, r4, #1
 8000d70:	4004      	ands	r4, r0
 8000d72:	431c      	orrs	r4, r3
 8000d74:	0008      	movs	r0, r1
 8000d76:	307f      	adds	r0, #127	; 0x7f
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	dd3c      	ble.n	8000df6 <__aeabi_fmul+0x1b6>
 8000d7c:	0763      	lsls	r3, r4, #29
 8000d7e:	d004      	beq.n	8000d8a <__aeabi_fmul+0x14a>
 8000d80:	230f      	movs	r3, #15
 8000d82:	4023      	ands	r3, r4
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d000      	beq.n	8000d8a <__aeabi_fmul+0x14a>
 8000d88:	3404      	adds	r4, #4
 8000d8a:	0123      	lsls	r3, r4, #4
 8000d8c:	d503      	bpl.n	8000d96 <__aeabi_fmul+0x156>
 8000d8e:	3180      	adds	r1, #128	; 0x80
 8000d90:	0008      	movs	r0, r1
 8000d92:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <__aeabi_fmul+0x230>)
 8000d94:	401c      	ands	r4, r3
 8000d96:	28fe      	cmp	r0, #254	; 0xfe
 8000d98:	dcc0      	bgt.n	8000d1c <__aeabi_fmul+0xdc>
 8000d9a:	01a4      	lsls	r4, r4, #6
 8000d9c:	0a64      	lsrs	r4, r4, #9
 8000d9e:	b2c0      	uxtb	r0, r0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000da2:	0037      	movs	r7, r6
 8000da4:	e78e      	b.n	8000cc4 <__aeabi_fmul+0x84>
 8000da6:	4652      	mov	r2, sl
 8000da8:	2303      	movs	r3, #3
 8000daa:	431a      	orrs	r2, r3
 8000dac:	4692      	mov	sl, r2
 8000dae:	2003      	movs	r0, #3
 8000db0:	e771      	b.n	8000c96 <__aeabi_fmul+0x56>
 8000db2:	4648      	mov	r0, r9
 8000db4:	f002 f956 	bl	8003064 <__clzsi2>
 8000db8:	464a      	mov	r2, r9
 8000dba:	1f43      	subs	r3, r0, #5
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	1a2d      	subs	r5, r5, r0
 8000dc0:	4691      	mov	r9, r2
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	3d76      	subs	r5, #118	; 0x76
 8000dc6:	e766      	b.n	8000c96 <__aeabi_fmul+0x56>
 8000dc8:	230c      	movs	r3, #12
 8000dca:	469a      	mov	sl, r3
 8000dcc:	3b09      	subs	r3, #9
 8000dce:	25ff      	movs	r5, #255	; 0xff
 8000dd0:	469b      	mov	fp, r3
 8000dd2:	e74d      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000dd4:	0020      	movs	r0, r4
 8000dd6:	f002 f945 	bl	8003064 <__clzsi2>
 8000dda:	2576      	movs	r5, #118	; 0x76
 8000ddc:	1f43      	subs	r3, r0, #5
 8000dde:	409c      	lsls	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	426d      	negs	r5, r5
 8000de4:	469a      	mov	sl, r3
 8000de6:	469b      	mov	fp, r3
 8000de8:	1a2d      	subs	r5, r5, r0
 8000dea:	e741      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000dec:	2480      	movs	r4, #128	; 0x80
 8000dee:	2700      	movs	r7, #0
 8000df0:	20ff      	movs	r0, #255	; 0xff
 8000df2:	03e4      	lsls	r4, r4, #15
 8000df4:	e770      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000df6:	2301      	movs	r3, #1
 8000df8:	1a1b      	subs	r3, r3, r0
 8000dfa:	2b1b      	cmp	r3, #27
 8000dfc:	dd00      	ble.n	8000e00 <__aeabi_fmul+0x1c0>
 8000dfe:	e769      	b.n	8000cd4 <__aeabi_fmul+0x94>
 8000e00:	319e      	adds	r1, #158	; 0x9e
 8000e02:	0020      	movs	r0, r4
 8000e04:	408c      	lsls	r4, r1
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	1e63      	subs	r3, r4, #1
 8000e0a:	419c      	sbcs	r4, r3
 8000e0c:	4304      	orrs	r4, r0
 8000e0e:	0763      	lsls	r3, r4, #29
 8000e10:	d004      	beq.n	8000e1c <__aeabi_fmul+0x1dc>
 8000e12:	230f      	movs	r3, #15
 8000e14:	4023      	ands	r3, r4
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d000      	beq.n	8000e1c <__aeabi_fmul+0x1dc>
 8000e1a:	3404      	adds	r4, #4
 8000e1c:	0163      	lsls	r3, r4, #5
 8000e1e:	d51a      	bpl.n	8000e56 <__aeabi_fmul+0x216>
 8000e20:	2001      	movs	r0, #1
 8000e22:	2400      	movs	r4, #0
 8000e24:	e758      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000e26:	2080      	movs	r0, #128	; 0x80
 8000e28:	03c0      	lsls	r0, r0, #15
 8000e2a:	4204      	tst	r4, r0
 8000e2c:	d009      	beq.n	8000e42 <__aeabi_fmul+0x202>
 8000e2e:	464b      	mov	r3, r9
 8000e30:	4203      	tst	r3, r0
 8000e32:	d106      	bne.n	8000e42 <__aeabi_fmul+0x202>
 8000e34:	464c      	mov	r4, r9
 8000e36:	4304      	orrs	r4, r0
 8000e38:	0264      	lsls	r4, r4, #9
 8000e3a:	4647      	mov	r7, r8
 8000e3c:	20ff      	movs	r0, #255	; 0xff
 8000e3e:	0a64      	lsrs	r4, r4, #9
 8000e40:	e74a      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000e42:	2080      	movs	r0, #128	; 0x80
 8000e44:	03c0      	lsls	r0, r0, #15
 8000e46:	4304      	orrs	r4, r0
 8000e48:	0264      	lsls	r4, r4, #9
 8000e4a:	0037      	movs	r7, r6
 8000e4c:	20ff      	movs	r0, #255	; 0xff
 8000e4e:	0a64      	lsrs	r4, r4, #9
 8000e50:	e742      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000e52:	0029      	movs	r1, r5
 8000e54:	e78e      	b.n	8000d74 <__aeabi_fmul+0x134>
 8000e56:	01a4      	lsls	r4, r4, #6
 8000e58:	2000      	movs	r0, #0
 8000e5a:	0a64      	lsrs	r4, r4, #9
 8000e5c:	e73c      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000e5e:	2080      	movs	r0, #128	; 0x80
 8000e60:	03c0      	lsls	r0, r0, #15
 8000e62:	4304      	orrs	r4, r0
 8000e64:	0264      	lsls	r4, r4, #9
 8000e66:	20ff      	movs	r0, #255	; 0xff
 8000e68:	0a64      	lsrs	r4, r4, #9
 8000e6a:	e735      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000e6c:	0800d7d0 	.word	0x0800d7d0
 8000e70:	f7ffffff 	.word	0xf7ffffff

08000e74 <__aeabi_fsub>:
 8000e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e76:	4646      	mov	r6, r8
 8000e78:	46d6      	mov	lr, sl
 8000e7a:	464f      	mov	r7, r9
 8000e7c:	0243      	lsls	r3, r0, #9
 8000e7e:	0a5b      	lsrs	r3, r3, #9
 8000e80:	00da      	lsls	r2, r3, #3
 8000e82:	4694      	mov	ip, r2
 8000e84:	024a      	lsls	r2, r1, #9
 8000e86:	b5c0      	push	{r6, r7, lr}
 8000e88:	0044      	lsls	r4, r0, #1
 8000e8a:	0a56      	lsrs	r6, r2, #9
 8000e8c:	1c05      	adds	r5, r0, #0
 8000e8e:	46b0      	mov	r8, r6
 8000e90:	0e24      	lsrs	r4, r4, #24
 8000e92:	004e      	lsls	r6, r1, #1
 8000e94:	0992      	lsrs	r2, r2, #6
 8000e96:	001f      	movs	r7, r3
 8000e98:	0020      	movs	r0, r4
 8000e9a:	4692      	mov	sl, r2
 8000e9c:	0fed      	lsrs	r5, r5, #31
 8000e9e:	0e36      	lsrs	r6, r6, #24
 8000ea0:	0fc9      	lsrs	r1, r1, #31
 8000ea2:	2eff      	cmp	r6, #255	; 0xff
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_fsub+0x34>
 8000ea6:	e07f      	b.n	8000fa8 <__aeabi_fsub+0x134>
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4051      	eors	r1, r2
 8000eac:	428d      	cmp	r5, r1
 8000eae:	d051      	beq.n	8000f54 <__aeabi_fsub+0xe0>
 8000eb0:	1ba2      	subs	r2, r4, r6
 8000eb2:	4691      	mov	r9, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	dc00      	bgt.n	8000eba <__aeabi_fsub+0x46>
 8000eb8:	e07e      	b.n	8000fb8 <__aeabi_fsub+0x144>
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fsub+0x4c>
 8000ebe:	e099      	b.n	8000ff4 <__aeabi_fsub+0x180>
 8000ec0:	2cff      	cmp	r4, #255	; 0xff
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x52>
 8000ec4:	e08c      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	4652      	mov	r2, sl
 8000eca:	04db      	lsls	r3, r3, #19
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	4692      	mov	sl, r2
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2a1b      	cmp	r2, #27
 8000ed6:	dc08      	bgt.n	8000eea <__aeabi_fsub+0x76>
 8000ed8:	4653      	mov	r3, sl
 8000eda:	2120      	movs	r1, #32
 8000edc:	40d3      	lsrs	r3, r2
 8000ede:	1a89      	subs	r1, r1, r2
 8000ee0:	4652      	mov	r2, sl
 8000ee2:	408a      	lsls	r2, r1
 8000ee4:	1e51      	subs	r1, r2, #1
 8000ee6:	418a      	sbcs	r2, r1
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	4662      	mov	r2, ip
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	015a      	lsls	r2, r3, #5
 8000ef0:	d400      	bmi.n	8000ef4 <__aeabi_fsub+0x80>
 8000ef2:	e0f3      	b.n	80010dc <__aeabi_fsub+0x268>
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	099e      	lsrs	r6, r3, #6
 8000ef8:	0030      	movs	r0, r6
 8000efa:	f002 f8b3 	bl	8003064 <__clzsi2>
 8000efe:	3805      	subs	r0, #5
 8000f00:	4086      	lsls	r6, r0
 8000f02:	4284      	cmp	r4, r0
 8000f04:	dd00      	ble.n	8000f08 <__aeabi_fsub+0x94>
 8000f06:	e0f7      	b.n	80010f8 <__aeabi_fsub+0x284>
 8000f08:	0032      	movs	r2, r6
 8000f0a:	1b04      	subs	r4, r0, r4
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	3401      	adds	r4, #1
 8000f10:	40e2      	lsrs	r2, r4
 8000f12:	1b04      	subs	r4, r0, r4
 8000f14:	40a6      	lsls	r6, r4
 8000f16:	0033      	movs	r3, r6
 8000f18:	1e5e      	subs	r6, r3, #1
 8000f1a:	41b3      	sbcs	r3, r6
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	075a      	lsls	r2, r3, #29
 8000f22:	d004      	beq.n	8000f2e <__aeabi_fsub+0xba>
 8000f24:	220f      	movs	r2, #15
 8000f26:	401a      	ands	r2, r3
 8000f28:	2a04      	cmp	r2, #4
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0xba>
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	015a      	lsls	r2, r3, #5
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_fsub+0xc0>
 8000f32:	e0d6      	b.n	80010e2 <__aeabi_fsub+0x26e>
 8000f34:	1c62      	adds	r2, r4, #1
 8000f36:	2cfe      	cmp	r4, #254	; 0xfe
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0xc8>
 8000f3a:	e0da      	b.n	80010f2 <__aeabi_fsub+0x27e>
 8000f3c:	019b      	lsls	r3, r3, #6
 8000f3e:	0a5f      	lsrs	r7, r3, #9
 8000f40:	b2d0      	uxtb	r0, r2
 8000f42:	05c0      	lsls	r0, r0, #23
 8000f44:	4338      	orrs	r0, r7
 8000f46:	07ed      	lsls	r5, r5, #31
 8000f48:	4328      	orrs	r0, r5
 8000f4a:	bce0      	pop	{r5, r6, r7}
 8000f4c:	46ba      	mov	sl, r7
 8000f4e:	46b1      	mov	r9, r6
 8000f50:	46a8      	mov	r8, r5
 8000f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f54:	1ba2      	subs	r2, r4, r6
 8000f56:	4691      	mov	r9, r2
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	dd63      	ble.n	8001024 <__aeabi_fsub+0x1b0>
 8000f5c:	2e00      	cmp	r6, #0
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_fsub+0xee>
 8000f60:	e099      	b.n	8001096 <__aeabi_fsub+0x222>
 8000f62:	2cff      	cmp	r4, #255	; 0xff
 8000f64:	d03c      	beq.n	8000fe0 <__aeabi_fsub+0x16c>
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	4652      	mov	r2, sl
 8000f6a:	04db      	lsls	r3, r3, #19
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	4692      	mov	sl, r2
 8000f70:	464a      	mov	r2, r9
 8000f72:	2301      	movs	r3, #1
 8000f74:	2a1b      	cmp	r2, #27
 8000f76:	dc08      	bgt.n	8000f8a <__aeabi_fsub+0x116>
 8000f78:	4653      	mov	r3, sl
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	40d3      	lsrs	r3, r2
 8000f7e:	1a89      	subs	r1, r1, r2
 8000f80:	4652      	mov	r2, sl
 8000f82:	408a      	lsls	r2, r1
 8000f84:	1e51      	subs	r1, r2, #1
 8000f86:	418a      	sbcs	r2, r1
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	015a      	lsls	r2, r3, #5
 8000f8e:	d400      	bmi.n	8000f92 <__aeabi_fsub+0x11e>
 8000f90:	e0a4      	b.n	80010dc <__aeabi_fsub+0x268>
 8000f92:	3401      	adds	r4, #1
 8000f94:	2cff      	cmp	r4, #255	; 0xff
 8000f96:	d100      	bne.n	8000f9a <__aeabi_fsub+0x126>
 8000f98:	e0ab      	b.n	80010f2 <__aeabi_fsub+0x27e>
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4997      	ldr	r1, [pc, #604]	; (80011fc <__aeabi_fsub+0x388>)
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	085b      	lsrs	r3, r3, #1
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	e7bb      	b.n	8000f20 <__aeabi_fsub+0xac>
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d032      	beq.n	8001012 <__aeabi_fsub+0x19e>
 8000fac:	428d      	cmp	r5, r1
 8000fae:	d035      	beq.n	800101c <__aeabi_fsub+0x1a8>
 8000fb0:	22ff      	movs	r2, #255	; 0xff
 8000fb2:	4252      	negs	r2, r2
 8000fb4:	4691      	mov	r9, r2
 8000fb6:	44a1      	add	r9, r4
 8000fb8:	464a      	mov	r2, r9
 8000fba:	2a00      	cmp	r2, #0
 8000fbc:	d051      	beq.n	8001062 <__aeabi_fsub+0x1ee>
 8000fbe:	1b30      	subs	r0, r6, r4
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fsub+0x152>
 8000fc4:	e09c      	b.n	8001100 <__aeabi_fsub+0x28c>
 8000fc6:	4663      	mov	r3, ip
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x15a>
 8000fcc:	e0df      	b.n	800118e <__aeabi_fsub+0x31a>
 8000fce:	3801      	subs	r0, #1
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x162>
 8000fd4:	e0f7      	b.n	80011c6 <__aeabi_fsub+0x352>
 8000fd6:	2eff      	cmp	r6, #255	; 0xff
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_fsub+0x168>
 8000fda:	e099      	b.n	8001110 <__aeabi_fsub+0x29c>
 8000fdc:	000d      	movs	r5, r1
 8000fde:	4643      	mov	r3, r8
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x172>
 8000fe4:	e085      	b.n	80010f2 <__aeabi_fsub+0x27e>
 8000fe6:	2780      	movs	r7, #128	; 0x80
 8000fe8:	03ff      	lsls	r7, r7, #15
 8000fea:	431f      	orrs	r7, r3
 8000fec:	027f      	lsls	r7, r7, #9
 8000fee:	20ff      	movs	r0, #255	; 0xff
 8000ff0:	0a7f      	lsrs	r7, r7, #9
 8000ff2:	e7a6      	b.n	8000f42 <__aeabi_fsub+0xce>
 8000ff4:	4652      	mov	r2, sl
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d074      	beq.n	80010e4 <__aeabi_fsub+0x270>
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4252      	negs	r2, r2
 8000ffe:	4690      	mov	r8, r2
 8001000:	44c1      	add	r9, r8
 8001002:	464a      	mov	r2, r9
 8001004:	2a00      	cmp	r2, #0
 8001006:	d100      	bne.n	800100a <__aeabi_fsub+0x196>
 8001008:	e0c8      	b.n	800119c <__aeabi_fsub+0x328>
 800100a:	2cff      	cmp	r4, #255	; 0xff
 800100c:	d000      	beq.n	8001010 <__aeabi_fsub+0x19c>
 800100e:	e75f      	b.n	8000ed0 <__aeabi_fsub+0x5c>
 8001010:	e7e6      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 8001012:	2201      	movs	r2, #1
 8001014:	4051      	eors	r1, r2
 8001016:	42a9      	cmp	r1, r5
 8001018:	d000      	beq.n	800101c <__aeabi_fsub+0x1a8>
 800101a:	e749      	b.n	8000eb0 <__aeabi_fsub+0x3c>
 800101c:	22ff      	movs	r2, #255	; 0xff
 800101e:	4252      	negs	r2, r2
 8001020:	4691      	mov	r9, r2
 8001022:	44a1      	add	r9, r4
 8001024:	464a      	mov	r2, r9
 8001026:	2a00      	cmp	r2, #0
 8001028:	d043      	beq.n	80010b2 <__aeabi_fsub+0x23e>
 800102a:	1b31      	subs	r1, r6, r4
 800102c:	2c00      	cmp	r4, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_fsub+0x1be>
 8001030:	e08c      	b.n	800114c <__aeabi_fsub+0x2d8>
 8001032:	2eff      	cmp	r6, #255	; 0xff
 8001034:	d100      	bne.n	8001038 <__aeabi_fsub+0x1c4>
 8001036:	e092      	b.n	800115e <__aeabi_fsub+0x2ea>
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	4662      	mov	r2, ip
 800103c:	04db      	lsls	r3, r3, #19
 800103e:	431a      	orrs	r2, r3
 8001040:	4694      	mov	ip, r2
 8001042:	2301      	movs	r3, #1
 8001044:	291b      	cmp	r1, #27
 8001046:	dc09      	bgt.n	800105c <__aeabi_fsub+0x1e8>
 8001048:	2020      	movs	r0, #32
 800104a:	4663      	mov	r3, ip
 800104c:	4662      	mov	r2, ip
 800104e:	40cb      	lsrs	r3, r1
 8001050:	1a41      	subs	r1, r0, r1
 8001052:	408a      	lsls	r2, r1
 8001054:	0011      	movs	r1, r2
 8001056:	1e48      	subs	r0, r1, #1
 8001058:	4181      	sbcs	r1, r0
 800105a:	430b      	orrs	r3, r1
 800105c:	0034      	movs	r4, r6
 800105e:	4453      	add	r3, sl
 8001060:	e794      	b.n	8000f8c <__aeabi_fsub+0x118>
 8001062:	22fe      	movs	r2, #254	; 0xfe
 8001064:	1c66      	adds	r6, r4, #1
 8001066:	4232      	tst	r2, r6
 8001068:	d164      	bne.n	8001134 <__aeabi_fsub+0x2c0>
 800106a:	2c00      	cmp	r4, #0
 800106c:	d000      	beq.n	8001070 <__aeabi_fsub+0x1fc>
 800106e:	e082      	b.n	8001176 <__aeabi_fsub+0x302>
 8001070:	4663      	mov	r3, ip
 8001072:	2b00      	cmp	r3, #0
 8001074:	d100      	bne.n	8001078 <__aeabi_fsub+0x204>
 8001076:	e0ab      	b.n	80011d0 <__aeabi_fsub+0x35c>
 8001078:	4653      	mov	r3, sl
 800107a:	2b00      	cmp	r3, #0
 800107c:	d100      	bne.n	8001080 <__aeabi_fsub+0x20c>
 800107e:	e760      	b.n	8000f42 <__aeabi_fsub+0xce>
 8001080:	4663      	mov	r3, ip
 8001082:	4652      	mov	r2, sl
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	015a      	lsls	r2, r3, #5
 8001088:	d400      	bmi.n	800108c <__aeabi_fsub+0x218>
 800108a:	e0aa      	b.n	80011e2 <__aeabi_fsub+0x36e>
 800108c:	4663      	mov	r3, ip
 800108e:	4652      	mov	r2, sl
 8001090:	000d      	movs	r5, r1
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	e744      	b.n	8000f20 <__aeabi_fsub+0xac>
 8001096:	4652      	mov	r2, sl
 8001098:	2a00      	cmp	r2, #0
 800109a:	d023      	beq.n	80010e4 <__aeabi_fsub+0x270>
 800109c:	2201      	movs	r2, #1
 800109e:	4252      	negs	r2, r2
 80010a0:	4690      	mov	r8, r2
 80010a2:	44c1      	add	r9, r8
 80010a4:	464a      	mov	r2, r9
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d075      	beq.n	8001196 <__aeabi_fsub+0x322>
 80010aa:	2cff      	cmp	r4, #255	; 0xff
 80010ac:	d000      	beq.n	80010b0 <__aeabi_fsub+0x23c>
 80010ae:	e75f      	b.n	8000f70 <__aeabi_fsub+0xfc>
 80010b0:	e796      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 80010b2:	26fe      	movs	r6, #254	; 0xfe
 80010b4:	3401      	adds	r4, #1
 80010b6:	4226      	tst	r6, r4
 80010b8:	d153      	bne.n	8001162 <__aeabi_fsub+0x2ee>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d172      	bne.n	80011a4 <__aeabi_fsub+0x330>
 80010be:	4663      	mov	r3, ip
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x252>
 80010c4:	e093      	b.n	80011ee <__aeabi_fsub+0x37a>
 80010c6:	4653      	mov	r3, sl
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_fsub+0x25a>
 80010cc:	e739      	b.n	8000f42 <__aeabi_fsub+0xce>
 80010ce:	4463      	add	r3, ip
 80010d0:	2400      	movs	r4, #0
 80010d2:	015a      	lsls	r2, r3, #5
 80010d4:	d502      	bpl.n	80010dc <__aeabi_fsub+0x268>
 80010d6:	4a4a      	ldr	r2, [pc, #296]	; (8001200 <__aeabi_fsub+0x38c>)
 80010d8:	3401      	adds	r4, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	075a      	lsls	r2, r3, #29
 80010de:	d000      	beq.n	80010e2 <__aeabi_fsub+0x26e>
 80010e0:	e720      	b.n	8000f24 <__aeabi_fsub+0xb0>
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	2cff      	cmp	r4, #255	; 0xff
 80010e6:	d100      	bne.n	80010ea <__aeabi_fsub+0x276>
 80010e8:	e77a      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 80010ea:	025b      	lsls	r3, r3, #9
 80010ec:	0a5f      	lsrs	r7, r3, #9
 80010ee:	b2e0      	uxtb	r0, r4
 80010f0:	e727      	b.n	8000f42 <__aeabi_fsub+0xce>
 80010f2:	20ff      	movs	r0, #255	; 0xff
 80010f4:	2700      	movs	r7, #0
 80010f6:	e724      	b.n	8000f42 <__aeabi_fsub+0xce>
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <__aeabi_fsub+0x38c>)
 80010fa:	1a24      	subs	r4, r4, r0
 80010fc:	4033      	ands	r3, r6
 80010fe:	e70f      	b.n	8000f20 <__aeabi_fsub+0xac>
 8001100:	2eff      	cmp	r6, #255	; 0xff
 8001102:	d100      	bne.n	8001106 <__aeabi_fsub+0x292>
 8001104:	e76a      	b.n	8000fdc <__aeabi_fsub+0x168>
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	4662      	mov	r2, ip
 800110a:	04db      	lsls	r3, r3, #19
 800110c:	431a      	orrs	r2, r3
 800110e:	4694      	mov	ip, r2
 8001110:	2301      	movs	r3, #1
 8001112:	281b      	cmp	r0, #27
 8001114:	dc09      	bgt.n	800112a <__aeabi_fsub+0x2b6>
 8001116:	2420      	movs	r4, #32
 8001118:	4663      	mov	r3, ip
 800111a:	4662      	mov	r2, ip
 800111c:	40c3      	lsrs	r3, r0
 800111e:	1a20      	subs	r0, r4, r0
 8001120:	4082      	lsls	r2, r0
 8001122:	0010      	movs	r0, r2
 8001124:	1e44      	subs	r4, r0, #1
 8001126:	41a0      	sbcs	r0, r4
 8001128:	4303      	orrs	r3, r0
 800112a:	4652      	mov	r2, sl
 800112c:	000d      	movs	r5, r1
 800112e:	0034      	movs	r4, r6
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	e6dc      	b.n	8000eee <__aeabi_fsub+0x7a>
 8001134:	4663      	mov	r3, ip
 8001136:	4652      	mov	r2, sl
 8001138:	1a9e      	subs	r6, r3, r2
 800113a:	0173      	lsls	r3, r6, #5
 800113c:	d417      	bmi.n	800116e <__aeabi_fsub+0x2fa>
 800113e:	2e00      	cmp	r6, #0
 8001140:	d000      	beq.n	8001144 <__aeabi_fsub+0x2d0>
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_fsub+0x84>
 8001144:	2500      	movs	r5, #0
 8001146:	2000      	movs	r0, #0
 8001148:	2700      	movs	r7, #0
 800114a:	e6fa      	b.n	8000f42 <__aeabi_fsub+0xce>
 800114c:	4663      	mov	r3, ip
 800114e:	2b00      	cmp	r3, #0
 8001150:	d044      	beq.n	80011dc <__aeabi_fsub+0x368>
 8001152:	3901      	subs	r1, #1
 8001154:	2900      	cmp	r1, #0
 8001156:	d04c      	beq.n	80011f2 <__aeabi_fsub+0x37e>
 8001158:	2eff      	cmp	r6, #255	; 0xff
 800115a:	d000      	beq.n	800115e <__aeabi_fsub+0x2ea>
 800115c:	e771      	b.n	8001042 <__aeabi_fsub+0x1ce>
 800115e:	4643      	mov	r3, r8
 8001160:	e73e      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 8001162:	2cff      	cmp	r4, #255	; 0xff
 8001164:	d0c5      	beq.n	80010f2 <__aeabi_fsub+0x27e>
 8001166:	4652      	mov	r2, sl
 8001168:	4462      	add	r2, ip
 800116a:	0853      	lsrs	r3, r2, #1
 800116c:	e7b6      	b.n	80010dc <__aeabi_fsub+0x268>
 800116e:	4663      	mov	r3, ip
 8001170:	000d      	movs	r5, r1
 8001172:	1ad6      	subs	r6, r2, r3
 8001174:	e6c0      	b.n	8000ef8 <__aeabi_fsub+0x84>
 8001176:	4662      	mov	r2, ip
 8001178:	2a00      	cmp	r2, #0
 800117a:	d116      	bne.n	80011aa <__aeabi_fsub+0x336>
 800117c:	4653      	mov	r3, sl
 800117e:	2b00      	cmp	r3, #0
 8001180:	d000      	beq.n	8001184 <__aeabi_fsub+0x310>
 8001182:	e72b      	b.n	8000fdc <__aeabi_fsub+0x168>
 8001184:	2780      	movs	r7, #128	; 0x80
 8001186:	2500      	movs	r5, #0
 8001188:	20ff      	movs	r0, #255	; 0xff
 800118a:	03ff      	lsls	r7, r7, #15
 800118c:	e6d9      	b.n	8000f42 <__aeabi_fsub+0xce>
 800118e:	000d      	movs	r5, r1
 8001190:	4643      	mov	r3, r8
 8001192:	0034      	movs	r4, r6
 8001194:	e7a6      	b.n	80010e4 <__aeabi_fsub+0x270>
 8001196:	4653      	mov	r3, sl
 8001198:	4463      	add	r3, ip
 800119a:	e6f7      	b.n	8000f8c <__aeabi_fsub+0x118>
 800119c:	4663      	mov	r3, ip
 800119e:	4652      	mov	r2, sl
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	e6a4      	b.n	8000eee <__aeabi_fsub+0x7a>
 80011a4:	4662      	mov	r2, ip
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	d0d9      	beq.n	800115e <__aeabi_fsub+0x2ea>
 80011aa:	4652      	mov	r2, sl
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_fsub+0x33e>
 80011b0:	e716      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	03d2      	lsls	r2, r2, #15
 80011b6:	4213      	tst	r3, r2
 80011b8:	d100      	bne.n	80011bc <__aeabi_fsub+0x348>
 80011ba:	e711      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 80011bc:	4640      	mov	r0, r8
 80011be:	4210      	tst	r0, r2
 80011c0:	d000      	beq.n	80011c4 <__aeabi_fsub+0x350>
 80011c2:	e70d      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 80011c4:	e70a      	b.n	8000fdc <__aeabi_fsub+0x168>
 80011c6:	4652      	mov	r2, sl
 80011c8:	000d      	movs	r5, r1
 80011ca:	0034      	movs	r4, r6
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	e68e      	b.n	8000eee <__aeabi_fsub+0x7a>
 80011d0:	4653      	mov	r3, sl
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d008      	beq.n	80011e8 <__aeabi_fsub+0x374>
 80011d6:	000d      	movs	r5, r1
 80011d8:	4647      	mov	r7, r8
 80011da:	e6b2      	b.n	8000f42 <__aeabi_fsub+0xce>
 80011dc:	4643      	mov	r3, r8
 80011de:	0034      	movs	r4, r6
 80011e0:	e780      	b.n	80010e4 <__aeabi_fsub+0x270>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d000      	beq.n	80011e8 <__aeabi_fsub+0x374>
 80011e6:	e779      	b.n	80010dc <__aeabi_fsub+0x268>
 80011e8:	2500      	movs	r5, #0
 80011ea:	2700      	movs	r7, #0
 80011ec:	e6a9      	b.n	8000f42 <__aeabi_fsub+0xce>
 80011ee:	4647      	mov	r7, r8
 80011f0:	e6a7      	b.n	8000f42 <__aeabi_fsub+0xce>
 80011f2:	4653      	mov	r3, sl
 80011f4:	0034      	movs	r4, r6
 80011f6:	4463      	add	r3, ip
 80011f8:	e6c8      	b.n	8000f8c <__aeabi_fsub+0x118>
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	7dffffff 	.word	0x7dffffff
 8001200:	fbffffff 	.word	0xfbffffff

08001204 <__aeabi_f2iz>:
 8001204:	0241      	lsls	r1, r0, #9
 8001206:	0042      	lsls	r2, r0, #1
 8001208:	0fc3      	lsrs	r3, r0, #31
 800120a:	0a49      	lsrs	r1, r1, #9
 800120c:	2000      	movs	r0, #0
 800120e:	0e12      	lsrs	r2, r2, #24
 8001210:	2a7e      	cmp	r2, #126	; 0x7e
 8001212:	d903      	bls.n	800121c <__aeabi_f2iz+0x18>
 8001214:	2a9d      	cmp	r2, #157	; 0x9d
 8001216:	d902      	bls.n	800121e <__aeabi_f2iz+0x1a>
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <__aeabi_f2iz+0x3c>)
 800121a:	1898      	adds	r0, r3, r2
 800121c:	4770      	bx	lr
 800121e:	2080      	movs	r0, #128	; 0x80
 8001220:	0400      	lsls	r0, r0, #16
 8001222:	4301      	orrs	r1, r0
 8001224:	2a95      	cmp	r2, #149	; 0x95
 8001226:	dc07      	bgt.n	8001238 <__aeabi_f2iz+0x34>
 8001228:	2096      	movs	r0, #150	; 0x96
 800122a:	1a82      	subs	r2, r0, r2
 800122c:	40d1      	lsrs	r1, r2
 800122e:	4248      	negs	r0, r1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f3      	bne.n	800121c <__aeabi_f2iz+0x18>
 8001234:	0008      	movs	r0, r1
 8001236:	e7f1      	b.n	800121c <__aeabi_f2iz+0x18>
 8001238:	3a96      	subs	r2, #150	; 0x96
 800123a:	4091      	lsls	r1, r2
 800123c:	e7f7      	b.n	800122e <__aeabi_f2iz+0x2a>
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	7fffffff 	.word	0x7fffffff

08001244 <__aeabi_i2f>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	2800      	cmp	r0, #0
 8001248:	d013      	beq.n	8001272 <__aeabi_i2f+0x2e>
 800124a:	17c3      	asrs	r3, r0, #31
 800124c:	18c5      	adds	r5, r0, r3
 800124e:	405d      	eors	r5, r3
 8001250:	0fc4      	lsrs	r4, r0, #31
 8001252:	0028      	movs	r0, r5
 8001254:	f001 ff06 	bl	8003064 <__clzsi2>
 8001258:	239e      	movs	r3, #158	; 0x9e
 800125a:	0001      	movs	r1, r0
 800125c:	1a1b      	subs	r3, r3, r0
 800125e:	2b96      	cmp	r3, #150	; 0x96
 8001260:	dc0f      	bgt.n	8001282 <__aeabi_i2f+0x3e>
 8001262:	2808      	cmp	r0, #8
 8001264:	dd01      	ble.n	800126a <__aeabi_i2f+0x26>
 8001266:	3908      	subs	r1, #8
 8001268:	408d      	lsls	r5, r1
 800126a:	026d      	lsls	r5, r5, #9
 800126c:	0a6d      	lsrs	r5, r5, #9
 800126e:	b2d8      	uxtb	r0, r3
 8001270:	e002      	b.n	8001278 <__aeabi_i2f+0x34>
 8001272:	2400      	movs	r4, #0
 8001274:	2000      	movs	r0, #0
 8001276:	2500      	movs	r5, #0
 8001278:	05c0      	lsls	r0, r0, #23
 800127a:	4328      	orrs	r0, r5
 800127c:	07e4      	lsls	r4, r4, #31
 800127e:	4320      	orrs	r0, r4
 8001280:	bd70      	pop	{r4, r5, r6, pc}
 8001282:	2b99      	cmp	r3, #153	; 0x99
 8001284:	dd0b      	ble.n	800129e <__aeabi_i2f+0x5a>
 8001286:	2205      	movs	r2, #5
 8001288:	002e      	movs	r6, r5
 800128a:	1a12      	subs	r2, r2, r0
 800128c:	40d6      	lsrs	r6, r2
 800128e:	0002      	movs	r2, r0
 8001290:	321b      	adds	r2, #27
 8001292:	4095      	lsls	r5, r2
 8001294:	0028      	movs	r0, r5
 8001296:	1e45      	subs	r5, r0, #1
 8001298:	41a8      	sbcs	r0, r5
 800129a:	0035      	movs	r5, r6
 800129c:	4305      	orrs	r5, r0
 800129e:	2905      	cmp	r1, #5
 80012a0:	dd01      	ble.n	80012a6 <__aeabi_i2f+0x62>
 80012a2:	1f4a      	subs	r2, r1, #5
 80012a4:	4095      	lsls	r5, r2
 80012a6:	002a      	movs	r2, r5
 80012a8:	4e08      	ldr	r6, [pc, #32]	; (80012cc <__aeabi_i2f+0x88>)
 80012aa:	4032      	ands	r2, r6
 80012ac:	0768      	lsls	r0, r5, #29
 80012ae:	d009      	beq.n	80012c4 <__aeabi_i2f+0x80>
 80012b0:	200f      	movs	r0, #15
 80012b2:	4028      	ands	r0, r5
 80012b4:	2804      	cmp	r0, #4
 80012b6:	d005      	beq.n	80012c4 <__aeabi_i2f+0x80>
 80012b8:	3204      	adds	r2, #4
 80012ba:	0150      	lsls	r0, r2, #5
 80012bc:	d502      	bpl.n	80012c4 <__aeabi_i2f+0x80>
 80012be:	239f      	movs	r3, #159	; 0x9f
 80012c0:	4032      	ands	r2, r6
 80012c2:	1a5b      	subs	r3, r3, r1
 80012c4:	0192      	lsls	r2, r2, #6
 80012c6:	0a55      	lsrs	r5, r2, #9
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	e7d5      	b.n	8001278 <__aeabi_i2f+0x34>
 80012cc:	fbffffff 	.word	0xfbffffff

080012d0 <__aeabi_dadd>:
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d2:	464f      	mov	r7, r9
 80012d4:	46d6      	mov	lr, sl
 80012d6:	4646      	mov	r6, r8
 80012d8:	000d      	movs	r5, r1
 80012da:	0001      	movs	r1, r0
 80012dc:	0018      	movs	r0, r3
 80012de:	b5c0      	push	{r6, r7, lr}
 80012e0:	0017      	movs	r7, r2
 80012e2:	032b      	lsls	r3, r5, #12
 80012e4:	0a5a      	lsrs	r2, r3, #9
 80012e6:	0f4b      	lsrs	r3, r1, #29
 80012e8:	4313      	orrs	r3, r2
 80012ea:	00ca      	lsls	r2, r1, #3
 80012ec:	4691      	mov	r9, r2
 80012ee:	0302      	lsls	r2, r0, #12
 80012f0:	006e      	lsls	r6, r5, #1
 80012f2:	0041      	lsls	r1, r0, #1
 80012f4:	0a52      	lsrs	r2, r2, #9
 80012f6:	0fec      	lsrs	r4, r5, #31
 80012f8:	0f7d      	lsrs	r5, r7, #29
 80012fa:	4315      	orrs	r5, r2
 80012fc:	0d76      	lsrs	r6, r6, #21
 80012fe:	0d49      	lsrs	r1, r1, #21
 8001300:	0fc0      	lsrs	r0, r0, #31
 8001302:	4682      	mov	sl, r0
 8001304:	46ac      	mov	ip, r5
 8001306:	00ff      	lsls	r7, r7, #3
 8001308:	1a72      	subs	r2, r6, r1
 800130a:	4284      	cmp	r4, r0
 800130c:	d100      	bne.n	8001310 <__aeabi_dadd+0x40>
 800130e:	e098      	b.n	8001442 <__aeabi_dadd+0x172>
 8001310:	2a00      	cmp	r2, #0
 8001312:	dc00      	bgt.n	8001316 <__aeabi_dadd+0x46>
 8001314:	e081      	b.n	800141a <__aeabi_dadd+0x14a>
 8001316:	2900      	cmp	r1, #0
 8001318:	d100      	bne.n	800131c <__aeabi_dadd+0x4c>
 800131a:	e0b6      	b.n	800148a <__aeabi_dadd+0x1ba>
 800131c:	49c9      	ldr	r1, [pc, #804]	; (8001644 <__aeabi_dadd+0x374>)
 800131e:	428e      	cmp	r6, r1
 8001320:	d100      	bne.n	8001324 <__aeabi_dadd+0x54>
 8001322:	e172      	b.n	800160a <__aeabi_dadd+0x33a>
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	0028      	movs	r0, r5
 8001328:	0409      	lsls	r1, r1, #16
 800132a:	4308      	orrs	r0, r1
 800132c:	4684      	mov	ip, r0
 800132e:	2a38      	cmp	r2, #56	; 0x38
 8001330:	dd00      	ble.n	8001334 <__aeabi_dadd+0x64>
 8001332:	e15e      	b.n	80015f2 <__aeabi_dadd+0x322>
 8001334:	2a1f      	cmp	r2, #31
 8001336:	dd00      	ble.n	800133a <__aeabi_dadd+0x6a>
 8001338:	e1ee      	b.n	8001718 <__aeabi_dadd+0x448>
 800133a:	2020      	movs	r0, #32
 800133c:	0039      	movs	r1, r7
 800133e:	4665      	mov	r5, ip
 8001340:	1a80      	subs	r0, r0, r2
 8001342:	4087      	lsls	r7, r0
 8001344:	40d1      	lsrs	r1, r2
 8001346:	4085      	lsls	r5, r0
 8001348:	430d      	orrs	r5, r1
 800134a:	0039      	movs	r1, r7
 800134c:	1e4f      	subs	r7, r1, #1
 800134e:	41b9      	sbcs	r1, r7
 8001350:	4667      	mov	r7, ip
 8001352:	40d7      	lsrs	r7, r2
 8001354:	4329      	orrs	r1, r5
 8001356:	1bdb      	subs	r3, r3, r7
 8001358:	464a      	mov	r2, r9
 800135a:	1a55      	subs	r5, r2, r1
 800135c:	45a9      	cmp	r9, r5
 800135e:	4189      	sbcs	r1, r1
 8001360:	4249      	negs	r1, r1
 8001362:	1a5b      	subs	r3, r3, r1
 8001364:	4698      	mov	r8, r3
 8001366:	4643      	mov	r3, r8
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	d400      	bmi.n	800136e <__aeabi_dadd+0x9e>
 800136c:	e0cc      	b.n	8001508 <__aeabi_dadd+0x238>
 800136e:	4643      	mov	r3, r8
 8001370:	025b      	lsls	r3, r3, #9
 8001372:	0a5b      	lsrs	r3, r3, #9
 8001374:	4698      	mov	r8, r3
 8001376:	4643      	mov	r3, r8
 8001378:	2b00      	cmp	r3, #0
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0xae>
 800137c:	e12c      	b.n	80015d8 <__aeabi_dadd+0x308>
 800137e:	4640      	mov	r0, r8
 8001380:	f001 fe70 	bl	8003064 <__clzsi2>
 8001384:	0001      	movs	r1, r0
 8001386:	3908      	subs	r1, #8
 8001388:	2220      	movs	r2, #32
 800138a:	0028      	movs	r0, r5
 800138c:	4643      	mov	r3, r8
 800138e:	1a52      	subs	r2, r2, r1
 8001390:	408b      	lsls	r3, r1
 8001392:	40d0      	lsrs	r0, r2
 8001394:	408d      	lsls	r5, r1
 8001396:	4303      	orrs	r3, r0
 8001398:	428e      	cmp	r6, r1
 800139a:	dd00      	ble.n	800139e <__aeabi_dadd+0xce>
 800139c:	e117      	b.n	80015ce <__aeabi_dadd+0x2fe>
 800139e:	1b8e      	subs	r6, r1, r6
 80013a0:	1c72      	adds	r2, r6, #1
 80013a2:	2a1f      	cmp	r2, #31
 80013a4:	dd00      	ble.n	80013a8 <__aeabi_dadd+0xd8>
 80013a6:	e1a7      	b.n	80016f8 <__aeabi_dadd+0x428>
 80013a8:	2120      	movs	r1, #32
 80013aa:	0018      	movs	r0, r3
 80013ac:	002e      	movs	r6, r5
 80013ae:	1a89      	subs	r1, r1, r2
 80013b0:	408d      	lsls	r5, r1
 80013b2:	4088      	lsls	r0, r1
 80013b4:	40d6      	lsrs	r6, r2
 80013b6:	40d3      	lsrs	r3, r2
 80013b8:	1e69      	subs	r1, r5, #1
 80013ba:	418d      	sbcs	r5, r1
 80013bc:	4330      	orrs	r0, r6
 80013be:	4698      	mov	r8, r3
 80013c0:	2600      	movs	r6, #0
 80013c2:	4305      	orrs	r5, r0
 80013c4:	076b      	lsls	r3, r5, #29
 80013c6:	d009      	beq.n	80013dc <__aeabi_dadd+0x10c>
 80013c8:	230f      	movs	r3, #15
 80013ca:	402b      	ands	r3, r5
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d005      	beq.n	80013dc <__aeabi_dadd+0x10c>
 80013d0:	1d2b      	adds	r3, r5, #4
 80013d2:	42ab      	cmp	r3, r5
 80013d4:	41ad      	sbcs	r5, r5
 80013d6:	426d      	negs	r5, r5
 80013d8:	44a8      	add	r8, r5
 80013da:	001d      	movs	r5, r3
 80013dc:	4643      	mov	r3, r8
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	d400      	bmi.n	80013e4 <__aeabi_dadd+0x114>
 80013e2:	e094      	b.n	800150e <__aeabi_dadd+0x23e>
 80013e4:	4b97      	ldr	r3, [pc, #604]	; (8001644 <__aeabi_dadd+0x374>)
 80013e6:	1c72      	adds	r2, r6, #1
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d100      	bne.n	80013ee <__aeabi_dadd+0x11e>
 80013ec:	e09d      	b.n	800152a <__aeabi_dadd+0x25a>
 80013ee:	4641      	mov	r1, r8
 80013f0:	4b95      	ldr	r3, [pc, #596]	; (8001648 <__aeabi_dadd+0x378>)
 80013f2:	08ed      	lsrs	r5, r5, #3
 80013f4:	4019      	ands	r1, r3
 80013f6:	000b      	movs	r3, r1
 80013f8:	0552      	lsls	r2, r2, #21
 80013fa:	0749      	lsls	r1, r1, #29
 80013fc:	025b      	lsls	r3, r3, #9
 80013fe:	4329      	orrs	r1, r5
 8001400:	0b1b      	lsrs	r3, r3, #12
 8001402:	0d52      	lsrs	r2, r2, #21
 8001404:	0512      	lsls	r2, r2, #20
 8001406:	4313      	orrs	r3, r2
 8001408:	07e4      	lsls	r4, r4, #31
 800140a:	4323      	orrs	r3, r4
 800140c:	0008      	movs	r0, r1
 800140e:	0019      	movs	r1, r3
 8001410:	bce0      	pop	{r5, r6, r7}
 8001412:	46ba      	mov	sl, r7
 8001414:	46b1      	mov	r9, r6
 8001416:	46a8      	mov	r8, r5
 8001418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141a:	2a00      	cmp	r2, #0
 800141c:	d043      	beq.n	80014a6 <__aeabi_dadd+0x1d6>
 800141e:	1b8a      	subs	r2, r1, r6
 8001420:	2e00      	cmp	r6, #0
 8001422:	d000      	beq.n	8001426 <__aeabi_dadd+0x156>
 8001424:	e12a      	b.n	800167c <__aeabi_dadd+0x3ac>
 8001426:	464c      	mov	r4, r9
 8001428:	431c      	orrs	r4, r3
 800142a:	d100      	bne.n	800142e <__aeabi_dadd+0x15e>
 800142c:	e1d1      	b.n	80017d2 <__aeabi_dadd+0x502>
 800142e:	1e54      	subs	r4, r2, #1
 8001430:	2a01      	cmp	r2, #1
 8001432:	d100      	bne.n	8001436 <__aeabi_dadd+0x166>
 8001434:	e21f      	b.n	8001876 <__aeabi_dadd+0x5a6>
 8001436:	4d83      	ldr	r5, [pc, #524]	; (8001644 <__aeabi_dadd+0x374>)
 8001438:	42aa      	cmp	r2, r5
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x16e>
 800143c:	e272      	b.n	8001924 <__aeabi_dadd+0x654>
 800143e:	0022      	movs	r2, r4
 8001440:	e123      	b.n	800168a <__aeabi_dadd+0x3ba>
 8001442:	2a00      	cmp	r2, #0
 8001444:	dc00      	bgt.n	8001448 <__aeabi_dadd+0x178>
 8001446:	e098      	b.n	800157a <__aeabi_dadd+0x2aa>
 8001448:	2900      	cmp	r1, #0
 800144a:	d042      	beq.n	80014d2 <__aeabi_dadd+0x202>
 800144c:	497d      	ldr	r1, [pc, #500]	; (8001644 <__aeabi_dadd+0x374>)
 800144e:	428e      	cmp	r6, r1
 8001450:	d100      	bne.n	8001454 <__aeabi_dadd+0x184>
 8001452:	e0da      	b.n	800160a <__aeabi_dadd+0x33a>
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	0028      	movs	r0, r5
 8001458:	0409      	lsls	r1, r1, #16
 800145a:	4308      	orrs	r0, r1
 800145c:	4684      	mov	ip, r0
 800145e:	2a38      	cmp	r2, #56	; 0x38
 8001460:	dd00      	ble.n	8001464 <__aeabi_dadd+0x194>
 8001462:	e129      	b.n	80016b8 <__aeabi_dadd+0x3e8>
 8001464:	2a1f      	cmp	r2, #31
 8001466:	dc00      	bgt.n	800146a <__aeabi_dadd+0x19a>
 8001468:	e187      	b.n	800177a <__aeabi_dadd+0x4aa>
 800146a:	0011      	movs	r1, r2
 800146c:	4665      	mov	r5, ip
 800146e:	3920      	subs	r1, #32
 8001470:	40cd      	lsrs	r5, r1
 8001472:	2a20      	cmp	r2, #32
 8001474:	d004      	beq.n	8001480 <__aeabi_dadd+0x1b0>
 8001476:	2040      	movs	r0, #64	; 0x40
 8001478:	4661      	mov	r1, ip
 800147a:	1a82      	subs	r2, r0, r2
 800147c:	4091      	lsls	r1, r2
 800147e:	430f      	orrs	r7, r1
 8001480:	0039      	movs	r1, r7
 8001482:	1e4f      	subs	r7, r1, #1
 8001484:	41b9      	sbcs	r1, r7
 8001486:	430d      	orrs	r5, r1
 8001488:	e11b      	b.n	80016c2 <__aeabi_dadd+0x3f2>
 800148a:	0029      	movs	r1, r5
 800148c:	4339      	orrs	r1, r7
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x1c2>
 8001490:	e0b5      	b.n	80015fe <__aeabi_dadd+0x32e>
 8001492:	1e51      	subs	r1, r2, #1
 8001494:	2a01      	cmp	r2, #1
 8001496:	d100      	bne.n	800149a <__aeabi_dadd+0x1ca>
 8001498:	e1ab      	b.n	80017f2 <__aeabi_dadd+0x522>
 800149a:	486a      	ldr	r0, [pc, #424]	; (8001644 <__aeabi_dadd+0x374>)
 800149c:	4282      	cmp	r2, r0
 800149e:	d100      	bne.n	80014a2 <__aeabi_dadd+0x1d2>
 80014a0:	e1b2      	b.n	8001808 <__aeabi_dadd+0x538>
 80014a2:	000a      	movs	r2, r1
 80014a4:	e743      	b.n	800132e <__aeabi_dadd+0x5e>
 80014a6:	4969      	ldr	r1, [pc, #420]	; (800164c <__aeabi_dadd+0x37c>)
 80014a8:	1c75      	adds	r5, r6, #1
 80014aa:	420d      	tst	r5, r1
 80014ac:	d000      	beq.n	80014b0 <__aeabi_dadd+0x1e0>
 80014ae:	e0cf      	b.n	8001650 <__aeabi_dadd+0x380>
 80014b0:	2e00      	cmp	r6, #0
 80014b2:	d000      	beq.n	80014b6 <__aeabi_dadd+0x1e6>
 80014b4:	e193      	b.n	80017de <__aeabi_dadd+0x50e>
 80014b6:	4649      	mov	r1, r9
 80014b8:	4319      	orrs	r1, r3
 80014ba:	d100      	bne.n	80014be <__aeabi_dadd+0x1ee>
 80014bc:	e1d1      	b.n	8001862 <__aeabi_dadd+0x592>
 80014be:	4661      	mov	r1, ip
 80014c0:	4339      	orrs	r1, r7
 80014c2:	d000      	beq.n	80014c6 <__aeabi_dadd+0x1f6>
 80014c4:	e1e3      	b.n	800188e <__aeabi_dadd+0x5be>
 80014c6:	4649      	mov	r1, r9
 80014c8:	0758      	lsls	r0, r3, #29
 80014ca:	08c9      	lsrs	r1, r1, #3
 80014cc:	4301      	orrs	r1, r0
 80014ce:	08db      	lsrs	r3, r3, #3
 80014d0:	e026      	b.n	8001520 <__aeabi_dadd+0x250>
 80014d2:	0029      	movs	r1, r5
 80014d4:	4339      	orrs	r1, r7
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x20a>
 80014d8:	e091      	b.n	80015fe <__aeabi_dadd+0x32e>
 80014da:	1e51      	subs	r1, r2, #1
 80014dc:	2a01      	cmp	r2, #1
 80014de:	d005      	beq.n	80014ec <__aeabi_dadd+0x21c>
 80014e0:	4858      	ldr	r0, [pc, #352]	; (8001644 <__aeabi_dadd+0x374>)
 80014e2:	4282      	cmp	r2, r0
 80014e4:	d100      	bne.n	80014e8 <__aeabi_dadd+0x218>
 80014e6:	e18f      	b.n	8001808 <__aeabi_dadd+0x538>
 80014e8:	000a      	movs	r2, r1
 80014ea:	e7b8      	b.n	800145e <__aeabi_dadd+0x18e>
 80014ec:	003d      	movs	r5, r7
 80014ee:	444d      	add	r5, r9
 80014f0:	454d      	cmp	r5, r9
 80014f2:	4189      	sbcs	r1, r1
 80014f4:	4463      	add	r3, ip
 80014f6:	4698      	mov	r8, r3
 80014f8:	4249      	negs	r1, r1
 80014fa:	4488      	add	r8, r1
 80014fc:	4643      	mov	r3, r8
 80014fe:	2602      	movs	r6, #2
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	d500      	bpl.n	8001506 <__aeabi_dadd+0x236>
 8001504:	e0eb      	b.n	80016de <__aeabi_dadd+0x40e>
 8001506:	3e01      	subs	r6, #1
 8001508:	076b      	lsls	r3, r5, #29
 800150a:	d000      	beq.n	800150e <__aeabi_dadd+0x23e>
 800150c:	e75c      	b.n	80013c8 <__aeabi_dadd+0xf8>
 800150e:	4643      	mov	r3, r8
 8001510:	08e9      	lsrs	r1, r5, #3
 8001512:	075a      	lsls	r2, r3, #29
 8001514:	4311      	orrs	r1, r2
 8001516:	0032      	movs	r2, r6
 8001518:	08db      	lsrs	r3, r3, #3
 800151a:	484a      	ldr	r0, [pc, #296]	; (8001644 <__aeabi_dadd+0x374>)
 800151c:	4282      	cmp	r2, r0
 800151e:	d021      	beq.n	8001564 <__aeabi_dadd+0x294>
 8001520:	031b      	lsls	r3, r3, #12
 8001522:	0552      	lsls	r2, r2, #21
 8001524:	0b1b      	lsrs	r3, r3, #12
 8001526:	0d52      	lsrs	r2, r2, #21
 8001528:	e76c      	b.n	8001404 <__aeabi_dadd+0x134>
 800152a:	2300      	movs	r3, #0
 800152c:	2100      	movs	r1, #0
 800152e:	e769      	b.n	8001404 <__aeabi_dadd+0x134>
 8001530:	002a      	movs	r2, r5
 8001532:	433a      	orrs	r2, r7
 8001534:	d069      	beq.n	800160a <__aeabi_dadd+0x33a>
 8001536:	464a      	mov	r2, r9
 8001538:	0758      	lsls	r0, r3, #29
 800153a:	08d1      	lsrs	r1, r2, #3
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	031b      	lsls	r3, r3, #12
 8001542:	4308      	orrs	r0, r1
 8001544:	421a      	tst	r2, r3
 8001546:	d007      	beq.n	8001558 <__aeabi_dadd+0x288>
 8001548:	0029      	movs	r1, r5
 800154a:	08ed      	lsrs	r5, r5, #3
 800154c:	421d      	tst	r5, r3
 800154e:	d103      	bne.n	8001558 <__aeabi_dadd+0x288>
 8001550:	002a      	movs	r2, r5
 8001552:	08ff      	lsrs	r7, r7, #3
 8001554:	0748      	lsls	r0, r1, #29
 8001556:	4338      	orrs	r0, r7
 8001558:	0f43      	lsrs	r3, r0, #29
 800155a:	00c1      	lsls	r1, r0, #3
 800155c:	075b      	lsls	r3, r3, #29
 800155e:	08c9      	lsrs	r1, r1, #3
 8001560:	4319      	orrs	r1, r3
 8001562:	0013      	movs	r3, r2
 8001564:	000a      	movs	r2, r1
 8001566:	431a      	orrs	r2, r3
 8001568:	d100      	bne.n	800156c <__aeabi_dadd+0x29c>
 800156a:	e213      	b.n	8001994 <__aeabi_dadd+0x6c4>
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	0312      	lsls	r2, r2, #12
 8001570:	4313      	orrs	r3, r2
 8001572:	031b      	lsls	r3, r3, #12
 8001574:	4a33      	ldr	r2, [pc, #204]	; (8001644 <__aeabi_dadd+0x374>)
 8001576:	0b1b      	lsrs	r3, r3, #12
 8001578:	e744      	b.n	8001404 <__aeabi_dadd+0x134>
 800157a:	2a00      	cmp	r2, #0
 800157c:	d04b      	beq.n	8001616 <__aeabi_dadd+0x346>
 800157e:	1b8a      	subs	r2, r1, r6
 8001580:	2e00      	cmp	r6, #0
 8001582:	d100      	bne.n	8001586 <__aeabi_dadd+0x2b6>
 8001584:	e0e7      	b.n	8001756 <__aeabi_dadd+0x486>
 8001586:	482f      	ldr	r0, [pc, #188]	; (8001644 <__aeabi_dadd+0x374>)
 8001588:	4281      	cmp	r1, r0
 800158a:	d100      	bne.n	800158e <__aeabi_dadd+0x2be>
 800158c:	e195      	b.n	80018ba <__aeabi_dadd+0x5ea>
 800158e:	2080      	movs	r0, #128	; 0x80
 8001590:	0400      	lsls	r0, r0, #16
 8001592:	4303      	orrs	r3, r0
 8001594:	2a38      	cmp	r2, #56	; 0x38
 8001596:	dd00      	ble.n	800159a <__aeabi_dadd+0x2ca>
 8001598:	e143      	b.n	8001822 <__aeabi_dadd+0x552>
 800159a:	2a1f      	cmp	r2, #31
 800159c:	dd00      	ble.n	80015a0 <__aeabi_dadd+0x2d0>
 800159e:	e1db      	b.n	8001958 <__aeabi_dadd+0x688>
 80015a0:	2020      	movs	r0, #32
 80015a2:	001d      	movs	r5, r3
 80015a4:	464e      	mov	r6, r9
 80015a6:	1a80      	subs	r0, r0, r2
 80015a8:	4085      	lsls	r5, r0
 80015aa:	40d6      	lsrs	r6, r2
 80015ac:	4335      	orrs	r5, r6
 80015ae:	464e      	mov	r6, r9
 80015b0:	4086      	lsls	r6, r0
 80015b2:	0030      	movs	r0, r6
 80015b4:	40d3      	lsrs	r3, r2
 80015b6:	1e46      	subs	r6, r0, #1
 80015b8:	41b0      	sbcs	r0, r6
 80015ba:	449c      	add	ip, r3
 80015bc:	4305      	orrs	r5, r0
 80015be:	19ed      	adds	r5, r5, r7
 80015c0:	42bd      	cmp	r5, r7
 80015c2:	419b      	sbcs	r3, r3
 80015c4:	425b      	negs	r3, r3
 80015c6:	4463      	add	r3, ip
 80015c8:	4698      	mov	r8, r3
 80015ca:	000e      	movs	r6, r1
 80015cc:	e07f      	b.n	80016ce <__aeabi_dadd+0x3fe>
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <__aeabi_dadd+0x378>)
 80015d0:	1a76      	subs	r6, r6, r1
 80015d2:	4013      	ands	r3, r2
 80015d4:	4698      	mov	r8, r3
 80015d6:	e6f5      	b.n	80013c4 <__aeabi_dadd+0xf4>
 80015d8:	0028      	movs	r0, r5
 80015da:	f001 fd43 	bl	8003064 <__clzsi2>
 80015de:	0001      	movs	r1, r0
 80015e0:	3118      	adds	r1, #24
 80015e2:	291f      	cmp	r1, #31
 80015e4:	dc00      	bgt.n	80015e8 <__aeabi_dadd+0x318>
 80015e6:	e6cf      	b.n	8001388 <__aeabi_dadd+0xb8>
 80015e8:	002b      	movs	r3, r5
 80015ea:	3808      	subs	r0, #8
 80015ec:	4083      	lsls	r3, r0
 80015ee:	2500      	movs	r5, #0
 80015f0:	e6d2      	b.n	8001398 <__aeabi_dadd+0xc8>
 80015f2:	4662      	mov	r2, ip
 80015f4:	433a      	orrs	r2, r7
 80015f6:	0011      	movs	r1, r2
 80015f8:	1e4f      	subs	r7, r1, #1
 80015fa:	41b9      	sbcs	r1, r7
 80015fc:	e6ac      	b.n	8001358 <__aeabi_dadd+0x88>
 80015fe:	4649      	mov	r1, r9
 8001600:	0758      	lsls	r0, r3, #29
 8001602:	08c9      	lsrs	r1, r1, #3
 8001604:	4301      	orrs	r1, r0
 8001606:	08db      	lsrs	r3, r3, #3
 8001608:	e787      	b.n	800151a <__aeabi_dadd+0x24a>
 800160a:	4649      	mov	r1, r9
 800160c:	075a      	lsls	r2, r3, #29
 800160e:	08c9      	lsrs	r1, r1, #3
 8001610:	4311      	orrs	r1, r2
 8001612:	08db      	lsrs	r3, r3, #3
 8001614:	e7a6      	b.n	8001564 <__aeabi_dadd+0x294>
 8001616:	490d      	ldr	r1, [pc, #52]	; (800164c <__aeabi_dadd+0x37c>)
 8001618:	1c70      	adds	r0, r6, #1
 800161a:	4208      	tst	r0, r1
 800161c:	d000      	beq.n	8001620 <__aeabi_dadd+0x350>
 800161e:	e0bb      	b.n	8001798 <__aeabi_dadd+0x4c8>
 8001620:	2e00      	cmp	r6, #0
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x356>
 8001624:	e114      	b.n	8001850 <__aeabi_dadd+0x580>
 8001626:	4649      	mov	r1, r9
 8001628:	4319      	orrs	r1, r3
 800162a:	d100      	bne.n	800162e <__aeabi_dadd+0x35e>
 800162c:	e175      	b.n	800191a <__aeabi_dadd+0x64a>
 800162e:	0029      	movs	r1, r5
 8001630:	4339      	orrs	r1, r7
 8001632:	d000      	beq.n	8001636 <__aeabi_dadd+0x366>
 8001634:	e17e      	b.n	8001934 <__aeabi_dadd+0x664>
 8001636:	4649      	mov	r1, r9
 8001638:	0758      	lsls	r0, r3, #29
 800163a:	08c9      	lsrs	r1, r1, #3
 800163c:	4301      	orrs	r1, r0
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	e76e      	b.n	8001520 <__aeabi_dadd+0x250>
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	000007ff 	.word	0x000007ff
 8001648:	ff7fffff 	.word	0xff7fffff
 800164c:	000007fe 	.word	0x000007fe
 8001650:	4649      	mov	r1, r9
 8001652:	1bcd      	subs	r5, r1, r7
 8001654:	4661      	mov	r1, ip
 8001656:	1a58      	subs	r0, r3, r1
 8001658:	45a9      	cmp	r9, r5
 800165a:	4189      	sbcs	r1, r1
 800165c:	4249      	negs	r1, r1
 800165e:	4688      	mov	r8, r1
 8001660:	0001      	movs	r1, r0
 8001662:	4640      	mov	r0, r8
 8001664:	1a09      	subs	r1, r1, r0
 8001666:	4688      	mov	r8, r1
 8001668:	0209      	lsls	r1, r1, #8
 800166a:	d500      	bpl.n	800166e <__aeabi_dadd+0x39e>
 800166c:	e0a6      	b.n	80017bc <__aeabi_dadd+0x4ec>
 800166e:	4641      	mov	r1, r8
 8001670:	4329      	orrs	r1, r5
 8001672:	d000      	beq.n	8001676 <__aeabi_dadd+0x3a6>
 8001674:	e67f      	b.n	8001376 <__aeabi_dadd+0xa6>
 8001676:	2300      	movs	r3, #0
 8001678:	2400      	movs	r4, #0
 800167a:	e751      	b.n	8001520 <__aeabi_dadd+0x250>
 800167c:	4cc7      	ldr	r4, [pc, #796]	; (800199c <__aeabi_dadd+0x6cc>)
 800167e:	42a1      	cmp	r1, r4
 8001680:	d100      	bne.n	8001684 <__aeabi_dadd+0x3b4>
 8001682:	e0c7      	b.n	8001814 <__aeabi_dadd+0x544>
 8001684:	2480      	movs	r4, #128	; 0x80
 8001686:	0424      	lsls	r4, r4, #16
 8001688:	4323      	orrs	r3, r4
 800168a:	2a38      	cmp	r2, #56	; 0x38
 800168c:	dc54      	bgt.n	8001738 <__aeabi_dadd+0x468>
 800168e:	2a1f      	cmp	r2, #31
 8001690:	dd00      	ble.n	8001694 <__aeabi_dadd+0x3c4>
 8001692:	e0cc      	b.n	800182e <__aeabi_dadd+0x55e>
 8001694:	2420      	movs	r4, #32
 8001696:	4648      	mov	r0, r9
 8001698:	1aa4      	subs	r4, r4, r2
 800169a:	001d      	movs	r5, r3
 800169c:	464e      	mov	r6, r9
 800169e:	40a0      	lsls	r0, r4
 80016a0:	40d6      	lsrs	r6, r2
 80016a2:	40a5      	lsls	r5, r4
 80016a4:	0004      	movs	r4, r0
 80016a6:	40d3      	lsrs	r3, r2
 80016a8:	4662      	mov	r2, ip
 80016aa:	4335      	orrs	r5, r6
 80016ac:	1e66      	subs	r6, r4, #1
 80016ae:	41b4      	sbcs	r4, r6
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	469c      	mov	ip, r3
 80016b4:	4325      	orrs	r5, r4
 80016b6:	e044      	b.n	8001742 <__aeabi_dadd+0x472>
 80016b8:	4662      	mov	r2, ip
 80016ba:	433a      	orrs	r2, r7
 80016bc:	0015      	movs	r5, r2
 80016be:	1e6f      	subs	r7, r5, #1
 80016c0:	41bd      	sbcs	r5, r7
 80016c2:	444d      	add	r5, r9
 80016c4:	454d      	cmp	r5, r9
 80016c6:	4189      	sbcs	r1, r1
 80016c8:	4249      	negs	r1, r1
 80016ca:	4688      	mov	r8, r1
 80016cc:	4498      	add	r8, r3
 80016ce:	4643      	mov	r3, r8
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	d400      	bmi.n	80016d6 <__aeabi_dadd+0x406>
 80016d4:	e718      	b.n	8001508 <__aeabi_dadd+0x238>
 80016d6:	4bb1      	ldr	r3, [pc, #708]	; (800199c <__aeabi_dadd+0x6cc>)
 80016d8:	3601      	adds	r6, #1
 80016da:	429e      	cmp	r6, r3
 80016dc:	d049      	beq.n	8001772 <__aeabi_dadd+0x4a2>
 80016de:	4642      	mov	r2, r8
 80016e0:	4baf      	ldr	r3, [pc, #700]	; (80019a0 <__aeabi_dadd+0x6d0>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	401a      	ands	r2, r3
 80016e6:	0013      	movs	r3, r2
 80016e8:	086a      	lsrs	r2, r5, #1
 80016ea:	400d      	ands	r5, r1
 80016ec:	4315      	orrs	r5, r2
 80016ee:	07d9      	lsls	r1, r3, #31
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	4698      	mov	r8, r3
 80016f4:	430d      	orrs	r5, r1
 80016f6:	e665      	b.n	80013c4 <__aeabi_dadd+0xf4>
 80016f8:	0018      	movs	r0, r3
 80016fa:	3e1f      	subs	r6, #31
 80016fc:	40f0      	lsrs	r0, r6
 80016fe:	2a20      	cmp	r2, #32
 8001700:	d003      	beq.n	800170a <__aeabi_dadd+0x43a>
 8001702:	2140      	movs	r1, #64	; 0x40
 8001704:	1a8a      	subs	r2, r1, r2
 8001706:	4093      	lsls	r3, r2
 8001708:	431d      	orrs	r5, r3
 800170a:	1e69      	subs	r1, r5, #1
 800170c:	418d      	sbcs	r5, r1
 800170e:	2300      	movs	r3, #0
 8001710:	2600      	movs	r6, #0
 8001712:	4698      	mov	r8, r3
 8001714:	4305      	orrs	r5, r0
 8001716:	e6f7      	b.n	8001508 <__aeabi_dadd+0x238>
 8001718:	0011      	movs	r1, r2
 800171a:	4665      	mov	r5, ip
 800171c:	3920      	subs	r1, #32
 800171e:	40cd      	lsrs	r5, r1
 8001720:	2a20      	cmp	r2, #32
 8001722:	d004      	beq.n	800172e <__aeabi_dadd+0x45e>
 8001724:	2040      	movs	r0, #64	; 0x40
 8001726:	4661      	mov	r1, ip
 8001728:	1a82      	subs	r2, r0, r2
 800172a:	4091      	lsls	r1, r2
 800172c:	430f      	orrs	r7, r1
 800172e:	0039      	movs	r1, r7
 8001730:	1e4f      	subs	r7, r1, #1
 8001732:	41b9      	sbcs	r1, r7
 8001734:	4329      	orrs	r1, r5
 8001736:	e60f      	b.n	8001358 <__aeabi_dadd+0x88>
 8001738:	464a      	mov	r2, r9
 800173a:	4313      	orrs	r3, r2
 800173c:	001d      	movs	r5, r3
 800173e:	1e6b      	subs	r3, r5, #1
 8001740:	419d      	sbcs	r5, r3
 8001742:	1b7d      	subs	r5, r7, r5
 8001744:	42af      	cmp	r7, r5
 8001746:	419b      	sbcs	r3, r3
 8001748:	4662      	mov	r2, ip
 800174a:	425b      	negs	r3, r3
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	4698      	mov	r8, r3
 8001750:	4654      	mov	r4, sl
 8001752:	000e      	movs	r6, r1
 8001754:	e607      	b.n	8001366 <__aeabi_dadd+0x96>
 8001756:	4648      	mov	r0, r9
 8001758:	4318      	orrs	r0, r3
 800175a:	d100      	bne.n	800175e <__aeabi_dadd+0x48e>
 800175c:	e0b3      	b.n	80018c6 <__aeabi_dadd+0x5f6>
 800175e:	1e50      	subs	r0, r2, #1
 8001760:	2a01      	cmp	r2, #1
 8001762:	d100      	bne.n	8001766 <__aeabi_dadd+0x496>
 8001764:	e10d      	b.n	8001982 <__aeabi_dadd+0x6b2>
 8001766:	4d8d      	ldr	r5, [pc, #564]	; (800199c <__aeabi_dadd+0x6cc>)
 8001768:	42aa      	cmp	r2, r5
 800176a:	d100      	bne.n	800176e <__aeabi_dadd+0x49e>
 800176c:	e0a5      	b.n	80018ba <__aeabi_dadd+0x5ea>
 800176e:	0002      	movs	r2, r0
 8001770:	e710      	b.n	8001594 <__aeabi_dadd+0x2c4>
 8001772:	0032      	movs	r2, r6
 8001774:	2300      	movs	r3, #0
 8001776:	2100      	movs	r1, #0
 8001778:	e644      	b.n	8001404 <__aeabi_dadd+0x134>
 800177a:	2120      	movs	r1, #32
 800177c:	0038      	movs	r0, r7
 800177e:	1a89      	subs	r1, r1, r2
 8001780:	4665      	mov	r5, ip
 8001782:	408f      	lsls	r7, r1
 8001784:	408d      	lsls	r5, r1
 8001786:	40d0      	lsrs	r0, r2
 8001788:	1e79      	subs	r1, r7, #1
 800178a:	418f      	sbcs	r7, r1
 800178c:	4305      	orrs	r5, r0
 800178e:	433d      	orrs	r5, r7
 8001790:	4667      	mov	r7, ip
 8001792:	40d7      	lsrs	r7, r2
 8001794:	19db      	adds	r3, r3, r7
 8001796:	e794      	b.n	80016c2 <__aeabi_dadd+0x3f2>
 8001798:	4a80      	ldr	r2, [pc, #512]	; (800199c <__aeabi_dadd+0x6cc>)
 800179a:	4290      	cmp	r0, r2
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x4d0>
 800179e:	e0ec      	b.n	800197a <__aeabi_dadd+0x6aa>
 80017a0:	0039      	movs	r1, r7
 80017a2:	4449      	add	r1, r9
 80017a4:	4549      	cmp	r1, r9
 80017a6:	4192      	sbcs	r2, r2
 80017a8:	4463      	add	r3, ip
 80017aa:	4252      	negs	r2, r2
 80017ac:	189b      	adds	r3, r3, r2
 80017ae:	07dd      	lsls	r5, r3, #31
 80017b0:	0849      	lsrs	r1, r1, #1
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	4698      	mov	r8, r3
 80017b6:	0006      	movs	r6, r0
 80017b8:	430d      	orrs	r5, r1
 80017ba:	e6a5      	b.n	8001508 <__aeabi_dadd+0x238>
 80017bc:	464a      	mov	r2, r9
 80017be:	1abd      	subs	r5, r7, r2
 80017c0:	42af      	cmp	r7, r5
 80017c2:	4189      	sbcs	r1, r1
 80017c4:	4662      	mov	r2, ip
 80017c6:	4249      	negs	r1, r1
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4698      	mov	r8, r3
 80017ce:	4654      	mov	r4, sl
 80017d0:	e5d1      	b.n	8001376 <__aeabi_dadd+0xa6>
 80017d2:	076c      	lsls	r4, r5, #29
 80017d4:	08f9      	lsrs	r1, r7, #3
 80017d6:	4321      	orrs	r1, r4
 80017d8:	08eb      	lsrs	r3, r5, #3
 80017da:	0004      	movs	r4, r0
 80017dc:	e69d      	b.n	800151a <__aeabi_dadd+0x24a>
 80017de:	464a      	mov	r2, r9
 80017e0:	431a      	orrs	r2, r3
 80017e2:	d175      	bne.n	80018d0 <__aeabi_dadd+0x600>
 80017e4:	4661      	mov	r1, ip
 80017e6:	4339      	orrs	r1, r7
 80017e8:	d114      	bne.n	8001814 <__aeabi_dadd+0x544>
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	2400      	movs	r4, #0
 80017ee:	031b      	lsls	r3, r3, #12
 80017f0:	e6bc      	b.n	800156c <__aeabi_dadd+0x29c>
 80017f2:	464a      	mov	r2, r9
 80017f4:	1bd5      	subs	r5, r2, r7
 80017f6:	45a9      	cmp	r9, r5
 80017f8:	4189      	sbcs	r1, r1
 80017fa:	4662      	mov	r2, ip
 80017fc:	4249      	negs	r1, r1
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	1a5b      	subs	r3, r3, r1
 8001802:	4698      	mov	r8, r3
 8001804:	2601      	movs	r6, #1
 8001806:	e5ae      	b.n	8001366 <__aeabi_dadd+0x96>
 8001808:	464a      	mov	r2, r9
 800180a:	08d1      	lsrs	r1, r2, #3
 800180c:	075a      	lsls	r2, r3, #29
 800180e:	4311      	orrs	r1, r2
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	e6a7      	b.n	8001564 <__aeabi_dadd+0x294>
 8001814:	4663      	mov	r3, ip
 8001816:	08f9      	lsrs	r1, r7, #3
 8001818:	075a      	lsls	r2, r3, #29
 800181a:	4654      	mov	r4, sl
 800181c:	4311      	orrs	r1, r2
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	e6a0      	b.n	8001564 <__aeabi_dadd+0x294>
 8001822:	464a      	mov	r2, r9
 8001824:	4313      	orrs	r3, r2
 8001826:	001d      	movs	r5, r3
 8001828:	1e6b      	subs	r3, r5, #1
 800182a:	419d      	sbcs	r5, r3
 800182c:	e6c7      	b.n	80015be <__aeabi_dadd+0x2ee>
 800182e:	0014      	movs	r4, r2
 8001830:	001e      	movs	r6, r3
 8001832:	3c20      	subs	r4, #32
 8001834:	40e6      	lsrs	r6, r4
 8001836:	2a20      	cmp	r2, #32
 8001838:	d005      	beq.n	8001846 <__aeabi_dadd+0x576>
 800183a:	2440      	movs	r4, #64	; 0x40
 800183c:	1aa2      	subs	r2, r4, r2
 800183e:	4093      	lsls	r3, r2
 8001840:	464a      	mov	r2, r9
 8001842:	431a      	orrs	r2, r3
 8001844:	4691      	mov	r9, r2
 8001846:	464d      	mov	r5, r9
 8001848:	1e6b      	subs	r3, r5, #1
 800184a:	419d      	sbcs	r5, r3
 800184c:	4335      	orrs	r5, r6
 800184e:	e778      	b.n	8001742 <__aeabi_dadd+0x472>
 8001850:	464a      	mov	r2, r9
 8001852:	431a      	orrs	r2, r3
 8001854:	d000      	beq.n	8001858 <__aeabi_dadd+0x588>
 8001856:	e66b      	b.n	8001530 <__aeabi_dadd+0x260>
 8001858:	076b      	lsls	r3, r5, #29
 800185a:	08f9      	lsrs	r1, r7, #3
 800185c:	4319      	orrs	r1, r3
 800185e:	08eb      	lsrs	r3, r5, #3
 8001860:	e680      	b.n	8001564 <__aeabi_dadd+0x294>
 8001862:	4661      	mov	r1, ip
 8001864:	4339      	orrs	r1, r7
 8001866:	d054      	beq.n	8001912 <__aeabi_dadd+0x642>
 8001868:	4663      	mov	r3, ip
 800186a:	08f9      	lsrs	r1, r7, #3
 800186c:	075c      	lsls	r4, r3, #29
 800186e:	4321      	orrs	r1, r4
 8001870:	08db      	lsrs	r3, r3, #3
 8001872:	0004      	movs	r4, r0
 8001874:	e654      	b.n	8001520 <__aeabi_dadd+0x250>
 8001876:	464a      	mov	r2, r9
 8001878:	1abd      	subs	r5, r7, r2
 800187a:	42af      	cmp	r7, r5
 800187c:	4189      	sbcs	r1, r1
 800187e:	4662      	mov	r2, ip
 8001880:	4249      	negs	r1, r1
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	1a5b      	subs	r3, r3, r1
 8001886:	4698      	mov	r8, r3
 8001888:	0004      	movs	r4, r0
 800188a:	2601      	movs	r6, #1
 800188c:	e56b      	b.n	8001366 <__aeabi_dadd+0x96>
 800188e:	464a      	mov	r2, r9
 8001890:	1bd5      	subs	r5, r2, r7
 8001892:	45a9      	cmp	r9, r5
 8001894:	4189      	sbcs	r1, r1
 8001896:	4662      	mov	r2, ip
 8001898:	4249      	negs	r1, r1
 800189a:	1a9a      	subs	r2, r3, r2
 800189c:	1a52      	subs	r2, r2, r1
 800189e:	4690      	mov	r8, r2
 80018a0:	0212      	lsls	r2, r2, #8
 80018a2:	d532      	bpl.n	800190a <__aeabi_dadd+0x63a>
 80018a4:	464a      	mov	r2, r9
 80018a6:	1abd      	subs	r5, r7, r2
 80018a8:	42af      	cmp	r7, r5
 80018aa:	4189      	sbcs	r1, r1
 80018ac:	4662      	mov	r2, ip
 80018ae:	4249      	negs	r1, r1
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	1a5b      	subs	r3, r3, r1
 80018b4:	4698      	mov	r8, r3
 80018b6:	0004      	movs	r4, r0
 80018b8:	e584      	b.n	80013c4 <__aeabi_dadd+0xf4>
 80018ba:	4663      	mov	r3, ip
 80018bc:	08f9      	lsrs	r1, r7, #3
 80018be:	075a      	lsls	r2, r3, #29
 80018c0:	4311      	orrs	r1, r2
 80018c2:	08db      	lsrs	r3, r3, #3
 80018c4:	e64e      	b.n	8001564 <__aeabi_dadd+0x294>
 80018c6:	08f9      	lsrs	r1, r7, #3
 80018c8:	0768      	lsls	r0, r5, #29
 80018ca:	4301      	orrs	r1, r0
 80018cc:	08eb      	lsrs	r3, r5, #3
 80018ce:	e624      	b.n	800151a <__aeabi_dadd+0x24a>
 80018d0:	4662      	mov	r2, ip
 80018d2:	433a      	orrs	r2, r7
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dadd+0x608>
 80018d6:	e698      	b.n	800160a <__aeabi_dadd+0x33a>
 80018d8:	464a      	mov	r2, r9
 80018da:	08d1      	lsrs	r1, r2, #3
 80018dc:	075a      	lsls	r2, r3, #29
 80018de:	4311      	orrs	r1, r2
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	031b      	lsls	r3, r3, #12
 80018e6:	421a      	tst	r2, r3
 80018e8:	d008      	beq.n	80018fc <__aeabi_dadd+0x62c>
 80018ea:	4660      	mov	r0, ip
 80018ec:	08c5      	lsrs	r5, r0, #3
 80018ee:	421d      	tst	r5, r3
 80018f0:	d104      	bne.n	80018fc <__aeabi_dadd+0x62c>
 80018f2:	4654      	mov	r4, sl
 80018f4:	002a      	movs	r2, r5
 80018f6:	08f9      	lsrs	r1, r7, #3
 80018f8:	0743      	lsls	r3, r0, #29
 80018fa:	4319      	orrs	r1, r3
 80018fc:	0f4b      	lsrs	r3, r1, #29
 80018fe:	00c9      	lsls	r1, r1, #3
 8001900:	075b      	lsls	r3, r3, #29
 8001902:	08c9      	lsrs	r1, r1, #3
 8001904:	4319      	orrs	r1, r3
 8001906:	0013      	movs	r3, r2
 8001908:	e62c      	b.n	8001564 <__aeabi_dadd+0x294>
 800190a:	4641      	mov	r1, r8
 800190c:	4329      	orrs	r1, r5
 800190e:	d000      	beq.n	8001912 <__aeabi_dadd+0x642>
 8001910:	e5fa      	b.n	8001508 <__aeabi_dadd+0x238>
 8001912:	2300      	movs	r3, #0
 8001914:	000a      	movs	r2, r1
 8001916:	2400      	movs	r4, #0
 8001918:	e602      	b.n	8001520 <__aeabi_dadd+0x250>
 800191a:	076b      	lsls	r3, r5, #29
 800191c:	08f9      	lsrs	r1, r7, #3
 800191e:	4319      	orrs	r1, r3
 8001920:	08eb      	lsrs	r3, r5, #3
 8001922:	e5fd      	b.n	8001520 <__aeabi_dadd+0x250>
 8001924:	4663      	mov	r3, ip
 8001926:	08f9      	lsrs	r1, r7, #3
 8001928:	075b      	lsls	r3, r3, #29
 800192a:	4319      	orrs	r1, r3
 800192c:	4663      	mov	r3, ip
 800192e:	0004      	movs	r4, r0
 8001930:	08db      	lsrs	r3, r3, #3
 8001932:	e617      	b.n	8001564 <__aeabi_dadd+0x294>
 8001934:	003d      	movs	r5, r7
 8001936:	444d      	add	r5, r9
 8001938:	4463      	add	r3, ip
 800193a:	454d      	cmp	r5, r9
 800193c:	4189      	sbcs	r1, r1
 800193e:	4698      	mov	r8, r3
 8001940:	4249      	negs	r1, r1
 8001942:	4488      	add	r8, r1
 8001944:	4643      	mov	r3, r8
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	d400      	bmi.n	800194c <__aeabi_dadd+0x67c>
 800194a:	e5dd      	b.n	8001508 <__aeabi_dadd+0x238>
 800194c:	4642      	mov	r2, r8
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <__aeabi_dadd+0x6d0>)
 8001950:	2601      	movs	r6, #1
 8001952:	401a      	ands	r2, r3
 8001954:	4690      	mov	r8, r2
 8001956:	e5d7      	b.n	8001508 <__aeabi_dadd+0x238>
 8001958:	0010      	movs	r0, r2
 800195a:	001e      	movs	r6, r3
 800195c:	3820      	subs	r0, #32
 800195e:	40c6      	lsrs	r6, r0
 8001960:	2a20      	cmp	r2, #32
 8001962:	d005      	beq.n	8001970 <__aeabi_dadd+0x6a0>
 8001964:	2040      	movs	r0, #64	; 0x40
 8001966:	1a82      	subs	r2, r0, r2
 8001968:	4093      	lsls	r3, r2
 800196a:	464a      	mov	r2, r9
 800196c:	431a      	orrs	r2, r3
 800196e:	4691      	mov	r9, r2
 8001970:	464d      	mov	r5, r9
 8001972:	1e6b      	subs	r3, r5, #1
 8001974:	419d      	sbcs	r5, r3
 8001976:	4335      	orrs	r5, r6
 8001978:	e621      	b.n	80015be <__aeabi_dadd+0x2ee>
 800197a:	0002      	movs	r2, r0
 800197c:	2300      	movs	r3, #0
 800197e:	2100      	movs	r1, #0
 8001980:	e540      	b.n	8001404 <__aeabi_dadd+0x134>
 8001982:	464a      	mov	r2, r9
 8001984:	19d5      	adds	r5, r2, r7
 8001986:	42bd      	cmp	r5, r7
 8001988:	4189      	sbcs	r1, r1
 800198a:	4463      	add	r3, ip
 800198c:	4698      	mov	r8, r3
 800198e:	4249      	negs	r1, r1
 8001990:	4488      	add	r8, r1
 8001992:	e5b3      	b.n	80014fc <__aeabi_dadd+0x22c>
 8001994:	2100      	movs	r1, #0
 8001996:	4a01      	ldr	r2, [pc, #4]	; (800199c <__aeabi_dadd+0x6cc>)
 8001998:	000b      	movs	r3, r1
 800199a:	e533      	b.n	8001404 <__aeabi_dadd+0x134>
 800199c:	000007ff 	.word	0x000007ff
 80019a0:	ff7fffff 	.word	0xff7fffff

080019a4 <__aeabi_ddiv>:
 80019a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a6:	4657      	mov	r7, sl
 80019a8:	464e      	mov	r6, r9
 80019aa:	4645      	mov	r5, r8
 80019ac:	46de      	mov	lr, fp
 80019ae:	b5e0      	push	{r5, r6, r7, lr}
 80019b0:	4681      	mov	r9, r0
 80019b2:	0005      	movs	r5, r0
 80019b4:	030c      	lsls	r4, r1, #12
 80019b6:	0048      	lsls	r0, r1, #1
 80019b8:	4692      	mov	sl, r2
 80019ba:	001f      	movs	r7, r3
 80019bc:	b085      	sub	sp, #20
 80019be:	0b24      	lsrs	r4, r4, #12
 80019c0:	0d40      	lsrs	r0, r0, #21
 80019c2:	0fce      	lsrs	r6, r1, #31
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d059      	beq.n	8001a7c <__aeabi_ddiv+0xd8>
 80019c8:	4b87      	ldr	r3, [pc, #540]	; (8001be8 <__aeabi_ddiv+0x244>)
 80019ca:	4298      	cmp	r0, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_ddiv+0x2c>
 80019ce:	e098      	b.n	8001b02 <__aeabi_ddiv+0x15e>
 80019d0:	0f6b      	lsrs	r3, r5, #29
 80019d2:	00e4      	lsls	r4, r4, #3
 80019d4:	431c      	orrs	r4, r3
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	4323      	orrs	r3, r4
 80019dc:	4698      	mov	r8, r3
 80019de:	4b83      	ldr	r3, [pc, #524]	; (8001bec <__aeabi_ddiv+0x248>)
 80019e0:	00ed      	lsls	r5, r5, #3
 80019e2:	469b      	mov	fp, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	4699      	mov	r9, r3
 80019e8:	4483      	add	fp, r0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	033c      	lsls	r4, r7, #12
 80019ee:	007b      	lsls	r3, r7, #1
 80019f0:	4650      	mov	r0, sl
 80019f2:	0b24      	lsrs	r4, r4, #12
 80019f4:	0d5b      	lsrs	r3, r3, #21
 80019f6:	0fff      	lsrs	r7, r7, #31
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d067      	beq.n	8001acc <__aeabi_ddiv+0x128>
 80019fc:	4a7a      	ldr	r2, [pc, #488]	; (8001be8 <__aeabi_ddiv+0x244>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d018      	beq.n	8001a34 <__aeabi_ddiv+0x90>
 8001a02:	497a      	ldr	r1, [pc, #488]	; (8001bec <__aeabi_ddiv+0x248>)
 8001a04:	0f42      	lsrs	r2, r0, #29
 8001a06:	468c      	mov	ip, r1
 8001a08:	00e4      	lsls	r4, r4, #3
 8001a0a:	4659      	mov	r1, fp
 8001a0c:	4314      	orrs	r4, r2
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	4463      	add	r3, ip
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	1acb      	subs	r3, r1, r3
 8001a16:	4314      	orrs	r4, r2
 8001a18:	469b      	mov	fp, r3
 8001a1a:	00c2      	lsls	r2, r0, #3
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	0033      	movs	r3, r6
 8001a20:	407b      	eors	r3, r7
 8001a22:	469a      	mov	sl, r3
 8001a24:	464b      	mov	r3, r9
 8001a26:	2b0f      	cmp	r3, #15
 8001a28:	d900      	bls.n	8001a2c <__aeabi_ddiv+0x88>
 8001a2a:	e0ef      	b.n	8001c0c <__aeabi_ddiv+0x268>
 8001a2c:	4970      	ldr	r1, [pc, #448]	; (8001bf0 <__aeabi_ddiv+0x24c>)
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	58cb      	ldr	r3, [r1, r3]
 8001a32:	469f      	mov	pc, r3
 8001a34:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <__aeabi_ddiv+0x250>)
 8001a36:	4652      	mov	r2, sl
 8001a38:	469c      	mov	ip, r3
 8001a3a:	4322      	orrs	r2, r4
 8001a3c:	44e3      	add	fp, ip
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	d000      	beq.n	8001a44 <__aeabi_ddiv+0xa0>
 8001a42:	e095      	b.n	8001b70 <__aeabi_ddiv+0x1cc>
 8001a44:	4649      	mov	r1, r9
 8001a46:	2302      	movs	r3, #2
 8001a48:	4319      	orrs	r1, r3
 8001a4a:	4689      	mov	r9, r1
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	2002      	movs	r0, #2
 8001a50:	e7e5      	b.n	8001a1e <__aeabi_ddiv+0x7a>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2400      	movs	r4, #0
 8001a56:	2500      	movs	r5, #0
 8001a58:	4652      	mov	r2, sl
 8001a5a:	051b      	lsls	r3, r3, #20
 8001a5c:	4323      	orrs	r3, r4
 8001a5e:	07d2      	lsls	r2, r2, #31
 8001a60:	4313      	orrs	r3, r2
 8001a62:	0028      	movs	r0, r5
 8001a64:	0019      	movs	r1, r3
 8001a66:	b005      	add	sp, #20
 8001a68:	bcf0      	pop	{r4, r5, r6, r7}
 8001a6a:	46bb      	mov	fp, r7
 8001a6c:	46b2      	mov	sl, r6
 8001a6e:	46a9      	mov	r9, r5
 8001a70:	46a0      	mov	r8, r4
 8001a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a74:	2400      	movs	r4, #0
 8001a76:	2500      	movs	r5, #0
 8001a78:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <__aeabi_ddiv+0x244>)
 8001a7a:	e7ed      	b.n	8001a58 <__aeabi_ddiv+0xb4>
 8001a7c:	464b      	mov	r3, r9
 8001a7e:	4323      	orrs	r3, r4
 8001a80:	4698      	mov	r8, r3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_ddiv+0xe2>
 8001a84:	e089      	b.n	8001b9a <__aeabi_ddiv+0x1f6>
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_ddiv+0xe8>
 8001a8a:	e1e0      	b.n	8001e4e <__aeabi_ddiv+0x4aa>
 8001a8c:	0020      	movs	r0, r4
 8001a8e:	f001 fae9 	bl	8003064 <__clzsi2>
 8001a92:	0001      	movs	r1, r0
 8001a94:	0002      	movs	r2, r0
 8001a96:	390b      	subs	r1, #11
 8001a98:	231d      	movs	r3, #29
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	4649      	mov	r1, r9
 8001a9e:	0010      	movs	r0, r2
 8001aa0:	40d9      	lsrs	r1, r3
 8001aa2:	3808      	subs	r0, #8
 8001aa4:	4084      	lsls	r4, r0
 8001aa6:	000b      	movs	r3, r1
 8001aa8:	464d      	mov	r5, r9
 8001aaa:	4323      	orrs	r3, r4
 8001aac:	4698      	mov	r8, r3
 8001aae:	4085      	lsls	r5, r0
 8001ab0:	4851      	ldr	r0, [pc, #324]	; (8001bf8 <__aeabi_ddiv+0x254>)
 8001ab2:	033c      	lsls	r4, r7, #12
 8001ab4:	1a83      	subs	r3, r0, r2
 8001ab6:	469b      	mov	fp, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	4699      	mov	r9, r3
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	007b      	lsls	r3, r7, #1
 8001ac0:	4650      	mov	r0, sl
 8001ac2:	0b24      	lsrs	r4, r4, #12
 8001ac4:	0d5b      	lsrs	r3, r3, #21
 8001ac6:	0fff      	lsrs	r7, r7, #31
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d197      	bne.n	80019fc <__aeabi_ddiv+0x58>
 8001acc:	4652      	mov	r2, sl
 8001ace:	4322      	orrs	r2, r4
 8001ad0:	d055      	beq.n	8001b7e <__aeabi_ddiv+0x1da>
 8001ad2:	2c00      	cmp	r4, #0
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_ddiv+0x134>
 8001ad6:	e1ca      	b.n	8001e6e <__aeabi_ddiv+0x4ca>
 8001ad8:	0020      	movs	r0, r4
 8001ada:	f001 fac3 	bl	8003064 <__clzsi2>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	3a0b      	subs	r2, #11
 8001ae2:	231d      	movs	r3, #29
 8001ae4:	0001      	movs	r1, r0
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	4652      	mov	r2, sl
 8001aea:	3908      	subs	r1, #8
 8001aec:	40da      	lsrs	r2, r3
 8001aee:	408c      	lsls	r4, r1
 8001af0:	4314      	orrs	r4, r2
 8001af2:	4652      	mov	r2, sl
 8001af4:	408a      	lsls	r2, r1
 8001af6:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <__aeabi_ddiv+0x258>)
 8001af8:	4458      	add	r0, fp
 8001afa:	469b      	mov	fp, r3
 8001afc:	4483      	add	fp, r0
 8001afe:	2000      	movs	r0, #0
 8001b00:	e78d      	b.n	8001a1e <__aeabi_ddiv+0x7a>
 8001b02:	464b      	mov	r3, r9
 8001b04:	4323      	orrs	r3, r4
 8001b06:	4698      	mov	r8, r3
 8001b08:	d140      	bne.n	8001b8c <__aeabi_ddiv+0x1e8>
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	4699      	mov	r9, r3
 8001b0e:	3b06      	subs	r3, #6
 8001b10:	2500      	movs	r5, #0
 8001b12:	4683      	mov	fp, r0
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	e769      	b.n	80019ec <__aeabi_ddiv+0x48>
 8001b18:	46b2      	mov	sl, r6
 8001b1a:	9b00      	ldr	r3, [sp, #0]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d0a9      	beq.n	8001a74 <__aeabi_ddiv+0xd0>
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d100      	bne.n	8001b26 <__aeabi_ddiv+0x182>
 8001b24:	e211      	b.n	8001f4a <__aeabi_ddiv+0x5a6>
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d093      	beq.n	8001a52 <__aeabi_ddiv+0xae>
 8001b2a:	4a35      	ldr	r2, [pc, #212]	; (8001c00 <__aeabi_ddiv+0x25c>)
 8001b2c:	445a      	add	r2, fp
 8001b2e:	2a00      	cmp	r2, #0
 8001b30:	dc00      	bgt.n	8001b34 <__aeabi_ddiv+0x190>
 8001b32:	e13c      	b.n	8001dae <__aeabi_ddiv+0x40a>
 8001b34:	076b      	lsls	r3, r5, #29
 8001b36:	d000      	beq.n	8001b3a <__aeabi_ddiv+0x196>
 8001b38:	e1a7      	b.n	8001e8a <__aeabi_ddiv+0x4e6>
 8001b3a:	08ed      	lsrs	r5, r5, #3
 8001b3c:	4643      	mov	r3, r8
 8001b3e:	01db      	lsls	r3, r3, #7
 8001b40:	d506      	bpl.n	8001b50 <__aeabi_ddiv+0x1ac>
 8001b42:	4642      	mov	r2, r8
 8001b44:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <__aeabi_ddiv+0x260>)
 8001b46:	401a      	ands	r2, r3
 8001b48:	4690      	mov	r8, r2
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	00d2      	lsls	r2, r2, #3
 8001b4e:	445a      	add	r2, fp
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <__aeabi_ddiv+0x264>)
 8001b52:	429a      	cmp	r2, r3
 8001b54:	dc8e      	bgt.n	8001a74 <__aeabi_ddiv+0xd0>
 8001b56:	4643      	mov	r3, r8
 8001b58:	0552      	lsls	r2, r2, #21
 8001b5a:	0758      	lsls	r0, r3, #29
 8001b5c:	025c      	lsls	r4, r3, #9
 8001b5e:	4305      	orrs	r5, r0
 8001b60:	0b24      	lsrs	r4, r4, #12
 8001b62:	0d53      	lsrs	r3, r2, #21
 8001b64:	e778      	b.n	8001a58 <__aeabi_ddiv+0xb4>
 8001b66:	46ba      	mov	sl, r7
 8001b68:	46a0      	mov	r8, r4
 8001b6a:	0015      	movs	r5, r2
 8001b6c:	9000      	str	r0, [sp, #0]
 8001b6e:	e7d4      	b.n	8001b1a <__aeabi_ddiv+0x176>
 8001b70:	464a      	mov	r2, r9
 8001b72:	2303      	movs	r3, #3
 8001b74:	431a      	orrs	r2, r3
 8001b76:	4691      	mov	r9, r2
 8001b78:	2003      	movs	r0, #3
 8001b7a:	4652      	mov	r2, sl
 8001b7c:	e74f      	b.n	8001a1e <__aeabi_ddiv+0x7a>
 8001b7e:	4649      	mov	r1, r9
 8001b80:	2301      	movs	r3, #1
 8001b82:	4319      	orrs	r1, r3
 8001b84:	4689      	mov	r9, r1
 8001b86:	2400      	movs	r4, #0
 8001b88:	2001      	movs	r0, #1
 8001b8a:	e748      	b.n	8001a1e <__aeabi_ddiv+0x7a>
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	4699      	mov	r9, r3
 8001b90:	3b09      	subs	r3, #9
 8001b92:	46a0      	mov	r8, r4
 8001b94:	4683      	mov	fp, r0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	e728      	b.n	80019ec <__aeabi_ddiv+0x48>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	4699      	mov	r9, r3
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	469b      	mov	fp, r3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	2500      	movs	r5, #0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	e720      	b.n	80019ec <__aeabi_ddiv+0x48>
 8001baa:	2300      	movs	r3, #0
 8001bac:	2480      	movs	r4, #128	; 0x80
 8001bae:	469a      	mov	sl, r3
 8001bb0:	2500      	movs	r5, #0
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <__aeabi_ddiv+0x244>)
 8001bb4:	0324      	lsls	r4, r4, #12
 8001bb6:	e74f      	b.n	8001a58 <__aeabi_ddiv+0xb4>
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	4641      	mov	r1, r8
 8001bbc:	031b      	lsls	r3, r3, #12
 8001bbe:	4219      	tst	r1, r3
 8001bc0:	d008      	beq.n	8001bd4 <__aeabi_ddiv+0x230>
 8001bc2:	421c      	tst	r4, r3
 8001bc4:	d106      	bne.n	8001bd4 <__aeabi_ddiv+0x230>
 8001bc6:	431c      	orrs	r4, r3
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	46ba      	mov	sl, r7
 8001bcc:	0015      	movs	r5, r2
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <__aeabi_ddiv+0x244>)
 8001bd0:	0b24      	lsrs	r4, r4, #12
 8001bd2:	e741      	b.n	8001a58 <__aeabi_ddiv+0xb4>
 8001bd4:	2480      	movs	r4, #128	; 0x80
 8001bd6:	4643      	mov	r3, r8
 8001bd8:	0324      	lsls	r4, r4, #12
 8001bda:	431c      	orrs	r4, r3
 8001bdc:	0324      	lsls	r4, r4, #12
 8001bde:	46b2      	mov	sl, r6
 8001be0:	4b01      	ldr	r3, [pc, #4]	; (8001be8 <__aeabi_ddiv+0x244>)
 8001be2:	0b24      	lsrs	r4, r4, #12
 8001be4:	e738      	b.n	8001a58 <__aeabi_ddiv+0xb4>
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	000007ff 	.word	0x000007ff
 8001bec:	fffffc01 	.word	0xfffffc01
 8001bf0:	0800d810 	.word	0x0800d810
 8001bf4:	fffff801 	.word	0xfffff801
 8001bf8:	fffffc0d 	.word	0xfffffc0d
 8001bfc:	000003f3 	.word	0x000003f3
 8001c00:	000003ff 	.word	0x000003ff
 8001c04:	feffffff 	.word	0xfeffffff
 8001c08:	000007fe 	.word	0x000007fe
 8001c0c:	4544      	cmp	r4, r8
 8001c0e:	d200      	bcs.n	8001c12 <__aeabi_ddiv+0x26e>
 8001c10:	e116      	b.n	8001e40 <__aeabi_ddiv+0x49c>
 8001c12:	d100      	bne.n	8001c16 <__aeabi_ddiv+0x272>
 8001c14:	e111      	b.n	8001e3a <__aeabi_ddiv+0x496>
 8001c16:	2301      	movs	r3, #1
 8001c18:	425b      	negs	r3, r3
 8001c1a:	469c      	mov	ip, r3
 8001c1c:	002e      	movs	r6, r5
 8001c1e:	4640      	mov	r0, r8
 8001c20:	2500      	movs	r5, #0
 8001c22:	44e3      	add	fp, ip
 8001c24:	0223      	lsls	r3, r4, #8
 8001c26:	0e14      	lsrs	r4, r2, #24
 8001c28:	431c      	orrs	r4, r3
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	0423      	lsls	r3, r4, #16
 8001c30:	0c1f      	lsrs	r7, r3, #16
 8001c32:	0212      	lsls	r2, r2, #8
 8001c34:	4649      	mov	r1, r9
 8001c36:	9200      	str	r2, [sp, #0]
 8001c38:	9701      	str	r7, [sp, #4]
 8001c3a:	f7fe faeb 	bl	8000214 <__aeabi_uidivmod>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	437a      	muls	r2, r7
 8001c42:	040b      	lsls	r3, r1, #16
 8001c44:	0c31      	lsrs	r1, r6, #16
 8001c46:	4680      	mov	r8, r0
 8001c48:	4319      	orrs	r1, r3
 8001c4a:	428a      	cmp	r2, r1
 8001c4c:	d90b      	bls.n	8001c66 <__aeabi_ddiv+0x2c2>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	425b      	negs	r3, r3
 8001c52:	469c      	mov	ip, r3
 8001c54:	1909      	adds	r1, r1, r4
 8001c56:	44e0      	add	r8, ip
 8001c58:	428c      	cmp	r4, r1
 8001c5a:	d804      	bhi.n	8001c66 <__aeabi_ddiv+0x2c2>
 8001c5c:	428a      	cmp	r2, r1
 8001c5e:	d902      	bls.n	8001c66 <__aeabi_ddiv+0x2c2>
 8001c60:	1e83      	subs	r3, r0, #2
 8001c62:	4698      	mov	r8, r3
 8001c64:	1909      	adds	r1, r1, r4
 8001c66:	1a88      	subs	r0, r1, r2
 8001c68:	4649      	mov	r1, r9
 8001c6a:	f7fe fad3 	bl	8000214 <__aeabi_uidivmod>
 8001c6e:	0409      	lsls	r1, r1, #16
 8001c70:	468c      	mov	ip, r1
 8001c72:	0431      	lsls	r1, r6, #16
 8001c74:	4666      	mov	r6, ip
 8001c76:	9a01      	ldr	r2, [sp, #4]
 8001c78:	0c09      	lsrs	r1, r1, #16
 8001c7a:	4342      	muls	r2, r0
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	4331      	orrs	r1, r6
 8001c80:	428a      	cmp	r2, r1
 8001c82:	d904      	bls.n	8001c8e <__aeabi_ddiv+0x2ea>
 8001c84:	1909      	adds	r1, r1, r4
 8001c86:	3b01      	subs	r3, #1
 8001c88:	428c      	cmp	r4, r1
 8001c8a:	d800      	bhi.n	8001c8e <__aeabi_ddiv+0x2ea>
 8001c8c:	e111      	b.n	8001eb2 <__aeabi_ddiv+0x50e>
 8001c8e:	1a89      	subs	r1, r1, r2
 8001c90:	4642      	mov	r2, r8
 8001c92:	9e00      	ldr	r6, [sp, #0]
 8001c94:	0412      	lsls	r2, r2, #16
 8001c96:	431a      	orrs	r2, r3
 8001c98:	0c33      	lsrs	r3, r6, #16
 8001c9a:	001f      	movs	r7, r3
 8001c9c:	0c10      	lsrs	r0, r2, #16
 8001c9e:	4690      	mov	r8, r2
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	0413      	lsls	r3, r2, #16
 8001ca4:	0432      	lsls	r2, r6, #16
 8001ca6:	0c16      	lsrs	r6, r2, #16
 8001ca8:	0032      	movs	r2, r6
 8001caa:	0c1b      	lsrs	r3, r3, #16
 8001cac:	435a      	muls	r2, r3
 8001cae:	9603      	str	r6, [sp, #12]
 8001cb0:	437b      	muls	r3, r7
 8001cb2:	4346      	muls	r6, r0
 8001cb4:	4378      	muls	r0, r7
 8001cb6:	0c17      	lsrs	r7, r2, #16
 8001cb8:	46bc      	mov	ip, r7
 8001cba:	199b      	adds	r3, r3, r6
 8001cbc:	4463      	add	r3, ip
 8001cbe:	429e      	cmp	r6, r3
 8001cc0:	d903      	bls.n	8001cca <__aeabi_ddiv+0x326>
 8001cc2:	2680      	movs	r6, #128	; 0x80
 8001cc4:	0276      	lsls	r6, r6, #9
 8001cc6:	46b4      	mov	ip, r6
 8001cc8:	4460      	add	r0, ip
 8001cca:	0c1e      	lsrs	r6, r3, #16
 8001ccc:	1830      	adds	r0, r6, r0
 8001cce:	0416      	lsls	r6, r2, #16
 8001cd0:	041b      	lsls	r3, r3, #16
 8001cd2:	0c36      	lsrs	r6, r6, #16
 8001cd4:	199e      	adds	r6, r3, r6
 8001cd6:	4281      	cmp	r1, r0
 8001cd8:	d200      	bcs.n	8001cdc <__aeabi_ddiv+0x338>
 8001cda:	e09c      	b.n	8001e16 <__aeabi_ddiv+0x472>
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x33c>
 8001cde:	e097      	b.n	8001e10 <__aeabi_ddiv+0x46c>
 8001ce0:	1bae      	subs	r6, r5, r6
 8001ce2:	1a09      	subs	r1, r1, r0
 8001ce4:	42b5      	cmp	r5, r6
 8001ce6:	4180      	sbcs	r0, r0
 8001ce8:	4240      	negs	r0, r0
 8001cea:	1a08      	subs	r0, r1, r0
 8001cec:	4284      	cmp	r4, r0
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_ddiv+0x34e>
 8001cf0:	e111      	b.n	8001f16 <__aeabi_ddiv+0x572>
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	f7fe fa8e 	bl	8000214 <__aeabi_uidivmod>
 8001cf8:	9a01      	ldr	r2, [sp, #4]
 8001cfa:	040b      	lsls	r3, r1, #16
 8001cfc:	4342      	muls	r2, r0
 8001cfe:	0c31      	lsrs	r1, r6, #16
 8001d00:	0005      	movs	r5, r0
 8001d02:	4319      	orrs	r1, r3
 8001d04:	428a      	cmp	r2, r1
 8001d06:	d907      	bls.n	8001d18 <__aeabi_ddiv+0x374>
 8001d08:	1909      	adds	r1, r1, r4
 8001d0a:	3d01      	subs	r5, #1
 8001d0c:	428c      	cmp	r4, r1
 8001d0e:	d803      	bhi.n	8001d18 <__aeabi_ddiv+0x374>
 8001d10:	428a      	cmp	r2, r1
 8001d12:	d901      	bls.n	8001d18 <__aeabi_ddiv+0x374>
 8001d14:	1e85      	subs	r5, r0, #2
 8001d16:	1909      	adds	r1, r1, r4
 8001d18:	1a88      	subs	r0, r1, r2
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	f7fe fa7a 	bl	8000214 <__aeabi_uidivmod>
 8001d20:	0409      	lsls	r1, r1, #16
 8001d22:	468c      	mov	ip, r1
 8001d24:	0431      	lsls	r1, r6, #16
 8001d26:	4666      	mov	r6, ip
 8001d28:	9a01      	ldr	r2, [sp, #4]
 8001d2a:	0c09      	lsrs	r1, r1, #16
 8001d2c:	4342      	muls	r2, r0
 8001d2e:	0003      	movs	r3, r0
 8001d30:	4331      	orrs	r1, r6
 8001d32:	428a      	cmp	r2, r1
 8001d34:	d907      	bls.n	8001d46 <__aeabi_ddiv+0x3a2>
 8001d36:	1909      	adds	r1, r1, r4
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	428c      	cmp	r4, r1
 8001d3c:	d803      	bhi.n	8001d46 <__aeabi_ddiv+0x3a2>
 8001d3e:	428a      	cmp	r2, r1
 8001d40:	d901      	bls.n	8001d46 <__aeabi_ddiv+0x3a2>
 8001d42:	1e83      	subs	r3, r0, #2
 8001d44:	1909      	adds	r1, r1, r4
 8001d46:	9e03      	ldr	r6, [sp, #12]
 8001d48:	1a89      	subs	r1, r1, r2
 8001d4a:	0032      	movs	r2, r6
 8001d4c:	042d      	lsls	r5, r5, #16
 8001d4e:	431d      	orrs	r5, r3
 8001d50:	9f02      	ldr	r7, [sp, #8]
 8001d52:	042b      	lsls	r3, r5, #16
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	435a      	muls	r2, r3
 8001d58:	437b      	muls	r3, r7
 8001d5a:	469c      	mov	ip, r3
 8001d5c:	0c28      	lsrs	r0, r5, #16
 8001d5e:	4346      	muls	r6, r0
 8001d60:	0c13      	lsrs	r3, r2, #16
 8001d62:	44b4      	add	ip, r6
 8001d64:	4463      	add	r3, ip
 8001d66:	4378      	muls	r0, r7
 8001d68:	429e      	cmp	r6, r3
 8001d6a:	d903      	bls.n	8001d74 <__aeabi_ddiv+0x3d0>
 8001d6c:	2680      	movs	r6, #128	; 0x80
 8001d6e:	0276      	lsls	r6, r6, #9
 8001d70:	46b4      	mov	ip, r6
 8001d72:	4460      	add	r0, ip
 8001d74:	0c1e      	lsrs	r6, r3, #16
 8001d76:	0412      	lsls	r2, r2, #16
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	0c12      	lsrs	r2, r2, #16
 8001d7c:	1830      	adds	r0, r6, r0
 8001d7e:	189b      	adds	r3, r3, r2
 8001d80:	4281      	cmp	r1, r0
 8001d82:	d306      	bcc.n	8001d92 <__aeabi_ddiv+0x3ee>
 8001d84:	d002      	beq.n	8001d8c <__aeabi_ddiv+0x3e8>
 8001d86:	2301      	movs	r3, #1
 8001d88:	431d      	orrs	r5, r3
 8001d8a:	e6ce      	b.n	8001b2a <__aeabi_ddiv+0x186>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_ddiv+0x3ee>
 8001d90:	e6cb      	b.n	8001b2a <__aeabi_ddiv+0x186>
 8001d92:	1861      	adds	r1, r4, r1
 8001d94:	1e6e      	subs	r6, r5, #1
 8001d96:	42a1      	cmp	r1, r4
 8001d98:	d200      	bcs.n	8001d9c <__aeabi_ddiv+0x3f8>
 8001d9a:	e0a4      	b.n	8001ee6 <__aeabi_ddiv+0x542>
 8001d9c:	4281      	cmp	r1, r0
 8001d9e:	d200      	bcs.n	8001da2 <__aeabi_ddiv+0x3fe>
 8001da0:	e0c9      	b.n	8001f36 <__aeabi_ddiv+0x592>
 8001da2:	d100      	bne.n	8001da6 <__aeabi_ddiv+0x402>
 8001da4:	e0d9      	b.n	8001f5a <__aeabi_ddiv+0x5b6>
 8001da6:	0035      	movs	r5, r6
 8001da8:	e7ed      	b.n	8001d86 <__aeabi_ddiv+0x3e2>
 8001daa:	2501      	movs	r5, #1
 8001dac:	426d      	negs	r5, r5
 8001dae:	2101      	movs	r1, #1
 8001db0:	1a89      	subs	r1, r1, r2
 8001db2:	2938      	cmp	r1, #56	; 0x38
 8001db4:	dd00      	ble.n	8001db8 <__aeabi_ddiv+0x414>
 8001db6:	e64c      	b.n	8001a52 <__aeabi_ddiv+0xae>
 8001db8:	291f      	cmp	r1, #31
 8001dba:	dc00      	bgt.n	8001dbe <__aeabi_ddiv+0x41a>
 8001dbc:	e07f      	b.n	8001ebe <__aeabi_ddiv+0x51a>
 8001dbe:	231f      	movs	r3, #31
 8001dc0:	425b      	negs	r3, r3
 8001dc2:	1a9a      	subs	r2, r3, r2
 8001dc4:	4643      	mov	r3, r8
 8001dc6:	40d3      	lsrs	r3, r2
 8001dc8:	2920      	cmp	r1, #32
 8001dca:	d004      	beq.n	8001dd6 <__aeabi_ddiv+0x432>
 8001dcc:	4644      	mov	r4, r8
 8001dce:	4a65      	ldr	r2, [pc, #404]	; (8001f64 <__aeabi_ddiv+0x5c0>)
 8001dd0:	445a      	add	r2, fp
 8001dd2:	4094      	lsls	r4, r2
 8001dd4:	4325      	orrs	r5, r4
 8001dd6:	1e6a      	subs	r2, r5, #1
 8001dd8:	4195      	sbcs	r5, r2
 8001dda:	2207      	movs	r2, #7
 8001ddc:	432b      	orrs	r3, r5
 8001dde:	0015      	movs	r5, r2
 8001de0:	2400      	movs	r4, #0
 8001de2:	401d      	ands	r5, r3
 8001de4:	421a      	tst	r2, r3
 8001de6:	d100      	bne.n	8001dea <__aeabi_ddiv+0x446>
 8001de8:	e0a1      	b.n	8001f2e <__aeabi_ddiv+0x58a>
 8001dea:	220f      	movs	r2, #15
 8001dec:	2400      	movs	r4, #0
 8001dee:	401a      	ands	r2, r3
 8001df0:	2a04      	cmp	r2, #4
 8001df2:	d100      	bne.n	8001df6 <__aeabi_ddiv+0x452>
 8001df4:	e098      	b.n	8001f28 <__aeabi_ddiv+0x584>
 8001df6:	1d1a      	adds	r2, r3, #4
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	419b      	sbcs	r3, r3
 8001dfc:	425b      	negs	r3, r3
 8001dfe:	18e4      	adds	r4, r4, r3
 8001e00:	0013      	movs	r3, r2
 8001e02:	0222      	lsls	r2, r4, #8
 8001e04:	d400      	bmi.n	8001e08 <__aeabi_ddiv+0x464>
 8001e06:	e08f      	b.n	8001f28 <__aeabi_ddiv+0x584>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	2400      	movs	r4, #0
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	e623      	b.n	8001a58 <__aeabi_ddiv+0xb4>
 8001e10:	42b5      	cmp	r5, r6
 8001e12:	d300      	bcc.n	8001e16 <__aeabi_ddiv+0x472>
 8001e14:	e764      	b.n	8001ce0 <__aeabi_ddiv+0x33c>
 8001e16:	4643      	mov	r3, r8
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	9b00      	ldr	r3, [sp, #0]
 8001e1c:	469c      	mov	ip, r3
 8001e1e:	4465      	add	r5, ip
 8001e20:	001f      	movs	r7, r3
 8001e22:	429d      	cmp	r5, r3
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	425b      	negs	r3, r3
 8001e28:	191b      	adds	r3, r3, r4
 8001e2a:	18c9      	adds	r1, r1, r3
 8001e2c:	428c      	cmp	r4, r1
 8001e2e:	d23a      	bcs.n	8001ea6 <__aeabi_ddiv+0x502>
 8001e30:	4288      	cmp	r0, r1
 8001e32:	d863      	bhi.n	8001efc <__aeabi_ddiv+0x558>
 8001e34:	d060      	beq.n	8001ef8 <__aeabi_ddiv+0x554>
 8001e36:	4690      	mov	r8, r2
 8001e38:	e752      	b.n	8001ce0 <__aeabi_ddiv+0x33c>
 8001e3a:	42aa      	cmp	r2, r5
 8001e3c:	d900      	bls.n	8001e40 <__aeabi_ddiv+0x49c>
 8001e3e:	e6ea      	b.n	8001c16 <__aeabi_ddiv+0x272>
 8001e40:	4643      	mov	r3, r8
 8001e42:	07de      	lsls	r6, r3, #31
 8001e44:	0858      	lsrs	r0, r3, #1
 8001e46:	086b      	lsrs	r3, r5, #1
 8001e48:	431e      	orrs	r6, r3
 8001e4a:	07ed      	lsls	r5, r5, #31
 8001e4c:	e6ea      	b.n	8001c24 <__aeabi_ddiv+0x280>
 8001e4e:	4648      	mov	r0, r9
 8001e50:	f001 f908 	bl	8003064 <__clzsi2>
 8001e54:	0001      	movs	r1, r0
 8001e56:	0002      	movs	r2, r0
 8001e58:	3115      	adds	r1, #21
 8001e5a:	3220      	adds	r2, #32
 8001e5c:	291c      	cmp	r1, #28
 8001e5e:	dc00      	bgt.n	8001e62 <__aeabi_ddiv+0x4be>
 8001e60:	e61a      	b.n	8001a98 <__aeabi_ddiv+0xf4>
 8001e62:	464b      	mov	r3, r9
 8001e64:	3808      	subs	r0, #8
 8001e66:	4083      	lsls	r3, r0
 8001e68:	2500      	movs	r5, #0
 8001e6a:	4698      	mov	r8, r3
 8001e6c:	e620      	b.n	8001ab0 <__aeabi_ddiv+0x10c>
 8001e6e:	f001 f8f9 	bl	8003064 <__clzsi2>
 8001e72:	0003      	movs	r3, r0
 8001e74:	001a      	movs	r2, r3
 8001e76:	3215      	adds	r2, #21
 8001e78:	3020      	adds	r0, #32
 8001e7a:	2a1c      	cmp	r2, #28
 8001e7c:	dc00      	bgt.n	8001e80 <__aeabi_ddiv+0x4dc>
 8001e7e:	e630      	b.n	8001ae2 <__aeabi_ddiv+0x13e>
 8001e80:	4654      	mov	r4, sl
 8001e82:	3b08      	subs	r3, #8
 8001e84:	2200      	movs	r2, #0
 8001e86:	409c      	lsls	r4, r3
 8001e88:	e635      	b.n	8001af6 <__aeabi_ddiv+0x152>
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	402b      	ands	r3, r5
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x4f0>
 8001e92:	e652      	b.n	8001b3a <__aeabi_ddiv+0x196>
 8001e94:	2305      	movs	r3, #5
 8001e96:	425b      	negs	r3, r3
 8001e98:	42ab      	cmp	r3, r5
 8001e9a:	419b      	sbcs	r3, r3
 8001e9c:	3504      	adds	r5, #4
 8001e9e:	425b      	negs	r3, r3
 8001ea0:	08ed      	lsrs	r5, r5, #3
 8001ea2:	4498      	add	r8, r3
 8001ea4:	e64a      	b.n	8001b3c <__aeabi_ddiv+0x198>
 8001ea6:	428c      	cmp	r4, r1
 8001ea8:	d1c5      	bne.n	8001e36 <__aeabi_ddiv+0x492>
 8001eaa:	42af      	cmp	r7, r5
 8001eac:	d9c0      	bls.n	8001e30 <__aeabi_ddiv+0x48c>
 8001eae:	4690      	mov	r8, r2
 8001eb0:	e716      	b.n	8001ce0 <__aeabi_ddiv+0x33c>
 8001eb2:	428a      	cmp	r2, r1
 8001eb4:	d800      	bhi.n	8001eb8 <__aeabi_ddiv+0x514>
 8001eb6:	e6ea      	b.n	8001c8e <__aeabi_ddiv+0x2ea>
 8001eb8:	1e83      	subs	r3, r0, #2
 8001eba:	1909      	adds	r1, r1, r4
 8001ebc:	e6e7      	b.n	8001c8e <__aeabi_ddiv+0x2ea>
 8001ebe:	4a2a      	ldr	r2, [pc, #168]	; (8001f68 <__aeabi_ddiv+0x5c4>)
 8001ec0:	0028      	movs	r0, r5
 8001ec2:	445a      	add	r2, fp
 8001ec4:	4643      	mov	r3, r8
 8001ec6:	4095      	lsls	r5, r2
 8001ec8:	4093      	lsls	r3, r2
 8001eca:	40c8      	lsrs	r0, r1
 8001ecc:	1e6a      	subs	r2, r5, #1
 8001ece:	4195      	sbcs	r5, r2
 8001ed0:	4644      	mov	r4, r8
 8001ed2:	4303      	orrs	r3, r0
 8001ed4:	432b      	orrs	r3, r5
 8001ed6:	40cc      	lsrs	r4, r1
 8001ed8:	075a      	lsls	r2, r3, #29
 8001eda:	d092      	beq.n	8001e02 <__aeabi_ddiv+0x45e>
 8001edc:	220f      	movs	r2, #15
 8001ede:	401a      	ands	r2, r3
 8001ee0:	2a04      	cmp	r2, #4
 8001ee2:	d188      	bne.n	8001df6 <__aeabi_ddiv+0x452>
 8001ee4:	e78d      	b.n	8001e02 <__aeabi_ddiv+0x45e>
 8001ee6:	0035      	movs	r5, r6
 8001ee8:	4281      	cmp	r1, r0
 8001eea:	d000      	beq.n	8001eee <__aeabi_ddiv+0x54a>
 8001eec:	e74b      	b.n	8001d86 <__aeabi_ddiv+0x3e2>
 8001eee:	9a00      	ldr	r2, [sp, #0]
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_ddiv+0x552>
 8001ef4:	e747      	b.n	8001d86 <__aeabi_ddiv+0x3e2>
 8001ef6:	e618      	b.n	8001b2a <__aeabi_ddiv+0x186>
 8001ef8:	42ae      	cmp	r6, r5
 8001efa:	d99c      	bls.n	8001e36 <__aeabi_ddiv+0x492>
 8001efc:	2302      	movs	r3, #2
 8001efe:	425b      	negs	r3, r3
 8001f00:	469c      	mov	ip, r3
 8001f02:	9b00      	ldr	r3, [sp, #0]
 8001f04:	44e0      	add	r8, ip
 8001f06:	469c      	mov	ip, r3
 8001f08:	4465      	add	r5, ip
 8001f0a:	429d      	cmp	r5, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	425b      	negs	r3, r3
 8001f10:	191b      	adds	r3, r3, r4
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	e6e4      	b.n	8001ce0 <__aeabi_ddiv+0x33c>
 8001f16:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <__aeabi_ddiv+0x5c8>)
 8001f18:	445a      	add	r2, fp
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	dc00      	bgt.n	8001f20 <__aeabi_ddiv+0x57c>
 8001f1e:	e744      	b.n	8001daa <__aeabi_ddiv+0x406>
 8001f20:	2301      	movs	r3, #1
 8001f22:	2500      	movs	r5, #0
 8001f24:	4498      	add	r8, r3
 8001f26:	e609      	b.n	8001b3c <__aeabi_ddiv+0x198>
 8001f28:	0765      	lsls	r5, r4, #29
 8001f2a:	0264      	lsls	r4, r4, #9
 8001f2c:	0b24      	lsrs	r4, r4, #12
 8001f2e:	08db      	lsrs	r3, r3, #3
 8001f30:	431d      	orrs	r5, r3
 8001f32:	2300      	movs	r3, #0
 8001f34:	e590      	b.n	8001a58 <__aeabi_ddiv+0xb4>
 8001f36:	9e00      	ldr	r6, [sp, #0]
 8001f38:	3d02      	subs	r5, #2
 8001f3a:	0072      	lsls	r2, r6, #1
 8001f3c:	42b2      	cmp	r2, r6
 8001f3e:	41bf      	sbcs	r7, r7
 8001f40:	427f      	negs	r7, r7
 8001f42:	193c      	adds	r4, r7, r4
 8001f44:	1909      	adds	r1, r1, r4
 8001f46:	9200      	str	r2, [sp, #0]
 8001f48:	e7ce      	b.n	8001ee8 <__aeabi_ddiv+0x544>
 8001f4a:	2480      	movs	r4, #128	; 0x80
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	0324      	lsls	r4, r4, #12
 8001f50:	431c      	orrs	r4, r3
 8001f52:	0324      	lsls	r4, r4, #12
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <__aeabi_ddiv+0x5cc>)
 8001f56:	0b24      	lsrs	r4, r4, #12
 8001f58:	e57e      	b.n	8001a58 <__aeabi_ddiv+0xb4>
 8001f5a:	9a00      	ldr	r2, [sp, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3ea      	bcc.n	8001f36 <__aeabi_ddiv+0x592>
 8001f60:	0035      	movs	r5, r6
 8001f62:	e7c4      	b.n	8001eee <__aeabi_ddiv+0x54a>
 8001f64:	0000043e 	.word	0x0000043e
 8001f68:	0000041e 	.word	0x0000041e
 8001f6c:	000003ff 	.word	0x000003ff
 8001f70:	000007ff 	.word	0x000007ff

08001f74 <__eqdf2>:
 8001f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f76:	464f      	mov	r7, r9
 8001f78:	4646      	mov	r6, r8
 8001f7a:	46d6      	mov	lr, sl
 8001f7c:	4694      	mov	ip, r2
 8001f7e:	4691      	mov	r9, r2
 8001f80:	031a      	lsls	r2, r3, #12
 8001f82:	0b12      	lsrs	r2, r2, #12
 8001f84:	4d18      	ldr	r5, [pc, #96]	; (8001fe8 <__eqdf2+0x74>)
 8001f86:	b5c0      	push	{r6, r7, lr}
 8001f88:	004c      	lsls	r4, r1, #1
 8001f8a:	030f      	lsls	r7, r1, #12
 8001f8c:	4692      	mov	sl, r2
 8001f8e:	005a      	lsls	r2, r3, #1
 8001f90:	0006      	movs	r6, r0
 8001f92:	4680      	mov	r8, r0
 8001f94:	0b3f      	lsrs	r7, r7, #12
 8001f96:	2001      	movs	r0, #1
 8001f98:	0d64      	lsrs	r4, r4, #21
 8001f9a:	0fc9      	lsrs	r1, r1, #31
 8001f9c:	0d52      	lsrs	r2, r2, #21
 8001f9e:	0fdb      	lsrs	r3, r3, #31
 8001fa0:	42ac      	cmp	r4, r5
 8001fa2:	d00a      	beq.n	8001fba <__eqdf2+0x46>
 8001fa4:	42aa      	cmp	r2, r5
 8001fa6:	d003      	beq.n	8001fb0 <__eqdf2+0x3c>
 8001fa8:	4294      	cmp	r4, r2
 8001faa:	d101      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fac:	4557      	cmp	r7, sl
 8001fae:	d00d      	beq.n	8001fcc <__eqdf2+0x58>
 8001fb0:	bce0      	pop	{r5, r6, r7}
 8001fb2:	46ba      	mov	sl, r7
 8001fb4:	46b1      	mov	r9, r6
 8001fb6:	46a8      	mov	r8, r5
 8001fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fba:	003d      	movs	r5, r7
 8001fbc:	4335      	orrs	r5, r6
 8001fbe:	d1f7      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fc0:	42a2      	cmp	r2, r4
 8001fc2:	d1f5      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fc4:	4652      	mov	r2, sl
 8001fc6:	4665      	mov	r5, ip
 8001fc8:	432a      	orrs	r2, r5
 8001fca:	d1f1      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fcc:	2001      	movs	r0, #1
 8001fce:	45c8      	cmp	r8, r9
 8001fd0:	d1ee      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fd2:	4299      	cmp	r1, r3
 8001fd4:	d006      	beq.n	8001fe4 <__eqdf2+0x70>
 8001fd6:	2c00      	cmp	r4, #0
 8001fd8:	d1ea      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fda:	433e      	orrs	r6, r7
 8001fdc:	0030      	movs	r0, r6
 8001fde:	1e46      	subs	r6, r0, #1
 8001fe0:	41b0      	sbcs	r0, r6
 8001fe2:	e7e5      	b.n	8001fb0 <__eqdf2+0x3c>
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	e7e3      	b.n	8001fb0 <__eqdf2+0x3c>
 8001fe8:	000007ff 	.word	0x000007ff

08001fec <__gedf2>:
 8001fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fee:	464e      	mov	r6, r9
 8001ff0:	4645      	mov	r5, r8
 8001ff2:	4657      	mov	r7, sl
 8001ff4:	46de      	mov	lr, fp
 8001ff6:	0004      	movs	r4, r0
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	b5e0      	push	{r5, r6, r7, lr}
 8001ffc:	0016      	movs	r6, r2
 8001ffe:	031b      	lsls	r3, r3, #12
 8002000:	0b1b      	lsrs	r3, r3, #12
 8002002:	4d32      	ldr	r5, [pc, #200]	; (80020cc <__gedf2+0xe0>)
 8002004:	030f      	lsls	r7, r1, #12
 8002006:	004a      	lsls	r2, r1, #1
 8002008:	4699      	mov	r9, r3
 800200a:	0043      	lsls	r3, r0, #1
 800200c:	46a4      	mov	ip, r4
 800200e:	46b0      	mov	r8, r6
 8002010:	0b3f      	lsrs	r7, r7, #12
 8002012:	0d52      	lsrs	r2, r2, #21
 8002014:	0fc9      	lsrs	r1, r1, #31
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	0fc0      	lsrs	r0, r0, #31
 800201a:	42aa      	cmp	r2, r5
 800201c:	d029      	beq.n	8002072 <__gedf2+0x86>
 800201e:	42ab      	cmp	r3, r5
 8002020:	d018      	beq.n	8002054 <__gedf2+0x68>
 8002022:	2a00      	cmp	r2, #0
 8002024:	d12a      	bne.n	800207c <__gedf2+0x90>
 8002026:	433c      	orrs	r4, r7
 8002028:	46a3      	mov	fp, r4
 800202a:	4265      	negs	r5, r4
 800202c:	4165      	adcs	r5, r4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <__gedf2+0x4c>
 8002032:	464c      	mov	r4, r9
 8002034:	4326      	orrs	r6, r4
 8002036:	d027      	beq.n	8002088 <__gedf2+0x9c>
 8002038:	2d00      	cmp	r5, #0
 800203a:	d115      	bne.n	8002068 <__gedf2+0x7c>
 800203c:	4281      	cmp	r1, r0
 800203e:	d028      	beq.n	8002092 <__gedf2+0xa6>
 8002040:	2002      	movs	r0, #2
 8002042:	3901      	subs	r1, #1
 8002044:	4008      	ands	r0, r1
 8002046:	3801      	subs	r0, #1
 8002048:	bcf0      	pop	{r4, r5, r6, r7}
 800204a:	46bb      	mov	fp, r7
 800204c:	46b2      	mov	sl, r6
 800204e:	46a9      	mov	r9, r5
 8002050:	46a0      	mov	r8, r4
 8002052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002054:	464d      	mov	r5, r9
 8002056:	432e      	orrs	r6, r5
 8002058:	d12f      	bne.n	80020ba <__gedf2+0xce>
 800205a:	2a00      	cmp	r2, #0
 800205c:	d1ee      	bne.n	800203c <__gedf2+0x50>
 800205e:	433c      	orrs	r4, r7
 8002060:	4265      	negs	r5, r4
 8002062:	4165      	adcs	r5, r4
 8002064:	2d00      	cmp	r5, #0
 8002066:	d0e9      	beq.n	800203c <__gedf2+0x50>
 8002068:	2800      	cmp	r0, #0
 800206a:	d1ed      	bne.n	8002048 <__gedf2+0x5c>
 800206c:	2001      	movs	r0, #1
 800206e:	4240      	negs	r0, r0
 8002070:	e7ea      	b.n	8002048 <__gedf2+0x5c>
 8002072:	003d      	movs	r5, r7
 8002074:	4325      	orrs	r5, r4
 8002076:	d120      	bne.n	80020ba <__gedf2+0xce>
 8002078:	4293      	cmp	r3, r2
 800207a:	d0eb      	beq.n	8002054 <__gedf2+0x68>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1dd      	bne.n	800203c <__gedf2+0x50>
 8002080:	464c      	mov	r4, r9
 8002082:	4326      	orrs	r6, r4
 8002084:	d1da      	bne.n	800203c <__gedf2+0x50>
 8002086:	e7db      	b.n	8002040 <__gedf2+0x54>
 8002088:	465b      	mov	r3, fp
 800208a:	2000      	movs	r0, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0db      	beq.n	8002048 <__gedf2+0x5c>
 8002090:	e7d6      	b.n	8002040 <__gedf2+0x54>
 8002092:	429a      	cmp	r2, r3
 8002094:	dc0a      	bgt.n	80020ac <__gedf2+0xc0>
 8002096:	dbe7      	blt.n	8002068 <__gedf2+0x7c>
 8002098:	454f      	cmp	r7, r9
 800209a:	d8d1      	bhi.n	8002040 <__gedf2+0x54>
 800209c:	d010      	beq.n	80020c0 <__gedf2+0xd4>
 800209e:	2000      	movs	r0, #0
 80020a0:	454f      	cmp	r7, r9
 80020a2:	d2d1      	bcs.n	8002048 <__gedf2+0x5c>
 80020a4:	2900      	cmp	r1, #0
 80020a6:	d0e1      	beq.n	800206c <__gedf2+0x80>
 80020a8:	0008      	movs	r0, r1
 80020aa:	e7cd      	b.n	8002048 <__gedf2+0x5c>
 80020ac:	4243      	negs	r3, r0
 80020ae:	4158      	adcs	r0, r3
 80020b0:	2302      	movs	r3, #2
 80020b2:	4240      	negs	r0, r0
 80020b4:	4018      	ands	r0, r3
 80020b6:	3801      	subs	r0, #1
 80020b8:	e7c6      	b.n	8002048 <__gedf2+0x5c>
 80020ba:	2002      	movs	r0, #2
 80020bc:	4240      	negs	r0, r0
 80020be:	e7c3      	b.n	8002048 <__gedf2+0x5c>
 80020c0:	45c4      	cmp	ip, r8
 80020c2:	d8bd      	bhi.n	8002040 <__gedf2+0x54>
 80020c4:	2000      	movs	r0, #0
 80020c6:	45c4      	cmp	ip, r8
 80020c8:	d2be      	bcs.n	8002048 <__gedf2+0x5c>
 80020ca:	e7eb      	b.n	80020a4 <__gedf2+0xb8>
 80020cc:	000007ff 	.word	0x000007ff

080020d0 <__ledf2>:
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	464e      	mov	r6, r9
 80020d4:	4645      	mov	r5, r8
 80020d6:	4657      	mov	r7, sl
 80020d8:	46de      	mov	lr, fp
 80020da:	0004      	movs	r4, r0
 80020dc:	0018      	movs	r0, r3
 80020de:	b5e0      	push	{r5, r6, r7, lr}
 80020e0:	0016      	movs	r6, r2
 80020e2:	031b      	lsls	r3, r3, #12
 80020e4:	0b1b      	lsrs	r3, r3, #12
 80020e6:	4d31      	ldr	r5, [pc, #196]	; (80021ac <__ledf2+0xdc>)
 80020e8:	030f      	lsls	r7, r1, #12
 80020ea:	004a      	lsls	r2, r1, #1
 80020ec:	4699      	mov	r9, r3
 80020ee:	0043      	lsls	r3, r0, #1
 80020f0:	46a4      	mov	ip, r4
 80020f2:	46b0      	mov	r8, r6
 80020f4:	0b3f      	lsrs	r7, r7, #12
 80020f6:	0d52      	lsrs	r2, r2, #21
 80020f8:	0fc9      	lsrs	r1, r1, #31
 80020fa:	0d5b      	lsrs	r3, r3, #21
 80020fc:	0fc0      	lsrs	r0, r0, #31
 80020fe:	42aa      	cmp	r2, r5
 8002100:	d011      	beq.n	8002126 <__ledf2+0x56>
 8002102:	42ab      	cmp	r3, r5
 8002104:	d014      	beq.n	8002130 <__ledf2+0x60>
 8002106:	2a00      	cmp	r2, #0
 8002108:	d12f      	bne.n	800216a <__ledf2+0x9a>
 800210a:	433c      	orrs	r4, r7
 800210c:	46a3      	mov	fp, r4
 800210e:	4265      	negs	r5, r4
 8002110:	4165      	adcs	r5, r4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d114      	bne.n	8002140 <__ledf2+0x70>
 8002116:	464c      	mov	r4, r9
 8002118:	4326      	orrs	r6, r4
 800211a:	d111      	bne.n	8002140 <__ledf2+0x70>
 800211c:	465b      	mov	r3, fp
 800211e:	2000      	movs	r0, #0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <__ledf2+0x84>
 8002124:	e010      	b.n	8002148 <__ledf2+0x78>
 8002126:	003d      	movs	r5, r7
 8002128:	4325      	orrs	r5, r4
 800212a:	d112      	bne.n	8002152 <__ledf2+0x82>
 800212c:	4293      	cmp	r3, r2
 800212e:	d11c      	bne.n	800216a <__ledf2+0x9a>
 8002130:	464d      	mov	r5, r9
 8002132:	432e      	orrs	r6, r5
 8002134:	d10d      	bne.n	8002152 <__ledf2+0x82>
 8002136:	2a00      	cmp	r2, #0
 8002138:	d104      	bne.n	8002144 <__ledf2+0x74>
 800213a:	433c      	orrs	r4, r7
 800213c:	4265      	negs	r5, r4
 800213e:	4165      	adcs	r5, r4
 8002140:	2d00      	cmp	r5, #0
 8002142:	d10d      	bne.n	8002160 <__ledf2+0x90>
 8002144:	4281      	cmp	r1, r0
 8002146:	d016      	beq.n	8002176 <__ledf2+0xa6>
 8002148:	2002      	movs	r0, #2
 800214a:	3901      	subs	r1, #1
 800214c:	4008      	ands	r0, r1
 800214e:	3801      	subs	r0, #1
 8002150:	e000      	b.n	8002154 <__ledf2+0x84>
 8002152:	2002      	movs	r0, #2
 8002154:	bcf0      	pop	{r4, r5, r6, r7}
 8002156:	46bb      	mov	fp, r7
 8002158:	46b2      	mov	sl, r6
 800215a:	46a9      	mov	r9, r5
 800215c:	46a0      	mov	r8, r4
 800215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002160:	2800      	cmp	r0, #0
 8002162:	d1f7      	bne.n	8002154 <__ledf2+0x84>
 8002164:	2001      	movs	r0, #1
 8002166:	4240      	negs	r0, r0
 8002168:	e7f4      	b.n	8002154 <__ledf2+0x84>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ea      	bne.n	8002144 <__ledf2+0x74>
 800216e:	464c      	mov	r4, r9
 8002170:	4326      	orrs	r6, r4
 8002172:	d1e7      	bne.n	8002144 <__ledf2+0x74>
 8002174:	e7e8      	b.n	8002148 <__ledf2+0x78>
 8002176:	429a      	cmp	r2, r3
 8002178:	dd06      	ble.n	8002188 <__ledf2+0xb8>
 800217a:	4243      	negs	r3, r0
 800217c:	4158      	adcs	r0, r3
 800217e:	2302      	movs	r3, #2
 8002180:	4240      	negs	r0, r0
 8002182:	4018      	ands	r0, r3
 8002184:	3801      	subs	r0, #1
 8002186:	e7e5      	b.n	8002154 <__ledf2+0x84>
 8002188:	429a      	cmp	r2, r3
 800218a:	dbe9      	blt.n	8002160 <__ledf2+0x90>
 800218c:	454f      	cmp	r7, r9
 800218e:	d8db      	bhi.n	8002148 <__ledf2+0x78>
 8002190:	d006      	beq.n	80021a0 <__ledf2+0xd0>
 8002192:	2000      	movs	r0, #0
 8002194:	454f      	cmp	r7, r9
 8002196:	d2dd      	bcs.n	8002154 <__ledf2+0x84>
 8002198:	2900      	cmp	r1, #0
 800219a:	d0e3      	beq.n	8002164 <__ledf2+0x94>
 800219c:	0008      	movs	r0, r1
 800219e:	e7d9      	b.n	8002154 <__ledf2+0x84>
 80021a0:	45c4      	cmp	ip, r8
 80021a2:	d8d1      	bhi.n	8002148 <__ledf2+0x78>
 80021a4:	2000      	movs	r0, #0
 80021a6:	45c4      	cmp	ip, r8
 80021a8:	d2d4      	bcs.n	8002154 <__ledf2+0x84>
 80021aa:	e7f5      	b.n	8002198 <__ledf2+0xc8>
 80021ac:	000007ff 	.word	0x000007ff

080021b0 <__aeabi_dmul>:
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	4657      	mov	r7, sl
 80021b4:	464e      	mov	r6, r9
 80021b6:	4645      	mov	r5, r8
 80021b8:	46de      	mov	lr, fp
 80021ba:	b5e0      	push	{r5, r6, r7, lr}
 80021bc:	4698      	mov	r8, r3
 80021be:	030c      	lsls	r4, r1, #12
 80021c0:	004b      	lsls	r3, r1, #1
 80021c2:	0006      	movs	r6, r0
 80021c4:	4692      	mov	sl, r2
 80021c6:	b087      	sub	sp, #28
 80021c8:	0b24      	lsrs	r4, r4, #12
 80021ca:	0d5b      	lsrs	r3, r3, #21
 80021cc:	0fcf      	lsrs	r7, r1, #31
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d06c      	beq.n	80022ac <__aeabi_dmul+0xfc>
 80021d2:	4add      	ldr	r2, [pc, #884]	; (8002548 <__aeabi_dmul+0x398>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d100      	bne.n	80021da <__aeabi_dmul+0x2a>
 80021d8:	e086      	b.n	80022e8 <__aeabi_dmul+0x138>
 80021da:	0f42      	lsrs	r2, r0, #29
 80021dc:	00e4      	lsls	r4, r4, #3
 80021de:	4314      	orrs	r4, r2
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	0412      	lsls	r2, r2, #16
 80021e4:	4314      	orrs	r4, r2
 80021e6:	4ad9      	ldr	r2, [pc, #868]	; (800254c <__aeabi_dmul+0x39c>)
 80021e8:	00c5      	lsls	r5, r0, #3
 80021ea:	4694      	mov	ip, r2
 80021ec:	4463      	add	r3, ip
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2300      	movs	r3, #0
 80021f2:	4699      	mov	r9, r3
 80021f4:	469b      	mov	fp, r3
 80021f6:	4643      	mov	r3, r8
 80021f8:	4642      	mov	r2, r8
 80021fa:	031e      	lsls	r6, r3, #12
 80021fc:	0fd2      	lsrs	r2, r2, #31
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4650      	mov	r0, sl
 8002202:	4690      	mov	r8, r2
 8002204:	0b36      	lsrs	r6, r6, #12
 8002206:	0d5b      	lsrs	r3, r3, #21
 8002208:	d100      	bne.n	800220c <__aeabi_dmul+0x5c>
 800220a:	e078      	b.n	80022fe <__aeabi_dmul+0x14e>
 800220c:	4ace      	ldr	r2, [pc, #824]	; (8002548 <__aeabi_dmul+0x398>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01d      	beq.n	800224e <__aeabi_dmul+0x9e>
 8002212:	49ce      	ldr	r1, [pc, #824]	; (800254c <__aeabi_dmul+0x39c>)
 8002214:	0f42      	lsrs	r2, r0, #29
 8002216:	468c      	mov	ip, r1
 8002218:	9900      	ldr	r1, [sp, #0]
 800221a:	4463      	add	r3, ip
 800221c:	00f6      	lsls	r6, r6, #3
 800221e:	468c      	mov	ip, r1
 8002220:	4316      	orrs	r6, r2
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	449c      	add	ip, r3
 8002226:	0412      	lsls	r2, r2, #16
 8002228:	4663      	mov	r3, ip
 800222a:	4316      	orrs	r6, r2
 800222c:	00c2      	lsls	r2, r0, #3
 800222e:	2000      	movs	r0, #0
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	9900      	ldr	r1, [sp, #0]
 8002234:	4643      	mov	r3, r8
 8002236:	3101      	adds	r1, #1
 8002238:	468c      	mov	ip, r1
 800223a:	4649      	mov	r1, r9
 800223c:	407b      	eors	r3, r7
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	290f      	cmp	r1, #15
 8002242:	d900      	bls.n	8002246 <__aeabi_dmul+0x96>
 8002244:	e07e      	b.n	8002344 <__aeabi_dmul+0x194>
 8002246:	4bc2      	ldr	r3, [pc, #776]	; (8002550 <__aeabi_dmul+0x3a0>)
 8002248:	0089      	lsls	r1, r1, #2
 800224a:	5859      	ldr	r1, [r3, r1]
 800224c:	468f      	mov	pc, r1
 800224e:	4652      	mov	r2, sl
 8002250:	9b00      	ldr	r3, [sp, #0]
 8002252:	4332      	orrs	r2, r6
 8002254:	d000      	beq.n	8002258 <__aeabi_dmul+0xa8>
 8002256:	e156      	b.n	8002506 <__aeabi_dmul+0x356>
 8002258:	49bb      	ldr	r1, [pc, #748]	; (8002548 <__aeabi_dmul+0x398>)
 800225a:	2600      	movs	r6, #0
 800225c:	468c      	mov	ip, r1
 800225e:	4463      	add	r3, ip
 8002260:	4649      	mov	r1, r9
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2302      	movs	r3, #2
 8002266:	4319      	orrs	r1, r3
 8002268:	4689      	mov	r9, r1
 800226a:	2002      	movs	r0, #2
 800226c:	e7e1      	b.n	8002232 <__aeabi_dmul+0x82>
 800226e:	4643      	mov	r3, r8
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	0034      	movs	r4, r6
 8002274:	0015      	movs	r5, r2
 8002276:	4683      	mov	fp, r0
 8002278:	465b      	mov	r3, fp
 800227a:	2b02      	cmp	r3, #2
 800227c:	d05e      	beq.n	800233c <__aeabi_dmul+0x18c>
 800227e:	2b03      	cmp	r3, #3
 8002280:	d100      	bne.n	8002284 <__aeabi_dmul+0xd4>
 8002282:	e1f3      	b.n	800266c <__aeabi_dmul+0x4bc>
 8002284:	2b01      	cmp	r3, #1
 8002286:	d000      	beq.n	800228a <__aeabi_dmul+0xda>
 8002288:	e118      	b.n	80024bc <__aeabi_dmul+0x30c>
 800228a:	2200      	movs	r2, #0
 800228c:	2400      	movs	r4, #0
 800228e:	2500      	movs	r5, #0
 8002290:	9b01      	ldr	r3, [sp, #4]
 8002292:	0512      	lsls	r2, r2, #20
 8002294:	4322      	orrs	r2, r4
 8002296:	07db      	lsls	r3, r3, #31
 8002298:	431a      	orrs	r2, r3
 800229a:	0028      	movs	r0, r5
 800229c:	0011      	movs	r1, r2
 800229e:	b007      	add	sp, #28
 80022a0:	bcf0      	pop	{r4, r5, r6, r7}
 80022a2:	46bb      	mov	fp, r7
 80022a4:	46b2      	mov	sl, r6
 80022a6:	46a9      	mov	r9, r5
 80022a8:	46a0      	mov	r8, r4
 80022aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ac:	0025      	movs	r5, r4
 80022ae:	4305      	orrs	r5, r0
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dmul+0x104>
 80022b2:	e141      	b.n	8002538 <__aeabi_dmul+0x388>
 80022b4:	2c00      	cmp	r4, #0
 80022b6:	d100      	bne.n	80022ba <__aeabi_dmul+0x10a>
 80022b8:	e1ad      	b.n	8002616 <__aeabi_dmul+0x466>
 80022ba:	0020      	movs	r0, r4
 80022bc:	f000 fed2 	bl	8003064 <__clzsi2>
 80022c0:	0001      	movs	r1, r0
 80022c2:	0002      	movs	r2, r0
 80022c4:	390b      	subs	r1, #11
 80022c6:	231d      	movs	r3, #29
 80022c8:	0010      	movs	r0, r2
 80022ca:	1a5b      	subs	r3, r3, r1
 80022cc:	0031      	movs	r1, r6
 80022ce:	0035      	movs	r5, r6
 80022d0:	3808      	subs	r0, #8
 80022d2:	4084      	lsls	r4, r0
 80022d4:	40d9      	lsrs	r1, r3
 80022d6:	4085      	lsls	r5, r0
 80022d8:	430c      	orrs	r4, r1
 80022da:	489e      	ldr	r0, [pc, #632]	; (8002554 <__aeabi_dmul+0x3a4>)
 80022dc:	1a83      	subs	r3, r0, r2
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2300      	movs	r3, #0
 80022e2:	4699      	mov	r9, r3
 80022e4:	469b      	mov	fp, r3
 80022e6:	e786      	b.n	80021f6 <__aeabi_dmul+0x46>
 80022e8:	0005      	movs	r5, r0
 80022ea:	4325      	orrs	r5, r4
 80022ec:	d000      	beq.n	80022f0 <__aeabi_dmul+0x140>
 80022ee:	e11c      	b.n	800252a <__aeabi_dmul+0x37a>
 80022f0:	2208      	movs	r2, #8
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2302      	movs	r3, #2
 80022f6:	2400      	movs	r4, #0
 80022f8:	4691      	mov	r9, r2
 80022fa:	469b      	mov	fp, r3
 80022fc:	e77b      	b.n	80021f6 <__aeabi_dmul+0x46>
 80022fe:	4652      	mov	r2, sl
 8002300:	4332      	orrs	r2, r6
 8002302:	d100      	bne.n	8002306 <__aeabi_dmul+0x156>
 8002304:	e10a      	b.n	800251c <__aeabi_dmul+0x36c>
 8002306:	2e00      	cmp	r6, #0
 8002308:	d100      	bne.n	800230c <__aeabi_dmul+0x15c>
 800230a:	e176      	b.n	80025fa <__aeabi_dmul+0x44a>
 800230c:	0030      	movs	r0, r6
 800230e:	f000 fea9 	bl	8003064 <__clzsi2>
 8002312:	0002      	movs	r2, r0
 8002314:	3a0b      	subs	r2, #11
 8002316:	231d      	movs	r3, #29
 8002318:	0001      	movs	r1, r0
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	4652      	mov	r2, sl
 800231e:	3908      	subs	r1, #8
 8002320:	40da      	lsrs	r2, r3
 8002322:	408e      	lsls	r6, r1
 8002324:	4316      	orrs	r6, r2
 8002326:	4652      	mov	r2, sl
 8002328:	408a      	lsls	r2, r1
 800232a:	9b00      	ldr	r3, [sp, #0]
 800232c:	4989      	ldr	r1, [pc, #548]	; (8002554 <__aeabi_dmul+0x3a4>)
 800232e:	1a18      	subs	r0, r3, r0
 8002330:	0003      	movs	r3, r0
 8002332:	468c      	mov	ip, r1
 8002334:	4463      	add	r3, ip
 8002336:	2000      	movs	r0, #0
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	e77a      	b.n	8002232 <__aeabi_dmul+0x82>
 800233c:	2400      	movs	r4, #0
 800233e:	2500      	movs	r5, #0
 8002340:	4a81      	ldr	r2, [pc, #516]	; (8002548 <__aeabi_dmul+0x398>)
 8002342:	e7a5      	b.n	8002290 <__aeabi_dmul+0xe0>
 8002344:	0c2f      	lsrs	r7, r5, #16
 8002346:	042d      	lsls	r5, r5, #16
 8002348:	0c2d      	lsrs	r5, r5, #16
 800234a:	002b      	movs	r3, r5
 800234c:	0c11      	lsrs	r1, r2, #16
 800234e:	0412      	lsls	r2, r2, #16
 8002350:	0c12      	lsrs	r2, r2, #16
 8002352:	4353      	muls	r3, r2
 8002354:	4698      	mov	r8, r3
 8002356:	0013      	movs	r3, r2
 8002358:	0028      	movs	r0, r5
 800235a:	437b      	muls	r3, r7
 800235c:	4699      	mov	r9, r3
 800235e:	4348      	muls	r0, r1
 8002360:	4448      	add	r0, r9
 8002362:	4683      	mov	fp, r0
 8002364:	4640      	mov	r0, r8
 8002366:	000b      	movs	r3, r1
 8002368:	0c00      	lsrs	r0, r0, #16
 800236a:	4682      	mov	sl, r0
 800236c:	4658      	mov	r0, fp
 800236e:	437b      	muls	r3, r7
 8002370:	4450      	add	r0, sl
 8002372:	9302      	str	r3, [sp, #8]
 8002374:	4581      	cmp	r9, r0
 8002376:	d906      	bls.n	8002386 <__aeabi_dmul+0x1d6>
 8002378:	469a      	mov	sl, r3
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	025b      	lsls	r3, r3, #9
 800237e:	4699      	mov	r9, r3
 8002380:	44ca      	add	sl, r9
 8002382:	4653      	mov	r3, sl
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	0c03      	lsrs	r3, r0, #16
 8002388:	469b      	mov	fp, r3
 800238a:	4643      	mov	r3, r8
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	0400      	lsls	r0, r0, #16
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	4698      	mov	r8, r3
 8002394:	0003      	movs	r3, r0
 8002396:	4443      	add	r3, r8
 8002398:	9304      	str	r3, [sp, #16]
 800239a:	0c33      	lsrs	r3, r6, #16
 800239c:	4699      	mov	r9, r3
 800239e:	002b      	movs	r3, r5
 80023a0:	0436      	lsls	r6, r6, #16
 80023a2:	0c36      	lsrs	r6, r6, #16
 80023a4:	4373      	muls	r3, r6
 80023a6:	4698      	mov	r8, r3
 80023a8:	0033      	movs	r3, r6
 80023aa:	437b      	muls	r3, r7
 80023ac:	469a      	mov	sl, r3
 80023ae:	464b      	mov	r3, r9
 80023b0:	435d      	muls	r5, r3
 80023b2:	435f      	muls	r7, r3
 80023b4:	4643      	mov	r3, r8
 80023b6:	4455      	add	r5, sl
 80023b8:	0c18      	lsrs	r0, r3, #16
 80023ba:	1940      	adds	r0, r0, r5
 80023bc:	4582      	cmp	sl, r0
 80023be:	d903      	bls.n	80023c8 <__aeabi_dmul+0x218>
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	025b      	lsls	r3, r3, #9
 80023c4:	469a      	mov	sl, r3
 80023c6:	4457      	add	r7, sl
 80023c8:	0c05      	lsrs	r5, r0, #16
 80023ca:	19eb      	adds	r3, r5, r7
 80023cc:	9305      	str	r3, [sp, #20]
 80023ce:	4643      	mov	r3, r8
 80023d0:	041d      	lsls	r5, r3, #16
 80023d2:	0c2d      	lsrs	r5, r5, #16
 80023d4:	0400      	lsls	r0, r0, #16
 80023d6:	1940      	adds	r0, r0, r5
 80023d8:	0c25      	lsrs	r5, r4, #16
 80023da:	0424      	lsls	r4, r4, #16
 80023dc:	0c24      	lsrs	r4, r4, #16
 80023de:	0027      	movs	r7, r4
 80023e0:	4357      	muls	r7, r2
 80023e2:	436a      	muls	r2, r5
 80023e4:	4690      	mov	r8, r2
 80023e6:	002a      	movs	r2, r5
 80023e8:	0c3b      	lsrs	r3, r7, #16
 80023ea:	469a      	mov	sl, r3
 80023ec:	434a      	muls	r2, r1
 80023ee:	4361      	muls	r1, r4
 80023f0:	4441      	add	r1, r8
 80023f2:	4451      	add	r1, sl
 80023f4:	4483      	add	fp, r0
 80023f6:	4588      	cmp	r8, r1
 80023f8:	d903      	bls.n	8002402 <__aeabi_dmul+0x252>
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	025b      	lsls	r3, r3, #9
 80023fe:	4698      	mov	r8, r3
 8002400:	4442      	add	r2, r8
 8002402:	043f      	lsls	r7, r7, #16
 8002404:	0c0b      	lsrs	r3, r1, #16
 8002406:	0c3f      	lsrs	r7, r7, #16
 8002408:	0409      	lsls	r1, r1, #16
 800240a:	19c9      	adds	r1, r1, r7
 800240c:	0027      	movs	r7, r4
 800240e:	4698      	mov	r8, r3
 8002410:	464b      	mov	r3, r9
 8002412:	4377      	muls	r7, r6
 8002414:	435c      	muls	r4, r3
 8002416:	436e      	muls	r6, r5
 8002418:	435d      	muls	r5, r3
 800241a:	0c3b      	lsrs	r3, r7, #16
 800241c:	4699      	mov	r9, r3
 800241e:	19a4      	adds	r4, r4, r6
 8002420:	444c      	add	r4, r9
 8002422:	4442      	add	r2, r8
 8002424:	9503      	str	r5, [sp, #12]
 8002426:	42a6      	cmp	r6, r4
 8002428:	d904      	bls.n	8002434 <__aeabi_dmul+0x284>
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	025b      	lsls	r3, r3, #9
 800242e:	4698      	mov	r8, r3
 8002430:	4445      	add	r5, r8
 8002432:	9503      	str	r5, [sp, #12]
 8002434:	9b02      	ldr	r3, [sp, #8]
 8002436:	043f      	lsls	r7, r7, #16
 8002438:	445b      	add	r3, fp
 800243a:	001e      	movs	r6, r3
 800243c:	4283      	cmp	r3, r0
 800243e:	4180      	sbcs	r0, r0
 8002440:	0423      	lsls	r3, r4, #16
 8002442:	4698      	mov	r8, r3
 8002444:	9b05      	ldr	r3, [sp, #20]
 8002446:	0c3f      	lsrs	r7, r7, #16
 8002448:	4447      	add	r7, r8
 800244a:	4698      	mov	r8, r3
 800244c:	1876      	adds	r6, r6, r1
 800244e:	428e      	cmp	r6, r1
 8002450:	4189      	sbcs	r1, r1
 8002452:	4447      	add	r7, r8
 8002454:	4240      	negs	r0, r0
 8002456:	183d      	adds	r5, r7, r0
 8002458:	46a8      	mov	r8, r5
 800245a:	4693      	mov	fp, r2
 800245c:	4249      	negs	r1, r1
 800245e:	468a      	mov	sl, r1
 8002460:	44c3      	add	fp, r8
 8002462:	429f      	cmp	r7, r3
 8002464:	41bf      	sbcs	r7, r7
 8002466:	4580      	cmp	r8, r0
 8002468:	4180      	sbcs	r0, r0
 800246a:	9b03      	ldr	r3, [sp, #12]
 800246c:	44da      	add	sl, fp
 800246e:	4698      	mov	r8, r3
 8002470:	4653      	mov	r3, sl
 8002472:	4240      	negs	r0, r0
 8002474:	427f      	negs	r7, r7
 8002476:	4307      	orrs	r7, r0
 8002478:	0c24      	lsrs	r4, r4, #16
 800247a:	4593      	cmp	fp, r2
 800247c:	4192      	sbcs	r2, r2
 800247e:	458a      	cmp	sl, r1
 8002480:	4189      	sbcs	r1, r1
 8002482:	193f      	adds	r7, r7, r4
 8002484:	0ddc      	lsrs	r4, r3, #23
 8002486:	9b04      	ldr	r3, [sp, #16]
 8002488:	0275      	lsls	r5, r6, #9
 800248a:	431d      	orrs	r5, r3
 800248c:	1e68      	subs	r0, r5, #1
 800248e:	4185      	sbcs	r5, r0
 8002490:	4653      	mov	r3, sl
 8002492:	4252      	negs	r2, r2
 8002494:	4249      	negs	r1, r1
 8002496:	430a      	orrs	r2, r1
 8002498:	18bf      	adds	r7, r7, r2
 800249a:	4447      	add	r7, r8
 800249c:	0df6      	lsrs	r6, r6, #23
 800249e:	027f      	lsls	r7, r7, #9
 80024a0:	4335      	orrs	r5, r6
 80024a2:	025a      	lsls	r2, r3, #9
 80024a4:	433c      	orrs	r4, r7
 80024a6:	4315      	orrs	r5, r2
 80024a8:	01fb      	lsls	r3, r7, #7
 80024aa:	d400      	bmi.n	80024ae <__aeabi_dmul+0x2fe>
 80024ac:	e0c1      	b.n	8002632 <__aeabi_dmul+0x482>
 80024ae:	2101      	movs	r1, #1
 80024b0:	086a      	lsrs	r2, r5, #1
 80024b2:	400d      	ands	r5, r1
 80024b4:	4315      	orrs	r5, r2
 80024b6:	07e2      	lsls	r2, r4, #31
 80024b8:	4315      	orrs	r5, r2
 80024ba:	0864      	lsrs	r4, r4, #1
 80024bc:	4926      	ldr	r1, [pc, #152]	; (8002558 <__aeabi_dmul+0x3a8>)
 80024be:	4461      	add	r1, ip
 80024c0:	2900      	cmp	r1, #0
 80024c2:	dd56      	ble.n	8002572 <__aeabi_dmul+0x3c2>
 80024c4:	076b      	lsls	r3, r5, #29
 80024c6:	d009      	beq.n	80024dc <__aeabi_dmul+0x32c>
 80024c8:	220f      	movs	r2, #15
 80024ca:	402a      	ands	r2, r5
 80024cc:	2a04      	cmp	r2, #4
 80024ce:	d005      	beq.n	80024dc <__aeabi_dmul+0x32c>
 80024d0:	1d2a      	adds	r2, r5, #4
 80024d2:	42aa      	cmp	r2, r5
 80024d4:	41ad      	sbcs	r5, r5
 80024d6:	426d      	negs	r5, r5
 80024d8:	1964      	adds	r4, r4, r5
 80024da:	0015      	movs	r5, r2
 80024dc:	01e3      	lsls	r3, r4, #7
 80024de:	d504      	bpl.n	80024ea <__aeabi_dmul+0x33a>
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <__aeabi_dmul+0x3ac>)
 80024e4:	00c9      	lsls	r1, r1, #3
 80024e6:	4014      	ands	r4, r2
 80024e8:	4461      	add	r1, ip
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <__aeabi_dmul+0x3b0>)
 80024ec:	4291      	cmp	r1, r2
 80024ee:	dd00      	ble.n	80024f2 <__aeabi_dmul+0x342>
 80024f0:	e724      	b.n	800233c <__aeabi_dmul+0x18c>
 80024f2:	0762      	lsls	r2, r4, #29
 80024f4:	08ed      	lsrs	r5, r5, #3
 80024f6:	0264      	lsls	r4, r4, #9
 80024f8:	0549      	lsls	r1, r1, #21
 80024fa:	4315      	orrs	r5, r2
 80024fc:	0b24      	lsrs	r4, r4, #12
 80024fe:	0d4a      	lsrs	r2, r1, #21
 8002500:	e6c6      	b.n	8002290 <__aeabi_dmul+0xe0>
 8002502:	9701      	str	r7, [sp, #4]
 8002504:	e6b8      	b.n	8002278 <__aeabi_dmul+0xc8>
 8002506:	4a10      	ldr	r2, [pc, #64]	; (8002548 <__aeabi_dmul+0x398>)
 8002508:	2003      	movs	r0, #3
 800250a:	4694      	mov	ip, r2
 800250c:	4463      	add	r3, ip
 800250e:	464a      	mov	r2, r9
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2303      	movs	r3, #3
 8002514:	431a      	orrs	r2, r3
 8002516:	4691      	mov	r9, r2
 8002518:	4652      	mov	r2, sl
 800251a:	e68a      	b.n	8002232 <__aeabi_dmul+0x82>
 800251c:	4649      	mov	r1, r9
 800251e:	2301      	movs	r3, #1
 8002520:	4319      	orrs	r1, r3
 8002522:	4689      	mov	r9, r1
 8002524:	2600      	movs	r6, #0
 8002526:	2001      	movs	r0, #1
 8002528:	e683      	b.n	8002232 <__aeabi_dmul+0x82>
 800252a:	220c      	movs	r2, #12
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2303      	movs	r3, #3
 8002530:	0005      	movs	r5, r0
 8002532:	4691      	mov	r9, r2
 8002534:	469b      	mov	fp, r3
 8002536:	e65e      	b.n	80021f6 <__aeabi_dmul+0x46>
 8002538:	2304      	movs	r3, #4
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	2400      	movs	r4, #0
 8002544:	469b      	mov	fp, r3
 8002546:	e656      	b.n	80021f6 <__aeabi_dmul+0x46>
 8002548:	000007ff 	.word	0x000007ff
 800254c:	fffffc01 	.word	0xfffffc01
 8002550:	0800d850 	.word	0x0800d850
 8002554:	fffffc0d 	.word	0xfffffc0d
 8002558:	000003ff 	.word	0x000003ff
 800255c:	feffffff 	.word	0xfeffffff
 8002560:	000007fe 	.word	0x000007fe
 8002564:	2300      	movs	r3, #0
 8002566:	2480      	movs	r4, #128	; 0x80
 8002568:	2500      	movs	r5, #0
 800256a:	4a44      	ldr	r2, [pc, #272]	; (800267c <__aeabi_dmul+0x4cc>)
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	0324      	lsls	r4, r4, #12
 8002570:	e68e      	b.n	8002290 <__aeabi_dmul+0xe0>
 8002572:	2001      	movs	r0, #1
 8002574:	1a40      	subs	r0, r0, r1
 8002576:	2838      	cmp	r0, #56	; 0x38
 8002578:	dd00      	ble.n	800257c <__aeabi_dmul+0x3cc>
 800257a:	e686      	b.n	800228a <__aeabi_dmul+0xda>
 800257c:	281f      	cmp	r0, #31
 800257e:	dd5b      	ble.n	8002638 <__aeabi_dmul+0x488>
 8002580:	221f      	movs	r2, #31
 8002582:	0023      	movs	r3, r4
 8002584:	4252      	negs	r2, r2
 8002586:	1a51      	subs	r1, r2, r1
 8002588:	40cb      	lsrs	r3, r1
 800258a:	0019      	movs	r1, r3
 800258c:	2820      	cmp	r0, #32
 800258e:	d003      	beq.n	8002598 <__aeabi_dmul+0x3e8>
 8002590:	4a3b      	ldr	r2, [pc, #236]	; (8002680 <__aeabi_dmul+0x4d0>)
 8002592:	4462      	add	r2, ip
 8002594:	4094      	lsls	r4, r2
 8002596:	4325      	orrs	r5, r4
 8002598:	1e6a      	subs	r2, r5, #1
 800259a:	4195      	sbcs	r5, r2
 800259c:	002a      	movs	r2, r5
 800259e:	430a      	orrs	r2, r1
 80025a0:	2107      	movs	r1, #7
 80025a2:	000d      	movs	r5, r1
 80025a4:	2400      	movs	r4, #0
 80025a6:	4015      	ands	r5, r2
 80025a8:	4211      	tst	r1, r2
 80025aa:	d05b      	beq.n	8002664 <__aeabi_dmul+0x4b4>
 80025ac:	210f      	movs	r1, #15
 80025ae:	2400      	movs	r4, #0
 80025b0:	4011      	ands	r1, r2
 80025b2:	2904      	cmp	r1, #4
 80025b4:	d053      	beq.n	800265e <__aeabi_dmul+0x4ae>
 80025b6:	1d11      	adds	r1, r2, #4
 80025b8:	4291      	cmp	r1, r2
 80025ba:	4192      	sbcs	r2, r2
 80025bc:	4252      	negs	r2, r2
 80025be:	18a4      	adds	r4, r4, r2
 80025c0:	000a      	movs	r2, r1
 80025c2:	0223      	lsls	r3, r4, #8
 80025c4:	d54b      	bpl.n	800265e <__aeabi_dmul+0x4ae>
 80025c6:	2201      	movs	r2, #1
 80025c8:	2400      	movs	r4, #0
 80025ca:	2500      	movs	r5, #0
 80025cc:	e660      	b.n	8002290 <__aeabi_dmul+0xe0>
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	031b      	lsls	r3, r3, #12
 80025d2:	421c      	tst	r4, r3
 80025d4:	d009      	beq.n	80025ea <__aeabi_dmul+0x43a>
 80025d6:	421e      	tst	r6, r3
 80025d8:	d107      	bne.n	80025ea <__aeabi_dmul+0x43a>
 80025da:	4333      	orrs	r3, r6
 80025dc:	031c      	lsls	r4, r3, #12
 80025de:	4643      	mov	r3, r8
 80025e0:	0015      	movs	r5, r2
 80025e2:	0b24      	lsrs	r4, r4, #12
 80025e4:	4a25      	ldr	r2, [pc, #148]	; (800267c <__aeabi_dmul+0x4cc>)
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	e652      	b.n	8002290 <__aeabi_dmul+0xe0>
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	0312      	lsls	r2, r2, #12
 80025ee:	4314      	orrs	r4, r2
 80025f0:	0324      	lsls	r4, r4, #12
 80025f2:	4a22      	ldr	r2, [pc, #136]	; (800267c <__aeabi_dmul+0x4cc>)
 80025f4:	0b24      	lsrs	r4, r4, #12
 80025f6:	9701      	str	r7, [sp, #4]
 80025f8:	e64a      	b.n	8002290 <__aeabi_dmul+0xe0>
 80025fa:	f000 fd33 	bl	8003064 <__clzsi2>
 80025fe:	0003      	movs	r3, r0
 8002600:	001a      	movs	r2, r3
 8002602:	3215      	adds	r2, #21
 8002604:	3020      	adds	r0, #32
 8002606:	2a1c      	cmp	r2, #28
 8002608:	dc00      	bgt.n	800260c <__aeabi_dmul+0x45c>
 800260a:	e684      	b.n	8002316 <__aeabi_dmul+0x166>
 800260c:	4656      	mov	r6, sl
 800260e:	3b08      	subs	r3, #8
 8002610:	2200      	movs	r2, #0
 8002612:	409e      	lsls	r6, r3
 8002614:	e689      	b.n	800232a <__aeabi_dmul+0x17a>
 8002616:	f000 fd25 	bl	8003064 <__clzsi2>
 800261a:	0001      	movs	r1, r0
 800261c:	0002      	movs	r2, r0
 800261e:	3115      	adds	r1, #21
 8002620:	3220      	adds	r2, #32
 8002622:	291c      	cmp	r1, #28
 8002624:	dc00      	bgt.n	8002628 <__aeabi_dmul+0x478>
 8002626:	e64e      	b.n	80022c6 <__aeabi_dmul+0x116>
 8002628:	0034      	movs	r4, r6
 800262a:	3808      	subs	r0, #8
 800262c:	2500      	movs	r5, #0
 800262e:	4084      	lsls	r4, r0
 8002630:	e653      	b.n	80022da <__aeabi_dmul+0x12a>
 8002632:	9b00      	ldr	r3, [sp, #0]
 8002634:	469c      	mov	ip, r3
 8002636:	e741      	b.n	80024bc <__aeabi_dmul+0x30c>
 8002638:	4912      	ldr	r1, [pc, #72]	; (8002684 <__aeabi_dmul+0x4d4>)
 800263a:	0022      	movs	r2, r4
 800263c:	4461      	add	r1, ip
 800263e:	002e      	movs	r6, r5
 8002640:	408d      	lsls	r5, r1
 8002642:	408a      	lsls	r2, r1
 8002644:	40c6      	lsrs	r6, r0
 8002646:	1e69      	subs	r1, r5, #1
 8002648:	418d      	sbcs	r5, r1
 800264a:	4332      	orrs	r2, r6
 800264c:	432a      	orrs	r2, r5
 800264e:	40c4      	lsrs	r4, r0
 8002650:	0753      	lsls	r3, r2, #29
 8002652:	d0b6      	beq.n	80025c2 <__aeabi_dmul+0x412>
 8002654:	210f      	movs	r1, #15
 8002656:	4011      	ands	r1, r2
 8002658:	2904      	cmp	r1, #4
 800265a:	d1ac      	bne.n	80025b6 <__aeabi_dmul+0x406>
 800265c:	e7b1      	b.n	80025c2 <__aeabi_dmul+0x412>
 800265e:	0765      	lsls	r5, r4, #29
 8002660:	0264      	lsls	r4, r4, #9
 8002662:	0b24      	lsrs	r4, r4, #12
 8002664:	08d2      	lsrs	r2, r2, #3
 8002666:	4315      	orrs	r5, r2
 8002668:	2200      	movs	r2, #0
 800266a:	e611      	b.n	8002290 <__aeabi_dmul+0xe0>
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	0312      	lsls	r2, r2, #12
 8002670:	4314      	orrs	r4, r2
 8002672:	0324      	lsls	r4, r4, #12
 8002674:	4a01      	ldr	r2, [pc, #4]	; (800267c <__aeabi_dmul+0x4cc>)
 8002676:	0b24      	lsrs	r4, r4, #12
 8002678:	e60a      	b.n	8002290 <__aeabi_dmul+0xe0>
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	000007ff 	.word	0x000007ff
 8002680:	0000043e 	.word	0x0000043e
 8002684:	0000041e 	.word	0x0000041e

08002688 <__aeabi_dsub>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	4657      	mov	r7, sl
 800268c:	464e      	mov	r6, r9
 800268e:	4645      	mov	r5, r8
 8002690:	46de      	mov	lr, fp
 8002692:	0004      	movs	r4, r0
 8002694:	b5e0      	push	{r5, r6, r7, lr}
 8002696:	001f      	movs	r7, r3
 8002698:	0010      	movs	r0, r2
 800269a:	030b      	lsls	r3, r1, #12
 800269c:	0f62      	lsrs	r2, r4, #29
 800269e:	004e      	lsls	r6, r1, #1
 80026a0:	0fcd      	lsrs	r5, r1, #31
 80026a2:	0a5b      	lsrs	r3, r3, #9
 80026a4:	0339      	lsls	r1, r7, #12
 80026a6:	4313      	orrs	r3, r2
 80026a8:	0a49      	lsrs	r1, r1, #9
 80026aa:	00e2      	lsls	r2, r4, #3
 80026ac:	0f44      	lsrs	r4, r0, #29
 80026ae:	4321      	orrs	r1, r4
 80026b0:	4cc2      	ldr	r4, [pc, #776]	; (80029bc <__aeabi_dsub+0x334>)
 80026b2:	4691      	mov	r9, r2
 80026b4:	4692      	mov	sl, r2
 80026b6:	00c0      	lsls	r0, r0, #3
 80026b8:	007a      	lsls	r2, r7, #1
 80026ba:	4680      	mov	r8, r0
 80026bc:	0d76      	lsrs	r6, r6, #21
 80026be:	0d52      	lsrs	r2, r2, #21
 80026c0:	0fff      	lsrs	r7, r7, #31
 80026c2:	42a2      	cmp	r2, r4
 80026c4:	d100      	bne.n	80026c8 <__aeabi_dsub+0x40>
 80026c6:	e0b4      	b.n	8002832 <__aeabi_dsub+0x1aa>
 80026c8:	2401      	movs	r4, #1
 80026ca:	4067      	eors	r7, r4
 80026cc:	46bb      	mov	fp, r7
 80026ce:	42bd      	cmp	r5, r7
 80026d0:	d100      	bne.n	80026d4 <__aeabi_dsub+0x4c>
 80026d2:	e088      	b.n	80027e6 <__aeabi_dsub+0x15e>
 80026d4:	1ab4      	subs	r4, r6, r2
 80026d6:	46a4      	mov	ip, r4
 80026d8:	2c00      	cmp	r4, #0
 80026da:	dc00      	bgt.n	80026de <__aeabi_dsub+0x56>
 80026dc:	e0b2      	b.n	8002844 <__aeabi_dsub+0x1bc>
 80026de:	2a00      	cmp	r2, #0
 80026e0:	d100      	bne.n	80026e4 <__aeabi_dsub+0x5c>
 80026e2:	e0c5      	b.n	8002870 <__aeabi_dsub+0x1e8>
 80026e4:	4ab5      	ldr	r2, [pc, #724]	; (80029bc <__aeabi_dsub+0x334>)
 80026e6:	4296      	cmp	r6, r2
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0x64>
 80026ea:	e28b      	b.n	8002c04 <__aeabi_dsub+0x57c>
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	0412      	lsls	r2, r2, #16
 80026f0:	4311      	orrs	r1, r2
 80026f2:	4662      	mov	r2, ip
 80026f4:	2a38      	cmp	r2, #56	; 0x38
 80026f6:	dd00      	ble.n	80026fa <__aeabi_dsub+0x72>
 80026f8:	e1a1      	b.n	8002a3e <__aeabi_dsub+0x3b6>
 80026fa:	2a1f      	cmp	r2, #31
 80026fc:	dd00      	ble.n	8002700 <__aeabi_dsub+0x78>
 80026fe:	e216      	b.n	8002b2e <__aeabi_dsub+0x4a6>
 8002700:	2720      	movs	r7, #32
 8002702:	000c      	movs	r4, r1
 8002704:	1abf      	subs	r7, r7, r2
 8002706:	40bc      	lsls	r4, r7
 8002708:	0002      	movs	r2, r0
 800270a:	46a0      	mov	r8, r4
 800270c:	4664      	mov	r4, ip
 800270e:	40b8      	lsls	r0, r7
 8002710:	40e2      	lsrs	r2, r4
 8002712:	4644      	mov	r4, r8
 8002714:	4314      	orrs	r4, r2
 8002716:	0002      	movs	r2, r0
 8002718:	1e50      	subs	r0, r2, #1
 800271a:	4182      	sbcs	r2, r0
 800271c:	4660      	mov	r0, ip
 800271e:	40c1      	lsrs	r1, r0
 8002720:	4322      	orrs	r2, r4
 8002722:	1a5b      	subs	r3, r3, r1
 8002724:	4649      	mov	r1, r9
 8002726:	1a8c      	subs	r4, r1, r2
 8002728:	45a1      	cmp	r9, r4
 800272a:	4192      	sbcs	r2, r2
 800272c:	4252      	negs	r2, r2
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	4698      	mov	r8, r3
 8002732:	4643      	mov	r3, r8
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	d400      	bmi.n	800273a <__aeabi_dsub+0xb2>
 8002738:	e117      	b.n	800296a <__aeabi_dsub+0x2e2>
 800273a:	4643      	mov	r3, r8
 800273c:	025b      	lsls	r3, r3, #9
 800273e:	0a5b      	lsrs	r3, r3, #9
 8002740:	4698      	mov	r8, r3
 8002742:	4643      	mov	r3, r8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0xc2>
 8002748:	e16c      	b.n	8002a24 <__aeabi_dsub+0x39c>
 800274a:	4640      	mov	r0, r8
 800274c:	f000 fc8a 	bl	8003064 <__clzsi2>
 8002750:	0002      	movs	r2, r0
 8002752:	3a08      	subs	r2, #8
 8002754:	2120      	movs	r1, #32
 8002756:	0020      	movs	r0, r4
 8002758:	4643      	mov	r3, r8
 800275a:	1a89      	subs	r1, r1, r2
 800275c:	4093      	lsls	r3, r2
 800275e:	40c8      	lsrs	r0, r1
 8002760:	4094      	lsls	r4, r2
 8002762:	4303      	orrs	r3, r0
 8002764:	4296      	cmp	r6, r2
 8002766:	dd00      	ble.n	800276a <__aeabi_dsub+0xe2>
 8002768:	e157      	b.n	8002a1a <__aeabi_dsub+0x392>
 800276a:	1b96      	subs	r6, r2, r6
 800276c:	1c71      	adds	r1, r6, #1
 800276e:	291f      	cmp	r1, #31
 8002770:	dd00      	ble.n	8002774 <__aeabi_dsub+0xec>
 8002772:	e1cb      	b.n	8002b0c <__aeabi_dsub+0x484>
 8002774:	2220      	movs	r2, #32
 8002776:	0018      	movs	r0, r3
 8002778:	0026      	movs	r6, r4
 800277a:	1a52      	subs	r2, r2, r1
 800277c:	4094      	lsls	r4, r2
 800277e:	4090      	lsls	r0, r2
 8002780:	40ce      	lsrs	r6, r1
 8002782:	40cb      	lsrs	r3, r1
 8002784:	1e62      	subs	r2, r4, #1
 8002786:	4194      	sbcs	r4, r2
 8002788:	4330      	orrs	r0, r6
 800278a:	4698      	mov	r8, r3
 800278c:	2600      	movs	r6, #0
 800278e:	4304      	orrs	r4, r0
 8002790:	0763      	lsls	r3, r4, #29
 8002792:	d009      	beq.n	80027a8 <__aeabi_dsub+0x120>
 8002794:	230f      	movs	r3, #15
 8002796:	4023      	ands	r3, r4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d005      	beq.n	80027a8 <__aeabi_dsub+0x120>
 800279c:	1d23      	adds	r3, r4, #4
 800279e:	42a3      	cmp	r3, r4
 80027a0:	41a4      	sbcs	r4, r4
 80027a2:	4264      	negs	r4, r4
 80027a4:	44a0      	add	r8, r4
 80027a6:	001c      	movs	r4, r3
 80027a8:	4643      	mov	r3, r8
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	d400      	bmi.n	80027b0 <__aeabi_dsub+0x128>
 80027ae:	e0df      	b.n	8002970 <__aeabi_dsub+0x2e8>
 80027b0:	4b82      	ldr	r3, [pc, #520]	; (80029bc <__aeabi_dsub+0x334>)
 80027b2:	3601      	adds	r6, #1
 80027b4:	429e      	cmp	r6, r3
 80027b6:	d100      	bne.n	80027ba <__aeabi_dsub+0x132>
 80027b8:	e0fb      	b.n	80029b2 <__aeabi_dsub+0x32a>
 80027ba:	4642      	mov	r2, r8
 80027bc:	4b80      	ldr	r3, [pc, #512]	; (80029c0 <__aeabi_dsub+0x338>)
 80027be:	08e4      	lsrs	r4, r4, #3
 80027c0:	401a      	ands	r2, r3
 80027c2:	0013      	movs	r3, r2
 80027c4:	0571      	lsls	r1, r6, #21
 80027c6:	0752      	lsls	r2, r2, #29
 80027c8:	025b      	lsls	r3, r3, #9
 80027ca:	4322      	orrs	r2, r4
 80027cc:	0b1b      	lsrs	r3, r3, #12
 80027ce:	0d49      	lsrs	r1, r1, #21
 80027d0:	0509      	lsls	r1, r1, #20
 80027d2:	07ed      	lsls	r5, r5, #31
 80027d4:	4319      	orrs	r1, r3
 80027d6:	4329      	orrs	r1, r5
 80027d8:	0010      	movs	r0, r2
 80027da:	bcf0      	pop	{r4, r5, r6, r7}
 80027dc:	46bb      	mov	fp, r7
 80027de:	46b2      	mov	sl, r6
 80027e0:	46a9      	mov	r9, r5
 80027e2:	46a0      	mov	r8, r4
 80027e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027e6:	1ab4      	subs	r4, r6, r2
 80027e8:	46a4      	mov	ip, r4
 80027ea:	2c00      	cmp	r4, #0
 80027ec:	dd58      	ble.n	80028a0 <__aeabi_dsub+0x218>
 80027ee:	2a00      	cmp	r2, #0
 80027f0:	d100      	bne.n	80027f4 <__aeabi_dsub+0x16c>
 80027f2:	e09e      	b.n	8002932 <__aeabi_dsub+0x2aa>
 80027f4:	4a71      	ldr	r2, [pc, #452]	; (80029bc <__aeabi_dsub+0x334>)
 80027f6:	4296      	cmp	r6, r2
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x174>
 80027fa:	e13b      	b.n	8002a74 <__aeabi_dsub+0x3ec>
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	0412      	lsls	r2, r2, #16
 8002800:	4311      	orrs	r1, r2
 8002802:	4662      	mov	r2, ip
 8002804:	2a38      	cmp	r2, #56	; 0x38
 8002806:	dd00      	ble.n	800280a <__aeabi_dsub+0x182>
 8002808:	e0c1      	b.n	800298e <__aeabi_dsub+0x306>
 800280a:	2a1f      	cmp	r2, #31
 800280c:	dc00      	bgt.n	8002810 <__aeabi_dsub+0x188>
 800280e:	e1bb      	b.n	8002b88 <__aeabi_dsub+0x500>
 8002810:	000c      	movs	r4, r1
 8002812:	3a20      	subs	r2, #32
 8002814:	40d4      	lsrs	r4, r2
 8002816:	0022      	movs	r2, r4
 8002818:	4664      	mov	r4, ip
 800281a:	2c20      	cmp	r4, #32
 800281c:	d004      	beq.n	8002828 <__aeabi_dsub+0x1a0>
 800281e:	2740      	movs	r7, #64	; 0x40
 8002820:	1b3f      	subs	r7, r7, r4
 8002822:	40b9      	lsls	r1, r7
 8002824:	4308      	orrs	r0, r1
 8002826:	4680      	mov	r8, r0
 8002828:	4644      	mov	r4, r8
 800282a:	1e61      	subs	r1, r4, #1
 800282c:	418c      	sbcs	r4, r1
 800282e:	4314      	orrs	r4, r2
 8002830:	e0b1      	b.n	8002996 <__aeabi_dsub+0x30e>
 8002832:	000c      	movs	r4, r1
 8002834:	4304      	orrs	r4, r0
 8002836:	d02a      	beq.n	800288e <__aeabi_dsub+0x206>
 8002838:	46bb      	mov	fp, r7
 800283a:	42bd      	cmp	r5, r7
 800283c:	d02d      	beq.n	800289a <__aeabi_dsub+0x212>
 800283e:	4c61      	ldr	r4, [pc, #388]	; (80029c4 <__aeabi_dsub+0x33c>)
 8002840:	46a4      	mov	ip, r4
 8002842:	44b4      	add	ip, r6
 8002844:	4664      	mov	r4, ip
 8002846:	2c00      	cmp	r4, #0
 8002848:	d05c      	beq.n	8002904 <__aeabi_dsub+0x27c>
 800284a:	1b94      	subs	r4, r2, r6
 800284c:	46a4      	mov	ip, r4
 800284e:	2e00      	cmp	r6, #0
 8002850:	d000      	beq.n	8002854 <__aeabi_dsub+0x1cc>
 8002852:	e115      	b.n	8002a80 <__aeabi_dsub+0x3f8>
 8002854:	464d      	mov	r5, r9
 8002856:	431d      	orrs	r5, r3
 8002858:	d100      	bne.n	800285c <__aeabi_dsub+0x1d4>
 800285a:	e1c3      	b.n	8002be4 <__aeabi_dsub+0x55c>
 800285c:	1e65      	subs	r5, r4, #1
 800285e:	2c01      	cmp	r4, #1
 8002860:	d100      	bne.n	8002864 <__aeabi_dsub+0x1dc>
 8002862:	e20c      	b.n	8002c7e <__aeabi_dsub+0x5f6>
 8002864:	4e55      	ldr	r6, [pc, #340]	; (80029bc <__aeabi_dsub+0x334>)
 8002866:	42b4      	cmp	r4, r6
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x1e4>
 800286a:	e1f8      	b.n	8002c5e <__aeabi_dsub+0x5d6>
 800286c:	46ac      	mov	ip, r5
 800286e:	e10e      	b.n	8002a8e <__aeabi_dsub+0x406>
 8002870:	000a      	movs	r2, r1
 8002872:	4302      	orrs	r2, r0
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x1f0>
 8002876:	e136      	b.n	8002ae6 <__aeabi_dsub+0x45e>
 8002878:	0022      	movs	r2, r4
 800287a:	3a01      	subs	r2, #1
 800287c:	2c01      	cmp	r4, #1
 800287e:	d100      	bne.n	8002882 <__aeabi_dsub+0x1fa>
 8002880:	e1c6      	b.n	8002c10 <__aeabi_dsub+0x588>
 8002882:	4c4e      	ldr	r4, [pc, #312]	; (80029bc <__aeabi_dsub+0x334>)
 8002884:	45a4      	cmp	ip, r4
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x202>
 8002888:	e0f4      	b.n	8002a74 <__aeabi_dsub+0x3ec>
 800288a:	4694      	mov	ip, r2
 800288c:	e731      	b.n	80026f2 <__aeabi_dsub+0x6a>
 800288e:	2401      	movs	r4, #1
 8002890:	4067      	eors	r7, r4
 8002892:	46bb      	mov	fp, r7
 8002894:	42bd      	cmp	r5, r7
 8002896:	d000      	beq.n	800289a <__aeabi_dsub+0x212>
 8002898:	e71c      	b.n	80026d4 <__aeabi_dsub+0x4c>
 800289a:	4c4a      	ldr	r4, [pc, #296]	; (80029c4 <__aeabi_dsub+0x33c>)
 800289c:	46a4      	mov	ip, r4
 800289e:	44b4      	add	ip, r6
 80028a0:	4664      	mov	r4, ip
 80028a2:	2c00      	cmp	r4, #0
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x220>
 80028a6:	e0cf      	b.n	8002a48 <__aeabi_dsub+0x3c0>
 80028a8:	1b94      	subs	r4, r2, r6
 80028aa:	46a4      	mov	ip, r4
 80028ac:	2e00      	cmp	r6, #0
 80028ae:	d100      	bne.n	80028b2 <__aeabi_dsub+0x22a>
 80028b0:	e15c      	b.n	8002b6c <__aeabi_dsub+0x4e4>
 80028b2:	4e42      	ldr	r6, [pc, #264]	; (80029bc <__aeabi_dsub+0x334>)
 80028b4:	42b2      	cmp	r2, r6
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x232>
 80028b8:	e1ec      	b.n	8002c94 <__aeabi_dsub+0x60c>
 80028ba:	2680      	movs	r6, #128	; 0x80
 80028bc:	0436      	lsls	r6, r6, #16
 80028be:	4333      	orrs	r3, r6
 80028c0:	4664      	mov	r4, ip
 80028c2:	2c38      	cmp	r4, #56	; 0x38
 80028c4:	dd00      	ble.n	80028c8 <__aeabi_dsub+0x240>
 80028c6:	e1b3      	b.n	8002c30 <__aeabi_dsub+0x5a8>
 80028c8:	2c1f      	cmp	r4, #31
 80028ca:	dd00      	ble.n	80028ce <__aeabi_dsub+0x246>
 80028cc:	e238      	b.n	8002d40 <__aeabi_dsub+0x6b8>
 80028ce:	2620      	movs	r6, #32
 80028d0:	1b36      	subs	r6, r6, r4
 80028d2:	001c      	movs	r4, r3
 80028d4:	40b4      	lsls	r4, r6
 80028d6:	464f      	mov	r7, r9
 80028d8:	46a0      	mov	r8, r4
 80028da:	4664      	mov	r4, ip
 80028dc:	40e7      	lsrs	r7, r4
 80028de:	4644      	mov	r4, r8
 80028e0:	433c      	orrs	r4, r7
 80028e2:	464f      	mov	r7, r9
 80028e4:	40b7      	lsls	r7, r6
 80028e6:	003e      	movs	r6, r7
 80028e8:	1e77      	subs	r7, r6, #1
 80028ea:	41be      	sbcs	r6, r7
 80028ec:	4334      	orrs	r4, r6
 80028ee:	4666      	mov	r6, ip
 80028f0:	40f3      	lsrs	r3, r6
 80028f2:	18c9      	adds	r1, r1, r3
 80028f4:	1824      	adds	r4, r4, r0
 80028f6:	4284      	cmp	r4, r0
 80028f8:	419b      	sbcs	r3, r3
 80028fa:	425b      	negs	r3, r3
 80028fc:	4698      	mov	r8, r3
 80028fe:	0016      	movs	r6, r2
 8002900:	4488      	add	r8, r1
 8002902:	e04e      	b.n	80029a2 <__aeabi_dsub+0x31a>
 8002904:	4a30      	ldr	r2, [pc, #192]	; (80029c8 <__aeabi_dsub+0x340>)
 8002906:	1c74      	adds	r4, r6, #1
 8002908:	4214      	tst	r4, r2
 800290a:	d000      	beq.n	800290e <__aeabi_dsub+0x286>
 800290c:	e0d6      	b.n	8002abc <__aeabi_dsub+0x434>
 800290e:	464a      	mov	r2, r9
 8002910:	431a      	orrs	r2, r3
 8002912:	2e00      	cmp	r6, #0
 8002914:	d000      	beq.n	8002918 <__aeabi_dsub+0x290>
 8002916:	e15b      	b.n	8002bd0 <__aeabi_dsub+0x548>
 8002918:	2a00      	cmp	r2, #0
 800291a:	d100      	bne.n	800291e <__aeabi_dsub+0x296>
 800291c:	e1a5      	b.n	8002c6a <__aeabi_dsub+0x5e2>
 800291e:	000a      	movs	r2, r1
 8002920:	4302      	orrs	r2, r0
 8002922:	d000      	beq.n	8002926 <__aeabi_dsub+0x29e>
 8002924:	e1bb      	b.n	8002c9e <__aeabi_dsub+0x616>
 8002926:	464a      	mov	r2, r9
 8002928:	0759      	lsls	r1, r3, #29
 800292a:	08d2      	lsrs	r2, r2, #3
 800292c:	430a      	orrs	r2, r1
 800292e:	08db      	lsrs	r3, r3, #3
 8002930:	e027      	b.n	8002982 <__aeabi_dsub+0x2fa>
 8002932:	000a      	movs	r2, r1
 8002934:	4302      	orrs	r2, r0
 8002936:	d100      	bne.n	800293a <__aeabi_dsub+0x2b2>
 8002938:	e174      	b.n	8002c24 <__aeabi_dsub+0x59c>
 800293a:	0022      	movs	r2, r4
 800293c:	3a01      	subs	r2, #1
 800293e:	2c01      	cmp	r4, #1
 8002940:	d005      	beq.n	800294e <__aeabi_dsub+0x2c6>
 8002942:	4c1e      	ldr	r4, [pc, #120]	; (80029bc <__aeabi_dsub+0x334>)
 8002944:	45a4      	cmp	ip, r4
 8002946:	d100      	bne.n	800294a <__aeabi_dsub+0x2c2>
 8002948:	e094      	b.n	8002a74 <__aeabi_dsub+0x3ec>
 800294a:	4694      	mov	ip, r2
 800294c:	e759      	b.n	8002802 <__aeabi_dsub+0x17a>
 800294e:	4448      	add	r0, r9
 8002950:	4548      	cmp	r0, r9
 8002952:	4192      	sbcs	r2, r2
 8002954:	185b      	adds	r3, r3, r1
 8002956:	4698      	mov	r8, r3
 8002958:	0004      	movs	r4, r0
 800295a:	4252      	negs	r2, r2
 800295c:	4490      	add	r8, r2
 800295e:	4643      	mov	r3, r8
 8002960:	2602      	movs	r6, #2
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	d500      	bpl.n	8002968 <__aeabi_dsub+0x2e0>
 8002966:	e0c4      	b.n	8002af2 <__aeabi_dsub+0x46a>
 8002968:	3e01      	subs	r6, #1
 800296a:	0763      	lsls	r3, r4, #29
 800296c:	d000      	beq.n	8002970 <__aeabi_dsub+0x2e8>
 800296e:	e711      	b.n	8002794 <__aeabi_dsub+0x10c>
 8002970:	4643      	mov	r3, r8
 8002972:	46b4      	mov	ip, r6
 8002974:	0759      	lsls	r1, r3, #29
 8002976:	08e2      	lsrs	r2, r4, #3
 8002978:	430a      	orrs	r2, r1
 800297a:	08db      	lsrs	r3, r3, #3
 800297c:	490f      	ldr	r1, [pc, #60]	; (80029bc <__aeabi_dsub+0x334>)
 800297e:	458c      	cmp	ip, r1
 8002980:	d040      	beq.n	8002a04 <__aeabi_dsub+0x37c>
 8002982:	4661      	mov	r1, ip
 8002984:	031b      	lsls	r3, r3, #12
 8002986:	0549      	lsls	r1, r1, #21
 8002988:	0b1b      	lsrs	r3, r3, #12
 800298a:	0d49      	lsrs	r1, r1, #21
 800298c:	e720      	b.n	80027d0 <__aeabi_dsub+0x148>
 800298e:	4301      	orrs	r1, r0
 8002990:	000c      	movs	r4, r1
 8002992:	1e61      	subs	r1, r4, #1
 8002994:	418c      	sbcs	r4, r1
 8002996:	444c      	add	r4, r9
 8002998:	454c      	cmp	r4, r9
 800299a:	4192      	sbcs	r2, r2
 800299c:	4252      	negs	r2, r2
 800299e:	4690      	mov	r8, r2
 80029a0:	4498      	add	r8, r3
 80029a2:	4643      	mov	r3, r8
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	d5e0      	bpl.n	800296a <__aeabi_dsub+0x2e2>
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <__aeabi_dsub+0x334>)
 80029aa:	3601      	adds	r6, #1
 80029ac:	429e      	cmp	r6, r3
 80029ae:	d000      	beq.n	80029b2 <__aeabi_dsub+0x32a>
 80029b0:	e09f      	b.n	8002af2 <__aeabi_dsub+0x46a>
 80029b2:	0031      	movs	r1, r6
 80029b4:	2300      	movs	r3, #0
 80029b6:	2200      	movs	r2, #0
 80029b8:	e70a      	b.n	80027d0 <__aeabi_dsub+0x148>
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	000007ff 	.word	0x000007ff
 80029c0:	ff7fffff 	.word	0xff7fffff
 80029c4:	fffff801 	.word	0xfffff801
 80029c8:	000007fe 	.word	0x000007fe
 80029cc:	2a00      	cmp	r2, #0
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x34a>
 80029d0:	e160      	b.n	8002c94 <__aeabi_dsub+0x60c>
 80029d2:	000a      	movs	r2, r1
 80029d4:	4302      	orrs	r2, r0
 80029d6:	d04d      	beq.n	8002a74 <__aeabi_dsub+0x3ec>
 80029d8:	464a      	mov	r2, r9
 80029da:	075c      	lsls	r4, r3, #29
 80029dc:	08d2      	lsrs	r2, r2, #3
 80029de:	4322      	orrs	r2, r4
 80029e0:	2480      	movs	r4, #128	; 0x80
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	0324      	lsls	r4, r4, #12
 80029e6:	4223      	tst	r3, r4
 80029e8:	d007      	beq.n	80029fa <__aeabi_dsub+0x372>
 80029ea:	08ce      	lsrs	r6, r1, #3
 80029ec:	4226      	tst	r6, r4
 80029ee:	d104      	bne.n	80029fa <__aeabi_dsub+0x372>
 80029f0:	465d      	mov	r5, fp
 80029f2:	0033      	movs	r3, r6
 80029f4:	08c2      	lsrs	r2, r0, #3
 80029f6:	0749      	lsls	r1, r1, #29
 80029f8:	430a      	orrs	r2, r1
 80029fa:	0f51      	lsrs	r1, r2, #29
 80029fc:	00d2      	lsls	r2, r2, #3
 80029fe:	08d2      	lsrs	r2, r2, #3
 8002a00:	0749      	lsls	r1, r1, #29
 8002a02:	430a      	orrs	r2, r1
 8002a04:	0011      	movs	r1, r2
 8002a06:	4319      	orrs	r1, r3
 8002a08:	d100      	bne.n	8002a0c <__aeabi_dsub+0x384>
 8002a0a:	e1c8      	b.n	8002d9e <__aeabi_dsub+0x716>
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0309      	lsls	r1, r1, #12
 8002a10:	430b      	orrs	r3, r1
 8002a12:	031b      	lsls	r3, r3, #12
 8002a14:	49d5      	ldr	r1, [pc, #852]	; (8002d6c <__aeabi_dsub+0x6e4>)
 8002a16:	0b1b      	lsrs	r3, r3, #12
 8002a18:	e6da      	b.n	80027d0 <__aeabi_dsub+0x148>
 8002a1a:	49d5      	ldr	r1, [pc, #852]	; (8002d70 <__aeabi_dsub+0x6e8>)
 8002a1c:	1ab6      	subs	r6, r6, r2
 8002a1e:	400b      	ands	r3, r1
 8002a20:	4698      	mov	r8, r3
 8002a22:	e6b5      	b.n	8002790 <__aeabi_dsub+0x108>
 8002a24:	0020      	movs	r0, r4
 8002a26:	f000 fb1d 	bl	8003064 <__clzsi2>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	3218      	adds	r2, #24
 8002a2e:	2a1f      	cmp	r2, #31
 8002a30:	dc00      	bgt.n	8002a34 <__aeabi_dsub+0x3ac>
 8002a32:	e68f      	b.n	8002754 <__aeabi_dsub+0xcc>
 8002a34:	0023      	movs	r3, r4
 8002a36:	3808      	subs	r0, #8
 8002a38:	4083      	lsls	r3, r0
 8002a3a:	2400      	movs	r4, #0
 8002a3c:	e692      	b.n	8002764 <__aeabi_dsub+0xdc>
 8002a3e:	4308      	orrs	r0, r1
 8002a40:	0002      	movs	r2, r0
 8002a42:	1e50      	subs	r0, r2, #1
 8002a44:	4182      	sbcs	r2, r0
 8002a46:	e66d      	b.n	8002724 <__aeabi_dsub+0x9c>
 8002a48:	4cca      	ldr	r4, [pc, #808]	; (8002d74 <__aeabi_dsub+0x6ec>)
 8002a4a:	1c72      	adds	r2, r6, #1
 8002a4c:	4222      	tst	r2, r4
 8002a4e:	d000      	beq.n	8002a52 <__aeabi_dsub+0x3ca>
 8002a50:	e0ad      	b.n	8002bae <__aeabi_dsub+0x526>
 8002a52:	464a      	mov	r2, r9
 8002a54:	431a      	orrs	r2, r3
 8002a56:	2e00      	cmp	r6, #0
 8002a58:	d1b8      	bne.n	80029cc <__aeabi_dsub+0x344>
 8002a5a:	2a00      	cmp	r2, #0
 8002a5c:	d100      	bne.n	8002a60 <__aeabi_dsub+0x3d8>
 8002a5e:	e158      	b.n	8002d12 <__aeabi_dsub+0x68a>
 8002a60:	000a      	movs	r2, r1
 8002a62:	4302      	orrs	r2, r0
 8002a64:	d000      	beq.n	8002a68 <__aeabi_dsub+0x3e0>
 8002a66:	e159      	b.n	8002d1c <__aeabi_dsub+0x694>
 8002a68:	464a      	mov	r2, r9
 8002a6a:	0759      	lsls	r1, r3, #29
 8002a6c:	08d2      	lsrs	r2, r2, #3
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	08db      	lsrs	r3, r3, #3
 8002a72:	e786      	b.n	8002982 <__aeabi_dsub+0x2fa>
 8002a74:	464a      	mov	r2, r9
 8002a76:	0759      	lsls	r1, r3, #29
 8002a78:	08d2      	lsrs	r2, r2, #3
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	08db      	lsrs	r3, r3, #3
 8002a7e:	e7c1      	b.n	8002a04 <__aeabi_dsub+0x37c>
 8002a80:	4dba      	ldr	r5, [pc, #744]	; (8002d6c <__aeabi_dsub+0x6e4>)
 8002a82:	42aa      	cmp	r2, r5
 8002a84:	d100      	bne.n	8002a88 <__aeabi_dsub+0x400>
 8002a86:	e11e      	b.n	8002cc6 <__aeabi_dsub+0x63e>
 8002a88:	2580      	movs	r5, #128	; 0x80
 8002a8a:	042d      	lsls	r5, r5, #16
 8002a8c:	432b      	orrs	r3, r5
 8002a8e:	4664      	mov	r4, ip
 8002a90:	2c38      	cmp	r4, #56	; 0x38
 8002a92:	dc5d      	bgt.n	8002b50 <__aeabi_dsub+0x4c8>
 8002a94:	2c1f      	cmp	r4, #31
 8002a96:	dd00      	ble.n	8002a9a <__aeabi_dsub+0x412>
 8002a98:	e0d0      	b.n	8002c3c <__aeabi_dsub+0x5b4>
 8002a9a:	2520      	movs	r5, #32
 8002a9c:	4667      	mov	r7, ip
 8002a9e:	1b2d      	subs	r5, r5, r4
 8002aa0:	464e      	mov	r6, r9
 8002aa2:	001c      	movs	r4, r3
 8002aa4:	40fe      	lsrs	r6, r7
 8002aa6:	40ac      	lsls	r4, r5
 8002aa8:	4334      	orrs	r4, r6
 8002aaa:	464e      	mov	r6, r9
 8002aac:	40ae      	lsls	r6, r5
 8002aae:	0035      	movs	r5, r6
 8002ab0:	40fb      	lsrs	r3, r7
 8002ab2:	1e6e      	subs	r6, r5, #1
 8002ab4:	41b5      	sbcs	r5, r6
 8002ab6:	1ac9      	subs	r1, r1, r3
 8002ab8:	432c      	orrs	r4, r5
 8002aba:	e04e      	b.n	8002b5a <__aeabi_dsub+0x4d2>
 8002abc:	464a      	mov	r2, r9
 8002abe:	1a14      	subs	r4, r2, r0
 8002ac0:	45a1      	cmp	r9, r4
 8002ac2:	4192      	sbcs	r2, r2
 8002ac4:	4252      	negs	r2, r2
 8002ac6:	4690      	mov	r8, r2
 8002ac8:	1a5f      	subs	r7, r3, r1
 8002aca:	003a      	movs	r2, r7
 8002acc:	4647      	mov	r7, r8
 8002ace:	1bd2      	subs	r2, r2, r7
 8002ad0:	4690      	mov	r8, r2
 8002ad2:	0212      	lsls	r2, r2, #8
 8002ad4:	d500      	bpl.n	8002ad8 <__aeabi_dsub+0x450>
 8002ad6:	e08b      	b.n	8002bf0 <__aeabi_dsub+0x568>
 8002ad8:	4642      	mov	r2, r8
 8002ada:	4322      	orrs	r2, r4
 8002adc:	d000      	beq.n	8002ae0 <__aeabi_dsub+0x458>
 8002ade:	e630      	b.n	8002742 <__aeabi_dsub+0xba>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2500      	movs	r5, #0
 8002ae4:	e74d      	b.n	8002982 <__aeabi_dsub+0x2fa>
 8002ae6:	464a      	mov	r2, r9
 8002ae8:	0759      	lsls	r1, r3, #29
 8002aea:	08d2      	lsrs	r2, r2, #3
 8002aec:	430a      	orrs	r2, r1
 8002aee:	08db      	lsrs	r3, r3, #3
 8002af0:	e744      	b.n	800297c <__aeabi_dsub+0x2f4>
 8002af2:	4642      	mov	r2, r8
 8002af4:	4b9e      	ldr	r3, [pc, #632]	; (8002d70 <__aeabi_dsub+0x6e8>)
 8002af6:	0861      	lsrs	r1, r4, #1
 8002af8:	401a      	ands	r2, r3
 8002afa:	0013      	movs	r3, r2
 8002afc:	2201      	movs	r2, #1
 8002afe:	4014      	ands	r4, r2
 8002b00:	430c      	orrs	r4, r1
 8002b02:	07da      	lsls	r2, r3, #31
 8002b04:	085b      	lsrs	r3, r3, #1
 8002b06:	4698      	mov	r8, r3
 8002b08:	4314      	orrs	r4, r2
 8002b0a:	e641      	b.n	8002790 <__aeabi_dsub+0x108>
 8002b0c:	001a      	movs	r2, r3
 8002b0e:	3e1f      	subs	r6, #31
 8002b10:	40f2      	lsrs	r2, r6
 8002b12:	0016      	movs	r6, r2
 8002b14:	2920      	cmp	r1, #32
 8002b16:	d003      	beq.n	8002b20 <__aeabi_dsub+0x498>
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	1a51      	subs	r1, r2, r1
 8002b1c:	408b      	lsls	r3, r1
 8002b1e:	431c      	orrs	r4, r3
 8002b20:	1e62      	subs	r2, r4, #1
 8002b22:	4194      	sbcs	r4, r2
 8002b24:	2300      	movs	r3, #0
 8002b26:	4334      	orrs	r4, r6
 8002b28:	4698      	mov	r8, r3
 8002b2a:	2600      	movs	r6, #0
 8002b2c:	e71d      	b.n	800296a <__aeabi_dsub+0x2e2>
 8002b2e:	000c      	movs	r4, r1
 8002b30:	3a20      	subs	r2, #32
 8002b32:	40d4      	lsrs	r4, r2
 8002b34:	0022      	movs	r2, r4
 8002b36:	4664      	mov	r4, ip
 8002b38:	2c20      	cmp	r4, #32
 8002b3a:	d004      	beq.n	8002b46 <__aeabi_dsub+0x4be>
 8002b3c:	2740      	movs	r7, #64	; 0x40
 8002b3e:	1b3f      	subs	r7, r7, r4
 8002b40:	40b9      	lsls	r1, r7
 8002b42:	4308      	orrs	r0, r1
 8002b44:	4680      	mov	r8, r0
 8002b46:	4644      	mov	r4, r8
 8002b48:	1e61      	subs	r1, r4, #1
 8002b4a:	418c      	sbcs	r4, r1
 8002b4c:	4322      	orrs	r2, r4
 8002b4e:	e5e9      	b.n	8002724 <__aeabi_dsub+0x9c>
 8002b50:	464c      	mov	r4, r9
 8002b52:	4323      	orrs	r3, r4
 8002b54:	001c      	movs	r4, r3
 8002b56:	1e63      	subs	r3, r4, #1
 8002b58:	419c      	sbcs	r4, r3
 8002b5a:	1b04      	subs	r4, r0, r4
 8002b5c:	42a0      	cmp	r0, r4
 8002b5e:	419b      	sbcs	r3, r3
 8002b60:	425b      	negs	r3, r3
 8002b62:	1acb      	subs	r3, r1, r3
 8002b64:	4698      	mov	r8, r3
 8002b66:	465d      	mov	r5, fp
 8002b68:	0016      	movs	r6, r2
 8002b6a:	e5e2      	b.n	8002732 <__aeabi_dsub+0xaa>
 8002b6c:	464e      	mov	r6, r9
 8002b6e:	431e      	orrs	r6, r3
 8002b70:	d100      	bne.n	8002b74 <__aeabi_dsub+0x4ec>
 8002b72:	e0ae      	b.n	8002cd2 <__aeabi_dsub+0x64a>
 8002b74:	1e66      	subs	r6, r4, #1
 8002b76:	2c01      	cmp	r4, #1
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x4f4>
 8002b7a:	e0fd      	b.n	8002d78 <__aeabi_dsub+0x6f0>
 8002b7c:	4f7b      	ldr	r7, [pc, #492]	; (8002d6c <__aeabi_dsub+0x6e4>)
 8002b7e:	42bc      	cmp	r4, r7
 8002b80:	d100      	bne.n	8002b84 <__aeabi_dsub+0x4fc>
 8002b82:	e107      	b.n	8002d94 <__aeabi_dsub+0x70c>
 8002b84:	46b4      	mov	ip, r6
 8002b86:	e69b      	b.n	80028c0 <__aeabi_dsub+0x238>
 8002b88:	4664      	mov	r4, ip
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	1b12      	subs	r2, r2, r4
 8002b8e:	000c      	movs	r4, r1
 8002b90:	4094      	lsls	r4, r2
 8002b92:	0007      	movs	r7, r0
 8002b94:	4090      	lsls	r0, r2
 8002b96:	46a0      	mov	r8, r4
 8002b98:	4664      	mov	r4, ip
 8002b9a:	1e42      	subs	r2, r0, #1
 8002b9c:	4190      	sbcs	r0, r2
 8002b9e:	4662      	mov	r2, ip
 8002ba0:	40e7      	lsrs	r7, r4
 8002ba2:	4644      	mov	r4, r8
 8002ba4:	40d1      	lsrs	r1, r2
 8002ba6:	433c      	orrs	r4, r7
 8002ba8:	4304      	orrs	r4, r0
 8002baa:	185b      	adds	r3, r3, r1
 8002bac:	e6f3      	b.n	8002996 <__aeabi_dsub+0x30e>
 8002bae:	4c6f      	ldr	r4, [pc, #444]	; (8002d6c <__aeabi_dsub+0x6e4>)
 8002bb0:	42a2      	cmp	r2, r4
 8002bb2:	d100      	bne.n	8002bb6 <__aeabi_dsub+0x52e>
 8002bb4:	e0d5      	b.n	8002d62 <__aeabi_dsub+0x6da>
 8002bb6:	4448      	add	r0, r9
 8002bb8:	185b      	adds	r3, r3, r1
 8002bba:	4548      	cmp	r0, r9
 8002bbc:	4189      	sbcs	r1, r1
 8002bbe:	4249      	negs	r1, r1
 8002bc0:	185b      	adds	r3, r3, r1
 8002bc2:	07dc      	lsls	r4, r3, #31
 8002bc4:	0840      	lsrs	r0, r0, #1
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	4698      	mov	r8, r3
 8002bca:	0016      	movs	r6, r2
 8002bcc:	4304      	orrs	r4, r0
 8002bce:	e6cc      	b.n	800296a <__aeabi_dsub+0x2e2>
 8002bd0:	2a00      	cmp	r2, #0
 8002bd2:	d000      	beq.n	8002bd6 <__aeabi_dsub+0x54e>
 8002bd4:	e082      	b.n	8002cdc <__aeabi_dsub+0x654>
 8002bd6:	000a      	movs	r2, r1
 8002bd8:	4302      	orrs	r2, r0
 8002bda:	d140      	bne.n	8002c5e <__aeabi_dsub+0x5d6>
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	2500      	movs	r5, #0
 8002be0:	031b      	lsls	r3, r3, #12
 8002be2:	e713      	b.n	8002a0c <__aeabi_dsub+0x384>
 8002be4:	074b      	lsls	r3, r1, #29
 8002be6:	08c2      	lsrs	r2, r0, #3
 8002be8:	431a      	orrs	r2, r3
 8002bea:	465d      	mov	r5, fp
 8002bec:	08cb      	lsrs	r3, r1, #3
 8002bee:	e6c5      	b.n	800297c <__aeabi_dsub+0x2f4>
 8002bf0:	464a      	mov	r2, r9
 8002bf2:	1a84      	subs	r4, r0, r2
 8002bf4:	42a0      	cmp	r0, r4
 8002bf6:	4192      	sbcs	r2, r2
 8002bf8:	1acb      	subs	r3, r1, r3
 8002bfa:	4252      	negs	r2, r2
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	4698      	mov	r8, r3
 8002c00:	465d      	mov	r5, fp
 8002c02:	e59e      	b.n	8002742 <__aeabi_dsub+0xba>
 8002c04:	464a      	mov	r2, r9
 8002c06:	0759      	lsls	r1, r3, #29
 8002c08:	08d2      	lsrs	r2, r2, #3
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	e6f9      	b.n	8002a04 <__aeabi_dsub+0x37c>
 8002c10:	464a      	mov	r2, r9
 8002c12:	1a14      	subs	r4, r2, r0
 8002c14:	45a1      	cmp	r9, r4
 8002c16:	4192      	sbcs	r2, r2
 8002c18:	1a5b      	subs	r3, r3, r1
 8002c1a:	4252      	negs	r2, r2
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	4698      	mov	r8, r3
 8002c20:	2601      	movs	r6, #1
 8002c22:	e586      	b.n	8002732 <__aeabi_dsub+0xaa>
 8002c24:	464a      	mov	r2, r9
 8002c26:	0759      	lsls	r1, r3, #29
 8002c28:	08d2      	lsrs	r2, r2, #3
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	08db      	lsrs	r3, r3, #3
 8002c2e:	e6a5      	b.n	800297c <__aeabi_dsub+0x2f4>
 8002c30:	464c      	mov	r4, r9
 8002c32:	4323      	orrs	r3, r4
 8002c34:	001c      	movs	r4, r3
 8002c36:	1e63      	subs	r3, r4, #1
 8002c38:	419c      	sbcs	r4, r3
 8002c3a:	e65b      	b.n	80028f4 <__aeabi_dsub+0x26c>
 8002c3c:	4665      	mov	r5, ip
 8002c3e:	001e      	movs	r6, r3
 8002c40:	3d20      	subs	r5, #32
 8002c42:	40ee      	lsrs	r6, r5
 8002c44:	2c20      	cmp	r4, #32
 8002c46:	d005      	beq.n	8002c54 <__aeabi_dsub+0x5cc>
 8002c48:	2540      	movs	r5, #64	; 0x40
 8002c4a:	1b2d      	subs	r5, r5, r4
 8002c4c:	40ab      	lsls	r3, r5
 8002c4e:	464c      	mov	r4, r9
 8002c50:	431c      	orrs	r4, r3
 8002c52:	46a2      	mov	sl, r4
 8002c54:	4654      	mov	r4, sl
 8002c56:	1e63      	subs	r3, r4, #1
 8002c58:	419c      	sbcs	r4, r3
 8002c5a:	4334      	orrs	r4, r6
 8002c5c:	e77d      	b.n	8002b5a <__aeabi_dsub+0x4d2>
 8002c5e:	074b      	lsls	r3, r1, #29
 8002c60:	08c2      	lsrs	r2, r0, #3
 8002c62:	431a      	orrs	r2, r3
 8002c64:	465d      	mov	r5, fp
 8002c66:	08cb      	lsrs	r3, r1, #3
 8002c68:	e6cc      	b.n	8002a04 <__aeabi_dsub+0x37c>
 8002c6a:	000a      	movs	r2, r1
 8002c6c:	4302      	orrs	r2, r0
 8002c6e:	d100      	bne.n	8002c72 <__aeabi_dsub+0x5ea>
 8002c70:	e736      	b.n	8002ae0 <__aeabi_dsub+0x458>
 8002c72:	074b      	lsls	r3, r1, #29
 8002c74:	08c2      	lsrs	r2, r0, #3
 8002c76:	431a      	orrs	r2, r3
 8002c78:	465d      	mov	r5, fp
 8002c7a:	08cb      	lsrs	r3, r1, #3
 8002c7c:	e681      	b.n	8002982 <__aeabi_dsub+0x2fa>
 8002c7e:	464a      	mov	r2, r9
 8002c80:	1a84      	subs	r4, r0, r2
 8002c82:	42a0      	cmp	r0, r4
 8002c84:	4192      	sbcs	r2, r2
 8002c86:	1acb      	subs	r3, r1, r3
 8002c88:	4252      	negs	r2, r2
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	4698      	mov	r8, r3
 8002c8e:	465d      	mov	r5, fp
 8002c90:	2601      	movs	r6, #1
 8002c92:	e54e      	b.n	8002732 <__aeabi_dsub+0xaa>
 8002c94:	074b      	lsls	r3, r1, #29
 8002c96:	08c2      	lsrs	r2, r0, #3
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	08cb      	lsrs	r3, r1, #3
 8002c9c:	e6b2      	b.n	8002a04 <__aeabi_dsub+0x37c>
 8002c9e:	464a      	mov	r2, r9
 8002ca0:	1a14      	subs	r4, r2, r0
 8002ca2:	45a1      	cmp	r9, r4
 8002ca4:	4192      	sbcs	r2, r2
 8002ca6:	1a5f      	subs	r7, r3, r1
 8002ca8:	4252      	negs	r2, r2
 8002caa:	1aba      	subs	r2, r7, r2
 8002cac:	4690      	mov	r8, r2
 8002cae:	0212      	lsls	r2, r2, #8
 8002cb0:	d56b      	bpl.n	8002d8a <__aeabi_dsub+0x702>
 8002cb2:	464a      	mov	r2, r9
 8002cb4:	1a84      	subs	r4, r0, r2
 8002cb6:	42a0      	cmp	r0, r4
 8002cb8:	4192      	sbcs	r2, r2
 8002cba:	1acb      	subs	r3, r1, r3
 8002cbc:	4252      	negs	r2, r2
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	4698      	mov	r8, r3
 8002cc2:	465d      	mov	r5, fp
 8002cc4:	e564      	b.n	8002790 <__aeabi_dsub+0x108>
 8002cc6:	074b      	lsls	r3, r1, #29
 8002cc8:	08c2      	lsrs	r2, r0, #3
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	465d      	mov	r5, fp
 8002cce:	08cb      	lsrs	r3, r1, #3
 8002cd0:	e698      	b.n	8002a04 <__aeabi_dsub+0x37c>
 8002cd2:	074b      	lsls	r3, r1, #29
 8002cd4:	08c2      	lsrs	r2, r0, #3
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	08cb      	lsrs	r3, r1, #3
 8002cda:	e64f      	b.n	800297c <__aeabi_dsub+0x2f4>
 8002cdc:	000a      	movs	r2, r1
 8002cde:	4302      	orrs	r2, r0
 8002ce0:	d090      	beq.n	8002c04 <__aeabi_dsub+0x57c>
 8002ce2:	464a      	mov	r2, r9
 8002ce4:	075c      	lsls	r4, r3, #29
 8002ce6:	08d2      	lsrs	r2, r2, #3
 8002ce8:	4314      	orrs	r4, r2
 8002cea:	2280      	movs	r2, #128	; 0x80
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	0312      	lsls	r2, r2, #12
 8002cf0:	4213      	tst	r3, r2
 8002cf2:	d008      	beq.n	8002d06 <__aeabi_dsub+0x67e>
 8002cf4:	08ce      	lsrs	r6, r1, #3
 8002cf6:	4216      	tst	r6, r2
 8002cf8:	d105      	bne.n	8002d06 <__aeabi_dsub+0x67e>
 8002cfa:	08c0      	lsrs	r0, r0, #3
 8002cfc:	0749      	lsls	r1, r1, #29
 8002cfe:	4308      	orrs	r0, r1
 8002d00:	0004      	movs	r4, r0
 8002d02:	465d      	mov	r5, fp
 8002d04:	0033      	movs	r3, r6
 8002d06:	0f61      	lsrs	r1, r4, #29
 8002d08:	00e2      	lsls	r2, r4, #3
 8002d0a:	0749      	lsls	r1, r1, #29
 8002d0c:	08d2      	lsrs	r2, r2, #3
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	e678      	b.n	8002a04 <__aeabi_dsub+0x37c>
 8002d12:	074b      	lsls	r3, r1, #29
 8002d14:	08c2      	lsrs	r2, r0, #3
 8002d16:	431a      	orrs	r2, r3
 8002d18:	08cb      	lsrs	r3, r1, #3
 8002d1a:	e632      	b.n	8002982 <__aeabi_dsub+0x2fa>
 8002d1c:	4448      	add	r0, r9
 8002d1e:	185b      	adds	r3, r3, r1
 8002d20:	4548      	cmp	r0, r9
 8002d22:	4192      	sbcs	r2, r2
 8002d24:	4698      	mov	r8, r3
 8002d26:	4252      	negs	r2, r2
 8002d28:	4490      	add	r8, r2
 8002d2a:	4643      	mov	r3, r8
 8002d2c:	0004      	movs	r4, r0
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	d400      	bmi.n	8002d34 <__aeabi_dsub+0x6ac>
 8002d32:	e61a      	b.n	800296a <__aeabi_dsub+0x2e2>
 8002d34:	4642      	mov	r2, r8
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <__aeabi_dsub+0x6e8>)
 8002d38:	2601      	movs	r6, #1
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	4690      	mov	r8, r2
 8002d3e:	e614      	b.n	800296a <__aeabi_dsub+0x2e2>
 8002d40:	4666      	mov	r6, ip
 8002d42:	001f      	movs	r7, r3
 8002d44:	3e20      	subs	r6, #32
 8002d46:	40f7      	lsrs	r7, r6
 8002d48:	2c20      	cmp	r4, #32
 8002d4a:	d005      	beq.n	8002d58 <__aeabi_dsub+0x6d0>
 8002d4c:	2640      	movs	r6, #64	; 0x40
 8002d4e:	1b36      	subs	r6, r6, r4
 8002d50:	40b3      	lsls	r3, r6
 8002d52:	464c      	mov	r4, r9
 8002d54:	431c      	orrs	r4, r3
 8002d56:	46a2      	mov	sl, r4
 8002d58:	4654      	mov	r4, sl
 8002d5a:	1e63      	subs	r3, r4, #1
 8002d5c:	419c      	sbcs	r4, r3
 8002d5e:	433c      	orrs	r4, r7
 8002d60:	e5c8      	b.n	80028f4 <__aeabi_dsub+0x26c>
 8002d62:	0011      	movs	r1, r2
 8002d64:	2300      	movs	r3, #0
 8002d66:	2200      	movs	r2, #0
 8002d68:	e532      	b.n	80027d0 <__aeabi_dsub+0x148>
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	000007ff 	.word	0x000007ff
 8002d70:	ff7fffff 	.word	0xff7fffff
 8002d74:	000007fe 	.word	0x000007fe
 8002d78:	464a      	mov	r2, r9
 8002d7a:	1814      	adds	r4, r2, r0
 8002d7c:	4284      	cmp	r4, r0
 8002d7e:	4192      	sbcs	r2, r2
 8002d80:	185b      	adds	r3, r3, r1
 8002d82:	4698      	mov	r8, r3
 8002d84:	4252      	negs	r2, r2
 8002d86:	4490      	add	r8, r2
 8002d88:	e5e9      	b.n	800295e <__aeabi_dsub+0x2d6>
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	4322      	orrs	r2, r4
 8002d8e:	d100      	bne.n	8002d92 <__aeabi_dsub+0x70a>
 8002d90:	e6a6      	b.n	8002ae0 <__aeabi_dsub+0x458>
 8002d92:	e5ea      	b.n	800296a <__aeabi_dsub+0x2e2>
 8002d94:	074b      	lsls	r3, r1, #29
 8002d96:	08c2      	lsrs	r2, r0, #3
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	08cb      	lsrs	r3, r1, #3
 8002d9c:	e632      	b.n	8002a04 <__aeabi_dsub+0x37c>
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4901      	ldr	r1, [pc, #4]	; (8002da8 <__aeabi_dsub+0x720>)
 8002da2:	0013      	movs	r3, r2
 8002da4:	e514      	b.n	80027d0 <__aeabi_dsub+0x148>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	000007ff 	.word	0x000007ff

08002dac <__aeabi_d2iz>:
 8002dac:	000a      	movs	r2, r1
 8002dae:	b530      	push	{r4, r5, lr}
 8002db0:	4c13      	ldr	r4, [pc, #76]	; (8002e00 <__aeabi_d2iz+0x54>)
 8002db2:	0053      	lsls	r3, r2, #1
 8002db4:	0309      	lsls	r1, r1, #12
 8002db6:	0005      	movs	r5, r0
 8002db8:	0b09      	lsrs	r1, r1, #12
 8002dba:	2000      	movs	r0, #0
 8002dbc:	0d5b      	lsrs	r3, r3, #21
 8002dbe:	0fd2      	lsrs	r2, r2, #31
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	dd04      	ble.n	8002dce <__aeabi_d2iz+0x22>
 8002dc4:	480f      	ldr	r0, [pc, #60]	; (8002e04 <__aeabi_d2iz+0x58>)
 8002dc6:	4283      	cmp	r3, r0
 8002dc8:	dd02      	ble.n	8002dd0 <__aeabi_d2iz+0x24>
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <__aeabi_d2iz+0x5c>)
 8002dcc:	18d0      	adds	r0, r2, r3
 8002dce:	bd30      	pop	{r4, r5, pc}
 8002dd0:	2080      	movs	r0, #128	; 0x80
 8002dd2:	0340      	lsls	r0, r0, #13
 8002dd4:	4301      	orrs	r1, r0
 8002dd6:	480d      	ldr	r0, [pc, #52]	; (8002e0c <__aeabi_d2iz+0x60>)
 8002dd8:	1ac0      	subs	r0, r0, r3
 8002dda:	281f      	cmp	r0, #31
 8002ddc:	dd08      	ble.n	8002df0 <__aeabi_d2iz+0x44>
 8002dde:	480c      	ldr	r0, [pc, #48]	; (8002e10 <__aeabi_d2iz+0x64>)
 8002de0:	1ac3      	subs	r3, r0, r3
 8002de2:	40d9      	lsrs	r1, r3
 8002de4:	000b      	movs	r3, r1
 8002de6:	4258      	negs	r0, r3
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d1f0      	bne.n	8002dce <__aeabi_d2iz+0x22>
 8002dec:	0018      	movs	r0, r3
 8002dee:	e7ee      	b.n	8002dce <__aeabi_d2iz+0x22>
 8002df0:	4c08      	ldr	r4, [pc, #32]	; (8002e14 <__aeabi_d2iz+0x68>)
 8002df2:	40c5      	lsrs	r5, r0
 8002df4:	46a4      	mov	ip, r4
 8002df6:	4463      	add	r3, ip
 8002df8:	4099      	lsls	r1, r3
 8002dfa:	000b      	movs	r3, r1
 8002dfc:	432b      	orrs	r3, r5
 8002dfe:	e7f2      	b.n	8002de6 <__aeabi_d2iz+0x3a>
 8002e00:	000003fe 	.word	0x000003fe
 8002e04:	0000041d 	.word	0x0000041d
 8002e08:	7fffffff 	.word	0x7fffffff
 8002e0c:	00000433 	.word	0x00000433
 8002e10:	00000413 	.word	0x00000413
 8002e14:	fffffbed 	.word	0xfffffbed

08002e18 <__aeabi_i2d>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d016      	beq.n	8002e4c <__aeabi_i2d+0x34>
 8002e1e:	17c3      	asrs	r3, r0, #31
 8002e20:	18c5      	adds	r5, r0, r3
 8002e22:	405d      	eors	r5, r3
 8002e24:	0fc4      	lsrs	r4, r0, #31
 8002e26:	0028      	movs	r0, r5
 8002e28:	f000 f91c 	bl	8003064 <__clzsi2>
 8002e2c:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <__aeabi_i2d+0x5c>)
 8002e2e:	1a12      	subs	r2, r2, r0
 8002e30:	280a      	cmp	r0, #10
 8002e32:	dc16      	bgt.n	8002e62 <__aeabi_i2d+0x4a>
 8002e34:	0003      	movs	r3, r0
 8002e36:	002e      	movs	r6, r5
 8002e38:	3315      	adds	r3, #21
 8002e3a:	409e      	lsls	r6, r3
 8002e3c:	230b      	movs	r3, #11
 8002e3e:	1a18      	subs	r0, r3, r0
 8002e40:	40c5      	lsrs	r5, r0
 8002e42:	0553      	lsls	r3, r2, #21
 8002e44:	032d      	lsls	r5, r5, #12
 8002e46:	0b2d      	lsrs	r5, r5, #12
 8002e48:	0d5b      	lsrs	r3, r3, #21
 8002e4a:	e003      	b.n	8002e54 <__aeabi_i2d+0x3c>
 8002e4c:	2400      	movs	r4, #0
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2500      	movs	r5, #0
 8002e52:	2600      	movs	r6, #0
 8002e54:	051b      	lsls	r3, r3, #20
 8002e56:	432b      	orrs	r3, r5
 8002e58:	07e4      	lsls	r4, r4, #31
 8002e5a:	4323      	orrs	r3, r4
 8002e5c:	0030      	movs	r0, r6
 8002e5e:	0019      	movs	r1, r3
 8002e60:	bd70      	pop	{r4, r5, r6, pc}
 8002e62:	380b      	subs	r0, #11
 8002e64:	4085      	lsls	r5, r0
 8002e66:	0553      	lsls	r3, r2, #21
 8002e68:	032d      	lsls	r5, r5, #12
 8002e6a:	2600      	movs	r6, #0
 8002e6c:	0b2d      	lsrs	r5, r5, #12
 8002e6e:	0d5b      	lsrs	r3, r3, #21
 8002e70:	e7f0      	b.n	8002e54 <__aeabi_i2d+0x3c>
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	0000041e 	.word	0x0000041e

08002e78 <__aeabi_ui2d>:
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	1e04      	subs	r4, r0, #0
 8002e7c:	d010      	beq.n	8002ea0 <__aeabi_ui2d+0x28>
 8002e7e:	f000 f8f1 	bl	8003064 <__clzsi2>
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <__aeabi_ui2d+0x48>)
 8002e84:	1a1b      	subs	r3, r3, r0
 8002e86:	280a      	cmp	r0, #10
 8002e88:	dc11      	bgt.n	8002eae <__aeabi_ui2d+0x36>
 8002e8a:	220b      	movs	r2, #11
 8002e8c:	0021      	movs	r1, r4
 8002e8e:	1a12      	subs	r2, r2, r0
 8002e90:	40d1      	lsrs	r1, r2
 8002e92:	3015      	adds	r0, #21
 8002e94:	030a      	lsls	r2, r1, #12
 8002e96:	055b      	lsls	r3, r3, #21
 8002e98:	4084      	lsls	r4, r0
 8002e9a:	0b12      	lsrs	r2, r2, #12
 8002e9c:	0d5b      	lsrs	r3, r3, #21
 8002e9e:	e001      	b.n	8002ea4 <__aeabi_ui2d+0x2c>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	051b      	lsls	r3, r3, #20
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	0020      	movs	r0, r4
 8002eaa:	0019      	movs	r1, r3
 8002eac:	bd10      	pop	{r4, pc}
 8002eae:	0022      	movs	r2, r4
 8002eb0:	380b      	subs	r0, #11
 8002eb2:	4082      	lsls	r2, r0
 8002eb4:	055b      	lsls	r3, r3, #21
 8002eb6:	0312      	lsls	r2, r2, #12
 8002eb8:	2400      	movs	r4, #0
 8002eba:	0b12      	lsrs	r2, r2, #12
 8002ebc:	0d5b      	lsrs	r3, r3, #21
 8002ebe:	e7f1      	b.n	8002ea4 <__aeabi_ui2d+0x2c>
 8002ec0:	0000041e 	.word	0x0000041e

08002ec4 <__aeabi_f2d>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	0043      	lsls	r3, r0, #1
 8002ec8:	0246      	lsls	r6, r0, #9
 8002eca:	0fc4      	lsrs	r4, r0, #31
 8002ecc:	20fe      	movs	r0, #254	; 0xfe
 8002ece:	0e1b      	lsrs	r3, r3, #24
 8002ed0:	1c59      	adds	r1, r3, #1
 8002ed2:	0a75      	lsrs	r5, r6, #9
 8002ed4:	4208      	tst	r0, r1
 8002ed6:	d00c      	beq.n	8002ef2 <__aeabi_f2d+0x2e>
 8002ed8:	22e0      	movs	r2, #224	; 0xe0
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	4694      	mov	ip, r2
 8002ede:	076d      	lsls	r5, r5, #29
 8002ee0:	0b36      	lsrs	r6, r6, #12
 8002ee2:	4463      	add	r3, ip
 8002ee4:	051b      	lsls	r3, r3, #20
 8002ee6:	4333      	orrs	r3, r6
 8002ee8:	07e4      	lsls	r4, r4, #31
 8002eea:	4323      	orrs	r3, r4
 8002eec:	0028      	movs	r0, r5
 8002eee:	0019      	movs	r1, r3
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d114      	bne.n	8002f20 <__aeabi_f2d+0x5c>
 8002ef6:	2d00      	cmp	r5, #0
 8002ef8:	d01b      	beq.n	8002f32 <__aeabi_f2d+0x6e>
 8002efa:	0028      	movs	r0, r5
 8002efc:	f000 f8b2 	bl	8003064 <__clzsi2>
 8002f00:	280a      	cmp	r0, #10
 8002f02:	dc1c      	bgt.n	8002f3e <__aeabi_f2d+0x7a>
 8002f04:	230b      	movs	r3, #11
 8002f06:	002a      	movs	r2, r5
 8002f08:	1a1b      	subs	r3, r3, r0
 8002f0a:	40da      	lsrs	r2, r3
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	3315      	adds	r3, #21
 8002f10:	409d      	lsls	r5, r3
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <__aeabi_f2d+0x88>)
 8002f14:	0312      	lsls	r2, r2, #12
 8002f16:	1a1b      	subs	r3, r3, r0
 8002f18:	055b      	lsls	r3, r3, #21
 8002f1a:	0b16      	lsrs	r6, r2, #12
 8002f1c:	0d5b      	lsrs	r3, r3, #21
 8002f1e:	e7e1      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f20:	2d00      	cmp	r5, #0
 8002f22:	d009      	beq.n	8002f38 <__aeabi_f2d+0x74>
 8002f24:	0b32      	lsrs	r2, r6, #12
 8002f26:	2680      	movs	r6, #128	; 0x80
 8002f28:	0336      	lsls	r6, r6, #12
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <__aeabi_f2d+0x8c>)
 8002f2c:	076d      	lsls	r5, r5, #29
 8002f2e:	4316      	orrs	r6, r2
 8002f30:	e7d8      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2600      	movs	r6, #0
 8002f36:	e7d5      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f38:	2600      	movs	r6, #0
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <__aeabi_f2d+0x8c>)
 8002f3c:	e7d2      	b.n	8002ee4 <__aeabi_f2d+0x20>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	002a      	movs	r2, r5
 8002f42:	3b0b      	subs	r3, #11
 8002f44:	409a      	lsls	r2, r3
 8002f46:	2500      	movs	r5, #0
 8002f48:	e7e3      	b.n	8002f12 <__aeabi_f2d+0x4e>
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	00000389 	.word	0x00000389
 8002f50:	000007ff 	.word	0x000007ff

08002f54 <__aeabi_d2f>:
 8002f54:	0002      	movs	r2, r0
 8002f56:	004b      	lsls	r3, r1, #1
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	0308      	lsls	r0, r1, #12
 8002f5c:	0d5b      	lsrs	r3, r3, #21
 8002f5e:	4e3d      	ldr	r6, [pc, #244]	; (8003054 <__aeabi_d2f+0x100>)
 8002f60:	0fcc      	lsrs	r4, r1, #31
 8002f62:	0a40      	lsrs	r0, r0, #9
 8002f64:	0f51      	lsrs	r1, r2, #29
 8002f66:	1c5f      	adds	r7, r3, #1
 8002f68:	4308      	orrs	r0, r1
 8002f6a:	00d5      	lsls	r5, r2, #3
 8002f6c:	4237      	tst	r7, r6
 8002f6e:	d00a      	beq.n	8002f86 <__aeabi_d2f+0x32>
 8002f70:	4939      	ldr	r1, [pc, #228]	; (8003058 <__aeabi_d2f+0x104>)
 8002f72:	185e      	adds	r6, r3, r1
 8002f74:	2efe      	cmp	r6, #254	; 0xfe
 8002f76:	dd16      	ble.n	8002fa6 <__aeabi_d2f+0x52>
 8002f78:	23ff      	movs	r3, #255	; 0xff
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	05db      	lsls	r3, r3, #23
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	07e0      	lsls	r0, r4, #31
 8002f82:	4318      	orrs	r0, r3
 8002f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <__aeabi_d2f+0x44>
 8002f8a:	4328      	orrs	r0, r5
 8002f8c:	d027      	beq.n	8002fde <__aeabi_d2f+0x8a>
 8002f8e:	2105      	movs	r1, #5
 8002f90:	0189      	lsls	r1, r1, #6
 8002f92:	0a49      	lsrs	r1, r1, #9
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e7f1      	b.n	8002f7c <__aeabi_d2f+0x28>
 8002f98:	4305      	orrs	r5, r0
 8002f9a:	d0ed      	beq.n	8002f78 <__aeabi_d2f+0x24>
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	03c9      	lsls	r1, r1, #15
 8002fa0:	23ff      	movs	r3, #255	; 0xff
 8002fa2:	4301      	orrs	r1, r0
 8002fa4:	e7ea      	b.n	8002f7c <__aeabi_d2f+0x28>
 8002fa6:	2e00      	cmp	r6, #0
 8002fa8:	dd1c      	ble.n	8002fe4 <__aeabi_d2f+0x90>
 8002faa:	0192      	lsls	r2, r2, #6
 8002fac:	0011      	movs	r1, r2
 8002fae:	1e4a      	subs	r2, r1, #1
 8002fb0:	4191      	sbcs	r1, r2
 8002fb2:	00c0      	lsls	r0, r0, #3
 8002fb4:	0f6d      	lsrs	r5, r5, #29
 8002fb6:	4301      	orrs	r1, r0
 8002fb8:	4329      	orrs	r1, r5
 8002fba:	074b      	lsls	r3, r1, #29
 8002fbc:	d048      	beq.n	8003050 <__aeabi_d2f+0xfc>
 8002fbe:	230f      	movs	r3, #15
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d000      	beq.n	8002fc8 <__aeabi_d2f+0x74>
 8002fc6:	3104      	adds	r1, #4
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	04db      	lsls	r3, r3, #19
 8002fcc:	400b      	ands	r3, r1
 8002fce:	d03f      	beq.n	8003050 <__aeabi_d2f+0xfc>
 8002fd0:	1c72      	adds	r2, r6, #1
 8002fd2:	2efe      	cmp	r6, #254	; 0xfe
 8002fd4:	d0d0      	beq.n	8002f78 <__aeabi_d2f+0x24>
 8002fd6:	0189      	lsls	r1, r1, #6
 8002fd8:	0a49      	lsrs	r1, r1, #9
 8002fda:	b2d3      	uxtb	r3, r2
 8002fdc:	e7ce      	b.n	8002f7c <__aeabi_d2f+0x28>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	e7cb      	b.n	8002f7c <__aeabi_d2f+0x28>
 8002fe4:	0032      	movs	r2, r6
 8002fe6:	3217      	adds	r2, #23
 8002fe8:	db22      	blt.n	8003030 <__aeabi_d2f+0xdc>
 8002fea:	2180      	movs	r1, #128	; 0x80
 8002fec:	221e      	movs	r2, #30
 8002fee:	0409      	lsls	r1, r1, #16
 8002ff0:	4308      	orrs	r0, r1
 8002ff2:	1b92      	subs	r2, r2, r6
 8002ff4:	2a1f      	cmp	r2, #31
 8002ff6:	dd1d      	ble.n	8003034 <__aeabi_d2f+0xe0>
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4249      	negs	r1, r1
 8002ffc:	1b8e      	subs	r6, r1, r6
 8002ffe:	0001      	movs	r1, r0
 8003000:	40f1      	lsrs	r1, r6
 8003002:	000e      	movs	r6, r1
 8003004:	2a20      	cmp	r2, #32
 8003006:	d004      	beq.n	8003012 <__aeabi_d2f+0xbe>
 8003008:	4a14      	ldr	r2, [pc, #80]	; (800305c <__aeabi_d2f+0x108>)
 800300a:	4694      	mov	ip, r2
 800300c:	4463      	add	r3, ip
 800300e:	4098      	lsls	r0, r3
 8003010:	4305      	orrs	r5, r0
 8003012:	0029      	movs	r1, r5
 8003014:	1e4d      	subs	r5, r1, #1
 8003016:	41a9      	sbcs	r1, r5
 8003018:	4331      	orrs	r1, r6
 800301a:	2600      	movs	r6, #0
 800301c:	074b      	lsls	r3, r1, #29
 800301e:	d1ce      	bne.n	8002fbe <__aeabi_d2f+0x6a>
 8003020:	2080      	movs	r0, #128	; 0x80
 8003022:	000b      	movs	r3, r1
 8003024:	04c0      	lsls	r0, r0, #19
 8003026:	2201      	movs	r2, #1
 8003028:	4003      	ands	r3, r0
 800302a:	4201      	tst	r1, r0
 800302c:	d1d3      	bne.n	8002fd6 <__aeabi_d2f+0x82>
 800302e:	e7af      	b.n	8002f90 <__aeabi_d2f+0x3c>
 8003030:	2300      	movs	r3, #0
 8003032:	e7ac      	b.n	8002f8e <__aeabi_d2f+0x3a>
 8003034:	490a      	ldr	r1, [pc, #40]	; (8003060 <__aeabi_d2f+0x10c>)
 8003036:	468c      	mov	ip, r1
 8003038:	0029      	movs	r1, r5
 800303a:	4463      	add	r3, ip
 800303c:	40d1      	lsrs	r1, r2
 800303e:	409d      	lsls	r5, r3
 8003040:	000a      	movs	r2, r1
 8003042:	0029      	movs	r1, r5
 8003044:	4098      	lsls	r0, r3
 8003046:	1e4d      	subs	r5, r1, #1
 8003048:	41a9      	sbcs	r1, r5
 800304a:	4301      	orrs	r1, r0
 800304c:	4311      	orrs	r1, r2
 800304e:	e7e4      	b.n	800301a <__aeabi_d2f+0xc6>
 8003050:	0033      	movs	r3, r6
 8003052:	e79d      	b.n	8002f90 <__aeabi_d2f+0x3c>
 8003054:	000007fe 	.word	0x000007fe
 8003058:	fffffc80 	.word	0xfffffc80
 800305c:	fffffca2 	.word	0xfffffca2
 8003060:	fffffc82 	.word	0xfffffc82

08003064 <__clzsi2>:
 8003064:	211c      	movs	r1, #28
 8003066:	2301      	movs	r3, #1
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	4298      	cmp	r0, r3
 800306c:	d301      	bcc.n	8003072 <__clzsi2+0xe>
 800306e:	0c00      	lsrs	r0, r0, #16
 8003070:	3910      	subs	r1, #16
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	4298      	cmp	r0, r3
 8003076:	d301      	bcc.n	800307c <__clzsi2+0x18>
 8003078:	0a00      	lsrs	r0, r0, #8
 800307a:	3908      	subs	r1, #8
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	4298      	cmp	r0, r3
 8003080:	d301      	bcc.n	8003086 <__clzsi2+0x22>
 8003082:	0900      	lsrs	r0, r0, #4
 8003084:	3904      	subs	r1, #4
 8003086:	a202      	add	r2, pc, #8	; (adr r2, 8003090 <__clzsi2+0x2c>)
 8003088:	5c10      	ldrb	r0, [r2, r0]
 800308a:	1840      	adds	r0, r0, r1
 800308c:	4770      	bx	lr
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	02020304 	.word	0x02020304
 8003094:	01010101 	.word	0x01010101
	...

080030a0 <__clzdi2>:
 80030a0:	b510      	push	{r4, lr}
 80030a2:	2900      	cmp	r1, #0
 80030a4:	d103      	bne.n	80030ae <__clzdi2+0xe>
 80030a6:	f7ff ffdd 	bl	8003064 <__clzsi2>
 80030aa:	3020      	adds	r0, #32
 80030ac:	e002      	b.n	80030b4 <__clzdi2+0x14>
 80030ae:	1c08      	adds	r0, r1, #0
 80030b0:	f7ff ffd8 	bl	8003064 <__clzsi2>
 80030b4:	bd10      	pop	{r4, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)

080030b8 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030be:	2318      	movs	r3, #24
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	0018      	movs	r0, r3
 80030c4:	2308      	movs	r3, #8
 80030c6:	001a      	movs	r2, r3
 80030c8:	2100      	movs	r1, #0
 80030ca:	f009 fedc 	bl	800ce86 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	0018      	movs	r0, r3
 80030d2:	2314      	movs	r3, #20
 80030d4:	001a      	movs	r2, r3
 80030d6:	2100      	movs	r1, #0
 80030d8:	f009 fed5 	bl	800ce86 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80030dc:	4b46      	ldr	r3, [pc, #280]	; (80031f8 <MX_ADC_Init+0x140>)
 80030de:	4a47      	ldr	r2, [pc, #284]	; (80031fc <MX_ADC_Init+0x144>)
 80030e0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80030e2:	4b45      	ldr	r3, [pc, #276]	; (80031f8 <MX_ADC_Init+0x140>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80030e8:	4b43      	ldr	r3, [pc, #268]	; (80031f8 <MX_ADC_Init+0x140>)
 80030ea:	2290      	movs	r2, #144	; 0x90
 80030ec:	0392      	lsls	r2, r2, #14
 80030ee:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80030f0:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <MX_ADC_Init+0x140>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80030f6:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <MX_ADC_Init+0x140>)
 80030f8:	2207      	movs	r2, #7
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80030fc:	4b3e      	ldr	r3, [pc, #248]	; (80031f8 <MX_ADC_Init+0x140>)
 80030fe:	2201      	movs	r2, #1
 8003100:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <MX_ADC_Init+0x140>)
 8003104:	2200      	movs	r2, #0
 8003106:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003108:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <MX_ADC_Init+0x140>)
 800310a:	2220      	movs	r2, #32
 800310c:	2101      	movs	r1, #1
 800310e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <MX_ADC_Init+0x140>)
 8003112:	2221      	movs	r2, #33	; 0x21
 8003114:	2100      	movs	r1, #0
 8003116:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003118:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <MX_ADC_Init+0x140>)
 800311a:	2200      	movs	r2, #0
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800311e:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <MX_ADC_Init+0x140>)
 8003120:	22c2      	movs	r2, #194	; 0xc2
 8003122:	32ff      	adds	r2, #255	; 0xff
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003126:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <MX_ADC_Init+0x140>)
 8003128:	222c      	movs	r2, #44	; 0x2c
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800312e:	4b32      	ldr	r3, [pc, #200]	; (80031f8 <MX_ADC_Init+0x140>)
 8003130:	2204      	movs	r2, #4
 8003132:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003134:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <MX_ADC_Init+0x140>)
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800313a:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <MX_ADC_Init+0x140>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003140:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <MX_ADC_Init+0x140>)
 8003142:	2201      	movs	r2, #1
 8003144:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003146:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <MX_ADC_Init+0x140>)
 8003148:	2200      	movs	r2, #0
 800314a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800314c:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <MX_ADC_Init+0x140>)
 800314e:	0018      	movs	r0, r3
 8003150:	f004 fd40 	bl	8007bd4 <HAL_ADC_Init>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d001      	beq.n	800315c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8003158:	f003 f8b2 	bl	80062c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800315c:	2118      	movs	r1, #24
 800315e:	187b      	adds	r3, r7, r1
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003164:	187b      	adds	r3, r7, r1
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	0152      	lsls	r2, r2, #5
 800316a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800316c:	187a      	adds	r2, r7, r1
 800316e:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <MX_ADC_Init+0x140>)
 8003170:	0011      	movs	r1, r2
 8003172:	0018      	movs	r0, r3
 8003174:	f004 fff8 	bl	8008168 <HAL_ADC_ConfigChannel>
 8003178:	1e03      	subs	r3, r0, #0
 800317a:	d001      	beq.n	8003180 <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 800317c:	f003 f8a0 	bl	80062c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003180:	2118      	movs	r1, #24
 8003182:	187b      	adds	r3, r7, r1
 8003184:	4a1e      	ldr	r2, [pc, #120]	; (8003200 <MX_ADC_Init+0x148>)
 8003186:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003188:	187a      	adds	r2, r7, r1
 800318a:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <MX_ADC_Init+0x140>)
 800318c:	0011      	movs	r1, r2
 800318e:	0018      	movs	r0, r3
 8003190:	f004 ffea 	bl	8008168 <HAL_ADC_ConfigChannel>
 8003194:	1e03      	subs	r3, r0, #0
 8003196:	d001      	beq.n	800319c <MX_ADC_Init+0xe4>
  {
    Error_Handler();
 8003198:	f003 f892 	bl	80062c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800319c:	2118      	movs	r1, #24
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <MX_ADC_Init+0x14c>)
 80031a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80031a4:	187a      	adds	r2, r7, r1
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <MX_ADC_Init+0x140>)
 80031a8:	0011      	movs	r1, r2
 80031aa:	0018      	movs	r0, r3
 80031ac:	f004 ffdc 	bl	8008168 <HAL_ADC_ConfigChannel>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d001      	beq.n	80031b8 <MX_ADC_Init+0x100>
  {
    Error_Handler();
 80031b4:	f003 f884 	bl	80062c0 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	22c0      	movs	r2, #192	; 0xc0
 80031bc:	0412      	lsls	r2, r2, #16
 80031be:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <MX_ADC_Init+0x148>)
 80031c4:	605a      	str	r2, [r3, #4]
  AnalogWDGConfig.ITMode = ENABLE;
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	2201      	movs	r2, #1
 80031ca:	721a      	strb	r2, [r3, #8]
  AnalogWDGConfig.HighThreshold = 2048;
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	60da      	str	r2, [r3, #12]
  AnalogWDGConfig.LowThreshold = 0;
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80031da:	1d3a      	adds	r2, r7, #4
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <MX_ADC_Init+0x140>)
 80031de:	0011      	movs	r1, r2
 80031e0:	0018      	movs	r0, r3
 80031e2:	f005 f861 	bl	80082a8 <HAL_ADC_AnalogWDGConfig>
 80031e6:	1e03      	subs	r3, r0, #0
 80031e8:	d001      	beq.n	80031ee <MX_ADC_Init+0x136>
  {
    Error_Handler();
 80031ea:	f003 f869 	bl	80062c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b008      	add	sp, #32
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	20000164 	.word	0x20000164
 80031fc:	40012400 	.word	0x40012400
 8003200:	04000002 	.word	0x04000002
 8003204:	20000100 	.word	0x20000100

08003208 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b08b      	sub	sp, #44	; 0x2c
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	2414      	movs	r4, #20
 8003212:	193b      	adds	r3, r7, r4
 8003214:	0018      	movs	r0, r3
 8003216:	2314      	movs	r3, #20
 8003218:	001a      	movs	r2, r3
 800321a:	2100      	movs	r1, #0
 800321c:	f009 fe33 	bl	800ce86 <memset>
  if(adcHandle->Instance==ADC1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3b      	ldr	r2, [pc, #236]	; (8003314 <HAL_ADC_MspInit+0x10c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d170      	bne.n	800330c <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800322a:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_ADC_MspInit+0x110>)
 800322c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322e:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <HAL_ADC_MspInit+0x110>)
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	0089      	lsls	r1, r1, #2
 8003234:	430a      	orrs	r2, r1
 8003236:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003238:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_ADC_MspInit+0x110>)
 800323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323c:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_ADC_MspInit+0x110>)
 800323e:	2101      	movs	r1, #1
 8003240:	430a      	orrs	r2, r1
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c
 8003244:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_ADC_MspInit+0x110>)
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003250:	4b31      	ldr	r3, [pc, #196]	; (8003318 <HAL_ADC_MspInit+0x110>)
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	4b30      	ldr	r3, [pc, #192]	; (8003318 <HAL_ADC_MspInit+0x110>)
 8003256:	2102      	movs	r1, #2
 8003258:	430a      	orrs	r2, r1
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
 800325c:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_ADC_MspInit+0x110>)
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	2202      	movs	r2, #2
 8003262:	4013      	ands	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003268:	193b      	adds	r3, r7, r4
 800326a:	2203      	movs	r2, #3
 800326c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800326e:	193b      	adds	r3, r7, r4
 8003270:	2203      	movs	r2, #3
 8003272:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	193b      	adds	r3, r7, r4
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327a:	193a      	adds	r2, r7, r4
 800327c:	23a0      	movs	r3, #160	; 0xa0
 800327e:	05db      	lsls	r3, r3, #23
 8003280:	0011      	movs	r1, r2
 8003282:	0018      	movs	r0, r3
 8003284:	f005 fc3a 	bl	8008afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003288:	193b      	adds	r3, r7, r4
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800328e:	193b      	adds	r3, r7, r4
 8003290:	2203      	movs	r2, #3
 8003292:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	193b      	adds	r3, r7, r4
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329a:	193b      	adds	r3, r7, r4
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_ADC_MspInit+0x114>)
 800329e:	0019      	movs	r1, r3
 80032a0:	0010      	movs	r0, r2
 80032a2:	f005 fc2b 	bl	8008afc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032a8:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_ADC_MspInit+0x11c>)
 80032aa:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80032ac:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032c4:	4b16      	ldr	r3, [pc, #88]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032c6:	2280      	movs	r2, #128	; 0x80
 80032c8:	0092      	lsls	r2, r2, #2
 80032ca:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032cc:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	0112      	lsls	r2, r2, #4
 80032d2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032d6:	2220      	movs	r2, #32
 80032d8:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032dc:	2200      	movs	r2, #0
 80032de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032e2:	0018      	movs	r0, r3
 80032e4:	f005 fa50 	bl	8008788 <HAL_DMA_Init>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 80032ec:	f002 ffe8 	bl	80062c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_ADC_MspInit+0x118>)
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 2, 0);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2102      	movs	r1, #2
 8003300:	200c      	movs	r0, #12
 8003302:	f005 fa0f 	bl	8008724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8003306:	200c      	movs	r0, #12
 8003308:	f005 fa21 	bl	800874e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b00b      	add	sp, #44	; 0x2c
 8003312:	bd90      	pop	{r4, r7, pc}
 8003314:	40012400 	.word	0x40012400
 8003318:	40021000 	.word	0x40021000
 800331c:	50000400 	.word	0x50000400
 8003320:	2000011c 	.word	0x2000011c
 8003324:	40020008 	.word	0x40020008

08003328 <ADC_calc_r0>:
}

// takes 500 methane readings to calculate the resistance of the sensor in fresh air
// changes r0 global variable
// source: https://thestempedia.com/tutorials/interfacing-mq-4-gas-sensor-evive/
void ADC_calc_r0(void) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
  uint16_t methane;
  int total = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  float average;
  float voltage;
  float rs_air;
  int16_t i;

  for(i = 0; i < 500; i++)
 8003332:	2312      	movs	r3, #18
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2200      	movs	r2, #0
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	e014      	b.n	8003366 <ADC_calc_r0+0x3e>
  {
	  methane = adc_dma_buffer[0];
 800333c:	4b33      	ldr	r3, [pc, #204]	; (800340c <ADC_calc_r0+0xe4>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	1cbb      	adds	r3, r7, #2
 8003342:	801a      	strh	r2, [r3, #0]
	  total += methane;
 8003344:	1cbb      	adds	r3, r7, #2
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	18d3      	adds	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]
    HAL_Delay(100);
 800334e:	2064      	movs	r0, #100	; 0x64
 8003350:	f004 fc1c 	bl	8007b8c <HAL_Delay>
  for(i = 0; i < 500; i++)
 8003354:	2112      	movs	r1, #18
 8003356:	187b      	adds	r3, r7, r1
 8003358:	2200      	movs	r2, #0
 800335a:	5e9b      	ldrsh	r3, [r3, r2]
 800335c:	b29b      	uxth	r3, r3
 800335e:	3301      	adds	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	187b      	adds	r3, r7, r1
 8003364:	801a      	strh	r2, [r3, #0]
 8003366:	2312      	movs	r3, #18
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	2200      	movs	r2, #0
 800336c:	5e9a      	ldrsh	r2, [r3, r2]
 800336e:	23fa      	movs	r3, #250	; 0xfa
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	429a      	cmp	r2, r3
 8003374:	dbe2      	blt.n	800333c <ADC_calc_r0+0x14>
  }

  average = total / 500.0;
 8003376:	6978      	ldr	r0, [r7, #20]
 8003378:	f7ff fd4e 	bl	8002e18 <__aeabi_i2d>
 800337c:	2200      	movs	r2, #0
 800337e:	4b24      	ldr	r3, [pc, #144]	; (8003410 <ADC_calc_r0+0xe8>)
 8003380:	f7fe fb10 	bl	80019a4 <__aeabi_ddiv>
 8003384:	0002      	movs	r2, r0
 8003386:	000b      	movs	r3, r1
 8003388:	0010      	movs	r0, r2
 800338a:	0019      	movs	r1, r3
 800338c:	f7ff fde2 	bl	8002f54 <__aeabi_d2f>
 8003390:	1c03      	adds	r3, r0, #0
 8003392:	60fb      	str	r3, [r7, #12]
  voltage = average * (5.0 / 1023.0);
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f7ff fd95 	bl	8002ec4 <__aeabi_f2d>
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <ADC_calc_r0+0xec>)
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <ADC_calc_r0+0xf0>)
 800339e:	f7fe ff07 	bl	80021b0 <__aeabi_dmul>
 80033a2:	0002      	movs	r2, r0
 80033a4:	000b      	movs	r3, r1
 80033a6:	0010      	movs	r0, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	f7ff fdd3 	bl	8002f54 <__aeabi_d2f>
 80033ae:	1c03      	adds	r3, r0, #0
 80033b0:	60bb      	str	r3, [r7, #8]
  rs_air = ((5.0 * 10.0) / voltage) - 10.0;
 80033b2:	68b8      	ldr	r0, [r7, #8]
 80033b4:	f7ff fd86 	bl	8002ec4 <__aeabi_f2d>
 80033b8:	0002      	movs	r2, r0
 80033ba:	000b      	movs	r3, r1
 80033bc:	2000      	movs	r0, #0
 80033be:	4917      	ldr	r1, [pc, #92]	; (800341c <ADC_calc_r0+0xf4>)
 80033c0:	f7fe faf0 	bl	80019a4 <__aeabi_ddiv>
 80033c4:	0002      	movs	r2, r0
 80033c6:	000b      	movs	r3, r1
 80033c8:	0010      	movs	r0, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <ADC_calc_r0+0xf8>)
 80033d0:	f7ff f95a 	bl	8002688 <__aeabi_dsub>
 80033d4:	0002      	movs	r2, r0
 80033d6:	000b      	movs	r3, r1
 80033d8:	0010      	movs	r0, r2
 80033da:	0019      	movs	r1, r3
 80033dc:	f7ff fdba 	bl	8002f54 <__aeabi_d2f>
 80033e0:	1c03      	adds	r3, r0, #0
 80033e2:	607b      	str	r3, [r7, #4]
  r0 = rs_air / 4.4;
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff fd6d 	bl	8002ec4 <__aeabi_f2d>
 80033ea:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <ADC_calc_r0+0xfc>)
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <ADC_calc_r0+0x100>)
 80033ee:	f7fe fad9 	bl	80019a4 <__aeabi_ddiv>
 80033f2:	0002      	movs	r2, r0
 80033f4:	000b      	movs	r3, r1
 80033f6:	0010      	movs	r0, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	f7ff fdab 	bl	8002f54 <__aeabi_d2f>
 80033fe:	1c02      	adds	r2, r0, #0
 8003400:	4b0a      	ldr	r3, [pc, #40]	; (800342c <ADC_calc_r0+0x104>)
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b006      	add	sp, #24
 800340a:	bd80      	pop	{r7, pc}
 800340c:	2000023c 	.word	0x2000023c
 8003410:	407f4000 	.word	0x407f4000
 8003414:	40501405 	.word	0x40501405
 8003418:	3f740501 	.word	0x3f740501
 800341c:	40490000 	.word	0x40490000
 8003420:	40240000 	.word	0x40240000
 8003424:	9999999a 	.word	0x9999999a
 8003428:	40119999 	.word	0x40119999
 800342c:	200000ac 	.word	0x200000ac

08003430 <ADC_calc_ppm>:

// takes 1 methane reading and converts the raw ADC value to ppm
// uses the r0 global variable
// source: https://thestempedia.com/tutorials/interfacing-mq-4-gas-sensor-evive/
float ADC_calc_ppm(uint16_t methane) {
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	0002      	movs	r2, r0
 8003438:	1dbb      	adds	r3, r7, #6
 800343a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start(&hadc);
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
	methane = HAL_ADC_GetValue(&hadc);    //Read analog values of sensor
	HAL_ADC_Stop(&hadc);*/

	voltage = methane * (5.0 / 1023.0);       //Convert analog values to voltage
 800343c:	1dbb      	adds	r3, r7, #6
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff fce9 	bl	8002e18 <__aeabi_i2d>
 8003446:	4a2b      	ldr	r2, [pc, #172]	; (80034f4 <ADC_calc_ppm+0xc4>)
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <ADC_calc_ppm+0xc8>)
 800344a:	f7fe feb1 	bl	80021b0 <__aeabi_dmul>
 800344e:	0002      	movs	r2, r0
 8003450:	000b      	movs	r3, r1
 8003452:	0010      	movs	r0, r2
 8003454:	0019      	movs	r1, r3
 8003456:	f7ff fd7d 	bl	8002f54 <__aeabi_d2f>
 800345a:	1c03      	adds	r3, r0, #0
 800345c:	61fb      	str	r3, [r7, #28]
	rs_gas = ((5.0 * 10.0) / voltage) - 10.0;      //Get value of RS in a gas
 800345e:	69f8      	ldr	r0, [r7, #28]
 8003460:	f7ff fd30 	bl	8002ec4 <__aeabi_f2d>
 8003464:	0002      	movs	r2, r0
 8003466:	000b      	movs	r3, r1
 8003468:	2000      	movs	r0, #0
 800346a:	4924      	ldr	r1, [pc, #144]	; (80034fc <ADC_calc_ppm+0xcc>)
 800346c:	f7fe fa9a 	bl	80019a4 <__aeabi_ddiv>
 8003470:	0002      	movs	r2, r0
 8003472:	000b      	movs	r3, r1
 8003474:	0010      	movs	r0, r2
 8003476:	0019      	movs	r1, r3
 8003478:	2200      	movs	r2, #0
 800347a:	4b21      	ldr	r3, [pc, #132]	; (8003500 <ADC_calc_ppm+0xd0>)
 800347c:	f7ff f904 	bl	8002688 <__aeabi_dsub>
 8003480:	0002      	movs	r2, r0
 8003482:	000b      	movs	r3, r1
 8003484:	0010      	movs	r0, r2
 8003486:	0019      	movs	r1, r3
 8003488:	f7ff fd64 	bl	8002f54 <__aeabi_d2f>
 800348c:	1c03      	adds	r3, r0, #0
 800348e:	61bb      	str	r3, [r7, #24]
	ratio = rs_gas / r0;                          // Get ratio RS_gas/RS_air
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <ADC_calc_ppm+0xd4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	1c19      	adds	r1, r3, #0
 8003496:	69b8      	ldr	r0, [r7, #24]
 8003498:	f7fd fa08 	bl	80008ac <__aeabi_fdiv>
 800349c:	1c03      	adds	r3, r0, #0
 800349e:	617b      	str	r3, [r7, #20]

	ppm_log = (log10(ratio) - 1.133) / -0.318;     //Get ppm value in linear scale according to the the ratio value
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	1c18      	adds	r0, r3, #0
 80034a4:	f000 f894 	bl	80035d0 <log10>
 80034a8:	1c03      	adds	r3, r0, #0
 80034aa:	1c18      	adds	r0, r3, #0
 80034ac:	f7ff fd0a 	bl	8002ec4 <__aeabi_f2d>
 80034b0:	4a15      	ldr	r2, [pc, #84]	; (8003508 <ADC_calc_ppm+0xd8>)
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <ADC_calc_ppm+0xdc>)
 80034b4:	f7ff f8e8 	bl	8002688 <__aeabi_dsub>
 80034b8:	0002      	movs	r2, r0
 80034ba:	000b      	movs	r3, r1
 80034bc:	0010      	movs	r0, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <ADC_calc_ppm+0xe0>)
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <ADC_calc_ppm+0xe4>)
 80034c4:	f7fe fa6e 	bl	80019a4 <__aeabi_ddiv>
 80034c8:	0002      	movs	r2, r0
 80034ca:	000b      	movs	r3, r1
 80034cc:	0010      	movs	r0, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	f7ff fd40 	bl	8002f54 <__aeabi_d2f>
 80034d4:	1c03      	adds	r3, r0, #0
 80034d6:	613b      	str	r3, [r7, #16]
	ppm = pow(10, ppm_log);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4a0f      	ldr	r2, [pc, #60]	; (8003518 <ADC_calc_ppm+0xe8>)
 80034dc:	1c19      	adds	r1, r3, #0
 80034de:	1c10      	adds	r0, r2, #0
 80034e0:	f000 f896 	bl	8003610 <pow>
 80034e4:	1c03      	adds	r3, r0, #0
 80034e6:	60fb      	str	r3, [r7, #12]
	return ppm;
 80034e8:	68fb      	ldr	r3, [r7, #12]
}
 80034ea:	1c18      	adds	r0, r3, #0
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b008      	add	sp, #32
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	40501405 	.word	0x40501405
 80034f8:	3f740501 	.word	0x3f740501
 80034fc:	40490000 	.word	0x40490000
 8003500:	40240000 	.word	0x40240000
 8003504:	200000ac 	.word	0x200000ac
 8003508:	9ba5e354 	.word	0x9ba5e354
 800350c:	3ff220c4 	.word	0x3ff220c4
 8003510:	ac083127 	.word	0xac083127
 8003514:	bfd45a1c 	.word	0xbfd45a1c
 8003518:	41200000 	.word	0x41200000

0800351c <ln>:

// source: https://stackoverflow.com/questions/35968963/trying-to-calculate-logarithm-base-10-without-math-h-really-close-just-having
float ln(float x) {
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b089      	sub	sp, #36	; 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  float sum = 0.0;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
  float xmlxpl = (x - 1) / (x + 1);
 8003528:	21fe      	movs	r1, #254	; 0xfe
 800352a:	0589      	lsls	r1, r1, #22
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fd fca1 	bl	8000e74 <__aeabi_fsub>
 8003532:	1c03      	adds	r3, r0, #0
 8003534:	1c1c      	adds	r4, r3, #0
 8003536:	21fe      	movs	r1, #254	; 0xfe
 8003538:	0589      	lsls	r1, r1, #22
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd f81a 	bl	8000574 <__aeabi_fadd>
 8003540:	1c03      	adds	r3, r0, #0
 8003542:	1c19      	adds	r1, r3, #0
 8003544:	1c20      	adds	r0, r4, #0
 8003546:	f7fd f9b1 	bl	80008ac <__aeabi_fdiv>
 800354a:	1c03      	adds	r3, r0, #0
 800354c:	60fb      	str	r3, [r7, #12]
  float denom = 1.0;
 800354e:	23fe      	movs	r3, #254	; 0xfe
 8003550:	059b      	lsls	r3, r3, #22
 8003552:	61bb      	str	r3, [r7, #24]
  float frac = xmlxpl;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	617b      	str	r3, [r7, #20]
  float term = frac / denom;
 8003558:	69b9      	ldr	r1, [r7, #24]
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	f7fd f9a6 	bl	80008ac <__aeabi_fdiv>
 8003560:	1c03      	adds	r3, r0, #0
 8003562:	613b      	str	r3, [r7, #16]


  while (term > ALMOSTZERO)
 8003564:	e01d      	b.n	80035a2 <ln+0x86>
  {
    sum += term;
 8003566:	6939      	ldr	r1, [r7, #16]
 8003568:	69f8      	ldr	r0, [r7, #28]
 800356a:	f7fd f803 	bl	8000574 <__aeabi_fadd>
 800356e:	1c03      	adds	r3, r0, #0
 8003570:	61fb      	str	r3, [r7, #28]
    denom += 2.0;
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	05c9      	lsls	r1, r1, #23
 8003576:	69b8      	ldr	r0, [r7, #24]
 8003578:	f7fc fffc 	bl	8000574 <__aeabi_fadd>
 800357c:	1c03      	adds	r3, r0, #0
 800357e:	61bb      	str	r3, [r7, #24]
    frac = frac * xmlxpl * xmlxpl;
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7fd fb5c 	bl	8000c40 <__aeabi_fmul>
 8003588:	1c03      	adds	r3, r0, #0
 800358a:	1c19      	adds	r1, r3, #0
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7fd fb57 	bl	8000c40 <__aeabi_fmul>
 8003592:	1c03      	adds	r3, r0, #0
 8003594:	617b      	str	r3, [r7, #20]
    term = frac / denom; //generate next term
 8003596:	69b9      	ldr	r1, [r7, #24]
 8003598:	6978      	ldr	r0, [r7, #20]
 800359a:	f7fd f987 	bl	80008ac <__aeabi_fdiv>
 800359e:	1c03      	adds	r3, r0, #0
 80035a0:	613b      	str	r3, [r7, #16]
  while (term > ALMOSTZERO)
 80035a2:	6938      	ldr	r0, [r7, #16]
 80035a4:	f7ff fc8e 	bl	8002ec4 <__aeabi_f2d>
 80035a8:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <ln+0xac>)
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <ln+0xb0>)
 80035ac:	f7fc fe62 	bl	8000274 <__aeabi_dcmpgt>
 80035b0:	1e03      	subs	r3, r0, #0
 80035b2:	d1d8      	bne.n	8003566 <ln+0x4a>
  }
  return 2.0 * sum;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	1c19      	adds	r1, r3, #0
 80035b8:	1c18      	adds	r0, r3, #0
 80035ba:	f7fc ffdb 	bl	8000574 <__aeabi_fadd>
 80035be:	1c03      	adds	r3, r0, #0
}
 80035c0:	1c18      	adds	r0, r3, #0
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b009      	add	sp, #36	; 0x24
 80035c6:	bd90      	pop	{r4, r7, pc}
 80035c8:	4fb6d2ac 	.word	0x4fb6d2ac
 80035cc:	3bfd83c9 	.word	0x3bfd83c9

080035d0 <log10>:

float log10(float x) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return ln(x) / LN10;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	1c18      	adds	r0, r3, #0
 80035dc:	f7ff ff9e 	bl	800351c <ln>
 80035e0:	1c03      	adds	r3, r0, #0
 80035e2:	1c18      	adds	r0, r3, #0
 80035e4:	f7ff fc6e 	bl	8002ec4 <__aeabi_f2d>
 80035e8:	4a07      	ldr	r2, [pc, #28]	; (8003608 <log10+0x38>)
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <log10+0x3c>)
 80035ec:	f7fe f9da 	bl	80019a4 <__aeabi_ddiv>
 80035f0:	0002      	movs	r2, r0
 80035f2:	000b      	movs	r3, r1
 80035f4:	0010      	movs	r0, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	f7ff fcac 	bl	8002f54 <__aeabi_d2f>
 80035fc:	1c03      	adds	r3, r0, #0
}
 80035fe:	1c18      	adds	r0, r3, #0
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	bbb55516 	.word	0xbbb55516
 800360c:	40026bb1 	.word	0x40026bb1

08003610 <pow>:

// source: https://stackoverflow.com/questions/27129006/float-power-program-in-c-without-math-h
float pow(float x, float y) {
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  return exp(y * ln(x));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	1c18      	adds	r0, r3, #0
 800361e:	f7ff ff7d 	bl	800351c <ln>
 8003622:	1c03      	adds	r3, r0, #0
 8003624:	6839      	ldr	r1, [r7, #0]
 8003626:	1c18      	adds	r0, r3, #0
 8003628:	f7fd fb0a 	bl	8000c40 <__aeabi_fmul>
 800362c:	1c03      	adds	r3, r0, #0
 800362e:	1c18      	adds	r0, r3, #0
 8003630:	f000 f806 	bl	8003640 <exp>
 8003634:	1c03      	adds	r3, r0, #0
}
 8003636:	1c18      	adds	r0, r3, #0
 8003638:	46bd      	mov	sp, r7
 800363a:	b002      	add	sp, #8
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <exp>:

// source: https://www.quora.com/How-can-I-make-an-exponential-function-in-C-like-e-m-without-using-math-h-library-functions
float exp(float x) {
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b089      	sub	sp, #36	; 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  const float epsilon = 1e-7;
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <exp+0xa0>)
 800364a:	60fb      	str	r3, [r7, #12]
  float sum = 0.0;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
  int16_t n = 0;
 8003650:	231a      	movs	r3, #26
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	2200      	movs	r2, #0
 8003656:	801a      	strh	r2, [r3, #0]
  float factorial = 1;
 8003658:	23fe      	movs	r3, #254	; 0xfe
 800365a:	059b      	lsls	r3, r3, #22
 800365c:	617b      	str	r3, [r7, #20]
  float power = 1.0;
 800365e:	23fe      	movs	r3, #254	; 0xfe
 8003660:	059b      	lsls	r3, r3, #22
 8003662:	613b      	str	r3, [r7, #16]
  float term;
  do {
    term = power / factorial;
 8003664:	6979      	ldr	r1, [r7, #20]
 8003666:	6938      	ldr	r0, [r7, #16]
 8003668:	f7fd f920 	bl	80008ac <__aeabi_fdiv>
 800366c:	1c03      	adds	r3, r0, #0
 800366e:	60bb      	str	r3, [r7, #8]
    sum += term;
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	69f8      	ldr	r0, [r7, #28]
 8003674:	f7fc ff7e 	bl	8000574 <__aeabi_fadd>
 8003678:	1c03      	adds	r3, r0, #0
 800367a:	61fb      	str	r3, [r7, #28]
    n += 1;
 800367c:	211a      	movs	r1, #26
 800367e:	187b      	adds	r3, r7, r1
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	000c      	movs	r4, r1
 8003688:	187b      	adds	r3, r7, r1
 800368a:	801a      	strh	r2, [r3, #0]
    power *= x;
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	6938      	ldr	r0, [r7, #16]
 8003690:	f7fd fad6 	bl	8000c40 <__aeabi_fmul>
 8003694:	1c03      	adds	r3, r0, #0
 8003696:	613b      	str	r3, [r7, #16]
    factorial *= n;
 8003698:	193b      	adds	r3, r7, r4
 800369a:	2200      	movs	r2, #0
 800369c:	5e9b      	ldrsh	r3, [r3, r2]
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fd fdd0 	bl	8001244 <__aeabi_i2f>
 80036a4:	1c03      	adds	r3, r0, #0
 80036a6:	1c19      	adds	r1, r3, #0
 80036a8:	6978      	ldr	r0, [r7, #20]
 80036aa:	f7fd fac9 	bl	8000c40 <__aeabi_fmul>
 80036ae:	1c03      	adds	r3, r0, #0
 80036b0:	617b      	str	r3, [r7, #20]
  } while ( ((term < 0) ? (-term) : term) >= epsilon);
 80036b2:	2100      	movs	r1, #0
 80036b4:	68b8      	ldr	r0, [r7, #8]
 80036b6:	f7fc fe03 	bl	80002c0 <__aeabi_fcmplt>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d004      	beq.n	80036c8 <exp+0x88>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2280      	movs	r2, #128	; 0x80
 80036c2:	0612      	lsls	r2, r2, #24
 80036c4:	4053      	eors	r3, r2
 80036c6:	e000      	b.n	80036ca <exp+0x8a>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	68f9      	ldr	r1, [r7, #12]
 80036cc:	1c18      	adds	r0, r3, #0
 80036ce:	f7fc fe15 	bl	80002fc <__aeabi_fcmpge>
 80036d2:	1e03      	subs	r3, r0, #0
 80036d4:	d1c6      	bne.n	8003664 <exp+0x24>
//  } while (fabs(term) >= epsilon);
  return sum;
 80036d6:	69fb      	ldr	r3, [r7, #28]
}
 80036d8:	1c18      	adds	r0, r3, #0
 80036da:	46bd      	mov	sp, r7
 80036dc:	b009      	add	sp, #36	; 0x24
 80036de:	bd90      	pop	{r4, r7, pc}
 80036e0:	33d6bf95 	.word	0x33d6bf95

080036e4 <setup_wifi>:
//Todo check if busy before sending

//TODO - implement OK check + Error Retry

// This function sets the wifi mode to station, sets the AP to connect to,
int setup_wifi(char * ssid, char * password){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]

  //TODO - define error

//  serial_select(WIFI);
  serial_select(WIFI);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f002 feae 	bl	8006450 <serial_select>
  serial_println("AT+CWMODE=1");
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <setup_wifi+0x40>)
 80036f6:	0018      	movs	r0, r3
 80036f8:	f002 ff0e 	bl	8006518 <serial_println>
  HAL_Delay(50); //dealy of 50 ms
 80036fc:	2032      	movs	r0, #50	; 0x32
 80036fe:	f004 fa45 	bl	8007b8c <HAL_Delay>
  serial_printf("AT+CWJAP=\"%s\",\"%s\"\n", ssid, password);
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <setup_wifi+0x44>)
 8003708:	0018      	movs	r0, r3
 800370a:	f002 ff45 	bl	8006598 <serial_printf>
  HAL_Delay(2000);
 800370e:	23fa      	movs	r3, #250	; 0xfa
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	0018      	movs	r0, r3
 8003714:	f004 fa3a 	bl	8007b8c <HAL_Delay>
  //TODO wait until OK

  return AT_SUCCESS;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b002      	add	sp, #8
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	0800cfb4 	.word	0x0800cfb4
 8003728:	0800cfc0 	.word	0x0800cfc0

0800372c <sent_freshbyte_data>:

int sent_freshbyte_data(int temp_F, int humid, int methane){
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b087      	sub	sp, #28
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]

  //TODO - define error

  //TODO - define all these as consts
  serial_select(WIFI);
 8003738:	2000      	movs	r0, #0
 800373a:	f002 fe89 	bl	8006450 <serial_select>
  serial_printf(wifi_send_data_str, temp_F, humid, methane, session_id);
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <sent_freshbyte_data+0x44>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	687c      	ldr	r4, [r7, #4]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	68f9      	ldr	r1, [r7, #12]
 8003748:	480a      	ldr	r0, [pc, #40]	; (8003774 <sent_freshbyte_data+0x48>)
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	0023      	movs	r3, r4
 800374e:	f002 ff23 	bl	8006598 <serial_printf>
  HAL_Delay(2000);
 8003752:	23fa      	movs	r3, #250	; 0xfa
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	0018      	movs	r0, r3
 8003758:	f004 fa18 	bl	8007b8c <HAL_Delay>
  session_id++;
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <sent_freshbyte_data+0x44>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	4b03      	ldr	r3, [pc, #12]	; (8003770 <sent_freshbyte_data+0x44>)
 8003764:	601a      	str	r2, [r3, #0]

  return AT_SUCCESS;
 8003766:	2300      	movs	r3, #0
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b005      	add	sp, #20
 800376e:	bd90      	pop	{r4, r7, pc}
 8003770:	20000000 	.word	0x20000000
 8003774:	0800d890 	.word	0x0800d890

08003778 <bq_init>:
#include "stm32l0xx_hal.h"
#include "i2c.h"

#define I2C hi2c1

bool bq_init(){
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
	// return BAT_INIT_FAIL if not able to init (BAT_INIT_SUCCESS for success)

	/* === Set BQ Max Battery Capacity === */
	if (BQ27441_setCapacity(BAT_CAP_MAX) != BAT_INIT_SUCCESS) return BAT_INIT_FAIL;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <bq_init+0x30>)
 800377e:	0018      	movs	r0, r3
 8003780:	f000 f816 	bl	80037b0 <BQ27441_setCapacity>
 8003784:	0003      	movs	r3, r0
 8003786:	2b01      	cmp	r3, #1
 8003788:	d001      	beq.n	800378e <bq_init+0x16>
 800378a:	2300      	movs	r3, #0
 800378c:	e009      	b.n	80037a2 <bq_init+0x2a>
	/* === Set BQ Max Battery Energy === */
	/*
		Design Energy should be set to be Design Capacity × 3.7 if using the bq27441-G1A or Design
		Capacity × 3.8 if using the bq27441-G1B
	*/
	if (BQ27441_setDesignEnergy((uint16_t) ((float) BAT_CAP_MAX * 3.7)) != BAT_INIT_SUCCESS) return BAT_INIT_FAIL;
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <bq_init+0x34>)
 8003790:	0018      	movs	r0, r3
 8003792:	f000 f833 	bl	80037fc <BQ27441_setDesignEnergy>
 8003796:	0003      	movs	r3, r0
 8003798:	2b01      	cmp	r3, #1
 800379a:	d001      	beq.n	80037a0 <bq_init+0x28>
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <bq_init+0x2a>
//	retval = BQ27441_writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
//	if (retval != BAT_INIT_SUCCESS)
//		return BAT_INIT_FAIL;


	return BAT_INIT_SUCCESS;
 80037a0:	2301      	movs	r3, #1
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	00001130 	.word	0x00001130
 80037ac:	00003f98 	.word	0x00003f98

080037b0 <BQ27441_setCapacity>:
 ************************** Initialization Functions *************************
 *****************************************************************************/

// Configures the design capacity of the connected battery.
int BQ27441_setCapacity(uint16_t capacity)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	0002      	movs	r2, r0
 80037b8:	1dbb      	adds	r3, r7, #6
 80037ba:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0A (10)
	// Design capacity is a 2-byte piece of data - MSB first
	// Unit: mAh

	uint8_t capMSB = capacity >> 8;
 80037bc:	1dbb      	adds	r3, r7, #6
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	200f      	movs	r0, #15
 80037c6:	183b      	adds	r3, r7, r0
 80037c8:	701a      	strb	r2, [r3, #0]
	uint8_t capLSB = capacity & 0x00FF;
 80037ca:	240e      	movs	r4, #14
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	1dba      	adds	r2, r7, #6
 80037d0:	8812      	ldrh	r2, [r2, #0]
 80037d2:	701a      	strb	r2, [r3, #0]
	uint8_t capacityData[2] = {capLSB, capMSB};
 80037d4:	210c      	movs	r1, #12
 80037d6:	187b      	adds	r3, r7, r1
 80037d8:	193a      	adds	r2, r7, r4
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	183a      	adds	r2, r7, r0
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	705a      	strb	r2, [r3, #1]
	return BQ27441_writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
 80037e6:	187a      	adds	r2, r7, r1
 80037e8:	2302      	movs	r3, #2
 80037ea:	210a      	movs	r1, #10
 80037ec:	2052      	movs	r0, #82	; 0x52
 80037ee:	f000 f853 	bl	8003898 <BQ27441_writeExtendedData>
 80037f2:	0003      	movs	r3, r0
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b005      	add	sp, #20
 80037fa:	bd90      	pop	{r4, r7, pc}

080037fc <BQ27441_setDesignEnergy>:

// Configures the design energy of the connected battery.
int BQ27441_setDesignEnergy(uint16_t energy)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	0002      	movs	r2, r0
 8003804:	1dbb      	adds	r3, r7, #6
 8003806:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0C (12)
	// Design energy is a 2-byte piece of data - MSB first
	// Unit: mWh

	uint8_t enMSB = energy >> 8;
 8003808:	1dbb      	adds	r3, r7, #6
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	b29a      	uxth	r2, r3
 8003810:	200f      	movs	r0, #15
 8003812:	183b      	adds	r3, r7, r0
 8003814:	701a      	strb	r2, [r3, #0]
	uint8_t enLSB = energy & 0x00FF;
 8003816:	240e      	movs	r4, #14
 8003818:	193b      	adds	r3, r7, r4
 800381a:	1dba      	adds	r2, r7, #6
 800381c:	8812      	ldrh	r2, [r2, #0]
 800381e:	701a      	strb	r2, [r3, #0]
	uint8_t energyData[2] = {enLSB, enMSB};
 8003820:	210c      	movs	r1, #12
 8003822:	187b      	adds	r3, r7, r1
 8003824:	193a      	adds	r2, r7, r4
 8003826:	7812      	ldrb	r2, [r2, #0]
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	187b      	adds	r3, r7, r1
 800382c:	183a      	adds	r2, r7, r0
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	705a      	strb	r2, [r3, #1]
	return BQ27441_writeExtendedData(BQ27441_ID_STATE, 12, energyData, 2);
 8003832:	187a      	adds	r2, r7, r1
 8003834:	2302      	movs	r3, #2
 8003836:	210c      	movs	r1, #12
 8003838:	2052      	movs	r0, #82	; 0x52
 800383a:	f000 f82d 	bl	8003898 <BQ27441_writeExtendedData>
 800383e:	0003      	movs	r3, r0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b005      	add	sp, #20
 8003846:	bd90      	pop	{r4, r7, pc}

08003848 <BQ27441_soc>:
	return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
}

// Reads and returns specified state of charge measurement
uint16_t BQ27441_soc(soc_measure type)
{
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	0002      	movs	r2, r0
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	701a      	strb	r2, [r3, #0]
	uint16_t socRet = 0;
 8003854:	230e      	movs	r3, #14
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2200      	movs	r2, #0
 800385a:	801a      	strh	r2, [r3, #0]
	switch (type)
 800385c:	1dfb      	adds	r3, r7, #7
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <BQ27441_soc+0x22>
 8003864:	2b01      	cmp	r3, #1
 8003866:	d008      	beq.n	800387a <BQ27441_soc+0x32>
 8003868:	e00f      	b.n	800388a <BQ27441_soc+0x42>
	{
	case FILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 800386a:	230e      	movs	r3, #14
 800386c:	18fc      	adds	r4, r7, r3
 800386e:	201c      	movs	r0, #28
 8003870:	f000 f878 	bl	8003964 <BQ27441_readWord>
 8003874:	0003      	movs	r3, r0
 8003876:	8023      	strh	r3, [r4, #0]
		break;
 8003878:	e007      	b.n	800388a <BQ27441_soc+0x42>
	case UNFILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 800387a:	230e      	movs	r3, #14
 800387c:	18fc      	adds	r4, r7, r3
 800387e:	2030      	movs	r0, #48	; 0x30
 8003880:	f000 f870 	bl	8003964 <BQ27441_readWord>
 8003884:	0003      	movs	r3, r0
 8003886:	8023      	strh	r3, [r4, #0]
		break;
 8003888:	46c0      	nop			; (mov r8, r8)
	}

	return socRet;
 800388a:	230e      	movs	r3, #14
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	881b      	ldrh	r3, [r3, #0]
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	b005      	add	sp, #20
 8003896:	bd90      	pop	{r4, r7, pc}

08003898 <BQ27441_writeExtendedData>:
 *****************************************************************************/

// Write a specified number of bytes to extended data specifying a
// class ID, position offset.
int BQ27441_writeExtendedData(uint8_t classID, uint8_t offset, uint8_t * data, uint8_t len)
{
 8003898:	b5b0      	push	{r4, r5, r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	0004      	movs	r4, r0
 80038a0:	0008      	movs	r0, r1
 80038a2:	603a      	str	r2, [r7, #0]
 80038a4:	0019      	movs	r1, r3
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	1c22      	adds	r2, r4, #0
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	1dbb      	adds	r3, r7, #6
 80038ae:	1c02      	adds	r2, r0, #0
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	1d7b      	adds	r3, r7, #5
 80038b4:	1c0a      	adds	r2, r1, #0
 80038b6:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;	// I2C return status

	if (len > 32)
 80038b8:	1d7b      	adds	r3, r7, #5
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d901      	bls.n	80038c4 <BQ27441_writeExtendedData+0x2c>
		return BAT_INIT_FAIL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e04a      	b.n	800395a <BQ27441_writeExtendedData+0xc2>

	ret = BQ27441_blockDataControl();
 80038c4:	250b      	movs	r5, #11
 80038c6:	197c      	adds	r4, r7, r5
 80038c8:	f000 f872 	bl	80039b0 <BQ27441_blockDataControl>
 80038cc:	0003      	movs	r3, r0
 80038ce:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) // // enable block data memory control
 80038d0:	197b      	adds	r3, r7, r5
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <BQ27441_writeExtendedData+0x44>
		return BAT_INIT_FAIL; // Return false if enable fails
 80038d8:	2300      	movs	r3, #0
 80038da:	e03e      	b.n	800395a <BQ27441_writeExtendedData+0xc2>
	if (BQ27441_blockDataClass(classID) != HAL_OK) // Write class ID using DataBlockClass()
 80038dc:	1dfb      	adds	r3, r7, #7
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 f87f 	bl	80039e4 <BQ27441_blockDataClass>
 80038e6:	1e03      	subs	r3, r0, #0
 80038e8:	d001      	beq.n	80038ee <BQ27441_writeExtendedData+0x56>
		return BAT_INIT_FAIL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e035      	b.n	800395a <BQ27441_writeExtendedData+0xc2>

	BQ27441_blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
 80038ee:	1dbb      	adds	r3, r7, #6
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 f88e 	bl	8003a18 <BQ27441_blockDataOffset>
	BQ27441_computeBlockChecksum(); // Compute checksum going in
 80038fc:	f000 f8be 	bl	8003a7c <BQ27441_computeBlockChecksum>
	uint8_t oldCsum = BQ27441_blockDataChecksum();
 8003900:	230a      	movs	r3, #10
 8003902:	18fc      	adds	r4, r7, r3
 8003904:	f000 f8a2 	bl	8003a4c <BQ27441_blockDataChecksum>
 8003908:	0003      	movs	r3, r0
 800390a:	7023      	strb	r3, [r4, #0]

	// Write data bytes:
	for (int i = 0; i < len; i++)
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	e012      	b.n	8003938 <BQ27441_writeExtendedData+0xa0>
	{
		// Write to offset, mod 32 if offset is greater than 32
		// The blockDataOffset above sets the 32-bit block
		BQ27441_writeBlockData((offset % 32) + i, data[i]);
 8003912:	1dbb      	adds	r3, r7, #6
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	221f      	movs	r2, #31
 8003918:	4013      	ands	r3, r2
 800391a:	b2da      	uxtb	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	18d3      	adds	r3, r2, r3
 8003922:	b2d8      	uxtb	r0, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	18d3      	adds	r3, r2, r3
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	0019      	movs	r1, r3
 800392e:	f000 f8f5 	bl	8003b1c <BQ27441_writeBlockData>
	for (int i = 0; i < len; i++)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3301      	adds	r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	1d7b      	adds	r3, r7, #5
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	429a      	cmp	r2, r3
 8003940:	dbe7      	blt.n	8003912 <BQ27441_writeExtendedData+0x7a>
	}

	// Write new checksum using BlockDataChecksum (0x60)
	uint8_t newCsum = BQ27441_computeBlockChecksum(); // Compute the new checksum
 8003942:	2509      	movs	r5, #9
 8003944:	197c      	adds	r4, r7, r5
 8003946:	f000 f899 	bl	8003a7c <BQ27441_computeBlockChecksum>
 800394a:	0003      	movs	r3, r0
 800394c:	7023      	strb	r3, [r4, #0]
	BQ27441_writeBlockChecksum(newCsum);
 800394e:	197b      	adds	r3, r7, r5
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	0018      	movs	r0, r3
 8003954:	f000 f8c8 	bl	8003ae8 <BQ27441_writeBlockChecksum>


	return BAT_INIT_SUCCESS;
 8003958:	2301      	movs	r3, #1
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b004      	add	sp, #16
 8003960:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003964 <BQ27441_readWord>:

// Read a 16-bit command word from the BQ27441-G1A
uint16_t BQ27441_readWord(uint16_t subAddress)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af04      	add	r7, sp, #16
 800396a:	0002      	movs	r2, r0
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
//	i2cReadBytes(subAddress, data, 2);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), subAddress, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8003970:	1dbb      	adds	r3, r7, #6
 8003972:	881a      	ldrh	r2, [r3, #0]
 8003974:	480d      	ldr	r0, [pc, #52]	; (80039ac <BQ27441_readWord+0x48>)
 8003976:	2301      	movs	r3, #1
 8003978:	425b      	negs	r3, r3
 800397a:	9302      	str	r3, [sp, #8]
 800397c:	2302      	movs	r3, #2
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	240c      	movs	r4, #12
 8003982:	193b      	adds	r3, r7, r4
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	2301      	movs	r3, #1
 8003988:	21aa      	movs	r1, #170	; 0xaa
 800398a:	f005 fc35 	bl	80091f8 <HAL_I2C_Mem_Read>
	return ((uint16_t) data[1] << 8) | data[0];
 800398e:	0021      	movs	r1, r4
 8003990:	187b      	adds	r3, r7, r1
 8003992:	785b      	ldrb	r3, [r3, #1]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	b21a      	sxth	r2, r3
 8003998:	187b      	adds	r3, r7, r1
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b21b      	sxth	r3, r3
 800399e:	4313      	orrs	r3, r2
 80039a0:	b21b      	sxth	r3, r3
 80039a2:	b29b      	uxth	r3, r3
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b005      	add	sp, #20
 80039aa:	bd90      	pop	{r4, r7, pc}
 80039ac:	200001e8 	.word	0x200001e8

080039b0 <BQ27441_blockDataControl>:

// Issue a BlockDataControl() command to enable BlockData access
HAL_StatusTypeDef BQ27441_blockDataControl(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af04      	add	r7, sp, #16
	uint8_t enableByte = 0x00;
 80039b6:	1dfb      	adds	r3, r7, #7
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_CONTROL, &enableByte, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CONTROL, I2C_MEMADD_SIZE_8BIT, &enableByte, 1, HAL_MAX_DELAY);
 80039bc:	4808      	ldr	r0, [pc, #32]	; (80039e0 <BQ27441_blockDataControl+0x30>)
 80039be:	2301      	movs	r3, #1
 80039c0:	425b      	negs	r3, r3
 80039c2:	9302      	str	r3, [sp, #8]
 80039c4:	2301      	movs	r3, #1
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	1dfb      	adds	r3, r7, #7
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	2301      	movs	r3, #1
 80039ce:	2261      	movs	r2, #97	; 0x61
 80039d0:	21aa      	movs	r1, #170	; 0xaa
 80039d2:	f005 fae3 	bl	8008f9c <HAL_I2C_Mem_Write>
 80039d6:	0003      	movs	r3, r0
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	200001e8 	.word	0x200001e8

080039e4 <BQ27441_blockDataClass>:

// Issue a DataClass() command to set the data class to be accessed
HAL_StatusTypeDef BQ27441_blockDataClass(uint8_t id)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af04      	add	r7, sp, #16
 80039ea:	0002      	movs	r2, r0
 80039ec:	1dfb      	adds	r3, r7, #7
 80039ee:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_DATACLASS, &id, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_DATACLASS, I2C_MEMADD_SIZE_8BIT, &id, 1, HAL_MAX_DELAY);
 80039f0:	4808      	ldr	r0, [pc, #32]	; (8003a14 <BQ27441_blockDataClass+0x30>)
 80039f2:	2301      	movs	r3, #1
 80039f4:	425b      	negs	r3, r3
 80039f6:	9302      	str	r3, [sp, #8]
 80039f8:	2301      	movs	r3, #1
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	1dfb      	adds	r3, r7, #7
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2301      	movs	r3, #1
 8003a02:	223e      	movs	r2, #62	; 0x3e
 8003a04:	21aa      	movs	r1, #170	; 0xaa
 8003a06:	f005 fac9 	bl	8008f9c <HAL_I2C_Mem_Write>
 8003a0a:	0003      	movs	r3, r0

}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200001e8 	.word	0x200001e8

08003a18 <BQ27441_blockDataOffset>:

// Issue a DataBlock() command to set the data block to be accessed
HAL_StatusTypeDef BQ27441_blockDataOffset(uint8_t offset)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af04      	add	r7, sp, #16
 8003a1e:	0002      	movs	r2, r0
 8003a20:	1dfb      	adds	r3, r7, #7
 8003a22:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_DATABLOCK, &offset, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_DATABLOCK, I2C_MEMADD_SIZE_8BIT, &offset, 1, HAL_MAX_DELAY);
 8003a24:	4808      	ldr	r0, [pc, #32]	; (8003a48 <BQ27441_blockDataOffset+0x30>)
 8003a26:	2301      	movs	r3, #1
 8003a28:	425b      	negs	r3, r3
 8003a2a:	9302      	str	r3, [sp, #8]
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	1dfb      	adds	r3, r7, #7
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	2301      	movs	r3, #1
 8003a36:	223f      	movs	r2, #63	; 0x3f
 8003a38:	21aa      	movs	r1, #170	; 0xaa
 8003a3a:	f005 faaf 	bl	8008f9c <HAL_I2C_Mem_Write>
 8003a3e:	0003      	movs	r3, r0

}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b002      	add	sp, #8
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200001e8 	.word	0x200001e8

08003a4c <BQ27441_blockDataChecksum>:

// Read the current checksum using BlockDataCheckSum()
uint8_t BQ27441_blockDataChecksum(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af04      	add	r7, sp, #16
	uint8_t csum;
//	i2cReadBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, &csum, 1, HAL_MAX_DELAY);
 8003a52:	4809      	ldr	r0, [pc, #36]	; (8003a78 <BQ27441_blockDataChecksum+0x2c>)
 8003a54:	2301      	movs	r3, #1
 8003a56:	425b      	negs	r3, r3
 8003a58:	9302      	str	r3, [sp, #8]
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	1dfb      	adds	r3, r7, #7
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	2301      	movs	r3, #1
 8003a64:	2260      	movs	r2, #96	; 0x60
 8003a66:	21aa      	movs	r1, #170	; 0xaa
 8003a68:	f005 fbc6 	bl	80091f8 <HAL_I2C_Mem_Read>
	return csum;
 8003a6c:	1dfb      	adds	r3, r7, #7
 8003a6e:	781b      	ldrb	r3, [r3, #0]
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b002      	add	sp, #8
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	200001e8 	.word	0x200001e8

08003a7c <BQ27441_computeBlockChecksum>:

// Read all 32 bytes of the loaded extended data and compute a
// checksum based on the values.
uint8_t BQ27441_computeBlockChecksum(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08e      	sub	sp, #56	; 0x38
 8003a80:	af04      	add	r7, sp, #16
	uint8_t data[32];
	// i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, data, 32, HAL_MAX_DELAY);
 8003a82:	4818      	ldr	r0, [pc, #96]	; (8003ae4 <BQ27441_computeBlockChecksum+0x68>)
 8003a84:	2301      	movs	r3, #1
 8003a86:	425b      	negs	r3, r3
 8003a88:	9302      	str	r3, [sp, #8]
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	003b      	movs	r3, r7
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2301      	movs	r3, #1
 8003a94:	2260      	movs	r2, #96	; 0x60
 8003a96:	21aa      	movs	r1, #170	; 0xaa
 8003a98:	f005 fbae 	bl	80091f8 <HAL_I2C_Mem_Read>


	uint8_t csum = 0;
 8003a9c:	2327      	movs	r3, #39	; 0x27
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	623b      	str	r3, [r7, #32]
 8003aa8:	e00c      	b.n	8003ac4 <BQ27441_computeBlockChecksum+0x48>
	{
		csum += data[i];
 8003aaa:	003a      	movs	r2, r7
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	18d3      	adds	r3, r2, r3
 8003ab0:	7819      	ldrb	r1, [r3, #0]
 8003ab2:	2227      	movs	r2, #39	; 0x27
 8003ab4:	18bb      	adds	r3, r7, r2
 8003ab6:	18ba      	adds	r2, r7, r2
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	188a      	adds	r2, r1, r2
 8003abc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	2b1f      	cmp	r3, #31
 8003ac8:	ddef      	ble.n	8003aaa <BQ27441_computeBlockChecksum+0x2e>
	}
	csum = 255 - csum;
 8003aca:	2127      	movs	r1, #39	; 0x27
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	187a      	adds	r2, r7, r1
 8003ad0:	7812      	ldrb	r2, [r2, #0]
 8003ad2:	43d2      	mvns	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

	return csum;
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	781b      	ldrb	r3, [r3, #0]
}
 8003ada:	0018      	movs	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b00a      	add	sp, #40	; 0x28
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	200001e8 	.word	0x200001e8

08003ae8 <BQ27441_writeBlockChecksum>:

// Use the BlockDataCheckSum() command to write a checksum value
HAL_StatusTypeDef BQ27441_writeBlockChecksum(uint8_t csum)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af04      	add	r7, sp, #16
 8003aee:	0002      	movs	r2, r0
 8003af0:	1dfb      	adds	r3, r7, #7
 8003af2:	701a      	strb	r2, [r3, #0]
	//return i2cWriteBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, &csum, 1, HAL_MAX_DELAY);
 8003af4:	4808      	ldr	r0, [pc, #32]	; (8003b18 <BQ27441_writeBlockChecksum+0x30>)
 8003af6:	2301      	movs	r3, #1
 8003af8:	425b      	negs	r3, r3
 8003afa:	9302      	str	r3, [sp, #8]
 8003afc:	2301      	movs	r3, #1
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	1dfb      	adds	r3, r7, #7
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	2301      	movs	r3, #1
 8003b06:	2260      	movs	r2, #96	; 0x60
 8003b08:	21aa      	movs	r1, #170	; 0xaa
 8003b0a:	f005 fa47 	bl	8008f9c <HAL_I2C_Mem_Write>
 8003b0e:	0003      	movs	r3, r0
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	200001e8 	.word	0x200001e8

08003b1c <BQ27441_writeBlockData>:

// Use BlockData() to write a byte to an offset of the loaded data
HAL_StatusTypeDef BQ27441_writeBlockData(uint8_t offset, uint8_t data)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af04      	add	r7, sp, #16
 8003b22:	0002      	movs	r2, r0
 8003b24:	1dfb      	adds	r3, r7, #7
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	1dbb      	adds	r3, r7, #6
 8003b2a:	1c0a      	adds	r2, r1, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
	uint8_t address = offset + BQ27441_EXTENDED_BLOCKDATA;
 8003b2e:	210f      	movs	r1, #15
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	1dfa      	adds	r2, r7, #7
 8003b34:	7812      	ldrb	r2, [r2, #0]
 8003b36:	3240      	adds	r2, #64	; 0x40
 8003b38:	701a      	strb	r2, [r3, #0]
	//return i2cWriteBytes(address, &data, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), address, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	4808      	ldr	r0, [pc, #32]	; (8003b64 <BQ27441_writeBlockData+0x48>)
 8003b42:	2301      	movs	r3, #1
 8003b44:	425b      	negs	r3, r3
 8003b46:	9302      	str	r3, [sp, #8]
 8003b48:	2301      	movs	r3, #1
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	1dbb      	adds	r3, r7, #6
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2301      	movs	r3, #1
 8003b52:	21aa      	movs	r1, #170	; 0xaa
 8003b54:	f005 fa22 	bl	8008f9c <HAL_I2C_Mem_Write>
 8003b58:	0003      	movs	r3, r0

}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b004      	add	sp, #16
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	200001e8 	.word	0x200001e8

08003b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <MX_DMA_Init+0x48>)
 8003b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <MX_DMA_Init+0x48>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	430a      	orrs	r2, r1
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <MX_DMA_Init+0x48>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8003b86:	2200      	movs	r2, #0
 8003b88:	2103      	movs	r1, #3
 8003b8a:	2009      	movs	r0, #9
 8003b8c:	f004 fdca 	bl	8008724 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b90:	2009      	movs	r0, #9
 8003b92:	f004 fddc 	bl	800874e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	200a      	movs	r0, #10
 8003b9c:	f004 fdc2 	bl	8008724 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003ba0:	200a      	movs	r0, #10
 8003ba2:	f004 fdd4 	bl	800874e <HAL_NVIC_EnableIRQ>

}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b002      	add	sp, #8
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <epd_command>:
    @brief This function sends an EPD command with no data
    @param c    The command to send
    @param end  If true, the CS pin will be pulled high following the transaction. Pass true for Adafruit functions that don't define it during call!
    @return     A byte of data read back from the EPD.
*/
uint8_t epd_command(uint8_t c, bool end) {
 8003bb4:	b5b0      	push	{r4, r5, r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	0002      	movs	r2, r0
 8003bbc:	1dfb      	adds	r3, r7, #7
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	1dbb      	adds	r3, r7, #6
 8003bc2:	1c0a      	adds	r2, r1, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
    EPD_CS_HIGH;    // Ensure the CS pin is high before starting the transaction
 8003bc6:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <epd_command+0xc8>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2140      	movs	r1, #64	; 0x40
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f005 f90b 	bl	8008de8 <HAL_GPIO_WritePin>
    EPD_DC_LOW;     // Set DC low to indicate that a command is being sent
 8003bd2:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <epd_command+0xcc>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2180      	movs	r1, #128	; 0x80
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f005 f905 	bl	8008de8 <HAL_GPIO_WritePin>
    EPD_CS_LOW;     // Set CS low to indicate the start of the transaction
 8003bde:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <epd_command+0xc8>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	2140      	movs	r1, #64	; 0x40
 8003be4:	0018      	movs	r0, r3
 8003be6:	f005 f8ff 	bl	8008de8 <HAL_GPIO_WritePin>

    uint8_t rxData;
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&EPD_SPI, &c, &rxData, 1, HAL_MAX_DELAY);
 8003bea:	2517      	movs	r5, #23
 8003bec:	197c      	adds	r4, r7, r5
 8003bee:	230f      	movs	r3, #15
 8003bf0:	18fa      	adds	r2, r7, r3
 8003bf2:	1df9      	adds	r1, r7, #7
 8003bf4:	4823      	ldr	r0, [pc, #140]	; (8003c84 <epd_command+0xd0>)
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	425b      	negs	r3, r3
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f007 fcb1 	bl	800b564 <HAL_SPI_TransmitReceive>
 8003c02:	0003      	movs	r3, r0
 8003c04:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) {
 8003c06:	197b      	adds	r3, r7, r5
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d024      	beq.n	8003c58 <epd_command+0xa4>
        char *err;
        switch (status) {
 8003c0e:	197b      	adds	r3, r7, r5
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d00b      	beq.n	8003c2e <epd_command+0x7a>
 8003c16:	dc18      	bgt.n	8003c4a <epd_command+0x96>
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d00f      	beq.n	8003c3c <epd_command+0x88>
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d114      	bne.n	8003c4a <epd_command+0x96>
            case HAL_BUSY:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_BUSY";
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <epd_command+0xd4>)
 8003c22:	613b      	str	r3, [r7, #16]
                serial_println(err);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f002 fc76 	bl	8006518 <serial_println>
                break;
 8003c2c:	e015      	b.n	8003c5a <epd_command+0xa6>
            case HAL_TIMEOUT:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_TIMEOUT";
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <epd_command+0xd8>)
 8003c30:	613b      	str	r3, [r7, #16]
                serial_println(err);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f002 fc6f 	bl	8006518 <serial_println>
                break;
 8003c3a:	e00e      	b.n	8003c5a <epd_command+0xa6>
            case HAL_ERROR:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_ERROR";
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <epd_command+0xdc>)
 8003c3e:	613b      	str	r3, [r7, #16]
                serial_println(err);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f002 fc68 	bl	8006518 <serial_println>
                break;
 8003c48:	e007      	b.n	8003c5a <epd_command+0xa6>
            default:
                err = "EPD_COMMAND: FAILED TO TX/RX - UNKNOWN ERROR";
 8003c4a:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <epd_command+0xe0>)
 8003c4c:	613b      	str	r3, [r7, #16]
                serial_println(err);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	0018      	movs	r0, r3
 8003c52:	f002 fc61 	bl	8006518 <serial_println>
                break;
 8003c56:	e000      	b.n	8003c5a <epd_command+0xa6>
        }
    }
 8003c58:	46c0      	nop			; (mov r8, r8)

    if (end) {
 8003c5a:	1dbb      	adds	r3, r7, #6
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <epd_command+0xba>
        EPD_CS_HIGH;
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <epd_command+0xc8>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	2140      	movs	r1, #64	; 0x40
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f005 f8bd 	bl	8008de8 <HAL_GPIO_WritePin>
    }

    return rxData;
 8003c6e:	230f      	movs	r3, #15
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b006      	add	sp, #24
 8003c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c7c:	50000400 	.word	0x50000400
 8003c80:	50000800 	.word	0x50000800
 8003c84:	2000030c 	.word	0x2000030c
 8003c88:	0800cfe0 	.word	0x0800cfe0
 8003c8c:	0800d008 	.word	0x0800d008
 8003c90:	0800d034 	.word	0x0800d034
 8003c94:	0800d060 	.word	0x0800d060

08003c98 <epd_data>:
/*!
    @brief This function sends data to the EPD for an ONGOING transaction
    @param buf the buffer of data to send
    @param len the length of the data buffer
*/
void epd_data(const uint8_t *buf, uint16_t len) {
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	000a      	movs	r2, r1
 8003ca2:	1cbb      	adds	r3, r7, #2
 8003ca4:	801a      	strh	r2, [r3, #0]
    EPD_DC_HIGH;
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <epd_data+0x40>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	2180      	movs	r1, #128	; 0x80
 8003cac:	0018      	movs	r0, r3
 8003cae:	f005 f89b 	bl	8008de8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&EPD_SPI, buf, len, HAL_MAX_DELAY);
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	425c      	negs	r4, r3
 8003cb6:	1cbb      	adds	r3, r7, #2
 8003cb8:	881a      	ldrh	r2, [r3, #0]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4807      	ldr	r0, [pc, #28]	; (8003cdc <epd_data+0x44>)
 8003cbe:	0023      	movs	r3, r4
 8003cc0:	f007 f9d4 	bl	800b06c <HAL_SPI_Transmit>
    EPD_CS_HIGH;
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <epd_data+0x48>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	2140      	movs	r1, #64	; 0x40
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f005 f88c 	bl	8008de8 <HAL_GPIO_WritePin>
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b003      	add	sp, #12
 8003cd6:	bd90      	pop	{r4, r7, pc}
 8003cd8:	50000800 	.word	0x50000800
 8003cdc:	2000030c 	.word	0x2000030c
 8003ce0:	50000400 	.word	0x50000400

08003ce4 <epd_pCommand>:
    @brief This function sends an EPD command with data
    @param c the command to send
    @param buf the buffer of data to send
    @param len the length of the data buffer
*/
void epd_pCommand(uint8_t c, const uint8_t *buf, uint16_t len) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6039      	str	r1, [r7, #0]
 8003cec:	0011      	movs	r1, r2
 8003cee:	1dfb      	adds	r3, r7, #7
 8003cf0:	1c02      	adds	r2, r0, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	1d3b      	adds	r3, r7, #4
 8003cf6:	1c0a      	adds	r2, r1, #0
 8003cf8:	801a      	strh	r2, [r3, #0]
    epd_command(c, false);
 8003cfa:	1dfb      	adds	r3, r7, #7
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	0018      	movs	r0, r3
 8003d02:	f7ff ff57 	bl	8003bb4 <epd_command>
    epd_data(buf, len);
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	0011      	movs	r1, r2
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f7ff ffc2 	bl	8003c98 <epd_data>
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b002      	add	sp, #8
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <epd_commandList>:

/*!
 * @brief This function is used by epd_powerUp() to send over the display initialization code
 * @param init_code
 */
void epd_commandList(void) {
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b095      	sub	sp, #84	; 0x54
 8003d20:	af00      	add	r7, sp, #0
    uint8_t buf[64];
    const uint8_t * epd_init = ti_270c44_tri_init_code;
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <epd_commandList+0x98>)
 8003d24:	64fb      	str	r3, [r7, #76]	; 0x4c

    while (*epd_init != 0xFE) {
 8003d26:	e03b      	b.n	8003da0 <epd_commandList+0x84>
        uint8_t cmd = *epd_init;
 8003d28:	2147      	movs	r1, #71	; 0x47
 8003d2a:	187b      	adds	r3, r7, r1
 8003d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d2e:	7812      	ldrb	r2, [r2, #0]
 8003d30:	701a      	strb	r2, [r3, #0]
        epd_init++;
 8003d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d34:	3301      	adds	r3, #1
 8003d36:	64fb      	str	r3, [r7, #76]	; 0x4c
        uint8_t num_args = *epd_init;
 8003d38:	2446      	movs	r4, #70	; 0x46
 8003d3a:	193b      	adds	r3, r7, r4
 8003d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d3e:	7812      	ldrb	r2, [r2, #0]
 8003d40:	701a      	strb	r2, [r3, #0]
        epd_init++;
 8003d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d44:	3301      	adds	r3, #1
 8003d46:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (cmd == 0xFF) {
 8003d48:	187b      	adds	r3, r7, r1
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2bff      	cmp	r3, #255	; 0xff
 8003d4e:	d107      	bne.n	8003d60 <epd_commandList+0x44>
            epd_busy();
 8003d50:	f000 f837 	bl	8003dc2 <epd_busy>
            HAL_Delay(num_args);
 8003d54:	193b      	adds	r3, r7, r4
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f003 ff17 	bl	8007b8c <HAL_Delay>
            continue;
 8003d5e:	e01f      	b.n	8003da0 <epd_commandList+0x84>
        }

        for (int i = 0; i < num_args; i++) {
 8003d60:	2300      	movs	r3, #0
 8003d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d64:	e00c      	b.n	8003d80 <epd_commandList+0x64>
            buf[i] = *epd_init;
 8003d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d68:	7819      	ldrb	r1, [r3, #0]
 8003d6a:	1d3a      	adds	r2, r7, #4
 8003d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6e:	18d3      	adds	r3, r2, r3
 8003d70:	1c0a      	adds	r2, r1, #0
 8003d72:	701a      	strb	r2, [r3, #0]
            epd_init++;
 8003d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d76:	3301      	adds	r3, #1
 8003d78:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < num_args; i++) {
 8003d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d80:	2146      	movs	r1, #70	; 0x46
 8003d82:	187b      	adds	r3, r7, r1
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	dbec      	blt.n	8003d66 <epd_commandList+0x4a>
        }

        epd_pCommand(cmd, buf, num_args);
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	1d39      	adds	r1, r7, #4
 8003d94:	2347      	movs	r3, #71	; 0x47
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7ff ffa2 	bl	8003ce4 <epd_pCommand>
    while (*epd_init != 0xFE) {
 8003da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2bfe      	cmp	r3, #254	; 0xfe
 8003da6:	d1bf      	bne.n	8003d28 <epd_commandList+0xc>
    }
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b015      	add	sp, #84	; 0x54
 8003db0:	bd90      	pop	{r4, r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	0800d968 	.word	0x0800d968

08003db8 <epd_reset>:

/*!
 * @brief This function performs a hardware reset on the display if EPD_NRST_PIN is defined
 */
void epd_reset() {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
        HAL_Delay(10);
        HAL_GPIO_WritePin(EPD_NRST_GPIO_Port, EPD_NRST_Pin, GPIO_PIN_SET);
        HAL_Delay(10);
    }
#endif
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <epd_busy>:

/*!
 * @brief If EPD_BUSY_Pin is defined, this function blocks execution while the EPD is busy. Else, it simply waits.
 */
void epd_busy() {
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	af00      	add	r7, sp, #0
        }
    } else {
        HAL_Delay(BUSY_WAIT);
    }
#else
    HAL_Delay(BUSY_WAIT);
 8003dc6:	23fa      	movs	r3, #250	; 0xfa
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f003 fede 	bl	8007b8c <HAL_Delay>
#endif
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <epd_update>:

/*!
 * @brief This function sends the display refresh command to the EPD
 */
void epd_update() {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
    epd_command(IL91874_DISPLAY_REFRESH, true);
 8003ddc:	2101      	movs	r1, #1
 8003dde:	2012      	movs	r0, #18
 8003de0:	f7ff fee8 	bl	8003bb4 <epd_command>
    HAL_Delay(100);
 8003de4:	2064      	movs	r0, #100	; 0x64
 8003de6:	f003 fed1 	bl	8007b8c <HAL_Delay>
    epd_busy();
 8003dea:	f7ff ffea 	bl	8003dc2 <epd_busy>
    if (!use_busy) {
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <epd_update+0x34>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2201      	movs	r2, #1
 8003df4:	4053      	eors	r3, r2
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <epd_update+0x2c>
        HAL_Delay(REFRESH_WAIT);
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <epd_update+0x38>)
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f003 fec4 	bl	8007b8c <HAL_Delay>
    }
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	200000b0 	.word	0x200000b0
 8003e10:	000032c8 	.word	0x000032c8

08003e14 <epd_powerUp>:

/*!
 * @brief This function performs the EPD power on sequence.
 */
void epd_powerUp() {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
    uint8_t buf[5];

    epd_reset();  // TODO: Implement this later for future use. Would be helpful to have.
 8003e1a:	f7ff ffcd 	bl	8003db8 <epd_reset>
    HAL_Delay(200);
 8003e1e:	20c8      	movs	r0, #200	; 0xc8
 8003e20:	f003 feb4 	bl	8007b8c <HAL_Delay>
//    const uint8_t *init_code = epd_init_code;

    epd_commandList();
 8003e24:	f7ff ff7a 	bl	8003d1c <epd_commandList>

    buf[0] = (EPD_HEIGHT >> 8) & 0xFF;
 8003e28:	003b      	movs	r3, r7
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
    buf[1] = EPD_HEIGHT & 0xFF;
 8003e2e:	003b      	movs	r3, r7
 8003e30:	22b0      	movs	r2, #176	; 0xb0
 8003e32:	705a      	strb	r2, [r3, #1]
    buf[2] = (EPD_WIDTH >> 8) & 0xFF;
 8003e34:	003b      	movs	r3, r7
 8003e36:	2201      	movs	r2, #1
 8003e38:	709a      	strb	r2, [r3, #2]
    buf[3] = EPD_WIDTH & 0xFF;
 8003e3a:	003b      	movs	r3, r7
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	70da      	strb	r2, [r3, #3]
    epd_pCommand(IL91874_RESOLUTION, buf, 4);
 8003e40:	003b      	movs	r3, r7
 8003e42:	2204      	movs	r2, #4
 8003e44:	0019      	movs	r1, r3
 8003e46:	2061      	movs	r0, #97	; 0x61
 8003e48:	f7ff ff4c 	bl	8003ce4 <epd_pCommand>

    buf[0] = 0x00;
 8003e4c:	003b      	movs	r3, r7
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
    epd_pCommand(IL91874_PDRF, buf, 1);
 8003e52:	003b      	movs	r3, r7
 8003e54:	2201      	movs	r2, #1
 8003e56:	0019      	movs	r1, r3
 8003e58:	2016      	movs	r0, #22
 8003e5a:	f7ff ff43 	bl	8003ce4 <epd_pCommand>
}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b002      	add	sp, #8
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <epd_powerDown>:

/*!
 * @brief This function performs the EPD power down sequence.
 *          If EPD_NRST_Pin is defined, the EPD will be put in a deep sleep mode to further conserve power.
 */
void epd_powerDown() {
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
    uint8_t buf[1];

    buf[0] = 0xF7;
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	22f7      	movs	r2, #247	; 0xf7
 8003e70:	701a      	strb	r2, [r3, #0]
    epd_pCommand(IL91874_CDI, buf, 1);
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	2201      	movs	r2, #1
 8003e76:	0019      	movs	r1, r3
 8003e78:	2050      	movs	r0, #80	; 0x50
 8003e7a:	f7ff ff33 	bl	8003ce4 <epd_pCommand>

    // power off
    epd_command(IL91874_POWER_OFF, true);
 8003e7e:	2101      	movs	r1, #1
 8003e80:	2002      	movs	r0, #2
 8003e82:	f7ff fe97 	bl	8003bb4 <epd_command>
    epd_busy();
 8003e86:	f7ff ff9c 	bl	8003dc2 <epd_busy>
    // Only deep sleep if we can get out of it
#ifdef EPD_NRST_Pin
    buf[0] = 0xA5;
    epd_pCommand(IL91874_DEEP_SLEEP, buf, 1);
#endif
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <epd_writeRAMcommand>:
/*!
 * @brief This function sends the relevant display draw command to either draw in B/W or Color
 * @param index     Set to 0 for black and white drawing. Set to 1 for color drawing.
 * @return          A byte of data from the EPD.
 */
uint8_t epd_writeRAMcommand(uint8_t index) {
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	0002      	movs	r2, r0
 8003e9a:	1dfb      	adds	r3, r7, #7
 8003e9c:	701a      	strb	r2, [r3, #0]
    if (index == 0) {
 8003e9e:	1dfb      	adds	r3, r7, #7
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <epd_writeRAMcommand+0x20>
        return epd_command(EPD_RAM_BW, false);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	2010      	movs	r0, #16
 8003eaa:	f7ff fe83 	bl	8003bb4 <epd_command>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	e00a      	b.n	8003ec8 <epd_writeRAMcommand+0x36>
    }
    if (index == 1) {
 8003eb2:	1dfb      	adds	r3, r7, #7
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <epd_writeRAMcommand+0x34>
        return epd_command(EPD_RAM_RED, false);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	2013      	movs	r0, #19
 8003ebe:	f7ff fe79 	bl	8003bb4 <epd_command>
 8003ec2:	0003      	movs	r3, r0
 8003ec4:	e000      	b.n	8003ec8 <epd_writeRAMcommand+0x36>
    }

    return 0;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	0018      	movs	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <set_black_buffer>:
 * @brief This function sets the global variables for black buffer. Can be used to swap buffers b/t colors.
 *          NOTE: Ability to swap buffers requires that EPD_USE_COLOR be defined.
 * @param index     The buffer to select for black.
 * @param inverted  Whether or not to treat the colors in the buffer as inverted.
 */
void set_black_buffer(int8_t index, bool inverted) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	1dfb      	adds	r3, r7, #7
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	1dbb      	adds	r3, r7, #6
 8003ede:	1c0a      	adds	r2, r1, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
    if (index == 0) {
 8003ee2:	1dfb      	adds	r3, r7, #7
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	b25b      	sxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10c      	bne.n	8003f06 <set_black_buffer+0x36>
        if (use_sram) {
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <set_black_buffer+0x48>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <set_black_buffer+0x2e>
            black_buffer_addr = buffer1_addr;
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <set_black_buffer+0x4c>)
 8003ef6:	881a      	ldrh	r2, [r3, #0]
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <set_black_buffer+0x50>)
 8003efa:	801a      	strh	r2, [r3, #0]
 8003efc:	e003      	b.n	8003f06 <set_black_buffer+0x36>
        } else {
            black_buffer = buffer1;
 8003efe:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <set_black_buffer+0x54>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <set_black_buffer+0x58>)
 8003f04:	601a      	str	r2, [r3, #0]
        } else {
            black_buffer = buffer2;
        }
    }
#endif
    black_buffer_inverted = inverted;
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <set_black_buffer+0x5c>)
 8003f08:	1dba      	adds	r2, r7, #6
 8003f0a:	7812      	ldrb	r2, [r2, #0]
 8003f0c:	701a      	strb	r2, [r3, #0]
}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b002      	add	sp, #8
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	20000004 	.word	0x20000004
 8003f1c:	200001c4 	.word	0x200001c4
 8003f20:	200001c2 	.word	0x200001c2
 8003f24:	200000b4 	.word	0x200000b4
 8003f28:	200001cc 	.word	0x200001cc
 8003f2c:	200000b2 	.word	0x200000b2

08003f30 <epd_init>:

/*!
 * @brief This function performs the initialization sequence for the EPD.
 * @param sram_enabled  A boolean that indicates whether or not the use the EPD's external SRAM module.
 */
void epd_init(bool sram_enabled) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	0002      	movs	r2, r0
 8003f38:	1dfb      	adds	r3, r7, #7
 8003f3a:	701a      	strb	r2, [r3, #0]

  if (buffer1 != NULL) {  // Display is already initialized, don't try to do it again.
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <epd_init+0xbc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <epd_init+0x1e>
    serial_println("Display already initialized, returning...");
 8003f44:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <epd_init+0xc0>)
 8003f46:	0018      	movs	r0, r3
 8003f48:	f002 fae6 	bl	8006518 <serial_println>
    return;
 8003f4c:	e04b      	b.n	8003fe6 <epd_init+0xb6>
  }

    buffer1_size = ((uint32_t) EPD_WIDTH * (uint32_t) EPD_HEIGHT) / 8;  // Calculate the (first) buffer's size
 8003f4e:	4b29      	ldr	r3, [pc, #164]	; (8003ff4 <epd_init+0xc4>)
 8003f50:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <epd_init+0xc8>)
 8003f52:	601a      	str	r2, [r3, #0]
    use_sram = sram_enabled;                                            // Set the SRAM usage flag
 8003f54:	4b29      	ldr	r3, [pc, #164]	; (8003ffc <epd_init+0xcc>)
 8003f56:	1dfa      	adds	r2, r7, #7
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	701a      	strb	r2, [r3, #0]
          serial_println("Malloc fail in epd_init");
          return;
        }
    }
#else
    if (use_sram) {         // Set up the buffer for SRAM usage
 8003f5c:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <epd_init+0xcc>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d006      	beq.n	8003f72 <epd_init+0x42>
        buffer1_addr = 0;   // The buffer's address
 8003f64:	4b26      	ldr	r3, [pc, #152]	; (8004000 <epd_init+0xd0>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	801a      	strh	r2, [r3, #0]
        buffer1 = NULL;     // Set MCU RAM buffer pointer to NULL
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <epd_init+0xbc>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e015      	b.n	8003f9e <epd_init+0x6e>
    }
    else if (buffer1 == NULL) {                     // Set up buffer for MCU RAM usage
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <epd_init+0xbc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d111      	bne.n	8003f9e <epd_init+0x6e>
        buffer1 = (uint8_t *) malloc(buffer1_size); // The buffer's address
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <epd_init+0xc4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f008 ff6e 	bl	800ce60 <malloc>
 8003f84:	0003      	movs	r3, r0
 8003f86:	001a      	movs	r2, r3
 8003f88:	4b18      	ldr	r3, [pc, #96]	; (8003fec <epd_init+0xbc>)
 8003f8a:	601a      	str	r2, [r3, #0]
        if (buffer1 == NULL){
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <epd_init+0xbc>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <epd_init+0x6e>
          serial_println("Malloc fail in epd_init");
 8003f94:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <epd_init+0xd4>)
 8003f96:	0018      	movs	r0, r3
 8003f98:	f002 fabe 	bl	8006518 <serial_println>
          return;
 8003f9c:	e023      	b.n	8003fe6 <epd_init+0xb6>
        }
    }
#endif

    single_byte_tx = true;  // Seems like this EPD requires CS to go high b/t each byte, ergo single byte transactions
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <epd_init+0xd8>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]

    if (use_sram) { // If using SRAM, set the SRAM module to run in sequential mode
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <epd_init+0xcc>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <epd_init+0x86>
        sram_write8(0, K640_SEQUENTIAL_MODE, MCPSRAM_WRSR);
 8003fac:	2201      	movs	r2, #1
 8003fae:	2140      	movs	r1, #64	; 0x40
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f002 fd2a 	bl	8006a0a <sram_write8>
    }

    EPD_CS_HIGH;                                // Make sure CS starts high.
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <epd_init+0xdc>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	2140      	movs	r1, #64	; 0x40
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f004 ff13 	bl	8008de8 <HAL_GPIO_WritePin>
    epd_reset();                                // reset the display, if at all possible.
 8003fc2:	f7ff fef9 	bl	8003db8 <epd_reset>
    epd_powerDown();                            // Turn off the display.
 8003fc6:	f7ff ff4e 	bl	8003e66 <epd_powerDown>
//    epd_init_code = ti_270c44_tri_init_code;    // Set the pointer to the correct initialization code.

    // Setup the black and color buffers to buffer1 and buffer2 respectively
    set_black_buffer(0, false);
 8003fca:	2100      	movs	r1, #0
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f7ff ff7f 	bl	8003ed0 <set_black_buffer>
#ifdef EPD_USE_COLOR
    set_color_buffer(1, false);
#endif

    // Set the display width, height, and rotation to their default values.
    width = EPD_WIDTH;
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <epd_init+0xe0>)
 8003fd4:	2284      	movs	r2, #132	; 0x84
 8003fd6:	0052      	lsls	r2, r2, #1
 8003fd8:	801a      	strh	r2, [r3, #0]
    height = EPD_HEIGHT;
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <epd_init+0xe4>)
 8003fdc:	22b0      	movs	r2, #176	; 0xb0
 8003fde:	801a      	strh	r2, [r3, #0]
    rotation = 2;           // Set rotation to 2 since it matches the push-buttons on the shield
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <epd_init+0xe8>)
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	701a      	strb	r2, [r3, #0]
}
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200000b4 	.word	0x200000b4
 8003ff0:	0800d090 	.word	0x0800d090
 8003ff4:	200001c8 	.word	0x200001c8
 8003ff8:	000016b0 	.word	0x000016b0
 8003ffc:	20000004 	.word	0x20000004
 8004000:	200001c4 	.word	0x200001c4
 8004004:	0800d0bc 	.word	0x0800d0bc
 8004008:	200000b1 	.word	0x200000b1
 800400c:	50000400 	.word	0x50000400
 8004010:	200001d2 	.word	0x200001d2
 8004014:	200001d0 	.word	0x200001d0
 8004018:	200001c0 	.word	0x200001c0

0800401c <clear_buffer>:

/*!
 * @brief This function clears the display buffer(s)
 */
void clear_buffer() {
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
    if (use_sram) {
 8004020:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <clear_buffer+0x74>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d017      	beq.n	8004058 <clear_buffer+0x3c>
        if (black_buffer_inverted) {
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <clear_buffer+0x78>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <clear_buffer+0x28>
            sram_erase(black_buffer_addr, buffer1_size, 0xFF);
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <clear_buffer+0x7c>)
 8004032:	8818      	ldrh	r0, [r3, #0]
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <clear_buffer+0x80>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	22ff      	movs	r2, #255	; 0xff
 800403c:	0019      	movs	r1, r3
 800403e:	f002 fd01 	bl	8006a44 <sram_erase>
                memset(color_buffer, 0x00, buffer2_size);
            }
        }
#endif
    }
}
 8004042:	e022      	b.n	800408a <clear_buffer+0x6e>
            sram_erase(black_buffer_addr, buffer1_size, 0x00);
 8004044:	4b14      	ldr	r3, [pc, #80]	; (8004098 <clear_buffer+0x7c>)
 8004046:	8818      	ldrh	r0, [r3, #0]
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <clear_buffer+0x80>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	2200      	movs	r2, #0
 8004050:	0019      	movs	r1, r3
 8004052:	f002 fcf7 	bl	8006a44 <sram_erase>
}
 8004056:	e018      	b.n	800408a <clear_buffer+0x6e>
        if (black_buffer != NULL) {
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <clear_buffer+0x84>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d014      	beq.n	800408a <clear_buffer+0x6e>
            if (black_buffer_inverted) {
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <clear_buffer+0x78>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <clear_buffer+0x5e>
                memset(black_buffer, 0xFF, buffer1_size);
 8004068:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <clear_buffer+0x84>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <clear_buffer+0x80>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	001a      	movs	r2, r3
 8004072:	21ff      	movs	r1, #255	; 0xff
 8004074:	f008 ff07 	bl	800ce86 <memset>
}
 8004078:	e007      	b.n	800408a <clear_buffer+0x6e>
                memset(black_buffer, 0x00, buffer1_size);
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <clear_buffer+0x84>)
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <clear_buffer+0x80>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	001a      	movs	r2, r3
 8004084:	2100      	movs	r1, #0
 8004086:	f008 fefe 	bl	800ce86 <memset>
}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000004 	.word	0x20000004
 8004094:	200000b2 	.word	0x200000b2
 8004098:	200001c2 	.word	0x200001c2
 800409c:	200001c8 	.word	0x200001c8
 80040a0:	200001cc 	.word	0x200001cc

080040a4 <spi_transfer>:
 * @brief This is a helper function for write_SRAM_to_epd().
 *          It transfers a byte to the EPD and reads a byte from the external SRAM
 * @param d     The byte to send to the EPD.
 * @return      The next byte to send to the EPD.
 */
uint8_t spi_transfer(uint8_t d) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
    uint8_t b[1] = {0x00};
 80040b0:	240c      	movs	r4, #12
 80040b2:	193b      	adds	r3, r7, r4
 80040b4:	4a17      	ldr	r2, [pc, #92]	; (8004114 <spi_transfer+0x70>)
 80040b6:	7812      	ldrb	r2, [r2, #0]
 80040b8:	701a      	strb	r2, [r3, #0]
    if (single_byte_tx) {
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <spi_transfer+0x74>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d017      	beq.n	80040f2 <spi_transfer+0x4e>
        EPD_CS_LOW;
 80040c2:	4b16      	ldr	r3, [pc, #88]	; (800411c <spi_transfer+0x78>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	2140      	movs	r1, #64	; 0x40
 80040c8:	0018      	movs	r0, r3
 80040ca:	f004 fe8d 	bl	8008de8 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&EPD_SPI, &d, b, 1, HAL_MAX_DELAY);
 80040ce:	193a      	adds	r2, r7, r4
 80040d0:	1df9      	adds	r1, r7, #7
 80040d2:	4813      	ldr	r0, [pc, #76]	; (8004120 <spi_transfer+0x7c>)
 80040d4:	2301      	movs	r3, #1
 80040d6:	425b      	negs	r3, r3
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2301      	movs	r3, #1
 80040dc:	f007 fa42 	bl	800b564 <HAL_SPI_TransmitReceive>
        EPD_CS_HIGH;
 80040e0:	4b0e      	ldr	r3, [pc, #56]	; (800411c <spi_transfer+0x78>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	2140      	movs	r1, #64	; 0x40
 80040e6:	0018      	movs	r0, r3
 80040e8:	f004 fe7e 	bl	8008de8 <HAL_GPIO_WritePin>
        return b[0];
 80040ec:	193b      	adds	r3, r7, r4
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	e00b      	b.n	800410a <spi_transfer+0x66>
    } else {
        HAL_SPI_TransmitReceive(&EPD_SPI, &d, b, 1, HAL_MAX_DELAY);
 80040f2:	240c      	movs	r4, #12
 80040f4:	193a      	adds	r2, r7, r4
 80040f6:	1df9      	adds	r1, r7, #7
 80040f8:	4809      	ldr	r0, [pc, #36]	; (8004120 <spi_transfer+0x7c>)
 80040fa:	2301      	movs	r3, #1
 80040fc:	425b      	negs	r3, r3
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2301      	movs	r3, #1
 8004102:	f007 fa2f 	bl	800b564 <HAL_SPI_TransmitReceive>
        return b[0];
 8004106:	193b      	adds	r3, r7, r4
 8004108:	781b      	ldrb	r3, [r3, #0]
    }
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b005      	add	sp, #20
 8004110:	bd90      	pop	{r4, r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	0800d0d4 	.word	0x0800d0d4
 8004118:	200000b1 	.word	0x200000b1
 800411c:	50000400 	.word	0x50000400
 8004120:	2000030c 	.word	0x2000030c

08004124 <write_SRAM_to_epd>:
 * @param sram_addr     The starting address of the buffer in SRAM.
 * @param buffer_size   The size of the buffer.
 * @param epd_location  The EPD location to write to. 0 writes to black, 1 writes to color.
 * @param invert        Whether or not to invert the image.
 */
void write_SRAM_to_epd(uint16_t sram_addr, uint32_t buffer_size, uint8_t epd_location, bool invert) {
 8004124:	b5b0      	push	{r4, r5, r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	0004      	movs	r4, r0
 800412c:	6039      	str	r1, [r7, #0]
 800412e:	0010      	movs	r0, r2
 8004130:	0019      	movs	r1, r3
 8004132:	1dbb      	adds	r3, r7, #6
 8004134:	1c22      	adds	r2, r4, #0
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	1d7b      	adds	r3, r7, #5
 800413a:	1c02      	adds	r2, r0, #0
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	1c0a      	adds	r2, r1, #0
 8004142:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    sram_csLow();
 8004144:	f002 fb62 	bl	800680c <sram_csLow>
    // send read command
    spi_transfer(MCPSRAM_READ);
 8004148:	2003      	movs	r0, #3
 800414a:	f7ff ffab 	bl	80040a4 <spi_transfer>
    // send address
    spi_transfer(sram_addr >> 8);
 800414e:	1dbb      	adds	r3, r7, #6
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	b29b      	uxth	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	0018      	movs	r0, r3
 800415a:	f7ff ffa3 	bl	80040a4 <spi_transfer>
    spi_transfer(sram_addr & 0xFF);
 800415e:	1dbb      	adds	r3, r7, #6
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	0018      	movs	r0, r3
 8004166:	f7ff ff9d 	bl	80040a4 <spi_transfer>

    // first data byte from SRAM will be transferred in at the same time as the EPD command is transferred out
    // note: calling epd_writeRAMcommand will start an SPI tx with the EPD
    c = epd_writeRAMcommand(epd_location);
 800416a:	230f      	movs	r3, #15
 800416c:	18fc      	adds	r4, r7, r3
 800416e:	1d7b      	adds	r3, r7, #5
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	0018      	movs	r0, r3
 8004174:	f7ff fe8d 	bl	8003e92 <epd_writeRAMcommand>
 8004178:	0003      	movs	r3, r0
 800417a:	7023      	strb	r3, [r4, #0]

    EPD_DC_HIGH;
 800417c:	4b22      	ldr	r3, [pc, #136]	; (8004208 <write_SRAM_to_epd+0xe4>)
 800417e:	2201      	movs	r2, #1
 8004180:	2180      	movs	r1, #128	; 0x80
 8004182:	0018      	movs	r0, r3
 8004184:	f004 fe30 	bl	8008de8 <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < buffer_size; i++) {
 8004188:	2300      	movs	r3, #0
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	e02c      	b.n	80041e8 <write_SRAM_to_epd+0xc4>
        c = (invert) ? ~c : c;  // Invert the data if need be
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <write_SRAM_to_epd+0x7e>
 8004196:	230f      	movs	r3, #15
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	43db      	mvns	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	e002      	b.n	80041a8 <write_SRAM_to_epd+0x84>
 80041a2:	230f      	movs	r3, #15
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	250f      	movs	r5, #15
 80041aa:	197a      	adds	r2, r7, r5
 80041ac:	7013      	strb	r3, [r2, #0]
        c = spi_transfer(c);    // Tx the current byte and Rx the next
 80041ae:	197c      	adds	r4, r7, r5
 80041b0:	197b      	adds	r3, r7, r5
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7ff ff75 	bl	80040a4 <spi_transfer>
 80041ba:	0003      	movs	r3, r0
 80041bc:	7023      	strb	r3, [r4, #0]

        serial_printf("0x%x, ", c);
 80041be:	197b      	adds	r3, r7, r5
 80041c0:	781a      	ldrb	r2, [r3, #0]
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <write_SRAM_to_epd+0xe8>)
 80041c4:	0011      	movs	r1, r2
 80041c6:	0018      	movs	r0, r3
 80041c8:	f002 f9e6 	bl	8006598 <serial_printf>
        if (i % 32 == 31) {
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	221f      	movs	r2, #31
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b1f      	cmp	r3, #31
 80041d4:	d105      	bne.n	80041e2 <write_SRAM_to_epd+0xbe>
            serial_printf("\n$%x: ", i);
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <write_SRAM_to_epd+0xec>)
 80041da:	0011      	movs	r1, r2
 80041dc:	0018      	movs	r0, r3
 80041de:	f002 f9db 	bl	8006598 <serial_printf>
    for (uint32_t i = 0; i < buffer_size; i++) {
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	3301      	adds	r3, #1
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d3ce      	bcc.n	800418e <write_SRAM_to_epd+0x6a>
        }
    }
    EPD_CS_HIGH;
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <write_SRAM_to_epd+0xf0>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	2140      	movs	r1, #64	; 0x40
 80041f6:	0018      	movs	r0, r3
 80041f8:	f004 fdf6 	bl	8008de8 <HAL_GPIO_WritePin>
    sram_csHigh();
 80041fc:	f002 faf8 	bl	80067f0 <sram_csHigh>
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bdb0      	pop	{r4, r5, r7, pc}
 8004208:	50000800 	.word	0x50000800
 800420c:	0800d0d8 	.word	0x0800d0d8
 8004210:	0800d0e0 	.word	0x0800d0e0
 8004214:	50000400 	.word	0x50000400

08004218 <write_RAM_to_epd>:
 * @param frame_buffer  The display buffer to transfer to the EPD.
 * @param buffer_size   The size of the display buffer.
 * @param epd_location  The EPD location to write to. 0 writes to black, 1 writes to color.
 * @param invert        Whether or not to invert the image.
 */
void write_RAM_to_epd(uint8_t *frame_buffer, uint32_t buffer_size, uint8_t epd_location, bool invert) {
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	0019      	movs	r1, r3
 8004224:	1dfb      	adds	r3, r7, #7
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	1dbb      	adds	r3, r7, #6
 800422a:	1c0a      	adds	r2, r1, #0
 800422c:	701a      	strb	r2, [r3, #0]
    epd_writeRAMcommand(epd_location);
 800422e:	1dfb      	adds	r3, r7, #7
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	0018      	movs	r0, r3
 8004234:	f7ff fe2d 	bl	8003e92 <epd_writeRAMcommand>
//    serial_printf("Writing from RAM[0x%x]: \n", &frame_buffer);
//    HAL_Delay(10);
    EPD_DC_HIGH;
 8004238:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <write_RAM_to_epd+0xb0>)
 800423a:	2201      	movs	r2, #1
 800423c:	2180      	movs	r1, #128	; 0x80
 800423e:	0018      	movs	r0, r3
 8004240:	f004 fdd2 	bl	8008de8 <HAL_GPIO_WritePin>
//    HAL_Delay(10);
    for (uint32_t i = 0; i < buffer_size; i++) {
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e02d      	b.n	80042a6 <write_RAM_to_epd+0x8e>
        uint8_t d = invert ? ~frame_buffer[i] : frame_buffer[i];
 800424a:	1dbb      	adds	r3, r7, #6
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <write_RAM_to_epd+0x48>
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	43db      	mvns	r3, r3
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e003      	b.n	8004268 <write_RAM_to_epd+0x50>
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	18d3      	adds	r3, r2, r3
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2413      	movs	r4, #19
 800426a:	193a      	adds	r2, r7, r4
 800426c:	7013      	strb	r3, [r2, #0]
        EPD_CS_LOW;
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <write_RAM_to_epd+0xb4>)
 8004270:	2200      	movs	r2, #0
 8004272:	2140      	movs	r1, #64	; 0x40
 8004274:	0018      	movs	r0, r3
 8004276:	f004 fdb7 	bl	8008de8 <HAL_GPIO_WritePin>
        HAL_Delay(5);
 800427a:	2005      	movs	r0, #5
 800427c:	f003 fc86 	bl	8007b8c <HAL_Delay>
        HAL_SPI_Transmit(&EPD_SPI, &d, 1, HAL_MAX_DELAY);
 8004280:	2301      	movs	r3, #1
 8004282:	425b      	negs	r3, r3
 8004284:	1939      	adds	r1, r7, r4
 8004286:	4812      	ldr	r0, [pc, #72]	; (80042d0 <write_RAM_to_epd+0xb8>)
 8004288:	2201      	movs	r2, #1
 800428a:	f006 feef 	bl	800b06c <HAL_SPI_Transmit>
        EPD_CS_HIGH;
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <write_RAM_to_epd+0xb4>)
 8004290:	2201      	movs	r2, #1
 8004292:	2140      	movs	r1, #64	; 0x40
 8004294:	0018      	movs	r0, r3
 8004296:	f004 fda7 	bl	8008de8 <HAL_GPIO_WritePin>
        HAL_Delay(5);
 800429a:	2005      	movs	r0, #5
 800429c:	f003 fc76 	bl	8007b8c <HAL_Delay>
    for (uint32_t i = 0; i < buffer_size; i++) {
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	3301      	adds	r3, #1
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d3cd      	bcc.n	800424a <write_RAM_to_epd+0x32>
//        serial_printf("%x ", d);
//        if ((i + 1) % (width / 8) == 0) {
//            serial_printf("\n");
//        }
    }
    EPD_CS_HIGH;
 80042ae:	4b07      	ldr	r3, [pc, #28]	; (80042cc <write_RAM_to_epd+0xb4>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	2140      	movs	r1, #64	; 0x40
 80042b4:	0018      	movs	r0, r3
 80042b6:	f004 fd97 	bl	8008de8 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80042ba:	2002      	movs	r0, #2
 80042bc:	f003 fc66 	bl	8007b8c <HAL_Delay>
    return;
 80042c0:	46c0      	nop			; (mov r8, r8)
}
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b007      	add	sp, #28
 80042c6:	bd90      	pop	{r4, r7, pc}
 80042c8:	50000800 	.word	0x50000800
 80042cc:	50000400 	.word	0x50000400
 80042d0:	2000030c 	.word	0x2000030c

080042d4 <display>:

/*!
 * @brief This function writes the current display buffer(s) to the EPD and draws an image.
 * @param sleep     Set to true if the EPD should go to sleep after drawing.
 */
void display(bool sleep) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	0002      	movs	r2, r0
 80042dc:	1dfb      	adds	r3, r7, #7
 80042de:	701a      	strb	r2, [r3, #0]
    epd_powerUp();
 80042e0:	f7ff fd98 	bl	8003e14 <epd_powerUp>
    if (use_sram) {
 80042e4:	4b10      	ldr	r3, [pc, #64]	; (8004328 <display+0x54>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <display+0x2a>
        write_SRAM_to_epd(buffer1_addr, buffer1_size, 0, false);
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <display+0x58>)
 80042ee:	8818      	ldrh	r0, [r3, #0]
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <display+0x5c>)
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	2200      	movs	r2, #0
 80042f8:	f7ff ff14 	bl	8004124 <write_SRAM_to_epd>
 80042fc:	e007      	b.n	800430e <display+0x3a>
    } else {
        write_RAM_to_epd(buffer1, buffer1_size, 0, false);
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <display+0x60>)
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <display+0x5c>)
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	2300      	movs	r3, #0
 8004308:	2200      	movs	r2, #0
 800430a:	f7ff ff85 	bl	8004218 <write_RAM_to_epd>
            write_RAM_to_epd(buffer2, buffer2_size, 1, false);
        }
    }
#endif

    epd_update();
 800430e:	f7ff fd63 	bl	8003dd8 <epd_update>
//    partials_since_last_full_update = 0;

    if (sleep) {
 8004312:	1dfb      	adds	r3, r7, #7
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <display+0x4a>
        epd_powerDown();
 800431a:	f7ff fda4 	bl	8003e66 <epd_powerDown>
    }
}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b002      	add	sp, #8
 8004324:	bd80      	pop	{r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	20000004 	.word	0x20000004
 800432c:	200001c4 	.word	0x200001c4
 8004330:	200001c8 	.word	0x200001c8
 8004334:	200000b4 	.word	0x200000b4

08004338 <draw_pixel>:
 * @brief This function draws a pixel in the display buffer.
 * @param x     The x-coordinate of the pixel
 * @param y     The y-coordinate of the pixel
 * @param color The color of the pixel
 */
void draw_pixel(int16_t x, int16_t y, uint16_t color) {
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	0004      	movs	r4, r0
 8004340:	0008      	movs	r0, r1
 8004342:	0011      	movs	r1, r2
 8004344:	1dbb      	adds	r3, r7, #6
 8004346:	1c22      	adds	r2, r4, #0
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	1c02      	adds	r2, r0, #0
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	1cbb      	adds	r3, r7, #2
 8004352:	1c0a      	adds	r2, r1, #0
 8004354:	801a      	strh	r2, [r3, #0]
    if ((x < 0) || (x >= width) || (y < 0) || (y >= height)) {
 8004356:	1dbb      	adds	r3, r7, #6
 8004358:	2200      	movs	r2, #0
 800435a:	5e9b      	ldrsh	r3, [r3, r2]
 800435c:	2b00      	cmp	r3, #0
 800435e:	db12      	blt.n	8004386 <draw_pixel+0x4e>
 8004360:	1dbb      	adds	r3, r7, #6
 8004362:	2200      	movs	r2, #0
 8004364:	5e9b      	ldrsh	r3, [r3, r2]
 8004366:	4a84      	ldr	r2, [pc, #528]	; (8004578 <draw_pixel+0x240>)
 8004368:	8812      	ldrh	r2, [r2, #0]
 800436a:	4293      	cmp	r3, r2
 800436c:	da0b      	bge.n	8004386 <draw_pixel+0x4e>
 800436e:	1d3b      	adds	r3, r7, #4
 8004370:	2200      	movs	r2, #0
 8004372:	5e9b      	ldrsh	r3, [r3, r2]
 8004374:	2b00      	cmp	r3, #0
 8004376:	db06      	blt.n	8004386 <draw_pixel+0x4e>
 8004378:	1d3b      	adds	r3, r7, #4
 800437a:	2200      	movs	r2, #0
 800437c:	5e9b      	ldrsh	r3, [r3, r2]
 800437e:	4a7f      	ldr	r2, [pc, #508]	; (800457c <draw_pixel+0x244>)
 8004380:	8812      	ldrh	r2, [r2, #0]
 8004382:	4293      	cmp	r3, r2
 8004384:	db0a      	blt.n	800439c <draw_pixel+0x64>
        serial_printf("Pixel off screen! (%d, %d)", x, y);
 8004386:	1dbb      	adds	r3, r7, #6
 8004388:	2100      	movs	r1, #0
 800438a:	5e59      	ldrsh	r1, [r3, r1]
 800438c:	1d3b      	adds	r3, r7, #4
 800438e:	2200      	movs	r2, #0
 8004390:	5e9a      	ldrsh	r2, [r3, r2]
 8004392:	4b7b      	ldr	r3, [pc, #492]	; (8004580 <draw_pixel+0x248>)
 8004394:	0018      	movs	r0, r3
 8004396:	f002 f8ff 	bl	8006598 <serial_printf>
 800439a:	e0e9      	b.n	8004570 <draw_pixel+0x238>
    uint8_t *black_pBuf;
#ifdef EPD_USE_COLOR
    uint8_t *color_pBuf;
#endif

    switch (rotation) {
 800439c:	4b79      	ldr	r3, [pc, #484]	; (8004584 <draw_pixel+0x24c>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d035      	beq.n	8004410 <draw_pixel+0xd8>
 80043a4:	dc49      	bgt.n	800443a <draw_pixel+0x102>
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d022      	beq.n	80043f0 <draw_pixel+0xb8>
 80043aa:	dc46      	bgt.n	800443a <draw_pixel+0x102>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <draw_pixel+0x7e>
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d007      	beq.n	80043c4 <draw_pixel+0x8c>
 80043b4:	e041      	b.n	800443a <draw_pixel+0x102>
    	case 0:
    		y = y + 8;
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	3308      	adds	r3, #8
 80043bc:	b29a      	uxth	r2, r3
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	801a      	strh	r2, [r3, #0]
    		break;
 80043c2:	e03a      	b.n	800443a <draw_pixel+0x102>
        case 1: EPD_swap(x, y);
 80043c4:	2110      	movs	r1, #16
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	1dba      	adds	r2, r7, #6
 80043ca:	8812      	ldrh	r2, [r2, #0]
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	1dbb      	adds	r3, r7, #6
 80043d0:	1d3a      	adds	r2, r7, #4
 80043d2:	8812      	ldrh	r2, [r2, #0]
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	187a      	adds	r2, r7, r1
 80043da:	8812      	ldrh	r2, [r2, #0]
 80043dc:	801a      	strh	r2, [r3, #0]
            x = EPD_WIDTH - x - 1;
 80043de:	1dbb      	adds	r3, r7, #6
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	2208      	movs	r2, #8
 80043e4:	32ff      	adds	r2, #255	; 0xff
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	1dbb      	adds	r3, r7, #6
 80043ec:	801a      	strh	r2, [r3, #0]
            break;
 80043ee:	e024      	b.n	800443a <draw_pixel+0x102>
        case 2:
            x = EPD_WIDTH - x - 1;
 80043f0:	1dbb      	adds	r3, r7, #6
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	2208      	movs	r2, #8
 80043f6:	32ff      	adds	r2, #255	; 0xff
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	1dbb      	adds	r3, r7, #6
 80043fe:	801a      	strh	r2, [r3, #0]
            y = EPD_HEIGHT - y - 1 + 8; // Add 8 to fix issue where we end up drawing off-screen
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	22b7      	movs	r2, #183	; 0xb7
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	b29a      	uxth	r2, r3
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	801a      	strh	r2, [r3, #0]
            break;
 800440e:	e014      	b.n	800443a <draw_pixel+0x102>
        case 3: EPD_swap(x, y);
 8004410:	2112      	movs	r1, #18
 8004412:	187b      	adds	r3, r7, r1
 8004414:	1dba      	adds	r2, r7, #6
 8004416:	8812      	ldrh	r2, [r2, #0]
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	1dbb      	adds	r3, r7, #6
 800441c:	1d3a      	adds	r2, r7, #4
 800441e:	8812      	ldrh	r2, [r2, #0]
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	187a      	adds	r2, r7, r1
 8004426:	8812      	ldrh	r2, [r2, #0]
 8004428:	801a      	strh	r2, [r3, #0]
            y = EPD_HEIGHT - y - 1;
 800442a:	1d3b      	adds	r3, r7, #4
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	22af      	movs	r2, #175	; 0xaf
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	b29a      	uxth	r2, r3
 8004434:	1d3b      	adds	r3, r7, #4
 8004436:	801a      	strh	r2, [r3, #0]
            break;
 8004438:	46c0      	nop			; (mov r8, r8)
    }

    uint16_t addr = ((uint32_t) (EPD_WIDTH - 1 - x) * (uint32_t) EPD_HEIGHT + y) / 8;
 800443a:	1dbb      	adds	r3, r7, #6
 800443c:	2200      	movs	r2, #0
 800443e:	5e9b      	ldrsh	r3, [r3, r2]
 8004440:	2208      	movs	r2, #8
 8004442:	32ff      	adds	r2, #255	; 0xff
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	001a      	movs	r2, r3
 8004448:	23b0      	movs	r3, #176	; 0xb0
 800444a:	435a      	muls	r2, r3
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	2100      	movs	r1, #0
 8004450:	5e5b      	ldrsh	r3, [r3, r1]
 8004452:	18d3      	adds	r3, r2, r3
 8004454:	08da      	lsrs	r2, r3, #3
 8004456:	210e      	movs	r1, #14
 8004458:	187b      	adds	r3, r7, r1
 800445a:	801a      	strh	r2, [r3, #0]
    uint8_t black_c;
#ifdef EPD_USE_COLOR
    uint8_t color_c;
#endif

    if (use_sram) {
 800445c:	4b4a      	ldr	r3, [pc, #296]	; (8004588 <draw_pixel+0x250>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d011      	beq.n	8004488 <draw_pixel+0x150>
        black_c = sram_read8(black_buffer_addr + addr, MCPSRAM_READ);
 8004464:	4b49      	ldr	r3, [pc, #292]	; (800458c <draw_pixel+0x254>)
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	187b      	adds	r3, r7, r1
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	18d3      	adds	r3, r2, r3
 800446e:	b29b      	uxth	r3, r3
 8004470:	2103      	movs	r1, #3
 8004472:	0018      	movs	r0, r3
 8004474:	f002 fab0 	bl	80069d8 <sram_read8>
 8004478:	0003      	movs	r3, r0
 800447a:	001a      	movs	r2, r3
 800447c:	210c      	movs	r1, #12
 800447e:	187b      	adds	r3, r7, r1
 8004480:	701a      	strb	r2, [r3, #0]
        black_pBuf = &black_c;
 8004482:	187b      	adds	r3, r7, r1
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e006      	b.n	8004496 <draw_pixel+0x15e>
#ifdef EPD_USE_COLOR
        color_c = sram_read8(color_buffer_addr + addr, MCPSRAM_READ);
        color_pBuf = &color_c;
#endif
    } else {
        black_pBuf = black_buffer + addr;
 8004488:	4b41      	ldr	r3, [pc, #260]	; (8004590 <draw_pixel+0x258>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	230e      	movs	r3, #14
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	18d3      	adds	r3, r2, r3
 8004494:	617b      	str	r3, [r7, #20]
    } else {
        *color_pBuf |= (1 << (7 - y % 8));
    }
#endif
    bool black_bit;
    black_bit = layer_colors[color] & 0x1;
 8004496:	1cbb      	adds	r3, r7, #2
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	4a3e      	ldr	r2, [pc, #248]	; (8004594 <draw_pixel+0x25c>)
 800449c:	5cd3      	ldrb	r3, [r2, r3]
 800449e:	001a      	movs	r2, r3
 80044a0:	2301      	movs	r3, #1
 80044a2:	401a      	ands	r2, r3
 80044a4:	200d      	movs	r0, #13
 80044a6:	183b      	adds	r3, r7, r0
 80044a8:	1e51      	subs	r1, r2, #1
 80044aa:	418a      	sbcs	r2, r1
 80044ac:	701a      	strb	r2, [r3, #0]
    if ((black_bit && black_buffer_inverted) || (!black_bit && !black_buffer_inverted)) {
 80044ae:	183b      	adds	r3, r7, r0
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <draw_pixel+0x186>
 80044b6:	4b38      	ldr	r3, [pc, #224]	; (8004598 <draw_pixel+0x260>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10e      	bne.n	80044dc <draw_pixel+0x1a4>
 80044be:	230d      	movs	r3, #13
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2201      	movs	r2, #1
 80044c6:	4053      	eors	r3, r2
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d024      	beq.n	8004518 <draw_pixel+0x1e0>
 80044ce:	4b32      	ldr	r3, [pc, #200]	; (8004598 <draw_pixel+0x260>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2201      	movs	r2, #1
 80044d4:	4053      	eors	r3, r2
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01d      	beq.n	8004518 <draw_pixel+0x1e0>
        *black_pBuf &= ~(1 << (7 - y % 8));
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b25a      	sxtb	r2, r3
 80044e2:	1d3b      	adds	r3, r7, #4
 80044e4:	2100      	movs	r1, #0
 80044e6:	5e5b      	ldrsh	r3, [r3, r1]
 80044e8:	492c      	ldr	r1, [pc, #176]	; (800459c <draw_pixel+0x264>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	d504      	bpl.n	80044f8 <draw_pixel+0x1c0>
 80044ee:	3b01      	subs	r3, #1
 80044f0:	2108      	movs	r1, #8
 80044f2:	4249      	negs	r1, r1
 80044f4:	430b      	orrs	r3, r1
 80044f6:	3301      	adds	r3, #1
 80044f8:	b21b      	sxth	r3, r3
 80044fa:	0019      	movs	r1, r3
 80044fc:	2307      	movs	r3, #7
 80044fe:	1a5b      	subs	r3, r3, r1
 8004500:	2101      	movs	r1, #1
 8004502:	4099      	lsls	r1, r3
 8004504:	000b      	movs	r3, r1
 8004506:	b25b      	sxtb	r3, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	b25b      	sxtb	r3, r3
 800450c:	4013      	ands	r3, r2
 800450e:	b25b      	sxtb	r3, r3
 8004510:	b2da      	uxtb	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e01a      	b.n	800454e <draw_pixel+0x216>
    } else {
        *black_pBuf |= (1 << (7 - y % 8));
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b25a      	sxtb	r2, r3
 800451e:	1d3b      	adds	r3, r7, #4
 8004520:	2100      	movs	r1, #0
 8004522:	5e5b      	ldrsh	r3, [r3, r1]
 8004524:	491d      	ldr	r1, [pc, #116]	; (800459c <draw_pixel+0x264>)
 8004526:	400b      	ands	r3, r1
 8004528:	d504      	bpl.n	8004534 <draw_pixel+0x1fc>
 800452a:	3b01      	subs	r3, #1
 800452c:	2108      	movs	r1, #8
 800452e:	4249      	negs	r1, r1
 8004530:	430b      	orrs	r3, r1
 8004532:	3301      	adds	r3, #1
 8004534:	b21b      	sxth	r3, r3
 8004536:	0019      	movs	r1, r3
 8004538:	2307      	movs	r3, #7
 800453a:	1a5b      	subs	r3, r3, r1
 800453c:	2101      	movs	r1, #1
 800453e:	4099      	lsls	r1, r3
 8004540:	000b      	movs	r3, r1
 8004542:	b25b      	sxtb	r3, r3
 8004544:	4313      	orrs	r3, r2
 8004546:	b25b      	sxtb	r3, r3
 8004548:	b2da      	uxtb	r2, r3
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	701a      	strb	r2, [r3, #0]
    }

    if (use_sram) {
 800454e:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <draw_pixel+0x250>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <draw_pixel+0x238>
#ifdef EPD_USE_COLOR
        sram_write8(color_buffer_addr + addr, *color_pBuf, MCPSRAM_WRITE);
#endif
        sram_write8(black_buffer_addr + addr, *black_pBuf, MCPSRAM_WRITE);
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <draw_pixel+0x254>)
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	230e      	movs	r3, #14
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	18d3      	adds	r3, r2, r3
 8004562:	b298      	uxth	r0, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2202      	movs	r2, #2
 800456a:	0019      	movs	r1, r3
 800456c:	f002 fa4d 	bl	8006a0a <sram_write8>
    }
}
 8004570:	46bd      	mov	sp, r7
 8004572:	b007      	add	sp, #28
 8004574:	bd90      	pop	{r4, r7, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	200001d2 	.word	0x200001d2
 800457c:	200001d0 	.word	0x200001d0
 8004580:	0800d0e8 	.word	0x0800d0e8
 8004584:	200001c0 	.word	0x200001c0
 8004588:	20000004 	.word	0x20000004
 800458c:	200001c2 	.word	0x200001c2
 8004590:	200001cc 	.word	0x200001cc
 8004594:	0800d960 	.word	0x0800d960
 8004598:	200000b2 	.word	0x200000b2
 800459c:	80000007 	.word	0x80000007

080045a0 <set_rotation>:

/*!
 * @brief Sets the rotation for the display.
 * @param x   0 thru 3 corresponding to 4 cardinal rotations.
 */
void set_rotation(uint8_t x) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	0002      	movs	r2, r0
 80045a8:	1dfb      	adds	r3, r7, #7
 80045aa:	701a      	strb	r2, [r3, #0]
    rotation = (x & 3);
 80045ac:	1dfb      	adds	r3, r7, #7
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2203      	movs	r2, #3
 80045b2:	4013      	ands	r3, r2
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	4b11      	ldr	r3, [pc, #68]	; (80045fc <set_rotation+0x5c>)
 80045b8:	701a      	strb	r2, [r3, #0]
    switch (rotation) {
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <set_rotation+0x5c>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d010      	beq.n	80045e4 <set_rotation+0x44>
 80045c2:	dc17      	bgt.n	80045f4 <set_rotation+0x54>
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d005      	beq.n	80045d4 <set_rotation+0x34>
 80045c8:	dc14      	bgt.n	80045f4 <set_rotation+0x54>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <set_rotation+0x34>
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d008      	beq.n	80045e4 <set_rotation+0x44>
        case 3:
            width = EPD_HEIGHT;
            height = EPD_WIDTH;
            break;
    }
}
 80045d2:	e00f      	b.n	80045f4 <set_rotation+0x54>
            width = EPD_WIDTH;
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <set_rotation+0x60>)
 80045d6:	2284      	movs	r2, #132	; 0x84
 80045d8:	0052      	lsls	r2, r2, #1
 80045da:	801a      	strh	r2, [r3, #0]
            height = EPD_HEIGHT;
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <set_rotation+0x64>)
 80045de:	22b0      	movs	r2, #176	; 0xb0
 80045e0:	801a      	strh	r2, [r3, #0]
            break;
 80045e2:	e007      	b.n	80045f4 <set_rotation+0x54>
            width = EPD_HEIGHT;
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <set_rotation+0x60>)
 80045e6:	22b0      	movs	r2, #176	; 0xb0
 80045e8:	801a      	strh	r2, [r3, #0]
            height = EPD_WIDTH;
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <set_rotation+0x64>)
 80045ec:	2284      	movs	r2, #132	; 0x84
 80045ee:	0052      	lsls	r2, r2, #1
 80045f0:	801a      	strh	r2, [r3, #0]
            break;
 80045f2:	46c0      	nop			; (mov r8, r8)
}
 80045f4:	46c0      	nop			; (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b002      	add	sp, #8
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	200001c0 	.word	0x200001c0
 8004600:	200001d2 	.word	0x200001d2
 8004604:	200001d0 	.word	0x200001d0

08004608 <set_text_size>:
/*!
 * @brief       Sets the scaling factors for the x and y axis of text.
 * @param   x   The desired scaling factor for the x-axis of a character.
 * @param   y   The desired scaling factor for the y-axis of a character.
 */
void set_text_size(uint8_t x, uint8_t y) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	0002      	movs	r2, r0
 8004610:	1dfb      	adds	r3, r7, #7
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	1dbb      	adds	r3, r7, #6
 8004616:	1c0a      	adds	r2, r1, #0
 8004618:	701a      	strb	r2, [r3, #0]
    textsize_x = (x > 0) ? x : 1;
 800461a:	1dfb      	adds	r3, r7, #7
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <set_text_size+0x20>
 8004622:	1dfb      	adds	r3, r7, #7
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	e000      	b.n	800462a <set_text_size+0x22>
 8004628:	2201      	movs	r2, #1
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <set_text_size+0x44>)
 800462c:	701a      	strb	r2, [r3, #0]
    textsize_y = (y > 0) ? y : 1;
 800462e:	1dbb      	adds	r3, r7, #6
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <set_text_size+0x34>
 8004636:	1dbb      	adds	r3, r7, #6
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	e000      	b.n	800463e <set_text_size+0x36>
 800463c:	2201      	movs	r2, #1
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <set_text_size+0x48>)
 8004640:	701a      	strb	r2, [r3, #0]
}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b002      	add	sp, #8
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	20000005 	.word	0x20000005
 8004650:	20000006 	.word	0x20000006

08004654 <set_text_scale>:

/*!
 * @brief      Sets the scaling factors for the x and y axis to be the same value.
 * @param   s  The desired scaling factor for the x and y axis of a character.
 */
void set_text_scale(uint8_t s) { set_text_size(s, s); }
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	0002      	movs	r2, r0
 800465c:	1dfb      	adds	r3, r7, #7
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	1dfb      	adds	r3, r7, #7
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	1dfb      	adds	r3, r7, #7
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	0011      	movs	r1, r2
 800466a:	0018      	movs	r0, r3
 800466c:	f7ff ffcc 	bl	8004608 <set_text_size>
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	b002      	add	sp, #8
 8004676:	bd80      	pop	{r7, pc}

08004678 <set_cursor>:
/*!
 * @brief       Sets the cursor to a new location on the display.
 * @param   x   The x coordinate of the new location
 * @param   y   The y coordinate of the new location
 */
void set_cursor(uint16_t x, uint16_t y) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	0002      	movs	r2, r0
 8004680:	1dbb      	adds	r3, r7, #6
 8004682:	801a      	strh	r2, [r3, #0]
 8004684:	1d3b      	adds	r3, r7, #4
 8004686:	1c0a      	adds	r2, r1, #0
 8004688:	801a      	strh	r2, [r3, #0]
    cursor_x = x;
 800468a:	1dbb      	adds	r3, r7, #6
 800468c:	2200      	movs	r2, #0
 800468e:	5e9a      	ldrsh	r2, [r3, r2]
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <set_cursor+0x30>)
 8004692:	801a      	strh	r2, [r3, #0]
    cursor_y = y;
 8004694:	1d3b      	adds	r3, r7, #4
 8004696:	2200      	movs	r2, #0
 8004698:	5e9a      	ldrsh	r2, [r3, r2]
 800469a:	4b04      	ldr	r3, [pc, #16]	; (80046ac <set_cursor+0x34>)
 800469c:	801a      	strh	r2, [r3, #0]
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b002      	add	sp, #8
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	200000b8 	.word	0x200000b8
 80046ac:	200000ba 	.word	0x200000ba

080046b0 <set_x_margin>:

/*!
 * @brief       Sets a horizontal offset from the left of the display for all lines of text.
 * @param   m   The number of pixels to offset by
 */
void set_x_margin(uint8_t m) { margin_x = m; }
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	0002      	movs	r2, r0
 80046b8:	1dfb      	adds	r3, r7, #7
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	4b03      	ldr	r3, [pc, #12]	; (80046cc <set_x_margin+0x1c>)
 80046be:	1dfa      	adds	r2, r7, #7
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	200000bc 	.word	0x200000bc

080046d0 <set_y_margin>:

/*!
 * @brief       Sets a vertical offset from the top of the display for all text.
 * @param   m   The number of pixels to offset by
 */
void set_y_margin(uint8_t m) { margin_y = m; }
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	0002      	movs	r2, r0
 80046d8:	1dfb      	adds	r3, r7, #7
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <set_y_margin+0x1c>)
 80046de:	1dfa      	adds	r2, r7, #7
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b002      	add	sp, #8
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	200000bd 	.word	0x200000bd

080046f0 <write_line>:
    @param    y0  Start point y coordinate
    @param    x1  End point x coordinate
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
void write_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80046f0:	b5b0      	push	{r4, r5, r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	0005      	movs	r5, r0
 80046f8:	000c      	movs	r4, r1
 80046fa:	0010      	movs	r0, r2
 80046fc:	0019      	movs	r1, r3
 80046fe:	1dbb      	adds	r3, r7, #6
 8004700:	1c2a      	adds	r2, r5, #0
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	1c22      	adds	r2, r4, #0
 8004708:	801a      	strh	r2, [r3, #0]
 800470a:	1cbb      	adds	r3, r7, #2
 800470c:	1c02      	adds	r2, r0, #0
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	003b      	movs	r3, r7
 8004712:	1c0a      	adds	r2, r1, #0
 8004714:	801a      	strh	r2, [r3, #0]
    int16_t steep = _abs(y1 - y0) > _abs(x1 - x0);
 8004716:	003b      	movs	r3, r7
 8004718:	2200      	movs	r2, #0
 800471a:	5e9a      	ldrsh	r2, [r3, r2]
 800471c:	1d3b      	adds	r3, r7, #4
 800471e:	2100      	movs	r1, #0
 8004720:	5e5b      	ldrsh	r3, [r3, r1]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	17d9      	asrs	r1, r3, #31
 8004726:	185a      	adds	r2, r3, r1
 8004728:	404a      	eors	r2, r1
 800472a:	1cbb      	adds	r3, r7, #2
 800472c:	2100      	movs	r1, #0
 800472e:	5e59      	ldrsh	r1, [r3, r1]
 8004730:	1dbb      	adds	r3, r7, #6
 8004732:	2000      	movs	r0, #0
 8004734:	5e1b      	ldrsh	r3, [r3, r0]
 8004736:	1acb      	subs	r3, r1, r3
 8004738:	17d9      	asrs	r1, r3, #31
 800473a:	185b      	adds	r3, r3, r1
 800473c:	404b      	eors	r3, r1
 800473e:	2101      	movs	r1, #1
 8004740:	429a      	cmp	r2, r3
 8004742:	dc01      	bgt.n	8004748 <write_line+0x58>
 8004744:	2300      	movs	r3, #0
 8004746:	1c19      	adds	r1, r3, #0
 8004748:	b2ca      	uxtb	r2, r1
 800474a:	211a      	movs	r1, #26
 800474c:	187b      	adds	r3, r7, r1
 800474e:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8004750:	187b      	adds	r3, r7, r1
 8004752:	2200      	movs	r2, #0
 8004754:	5e9b      	ldrsh	r3, [r3, r2]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d019      	beq.n	800478e <write_line+0x9e>
        _swap_int16_t(x0, y0);
 800475a:	2118      	movs	r1, #24
 800475c:	187b      	adds	r3, r7, r1
 800475e:	1dba      	adds	r2, r7, #6
 8004760:	8812      	ldrh	r2, [r2, #0]
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	1dbb      	adds	r3, r7, #6
 8004766:	1d3a      	adds	r2, r7, #4
 8004768:	8812      	ldrh	r2, [r2, #0]
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	1d3b      	adds	r3, r7, #4
 800476e:	187a      	adds	r2, r7, r1
 8004770:	8812      	ldrh	r2, [r2, #0]
 8004772:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8004774:	2116      	movs	r1, #22
 8004776:	187b      	adds	r3, r7, r1
 8004778:	1cba      	adds	r2, r7, #2
 800477a:	8812      	ldrh	r2, [r2, #0]
 800477c:	801a      	strh	r2, [r3, #0]
 800477e:	1cbb      	adds	r3, r7, #2
 8004780:	003a      	movs	r2, r7
 8004782:	8812      	ldrh	r2, [r2, #0]
 8004784:	801a      	strh	r2, [r3, #0]
 8004786:	003b      	movs	r3, r7
 8004788:	187a      	adds	r2, r7, r1
 800478a:	8812      	ldrh	r2, [r2, #0]
 800478c:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 800478e:	1dba      	adds	r2, r7, #6
 8004790:	1cbb      	adds	r3, r7, #2
 8004792:	2100      	movs	r1, #0
 8004794:	5e52      	ldrsh	r2, [r2, r1]
 8004796:	2100      	movs	r1, #0
 8004798:	5e5b      	ldrsh	r3, [r3, r1]
 800479a:	429a      	cmp	r2, r3
 800479c:	dd19      	ble.n	80047d2 <write_line+0xe2>
        _swap_int16_t(x0, x1);
 800479e:	2114      	movs	r1, #20
 80047a0:	187b      	adds	r3, r7, r1
 80047a2:	1dba      	adds	r2, r7, #6
 80047a4:	8812      	ldrh	r2, [r2, #0]
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	1dbb      	adds	r3, r7, #6
 80047aa:	1cba      	adds	r2, r7, #2
 80047ac:	8812      	ldrh	r2, [r2, #0]
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	1cbb      	adds	r3, r7, #2
 80047b2:	187a      	adds	r2, r7, r1
 80047b4:	8812      	ldrh	r2, [r2, #0]
 80047b6:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 80047b8:	2112      	movs	r1, #18
 80047ba:	187b      	adds	r3, r7, r1
 80047bc:	1d3a      	adds	r2, r7, #4
 80047be:	8812      	ldrh	r2, [r2, #0]
 80047c0:	801a      	strh	r2, [r3, #0]
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	003a      	movs	r2, r7
 80047c6:	8812      	ldrh	r2, [r2, #0]
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	003b      	movs	r3, r7
 80047cc:	187a      	adds	r2, r7, r1
 80047ce:	8812      	ldrh	r2, [r2, #0]
 80047d0:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80047d2:	1cbb      	adds	r3, r7, #2
 80047d4:	881a      	ldrh	r2, [r3, #0]
 80047d6:	1dbb      	adds	r3, r7, #6
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	b29a      	uxth	r2, r3
 80047de:	2110      	movs	r1, #16
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	801a      	strh	r2, [r3, #0]
    dy = _abs(y1 - y0);
 80047e4:	003b      	movs	r3, r7
 80047e6:	2200      	movs	r2, #0
 80047e8:	5e9a      	ldrsh	r2, [r3, r2]
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	2000      	movs	r0, #0
 80047ee:	5e1b      	ldrsh	r3, [r3, r0]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	17d8      	asrs	r0, r3, #31
 80047f4:	181a      	adds	r2, r3, r0
 80047f6:	4042      	eors	r2, r0
 80047f8:	230e      	movs	r3, #14
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 80047fe:	231e      	movs	r3, #30
 8004800:	18fa      	adds	r2, r7, r3
 8004802:	187b      	adds	r3, r7, r1
 8004804:	2100      	movs	r1, #0
 8004806:	5e5b      	ldrsh	r3, [r3, r1]
 8004808:	2b00      	cmp	r3, #0
 800480a:	da00      	bge.n	800480e <write_line+0x11e>
 800480c:	3301      	adds	r3, #1
 800480e:	105b      	asrs	r3, r3, #1
 8004810:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8004812:	1d3a      	adds	r2, r7, #4
 8004814:	003b      	movs	r3, r7
 8004816:	2100      	movs	r1, #0
 8004818:	5e52      	ldrsh	r2, [r2, r1]
 800481a:	2100      	movs	r1, #0
 800481c:	5e5b      	ldrsh	r3, [r3, r1]
 800481e:	429a      	cmp	r2, r3
 8004820:	da04      	bge.n	800482c <write_line+0x13c>
        ystep = 1;
 8004822:	231c      	movs	r3, #28
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	2201      	movs	r2, #1
 8004828:	801a      	strh	r2, [r3, #0]
 800482a:	e04d      	b.n	80048c8 <write_line+0x1d8>
    } else {
        ystep = -1;
 800482c:	231c      	movs	r3, #28
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2201      	movs	r2, #1
 8004832:	4252      	negs	r2, r2
 8004834:	801a      	strh	r2, [r3, #0]
    }

    for (; x0 <= x1; x0++) {
 8004836:	e047      	b.n	80048c8 <write_line+0x1d8>
        if (steep) {
 8004838:	231a      	movs	r3, #26
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	2200      	movs	r2, #0
 800483e:	5e9b      	ldrsh	r3, [r3, r2]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00c      	beq.n	800485e <write_line+0x16e>
            draw_pixel(y0, x0, color);
 8004844:	2330      	movs	r3, #48	; 0x30
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	881a      	ldrh	r2, [r3, #0]
 800484a:	1dbb      	adds	r3, r7, #6
 800484c:	2100      	movs	r1, #0
 800484e:	5e59      	ldrsh	r1, [r3, r1]
 8004850:	1d3b      	adds	r3, r7, #4
 8004852:	2000      	movs	r0, #0
 8004854:	5e1b      	ldrsh	r3, [r3, r0]
 8004856:	0018      	movs	r0, r3
 8004858:	f7ff fd6e 	bl	8004338 <draw_pixel>
 800485c:	e00b      	b.n	8004876 <write_line+0x186>
        } else {
            draw_pixel(x0, y0, color);
 800485e:	2330      	movs	r3, #48	; 0x30
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	881a      	ldrh	r2, [r3, #0]
 8004864:	1d3b      	adds	r3, r7, #4
 8004866:	2100      	movs	r1, #0
 8004868:	5e59      	ldrsh	r1, [r3, r1]
 800486a:	1dbb      	adds	r3, r7, #6
 800486c:	2000      	movs	r0, #0
 800486e:	5e1b      	ldrsh	r3, [r3, r0]
 8004870:	0018      	movs	r0, r3
 8004872:	f7ff fd61 	bl	8004338 <draw_pixel>
        }
        err -= dy;
 8004876:	211e      	movs	r1, #30
 8004878:	187b      	adds	r3, r7, r1
 800487a:	881a      	ldrh	r2, [r3, #0]
 800487c:	230e      	movs	r3, #14
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	b29a      	uxth	r2, r3
 8004886:	187b      	adds	r3, r7, r1
 8004888:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 800488a:	187b      	adds	r3, r7, r1
 800488c:	2200      	movs	r2, #0
 800488e:	5e9b      	ldrsh	r3, [r3, r2]
 8004890:	2b00      	cmp	r3, #0
 8004892:	da11      	bge.n	80048b8 <write_line+0x1c8>
            y0 += ystep;
 8004894:	1d3b      	adds	r3, r7, #4
 8004896:	881a      	ldrh	r2, [r3, #0]
 8004898:	231c      	movs	r3, #28
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	18d3      	adds	r3, r2, r3
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	1d3b      	adds	r3, r7, #4
 80048a4:	801a      	strh	r2, [r3, #0]
            err += dx;
 80048a6:	187b      	adds	r3, r7, r1
 80048a8:	881a      	ldrh	r2, [r3, #0]
 80048aa:	2310      	movs	r3, #16
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	18d3      	adds	r3, r2, r3
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	187b      	adds	r3, r7, r1
 80048b6:	801a      	strh	r2, [r3, #0]
    for (; x0 <= x1; x0++) {
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	2200      	movs	r2, #0
 80048bc:	5e9b      	ldrsh	r3, [r3, r2]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3301      	adds	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	1dbb      	adds	r3, r7, #6
 80048c6:	801a      	strh	r2, [r3, #0]
 80048c8:	1dba      	adds	r2, r7, #6
 80048ca:	1cbb      	adds	r3, r7, #2
 80048cc:	2100      	movs	r1, #0
 80048ce:	5e52      	ldrsh	r2, [r2, r1]
 80048d0:	2100      	movs	r1, #0
 80048d2:	5e5b      	ldrsh	r3, [r3, r1]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	ddaf      	ble.n	8004838 <write_line+0x148>
        }
    }
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	46bd      	mov	sp, r7
 80048de:	b008      	add	sp, #32
 80048e0:	bdb0      	pop	{r4, r5, r7, pc}

080048e2 <write_fast_vLine>:
 * @param x     The top-most x coordinate
 * @param y     The top-most y coordinate
 * @param h     The height in pixels
 * @param color The 16-bit 5-6-5 color to use
 */
void write_fast_vLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80048e2:	b5b0      	push	{r4, r5, r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af02      	add	r7, sp, #8
 80048e8:	0005      	movs	r5, r0
 80048ea:	000c      	movs	r4, r1
 80048ec:	0010      	movs	r0, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	1dbb      	adds	r3, r7, #6
 80048f2:	1c2a      	adds	r2, r5, #0
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	1d3b      	adds	r3, r7, #4
 80048f8:	1c22      	adds	r2, r4, #0
 80048fa:	801a      	strh	r2, [r3, #0]
 80048fc:	1cbb      	adds	r3, r7, #2
 80048fe:	1c02      	adds	r2, r0, #0
 8004900:	801a      	strh	r2, [r3, #0]
 8004902:	003b      	movs	r3, r7
 8004904:	1c0a      	adds	r2, r1, #0
 8004906:	801a      	strh	r2, [r3, #0]
    write_line(x, y, x, y + h - 1, color);
 8004908:	1d3b      	adds	r3, r7, #4
 800490a:	881a      	ldrh	r2, [r3, #0]
 800490c:	1cbb      	adds	r3, r7, #2
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	18d3      	adds	r3, r2, r3
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	b21c      	sxth	r4, r3
 800491a:	1dbb      	adds	r3, r7, #6
 800491c:	2200      	movs	r2, #0
 800491e:	5e9a      	ldrsh	r2, [r3, r2]
 8004920:	1d3b      	adds	r3, r7, #4
 8004922:	2100      	movs	r1, #0
 8004924:	5e59      	ldrsh	r1, [r3, r1]
 8004926:	1dbb      	adds	r3, r7, #6
 8004928:	2000      	movs	r0, #0
 800492a:	5e18      	ldrsh	r0, [r3, r0]
 800492c:	003b      	movs	r3, r7
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	0023      	movs	r3, r4
 8004934:	f7ff fedc 	bl	80046f0 <write_line>
//    fill_rect(x, y, 1, h, color);
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	b002      	add	sp, #8
 800493e:	bdb0      	pop	{r4, r5, r7, pc}

08004940 <fill_rect>:
 * @param y     The top-left corner y coordinate
 * @param w     The width in pixels
 * @param h     The height in pixels
 * @param color The 16-bit 5-6-5 color to use
 */
void fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8004940:	b5b0      	push	{r4, r5, r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	0005      	movs	r5, r0
 8004948:	000c      	movs	r4, r1
 800494a:	0010      	movs	r0, r2
 800494c:	0019      	movs	r1, r3
 800494e:	1dbb      	adds	r3, r7, #6
 8004950:	1c2a      	adds	r2, r5, #0
 8004952:	801a      	strh	r2, [r3, #0]
 8004954:	1d3b      	adds	r3, r7, #4
 8004956:	1c22      	adds	r2, r4, #0
 8004958:	801a      	strh	r2, [r3, #0]
 800495a:	1cbb      	adds	r3, r7, #2
 800495c:	1c02      	adds	r2, r0, #0
 800495e:	801a      	strh	r2, [r3, #0]
 8004960:	003b      	movs	r3, r7
 8004962:	1c0a      	adds	r2, r1, #0
 8004964:	801a      	strh	r2, [r3, #0]
    for (int16_t i = x; i < (x + w); i++) {
 8004966:	230e      	movs	r3, #14
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	1dba      	adds	r2, r7, #6
 800496c:	8812      	ldrh	r2, [r2, #0]
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	e018      	b.n	80049a4 <fill_rect+0x64>
        write_fast_vLine(i, y, h, color);
 8004972:	2320      	movs	r3, #32
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	881c      	ldrh	r4, [r3, #0]
 8004978:	003b      	movs	r3, r7
 800497a:	2200      	movs	r2, #0
 800497c:	5e9a      	ldrsh	r2, [r3, r2]
 800497e:	1d3b      	adds	r3, r7, #4
 8004980:	2100      	movs	r1, #0
 8004982:	5e59      	ldrsh	r1, [r3, r1]
 8004984:	250e      	movs	r5, #14
 8004986:	197b      	adds	r3, r7, r5
 8004988:	2000      	movs	r0, #0
 800498a:	5e18      	ldrsh	r0, [r3, r0]
 800498c:	0023      	movs	r3, r4
 800498e:	f7ff ffa8 	bl	80048e2 <write_fast_vLine>
    for (int16_t i = x; i < (x + w); i++) {
 8004992:	0029      	movs	r1, r5
 8004994:	187b      	adds	r3, r7, r1
 8004996:	2200      	movs	r2, #0
 8004998:	5e9b      	ldrsh	r3, [r3, r2]
 800499a:	b29b      	uxth	r3, r3
 800499c:	3301      	adds	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	230e      	movs	r3, #14
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	2200      	movs	r2, #0
 80049aa:	5e9a      	ldrsh	r2, [r3, r2]
 80049ac:	1dbb      	adds	r3, r7, #6
 80049ae:	2100      	movs	r1, #0
 80049b0:	5e59      	ldrsh	r1, [r3, r1]
 80049b2:	1cbb      	adds	r3, r7, #2
 80049b4:	2000      	movs	r0, #0
 80049b6:	5e1b      	ldrsh	r3, [r3, r0]
 80049b8:	18cb      	adds	r3, r1, r3
 80049ba:	429a      	cmp	r2, r3
 80049bc:	dbd9      	blt.n	8004972 <fill_rect+0x32>
    }
}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b004      	add	sp, #16
 80049c6:	bdb0      	pop	{r4, r5, r7, pc}

080049c8 <draw_char>:
 * @param color     The color of the char
 * @param bg        The background color of the char
 * @param size_x    The width of the char
 * @param size_y    The height of the char
 */
void draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80049c8:	b5b0      	push	{r4, r5, r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	0005      	movs	r5, r0
 80049d0:	000c      	movs	r4, r1
 80049d2:	0010      	movs	r0, r2
 80049d4:	0019      	movs	r1, r3
 80049d6:	1dbb      	adds	r3, r7, #6
 80049d8:	1c2a      	adds	r2, r5, #0
 80049da:	801a      	strh	r2, [r3, #0]
 80049dc:	1d3b      	adds	r3, r7, #4
 80049de:	1c22      	adds	r2, r4, #0
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	1cfb      	adds	r3, r7, #3
 80049e4:	1c02      	adds	r2, r0, #0
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	003b      	movs	r3, r7
 80049ea:	1c0a      	adds	r2, r1, #0
 80049ec:	801a      	strh	r2, [r3, #0]
    // TODO: add handling for non-classic fonts (if possible)
    if ((x >= width) ||                 // Clip right
 80049ee:	1dbb      	adds	r3, r7, #6
 80049f0:	2200      	movs	r2, #0
 80049f2:	5e9b      	ldrsh	r3, [r3, r2]
 80049f4:	4aac      	ldr	r2, [pc, #688]	; (8004ca8 <draw_char+0x2e0>)
 80049f6:	8812      	ldrh	r2, [r2, #0]
 80049f8:	4293      	cmp	r3, r2
 80049fa:	da1d      	bge.n	8004a38 <draw_char+0x70>
        (y >= height) ||                // Clip bottom
 80049fc:	1d3b      	adds	r3, r7, #4
 80049fe:	2200      	movs	r2, #0
 8004a00:	5e9b      	ldrsh	r3, [r3, r2]
 8004a02:	4aaa      	ldr	r2, [pc, #680]	; (8004cac <draw_char+0x2e4>)
 8004a04:	8812      	ldrh	r2, [r2, #0]
    if ((x >= width) ||                 // Clip right
 8004a06:	4293      	cmp	r3, r2
 8004a08:	da16      	bge.n	8004a38 <draw_char+0x70>
        ((x + 6 * size_x - 1) < 0) ||   // Clip left
 8004a0a:	1dbb      	adds	r3, r7, #6
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	5e59      	ldrsh	r1, [r3, r1]
 8004a10:	2324      	movs	r3, #36	; 0x24
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	0013      	movs	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	189b      	adds	r3, r3, r2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	18cb      	adds	r3, r1, r3
        (y >= height) ||                // Clip bottom
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	dd09      	ble.n	8004a38 <draw_char+0x70>
        ((y + 8 * size_y - 1) < 0)) {   // Clip top
 8004a24:	1d3b      	adds	r3, r7, #4
 8004a26:	2200      	movs	r2, #0
 8004a28:	5e9a      	ldrsh	r2, [r3, r2]
 8004a2a:	2328      	movs	r3, #40	; 0x28
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	18d3      	adds	r3, r2, r3
        ((x + 6 * size_x - 1) < 0) ||   // Clip left
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	dc04      	bgt.n	8004a42 <draw_char+0x7a>
        serial_println("CLIPPING TEXT");
 8004a38:	4b9d      	ldr	r3, [pc, #628]	; (8004cb0 <draw_char+0x2e8>)
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f001 fd6c 	bl	8006518 <serial_println>
        return;
 8004a40:	e12e      	b.n	8004ca0 <draw_char+0x2d8>
    // There was an inline patch from Adafruit for an older version of glcdfont.c that was missing a character
    // This version of drawChar relies on the newer version of glcdfont.c, so the fix isn't implemented here
    // The fix in question goes something like this:
    // if (old_glcdfont && (c >= 176)) c++;

    for (int8_t i = 0; i < 5; i++) {
 8004a42:	230f      	movs	r3, #15
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e0e1      	b.n	8004c10 <draw_char+0x248>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8004a4c:	1cfb      	adds	r3, r7, #3
 8004a4e:	781a      	ldrb	r2, [r3, #0]
 8004a50:	0013      	movs	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	189a      	adds	r2, r3, r2
 8004a56:	230f      	movs	r3, #15
 8004a58:	18fb      	adds	r3, r7, r3
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b25b      	sxtb	r3, r3
 8004a5e:	18d2      	adds	r2, r2, r3
 8004a60:	230e      	movs	r3, #14
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	4993      	ldr	r1, [pc, #588]	; (8004cb4 <draw_char+0x2ec>)
 8004a66:	5c8a      	ldrb	r2, [r1, r2]
 8004a68:	701a      	strb	r2, [r3, #0]

        for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8004a6a:	230d      	movs	r3, #13
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e0bd      	b.n	8004bf0 <draw_char+0x228>
            if (line & 1) {
 8004a74:	230e      	movs	r3, #14
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d050      	beq.n	8004b22 <draw_char+0x15a>
                if (size_x == 1 && size_y == 1) {
 8004a80:	2324      	movs	r3, #36	; 0x24
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d11e      	bne.n	8004ac8 <draw_char+0x100>
 8004a8a:	2328      	movs	r3, #40	; 0x28
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d119      	bne.n	8004ac8 <draw_char+0x100>
                    draw_pixel(x + i, y + j, color);
 8004a94:	230f      	movs	r3, #15
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	b25b      	sxtb	r3, r3
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	1dbb      	adds	r3, r7, #6
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	18d3      	adds	r3, r2, r3
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	b218      	sxth	r0, r3
 8004aa8:	230d      	movs	r3, #13
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	b25b      	sxtb	r3, r3
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	18d3      	adds	r3, r2, r3
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	b219      	sxth	r1, r3
 8004abc:	003b      	movs	r3, r7
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	001a      	movs	r2, r3
 8004ac2:	f7ff fc39 	bl	8004338 <draw_pixel>
 8004ac6:	e084      	b.n	8004bd2 <draw_char+0x20a>
                } else {
                    fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8004ac8:	230f      	movs	r3, #15
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	b25b      	sxtb	r3, r3
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2424      	movs	r4, #36	; 0x24
 8004ad4:	193a      	adds	r2, r7, r4
 8004ad6:	7812      	ldrb	r2, [r2, #0]
 8004ad8:	b292      	uxth	r2, r2
 8004ada:	4353      	muls	r3, r2
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	1dbb      	adds	r3, r7, #6
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	18d3      	adds	r3, r2, r3
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	b218      	sxth	r0, r3
 8004ae8:	230d      	movs	r3, #13
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	b25b      	sxtb	r3, r3
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2528      	movs	r5, #40	; 0x28
 8004af4:	197a      	adds	r2, r7, r5
 8004af6:	7812      	ldrb	r2, [r2, #0]
 8004af8:	b292      	uxth	r2, r2
 8004afa:	4353      	muls	r3, r2
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	18d3      	adds	r3, r2, r3
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	b219      	sxth	r1, r3
 8004b08:	193b      	adds	r3, r7, r4
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	b21a      	sxth	r2, r3
 8004b0e:	197b      	adds	r3, r7, r5
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	b21c      	sxth	r4, r3
 8004b14:	003b      	movs	r3, r7
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	0023      	movs	r3, r4
 8004b1c:	f7ff ff10 	bl	8004940 <fill_rect>
 8004b20:	e057      	b.n	8004bd2 <draw_char+0x20a>
                }
            } else if (bg != color) {
 8004b22:	2420      	movs	r4, #32
 8004b24:	193b      	adds	r3, r7, r4
 8004b26:	0039      	movs	r1, r7
 8004b28:	881a      	ldrh	r2, [r3, #0]
 8004b2a:	880b      	ldrh	r3, [r1, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d050      	beq.n	8004bd2 <draw_char+0x20a>
                if (size_x == 1 && size_y == 1) {
 8004b30:	2324      	movs	r3, #36	; 0x24
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d11e      	bne.n	8004b78 <draw_char+0x1b0>
 8004b3a:	2328      	movs	r3, #40	; 0x28
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d119      	bne.n	8004b78 <draw_char+0x1b0>
                    draw_pixel(x + i, y + j, bg);
 8004b44:	230f      	movs	r3, #15
 8004b46:	18fb      	adds	r3, r7, r3
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	b25b      	sxtb	r3, r3
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	1dbb      	adds	r3, r7, #6
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	b218      	sxth	r0, r3
 8004b58:	230d      	movs	r3, #13
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b25b      	sxtb	r3, r3
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	1d3b      	adds	r3, r7, #4
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	18d3      	adds	r3, r2, r3
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	b219      	sxth	r1, r3
 8004b6c:	193b      	adds	r3, r7, r4
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	001a      	movs	r2, r3
 8004b72:	f7ff fbe1 	bl	8004338 <draw_pixel>
 8004b76:	e02c      	b.n	8004bd2 <draw_char+0x20a>
                } else {
                    fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8004b78:	230f      	movs	r3, #15
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2424      	movs	r4, #36	; 0x24
 8004b84:	193a      	adds	r2, r7, r4
 8004b86:	7812      	ldrb	r2, [r2, #0]
 8004b88:	b292      	uxth	r2, r2
 8004b8a:	4353      	muls	r3, r2
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	1dbb      	adds	r3, r7, #6
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	18d3      	adds	r3, r2, r3
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	b218      	sxth	r0, r3
 8004b98:	230d      	movs	r3, #13
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b25b      	sxtb	r3, r3
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2528      	movs	r5, #40	; 0x28
 8004ba4:	197a      	adds	r2, r7, r5
 8004ba6:	7812      	ldrb	r2, [r2, #0]
 8004ba8:	b292      	uxth	r2, r2
 8004baa:	4353      	muls	r3, r2
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	18d3      	adds	r3, r2, r3
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	b219      	sxth	r1, r3
 8004bb8:	193b      	adds	r3, r7, r4
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	b21a      	sxth	r2, r3
 8004bbe:	197b      	adds	r3, r7, r5
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b21c      	sxth	r4, r3
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	18fb      	adds	r3, r7, r3
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	0023      	movs	r3, r4
 8004bce:	f7ff feb7 	bl	8004940 <fill_rect>
        for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8004bd2:	210d      	movs	r1, #13
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	b25b      	sxtb	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	220e      	movs	r2, #14
 8004be6:	18bb      	adds	r3, r7, r2
 8004be8:	18ba      	adds	r2, r7, r2
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	0852      	lsrs	r2, r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	230d      	movs	r3, #13
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	2b07      	cmp	r3, #7
 8004bfa:	dc00      	bgt.n	8004bfe <draw_char+0x236>
 8004bfc:	e73a      	b.n	8004a74 <draw_char+0xac>
    for (int8_t i = 0; i < 5; i++) {
 8004bfe:	210f      	movs	r1, #15
 8004c00:	187b      	adds	r3, r7, r1
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	b25b      	sxtb	r3, r3
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	187b      	adds	r3, r7, r1
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	230f      	movs	r3, #15
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	b25b      	sxtb	r3, r3
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	dc00      	bgt.n	8004c1e <draw_char+0x256>
 8004c1c:	e716      	b.n	8004a4c <draw_char+0x84>
                }
            }
        } // End inner for loop
    } // End outer for loop

    if (bg != color) {
 8004c1e:	2420      	movs	r4, #32
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	0039      	movs	r1, r7
 8004c24:	881a      	ldrh	r2, [r3, #0]
 8004c26:	880b      	ldrh	r3, [r1, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d039      	beq.n	8004ca0 <draw_char+0x2d8>
        if (size_x == 1 && size_y == 1) {
 8004c2c:	2324      	movs	r3, #36	; 0x24
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d113      	bne.n	8004c5e <draw_char+0x296>
 8004c36:	2328      	movs	r3, #40	; 0x28
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d10e      	bne.n	8004c5e <draw_char+0x296>
            write_fast_vLine(x + 5, y, 8, bg);
 8004c40:	1dbb      	adds	r3, r7, #6
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	3305      	adds	r3, #5
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	b218      	sxth	r0, r3
 8004c4a:	193b      	adds	r3, r7, r4
 8004c4c:	881a      	ldrh	r2, [r3, #0]
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	2100      	movs	r1, #0
 8004c52:	5e59      	ldrsh	r1, [r3, r1]
 8004c54:	0013      	movs	r3, r2
 8004c56:	2208      	movs	r2, #8
 8004c58:	f7ff fe43 	bl	80048e2 <write_fast_vLine>
 8004c5c:	e020      	b.n	8004ca0 <draw_char+0x2d8>
        } else {
            fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8004c5e:	2124      	movs	r1, #36	; 0x24
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	1c1a      	adds	r2, r3, #0
 8004c68:	0092      	lsls	r2, r2, #2
 8004c6a:	18d3      	adds	r3, r2, r3
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	1dbb      	adds	r3, r7, #6
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	18d3      	adds	r3, r2, r3
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	b218      	sxth	r0, r3
 8004c78:	187b      	adds	r3, r7, r1
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	b21a      	sxth	r2, r3
 8004c7e:	2328      	movs	r3, #40	; 0x28
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	b21c      	sxth	r4, r3
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	2100      	movs	r1, #0
 8004c90:	5e59      	ldrsh	r1, [r3, r1]
 8004c92:	2320      	movs	r3, #32
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	0023      	movs	r3, r4
 8004c9c:	f7ff fe50 	bl	8004940 <fill_rect>
        }
    }
}
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b004      	add	sp, #16
 8004ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	200001d2 	.word	0x200001d2
 8004cac:	200001d0 	.word	0x200001d0
 8004cb0:	0800d104 	.word	0x0800d104
 8004cb4:	0800d984 	.word	0x0800d984

08004cb8 <write>:

/*!
 * @brief This function draws a character to the display at the current location of the cursor.
 * @param c
 */
void write(uint8_t c) {
 8004cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af04      	add	r7, sp, #16
 8004cbe:	0002      	movs	r2, r0
 8004cc0:	1dfb      	adds	r3, r7, #7
 8004cc2:	701a      	strb	r2, [r3, #0]
    // TODO: add handling for non-classic fonts (if possible)

    if (c == '\n') {                // Newline?
 8004cc4:	1dfb      	adds	r3, r7, #7
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b0a      	cmp	r3, #10
 8004cca:	d113      	bne.n	8004cf4 <write+0x3c>
        cursor_x = margin_x;        // Reset x to the margin
 8004ccc:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <write+0x114>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b21a      	sxth	r2, r3
 8004cd2:	4b3f      	ldr	r3, [pc, #252]	; (8004dd0 <write+0x118>)
 8004cd4:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize_y * 8; // Advance y by one line
 8004cd6:	4b3f      	ldr	r3, [pc, #252]	; (8004dd4 <write+0x11c>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	4b3d      	ldr	r3, [pc, #244]	; (8004dd8 <write+0x120>)
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	5e5b      	ldrsh	r3, [r3, r1]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	18d3      	adds	r3, r2, r3
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	b21a      	sxth	r2, r3
 8004cee:	4b3a      	ldr	r3, [pc, #232]	; (8004dd8 <write+0x120>)
 8004cf0:	801a      	strh	r2, [r3, #0]
        }

        draw_char(cursor_x, cursor_y, c, text_color, text_bg_color, textsize_x, textsize_y);
        cursor_x += textsize_x * 6; // Advance x by one character
    }
}
 8004cf2:	e066      	b.n	8004dc2 <write+0x10a>
    } else if (c != '\r') {         // Ignore carriage returns
 8004cf4:	1dfb      	adds	r3, r7, #7
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b0d      	cmp	r3, #13
 8004cfa:	d062      	beq.n	8004dc2 <write+0x10a>
        if (wrap && ((cursor_x + textsize_x * 6) > width)) {    // Off right?
 8004cfc:	4b37      	ldr	r3, [pc, #220]	; (8004ddc <write+0x124>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d022      	beq.n	8004d4a <write+0x92>
 8004d04:	4b32      	ldr	r3, [pc, #200]	; (8004dd0 <write+0x118>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	5e9b      	ldrsh	r3, [r3, r2]
 8004d0a:	0019      	movs	r1, r3
 8004d0c:	4b34      	ldr	r3, [pc, #208]	; (8004de0 <write+0x128>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	001a      	movs	r2, r3
 8004d12:	0013      	movs	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	18cb      	adds	r3, r1, r3
 8004d1c:	4a31      	ldr	r2, [pc, #196]	; (8004de4 <write+0x12c>)
 8004d1e:	8812      	ldrh	r2, [r2, #0]
 8004d20:	4293      	cmp	r3, r2
 8004d22:	dd12      	ble.n	8004d4a <write+0x92>
            cursor_x = margin_x;        // Reset x to the margin
 8004d24:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <write+0x114>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	b21a      	sxth	r2, r3
 8004d2a:	4b29      	ldr	r3, [pc, #164]	; (8004dd0 <write+0x118>)
 8004d2c:	801a      	strh	r2, [r3, #0]
            cursor_y += textsize_y * 8; // Advance y one line
 8004d2e:	4b29      	ldr	r3, [pc, #164]	; (8004dd4 <write+0x11c>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	4b27      	ldr	r3, [pc, #156]	; (8004dd8 <write+0x120>)
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	5e5b      	ldrsh	r3, [r3, r1]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	18d3      	adds	r3, r2, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	b21a      	sxth	r2, r3
 8004d46:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <write+0x120>)
 8004d48:	801a      	strh	r2, [r3, #0]
        if ((cursor_y + textsize_y * 8) > height) { // Off bottom?
 8004d4a:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <write+0x120>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	5e9b      	ldrsh	r3, [r3, r2]
 8004d50:	001a      	movs	r2, r3
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <write+0x11c>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	18d3      	adds	r3, r2, r3
 8004d5a:	4a23      	ldr	r2, [pc, #140]	; (8004de8 <write+0x130>)
 8004d5c:	8812      	ldrh	r2, [r2, #0]
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	dd04      	ble.n	8004d6c <write+0xb4>
            cursor_y = margin_y;                    // Reset y to the margin
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <write+0x134>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	b21a      	sxth	r2, r3
 8004d68:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <write+0x120>)
 8004d6a:	801a      	strh	r2, [r3, #0]
        draw_char(cursor_x, cursor_y, c, text_color, text_bg_color, textsize_x, textsize_y);
 8004d6c:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <write+0x118>)
 8004d6e:	2400      	movs	r4, #0
 8004d70:	5f1c      	ldrsh	r4, [r3, r4]
 8004d72:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <write+0x120>)
 8004d74:	2500      	movs	r5, #0
 8004d76:	5f5d      	ldrsh	r5, [r3, r5]
 8004d78:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <write+0x138>)
 8004d7a:	881e      	ldrh	r6, [r3, #0]
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <write+0x13c>)
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	4a17      	ldr	r2, [pc, #92]	; (8004de0 <write+0x128>)
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	4913      	ldr	r1, [pc, #76]	; (8004dd4 <write+0x11c>)
 8004d86:	7809      	ldrb	r1, [r1, #0]
 8004d88:	1df8      	adds	r0, r7, #7
 8004d8a:	7800      	ldrb	r0, [r0, #0]
 8004d8c:	9102      	str	r1, [sp, #8]
 8004d8e:	9201      	str	r2, [sp, #4]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	0033      	movs	r3, r6
 8004d94:	0002      	movs	r2, r0
 8004d96:	0029      	movs	r1, r5
 8004d98:	0020      	movs	r0, r4
 8004d9a:	f7ff fe15 	bl	80049c8 <draw_char>
        cursor_x += textsize_x * 6; // Advance x by one character
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <write+0x128>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	1c1a      	adds	r2, r3, #0
 8004da6:	1c13      	adds	r3, r2, #0
 8004da8:	18db      	adds	r3, r3, r3
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	18db      	adds	r3, r3, r3
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <write+0x118>)
 8004db2:	2100      	movs	r1, #0
 8004db4:	5e5b      	ldrsh	r3, [r3, r1]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	18d3      	adds	r3, r2, r3
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	b21a      	sxth	r2, r3
 8004dbe:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <write+0x118>)
 8004dc0:	801a      	strh	r2, [r3, #0]
}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b003      	add	sp, #12
 8004dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	200000bc 	.word	0x200000bc
 8004dd0:	200000b8 	.word	0x200000b8
 8004dd4:	20000006 	.word	0x20000006
 8004dd8:	200000ba 	.word	0x200000ba
 8004ddc:	200000c0 	.word	0x200000c0
 8004de0:	20000005 	.word	0x20000005
 8004de4:	200001d2 	.word	0x200001d2
 8004de8:	200001d0 	.word	0x200001d0
 8004dec:	200000bd 	.word	0x200000bd
 8004df0:	20000008 	.word	0x20000008
 8004df4:	200000be 	.word	0x200000be

08004df8 <draw_bitmap>:

void draw_bitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	0004      	movs	r4, r0
 8004e00:	0008      	movs	r0, r1
 8004e02:	60ba      	str	r2, [r7, #8]
 8004e04:	0019      	movs	r1, r3
 8004e06:	230e      	movs	r3, #14
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	1c22      	adds	r2, r4, #0
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	230c      	movs	r3, #12
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	1c02      	adds	r2, r0, #0
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	1dbb      	adds	r3, r7, #6
 8004e18:	1c0a      	adds	r2, r1, #0
 8004e1a:	801a      	strh	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004e1c:	1dbb      	adds	r3, r7, #6
 8004e1e:	2200      	movs	r2, #0
 8004e20:	5e9b      	ldrsh	r3, [r3, r2]
 8004e22:	3307      	adds	r3, #7
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	da00      	bge.n	8004e2a <draw_bitmap+0x32>
 8004e28:	3307      	adds	r3, #7
 8004e2a:	10db      	asrs	r3, r3, #3
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	2310      	movs	r3, #16
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8004e34:	2317      	movs	r3, #23
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]

    for (int16_t j = 0; j < h; j++, y++) {
 8004e3c:	2314      	movs	r3, #20
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	2200      	movs	r2, #0
 8004e42:	801a      	strh	r2, [r3, #0]
 8004e44:	e069      	b.n	8004f1a <draw_bitmap+0x122>
        for (int16_t i = 0; i < w; i++) {
 8004e46:	2312      	movs	r3, #18
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	801a      	strh	r2, [r3, #0]
 8004e4e:	e049      	b.n	8004ee4 <draw_bitmap+0xec>
            if (i & 7)
 8004e50:	2312      	movs	r3, #18
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	001a      	movs	r2, r3
 8004e58:	2307      	movs	r3, #7
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d006      	beq.n	8004e6c <draw_bitmap+0x74>
                byte <<= 1;
 8004e5e:	2317      	movs	r3, #23
 8004e60:	18fa      	adds	r2, r7, r3
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	18db      	adds	r3, r3, r3
 8004e68:	7013      	strb	r3, [r2, #0]
 8004e6a:	e019      	b.n	8004ea0 <draw_bitmap+0xa8>
            else
                byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 8004e6c:	2314      	movs	r3, #20
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	2200      	movs	r2, #0
 8004e72:	5e9b      	ldrsh	r3, [r3, r2]
 8004e74:	2210      	movs	r2, #16
 8004e76:	18ba      	adds	r2, r7, r2
 8004e78:	2100      	movs	r1, #0
 8004e7a:	5e52      	ldrsh	r2, [r2, r1]
 8004e7c:	435a      	muls	r2, r3
 8004e7e:	2312      	movs	r3, #18
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	2100      	movs	r1, #0
 8004e84:	5e5b      	ldrsh	r3, [r3, r1]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	da00      	bge.n	8004e8c <draw_bitmap+0x94>
 8004e8a:	3307      	adds	r3, #7
 8004e8c:	10db      	asrs	r3, r3, #3
 8004e8e:	b21b      	sxth	r3, r3
 8004e90:	18d3      	adds	r3, r2, r3
 8004e92:	001a      	movs	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	189a      	adds	r2, r3, r2
 8004e98:	2317      	movs	r3, #23
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	701a      	strb	r2, [r3, #0]
            if (byte & 0x80)
 8004ea0:	2317      	movs	r3, #23
 8004ea2:	18fb      	adds	r3, r7, r3
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b25b      	sxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da12      	bge.n	8004ed2 <draw_bitmap+0xda>
                draw_pixel(x + i, y, color); // writePixel(x + i, y, color);
 8004eac:	230e      	movs	r3, #14
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	2312      	movs	r3, #18
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	18d3      	adds	r3, r2, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	b218      	sxth	r0, r3
 8004ebe:	232c      	movs	r3, #44	; 0x2c
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	881a      	ldrh	r2, [r3, #0]
 8004ec4:	230c      	movs	r3, #12
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	2100      	movs	r1, #0
 8004eca:	5e5b      	ldrsh	r3, [r3, r1]
 8004ecc:	0019      	movs	r1, r3
 8004ece:	f7ff fa33 	bl	8004338 <draw_pixel>
        for (int16_t i = 0; i < w; i++) {
 8004ed2:	2112      	movs	r1, #18
 8004ed4:	187b      	adds	r3, r7, r1
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	5e9b      	ldrsh	r3, [r3, r2]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3301      	adds	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	187b      	adds	r3, r7, r1
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	2312      	movs	r3, #18
 8004ee6:	18fa      	adds	r2, r7, r3
 8004ee8:	1dbb      	adds	r3, r7, #6
 8004eea:	2100      	movs	r1, #0
 8004eec:	5e52      	ldrsh	r2, [r2, r1]
 8004eee:	2100      	movs	r1, #0
 8004ef0:	5e5b      	ldrsh	r3, [r3, r1]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	dbac      	blt.n	8004e50 <draw_bitmap+0x58>
    for (int16_t j = 0; j < h; j++, y++) {
 8004ef6:	2114      	movs	r1, #20
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	2200      	movs	r2, #0
 8004efc:	5e9b      	ldrsh	r3, [r3, r2]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3301      	adds	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	187b      	adds	r3, r7, r1
 8004f06:	801a      	strh	r2, [r3, #0]
 8004f08:	210c      	movs	r1, #12
 8004f0a:	187b      	adds	r3, r7, r1
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	5e9b      	ldrsh	r3, [r3, r2]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3301      	adds	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	2314      	movs	r3, #20
 8004f1c:	18fa      	adds	r2, r7, r3
 8004f1e:	2328      	movs	r3, #40	; 0x28
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	2100      	movs	r1, #0
 8004f24:	5e52      	ldrsh	r2, [r2, r1]
 8004f26:	2100      	movs	r1, #0
 8004f28:	5e5b      	ldrsh	r3, [r3, r1]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	db8b      	blt.n	8004e46 <draw_bitmap+0x4e>
        }
    }
}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b007      	add	sp, #28
 8004f36:	bd90      	pop	{r4, r7, pc}

08004f38 <printWrite>:

/*!
 * @brief Print a *char string to the display
 * @param str   The string to print
 */
void printWrite (const char *str) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8004f40:	e006      	b.n	8004f50 <printWrite+0x18>
		write(*str++);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f7ff feb4 	bl	8004cb8 <write>
	while (*str) {
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f4      	bne.n	8004f42 <printWrite+0xa>
	}
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b002      	add	sp, #8
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <printChar>:

/*!
 * @brief Print a character to the display
 * @param c     The character to print
 */
void printChar(char c) {
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	0002      	movs	r2, r0
 8004f6a:	1dfb      	adds	r3, r7, #7
 8004f6c:	701a      	strb	r2, [r3, #0]
	write(c);
 8004f6e:	1dfb      	adds	r3, r7, #7
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	0018      	movs	r0, r3
 8004f74:	f7ff fea0 	bl	8004cb8 <write>
}
 8004f78:	46c0      	nop			; (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b002      	add	sp, #8
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <printString>:

/*!
 * @brief Print a char[] string to the display
 * @param str   The string to primt
 */
void printString(const char str[]) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	printWrite(str);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f7ff ffd4 	bl	8004f38 <printWrite>
}
 8004f90:	46c0      	nop			; (mov r8, r8)
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b002      	add	sp, #8
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <printUnsigned>:
/*!
 * @brief Print an unsigned value to the display
 * @param n     The unsigned value
 * @param base  The base of the unsigned value
 */
void printUnsigned(unsigned long n, uint8_t base) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	; 0x30
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	000a      	movs	r2, r1
 8004fa2:	1cfb      	adds	r3, r7, #3
 8004fa4:	701a      	strb	r2, [r3, #0]
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (n == 0) {
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d11b      	bne.n	8004fe8 <printUnsigned+0x50>
		printChar('0');
 8004fb0:	2030      	movs	r0, #48	; 0x30
 8004fb2:	f7ff ffd6 	bl	8004f62 <printChar>
 8004fb6:	e039      	b.n	800502c <printUnsigned+0x94>
		return;
	} 
	while (n > 0) {
		buf[i++] = n % base;
 8004fb8:	1cfb      	adds	r3, r7, #3
 8004fba:	781a      	ldrb	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0011      	movs	r1, r2
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f7fb f927 	bl	8000214 <__aeabi_uidivmod>
 8004fc6:	000b      	movs	r3, r1
 8004fc8:	0019      	movs	r1, r3
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd0:	b2c9      	uxtb	r1, r1
 8004fd2:	220c      	movs	r2, #12
 8004fd4:	18ba      	adds	r2, r7, r2
 8004fd6:	54d1      	strb	r1, [r2, r3]
		n /= base;
 8004fd8:	1cfb      	adds	r3, r7, #3
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	0019      	movs	r1, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fb f892 	bl	8000108 <__udivsi3>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	607b      	str	r3, [r7, #4]
	while (n > 0) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e4      	bne.n	8004fb8 <printUnsigned+0x20>
	}
	for (; i > 0; i--) {
 8004fee:	e01a      	b.n	8005026 <printUnsigned+0x8e>
		printChar((char) (buf[i - 1] < 10 ? '0' + buf[i - 1] : 'A' + buf[i - 1] - 10));
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	210c      	movs	r1, #12
 8004ff6:	187a      	adds	r2, r7, r1
 8004ff8:	5cd3      	ldrb	r3, [r2, r3]
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	d806      	bhi.n	800500c <printUnsigned+0x74>
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	3b01      	subs	r3, #1
 8005002:	187a      	adds	r2, r7, r1
 8005004:	5cd3      	ldrb	r3, [r2, r3]
 8005006:	3330      	adds	r3, #48	; 0x30
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e006      	b.n	800501a <printUnsigned+0x82>
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	3b01      	subs	r3, #1
 8005010:	220c      	movs	r2, #12
 8005012:	18ba      	adds	r2, r7, r2
 8005014:	5cd3      	ldrb	r3, [r2, r3]
 8005016:	3337      	adds	r3, #55	; 0x37
 8005018:	b2db      	uxtb	r3, r3
 800501a:	0018      	movs	r0, r3
 800501c:	f7ff ffa1 	bl	8004f62 <printChar>
	for (; i > 0; i--) {
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	3b01      	subs	r3, #1
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e1      	bne.n	8004ff0 <printUnsigned+0x58>
	}
}
 800502c:	46bd      	mov	sp, r7
 800502e:	b00c      	add	sp, #48	; 0x30
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <printFloat>:
/*!
 * @brief Print a floating point value to the display
 * @param number    The floating point value
 * @param digits    The number of digits to print after the decimal point
 */
void printFloat(double number, uint8_t digits) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	; 0x30
 8005038:	af00      	add	r7, sp, #0
 800503a:	60b8      	str	r0, [r7, #8]
 800503c:	60f9      	str	r1, [r7, #12]
 800503e:	1dfb      	adds	r3, r7, #7
 8005040:	701a      	strb	r2, [r3, #0]
	// Handle negative numbers
	if (number < 0.0) {
 8005042:	2200      	movs	r2, #0
 8005044:	2300      	movs	r3, #0
 8005046:	68b8      	ldr	r0, [r7, #8]
 8005048:	68f9      	ldr	r1, [r7, #12]
 800504a:	f7fb f8ff 	bl	800024c <__aeabi_dcmplt>
 800504e:	1e03      	subs	r3, r0, #0
 8005050:	d009      	beq.n	8005066 <printFloat+0x32>
		printChar('-');
 8005052:	202d      	movs	r0, #45	; 0x2d
 8005054:	f7ff ff85 	bl	8004f62 <printChar>
		number = -number;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	0612      	lsls	r2, r2, #24
 8005062:	4053      	eors	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
 8005066:	2200      	movs	r2, #0
 8005068:	4b3b      	ldr	r3, [pc, #236]	; (8005158 <printFloat+0x124>)
 800506a:	62ba      	str	r2, [r7, #40]	; 0x28
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint8_t i = 0; i < digits; ++i) {
 800506e:	2327      	movs	r3, #39	; 0x27
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	2200      	movs	r2, #0
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e00f      	b.n	8005098 <printFloat+0x64>
		rounding /= 10.0;
 8005078:	2200      	movs	r2, #0
 800507a:	4b38      	ldr	r3, [pc, #224]	; (800515c <printFloat+0x128>)
 800507c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800507e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005080:	f7fc fc90 	bl	80019a4 <__aeabi_ddiv>
 8005084:	0002      	movs	r2, r0
 8005086:	000b      	movs	r3, r1
 8005088:	62ba      	str	r2, [r7, #40]	; 0x28
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint8_t i = 0; i < digits; ++i) {
 800508c:	2227      	movs	r2, #39	; 0x27
 800508e:	18bb      	adds	r3, r7, r2
 8005090:	18ba      	adds	r2, r7, r2
 8005092:	7812      	ldrb	r2, [r2, #0]
 8005094:	3201      	adds	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	2327      	movs	r3, #39	; 0x27
 800509a:	18fa      	adds	r2, r7, r3
 800509c:	1dfb      	adds	r3, r7, #7
 800509e:	7812      	ldrb	r2, [r2, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3e8      	bcc.n	8005078 <printFloat+0x44>
	}
	number += rounding;
 80050a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	68b8      	ldr	r0, [r7, #8]
 80050ac:	68f9      	ldr	r1, [r7, #12]
 80050ae:	f7fc f90f 	bl	80012d0 <__aeabi_dadd>
 80050b2:	0002      	movs	r2, r0
 80050b4:	000b      	movs	r3, r1
 80050b6:	60ba      	str	r2, [r7, #8]
 80050b8:	60fb      	str	r3, [r7, #12]

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
 80050ba:	68b8      	ldr	r0, [r7, #8]
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	f7fb f96f 	bl	80003a0 <__aeabi_d2uiz>
 80050c2:	0003      	movs	r3, r0
 80050c4:	617b      	str	r3, [r7, #20]
	double remainder = number - (double)int_part;
 80050c6:	6978      	ldr	r0, [r7, #20]
 80050c8:	f7fd fed6 	bl	8002e78 <__aeabi_ui2d>
 80050cc:	0002      	movs	r2, r0
 80050ce:	000b      	movs	r3, r1
 80050d0:	68b8      	ldr	r0, [r7, #8]
 80050d2:	68f9      	ldr	r1, [r7, #12]
 80050d4:	f7fd fad8 	bl	8002688 <__aeabi_dsub>
 80050d8:	0002      	movs	r2, r0
 80050da:	000b      	movs	r3, r1
 80050dc:	61ba      	str	r2, [r7, #24]
 80050de:	61fb      	str	r3, [r7, #28]
	printUnsigned(int_part, 10);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	210a      	movs	r1, #10
 80050e4:	0018      	movs	r0, r3
 80050e6:	f7ff ff57 	bl	8004f98 <printUnsigned>

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
 80050ea:	1dfb      	adds	r3, r7, #7
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d025      	beq.n	800513e <printFloat+0x10a>
		printChar('.'); 
 80050f2:	202e      	movs	r0, #46	; 0x2e
 80050f4:	f7ff ff35 	bl	8004f62 <printChar>
	}

	// Extract digits from the remainder one at a time
	while (digits-- > 0) {
 80050f8:	e021      	b.n	800513e <printFloat+0x10a>
		remainder *= 10.0;
 80050fa:	2200      	movs	r2, #0
 80050fc:	4b17      	ldr	r3, [pc, #92]	; (800515c <printFloat+0x128>)
 80050fe:	69b8      	ldr	r0, [r7, #24]
 8005100:	69f9      	ldr	r1, [r7, #28]
 8005102:	f7fd f855 	bl	80021b0 <__aeabi_dmul>
 8005106:	0002      	movs	r2, r0
 8005108:	000b      	movs	r3, r1
 800510a:	61ba      	str	r2, [r7, #24]
 800510c:	61fb      	str	r3, [r7, #28]
		int toPrint = (int) remainder;
 800510e:	69b8      	ldr	r0, [r7, #24]
 8005110:	69f9      	ldr	r1, [r7, #28]
 8005112:	f7fd fe4b 	bl	8002dac <__aeabi_d2iz>
 8005116:	0003      	movs	r3, r0
 8005118:	613b      	str	r3, [r7, #16]
		printUnsigned(toPrint, 10);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	210a      	movs	r1, #10
 800511e:	0018      	movs	r0, r3
 8005120:	f7ff ff3a 	bl	8004f98 <printUnsigned>
		remainder -= toPrint; 
 8005124:	6938      	ldr	r0, [r7, #16]
 8005126:	f7fd fe77 	bl	8002e18 <__aeabi_i2d>
 800512a:	0002      	movs	r2, r0
 800512c:	000b      	movs	r3, r1
 800512e:	69b8      	ldr	r0, [r7, #24]
 8005130:	69f9      	ldr	r1, [r7, #28]
 8005132:	f7fd faa9 	bl	8002688 <__aeabi_dsub>
 8005136:	0002      	movs	r2, r0
 8005138:	000b      	movs	r3, r1
 800513a:	61ba      	str	r2, [r7, #24]
 800513c:	61fb      	str	r3, [r7, #28]
	while (digits-- > 0) {
 800513e:	1dfb      	adds	r3, r7, #7
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	1dfa      	adds	r2, r7, #7
 8005144:	1e59      	subs	r1, r3, #1
 8005146:	7011      	strb	r1, [r2, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1d6      	bne.n	80050fa <printFloat+0xc6>
	} 
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	46bd      	mov	sp, r7
 8005152:	b00c      	add	sp, #48	; 0x30
 8005154:	bd80      	pop	{r7, pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	3fe00000 	.word	0x3fe00000
 800515c:	40240000 	.word	0x40240000

08005160 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b089      	sub	sp, #36	; 0x24
 8005164:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005166:	240c      	movs	r4, #12
 8005168:	193b      	adds	r3, r7, r4
 800516a:	0018      	movs	r0, r3
 800516c:	2314      	movs	r3, #20
 800516e:	001a      	movs	r2, r3
 8005170:	2100      	movs	r1, #0
 8005172:	f007 fe88 	bl	800ce86 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005176:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <MX_GPIO_Init+0x184>)
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4b5a      	ldr	r3, [pc, #360]	; (80052e4 <MX_GPIO_Init+0x184>)
 800517c:	2101      	movs	r1, #1
 800517e:	430a      	orrs	r2, r1
 8005180:	62da      	str	r2, [r3, #44]	; 0x2c
 8005182:	4b58      	ldr	r3, [pc, #352]	; (80052e4 <MX_GPIO_Init+0x184>)
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	2201      	movs	r2, #1
 8005188:	4013      	ands	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800518e:	4b55      	ldr	r3, [pc, #340]	; (80052e4 <MX_GPIO_Init+0x184>)
 8005190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005192:	4b54      	ldr	r3, [pc, #336]	; (80052e4 <MX_GPIO_Init+0x184>)
 8005194:	2102      	movs	r1, #2
 8005196:	430a      	orrs	r2, r1
 8005198:	62da      	str	r2, [r3, #44]	; 0x2c
 800519a:	4b52      	ldr	r3, [pc, #328]	; (80052e4 <MX_GPIO_Init+0x184>)
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	2202      	movs	r2, #2
 80051a0:	4013      	ands	r3, r2
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051a6:	4b4f      	ldr	r3, [pc, #316]	; (80052e4 <MX_GPIO_Init+0x184>)
 80051a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051aa:	4b4e      	ldr	r3, [pc, #312]	; (80052e4 <MX_GPIO_Init+0x184>)
 80051ac:	2104      	movs	r1, #4
 80051ae:	430a      	orrs	r2, r1
 80051b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80051b2:	4b4c      	ldr	r3, [pc, #304]	; (80052e4 <MX_GPIO_Init+0x184>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	2204      	movs	r2, #4
 80051b8:	4013      	ands	r3, r2
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_DC_Pin|EN_5V_Pin|SRAM_CS_Pin, GPIO_PIN_RESET);
 80051be:	23e0      	movs	r3, #224	; 0xe0
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4849      	ldr	r0, [pc, #292]	; (80052e8 <MX_GPIO_Init+0x188>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	0019      	movs	r1, r3
 80051c8:	f003 fe0e 	bl	8008de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	0059      	lsls	r1, r3, #1
 80051d0:	23a0      	movs	r3, #160	; 0xa0
 80051d2:	05db      	lsls	r3, r3, #23
 80051d4:	2200      	movs	r2, #0
 80051d6:	0018      	movs	r0, r3
 80051d8:	f003 fe06 	bl	8008de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 80051dc:	4b43      	ldr	r3, [pc, #268]	; (80052ec <MX_GPIO_Init+0x18c>)
 80051de:	2200      	movs	r2, #0
 80051e0:	2170      	movs	r1, #112	; 0x70
 80051e2:	0018      	movs	r0, r3
 80051e4:	f003 fe00 	bl	8008de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PROX_INT_Pin;
 80051e8:	193b      	adds	r3, r7, r4
 80051ea:	2204      	movs	r2, #4
 80051ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80051ee:	193b      	adds	r3, r7, r4
 80051f0:	4a3f      	ldr	r2, [pc, #252]	; (80052f0 <MX_GPIO_Init+0x190>)
 80051f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80051f4:	193b      	adds	r3, r7, r4
 80051f6:	2202      	movs	r2, #2
 80051f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PROX_INT_GPIO_Port, &GPIO_InitStruct);
 80051fa:	193b      	adds	r3, r7, r4
 80051fc:	4a3b      	ldr	r2, [pc, #236]	; (80052ec <MX_GPIO_Init+0x18c>)
 80051fe:	0019      	movs	r1, r3
 8005200:	0010      	movs	r0, r2
 8005202:	f003 fc7b 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_DC_Pin;
 8005206:	193b      	adds	r3, r7, r4
 8005208:	2280      	movs	r2, #128	; 0x80
 800520a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800520c:	193b      	adds	r3, r7, r4
 800520e:	2201      	movs	r2, #1
 8005210:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005212:	193b      	adds	r3, r7, r4
 8005214:	2200      	movs	r2, #0
 8005216:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005218:	193b      	adds	r3, r7, r4
 800521a:	2201      	movs	r2, #1
 800521c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_DC_GPIO_Port, &GPIO_InitStruct);
 800521e:	193b      	adds	r3, r7, r4
 8005220:	4a31      	ldr	r2, [pc, #196]	; (80052e8 <MX_GPIO_Init+0x188>)
 8005222:	0019      	movs	r1, r3
 8005224:	0010      	movs	r0, r2
 8005226:	f003 fc69 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_5V_Pin|SRAM_CS_Pin;
 800522a:	0021      	movs	r1, r4
 800522c:	187b      	adds	r3, r7, r1
 800522e:	22c0      	movs	r2, #192	; 0xc0
 8005230:	0092      	lsls	r2, r2, #2
 8005232:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005234:	000c      	movs	r4, r1
 8005236:	193b      	adds	r3, r7, r4
 8005238:	2201      	movs	r2, #1
 800523a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523c:	193b      	adds	r3, r7, r4
 800523e:	2200      	movs	r2, #0
 8005240:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005242:	193b      	adds	r3, r7, r4
 8005244:	2200      	movs	r2, #0
 8005246:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005248:	193b      	adds	r3, r7, r4
 800524a:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <MX_GPIO_Init+0x188>)
 800524c:	0019      	movs	r1, r3
 800524e:	0010      	movs	r0, r2
 8005250:	f003 fc54 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005254:	0021      	movs	r1, r4
 8005256:	187b      	adds	r3, r7, r1
 8005258:	2280      	movs	r2, #128	; 0x80
 800525a:	0052      	lsls	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800525e:	000c      	movs	r4, r1
 8005260:	193b      	adds	r3, r7, r4
 8005262:	2201      	movs	r2, #1
 8005264:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005266:	193b      	adds	r3, r7, r4
 8005268:	2200      	movs	r2, #0
 800526a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800526c:	193b      	adds	r3, r7, r4
 800526e:	2200      	movs	r2, #0
 8005270:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005272:	193a      	adds	r2, r7, r4
 8005274:	23a0      	movs	r3, #160	; 0xa0
 8005276:	05db      	lsls	r3, r3, #23
 8005278:	0011      	movs	r1, r2
 800527a:	0018      	movs	r0, r3
 800527c:	f003 fc3e 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8005280:	193b      	adds	r3, r7, r4
 8005282:	2230      	movs	r2, #48	; 0x30
 8005284:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005286:	193b      	adds	r3, r7, r4
 8005288:	2201      	movs	r2, #1
 800528a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528c:	193b      	adds	r3, r7, r4
 800528e:	2200      	movs	r2, #0
 8005290:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005292:	193b      	adds	r3, r7, r4
 8005294:	2200      	movs	r2, #0
 8005296:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005298:	193b      	adds	r3, r7, r4
 800529a:	4a14      	ldr	r2, [pc, #80]	; (80052ec <MX_GPIO_Init+0x18c>)
 800529c:	0019      	movs	r1, r3
 800529e:	0010      	movs	r0, r2
 80052a0:	f003 fc2c 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin;
 80052a4:	0021      	movs	r1, r4
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	2240      	movs	r2, #64	; 0x40
 80052aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052ac:	187b      	adds	r3, r7, r1
 80052ae:	2201      	movs	r2, #1
 80052b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b2:	187b      	adds	r3, r7, r1
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80052b8:	187b      	adds	r3, r7, r1
 80052ba:	2201      	movs	r2, #1
 80052bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_CS_GPIO_Port, &GPIO_InitStruct);
 80052be:	187b      	adds	r3, r7, r1
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <MX_GPIO_Init+0x18c>)
 80052c2:	0019      	movs	r1, r3
 80052c4:	0010      	movs	r0, r2
 80052c6:	f003 fc19 	bl	8008afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2102      	movs	r1, #2
 80052ce:	2006      	movs	r0, #6
 80052d0:	f003 fa28 	bl	8008724 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80052d4:	2006      	movs	r0, #6
 80052d6:	f003 fa3a 	bl	800874e <HAL_NVIC_EnableIRQ>

}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	46bd      	mov	sp, r7
 80052de:	b009      	add	sp, #36	; 0x24
 80052e0:	bd90      	pop	{r4, r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	40021000 	.word	0x40021000
 80052e8:	50000800 	.word	0x50000800
 80052ec:	50000400 	.word	0x50000400
 80052f0:	10210000 	.word	0x10210000

080052f4 <hts221_reboot>:

// Global variable
HTS_Cal hts_cal_data;

// Function code
int hts221_reboot() {
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af04      	add	r7, sp, #16
    uint8_t buf[1];			// read buffer

    /* === Reboot HTS221 === */

    //read register
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80052fa:	1dfc      	adds	r4, r7, #7
 80052fc:	4829      	ldr	r0, [pc, #164]	; (80053a4 <hts221_reboot+0xb0>)
 80052fe:	2301      	movs	r3, #1
 8005300:	425b      	negs	r3, r3
 8005302:	9302      	str	r3, [sp, #8]
 8005304:	2301      	movs	r3, #1
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	1d3b      	adds	r3, r7, #4
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2301      	movs	r3, #1
 800530e:	2221      	movs	r2, #33	; 0x21
 8005310:	21be      	movs	r1, #190	; 0xbe
 8005312:	f003 ff71 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005316:	0003      	movs	r3, r0
 8005318:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 800531a:	1dfb      	adds	r3, r7, #7
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <hts221_reboot+0x32>
        return HTS_FAIL;
 8005322:	2300      	movs	r3, #0
 8005324:	e039      	b.n	800539a <hts221_reboot+0xa6>
    }

    //write boot bit
    buf[0] |= HTS_CTRL_REG2_BOOT;
 8005326:	1d3b      	adds	r3, r7, #4
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2280      	movs	r2, #128	; 0x80
 800532c:	4252      	negs	r2, r2
 800532e:	4313      	orrs	r3, r2
 8005330:	b2da      	uxtb	r2, r3
 8005332:	1d3b      	adds	r3, r7, #4
 8005334:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8005336:	1dfc      	adds	r4, r7, #7
 8005338:	481a      	ldr	r0, [pc, #104]	; (80053a4 <hts221_reboot+0xb0>)
 800533a:	2301      	movs	r3, #1
 800533c:	425b      	negs	r3, r3
 800533e:	9302      	str	r3, [sp, #8]
 8005340:	2301      	movs	r3, #1
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	2301      	movs	r3, #1
 800534a:	2221      	movs	r2, #33	; 0x21
 800534c:	21be      	movs	r1, #190	; 0xbe
 800534e:	f003 fe25 	bl	8008f9c <HAL_I2C_Mem_Write>
 8005352:	0003      	movs	r3, r0
 8005354:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8005356:	1dfb      	adds	r3, r7, #7
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <hts221_reboot+0x6e>
        return HTS_FAIL;
 800535e:	2300      	movs	r3, #0
 8005360:	e01b      	b.n	800539a <hts221_reboot+0xa6>
    }

    //wait for device to restart + clear boot bit
    do{
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8005362:	1dfc      	adds	r4, r7, #7
 8005364:	480f      	ldr	r0, [pc, #60]	; (80053a4 <hts221_reboot+0xb0>)
 8005366:	2301      	movs	r3, #1
 8005368:	425b      	negs	r3, r3
 800536a:	9302      	str	r3, [sp, #8]
 800536c:	2301      	movs	r3, #1
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	1d3b      	adds	r3, r7, #4
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2301      	movs	r3, #1
 8005376:	2221      	movs	r2, #33	; 0x21
 8005378:	21be      	movs	r1, #190	; 0xbe
 800537a:	f003 ff3d 	bl	80091f8 <HAL_I2C_Mem_Read>
 800537e:	0003      	movs	r3, r0
 8005380:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8005382:	1dfb      	adds	r3, r7, #7
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <hts221_reboot+0x9a>
            return HTS_FAIL;
 800538a:	2300      	movs	r3, #0
 800538c:	e005      	b.n	800539a <hts221_reboot+0xa6>
        }
    } while (buf[0] & HTS_CTRL_REG2_BOOT);
 800538e:	1d3b      	adds	r3, r7, #4
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	b25b      	sxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	dbe4      	blt.n	8005362 <hts221_reboot+0x6e>

//	serial_println("Rebooted\n");

    return HTS_SUCCESS;
 8005398:	2301      	movs	r3, #1

}
 800539a:	0018      	movs	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	b003      	add	sp, #12
 80053a0:	bd90      	pop	{r4, r7, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	200001e8 	.word	0x200001e8

080053a8 <hts221_init>:

int hts221_init () {
 80053a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053aa:	b08d      	sub	sp, #52	; 0x34
 80053ac:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;	// I2C return status
    uint8_t buf[7];			// read buffer

    if (hts221_reboot() == -1) {
 80053ae:	f7ff ffa1 	bl	80052f4 <hts221_reboot>
 80053b2:	0003      	movs	r3, r0
 80053b4:	3301      	adds	r3, #1
 80053b6:	d105      	bne.n	80053c4 <hts221_init+0x1c>
        serial_println("Reboot FAIL\n");
 80053b8:	4be4      	ldr	r3, [pc, #912]	; (800574c <hts221_init+0x3a4>)
 80053ba:	0018      	movs	r0, r3
 80053bc:	f001 f8ac 	bl	8006518 <serial_println>
        return HTS_FAIL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e214      	b.n	80057ee <hts221_init+0x446>
    }

    /* === Set HTS221 to wake mode === */
    buf[0] = HTS_CTRL_REG1_PD | HTS_CTRL_REG1_BUD;
 80053c4:	1d3b      	adds	r3, r7, #4
 80053c6:	2284      	movs	r2, #132	; 0x84
 80053c8:	701a      	strb	r2, [r3, #0]

    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80053ca:	251f      	movs	r5, #31
 80053cc:	197c      	adds	r4, r7, r5
 80053ce:	48e0      	ldr	r0, [pc, #896]	; (8005750 <hts221_init+0x3a8>)
 80053d0:	2301      	movs	r3, #1
 80053d2:	425b      	negs	r3, r3
 80053d4:	9302      	str	r3, [sp, #8]
 80053d6:	2301      	movs	r3, #1
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	1d3b      	adds	r3, r7, #4
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2301      	movs	r3, #1
 80053e0:	2220      	movs	r2, #32
 80053e2:	21be      	movs	r1, #190	; 0xbe
 80053e4:	f003 fdda 	bl	8008f9c <HAL_I2C_Mem_Write>
 80053e8:	0003      	movs	r3, r0
 80053ea:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 80053ec:	197b      	adds	r3, r7, r5
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <hts221_init+0x50>
        return HTS_FAIL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e1fa      	b.n	80057ee <hts221_init+0x446>
    }
    else  {
        /* === Read in temperature calibration data === */
        // buf[0] = T0_degC_x8
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_degC_x8, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80053f8:	251f      	movs	r5, #31
 80053fa:	197c      	adds	r4, r7, r5
 80053fc:	48d4      	ldr	r0, [pc, #848]	; (8005750 <hts221_init+0x3a8>)
 80053fe:	2301      	movs	r3, #1
 8005400:	425b      	negs	r3, r3
 8005402:	9302      	str	r3, [sp, #8]
 8005404:	2301      	movs	r3, #1
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	1d3b      	adds	r3, r7, #4
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2301      	movs	r3, #1
 800540e:	2232      	movs	r2, #50	; 0x32
 8005410:	21be      	movs	r1, #190	; 0xbe
 8005412:	f003 fef1 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005416:	0003      	movs	r3, r0
 8005418:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 800541a:	197b      	adds	r3, r7, r5
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <hts221_init+0x7e>
            return HTS_FAIL;
 8005422:	2300      	movs	r3, #0
 8005424:	e1e3      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[1] = T1_degC_x8
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_degC_x8, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	3301      	adds	r3, #1
 800542a:	251f      	movs	r5, #31
 800542c:	197c      	adds	r4, r7, r5
 800542e:	48c8      	ldr	r0, [pc, #800]	; (8005750 <hts221_init+0x3a8>)
 8005430:	2201      	movs	r2, #1
 8005432:	4252      	negs	r2, r2
 8005434:	9202      	str	r2, [sp, #8]
 8005436:	2201      	movs	r2, #1
 8005438:	9201      	str	r2, [sp, #4]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	2301      	movs	r3, #1
 800543e:	2233      	movs	r2, #51	; 0x33
 8005440:	21be      	movs	r1, #190	; 0xbe
 8005442:	f003 fed9 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005446:	0003      	movs	r3, r0
 8005448:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 800544a:	197b      	adds	r3, r7, r5
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <hts221_init+0xae>
            return HTS_FAIL;
 8005452:	2300      	movs	r3, #0
 8005454:	e1cb      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[2] = T1_T0_msb
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_T0_msb, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8005456:	1d3b      	adds	r3, r7, #4
 8005458:	3302      	adds	r3, #2
 800545a:	251f      	movs	r5, #31
 800545c:	197c      	adds	r4, r7, r5
 800545e:	48bc      	ldr	r0, [pc, #752]	; (8005750 <hts221_init+0x3a8>)
 8005460:	2201      	movs	r2, #1
 8005462:	4252      	negs	r2, r2
 8005464:	9202      	str	r2, [sp, #8]
 8005466:	2201      	movs	r2, #1
 8005468:	9201      	str	r2, [sp, #4]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	2301      	movs	r3, #1
 800546e:	2235      	movs	r2, #53	; 0x35
 8005470:	21be      	movs	r1, #190	; 0xbe
 8005472:	f003 fec1 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005476:	0003      	movs	r3, r0
 8005478:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 800547a:	197b      	adds	r3, r7, r5
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <hts221_init+0xde>
            return HTS_FAIL;
 8005482:	2300      	movs	r3, #0
 8005484:	e1b3      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[3] = HTS_CAL_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 3, 1, HAL_MAX_DELAY);
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	3303      	adds	r3, #3
 800548a:	251f      	movs	r5, #31
 800548c:	197c      	adds	r4, r7, r5
 800548e:	48b0      	ldr	r0, [pc, #704]	; (8005750 <hts221_init+0x3a8>)
 8005490:	2201      	movs	r2, #1
 8005492:	4252      	negs	r2, r2
 8005494:	9202      	str	r2, [sp, #8]
 8005496:	2201      	movs	r2, #1
 8005498:	9201      	str	r2, [sp, #4]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	2301      	movs	r3, #1
 800549e:	223c      	movs	r2, #60	; 0x3c
 80054a0:	21be      	movs	r1, #190	; 0xbe
 80054a2:	f003 fea9 	bl	80091f8 <HAL_I2C_Mem_Read>
 80054a6:	0003      	movs	r3, r0
 80054a8:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80054aa:	197b      	adds	r3, r7, r5
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <hts221_init+0x10e>
            return HTS_FAIL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e19b      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[4] = HTS_CAL_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 4, 1, HAL_MAX_DELAY);
 80054b6:	1d3b      	adds	r3, r7, #4
 80054b8:	3304      	adds	r3, #4
 80054ba:	251f      	movs	r5, #31
 80054bc:	197c      	adds	r4, r7, r5
 80054be:	48a4      	ldr	r0, [pc, #656]	; (8005750 <hts221_init+0x3a8>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	4252      	negs	r2, r2
 80054c4:	9202      	str	r2, [sp, #8]
 80054c6:	2201      	movs	r2, #1
 80054c8:	9201      	str	r2, [sp, #4]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	2301      	movs	r3, #1
 80054ce:	223d      	movs	r2, #61	; 0x3d
 80054d0:	21be      	movs	r1, #190	; 0xbe
 80054d2:	f003 fe91 	bl	80091f8 <HAL_I2C_Mem_Read>
 80054d6:	0003      	movs	r3, r0
 80054d8:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80054da:	197b      	adds	r3, r7, r5
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <hts221_init+0x13e>
            return HTS_FAIL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e183      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[5] = HTS_CAL_T1_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 5, 1, HAL_MAX_DELAY);
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	3305      	adds	r3, #5
 80054ea:	251f      	movs	r5, #31
 80054ec:	197c      	adds	r4, r7, r5
 80054ee:	4898      	ldr	r0, [pc, #608]	; (8005750 <hts221_init+0x3a8>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	4252      	negs	r2, r2
 80054f4:	9202      	str	r2, [sp, #8]
 80054f6:	2201      	movs	r2, #1
 80054f8:	9201      	str	r2, [sp, #4]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	2301      	movs	r3, #1
 80054fe:	223e      	movs	r2, #62	; 0x3e
 8005500:	21be      	movs	r1, #190	; 0xbe
 8005502:	f003 fe79 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005506:	0003      	movs	r3, r0
 8005508:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 800550a:	197b      	adds	r3, r7, r5
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <hts221_init+0x16e>
            return HTS_FAIL;
 8005512:	2300      	movs	r3, #0
 8005514:	e16b      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[6] = HTS_CAL_T1_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 6, 1, HAL_MAX_DELAY);
 8005516:	1d3b      	adds	r3, r7, #4
 8005518:	3306      	adds	r3, #6
 800551a:	251f      	movs	r5, #31
 800551c:	197c      	adds	r4, r7, r5
 800551e:	488c      	ldr	r0, [pc, #560]	; (8005750 <hts221_init+0x3a8>)
 8005520:	2201      	movs	r2, #1
 8005522:	4252      	negs	r2, r2
 8005524:	9202      	str	r2, [sp, #8]
 8005526:	2201      	movs	r2, #1
 8005528:	9201      	str	r2, [sp, #4]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	2301      	movs	r3, #1
 800552e:	223f      	movs	r2, #63	; 0x3f
 8005530:	21be      	movs	r1, #190	; 0xbe
 8005532:	f003 fe61 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005536:	0003      	movs	r3, r0
 8005538:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 800553a:	197b      	adds	r3, r7, r5
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <hts221_init+0x19e>
            return HTS_FAIL;
 8005542:	2300      	movs	r3, #0
 8005544:	e153      	b.n	80057ee <hts221_init+0x446>
        }

        /* === Process temperature calibration data === */

        uint16_t T0_degC_R32 = buf[0];
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	781a      	ldrb	r2, [r3, #0]
 800554a:	201c      	movs	r0, #28
 800554c:	183b      	adds	r3, r7, r0
 800554e:	801a      	strh	r2, [r3, #0]
        uint16_t T1_degC_R33 = buf[1];
 8005550:	1d3b      	adds	r3, r7, #4
 8005552:	785a      	ldrb	r2, [r3, #1]
 8005554:	241a      	movs	r4, #26
 8005556:	193b      	adds	r3, r7, r4
 8005558:	801a      	strh	r2, [r3, #0]
        uint16_t T1_T0_msb 	= buf[2];
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	789a      	ldrb	r2, [r3, #2]
 800555e:	2518      	movs	r5, #24
 8005560:	197b      	adds	r3, r7, r5
 8005562:	801a      	strh	r2, [r3, #0]
        int16_t T0_OUT = (buf[3] | (buf[4] << 8)); // This should be signed int
 8005564:	1d3b      	adds	r3, r7, #4
 8005566:	78db      	ldrb	r3, [r3, #3]
 8005568:	b219      	sxth	r1, r3
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	791b      	ldrb	r3, [r3, #4]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	b21a      	sxth	r2, r3
 8005572:	2616      	movs	r6, #22
 8005574:	19bb      	adds	r3, r7, r6
 8005576:	430a      	orrs	r2, r1
 8005578:	801a      	strh	r2, [r3, #0]
        int16_t T1_OUT = (buf[5] | (buf[6] << 8)); // This should be signed int
 800557a:	1d3b      	adds	r3, r7, #4
 800557c:	795b      	ldrb	r3, [r3, #5]
 800557e:	b219      	sxth	r1, r3
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	799b      	ldrb	r3, [r3, #6]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	b21a      	sxth	r2, r3
 8005588:	2314      	movs	r3, #20
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	430a      	orrs	r2, r1
 800558e:	801a      	strh	r2, [r3, #0]

        // add msb's for 10 bit values
        T0_degC_R32 |= (T1_T0_msb & 0b0011) << 8;
 8005590:	197b      	adds	r3, r7, r5
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	b21a      	sxth	r2, r3
 8005598:	23c0      	movs	r3, #192	; 0xc0
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4013      	ands	r3, r2
 800559e:	b21a      	sxth	r2, r3
 80055a0:	183b      	adds	r3, r7, r0
 80055a2:	2100      	movs	r1, #0
 80055a4:	5e5b      	ldrsh	r3, [r3, r1]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	b21a      	sxth	r2, r3
 80055aa:	183b      	adds	r3, r7, r0
 80055ac:	801a      	strh	r2, [r3, #0]
        T1_degC_R33 |= (T1_T0_msb & 0b1100) << 6;
 80055ae:	197b      	adds	r3, r7, r5
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	019b      	lsls	r3, r3, #6
 80055b4:	b21a      	sxth	r2, r3
 80055b6:	23c0      	movs	r3, #192	; 0xc0
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4013      	ands	r3, r2
 80055bc:	b21a      	sxth	r2, r3
 80055be:	193b      	adds	r3, r7, r4
 80055c0:	2100      	movs	r1, #0
 80055c2:	5e5b      	ldrsh	r3, [r3, r1]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b21a      	sxth	r2, r3
 80055c8:	193b      	adds	r3, r7, r4
 80055ca:	801a      	strh	r2, [r3, #0]

        // divide by 8
        T0_degC_R32 >>= 3;
 80055cc:	183b      	adds	r3, r7, r0
 80055ce:	183a      	adds	r2, r7, r0
 80055d0:	8812      	ldrh	r2, [r2, #0]
 80055d2:	08d2      	lsrs	r2, r2, #3
 80055d4:	801a      	strh	r2, [r3, #0]
        T1_degC_R33 >>= 3;
 80055d6:	193b      	adds	r3, r7, r4
 80055d8:	193a      	adds	r2, r7, r4
 80055da:	8812      	ldrh	r2, [r2, #0]
 80055dc:	08d2      	lsrs	r2, r2, #3
 80055de:	801a      	strh	r2, [r3, #0]
//        if(hts_cal_ptr == NULL){
//          serial_println("!!! HTS221 - malloc failure");
//          return HTS_FAIL;
//        }

        hts_cal_data.T0_OUT = T0_OUT;
 80055e0:	4b5c      	ldr	r3, [pc, #368]	; (8005754 <hts221_init+0x3ac>)
 80055e2:	19ba      	adds	r2, r7, r6
 80055e4:	8812      	ldrh	r2, [r2, #0]
 80055e6:	801a      	strh	r2, [r3, #0]
        hts_cal_data.correction_factor = (float) (T1_degC_R33 - T0_degC_R32) / (T1_OUT - T0_OUT);
 80055e8:	193b      	adds	r3, r7, r4
 80055ea:	881a      	ldrh	r2, [r3, #0]
 80055ec:	0005      	movs	r5, r0
 80055ee:	183b      	adds	r3, r7, r0
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7fb fe25 	bl	8001244 <__aeabi_i2f>
 80055fa:	1c04      	adds	r4, r0, #0
 80055fc:	2314      	movs	r3, #20
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	2200      	movs	r2, #0
 8005602:	5e9a      	ldrsh	r2, [r3, r2]
 8005604:	19bb      	adds	r3, r7, r6
 8005606:	2100      	movs	r1, #0
 8005608:	5e5b      	ldrsh	r3, [r3, r1]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	0018      	movs	r0, r3
 800560e:	f7fb fe19 	bl	8001244 <__aeabi_i2f>
 8005612:	1c03      	adds	r3, r0, #0
 8005614:	1c19      	adds	r1, r3, #0
 8005616:	1c20      	adds	r0, r4, #0
 8005618:	f7fb f948 	bl	80008ac <__aeabi_fdiv>
 800561c:	1c03      	adds	r3, r0, #0
 800561e:	1c1a      	adds	r2, r3, #0
 8005620:	4b4c      	ldr	r3, [pc, #304]	; (8005754 <hts221_init+0x3ac>)
 8005622:	605a      	str	r2, [r3, #4]
        hts_cal_data.offset = T0_degC_R32;
 8005624:	197b      	adds	r3, r7, r5
 8005626:	2200      	movs	r2, #0
 8005628:	5e9a      	ldrsh	r2, [r3, r2]
 800562a:	4b4a      	ldr	r3, [pc, #296]	; (8005754 <hts221_init+0x3ac>)
 800562c:	811a      	strh	r2, [r3, #8]

        /*=== Read in humidity calibration data ===*/
        // buf[0] = HTS_CAL_H0_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 800562e:	251f      	movs	r5, #31
 8005630:	197c      	adds	r4, r7, r5
 8005632:	4847      	ldr	r0, [pc, #284]	; (8005750 <hts221_init+0x3a8>)
 8005634:	2301      	movs	r3, #1
 8005636:	425b      	negs	r3, r3
 8005638:	9302      	str	r3, [sp, #8]
 800563a:	2301      	movs	r3, #1
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	2301      	movs	r3, #1
 8005644:	2236      	movs	r2, #54	; 0x36
 8005646:	21be      	movs	r1, #190	; 0xbe
 8005648:	f003 fdd6 	bl	80091f8 <HAL_I2C_Mem_Read>
 800564c:	0003      	movs	r3, r0
 800564e:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8005650:	197b      	adds	r3, r7, r5
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <hts221_init+0x2b4>
            return HTS_FAIL;
 8005658:	2300      	movs	r3, #0
 800565a:	e0c8      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[1] = HTS_CAL_H0_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	3301      	adds	r3, #1
 8005660:	251f      	movs	r5, #31
 8005662:	197c      	adds	r4, r7, r5
 8005664:	483a      	ldr	r0, [pc, #232]	; (8005750 <hts221_init+0x3a8>)
 8005666:	2201      	movs	r2, #1
 8005668:	4252      	negs	r2, r2
 800566a:	9202      	str	r2, [sp, #8]
 800566c:	2201      	movs	r2, #1
 800566e:	9201      	str	r2, [sp, #4]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	2301      	movs	r3, #1
 8005674:	2237      	movs	r2, #55	; 0x37
 8005676:	21be      	movs	r1, #190	; 0xbe
 8005678:	f003 fdbe 	bl	80091f8 <HAL_I2C_Mem_Read>
 800567c:	0003      	movs	r3, r0
 800567e:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8005680:	197b      	adds	r3, r7, r5
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <hts221_init+0x2e4>
            return HTS_FAIL;
 8005688:	2300      	movs	r3, #0
 800568a:	e0b0      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[2] = HTS_CAL_H1_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	3302      	adds	r3, #2
 8005690:	251f      	movs	r5, #31
 8005692:	197c      	adds	r4, r7, r5
 8005694:	482e      	ldr	r0, [pc, #184]	; (8005750 <hts221_init+0x3a8>)
 8005696:	2201      	movs	r2, #1
 8005698:	4252      	negs	r2, r2
 800569a:	9202      	str	r2, [sp, #8]
 800569c:	2201      	movs	r2, #1
 800569e:	9201      	str	r2, [sp, #4]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	2301      	movs	r3, #1
 80056a4:	223a      	movs	r2, #58	; 0x3a
 80056a6:	21be      	movs	r1, #190	; 0xbe
 80056a8:	f003 fda6 	bl	80091f8 <HAL_I2C_Mem_Read>
 80056ac:	0003      	movs	r3, r0
 80056ae:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80056b0:	197b      	adds	r3, r7, r5
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <hts221_init+0x314>
            return HTS_FAIL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e098      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[3] = HTS_CAL_H1_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 3, 1, HAL_MAX_DELAY);
 80056bc:	1d3b      	adds	r3, r7, #4
 80056be:	3303      	adds	r3, #3
 80056c0:	251f      	movs	r5, #31
 80056c2:	197c      	adds	r4, r7, r5
 80056c4:	4822      	ldr	r0, [pc, #136]	; (8005750 <hts221_init+0x3a8>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	4252      	negs	r2, r2
 80056ca:	9202      	str	r2, [sp, #8]
 80056cc:	2201      	movs	r2, #1
 80056ce:	9201      	str	r2, [sp, #4]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	2301      	movs	r3, #1
 80056d4:	223b      	movs	r2, #59	; 0x3b
 80056d6:	21be      	movs	r1, #190	; 0xbe
 80056d8:	f003 fd8e 	bl	80091f8 <HAL_I2C_Mem_Read>
 80056dc:	0003      	movs	r3, r0
 80056de:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80056e0:	197b      	adds	r3, r7, r5
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <hts221_init+0x344>
            return HTS_FAIL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e080      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[4] = HTS_CAL_H0_rH_x2
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 4, 1, HAL_MAX_DELAY);
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	3304      	adds	r3, #4
 80056f0:	251f      	movs	r5, #31
 80056f2:	197c      	adds	r4, r7, r5
 80056f4:	4816      	ldr	r0, [pc, #88]	; (8005750 <hts221_init+0x3a8>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	4252      	negs	r2, r2
 80056fa:	9202      	str	r2, [sp, #8]
 80056fc:	2201      	movs	r2, #1
 80056fe:	9201      	str	r2, [sp, #4]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	2301      	movs	r3, #1
 8005704:	2230      	movs	r2, #48	; 0x30
 8005706:	21be      	movs	r1, #190	; 0xbe
 8005708:	f003 fd76 	bl	80091f8 <HAL_I2C_Mem_Read>
 800570c:	0003      	movs	r3, r0
 800570e:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8005710:	197b      	adds	r3, r7, r5
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <hts221_init+0x374>
            return HTS_FAIL;
 8005718:	2300      	movs	r3, #0
 800571a:	e068      	b.n	80057ee <hts221_init+0x446>
        }

        // buf[5] = HTS_CAL_H1_rH_x2
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 5, 1, HAL_MAX_DELAY);
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	3305      	adds	r3, #5
 8005720:	251f      	movs	r5, #31
 8005722:	197c      	adds	r4, r7, r5
 8005724:	480a      	ldr	r0, [pc, #40]	; (8005750 <hts221_init+0x3a8>)
 8005726:	2201      	movs	r2, #1
 8005728:	4252      	negs	r2, r2
 800572a:	9202      	str	r2, [sp, #8]
 800572c:	2201      	movs	r2, #1
 800572e:	9201      	str	r2, [sp, #4]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	2301      	movs	r3, #1
 8005734:	2231      	movs	r2, #49	; 0x31
 8005736:	21be      	movs	r1, #190	; 0xbe
 8005738:	f003 fd5e 	bl	80091f8 <HAL_I2C_Mem_Read>
 800573c:	0003      	movs	r3, r0
 800573e:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8005740:	197b      	adds	r3, r7, r5
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <hts221_init+0x3b0>
            return HTS_FAIL;
 8005748:	2300      	movs	r3, #0
 800574a:	e050      	b.n	80057ee <hts221_init+0x446>
 800574c:	0800d114 	.word	0x0800d114
 8005750:	200001e8 	.word	0x200001e8
 8005754:	200001d4 	.word	0x200001d4
        }

        /*=== Process humidity calibration data ===*/
        uint8_t H0_Rh_R30 = buf[4] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 8005758:	1d3b      	adds	r3, r7, #4
 800575a:	791a      	ldrb	r2, [r3, #4]
 800575c:	2013      	movs	r0, #19
 800575e:	183b      	adds	r3, r7, r0
 8005760:	0852      	lsrs	r2, r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
        uint8_t H1_Rh_R31 = buf[5] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 8005764:	1d3b      	adds	r3, r7, #4
 8005766:	795a      	ldrb	r2, [r3, #5]
 8005768:	2512      	movs	r5, #18
 800576a:	197b      	adds	r3, r7, r5
 800576c:	0852      	lsrs	r2, r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
        int16_t H0_T0_OUT = (buf[0] | (buf[1] << 8)); // This should be signed int
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	b219      	sxth	r1, r3
 8005776:	1d3b      	adds	r3, r7, #4
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	b21a      	sxth	r2, r3
 800577e:	2410      	movs	r4, #16
 8005780:	193b      	adds	r3, r7, r4
 8005782:	430a      	orrs	r2, r1
 8005784:	801a      	strh	r2, [r3, #0]
        int16_t H1_T0_OUT = (buf[2] | (buf[3] << 8)); // This should be signed int
 8005786:	1d3b      	adds	r3, r7, #4
 8005788:	789b      	ldrb	r3, [r3, #2]
 800578a:	b219      	sxth	r1, r3
 800578c:	1d3b      	adds	r3, r7, #4
 800578e:	78db      	ldrb	r3, [r3, #3]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	b21a      	sxth	r2, r3
 8005794:	230e      	movs	r3, #14
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	430a      	orrs	r2, r1
 800579a:	801a      	strh	r2, [r3, #0]

        //Store Humid.
        hts_cal_data.H0_OUT = H0_T0_OUT;
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <hts221_init+0x450>)
 800579e:	0026      	movs	r6, r4
 80057a0:	193a      	adds	r2, r7, r4
 80057a2:	8812      	ldrh	r2, [r2, #0]
 80057a4:	815a      	strh	r2, [r3, #10]
        hts_cal_data.humid_correction_factor = (float) (H1_Rh_R31 - H0_Rh_R30) / (H1_T0_OUT - H0_T0_OUT);
 80057a6:	197b      	adds	r3, r7, r5
 80057a8:	781a      	ldrb	r2, [r3, #0]
 80057aa:	0005      	movs	r5, r0
 80057ac:	183b      	adds	r3, r7, r0
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7fb fd46 	bl	8001244 <__aeabi_i2f>
 80057b8:	1c04      	adds	r4, r0, #0
 80057ba:	230e      	movs	r3, #14
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	2200      	movs	r2, #0
 80057c0:	5e9a      	ldrsh	r2, [r3, r2]
 80057c2:	19bb      	adds	r3, r7, r6
 80057c4:	2100      	movs	r1, #0
 80057c6:	5e5b      	ldrsh	r3, [r3, r1]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	0018      	movs	r0, r3
 80057cc:	f7fb fd3a 	bl	8001244 <__aeabi_i2f>
 80057d0:	1c03      	adds	r3, r0, #0
 80057d2:	1c19      	adds	r1, r3, #0
 80057d4:	1c20      	adds	r0, r4, #0
 80057d6:	f7fb f869 	bl	80008ac <__aeabi_fdiv>
 80057da:	1c03      	adds	r3, r0, #0
 80057dc:	1c1a      	adds	r2, r3, #0
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <hts221_init+0x450>)
 80057e0:	60da      	str	r2, [r3, #12]
        hts_cal_data.humid_offset = H0_Rh_R30;
 80057e2:	197b      	adds	r3, r7, r5
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	b21a      	sxth	r2, r3
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <hts221_init+0x450>)
 80057ea:	821a      	strh	r2, [r3, #16]

        return HTS_SUCCESS;
 80057ec:	2301      	movs	r3, #1
    }

    return HTS_FAIL;
}
 80057ee:	0018      	movs	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b009      	add	sp, #36	; 0x24
 80057f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	200001d4 	.word	0x200001d4

080057fc <hts221_get_temp>:

int hts221_get_temp(char unit){
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	; 0x30
 8005800:	af04      	add	r7, sp, #16
 8005802:	0002      	movs	r2, r0
 8005804:	1dfb      	adds	r3, r7, #7
 8005806:	701a      	strb	r2, [r3, #0]

    uint8_t buf[7];			// read buffer
    int16_t T_OUT;			// T_OUT raw temperature reading
    int temp_adj;			// calibrated temperature value

  serial_printf("0x%x, ", hts_cal_data.T0_OUT);
 8005808:	4b5a      	ldr	r3, [pc, #360]	; (8005974 <hts221_get_temp+0x178>)
 800580a:	2200      	movs	r2, #0
 800580c:	5e9b      	ldrsh	r3, [r3, r2]
 800580e:	001a      	movs	r2, r3
 8005810:	4b59      	ldr	r3, [pc, #356]	; (8005978 <hts221_get_temp+0x17c>)
 8005812:	0011      	movs	r1, r2
 8005814:	0018      	movs	r0, r3
 8005816:	f000 febf 	bl	8006598 <serial_printf>
  serial_printf("0x%x, ", hts_cal_data.correction_factor);
 800581a:	4b56      	ldr	r3, [pc, #344]	; (8005974 <hts221_get_temp+0x178>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	1c18      	adds	r0, r3, #0
 8005820:	f7fd fb50 	bl	8002ec4 <__aeabi_f2d>
 8005824:	0002      	movs	r2, r0
 8005826:	000b      	movs	r3, r1
 8005828:	4953      	ldr	r1, [pc, #332]	; (8005978 <hts221_get_temp+0x17c>)
 800582a:	0008      	movs	r0, r1
 800582c:	f000 feb4 	bl	8006598 <serial_printf>
  serial_printf("0x%x\n", hts_cal_data.offset);
 8005830:	4b50      	ldr	r3, [pc, #320]	; (8005974 <hts221_get_temp+0x178>)
 8005832:	2208      	movs	r2, #8
 8005834:	5e9b      	ldrsh	r3, [r3, r2]
 8005836:	001a      	movs	r2, r3
 8005838:	4b50      	ldr	r3, [pc, #320]	; (800597c <hts221_get_temp+0x180>)
 800583a:	0011      	movs	r1, r2
 800583c:	0018      	movs	r0, r3
 800583e:	f000 feab 	bl	8006598 <serial_printf>

    /* === Start a temperature reading === */
    buf[0] = HTS_CTRL_REG2_ONE_SHOT;
 8005842:	210c      	movs	r1, #12
 8005844:	187b      	adds	r3, r7, r1
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY) != HAL_OK) {
 800584a:	484d      	ldr	r0, [pc, #308]	; (8005980 <hts221_get_temp+0x184>)
 800584c:	2301      	movs	r3, #1
 800584e:	425b      	negs	r3, r3
 8005850:	9302      	str	r3, [sp, #8]
 8005852:	2301      	movs	r3, #1
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	187b      	adds	r3, r7, r1
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	2301      	movs	r3, #1
 800585c:	2221      	movs	r2, #33	; 0x21
 800585e:	21be      	movs	r1, #190	; 0xbe
 8005860:	f003 fb9c 	bl	8008f9c <HAL_I2C_Mem_Write>
 8005864:	1e03      	subs	r3, r0, #0
 8005866:	d001      	beq.n	800586c <hts221_get_temp+0x70>
        // TODO: error handling
      return HTS_FAIL;
 8005868:	2300      	movs	r3, #0
 800586a:	e07e      	b.n	800596a <hts221_get_temp+0x16e>

    /* === Read in temperature data === */

    //TODO check that this loop is right...
    // Try three times for temp data to be ready
    for (int i = 0; i < 3; ++i) {
 800586c:	2300      	movs	r3, #0
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b02      	cmp	r3, #2
 8005874:	dc1b      	bgt.n	80058ae <hts221_get_temp+0xb2>
        // buf[0] = HTS_STATUS_REG
        if (HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY) != HAL_OK) {
 8005876:	4842      	ldr	r0, [pc, #264]	; (8005980 <hts221_get_temp+0x184>)
 8005878:	2301      	movs	r3, #1
 800587a:	425b      	negs	r3, r3
 800587c:	9302      	str	r3, [sp, #8]
 800587e:	2301      	movs	r3, #1
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	230c      	movs	r3, #12
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	2301      	movs	r3, #1
 800588a:	2227      	movs	r2, #39	; 0x27
 800588c:	21be      	movs	r1, #190	; 0xbe
 800588e:	f003 fcb3 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005892:	1e03      	subs	r3, r0, #0
 8005894:	d001      	beq.n	800589a <hts221_get_temp+0x9e>
            // TODO: error handling
          return HTS_FAIL;
 8005896:	2300      	movs	r3, #0
 8005898:	e067      	b.n	800596a <hts221_get_temp+0x16e>
        }
        if (buf[0] & 1){
 800589a:	230c      	movs	r3, #12
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	001a      	movs	r2, r3
 80058a2:	2301      	movs	r3, #1
 80058a4:	4013      	ands	r3, r2
 80058a6:	d101      	bne.n	80058ac <hts221_get_temp+0xb0>
            // new temp. data ready
            break;
        }
        //TODO - HAL_WAIT?
      return HTS_FAIL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e05e      	b.n	800596a <hts221_get_temp+0x16e>
            break;
 80058ac:	46c0      	nop			; (mov r8, r8)
    }

    // buf[1] = HTS_TEMP_OUT_L
    if (HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY) != HAL_OK) {
 80058ae:	230c      	movs	r3, #12
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	3301      	adds	r3, #1
 80058b4:	4832      	ldr	r0, [pc, #200]	; (8005980 <hts221_get_temp+0x184>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	4252      	negs	r2, r2
 80058ba:	9202      	str	r2, [sp, #8]
 80058bc:	2201      	movs	r2, #1
 80058be:	9201      	str	r2, [sp, #4]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	2301      	movs	r3, #1
 80058c4:	222a      	movs	r2, #42	; 0x2a
 80058c6:	21be      	movs	r1, #190	; 0xbe
 80058c8:	f003 fc96 	bl	80091f8 <HAL_I2C_Mem_Read>
 80058cc:	1e03      	subs	r3, r0, #0
 80058ce:	d001      	beq.n	80058d4 <hts221_get_temp+0xd8>
        // TODO: error handling
      return HTS_FAIL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e04a      	b.n	800596a <hts221_get_temp+0x16e>
    }

    // buf[2] = HTS_TEMP_OUT_H
    if (HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY) != HAL_OK) {
 80058d4:	230c      	movs	r3, #12
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	3302      	adds	r3, #2
 80058da:	4829      	ldr	r0, [pc, #164]	; (8005980 <hts221_get_temp+0x184>)
 80058dc:	2201      	movs	r2, #1
 80058de:	4252      	negs	r2, r2
 80058e0:	9202      	str	r2, [sp, #8]
 80058e2:	2201      	movs	r2, #1
 80058e4:	9201      	str	r2, [sp, #4]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	2301      	movs	r3, #1
 80058ea:	222b      	movs	r2, #43	; 0x2b
 80058ec:	21be      	movs	r1, #190	; 0xbe
 80058ee:	f003 fc83 	bl	80091f8 <HAL_I2C_Mem_Read>
 80058f2:	1e03      	subs	r3, r0, #0
 80058f4:	d001      	beq.n	80058fa <hts221_get_temp+0xfe>
        // TODO: error handling
      return HTS_FAIL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	e037      	b.n	800596a <hts221_get_temp+0x16e>
    }

    T_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 80058fa:	220c      	movs	r2, #12
 80058fc:	18bb      	adds	r3, r7, r2
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	b219      	sxth	r1, r3
 8005902:	18bb      	adds	r3, r7, r2
 8005904:	789b      	ldrb	r3, [r3, #2]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	b21a      	sxth	r2, r3
 800590a:	201a      	movs	r0, #26
 800590c:	183b      	adds	r3, r7, r0
 800590e:	430a      	orrs	r2, r1
 8005910:	801a      	strh	r2, [r3, #0]

    temp_adj = hts221_calc_temp(T_OUT);
 8005912:	183b      	adds	r3, r7, r0
 8005914:	2200      	movs	r2, #0
 8005916:	5e9b      	ldrsh	r3, [r3, r2]
 8005918:	0018      	movs	r0, r3
 800591a:	f000 f839 	bl	8005990 <hts221_calc_temp>
 800591e:	0003      	movs	r3, r0
 8005920:	617b      	str	r3, [r7, #20]

    // Return in correct units
    if (unit == 'F'){
 8005922:	1dfb      	adds	r3, r7, #7
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b46      	cmp	r3, #70	; 0x46
 8005928:	d11e      	bne.n	8005968 <hts221_get_temp+0x16c>
        //Fahrenheit
        return (temp_adj * 9.0 / 5.0) + 32;
 800592a:	6978      	ldr	r0, [r7, #20]
 800592c:	f7fd fa74 	bl	8002e18 <__aeabi_i2d>
 8005930:	2200      	movs	r2, #0
 8005932:	4b14      	ldr	r3, [pc, #80]	; (8005984 <hts221_get_temp+0x188>)
 8005934:	f7fc fc3c 	bl	80021b0 <__aeabi_dmul>
 8005938:	0002      	movs	r2, r0
 800593a:	000b      	movs	r3, r1
 800593c:	0010      	movs	r0, r2
 800593e:	0019      	movs	r1, r3
 8005940:	2200      	movs	r2, #0
 8005942:	4b11      	ldr	r3, [pc, #68]	; (8005988 <hts221_get_temp+0x18c>)
 8005944:	f7fc f82e 	bl	80019a4 <__aeabi_ddiv>
 8005948:	0002      	movs	r2, r0
 800594a:	000b      	movs	r3, r1
 800594c:	0010      	movs	r0, r2
 800594e:	0019      	movs	r1, r3
 8005950:	2200      	movs	r2, #0
 8005952:	4b0e      	ldr	r3, [pc, #56]	; (800598c <hts221_get_temp+0x190>)
 8005954:	f7fb fcbc 	bl	80012d0 <__aeabi_dadd>
 8005958:	0002      	movs	r2, r0
 800595a:	000b      	movs	r3, r1
 800595c:	0010      	movs	r0, r2
 800595e:	0019      	movs	r1, r3
 8005960:	f7fd fa24 	bl	8002dac <__aeabi_d2iz>
 8005964:	0003      	movs	r3, r0
 8005966:	e000      	b.n	800596a <hts221_get_temp+0x16e>

    }
    else {
        //Celsius
        return temp_adj;
 8005968:	697b      	ldr	r3, [r7, #20]
    }

}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b008      	add	sp, #32
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	200001d4 	.word	0x200001d4
 8005978:	0800d124 	.word	0x0800d124
 800597c:	0800d12c 	.word	0x0800d12c
 8005980:	200001e8 	.word	0x200001e8
 8005984:	40220000 	.word	0x40220000
 8005988:	40140000 	.word	0x40140000
 800598c:	40400000 	.word	0x40400000

08005990 <hts221_calc_temp>:

int hts221_calc_temp(int16_t T_OUT) {
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	0002      	movs	r2, r0
 8005998:	1dbb      	adds	r3, r7, #6
 800599a:	801a      	strh	r2, [r3, #0]

    int zeroed_temp = T_OUT - hts_cal_data.T0_OUT;
 800599c:	1dbb      	adds	r3, r7, #6
 800599e:	2200      	movs	r2, #0
 80059a0:	5e9b      	ldrsh	r3, [r3, r2]
 80059a2:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <hts221_calc_temp+0x60>)
 80059a4:	2100      	movs	r1, #0
 80059a6:	5e52      	ldrsh	r2, [r2, r1]
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
    int temp_adj = (zeroed_temp * hts_cal_data.correction_factor) + hts_cal_data.offset;
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7fb fc49 	bl	8001244 <__aeabi_i2f>
 80059b2:	1c02      	adds	r2, r0, #0
 80059b4:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <hts221_calc_temp+0x60>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	1c19      	adds	r1, r3, #0
 80059ba:	1c10      	adds	r0, r2, #0
 80059bc:	f7fb f940 	bl	8000c40 <__aeabi_fmul>
 80059c0:	1c03      	adds	r3, r0, #0
 80059c2:	1c1c      	adds	r4, r3, #0
 80059c4:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <hts221_calc_temp+0x60>)
 80059c6:	2208      	movs	r2, #8
 80059c8:	5e9b      	ldrsh	r3, [r3, r2]
 80059ca:	0018      	movs	r0, r3
 80059cc:	f7fb fc3a 	bl	8001244 <__aeabi_i2f>
 80059d0:	1c03      	adds	r3, r0, #0
 80059d2:	1c19      	adds	r1, r3, #0
 80059d4:	1c20      	adds	r0, r4, #0
 80059d6:	f7fa fdcd 	bl	8000574 <__aeabi_fadd>
 80059da:	1c03      	adds	r3, r0, #0
 80059dc:	1c18      	adds	r0, r3, #0
 80059de:	f7fb fc11 	bl	8001204 <__aeabi_f2iz>
 80059e2:	0003      	movs	r3, r0
 80059e4:	60bb      	str	r3, [r7, #8]

    return temp_adj;
 80059e6:	68bb      	ldr	r3, [r7, #8]
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b005      	add	sp, #20
 80059ee:	bd90      	pop	{r4, r7, pc}
 80059f0:	200001d4 	.word	0x200001d4

080059f4 <hts221_get_humid>:

int hts221_get_humid() {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af04      	add	r7, sp, #16

    uint8_t buf[3];			// read buffer
    int16_t H_OUT;			// H_OUT raw temperature reading
    int humid_adj;			// calibrated temperature value

    serial_printf("0x%x, ", hts_cal_data.H0_OUT);
 80059fa:	4b6d      	ldr	r3, [pc, #436]	; (8005bb0 <hts221_get_humid+0x1bc>)
 80059fc:	220a      	movs	r2, #10
 80059fe:	5e9b      	ldrsh	r3, [r3, r2]
 8005a00:	001a      	movs	r2, r3
 8005a02:	4b6c      	ldr	r3, [pc, #432]	; (8005bb4 <hts221_get_humid+0x1c0>)
 8005a04:	0011      	movs	r1, r2
 8005a06:	0018      	movs	r0, r3
 8005a08:	f000 fdc6 	bl	8006598 <serial_printf>
    serial_printf("0x%x, ", hts_cal_data.humid_correction_factor);
 8005a0c:	4b68      	ldr	r3, [pc, #416]	; (8005bb0 <hts221_get_humid+0x1bc>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	1c18      	adds	r0, r3, #0
 8005a12:	f7fd fa57 	bl	8002ec4 <__aeabi_f2d>
 8005a16:	0002      	movs	r2, r0
 8005a18:	000b      	movs	r3, r1
 8005a1a:	4966      	ldr	r1, [pc, #408]	; (8005bb4 <hts221_get_humid+0x1c0>)
 8005a1c:	0008      	movs	r0, r1
 8005a1e:	f000 fdbb 	bl	8006598 <serial_printf>
    serial_printf("0x%x\n", hts_cal_data.humid_offset);
 8005a22:	4b63      	ldr	r3, [pc, #396]	; (8005bb0 <hts221_get_humid+0x1bc>)
 8005a24:	2210      	movs	r2, #16
 8005a26:	5e9b      	ldrsh	r3, [r3, r2]
 8005a28:	001a      	movs	r2, r3
 8005a2a:	4b63      	ldr	r3, [pc, #396]	; (8005bb8 <hts221_get_humid+0x1c4>)
 8005a2c:	0011      	movs	r1, r2
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f000 fdb2 	bl	8006598 <serial_printf>

    /* === Start a humidity reading === */
    if (HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY) != HAL_OK) {
 8005a34:	4861      	ldr	r0, [pc, #388]	; (8005bbc <hts221_get_humid+0x1c8>)
 8005a36:	2301      	movs	r3, #1
 8005a38:	425b      	negs	r3, r3
 8005a3a:	9302      	str	r3, [sp, #8]
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	003b      	movs	r3, r7
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2301      	movs	r3, #1
 8005a46:	2221      	movs	r2, #33	; 0x21
 8005a48:	21be      	movs	r1, #190	; 0xbe
 8005a4a:	f003 fbd5 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005a4e:	1e03      	subs	r3, r0, #0
 8005a50:	d006      	beq.n	8005a60 <hts221_get_humid+0x6c>
        serial_println("hts221_get_humid: 1");
 8005a52:	4b5b      	ldr	r3, [pc, #364]	; (8005bc0 <hts221_get_humid+0x1cc>)
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 fd5f 	bl	8006518 <serial_println>
        return HUMID_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	e0a3      	b.n	8005ba8 <hts221_get_humid+0x1b4>
    }

    buf[0] |= HTS_CTRL_REG2_ONE_SHOT;
 8005a60:	003b      	movs	r3, r7
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2201      	movs	r2, #1
 8005a66:	4313      	orrs	r3, r2
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	003b      	movs	r3, r7
 8005a6c:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY) != HAL_OK) {
 8005a6e:	4853      	ldr	r0, [pc, #332]	; (8005bbc <hts221_get_humid+0x1c8>)
 8005a70:	2301      	movs	r3, #1
 8005a72:	425b      	negs	r3, r3
 8005a74:	9302      	str	r3, [sp, #8]
 8005a76:	2301      	movs	r3, #1
 8005a78:	9301      	str	r3, [sp, #4]
 8005a7a:	003b      	movs	r3, r7
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	2301      	movs	r3, #1
 8005a80:	2221      	movs	r2, #33	; 0x21
 8005a82:	21be      	movs	r1, #190	; 0xbe
 8005a84:	f003 fa8a 	bl	8008f9c <HAL_I2C_Mem_Write>
 8005a88:	1e03      	subs	r3, r0, #0
 8005a8a:	d006      	beq.n	8005a9a <hts221_get_humid+0xa6>
      serial_println("hts221_get_humid: 2");
 8005a8c:	4b4d      	ldr	r3, [pc, #308]	; (8005bc4 <hts221_get_humid+0x1d0>)
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f000 fd42 	bl	8006518 <serial_println>
      return HUMID_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	425b      	negs	r3, r3
 8005a98:	e086      	b.n	8005ba8 <hts221_get_humid+0x1b4>
    }

    // wait for one shot bit to clear by the hts
    do{
        if (HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY) != HAL_OK) {
 8005a9a:	4848      	ldr	r0, [pc, #288]	; (8005bbc <hts221_get_humid+0x1c8>)
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	425b      	negs	r3, r3
 8005aa0:	9302      	str	r3, [sp, #8]
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	003b      	movs	r3, r7
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	2301      	movs	r3, #1
 8005aac:	2221      	movs	r2, #33	; 0x21
 8005aae:	21be      	movs	r1, #190	; 0xbe
 8005ab0:	f003 fba2 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005ab4:	1e03      	subs	r3, r0, #0
 8005ab6:	d006      	beq.n	8005ac6 <hts221_get_humid+0xd2>
          serial_println("hts221_get_humid: 3");
 8005ab8:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <hts221_get_humid+0x1d4>)
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 fd2c 	bl	8006518 <serial_println>
          return HUMID_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	425b      	negs	r3, r3
 8005ac4:	e070      	b.n	8005ba8 <hts221_get_humid+0x1b4>
        }
    } while (buf[0] & HTS_CTRL_REG2_ONE_SHOT);
 8005ac6:	003b      	movs	r3, r7
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	001a      	movs	r2, r3
 8005acc:	2301      	movs	r3, #1
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d1e3      	bne.n	8005a9a <hts221_get_humid+0xa6>

    /* === Read in humidity data === */

    //TODO check that this loop is right...
    // Try three times for temp data to be ready
    for (int i = 0; i < 3; ++i) {
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	dc23      	bgt.n	8005b24 <hts221_get_humid+0x130>
        // buf[0] = HTS_STATUS_REG
        if (HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY) != HAL_OK) {
 8005adc:	4837      	ldr	r0, [pc, #220]	; (8005bbc <hts221_get_humid+0x1c8>)
 8005ade:	2301      	movs	r3, #1
 8005ae0:	425b      	negs	r3, r3
 8005ae2:	9302      	str	r3, [sp, #8]
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	003b      	movs	r3, r7
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2301      	movs	r3, #1
 8005aee:	2227      	movs	r2, #39	; 0x27
 8005af0:	21be      	movs	r1, #190	; 0xbe
 8005af2:	f003 fb81 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005af6:	1e03      	subs	r3, r0, #0
 8005af8:	d006      	beq.n	8005b08 <hts221_get_humid+0x114>
          serial_println("hts221_get_humid: 4");
 8005afa:	4b34      	ldr	r3, [pc, #208]	; (8005bcc <hts221_get_humid+0x1d8>)
 8005afc:	0018      	movs	r0, r3
 8005afe:	f000 fd0b 	bl	8006518 <serial_println>
          return HUMID_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	425b      	negs	r3, r3
 8005b06:	e04f      	b.n	8005ba8 <hts221_get_humid+0x1b4>
        }
        if (buf[0] & 2){
 8005b08:	003b      	movs	r3, r7
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	001a      	movs	r2, r3
 8005b0e:	2302      	movs	r3, #2
 8005b10:	4013      	ands	r3, r2
 8005b12:	d106      	bne.n	8005b22 <hts221_get_humid+0x12e>
            // new humid. data ready
            break;
        }
      serial_println("hts221_get_humid: 5");
 8005b14:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <hts221_get_humid+0x1dc>)
 8005b16:	0018      	movs	r0, r3
 8005b18:	f000 fcfe 	bl	8006518 <serial_println>
      return HUMID_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	425b      	negs	r3, r3
 8005b20:	e042      	b.n	8005ba8 <hts221_get_humid+0x1b4>
            break;
 8005b22:	46c0      	nop			; (mov r8, r8)
    }

    // buf[1] = HTS_HUMIDITY_OUT_L
    if (HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY) != HAL_OK) {
 8005b24:	003b      	movs	r3, r7
 8005b26:	3301      	adds	r3, #1
 8005b28:	4824      	ldr	r0, [pc, #144]	; (8005bbc <hts221_get_humid+0x1c8>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	4252      	negs	r2, r2
 8005b2e:	9202      	str	r2, [sp, #8]
 8005b30:	2201      	movs	r2, #1
 8005b32:	9201      	str	r2, [sp, #4]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	2301      	movs	r3, #1
 8005b38:	2228      	movs	r2, #40	; 0x28
 8005b3a:	21be      	movs	r1, #190	; 0xbe
 8005b3c:	f003 fb5c 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005b40:	1e03      	subs	r3, r0, #0
 8005b42:	d006      	beq.n	8005b52 <hts221_get_humid+0x15e>
      serial_println("hts221_get_humid: 6");
 8005b44:	4b23      	ldr	r3, [pc, #140]	; (8005bd4 <hts221_get_humid+0x1e0>)
 8005b46:	0018      	movs	r0, r3
 8005b48:	f000 fce6 	bl	8006518 <serial_println>
      return HUMID_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	425b      	negs	r3, r3
 8005b50:	e02a      	b.n	8005ba8 <hts221_get_humid+0x1b4>
    }

    // buf[2] = HTS_HUMIDITY_OUT_H
    if (HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY) != HAL_OK) {
 8005b52:	003b      	movs	r3, r7
 8005b54:	3302      	adds	r3, #2
 8005b56:	4819      	ldr	r0, [pc, #100]	; (8005bbc <hts221_get_humid+0x1c8>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	4252      	negs	r2, r2
 8005b5c:	9202      	str	r2, [sp, #8]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	9201      	str	r2, [sp, #4]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	2301      	movs	r3, #1
 8005b66:	2229      	movs	r2, #41	; 0x29
 8005b68:	21be      	movs	r1, #190	; 0xbe
 8005b6a:	f003 fb45 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005b6e:	1e03      	subs	r3, r0, #0
 8005b70:	d006      	beq.n	8005b80 <hts221_get_humid+0x18c>
      serial_println("hts221_get_humid: 7");
 8005b72:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <hts221_get_humid+0x1e4>)
 8005b74:	0018      	movs	r0, r3
 8005b76:	f000 fccf 	bl	8006518 <serial_println>
      return HUMID_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	425b      	negs	r3, r3
 8005b7e:	e013      	b.n	8005ba8 <hts221_get_humid+0x1b4>
    }

    H_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 8005b80:	003b      	movs	r3, r7
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	b219      	sxth	r1, r3
 8005b86:	003b      	movs	r3, r7
 8005b88:	789b      	ldrb	r3, [r3, #2]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	b21a      	sxth	r2, r3
 8005b8e:	200a      	movs	r0, #10
 8005b90:	183b      	adds	r3, r7, r0
 8005b92:	430a      	orrs	r2, r1
 8005b94:	801a      	strh	r2, [r3, #0]

    humid_adj = hts221_calc_humid(H_OUT);
 8005b96:	183b      	adds	r3, r7, r0
 8005b98:	2200      	movs	r2, #0
 8005b9a:	5e9b      	ldrsh	r3, [r3, r2]
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f000 f81d 	bl	8005bdc <hts221_calc_humid>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	607b      	str	r3, [r7, #4]

    return humid_adj;
 8005ba6:	687b      	ldr	r3, [r7, #4]

}
 8005ba8:	0018      	movs	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b004      	add	sp, #16
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	200001d4 	.word	0x200001d4
 8005bb4:	0800d124 	.word	0x0800d124
 8005bb8:	0800d12c 	.word	0x0800d12c
 8005bbc:	200001e8 	.word	0x200001e8
 8005bc0:	0800d134 	.word	0x0800d134
 8005bc4:	0800d148 	.word	0x0800d148
 8005bc8:	0800d15c 	.word	0x0800d15c
 8005bcc:	0800d170 	.word	0x0800d170
 8005bd0:	0800d184 	.word	0x0800d184
 8005bd4:	0800d198 	.word	0x0800d198
 8005bd8:	0800d1ac 	.word	0x0800d1ac

08005bdc <hts221_calc_humid>:

int hts221_calc_humid(int16_t H_OUT){
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	0002      	movs	r2, r0
 8005be4:	1dbb      	adds	r3, r7, #6
 8005be6:	801a      	strh	r2, [r3, #0]

    int zeroed_humid = H_OUT - hts_cal_data.H0_OUT;
 8005be8:	1dbb      	adds	r3, r7, #6
 8005bea:	2200      	movs	r2, #0
 8005bec:	5e9b      	ldrsh	r3, [r3, r2]
 8005bee:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <hts221_calc_humid+0x60>)
 8005bf0:	210a      	movs	r1, #10
 8005bf2:	5e52      	ldrsh	r2, [r2, r1]
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
    int humid_adj = (zeroed_humid * hts_cal_data.humid_correction_factor) + hts_cal_data.humid_offset;
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7fb fb23 	bl	8001244 <__aeabi_i2f>
 8005bfe:	1c02      	adds	r2, r0, #0
 8005c00:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <hts221_calc_humid+0x60>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	1c19      	adds	r1, r3, #0
 8005c06:	1c10      	adds	r0, r2, #0
 8005c08:	f7fb f81a 	bl	8000c40 <__aeabi_fmul>
 8005c0c:	1c03      	adds	r3, r0, #0
 8005c0e:	1c1c      	adds	r4, r3, #0
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <hts221_calc_humid+0x60>)
 8005c12:	2210      	movs	r2, #16
 8005c14:	5e9b      	ldrsh	r3, [r3, r2]
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7fb fb14 	bl	8001244 <__aeabi_i2f>
 8005c1c:	1c03      	adds	r3, r0, #0
 8005c1e:	1c19      	adds	r1, r3, #0
 8005c20:	1c20      	adds	r0, r4, #0
 8005c22:	f7fa fca7 	bl	8000574 <__aeabi_fadd>
 8005c26:	1c03      	adds	r3, r0, #0
 8005c28:	1c18      	adds	r0, r3, #0
 8005c2a:	f7fb faeb 	bl	8001204 <__aeabi_f2iz>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	60bb      	str	r3, [r7, #8]

    return humid_adj;
 8005c32:	68bb      	ldr	r3, [r7, #8]

}
 8005c34:	0018      	movs	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b005      	add	sp, #20
 8005c3a:	bd90      	pop	{r4, r7, pc}
 8005c3c:	200001d4 	.word	0x200001d4

08005c40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005c44:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c46:	4a1c      	ldr	r2, [pc, #112]	; (8005cb8 <MX_I2C1_Init+0x78>)
 8005c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8005c4a:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c4c:	4a1b      	ldr	r2, [pc, #108]	; (8005cbc <MX_I2C1_Init+0x7c>)
 8005c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005c50:	4b18      	ldr	r3, [pc, #96]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c56:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c5c:	4b15      	ldr	r3, [pc, #84]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005c62:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c68:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c6e:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c74:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c7a:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f003 f8f7 	bl	8008e70 <HAL_I2C_Init>
 8005c82:	1e03      	subs	r3, r0, #0
 8005c84:	d001      	beq.n	8005c8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005c86:	f000 fb1b 	bl	80062c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f003 fe24 	bl	80098dc <HAL_I2CEx_ConfigAnalogFilter>
 8005c94:	1e03      	subs	r3, r0, #0
 8005c96:	d001      	beq.n	8005c9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005c98:	f000 fb12 	bl	80062c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <MX_I2C1_Init+0x74>)
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f003 fe67 	bl	8009974 <HAL_I2CEx_ConfigDigitalFilter>
 8005ca6:	1e03      	subs	r3, r0, #0
 8005ca8:	d001      	beq.n	8005cae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005caa:	f000 fb09 	bl	80062c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200001e8 	.word	0x200001e8
 8005cb8:	40005400 	.word	0x40005400
 8005cbc:	00707cbb 	.word	0x00707cbb

08005cc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b089      	sub	sp, #36	; 0x24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc8:	240c      	movs	r4, #12
 8005cca:	193b      	adds	r3, r7, r4
 8005ccc:	0018      	movs	r0, r3
 8005cce:	2314      	movs	r3, #20
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	f007 f8d7 	bl	800ce86 <memset>
  if(i2cHandle->Instance==I2C1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a18      	ldr	r2, [pc, #96]	; (8005d40 <HAL_I2C_MspInit+0x80>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d129      	bne.n	8005d36 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ce2:	4b18      	ldr	r3, [pc, #96]	; (8005d44 <HAL_I2C_MspInit+0x84>)
 8005ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce6:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <HAL_I2C_MspInit+0x84>)
 8005ce8:	2102      	movs	r1, #2
 8005cea:	430a      	orrs	r2, r1
 8005cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cee:	4b15      	ldr	r3, [pc, #84]	; (8005d44 <HAL_I2C_MspInit+0x84>)
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005cfa:	193b      	adds	r3, r7, r4
 8005cfc:	22c0      	movs	r2, #192	; 0xc0
 8005cfe:	0092      	lsls	r2, r2, #2
 8005d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d02:	0021      	movs	r1, r4
 8005d04:	187b      	adds	r3, r7, r1
 8005d06:	2212      	movs	r2, #18
 8005d08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d0a:	187b      	adds	r3, r7, r1
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d10:	187b      	adds	r3, r7, r1
 8005d12:	2203      	movs	r2, #3
 8005d14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005d16:	187b      	adds	r3, r7, r1
 8005d18:	2204      	movs	r2, #4
 8005d1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d1c:	187b      	adds	r3, r7, r1
 8005d1e:	4a0a      	ldr	r2, [pc, #40]	; (8005d48 <HAL_I2C_MspInit+0x88>)
 8005d20:	0019      	movs	r1, r3
 8005d22:	0010      	movs	r0, r2
 8005d24:	f002 feea 	bl	8008afc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d28:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <HAL_I2C_MspInit+0x84>)
 8005d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <HAL_I2C_MspInit+0x84>)
 8005d2e:	2180      	movs	r1, #128	; 0x80
 8005d30:	0389      	lsls	r1, r1, #14
 8005d32:	430a      	orrs	r2, r1
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	b009      	add	sp, #36	; 0x24
 8005d3c:	bd90      	pop	{r4, r7, pc}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	40005400 	.word	0x40005400
 8005d44:	40021000 	.word	0x40021000
 8005d48:	50000400 	.word	0x50000400

08005d4c <display_setup>:
void display_setup(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void display_setup() {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af02      	add	r7, sp, #8
  serial_printf("Initializing display... ");
 8005d52:	4b21      	ldr	r3, [pc, #132]	; (8005dd8 <display_setup+0x8c>)
 8005d54:	0018      	movs	r0, r3
 8005d56:	f000 fc1f 	bl	8006598 <serial_printf>
  epd_init(false);
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f7fe f8e8 	bl	8003f30 <epd_init>
  serial_println("Done!");
 8005d60:	4b1e      	ldr	r3, [pc, #120]	; (8005ddc <display_setup+0x90>)
 8005d62:	0018      	movs	r0, r3
 8005d64:	f000 fbd8 	bl	8006518 <serial_println>

  serial_printf("Setting display rotation... ");
 8005d68:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <display_setup+0x94>)
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 fc14 	bl	8006598 <serial_printf>
  set_rotation(2);
 8005d70:	2002      	movs	r0, #2
 8005d72:	f7fe fc15 	bl	80045a0 <set_rotation>
  serial_println("Done!");
 8005d76:	4b19      	ldr	r3, [pc, #100]	; (8005ddc <display_setup+0x90>)
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 fbcd 	bl	8006518 <serial_println>

  serial_printf("Clearing display buffers... ");
 8005d7e:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <display_setup+0x98>)
 8005d80:	0018      	movs	r0, r3
 8005d82:	f000 fc09 	bl	8006598 <serial_printf>
  clear_buffer();
 8005d86:	f7fe f949 	bl	800401c <clear_buffer>
  epd_powerUp();
 8005d8a:	f7fe f843 	bl	8003e14 <epd_powerUp>
  write_RAM_to_epd(buffer1, buffer1_size, 1, false);
 8005d8e:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <display_setup+0x9c>)
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	4b16      	ldr	r3, [pc, #88]	; (8005dec <display_setup+0xa0>)
 8005d94:	6819      	ldr	r1, [r3, #0]
 8005d96:	2300      	movs	r3, #0
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f7fe fa3d 	bl	8004218 <write_RAM_to_epd>
//  display(false);
  serial_println("Done!");
 8005d9e:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <display_setup+0x90>)
 8005da0:	0018      	movs	r0, r3
 8005da2:	f000 fbb9 	bl	8006518 <serial_println>

  serial_printf("Drawing bitmap to buffer... ");
 8005da6:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <display_setup+0xa4>)
 8005da8:	0018      	movs	r0, r3
 8005daa:	f000 fbf5 	bl	8006598 <serial_printf>
  draw_bitmap(0, 0, main_select, EPD_WIDTH, EPD_HEIGHT, EPD_BLACK);
 8005dae:	2384      	movs	r3, #132	; 0x84
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	4a10      	ldr	r2, [pc, #64]	; (8005df4 <display_setup+0xa8>)
 8005db4:	2101      	movs	r1, #1
 8005db6:	9101      	str	r1, [sp, #4]
 8005db8:	21b0      	movs	r1, #176	; 0xb0
 8005dba:	9100      	str	r1, [sp, #0]
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	f7ff f81a 	bl	8004df8 <draw_bitmap>
  display(false);
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	f7fe fa85 	bl	80042d4 <display>
  serial_println("Done!\n");
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <display_setup+0xac>)
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f000 fba3 	bl	8006518 <serial_println>
}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	0800d1c0 	.word	0x0800d1c0
 8005ddc:	0800d1dc 	.word	0x0800d1dc
 8005de0:	0800d1e4 	.word	0x0800d1e4
 8005de4:	0800d204 	.word	0x0800d204
 8005de8:	200000b4 	.word	0x200000b4
 8005dec:	200001c8 	.word	0x200001c8
 8005df0:	0800d224 	.word	0x0800d224
 8005df4:	0800de84 	.word	0x0800de84
 8005df8:	0800d244 	.word	0x0800d244

08005dfc <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
    serial_println("*** ADC WATCHDOG INTERRUPT ***");
 8005e04:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <HAL_ADC_LevelOutOfWindowCallback+0x94>)
 8005e06:	0018      	movs	r0, r3
 8005e08:	f000 fb86 	bl	8006518 <serial_println>

    // Change the thresholds
    uint32_t curr_upper = (hadc->Instance->TR >> 16) & 0x00000FFF;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	0c1b      	lsrs	r3, r3, #16
 8005e14:	051b      	lsls	r3, r3, #20
 8005e16:	0d1b      	lsrs	r3, r3, #20
 8005e18:	60fb      	str	r3, [r7, #12]
    uint32_t curr_lower = (hadc->Instance->TR & 0x00000FFF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	051b      	lsls	r3, r3, #20
 8005e22:	0d1b      	lsrs	r3, r3, #20
 8005e24:	60bb      	str	r3, [r7, #8]

    if (curr_upper != 0x0FFF) { //  we trig'd because something was placed onto the sensor
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a1a      	ldr	r2, [pc, #104]	; (8005e94 <HAL_ADC_LevelOutOfWindowCallback+0x98>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <HAL_ADC_LevelOutOfWindowCallback+0x5a>
        serial_println("Something was placed on me!");
 8005e2e:	4b1a      	ldr	r3, [pc, #104]	; (8005e98 <HAL_ADC_LevelOutOfWindowCallback+0x9c>)
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 fb71 	bl	8006518 <serial_println>
        food_present = true;
 8005e36:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <HAL_ADC_LevelOutOfWindowCallback+0xa0>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	701a      	strb	r2, [r3, #0]

        // change upper threshold to max so that it can't be triggered due to something sitting on the pressure sensor
        hadc->Instance->TR = (0x0FFF << 16);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a17      	ldr	r2, [pc, #92]	; (8005ea0 <HAL_ADC_LevelOutOfWindowCallback+0xa4>)
 8005e42:	621a      	str	r2, [r3, #32]
        hadc->Instance->TR |= curr_upper;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6a19      	ldr	r1, [r3, #32]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	621a      	str	r2, [r3, #32]
 8005e54:	e013      	b.n	8005e7e <HAL_ADC_LevelOutOfWindowCallback+0x82>
    } else {
        serial_println("Something was removed from me!");
 8005e56:	4b13      	ldr	r3, [pc, #76]	; (8005ea4 <HAL_ADC_LevelOutOfWindowCallback+0xa8>)
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 fb5d 	bl	8006518 <serial_println>
        food_present = false;
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <HAL_ADC_LevelOutOfWindowCallback+0xa0>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]

        hadc->Instance->TR = (curr_lower << 16);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	0412      	lsls	r2, r2, #16
 8005e6c:	621a      	str	r2, [r3, #32]
        hadc->Instance->TR &= ~(0x0000FFFF); // clear the lower threshold
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6a1a      	ldr	r2, [r3, #32]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	0c12      	lsrs	r2, r2, #16
 8005e7a:	0412      	lsls	r2, r2, #16
 8005e7c:	621a      	str	r2, [r3, #32]
    }

    serial_println("*** END OF ADC WATCHDOG INTERRUPT ***\n");
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <HAL_ADC_LevelOutOfWindowCallback+0xac>)
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 fb49 	bl	8006518 <serial_println>
}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b004      	add	sp, #16
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	0800d24c 	.word	0x0800d24c
 8005e94:	00000fff 	.word	0x00000fff
 8005e98:	0800d26c 	.word	0x0800d26c
 8005e9c:	200000d9 	.word	0x200000d9
 8005ea0:	0fff0000 	.word	0x0fff0000
 8005ea4:	0800d288 	.word	0x0800d288
 8005ea8:	0800d2a8 	.word	0x0800d2a8

08005eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005eb0:	f001 fdfc 	bl	8007aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005eb4:	f000 f964 	bl	8006180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005eb8:	f7ff f952 	bl	8005160 <MX_GPIO_Init>
  MX_DMA_Init();
 8005ebc:	f7fd fe54 	bl	8003b68 <MX_DMA_Init>
  MX_I2C1_Init();
 8005ec0:	f7ff febe 	bl	8005c40 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8005ec4:	f001 fc0c 	bl	80076e0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8005ec8:	f001 fb86 	bl	80075d8 <MX_TIM6_Init>
  MX_SPI1_Init();
 8005ecc:	f000 fc14 	bl	80066f8 <MX_SPI1_Init>
  MX_ADC_Init();
 8005ed0:	f7fd f8f2 	bl	80030b8 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8005ed4:	f001 fbd4 	bl	8007680 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8005ed8:	f000 f9f8 	bl	80062cc <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005edc:	f000 f9d0 	bl	8006280 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // set busy pins while setting up
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8005ee0:	4b87      	ldr	r3, [pc, #540]	; (8006100 <main+0x254>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	2120      	movs	r1, #32
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f002 ff7e 	bl	8008de8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8005eec:	4b84      	ldr	r3, [pc, #528]	; (8006100 <main+0x254>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2110      	movs	r1, #16
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f002 ff78 	bl	8008de8 <HAL_GPIO_WritePin>

  // Disable prox interrupt while refreshing display
  VCNL4010_disable_Interrupt();
 8005ef8:	f001 fcc6 	bl	8007888 <VCNL4010_disable_Interrupt>

  //Start Receive Buffer From ESP 8266
  HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 20);
 8005efc:	4981      	ldr	r1, [pc, #516]	; (8006104 <main+0x258>)
 8005efe:	4b82      	ldr	r3, [pc, #520]	; (8006108 <main+0x25c>)
 8005f00:	2214      	movs	r2, #20
 8005f02:	0018      	movs	r0, r3
 8005f04:	f006 f992 	bl	800c22c <HAL_UART_Receive_DMA>

  // Setup display and I2C peripherals
  serial_select(DEBUG_PRINT);
 8005f08:	2001      	movs	r0, #1
 8005f0a:	f000 faa1 	bl	8006450 <serial_select>
  serial_clear();
 8005f0e:	f000 fad3 	bl	80064b8 <serial_clear>
  display_setup();
 8005f12:	f7ff ff1b 	bl	8005d4c <display_setup>
  serial_printf("Initializing I2C peripherals... ");
 8005f16:	4b7d      	ldr	r3, [pc, #500]	; (800610c <main+0x260>)
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f000 fb3d 	bl	8006598 <serial_printf>
  hts221_init();
 8005f1e:	f7ff fa43 	bl	80053a8 <hts221_init>

  bq_init_ret = bq_init();
 8005f22:	f7fd fc29 	bl	8003778 <bq_init>
 8005f26:	0003      	movs	r3, r0
 8005f28:	001a      	movs	r2, r3
 8005f2a:	4b79      	ldr	r3, [pc, #484]	; (8006110 <main+0x264>)
 8005f2c:	701a      	strb	r2, [r3, #0]
  VCNL4010_setLEDcurrent(20);
 8005f2e:	2014      	movs	r0, #20
 8005f30:	f001 fd11 	bl	8007956 <VCNL4010_setLEDcurrent>
  VCNL4010_enable_Interrupt();
 8005f34:	f001 fcc4 	bl	80078c0 <VCNL4010_enable_Interrupt>
  serial_println("Done!");
 8005f38:	4b76      	ldr	r3, [pc, #472]	; (8006114 <main+0x268>)
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 faec 	bl	8006518 <serial_println>

  if (HAL_ADC_Start_DMA(&hadc, adc_dma_buffer, 9) != HAL_OK) {
 8005f40:	4975      	ldr	r1, [pc, #468]	; (8006118 <main+0x26c>)
 8005f42:	4b76      	ldr	r3, [pc, #472]	; (800611c <main+0x270>)
 8005f44:	2209      	movs	r2, #9
 8005f46:	0018      	movs	r0, r3
 8005f48:	f001 ffb8 	bl	8007ebc <HAL_ADC_Start_DMA>
 8005f4c:	1e03      	subs	r3, r0, #0
 8005f4e:	d004      	beq.n	8005f5a <main+0xae>
    serial_println("!!! Failed to start ADC DMA");
 8005f50:	4b73      	ldr	r3, [pc, #460]	; (8006120 <main+0x274>)
 8005f52:	0018      	movs	r0, r3
 8005f54:	f000 fae0 	bl	8006518 <serial_println>
 8005f58:	e003      	b.n	8005f62 <main+0xb6>
  } else {
    serial_println("ADC DMA started OK");
 8005f5a:	4b72      	ldr	r3, [pc, #456]	; (8006124 <main+0x278>)
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f000 fadb 	bl	8006518 <serial_println>
  }
  HAL_Delay(100);
 8005f62:	2064      	movs	r0, #100	; 0x64
 8005f64:	f001 fe12 	bl	8007b8c <HAL_Delay>

  ADC_calc_r0();
 8005f68:	f7fd f9de 	bl	8003328 <ADC_calc_r0>
  serial_printf("Methane r0: %d\n", (int) r0);
 8005f6c:	4b6e      	ldr	r3, [pc, #440]	; (8006128 <main+0x27c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	1c18      	adds	r0, r3, #0
 8005f72:	f7fb f947 	bl	8001204 <__aeabi_f2iz>
 8005f76:	0002      	movs	r2, r0
 8005f78:	4b6c      	ldr	r3, [pc, #432]	; (800612c <main+0x280>)
 8005f7a:	0011      	movs	r1, r2
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f000 fb0b 	bl	8006598 <serial_printf>

  // Reset busy LED and set ready LED
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8005f82:	4b5f      	ldr	r3, [pc, #380]	; (8006100 <main+0x254>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	2120      	movs	r1, #32
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f002 ff2d 	bl	8008de8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8005f8e:	4b5c      	ldr	r3, [pc, #368]	; (8006100 <main+0x254>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	2110      	movs	r1, #16
 8005f94:	0018      	movs	r0, r3
 8005f96:	f002 ff27 	bl	8008de8 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (systemState == WAITING) {
 8005f9a:	4b65      	ldr	r3, [pc, #404]	; (8006130 <main+0x284>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d160      	bne.n	8006064 <main+0x1b8>
      serial_printf("ADC[0] = 0x%x\n", adc_dma_buffer[0]);
 8005fa2:	4b5d      	ldr	r3, [pc, #372]	; (8006118 <main+0x26c>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b63      	ldr	r3, [pc, #396]	; (8006134 <main+0x288>)
 8005fa8:	0011      	movs	r1, r2
 8005faa:	0018      	movs	r0, r3
 8005fac:	f000 faf4 	bl	8006598 <serial_printf>
      serial_printf("ADC[1] = 0x%x\n", adc_dma_buffer[1]);
 8005fb0:	4b59      	ldr	r3, [pc, #356]	; (8006118 <main+0x26c>)
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	4b60      	ldr	r3, [pc, #384]	; (8006138 <main+0x28c>)
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f000 faed 	bl	8006598 <serial_printf>
      serial_printf("ADC[8] = 0x%x\n", adc_dma_buffer[8]);
 8005fbe:	4b56      	ldr	r3, [pc, #344]	; (8006118 <main+0x26c>)
 8005fc0:	6a1a      	ldr	r2, [r3, #32]
 8005fc2:	4b5e      	ldr	r3, [pc, #376]	; (800613c <main+0x290>)
 8005fc4:	0011      	movs	r1, r2
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f000 fae6 	bl	8006598 <serial_printf>
      HAL_Delay(500);
 8005fcc:	23fa      	movs	r3, #250	; 0xfa
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f001 fddb 	bl	8007b8c <HAL_Delay>

      while (adc_dma_buffer[8] > 3000) {
 8005fd6:	e000      	b.n	8005fda <main+0x12e>
//    	  serial_println("Waiting for fruit selection..."); //wait
        asm("nop");
 8005fd8:	46c0      	nop			; (mov r8, r8)
      while (adc_dma_buffer[8] > 3000) {
 8005fda:	4b4f      	ldr	r3, [pc, #316]	; (8006118 <main+0x26c>)
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	4a58      	ldr	r2, [pc, #352]	; (8006140 <main+0x294>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d8f9      	bhi.n	8005fd8 <main+0x12c>
      }
      if (adc_dma_buffer[8] > 1500) {
 8005fe4:	4b4c      	ldr	r3, [pc, #304]	; (8006118 <main+0x26c>)
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	4a56      	ldr	r2, [pc, #344]	; (8006144 <main+0x298>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d907      	bls.n	8005ffe <main+0x152>
        // D
        serial_println("D");
 8005fee:	4b56      	ldr	r3, [pc, #344]	; (8006148 <main+0x29c>)
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f000 fa91 	bl	8006518 <serial_println>
        fruit_selection = MANGO;
 8005ff6:	4b55      	ldr	r3, [pc, #340]	; (800614c <main+0x2a0>)
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	e022      	b.n	8006044 <main+0x198>
      }
      else if (adc_dma_buffer[8] > 1000) {
 8005ffe:	4b46      	ldr	r3, [pc, #280]	; (8006118 <main+0x26c>)
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	23fa      	movs	r3, #250	; 0xfa
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	429a      	cmp	r2, r3
 8006008:	d907      	bls.n	800601a <main+0x16e>
        // C
        serial_println("C");
 800600a:	4b51      	ldr	r3, [pc, #324]	; (8006150 <main+0x2a4>)
 800600c:	0018      	movs	r0, r3
 800600e:	f000 fa83 	bl	8006518 <serial_println>
        fruit_selection = LIME;
 8006012:	4b4e      	ldr	r3, [pc, #312]	; (800614c <main+0x2a0>)
 8006014:	2203      	movs	r2, #3
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e014      	b.n	8006044 <main+0x198>
      }
      else if (adc_dma_buffer[8] > 500) {
 800601a:	4b3f      	ldr	r3, [pc, #252]	; (8006118 <main+0x26c>)
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	23fa      	movs	r3, #250	; 0xfa
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	429a      	cmp	r2, r3
 8006024:	d907      	bls.n	8006036 <main+0x18a>
        // B
        serial_println("B");
 8006026:	4b4b      	ldr	r3, [pc, #300]	; (8006154 <main+0x2a8>)
 8006028:	0018      	movs	r0, r3
 800602a:	f000 fa75 	bl	8006518 <serial_println>
        fruit_selection = BANANA;
 800602e:	4b47      	ldr	r3, [pc, #284]	; (800614c <main+0x2a0>)
 8006030:	2202      	movs	r2, #2
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	e006      	b.n	8006044 <main+0x198>
      }
      else {
        // A
        serial_println("A");
 8006036:	4b48      	ldr	r3, [pc, #288]	; (8006158 <main+0x2ac>)
 8006038:	0018      	movs	r0, r3
 800603a:	f000 fa6d 	bl	8006518 <serial_println>
        fruit_selection = APPLE;
 800603e:	4b43      	ldr	r3, [pc, #268]	; (800614c <main+0x2a0>)
 8006040:	2201      	movs	r2, #1
 8006042:	701a      	strb	r2, [r3, #0]
      }
      HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8006044:	4b2e      	ldr	r3, [pc, #184]	; (8006100 <main+0x254>)
 8006046:	2200      	movs	r2, #0
 8006048:	2120      	movs	r1, #32
 800604a:	0018      	movs	r0, r3
 800604c:	f002 fecc 	bl	8008de8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8006050:	4b2b      	ldr	r3, [pc, #172]	; (8006100 <main+0x254>)
 8006052:	2200      	movs	r2, #0
 8006054:	2110      	movs	r1, #16
 8006056:	0018      	movs	r0, r3
 8006058:	f002 fec6 	bl	8008de8 <HAL_GPIO_WritePin>
      systemState = MONITORING_SETUP;
 800605c:	4b34      	ldr	r3, [pc, #208]	; (8006130 <main+0x284>)
 800605e:	2201      	movs	r2, #1
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	e79a      	b.n	8005f9a <main+0xee>
    }

    else if(systemState == MONITORING_SETUP){
 8006064:	4b32      	ldr	r3, [pc, #200]	; (8006130 <main+0x284>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d129      	bne.n	80060c0 <main+0x214>
      if (food_present) {
 800606c:	4b3b      	ldr	r3, [pc, #236]	; (800615c <main+0x2b0>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <main+0x20a>
        serial_println("Food has been placed, starting monitoring!");
 8006074:	4b3a      	ldr	r3, [pc, #232]	; (8006160 <main+0x2b4>)
 8006076:	0018      	movs	r0, r3
 8006078:	f000 fa4e 	bl	8006518 <serial_println>
        //init days elapsed ...
        HAL_RTC_GetTime(&hrtc, &sTime1, RTC_FORMAT_BCD);
 800607c:	4939      	ldr	r1, [pc, #228]	; (8006164 <main+0x2b8>)
 800607e:	4b3a      	ldr	r3, [pc, #232]	; (8006168 <main+0x2bc>)
 8006080:	2201      	movs	r2, #1
 8006082:	0018      	movs	r0, r3
 8006084:	f004 fd70 	bl	800ab68 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate1, RTC_FORMAT_BCD);
 8006088:	4938      	ldr	r1, [pc, #224]	; (800616c <main+0x2c0>)
 800608a:	4b37      	ldr	r3, [pc, #220]	; (8006168 <main+0x2bc>)
 800608c:	2201      	movs	r2, #1
 800608e:	0018      	movs	r0, r3
 8006090:	f004 fe74 	bl	800ad7c <HAL_RTC_GetDate>
        current_day = sDate1.Date;
 8006094:	4b35      	ldr	r3, [pc, #212]	; (800616c <main+0x2c0>)
 8006096:	789a      	ldrb	r2, [r3, #2]
 8006098:	4b35      	ldr	r3, [pc, #212]	; (8006170 <main+0x2c4>)
 800609a:	701a      	strb	r2, [r3, #0]

        systemState = MONITORING;
 800609c:	4b24      	ldr	r3, [pc, #144]	; (8006130 <main+0x284>)
 800609e:	2202      	movs	r2, #2
 80060a0:	701a      	strb	r2, [r3, #0]
        VCNL4010_setLEDcurrent(20);
 80060a2:	2014      	movs	r0, #20
 80060a4:	f001 fc57 	bl	8007956 <VCNL4010_setLEDcurrent>
        VCNL4010_enable_Interrupt();
 80060a8:	f001 fc0a 	bl	80078c0 <VCNL4010_enable_Interrupt>
        HAL_TIM_Base_Start_IT(&htim6);
 80060ac:	4b31      	ldr	r3, [pc, #196]	; (8006174 <main+0x2c8>)
 80060ae:	0018      	movs	r0, r3
 80060b0:	f005 fd92 	bl	800bbd8 <HAL_TIM_Base_Start_IT>
 80060b4:	e771      	b.n	8005f9a <main+0xee>
      }
      else {
        serial_println("Waiting for food!");
 80060b6:	4b30      	ldr	r3, [pc, #192]	; (8006178 <main+0x2cc>)
 80060b8:	0018      	movs	r0, r3
 80060ba:	f000 fa2d 	bl	8006518 <serial_println>
 80060be:	e76c      	b.n	8005f9a <main+0xee>
      }
    }

    else if (systemState == MONITORING) {
 80060c0:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <main+0x284>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d000      	beq.n	80060ca <main+0x21e>
 80060c8:	e767      	b.n	8005f9a <main+0xee>
      //Prox_inturrupt debug
//      serial_printf("Prox. Sesnor %d\n", VCNL4010_readProximity());
//      VCNL4010_readProximity();

      if (food_present == false) {
 80060ca:	4b24      	ldr	r3, [pc, #144]	; (800615c <main+0x2b0>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2201      	movs	r2, #1
 80060d0:	4053      	eors	r3, r2
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d100      	bne.n	80060da <main+0x22e>
 80060d8:	e75f      	b.n	8005f9a <main+0xee>
          HAL_TIM_Base_Stop_IT(&htim6);
 80060da:	4b26      	ldr	r3, [pc, #152]	; (8006174 <main+0x2c8>)
 80060dc:	0018      	movs	r0, r3
 80060de:	f005 fdc7 	bl	800bc70 <HAL_TIM_Base_Stop_IT>
          VCNL4010_disable_Interrupt();
 80060e2:	f001 fbd1 	bl	8007888 <VCNL4010_disable_Interrupt>
          VCNL4010_setLEDcurrent(0);
 80060e6:	2000      	movs	r0, #0
 80060e8:	f001 fc35 	bl	8007956 <VCNL4010_setLEDcurrent>
          serial_println("Food is not present! Resarting to food selection screen.");
 80060ec:	4b23      	ldr	r3, [pc, #140]	; (800617c <main+0x2d0>)
 80060ee:	0018      	movs	r0, r3
 80060f0:	f000 fa12 	bl	8006518 <serial_println>
          // if statement to allow return to waiting state
          systemState = WAITING;
 80060f4:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <main+0x284>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	701a      	strb	r2, [r3, #0]
          //update display for food selection screen
          display_setup();
 80060fa:	f7ff fe27 	bl	8005d4c <display_setup>
    if (systemState == WAITING) {
 80060fe:	e74c      	b.n	8005f9a <main+0xee>
 8006100:	50000400 	.word	0x50000400
 8006104:	200000c4 	.word	0x200000c4
 8006108:	20000408 	.word	0x20000408
 800610c:	0800d2d0 	.word	0x0800d2d0
 8006110:	20000234 	.word	0x20000234
 8006114:	0800d1dc 	.word	0x0800d1dc
 8006118:	2000023c 	.word	0x2000023c
 800611c:	20000164 	.word	0x20000164
 8006120:	0800d2f4 	.word	0x0800d2f4
 8006124:	0800d310 	.word	0x0800d310
 8006128:	200000ac 	.word	0x200000ac
 800612c:	0800d324 	.word	0x0800d324
 8006130:	200000d8 	.word	0x200000d8
 8006134:	0800d334 	.word	0x0800d334
 8006138:	0800d344 	.word	0x0800d344
 800613c:	0800d354 	.word	0x0800d354
 8006140:	00000bb8 	.word	0x00000bb8
 8006144:	000005dc 	.word	0x000005dc
 8006148:	0800d364 	.word	0x0800d364
 800614c:	200000da 	.word	0x200000da
 8006150:	0800d368 	.word	0x0800d368
 8006154:	0800d36c 	.word	0x0800d36c
 8006158:	0800d370 	.word	0x0800d370
 800615c:	200000d9 	.word	0x200000d9
 8006160:	0800d374 	.word	0x0800d374
 8006164:	20000368 	.word	0x20000368
 8006168:	20000260 	.word	0x20000260
 800616c:	20000364 	.word	0x20000364
 8006170:	2000037c 	.word	0x2000037c
 8006174:	20000380 	.word	0x20000380
 8006178:	0800d3a0 	.word	0x0800d3a0
 800617c:	0800d3b4 	.word	0x0800d3b4

08006180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006180:	b590      	push	{r4, r7, lr}
 8006182:	b09d      	sub	sp, #116	; 0x74
 8006184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006186:	2438      	movs	r4, #56	; 0x38
 8006188:	193b      	adds	r3, r7, r4
 800618a:	0018      	movs	r0, r3
 800618c:	2338      	movs	r3, #56	; 0x38
 800618e:	001a      	movs	r2, r3
 8006190:	2100      	movs	r1, #0
 8006192:	f006 fe78 	bl	800ce86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006196:	2324      	movs	r3, #36	; 0x24
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	0018      	movs	r0, r3
 800619c:	2314      	movs	r3, #20
 800619e:	001a      	movs	r2, r3
 80061a0:	2100      	movs	r1, #0
 80061a2:	f006 fe70 	bl	800ce86 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80061a6:	003b      	movs	r3, r7
 80061a8:	0018      	movs	r0, r3
 80061aa:	2324      	movs	r3, #36	; 0x24
 80061ac:	001a      	movs	r2, r3
 80061ae:	2100      	movs	r1, #0
 80061b0:	f006 fe69 	bl	800ce86 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80061b4:	4b30      	ldr	r3, [pc, #192]	; (8006278 <SystemClock_Config+0xf8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a30      	ldr	r2, [pc, #192]	; (800627c <SystemClock_Config+0xfc>)
 80061ba:	401a      	ands	r2, r3
 80061bc:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <SystemClock_Config+0xf8>)
 80061be:	2180      	movs	r1, #128	; 0x80
 80061c0:	0109      	lsls	r1, r1, #4
 80061c2:	430a      	orrs	r2, r1
 80061c4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80061c6:	0021      	movs	r1, r4
 80061c8:	187b      	adds	r3, r7, r1
 80061ca:	220a      	movs	r2, #10
 80061cc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80061ce:	187b      	adds	r3, r7, r1
 80061d0:	2201      	movs	r2, #1
 80061d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80061d4:	187b      	adds	r3, r7, r1
 80061d6:	2210      	movs	r2, #16
 80061d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80061da:	187b      	adds	r3, r7, r1
 80061dc:	2201      	movs	r2, #1
 80061de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061e0:	187b      	adds	r3, r7, r1
 80061e2:	2202      	movs	r2, #2
 80061e4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80061e6:	187b      	adds	r3, r7, r1
 80061e8:	2200      	movs	r2, #0
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	2280      	movs	r2, #128	; 0x80
 80061f0:	02d2      	lsls	r2, r2, #11
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80061f4:	187b      	adds	r3, r7, r1
 80061f6:	2280      	movs	r2, #128	; 0x80
 80061f8:	03d2      	lsls	r2, r2, #15
 80061fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80061fc:	187b      	adds	r3, r7, r1
 80061fe:	0018      	movs	r0, r3
 8006200:	f003 fc04 	bl	8009a0c <HAL_RCC_OscConfig>
 8006204:	1e03      	subs	r3, r0, #0
 8006206:	d001      	beq.n	800620c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8006208:	f000 f85a 	bl	80062c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800620c:	2124      	movs	r1, #36	; 0x24
 800620e:	187b      	adds	r3, r7, r1
 8006210:	220f      	movs	r2, #15
 8006212:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006214:	187b      	adds	r3, r7, r1
 8006216:	2203      	movs	r2, #3
 8006218:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800621a:	187b      	adds	r3, r7, r1
 800621c:	2200      	movs	r2, #0
 800621e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006220:	187b      	adds	r3, r7, r1
 8006222:	2200      	movs	r2, #0
 8006224:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006226:	187b      	adds	r3, r7, r1
 8006228:	2200      	movs	r2, #0
 800622a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800622c:	187b      	adds	r3, r7, r1
 800622e:	2101      	movs	r1, #1
 8006230:	0018      	movs	r0, r3
 8006232:	f003 ffaf 	bl	800a194 <HAL_RCC_ClockConfig>
 8006236:	1e03      	subs	r3, r0, #0
 8006238:	d001      	beq.n	800623e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800623a:	f000 f841 	bl	80062c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800623e:	003b      	movs	r3, r7
 8006240:	222b      	movs	r2, #43	; 0x2b
 8006242:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006244:	003b      	movs	r3, r7
 8006246:	2200      	movs	r2, #0
 8006248:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800624a:	003b      	movs	r3, r7
 800624c:	2200      	movs	r2, #0
 800624e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006250:	003b      	movs	r3, r7
 8006252:	2200      	movs	r2, #0
 8006254:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006256:	003b      	movs	r3, r7
 8006258:	2280      	movs	r2, #128	; 0x80
 800625a:	0292      	lsls	r2, r2, #10
 800625c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800625e:	003b      	movs	r3, r7
 8006260:	0018      	movs	r0, r3
 8006262:	f004 f9bb 	bl	800a5dc <HAL_RCCEx_PeriphCLKConfig>
 8006266:	1e03      	subs	r3, r0, #0
 8006268:	d001      	beq.n	800626e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800626a:	f000 f829 	bl	80062c0 <Error_Handler>
  }
}
 800626e:	46c0      	nop			; (mov r8, r8)
 8006270:	46bd      	mov	sp, r7
 8006272:	b01d      	add	sp, #116	; 0x74
 8006274:	bd90      	pop	{r4, r7, pc}
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	40007000 	.word	0x40007000
 800627c:	ffffe7ff 	.word	0xffffe7ff

08006280 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8006284:	2200      	movs	r2, #0
 8006286:	2102      	movs	r1, #2
 8006288:	2011      	movs	r0, #17
 800628a:	f002 fa4b 	bl	8008724 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800628e:	2011      	movs	r0, #17
 8006290:	f002 fa5d 	bl	800874e <HAL_NVIC_EnableIRQ>
}
 8006294:	46c0      	nop			; (mov r8, r8)
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  //once buffer is full - restart
  HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 20);
 80062a4:	4904      	ldr	r1, [pc, #16]	; (80062b8 <HAL_UART_RxCpltCallback+0x1c>)
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <HAL_UART_RxCpltCallback+0x20>)
 80062a8:	2214      	movs	r2, #20
 80062aa:	0018      	movs	r0, r3
 80062ac:	f005 ffbe 	bl	800c22c <HAL_UART_Receive_DMA>
}
 80062b0:	46c0      	nop			; (mov r8, r8)
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b002      	add	sp, #8
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	200000c4 	.word	0x200000c4
 80062bc:	20000408 	.word	0x20000408

080062c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062c4:	b672      	cpsid	i
}
 80062c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80062c8:	e7fe      	b.n	80062c8 <Error_Handler+0x8>
	...

080062cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80062d2:	1d3b      	adds	r3, r7, #4
 80062d4:	0018      	movs	r0, r3
 80062d6:	2314      	movs	r3, #20
 80062d8:	001a      	movs	r2, r3
 80062da:	2100      	movs	r1, #0
 80062dc:	f006 fdd3 	bl	800ce86 <memset>
  RTC_DateTypeDef sDate = {0};
 80062e0:	003b      	movs	r3, r7
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80062e6:	4b2b      	ldr	r3, [pc, #172]	; (8006394 <MX_RTC_Init+0xc8>)
 80062e8:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <MX_RTC_Init+0xcc>)
 80062ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80062ec:	4b29      	ldr	r3, [pc, #164]	; (8006394 <MX_RTC_Init+0xc8>)
 80062ee:	2240      	movs	r2, #64	; 0x40
 80062f0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80062f2:	4b28      	ldr	r3, [pc, #160]	; (8006394 <MX_RTC_Init+0xc8>)
 80062f4:	227f      	movs	r2, #127	; 0x7f
 80062f6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80062f8:	4b26      	ldr	r3, [pc, #152]	; (8006394 <MX_RTC_Init+0xc8>)
 80062fa:	22ff      	movs	r2, #255	; 0xff
 80062fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80062fe:	4b25      	ldr	r3, [pc, #148]	; (8006394 <MX_RTC_Init+0xc8>)
 8006300:	2200      	movs	r2, #0
 8006302:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006304:	4b23      	ldr	r3, [pc, #140]	; (8006394 <MX_RTC_Init+0xc8>)
 8006306:	2200      	movs	r2, #0
 8006308:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800630a:	4b22      	ldr	r3, [pc, #136]	; (8006394 <MX_RTC_Init+0xc8>)
 800630c:	2200      	movs	r2, #0
 800630e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006310:	4b20      	ldr	r3, [pc, #128]	; (8006394 <MX_RTC_Init+0xc8>)
 8006312:	2200      	movs	r2, #0
 8006314:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006316:	4b1f      	ldr	r3, [pc, #124]	; (8006394 <MX_RTC_Init+0xc8>)
 8006318:	0018      	movs	r0, r3
 800631a:	f004 fac3 	bl	800a8a4 <HAL_RTC_Init>
 800631e:	1e03      	subs	r3, r0, #0
 8006320:	d001      	beq.n	8006326 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8006322:	f7ff ffcd 	bl	80062c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x2;
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	2202      	movs	r2, #2
 800632a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x35;
 800632c:	1d3b      	adds	r3, r7, #4
 800632e:	2235      	movs	r2, #53	; 0x35
 8006330:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8006332:	1d3b      	adds	r3, r7, #4
 8006334:	2200      	movs	r2, #0
 8006336:	709a      	strb	r2, [r3, #2]
  sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8006338:	1d3b      	adds	r3, r7, #4
 800633a:	2240      	movs	r2, #64	; 0x40
 800633c:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	2200      	movs	r2, #0
 8006342:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006344:	1d3b      	adds	r3, r7, #4
 8006346:	2200      	movs	r2, #0
 8006348:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800634a:	1d39      	adds	r1, r7, #4
 800634c:	4b11      	ldr	r3, [pc, #68]	; (8006394 <MX_RTC_Init+0xc8>)
 800634e:	2201      	movs	r2, #1
 8006350:	0018      	movs	r0, r3
 8006352:	f004 fb45 	bl	800a9e0 <HAL_RTC_SetTime>
 8006356:	1e03      	subs	r3, r0, #0
 8006358:	d001      	beq.n	800635e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800635a:	f7ff ffb1 	bl	80062c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800635e:	003b      	movs	r3, r7
 8006360:	2201      	movs	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8006364:	003b      	movs	r3, r7
 8006366:	2204      	movs	r2, #4
 8006368:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x26;
 800636a:	003b      	movs	r3, r7
 800636c:	2226      	movs	r2, #38	; 0x26
 800636e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x21;
 8006370:	003b      	movs	r3, r7
 8006372:	2221      	movs	r2, #33	; 0x21
 8006374:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006376:	0039      	movs	r1, r7
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <MX_RTC_Init+0xc8>)
 800637a:	2201      	movs	r2, #1
 800637c:	0018      	movs	r0, r3
 800637e:	f004 fc4f 	bl	800ac20 <HAL_RTC_SetDate>
 8006382:	1e03      	subs	r3, r0, #0
 8006384:	d001      	beq.n	800638a <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 8006386:	f7ff ff9b 	bl	80062c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	46bd      	mov	sp, r7
 800638e:	b006      	add	sp, #24
 8006390:	bd80      	pop	{r7, pc}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	20000260 	.word	0x20000260
 8006398:	40002800 	.word	0x40002800

0800639c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a06      	ldr	r2, [pc, #24]	; (80063c4 <HAL_RTC_MspInit+0x28>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d106      	bne.n	80063bc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80063ae:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <HAL_RTC_MspInit+0x2c>)
 80063b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <HAL_RTC_MspInit+0x2c>)
 80063b4:	2180      	movs	r1, #128	; 0x80
 80063b6:	02c9      	lsls	r1, r1, #11
 80063b8:	430a      	orrs	r2, r1
 80063ba:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80063bc:	46c0      	nop			; (mov r8, r8)
 80063be:	46bd      	mov	sp, r7
 80063c0:	b002      	add	sp, #8
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40002800 	.word	0x40002800
 80063c8:	40021000 	.word	0x40021000

080063cc <convert>:

// Internal functions to serial_print
char *convert(unsigned int num, int base);
size_t strlen(const char *str);

char *convert(unsigned int num, int base) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  static char Representation[]= "0123456789ABCDEF";
  static char buffer[50];
  char *ptr;

  ptr = &buffer[49];
 80063d6:	4b11      	ldr	r3, [pc, #68]	; (800641c <convert+0x50>)
 80063d8:	60fb      	str	r3, [r7, #12]
  *ptr = '\0';
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	701a      	strb	r2, [r3, #0]

  do {
    *--ptr = Representation[num%base];
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	0011      	movs	r1, r2
 80063e6:	0018      	movs	r0, r3
 80063e8:	f7f9 ff14 	bl	8000214 <__aeabi_uidivmod>
 80063ec:	000b      	movs	r3, r1
 80063ee:	001a      	movs	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <convert+0x54>)
 80063f8:	5c9a      	ldrb	r2, [r3, r2]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	701a      	strb	r2, [r3, #0]
    num /= base;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	0019      	movs	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7f9 fe80 	bl	8000108 <__udivsi3>
 8006408:	0003      	movs	r3, r0
 800640a:	607b      	str	r3, [r7, #4]
  } while(num != 0);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e6      	bne.n	80063e0 <convert+0x14>

  return(ptr);
 8006412:	68fb      	ldr	r3, [r7, #12]
}
 8006414:	0018      	movs	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	b004      	add	sp, #16
 800641a:	bd80      	pop	{r7, pc}
 800641c:	2000010d 	.word	0x2000010d
 8006420:	2000000c 	.word	0x2000000c

08006424 <strlen>:

size_t strlen (const char *str) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
  while (*str != '\0') {
 8006430:	e005      	b.n	800643e <strlen+0x1a>
    len++;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
    str++;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3301      	adds	r3, #1
 800643c:	607b      	str	r3, [r7, #4]
  while (*str != '\0') {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f5      	bne.n	8006432 <strlen+0xe>
  }
  return len;
 8006446:	68fb      	ldr	r3, [r7, #12]
}
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b004      	add	sp, #16
 800644e:	bd80      	pop	{r7, pc}

08006450 <serial_select>:
// End of internal functions for serial_print

void serial_select(enum uart_line_t line) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	0002      	movs	r2, r0
 8006458:	1dfb      	adds	r3, r7, #7
 800645a:	701a      	strb	r2, [r3, #0]
  switch (line) {
 800645c:	1dfb      	adds	r3, r7, #7
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <serial_select+0x1a>
 8006464:	2b01      	cmp	r3, #1
 8006466:	d00d      	beq.n	8006484 <serial_select+0x34>
    case DEBUG_PRINT:
      current_line = line;
      serial_line = SERIAL_UART;
      break;
  }
}
 8006468:	e019      	b.n	800649e <serial_select+0x4e>
      current_line = line;
 800646a:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <serial_select+0x58>)
 800646c:	1dfa      	adds	r2, r7, #7
 800646e:	7812      	ldrb	r2, [r2, #0]
 8006470:	701a      	strb	r2, [r3, #0]
      serial_line = WIFI_UART;
 8006472:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <serial_select+0x5c>)
 8006474:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <serial_select+0x60>)
 8006476:	0010      	movs	r0, r2
 8006478:	0019      	movs	r1, r3
 800647a:	2384      	movs	r3, #132	; 0x84
 800647c:	001a      	movs	r2, r3
 800647e:	f006 fcf9 	bl	800ce74 <memcpy>
      break;
 8006482:	e00c      	b.n	800649e <serial_select+0x4e>
      current_line = line;
 8006484:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <serial_select+0x58>)
 8006486:	1dfa      	adds	r2, r7, #7
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	701a      	strb	r2, [r3, #0]
      serial_line = SERIAL_UART;
 800648c:	4a07      	ldr	r2, [pc, #28]	; (80064ac <serial_select+0x5c>)
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <serial_select+0x64>)
 8006490:	0010      	movs	r0, r2
 8006492:	0019      	movs	r1, r3
 8006494:	2384      	movs	r3, #132	; 0x84
 8006496:	001a      	movs	r2, r3
 8006498:	f006 fcec 	bl	800ce74 <memcpy>
      break;
 800649c:	46c0      	nop			; (mov r8, r8)
}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	46bd      	mov	sp, r7
 80064a2:	b002      	add	sp, #8
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	20000284 	.word	0x20000284
 80064ac:	20000288 	.word	0x20000288
 80064b0:	20000408 	.word	0x20000408
 80064b4:	2000048c 	.word	0x2000048c

080064b8 <serial_clear>:

void serial_clear() {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
  char clear_sequence[] = {0x1b, 0x5B, 0x32, 0x4A, 0x1b, 0x5B, 0x48};
 80064be:	003b      	movs	r3, r7
 80064c0:	4a08      	ldr	r2, [pc, #32]	; (80064e4 <serial_clear+0x2c>)
 80064c2:	6811      	ldr	r1, [r2, #0]
 80064c4:	6019      	str	r1, [r3, #0]
 80064c6:	8891      	ldrh	r1, [r2, #4]
 80064c8:	8099      	strh	r1, [r3, #4]
 80064ca:	7992      	ldrb	r2, [r2, #6]
 80064cc:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&serial_line, (unsigned char*) clear_sequence, sizeof clear_sequence, HAL_MAX_DELAY);
 80064ce:	2301      	movs	r3, #1
 80064d0:	425b      	negs	r3, r3
 80064d2:	0039      	movs	r1, r7
 80064d4:	4804      	ldr	r0, [pc, #16]	; (80064e8 <serial_clear+0x30>)
 80064d6:	2207      	movs	r2, #7
 80064d8:	f005 fe00 	bl	800c0dc <HAL_UART_Transmit>
}
 80064dc:	46c0      	nop			; (mov r8, r8)
 80064de:	46bd      	mov	sp, r7
 80064e0:	b002      	add	sp, #8
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	0800d3f0 	.word	0x0800d3f0
 80064e8:	20000288 	.word	0x20000288

080064ec <serial_print>:

void serial_print(char string[]) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serial_line, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	0018      	movs	r0, r3
 80064f8:	f7ff ff94 	bl	8006424 <strlen>
 80064fc:	0003      	movs	r3, r0
 80064fe:	b29a      	uxth	r2, r3
 8006500:	2301      	movs	r3, #1
 8006502:	425b      	negs	r3, r3
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4803      	ldr	r0, [pc, #12]	; (8006514 <serial_print+0x28>)
 8006508:	f005 fde8 	bl	800c0dc <HAL_UART_Transmit>
}
 800650c:	46c0      	nop			; (mov r8, r8)
 800650e:	46bd      	mov	sp, r7
 8006510:	b002      	add	sp, #8
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20000288 	.word	0x20000288

08006518 <serial_println>:

void serial_println(char *string) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serial_line, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	0018      	movs	r0, r3
 8006524:	f7ff ff7e 	bl	8006424 <strlen>
 8006528:	0003      	movs	r3, r0
 800652a:	b29a      	uxth	r2, r3
 800652c:	2301      	movs	r3, #1
 800652e:	425b      	negs	r3, r3
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	480b      	ldr	r0, [pc, #44]	; (8006560 <serial_println+0x48>)
 8006534:	f005 fdd2 	bl	800c0dc <HAL_UART_Transmit>
  char* newline = ((current_line == WIFI) ? "\r\n" : "\r\f");
 8006538:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <serial_println+0x4c>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <serial_println+0x2c>
 8006540:	4b09      	ldr	r3, [pc, #36]	; (8006568 <serial_println+0x50>)
 8006542:	e000      	b.n	8006546 <serial_println+0x2e>
 8006544:	4b09      	ldr	r3, [pc, #36]	; (800656c <serial_println+0x54>)
 8006546:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&serial_line, (unsigned char*) newline, 2, HAL_MAX_DELAY);
 8006548:	2301      	movs	r3, #1
 800654a:	425b      	negs	r3, r3
 800654c:	68f9      	ldr	r1, [r7, #12]
 800654e:	4804      	ldr	r0, [pc, #16]	; (8006560 <serial_println+0x48>)
 8006550:	2202      	movs	r2, #2
 8006552:	f005 fdc3 	bl	800c0dc <HAL_UART_Transmit>
}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	46bd      	mov	sp, r7
 800655a:	b004      	add	sp, #16
 800655c:	bd80      	pop	{r7, pc}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	20000288 	.word	0x20000288
 8006564:	20000284 	.word	0x20000284
 8006568:	0800d3f8 	.word	0x0800d3f8
 800656c:	0800d3fc 	.word	0x0800d3fc

08006570 <serial_putc>:

void serial_putc(char c) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	0002      	movs	r2, r0
 8006578:	1dfb      	adds	r3, r7, #7
 800657a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&serial_line, (unsigned char*) &c, 1, HAL_MAX_DELAY);
 800657c:	2301      	movs	r3, #1
 800657e:	425b      	negs	r3, r3
 8006580:	1df9      	adds	r1, r7, #7
 8006582:	4804      	ldr	r0, [pc, #16]	; (8006594 <serial_putc+0x24>)
 8006584:	2201      	movs	r2, #1
 8006586:	f005 fda9 	bl	800c0dc <HAL_UART_Transmit>
}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	46bd      	mov	sp, r7
 800658e:	b002      	add	sp, #8
 8006590:	bd80      	pop	{r7, pc}
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	20000288 	.word	0x20000288

08006598 <serial_printf>:
}

/*!
    @brief a version of printf implmented from http://www.firmcodes.com/write-printf-function-c/
*/
void serial_printf(char format[], ...) {
 8006598:	b40f      	push	{r0, r1, r2, r3}
 800659a:	b580      	push	{r7, lr}
 800659c:	b086      	sub	sp, #24
 800659e:	af00      	add	r7, sp, #0
  char c;
  char *s;

  //Module 1: Initializing Myprintf's arguments
  va_list arg;
  va_start(arg, format);
 80065a0:	2324      	movs	r3, #36	; 0x24
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	603b      	str	r3, [r7, #0]

  for(traverse = format; *traverse != '\0'; traverse++) {
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	e08c      	b.n	80066c6 <serial_printf+0x12e>
    while( (*traverse != '%') && (*traverse != '\0')) {
      if (*traverse == '\n') {
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b0a      	cmp	r3, #10
 80065b2:	d10a      	bne.n	80065ca <serial_printf+0x32>
        serial_print(((current_line == WIFI) ? "\r\n" : "\r\f"));
 80065b4:	4b4a      	ldr	r3, [pc, #296]	; (80066e0 <serial_printf+0x148>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <serial_printf+0x28>
 80065bc:	4b49      	ldr	r3, [pc, #292]	; (80066e4 <serial_printf+0x14c>)
 80065be:	e000      	b.n	80065c2 <serial_printf+0x2a>
 80065c0:	4b49      	ldr	r3, [pc, #292]	; (80066e8 <serial_printf+0x150>)
 80065c2:	0018      	movs	r0, r3
 80065c4:	f7ff ff92 	bl	80064ec <serial_print>
 80065c8:	e004      	b.n	80065d4 <serial_printf+0x3c>
      }
      else {
        serial_putc(*traverse);
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	0018      	movs	r0, r3
 80065d0:	f7ff ffce 	bl	8006570 <serial_putc>
      }
      traverse++;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	3301      	adds	r3, #1
 80065d8:	617b      	str	r3, [r7, #20]
    while( (*traverse != '%') && (*traverse != '\0')) {
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b25      	cmp	r3, #37	; 0x25
 80065e0:	d003      	beq.n	80065ea <serial_printf+0x52>
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e0      	bne.n	80065ac <serial_printf+0x14>
    }

    if (*traverse == '\0') break;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d100      	bne.n	80065f4 <serial_printf+0x5c>
 80065f2:	e06d      	b.n	80066d0 <serial_printf+0x138>
    traverse++;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	3301      	adds	r3, #1
 80065f8:	617b      	str	r3, [r7, #20]

    //Module 2: Fetching and executing arguments
    switch(*traverse) {
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b25      	cmp	r3, #37	; 0x25
 8006600:	d059      	beq.n	80066b6 <serial_printf+0x11e>
 8006602:	db5d      	blt.n	80066c0 <serial_printf+0x128>
 8006604:	2b78      	cmp	r3, #120	; 0x78
 8006606:	dc5b      	bgt.n	80066c0 <serial_printf+0x128>
 8006608:	2b63      	cmp	r3, #99	; 0x63
 800660a:	db59      	blt.n	80066c0 <serial_printf+0x128>
 800660c:	3b63      	subs	r3, #99	; 0x63
 800660e:	2b15      	cmp	r3, #21
 8006610:	d856      	bhi.n	80066c0 <serial_printf+0x128>
 8006612:	009a      	lsls	r2, r3, #2
 8006614:	4b35      	ldr	r3, [pc, #212]	; (80066ec <serial_printf+0x154>)
 8006616:	18d3      	adds	r3, r2, r3
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	469f      	mov	pc, r3
      case 'c' :
        c = va_arg(arg,int);		//Fetch char argument
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	1d1a      	adds	r2, r3, #4
 8006620:	603a      	str	r2, [r7, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	1dfb      	adds	r3, r7, #7
 8006626:	701a      	strb	r2, [r3, #0]
        serial_putc(c);
 8006628:	1dfb      	adds	r3, r7, #7
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	0018      	movs	r0, r3
 800662e:	f7ff ff9f 	bl	8006570 <serial_putc>
        break;
 8006632:	e045      	b.n	80066c0 <serial_printf+0x128>
      case 'd' :
        signed_i = va_arg(arg,int); 		//Fetch Decimal/Integer argument
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	1d1a      	adds	r2, r3, #4
 8006638:	603a      	str	r2, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	613b      	str	r3, [r7, #16]
        if (signed_i < 0) {
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	da06      	bge.n	8006652 <serial_printf+0xba>
          signed_i = -signed_i;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	425b      	negs	r3, r3
 8006648:	613b      	str	r3, [r7, #16]
          serial_print("-");
 800664a:	4b29      	ldr	r3, [pc, #164]	; (80066f0 <serial_printf+0x158>)
 800664c:	0018      	movs	r0, r3
 800664e:	f7ff ff4d 	bl	80064ec <serial_print>
        }
        serial_print(convert(signed_i, 10));
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	210a      	movs	r1, #10
 8006656:	0018      	movs	r0, r3
 8006658:	f7ff feb8 	bl	80063cc <convert>
 800665c:	0003      	movs	r3, r0
 800665e:	0018      	movs	r0, r3
 8006660:	f7ff ff44 	bl	80064ec <serial_print>
        break;
 8006664:	e02c      	b.n	80066c0 <serial_printf+0x128>
      case 'o':
        i = va_arg(arg,unsigned int); //Fetch Octal representation
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	1d1a      	adds	r2, r3, #4
 800666a:	603a      	str	r2, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]
        serial_print(convert(i, 8));
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2108      	movs	r1, #8
 8006674:	0018      	movs	r0, r3
 8006676:	f7ff fea9 	bl	80063cc <convert>
 800667a:	0003      	movs	r3, r0
 800667c:	0018      	movs	r0, r3
 800667e:	f7ff ff35 	bl	80064ec <serial_print>
        break;
 8006682:	e01d      	b.n	80066c0 <serial_printf+0x128>
      case 's':
        s = va_arg(arg,char *); 		//Fetch string
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	1d1a      	adds	r2, r3, #4
 8006688:	603a      	str	r2, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	60bb      	str	r3, [r7, #8]
        serial_print(s);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	0018      	movs	r0, r3
 8006692:	f7ff ff2b 	bl	80064ec <serial_print>
        break;
 8006696:	e013      	b.n	80066c0 <serial_printf+0x128>
      case 'x':
        i = va_arg(arg,unsigned int); //Fetch Hexadecimal representation
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	1d1a      	adds	r2, r3, #4
 800669c:	603a      	str	r2, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]
        serial_print(convert(i, 16));
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2110      	movs	r1, #16
 80066a6:	0018      	movs	r0, r3
 80066a8:	f7ff fe90 	bl	80063cc <convert>
 80066ac:	0003      	movs	r3, r0
 80066ae:	0018      	movs	r0, r3
 80066b0:	f7ff ff1c 	bl	80064ec <serial_print>
        break;
 80066b4:	e004      	b.n	80066c0 <serial_printf+0x128>

      case '%':
        serial_print("%");
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <serial_printf+0x15c>)
 80066b8:	0018      	movs	r0, r3
 80066ba:	f7ff ff17 	bl	80064ec <serial_print>
        break;
 80066be:	46c0      	nop			; (mov r8, r8)
  for(traverse = format; *traverse != '\0'; traverse++) {
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	3301      	adds	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d185      	bne.n	80065da <serial_printf+0x42>
    }
  }

  //Module 3: Closing argument list to necessary clean-up
  va_end(arg);
} 
 80066ce:	e000      	b.n	80066d2 <serial_printf+0x13a>
    if (*traverse == '\0') break;
 80066d0:	46c0      	nop			; (mov r8, r8)
} 
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	46bd      	mov	sp, r7
 80066d6:	b006      	add	sp, #24
 80066d8:	bc80      	pop	{r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	b004      	add	sp, #16
 80066de:	4718      	bx	r3
 80066e0:	20000284 	.word	0x20000284
 80066e4:	0800d3f8 	.word	0x0800d3f8
 80066e8:	0800d3fc 	.word	0x0800d3fc
 80066ec:	0800f534 	.word	0x0800f534
 80066f0:	0800d400 	.word	0x0800d400
 80066f4:	0800d404 	.word	0x0800d404

080066f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80066fc:	4b18      	ldr	r3, [pc, #96]	; (8006760 <MX_SPI1_Init+0x68>)
 80066fe:	4a19      	ldr	r2, [pc, #100]	; (8006764 <MX_SPI1_Init+0x6c>)
 8006700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006702:	4b17      	ldr	r3, [pc, #92]	; (8006760 <MX_SPI1_Init+0x68>)
 8006704:	2282      	movs	r2, #130	; 0x82
 8006706:	0052      	lsls	r2, r2, #1
 8006708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800670a:	4b15      	ldr	r3, [pc, #84]	; (8006760 <MX_SPI1_Init+0x68>)
 800670c:	2200      	movs	r2, #0
 800670e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006710:	4b13      	ldr	r3, [pc, #76]	; (8006760 <MX_SPI1_Init+0x68>)
 8006712:	2200      	movs	r2, #0
 8006714:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <MX_SPI1_Init+0x68>)
 8006718:	2200      	movs	r2, #0
 800671a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800671c:	4b10      	ldr	r3, [pc, #64]	; (8006760 <MX_SPI1_Init+0x68>)
 800671e:	2200      	movs	r2, #0
 8006720:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006722:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <MX_SPI1_Init+0x68>)
 8006724:	2280      	movs	r2, #128	; 0x80
 8006726:	0092      	lsls	r2, r2, #2
 8006728:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <MX_SPI1_Init+0x68>)
 800672c:	2200      	movs	r2, #0
 800672e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006730:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <MX_SPI1_Init+0x68>)
 8006732:	2200      	movs	r2, #0
 8006734:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006736:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <MX_SPI1_Init+0x68>)
 8006738:	2200      	movs	r2, #0
 800673a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800673c:	4b08      	ldr	r3, [pc, #32]	; (8006760 <MX_SPI1_Init+0x68>)
 800673e:	2200      	movs	r2, #0
 8006740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006742:	4b07      	ldr	r3, [pc, #28]	; (8006760 <MX_SPI1_Init+0x68>)
 8006744:	2207      	movs	r2, #7
 8006746:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <MX_SPI1_Init+0x68>)
 800674a:	0018      	movs	r0, r3
 800674c:	f004 fbfa 	bl	800af44 <HAL_SPI_Init>
 8006750:	1e03      	subs	r3, r0, #0
 8006752:	d001      	beq.n	8006758 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006754:	f7ff fdb4 	bl	80062c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006758:	46c0      	nop			; (mov r8, r8)
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	46c0      	nop			; (mov r8, r8)
 8006760:	2000030c 	.word	0x2000030c
 8006764:	40013000 	.word	0x40013000

08006768 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006768:	b590      	push	{r4, r7, lr}
 800676a:	b089      	sub	sp, #36	; 0x24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006770:	240c      	movs	r4, #12
 8006772:	193b      	adds	r3, r7, r4
 8006774:	0018      	movs	r0, r3
 8006776:	2314      	movs	r3, #20
 8006778:	001a      	movs	r2, r3
 800677a:	2100      	movs	r1, #0
 800677c:	f006 fb83 	bl	800ce86 <memset>
  if(spiHandle->Instance==SPI1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a18      	ldr	r2, [pc, #96]	; (80067e8 <HAL_SPI_MspInit+0x80>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d129      	bne.n	80067de <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800678a:	4b18      	ldr	r3, [pc, #96]	; (80067ec <HAL_SPI_MspInit+0x84>)
 800678c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800678e:	4b17      	ldr	r3, [pc, #92]	; (80067ec <HAL_SPI_MspInit+0x84>)
 8006790:	2180      	movs	r1, #128	; 0x80
 8006792:	0149      	lsls	r1, r1, #5
 8006794:	430a      	orrs	r2, r1
 8006796:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006798:	4b14      	ldr	r3, [pc, #80]	; (80067ec <HAL_SPI_MspInit+0x84>)
 800679a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679c:	4b13      	ldr	r3, [pc, #76]	; (80067ec <HAL_SPI_MspInit+0x84>)
 800679e:	2101      	movs	r1, #1
 80067a0:	430a      	orrs	r2, r1
 80067a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80067a4:	4b11      	ldr	r3, [pc, #68]	; (80067ec <HAL_SPI_MspInit+0x84>)
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	2201      	movs	r2, #1
 80067aa:	4013      	ands	r3, r2
 80067ac:	60bb      	str	r3, [r7, #8]
 80067ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80067b0:	0021      	movs	r1, r4
 80067b2:	187b      	adds	r3, r7, r1
 80067b4:	22e0      	movs	r2, #224	; 0xe0
 80067b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b8:	187b      	adds	r3, r7, r1
 80067ba:	2202      	movs	r2, #2
 80067bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067be:	187b      	adds	r3, r7, r1
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80067c4:	187b      	adds	r3, r7, r1
 80067c6:	2201      	movs	r2, #1
 80067c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80067ca:	187b      	adds	r3, r7, r1
 80067cc:	2200      	movs	r2, #0
 80067ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067d0:	187a      	adds	r2, r7, r1
 80067d2:	23a0      	movs	r3, #160	; 0xa0
 80067d4:	05db      	lsls	r3, r3, #23
 80067d6:	0011      	movs	r1, r2
 80067d8:	0018      	movs	r0, r3
 80067da:	f002 f98f 	bl	8008afc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b009      	add	sp, #36	; 0x24
 80067e4:	bd90      	pop	{r4, r7, pc}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	40013000 	.word	0x40013000
 80067ec:	40021000 	.word	0x40021000

080067f0 <sram_csHigh>:

#define SRAM_SPI hspi1


// Function Code
void sram_csHigh() {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_SET);
 80067f4:	2380      	movs	r3, #128	; 0x80
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4803      	ldr	r0, [pc, #12]	; (8006808 <sram_csHigh+0x18>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	0019      	movs	r1, r3
 80067fe:	f002 faf3 	bl	8008de8 <HAL_GPIO_WritePin>
}
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	50000800 	.word	0x50000800

0800680c <sram_csLow>:

void sram_csLow() {
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_RESET);
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4803      	ldr	r0, [pc, #12]	; (8006824 <sram_csLow+0x18>)
 8006816:	2200      	movs	r2, #0
 8006818:	0019      	movs	r1, r3
 800681a:	f002 fae5 	bl	8008de8 <HAL_GPIO_WritePin>
}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	50000800 	.word	0x50000800

08006828 <sram_write>:
    @param addr the addres to write to
    @param buf the data buffer to write
    @param num the nubmer of bytes to write (from the buffer)
    @param reg pass MCPSRAM_WRSR if you're writing the status register, MCPSRAM_WRITE if you are writing data. Use MCPSRAM_WRITE in Adafruit functions that don't specify reg (default value).
*/
void sram_write(uint16_t addr, uint8_t* buf, uint16_t num, uint8_t reg) {
 8006828:	b5b0      	push	{r4, r5, r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	0004      	movs	r4, r0
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	0010      	movs	r0, r2
 8006834:	0019      	movs	r1, r3
 8006836:	250e      	movs	r5, #14
 8006838:	197b      	adds	r3, r7, r5
 800683a:	1c22      	adds	r2, r4, #0
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	230c      	movs	r3, #12
 8006840:	18fb      	adds	r3, r7, r3
 8006842:	1c02      	adds	r2, r0, #0
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	1dfb      	adds	r3, r7, #7
 8006848:	1c0a      	adds	r2, r1, #0
 800684a:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 800684c:	f7ff ffde 	bl	800680c <sram_csLow>

    // write command and address
    uint8_t cmdbuf[3] = {
 8006850:	2118      	movs	r1, #24
 8006852:	187b      	adds	r3, r7, r1
 8006854:	1dfa      	adds	r2, r7, #7
 8006856:	7812      	ldrb	r2, [r2, #0]
 8006858:	701a      	strb	r2, [r3, #0]
        reg,
        (uint8_t) (addr >> 8),
 800685a:	197b      	adds	r3, r7, r5
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	0a1b      	lsrs	r3, r3, #8
 8006860:	b29b      	uxth	r3, r3
 8006862:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8006864:	187b      	adds	r3, r7, r1
 8006866:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 8006868:	197b      	adds	r3, r7, r5
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 800686e:	187b      	adds	r3, r7, r1
 8006870:	709a      	strb	r2, [r3, #2]
    };
    
    for (int i = 0; i < 3; i++) {
 8006872:	2300      	movs	r3, #0
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	e019      	b.n	80068ac <sram_write+0x84>
        uint8_t d = cmdbuf[i];
 8006878:	2318      	movs	r3, #24
 800687a:	18fa      	adds	r2, r7, r3
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	18d3      	adds	r3, r2, r3
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	2117      	movs	r1, #23
 8006884:	187b      	adds	r3, r7, r1
 8006886:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8006888:	231f      	movs	r3, #31
 800688a:	18fc      	adds	r4, r7, r3
 800688c:	2301      	movs	r3, #1
 800688e:	425b      	negs	r3, r3
 8006890:	1879      	adds	r1, r7, r1
 8006892:	481c      	ldr	r0, [pc, #112]	; (8006904 <sram_write+0xdc>)
 8006894:	2201      	movs	r2, #1
 8006896:	f004 fbe9 	bl	800b06c <HAL_SPI_Transmit>
 800689a:	0003      	movs	r3, r0
 800689c:	7023      	strb	r3, [r4, #0]
//        if (status != HAL_OK) {
//            char error[] = "SRAM_WRITE: FAILED TO SEND CMD/ADDR\r\f";
//            serial_println(error);
//        }
        if (reg != MCPSRAM_WRITE) {
 800689e:	1dfb      	adds	r3, r7, #7
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d106      	bne.n	80068b4 <sram_write+0x8c>
    for (int i = 0; i < 3; i++) {
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	3301      	adds	r3, #1
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	dde2      	ble.n	8006878 <sram_write+0x50>
 80068b2:	e000      	b.n	80068b6 <sram_write+0x8e>
            break;
 80068b4:	46c0      	nop			; (mov r8, r8)
        }
    }

    for (int i = 0; i < num; i++) {
 80068b6:	2300      	movs	r3, #0
 80068b8:	623b      	str	r3, [r7, #32]
 80068ba:	e014      	b.n	80068e6 <sram_write+0xbe>
        uint8_t d = buf[i];
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	18d3      	adds	r3, r2, r3
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	2116      	movs	r1, #22
 80068c6:	187b      	adds	r3, r7, r1
 80068c8:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 80068ca:	231e      	movs	r3, #30
 80068cc:	18fc      	adds	r4, r7, r3
 80068ce:	2301      	movs	r3, #1
 80068d0:	425b      	negs	r3, r3
 80068d2:	1879      	adds	r1, r7, r1
 80068d4:	480b      	ldr	r0, [pc, #44]	; (8006904 <sram_write+0xdc>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	f004 fbc8 	bl	800b06c <HAL_SPI_Transmit>
 80068dc:	0003      	movs	r3, r0
 80068de:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num; i++) {
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	3301      	adds	r3, #1
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	230c      	movs	r3, #12
 80068e8:	18fb      	adds	r3, r7, r3
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	6a3a      	ldr	r2, [r7, #32]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	dbe4      	blt.n	80068bc <sram_write+0x94>
//            char error[] = "SRAM_WRITE: FAILED TO SEND\r\f";
//            serial_println(error);
//        }
    }

    sram_csHigh();
 80068f2:	f7ff ff7d 	bl	80067f0 <sram_csHigh>
    HAL_Delay(100);
 80068f6:	2064      	movs	r0, #100	; 0x64
 80068f8:	f001 f948 	bl	8007b8c <HAL_Delay>
}
 80068fc:	46c0      	nop			; (mov r8, r8)
 80068fe:	46bd      	mov	sp, r7
 8006900:	b00a      	add	sp, #40	; 0x28
 8006902:	bdb0      	pop	{r4, r5, r7, pc}
 8006904:	2000030c 	.word	0x2000030c

08006908 <sram_read>:
    @param addr the address to read from
    @param buf the data buffer to read into
    @param num the number of bytes to read
    @param reg pass MCPSRAM_RDSR if you're reading the status register, MCPSRAM_READ if you are reading data. Use MCPSRAM_READ in Adafruit functions that don't specify reg (default value).
*/
void sram_read(uint16_t addr, uint8_t *buf, uint16_t num, uint8_t reg) {
 8006908:	b5b0      	push	{r4, r5, r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af00      	add	r7, sp, #0
 800690e:	0004      	movs	r4, r0
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	0010      	movs	r0, r2
 8006914:	0019      	movs	r1, r3
 8006916:	250e      	movs	r5, #14
 8006918:	197b      	adds	r3, r7, r5
 800691a:	1c22      	adds	r2, r4, #0
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	230c      	movs	r3, #12
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	1c02      	adds	r2, r0, #0
 8006924:	801a      	strh	r2, [r3, #0]
 8006926:	1dfb      	adds	r3, r7, #7
 8006928:	1c0a      	adds	r2, r1, #0
 800692a:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 800692c:	f7ff ff6e 	bl	800680c <sram_csLow>

    // read command and address
    uint8_t cmdbuf[3] = {
 8006930:	2118      	movs	r1, #24
 8006932:	187b      	adds	r3, r7, r1
 8006934:	1dfa      	adds	r2, r7, #7
 8006936:	7812      	ldrb	r2, [r2, #0]
 8006938:	701a      	strb	r2, [r3, #0]
        reg,
        (uint8_t) (addr >> 8),
 800693a:	197b      	adds	r3, r7, r5
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	0a1b      	lsrs	r3, r3, #8
 8006940:	b29b      	uxth	r3, r3
 8006942:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8006944:	187b      	adds	r3, r7, r1
 8006946:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 8006948:	197b      	adds	r3, r7, r5
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 800694e:	187b      	adds	r3, r7, r1
 8006950:	709a      	strb	r2, [r3, #2]
    };

    for (int i = 0; i < 3; i++) {
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
 8006956:	e019      	b.n	800698c <sram_read+0x84>
        uint8_t d = cmdbuf[i];
 8006958:	2318      	movs	r3, #24
 800695a:	18fa      	adds	r2, r7, r3
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	18d3      	adds	r3, r2, r3
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	2117      	movs	r1, #23
 8006964:	187b      	adds	r3, r7, r1
 8006966:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8006968:	231f      	movs	r3, #31
 800696a:	18fc      	adds	r4, r7, r3
 800696c:	2301      	movs	r3, #1
 800696e:	425b      	negs	r3, r3
 8006970:	1879      	adds	r1, r7, r1
 8006972:	4818      	ldr	r0, [pc, #96]	; (80069d4 <sram_read+0xcc>)
 8006974:	2201      	movs	r2, #1
 8006976:	f004 fb79 	bl	800b06c <HAL_SPI_Transmit>
 800697a:	0003      	movs	r3, r0
 800697c:	7023      	strb	r3, [r4, #0]
//        if (status != HAL_OK) {
//            char error[] = "SRAM_READ: FAILED TO SEND";
//            serial_println(error);
//        }
        if (reg != MCPSRAM_READ) {
 800697e:	1dfb      	adds	r3, r7, #7
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2b03      	cmp	r3, #3
 8006984:	d106      	bne.n	8006994 <sram_read+0x8c>
    for (int i = 0; i < 3; i++) {
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	3301      	adds	r3, #1
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	2b02      	cmp	r3, #2
 8006990:	dde2      	ble.n	8006958 <sram_read+0x50>
 8006992:	e000      	b.n	8006996 <sram_read+0x8e>
            break;
 8006994:	46c0      	nop			; (mov r8, r8)
        }
    }

    for (int i = 0; i < num; i++) {
 8006996:	2300      	movs	r3, #0
 8006998:	623b      	str	r3, [r7, #32]
 800699a:	e00f      	b.n	80069bc <sram_read+0xb4>
        HAL_StatusTypeDef status = HAL_SPI_Receive(&SRAM_SPI, buf++, 1, HAL_MAX_DELAY);
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	1c4b      	adds	r3, r1, #1
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	231e      	movs	r3, #30
 80069a4:	18fc      	adds	r4, r7, r3
 80069a6:	2301      	movs	r3, #1
 80069a8:	425b      	negs	r3, r3
 80069aa:	480a      	ldr	r0, [pc, #40]	; (80069d4 <sram_read+0xcc>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	f004 fcb3 	bl	800b318 <HAL_SPI_Receive>
 80069b2:	0003      	movs	r3, r0
 80069b4:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num; i++) {
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	3301      	adds	r3, #1
 80069ba:	623b      	str	r3, [r7, #32]
 80069bc:	230c      	movs	r3, #12
 80069be:	18fb      	adds	r3, r7, r3
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	dbe9      	blt.n	800699c <sram_read+0x94>
//                    serial_println(msg);
//                    break;
//            }
//        }
    }
    sram_csHigh();
 80069c8:	f7ff ff12 	bl	80067f0 <sram_csHigh>
}
 80069cc:	46c0      	nop			; (mov r8, r8)
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b00a      	add	sp, #40	; 0x28
 80069d2:	bdb0      	pop	{r4, r5, r7, pc}
 80069d4:	2000030c 	.word	0x2000030c

080069d8 <sram_read8>:
/*! @brief read 1 byte of data at the specified address
    @param addr the address to read data at
    @param reg pass MCPSRAM_RDSR if you're reading the status register, MCPSRAM_READ if you are reading data. Use MCPSRAM_READ in Adafruit functions that don't specify reg (default value).
    @returns the read data byte
*/
uint8_t sram_read8(uint16_t addr, uint8_t reg) {
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	0002      	movs	r2, r0
 80069e0:	1dbb      	adds	r3, r7, #6
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	1d7b      	adds	r3, r7, #5
 80069e6:	1c0a      	adds	r2, r1, #0
 80069e8:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    sram_read(addr, &c, 1, reg);
 80069ea:	1d7b      	adds	r3, r7, #5
 80069ec:	781a      	ldrb	r2, [r3, #0]
 80069ee:	240f      	movs	r4, #15
 80069f0:	1939      	adds	r1, r7, r4
 80069f2:	1dbb      	adds	r3, r7, #6
 80069f4:	8818      	ldrh	r0, [r3, #0]
 80069f6:	0013      	movs	r3, r2
 80069f8:	2201      	movs	r2, #1
 80069fa:	f7ff ff85 	bl	8006908 <sram_read>
    return c;
 80069fe:	193b      	adds	r3, r7, r4
 8006a00:	781b      	ldrb	r3, [r3, #0]
}
 8006a02:	0018      	movs	r0, r3
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b005      	add	sp, #20
 8006a08:	bd90      	pop	{r4, r7, pc}

08006a0a <sram_write8>:
/*!
    @param addr the address to write to
    @param val the value to write
    @param reg MCPSRAM_WRITE if writing data, MCPSRAM_WRSR if writing a status register. Use MCPSRAM_WRITE in Adafruit functions that don't specify reg (default value).
*/
void sram_write8(uint16_t addr, uint8_t val, uint8_t reg) {
 8006a0a:	b590      	push	{r4, r7, lr}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	0004      	movs	r4, r0
 8006a12:	0008      	movs	r0, r1
 8006a14:	0011      	movs	r1, r2
 8006a16:	1dbb      	adds	r3, r7, #6
 8006a18:	1c22      	adds	r2, r4, #0
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	1d7b      	adds	r3, r7, #5
 8006a1e:	1c02      	adds	r2, r0, #0
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	1d3b      	adds	r3, r7, #4
 8006a24:	1c0a      	adds	r2, r1, #0
 8006a26:	701a      	strb	r2, [r3, #0]
    sram_write(addr, &val, 1, reg);
 8006a28:	1d3b      	adds	r3, r7, #4
 8006a2a:	781a      	ldrb	r2, [r3, #0]
 8006a2c:	1d79      	adds	r1, r7, #5
 8006a2e:	1dbb      	adds	r3, r7, #6
 8006a30:	8818      	ldrh	r0, [r3, #0]
 8006a32:	0013      	movs	r3, r2
 8006a34:	2201      	movs	r2, #1
 8006a36:	f7ff fef7 	bl	8006828 <sram_write>
}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b003      	add	sp, #12
 8006a40:	bd90      	pop	{r4, r7, pc}
	...

08006a44 <sram_erase>:
/*!
    @param addr the address to start the erase at
    @param length the number of byts to fill
    @param val the value to set the data to
*/
void sram_erase(uint16_t addr, uint16_t length, uint8_t val) {
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b089      	sub	sp, #36	; 0x24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	0004      	movs	r4, r0
 8006a4c:	0008      	movs	r0, r1
 8006a4e:	0011      	movs	r1, r2
 8006a50:	1dbb      	adds	r3, r7, #6
 8006a52:	1c22      	adds	r2, r4, #0
 8006a54:	801a      	strh	r2, [r3, #0]
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	1c02      	adds	r2, r0, #0
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	1cfb      	adds	r3, r7, #3
 8006a5e:	1c0a      	adds	r2, r1, #0
 8006a60:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 8006a62:	f7ff fed3 	bl	800680c <sram_csLow>

    // write command and addrress
    uint8_t cmdbuf[3] = {
 8006a66:	2110      	movs	r1, #16
 8006a68:	187b      	adds	r3, r7, r1
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	701a      	strb	r2, [r3, #0]
        MCPSRAM_WRITE,
        (uint8_t) (addr >> 8),
 8006a6e:	1dbb      	adds	r3, r7, #6
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	0a1b      	lsrs	r3, r3, #8
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8006a78:	187b      	adds	r3, r7, r1
 8006a7a:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 8006a7c:	1dbb      	adds	r3, r7, #6
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8006a82:	187b      	adds	r3, r7, r1
 8006a84:	709a      	strb	r2, [r3, #2]
    };

    for (int i = 0; i < 3; i++) {
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	e015      	b.n	8006ab8 <sram_erase+0x74>
        uint8_t d = cmdbuf[i];
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	18fa      	adds	r2, r7, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	18d3      	adds	r3, r2, r3
 8006a94:	781a      	ldrb	r2, [r3, #0]
 8006a96:	210f      	movs	r1, #15
 8006a98:	187b      	adds	r3, r7, r1
 8006a9a:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8006a9c:	2316      	movs	r3, #22
 8006a9e:	18fc      	adds	r4, r7, r3
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	425b      	negs	r3, r3
 8006aa4:	1879      	adds	r1, r7, r1
 8006aa6:	4816      	ldr	r0, [pc, #88]	; (8006b00 <sram_erase+0xbc>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f004 fadf 	bl	800b06c <HAL_SPI_Transmit>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 3; i++) {
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	61fb      	str	r3, [r7, #28]
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	dde6      	ble.n	8006a8c <sram_erase+0x48>
//            serial_println(error);
//        }
    }

    // write buffer of data
    for (int i = 0; i < length; i++) {
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	e012      	b.n	8006aea <sram_erase+0xa6>
        uint8_t d = val;
 8006ac4:	210e      	movs	r1, #14
 8006ac6:	187b      	adds	r3, r7, r1
 8006ac8:	1cfa      	adds	r2, r7, #3
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8006ace:	2317      	movs	r3, #23
 8006ad0:	18fc      	adds	r4, r7, r3
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	425b      	negs	r3, r3
 8006ad6:	1879      	adds	r1, r7, r1
 8006ad8:	4809      	ldr	r0, [pc, #36]	; (8006b00 <sram_erase+0xbc>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	f004 fac6 	bl	800b06c <HAL_SPI_Transmit>
 8006ae0:	0003      	movs	r3, r0
 8006ae2:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < length; i++) {
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	1d3b      	adds	r3, r7, #4
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	dbe7      	blt.n	8006ac4 <sram_erase+0x80>
//            char error[] = "SRAM_ERASE: TX ERR\r\f";
//            serial_println(error);
//        }
    }

    sram_csHigh();
 8006af4:	f7ff fe7c 	bl	80067f0 <sram_csHigh>
 8006af8:	46c0      	nop			; (mov r8, r8)
 8006afa:	46bd      	mov	sp, r7
 8006afc:	b009      	add	sp, #36	; 0x24
 8006afe:	bd90      	pop	{r4, r7, pc}
 8006b00:	2000030c 	.word	0x2000030c

08006b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b08:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <HAL_MspInit+0x24>)
 8006b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <HAL_MspInit+0x24>)
 8006b0e:	2101      	movs	r1, #1
 8006b10:	430a      	orrs	r2, r1
 8006b12:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b14:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <HAL_MspInit+0x24>)
 8006b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b18:	4b03      	ldr	r3, [pc, #12]	; (8006b28 <HAL_MspInit+0x24>)
 8006b1a:	2180      	movs	r1, #128	; 0x80
 8006b1c:	0549      	lsls	r1, r1, #21
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b22:	46c0      	nop			; (mov r8, r8)
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40021000 	.word	0x40021000

08006b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
    serial_println("NMI_Handler: something's not being handled right!");
 8006b30:	4b02      	ldr	r3, [pc, #8]	; (8006b3c <NMI_Handler+0x10>)
 8006b32:	0018      	movs	r0, r3
 8006b34:	f7ff fcf0 	bl	8006518 <serial_println>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b38:	e7fe      	b.n	8006b38 <NMI_Handler+0xc>
 8006b3a:	46c0      	nop			; (mov r8, r8)
 8006b3c:	0800d408 	.word	0x0800d408

08006b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    serial_println("HardFault_Handler: hard fault occurred!!!");
 8006b44:	4b02      	ldr	r3, [pc, #8]	; (8006b50 <HardFault_Handler+0x10>)
 8006b46:	0018      	movs	r0, r3
 8006b48:	f7ff fce6 	bl	8006518 <serial_println>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b4c:	e7fe      	b.n	8006b4c <HardFault_Handler+0xc>
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	0800d43c 	.word	0x0800d43c

08006b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006b58:	46c0      	nop			; (mov r8, r8)
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b62:	46c0      	nop			; (mov r8, r8)
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b6c:	f000 fff2 	bl	8007b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b70:	46c0      	nop			; (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8006b78:	b5b0      	push	{r4, r5, r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  // Prox. Sensor Interrupt
  serial_printf("== EXTI2 - PROX INT ==\n");
 8006b7e:	4b72      	ldr	r3, [pc, #456]	; (8006d48 <EXTI2_3_IRQHandler+0x1d0>)
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7ff fd09 	bl	8006598 <serial_printf>
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8006b86:	4b71      	ldr	r3, [pc, #452]	; (8006d4c <EXTI2_3_IRQHandler+0x1d4>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	2120      	movs	r1, #32
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f002 f92b 	bl	8008de8 <HAL_GPIO_WritePin>


  if (!food_present) {
 8006b92:	4b6f      	ldr	r3, [pc, #444]	; (8006d50 <EXTI2_3_IRQHandler+0x1d8>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2201      	movs	r2, #1
 8006b98:	4053      	eors	r3, r2
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <EXTI2_3_IRQHandler+0x30>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006ba0:	2004      	movs	r0, #4
 8006ba2:	f002 f93f 	bl	8008e24 <HAL_GPIO_EXTI_IRQHandler>
    return;
 8006ba6:	e0cb      	b.n	8006d40 <EXTI2_3_IRQHandler+0x1c8>
  }

  // update days elapsed ...
  HAL_RTC_GetTime(&hrtc, &sTime1, RTC_FORMAT_BCD);
 8006ba8:	496a      	ldr	r1, [pc, #424]	; (8006d54 <EXTI2_3_IRQHandler+0x1dc>)
 8006baa:	4b6b      	ldr	r3, [pc, #428]	; (8006d58 <EXTI2_3_IRQHandler+0x1e0>)
 8006bac:	2201      	movs	r2, #1
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f003 ffda 	bl	800ab68 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate1, RTC_FORMAT_BCD);
 8006bb4:	4969      	ldr	r1, [pc, #420]	; (8006d5c <EXTI2_3_IRQHandler+0x1e4>)
 8006bb6:	4b68      	ldr	r3, [pc, #416]	; (8006d58 <EXTI2_3_IRQHandler+0x1e0>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f004 f8de 	bl	800ad7c <HAL_RTC_GetDate>
  if (current_day != sDate1.Date){
 8006bc0:	4b66      	ldr	r3, [pc, #408]	; (8006d5c <EXTI2_3_IRQHandler+0x1e4>)
 8006bc2:	789a      	ldrb	r2, [r3, #2]
 8006bc4:	4b66      	ldr	r3, [pc, #408]	; (8006d60 <EXTI2_3_IRQHandler+0x1e8>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d011      	beq.n	8006bf0 <EXTI2_3_IRQHandler+0x78>
    serial_print("Updating date... ");
 8006bcc:	4b65      	ldr	r3, [pc, #404]	; (8006d64 <EXTI2_3_IRQHandler+0x1ec>)
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f7ff fc8c 	bl	80064ec <serial_print>
    current_day = sDate1.Date;
 8006bd4:	4b61      	ldr	r3, [pc, #388]	; (8006d5c <EXTI2_3_IRQHandler+0x1e4>)
 8006bd6:	789a      	ldrb	r2, [r3, #2]
 8006bd8:	4b61      	ldr	r3, [pc, #388]	; (8006d60 <EXTI2_3_IRQHandler+0x1e8>)
 8006bda:	701a      	strb	r2, [r3, #0]
    days_elapsed++;
 8006bdc:	4b62      	ldr	r3, [pc, #392]	; (8006d68 <EXTI2_3_IRQHandler+0x1f0>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	4b60      	ldr	r3, [pc, #384]	; (8006d68 <EXTI2_3_IRQHandler+0x1f0>)
 8006be6:	701a      	strb	r2, [r3, #0]
    serial_print("Done! \n\n");
 8006be8:	4b60      	ldr	r3, [pc, #384]	; (8006d6c <EXTI2_3_IRQHandler+0x1f4>)
 8006bea:	0018      	movs	r0, r3
 8006bec:	f7ff fc7e 	bl	80064ec <serial_print>
  }

  // Turn on the 5V power to the methane and Wi-Fi peripherals
  batteryState = HIGH;
 8006bf0:	4b5f      	ldr	r3, [pc, #380]	; (8006d70 <EXTI2_3_IRQHandler+0x1f8>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	485e      	ldr	r0, [pc, #376]	; (8006d74 <EXTI2_3_IRQHandler+0x1fc>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	0019      	movs	r1, r3
 8006c00:	f002 f8f2 	bl	8008de8 <HAL_GPIO_WritePin>

  int temp = -200;
 8006c04:	23c8      	movs	r3, #200	; 0xc8
 8006c06:	425b      	negs	r3, r3
 8006c08:	617b      	str	r3, [r7, #20]
  int humid = -1;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	425b      	negs	r3, r3
 8006c0e:	613b      	str	r3, [r7, #16]
  temp = hts221_get_temp('F');
 8006c10:	2046      	movs	r0, #70	; 0x46
 8006c12:	f7fe fdf3 	bl	80057fc <hts221_get_temp>
 8006c16:	0003      	movs	r3, r0
 8006c18:	617b      	str	r3, [r7, #20]
  if (temp == TEMP_ERROR) serial_printf("Error reading temperature\r\n");
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	4a56      	ldr	r2, [pc, #344]	; (8006d78 <EXTI2_3_IRQHandler+0x200>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d104      	bne.n	8006c2c <EXTI2_3_IRQHandler+0xb4>
 8006c22:	4b56      	ldr	r3, [pc, #344]	; (8006d7c <EXTI2_3_IRQHandler+0x204>)
 8006c24:	0018      	movs	r0, r3
 8006c26:	f7ff fcb7 	bl	8006598 <serial_printf>
 8006c2a:	e005      	b.n	8006c38 <EXTI2_3_IRQHandler+0xc0>
  else serial_printf("Current temperature is \t\t\t%d\tC\r\n", temp);
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4b54      	ldr	r3, [pc, #336]	; (8006d80 <EXTI2_3_IRQHandler+0x208>)
 8006c30:	0011      	movs	r1, r2
 8006c32:	0018      	movs	r0, r3
 8006c34:	f7ff fcb0 	bl	8006598 <serial_printf>

  humid = hts221_get_humid();
 8006c38:	f7fe fedc 	bl	80059f4 <hts221_get_humid>
 8006c3c:	0003      	movs	r3, r0
 8006c3e:	613b      	str	r3, [r7, #16]
  if (humid == HUMID_ERROR) serial_printf("Error reading humidity\r\n");
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	3301      	adds	r3, #1
 8006c44:	d104      	bne.n	8006c50 <EXTI2_3_IRQHandler+0xd8>
 8006c46:	4b4f      	ldr	r3, [pc, #316]	; (8006d84 <EXTI2_3_IRQHandler+0x20c>)
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f7ff fca5 	bl	8006598 <serial_printf>
 8006c4e:	e005      	b.n	8006c5c <EXTI2_3_IRQHandler+0xe4>
  else serial_printf("Current Relative Humidity is \t\t%d\t%c\r\n", humid, 37);
 8006c50:	6939      	ldr	r1, [r7, #16]
 8006c52:	4b4d      	ldr	r3, [pc, #308]	; (8006d88 <EXTI2_3_IRQHandler+0x210>)
 8006c54:	2225      	movs	r2, #37	; 0x25
 8006c56:	0018      	movs	r0, r3
 8006c58:	f7ff fc9e 	bl	8006598 <serial_printf>

  uint16_t soc = BQ27441_soc(FILTERED);
 8006c5c:	230e      	movs	r3, #14
 8006c5e:	18fc      	adds	r4, r7, r3
 8006c60:	2000      	movs	r0, #0
 8006c62:	f7fc fdf1 	bl	8003848 <BQ27441_soc>
 8006c66:	0003      	movs	r3, r0
 8006c68:	8023      	strh	r3, [r4, #0]

  uint32_t methane_raw = adc_dma_buffer[0];
 8006c6a:	4b48      	ldr	r3, [pc, #288]	; (8006d8c <EXTI2_3_IRQHandler+0x214>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60bb      	str	r3, [r7, #8]


  // Send sensor data to cloud
  serial_select(WIFI);
 8006c70:	2000      	movs	r0, #0
 8006c72:	f7ff fbed 	bl	8006450 <serial_select>
  if (setup_wifi("ASUS", "rickroll362") == AT_FAIL) {
 8006c76:	4a46      	ldr	r2, [pc, #280]	; (8006d90 <EXTI2_3_IRQHandler+0x218>)
 8006c78:	4b46      	ldr	r3, [pc, #280]	; (8006d94 <EXTI2_3_IRQHandler+0x21c>)
 8006c7a:	0011      	movs	r1, r2
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f7fc fd31 	bl	80036e4 <setup_wifi>
 8006c82:	0003      	movs	r3, r0
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d106      	bne.n	8006c96 <EXTI2_3_IRQHandler+0x11e>
    serial_select(DEBUG_PRINT);
 8006c88:	2001      	movs	r0, #1
 8006c8a:	f7ff fbe1 	bl	8006450 <serial_select>
    serial_printf("!!! wifi-setup-fail\n");
 8006c8e:	4b42      	ldr	r3, [pc, #264]	; (8006d98 <EXTI2_3_IRQHandler+0x220>)
 8006c90:	0018      	movs	r0, r3
 8006c92:	f7ff fc81 	bl	8006598 <serial_printf>
  }
  if (sent_freshbyte_data(temp, humid, methane_raw) == AT_FAIL){
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	6939      	ldr	r1, [r7, #16]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f7fc fd45 	bl	800372c <sent_freshbyte_data>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d106      	bne.n	8006cb6 <EXTI2_3_IRQHandler+0x13e>
    serial_select(DEBUG_PRINT);
 8006ca8:	2001      	movs	r0, #1
 8006caa:	f7ff fbd1 	bl	8006450 <serial_select>
    serial_printf("!!! wifi-send-fail\n");
 8006cae:	4b3b      	ldr	r3, [pc, #236]	; (8006d9c <EXTI2_3_IRQHandler+0x224>)
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f7ff fc71 	bl	8006598 <serial_printf>
  }

  //get wifi prediction here?

  // Disable the 5V regulator
  serial_select(DEBUG_PRINT);
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	f7ff fbca 	bl	8006450 <serial_select>

  float methane_ppm = ADC_calc_ppm(methane_raw);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7fc fbb5 	bl	8003430 <ADC_calc_ppm>
 8006cc6:	1c03      	adds	r3, r0, #0
 8006cc8:	607b      	str	r3, [r7, #4]
  serial_printf("Methane: %d\n", (int) methane_ppm);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fa fa9a 	bl	8001204 <__aeabi_f2iz>
 8006cd0:	0002      	movs	r2, r0
 8006cd2:	4b33      	ldr	r3, [pc, #204]	; (8006da0 <EXTI2_3_IRQHandler+0x228>)
 8006cd4:	0011      	movs	r1, r2
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f7ff fc5e 	bl	8006598 <serial_printf>
  batteryState = LOW;
 8006cdc:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <EXTI2_3_IRQHandler+0x1f8>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_RESET);
 8006ce2:	2380      	movs	r3, #128	; 0x80
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	4823      	ldr	r0, [pc, #140]	; (8006d74 <EXTI2_3_IRQHandler+0x1fc>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	0019      	movs	r1, r3
 8006cec:	f002 f87c 	bl	8008de8 <HAL_GPIO_WritePin>
//  HAL_Delay(5000);

  display_readings(soc, temp, humid, methane_ppm, predictive_model(temp, humid, methane_raw));
 8006cf0:	230e      	movs	r3, #14
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	881c      	ldrh	r4, [r3, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fa fa84 	bl	8001204 <__aeabi_f2iz>
 8006cfc:	0005      	movs	r5, r0
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	6939      	ldr	r1, [r7, #16]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	0018      	movs	r0, r3
 8006d06:	f000 fb51 	bl	80073ac <predictive_model>
 8006d0a:	0003      	movs	r3, r0
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	6979      	ldr	r1, [r7, #20]
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	002b      	movs	r3, r5
 8006d14:	0020      	movs	r0, r4
 8006d16:	f000 f9a5 	bl	8007064 <display_readings>
// Acknowledge the interrupt
  VCNL4010_ack_ISR();
 8006d1a:	f000 fe05 	bl	8007928 <VCNL4010_ack_ISR>
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <EXTI2_3_IRQHandler+0x1d4>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	2120      	movs	r1, #32
 8006d24:	0018      	movs	r0, r3
 8006d26:	f002 f85f 	bl	8008de8 <HAL_GPIO_WritePin>

  HAL_TIM_IRQHandler(&htim6);
 8006d2a:	4b1e      	ldr	r3, [pc, #120]	; (8006da4 <EXTI2_3_IRQHandler+0x22c>)
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	f004 ffc5 	bl	800bcbc <HAL_TIM_IRQHandler>
  serial_println("=== Interrupt done! === \n");
 8006d32:	4b1d      	ldr	r3, [pc, #116]	; (8006da8 <EXTI2_3_IRQHandler+0x230>)
 8006d34:	0018      	movs	r0, r3
 8006d36:	f7ff fbef 	bl	8006518 <serial_println>

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006d3a:	2004      	movs	r0, #4
 8006d3c:	f002 f872 	bl	8008e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8006d40:	46bd      	mov	sp, r7
 8006d42:	b006      	add	sp, #24
 8006d44:	bdb0      	pop	{r4, r5, r7, pc}
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	0800d468 	.word	0x0800d468
 8006d4c:	50000400 	.word	0x50000400
 8006d50:	200000d9 	.word	0x200000d9
 8006d54:	20000368 	.word	0x20000368
 8006d58:	20000260 	.word	0x20000260
 8006d5c:	20000364 	.word	0x20000364
 8006d60:	2000037c 	.word	0x2000037c
 8006d64:	0800d480 	.word	0x0800d480
 8006d68:	2000010e 	.word	0x2000010e
 8006d6c:	0800d494 	.word	0x0800d494
 8006d70:	2000000a 	.word	0x2000000a
 8006d74:	50000800 	.word	0x50000800
 8006d78:	fffffe34 	.word	0xfffffe34
 8006d7c:	0800d4a0 	.word	0x0800d4a0
 8006d80:	0800d4bc 	.word	0x0800d4bc
 8006d84:	0800d4e0 	.word	0x0800d4e0
 8006d88:	0800d4fc 	.word	0x0800d4fc
 8006d8c:	2000023c 	.word	0x2000023c
 8006d90:	0800d524 	.word	0x0800d524
 8006d94:	0800d530 	.word	0x0800d530
 8006d98:	0800d538 	.word	0x0800d538
 8006d9c:	0800d550 	.word	0x0800d550
 8006da0:	0800d564 	.word	0x0800d564
 8006da4:	20000380 	.word	0x20000380
 8006da8:	0800d574 	.word	0x0800d574

08006dac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8006db0:	4b03      	ldr	r3, [pc, #12]	; (8006dc0 <DMA1_Channel1_IRQHandler+0x14>)
 8006db2:	0018      	movs	r0, r3
 8006db4:	f001 fdc6 	bl	8008944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	2000011c 	.word	0x2000011c

08006dc4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006dc8:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8006dca:	0018      	movs	r0, r3
 8006dcc:	f001 fdba 	bl	8008944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8006dd0:	46c0      	nop			; (mov r8, r8)
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	200003c0 	.word	0x200003c0

08006ddc <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8006de0:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <ADC1_COMP_IRQHandler+0x14>)
 8006de2:	0018      	movs	r0, r3
 8006de4:	f001 f8ec 	bl	8007fc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8006de8:	46c0      	nop			; (mov r8, r8)
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	20000164 	.word	0x20000164

08006df4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006df4:	b5b0      	push	{r4, r5, r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  // Timer 6 should gather new sensor readings, upload these data to the cloud via Wi-Fi, pull the updated prediction, and update the display.

  serial_println("=== TIM6 Interrupt ===");
 8006dfa:	4b7f      	ldr	r3, [pc, #508]	; (8006ff8 <TIM6_DAC_IRQHandler+0x204>)
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f7ff fb8b 	bl	8006518 <serial_println>
  if ( ( (&htim6)->Instance->SR & 0x0001) == 0x0000) {
 8006e02:	4b7e      	ldr	r3, [pc, #504]	; (8006ffc <TIM6_DAC_IRQHandler+0x208>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	d10c      	bne.n	8006e28 <TIM6_DAC_IRQHandler+0x34>
	  serial_println("TIM6 ack'd in EXTI, returning...");
 8006e0e:	4b7c      	ldr	r3, [pc, #496]	; (8007000 <TIM6_DAC_IRQHandler+0x20c>)
 8006e10:	0018      	movs	r0, r3
 8006e12:	f7ff fb81 	bl	8006518 <serial_println>
    (&htim6)->Instance->CNT = 0x0001;
 8006e16:	4b79      	ldr	r3, [pc, #484]	; (8006ffc <TIM6_DAC_IRQHandler+0x208>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_IRQHandler(&htim6);
 8006e1e:	4b77      	ldr	r3, [pc, #476]	; (8006ffc <TIM6_DAC_IRQHandler+0x208>)
 8006e20:	0018      	movs	r0, r3
 8006e22:	f004 ff4b 	bl	800bcbc <HAL_TIM_IRQHandler>
	  return;
 8006e26:	e0e3      	b.n	8006ff0 <TIM6_DAC_IRQHandler+0x1fc>
  }

  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8006e28:	4b76      	ldr	r3, [pc, #472]	; (8007004 <TIM6_DAC_IRQHandler+0x210>)
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	2120      	movs	r1, #32
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f001 ffda 	bl	8008de8 <HAL_GPIO_WritePin>

  if (!food_present) {
 8006e34:	4b74      	ldr	r3, [pc, #464]	; (8007008 <TIM6_DAC_IRQHandler+0x214>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	4053      	eors	r3, r2
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d004      	beq.n	8006e4c <TIM6_DAC_IRQHandler+0x58>
    HAL_TIM_IRQHandler(&htim6);
 8006e42:	4b6e      	ldr	r3, [pc, #440]	; (8006ffc <TIM6_DAC_IRQHandler+0x208>)
 8006e44:	0018      	movs	r0, r3
 8006e46:	f004 ff39 	bl	800bcbc <HAL_TIM_IRQHandler>
    return;
 8006e4a:	e0d1      	b.n	8006ff0 <TIM6_DAC_IRQHandler+0x1fc>
  }

  // update days elapsed ...
  HAL_RTC_GetTime(&hrtc, &sTime1, RTC_FORMAT_BCD);
 8006e4c:	496f      	ldr	r1, [pc, #444]	; (800700c <TIM6_DAC_IRQHandler+0x218>)
 8006e4e:	4b70      	ldr	r3, [pc, #448]	; (8007010 <TIM6_DAC_IRQHandler+0x21c>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	0018      	movs	r0, r3
 8006e54:	f003 fe88 	bl	800ab68 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate1, RTC_FORMAT_BCD);
 8006e58:	496e      	ldr	r1, [pc, #440]	; (8007014 <TIM6_DAC_IRQHandler+0x220>)
 8006e5a:	4b6d      	ldr	r3, [pc, #436]	; (8007010 <TIM6_DAC_IRQHandler+0x21c>)
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f003 ff8c 	bl	800ad7c <HAL_RTC_GetDate>
  if (current_day != sDate1.Date){
 8006e64:	4b6b      	ldr	r3, [pc, #428]	; (8007014 <TIM6_DAC_IRQHandler+0x220>)
 8006e66:	789a      	ldrb	r2, [r3, #2]
 8006e68:	4b6b      	ldr	r3, [pc, #428]	; (8007018 <TIM6_DAC_IRQHandler+0x224>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d011      	beq.n	8006e94 <TIM6_DAC_IRQHandler+0xa0>
    serial_print("Updating date... ");
 8006e70:	4b6a      	ldr	r3, [pc, #424]	; (800701c <TIM6_DAC_IRQHandler+0x228>)
 8006e72:	0018      	movs	r0, r3
 8006e74:	f7ff fb3a 	bl	80064ec <serial_print>
    current_day = sDate1.Date;
 8006e78:	4b66      	ldr	r3, [pc, #408]	; (8007014 <TIM6_DAC_IRQHandler+0x220>)
 8006e7a:	789a      	ldrb	r2, [r3, #2]
 8006e7c:	4b66      	ldr	r3, [pc, #408]	; (8007018 <TIM6_DAC_IRQHandler+0x224>)
 8006e7e:	701a      	strb	r2, [r3, #0]
    days_elapsed++;
 8006e80:	4b67      	ldr	r3, [pc, #412]	; (8007020 <TIM6_DAC_IRQHandler+0x22c>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	3301      	adds	r3, #1
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	4b65      	ldr	r3, [pc, #404]	; (8007020 <TIM6_DAC_IRQHandler+0x22c>)
 8006e8a:	701a      	strb	r2, [r3, #0]
    serial_print("Done! \n\n");
 8006e8c:	4b65      	ldr	r3, [pc, #404]	; (8007024 <TIM6_DAC_IRQHandler+0x230>)
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f7ff fb2c 	bl	80064ec <serial_print>
  }

  // Turn on the 5V power to the methane and Wi-Fi peripherals
  batteryState = HIGH;
 8006e94:	4b64      	ldr	r3, [pc, #400]	; (8007028 <TIM6_DAC_IRQHandler+0x234>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8006e9a:	2380      	movs	r3, #128	; 0x80
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4863      	ldr	r0, [pc, #396]	; (800702c <TIM6_DAC_IRQHandler+0x238>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	0019      	movs	r1, r3
 8006ea4:	f001 ffa0 	bl	8008de8 <HAL_GPIO_WritePin>

  int temp = -200;
 8006ea8:	23c8      	movs	r3, #200	; 0xc8
 8006eaa:	425b      	negs	r3, r3
 8006eac:	617b      	str	r3, [r7, #20]
  int humid = -1;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	425b      	negs	r3, r3
 8006eb2:	613b      	str	r3, [r7, #16]
  temp = hts221_get_temp('F');
 8006eb4:	2046      	movs	r0, #70	; 0x46
 8006eb6:	f7fe fca1 	bl	80057fc <hts221_get_temp>
 8006eba:	0003      	movs	r3, r0
 8006ebc:	617b      	str	r3, [r7, #20]
  if (temp == TEMP_ERROR) serial_printf("Error reading temperature\r\n");
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	4a5b      	ldr	r2, [pc, #364]	; (8007030 <TIM6_DAC_IRQHandler+0x23c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d104      	bne.n	8006ed0 <TIM6_DAC_IRQHandler+0xdc>
 8006ec6:	4b5b      	ldr	r3, [pc, #364]	; (8007034 <TIM6_DAC_IRQHandler+0x240>)
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f7ff fb65 	bl	8006598 <serial_printf>
 8006ece:	e005      	b.n	8006edc <TIM6_DAC_IRQHandler+0xe8>
  else serial_printf("Current temperature is \t\t\t%d\tC\r\n", temp);
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4b59      	ldr	r3, [pc, #356]	; (8007038 <TIM6_DAC_IRQHandler+0x244>)
 8006ed4:	0011      	movs	r1, r2
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f7ff fb5e 	bl	8006598 <serial_printf>

  humid = hts221_get_humid();
 8006edc:	f7fe fd8a 	bl	80059f4 <hts221_get_humid>
 8006ee0:	0003      	movs	r3, r0
 8006ee2:	613b      	str	r3, [r7, #16]
  if (humid == HUMID_ERROR) serial_printf("Error reading humidity\r\n");
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	d104      	bne.n	8006ef4 <TIM6_DAC_IRQHandler+0x100>
 8006eea:	4b54      	ldr	r3, [pc, #336]	; (800703c <TIM6_DAC_IRQHandler+0x248>)
 8006eec:	0018      	movs	r0, r3
 8006eee:	f7ff fb53 	bl	8006598 <serial_printf>
 8006ef2:	e005      	b.n	8006f00 <TIM6_DAC_IRQHandler+0x10c>
  else serial_printf("Current Relative Humidity is \t\t%d\t%c\r\n", humid, 37);
 8006ef4:	6939      	ldr	r1, [r7, #16]
 8006ef6:	4b52      	ldr	r3, [pc, #328]	; (8007040 <TIM6_DAC_IRQHandler+0x24c>)
 8006ef8:	2225      	movs	r2, #37	; 0x25
 8006efa:	0018      	movs	r0, r3
 8006efc:	f7ff fb4c 	bl	8006598 <serial_printf>

  uint16_t soc = BQ27441_soc(FILTERED);
 8006f00:	250e      	movs	r5, #14
 8006f02:	197c      	adds	r4, r7, r5
 8006f04:	2000      	movs	r0, #0
 8006f06:	f7fc fc9f 	bl	8003848 <BQ27441_soc>
 8006f0a:	0003      	movs	r3, r0
 8006f0c:	8023      	strh	r3, [r4, #0]
  serial_printf("Current Battery is %d\n", soc);
 8006f0e:	197b      	adds	r3, r7, r5
 8006f10:	881a      	ldrh	r2, [r3, #0]
 8006f12:	4b4c      	ldr	r3, [pc, #304]	; (8007044 <TIM6_DAC_IRQHandler+0x250>)
 8006f14:	0011      	movs	r1, r2
 8006f16:	0018      	movs	r0, r3
 8006f18:	f7ff fb3e 	bl	8006598 <serial_printf>

  uint32_t methane_raw = adc_dma_buffer[0];
 8006f1c:	4b4a      	ldr	r3, [pc, #296]	; (8007048 <TIM6_DAC_IRQHandler+0x254>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60bb      	str	r3, [r7, #8]

  // Send sensor data to cloud
  serial_select(WIFI);
 8006f22:	2000      	movs	r0, #0
 8006f24:	f7ff fa94 	bl	8006450 <serial_select>
  if (setup_wifi("ASUS", "rickroll362") == AT_FAIL) {
 8006f28:	4a48      	ldr	r2, [pc, #288]	; (800704c <TIM6_DAC_IRQHandler+0x258>)
 8006f2a:	4b49      	ldr	r3, [pc, #292]	; (8007050 <TIM6_DAC_IRQHandler+0x25c>)
 8006f2c:	0011      	movs	r1, r2
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f7fc fbd8 	bl	80036e4 <setup_wifi>
 8006f34:	0003      	movs	r3, r0
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d106      	bne.n	8006f48 <TIM6_DAC_IRQHandler+0x154>
    serial_select(DEBUG_PRINT);
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	f7ff fa88 	bl	8006450 <serial_select>
    serial_printf("!!! wifi-setup-fail\n");
 8006f40:	4b44      	ldr	r3, [pc, #272]	; (8007054 <TIM6_DAC_IRQHandler+0x260>)
 8006f42:	0018      	movs	r0, r3
 8006f44:	f7ff fb28 	bl	8006598 <serial_printf>
  }
  if (sent_freshbyte_data(temp, humid, methane_raw) == AT_FAIL){
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	6939      	ldr	r1, [r7, #16]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7fc fbec 	bl	800372c <sent_freshbyte_data>
 8006f54:	0003      	movs	r3, r0
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d106      	bne.n	8006f68 <TIM6_DAC_IRQHandler+0x174>
    serial_select(DEBUG_PRINT);
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	f7ff fa78 	bl	8006450 <serial_select>
    serial_printf("!!! wifi-send-fail\n");
 8006f60:	4b3d      	ldr	r3, [pc, #244]	; (8007058 <TIM6_DAC_IRQHandler+0x264>)
 8006f62:	0018      	movs	r0, r3
 8006f64:	f7ff fb18 	bl	8006598 <serial_printf>
  }

  // get wifi prediction here?

  // Disable the 5V regulator
  serial_select(DEBUG_PRINT);
 8006f68:	2001      	movs	r0, #1
 8006f6a:	f7ff fa71 	bl	8006450 <serial_select>

  float methane_ppm = ADC_calc_ppm(methane_raw);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	0018      	movs	r0, r3
 8006f74:	f7fc fa5c 	bl	8003430 <ADC_calc_ppm>
 8006f78:	1c03      	adds	r3, r0, #0
 8006f7a:	607b      	str	r3, [r7, #4]
  serial_printf("Methane: %d\n", (int) methane_ppm);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7fa f941 	bl	8001204 <__aeabi_f2iz>
 8006f82:	0002      	movs	r2, r0
 8006f84:	4b35      	ldr	r3, [pc, #212]	; (800705c <TIM6_DAC_IRQHandler+0x268>)
 8006f86:	0011      	movs	r1, r2
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7ff fb05 	bl	8006598 <serial_printf>
  batteryState = LOW;
 8006f8e:	4b26      	ldr	r3, [pc, #152]	; (8007028 <TIM6_DAC_IRQHandler+0x234>)
 8006f90:	2201      	movs	r2, #1
 8006f92:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_RESET);
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	4824      	ldr	r0, [pc, #144]	; (800702c <TIM6_DAC_IRQHandler+0x238>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	0019      	movs	r1, r3
 8006f9e:	f001 ff23 	bl	8008de8 <HAL_GPIO_WritePin>
//  HAL_Delay(5000);

  display_readings(soc, temp, humid, methane_ppm, predictive_model(temp, humid, methane_raw));
 8006fa2:	230e      	movs	r3, #14
 8006fa4:	18fb      	adds	r3, r7, r3
 8006fa6:	881c      	ldrh	r4, [r3, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fa f92b 	bl	8001204 <__aeabi_f2iz>
 8006fae:	0005      	movs	r5, r0
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	6939      	ldr	r1, [r7, #16]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f000 f9f8 	bl	80073ac <predictive_model>
 8006fbc:	0003      	movs	r3, r0
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	6979      	ldr	r1, [r7, #20]
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	002b      	movs	r3, r5
 8006fc6:	0020      	movs	r0, r4
 8006fc8:	f000 f84c 	bl	8007064 <display_readings>

  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <TIM6_DAC_IRQHandler+0x210>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2120      	movs	r1, #32
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f001 ff08 	bl	8008de8 <HAL_GPIO_WritePin>

  serial_println("=== Interrupt done! === \n");
 8006fd8:	4b21      	ldr	r3, [pc, #132]	; (8007060 <TIM6_DAC_IRQHandler+0x26c>)
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f7ff fa9c 	bl	8006518 <serial_println>
  (&htim6)->Instance->CNT = 0x0001;
 8006fe0:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <TIM6_DAC_IRQHandler+0x208>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <TIM6_DAC_IRQHandler+0x208>)
 8006fea:	0018      	movs	r0, r3
 8006fec:	f004 fe66 	bl	800bcbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	b006      	add	sp, #24
 8006ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	0800d590 	.word	0x0800d590
 8006ffc:	20000380 	.word	0x20000380
 8007000:	0800d5a8 	.word	0x0800d5a8
 8007004:	50000400 	.word	0x50000400
 8007008:	200000d9 	.word	0x200000d9
 800700c:	20000368 	.word	0x20000368
 8007010:	20000260 	.word	0x20000260
 8007014:	20000364 	.word	0x20000364
 8007018:	2000037c 	.word	0x2000037c
 800701c:	0800d480 	.word	0x0800d480
 8007020:	2000010e 	.word	0x2000010e
 8007024:	0800d494 	.word	0x0800d494
 8007028:	2000000a 	.word	0x2000000a
 800702c:	50000800 	.word	0x50000800
 8007030:	fffffe34 	.word	0xfffffe34
 8007034:	0800d4a0 	.word	0x0800d4a0
 8007038:	0800d4bc 	.word	0x0800d4bc
 800703c:	0800d4e0 	.word	0x0800d4e0
 8007040:	0800d4fc 	.word	0x0800d4fc
 8007044:	0800d5cc 	.word	0x0800d5cc
 8007048:	2000023c 	.word	0x2000023c
 800704c:	0800d524 	.word	0x0800d524
 8007050:	0800d530 	.word	0x0800d530
 8007054:	0800d538 	.word	0x0800d538
 8007058:	0800d550 	.word	0x0800d550
 800705c:	0800d564 	.word	0x0800d564
 8007060:	0800d574 	.word	0x0800d574

08007064 <display_readings>:

/* USER CODE BEGIN 1 */
void display_readings(int battery, int temp, int humid, int methane_ppm, int prediction_days) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
  //use string or use

  //turn on red led while updating display
//  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);

  serial_select(DEBUG_PRINT);
 8007072:	2001      	movs	r0, #1
 8007074:	f7ff f9ec 	bl	8006450 <serial_select>
  serial_printf("Clearing display buffers...\n");
 8007078:	4bab      	ldr	r3, [pc, #684]	; (8007328 <display_readings+0x2c4>)
 800707a:	0018      	movs	r0, r3
 800707c:	f7ff fa8c 	bl	8006598 <serial_printf>
  clear_buffer();
 8007080:	f7fc ffcc 	bl	800401c <clear_buffer>

  serial_printf("Powering up display...\n");
 8007084:	4ba9      	ldr	r3, [pc, #676]	; (800732c <display_readings+0x2c8>)
 8007086:	0018      	movs	r0, r3
 8007088:	f7ff fa86 	bl	8006598 <serial_printf>
  epd_powerUp();
 800708c:	f7fc fec2 	bl	8003e14 <epd_powerUp>

  serial_printf("Writing to B/W buffer...\n");
 8007090:	4ba7      	ldr	r3, [pc, #668]	; (8007330 <display_readings+0x2cc>)
 8007092:	0018      	movs	r0, r3
 8007094:	f7ff fa80 	bl	8006598 <serial_printf>
  write_RAM_to_epd(buffer1, buffer1_size, 0, false);
 8007098:	4ba6      	ldr	r3, [pc, #664]	; (8007334 <display_readings+0x2d0>)
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	4ba6      	ldr	r3, [pc, #664]	; (8007338 <display_readings+0x2d4>)
 800709e:	6819      	ldr	r1, [r3, #0]
 80070a0:	2300      	movs	r3, #0
 80070a2:	2200      	movs	r2, #0
 80070a4:	f7fd f8b8 	bl	8004218 <write_RAM_to_epd>

  serial_printf("Writing to R buffer...\n");
 80070a8:	4ba4      	ldr	r3, [pc, #656]	; (800733c <display_readings+0x2d8>)
 80070aa:	0018      	movs	r0, r3
 80070ac:	f7ff fa74 	bl	8006598 <serial_printf>
  write_RAM_to_epd(buffer1, buffer1_size, 1, false);
 80070b0:	4ba0      	ldr	r3, [pc, #640]	; (8007334 <display_readings+0x2d0>)
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	4ba0      	ldr	r3, [pc, #640]	; (8007338 <display_readings+0x2d4>)
 80070b6:	6819      	ldr	r1, [r3, #0]
 80070b8:	2300      	movs	r3, #0
 80070ba:	2201      	movs	r2, #1
 80070bc:	f7fd f8ac 	bl	8004218 <write_RAM_to_epd>

  serial_println("Printing random information to display\n");
 80070c0:	4b9f      	ldr	r3, [pc, #636]	; (8007340 <display_readings+0x2dc>)
 80070c2:	0018      	movs	r0, r3
 80070c4:	f7ff fa28 	bl	8006518 <serial_println>
  set_text_scale(2);
 80070c8:	2002      	movs	r0, #2
 80070ca:	f7fd fac3 	bl	8004654 <set_text_scale>
  set_x_margin(0);
 80070ce:	2000      	movs	r0, #0
 80070d0:	f7fd faee 	bl	80046b0 <set_x_margin>
  set_y_margin(0);
 80070d4:	2000      	movs	r0, #0
 80070d6:	f7fd fafb 	bl	80046d0 <set_y_margin>
  set_cursor(0,0);
 80070da:	2100      	movs	r1, #0
 80070dc:	2000      	movs	r0, #0
 80070de:	f7fd facb 	bl	8004678 <set_cursor>

  HAL_RTC_GetTime(&hrtc, &sTime1, RTC_FORMAT_BCD);
 80070e2:	4998      	ldr	r1, [pc, #608]	; (8007344 <display_readings+0x2e0>)
 80070e4:	4b98      	ldr	r3, [pc, #608]	; (8007348 <display_readings+0x2e4>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	0018      	movs	r0, r3
 80070ea:	f003 fd3d 	bl	800ab68 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate1, RTC_FORMAT_BCD);
 80070ee:	4997      	ldr	r1, [pc, #604]	; (800734c <display_readings+0x2e8>)
 80070f0:	4b95      	ldr	r3, [pc, #596]	; (8007348 <display_readings+0x2e4>)
 80070f2:	2201      	movs	r2, #1
 80070f4:	0018      	movs	r0, r3
 80070f6:	f003 fe41 	bl	800ad7c <HAL_RTC_GetDate>

  //get datetime
  printFloat( (((sDate1.Month & 0xF0) >> 4) * 10) + (sDate1.Month & 0xF), 0); printString("/");
 80070fa:	4b94      	ldr	r3, [pc, #592]	; (800734c <display_readings+0x2e8>)
 80070fc:	785b      	ldrb	r3, [r3, #1]
 80070fe:	091b      	lsrs	r3, r3, #4
 8007100:	b2db      	uxtb	r3, r3
 8007102:	001a      	movs	r2, r3
 8007104:	0013      	movs	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	189b      	adds	r3, r3, r2
 800710a:	005b      	lsls	r3, r3, #1
 800710c:	001a      	movs	r2, r3
 800710e:	4b8f      	ldr	r3, [pc, #572]	; (800734c <display_readings+0x2e8>)
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	0019      	movs	r1, r3
 8007114:	230f      	movs	r3, #15
 8007116:	400b      	ands	r3, r1
 8007118:	18d3      	adds	r3, r2, r3
 800711a:	0018      	movs	r0, r3
 800711c:	f7fb fe7c 	bl	8002e18 <__aeabi_i2d>
 8007120:	2200      	movs	r2, #0
 8007122:	f7fd ff87 	bl	8005034 <printFloat>
 8007126:	4b8a      	ldr	r3, [pc, #552]	; (8007350 <display_readings+0x2ec>)
 8007128:	0018      	movs	r0, r3
 800712a:	f7fd ff29 	bl	8004f80 <printString>
  printFloat( (((sDate1.Date & 0xF0) >> 4) * 10) + (sDate1.Date & 0xF), 0); printString("/");
 800712e:	4b87      	ldr	r3, [pc, #540]	; (800734c <display_readings+0x2e8>)
 8007130:	789b      	ldrb	r3, [r3, #2]
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	b2db      	uxtb	r3, r3
 8007136:	001a      	movs	r2, r3
 8007138:	0013      	movs	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	189b      	adds	r3, r3, r2
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	001a      	movs	r2, r3
 8007142:	4b82      	ldr	r3, [pc, #520]	; (800734c <display_readings+0x2e8>)
 8007144:	789b      	ldrb	r3, [r3, #2]
 8007146:	0019      	movs	r1, r3
 8007148:	230f      	movs	r3, #15
 800714a:	400b      	ands	r3, r1
 800714c:	18d3      	adds	r3, r2, r3
 800714e:	0018      	movs	r0, r3
 8007150:	f7fb fe62 	bl	8002e18 <__aeabi_i2d>
 8007154:	2200      	movs	r2, #0
 8007156:	f7fd ff6d 	bl	8005034 <printFloat>
 800715a:	4b7d      	ldr	r3, [pc, #500]	; (8007350 <display_readings+0x2ec>)
 800715c:	0018      	movs	r0, r3
 800715e:	f7fd ff0f 	bl	8004f80 <printString>
//  printString("20");
  printFloat( (((sDate1.Year & 0xF0) >> 4) * 10) + (sDate1.Year & 0xF), 0); printString(", ");
 8007162:	4b7a      	ldr	r3, [pc, #488]	; (800734c <display_readings+0x2e8>)
 8007164:	78db      	ldrb	r3, [r3, #3]
 8007166:	091b      	lsrs	r3, r3, #4
 8007168:	b2db      	uxtb	r3, r3
 800716a:	001a      	movs	r2, r3
 800716c:	0013      	movs	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	189b      	adds	r3, r3, r2
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	001a      	movs	r2, r3
 8007176:	4b75      	ldr	r3, [pc, #468]	; (800734c <display_readings+0x2e8>)
 8007178:	78db      	ldrb	r3, [r3, #3]
 800717a:	0019      	movs	r1, r3
 800717c:	230f      	movs	r3, #15
 800717e:	400b      	ands	r3, r1
 8007180:	18d3      	adds	r3, r2, r3
 8007182:	0018      	movs	r0, r3
 8007184:	f7fb fe48 	bl	8002e18 <__aeabi_i2d>
 8007188:	2200      	movs	r2, #0
 800718a:	f7fd ff53 	bl	8005034 <printFloat>
 800718e:	4b71      	ldr	r3, [pc, #452]	; (8007354 <display_readings+0x2f0>)
 8007190:	0018      	movs	r0, r3
 8007192:	f7fd fef5 	bl	8004f80 <printString>
  printFloat( (((sTime1.Hours & 0xF0) >> 4) * 10) + (sTime1.Hours & 0xF), 0); printString(":");
 8007196:	4b6b      	ldr	r3, [pc, #428]	; (8007344 <display_readings+0x2e0>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	091b      	lsrs	r3, r3, #4
 800719c:	b2db      	uxtb	r3, r3
 800719e:	001a      	movs	r2, r3
 80071a0:	0013      	movs	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	189b      	adds	r3, r3, r2
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	001a      	movs	r2, r3
 80071aa:	4b66      	ldr	r3, [pc, #408]	; (8007344 <display_readings+0x2e0>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	0019      	movs	r1, r3
 80071b0:	230f      	movs	r3, #15
 80071b2:	400b      	ands	r3, r1
 80071b4:	18d3      	adds	r3, r2, r3
 80071b6:	0018      	movs	r0, r3
 80071b8:	f7fb fe2e 	bl	8002e18 <__aeabi_i2d>
 80071bc:	2200      	movs	r2, #0
 80071be:	f7fd ff39 	bl	8005034 <printFloat>
 80071c2:	4b65      	ldr	r3, [pc, #404]	; (8007358 <display_readings+0x2f4>)
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7fd fedb 	bl	8004f80 <printString>
  printFloat( (((sTime1.Minutes & 0xF0) >> 4) * 10) + (sTime1.Minutes & 0xF), 0); printString("\n");
 80071ca:	4b5e      	ldr	r3, [pc, #376]	; (8007344 <display_readings+0x2e0>)
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	091b      	lsrs	r3, r3, #4
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	001a      	movs	r2, r3
 80071d4:	0013      	movs	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	189b      	adds	r3, r3, r2
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	001a      	movs	r2, r3
 80071de:	4b59      	ldr	r3, [pc, #356]	; (8007344 <display_readings+0x2e0>)
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	0019      	movs	r1, r3
 80071e4:	230f      	movs	r3, #15
 80071e6:	400b      	ands	r3, r1
 80071e8:	18d3      	adds	r3, r2, r3
 80071ea:	0018      	movs	r0, r3
 80071ec:	f7fb fe14 	bl	8002e18 <__aeabi_i2d>
 80071f0:	2200      	movs	r2, #0
 80071f2:	f7fd ff1f 	bl	8005034 <printFloat>
 80071f6:	4b59      	ldr	r3, [pc, #356]	; (800735c <display_readings+0x2f8>)
 80071f8:	0018      	movs	r0, r3
 80071fa:	f7fd fec1 	bl	8004f80 <printString>

  printString("Battery: ");       printFloat(battery, 0);     printString("%\n");
 80071fe:	4b58      	ldr	r3, [pc, #352]	; (8007360 <display_readings+0x2fc>)
 8007200:	0018      	movs	r0, r3
 8007202:	f7fd febd 	bl	8004f80 <printString>
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7fb fe06 	bl	8002e18 <__aeabi_i2d>
 800720c:	2200      	movs	r2, #0
 800720e:	f7fd ff11 	bl	8005034 <printFloat>
 8007212:	4b54      	ldr	r3, [pc, #336]	; (8007364 <display_readings+0x300>)
 8007214:	0018      	movs	r0, r3
 8007216:	f7fd feb3 	bl	8004f80 <printString>
  printString("Temperature: ");   printFloat(temp, 0);        printString(" F\n");
 800721a:	4b53      	ldr	r3, [pc, #332]	; (8007368 <display_readings+0x304>)
 800721c:	0018      	movs	r0, r3
 800721e:	f7fd feaf 	bl	8004f80 <printString>
 8007222:	68b8      	ldr	r0, [r7, #8]
 8007224:	f7fb fdf8 	bl	8002e18 <__aeabi_i2d>
 8007228:	2200      	movs	r2, #0
 800722a:	f7fd ff03 	bl	8005034 <printFloat>
 800722e:	4b4f      	ldr	r3, [pc, #316]	; (800736c <display_readings+0x308>)
 8007230:	0018      	movs	r0, r3
 8007232:	f7fd fea5 	bl	8004f80 <printString>
  printString("Rel. Humidity: "); printFloat(humid, 0);       printString("%\n");
 8007236:	4b4e      	ldr	r3, [pc, #312]	; (8007370 <display_readings+0x30c>)
 8007238:	0018      	movs	r0, r3
 800723a:	f7fd fea1 	bl	8004f80 <printString>
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fb fdea 	bl	8002e18 <__aeabi_i2d>
 8007244:	2200      	movs	r2, #0
 8007246:	f7fd fef5 	bl	8005034 <printFloat>
 800724a:	4b46      	ldr	r3, [pc, #280]	; (8007364 <display_readings+0x300>)
 800724c:	0018      	movs	r0, r3
 800724e:	f7fd fe97 	bl	8004f80 <printString>
  printString("Methane: ");       printFloat(methane_ppm, 0); printString(" ppm\n\n");
 8007252:	4b48      	ldr	r3, [pc, #288]	; (8007374 <display_readings+0x310>)
 8007254:	0018      	movs	r0, r3
 8007256:	f7fd fe93 	bl	8004f80 <printString>
 800725a:	6838      	ldr	r0, [r7, #0]
 800725c:	f7fb fddc 	bl	8002e18 <__aeabi_i2d>
 8007260:	2200      	movs	r2, #0
 8007262:	f7fd fee7 	bl	8005034 <printFloat>
 8007266:	4b44      	ldr	r3, [pc, #272]	; (8007378 <display_readings+0x314>)
 8007268:	0018      	movs	r0, r3
 800726a:	f7fd fe89 	bl	8004f80 <printString>

  // Print the current food being stored
  switch (fruit_selection) {
 800726e:	4b43      	ldr	r3, [pc, #268]	; (800737c <display_readings+0x318>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b04      	cmp	r3, #4
 8007274:	d81d      	bhi.n	80072b2 <display_readings+0x24e>
 8007276:	009a      	lsls	r2, r3, #2
 8007278:	4b41      	ldr	r3, [pc, #260]	; (8007380 <display_readings+0x31c>)
 800727a:	18d3      	adds	r3, r2, r3
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	469f      	mov	pc, r3
    case NONE:    printString("Food: None\n"); 	  break;
 8007280:	4b40      	ldr	r3, [pc, #256]	; (8007384 <display_readings+0x320>)
 8007282:	0018      	movs	r0, r3
 8007284:	f7fd fe7c 	bl	8004f80 <printString>
 8007288:	e013      	b.n	80072b2 <display_readings+0x24e>
    case APPLE:   printString("Food: Apple\n"); 	break;
 800728a:	4b3f      	ldr	r3, [pc, #252]	; (8007388 <display_readings+0x324>)
 800728c:	0018      	movs	r0, r3
 800728e:	f7fd fe77 	bl	8004f80 <printString>
 8007292:	e00e      	b.n	80072b2 <display_readings+0x24e>
    case BANANA:  printString("Food: Banana\n");	break;
 8007294:	4b3d      	ldr	r3, [pc, #244]	; (800738c <display_readings+0x328>)
 8007296:	0018      	movs	r0, r3
 8007298:	f7fd fe72 	bl	8004f80 <printString>
 800729c:	e009      	b.n	80072b2 <display_readings+0x24e>
    case LIME:    printString("Food: Lemon\n"); 	break;
 800729e:	4b3c      	ldr	r3, [pc, #240]	; (8007390 <display_readings+0x32c>)
 80072a0:	0018      	movs	r0, r3
 80072a2:	f7fd fe6d 	bl	8004f80 <printString>
 80072a6:	e004      	b.n	80072b2 <display_readings+0x24e>
    case MANGO:   printString("Food: Mango\n"); 	break;
 80072a8:	4b3a      	ldr	r3, [pc, #232]	; (8007394 <display_readings+0x330>)
 80072aa:	0018      	movs	r0, r3
 80072ac:	f7fd fe68 	bl	8004f80 <printString>
 80072b0:	46c0      	nop			; (mov r8, r8)
  }

//  printString("Time Elapsed: 0 days\n");
  if(days_elapsed == 1){
 80072b2:	4b39      	ldr	r3, [pc, #228]	; (8007398 <display_readings+0x334>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d110      	bne.n	80072dc <display_readings+0x278>
    printString("Time Elapsed: ");  printFloat(days_elapsed, 0);    printString(" day\n");
 80072ba:	4b38      	ldr	r3, [pc, #224]	; (800739c <display_readings+0x338>)
 80072bc:	0018      	movs	r0, r3
 80072be:	f7fd fe5f 	bl	8004f80 <printString>
 80072c2:	4b35      	ldr	r3, [pc, #212]	; (8007398 <display_readings+0x334>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	0018      	movs	r0, r3
 80072c8:	f7fb fdd6 	bl	8002e78 <__aeabi_ui2d>
 80072cc:	2200      	movs	r2, #0
 80072ce:	f7fd feb1 	bl	8005034 <printFloat>
 80072d2:	4b33      	ldr	r3, [pc, #204]	; (80073a0 <display_readings+0x33c>)
 80072d4:	0018      	movs	r0, r3
 80072d6:	f7fd fe53 	bl	8004f80 <printString>
 80072da:	e00f      	b.n	80072fc <display_readings+0x298>
  }
  else{
    printString("Time Elapsed: ");  printFloat(days_elapsed, 0);    printString(" days\n");
 80072dc:	4b2f      	ldr	r3, [pc, #188]	; (800739c <display_readings+0x338>)
 80072de:	0018      	movs	r0, r3
 80072e0:	f7fd fe4e 	bl	8004f80 <printString>
 80072e4:	4b2c      	ldr	r3, [pc, #176]	; (8007398 <display_readings+0x334>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	0018      	movs	r0, r3
 80072ea:	f7fb fdc5 	bl	8002e78 <__aeabi_ui2d>
 80072ee:	2200      	movs	r2, #0
 80072f0:	f7fd fea0 	bl	8005034 <printFloat>
 80072f4:	4b2b      	ldr	r3, [pc, #172]	; (80073a4 <display_readings+0x340>)
 80072f6:	0018      	movs	r0, r3
 80072f8:	f7fd fe42 	bl	8004f80 <printString>
  }

  printString("Est. Days Left: ");  printFloat(prediction_days, 0); printString(" days\n");
 80072fc:	4b2a      	ldr	r3, [pc, #168]	; (80073a8 <display_readings+0x344>)
 80072fe:	0018      	movs	r0, r3
 8007300:	f7fd fe3e 	bl	8004f80 <printString>
 8007304:	69b8      	ldr	r0, [r7, #24]
 8007306:	f7fb fd87 	bl	8002e18 <__aeabi_i2d>
 800730a:	2200      	movs	r2, #0
 800730c:	f7fd fe92 	bl	8005034 <printFloat>
 8007310:	4b24      	ldr	r3, [pc, #144]	; (80073a4 <display_readings+0x340>)
 8007312:	0018      	movs	r0, r3
 8007314:	f7fd fe34 	bl	8004f80 <printString>

  display(true);
 8007318:	2001      	movs	r0, #1
 800731a:	f7fc ffdb 	bl	80042d4 <display>

  //turn off red led
//  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	46bd      	mov	sp, r7
 8007322:	b004      	add	sp, #16
 8007324:	bd80      	pop	{r7, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	0800d5e4 	.word	0x0800d5e4
 800732c:	0800d604 	.word	0x0800d604
 8007330:	0800d61c 	.word	0x0800d61c
 8007334:	200000b4 	.word	0x200000b4
 8007338:	200001c8 	.word	0x200001c8
 800733c:	0800d638 	.word	0x0800d638
 8007340:	0800d650 	.word	0x0800d650
 8007344:	20000368 	.word	0x20000368
 8007348:	20000260 	.word	0x20000260
 800734c:	20000364 	.word	0x20000364
 8007350:	0800d678 	.word	0x0800d678
 8007354:	0800d67c 	.word	0x0800d67c
 8007358:	0800d680 	.word	0x0800d680
 800735c:	0800d684 	.word	0x0800d684
 8007360:	0800d688 	.word	0x0800d688
 8007364:	0800d694 	.word	0x0800d694
 8007368:	0800d698 	.word	0x0800d698
 800736c:	0800d6a8 	.word	0x0800d6a8
 8007370:	0800d6ac 	.word	0x0800d6ac
 8007374:	0800d6bc 	.word	0x0800d6bc
 8007378:	0800d6c8 	.word	0x0800d6c8
 800737c:	200000da 	.word	0x200000da
 8007380:	0800f63c 	.word	0x0800f63c
 8007384:	0800d6d0 	.word	0x0800d6d0
 8007388:	0800d6dc 	.word	0x0800d6dc
 800738c:	0800d6ec 	.word	0x0800d6ec
 8007390:	0800d6fc 	.word	0x0800d6fc
 8007394:	0800d70c 	.word	0x0800d70c
 8007398:	2000010e 	.word	0x2000010e
 800739c:	0800d71c 	.word	0x0800d71c
 80073a0:	0800d72c 	.word	0x0800d72c
 80073a4:	0800d734 	.word	0x0800d734
 80073a8:	0800d73c 	.word	0x0800d73c

080073ac <predictive_model>:

int predictive_model(int new_temp, int new_rh, int new_methane) {
 80073ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ae:	b08d      	sub	sp, #52	; 0x34
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  int days = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if(fruit_selection == BANANA) {
 80073bc:	4b62      	ldr	r3, [pc, #392]	; (8007548 <predictive_model+0x19c>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d000      	beq.n	80073c6 <predictive_model+0x1a>
 80073c4:	e08d      	b.n	80074e2 <predictive_model+0x136>
    int row[3] = {new_methane, new_temp, new_rh};
 80073c6:	2110      	movs	r1, #16
 80073c8:	187b      	adds	r3, r7, r1
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	187b      	adds	r3, r7, r1
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	605a      	str	r2, [r3, #4]
 80073d4:	187b      	adds	r3, r7, r1
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	609a      	str	r2, [r3, #8]

    float max_val = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	62bb      	str	r3, [r7, #40]	; 0x28
    float dot_product = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	623b      	str	r3, [r7, #32]
    float x = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	61fb      	str	r3, [r7, #28]

    for(int i=0; i < 11; i++) {
 80073e6:	2300      	movs	r3, #0
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ea:	e076      	b.n	80074da <predictive_model+0x12e>
      dot_product = intercepts[i] + (coefficients[i][0] * row[0] + coefficients[i][1] * row[1] + coefficients[i][2] * row[2]);
 80073ec:	4b57      	ldr	r3, [pc, #348]	; (800754c <predictive_model+0x1a0>)
 80073ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f0:	0092      	lsls	r2, r2, #2
 80073f2:	58d4      	ldr	r4, [r2, r3]
 80073f4:	4956      	ldr	r1, [pc, #344]	; (8007550 <predictive_model+0x1a4>)
 80073f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f8:	0013      	movs	r3, r2
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	189b      	adds	r3, r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	585d      	ldr	r5, [r3, r1]
 8007402:	2310      	movs	r3, #16
 8007404:	18fb      	adds	r3, r7, r3
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	0018      	movs	r0, r3
 800740a:	f7f9 ff1b 	bl	8001244 <__aeabi_i2f>
 800740e:	1c03      	adds	r3, r0, #0
 8007410:	1c19      	adds	r1, r3, #0
 8007412:	1c28      	adds	r0, r5, #0
 8007414:	f7f9 fc14 	bl	8000c40 <__aeabi_fmul>
 8007418:	1c03      	adds	r3, r0, #0
 800741a:	1c1e      	adds	r6, r3, #0
 800741c:	494c      	ldr	r1, [pc, #304]	; (8007550 <predictive_model+0x1a4>)
 800741e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007420:	0013      	movs	r3, r2
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	189b      	adds	r3, r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	18cb      	adds	r3, r1, r3
 800742a:	3304      	adds	r3, #4
 800742c:	681d      	ldr	r5, [r3, #0]
 800742e:	2310      	movs	r3, #16
 8007430:	18fb      	adds	r3, r7, r3
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	0018      	movs	r0, r3
 8007436:	f7f9 ff05 	bl	8001244 <__aeabi_i2f>
 800743a:	1c03      	adds	r3, r0, #0
 800743c:	1c19      	adds	r1, r3, #0
 800743e:	1c28      	adds	r0, r5, #0
 8007440:	f7f9 fbfe 	bl	8000c40 <__aeabi_fmul>
 8007444:	1c03      	adds	r3, r0, #0
 8007446:	1c19      	adds	r1, r3, #0
 8007448:	1c30      	adds	r0, r6, #0
 800744a:	f7f9 f893 	bl	8000574 <__aeabi_fadd>
 800744e:	1c03      	adds	r3, r0, #0
 8007450:	1c1e      	adds	r6, r3, #0
 8007452:	493f      	ldr	r1, [pc, #252]	; (8007550 <predictive_model+0x1a4>)
 8007454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007456:	0013      	movs	r3, r2
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	189b      	adds	r3, r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	18cb      	adds	r3, r1, r3
 8007460:	3308      	adds	r3, #8
 8007462:	681d      	ldr	r5, [r3, #0]
 8007464:	2310      	movs	r3, #16
 8007466:	18fb      	adds	r3, r7, r3
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	0018      	movs	r0, r3
 800746c:	f7f9 feea 	bl	8001244 <__aeabi_i2f>
 8007470:	1c03      	adds	r3, r0, #0
 8007472:	1c19      	adds	r1, r3, #0
 8007474:	1c28      	adds	r0, r5, #0
 8007476:	f7f9 fbe3 	bl	8000c40 <__aeabi_fmul>
 800747a:	1c03      	adds	r3, r0, #0
 800747c:	1c19      	adds	r1, r3, #0
 800747e:	1c30      	adds	r0, r6, #0
 8007480:	f7f9 f878 	bl	8000574 <__aeabi_fadd>
 8007484:	1c03      	adds	r3, r0, #0
 8007486:	1c19      	adds	r1, r3, #0
 8007488:	1c20      	adds	r0, r4, #0
 800748a:	f7f9 f873 	bl	8000574 <__aeabi_fadd>
 800748e:	1c03      	adds	r3, r0, #0
 8007490:	623b      	str	r3, [r7, #32]
      x = 1 / (1 + pow(2.71828, -dot_product));
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	2280      	movs	r2, #128	; 0x80
 8007496:	0612      	lsls	r2, r2, #24
 8007498:	4053      	eors	r3, r2
 800749a:	4a2e      	ldr	r2, [pc, #184]	; (8007554 <predictive_model+0x1a8>)
 800749c:	1c19      	adds	r1, r3, #0
 800749e:	1c10      	adds	r0, r2, #0
 80074a0:	f7fc f8b6 	bl	8003610 <pow>
 80074a4:	1c03      	adds	r3, r0, #0
 80074a6:	21fe      	movs	r1, #254	; 0xfe
 80074a8:	0589      	lsls	r1, r1, #22
 80074aa:	1c18      	adds	r0, r3, #0
 80074ac:	f7f9 f862 	bl	8000574 <__aeabi_fadd>
 80074b0:	1c03      	adds	r3, r0, #0
 80074b2:	1c19      	adds	r1, r3, #0
 80074b4:	20fe      	movs	r0, #254	; 0xfe
 80074b6:	0580      	lsls	r0, r0, #22
 80074b8:	f7f9 f9f8 	bl	80008ac <__aeabi_fdiv>
 80074bc:	1c03      	adds	r3, r0, #0
 80074be:	61fb      	str	r3, [r7, #28]
      if (x > max_val){
 80074c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074c2:	69f8      	ldr	r0, [r7, #28]
 80074c4:	f7f8 ff10 	bl	80002e8 <__aeabi_fcmpgt>
 80074c8:	1e03      	subs	r3, r0, #0
 80074ca:	d003      	beq.n	80074d4 <predictive_model+0x128>
        max_val = x;
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
        days = i;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(int i=0; i < 11; i++) {
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	3301      	adds	r3, #1
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	2b0a      	cmp	r3, #10
 80074de:	dd85      	ble.n	80073ec <predictive_model+0x40>
 80074e0:	e01f      	b.n	8007522 <predictive_model+0x176>
      }
    }
  }
  else if (fruit_selection == APPLE){
 80074e2:	4b19      	ldr	r3, [pc, #100]	; (8007548 <predictive_model+0x19c>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d106      	bne.n	80074f8 <predictive_model+0x14c>
    days = 14 - days_elapsed;
 80074ea:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <predictive_model+0x1ac>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	001a      	movs	r2, r3
 80074f0:	230e      	movs	r3, #14
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074f6:	e014      	b.n	8007522 <predictive_model+0x176>
  }
  else if(fruit_selection == LIME) {
 80074f8:	4b13      	ldr	r3, [pc, #76]	; (8007548 <predictive_model+0x19c>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d106      	bne.n	800750e <predictive_model+0x162>
    days = 14 - days_elapsed;
 8007500:	4b15      	ldr	r3, [pc, #84]	; (8007558 <predictive_model+0x1ac>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	001a      	movs	r2, r3
 8007506:	230e      	movs	r3, #14
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800750c:	e009      	b.n	8007522 <predictive_model+0x176>
  }
  else if(fruit_selection == MANGO) {
 800750e:	4b0e      	ldr	r3, [pc, #56]	; (8007548 <predictive_model+0x19c>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b04      	cmp	r3, #4
 8007514:	d105      	bne.n	8007522 <predictive_model+0x176>
    days = 7 - days_elapsed;
 8007516:	4b10      	ldr	r3, [pc, #64]	; (8007558 <predictive_model+0x1ac>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	001a      	movs	r2, r3
 800751c:	2307      	movs	r3, #7
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  // If the new prediction > old prediction, the just use the old prediction for the purposes of our demonstration
  if (days > prev_prediction) {
 8007522:	4b0e      	ldr	r3, [pc, #56]	; (800755c <predictive_model+0x1b0>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	001a      	movs	r2, r3
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	4293      	cmp	r3, r2
 800752c:	dd03      	ble.n	8007536 <predictive_model+0x18a>
    days = prev_prediction;
 800752e:	4b0b      	ldr	r3, [pc, #44]	; (800755c <predictive_model+0x1b0>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007534:	e003      	b.n	800753e <predictive_model+0x192>
  }
  else {
    prev_prediction = days;
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	b2da      	uxtb	r2, r3
 800753a:	4b08      	ldr	r3, [pc, #32]	; (800755c <predictive_model+0x1b0>)
 800753c:	701a      	strb	r2, [r3, #0]
  }

  return days;
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007540:	0018      	movs	r0, r3
 8007542:	46bd      	mov	sp, r7
 8007544:	b00d      	add	sp, #52	; 0x34
 8007546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007548:	200000da 	.word	0x200000da
 800754c:	0800f58c 	.word	0x0800f58c
 8007550:	0800f5b8 	.word	0x0800f5b8
 8007554:	402df84d 	.word	0x402df84d
 8007558:	2000010e 	.word	0x2000010e
 800755c:	2000001d 	.word	0x2000001d

08007560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007568:	4a14      	ldr	r2, [pc, #80]	; (80075bc <_sbrk+0x5c>)
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <_sbrk+0x60>)
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007574:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <_sbrk+0x64>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <_sbrk+0x64>)
 800757e:	4a12      	ldr	r2, [pc, #72]	; (80075c8 <_sbrk+0x68>)
 8007580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007582:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <_sbrk+0x64>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	18d3      	adds	r3, r2, r3
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	429a      	cmp	r2, r3
 800758e:	d207      	bcs.n	80075a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007590:	f005 fc3c 	bl	800ce0c <__errno>
 8007594:	0003      	movs	r3, r0
 8007596:	220c      	movs	r2, #12
 8007598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800759a:	2301      	movs	r3, #1
 800759c:	425b      	negs	r3, r3
 800759e:	e009      	b.n	80075b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075a0:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <_sbrk+0x64>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075a6:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <_sbrk+0x64>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	18d2      	adds	r2, r2, r3
 80075ae:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <_sbrk+0x64>)
 80075b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80075b2:	68fb      	ldr	r3, [r7, #12]
}
 80075b4:	0018      	movs	r0, r3
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b006      	add	sp, #24
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20002000 	.word	0x20002000
 80075c0:	00000400 	.word	0x00000400
 80075c4:	20000110 	.word	0x20000110
 80075c8:	20000528 	.word	0x20000528

080075cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80075d0:	46c0      	nop			; (mov r8, r8)
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075de:	003b      	movs	r3, r7
 80075e0:	0018      	movs	r0, r3
 80075e2:	2308      	movs	r3, #8
 80075e4:	001a      	movs	r2, r3
 80075e6:	2100      	movs	r1, #0
 80075e8:	f005 fc4d 	bl	800ce86 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80075ec:	4b15      	ldr	r3, [pc, #84]	; (8007644 <MX_TIM6_Init+0x6c>)
 80075ee:	4a16      	ldr	r2, [pc, #88]	; (8007648 <MX_TIM6_Init+0x70>)
 80075f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64000 -1;
 80075f2:	4b14      	ldr	r3, [pc, #80]	; (8007644 <MX_TIM6_Init+0x6c>)
 80075f4:	4a15      	ldr	r2, [pc, #84]	; (800764c <MX_TIM6_Init+0x74>)
 80075f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075f8:	4b12      	ldr	r3, [pc, #72]	; (8007644 <MX_TIM6_Init+0x6c>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64000-1;
 80075fe:	4b11      	ldr	r3, [pc, #68]	; (8007644 <MX_TIM6_Init+0x6c>)
 8007600:	4a12      	ldr	r2, [pc, #72]	; (800764c <MX_TIM6_Init+0x74>)
 8007602:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007604:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <MX_TIM6_Init+0x6c>)
 8007606:	2200      	movs	r2, #0
 8007608:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800760a:	4b0e      	ldr	r3, [pc, #56]	; (8007644 <MX_TIM6_Init+0x6c>)
 800760c:	0018      	movs	r0, r3
 800760e:	f004 faa3 	bl	800bb58 <HAL_TIM_Base_Init>
 8007612:	1e03      	subs	r3, r0, #0
 8007614:	d001      	beq.n	800761a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8007616:	f7fe fe53 	bl	80062c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800761a:	003b      	movs	r3, r7
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007620:	003b      	movs	r3, r7
 8007622:	2200      	movs	r2, #0
 8007624:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007626:	003a      	movs	r2, r7
 8007628:	4b06      	ldr	r3, [pc, #24]	; (8007644 <MX_TIM6_Init+0x6c>)
 800762a:	0011      	movs	r1, r2
 800762c:	0018      	movs	r0, r3
 800762e:	f004 fca9 	bl	800bf84 <HAL_TIMEx_MasterConfigSynchronization>
 8007632:	1e03      	subs	r3, r0, #0
 8007634:	d001      	beq.n	800763a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8007636:	f7fe fe43 	bl	80062c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800763a:	46c0      	nop			; (mov r8, r8)
 800763c:	46bd      	mov	sp, r7
 800763e:	b002      	add	sp, #8
 8007640:	bd80      	pop	{r7, pc}
 8007642:	46c0      	nop			; (mov r8, r8)
 8007644:	20000380 	.word	0x20000380
 8007648:	40001000 	.word	0x40001000
 800764c:	0000f9ff 	.word	0x0000f9ff

08007650 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a06      	ldr	r2, [pc, #24]	; (8007678 <HAL_TIM_Base_MspInit+0x28>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d105      	bne.n	800766e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007662:	4b06      	ldr	r3, [pc, #24]	; (800767c <HAL_TIM_Base_MspInit+0x2c>)
 8007664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007666:	4b05      	ldr	r3, [pc, #20]	; (800767c <HAL_TIM_Base_MspInit+0x2c>)
 8007668:	2110      	movs	r1, #16
 800766a:	430a      	orrs	r2, r1
 800766c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800766e:	46c0      	nop			; (mov r8, r8)
 8007670:	46bd      	mov	sp, r7
 8007672:	b002      	add	sp, #8
 8007674:	bd80      	pop	{r7, pc}
 8007676:	46c0      	nop			; (mov r8, r8)
 8007678:	40001000 	.word	0x40001000
 800767c:	40021000 	.word	0x40021000

08007680 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007684:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 8007686:	4a15      	ldr	r2, [pc, #84]	; (80076dc <MX_USART1_UART_Init+0x5c>)
 8007688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800768a:	4b13      	ldr	r3, [pc, #76]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 800768c:	22e1      	movs	r2, #225	; 0xe1
 800768e:	0252      	lsls	r2, r2, #9
 8007690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007692:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 8007694:	2200      	movs	r2, #0
 8007696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007698:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 800769a:	2200      	movs	r2, #0
 800769c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800769e:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80076a4:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 80076a6:	220c      	movs	r2, #12
 80076a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80076aa:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80076b0:	4b09      	ldr	r3, [pc, #36]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80076b6:	4b08      	ldr	r3, [pc, #32]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 80076be:	2200      	movs	r2, #0
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80076c2:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <MX_USART1_UART_Init+0x58>)
 80076c4:	0018      	movs	r0, r3
 80076c6:	f004 fcb5 	bl	800c034 <HAL_UART_Init>
 80076ca:	1e03      	subs	r3, r0, #0
 80076cc:	d001      	beq.n	80076d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80076ce:	f7fe fdf7 	bl	80062c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80076d2:	46c0      	nop			; (mov r8, r8)
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000408 	.word	0x20000408
 80076dc:	40013800 	.word	0x40013800

080076e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80076e4:	4b14      	ldr	r3, [pc, #80]	; (8007738 <MX_USART2_UART_Init+0x58>)
 80076e6:	4a15      	ldr	r2, [pc, #84]	; (800773c <MX_USART2_UART_Init+0x5c>)
 80076e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80076ea:	4b13      	ldr	r3, [pc, #76]	; (8007738 <MX_USART2_UART_Init+0x58>)
 80076ec:	2296      	movs	r2, #150	; 0x96
 80076ee:	0192      	lsls	r2, r2, #6
 80076f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80076f2:	4b11      	ldr	r3, [pc, #68]	; (8007738 <MX_USART2_UART_Init+0x58>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80076f8:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <MX_USART2_UART_Init+0x58>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80076fe:	4b0e      	ldr	r3, [pc, #56]	; (8007738 <MX_USART2_UART_Init+0x58>)
 8007700:	2200      	movs	r2, #0
 8007702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007704:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <MX_USART2_UART_Init+0x58>)
 8007706:	220c      	movs	r2, #12
 8007708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800770a:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <MX_USART2_UART_Init+0x58>)
 800770c:	2200      	movs	r2, #0
 800770e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007710:	4b09      	ldr	r3, [pc, #36]	; (8007738 <MX_USART2_UART_Init+0x58>)
 8007712:	2200      	movs	r2, #0
 8007714:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007716:	4b08      	ldr	r3, [pc, #32]	; (8007738 <MX_USART2_UART_Init+0x58>)
 8007718:	2200      	movs	r2, #0
 800771a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800771c:	4b06      	ldr	r3, [pc, #24]	; (8007738 <MX_USART2_UART_Init+0x58>)
 800771e:	2200      	movs	r2, #0
 8007720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007722:	4b05      	ldr	r3, [pc, #20]	; (8007738 <MX_USART2_UART_Init+0x58>)
 8007724:	0018      	movs	r0, r3
 8007726:	f004 fc85 	bl	800c034 <HAL_UART_Init>
 800772a:	1e03      	subs	r3, r0, #0
 800772c:	d001      	beq.n	8007732 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800772e:	f7fe fdc7 	bl	80062c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	2000048c 	.word	0x2000048c
 800773c:	40004400 	.word	0x40004400

08007740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007740:	b590      	push	{r4, r7, lr}
 8007742:	b08b      	sub	sp, #44	; 0x2c
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007748:	2414      	movs	r4, #20
 800774a:	193b      	adds	r3, r7, r4
 800774c:	0018      	movs	r0, r3
 800774e:	2314      	movs	r3, #20
 8007750:	001a      	movs	r2, r3
 8007752:	2100      	movs	r1, #0
 8007754:	f005 fb97 	bl	800ce86 <memset>
  if(uartHandle->Instance==USART1)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a45      	ldr	r2, [pc, #276]	; (8007874 <HAL_UART_MspInit+0x134>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d154      	bne.n	800780c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007762:	4b45      	ldr	r3, [pc, #276]	; (8007878 <HAL_UART_MspInit+0x138>)
 8007764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007766:	4b44      	ldr	r3, [pc, #272]	; (8007878 <HAL_UART_MspInit+0x138>)
 8007768:	2180      	movs	r1, #128	; 0x80
 800776a:	01c9      	lsls	r1, r1, #7
 800776c:	430a      	orrs	r2, r1
 800776e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007770:	4b41      	ldr	r3, [pc, #260]	; (8007878 <HAL_UART_MspInit+0x138>)
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	4b40      	ldr	r3, [pc, #256]	; (8007878 <HAL_UART_MspInit+0x138>)
 8007776:	2101      	movs	r1, #1
 8007778:	430a      	orrs	r2, r1
 800777a:	62da      	str	r2, [r3, #44]	; 0x2c
 800777c:	4b3e      	ldr	r3, [pc, #248]	; (8007878 <HAL_UART_MspInit+0x138>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	2201      	movs	r2, #1
 8007782:	4013      	ands	r3, r2
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007788:	193b      	adds	r3, r7, r4
 800778a:	22c0      	movs	r2, #192	; 0xc0
 800778c:	00d2      	lsls	r2, r2, #3
 800778e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007790:	0021      	movs	r1, r4
 8007792:	187b      	adds	r3, r7, r1
 8007794:	2202      	movs	r2, #2
 8007796:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007798:	187b      	adds	r3, r7, r1
 800779a:	2200      	movs	r2, #0
 800779c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800779e:	187b      	adds	r3, r7, r1
 80077a0:	2203      	movs	r2, #3
 80077a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80077a4:	187b      	adds	r3, r7, r1
 80077a6:	2204      	movs	r2, #4
 80077a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077aa:	187a      	adds	r2, r7, r1
 80077ac:	23a0      	movs	r3, #160	; 0xa0
 80077ae:	05db      	lsls	r3, r3, #23
 80077b0:	0011      	movs	r1, r2
 80077b2:	0018      	movs	r0, r3
 80077b4:	f001 f9a2 	bl	8008afc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80077b8:	4b30      	ldr	r3, [pc, #192]	; (800787c <HAL_UART_MspInit+0x13c>)
 80077ba:	4a31      	ldr	r2, [pc, #196]	; (8007880 <HAL_UART_MspInit+0x140>)
 80077bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80077be:	4b2f      	ldr	r3, [pc, #188]	; (800787c <HAL_UART_MspInit+0x13c>)
 80077c0:	2203      	movs	r2, #3
 80077c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80077c4:	4b2d      	ldr	r3, [pc, #180]	; (800787c <HAL_UART_MspInit+0x13c>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80077ca:	4b2c      	ldr	r3, [pc, #176]	; (800787c <HAL_UART_MspInit+0x13c>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80077d0:	4b2a      	ldr	r3, [pc, #168]	; (800787c <HAL_UART_MspInit+0x13c>)
 80077d2:	2280      	movs	r2, #128	; 0x80
 80077d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80077d6:	4b29      	ldr	r3, [pc, #164]	; (800787c <HAL_UART_MspInit+0x13c>)
 80077d8:	2200      	movs	r2, #0
 80077da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80077dc:	4b27      	ldr	r3, [pc, #156]	; (800787c <HAL_UART_MspInit+0x13c>)
 80077de:	2200      	movs	r2, #0
 80077e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80077e2:	4b26      	ldr	r3, [pc, #152]	; (800787c <HAL_UART_MspInit+0x13c>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80077e8:	4b24      	ldr	r3, [pc, #144]	; (800787c <HAL_UART_MspInit+0x13c>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80077ee:	4b23      	ldr	r3, [pc, #140]	; (800787c <HAL_UART_MspInit+0x13c>)
 80077f0:	0018      	movs	r0, r3
 80077f2:	f000 ffc9 	bl	8008788 <HAL_DMA_Init>
 80077f6:	1e03      	subs	r3, r0, #0
 80077f8:	d001      	beq.n	80077fe <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 80077fa:	f7fe fd61 	bl	80062c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a1e      	ldr	r2, [pc, #120]	; (800787c <HAL_UART_MspInit+0x13c>)
 8007802:	671a      	str	r2, [r3, #112]	; 0x70
 8007804:	4b1d      	ldr	r3, [pc, #116]	; (800787c <HAL_UART_MspInit+0x13c>)
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800780a:	e02e      	b.n	800786a <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART2)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a1c      	ldr	r2, [pc, #112]	; (8007884 <HAL_UART_MspInit+0x144>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d129      	bne.n	800786a <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007816:	4b18      	ldr	r3, [pc, #96]	; (8007878 <HAL_UART_MspInit+0x138>)
 8007818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800781a:	4b17      	ldr	r3, [pc, #92]	; (8007878 <HAL_UART_MspInit+0x138>)
 800781c:	2180      	movs	r1, #128	; 0x80
 800781e:	0289      	lsls	r1, r1, #10
 8007820:	430a      	orrs	r2, r1
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007824:	4b14      	ldr	r3, [pc, #80]	; (8007878 <HAL_UART_MspInit+0x138>)
 8007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007828:	4b13      	ldr	r3, [pc, #76]	; (8007878 <HAL_UART_MspInit+0x138>)
 800782a:	2101      	movs	r1, #1
 800782c:	430a      	orrs	r2, r1
 800782e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007830:	4b11      	ldr	r3, [pc, #68]	; (8007878 <HAL_UART_MspInit+0x138>)
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	2201      	movs	r2, #1
 8007836:	4013      	ands	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800783c:	2114      	movs	r1, #20
 800783e:	187b      	adds	r3, r7, r1
 8007840:	220c      	movs	r2, #12
 8007842:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007844:	187b      	adds	r3, r7, r1
 8007846:	2202      	movs	r2, #2
 8007848:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784a:	187b      	adds	r3, r7, r1
 800784c:	2200      	movs	r2, #0
 800784e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007850:	187b      	adds	r3, r7, r1
 8007852:	2203      	movs	r2, #3
 8007854:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8007856:	187b      	adds	r3, r7, r1
 8007858:	2204      	movs	r2, #4
 800785a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800785c:	187a      	adds	r2, r7, r1
 800785e:	23a0      	movs	r3, #160	; 0xa0
 8007860:	05db      	lsls	r3, r3, #23
 8007862:	0011      	movs	r1, r2
 8007864:	0018      	movs	r0, r3
 8007866:	f001 f949 	bl	8008afc <HAL_GPIO_Init>
}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	46bd      	mov	sp, r7
 800786e:	b00b      	add	sp, #44	; 0x2c
 8007870:	bd90      	pop	{r4, r7, pc}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	40013800 	.word	0x40013800
 8007878:	40021000 	.word	0x40021000
 800787c:	200003c0 	.word	0x200003c0
 8007880:	40020030 	.word	0x40020030
 8007884:	40004400 	.word	0x40004400

08007888 <VCNL4010_disable_Interrupt>:
/*!
    @brief  Disable threshold interrupt and set the threshold values
*/
/**************************************************************************/

void VCNL4010_disable_Interrupt() {
 8007888:	b590      	push	{r4, r7, lr}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
  VCNL4010_ack_ISR();
 800788e:	f000 f84b 	bl	8007928 <VCNL4010_ack_ISR>
  //Unset INT_THRES_EN
  uint8_t temp = VCNL4010_read8(VCNL4010_INTCONTROL);
 8007892:	1dfc      	adds	r4, r7, #7
 8007894:	2089      	movs	r0, #137	; 0x89
 8007896:	f000 f8c1 	bl	8007a1c <VCNL4010_read8>
 800789a:	0003      	movs	r3, r0
 800789c:	7023      	strb	r3, [r4, #0]
  temp &= 0xf0; //clear first 4 bits - clear all interrupt bits
 800789e:	1dfb      	adds	r3, r7, #7
 80078a0:	1dfa      	adds	r2, r7, #7
 80078a2:	7812      	ldrb	r2, [r2, #0]
 80078a4:	210f      	movs	r1, #15
 80078a6:	438a      	bics	r2, r1
 80078a8:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTCONTROL, temp);
 80078aa:	1dfb      	adds	r3, r7, #7
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	0019      	movs	r1, r3
 80078b0:	2089      	movs	r0, #137	; 0x89
 80078b2:	f000 f867 	bl	8007984 <VCNL4010_write8>

}
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	46bd      	mov	sp, r7
 80078ba:	b003      	add	sp, #12
 80078bc:	bd90      	pop	{r4, r7, pc}
	...

080078c0 <VCNL4010_enable_Interrupt>:
/*!
    @brief  Enable threshold interrupt and set the threshold values
*/
/**************************************************************************/

void VCNL4010_enable_Interrupt() {
 80078c0:	b590      	push	{r4, r7, lr}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
  VCNL4010_ack_ISR();
 80078c6:	f000 f82f 	bl	8007928 <VCNL4010_ack_ISR>
  //Set INT_THRES_EN
  uint8_t temp = VCNL4010_read8(VCNL4010_INTCONTROL);
 80078ca:	1dfc      	adds	r4, r7, #7
 80078cc:	2089      	movs	r0, #137	; 0x89
 80078ce:	f000 f8a5 	bl	8007a1c <VCNL4010_read8>
 80078d2:	0003      	movs	r3, r0
 80078d4:	7023      	strb	r3, [r4, #0]
  temp &= 0xf0; //clear first 4 bits
 80078d6:	1dfb      	adds	r3, r7, #7
 80078d8:	1dfa      	adds	r2, r7, #7
 80078da:	7812      	ldrb	r2, [r2, #0]
 80078dc:	210f      	movs	r1, #15
 80078de:	438a      	bics	r2, r1
 80078e0:	701a      	strb	r2, [r3, #0]
  temp |= 0x2; //set INT_THRES_EN bit
 80078e2:	1dfb      	adds	r3, r7, #7
 80078e4:	1dfa      	adds	r2, r7, #7
 80078e6:	7812      	ldrb	r2, [r2, #0]
 80078e8:	2102      	movs	r1, #2
 80078ea:	430a      	orrs	r2, r1
 80078ec:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTCONTROL, temp);
 80078ee:	1dfb      	adds	r3, r7, #7
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	0019      	movs	r1, r3
 80078f4:	2089      	movs	r0, #137	; 0x89
 80078f6:	f000 f845 	bl	8007984 <VCNL4010_write8>

  //Set Prox_en + self_timed
  VCNL4010_write8(VCNL4010_COMMAND, VCNL4010_MEASUREPROXIMITY_CONT);
 80078fa:	2103      	movs	r1, #3
 80078fc:	2080      	movs	r0, #128	; 0x80
 80078fe:	f000 f841 	bl	8007984 <VCNL4010_write8>

  //TODO - set for 2 measurements for

  //set low threshold - not really using... so set to 0.
  VCNL4010_write16(VCNL4010_LOWTHRESHOLD, 0);
 8007902:	2100      	movs	r1, #0
 8007904:	208a      	movs	r0, #138	; 0x8a
 8007906:	f000 f85d 	bl	80079c4 <VCNL4010_write16>

//  uint16_t threshold = ((22000 & 0xFF00) >> 8) | ((22000 & 0xFF) << 8);
    uint16_t threshold = 2300;
 800790a:	1d3b      	adds	r3, r7, #4
 800790c:	4a05      	ldr	r2, [pc, #20]	; (8007924 <VCNL4010_enable_Interrupt+0x64>)
 800790e:	801a      	strh	r2, [r3, #0]

  //set high threshold
    VCNL4010_write16(VCNL4010_HITHRESHOLD, threshold);
 8007910:	1d3b      	adds	r3, r7, #4
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	0019      	movs	r1, r3
 8007916:	208c      	movs	r0, #140	; 0x8c
 8007918:	f000 f854 	bl	80079c4 <VCNL4010_write16>
//  VCNL4010_write16(VCNL4010_HITHRESHOLD, 2500);

}
 800791c:	46c0      	nop			; (mov r8, r8)
 800791e:	46bd      	mov	sp, r7
 8007920:	b003      	add	sp, #12
 8007922:	bd90      	pop	{r4, r7, pc}
 8007924:	000008fc 	.word	0x000008fc

08007928 <VCNL4010_ack_ISR>:
/*!
    @brief  Clear Interrupt Status Register
*/
/**************************************************************************/

void VCNL4010_ack_ISR() {
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
  //Set INT_THRES_EN
  uint8_t temp = VCNL4010_read8(VCNL4010_INTSTAT);
 800792e:	1dfc      	adds	r4, r7, #7
 8007930:	208e      	movs	r0, #142	; 0x8e
 8007932:	f000 f873 	bl	8007a1c <VCNL4010_read8>
 8007936:	0003      	movs	r3, r0
 8007938:	7023      	strb	r3, [r4, #0]
  temp &= 0xff; //clear first 2 bits
 800793a:	1dfb      	adds	r3, r7, #7
 800793c:	1dfa      	adds	r2, r7, #7
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTSTAT, temp);
 8007942:	1dfb      	adds	r3, r7, #7
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	0019      	movs	r1, r3
 8007948:	208e      	movs	r0, #142	; 0x8e
 800794a:	f000 f81b 	bl	8007984 <VCNL4010_write8>
}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	46bd      	mov	sp, r7
 8007952:	b003      	add	sp, #12
 8007954:	bd90      	pop	{r4, r7, pc}

08007956 <VCNL4010_setLEDcurrent>:
   10 mA, so if you set it to 5, its 50mA. Minimum is 0 (0 mA, off), max is 20
   (200mA)
*/
/**************************************************************************/

void VCNL4010_setLEDcurrent(uint8_t current_10mA) {
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	0002      	movs	r2, r0
 800795e:	1dfb      	adds	r3, r7, #7
 8007960:	701a      	strb	r2, [r3, #0]
  if (current_10mA > 20)
 8007962:	1dfb      	adds	r3, r7, #7
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b14      	cmp	r3, #20
 8007968:	d902      	bls.n	8007970 <VCNL4010_setLEDcurrent+0x1a>
    current_10mA = 20;
 800796a:	1dfb      	adds	r3, r7, #7
 800796c:	2214      	movs	r2, #20
 800796e:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_IRLED, current_10mA);
 8007970:	1dfb      	adds	r3, r7, #7
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	0019      	movs	r1, r3
 8007976:	2083      	movs	r0, #131	; 0x83
 8007978:	f000 f804 	bl	8007984 <VCNL4010_write8>
}
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	46bd      	mov	sp, r7
 8007980:	b002      	add	sp, #8
 8007982:	bd80      	pop	{r7, pc}

08007984 <VCNL4010_write8>:
    }
  }
}

HAL_StatusTypeDef VCNL4010_write8(uint8_t subAddress, uint8_t data)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af04      	add	r7, sp, #16
 800798a:	0002      	movs	r2, r0
 800798c:	1dfb      	adds	r3, r7, #7
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	1dbb      	adds	r3, r7, #6
 8007992:	1c0a      	adds	r2, r1, #0
 8007994:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8007996:	1dfb      	adds	r3, r7, #7
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	b29a      	uxth	r2, r3
 800799c:	4808      	ldr	r0, [pc, #32]	; (80079c0 <VCNL4010_write8+0x3c>)
 800799e:	2301      	movs	r3, #1
 80079a0:	425b      	negs	r3, r3
 80079a2:	9302      	str	r3, [sp, #8]
 80079a4:	2301      	movs	r3, #1
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	1dbb      	adds	r3, r7, #6
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	2301      	movs	r3, #1
 80079ae:	2126      	movs	r1, #38	; 0x26
 80079b0:	f001 faf4 	bl	8008f9c <HAL_I2C_Mem_Write>
 80079b4:	0003      	movs	r3, r0

}
 80079b6:	0018      	movs	r0, r3
 80079b8:	46bd      	mov	sp, r7
 80079ba:	b002      	add	sp, #8
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	200001e8 	.word	0x200001e8

080079c4 <VCNL4010_write16>:

HAL_StatusTypeDef VCNL4010_write16(uint8_t subAddress, uint16_t data)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af04      	add	r7, sp, #16
 80079ca:	0002      	movs	r2, r0
 80079cc:	1dfb      	adds	r3, r7, #7
 80079ce:	701a      	strb	r2, [r3, #0]
 80079d0:	1d3b      	adds	r3, r7, #4
 80079d2:	1c0a      	adds	r2, r1, #0
 80079d4:	801a      	strh	r2, [r3, #0]

  uint8_t temp[2];
  temp[0] = (uint8_t) 0xFF & (data >> 8); //high byte is stored first
 80079d6:	1d3b      	adds	r3, r7, #4
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	b29b      	uxth	r3, r3
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	210c      	movs	r1, #12
 80079e2:	187b      	adds	r3, r7, r1
 80079e4:	701a      	strb	r2, [r3, #0]
  temp[1] = (uint8_t) (0xFF & data);      //low byte is stored second
 80079e6:	1d3b      	adds	r3, r7, #4
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	187b      	adds	r3, r7, r1
 80079ee:	705a      	strb	r2, [r3, #1]

  return HAL_I2C_Mem_Write(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, temp, 2, HAL_MAX_DELAY);
 80079f0:	1dfb      	adds	r3, r7, #7
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	4808      	ldr	r0, [pc, #32]	; (8007a18 <VCNL4010_write16+0x54>)
 80079f8:	2301      	movs	r3, #1
 80079fa:	425b      	negs	r3, r3
 80079fc:	9302      	str	r3, [sp, #8]
 80079fe:	2302      	movs	r3, #2
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	187b      	adds	r3, r7, r1
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	2301      	movs	r3, #1
 8007a08:	2126      	movs	r1, #38	; 0x26
 8007a0a:	f001 fac7 	bl	8008f9c <HAL_I2C_Mem_Write>
 8007a0e:	0003      	movs	r3, r0

}
 8007a10:	0018      	movs	r0, r3
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b004      	add	sp, #16
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	200001e8 	.word	0x200001e8

08007a1c <VCNL4010_read8>:

uint8_t VCNL4010_read8(uint8_t subAddress){
 8007a1c:	b590      	push	{r4, r7, lr}
 8007a1e:	b089      	sub	sp, #36	; 0x24
 8007a20:	af04      	add	r7, sp, #16
 8007a22:	0002      	movs	r2, r0
 8007a24:	1dfb      	adds	r3, r7, #7
 8007a26:	701a      	strb	r2, [r3, #0]

	uint8_t data;
	HAL_I2C_Mem_Read(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8007a28:	1dfb      	adds	r3, r7, #7
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	4809      	ldr	r0, [pc, #36]	; (8007a54 <VCNL4010_read8+0x38>)
 8007a30:	2301      	movs	r3, #1
 8007a32:	425b      	negs	r3, r3
 8007a34:	9302      	str	r3, [sp, #8]
 8007a36:	2301      	movs	r3, #1
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	240f      	movs	r4, #15
 8007a3c:	193b      	adds	r3, r7, r4
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	2301      	movs	r3, #1
 8007a42:	2126      	movs	r1, #38	; 0x26
 8007a44:	f001 fbd8 	bl	80091f8 <HAL_I2C_Mem_Read>
	return ((uint8_t) data);
 8007a48:	193b      	adds	r3, r7, r4
 8007a4a:	781b      	ldrb	r3, [r3, #0]
}
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b005      	add	sp, #20
 8007a52:	bd90      	pop	{r4, r7, pc}
 8007a54:	200001e8 	.word	0x200001e8

08007a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8007a58:	480d      	ldr	r0, [pc, #52]	; (8007a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007a5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007a5c:	480d      	ldr	r0, [pc, #52]	; (8007a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8007a5e:	490e      	ldr	r1, [pc, #56]	; (8007a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007a60:	4a0e      	ldr	r2, [pc, #56]	; (8007a9c <LoopForever+0xe>)
  movs r3, #0
 8007a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a64:	e002      	b.n	8007a6c <LoopCopyDataInit>

08007a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a6a:	3304      	adds	r3, #4

08007a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a70:	d3f9      	bcc.n	8007a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a72:	4a0b      	ldr	r2, [pc, #44]	; (8007aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007a74:	4c0b      	ldr	r4, [pc, #44]	; (8007aa4 <LoopForever+0x16>)
  movs r3, #0
 8007a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007a78:	e001      	b.n	8007a7e <LoopFillZerobss>

08007a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a7c:	3204      	adds	r2, #4

08007a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a80:	d3fb      	bcc.n	8007a7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007a82:	f7ff fda3 	bl	80075cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a86:	f005 f9c7 	bl	800ce18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007a8a:	f7fe fa0f 	bl	8005eac <main>

08007a8e <LoopForever>:

LoopForever:
    b LoopForever
 8007a8e:	e7fe      	b.n	8007a8e <LoopForever>
  ldr   r0, =_estack
 8007a90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8007a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a98:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8007a9c:	0800f6cc 	.word	0x0800f6cc
  ldr r2, =_sbss
 8007aa0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8007aa4:	20000524 	.word	0x20000524

08007aa8 <DMA1_Channel4_5_6_7_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007aa8:	e7fe      	b.n	8007aa8 <DMA1_Channel4_5_6_7_IRQHandler>
	...

08007aac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007ab2:	1dfb      	adds	r3, r7, #7
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8007ab8:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <HAL_Init+0x3c>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <HAL_Init+0x3c>)
 8007abe:	2140      	movs	r1, #64	; 0x40
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	f000 f811 	bl	8007aec <HAL_InitTick>
 8007aca:	1e03      	subs	r3, r0, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8007ace:	1dfb      	adds	r3, r7, #7
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e001      	b.n	8007ada <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007ad6:	f7ff f815 	bl	8006b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007ada:	1dfb      	adds	r3, r7, #7
 8007adc:	781b      	ldrb	r3, [r3, #0]
}
 8007ade:	0018      	movs	r0, r3
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	b002      	add	sp, #8
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	40022000 	.word	0x40022000

08007aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007aec:	b590      	push	{r4, r7, lr}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007af4:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <HAL_InitTick+0x5c>)
 8007af6:	681c      	ldr	r4, [r3, #0]
 8007af8:	4b14      	ldr	r3, [pc, #80]	; (8007b4c <HAL_InitTick+0x60>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	0019      	movs	r1, r3
 8007afe:	23fa      	movs	r3, #250	; 0xfa
 8007b00:	0098      	lsls	r0, r3, #2
 8007b02:	f7f8 fb01 	bl	8000108 <__udivsi3>
 8007b06:	0003      	movs	r3, r0
 8007b08:	0019      	movs	r1, r3
 8007b0a:	0020      	movs	r0, r4
 8007b0c:	f7f8 fafc 	bl	8000108 <__udivsi3>
 8007b10:	0003      	movs	r3, r0
 8007b12:	0018      	movs	r0, r3
 8007b14:	f000 fe2b 	bl	800876e <HAL_SYSTICK_Config>
 8007b18:	1e03      	subs	r3, r0, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e00f      	b.n	8007b40 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d80b      	bhi.n	8007b3e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	2301      	movs	r3, #1
 8007b2a:	425b      	negs	r3, r3
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f000 fdf8 	bl	8008724 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b34:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <HAL_InitTick+0x64>)
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e000      	b.n	8007b40 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
}
 8007b40:	0018      	movs	r0, r3
 8007b42:	46bd      	mov	sp, r7
 8007b44:	b003      	add	sp, #12
 8007b46:	bd90      	pop	{r4, r7, pc}
 8007b48:	20000020 	.word	0x20000020
 8007b4c:	20000028 	.word	0x20000028
 8007b50:	20000024 	.word	0x20000024

08007b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b58:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <HAL_IncTick+0x1c>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	001a      	movs	r2, r3
 8007b5e:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <HAL_IncTick+0x20>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	18d2      	adds	r2, r2, r3
 8007b64:	4b03      	ldr	r3, [pc, #12]	; (8007b74 <HAL_IncTick+0x20>)
 8007b66:	601a      	str	r2, [r3, #0]
}
 8007b68:	46c0      	nop			; (mov r8, r8)
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	20000028 	.word	0x20000028
 8007b74:	20000510 	.word	0x20000510

08007b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8007b7c:	4b02      	ldr	r3, [pc, #8]	; (8007b88 <HAL_GetTick+0x10>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
}
 8007b80:	0018      	movs	r0, r3
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	20000510 	.word	0x20000510

08007b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b94:	f7ff fff0 	bl	8007b78 <HAL_GetTick>
 8007b98:	0003      	movs	r3, r0
 8007b9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	d005      	beq.n	8007bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <HAL_Delay+0x44>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	001a      	movs	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	189b      	adds	r3, r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	f7ff ffe0 	bl	8007b78 <HAL_GetTick>
 8007bb8:	0002      	movs	r2, r0
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d8f7      	bhi.n	8007bb4 <HAL_Delay+0x28>
  {
  }
}
 8007bc4:	46c0      	nop			; (mov r8, r8)
 8007bc6:	46c0      	nop			; (mov r8, r8)
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	b004      	add	sp, #16
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	20000028 	.word	0x20000028

08007bd4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e159      	b.n	8007e9a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10a      	bne.n	8007c04 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2250      	movs	r2, #80	; 0x50
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f7fb fb02 	bl	8003208 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c08:	2210      	movs	r2, #16
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	2b10      	cmp	r3, #16
 8007c0e:	d005      	beq.n	8007c1c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2204      	movs	r2, #4
 8007c18:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8007c1a:	d00b      	beq.n	8007c34 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c20:	2210      	movs	r2, #16
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2250      	movs	r2, #80	; 0x50
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e132      	b.n	8007e9a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c38:	4a9a      	ldr	r2, [pc, #616]	; (8007ea4 <HAL_ADC_Init+0x2d0>)
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	2203      	movs	r2, #3
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d108      	bne.n	8007c64 <HAL_ADC_Init+0x90>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_ADC_Init+0x90>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e000      	b.n	8007c66 <HAL_ADC_Init+0x92>
 8007c64:	2300      	movs	r3, #0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d149      	bne.n	8007cfe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	23c0      	movs	r3, #192	; 0xc0
 8007c70:	061b      	lsls	r3, r3, #24
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d00b      	beq.n	8007c8e <HAL_ADC_Init+0xba>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	2380      	movs	r3, #128	; 0x80
 8007c7c:	05db      	lsls	r3, r3, #23
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d005      	beq.n	8007c8e <HAL_ADC_Init+0xba>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	2380      	movs	r3, #128	; 0x80
 8007c88:	061b      	lsls	r3, r3, #24
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d111      	bne.n	8007cb2 <HAL_ADC_Init+0xde>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	0092      	lsls	r2, r2, #2
 8007c9a:	0892      	lsrs	r2, r2, #2
 8007c9c:	611a      	str	r2, [r3, #16]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6919      	ldr	r1, [r3, #16]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	611a      	str	r2, [r3, #16]
 8007cb0:	e014      	b.n	8007cdc <HAL_ADC_Init+0x108>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	0092      	lsls	r2, r2, #2
 8007cbe:	0892      	lsrs	r2, r2, #2
 8007cc0:	611a      	str	r2, [r3, #16]
 8007cc2:	4b79      	ldr	r3, [pc, #484]	; (8007ea8 <HAL_ADC_Init+0x2d4>)
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b78      	ldr	r3, [pc, #480]	; (8007ea8 <HAL_ADC_Init+0x2d4>)
 8007cc8:	4978      	ldr	r1, [pc, #480]	; (8007eac <HAL_ADC_Init+0x2d8>)
 8007cca:	400a      	ands	r2, r1
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	4b76      	ldr	r3, [pc, #472]	; (8007ea8 <HAL_ADC_Init+0x2d4>)
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	4b74      	ldr	r3, [pc, #464]	; (8007ea8 <HAL_ADC_Init+0x2d4>)
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2118      	movs	r1, #24
 8007ce8:	438a      	bics	r2, r1
 8007cea:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68d9      	ldr	r1, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8007cfe:	4b6a      	ldr	r3, [pc, #424]	; (8007ea8 <HAL_ADC_Init+0x2d4>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	4b69      	ldr	r3, [pc, #420]	; (8007ea8 <HAL_ADC_Init+0x2d4>)
 8007d04:	496a      	ldr	r1, [pc, #424]	; (8007eb0 <HAL_ADC_Init+0x2dc>)
 8007d06:	400a      	ands	r2, r1
 8007d08:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8007d0a:	4b67      	ldr	r3, [pc, #412]	; (8007ea8 <HAL_ADC_Init+0x2d4>)
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d12:	065a      	lsls	r2, r3, #25
 8007d14:	4b64      	ldr	r3, [pc, #400]	; (8007ea8 <HAL_ADC_Init+0x2d4>)
 8007d16:	430a      	orrs	r2, r1
 8007d18:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	2380      	movs	r3, #128	; 0x80
 8007d22:	055b      	lsls	r3, r3, #21
 8007d24:	4013      	ands	r3, r2
 8007d26:	d108      	bne.n	8007d3a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2180      	movs	r1, #128	; 0x80
 8007d34:	0549      	lsls	r1, r1, #21
 8007d36:	430a      	orrs	r2, r1
 8007d38:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	495b      	ldr	r1, [pc, #364]	; (8007eb4 <HAL_ADC_Init+0x2e0>)
 8007d46:	400a      	ands	r2, r1
 8007d48:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68d9      	ldr	r1, [r3, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d101      	bne.n	8007d60 <HAL_ADC_Init+0x18c>
 8007d5c:	2304      	movs	r3, #4
 8007d5e:	e000      	b.n	8007d62 <HAL_ADC_Init+0x18e>
 8007d60:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8007d62:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2020      	movs	r0, #32
 8007d68:	5c1b      	ldrb	r3, [r3, r0]
 8007d6a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8007d6c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	202c      	movs	r0, #44	; 0x2c
 8007d72:	5c1b      	ldrb	r3, [r3, r0]
 8007d74:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007d76:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007d7c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8007d84:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8007d8c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d9a:	23c2      	movs	r3, #194	; 0xc2
 8007d9c:	33ff      	adds	r3, #255	; 0xff
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d00b      	beq.n	8007dba <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68d9      	ldr	r1, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2221      	movs	r2, #33	; 0x21
 8007dbe:	5c9b      	ldrb	r3, [r3, r2]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d11a      	bne.n	8007dfa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	5c9b      	ldrb	r3, [r3, r2]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68da      	ldr	r2, [r3, #12]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2180      	movs	r1, #128	; 0x80
 8007dda:	0249      	lsls	r1, r1, #9
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	60da      	str	r2, [r3, #12]
 8007de0:	e00b      	b.n	8007dfa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de6:	2220      	movs	r2, #32
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df2:	2201      	movs	r2, #1
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d11f      	bne.n	8007e42 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	492a      	ldr	r1, [pc, #168]	; (8007eb8 <HAL_ADC_Init+0x2e4>)
 8007e0e:	400a      	ands	r2, r1
 8007e10:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6919      	ldr	r1, [r3, #16]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007e20:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8007e26:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691a      	ldr	r2, [r3, #16]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	611a      	str	r2, [r3, #16]
 8007e40:	e00e      	b.n	8007e60 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d107      	bne.n	8007e60 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691a      	ldr	r2, [r3, #16]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	438a      	bics	r2, r1
 8007e5e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695a      	ldr	r2, [r3, #20]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2107      	movs	r1, #7
 8007e6c:	438a      	bics	r2, r1
 8007e6e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6959      	ldr	r1, [r3, #20]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8c:	2203      	movs	r2, #3
 8007e8e:	4393      	bics	r3, r2
 8007e90:	2201      	movs	r2, #1
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b002      	add	sp, #8
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	fffffefd 	.word	0xfffffefd
 8007ea8:	40012708 	.word	0x40012708
 8007eac:	ffc3ffff 	.word	0xffc3ffff
 8007eb0:	fdffffff 	.word	0xfdffffff
 8007eb4:	fffe0219 	.word	0xfffe0219
 8007eb8:	fffffc03 	.word	0xfffffc03

08007ebc <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ec8:	2317      	movs	r3, #23
 8007eca:	18fb      	adds	r3, r7, r3
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	4013      	ands	r3, r2
 8007eda:	d15e      	bne.n	8007f9a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2250      	movs	r2, #80	; 0x50
 8007ee0:	5c9b      	ldrb	r3, [r3, r2]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_ADC_Start_DMA+0x2e>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e05e      	b.n	8007fa8 <HAL_ADC_Start_DMA+0xec>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2250      	movs	r2, #80	; 0x50
 8007eee:	2101      	movs	r1, #1
 8007ef0:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2101      	movs	r1, #1
 8007efe:	430a      	orrs	r2, r1
 8007f00:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d007      	beq.n	8007f1a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8007f0a:	2317      	movs	r3, #23
 8007f0c:	18fc      	adds	r4, r7, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	0018      	movs	r0, r3
 8007f12:	f000 fa57 	bl	80083c4 <ADC_Enable>
 8007f16:	0003      	movs	r3, r0
 8007f18:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007f1a:	2317      	movs	r3, #23
 8007f1c:	18fb      	adds	r3, r7, r3
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d13e      	bne.n	8007fa2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f28:	4a21      	ldr	r2, [pc, #132]	; (8007fb0 <HAL_ADC_Start_DMA+0xf4>)
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2280      	movs	r2, #128	; 0x80
 8007f2e:	0052      	lsls	r2, r2, #1
 8007f30:	431a      	orrs	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2250      	movs	r2, #80	; 0x50
 8007f40:	2100      	movs	r1, #0
 8007f42:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f48:	4a1a      	ldr	r2, [pc, #104]	; (8007fb4 <HAL_ADC_Start_DMA+0xf8>)
 8007f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f50:	4a19      	ldr	r2, [pc, #100]	; (8007fb8 <HAL_ADC_Start_DMA+0xfc>)
 8007f52:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f58:	4a18      	ldr	r2, [pc, #96]	; (8007fbc <HAL_ADC_Start_DMA+0x100>)
 8007f5a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	221c      	movs	r2, #28
 8007f62:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2110      	movs	r1, #16
 8007f70:	430a      	orrs	r2, r1
 8007f72:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3340      	adds	r3, #64	; 0x40
 8007f7e:	0019      	movs	r1, r3
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f000 fc78 	bl	8008878 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2104      	movs	r1, #4
 8007f94:	430a      	orrs	r2, r1
 8007f96:	609a      	str	r2, [r3, #8]
 8007f98:	e003      	b.n	8007fa2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007f9a:	2317      	movs	r3, #23
 8007f9c:	18fb      	adds	r3, r7, r3
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007fa2:	2317      	movs	r3, #23
 8007fa4:	18fb      	adds	r3, r7, r3
 8007fa6:	781b      	ldrb	r3, [r3, #0]
}
 8007fa8:	0018      	movs	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b007      	add	sp, #28
 8007fae:	bd90      	pop	{r4, r7, pc}
 8007fb0:	fffff0fe 	.word	0xfffff0fe
 8007fb4:	08008485 	.word	0x08008485
 8007fb8:	08008539 	.word	0x08008539
 8007fbc:	08008557 	.word	0x08008557

08007fc0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2204      	movs	r2, #4
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d106      	bne.n	8007fe4 <HAL_ADC_IRQHandler+0x24>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2204      	movs	r2, #4
 8007fde:	4013      	ands	r3, r2
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d00d      	beq.n	8008000 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2208      	movs	r2, #8
 8007fec:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8007fee:	2b08      	cmp	r3, #8
 8007ff0:	d154      	bne.n	800809c <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2208      	movs	r2, #8
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d14d      	bne.n	800809c <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008004:	2210      	movs	r2, #16
 8008006:	4013      	ands	r3, r2
 8008008:	d106      	bne.n	8008018 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800e:	2280      	movs	r2, #128	; 0x80
 8008010:	0092      	lsls	r2, r2, #2
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	23c0      	movs	r3, #192	; 0xc0
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	4013      	ands	r3, r2
 8008024:	d12e      	bne.n	8008084 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2220      	movs	r2, #32
 800802a:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800802c:	2b00      	cmp	r3, #0
 800802e:	d129      	bne.n	8008084 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2208      	movs	r2, #8
 8008038:	4013      	ands	r3, r2
 800803a:	2b08      	cmp	r3, #8
 800803c:	d122      	bne.n	8008084 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2204      	movs	r2, #4
 8008046:	4013      	ands	r3, r2
 8008048:	d110      	bne.n	800806c <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	210c      	movs	r1, #12
 8008056:	438a      	bics	r2, r1
 8008058:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805e:	4a35      	ldr	r2, [pc, #212]	; (8008134 <HAL_ADC_IRQHandler+0x174>)
 8008060:	4013      	ands	r3, r2
 8008062:	2201      	movs	r2, #1
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	655a      	str	r2, [r3, #84]	; 0x54
 800806a:	e00b      	b.n	8008084 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	2220      	movs	r2, #32
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807c:	2201      	movs	r2, #1
 800807e:	431a      	orrs	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	0018      	movs	r0, r3
 8008088:	f000 f856 	bl	8008138 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d003      	beq.n	800809c <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	220c      	movs	r2, #12
 800809a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2280      	movs	r2, #128	; 0x80
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b80      	cmp	r3, #128	; 0x80
 80080a8:	d115      	bne.n	80080d6 <HAL_ADC_IRQHandler+0x116>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2280      	movs	r2, #128	; 0x80
 80080b2:	4013      	ands	r3, r2
 80080b4:	2b80      	cmp	r3, #128	; 0x80
 80080b6:	d10e      	bne.n	80080d6 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080bc:	2280      	movs	r2, #128	; 0x80
 80080be:	0252      	lsls	r2, r2, #9
 80080c0:	431a      	orrs	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	0018      	movs	r0, r3
 80080ca:	f7fd fe97 	bl	8005dfc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2280      	movs	r2, #128	; 0x80
 80080d4:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2210      	movs	r2, #16
 80080de:	4013      	ands	r3, r2
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d123      	bne.n	800812c <HAL_ADC_IRQHandler+0x16c>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2210      	movs	r2, #16
 80080ec:	4013      	ands	r3, r2
 80080ee:	2b10      	cmp	r3, #16
 80080f0:	d11c      	bne.n	800812c <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d006      	beq.n	8008108 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8008104:	2b01      	cmp	r3, #1
 8008106:	d10d      	bne.n	8008124 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810c:	2202      	movs	r2, #2
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2210      	movs	r2, #16
 800811a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	0018      	movs	r0, r3
 8008120:	f000 f81a 	bl	8008158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2210      	movs	r2, #16
 800812a:	601a      	str	r2, [r3, #0]
  }
  
}
 800812c:	46c0      	nop			; (mov r8, r8)
 800812e:	46bd      	mov	sp, r7
 8008130:	b002      	add	sp, #8
 8008132:	bd80      	pop	{r7, pc}
 8008134:	fffffefe 	.word	0xfffffefe

08008138 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008140:	46c0      	nop			; (mov r8, r8)
 8008142:	46bd      	mov	sp, r7
 8008144:	b002      	add	sp, #8
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008150:	46c0      	nop			; (mov r8, r8)
 8008152:	46bd      	mov	sp, r7
 8008154:	b002      	add	sp, #8
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008160:	46c0      	nop			; (mov r8, r8)
 8008162:	46bd      	mov	sp, r7
 8008164:	b002      	add	sp, #8
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2250      	movs	r2, #80	; 0x50
 8008176:	5c9b      	ldrb	r3, [r3, r2]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_ADC_ConfigChannel+0x18>
 800817c:	2302      	movs	r3, #2
 800817e:	e085      	b.n	800828c <HAL_ADC_ConfigChannel+0x124>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2250      	movs	r2, #80	; 0x50
 8008184:	2101      	movs	r1, #1
 8008186:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2204      	movs	r2, #4
 8008190:	4013      	ands	r3, r2
 8008192:	d00b      	beq.n	80081ac <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008198:	2220      	movs	r2, #32
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2250      	movs	r2, #80	; 0x50
 80081a4:	2100      	movs	r1, #0
 80081a6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e06f      	b.n	800828c <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4a38      	ldr	r2, [pc, #224]	; (8008294 <HAL_ADC_ConfigChannel+0x12c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d035      	beq.n	8008222 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	035b      	lsls	r3, r3, #13
 80081c2:	0b5a      	lsrs	r2, r3, #13
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	2380      	movs	r3, #128	; 0x80
 80081d2:	02db      	lsls	r3, r3, #11
 80081d4:	4013      	ands	r3, r2
 80081d6:	d009      	beq.n	80081ec <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80081d8:	4b2f      	ldr	r3, [pc, #188]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	4b2e      	ldr	r3, [pc, #184]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 80081de:	2180      	movs	r1, #128	; 0x80
 80081e0:	0409      	lsls	r1, r1, #16
 80081e2:	430a      	orrs	r2, r1
 80081e4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80081e6:	200a      	movs	r0, #10
 80081e8:	f000 f9d0 	bl	800858c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	2380      	movs	r3, #128	; 0x80
 80081f2:	029b      	lsls	r3, r3, #10
 80081f4:	4013      	ands	r3, r2
 80081f6:	d006      	beq.n	8008206 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80081f8:	4b27      	ldr	r3, [pc, #156]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	4b26      	ldr	r3, [pc, #152]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 80081fe:	2180      	movs	r1, #128	; 0x80
 8008200:	03c9      	lsls	r1, r1, #15
 8008202:	430a      	orrs	r2, r1
 8008204:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	2380      	movs	r3, #128	; 0x80
 800820c:	025b      	lsls	r3, r3, #9
 800820e:	4013      	ands	r3, r2
 8008210:	d037      	beq.n	8008282 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8008212:	4b21      	ldr	r3, [pc, #132]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	4b20      	ldr	r3, [pc, #128]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 8008218:	2180      	movs	r1, #128	; 0x80
 800821a:	0449      	lsls	r1, r1, #17
 800821c:	430a      	orrs	r2, r1
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e02f      	b.n	8008282 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	035b      	lsls	r3, r3, #13
 800822e:	0b5b      	lsrs	r3, r3, #13
 8008230:	43d9      	mvns	r1, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	400a      	ands	r2, r1
 8008238:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	2380      	movs	r3, #128	; 0x80
 8008240:	02db      	lsls	r3, r3, #11
 8008242:	4013      	ands	r3, r2
 8008244:	d005      	beq.n	8008252 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8008246:	4b14      	ldr	r3, [pc, #80]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 800824c:	4913      	ldr	r1, [pc, #76]	; (800829c <HAL_ADC_ConfigChannel+0x134>)
 800824e:	400a      	ands	r2, r1
 8008250:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	2380      	movs	r3, #128	; 0x80
 8008258:	029b      	lsls	r3, r3, #10
 800825a:	4013      	ands	r3, r2
 800825c:	d005      	beq.n	800826a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800825e:	4b0e      	ldr	r3, [pc, #56]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4b0d      	ldr	r3, [pc, #52]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 8008264:	490e      	ldr	r1, [pc, #56]	; (80082a0 <HAL_ADC_ConfigChannel+0x138>)
 8008266:	400a      	ands	r2, r1
 8008268:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	2380      	movs	r3, #128	; 0x80
 8008270:	025b      	lsls	r3, r3, #9
 8008272:	4013      	ands	r3, r2
 8008274:	d005      	beq.n	8008282 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8008276:	4b08      	ldr	r3, [pc, #32]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	4b07      	ldr	r3, [pc, #28]	; (8008298 <HAL_ADC_ConfigChannel+0x130>)
 800827c:	4909      	ldr	r1, [pc, #36]	; (80082a4 <HAL_ADC_ConfigChannel+0x13c>)
 800827e:	400a      	ands	r2, r1
 8008280:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2250      	movs	r2, #80	; 0x50
 8008286:	2100      	movs	r1, #0
 8008288:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	0018      	movs	r0, r3
 800828e:	46bd      	mov	sp, r7
 8008290:	b002      	add	sp, #8
 8008292:	bd80      	pop	{r7, pc}
 8008294:	00001001 	.word	0x00001001
 8008298:	40012708 	.word	0x40012708
 800829c:	ff7fffff 	.word	0xff7fffff
 80082a0:	ffbfffff 	.word	0xffbfffff
 80082a4:	feffffff 	.word	0xfeffffff

080082a8 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082b2:	2317      	movs	r3, #23
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	2200      	movs	r2, #0
 80082b8:	701a      	strb	r2, [r3, #0]
  /* Verify if threshold is within the selected ADC resolution */
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));

  /* Process locked */
  __HAL_LOCK(hadc);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2250      	movs	r2, #80	; 0x50
 80082be:	5c9b      	ldrb	r3, [r3, r2]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_ADC_AnalogWDGConfig+0x20>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e074      	b.n	80083b2 <HAL_ADC_AnalogWDGConfig+0x10a>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2250      	movs	r2, #80	; 0x50
 80082cc:	2101      	movs	r1, #1
 80082ce:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	2204      	movs	r2, #4
 80082d8:	4013      	ands	r3, r2
 80082da:	d159      	bne.n	8008390 <HAL_ADC_AnalogWDGConfig+0xe8>
  {
    /* Configure ADC Analog watchdog interrupt */
    if(AnalogWDGConfig->ITMode == ENABLE)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	7a1b      	ldrb	r3, [r3, #8]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d108      	bne.n	80082f6 <HAL_ADC_AnalogWDGConfig+0x4e>
    {
      /* Enable the ADC Analog watchdog interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2180      	movs	r1, #128	; 0x80
 80082f0:	430a      	orrs	r2, r1
 80082f2:	605a      	str	r2, [r3, #4]
 80082f4:	e007      	b.n	8008306 <HAL_ADC_AnalogWDGConfig+0x5e>
    }
    else
    {
      /* Disable the ADC Analog watchdog interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2180      	movs	r1, #128	; 0x80
 8008302:	438a      	bics	r2, r1
 8008304:	605a      	str	r2, [r3, #4]
    
    /* Configuration of analog watchdog:                                        */
    /*  - Set the analog watchdog mode                                          */
    /*  - Set the Analog watchdog channel (is not used if watchdog              */
    /*    mode "all channels": ADC_CFGR1_AWD1SGL=0)                             */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	492a      	ldr	r1, [pc, #168]	; (80083bc <HAL_ADC_AnalogWDGConfig+0x114>)
 8008312:	400a      	ands	r2, r1
 8008314:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_AWDEN  |
                               ADC_CFGR1_AWDCH);
    
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode |
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68d9      	ldr	r1, [r3, #12]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	6858      	ldr	r0, [r3, #4]
 8008324:	23f8      	movs	r3, #248	; 0xf8
 8008326:	05db      	lsls	r3, r3, #23
 8008328:	4003      	ands	r3, r0
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode |
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	60da      	str	r2, [r3, #12]
    
    
    /* Shift the offset in function of the selected ADC resolution: Thresholds  */
    /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0     */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	08db      	lsrs	r3, r3, #3
 8008340:	2103      	movs	r1, #3
 8008342:	400b      	ands	r3, r1
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	409a      	lsls	r2, r3
 8008348:	0013      	movs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	08db      	lsrs	r3, r3, #3
 8008358:	2103      	movs	r1, #3
 800835a:	400b      	ands	r3, r1
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	409a      	lsls	r2, r3
 8008360:	0013      	movs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
    
    /* Clear High & Low high thresholds */
    hadc->Instance->TR &= (uint32_t) ~ (ADC_TR_HT | ADC_TR_LT);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6a1a      	ldr	r2, [r3, #32]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4914      	ldr	r1, [pc, #80]	; (80083c0 <HAL_ADC_AnalogWDGConfig+0x118>)
 8008370:	400a      	ands	r2, r1
 8008372:	621a      	str	r2, [r3, #32]
    
    /* Set the high threshold */
    hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	0412      	lsls	r2, r2, #16
 800837c:	621a      	str	r2, [r3, #32]
    /* Set the low threshold */
    hadc->Instance->TR |= tmpAWDLowThresholdShifted;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6a19      	ldr	r1, [r3, #32]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	430a      	orrs	r2, r1
 800838c:	621a      	str	r2, [r3, #32]
 800838e:	e009      	b.n	80083a4 <HAL_ADC_AnalogWDGConfig+0xfc>
  /* If a conversion is on going on regular group, no update could be done    */
  /* on neither of the AWD configuration structure parameters.                */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008394:	2220      	movs	r2, #32
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 800839c:	2317      	movs	r3, #23
 800839e:	18fb      	adds	r3, r7, r3
 80083a0:	2201      	movs	r2, #1
 80083a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2250      	movs	r2, #80	; 0x50
 80083a8:	2100      	movs	r1, #0
 80083aa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80083ac:	2317      	movs	r3, #23
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	781b      	ldrb	r3, [r3, #0]
}
 80083b2:	0018      	movs	r0, r3
 80083b4:	46bd      	mov	sp, r7
 80083b6:	b006      	add	sp, #24
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	833fffff 	.word	0x833fffff
 80083c0:	f000f000 	.word	0xf000f000

080083c4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2203      	movs	r2, #3
 80083d8:	4013      	ands	r3, r2
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d108      	bne.n	80083f0 <ADC_Enable+0x2c>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2201      	movs	r2, #1
 80083e6:	4013      	ands	r3, r2
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <ADC_Enable+0x2c>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <ADC_Enable+0x2e>
 80083f0:	2300      	movs	r3, #0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d13f      	bne.n	8008476 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	4a20      	ldr	r2, [pc, #128]	; (8008480 <ADC_Enable+0xbc>)
 80083fe:	4013      	ands	r3, r2
 8008400:	d00d      	beq.n	800841e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008406:	2210      	movs	r2, #16
 8008408:	431a      	orrs	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008412:	2201      	movs	r2, #1
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e02c      	b.n	8008478 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2101      	movs	r1, #1
 800842a:	430a      	orrs	r2, r1
 800842c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800842e:	2001      	movs	r0, #1
 8008430:	f000 f8ac 	bl	800858c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8008434:	f7ff fba0 	bl	8007b78 <HAL_GetTick>
 8008438:	0003      	movs	r3, r0
 800843a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800843c:	e014      	b.n	8008468 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800843e:	f7ff fb9b 	bl	8007b78 <HAL_GetTick>
 8008442:	0002      	movs	r2, r0
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b0a      	cmp	r3, #10
 800844a:	d90d      	bls.n	8008468 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008450:	2210      	movs	r2, #16
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800845c:	2201      	movs	r2, #1
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e007      	b.n	8008478 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2201      	movs	r2, #1
 8008470:	4013      	ands	r3, r2
 8008472:	2b01      	cmp	r3, #1
 8008474:	d1e3      	bne.n	800843e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	0018      	movs	r0, r3
 800847a:	46bd      	mov	sp, r7
 800847c:	b004      	add	sp, #16
 800847e:	bd80      	pop	{r7, pc}
 8008480:	80000017 	.word	0x80000017

08008484 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008496:	2250      	movs	r2, #80	; 0x50
 8008498:	4013      	ands	r3, r2
 800849a:	d141      	bne.n	8008520 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a0:	2280      	movs	r2, #128	; 0x80
 80084a2:	0092      	lsls	r2, r2, #2
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	23c0      	movs	r3, #192	; 0xc0
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	4013      	ands	r3, r2
 80084b6:	d12e      	bne.n	8008516 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2220      	movs	r2, #32
 80084bc:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d129      	bne.n	8008516 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2208      	movs	r2, #8
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d122      	bne.n	8008516 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2204      	movs	r2, #4
 80084d8:	4013      	ands	r3, r2
 80084da:	d110      	bne.n	80084fe <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	210c      	movs	r1, #12
 80084e8:	438a      	bics	r2, r1
 80084ea:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f0:	4a10      	ldr	r2, [pc, #64]	; (8008534 <ADC_DMAConvCplt+0xb0>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	2201      	movs	r2, #1
 80084f6:	431a      	orrs	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	655a      	str	r2, [r3, #84]	; 0x54
 80084fc:	e00b      	b.n	8008516 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	2220      	movs	r2, #32
 8008504:	431a      	orrs	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850e:	2201      	movs	r2, #1
 8008510:	431a      	orrs	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	0018      	movs	r0, r3
 800851a:	f7ff fe0d 	bl	8008138 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800851e:	e005      	b.n	800852c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	0010      	movs	r0, r2
 800852a:	4798      	blx	r3
}
 800852c:	46c0      	nop			; (mov r8, r8)
 800852e:	46bd      	mov	sp, r7
 8008530:	b004      	add	sp, #16
 8008532:	bd80      	pop	{r7, pc}
 8008534:	fffffefe 	.word	0xfffffefe

08008538 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	0018      	movs	r0, r3
 800854a:	f7ff fdfd 	bl	8008148 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800854e:	46c0      	nop			; (mov r8, r8)
 8008550:	46bd      	mov	sp, r7
 8008552:	b004      	add	sp, #16
 8008554:	bd80      	pop	{r7, pc}

08008556 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008562:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008568:	2240      	movs	r2, #64	; 0x40
 800856a:	431a      	orrs	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008574:	2204      	movs	r2, #4
 8008576:	431a      	orrs	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	0018      	movs	r0, r3
 8008580:	f7ff fdea 	bl	8008158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008584:	46c0      	nop			; (mov r8, r8)
 8008586:	46bd      	mov	sp, r7
 8008588:	b004      	add	sp, #16
 800858a:	bd80      	pop	{r7, pc}

0800858c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8008594:	4b0b      	ldr	r3, [pc, #44]	; (80085c4 <ADC_DelayMicroSecond+0x38>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	490b      	ldr	r1, [pc, #44]	; (80085c8 <ADC_DelayMicroSecond+0x3c>)
 800859a:	0018      	movs	r0, r3
 800859c:	f7f7 fdb4 	bl	8000108 <__udivsi3>
 80085a0:	0003      	movs	r3, r0
 80085a2:	001a      	movs	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4353      	muls	r3, r2
 80085a8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80085aa:	e002      	b.n	80085b2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1f9      	bne.n	80085ac <ADC_DelayMicroSecond+0x20>
  } 
}
 80085b8:	46c0      	nop			; (mov r8, r8)
 80085ba:	46c0      	nop			; (mov r8, r8)
 80085bc:	46bd      	mov	sp, r7
 80085be:	b004      	add	sp, #16
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	20000020 	.word	0x20000020
 80085c8:	000f4240 	.word	0x000f4240

080085cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	0002      	movs	r2, r0
 80085d4:	1dfb      	adds	r3, r7, #7
 80085d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80085d8:	1dfb      	adds	r3, r7, #7
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b7f      	cmp	r3, #127	; 0x7f
 80085de:	d809      	bhi.n	80085f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085e0:	1dfb      	adds	r3, r7, #7
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	001a      	movs	r2, r3
 80085e6:	231f      	movs	r3, #31
 80085e8:	401a      	ands	r2, r3
 80085ea:	4b04      	ldr	r3, [pc, #16]	; (80085fc <__NVIC_EnableIRQ+0x30>)
 80085ec:	2101      	movs	r1, #1
 80085ee:	4091      	lsls	r1, r2
 80085f0:	000a      	movs	r2, r1
 80085f2:	601a      	str	r2, [r3, #0]
  }
}
 80085f4:	46c0      	nop			; (mov r8, r8)
 80085f6:	46bd      	mov	sp, r7
 80085f8:	b002      	add	sp, #8
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	e000e100 	.word	0xe000e100

08008600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008600:	b590      	push	{r4, r7, lr}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	0002      	movs	r2, r0
 8008608:	6039      	str	r1, [r7, #0]
 800860a:	1dfb      	adds	r3, r7, #7
 800860c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800860e:	1dfb      	adds	r3, r7, #7
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b7f      	cmp	r3, #127	; 0x7f
 8008614:	d828      	bhi.n	8008668 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008616:	4a2f      	ldr	r2, [pc, #188]	; (80086d4 <__NVIC_SetPriority+0xd4>)
 8008618:	1dfb      	adds	r3, r7, #7
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b25b      	sxtb	r3, r3
 800861e:	089b      	lsrs	r3, r3, #2
 8008620:	33c0      	adds	r3, #192	; 0xc0
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	589b      	ldr	r3, [r3, r2]
 8008626:	1dfa      	adds	r2, r7, #7
 8008628:	7812      	ldrb	r2, [r2, #0]
 800862a:	0011      	movs	r1, r2
 800862c:	2203      	movs	r2, #3
 800862e:	400a      	ands	r2, r1
 8008630:	00d2      	lsls	r2, r2, #3
 8008632:	21ff      	movs	r1, #255	; 0xff
 8008634:	4091      	lsls	r1, r2
 8008636:	000a      	movs	r2, r1
 8008638:	43d2      	mvns	r2, r2
 800863a:	401a      	ands	r2, r3
 800863c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	019b      	lsls	r3, r3, #6
 8008642:	22ff      	movs	r2, #255	; 0xff
 8008644:	401a      	ands	r2, r3
 8008646:	1dfb      	adds	r3, r7, #7
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	0018      	movs	r0, r3
 800864c:	2303      	movs	r3, #3
 800864e:	4003      	ands	r3, r0
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008654:	481f      	ldr	r0, [pc, #124]	; (80086d4 <__NVIC_SetPriority+0xd4>)
 8008656:	1dfb      	adds	r3, r7, #7
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	b25b      	sxtb	r3, r3
 800865c:	089b      	lsrs	r3, r3, #2
 800865e:	430a      	orrs	r2, r1
 8008660:	33c0      	adds	r3, #192	; 0xc0
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008666:	e031      	b.n	80086cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008668:	4a1b      	ldr	r2, [pc, #108]	; (80086d8 <__NVIC_SetPriority+0xd8>)
 800866a:	1dfb      	adds	r3, r7, #7
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	0019      	movs	r1, r3
 8008670:	230f      	movs	r3, #15
 8008672:	400b      	ands	r3, r1
 8008674:	3b08      	subs	r3, #8
 8008676:	089b      	lsrs	r3, r3, #2
 8008678:	3306      	adds	r3, #6
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	18d3      	adds	r3, r2, r3
 800867e:	3304      	adds	r3, #4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	1dfa      	adds	r2, r7, #7
 8008684:	7812      	ldrb	r2, [r2, #0]
 8008686:	0011      	movs	r1, r2
 8008688:	2203      	movs	r2, #3
 800868a:	400a      	ands	r2, r1
 800868c:	00d2      	lsls	r2, r2, #3
 800868e:	21ff      	movs	r1, #255	; 0xff
 8008690:	4091      	lsls	r1, r2
 8008692:	000a      	movs	r2, r1
 8008694:	43d2      	mvns	r2, r2
 8008696:	401a      	ands	r2, r3
 8008698:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	019b      	lsls	r3, r3, #6
 800869e:	22ff      	movs	r2, #255	; 0xff
 80086a0:	401a      	ands	r2, r3
 80086a2:	1dfb      	adds	r3, r7, #7
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	0018      	movs	r0, r3
 80086a8:	2303      	movs	r3, #3
 80086aa:	4003      	ands	r3, r0
 80086ac:	00db      	lsls	r3, r3, #3
 80086ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80086b0:	4809      	ldr	r0, [pc, #36]	; (80086d8 <__NVIC_SetPriority+0xd8>)
 80086b2:	1dfb      	adds	r3, r7, #7
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	001c      	movs	r4, r3
 80086b8:	230f      	movs	r3, #15
 80086ba:	4023      	ands	r3, r4
 80086bc:	3b08      	subs	r3, #8
 80086be:	089b      	lsrs	r3, r3, #2
 80086c0:	430a      	orrs	r2, r1
 80086c2:	3306      	adds	r3, #6
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	18c3      	adds	r3, r0, r3
 80086c8:	3304      	adds	r3, #4
 80086ca:	601a      	str	r2, [r3, #0]
}
 80086cc:	46c0      	nop			; (mov r8, r8)
 80086ce:	46bd      	mov	sp, r7
 80086d0:	b003      	add	sp, #12
 80086d2:	bd90      	pop	{r4, r7, pc}
 80086d4:	e000e100 	.word	0xe000e100
 80086d8:	e000ed00 	.word	0xe000ed00

080086dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	1e5a      	subs	r2, r3, #1
 80086e8:	2380      	movs	r3, #128	; 0x80
 80086ea:	045b      	lsls	r3, r3, #17
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d301      	bcc.n	80086f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086f0:	2301      	movs	r3, #1
 80086f2:	e010      	b.n	8008716 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <SysTick_Config+0x44>)
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	3a01      	subs	r2, #1
 80086fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086fc:	2301      	movs	r3, #1
 80086fe:	425b      	negs	r3, r3
 8008700:	2103      	movs	r1, #3
 8008702:	0018      	movs	r0, r3
 8008704:	f7ff ff7c 	bl	8008600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <SysTick_Config+0x44>)
 800870a:	2200      	movs	r2, #0
 800870c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800870e:	4b04      	ldr	r3, [pc, #16]	; (8008720 <SysTick_Config+0x44>)
 8008710:	2207      	movs	r2, #7
 8008712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008714:	2300      	movs	r3, #0
}
 8008716:	0018      	movs	r0, r3
 8008718:	46bd      	mov	sp, r7
 800871a:	b002      	add	sp, #8
 800871c:	bd80      	pop	{r7, pc}
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	e000e010 	.word	0xe000e010

08008724 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	210f      	movs	r1, #15
 8008730:	187b      	adds	r3, r7, r1
 8008732:	1c02      	adds	r2, r0, #0
 8008734:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	187b      	adds	r3, r7, r1
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	b25b      	sxtb	r3, r3
 800873e:	0011      	movs	r1, r2
 8008740:	0018      	movs	r0, r3
 8008742:	f7ff ff5d 	bl	8008600 <__NVIC_SetPriority>
}
 8008746:	46c0      	nop			; (mov r8, r8)
 8008748:	46bd      	mov	sp, r7
 800874a:	b004      	add	sp, #16
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	0002      	movs	r2, r0
 8008756:	1dfb      	adds	r3, r7, #7
 8008758:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800875a:	1dfb      	adds	r3, r7, #7
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	b25b      	sxtb	r3, r3
 8008760:	0018      	movs	r0, r3
 8008762:	f7ff ff33 	bl	80085cc <__NVIC_EnableIRQ>
}
 8008766:	46c0      	nop			; (mov r8, r8)
 8008768:	46bd      	mov	sp, r7
 800876a:	b002      	add	sp, #8
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	0018      	movs	r0, r3
 800877a:	f7ff ffaf 	bl	80086dc <SysTick_Config>
 800877e:	0003      	movs	r3, r0
}
 8008780:	0018      	movs	r0, r3
 8008782:	46bd      	mov	sp, r7
 8008784:	b002      	add	sp, #8
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e061      	b.n	800885e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a32      	ldr	r2, [pc, #200]	; (8008868 <HAL_DMA_Init+0xe0>)
 80087a0:	4694      	mov	ip, r2
 80087a2:	4463      	add	r3, ip
 80087a4:	2114      	movs	r1, #20
 80087a6:	0018      	movs	r0, r3
 80087a8:	f7f7 fcae 	bl	8000108 <__udivsi3>
 80087ac:	0003      	movs	r3, r0
 80087ae:	009a      	lsls	r2, r3, #2
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a2d      	ldr	r2, [pc, #180]	; (800886c <HAL_DMA_Init+0xe4>)
 80087b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2225      	movs	r2, #37	; 0x25
 80087be:	2102      	movs	r1, #2
 80087c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	4a28      	ldr	r2, [pc, #160]	; (8008870 <HAL_DMA_Init+0xe8>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80087da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	2380      	movs	r3, #128	; 0x80
 800880e:	01db      	lsls	r3, r3, #7
 8008810:	429a      	cmp	r2, r3
 8008812:	d018      	beq.n	8008846 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008814:	4b17      	ldr	r3, [pc, #92]	; (8008874 <HAL_DMA_Init+0xec>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881c:	211c      	movs	r1, #28
 800881e:	400b      	ands	r3, r1
 8008820:	210f      	movs	r1, #15
 8008822:	4099      	lsls	r1, r3
 8008824:	000b      	movs	r3, r1
 8008826:	43d9      	mvns	r1, r3
 8008828:	4b12      	ldr	r3, [pc, #72]	; (8008874 <HAL_DMA_Init+0xec>)
 800882a:	400a      	ands	r2, r1
 800882c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800882e:	4b11      	ldr	r3, [pc, #68]	; (8008874 <HAL_DMA_Init+0xec>)
 8008830:	6819      	ldr	r1, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883a:	201c      	movs	r0, #28
 800883c:	4003      	ands	r3, r0
 800883e:	409a      	lsls	r2, r3
 8008840:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <HAL_DMA_Init+0xec>)
 8008842:	430a      	orrs	r2, r1
 8008844:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2225      	movs	r2, #37	; 0x25
 8008850:	2101      	movs	r1, #1
 8008852:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2224      	movs	r2, #36	; 0x24
 8008858:	2100      	movs	r1, #0
 800885a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	0018      	movs	r0, r3
 8008860:	46bd      	mov	sp, r7
 8008862:	b004      	add	sp, #16
 8008864:	bd80      	pop	{r7, pc}
 8008866:	46c0      	nop			; (mov r8, r8)
 8008868:	bffdfff8 	.word	0xbffdfff8
 800886c:	40020000 	.word	0x40020000
 8008870:	ffff800f 	.word	0xffff800f
 8008874:	400200a8 	.word	0x400200a8

08008878 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008886:	2317      	movs	r3, #23
 8008888:	18fb      	adds	r3, r7, r3
 800888a:	2200      	movs	r2, #0
 800888c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2224      	movs	r2, #36	; 0x24
 8008892:	5c9b      	ldrb	r3, [r3, r2]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_DMA_Start_IT+0x24>
 8008898:	2302      	movs	r3, #2
 800889a:	e04f      	b.n	800893c <HAL_DMA_Start_IT+0xc4>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2224      	movs	r2, #36	; 0x24
 80088a0:	2101      	movs	r1, #1
 80088a2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2225      	movs	r2, #37	; 0x25
 80088a8:	5c9b      	ldrb	r3, [r3, r2]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d13a      	bne.n	8008926 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2225      	movs	r2, #37	; 0x25
 80088b4:	2102      	movs	r1, #2
 80088b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2101      	movs	r1, #1
 80088ca:	438a      	bics	r2, r1
 80088cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	68b9      	ldr	r1, [r7, #8]
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 f8e3 	bl	8008aa0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d008      	beq.n	80088f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	210e      	movs	r1, #14
 80088ee:	430a      	orrs	r2, r1
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	e00f      	b.n	8008914 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2104      	movs	r1, #4
 8008900:	438a      	bics	r2, r1
 8008902:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	210a      	movs	r1, #10
 8008910:	430a      	orrs	r2, r1
 8008912:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2101      	movs	r1, #1
 8008920:	430a      	orrs	r2, r1
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e007      	b.n	8008936 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2224      	movs	r2, #36	; 0x24
 800892a:	2100      	movs	r1, #0
 800892c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800892e:	2317      	movs	r3, #23
 8008930:	18fb      	adds	r3, r7, r3
 8008932:	2202      	movs	r2, #2
 8008934:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8008936:	2317      	movs	r3, #23
 8008938:	18fb      	adds	r3, r7, r3
 800893a:	781b      	ldrb	r3, [r3, #0]
}
 800893c:	0018      	movs	r0, r3
 800893e:	46bd      	mov	sp, r7
 8008940:	b006      	add	sp, #24
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008960:	221c      	movs	r2, #28
 8008962:	4013      	ands	r3, r2
 8008964:	2204      	movs	r2, #4
 8008966:	409a      	lsls	r2, r3
 8008968:	0013      	movs	r3, r2
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4013      	ands	r3, r2
 800896e:	d026      	beq.n	80089be <HAL_DMA_IRQHandler+0x7a>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2204      	movs	r2, #4
 8008974:	4013      	ands	r3, r2
 8008976:	d022      	beq.n	80089be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2220      	movs	r2, #32
 8008980:	4013      	ands	r3, r2
 8008982:	d107      	bne.n	8008994 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2104      	movs	r1, #4
 8008990:	438a      	bics	r2, r1
 8008992:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008998:	221c      	movs	r2, #28
 800899a:	401a      	ands	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a0:	2104      	movs	r1, #4
 80089a2:	4091      	lsls	r1, r2
 80089a4:	000a      	movs	r2, r1
 80089a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d100      	bne.n	80089b2 <HAL_DMA_IRQHandler+0x6e>
 80089b0:	e071      	b.n	8008a96 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	0010      	movs	r0, r2
 80089ba:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80089bc:	e06b      	b.n	8008a96 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c2:	221c      	movs	r2, #28
 80089c4:	4013      	ands	r3, r2
 80089c6:	2202      	movs	r2, #2
 80089c8:	409a      	lsls	r2, r3
 80089ca:	0013      	movs	r3, r2
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4013      	ands	r3, r2
 80089d0:	d02d      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xea>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2202      	movs	r2, #2
 80089d6:	4013      	ands	r3, r2
 80089d8:	d029      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2220      	movs	r2, #32
 80089e2:	4013      	ands	r3, r2
 80089e4:	d10b      	bne.n	80089fe <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	210a      	movs	r1, #10
 80089f2:	438a      	bics	r2, r1
 80089f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2225      	movs	r2, #37	; 0x25
 80089fa:	2101      	movs	r1, #1
 80089fc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a02:	221c      	movs	r2, #28
 8008a04:	401a      	ands	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	2102      	movs	r1, #2
 8008a0c:	4091      	lsls	r1, r2
 8008a0e:	000a      	movs	r2, r1
 8008a10:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2224      	movs	r2, #36	; 0x24
 8008a16:	2100      	movs	r1, #0
 8008a18:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d039      	beq.n	8008a96 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	0010      	movs	r0, r2
 8008a2a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008a2c:	e033      	b.n	8008a96 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a32:	221c      	movs	r2, #28
 8008a34:	4013      	ands	r3, r2
 8008a36:	2208      	movs	r2, #8
 8008a38:	409a      	lsls	r2, r3
 8008a3a:	0013      	movs	r3, r2
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	d02a      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x154>
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2208      	movs	r2, #8
 8008a46:	4013      	ands	r3, r2
 8008a48:	d026      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	210e      	movs	r1, #14
 8008a56:	438a      	bics	r2, r1
 8008a58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5e:	221c      	movs	r2, #28
 8008a60:	401a      	ands	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	2101      	movs	r1, #1
 8008a68:	4091      	lsls	r1, r2
 8008a6a:	000a      	movs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2225      	movs	r2, #37	; 0x25
 8008a78:	2101      	movs	r1, #1
 8008a7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2224      	movs	r2, #36	; 0x24
 8008a80:	2100      	movs	r1, #0
 8008a82:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	0010      	movs	r0, r2
 8008a94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008a96:	46c0      	nop			; (mov r8, r8)
 8008a98:	46c0      	nop			; (mov r8, r8)
}
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b004      	add	sp, #16
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab2:	221c      	movs	r2, #28
 8008ab4:	401a      	ands	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aba:	2101      	movs	r1, #1
 8008abc:	4091      	lsls	r1, r2
 8008abe:	000a      	movs	r2, r1
 8008ac0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b10      	cmp	r3, #16
 8008ad0:	d108      	bne.n	8008ae4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008ae2:	e007      	b.n	8008af4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	60da      	str	r2, [r3, #12]
}
 8008af4:	46c0      	nop			; (mov r8, r8)
 8008af6:	46bd      	mov	sp, r7
 8008af8:	b004      	add	sp, #16
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8008b12:	e14f      	b.n	8008db4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2101      	movs	r1, #1
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	4091      	lsls	r1, r2
 8008b1e:	000a      	movs	r2, r1
 8008b20:	4013      	ands	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d100      	bne.n	8008b2c <HAL_GPIO_Init+0x30>
 8008b2a:	e140      	b.n	8008dae <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d00b      	beq.n	8008b4c <HAL_GPIO_Init+0x50>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d007      	beq.n	8008b4c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b40:	2b11      	cmp	r3, #17
 8008b42:	d003      	beq.n	8008b4c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2b12      	cmp	r3, #18
 8008b4a:	d130      	bne.n	8008bae <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	2203      	movs	r2, #3
 8008b58:	409a      	lsls	r2, r3
 8008b5a:	0013      	movs	r3, r2
 8008b5c:	43da      	mvns	r2, r3
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	4013      	ands	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	409a      	lsls	r2, r3
 8008b6e:	0013      	movs	r3, r2
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b82:	2201      	movs	r2, #1
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	409a      	lsls	r2, r3
 8008b88:	0013      	movs	r3, r2
 8008b8a:	43da      	mvns	r2, r3
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	4013      	ands	r3, r2
 8008b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	091b      	lsrs	r3, r3, #4
 8008b98:	2201      	movs	r2, #1
 8008b9a:	401a      	ands	r2, r3
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	409a      	lsls	r2, r3
 8008ba0:	0013      	movs	r3, r2
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	2203      	movs	r2, #3
 8008bba:	409a      	lsls	r2, r3
 8008bbc:	0013      	movs	r3, r2
 8008bbe:	43da      	mvns	r2, r3
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	409a      	lsls	r2, r3
 8008bd0:	0013      	movs	r3, r2
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d003      	beq.n	8008bee <HAL_GPIO_Init+0xf2>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2b12      	cmp	r3, #18
 8008bec:	d123      	bne.n	8008c36 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	08da      	lsrs	r2, r3, #3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3208      	adds	r2, #8
 8008bf6:	0092      	lsls	r2, r2, #2
 8008bf8:	58d3      	ldr	r3, [r2, r3]
 8008bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2207      	movs	r2, #7
 8008c00:	4013      	ands	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	220f      	movs	r2, #15
 8008c06:	409a      	lsls	r2, r3
 8008c08:	0013      	movs	r3, r2
 8008c0a:	43da      	mvns	r2, r3
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	691a      	ldr	r2, [r3, #16]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2107      	movs	r1, #7
 8008c1a:	400b      	ands	r3, r1
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	409a      	lsls	r2, r3
 8008c20:	0013      	movs	r3, r2
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	08da      	lsrs	r2, r3, #3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3208      	adds	r2, #8
 8008c30:	0092      	lsls	r2, r2, #2
 8008c32:	6939      	ldr	r1, [r7, #16]
 8008c34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	2203      	movs	r2, #3
 8008c42:	409a      	lsls	r2, r3
 8008c44:	0013      	movs	r3, r2
 8008c46:	43da      	mvns	r2, r3
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	2203      	movs	r2, #3
 8008c54:	401a      	ands	r2, r3
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	409a      	lsls	r2, r3
 8008c5c:	0013      	movs	r3, r2
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	2380      	movs	r3, #128	; 0x80
 8008c70:	055b      	lsls	r3, r3, #21
 8008c72:	4013      	ands	r3, r2
 8008c74:	d100      	bne.n	8008c78 <HAL_GPIO_Init+0x17c>
 8008c76:	e09a      	b.n	8008dae <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c78:	4b54      	ldr	r3, [pc, #336]	; (8008dcc <HAL_GPIO_Init+0x2d0>)
 8008c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c7c:	4b53      	ldr	r3, [pc, #332]	; (8008dcc <HAL_GPIO_Init+0x2d0>)
 8008c7e:	2101      	movs	r1, #1
 8008c80:	430a      	orrs	r2, r1
 8008c82:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c84:	4a52      	ldr	r2, [pc, #328]	; (8008dd0 <HAL_GPIO_Init+0x2d4>)
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	089b      	lsrs	r3, r3, #2
 8008c8a:	3302      	adds	r3, #2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	589b      	ldr	r3, [r3, r2]
 8008c90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2203      	movs	r2, #3
 8008c96:	4013      	ands	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	220f      	movs	r2, #15
 8008c9c:	409a      	lsls	r2, r3
 8008c9e:	0013      	movs	r3, r2
 8008ca0:	43da      	mvns	r2, r3
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	23a0      	movs	r3, #160	; 0xa0
 8008cac:	05db      	lsls	r3, r3, #23
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d019      	beq.n	8008ce6 <HAL_GPIO_Init+0x1ea>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a47      	ldr	r2, [pc, #284]	; (8008dd4 <HAL_GPIO_Init+0x2d8>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d013      	beq.n	8008ce2 <HAL_GPIO_Init+0x1e6>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a46      	ldr	r2, [pc, #280]	; (8008dd8 <HAL_GPIO_Init+0x2dc>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00d      	beq.n	8008cde <HAL_GPIO_Init+0x1e2>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a45      	ldr	r2, [pc, #276]	; (8008ddc <HAL_GPIO_Init+0x2e0>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d007      	beq.n	8008cda <HAL_GPIO_Init+0x1de>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a44      	ldr	r2, [pc, #272]	; (8008de0 <HAL_GPIO_Init+0x2e4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d101      	bne.n	8008cd6 <HAL_GPIO_Init+0x1da>
 8008cd2:	2305      	movs	r3, #5
 8008cd4:	e008      	b.n	8008ce8 <HAL_GPIO_Init+0x1ec>
 8008cd6:	2306      	movs	r3, #6
 8008cd8:	e006      	b.n	8008ce8 <HAL_GPIO_Init+0x1ec>
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e004      	b.n	8008ce8 <HAL_GPIO_Init+0x1ec>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e002      	b.n	8008ce8 <HAL_GPIO_Init+0x1ec>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e000      	b.n	8008ce8 <HAL_GPIO_Init+0x1ec>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	2103      	movs	r1, #3
 8008cec:	400a      	ands	r2, r1
 8008cee:	0092      	lsls	r2, r2, #2
 8008cf0:	4093      	lsls	r3, r2
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cf8:	4935      	ldr	r1, [pc, #212]	; (8008dd0 <HAL_GPIO_Init+0x2d4>)
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	089b      	lsrs	r3, r3, #2
 8008cfe:	3302      	adds	r3, #2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d06:	4b37      	ldr	r3, [pc, #220]	; (8008de4 <HAL_GPIO_Init+0x2e8>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	43da      	mvns	r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	4013      	ands	r3, r2
 8008d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	2380      	movs	r3, #128	; 0x80
 8008d1c:	025b      	lsls	r3, r3, #9
 8008d1e:	4013      	ands	r3, r2
 8008d20:	d003      	beq.n	8008d2a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008d2a:	4b2e      	ldr	r3, [pc, #184]	; (8008de4 <HAL_GPIO_Init+0x2e8>)
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8008d30:	4b2c      	ldr	r3, [pc, #176]	; (8008de4 <HAL_GPIO_Init+0x2e8>)
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	43da      	mvns	r2, r3
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	2380      	movs	r3, #128	; 0x80
 8008d46:	029b      	lsls	r3, r3, #10
 8008d48:	4013      	ands	r3, r2
 8008d4a:	d003      	beq.n	8008d54 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008d54:	4b23      	ldr	r3, [pc, #140]	; (8008de4 <HAL_GPIO_Init+0x2e8>)
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d5a:	4b22      	ldr	r3, [pc, #136]	; (8008de4 <HAL_GPIO_Init+0x2e8>)
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	43da      	mvns	r2, r3
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	4013      	ands	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	2380      	movs	r3, #128	; 0x80
 8008d70:	035b      	lsls	r3, r3, #13
 8008d72:	4013      	ands	r3, r2
 8008d74:	d003      	beq.n	8008d7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008d7e:	4b19      	ldr	r3, [pc, #100]	; (8008de4 <HAL_GPIO_Init+0x2e8>)
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8008d84:	4b17      	ldr	r3, [pc, #92]	; (8008de4 <HAL_GPIO_Init+0x2e8>)
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	43da      	mvns	r2, r3
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	4013      	ands	r3, r2
 8008d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	2380      	movs	r3, #128	; 0x80
 8008d9a:	039b      	lsls	r3, r3, #14
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008da8:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <HAL_GPIO_Init+0x2e8>)
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	3301      	adds	r3, #1
 8008db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	40da      	lsrs	r2, r3
 8008dbc:	1e13      	subs	r3, r2, #0
 8008dbe:	d000      	beq.n	8008dc2 <HAL_GPIO_Init+0x2c6>
 8008dc0:	e6a8      	b.n	8008b14 <HAL_GPIO_Init+0x18>
  }
}
 8008dc2:	46c0      	nop			; (mov r8, r8)
 8008dc4:	46c0      	nop			; (mov r8, r8)
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	b006      	add	sp, #24
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	40021000 	.word	0x40021000
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	50000400 	.word	0x50000400
 8008dd8:	50000800 	.word	0x50000800
 8008ddc:	50000c00 	.word	0x50000c00
 8008de0:	50001c00 	.word	0x50001c00
 8008de4:	40010400 	.word	0x40010400

08008de8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	0008      	movs	r0, r1
 8008df2:	0011      	movs	r1, r2
 8008df4:	1cbb      	adds	r3, r7, #2
 8008df6:	1c02      	adds	r2, r0, #0
 8008df8:	801a      	strh	r2, [r3, #0]
 8008dfa:	1c7b      	adds	r3, r7, #1
 8008dfc:	1c0a      	adds	r2, r1, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e00:	1c7b      	adds	r3, r7, #1
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d004      	beq.n	8008e12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e08:	1cbb      	adds	r3, r7, #2
 8008e0a:	881a      	ldrh	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8008e10:	e003      	b.n	8008e1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8008e12:	1cbb      	adds	r3, r7, #2
 8008e14:	881a      	ldrh	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008e1a:	46c0      	nop			; (mov r8, r8)
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	b002      	add	sp, #8
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	0002      	movs	r2, r0
 8008e2c:	1dbb      	adds	r3, r7, #6
 8008e2e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008e30:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	1dba      	adds	r2, r7, #6
 8008e36:	8812      	ldrh	r2, [r2, #0]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	d008      	beq.n	8008e4e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8008e3e:	1dba      	adds	r2, r7, #6
 8008e40:	8812      	ldrh	r2, [r2, #0]
 8008e42:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e44:	1dbb      	adds	r3, r7, #6
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f000 f807 	bl	8008e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8008e4e:	46c0      	nop			; (mov r8, r8)
 8008e50:	46bd      	mov	sp, r7
 8008e52:	b002      	add	sp, #8
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	46c0      	nop			; (mov r8, r8)
 8008e58:	40010400 	.word	0x40010400

08008e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	0002      	movs	r2, r0
 8008e64:	1dbb      	adds	r3, r7, #6
 8008e66:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008e68:	46c0      	nop			; (mov r8, r8)
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	b002      	add	sp, #8
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e082      	b.n	8008f88 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2241      	movs	r2, #65	; 0x41
 8008e86:	5c9b      	ldrb	r3, [r3, r2]
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d107      	bne.n	8008e9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2240      	movs	r2, #64	; 0x40
 8008e92:	2100      	movs	r1, #0
 8008e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f7fc ff11 	bl	8005cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2241      	movs	r2, #65	; 0x41
 8008ea2:	2124      	movs	r1, #36	; 0x24
 8008ea4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	438a      	bics	r2, r1
 8008eb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4934      	ldr	r1, [pc, #208]	; (8008f90 <HAL_I2C_Init+0x120>)
 8008ec0:	400a      	ands	r2, r1
 8008ec2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4931      	ldr	r1, [pc, #196]	; (8008f94 <HAL_I2C_Init+0x124>)
 8008ed0:	400a      	ands	r2, r1
 8008ed2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d108      	bne.n	8008eee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2180      	movs	r1, #128	; 0x80
 8008ee6:	0209      	lsls	r1, r1, #8
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	e007      	b.n	8008efe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2184      	movs	r1, #132	; 0x84
 8008ef8:	0209      	lsls	r1, r1, #8
 8008efa:	430a      	orrs	r2, r1
 8008efc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d104      	bne.n	8008f10 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2280      	movs	r2, #128	; 0x80
 8008f0c:	0112      	lsls	r2, r2, #4
 8008f0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	491f      	ldr	r1, [pc, #124]	; (8008f98 <HAL_I2C_Init+0x128>)
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	491a      	ldr	r1, [pc, #104]	; (8008f94 <HAL_I2C_Init+0x124>)
 8008f2c:	400a      	ands	r2, r1
 8008f2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691a      	ldr	r2, [r3, #16]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	0011      	movs	r1, r2
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	021a      	lsls	r2, r3, #8
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	69d9      	ldr	r1, [r3, #28]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1a      	ldr	r2, [r3, #32]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2101      	movs	r1, #1
 8008f66:	430a      	orrs	r2, r1
 8008f68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2241      	movs	r2, #65	; 0x41
 8008f74:	2120      	movs	r1, #32
 8008f76:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2242      	movs	r2, #66	; 0x42
 8008f82:	2100      	movs	r1, #0
 8008f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	0018      	movs	r0, r3
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	b002      	add	sp, #8
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	f0ffffff 	.word	0xf0ffffff
 8008f94:	ffff7fff 	.word	0xffff7fff
 8008f98:	02008000 	.word	0x02008000

08008f9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f9c:	b590      	push	{r4, r7, lr}
 8008f9e:	b089      	sub	sp, #36	; 0x24
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	000c      	movs	r4, r1
 8008fa6:	0010      	movs	r0, r2
 8008fa8:	0019      	movs	r1, r3
 8008faa:	230a      	movs	r3, #10
 8008fac:	18fb      	adds	r3, r7, r3
 8008fae:	1c22      	adds	r2, r4, #0
 8008fb0:	801a      	strh	r2, [r3, #0]
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	18fb      	adds	r3, r7, r3
 8008fb6:	1c02      	adds	r2, r0, #0
 8008fb8:	801a      	strh	r2, [r3, #0]
 8008fba:	1dbb      	adds	r3, r7, #6
 8008fbc:	1c0a      	adds	r2, r1, #0
 8008fbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2241      	movs	r2, #65	; 0x41
 8008fc4:	5c9b      	ldrb	r3, [r3, r2]
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b20      	cmp	r3, #32
 8008fca:	d000      	beq.n	8008fce <HAL_I2C_Mem_Write+0x32>
 8008fcc:	e10c      	b.n	80091e8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <HAL_I2C_Mem_Write+0x42>
 8008fd4:	232c      	movs	r3, #44	; 0x2c
 8008fd6:	18fb      	adds	r3, r7, r3
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d105      	bne.n	8008fea <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2280      	movs	r2, #128	; 0x80
 8008fe2:	0092      	lsls	r2, r2, #2
 8008fe4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e0ff      	b.n	80091ea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2240      	movs	r2, #64	; 0x40
 8008fee:	5c9b      	ldrb	r3, [r3, r2]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_I2C_Mem_Write+0x5c>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e0f8      	b.n	80091ea <HAL_I2C_Mem_Write+0x24e>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2240      	movs	r2, #64	; 0x40
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009000:	f7fe fdba 	bl	8007b78 <HAL_GetTick>
 8009004:	0003      	movs	r3, r0
 8009006:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	0219      	lsls	r1, r3, #8
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	2319      	movs	r3, #25
 8009014:	2201      	movs	r2, #1
 8009016:	f000 fb0b 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 800901a:	1e03      	subs	r3, r0, #0
 800901c:	d001      	beq.n	8009022 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e0e3      	b.n	80091ea <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2241      	movs	r2, #65	; 0x41
 8009026:	2121      	movs	r1, #33	; 0x21
 8009028:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2242      	movs	r2, #66	; 0x42
 800902e:	2140      	movs	r1, #64	; 0x40
 8009030:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800903c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	222c      	movs	r2, #44	; 0x2c
 8009042:	18ba      	adds	r2, r7, r2
 8009044:	8812      	ldrh	r2, [r2, #0]
 8009046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800904e:	1dbb      	adds	r3, r7, #6
 8009050:	881c      	ldrh	r4, [r3, #0]
 8009052:	2308      	movs	r3, #8
 8009054:	18fb      	adds	r3, r7, r3
 8009056:	881a      	ldrh	r2, [r3, #0]
 8009058:	230a      	movs	r3, #10
 800905a:	18fb      	adds	r3, r7, r3
 800905c:	8819      	ldrh	r1, [r3, #0]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	0023      	movs	r3, r4
 800906a:	f000 f9f9 	bl	8009460 <I2C_RequestMemoryWrite>
 800906e:	1e03      	subs	r3, r0, #0
 8009070:	d005      	beq.n	800907e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2240      	movs	r2, #64	; 0x40
 8009076:	2100      	movs	r1, #0
 8009078:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e0b5      	b.n	80091ea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009082:	b29b      	uxth	r3, r3
 8009084:	2bff      	cmp	r3, #255	; 0xff
 8009086:	d911      	bls.n	80090ac <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	22ff      	movs	r2, #255	; 0xff
 800908c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009092:	b2da      	uxtb	r2, r3
 8009094:	2380      	movs	r3, #128	; 0x80
 8009096:	045c      	lsls	r4, r3, #17
 8009098:	230a      	movs	r3, #10
 800909a:	18fb      	adds	r3, r7, r3
 800909c:	8819      	ldrh	r1, [r3, #0]
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	2300      	movs	r3, #0
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	0023      	movs	r3, r4
 80090a6:	f000 fbe3 	bl	8009870 <I2C_TransferConfig>
 80090aa:	e012      	b.n	80090d2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	2380      	movs	r3, #128	; 0x80
 80090be:	049c      	lsls	r4, r3, #18
 80090c0:	230a      	movs	r3, #10
 80090c2:	18fb      	adds	r3, r7, r3
 80090c4:	8819      	ldrh	r1, [r3, #0]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	2300      	movs	r3, #0
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	0023      	movs	r3, r4
 80090ce:	f000 fbcf 	bl	8009870 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	0018      	movs	r0, r3
 80090da:	f000 fae8 	bl	80096ae <I2C_WaitOnTXISFlagUntilTimeout>
 80090de:	1e03      	subs	r3, r0, #0
 80090e0:	d001      	beq.n	80090e6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e081      	b.n	80091ea <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	781a      	ldrb	r2, [r3, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f6:	1c5a      	adds	r2, r3, #1
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009100:	b29b      	uxth	r3, r3
 8009102:	3b01      	subs	r3, #1
 8009104:	b29a      	uxth	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910e:	3b01      	subs	r3, #1
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911a:	b29b      	uxth	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d03a      	beq.n	8009196 <HAL_I2C_Mem_Write+0x1fa>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009124:	2b00      	cmp	r3, #0
 8009126:	d136      	bne.n	8009196 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	0013      	movs	r3, r2
 8009132:	2200      	movs	r2, #0
 8009134:	2180      	movs	r1, #128	; 0x80
 8009136:	f000 fa7b 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 800913a:	1e03      	subs	r3, r0, #0
 800913c:	d001      	beq.n	8009142 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e053      	b.n	80091ea <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009146:	b29b      	uxth	r3, r3
 8009148:	2bff      	cmp	r3, #255	; 0xff
 800914a:	d911      	bls.n	8009170 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	22ff      	movs	r2, #255	; 0xff
 8009150:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009156:	b2da      	uxtb	r2, r3
 8009158:	2380      	movs	r3, #128	; 0x80
 800915a:	045c      	lsls	r4, r3, #17
 800915c:	230a      	movs	r3, #10
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	8819      	ldrh	r1, [r3, #0]
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	2300      	movs	r3, #0
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	0023      	movs	r3, r4
 800916a:	f000 fb81 	bl	8009870 <I2C_TransferConfig>
 800916e:	e012      	b.n	8009196 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009174:	b29a      	uxth	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917e:	b2da      	uxtb	r2, r3
 8009180:	2380      	movs	r3, #128	; 0x80
 8009182:	049c      	lsls	r4, r3, #18
 8009184:	230a      	movs	r3, #10
 8009186:	18fb      	adds	r3, r7, r3
 8009188:	8819      	ldrh	r1, [r3, #0]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	2300      	movs	r3, #0
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	0023      	movs	r3, r4
 8009192:	f000 fb6d 	bl	8009870 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800919a:	b29b      	uxth	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d198      	bne.n	80090d2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	0018      	movs	r0, r3
 80091a8:	f000 fac0 	bl	800972c <I2C_WaitOnSTOPFlagUntilTimeout>
 80091ac:	1e03      	subs	r3, r0, #0
 80091ae:	d001      	beq.n	80091b4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e01a      	b.n	80091ea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2220      	movs	r2, #32
 80091ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	490b      	ldr	r1, [pc, #44]	; (80091f4 <HAL_I2C_Mem_Write+0x258>)
 80091c8:	400a      	ands	r2, r1
 80091ca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2241      	movs	r2, #65	; 0x41
 80091d0:	2120      	movs	r1, #32
 80091d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2242      	movs	r2, #66	; 0x42
 80091d8:	2100      	movs	r1, #0
 80091da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2240      	movs	r2, #64	; 0x40
 80091e0:	2100      	movs	r1, #0
 80091e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	e000      	b.n	80091ea <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80091e8:	2302      	movs	r3, #2
  }
}
 80091ea:	0018      	movs	r0, r3
 80091ec:	46bd      	mov	sp, r7
 80091ee:	b007      	add	sp, #28
 80091f0:	bd90      	pop	{r4, r7, pc}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	fe00e800 	.word	0xfe00e800

080091f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091f8:	b590      	push	{r4, r7, lr}
 80091fa:	b089      	sub	sp, #36	; 0x24
 80091fc:	af02      	add	r7, sp, #8
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	000c      	movs	r4, r1
 8009202:	0010      	movs	r0, r2
 8009204:	0019      	movs	r1, r3
 8009206:	230a      	movs	r3, #10
 8009208:	18fb      	adds	r3, r7, r3
 800920a:	1c22      	adds	r2, r4, #0
 800920c:	801a      	strh	r2, [r3, #0]
 800920e:	2308      	movs	r3, #8
 8009210:	18fb      	adds	r3, r7, r3
 8009212:	1c02      	adds	r2, r0, #0
 8009214:	801a      	strh	r2, [r3, #0]
 8009216:	1dbb      	adds	r3, r7, #6
 8009218:	1c0a      	adds	r2, r1, #0
 800921a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2241      	movs	r2, #65	; 0x41
 8009220:	5c9b      	ldrb	r3, [r3, r2]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b20      	cmp	r3, #32
 8009226:	d000      	beq.n	800922a <HAL_I2C_Mem_Read+0x32>
 8009228:	e110      	b.n	800944c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <HAL_I2C_Mem_Read+0x42>
 8009230:	232c      	movs	r3, #44	; 0x2c
 8009232:	18fb      	adds	r3, r7, r3
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d105      	bne.n	8009246 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2280      	movs	r2, #128	; 0x80
 800923e:	0092      	lsls	r2, r2, #2
 8009240:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e103      	b.n	800944e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2240      	movs	r2, #64	; 0x40
 800924a:	5c9b      	ldrb	r3, [r3, r2]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_I2C_Mem_Read+0x5c>
 8009250:	2302      	movs	r3, #2
 8009252:	e0fc      	b.n	800944e <HAL_I2C_Mem_Read+0x256>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2240      	movs	r2, #64	; 0x40
 8009258:	2101      	movs	r1, #1
 800925a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800925c:	f7fe fc8c 	bl	8007b78 <HAL_GetTick>
 8009260:	0003      	movs	r3, r0
 8009262:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009264:	2380      	movs	r3, #128	; 0x80
 8009266:	0219      	lsls	r1, r3, #8
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	2319      	movs	r3, #25
 8009270:	2201      	movs	r2, #1
 8009272:	f000 f9dd 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8009276:	1e03      	subs	r3, r0, #0
 8009278:	d001      	beq.n	800927e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e0e7      	b.n	800944e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2241      	movs	r2, #65	; 0x41
 8009282:	2122      	movs	r1, #34	; 0x22
 8009284:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2242      	movs	r2, #66	; 0x42
 800928a:	2140      	movs	r1, #64	; 0x40
 800928c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	222c      	movs	r2, #44	; 0x2c
 800929e:	18ba      	adds	r2, r7, r2
 80092a0:	8812      	ldrh	r2, [r2, #0]
 80092a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092aa:	1dbb      	adds	r3, r7, #6
 80092ac:	881c      	ldrh	r4, [r3, #0]
 80092ae:	2308      	movs	r3, #8
 80092b0:	18fb      	adds	r3, r7, r3
 80092b2:	881a      	ldrh	r2, [r3, #0]
 80092b4:	230a      	movs	r3, #10
 80092b6:	18fb      	adds	r3, r7, r3
 80092b8:	8819      	ldrh	r1, [r3, #0]
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	0023      	movs	r3, r4
 80092c6:	f000 f92f 	bl	8009528 <I2C_RequestMemoryRead>
 80092ca:	1e03      	subs	r3, r0, #0
 80092cc:	d005      	beq.n	80092da <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2240      	movs	r2, #64	; 0x40
 80092d2:	2100      	movs	r1, #0
 80092d4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e0b9      	b.n	800944e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2bff      	cmp	r3, #255	; 0xff
 80092e2:	d911      	bls.n	8009308 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	22ff      	movs	r2, #255	; 0xff
 80092e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	2380      	movs	r3, #128	; 0x80
 80092f2:	045c      	lsls	r4, r3, #17
 80092f4:	230a      	movs	r3, #10
 80092f6:	18fb      	adds	r3, r7, r3
 80092f8:	8819      	ldrh	r1, [r3, #0]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	4b56      	ldr	r3, [pc, #344]	; (8009458 <HAL_I2C_Mem_Read+0x260>)
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	0023      	movs	r3, r4
 8009302:	f000 fab5 	bl	8009870 <I2C_TransferConfig>
 8009306:	e012      	b.n	800932e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800930c:	b29a      	uxth	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009316:	b2da      	uxtb	r2, r3
 8009318:	2380      	movs	r3, #128	; 0x80
 800931a:	049c      	lsls	r4, r3, #18
 800931c:	230a      	movs	r3, #10
 800931e:	18fb      	adds	r3, r7, r3
 8009320:	8819      	ldrh	r1, [r3, #0]
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	4b4c      	ldr	r3, [pc, #304]	; (8009458 <HAL_I2C_Mem_Read+0x260>)
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	0023      	movs	r3, r4
 800932a:	f000 faa1 	bl	8009870 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800932e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	0013      	movs	r3, r2
 8009338:	2200      	movs	r2, #0
 800933a:	2104      	movs	r1, #4
 800933c:	f000 f978 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8009340:	1e03      	subs	r3, r0, #0
 8009342:	d001      	beq.n	8009348 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e082      	b.n	800944e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	b2d2      	uxtb	r2, r2
 8009354:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009364:	3b01      	subs	r3, #1
 8009366:	b29a      	uxth	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009370:	b29b      	uxth	r3, r3
 8009372:	3b01      	subs	r3, #1
 8009374:	b29a      	uxth	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937e:	b29b      	uxth	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	d03a      	beq.n	80093fa <HAL_I2C_Mem_Read+0x202>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009388:	2b00      	cmp	r3, #0
 800938a:	d136      	bne.n	80093fa <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800938c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	0013      	movs	r3, r2
 8009396:	2200      	movs	r2, #0
 8009398:	2180      	movs	r1, #128	; 0x80
 800939a:	f000 f949 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 800939e:	1e03      	subs	r3, r0, #0
 80093a0:	d001      	beq.n	80093a6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e053      	b.n	800944e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2bff      	cmp	r3, #255	; 0xff
 80093ae:	d911      	bls.n	80093d4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	22ff      	movs	r2, #255	; 0xff
 80093b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	2380      	movs	r3, #128	; 0x80
 80093be:	045c      	lsls	r4, r3, #17
 80093c0:	230a      	movs	r3, #10
 80093c2:	18fb      	adds	r3, r7, r3
 80093c4:	8819      	ldrh	r1, [r3, #0]
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	2300      	movs	r3, #0
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	0023      	movs	r3, r4
 80093ce:	f000 fa4f 	bl	8009870 <I2C_TransferConfig>
 80093d2:	e012      	b.n	80093fa <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d8:	b29a      	uxth	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	2380      	movs	r3, #128	; 0x80
 80093e6:	049c      	lsls	r4, r3, #18
 80093e8:	230a      	movs	r3, #10
 80093ea:	18fb      	adds	r3, r7, r3
 80093ec:	8819      	ldrh	r1, [r3, #0]
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	2300      	movs	r3, #0
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	0023      	movs	r3, r4
 80093f6:	f000 fa3b 	bl	8009870 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fe:	b29b      	uxth	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d194      	bne.n	800932e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	0018      	movs	r0, r3
 800940c:	f000 f98e 	bl	800972c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009410:	1e03      	subs	r3, r0, #0
 8009412:	d001      	beq.n	8009418 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e01a      	b.n	800944e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2220      	movs	r2, #32
 800941e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	490c      	ldr	r1, [pc, #48]	; (800945c <HAL_I2C_Mem_Read+0x264>)
 800942c:	400a      	ands	r2, r1
 800942e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2241      	movs	r2, #65	; 0x41
 8009434:	2120      	movs	r1, #32
 8009436:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2242      	movs	r2, #66	; 0x42
 800943c:	2100      	movs	r1, #0
 800943e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2240      	movs	r2, #64	; 0x40
 8009444:	2100      	movs	r1, #0
 8009446:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	e000      	b.n	800944e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800944c:	2302      	movs	r3, #2
  }
}
 800944e:	0018      	movs	r0, r3
 8009450:	46bd      	mov	sp, r7
 8009452:	b007      	add	sp, #28
 8009454:	bd90      	pop	{r4, r7, pc}
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	80002400 	.word	0x80002400
 800945c:	fe00e800 	.word	0xfe00e800

08009460 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009460:	b5b0      	push	{r4, r5, r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af02      	add	r7, sp, #8
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	000c      	movs	r4, r1
 800946a:	0010      	movs	r0, r2
 800946c:	0019      	movs	r1, r3
 800946e:	250a      	movs	r5, #10
 8009470:	197b      	adds	r3, r7, r5
 8009472:	1c22      	adds	r2, r4, #0
 8009474:	801a      	strh	r2, [r3, #0]
 8009476:	2308      	movs	r3, #8
 8009478:	18fb      	adds	r3, r7, r3
 800947a:	1c02      	adds	r2, r0, #0
 800947c:	801a      	strh	r2, [r3, #0]
 800947e:	1dbb      	adds	r3, r7, #6
 8009480:	1c0a      	adds	r2, r1, #0
 8009482:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009484:	1dbb      	adds	r3, r7, #6
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	b2da      	uxtb	r2, r3
 800948a:	2380      	movs	r3, #128	; 0x80
 800948c:	045c      	lsls	r4, r3, #17
 800948e:	197b      	adds	r3, r7, r5
 8009490:	8819      	ldrh	r1, [r3, #0]
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	4b23      	ldr	r3, [pc, #140]	; (8009524 <I2C_RequestMemoryWrite+0xc4>)
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	0023      	movs	r3, r4
 800949a:	f000 f9e9 	bl	8009870 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800949e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a0:	6a39      	ldr	r1, [r7, #32]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	0018      	movs	r0, r3
 80094a6:	f000 f902 	bl	80096ae <I2C_WaitOnTXISFlagUntilTimeout>
 80094aa:	1e03      	subs	r3, r0, #0
 80094ac:	d001      	beq.n	80094b2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e033      	b.n	800951a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094b2:	1dbb      	adds	r3, r7, #6
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d107      	bne.n	80094ca <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094ba:	2308      	movs	r3, #8
 80094bc:	18fb      	adds	r3, r7, r3
 80094be:	881b      	ldrh	r3, [r3, #0]
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	629a      	str	r2, [r3, #40]	; 0x28
 80094c8:	e019      	b.n	80094fe <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80094ca:	2308      	movs	r3, #8
 80094cc:	18fb      	adds	r3, r7, r3
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	0a1b      	lsrs	r3, r3, #8
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094de:	6a39      	ldr	r1, [r7, #32]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	0018      	movs	r0, r3
 80094e4:	f000 f8e3 	bl	80096ae <I2C_WaitOnTXISFlagUntilTimeout>
 80094e8:	1e03      	subs	r3, r0, #0
 80094ea:	d001      	beq.n	80094f0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e014      	b.n	800951a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094f0:	2308      	movs	r3, #8
 80094f2:	18fb      	adds	r3, r7, r3
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80094fe:	6a3a      	ldr	r2, [r7, #32]
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	0013      	movs	r3, r2
 8009508:	2200      	movs	r2, #0
 800950a:	2180      	movs	r1, #128	; 0x80
 800950c:	f000 f890 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8009510:	1e03      	subs	r3, r0, #0
 8009512:	d001      	beq.n	8009518 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	0018      	movs	r0, r3
 800951c:	46bd      	mov	sp, r7
 800951e:	b004      	add	sp, #16
 8009520:	bdb0      	pop	{r4, r5, r7, pc}
 8009522:	46c0      	nop			; (mov r8, r8)
 8009524:	80002000 	.word	0x80002000

08009528 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009528:	b5b0      	push	{r4, r5, r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af02      	add	r7, sp, #8
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	000c      	movs	r4, r1
 8009532:	0010      	movs	r0, r2
 8009534:	0019      	movs	r1, r3
 8009536:	250a      	movs	r5, #10
 8009538:	197b      	adds	r3, r7, r5
 800953a:	1c22      	adds	r2, r4, #0
 800953c:	801a      	strh	r2, [r3, #0]
 800953e:	2308      	movs	r3, #8
 8009540:	18fb      	adds	r3, r7, r3
 8009542:	1c02      	adds	r2, r0, #0
 8009544:	801a      	strh	r2, [r3, #0]
 8009546:	1dbb      	adds	r3, r7, #6
 8009548:	1c0a      	adds	r2, r1, #0
 800954a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800954c:	1dbb      	adds	r3, r7, #6
 800954e:	881b      	ldrh	r3, [r3, #0]
 8009550:	b2da      	uxtb	r2, r3
 8009552:	197b      	adds	r3, r7, r5
 8009554:	8819      	ldrh	r1, [r3, #0]
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	4b23      	ldr	r3, [pc, #140]	; (80095e8 <I2C_RequestMemoryRead+0xc0>)
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	2300      	movs	r3, #0
 800955e:	f000 f987 	bl	8009870 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009564:	6a39      	ldr	r1, [r7, #32]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	0018      	movs	r0, r3
 800956a:	f000 f8a0 	bl	80096ae <I2C_WaitOnTXISFlagUntilTimeout>
 800956e:	1e03      	subs	r3, r0, #0
 8009570:	d001      	beq.n	8009576 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e033      	b.n	80095de <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009576:	1dbb      	adds	r3, r7, #6
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d107      	bne.n	800958e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800957e:	2308      	movs	r3, #8
 8009580:	18fb      	adds	r3, r7, r3
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	b2da      	uxtb	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	629a      	str	r2, [r3, #40]	; 0x28
 800958c:	e019      	b.n	80095c2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800958e:	2308      	movs	r3, #8
 8009590:	18fb      	adds	r3, r7, r3
 8009592:	881b      	ldrh	r3, [r3, #0]
 8009594:	0a1b      	lsrs	r3, r3, #8
 8009596:	b29b      	uxth	r3, r3
 8009598:	b2da      	uxtb	r2, r3
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095a2:	6a39      	ldr	r1, [r7, #32]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	0018      	movs	r0, r3
 80095a8:	f000 f881 	bl	80096ae <I2C_WaitOnTXISFlagUntilTimeout>
 80095ac:	1e03      	subs	r3, r0, #0
 80095ae:	d001      	beq.n	80095b4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e014      	b.n	80095de <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095b4:	2308      	movs	r3, #8
 80095b6:	18fb      	adds	r3, r7, r3
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80095c2:	6a3a      	ldr	r2, [r7, #32]
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	0013      	movs	r3, r2
 80095cc:	2200      	movs	r2, #0
 80095ce:	2140      	movs	r1, #64	; 0x40
 80095d0:	f000 f82e 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 80095d4:	1e03      	subs	r3, r0, #0
 80095d6:	d001      	beq.n	80095dc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e000      	b.n	80095de <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	0018      	movs	r0, r3
 80095e0:	46bd      	mov	sp, r7
 80095e2:	b004      	add	sp, #16
 80095e4:	bdb0      	pop	{r4, r5, r7, pc}
 80095e6:	46c0      	nop			; (mov r8, r8)
 80095e8:	80002000 	.word	0x80002000

080095ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	2202      	movs	r2, #2
 80095fc:	4013      	ands	r3, r2
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d103      	bne.n	800960a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2200      	movs	r2, #0
 8009608:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	2201      	movs	r2, #1
 8009612:	4013      	ands	r3, r2
 8009614:	2b01      	cmp	r3, #1
 8009616:	d007      	beq.n	8009628 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	699a      	ldr	r2, [r3, #24]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2101      	movs	r1, #1
 8009624:	430a      	orrs	r2, r1
 8009626:	619a      	str	r2, [r3, #24]
  }
}
 8009628:	46c0      	nop			; (mov r8, r8)
 800962a:	46bd      	mov	sp, r7
 800962c:	b002      	add	sp, #8
 800962e:	bd80      	pop	{r7, pc}

08009630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	603b      	str	r3, [r7, #0]
 800963c:	1dfb      	adds	r3, r7, #7
 800963e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009640:	e021      	b.n	8009686 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	3301      	adds	r3, #1
 8009646:	d01e      	beq.n	8009686 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009648:	f7fe fa96 	bl	8007b78 <HAL_GetTick>
 800964c:	0002      	movs	r2, r0
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d302      	bcc.n	800965e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d113      	bne.n	8009686 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009662:	2220      	movs	r2, #32
 8009664:	431a      	orrs	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2241      	movs	r2, #65	; 0x41
 800966e:	2120      	movs	r1, #32
 8009670:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2242      	movs	r2, #66	; 0x42
 8009676:	2100      	movs	r1, #0
 8009678:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2240      	movs	r2, #64	; 0x40
 800967e:	2100      	movs	r1, #0
 8009680:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e00f      	b.n	80096a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	4013      	ands	r3, r2
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	425a      	negs	r2, r3
 8009696:	4153      	adcs	r3, r2
 8009698:	b2db      	uxtb	r3, r3
 800969a:	001a      	movs	r2, r3
 800969c:	1dfb      	adds	r3, r7, #7
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d0ce      	beq.n	8009642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	0018      	movs	r0, r3
 80096a8:	46bd      	mov	sp, r7
 80096aa:	b004      	add	sp, #16
 80096ac:	bd80      	pop	{r7, pc}

080096ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096ba:	e02b      	b.n	8009714 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	68b9      	ldr	r1, [r7, #8]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	0018      	movs	r0, r3
 80096c4:	f000 f86e 	bl	80097a4 <I2C_IsAcknowledgeFailed>
 80096c8:	1e03      	subs	r3, r0, #0
 80096ca:	d001      	beq.n	80096d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e029      	b.n	8009724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	3301      	adds	r3, #1
 80096d4:	d01e      	beq.n	8009714 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096d6:	f7fe fa4f 	bl	8007b78 <HAL_GetTick>
 80096da:	0002      	movs	r2, r0
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d302      	bcc.n	80096ec <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d113      	bne.n	8009714 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f0:	2220      	movs	r2, #32
 80096f2:	431a      	orrs	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2241      	movs	r2, #65	; 0x41
 80096fc:	2120      	movs	r1, #32
 80096fe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2242      	movs	r2, #66	; 0x42
 8009704:	2100      	movs	r1, #0
 8009706:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2240      	movs	r2, #64	; 0x40
 800970c:	2100      	movs	r1, #0
 800970e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e007      	b.n	8009724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	2202      	movs	r2, #2
 800971c:	4013      	ands	r3, r2
 800971e:	2b02      	cmp	r3, #2
 8009720:	d1cc      	bne.n	80096bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	0018      	movs	r0, r3
 8009726:	46bd      	mov	sp, r7
 8009728:	b004      	add	sp, #16
 800972a:	bd80      	pop	{r7, pc}

0800972c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009738:	e028      	b.n	800978c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	68b9      	ldr	r1, [r7, #8]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	0018      	movs	r0, r3
 8009742:	f000 f82f 	bl	80097a4 <I2C_IsAcknowledgeFailed>
 8009746:	1e03      	subs	r3, r0, #0
 8009748:	d001      	beq.n	800974e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e026      	b.n	800979c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800974e:	f7fe fa13 	bl	8007b78 <HAL_GetTick>
 8009752:	0002      	movs	r2, r0
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	429a      	cmp	r2, r3
 800975c:	d302      	bcc.n	8009764 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d113      	bne.n	800978c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009768:	2220      	movs	r2, #32
 800976a:	431a      	orrs	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2241      	movs	r2, #65	; 0x41
 8009774:	2120      	movs	r1, #32
 8009776:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2242      	movs	r2, #66	; 0x42
 800977c:	2100      	movs	r1, #0
 800977e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2240      	movs	r2, #64	; 0x40
 8009784:	2100      	movs	r1, #0
 8009786:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e007      	b.n	800979c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	2220      	movs	r2, #32
 8009794:	4013      	ands	r3, r2
 8009796:	2b20      	cmp	r3, #32
 8009798:	d1cf      	bne.n	800973a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	0018      	movs	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	b004      	add	sp, #16
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	2210      	movs	r2, #16
 80097b8:	4013      	ands	r3, r2
 80097ba:	2b10      	cmp	r3, #16
 80097bc:	d151      	bne.n	8009862 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097be:	e021      	b.n	8009804 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	3301      	adds	r3, #1
 80097c4:	d01e      	beq.n	8009804 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097c6:	f7fe f9d7 	bl	8007b78 <HAL_GetTick>
 80097ca:	0002      	movs	r2, r0
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d302      	bcc.n	80097dc <I2C_IsAcknowledgeFailed+0x38>
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d113      	bne.n	8009804 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097e0:	2220      	movs	r2, #32
 80097e2:	431a      	orrs	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2241      	movs	r2, #65	; 0x41
 80097ec:	2120      	movs	r1, #32
 80097ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2242      	movs	r2, #66	; 0x42
 80097f4:	2100      	movs	r1, #0
 80097f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2240      	movs	r2, #64	; 0x40
 80097fc:	2100      	movs	r1, #0
 80097fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e02f      	b.n	8009864 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	2220      	movs	r2, #32
 800980c:	4013      	ands	r3, r2
 800980e:	2b20      	cmp	r3, #32
 8009810:	d1d6      	bne.n	80097c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2210      	movs	r2, #16
 8009818:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2220      	movs	r2, #32
 8009820:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	0018      	movs	r0, r3
 8009826:	f7ff fee1 	bl	80095ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	490d      	ldr	r1, [pc, #52]	; (800986c <I2C_IsAcknowledgeFailed+0xc8>)
 8009836:	400a      	ands	r2, r1
 8009838:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983e:	2204      	movs	r2, #4
 8009840:	431a      	orrs	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2241      	movs	r2, #65	; 0x41
 800984a:	2120      	movs	r1, #32
 800984c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2242      	movs	r2, #66	; 0x42
 8009852:	2100      	movs	r1, #0
 8009854:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2240      	movs	r2, #64	; 0x40
 800985a:	2100      	movs	r1, #0
 800985c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e000      	b.n	8009864 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	0018      	movs	r0, r3
 8009866:	46bd      	mov	sp, r7
 8009868:	b004      	add	sp, #16
 800986a:	bd80      	pop	{r7, pc}
 800986c:	fe00e800 	.word	0xfe00e800

08009870 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009870:	b590      	push	{r4, r7, lr}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	0008      	movs	r0, r1
 800987a:	0011      	movs	r1, r2
 800987c:	607b      	str	r3, [r7, #4]
 800987e:	240a      	movs	r4, #10
 8009880:	193b      	adds	r3, r7, r4
 8009882:	1c02      	adds	r2, r0, #0
 8009884:	801a      	strh	r2, [r3, #0]
 8009886:	2009      	movs	r0, #9
 8009888:	183b      	adds	r3, r7, r0
 800988a:	1c0a      	adds	r2, r1, #0
 800988c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	6a3a      	ldr	r2, [r7, #32]
 8009896:	0d51      	lsrs	r1, r2, #21
 8009898:	2280      	movs	r2, #128	; 0x80
 800989a:	00d2      	lsls	r2, r2, #3
 800989c:	400a      	ands	r2, r1
 800989e:	490e      	ldr	r1, [pc, #56]	; (80098d8 <I2C_TransferConfig+0x68>)
 80098a0:	430a      	orrs	r2, r1
 80098a2:	43d2      	mvns	r2, r2
 80098a4:	401a      	ands	r2, r3
 80098a6:	0011      	movs	r1, r2
 80098a8:	193b      	adds	r3, r7, r4
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	059b      	lsls	r3, r3, #22
 80098ae:	0d9a      	lsrs	r2, r3, #22
 80098b0:	183b      	adds	r3, r7, r0
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	0418      	lsls	r0, r3, #16
 80098b6:	23ff      	movs	r3, #255	; 0xff
 80098b8:	041b      	lsls	r3, r3, #16
 80098ba:	4003      	ands	r3, r0
 80098bc:	431a      	orrs	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	431a      	orrs	r2, r3
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	46bd      	mov	sp, r7
 80098d2:	b005      	add	sp, #20
 80098d4:	bd90      	pop	{r4, r7, pc}
 80098d6:	46c0      	nop			; (mov r8, r8)
 80098d8:	03ff63ff 	.word	0x03ff63ff

080098dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2241      	movs	r2, #65	; 0x41
 80098ea:	5c9b      	ldrb	r3, [r3, r2]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b20      	cmp	r3, #32
 80098f0:	d138      	bne.n	8009964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2240      	movs	r2, #64	; 0x40
 80098f6:	5c9b      	ldrb	r3, [r3, r2]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d101      	bne.n	8009900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80098fc:	2302      	movs	r3, #2
 80098fe:	e032      	b.n	8009966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2240      	movs	r2, #64	; 0x40
 8009904:	2101      	movs	r1, #1
 8009906:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2241      	movs	r2, #65	; 0x41
 800990c:	2124      	movs	r1, #36	; 0x24
 800990e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2101      	movs	r1, #1
 800991c:	438a      	bics	r2, r1
 800991e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4911      	ldr	r1, [pc, #68]	; (8009970 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800992c:	400a      	ands	r2, r1
 800992e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6819      	ldr	r1, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2101      	movs	r1, #1
 800994c:	430a      	orrs	r2, r1
 800994e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2241      	movs	r2, #65	; 0x41
 8009954:	2120      	movs	r1, #32
 8009956:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2240      	movs	r2, #64	; 0x40
 800995c:	2100      	movs	r1, #0
 800995e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	e000      	b.n	8009966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009964:	2302      	movs	r3, #2
  }
}
 8009966:	0018      	movs	r0, r3
 8009968:	46bd      	mov	sp, r7
 800996a:	b002      	add	sp, #8
 800996c:	bd80      	pop	{r7, pc}
 800996e:	46c0      	nop			; (mov r8, r8)
 8009970:	ffffefff 	.word	0xffffefff

08009974 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2241      	movs	r2, #65	; 0x41
 8009982:	5c9b      	ldrb	r3, [r3, r2]
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b20      	cmp	r3, #32
 8009988:	d139      	bne.n	80099fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2240      	movs	r2, #64	; 0x40
 800998e:	5c9b      	ldrb	r3, [r3, r2]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d101      	bne.n	8009998 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009994:	2302      	movs	r3, #2
 8009996:	e033      	b.n	8009a00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2240      	movs	r2, #64	; 0x40
 800999c:	2101      	movs	r1, #1
 800999e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2241      	movs	r2, #65	; 0x41
 80099a4:	2124      	movs	r1, #36	; 0x24
 80099a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2101      	movs	r1, #1
 80099b4:	438a      	bics	r2, r1
 80099b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4a11      	ldr	r2, [pc, #68]	; (8009a08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	021b      	lsls	r3, r3, #8
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2101      	movs	r1, #1
 80099e6:	430a      	orrs	r2, r1
 80099e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2241      	movs	r2, #65	; 0x41
 80099ee:	2120      	movs	r1, #32
 80099f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2240      	movs	r2, #64	; 0x40
 80099f6:	2100      	movs	r1, #0
 80099f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	e000      	b.n	8009a00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80099fe:	2302      	movs	r3, #2
  }
}
 8009a00:	0018      	movs	r0, r3
 8009a02:	46bd      	mov	sp, r7
 8009a04:	b004      	add	sp, #16
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	fffff0ff 	.word	0xfffff0ff

08009a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a0c:	b5b0      	push	{r4, r5, r7, lr}
 8009a0e:	b08a      	sub	sp, #40	; 0x28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d102      	bne.n	8009a20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	f000 fbaf 	bl	800a17e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a20:	4bcf      	ldr	r3, [pc, #828]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	220c      	movs	r2, #12
 8009a26:	4013      	ands	r3, r2
 8009a28:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a2a:	4bcd      	ldr	r3, [pc, #820]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	2380      	movs	r3, #128	; 0x80
 8009a30:	025b      	lsls	r3, r3, #9
 8009a32:	4013      	ands	r3, r2
 8009a34:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	d100      	bne.n	8009a42 <HAL_RCC_OscConfig+0x36>
 8009a40:	e07e      	b.n	8009b40 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d007      	beq.n	8009a58 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	2b0c      	cmp	r3, #12
 8009a4c:	d112      	bne.n	8009a74 <HAL_RCC_OscConfig+0x68>
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	2380      	movs	r3, #128	; 0x80
 8009a52:	025b      	lsls	r3, r3, #9
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d10d      	bne.n	8009a74 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a58:	4bc1      	ldr	r3, [pc, #772]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	2380      	movs	r3, #128	; 0x80
 8009a5e:	029b      	lsls	r3, r3, #10
 8009a60:	4013      	ands	r3, r2
 8009a62:	d100      	bne.n	8009a66 <HAL_RCC_OscConfig+0x5a>
 8009a64:	e06b      	b.n	8009b3e <HAL_RCC_OscConfig+0x132>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d167      	bne.n	8009b3e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	f000 fb85 	bl	800a17e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	2380      	movs	r3, #128	; 0x80
 8009a7a:	025b      	lsls	r3, r3, #9
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d107      	bne.n	8009a90 <HAL_RCC_OscConfig+0x84>
 8009a80:	4bb7      	ldr	r3, [pc, #732]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	4bb6      	ldr	r3, [pc, #728]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009a86:	2180      	movs	r1, #128	; 0x80
 8009a88:	0249      	lsls	r1, r1, #9
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	e027      	b.n	8009ae0 <HAL_RCC_OscConfig+0xd4>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	23a0      	movs	r3, #160	; 0xa0
 8009a96:	02db      	lsls	r3, r3, #11
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d10e      	bne.n	8009aba <HAL_RCC_OscConfig+0xae>
 8009a9c:	4bb0      	ldr	r3, [pc, #704]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	4baf      	ldr	r3, [pc, #700]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009aa2:	2180      	movs	r1, #128	; 0x80
 8009aa4:	02c9      	lsls	r1, r1, #11
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	4bad      	ldr	r3, [pc, #692]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	4bac      	ldr	r3, [pc, #688]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009ab0:	2180      	movs	r1, #128	; 0x80
 8009ab2:	0249      	lsls	r1, r1, #9
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	e012      	b.n	8009ae0 <HAL_RCC_OscConfig+0xd4>
 8009aba:	4ba9      	ldr	r3, [pc, #676]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	4ba8      	ldr	r3, [pc, #672]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009ac0:	49a8      	ldr	r1, [pc, #672]	; (8009d64 <HAL_RCC_OscConfig+0x358>)
 8009ac2:	400a      	ands	r2, r1
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	4ba6      	ldr	r3, [pc, #664]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	2380      	movs	r3, #128	; 0x80
 8009acc:	025b      	lsls	r3, r3, #9
 8009ace:	4013      	ands	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4ba2      	ldr	r3, [pc, #648]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	4ba1      	ldr	r3, [pc, #644]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009ada:	49a3      	ldr	r1, [pc, #652]	; (8009d68 <HAL_RCC_OscConfig+0x35c>)
 8009adc:	400a      	ands	r2, r1
 8009ade:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d015      	beq.n	8009b14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ae8:	f7fe f846 	bl	8007b78 <HAL_GetTick>
 8009aec:	0003      	movs	r3, r0
 8009aee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009af0:	e009      	b.n	8009b06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009af2:	f7fe f841 	bl	8007b78 <HAL_GetTick>
 8009af6:	0002      	movs	r2, r0
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	2b64      	cmp	r3, #100	; 0x64
 8009afe:	d902      	bls.n	8009b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b00:	2303      	movs	r3, #3
 8009b02:	f000 fb3c 	bl	800a17e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b06:	4b96      	ldr	r3, [pc, #600]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	2380      	movs	r3, #128	; 0x80
 8009b0c:	029b      	lsls	r3, r3, #10
 8009b0e:	4013      	ands	r3, r2
 8009b10:	d0ef      	beq.n	8009af2 <HAL_RCC_OscConfig+0xe6>
 8009b12:	e015      	b.n	8009b40 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b14:	f7fe f830 	bl	8007b78 <HAL_GetTick>
 8009b18:	0003      	movs	r3, r0
 8009b1a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b1c:	e008      	b.n	8009b30 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b1e:	f7fe f82b 	bl	8007b78 <HAL_GetTick>
 8009b22:	0002      	movs	r2, r0
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	2b64      	cmp	r3, #100	; 0x64
 8009b2a:	d901      	bls.n	8009b30 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e326      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b30:	4b8b      	ldr	r3, [pc, #556]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	2380      	movs	r3, #128	; 0x80
 8009b36:	029b      	lsls	r3, r3, #10
 8009b38:	4013      	ands	r3, r2
 8009b3a:	d1f0      	bne.n	8009b1e <HAL_RCC_OscConfig+0x112>
 8009b3c:	e000      	b.n	8009b40 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2202      	movs	r2, #2
 8009b46:	4013      	ands	r3, r2
 8009b48:	d100      	bne.n	8009b4c <HAL_RCC_OscConfig+0x140>
 8009b4a:	e08b      	b.n	8009c64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d005      	beq.n	8009b64 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	2b0c      	cmp	r3, #12
 8009b5c:	d13e      	bne.n	8009bdc <HAL_RCC_OscConfig+0x1d0>
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d13b      	bne.n	8009bdc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8009b64:	4b7e      	ldr	r3, [pc, #504]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2204      	movs	r2, #4
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	d004      	beq.n	8009b78 <HAL_RCC_OscConfig+0x16c>
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e302      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b78:	4b79      	ldr	r3, [pc, #484]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	4a7b      	ldr	r2, [pc, #492]	; (8009d6c <HAL_RCC_OscConfig+0x360>)
 8009b7e:	4013      	ands	r3, r2
 8009b80:	0019      	movs	r1, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	021a      	lsls	r2, r3, #8
 8009b88:	4b75      	ldr	r3, [pc, #468]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8009b8e:	4b74      	ldr	r3, [pc, #464]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2209      	movs	r2, #9
 8009b94:	4393      	bics	r3, r2
 8009b96:	0019      	movs	r1, r3
 8009b98:	4b71      	ldr	r3, [pc, #452]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	430a      	orrs	r2, r1
 8009b9e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009ba0:	f000 fc40 	bl	800a424 <HAL_RCC_GetSysClockFreq>
 8009ba4:	0001      	movs	r1, r0
 8009ba6:	4b6e      	ldr	r3, [pc, #440]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	091b      	lsrs	r3, r3, #4
 8009bac:	220f      	movs	r2, #15
 8009bae:	4013      	ands	r3, r2
 8009bb0:	4a6f      	ldr	r2, [pc, #444]	; (8009d70 <HAL_RCC_OscConfig+0x364>)
 8009bb2:	5cd3      	ldrb	r3, [r2, r3]
 8009bb4:	000a      	movs	r2, r1
 8009bb6:	40da      	lsrs	r2, r3
 8009bb8:	4b6e      	ldr	r3, [pc, #440]	; (8009d74 <HAL_RCC_OscConfig+0x368>)
 8009bba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8009bbc:	4b6e      	ldr	r3, [pc, #440]	; (8009d78 <HAL_RCC_OscConfig+0x36c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2513      	movs	r5, #19
 8009bc2:	197c      	adds	r4, r7, r5
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	f7fd ff91 	bl	8007aec <HAL_InitTick>
 8009bca:	0003      	movs	r3, r0
 8009bcc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8009bce:	197b      	adds	r3, r7, r5
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d046      	beq.n	8009c64 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8009bd6:	197b      	adds	r3, r7, r5
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	e2d0      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d027      	beq.n	8009c32 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8009be2:	4b5f      	ldr	r3, [pc, #380]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2209      	movs	r2, #9
 8009be8:	4393      	bics	r3, r2
 8009bea:	0019      	movs	r1, r3
 8009bec:	4b5c      	ldr	r3, [pc, #368]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bf4:	f7fd ffc0 	bl	8007b78 <HAL_GetTick>
 8009bf8:	0003      	movs	r3, r0
 8009bfa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bfc:	e008      	b.n	8009c10 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bfe:	f7fd ffbb 	bl	8007b78 <HAL_GetTick>
 8009c02:	0002      	movs	r2, r0
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d901      	bls.n	8009c10 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e2b6      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c10:	4b53      	ldr	r3, [pc, #332]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2204      	movs	r2, #4
 8009c16:	4013      	ands	r3, r2
 8009c18:	d0f1      	beq.n	8009bfe <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c1a:	4b51      	ldr	r3, [pc, #324]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	4a53      	ldr	r2, [pc, #332]	; (8009d6c <HAL_RCC_OscConfig+0x360>)
 8009c20:	4013      	ands	r3, r2
 8009c22:	0019      	movs	r1, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	021a      	lsls	r2, r3, #8
 8009c2a:	4b4d      	ldr	r3, [pc, #308]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	605a      	str	r2, [r3, #4]
 8009c30:	e018      	b.n	8009c64 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c32:	4b4b      	ldr	r3, [pc, #300]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	4b4a      	ldr	r3, [pc, #296]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009c38:	2101      	movs	r1, #1
 8009c3a:	438a      	bics	r2, r1
 8009c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c3e:	f7fd ff9b 	bl	8007b78 <HAL_GetTick>
 8009c42:	0003      	movs	r3, r0
 8009c44:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c46:	e008      	b.n	8009c5a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c48:	f7fd ff96 	bl	8007b78 <HAL_GetTick>
 8009c4c:	0002      	movs	r2, r0
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d901      	bls.n	8009c5a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e291      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c5a:	4b41      	ldr	r3, [pc, #260]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2204      	movs	r2, #4
 8009c60:	4013      	ands	r3, r2
 8009c62:	d1f1      	bne.n	8009c48 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2210      	movs	r2, #16
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	d100      	bne.n	8009c70 <HAL_RCC_OscConfig+0x264>
 8009c6e:	e0a1      	b.n	8009db4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d140      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009c76:	4b3a      	ldr	r3, [pc, #232]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	2380      	movs	r3, #128	; 0x80
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4013      	ands	r3, r2
 8009c80:	d005      	beq.n	8009c8e <HAL_RCC_OscConfig+0x282>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e277      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c8e:	4b34      	ldr	r3, [pc, #208]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	4a3a      	ldr	r2, [pc, #232]	; (8009d7c <HAL_RCC_OscConfig+0x370>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	0019      	movs	r1, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c9c:	4b30      	ldr	r3, [pc, #192]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009ca2:	4b2f      	ldr	r3, [pc, #188]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	021b      	lsls	r3, r3, #8
 8009ca8:	0a19      	lsrs	r1, r3, #8
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	061a      	lsls	r2, r3, #24
 8009cb0:	4b2b      	ldr	r3, [pc, #172]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	0b5b      	lsrs	r3, r3, #13
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	2280      	movs	r2, #128	; 0x80
 8009cc0:	0212      	lsls	r2, r2, #8
 8009cc2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009cc4:	4b26      	ldr	r3, [pc, #152]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	091b      	lsrs	r3, r3, #4
 8009cca:	210f      	movs	r1, #15
 8009ccc:	400b      	ands	r3, r1
 8009cce:	4928      	ldr	r1, [pc, #160]	; (8009d70 <HAL_RCC_OscConfig+0x364>)
 8009cd0:	5ccb      	ldrb	r3, [r1, r3]
 8009cd2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009cd4:	4b27      	ldr	r3, [pc, #156]	; (8009d74 <HAL_RCC_OscConfig+0x368>)
 8009cd6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8009cd8:	4b27      	ldr	r3, [pc, #156]	; (8009d78 <HAL_RCC_OscConfig+0x36c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2513      	movs	r5, #19
 8009cde:	197c      	adds	r4, r7, r5
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f7fd ff03 	bl	8007aec <HAL_InitTick>
 8009ce6:	0003      	movs	r3, r0
 8009ce8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8009cea:	197b      	adds	r3, r7, r5
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d060      	beq.n	8009db4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8009cf2:	197b      	adds	r3, r7, r5
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	e242      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d03f      	beq.n	8009d80 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009d00:	4b17      	ldr	r3, [pc, #92]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	4b16      	ldr	r3, [pc, #88]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009d06:	2180      	movs	r1, #128	; 0x80
 8009d08:	0049      	lsls	r1, r1, #1
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d0e:	f7fd ff33 	bl	8007b78 <HAL_GetTick>
 8009d12:	0003      	movs	r3, r0
 8009d14:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009d16:	e008      	b.n	8009d2a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d18:	f7fd ff2e 	bl	8007b78 <HAL_GetTick>
 8009d1c:	0002      	movs	r2, r0
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d901      	bls.n	8009d2a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e229      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009d2a:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	2380      	movs	r3, #128	; 0x80
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4013      	ands	r3, r2
 8009d34:	d0f0      	beq.n	8009d18 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d36:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	4a10      	ldr	r2, [pc, #64]	; (8009d7c <HAL_RCC_OscConfig+0x370>)
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	0019      	movs	r1, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d44:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009d46:	430a      	orrs	r2, r1
 8009d48:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d4a:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	021b      	lsls	r3, r3, #8
 8009d50:	0a19      	lsrs	r1, r3, #8
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	061a      	lsls	r2, r3, #24
 8009d58:	4b01      	ldr	r3, [pc, #4]	; (8009d60 <HAL_RCC_OscConfig+0x354>)
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	605a      	str	r2, [r3, #4]
 8009d5e:	e029      	b.n	8009db4 <HAL_RCC_OscConfig+0x3a8>
 8009d60:	40021000 	.word	0x40021000
 8009d64:	fffeffff 	.word	0xfffeffff
 8009d68:	fffbffff 	.word	0xfffbffff
 8009d6c:	ffffe0ff 	.word	0xffffe0ff
 8009d70:	0800f650 	.word	0x0800f650
 8009d74:	20000020 	.word	0x20000020
 8009d78:	20000024 	.word	0x20000024
 8009d7c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009d80:	4bbd      	ldr	r3, [pc, #756]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	4bbc      	ldr	r3, [pc, #752]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009d86:	49bd      	ldr	r1, [pc, #756]	; (800a07c <HAL_RCC_OscConfig+0x670>)
 8009d88:	400a      	ands	r2, r1
 8009d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d8c:	f7fd fef4 	bl	8007b78 <HAL_GetTick>
 8009d90:	0003      	movs	r3, r0
 8009d92:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009d94:	e008      	b.n	8009da8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d96:	f7fd feef 	bl	8007b78 <HAL_GetTick>
 8009d9a:	0002      	movs	r2, r0
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d901      	bls.n	8009da8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e1ea      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009da8:	4bb3      	ldr	r3, [pc, #716]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	2380      	movs	r3, #128	; 0x80
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4013      	ands	r3, r2
 8009db2:	d1f0      	bne.n	8009d96 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2208      	movs	r2, #8
 8009dba:	4013      	ands	r3, r2
 8009dbc:	d036      	beq.n	8009e2c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d019      	beq.n	8009dfa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dc6:	4bac      	ldr	r3, [pc, #688]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dca:	4bab      	ldr	r3, [pc, #684]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009dcc:	2101      	movs	r1, #1
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dd2:	f7fd fed1 	bl	8007b78 <HAL_GetTick>
 8009dd6:	0003      	movs	r3, r0
 8009dd8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009dda:	e008      	b.n	8009dee <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ddc:	f7fd fecc 	bl	8007b78 <HAL_GetTick>
 8009de0:	0002      	movs	r2, r0
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d901      	bls.n	8009dee <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e1c7      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009dee:	4ba2      	ldr	r3, [pc, #648]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df2:	2202      	movs	r2, #2
 8009df4:	4013      	ands	r3, r2
 8009df6:	d0f1      	beq.n	8009ddc <HAL_RCC_OscConfig+0x3d0>
 8009df8:	e018      	b.n	8009e2c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009dfa:	4b9f      	ldr	r3, [pc, #636]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dfe:	4b9e      	ldr	r3, [pc, #632]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009e00:	2101      	movs	r1, #1
 8009e02:	438a      	bics	r2, r1
 8009e04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e06:	f7fd feb7 	bl	8007b78 <HAL_GetTick>
 8009e0a:	0003      	movs	r3, r0
 8009e0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e0e:	e008      	b.n	8009e22 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e10:	f7fd feb2 	bl	8007b78 <HAL_GetTick>
 8009e14:	0002      	movs	r2, r0
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d901      	bls.n	8009e22 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	e1ad      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e22:	4b95      	ldr	r3, [pc, #596]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e26:	2202      	movs	r2, #2
 8009e28:	4013      	ands	r3, r2
 8009e2a:	d1f1      	bne.n	8009e10 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2204      	movs	r2, #4
 8009e32:	4013      	ands	r3, r2
 8009e34:	d100      	bne.n	8009e38 <HAL_RCC_OscConfig+0x42c>
 8009e36:	e0ae      	b.n	8009f96 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e38:	2027      	movs	r0, #39	; 0x27
 8009e3a:	183b      	adds	r3, r7, r0
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e40:	4b8d      	ldr	r3, [pc, #564]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e44:	2380      	movs	r3, #128	; 0x80
 8009e46:	055b      	lsls	r3, r3, #21
 8009e48:	4013      	ands	r3, r2
 8009e4a:	d109      	bne.n	8009e60 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e4c:	4b8a      	ldr	r3, [pc, #552]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e50:	4b89      	ldr	r3, [pc, #548]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009e52:	2180      	movs	r1, #128	; 0x80
 8009e54:	0549      	lsls	r1, r1, #21
 8009e56:	430a      	orrs	r2, r1
 8009e58:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8009e5a:	183b      	adds	r3, r7, r0
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e60:	4b87      	ldr	r3, [pc, #540]	; (800a080 <HAL_RCC_OscConfig+0x674>)
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	2380      	movs	r3, #128	; 0x80
 8009e66:	005b      	lsls	r3, r3, #1
 8009e68:	4013      	ands	r3, r2
 8009e6a:	d11a      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009e6c:	4b84      	ldr	r3, [pc, #528]	; (800a080 <HAL_RCC_OscConfig+0x674>)
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	4b83      	ldr	r3, [pc, #524]	; (800a080 <HAL_RCC_OscConfig+0x674>)
 8009e72:	2180      	movs	r1, #128	; 0x80
 8009e74:	0049      	lsls	r1, r1, #1
 8009e76:	430a      	orrs	r2, r1
 8009e78:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e7a:	f7fd fe7d 	bl	8007b78 <HAL_GetTick>
 8009e7e:	0003      	movs	r3, r0
 8009e80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e82:	e008      	b.n	8009e96 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e84:	f7fd fe78 	bl	8007b78 <HAL_GetTick>
 8009e88:	0002      	movs	r2, r0
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	2b64      	cmp	r3, #100	; 0x64
 8009e90:	d901      	bls.n	8009e96 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e173      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e96:	4b7a      	ldr	r3, [pc, #488]	; (800a080 <HAL_RCC_OscConfig+0x674>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	2380      	movs	r3, #128	; 0x80
 8009e9c:	005b      	lsls	r3, r3, #1
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	d0f0      	beq.n	8009e84 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689a      	ldr	r2, [r3, #8]
 8009ea6:	2380      	movs	r3, #128	; 0x80
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d107      	bne.n	8009ebe <HAL_RCC_OscConfig+0x4b2>
 8009eae:	4b72      	ldr	r3, [pc, #456]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009eb2:	4b71      	ldr	r3, [pc, #452]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009eb4:	2180      	movs	r1, #128	; 0x80
 8009eb6:	0049      	lsls	r1, r1, #1
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	651a      	str	r2, [r3, #80]	; 0x50
 8009ebc:	e031      	b.n	8009f22 <HAL_RCC_OscConfig+0x516>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10c      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x4d4>
 8009ec6:	4b6c      	ldr	r3, [pc, #432]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009eca:	4b6b      	ldr	r3, [pc, #428]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009ecc:	496b      	ldr	r1, [pc, #428]	; (800a07c <HAL_RCC_OscConfig+0x670>)
 8009ece:	400a      	ands	r2, r1
 8009ed0:	651a      	str	r2, [r3, #80]	; 0x50
 8009ed2:	4b69      	ldr	r3, [pc, #420]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009ed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ed6:	4b68      	ldr	r3, [pc, #416]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009ed8:	496a      	ldr	r1, [pc, #424]	; (800a084 <HAL_RCC_OscConfig+0x678>)
 8009eda:	400a      	ands	r2, r1
 8009edc:	651a      	str	r2, [r3, #80]	; 0x50
 8009ede:	e020      	b.n	8009f22 <HAL_RCC_OscConfig+0x516>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689a      	ldr	r2, [r3, #8]
 8009ee4:	23a0      	movs	r3, #160	; 0xa0
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d10e      	bne.n	8009f0a <HAL_RCC_OscConfig+0x4fe>
 8009eec:	4b62      	ldr	r3, [pc, #392]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ef0:	4b61      	ldr	r3, [pc, #388]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009ef2:	2180      	movs	r1, #128	; 0x80
 8009ef4:	00c9      	lsls	r1, r1, #3
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	651a      	str	r2, [r3, #80]	; 0x50
 8009efa:	4b5f      	ldr	r3, [pc, #380]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009efe:	4b5e      	ldr	r3, [pc, #376]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009f00:	2180      	movs	r1, #128	; 0x80
 8009f02:	0049      	lsls	r1, r1, #1
 8009f04:	430a      	orrs	r2, r1
 8009f06:	651a      	str	r2, [r3, #80]	; 0x50
 8009f08:	e00b      	b.n	8009f22 <HAL_RCC_OscConfig+0x516>
 8009f0a:	4b5b      	ldr	r3, [pc, #364]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f0e:	4b5a      	ldr	r3, [pc, #360]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009f10:	495a      	ldr	r1, [pc, #360]	; (800a07c <HAL_RCC_OscConfig+0x670>)
 8009f12:	400a      	ands	r2, r1
 8009f14:	651a      	str	r2, [r3, #80]	; 0x50
 8009f16:	4b58      	ldr	r3, [pc, #352]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f1a:	4b57      	ldr	r3, [pc, #348]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009f1c:	4959      	ldr	r1, [pc, #356]	; (800a084 <HAL_RCC_OscConfig+0x678>)
 8009f1e:	400a      	ands	r2, r1
 8009f20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d015      	beq.n	8009f56 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f2a:	f7fd fe25 	bl	8007b78 <HAL_GetTick>
 8009f2e:	0003      	movs	r3, r0
 8009f30:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f32:	e009      	b.n	8009f48 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f34:	f7fd fe20 	bl	8007b78 <HAL_GetTick>
 8009f38:	0002      	movs	r2, r0
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	4a52      	ldr	r2, [pc, #328]	; (800a088 <HAL_RCC_OscConfig+0x67c>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d901      	bls.n	8009f48 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e11a      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f48:	4b4b      	ldr	r3, [pc, #300]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f4c:	2380      	movs	r3, #128	; 0x80
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4013      	ands	r3, r2
 8009f52:	d0ef      	beq.n	8009f34 <HAL_RCC_OscConfig+0x528>
 8009f54:	e014      	b.n	8009f80 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f56:	f7fd fe0f 	bl	8007b78 <HAL_GetTick>
 8009f5a:	0003      	movs	r3, r0
 8009f5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f5e:	e009      	b.n	8009f74 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f60:	f7fd fe0a 	bl	8007b78 <HAL_GetTick>
 8009f64:	0002      	movs	r2, r0
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	4a47      	ldr	r2, [pc, #284]	; (800a088 <HAL_RCC_OscConfig+0x67c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d901      	bls.n	8009f74 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e104      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f74:	4b40      	ldr	r3, [pc, #256]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009f76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f78:	2380      	movs	r3, #128	; 0x80
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	d1ef      	bne.n	8009f60 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009f80:	2327      	movs	r3, #39	; 0x27
 8009f82:	18fb      	adds	r3, r7, r3
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d105      	bne.n	8009f96 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f8a:	4b3b      	ldr	r3, [pc, #236]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f8e:	4b3a      	ldr	r3, [pc, #232]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009f90:	493e      	ldr	r1, [pc, #248]	; (800a08c <HAL_RCC_OscConfig+0x680>)
 8009f92:	400a      	ands	r2, r1
 8009f94:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	d049      	beq.n	800a034 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d026      	beq.n	8009ff6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8009fa8:	4b33      	ldr	r3, [pc, #204]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	4b32      	ldr	r3, [pc, #200]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009fae:	2101      	movs	r1, #1
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	609a      	str	r2, [r3, #8]
 8009fb4:	4b30      	ldr	r3, [pc, #192]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fb8:	4b2f      	ldr	r3, [pc, #188]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009fba:	2101      	movs	r1, #1
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	635a      	str	r2, [r3, #52]	; 0x34
 8009fc0:	4b33      	ldr	r3, [pc, #204]	; (800a090 <HAL_RCC_OscConfig+0x684>)
 8009fc2:	6a1a      	ldr	r2, [r3, #32]
 8009fc4:	4b32      	ldr	r3, [pc, #200]	; (800a090 <HAL_RCC_OscConfig+0x684>)
 8009fc6:	2180      	movs	r1, #128	; 0x80
 8009fc8:	0189      	lsls	r1, r1, #6
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fce:	f7fd fdd3 	bl	8007b78 <HAL_GetTick>
 8009fd2:	0003      	movs	r3, r0
 8009fd4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009fd6:	e008      	b.n	8009fea <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fd8:	f7fd fdce 	bl	8007b78 <HAL_GetTick>
 8009fdc:	0002      	movs	r2, r0
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d901      	bls.n	8009fea <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e0c9      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009fea:	4b23      	ldr	r3, [pc, #140]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	2202      	movs	r2, #2
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	d0f1      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x5cc>
 8009ff4:	e01e      	b.n	800a034 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8009ff6:	4b20      	ldr	r3, [pc, #128]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009ff8:	689a      	ldr	r2, [r3, #8]
 8009ffa:	4b1f      	ldr	r3, [pc, #124]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	438a      	bics	r2, r1
 800a000:	609a      	str	r2, [r3, #8]
 800a002:	4b23      	ldr	r3, [pc, #140]	; (800a090 <HAL_RCC_OscConfig+0x684>)
 800a004:	6a1a      	ldr	r2, [r3, #32]
 800a006:	4b22      	ldr	r3, [pc, #136]	; (800a090 <HAL_RCC_OscConfig+0x684>)
 800a008:	4922      	ldr	r1, [pc, #136]	; (800a094 <HAL_RCC_OscConfig+0x688>)
 800a00a:	400a      	ands	r2, r1
 800a00c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a00e:	f7fd fdb3 	bl	8007b78 <HAL_GetTick>
 800a012:	0003      	movs	r3, r0
 800a014:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a018:	f7fd fdae 	bl	8007b78 <HAL_GetTick>
 800a01c:	0002      	movs	r2, r0
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e0a9      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a02a:	4b13      	ldr	r3, [pc, #76]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	2202      	movs	r2, #2
 800a030:	4013      	ands	r3, r2
 800a032:	d1f1      	bne.n	800a018 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d100      	bne.n	800a03e <HAL_RCC_OscConfig+0x632>
 800a03c:	e09e      	b.n	800a17c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	2b0c      	cmp	r3, #12
 800a042:	d100      	bne.n	800a046 <HAL_RCC_OscConfig+0x63a>
 800a044:	e077      	b.n	800a136 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d158      	bne.n	800a100 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a04e:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	4b09      	ldr	r3, [pc, #36]	; (800a078 <HAL_RCC_OscConfig+0x66c>)
 800a054:	4910      	ldr	r1, [pc, #64]	; (800a098 <HAL_RCC_OscConfig+0x68c>)
 800a056:	400a      	ands	r2, r1
 800a058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a05a:	f7fd fd8d 	bl	8007b78 <HAL_GetTick>
 800a05e:	0003      	movs	r3, r0
 800a060:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a062:	e01b      	b.n	800a09c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a064:	f7fd fd88 	bl	8007b78 <HAL_GetTick>
 800a068:	0002      	movs	r2, r0
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d914      	bls.n	800a09c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e083      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
 800a076:	46c0      	nop			; (mov r8, r8)
 800a078:	40021000 	.word	0x40021000
 800a07c:	fffffeff 	.word	0xfffffeff
 800a080:	40007000 	.word	0x40007000
 800a084:	fffffbff 	.word	0xfffffbff
 800a088:	00001388 	.word	0x00001388
 800a08c:	efffffff 	.word	0xefffffff
 800a090:	40010000 	.word	0x40010000
 800a094:	ffffdfff 	.word	0xffffdfff
 800a098:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a09c:	4b3a      	ldr	r3, [pc, #232]	; (800a188 <HAL_RCC_OscConfig+0x77c>)
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	2380      	movs	r3, #128	; 0x80
 800a0a2:	049b      	lsls	r3, r3, #18
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	d1dd      	bne.n	800a064 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0a8:	4b37      	ldr	r3, [pc, #220]	; (800a188 <HAL_RCC_OscConfig+0x77c>)
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	4a37      	ldr	r2, [pc, #220]	; (800a18c <HAL_RCC_OscConfig+0x780>)
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	0019      	movs	r1, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	4b31      	ldr	r3, [pc, #196]	; (800a188 <HAL_RCC_OscConfig+0x77c>)
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a0c8:	4b2f      	ldr	r3, [pc, #188]	; (800a188 <HAL_RCC_OscConfig+0x77c>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	4b2e      	ldr	r3, [pc, #184]	; (800a188 <HAL_RCC_OscConfig+0x77c>)
 800a0ce:	2180      	movs	r1, #128	; 0x80
 800a0d0:	0449      	lsls	r1, r1, #17
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0d6:	f7fd fd4f 	bl	8007b78 <HAL_GetTick>
 800a0da:	0003      	movs	r3, r0
 800a0dc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800a0de:	e008      	b.n	800a0f2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0e0:	f7fd fd4a 	bl	8007b78 <HAL_GetTick>
 800a0e4:	0002      	movs	r2, r0
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d901      	bls.n	800a0f2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e045      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800a0f2:	4b25      	ldr	r3, [pc, #148]	; (800a188 <HAL_RCC_OscConfig+0x77c>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	2380      	movs	r3, #128	; 0x80
 800a0f8:	049b      	lsls	r3, r3, #18
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	d0f0      	beq.n	800a0e0 <HAL_RCC_OscConfig+0x6d4>
 800a0fe:	e03d      	b.n	800a17c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a100:	4b21      	ldr	r3, [pc, #132]	; (800a188 <HAL_RCC_OscConfig+0x77c>)
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	4b20      	ldr	r3, [pc, #128]	; (800a188 <HAL_RCC_OscConfig+0x77c>)
 800a106:	4922      	ldr	r1, [pc, #136]	; (800a190 <HAL_RCC_OscConfig+0x784>)
 800a108:	400a      	ands	r2, r1
 800a10a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a10c:	f7fd fd34 	bl	8007b78 <HAL_GetTick>
 800a110:	0003      	movs	r3, r0
 800a112:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a114:	e008      	b.n	800a128 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a116:	f7fd fd2f 	bl	8007b78 <HAL_GetTick>
 800a11a:	0002      	movs	r2, r0
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	2b02      	cmp	r3, #2
 800a122:	d901      	bls.n	800a128 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e02a      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800a128:	4b17      	ldr	r3, [pc, #92]	; (800a188 <HAL_RCC_OscConfig+0x77c>)
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	2380      	movs	r3, #128	; 0x80
 800a12e:	049b      	lsls	r3, r3, #18
 800a130:	4013      	ands	r3, r2
 800a132:	d1f0      	bne.n	800a116 <HAL_RCC_OscConfig+0x70a>
 800a134:	e022      	b.n	800a17c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d101      	bne.n	800a142 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e01d      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a142:	4b11      	ldr	r3, [pc, #68]	; (800a188 <HAL_RCC_OscConfig+0x77c>)
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a148:	69fa      	ldr	r2, [r7, #28]
 800a14a:	2380      	movs	r3, #128	; 0x80
 800a14c:	025b      	lsls	r3, r3, #9
 800a14e:	401a      	ands	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	429a      	cmp	r2, r3
 800a156:	d10f      	bne.n	800a178 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a158:	69fa      	ldr	r2, [r7, #28]
 800a15a:	23f0      	movs	r3, #240	; 0xf0
 800a15c:	039b      	lsls	r3, r3, #14
 800a15e:	401a      	ands	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a164:	429a      	cmp	r2, r3
 800a166:	d107      	bne.n	800a178 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800a168:	69fa      	ldr	r2, [r7, #28]
 800a16a:	23c0      	movs	r3, #192	; 0xc0
 800a16c:	041b      	lsls	r3, r3, #16
 800a16e:	401a      	ands	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a174:	429a      	cmp	r2, r3
 800a176:	d001      	beq.n	800a17c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e000      	b.n	800a17e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	0018      	movs	r0, r3
 800a180:	46bd      	mov	sp, r7
 800a182:	b00a      	add	sp, #40	; 0x28
 800a184:	bdb0      	pop	{r4, r5, r7, pc}
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	40021000 	.word	0x40021000
 800a18c:	ff02ffff 	.word	0xff02ffff
 800a190:	feffffff 	.word	0xfeffffff

0800a194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a194:	b5b0      	push	{r4, r5, r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e128      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a1a8:	4b96      	ldr	r3, [pc, #600]	; (800a404 <HAL_RCC_ClockConfig+0x270>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d91e      	bls.n	800a1f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1b6:	4b93      	ldr	r3, [pc, #588]	; (800a404 <HAL_RCC_ClockConfig+0x270>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	4393      	bics	r3, r2
 800a1be:	0019      	movs	r1, r3
 800a1c0:	4b90      	ldr	r3, [pc, #576]	; (800a404 <HAL_RCC_ClockConfig+0x270>)
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a1c8:	f7fd fcd6 	bl	8007b78 <HAL_GetTick>
 800a1cc:	0003      	movs	r3, r0
 800a1ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1d0:	e009      	b.n	800a1e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1d2:	f7fd fcd1 	bl	8007b78 <HAL_GetTick>
 800a1d6:	0002      	movs	r2, r0
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	4a8a      	ldr	r2, [pc, #552]	; (800a408 <HAL_RCC_ClockConfig+0x274>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d901      	bls.n	800a1e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e109      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1e6:	4b87      	ldr	r3, [pc, #540]	; (800a404 <HAL_RCC_ClockConfig+0x270>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d1ee      	bne.n	800a1d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	d009      	beq.n	800a212 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1fe:	4b83      	ldr	r3, [pc, #524]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	22f0      	movs	r2, #240	; 0xf0
 800a204:	4393      	bics	r3, r2
 800a206:	0019      	movs	r1, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	689a      	ldr	r2, [r3, #8]
 800a20c:	4b7f      	ldr	r3, [pc, #508]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a20e:	430a      	orrs	r2, r1
 800a210:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2201      	movs	r2, #1
 800a218:	4013      	ands	r3, r2
 800a21a:	d100      	bne.n	800a21e <HAL_RCC_ClockConfig+0x8a>
 800a21c:	e089      	b.n	800a332 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	2b02      	cmp	r3, #2
 800a224:	d107      	bne.n	800a236 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a226:	4b79      	ldr	r3, [pc, #484]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	2380      	movs	r3, #128	; 0x80
 800a22c:	029b      	lsls	r3, r3, #10
 800a22e:	4013      	ands	r3, r2
 800a230:	d120      	bne.n	800a274 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e0e1      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d107      	bne.n	800a24e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a23e:	4b73      	ldr	r3, [pc, #460]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	2380      	movs	r3, #128	; 0x80
 800a244:	049b      	lsls	r3, r3, #18
 800a246:	4013      	ands	r3, r2
 800a248:	d114      	bne.n	800a274 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e0d5      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d106      	bne.n	800a264 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a256:	4b6d      	ldr	r3, [pc, #436]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2204      	movs	r2, #4
 800a25c:	4013      	ands	r3, r2
 800a25e:	d109      	bne.n	800a274 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e0ca      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a264:	4b69      	ldr	r3, [pc, #420]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	2380      	movs	r3, #128	; 0x80
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4013      	ands	r3, r2
 800a26e:	d101      	bne.n	800a274 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e0c2      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a274:	4b65      	ldr	r3, [pc, #404]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	2203      	movs	r2, #3
 800a27a:	4393      	bics	r3, r2
 800a27c:	0019      	movs	r1, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	4b62      	ldr	r3, [pc, #392]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a284:	430a      	orrs	r2, r1
 800a286:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a288:	f7fd fc76 	bl	8007b78 <HAL_GetTick>
 800a28c:	0003      	movs	r3, r0
 800a28e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	2b02      	cmp	r3, #2
 800a296:	d111      	bne.n	800a2bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a298:	e009      	b.n	800a2ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a29a:	f7fd fc6d 	bl	8007b78 <HAL_GetTick>
 800a29e:	0002      	movs	r2, r0
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	4a58      	ldr	r2, [pc, #352]	; (800a408 <HAL_RCC_ClockConfig+0x274>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d901      	bls.n	800a2ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e0a5      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a2ae:	4b57      	ldr	r3, [pc, #348]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	220c      	movs	r2, #12
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	2b08      	cmp	r3, #8
 800a2b8:	d1ef      	bne.n	800a29a <HAL_RCC_ClockConfig+0x106>
 800a2ba:	e03a      	b.n	800a332 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	d111      	bne.n	800a2e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2c4:	e009      	b.n	800a2da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2c6:	f7fd fc57 	bl	8007b78 <HAL_GetTick>
 800a2ca:	0002      	movs	r2, r0
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	4a4d      	ldr	r2, [pc, #308]	; (800a408 <HAL_RCC_ClockConfig+0x274>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d901      	bls.n	800a2da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	e08f      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2da:	4b4c      	ldr	r3, [pc, #304]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	220c      	movs	r2, #12
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	2b0c      	cmp	r3, #12
 800a2e4:	d1ef      	bne.n	800a2c6 <HAL_RCC_ClockConfig+0x132>
 800a2e6:	e024      	b.n	800a332 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d11b      	bne.n	800a328 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a2f0:	e009      	b.n	800a306 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2f2:	f7fd fc41 	bl	8007b78 <HAL_GetTick>
 800a2f6:	0002      	movs	r2, r0
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	4a42      	ldr	r2, [pc, #264]	; (800a408 <HAL_RCC_ClockConfig+0x274>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d901      	bls.n	800a306 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800a302:	2303      	movs	r3, #3
 800a304:	e079      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a306:	4b41      	ldr	r3, [pc, #260]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	220c      	movs	r2, #12
 800a30c:	4013      	ands	r3, r2
 800a30e:	2b04      	cmp	r3, #4
 800a310:	d1ef      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0x15e>
 800a312:	e00e      	b.n	800a332 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a314:	f7fd fc30 	bl	8007b78 <HAL_GetTick>
 800a318:	0002      	movs	r2, r0
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	4a3a      	ldr	r2, [pc, #232]	; (800a408 <HAL_RCC_ClockConfig+0x274>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d901      	bls.n	800a328 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e068      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a328:	4b38      	ldr	r3, [pc, #224]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	220c      	movs	r2, #12
 800a32e:	4013      	ands	r3, r2
 800a330:	d1f0      	bne.n	800a314 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a332:	4b34      	ldr	r3, [pc, #208]	; (800a404 <HAL_RCC_ClockConfig+0x270>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2201      	movs	r2, #1
 800a338:	4013      	ands	r3, r2
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d21e      	bcs.n	800a37e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a340:	4b30      	ldr	r3, [pc, #192]	; (800a404 <HAL_RCC_ClockConfig+0x270>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2201      	movs	r2, #1
 800a346:	4393      	bics	r3, r2
 800a348:	0019      	movs	r1, r3
 800a34a:	4b2e      	ldr	r3, [pc, #184]	; (800a404 <HAL_RCC_ClockConfig+0x270>)
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	430a      	orrs	r2, r1
 800a350:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a352:	f7fd fc11 	bl	8007b78 <HAL_GetTick>
 800a356:	0003      	movs	r3, r0
 800a358:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a35a:	e009      	b.n	800a370 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a35c:	f7fd fc0c 	bl	8007b78 <HAL_GetTick>
 800a360:	0002      	movs	r2, r0
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	4a28      	ldr	r2, [pc, #160]	; (800a408 <HAL_RCC_ClockConfig+0x274>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d901      	bls.n	800a370 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e044      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a370:	4b24      	ldr	r3, [pc, #144]	; (800a404 <HAL_RCC_ClockConfig+0x270>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2201      	movs	r2, #1
 800a376:	4013      	ands	r3, r2
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d1ee      	bne.n	800a35c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2204      	movs	r2, #4
 800a384:	4013      	ands	r3, r2
 800a386:	d009      	beq.n	800a39c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a388:	4b20      	ldr	r3, [pc, #128]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	4a20      	ldr	r2, [pc, #128]	; (800a410 <HAL_RCC_ClockConfig+0x27c>)
 800a38e:	4013      	ands	r3, r2
 800a390:	0019      	movs	r1, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	4b1d      	ldr	r3, [pc, #116]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a398:	430a      	orrs	r2, r1
 800a39a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2208      	movs	r2, #8
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	d00a      	beq.n	800a3bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a3a6:	4b19      	ldr	r3, [pc, #100]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	4a1a      	ldr	r2, [pc, #104]	; (800a414 <HAL_RCC_ClockConfig+0x280>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	0019      	movs	r1, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	00da      	lsls	r2, r3, #3
 800a3b6:	4b15      	ldr	r3, [pc, #84]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a3bc:	f000 f832 	bl	800a424 <HAL_RCC_GetSysClockFreq>
 800a3c0:	0001      	movs	r1, r0
 800a3c2:	4b12      	ldr	r3, [pc, #72]	; (800a40c <HAL_RCC_ClockConfig+0x278>)
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	091b      	lsrs	r3, r3, #4
 800a3c8:	220f      	movs	r2, #15
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	4a12      	ldr	r2, [pc, #72]	; (800a418 <HAL_RCC_ClockConfig+0x284>)
 800a3ce:	5cd3      	ldrb	r3, [r2, r3]
 800a3d0:	000a      	movs	r2, r1
 800a3d2:	40da      	lsrs	r2, r3
 800a3d4:	4b11      	ldr	r3, [pc, #68]	; (800a41c <HAL_RCC_ClockConfig+0x288>)
 800a3d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a3d8:	4b11      	ldr	r3, [pc, #68]	; (800a420 <HAL_RCC_ClockConfig+0x28c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	250b      	movs	r5, #11
 800a3de:	197c      	adds	r4, r7, r5
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	f7fd fb83 	bl	8007aec <HAL_InitTick>
 800a3e6:	0003      	movs	r3, r0
 800a3e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800a3ea:	197b      	adds	r3, r7, r5
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800a3f2:	197b      	adds	r3, r7, r5
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	e000      	b.n	800a3fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	b004      	add	sp, #16
 800a400:	bdb0      	pop	{r4, r5, r7, pc}
 800a402:	46c0      	nop			; (mov r8, r8)
 800a404:	40022000 	.word	0x40022000
 800a408:	00001388 	.word	0x00001388
 800a40c:	40021000 	.word	0x40021000
 800a410:	fffff8ff 	.word	0xfffff8ff
 800a414:	ffffc7ff 	.word	0xffffc7ff
 800a418:	0800f650 	.word	0x0800f650
 800a41c:	20000020 	.word	0x20000020
 800a420:	20000024 	.word	0x20000024

0800a424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a424:	b5b0      	push	{r4, r5, r7, lr}
 800a426:	b08e      	sub	sp, #56	; 0x38
 800a428:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800a42a:	4b4c      	ldr	r3, [pc, #304]	; (800a55c <HAL_RCC_GetSysClockFreq+0x138>)
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a432:	230c      	movs	r3, #12
 800a434:	4013      	ands	r3, r2
 800a436:	2b0c      	cmp	r3, #12
 800a438:	d014      	beq.n	800a464 <HAL_RCC_GetSysClockFreq+0x40>
 800a43a:	d900      	bls.n	800a43e <HAL_RCC_GetSysClockFreq+0x1a>
 800a43c:	e07b      	b.n	800a536 <HAL_RCC_GetSysClockFreq+0x112>
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d002      	beq.n	800a448 <HAL_RCC_GetSysClockFreq+0x24>
 800a442:	2b08      	cmp	r3, #8
 800a444:	d00b      	beq.n	800a45e <HAL_RCC_GetSysClockFreq+0x3a>
 800a446:	e076      	b.n	800a536 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a448:	4b44      	ldr	r3, [pc, #272]	; (800a55c <HAL_RCC_GetSysClockFreq+0x138>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2210      	movs	r2, #16
 800a44e:	4013      	ands	r3, r2
 800a450:	d002      	beq.n	800a458 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800a452:	4b43      	ldr	r3, [pc, #268]	; (800a560 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a454:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800a456:	e07c      	b.n	800a552 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800a458:	4b42      	ldr	r3, [pc, #264]	; (800a564 <HAL_RCC_GetSysClockFreq+0x140>)
 800a45a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a45c:	e079      	b.n	800a552 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a45e:	4b42      	ldr	r3, [pc, #264]	; (800a568 <HAL_RCC_GetSysClockFreq+0x144>)
 800a460:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a462:	e076      	b.n	800a552 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	0c9a      	lsrs	r2, r3, #18
 800a468:	230f      	movs	r3, #15
 800a46a:	401a      	ands	r2, r3
 800a46c:	4b3f      	ldr	r3, [pc, #252]	; (800a56c <HAL_RCC_GetSysClockFreq+0x148>)
 800a46e:	5c9b      	ldrb	r3, [r3, r2]
 800a470:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	0d9a      	lsrs	r2, r3, #22
 800a476:	2303      	movs	r3, #3
 800a478:	4013      	ands	r3, r2
 800a47a:	3301      	adds	r3, #1
 800a47c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a47e:	4b37      	ldr	r3, [pc, #220]	; (800a55c <HAL_RCC_GetSysClockFreq+0x138>)
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	2380      	movs	r3, #128	; 0x80
 800a484:	025b      	lsls	r3, r3, #9
 800a486:	4013      	ands	r3, r2
 800a488:	d01a      	beq.n	800a4c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48c:	61bb      	str	r3, [r7, #24]
 800a48e:	2300      	movs	r3, #0
 800a490:	61fb      	str	r3, [r7, #28]
 800a492:	4a35      	ldr	r2, [pc, #212]	; (800a568 <HAL_RCC_GetSysClockFreq+0x144>)
 800a494:	2300      	movs	r3, #0
 800a496:	69b8      	ldr	r0, [r7, #24]
 800a498:	69f9      	ldr	r1, [r7, #28]
 800a49a:	f7f5 ff59 	bl	8000350 <__aeabi_lmul>
 800a49e:	0002      	movs	r2, r0
 800a4a0:	000b      	movs	r3, r1
 800a4a2:	0010      	movs	r0, r2
 800a4a4:	0019      	movs	r1, r3
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	613b      	str	r3, [r7, #16]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	f7f5 ff2d 	bl	8000310 <__aeabi_uldivmod>
 800a4b6:	0002      	movs	r2, r0
 800a4b8:	000b      	movs	r3, r1
 800a4ba:	0013      	movs	r3, r2
 800a4bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a4be:	e037      	b.n	800a530 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a4c0:	4b26      	ldr	r3, [pc, #152]	; (800a55c <HAL_RCC_GetSysClockFreq+0x138>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2210      	movs	r2, #16
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	d01a      	beq.n	800a500 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	60bb      	str	r3, [r7, #8]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	60fb      	str	r3, [r7, #12]
 800a4d2:	4a23      	ldr	r2, [pc, #140]	; (800a560 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	68b8      	ldr	r0, [r7, #8]
 800a4d8:	68f9      	ldr	r1, [r7, #12]
 800a4da:	f7f5 ff39 	bl	8000350 <__aeabi_lmul>
 800a4de:	0002      	movs	r2, r0
 800a4e0:	000b      	movs	r3, r1
 800a4e2:	0010      	movs	r0, r2
 800a4e4:	0019      	movs	r1, r3
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	603b      	str	r3, [r7, #0]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	607b      	str	r3, [r7, #4]
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f7f5 ff0d 	bl	8000310 <__aeabi_uldivmod>
 800a4f6:	0002      	movs	r2, r0
 800a4f8:	000b      	movs	r3, r1
 800a4fa:	0013      	movs	r3, r2
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a4fe:	e017      	b.n	800a530 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	0018      	movs	r0, r3
 800a504:	2300      	movs	r3, #0
 800a506:	0019      	movs	r1, r3
 800a508:	4a16      	ldr	r2, [pc, #88]	; (800a564 <HAL_RCC_GetSysClockFreq+0x140>)
 800a50a:	2300      	movs	r3, #0
 800a50c:	f7f5 ff20 	bl	8000350 <__aeabi_lmul>
 800a510:	0002      	movs	r2, r0
 800a512:	000b      	movs	r3, r1
 800a514:	0010      	movs	r0, r2
 800a516:	0019      	movs	r1, r3
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	001c      	movs	r4, r3
 800a51c:	2300      	movs	r3, #0
 800a51e:	001d      	movs	r5, r3
 800a520:	0022      	movs	r2, r4
 800a522:	002b      	movs	r3, r5
 800a524:	f7f5 fef4 	bl	8000310 <__aeabi_uldivmod>
 800a528:	0002      	movs	r2, r0
 800a52a:	000b      	movs	r3, r1
 800a52c:	0013      	movs	r3, r2
 800a52e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800a530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a532:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a534:	e00d      	b.n	800a552 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a536:	4b09      	ldr	r3, [pc, #36]	; (800a55c <HAL_RCC_GetSysClockFreq+0x138>)
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	0b5b      	lsrs	r3, r3, #13
 800a53c:	2207      	movs	r2, #7
 800a53e:	4013      	ands	r3, r2
 800a540:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	3301      	adds	r3, #1
 800a546:	2280      	movs	r2, #128	; 0x80
 800a548:	0212      	lsls	r2, r2, #8
 800a54a:	409a      	lsls	r2, r3
 800a54c:	0013      	movs	r3, r2
 800a54e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800a550:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800a554:	0018      	movs	r0, r3
 800a556:	46bd      	mov	sp, r7
 800a558:	b00e      	add	sp, #56	; 0x38
 800a55a:	bdb0      	pop	{r4, r5, r7, pc}
 800a55c:	40021000 	.word	0x40021000
 800a560:	003d0900 	.word	0x003d0900
 800a564:	00f42400 	.word	0x00f42400
 800a568:	007a1200 	.word	0x007a1200
 800a56c:	0800f668 	.word	0x0800f668

0800a570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a574:	4b02      	ldr	r3, [pc, #8]	; (800a580 <HAL_RCC_GetHCLKFreq+0x10>)
 800a576:	681b      	ldr	r3, [r3, #0]
}
 800a578:	0018      	movs	r0, r3
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	46c0      	nop			; (mov r8, r8)
 800a580:	20000020 	.word	0x20000020

0800a584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a588:	f7ff fff2 	bl	800a570 <HAL_RCC_GetHCLKFreq>
 800a58c:	0001      	movs	r1, r0
 800a58e:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	0a1b      	lsrs	r3, r3, #8
 800a594:	2207      	movs	r2, #7
 800a596:	4013      	ands	r3, r2
 800a598:	4a04      	ldr	r2, [pc, #16]	; (800a5ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800a59a:	5cd3      	ldrb	r3, [r2, r3]
 800a59c:	40d9      	lsrs	r1, r3
 800a59e:	000b      	movs	r3, r1
}
 800a5a0:	0018      	movs	r0, r3
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	46c0      	nop			; (mov r8, r8)
 800a5a8:	40021000 	.word	0x40021000
 800a5ac:	0800f660 	.word	0x0800f660

0800a5b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a5b4:	f7ff ffdc 	bl	800a570 <HAL_RCC_GetHCLKFreq>
 800a5b8:	0001      	movs	r1, r0
 800a5ba:	4b06      	ldr	r3, [pc, #24]	; (800a5d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	0adb      	lsrs	r3, r3, #11
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	4a04      	ldr	r2, [pc, #16]	; (800a5d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a5c6:	5cd3      	ldrb	r3, [r2, r3]
 800a5c8:	40d9      	lsrs	r1, r3
 800a5ca:	000b      	movs	r3, r1
}
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	46c0      	nop			; (mov r8, r8)
 800a5d4:	40021000 	.word	0x40021000
 800a5d8:	0800f660 	.word	0x0800f660

0800a5dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800a5e4:	2317      	movs	r3, #23
 800a5e6:	18fb      	adds	r3, r7, r3
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	d106      	bne.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	2380      	movs	r3, #128	; 0x80
 800a5fc:	011b      	lsls	r3, r3, #4
 800a5fe:	4013      	ands	r3, r2
 800a600:	d100      	bne.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800a602:	e0d9      	b.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a604:	4b9c      	ldr	r3, [pc, #624]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	055b      	lsls	r3, r3, #21
 800a60c:	4013      	ands	r3, r2
 800a60e:	d10a      	bne.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a610:	4b99      	ldr	r3, [pc, #612]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a614:	4b98      	ldr	r3, [pc, #608]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a616:	2180      	movs	r1, #128	; 0x80
 800a618:	0549      	lsls	r1, r1, #21
 800a61a:	430a      	orrs	r2, r1
 800a61c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800a61e:	2317      	movs	r3, #23
 800a620:	18fb      	adds	r3, r7, r3
 800a622:	2201      	movs	r2, #1
 800a624:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a626:	4b95      	ldr	r3, [pc, #596]	; (800a87c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	2380      	movs	r3, #128	; 0x80
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	4013      	ands	r3, r2
 800a630:	d11a      	bne.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a632:	4b92      	ldr	r3, [pc, #584]	; (800a87c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	4b91      	ldr	r3, [pc, #580]	; (800a87c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800a638:	2180      	movs	r1, #128	; 0x80
 800a63a:	0049      	lsls	r1, r1, #1
 800a63c:	430a      	orrs	r2, r1
 800a63e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a640:	f7fd fa9a 	bl	8007b78 <HAL_GetTick>
 800a644:	0003      	movs	r3, r0
 800a646:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a648:	e008      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a64a:	f7fd fa95 	bl	8007b78 <HAL_GetTick>
 800a64e:	0002      	movs	r2, r0
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b64      	cmp	r3, #100	; 0x64
 800a656:	d901      	bls.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e108      	b.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a65c:	4b87      	ldr	r3, [pc, #540]	; (800a87c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	005b      	lsls	r3, r3, #1
 800a664:	4013      	ands	r3, r2
 800a666:	d0f0      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800a668:	4b83      	ldr	r3, [pc, #524]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	23c0      	movs	r3, #192	; 0xc0
 800a66e:	039b      	lsls	r3, r3, #14
 800a670:	4013      	ands	r3, r2
 800a672:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	23c0      	movs	r3, #192	; 0xc0
 800a67a:	039b      	lsls	r3, r3, #14
 800a67c:	4013      	ands	r3, r2
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	429a      	cmp	r2, r3
 800a682:	d107      	bne.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689a      	ldr	r2, [r3, #8]
 800a688:	23c0      	movs	r3, #192	; 0xc0
 800a68a:	039b      	lsls	r3, r3, #14
 800a68c:	4013      	ands	r3, r2
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	429a      	cmp	r2, r3
 800a692:	d013      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	23c0      	movs	r3, #192	; 0xc0
 800a69a:	029b      	lsls	r3, r3, #10
 800a69c:	401a      	ands	r2, r3
 800a69e:	23c0      	movs	r3, #192	; 0xc0
 800a6a0:	029b      	lsls	r3, r3, #10
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d10a      	bne.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a6a6:	4b74      	ldr	r3, [pc, #464]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	2380      	movs	r3, #128	; 0x80
 800a6ac:	029b      	lsls	r3, r3, #10
 800a6ae:	401a      	ands	r2, r3
 800a6b0:	2380      	movs	r3, #128	; 0x80
 800a6b2:	029b      	lsls	r3, r3, #10
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d101      	bne.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e0d8      	b.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800a6bc:	4b6e      	ldr	r3, [pc, #440]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a6be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6c0:	23c0      	movs	r3, #192	; 0xc0
 800a6c2:	029b      	lsls	r3, r3, #10
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d049      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	23c0      	movs	r3, #192	; 0xc0
 800a6d4:	029b      	lsls	r3, r3, #10
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d004      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	d10d      	bne.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689a      	ldr	r2, [r3, #8]
 800a6ec:	23c0      	movs	r3, #192	; 0xc0
 800a6ee:	029b      	lsls	r3, r3, #10
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d034      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	2380      	movs	r3, #128	; 0x80
 800a6fe:	011b      	lsls	r3, r3, #4
 800a700:	4013      	ands	r3, r2
 800a702:	d02e      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a704:	4b5c      	ldr	r3, [pc, #368]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a708:	4a5d      	ldr	r2, [pc, #372]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800a70a:	4013      	ands	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a70e:	4b5a      	ldr	r3, [pc, #360]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a712:	4b59      	ldr	r3, [pc, #356]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a714:	2180      	movs	r1, #128	; 0x80
 800a716:	0309      	lsls	r1, r1, #12
 800a718:	430a      	orrs	r2, r1
 800a71a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a71c:	4b56      	ldr	r3, [pc, #344]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a71e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a720:	4b55      	ldr	r3, [pc, #340]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a722:	4958      	ldr	r1, [pc, #352]	; (800a884 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800a724:	400a      	ands	r2, r1
 800a726:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800a728:	4b53      	ldr	r3, [pc, #332]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	2380      	movs	r3, #128	; 0x80
 800a732:	005b      	lsls	r3, r3, #1
 800a734:	4013      	ands	r3, r2
 800a736:	d014      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a738:	f7fd fa1e 	bl	8007b78 <HAL_GetTick>
 800a73c:	0003      	movs	r3, r0
 800a73e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a740:	e009      	b.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a742:	f7fd fa19 	bl	8007b78 <HAL_GetTick>
 800a746:	0002      	movs	r2, r0
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	4a4e      	ldr	r2, [pc, #312]	; (800a888 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d901      	bls.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e08b      	b.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a756:	4b48      	ldr	r3, [pc, #288]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a75a:	2380      	movs	r3, #128	; 0x80
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4013      	ands	r3, r2
 800a760:	d0ef      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685a      	ldr	r2, [r3, #4]
 800a766:	23c0      	movs	r3, #192	; 0xc0
 800a768:	029b      	lsls	r3, r3, #10
 800a76a:	401a      	ands	r2, r3
 800a76c:	23c0      	movs	r3, #192	; 0xc0
 800a76e:	029b      	lsls	r3, r3, #10
 800a770:	429a      	cmp	r2, r3
 800a772:	d10c      	bne.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800a774:	4b40      	ldr	r3, [pc, #256]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a44      	ldr	r2, [pc, #272]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800a77a:	4013      	ands	r3, r2
 800a77c:	0019      	movs	r1, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	23c0      	movs	r3, #192	; 0xc0
 800a784:	039b      	lsls	r3, r3, #14
 800a786:	401a      	ands	r2, r3
 800a788:	4b3b      	ldr	r3, [pc, #236]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a78a:	430a      	orrs	r2, r1
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	4b3a      	ldr	r3, [pc, #232]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a790:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	23c0      	movs	r3, #192	; 0xc0
 800a798:	029b      	lsls	r3, r3, #10
 800a79a:	401a      	ands	r2, r3
 800a79c:	4b36      	ldr	r3, [pc, #216]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a79e:	430a      	orrs	r2, r1
 800a7a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a7a2:	2317      	movs	r3, #23
 800a7a4:	18fb      	adds	r3, r7, r3
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d105      	bne.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7ac:	4b32      	ldr	r3, [pc, #200]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a7ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7b0:	4b31      	ldr	r3, [pc, #196]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a7b2:	4937      	ldr	r1, [pc, #220]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800a7b4:	400a      	ands	r2, r1
 800a7b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	4013      	ands	r3, r2
 800a7c0:	d009      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a7c2:	4b2d      	ldr	r3, [pc, #180]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7c6:	2203      	movs	r2, #3
 800a7c8:	4393      	bics	r3, r2
 800a7ca:	0019      	movs	r1, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68da      	ldr	r2, [r3, #12]
 800a7d0:	4b29      	ldr	r3, [pc, #164]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	4013      	ands	r3, r2
 800a7de:	d009      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a7e0:	4b25      	ldr	r3, [pc, #148]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a7e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7e4:	220c      	movs	r2, #12
 800a7e6:	4393      	bics	r3, r2
 800a7e8:	0019      	movs	r1, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	691a      	ldr	r2, [r3, #16]
 800a7ee:	4b22      	ldr	r3, [pc, #136]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2204      	movs	r2, #4
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	d009      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7fe:	4b1e      	ldr	r3, [pc, #120]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a802:	4a24      	ldr	r2, [pc, #144]	; (800a894 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800a804:	4013      	ands	r3, r2
 800a806:	0019      	movs	r1, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	695a      	ldr	r2, [r3, #20]
 800a80c:	4b1a      	ldr	r3, [pc, #104]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a80e:	430a      	orrs	r2, r1
 800a810:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2208      	movs	r2, #8
 800a818:	4013      	ands	r3, r2
 800a81a:	d009      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a81c:	4b16      	ldr	r3, [pc, #88]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a81e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a820:	4a1d      	ldr	r2, [pc, #116]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800a822:	4013      	ands	r3, r2
 800a824:	0019      	movs	r1, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	699a      	ldr	r2, [r3, #24]
 800a82a:	4b13      	ldr	r3, [pc, #76]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a82c:	430a      	orrs	r2, r1
 800a82e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2240      	movs	r2, #64	; 0x40
 800a836:	4013      	ands	r3, r2
 800a838:	d009      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a83a:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a83e:	4a17      	ldr	r2, [pc, #92]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800a840:	4013      	ands	r3, r2
 800a842:	0019      	movs	r1, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a1a      	ldr	r2, [r3, #32]
 800a848:	4b0b      	ldr	r3, [pc, #44]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a84a:	430a      	orrs	r2, r1
 800a84c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2280      	movs	r2, #128	; 0x80
 800a854:	4013      	ands	r3, r2
 800a856:	d009      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800a858:	4b07      	ldr	r3, [pc, #28]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85c:	4a10      	ldr	r2, [pc, #64]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a85e:	4013      	ands	r3, r2
 800a860:	0019      	movs	r1, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	69da      	ldr	r2, [r3, #28]
 800a866:	4b04      	ldr	r3, [pc, #16]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a868:	430a      	orrs	r2, r1
 800a86a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	0018      	movs	r0, r3
 800a870:	46bd      	mov	sp, r7
 800a872:	b006      	add	sp, #24
 800a874:	bd80      	pop	{r7, pc}
 800a876:	46c0      	nop			; (mov r8, r8)
 800a878:	40021000 	.word	0x40021000
 800a87c:	40007000 	.word	0x40007000
 800a880:	fffcffff 	.word	0xfffcffff
 800a884:	fff7ffff 	.word	0xfff7ffff
 800a888:	00001388 	.word	0x00001388
 800a88c:	ffcfffff 	.word	0xffcfffff
 800a890:	efffffff 	.word	0xefffffff
 800a894:	fffff3ff 	.word	0xfffff3ff
 800a898:	ffffcfff 	.word	0xffffcfff
 800a89c:	fbffffff 	.word	0xfbffffff
 800a8a0:	fff3ffff 	.word	0xfff3ffff

0800a8a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e08e      	b.n	800a9d4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2221      	movs	r2, #33	; 0x21
 800a8ba:	5c9b      	ldrb	r3, [r3, r2]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d107      	bne.n	800a8d2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2220      	movs	r2, #32
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	0018      	movs	r0, r3
 800a8ce:	f7fb fd65 	bl	800639c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2221      	movs	r2, #33	; 0x21
 800a8d6:	2102      	movs	r1, #2
 800a8d8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	22ca      	movs	r2, #202	; 0xca
 800a8e0:	625a      	str	r2, [r3, #36]	; 0x24
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2253      	movs	r2, #83	; 0x53
 800a8e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	0018      	movs	r0, r3
 800a8ee:	f000 faba 	bl	800ae66 <RTC_EnterInitMode>
 800a8f2:	1e03      	subs	r3, r0, #0
 800a8f4:	d009      	beq.n	800a90a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	22ff      	movs	r2, #255	; 0xff
 800a8fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2221      	movs	r2, #33	; 0x21
 800a902:	2104      	movs	r1, #4
 800a904:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e064      	b.n	800a9d4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	689a      	ldr	r2, [r3, #8]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4931      	ldr	r1, [pc, #196]	; (800a9dc <HAL_RTC_Init+0x138>)
 800a916:	400a      	ands	r2, r1
 800a918:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	6899      	ldr	r1, [r3, #8]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	431a      	orrs	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	431a      	orrs	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	430a      	orrs	r2, r1
 800a936:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	68d2      	ldr	r2, [r2, #12]
 800a940:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	6919      	ldr	r1, [r3, #16]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	041a      	lsls	r2, r3, #16
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	430a      	orrs	r2, r1
 800a954:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68da      	ldr	r2, [r3, #12]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2180      	movs	r1, #128	; 0x80
 800a962:	438a      	bics	r2, r1
 800a964:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2103      	movs	r1, #3
 800a972:	438a      	bics	r2, r1
 800a974:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	69da      	ldr	r2, [r3, #28]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	431a      	orrs	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	2220      	movs	r2, #32
 800a996:	4013      	ands	r3, r2
 800a998:	d113      	bne.n	800a9c2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	0018      	movs	r0, r3
 800a99e:	f000 fa3b 	bl	800ae18 <HAL_RTC_WaitForSynchro>
 800a9a2:	1e03      	subs	r3, r0, #0
 800a9a4:	d00d      	beq.n	800a9c2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	22ff      	movs	r2, #255	; 0xff
 800a9ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2221      	movs	r2, #33	; 0x21
 800a9b2:	2104      	movs	r1, #4
 800a9b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e008      	b.n	800a9d4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	22ff      	movs	r2, #255	; 0xff
 800a9c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2221      	movs	r2, #33	; 0x21
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
  }
}
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	b002      	add	sp, #8
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	ff8fffbf 	.word	0xff8fffbf

0800a9e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a9e0:	b590      	push	{r4, r7, lr}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2220      	movs	r2, #32
 800a9f0:	5c9b      	ldrb	r3, [r3, r2]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d101      	bne.n	800a9fa <HAL_RTC_SetTime+0x1a>
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e0ad      	b.n	800ab56 <HAL_RTC_SetTime+0x176>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	2101      	movs	r1, #1
 800aa00:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2221      	movs	r2, #33	; 0x21
 800aa06:	2102      	movs	r1, #2
 800aa08:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d125      	bne.n	800aa5c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	2240      	movs	r2, #64	; 0x40
 800aa18:	4013      	ands	r3, r2
 800aa1a:	d102      	bne.n	800aa22 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	0018      	movs	r0, r3
 800aa28:	f000 fa47 	bl	800aeba <RTC_ByteToBcd2>
 800aa2c:	0003      	movs	r3, r0
 800aa2e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	785b      	ldrb	r3, [r3, #1]
 800aa34:	0018      	movs	r0, r3
 800aa36:	f000 fa40 	bl	800aeba <RTC_ByteToBcd2>
 800aa3a:	0003      	movs	r3, r0
 800aa3c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aa3e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	789b      	ldrb	r3, [r3, #2]
 800aa44:	0018      	movs	r0, r3
 800aa46:	f000 fa38 	bl	800aeba <RTC_ByteToBcd2>
 800aa4a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800aa4c:	0022      	movs	r2, r4
 800aa4e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	78db      	ldrb	r3, [r3, #3]
 800aa54:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aa56:	4313      	orrs	r3, r2
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	e017      	b.n	800aa8c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	2240      	movs	r2, #64	; 0x40
 800aa64:	4013      	ands	r3, r2
 800aa66:	d102      	bne.n	800aa6e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	785b      	ldrb	r3, [r3, #1]
 800aa78:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aa7a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800aa80:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	78db      	ldrb	r3, [r3, #3]
 800aa86:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	22ca      	movs	r2, #202	; 0xca
 800aa92:	625a      	str	r2, [r3, #36]	; 0x24
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2253      	movs	r2, #83	; 0x53
 800aa9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	f000 f9e1 	bl	800ae66 <RTC_EnterInitMode>
 800aaa4:	1e03      	subs	r3, r0, #0
 800aaa6:	d00d      	beq.n	800aac4 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	22ff      	movs	r2, #255	; 0xff
 800aaae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2221      	movs	r2, #33	; 0x21
 800aab4:	2104      	movs	r1, #4
 800aab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2220      	movs	r2, #32
 800aabc:	2100      	movs	r1, #0
 800aabe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e048      	b.n	800ab56 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	4925      	ldr	r1, [pc, #148]	; (800ab60 <HAL_RTC_SetTime+0x180>)
 800aacc:	400a      	ands	r2, r1
 800aace:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689a      	ldr	r2, [r3, #8]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4922      	ldr	r1, [pc, #136]	; (800ab64 <HAL_RTC_SetTime+0x184>)
 800aadc:	400a      	ands	r2, r1
 800aade:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6899      	ldr	r1, [r3, #8]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	68da      	ldr	r2, [r3, #12]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	430a      	orrs	r2, r1
 800aaf6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68da      	ldr	r2, [r3, #12]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2180      	movs	r1, #128	; 0x80
 800ab04:	438a      	bics	r2, r1
 800ab06:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	2220      	movs	r2, #32
 800ab10:	4013      	ands	r3, r2
 800ab12:	d113      	bne.n	800ab3c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	0018      	movs	r0, r3
 800ab18:	f000 f97e 	bl	800ae18 <HAL_RTC_WaitForSynchro>
 800ab1c:	1e03      	subs	r3, r0, #0
 800ab1e:	d00d      	beq.n	800ab3c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	22ff      	movs	r2, #255	; 0xff
 800ab26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2221      	movs	r2, #33	; 0x21
 800ab2c:	2104      	movs	r1, #4
 800ab2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2220      	movs	r2, #32
 800ab34:	2100      	movs	r1, #0
 800ab36:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e00c      	b.n	800ab56 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	22ff      	movs	r2, #255	; 0xff
 800ab42:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2221      	movs	r2, #33	; 0x21
 800ab48:	2101      	movs	r1, #1
 800ab4a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2220      	movs	r2, #32
 800ab50:	2100      	movs	r1, #0
 800ab52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ab54:	2300      	movs	r3, #0
  }
}
 800ab56:	0018      	movs	r0, r3
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	b007      	add	sp, #28
 800ab5c:	bd90      	pop	{r4, r7, pc}
 800ab5e:	46c0      	nop			; (mov r8, r8)
 800ab60:	007f7f7f 	.word	0x007f7f7f
 800ab64:	fffbffff 	.word	0xfffbffff

0800ab68 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	045b      	lsls	r3, r3, #17
 800ab86:	0c5a      	lsrs	r2, r3, #17
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a22      	ldr	r2, [pc, #136]	; (800ac1c <HAL_RTC_GetTime+0xb4>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	0c1b      	lsrs	r3, r3, #16
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	223f      	movs	r2, #63	; 0x3f
 800aba0:	4013      	ands	r3, r2
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	0a1b      	lsrs	r3, r3, #8
 800abac:	b2db      	uxtb	r3, r3
 800abae:	227f      	movs	r2, #127	; 0x7f
 800abb0:	4013      	ands	r3, r2
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	227f      	movs	r2, #127	; 0x7f
 800abbe:	4013      	ands	r3, r2
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	0c1b      	lsrs	r3, r3, #16
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2240      	movs	r2, #64	; 0x40
 800abce:	4013      	ands	r3, r2
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d11a      	bne.n	800ac12 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	0018      	movs	r0, r3
 800abe2:	f000 f992 	bl	800af0a <RTC_Bcd2ToByte>
 800abe6:	0003      	movs	r3, r0
 800abe8:	001a      	movs	r2, r3
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	0018      	movs	r0, r3
 800abf4:	f000 f989 	bl	800af0a <RTC_Bcd2ToByte>
 800abf8:	0003      	movs	r3, r0
 800abfa:	001a      	movs	r2, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	789b      	ldrb	r3, [r3, #2]
 800ac04:	0018      	movs	r0, r3
 800ac06:	f000 f980 	bl	800af0a <RTC_Bcd2ToByte>
 800ac0a:	0003      	movs	r3, r0
 800ac0c:	001a      	movs	r2, r3
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	0018      	movs	r0, r3
 800ac16:	46bd      	mov	sp, r7
 800ac18:	b006      	add	sp, #24
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	007f7f7f 	.word	0x007f7f7f

0800ac20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	5c9b      	ldrb	r3, [r3, r2]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d101      	bne.n	800ac3a <HAL_RTC_SetDate+0x1a>
 800ac36:	2302      	movs	r3, #2
 800ac38:	e099      	b.n	800ad6e <HAL_RTC_SetDate+0x14e>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2220      	movs	r2, #32
 800ac3e:	2101      	movs	r1, #1
 800ac40:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2221      	movs	r2, #33	; 0x21
 800ac46:	2102      	movs	r1, #2
 800ac48:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10e      	bne.n	800ac6e <HAL_RTC_SetDate+0x4e>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	785b      	ldrb	r3, [r3, #1]
 800ac54:	001a      	movs	r2, r3
 800ac56:	2310      	movs	r3, #16
 800ac58:	4013      	ands	r3, r2
 800ac5a:	d008      	beq.n	800ac6e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	785b      	ldrb	r3, [r3, #1]
 800ac60:	2210      	movs	r2, #16
 800ac62:	4393      	bics	r3, r2
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	330a      	adds	r3, #10
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d11c      	bne.n	800acae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	78db      	ldrb	r3, [r3, #3]
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f000 f91e 	bl	800aeba <RTC_ByteToBcd2>
 800ac7e:	0003      	movs	r3, r0
 800ac80:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	785b      	ldrb	r3, [r3, #1]
 800ac86:	0018      	movs	r0, r3
 800ac88:	f000 f917 	bl	800aeba <RTC_ByteToBcd2>
 800ac8c:	0003      	movs	r3, r0
 800ac8e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ac90:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	789b      	ldrb	r3, [r3, #2]
 800ac96:	0018      	movs	r0, r3
 800ac98:	f000 f90f 	bl	800aeba <RTC_ByteToBcd2>
 800ac9c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ac9e:	0022      	movs	r2, r4
 800aca0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800aca8:	4313      	orrs	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]
 800acac:	e00e      	b.n	800accc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	78db      	ldrb	r3, [r3, #3]
 800acb2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	785b      	ldrb	r3, [r3, #1]
 800acb8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800acba:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800acbc:	68ba      	ldr	r2, [r7, #8]
 800acbe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800acc0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800acc8:	4313      	orrs	r3, r2
 800acca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	22ca      	movs	r2, #202	; 0xca
 800acd2:	625a      	str	r2, [r3, #36]	; 0x24
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2253      	movs	r2, #83	; 0x53
 800acda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	0018      	movs	r0, r3
 800ace0:	f000 f8c1 	bl	800ae66 <RTC_EnterInitMode>
 800ace4:	1e03      	subs	r3, r0, #0
 800ace6:	d00d      	beq.n	800ad04 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	22ff      	movs	r2, #255	; 0xff
 800acee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2221      	movs	r2, #33	; 0x21
 800acf4:	2104      	movs	r1, #4
 800acf6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2220      	movs	r2, #32
 800acfc:	2100      	movs	r1, #0
 800acfe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e034      	b.n	800ad6e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	491b      	ldr	r1, [pc, #108]	; (800ad78 <HAL_RTC_SetDate+0x158>)
 800ad0c:	400a      	ands	r2, r1
 800ad0e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68da      	ldr	r2, [r3, #12]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2180      	movs	r1, #128	; 0x80
 800ad1c:	438a      	bics	r2, r1
 800ad1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	2220      	movs	r2, #32
 800ad28:	4013      	ands	r3, r2
 800ad2a:	d113      	bne.n	800ad54 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	0018      	movs	r0, r3
 800ad30:	f000 f872 	bl	800ae18 <HAL_RTC_WaitForSynchro>
 800ad34:	1e03      	subs	r3, r0, #0
 800ad36:	d00d      	beq.n	800ad54 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	22ff      	movs	r2, #255	; 0xff
 800ad3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2221      	movs	r2, #33	; 0x21
 800ad44:	2104      	movs	r1, #4
 800ad46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e00c      	b.n	800ad6e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	22ff      	movs	r2, #255	; 0xff
 800ad5a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2221      	movs	r2, #33	; 0x21
 800ad60:	2101      	movs	r1, #1
 800ad62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2220      	movs	r2, #32
 800ad68:	2100      	movs	r1, #0
 800ad6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
  }
}
 800ad6e:	0018      	movs	r0, r3
 800ad70:	46bd      	mov	sp, r7
 800ad72:	b007      	add	sp, #28
 800ad74:	bd90      	pop	{r4, r7, pc}
 800ad76:	46c0      	nop			; (mov r8, r8)
 800ad78:	00ffff3f 	.word	0x00ffff3f

0800ad7c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	4a21      	ldr	r2, [pc, #132]	; (800ae14 <HAL_RTC_GetDate+0x98>)
 800ad90:	4013      	ands	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	0c1b      	lsrs	r3, r3, #16
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	0a1b      	lsrs	r3, r3, #8
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	221f      	movs	r2, #31
 800ada6:	4013      	ands	r3, r2
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	223f      	movs	r2, #63	; 0x3f
 800adb4:	4013      	ands	r3, r2
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	0b5b      	lsrs	r3, r3, #13
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2207      	movs	r2, #7
 800adc4:	4013      	ands	r3, r2
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d11a      	bne.n	800ae08 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	78db      	ldrb	r3, [r3, #3]
 800add6:	0018      	movs	r0, r3
 800add8:	f000 f897 	bl	800af0a <RTC_Bcd2ToByte>
 800addc:	0003      	movs	r3, r0
 800adde:	001a      	movs	r2, r3
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	785b      	ldrb	r3, [r3, #1]
 800ade8:	0018      	movs	r0, r3
 800adea:	f000 f88e 	bl	800af0a <RTC_Bcd2ToByte>
 800adee:	0003      	movs	r3, r0
 800adf0:	001a      	movs	r2, r3
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	789b      	ldrb	r3, [r3, #2]
 800adfa:	0018      	movs	r0, r3
 800adfc:	f000 f885 	bl	800af0a <RTC_Bcd2ToByte>
 800ae00:	0003      	movs	r3, r0
 800ae02:	001a      	movs	r2, r3
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	0018      	movs	r0, r3
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	b006      	add	sp, #24
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	46c0      	nop			; (mov r8, r8)
 800ae14:	00ffff3f 	.word	0x00ffff3f

0800ae18 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68da      	ldr	r2, [r3, #12]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	21a0      	movs	r1, #160	; 0xa0
 800ae2c:	438a      	bics	r2, r1
 800ae2e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ae30:	f7fc fea2 	bl	8007b78 <HAL_GetTick>
 800ae34:	0003      	movs	r3, r0
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ae38:	e00a      	b.n	800ae50 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae3a:	f7fc fe9d 	bl	8007b78 <HAL_GetTick>
 800ae3e:	0002      	movs	r2, r0
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	1ad2      	subs	r2, r2, r3
 800ae44:	23fa      	movs	r3, #250	; 0xfa
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d901      	bls.n	800ae50 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e006      	b.n	800ae5e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	2220      	movs	r2, #32
 800ae58:	4013      	ands	r3, r2
 800ae5a:	d0ee      	beq.n	800ae3a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	0018      	movs	r0, r3
 800ae60:	46bd      	mov	sp, r7
 800ae62:	b004      	add	sp, #16
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b084      	sub	sp, #16
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	2240      	movs	r2, #64	; 0x40
 800ae76:	4013      	ands	r3, r2
 800ae78:	d11a      	bne.n	800aeb0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	4252      	negs	r2, r2
 800ae82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ae84:	f7fc fe78 	bl	8007b78 <HAL_GetTick>
 800ae88:	0003      	movs	r3, r0
 800ae8a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ae8c:	e00a      	b.n	800aea4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ae8e:	f7fc fe73 	bl	8007b78 <HAL_GetTick>
 800ae92:	0002      	movs	r2, r0
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	1ad2      	subs	r2, r2, r3
 800ae98:	23fa      	movs	r3, #250	; 0xfa
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d901      	bls.n	800aea4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e006      	b.n	800aeb2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	2240      	movs	r2, #64	; 0x40
 800aeac:	4013      	ands	r3, r2
 800aeae:	d0ee      	beq.n	800ae8e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	0018      	movs	r0, r3
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	b004      	add	sp, #16
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b084      	sub	sp, #16
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	0002      	movs	r2, r0
 800aec2:	1dfb      	adds	r3, r7, #7
 800aec4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800aec6:	2300      	movs	r3, #0
 800aec8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800aeca:	230b      	movs	r3, #11
 800aecc:	18fb      	adds	r3, r7, r3
 800aece:	1dfa      	adds	r2, r7, #7
 800aed0:	7812      	ldrb	r2, [r2, #0]
 800aed2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800aed4:	e008      	b.n	800aee8 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3301      	adds	r3, #1
 800aeda:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800aedc:	220b      	movs	r2, #11
 800aede:	18bb      	adds	r3, r7, r2
 800aee0:	18ba      	adds	r2, r7, r2
 800aee2:	7812      	ldrb	r2, [r2, #0]
 800aee4:	3a0a      	subs	r2, #10
 800aee6:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800aee8:	210b      	movs	r1, #11
 800aeea:	187b      	adds	r3, r7, r1
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b09      	cmp	r3, #9
 800aef0:	d8f1      	bhi.n	800aed6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	011b      	lsls	r3, r3, #4
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	187b      	adds	r3, r7, r1
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	4313      	orrs	r3, r2
 800af00:	b2db      	uxtb	r3, r3
}
 800af02:	0018      	movs	r0, r3
 800af04:	46bd      	mov	sp, r7
 800af06:	b004      	add	sp, #16
 800af08:	bd80      	pop	{r7, pc}

0800af0a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	0002      	movs	r2, r0
 800af12:	1dfb      	adds	r3, r7, #7
 800af14:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800af16:	1dfb      	adds	r3, r7, #7
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	091b      	lsrs	r3, r3, #4
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	001a      	movs	r2, r3
 800af20:	0013      	movs	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	189b      	adds	r3, r3, r2
 800af26:	005b      	lsls	r3, r3, #1
 800af28:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	1dfb      	adds	r3, r7, #7
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	210f      	movs	r1, #15
 800af34:	400b      	ands	r3, r1
 800af36:	b2db      	uxtb	r3, r3
 800af38:	18d3      	adds	r3, r2, r3
 800af3a:	b2db      	uxtb	r3, r3
}
 800af3c:	0018      	movs	r0, r3
 800af3e:	46bd      	mov	sp, r7
 800af40:	b004      	add	sp, #16
 800af42:	bd80      	pop	{r7, pc}

0800af44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e083      	b.n	800b05e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d109      	bne.n	800af72 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	2382      	movs	r3, #130	; 0x82
 800af64:	005b      	lsls	r3, r3, #1
 800af66:	429a      	cmp	r2, r3
 800af68:	d009      	beq.n	800af7e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	61da      	str	r2, [r3, #28]
 800af70:	e005      	b.n	800af7e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2251      	movs	r2, #81	; 0x51
 800af88:	5c9b      	ldrb	r3, [r3, r2]
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d107      	bne.n	800afa0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2250      	movs	r2, #80	; 0x50
 800af94:	2100      	movs	r1, #0
 800af96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	0018      	movs	r0, r3
 800af9c:	f7fb fbe4 	bl	8006768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2251      	movs	r2, #81	; 0x51
 800afa4:	2102      	movs	r1, #2
 800afa6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2140      	movs	r1, #64	; 0x40
 800afb4:	438a      	bics	r2, r1
 800afb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	2382      	movs	r3, #130	; 0x82
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	401a      	ands	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6899      	ldr	r1, [r3, #8]
 800afc6:	2384      	movs	r3, #132	; 0x84
 800afc8:	021b      	lsls	r3, r3, #8
 800afca:	400b      	ands	r3, r1
 800afcc:	431a      	orrs	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68d9      	ldr	r1, [r3, #12]
 800afd2:	2380      	movs	r3, #128	; 0x80
 800afd4:	011b      	lsls	r3, r3, #4
 800afd6:	400b      	ands	r3, r1
 800afd8:	431a      	orrs	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	2102      	movs	r1, #2
 800afe0:	400b      	ands	r3, r1
 800afe2:	431a      	orrs	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	695b      	ldr	r3, [r3, #20]
 800afe8:	2101      	movs	r1, #1
 800afea:	400b      	ands	r3, r1
 800afec:	431a      	orrs	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6999      	ldr	r1, [r3, #24]
 800aff2:	2380      	movs	r3, #128	; 0x80
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	400b      	ands	r3, r1
 800aff8:	431a      	orrs	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	69db      	ldr	r3, [r3, #28]
 800affe:	2138      	movs	r1, #56	; 0x38
 800b000:	400b      	ands	r3, r1
 800b002:	431a      	orrs	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a1b      	ldr	r3, [r3, #32]
 800b008:	2180      	movs	r1, #128	; 0x80
 800b00a:	400b      	ands	r3, r1
 800b00c:	431a      	orrs	r2, r3
 800b00e:	0011      	movs	r1, r2
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b014:	2380      	movs	r3, #128	; 0x80
 800b016:	019b      	lsls	r3, r3, #6
 800b018:	401a      	ands	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	0c1b      	lsrs	r3, r3, #16
 800b028:	2204      	movs	r2, #4
 800b02a:	4013      	ands	r3, r2
 800b02c:	0019      	movs	r1, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b032:	2210      	movs	r2, #16
 800b034:	401a      	ands	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	69da      	ldr	r2, [r3, #28]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4907      	ldr	r1, [pc, #28]	; (800b068 <HAL_SPI_Init+0x124>)
 800b04a:	400a      	ands	r2, r1
 800b04c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2251      	movs	r2, #81	; 0x51
 800b058:	2101      	movs	r1, #1
 800b05a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	0018      	movs	r0, r3
 800b060:	46bd      	mov	sp, r7
 800b062:	b002      	add	sp, #8
 800b064:	bd80      	pop	{r7, pc}
 800b066:	46c0      	nop			; (mov r8, r8)
 800b068:	fffff7ff 	.word	0xfffff7ff

0800b06c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	1dbb      	adds	r3, r7, #6
 800b07a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b07c:	231f      	movs	r3, #31
 800b07e:	18fb      	adds	r3, r7, r3
 800b080:	2200      	movs	r2, #0
 800b082:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2250      	movs	r2, #80	; 0x50
 800b088:	5c9b      	ldrb	r3, [r3, r2]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d101      	bne.n	800b092 <HAL_SPI_Transmit+0x26>
 800b08e:	2302      	movs	r3, #2
 800b090:	e13e      	b.n	800b310 <HAL_SPI_Transmit+0x2a4>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2250      	movs	r2, #80	; 0x50
 800b096:	2101      	movs	r1, #1
 800b098:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b09a:	f7fc fd6d 	bl	8007b78 <HAL_GetTick>
 800b09e:	0003      	movs	r3, r0
 800b0a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b0a2:	2316      	movs	r3, #22
 800b0a4:	18fb      	adds	r3, r7, r3
 800b0a6:	1dba      	adds	r2, r7, #6
 800b0a8:	8812      	ldrh	r2, [r2, #0]
 800b0aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2251      	movs	r2, #81	; 0x51
 800b0b0:	5c9b      	ldrb	r3, [r3, r2]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d004      	beq.n	800b0c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b0b8:	231f      	movs	r3, #31
 800b0ba:	18fb      	adds	r3, r7, r3
 800b0bc:	2202      	movs	r2, #2
 800b0be:	701a      	strb	r2, [r3, #0]
    goto error;
 800b0c0:	e11b      	b.n	800b2fa <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d003      	beq.n	800b0d0 <HAL_SPI_Transmit+0x64>
 800b0c8:	1dbb      	adds	r3, r7, #6
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d104      	bne.n	800b0da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b0d0:	231f      	movs	r3, #31
 800b0d2:	18fb      	adds	r3, r7, r3
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	701a      	strb	r2, [r3, #0]
    goto error;
 800b0d8:	e10f      	b.n	800b2fa <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2251      	movs	r2, #81	; 0x51
 800b0de:	2103      	movs	r1, #3
 800b0e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	1dba      	adds	r2, r7, #6
 800b0f2:	8812      	ldrh	r2, [r2, #0]
 800b0f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	1dba      	adds	r2, r7, #6
 800b0fa:	8812      	ldrh	r2, [r2, #0]
 800b0fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	689a      	ldr	r2, [r3, #8]
 800b120:	2380      	movs	r3, #128	; 0x80
 800b122:	021b      	lsls	r3, r3, #8
 800b124:	429a      	cmp	r2, r3
 800b126:	d110      	bne.n	800b14a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2140      	movs	r1, #64	; 0x40
 800b134:	438a      	bics	r2, r1
 800b136:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2180      	movs	r1, #128	; 0x80
 800b144:	01c9      	lsls	r1, r1, #7
 800b146:	430a      	orrs	r2, r1
 800b148:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2240      	movs	r2, #64	; 0x40
 800b152:	4013      	ands	r3, r2
 800b154:	2b40      	cmp	r3, #64	; 0x40
 800b156:	d007      	beq.n	800b168 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2140      	movs	r1, #64	; 0x40
 800b164:	430a      	orrs	r2, r1
 800b166:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	68da      	ldr	r2, [r3, #12]
 800b16c:	2380      	movs	r3, #128	; 0x80
 800b16e:	011b      	lsls	r3, r3, #4
 800b170:	429a      	cmp	r2, r3
 800b172:	d14e      	bne.n	800b212 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d004      	beq.n	800b186 <HAL_SPI_Transmit+0x11a>
 800b17c:	2316      	movs	r3, #22
 800b17e:	18fb      	adds	r3, r7, r3
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d13f      	bne.n	800b206 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18a:	881a      	ldrh	r2, [r3, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b196:	1c9a      	adds	r2, r3, #2
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b1aa:	e02c      	b.n	800b206 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d112      	bne.n	800b1e0 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1be:	881a      	ldrh	r2, [r3, #0]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ca:	1c9a      	adds	r2, r3, #2
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	86da      	strh	r2, [r3, #54]	; 0x36
 800b1de:	e012      	b.n	800b206 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1e0:	f7fc fcca 	bl	8007b78 <HAL_GetTick>
 800b1e4:	0002      	movs	r2, r0
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d802      	bhi.n	800b1f6 <HAL_SPI_Transmit+0x18a>
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	d102      	bne.n	800b1fc <HAL_SPI_Transmit+0x190>
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d104      	bne.n	800b206 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800b1fc:	231f      	movs	r3, #31
 800b1fe:	18fb      	adds	r3, r7, r3
 800b200:	2203      	movs	r2, #3
 800b202:	701a      	strb	r2, [r3, #0]
          goto error;
 800b204:	e079      	b.n	800b2fa <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1cd      	bne.n	800b1ac <HAL_SPI_Transmit+0x140>
 800b210:	e04f      	b.n	800b2b2 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d004      	beq.n	800b224 <HAL_SPI_Transmit+0x1b8>
 800b21a:	2316      	movs	r3, #22
 800b21c:	18fb      	adds	r3, r7, r3
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d141      	bne.n	800b2a8 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	330c      	adds	r3, #12
 800b22e:	7812      	ldrb	r2, [r2, #0]
 800b230:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b240:	b29b      	uxth	r3, r3
 800b242:	3b01      	subs	r3, #1
 800b244:	b29a      	uxth	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b24a:	e02d      	b.n	800b2a8 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	2202      	movs	r2, #2
 800b254:	4013      	ands	r3, r2
 800b256:	2b02      	cmp	r3, #2
 800b258:	d113      	bne.n	800b282 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	330c      	adds	r3, #12
 800b264:	7812      	ldrb	r2, [r2, #0]
 800b266:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b276:	b29b      	uxth	r3, r3
 800b278:	3b01      	subs	r3, #1
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b280:	e012      	b.n	800b2a8 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b282:	f7fc fc79 	bl	8007b78 <HAL_GetTick>
 800b286:	0002      	movs	r2, r0
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d802      	bhi.n	800b298 <HAL_SPI_Transmit+0x22c>
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	3301      	adds	r3, #1
 800b296:	d102      	bne.n	800b29e <HAL_SPI_Transmit+0x232>
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d104      	bne.n	800b2a8 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800b29e:	231f      	movs	r3, #31
 800b2a0:	18fb      	adds	r3, r7, r3
 800b2a2:	2203      	movs	r2, #3
 800b2a4:	701a      	strb	r2, [r3, #0]
          goto error;
 800b2a6:	e028      	b.n	800b2fa <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1cc      	bne.n	800b24c <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b2b2:	69ba      	ldr	r2, [r7, #24]
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	0018      	movs	r0, r3
 800b2ba:	f000 fc07 	bl	800bacc <SPI_EndRxTxTransaction>
 800b2be:	1e03      	subs	r3, r0, #0
 800b2c0:	d002      	beq.n	800b2c8 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10a      	bne.n	800b2e6 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	613b      	str	r3, [r7, #16]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	613b      	str	r3, [r7, #16]
 800b2e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d004      	beq.n	800b2f8 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800b2ee:	231f      	movs	r3, #31
 800b2f0:	18fb      	adds	r3, r7, r3
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	701a      	strb	r2, [r3, #0]
 800b2f6:	e000      	b.n	800b2fa <HAL_SPI_Transmit+0x28e>
  }

error:
 800b2f8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2251      	movs	r2, #81	; 0x51
 800b2fe:	2101      	movs	r1, #1
 800b300:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2250      	movs	r2, #80	; 0x50
 800b306:	2100      	movs	r1, #0
 800b308:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b30a:	231f      	movs	r3, #31
 800b30c:	18fb      	adds	r3, r7, r3
 800b30e:	781b      	ldrb	r3, [r3, #0]
}
 800b310:	0018      	movs	r0, r3
 800b312:	46bd      	mov	sp, r7
 800b314:	b008      	add	sp, #32
 800b316:	bd80      	pop	{r7, pc}

0800b318 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b318:	b590      	push	{r4, r7, lr}
 800b31a:	b089      	sub	sp, #36	; 0x24
 800b31c:	af02      	add	r7, sp, #8
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	1dbb      	adds	r3, r7, #6
 800b326:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b328:	2317      	movs	r3, #23
 800b32a:	18fb      	adds	r3, r7, r3
 800b32c:	2200      	movs	r2, #0
 800b32e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	2382      	movs	r3, #130	; 0x82
 800b336:	005b      	lsls	r3, r3, #1
 800b338:	429a      	cmp	r2, r3
 800b33a:	d113      	bne.n	800b364 <HAL_SPI_Receive+0x4c>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10f      	bne.n	800b364 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2251      	movs	r2, #81	; 0x51
 800b348:	2104      	movs	r1, #4
 800b34a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b34c:	1dbb      	adds	r3, r7, #6
 800b34e:	881c      	ldrh	r4, [r3, #0]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	68b9      	ldr	r1, [r7, #8]
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	0023      	movs	r3, r4
 800b35c:	f000 f902 	bl	800b564 <HAL_SPI_TransmitReceive>
 800b360:	0003      	movs	r3, r0
 800b362:	e0f9      	b.n	800b558 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2250      	movs	r2, #80	; 0x50
 800b368:	5c9b      	ldrb	r3, [r3, r2]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d101      	bne.n	800b372 <HAL_SPI_Receive+0x5a>
 800b36e:	2302      	movs	r3, #2
 800b370:	e0f2      	b.n	800b558 <HAL_SPI_Receive+0x240>
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2250      	movs	r2, #80	; 0x50
 800b376:	2101      	movs	r1, #1
 800b378:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b37a:	f7fc fbfd 	bl	8007b78 <HAL_GetTick>
 800b37e:	0003      	movs	r3, r0
 800b380:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2251      	movs	r2, #81	; 0x51
 800b386:	5c9b      	ldrb	r3, [r3, r2]
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d004      	beq.n	800b398 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800b38e:	2317      	movs	r3, #23
 800b390:	18fb      	adds	r3, r7, r3
 800b392:	2202      	movs	r2, #2
 800b394:	701a      	strb	r2, [r3, #0]
    goto error;
 800b396:	e0d4      	b.n	800b542 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <HAL_SPI_Receive+0x8e>
 800b39e:	1dbb      	adds	r3, r7, #6
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d104      	bne.n	800b3b0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800b3a6:	2317      	movs	r3, #23
 800b3a8:	18fb      	adds	r3, r7, r3
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	701a      	strb	r2, [r3, #0]
    goto error;
 800b3ae:	e0c8      	b.n	800b542 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2251      	movs	r2, #81	; 0x51
 800b3b4:	2104      	movs	r1, #4
 800b3b6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	1dba      	adds	r2, r7, #6
 800b3c8:	8812      	ldrh	r2, [r2, #0]
 800b3ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	1dba      	adds	r2, r7, #6
 800b3d0:	8812      	ldrh	r2, [r2, #0]
 800b3d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	689a      	ldr	r2, [r3, #8]
 800b3f6:	2380      	movs	r3, #128	; 0x80
 800b3f8:	021b      	lsls	r3, r3, #8
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d10f      	bne.n	800b41e <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2140      	movs	r1, #64	; 0x40
 800b40a:	438a      	bics	r2, r1
 800b40c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4951      	ldr	r1, [pc, #324]	; (800b560 <HAL_SPI_Receive+0x248>)
 800b41a:	400a      	ands	r2, r1
 800b41c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2240      	movs	r2, #64	; 0x40
 800b426:	4013      	ands	r3, r2
 800b428:	2b40      	cmp	r3, #64	; 0x40
 800b42a:	d007      	beq.n	800b43c <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2140      	movs	r1, #64	; 0x40
 800b438:	430a      	orrs	r2, r1
 800b43a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d164      	bne.n	800b50e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b444:	e02f      	b.n	800b4a6 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	2201      	movs	r2, #1
 800b44e:	4013      	ands	r3, r2
 800b450:	2b01      	cmp	r3, #1
 800b452:	d115      	bne.n	800b480 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	330c      	adds	r3, #12
 800b45a:	001a      	movs	r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b460:	7812      	ldrb	r2, [r2, #0]
 800b462:	b2d2      	uxtb	r2, r2
 800b464:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b474:	b29b      	uxth	r3, r3
 800b476:	3b01      	subs	r3, #1
 800b478:	b29a      	uxth	r2, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b47e:	e012      	b.n	800b4a6 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b480:	f7fc fb7a 	bl	8007b78 <HAL_GetTick>
 800b484:	0002      	movs	r2, r0
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	683a      	ldr	r2, [r7, #0]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d802      	bhi.n	800b496 <HAL_SPI_Receive+0x17e>
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	3301      	adds	r3, #1
 800b494:	d102      	bne.n	800b49c <HAL_SPI_Receive+0x184>
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d104      	bne.n	800b4a6 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800b49c:	2317      	movs	r3, #23
 800b49e:	18fb      	adds	r3, r7, r3
 800b4a0:	2203      	movs	r2, #3
 800b4a2:	701a      	strb	r2, [r3, #0]
          goto error;
 800b4a4:	e04d      	b.n	800b542 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1ca      	bne.n	800b446 <HAL_SPI_Receive+0x12e>
 800b4b0:	e032      	b.n	800b518 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d113      	bne.n	800b4e8 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68da      	ldr	r2, [r3, #12]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ca:	b292      	uxth	r2, r2
 800b4cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d2:	1c9a      	adds	r2, r3, #2
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b4e6:	e012      	b.n	800b50e <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4e8:	f7fc fb46 	bl	8007b78 <HAL_GetTick>
 800b4ec:	0002      	movs	r2, r0
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d802      	bhi.n	800b4fe <HAL_SPI_Receive+0x1e6>
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	d102      	bne.n	800b504 <HAL_SPI_Receive+0x1ec>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d104      	bne.n	800b50e <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 800b504:	2317      	movs	r3, #23
 800b506:	18fb      	adds	r3, r7, r3
 800b508:	2203      	movs	r2, #3
 800b50a:	701a      	strb	r2, [r3, #0]
          goto error;
 800b50c:	e019      	b.n	800b542 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b512:	b29b      	uxth	r3, r3
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1cc      	bne.n	800b4b2 <HAL_SPI_Receive+0x19a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	0018      	movs	r0, r3
 800b520:	f000 fa6a 	bl	800b9f8 <SPI_EndRxTransaction>
 800b524:	1e03      	subs	r3, r0, #0
 800b526:	d002      	beq.n	800b52e <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2220      	movs	r2, #32
 800b52c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b532:	2b00      	cmp	r3, #0
 800b534:	d004      	beq.n	800b540 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 800b536:	2317      	movs	r3, #23
 800b538:	18fb      	adds	r3, r7, r3
 800b53a:	2201      	movs	r2, #1
 800b53c:	701a      	strb	r2, [r3, #0]
 800b53e:	e000      	b.n	800b542 <HAL_SPI_Receive+0x22a>
  }

error :
 800b540:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2251      	movs	r2, #81	; 0x51
 800b546:	2101      	movs	r1, #1
 800b548:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2250      	movs	r2, #80	; 0x50
 800b54e:	2100      	movs	r1, #0
 800b550:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b552:	2317      	movs	r3, #23
 800b554:	18fb      	adds	r3, r7, r3
 800b556:	781b      	ldrb	r3, [r3, #0]
}
 800b558:	0018      	movs	r0, r3
 800b55a:	46bd      	mov	sp, r7
 800b55c:	b007      	add	sp, #28
 800b55e:	bd90      	pop	{r4, r7, pc}
 800b560:	ffffbfff 	.word	0xffffbfff

0800b564 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b08c      	sub	sp, #48	; 0x30
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	001a      	movs	r2, r3
 800b572:	1cbb      	adds	r3, r7, #2
 800b574:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b576:	2301      	movs	r3, #1
 800b578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b57a:	232b      	movs	r3, #43	; 0x2b
 800b57c:	18fb      	adds	r3, r7, r3
 800b57e:	2200      	movs	r2, #0
 800b580:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2250      	movs	r2, #80	; 0x50
 800b586:	5c9b      	ldrb	r3, [r3, r2]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d101      	bne.n	800b590 <HAL_SPI_TransmitReceive+0x2c>
 800b58c:	2302      	movs	r3, #2
 800b58e:	e1a0      	b.n	800b8d2 <HAL_SPI_TransmitReceive+0x36e>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2250      	movs	r2, #80	; 0x50
 800b594:	2101      	movs	r1, #1
 800b596:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b598:	f7fc faee 	bl	8007b78 <HAL_GetTick>
 800b59c:	0003      	movs	r3, r0
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b5a0:	2023      	movs	r0, #35	; 0x23
 800b5a2:	183b      	adds	r3, r7, r0
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	2151      	movs	r1, #81	; 0x51
 800b5a8:	5c52      	ldrb	r2, [r2, r1]
 800b5aa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b5b2:	231a      	movs	r3, #26
 800b5b4:	18fb      	adds	r3, r7, r3
 800b5b6:	1cba      	adds	r2, r7, #2
 800b5b8:	8812      	ldrh	r2, [r2, #0]
 800b5ba:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b5bc:	183b      	adds	r3, r7, r0
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d011      	beq.n	800b5e8 <HAL_SPI_TransmitReceive+0x84>
 800b5c4:	69fa      	ldr	r2, [r7, #28]
 800b5c6:	2382      	movs	r3, #130	; 0x82
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d107      	bne.n	800b5de <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d103      	bne.n	800b5de <HAL_SPI_TransmitReceive+0x7a>
 800b5d6:	183b      	adds	r3, r7, r0
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	2b04      	cmp	r3, #4
 800b5dc:	d004      	beq.n	800b5e8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b5de:	232b      	movs	r3, #43	; 0x2b
 800b5e0:	18fb      	adds	r3, r7, r3
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	701a      	strb	r2, [r3, #0]
    goto error;
 800b5e6:	e169      	b.n	800b8bc <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d006      	beq.n	800b5fc <HAL_SPI_TransmitReceive+0x98>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d003      	beq.n	800b5fc <HAL_SPI_TransmitReceive+0x98>
 800b5f4:	1cbb      	adds	r3, r7, #2
 800b5f6:	881b      	ldrh	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d104      	bne.n	800b606 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b5fc:	232b      	movs	r3, #43	; 0x2b
 800b5fe:	18fb      	adds	r3, r7, r3
 800b600:	2201      	movs	r2, #1
 800b602:	701a      	strb	r2, [r3, #0]
    goto error;
 800b604:	e15a      	b.n	800b8bc <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2251      	movs	r2, #81	; 0x51
 800b60a:	5c9b      	ldrb	r3, [r3, r2]
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d003      	beq.n	800b61a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2251      	movs	r2, #81	; 0x51
 800b616:	2105      	movs	r1, #5
 800b618:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2200      	movs	r2, #0
 800b61e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	1cba      	adds	r2, r7, #2
 800b62a:	8812      	ldrh	r2, [r2, #0]
 800b62c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	1cba      	adds	r2, r7, #2
 800b632:	8812      	ldrh	r2, [r2, #0]
 800b634:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	1cba      	adds	r2, r7, #2
 800b640:	8812      	ldrh	r2, [r2, #0]
 800b642:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	1cba      	adds	r2, r7, #2
 800b648:	8812      	ldrh	r2, [r2, #0]
 800b64a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2240      	movs	r2, #64	; 0x40
 800b660:	4013      	ands	r3, r2
 800b662:	2b40      	cmp	r3, #64	; 0x40
 800b664:	d007      	beq.n	800b676 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2140      	movs	r1, #64	; 0x40
 800b672:	430a      	orrs	r2, r1
 800b674:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	68da      	ldr	r2, [r3, #12]
 800b67a:	2380      	movs	r3, #128	; 0x80
 800b67c:	011b      	lsls	r3, r3, #4
 800b67e:	429a      	cmp	r2, r3
 800b680:	d000      	beq.n	800b684 <HAL_SPI_TransmitReceive+0x120>
 800b682:	e07a      	b.n	800b77a <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d004      	beq.n	800b696 <HAL_SPI_TransmitReceive+0x132>
 800b68c:	231a      	movs	r3, #26
 800b68e:	18fb      	adds	r3, r7, r3
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d166      	bne.n	800b764 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69a:	881a      	ldrh	r2, [r3, #0]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a6:	1c9a      	adds	r2, r3, #2
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6ba:	e053      	b.n	800b764 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d11b      	bne.n	800b702 <HAL_SPI_TransmitReceive+0x19e>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d016      	beq.n	800b702 <HAL_SPI_TransmitReceive+0x19e>
 800b6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d113      	bne.n	800b702 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6de:	881a      	ldrh	r2, [r3, #0]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ea:	1c9a      	adds	r2, r3, #2
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b6fe:	2300      	movs	r3, #0
 800b700:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	2201      	movs	r2, #1
 800b70a:	4013      	ands	r3, r2
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d119      	bne.n	800b744 <HAL_SPI_TransmitReceive+0x1e0>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b714:	b29b      	uxth	r3, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d014      	beq.n	800b744 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68da      	ldr	r2, [r3, #12]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b724:	b292      	uxth	r2, r2
 800b726:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72c:	1c9a      	adds	r2, r3, #2
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b736:	b29b      	uxth	r3, r3
 800b738:	3b01      	subs	r3, #1
 800b73a:	b29a      	uxth	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b740:	2301      	movs	r3, #1
 800b742:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b744:	f7fc fa18 	bl	8007b78 <HAL_GetTick>
 800b748:	0002      	movs	r2, r0
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b750:	429a      	cmp	r2, r3
 800b752:	d807      	bhi.n	800b764 <HAL_SPI_TransmitReceive+0x200>
 800b754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b756:	3301      	adds	r3, #1
 800b758:	d004      	beq.n	800b764 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800b75a:	232b      	movs	r3, #43	; 0x2b
 800b75c:	18fb      	adds	r3, r7, r3
 800b75e:	2203      	movs	r2, #3
 800b760:	701a      	strb	r2, [r3, #0]
        goto error;
 800b762:	e0ab      	b.n	800b8bc <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b768:	b29b      	uxth	r3, r3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1a6      	bne.n	800b6bc <HAL_SPI_TransmitReceive+0x158>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b772:	b29b      	uxth	r3, r3
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1a1      	bne.n	800b6bc <HAL_SPI_TransmitReceive+0x158>
 800b778:	e07f      	b.n	800b87a <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d005      	beq.n	800b78e <HAL_SPI_TransmitReceive+0x22a>
 800b782:	231a      	movs	r3, #26
 800b784:	18fb      	adds	r3, r7, r3
 800b786:	881b      	ldrh	r3, [r3, #0]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d000      	beq.n	800b78e <HAL_SPI_TransmitReceive+0x22a>
 800b78c:	e06b      	b.n	800b866 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	330c      	adds	r3, #12
 800b798:	7812      	ldrb	r2, [r2, #0]
 800b79a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	b29a      	uxth	r2, r3
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7b4:	e057      	b.n	800b866 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	2202      	movs	r2, #2
 800b7be:	4013      	ands	r3, r2
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d11c      	bne.n	800b7fe <HAL_SPI_TransmitReceive+0x29a>
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d017      	beq.n	800b7fe <HAL_SPI_TransmitReceive+0x29a>
 800b7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d114      	bne.n	800b7fe <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	330c      	adds	r3, #12
 800b7de:	7812      	ldrb	r2, [r2, #0]
 800b7e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e6:	1c5a      	adds	r2, r3, #1
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	2201      	movs	r2, #1
 800b806:	4013      	ands	r3, r2
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d119      	bne.n	800b840 <HAL_SPI_TransmitReceive+0x2dc>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b810:	b29b      	uxth	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d014      	beq.n	800b840 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b820:	b2d2      	uxtb	r2, r2
 800b822:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b828:	1c5a      	adds	r2, r3, #1
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b832:	b29b      	uxth	r3, r3
 800b834:	3b01      	subs	r3, #1
 800b836:	b29a      	uxth	r2, r3
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b83c:	2301      	movs	r3, #1
 800b83e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b840:	f7fc f99a 	bl	8007b78 <HAL_GetTick>
 800b844:	0002      	movs	r2, r0
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d802      	bhi.n	800b856 <HAL_SPI_TransmitReceive+0x2f2>
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	3301      	adds	r3, #1
 800b854:	d102      	bne.n	800b85c <HAL_SPI_TransmitReceive+0x2f8>
 800b856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d104      	bne.n	800b866 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800b85c:	232b      	movs	r3, #43	; 0x2b
 800b85e:	18fb      	adds	r3, r7, r3
 800b860:	2203      	movs	r2, #3
 800b862:	701a      	strb	r2, [r3, #0]
        goto error;
 800b864:	e02a      	b.n	800b8bc <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1a2      	bne.n	800b7b6 <HAL_SPI_TransmitReceive+0x252>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b874:	b29b      	uxth	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d19d      	bne.n	800b7b6 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	0018      	movs	r0, r3
 800b882:	f000 f923 	bl	800bacc <SPI_EndRxTxTransaction>
 800b886:	1e03      	subs	r3, r0, #0
 800b888:	d007      	beq.n	800b89a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800b88a:	232b      	movs	r3, #43	; 0x2b
 800b88c:	18fb      	adds	r3, r7, r3
 800b88e:	2201      	movs	r2, #1
 800b890:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2220      	movs	r2, #32
 800b896:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b898:	e010      	b.n	800b8bc <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10b      	bne.n	800b8ba <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	617b      	str	r3, [r7, #20]
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	e000      	b.n	800b8bc <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800b8ba:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2251      	movs	r2, #81	; 0x51
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2250      	movs	r2, #80	; 0x50
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b8cc:	232b      	movs	r3, #43	; 0x2b
 800b8ce:	18fb      	adds	r3, r7, r3
 800b8d0:	781b      	ldrb	r3, [r3, #0]
}
 800b8d2:	0018      	movs	r0, r3
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	b00c      	add	sp, #48	; 0x30
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	1dfb      	adds	r3, r7, #7
 800b8ea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b8ec:	f7fc f944 	bl	8007b78 <HAL_GetTick>
 800b8f0:	0002      	movs	r2, r0
 800b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f4:	1a9b      	subs	r3, r3, r2
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	18d3      	adds	r3, r2, r3
 800b8fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b8fc:	f7fc f93c 	bl	8007b78 <HAL_GetTick>
 800b900:	0003      	movs	r3, r0
 800b902:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b904:	4b3a      	ldr	r3, [pc, #232]	; (800b9f0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	015b      	lsls	r3, r3, #5
 800b90a:	0d1b      	lsrs	r3, r3, #20
 800b90c:	69fa      	ldr	r2, [r7, #28]
 800b90e:	4353      	muls	r3, r2
 800b910:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b912:	e058      	b.n	800b9c6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	3301      	adds	r3, #1
 800b918:	d055      	beq.n	800b9c6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b91a:	f7fc f92d 	bl	8007b78 <HAL_GetTick>
 800b91e:	0002      	movs	r2, r0
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	69fa      	ldr	r2, [r7, #28]
 800b926:	429a      	cmp	r2, r3
 800b928:	d902      	bls.n	800b930 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d142      	bne.n	800b9b6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	21e0      	movs	r1, #224	; 0xe0
 800b93c:	438a      	bics	r2, r1
 800b93e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	685a      	ldr	r2, [r3, #4]
 800b944:	2382      	movs	r3, #130	; 0x82
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	429a      	cmp	r2, r3
 800b94a:	d113      	bne.n	800b974 <SPI_WaitFlagStateUntilTimeout+0x98>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	2380      	movs	r3, #128	; 0x80
 800b952:	021b      	lsls	r3, r3, #8
 800b954:	429a      	cmp	r2, r3
 800b956:	d005      	beq.n	800b964 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	689a      	ldr	r2, [r3, #8]
 800b95c:	2380      	movs	r3, #128	; 0x80
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	429a      	cmp	r2, r3
 800b962:	d107      	bne.n	800b974 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2140      	movs	r1, #64	; 0x40
 800b970:	438a      	bics	r2, r1
 800b972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b978:	2380      	movs	r3, #128	; 0x80
 800b97a:	019b      	lsls	r3, r3, #6
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d110      	bne.n	800b9a2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	491a      	ldr	r1, [pc, #104]	; (800b9f4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b98c:	400a      	ands	r2, r1
 800b98e:	601a      	str	r2, [r3, #0]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2180      	movs	r1, #128	; 0x80
 800b99c:	0189      	lsls	r1, r1, #6
 800b99e:	430a      	orrs	r2, r1
 800b9a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2251      	movs	r2, #81	; 0x51
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2250      	movs	r2, #80	; 0x50
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e017      	b.n	800b9e6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	425a      	negs	r2, r3
 800b9d6:	4153      	adcs	r3, r2
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	001a      	movs	r2, r3
 800b9dc:	1dfb      	adds	r3, r7, #7
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d197      	bne.n	800b914 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	0018      	movs	r0, r3
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	b008      	add	sp, #32
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	46c0      	nop			; (mov r8, r8)
 800b9f0:	20000020 	.word	0x20000020
 800b9f4:	ffffdfff 	.word	0xffffdfff

0800b9f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	2382      	movs	r3, #130	; 0x82
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d113      	bne.n	800ba38 <SPI_EndRxTransaction+0x40>
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	689a      	ldr	r2, [r3, #8]
 800ba14:	2380      	movs	r3, #128	; 0x80
 800ba16:	021b      	lsls	r3, r3, #8
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d005      	beq.n	800ba28 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	689a      	ldr	r2, [r3, #8]
 800ba20:	2380      	movs	r3, #128	; 0x80
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d107      	bne.n	800ba38 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2140      	movs	r1, #64	; 0x40
 800ba34:	438a      	bics	r2, r1
 800ba36:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	2382      	movs	r3, #130	; 0x82
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d12b      	bne.n	800ba9c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	689a      	ldr	r2, [r3, #8]
 800ba48:	2380      	movs	r3, #128	; 0x80
 800ba4a:	00db      	lsls	r3, r3, #3
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d012      	beq.n	800ba76 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	0013      	movs	r3, r2
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2180      	movs	r1, #128	; 0x80
 800ba5e:	f7ff ff3d 	bl	800b8dc <SPI_WaitFlagStateUntilTimeout>
 800ba62:	1e03      	subs	r3, r0, #0
 800ba64:	d02d      	beq.n	800bac2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	431a      	orrs	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ba72:	2303      	movs	r3, #3
 800ba74:	e026      	b.n	800bac4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	0013      	movs	r3, r2
 800ba80:	2200      	movs	r2, #0
 800ba82:	2101      	movs	r1, #1
 800ba84:	f7ff ff2a 	bl	800b8dc <SPI_WaitFlagStateUntilTimeout>
 800ba88:	1e03      	subs	r3, r0, #0
 800ba8a:	d01a      	beq.n	800bac2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba90:	2220      	movs	r2, #32
 800ba92:	431a      	orrs	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	e013      	b.n	800bac4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	0013      	movs	r3, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	2101      	movs	r1, #1
 800baaa:	f7ff ff17 	bl	800b8dc <SPI_WaitFlagStateUntilTimeout>
 800baae:	1e03      	subs	r3, r0, #0
 800bab0:	d007      	beq.n	800bac2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bab6:	2220      	movs	r2, #32
 800bab8:	431a      	orrs	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	e000      	b.n	800bac4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	0018      	movs	r0, r3
 800bac6:	46bd      	mov	sp, r7
 800bac8:	b004      	add	sp, #16
 800baca:	bd80      	pop	{r7, pc}

0800bacc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b088      	sub	sp, #32
 800bad0:	af02      	add	r7, sp, #8
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bad8:	4b1d      	ldr	r3, [pc, #116]	; (800bb50 <SPI_EndRxTxTransaction+0x84>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	491d      	ldr	r1, [pc, #116]	; (800bb54 <SPI_EndRxTxTransaction+0x88>)
 800bade:	0018      	movs	r0, r3
 800bae0:	f7f4 fb12 	bl	8000108 <__udivsi3>
 800bae4:	0003      	movs	r3, r0
 800bae6:	001a      	movs	r2, r3
 800bae8:	0013      	movs	r3, r2
 800baea:	015b      	lsls	r3, r3, #5
 800baec:	1a9b      	subs	r3, r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	189b      	adds	r3, r3, r2
 800baf2:	00db      	lsls	r3, r3, #3
 800baf4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	2382      	movs	r3, #130	; 0x82
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d112      	bne.n	800bb28 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	0013      	movs	r3, r2
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2180      	movs	r1, #128	; 0x80
 800bb10:	f7ff fee4 	bl	800b8dc <SPI_WaitFlagStateUntilTimeout>
 800bb14:	1e03      	subs	r3, r0, #0
 800bb16:	d016      	beq.n	800bb46 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb1c:	2220      	movs	r2, #32
 800bb1e:	431a      	orrs	r2, r3
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bb24:	2303      	movs	r3, #3
 800bb26:	e00f      	b.n	800bb48 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00a      	beq.n	800bb44 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	2280      	movs	r2, #128	; 0x80
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	2b80      	cmp	r3, #128	; 0x80
 800bb40:	d0f2      	beq.n	800bb28 <SPI_EndRxTxTransaction+0x5c>
 800bb42:	e000      	b.n	800bb46 <SPI_EndRxTxTransaction+0x7a>
        break;
 800bb44:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	0018      	movs	r0, r3
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	b006      	add	sp, #24
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	20000020 	.word	0x20000020
 800bb54:	016e3600 	.word	0x016e3600

0800bb58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e032      	b.n	800bbd0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2239      	movs	r2, #57	; 0x39
 800bb6e:	5c9b      	ldrb	r3, [r3, r2]
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d107      	bne.n	800bb86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2238      	movs	r2, #56	; 0x38
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	0018      	movs	r0, r3
 800bb82:	f7fb fd65 	bl	8007650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2239      	movs	r2, #57	; 0x39
 800bb8a:	2102      	movs	r1, #2
 800bb8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	3304      	adds	r3, #4
 800bb96:	0019      	movs	r1, r3
 800bb98:	0010      	movs	r0, r2
 800bb9a:	f000 f99f 	bl	800bedc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	223e      	movs	r2, #62	; 0x3e
 800bba2:	2101      	movs	r1, #1
 800bba4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	223a      	movs	r2, #58	; 0x3a
 800bbaa:	2101      	movs	r1, #1
 800bbac:	5499      	strb	r1, [r3, r2]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	223b      	movs	r2, #59	; 0x3b
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	5499      	strb	r1, [r3, r2]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	223c      	movs	r2, #60	; 0x3c
 800bbba:	2101      	movs	r1, #1
 800bbbc:	5499      	strb	r1, [r3, r2]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	223d      	movs	r2, #61	; 0x3d
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2239      	movs	r2, #57	; 0x39
 800bbca:	2101      	movs	r1, #1
 800bbcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	b002      	add	sp, #8
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2239      	movs	r2, #57	; 0x39
 800bbe4:	5c9b      	ldrb	r3, [r3, r2]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d001      	beq.n	800bbf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e036      	b.n	800bc5e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2239      	movs	r2, #57	; 0x39
 800bbf4:	2102      	movs	r1, #2
 800bbf6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68da      	ldr	r2, [r3, #12]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2101      	movs	r1, #1
 800bc04:	430a      	orrs	r2, r1
 800bc06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	2380      	movs	r3, #128	; 0x80
 800bc0e:	05db      	lsls	r3, r3, #23
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d009      	beq.n	800bc28 <HAL_TIM_Base_Start_IT+0x50>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a13      	ldr	r2, [pc, #76]	; (800bc68 <HAL_TIM_Base_Start_IT+0x90>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d004      	beq.n	800bc28 <HAL_TIM_Base_Start_IT+0x50>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a12      	ldr	r2, [pc, #72]	; (800bc6c <HAL_TIM_Base_Start_IT+0x94>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d111      	bne.n	800bc4c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	2207      	movs	r2, #7
 800bc30:	4013      	ands	r3, r2
 800bc32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2b06      	cmp	r3, #6
 800bc38:	d010      	beq.n	800bc5c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2101      	movs	r1, #1
 800bc46:	430a      	orrs	r2, r1
 800bc48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc4a:	e007      	b.n	800bc5c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2101      	movs	r1, #1
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	0018      	movs	r0, r3
 800bc60:	46bd      	mov	sp, r7
 800bc62:	b004      	add	sp, #16
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	46c0      	nop			; (mov r8, r8)
 800bc68:	40010800 	.word	0x40010800
 800bc6c:	40011400 	.word	0x40011400

0800bc70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68da      	ldr	r2, [r3, #12]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2101      	movs	r1, #1
 800bc84:	438a      	bics	r2, r1
 800bc86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	4a0a      	ldr	r2, [pc, #40]	; (800bcb8 <HAL_TIM_Base_Stop_IT+0x48>)
 800bc90:	4013      	ands	r3, r2
 800bc92:	d107      	bne.n	800bca4 <HAL_TIM_Base_Stop_IT+0x34>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2101      	movs	r1, #1
 800bca0:	438a      	bics	r2, r1
 800bca2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2239      	movs	r2, #57	; 0x39
 800bca8:	2101      	movs	r1, #1
 800bcaa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	0018      	movs	r0, r3
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	b002      	add	sp, #8
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	46c0      	nop			; (mov r8, r8)
 800bcb8:	00001111 	.word	0x00001111

0800bcbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	2202      	movs	r2, #2
 800bccc:	4013      	ands	r3, r2
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	d124      	bne.n	800bd1c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	2202      	movs	r2, #2
 800bcda:	4013      	ands	r3, r2
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d11d      	bne.n	800bd1c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2203      	movs	r2, #3
 800bce6:	4252      	negs	r2, r2
 800bce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2201      	movs	r2, #1
 800bcee:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	2203      	movs	r2, #3
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	d004      	beq.n	800bd06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	0018      	movs	r0, r3
 800bd00:	f000 f8d4 	bl	800beac <HAL_TIM_IC_CaptureCallback>
 800bd04:	e007      	b.n	800bd16 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	0018      	movs	r0, r3
 800bd0a:	f000 f8c7 	bl	800be9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	0018      	movs	r0, r3
 800bd12:	f000 f8d3 	bl	800bebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	2204      	movs	r2, #4
 800bd24:	4013      	ands	r3, r2
 800bd26:	2b04      	cmp	r3, #4
 800bd28:	d125      	bne.n	800bd76 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	2204      	movs	r2, #4
 800bd32:	4013      	ands	r3, r2
 800bd34:	2b04      	cmp	r3, #4
 800bd36:	d11e      	bne.n	800bd76 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2205      	movs	r2, #5
 800bd3e:	4252      	negs	r2, r2
 800bd40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2202      	movs	r2, #2
 800bd46:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	699a      	ldr	r2, [r3, #24]
 800bd4e:	23c0      	movs	r3, #192	; 0xc0
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4013      	ands	r3, r2
 800bd54:	d004      	beq.n	800bd60 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	0018      	movs	r0, r3
 800bd5a:	f000 f8a7 	bl	800beac <HAL_TIM_IC_CaptureCallback>
 800bd5e:	e007      	b.n	800bd70 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	0018      	movs	r0, r3
 800bd64:	f000 f89a 	bl	800be9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	0018      	movs	r0, r3
 800bd6c:	f000 f8a6 	bl	800bebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	2208      	movs	r2, #8
 800bd7e:	4013      	ands	r3, r2
 800bd80:	2b08      	cmp	r3, #8
 800bd82:	d124      	bne.n	800bdce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	2208      	movs	r2, #8
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	2b08      	cmp	r3, #8
 800bd90:	d11d      	bne.n	800bdce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2209      	movs	r2, #9
 800bd98:	4252      	negs	r2, r2
 800bd9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2204      	movs	r2, #4
 800bda0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	2203      	movs	r2, #3
 800bdaa:	4013      	ands	r3, r2
 800bdac:	d004      	beq.n	800bdb8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	0018      	movs	r0, r3
 800bdb2:	f000 f87b 	bl	800beac <HAL_TIM_IC_CaptureCallback>
 800bdb6:	e007      	b.n	800bdc8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	0018      	movs	r0, r3
 800bdbc:	f000 f86e 	bl	800be9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	0018      	movs	r0, r3
 800bdc4:	f000 f87a 	bl	800bebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	2210      	movs	r2, #16
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	2b10      	cmp	r3, #16
 800bdda:	d125      	bne.n	800be28 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	2210      	movs	r2, #16
 800bde4:	4013      	ands	r3, r2
 800bde6:	2b10      	cmp	r3, #16
 800bde8:	d11e      	bne.n	800be28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2211      	movs	r2, #17
 800bdf0:	4252      	negs	r2, r2
 800bdf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2208      	movs	r2, #8
 800bdf8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	69da      	ldr	r2, [r3, #28]
 800be00:	23c0      	movs	r3, #192	; 0xc0
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	4013      	ands	r3, r2
 800be06:	d004      	beq.n	800be12 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	0018      	movs	r0, r3
 800be0c:	f000 f84e 	bl	800beac <HAL_TIM_IC_CaptureCallback>
 800be10:	e007      	b.n	800be22 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	0018      	movs	r0, r3
 800be16:	f000 f841 	bl	800be9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	0018      	movs	r0, r3
 800be1e:	f000 f84d 	bl	800bebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	2201      	movs	r2, #1
 800be30:	4013      	ands	r3, r2
 800be32:	2b01      	cmp	r3, #1
 800be34:	d10f      	bne.n	800be56 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	2201      	movs	r2, #1
 800be3e:	4013      	ands	r3, r2
 800be40:	2b01      	cmp	r3, #1
 800be42:	d108      	bne.n	800be56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2202      	movs	r2, #2
 800be4a:	4252      	negs	r2, r2
 800be4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	0018      	movs	r0, r3
 800be52:	f000 f81b 	bl	800be8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	2240      	movs	r2, #64	; 0x40
 800be5e:	4013      	ands	r3, r2
 800be60:	2b40      	cmp	r3, #64	; 0x40
 800be62:	d10f      	bne.n	800be84 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	2240      	movs	r2, #64	; 0x40
 800be6c:	4013      	ands	r3, r2
 800be6e:	2b40      	cmp	r3, #64	; 0x40
 800be70:	d108      	bne.n	800be84 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2241      	movs	r2, #65	; 0x41
 800be78:	4252      	negs	r2, r2
 800be7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	0018      	movs	r0, r3
 800be80:	f000 f824 	bl	800becc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be84:	46c0      	nop			; (mov r8, r8)
 800be86:	46bd      	mov	sp, r7
 800be88:	b002      	add	sp, #8
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800be94:	46c0      	nop			; (mov r8, r8)
 800be96:	46bd      	mov	sp, r7
 800be98:	b002      	add	sp, #8
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bea4:	46c0      	nop			; (mov r8, r8)
 800bea6:	46bd      	mov	sp, r7
 800bea8:	b002      	add	sp, #8
 800beaa:	bd80      	pop	{r7, pc}

0800beac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800beb4:	46c0      	nop			; (mov r8, r8)
 800beb6:	46bd      	mov	sp, r7
 800beb8:	b002      	add	sp, #8
 800beba:	bd80      	pop	{r7, pc}

0800bebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bec4:	46c0      	nop			; (mov r8, r8)
 800bec6:	46bd      	mov	sp, r7
 800bec8:	b002      	add	sp, #8
 800beca:	bd80      	pop	{r7, pc}

0800becc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bed4:	46c0      	nop			; (mov r8, r8)
 800bed6:	46bd      	mov	sp, r7
 800bed8:	b002      	add	sp, #8
 800beda:	bd80      	pop	{r7, pc}

0800bedc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	2380      	movs	r3, #128	; 0x80
 800bef0:	05db      	lsls	r3, r3, #23
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d007      	beq.n	800bf06 <TIM_Base_SetConfig+0x2a>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a1f      	ldr	r2, [pc, #124]	; (800bf78 <TIM_Base_SetConfig+0x9c>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d003      	beq.n	800bf06 <TIM_Base_SetConfig+0x2a>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a1e      	ldr	r2, [pc, #120]	; (800bf7c <TIM_Base_SetConfig+0xa0>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d108      	bne.n	800bf18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2270      	movs	r2, #112	; 0x70
 800bf0a:	4393      	bics	r3, r2
 800bf0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	4313      	orrs	r3, r2
 800bf16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	2380      	movs	r3, #128	; 0x80
 800bf1c:	05db      	lsls	r3, r3, #23
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d007      	beq.n	800bf32 <TIM_Base_SetConfig+0x56>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a14      	ldr	r2, [pc, #80]	; (800bf78 <TIM_Base_SetConfig+0x9c>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d003      	beq.n	800bf32 <TIM_Base_SetConfig+0x56>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a13      	ldr	r2, [pc, #76]	; (800bf7c <TIM_Base_SetConfig+0xa0>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d108      	bne.n	800bf44 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	4a12      	ldr	r2, [pc, #72]	; (800bf80 <TIM_Base_SetConfig+0xa4>)
 800bf36:	4013      	ands	r3, r2
 800bf38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2280      	movs	r2, #128	; 0x80
 800bf48:	4393      	bics	r3, r2
 800bf4a:	001a      	movs	r2, r3
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	689a      	ldr	r2, [r3, #8]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	615a      	str	r2, [r3, #20]
}
 800bf70:	46c0      	nop			; (mov r8, r8)
 800bf72:	46bd      	mov	sp, r7
 800bf74:	b004      	add	sp, #16
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	40010800 	.word	0x40010800
 800bf7c:	40011400 	.word	0x40011400
 800bf80:	fffffcff 	.word	0xfffffcff

0800bf84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2238      	movs	r2, #56	; 0x38
 800bf92:	5c9b      	ldrb	r3, [r3, r2]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d101      	bne.n	800bf9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf98:	2302      	movs	r3, #2
 800bf9a:	e042      	b.n	800c022 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2238      	movs	r2, #56	; 0x38
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2239      	movs	r2, #57	; 0x39
 800bfa8:	2102      	movs	r1, #2
 800bfaa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2270      	movs	r2, #112	; 0x70
 800bfc0:	4393      	bics	r3, r2
 800bfc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	2380      	movs	r3, #128	; 0x80
 800bfdc:	05db      	lsls	r3, r3, #23
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d009      	beq.n	800bff6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a11      	ldr	r2, [pc, #68]	; (800c02c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d004      	beq.n	800bff6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a0f      	ldr	r2, [pc, #60]	; (800c030 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d10c      	bne.n	800c010 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2280      	movs	r2, #128	; 0x80
 800bffa:	4393      	bics	r3, r2
 800bffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	4313      	orrs	r3, r2
 800c006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2239      	movs	r2, #57	; 0x39
 800c014:	2101      	movs	r1, #1
 800c016:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2238      	movs	r2, #56	; 0x38
 800c01c:	2100      	movs	r1, #0
 800c01e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	0018      	movs	r0, r3
 800c024:	46bd      	mov	sp, r7
 800c026:	b004      	add	sp, #16
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	46c0      	nop			; (mov r8, r8)
 800c02c:	40010800 	.word	0x40010800
 800c030:	40011400 	.word	0x40011400

0800c034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e044      	b.n	800c0d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d107      	bne.n	800c05e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2274      	movs	r2, #116	; 0x74
 800c052:	2100      	movs	r1, #0
 800c054:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	0018      	movs	r0, r3
 800c05a:	f7fb fb71 	bl	8007740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2224      	movs	r2, #36	; 0x24
 800c062:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2101      	movs	r1, #1
 800c070:	438a      	bics	r2, r1
 800c072:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	0018      	movs	r0, r3
 800c078:	f000 f94c 	bl	800c314 <UART_SetConfig>
 800c07c:	0003      	movs	r3, r0
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d101      	bne.n	800c086 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	e024      	b.n	800c0d0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	0018      	movs	r0, r3
 800c092:	f000 fbdf 	bl	800c854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	685a      	ldr	r2, [r3, #4]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	490d      	ldr	r1, [pc, #52]	; (800c0d8 <HAL_UART_Init+0xa4>)
 800c0a2:	400a      	ands	r2, r1
 800c0a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	212a      	movs	r1, #42	; 0x2a
 800c0b2:	438a      	bics	r2, r1
 800c0b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	430a      	orrs	r2, r1
 800c0c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	0018      	movs	r0, r3
 800c0ca:	f000 fc77 	bl	800c9bc <UART_CheckIdleState>
 800c0ce:	0003      	movs	r3, r0
}
 800c0d0:	0018      	movs	r0, r3
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	b002      	add	sp, #8
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	ffffb7ff 	.word	0xffffb7ff

0800c0dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b08a      	sub	sp, #40	; 0x28
 800c0e0:	af02      	add	r7, sp, #8
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	603b      	str	r3, [r7, #0]
 800c0e8:	1dbb      	adds	r3, r7, #6
 800c0ea:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0f0:	2b20      	cmp	r3, #32
 800c0f2:	d000      	beq.n	800c0f6 <HAL_UART_Transmit+0x1a>
 800c0f4:	e095      	b.n	800c222 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d003      	beq.n	800c104 <HAL_UART_Transmit+0x28>
 800c0fc:	1dbb      	adds	r3, r7, #6
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	e08d      	b.n	800c224 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	689a      	ldr	r2, [r3, #8]
 800c10c:	2380      	movs	r3, #128	; 0x80
 800c10e:	015b      	lsls	r3, r3, #5
 800c110:	429a      	cmp	r2, r3
 800c112:	d109      	bne.n	800c128 <HAL_UART_Transmit+0x4c>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d105      	bne.n	800c128 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	2201      	movs	r2, #1
 800c120:	4013      	ands	r3, r2
 800c122:	d001      	beq.n	800c128 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	e07d      	b.n	800c224 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2274      	movs	r2, #116	; 0x74
 800c12c:	5c9b      	ldrb	r3, [r3, r2]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d101      	bne.n	800c136 <HAL_UART_Transmit+0x5a>
 800c132:	2302      	movs	r3, #2
 800c134:	e076      	b.n	800c224 <HAL_UART_Transmit+0x148>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2274      	movs	r2, #116	; 0x74
 800c13a:	2101      	movs	r1, #1
 800c13c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2280      	movs	r2, #128	; 0x80
 800c142:	2100      	movs	r1, #0
 800c144:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2221      	movs	r2, #33	; 0x21
 800c14a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c14c:	f7fb fd14 	bl	8007b78 <HAL_GetTick>
 800c150:	0003      	movs	r3, r0
 800c152:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	1dba      	adds	r2, r7, #6
 800c158:	2150      	movs	r1, #80	; 0x50
 800c15a:	8812      	ldrh	r2, [r2, #0]
 800c15c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	1dba      	adds	r2, r7, #6
 800c162:	2152      	movs	r1, #82	; 0x52
 800c164:	8812      	ldrh	r2, [r2, #0]
 800c166:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	689a      	ldr	r2, [r3, #8]
 800c16c:	2380      	movs	r3, #128	; 0x80
 800c16e:	015b      	lsls	r3, r3, #5
 800c170:	429a      	cmp	r2, r3
 800c172:	d108      	bne.n	800c186 <HAL_UART_Transmit+0xaa>
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d104      	bne.n	800c186 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800c17c:	2300      	movs	r3, #0
 800c17e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	61bb      	str	r3, [r7, #24]
 800c184:	e003      	b.n	800c18e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2274      	movs	r2, #116	; 0x74
 800c192:	2100      	movs	r1, #0
 800c194:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800c196:	e02c      	b.n	800c1f2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c198:	697a      	ldr	r2, [r7, #20]
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	0013      	movs	r3, r2
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2180      	movs	r1, #128	; 0x80
 800c1a6:	f000 fc51 	bl	800ca4c <UART_WaitOnFlagUntilTimeout>
 800c1aa:	1e03      	subs	r3, r0, #0
 800c1ac:	d001      	beq.n	800c1b2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	e038      	b.n	800c224 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10b      	bne.n	800c1d0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	881b      	ldrh	r3, [r3, #0]
 800c1bc:	001a      	movs	r2, r3
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	05d2      	lsls	r2, r2, #23
 800c1c4:	0dd2      	lsrs	r2, r2, #23
 800c1c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	3302      	adds	r3, #2
 800c1cc:	61bb      	str	r3, [r7, #24]
 800c1ce:	e007      	b.n	800c1e0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	781a      	ldrb	r2, [r3, #0]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2252      	movs	r2, #82	; 0x52
 800c1e4:	5a9b      	ldrh	r3, [r3, r2]
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	b299      	uxth	r1, r3
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2252      	movs	r2, #82	; 0x52
 800c1f0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2252      	movs	r2, #82	; 0x52
 800c1f6:	5a9b      	ldrh	r3, [r3, r2]
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1cc      	bne.n	800c198 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	0013      	movs	r3, r2
 800c208:	2200      	movs	r2, #0
 800c20a:	2140      	movs	r1, #64	; 0x40
 800c20c:	f000 fc1e 	bl	800ca4c <UART_WaitOnFlagUntilTimeout>
 800c210:	1e03      	subs	r3, r0, #0
 800c212:	d001      	beq.n	800c218 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800c214:	2303      	movs	r3, #3
 800c216:	e005      	b.n	800c224 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2220      	movs	r2, #32
 800c21c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	e000      	b.n	800c224 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800c222:	2302      	movs	r3, #2
  }
}
 800c224:	0018      	movs	r0, r3
 800c226:	46bd      	mov	sp, r7
 800c228:	b008      	add	sp, #32
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	1dbb      	adds	r3, r7, #6
 800c238:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c23e:	2b20      	cmp	r3, #32
 800c240:	d144      	bne.n	800c2cc <HAL_UART_Receive_DMA+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d003      	beq.n	800c250 <HAL_UART_Receive_DMA+0x24>
 800c248:	1dbb      	adds	r3, r7, #6
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d101      	bne.n	800c254 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	e03c      	b.n	800c2ce <HAL_UART_Receive_DMA+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	689a      	ldr	r2, [r3, #8]
 800c258:	2380      	movs	r3, #128	; 0x80
 800c25a:	015b      	lsls	r3, r3, #5
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d109      	bne.n	800c274 <HAL_UART_Receive_DMA+0x48>
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d105      	bne.n	800c274 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	2201      	movs	r2, #1
 800c26c:	4013      	ands	r3, r2
 800c26e:	d001      	beq.n	800c274 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	e02c      	b.n	800c2ce <HAL_UART_Receive_DMA+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2274      	movs	r2, #116	; 0x74
 800c278:	5c9b      	ldrb	r3, [r3, r2]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d101      	bne.n	800c282 <HAL_UART_Receive_DMA+0x56>
 800c27e:	2302      	movs	r3, #2
 800c280:	e025      	b.n	800c2ce <HAL_UART_Receive_DMA+0xa2>
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2274      	movs	r2, #116	; 0x74
 800c286:	2101      	movs	r1, #1
 800c288:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a10      	ldr	r2, [pc, #64]	; (800c2d8 <HAL_UART_Receive_DMA+0xac>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d00f      	beq.n	800c2ba <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	685a      	ldr	r2, [r3, #4]
 800c2a0:	2380      	movs	r3, #128	; 0x80
 800c2a2:	041b      	lsls	r3, r3, #16
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	d008      	beq.n	800c2ba <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2180      	movs	r1, #128	; 0x80
 800c2b4:	04c9      	lsls	r1, r1, #19
 800c2b6:	430a      	orrs	r2, r1
 800c2b8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800c2ba:	1dbb      	adds	r3, r7, #6
 800c2bc:	881a      	ldrh	r2, [r3, #0]
 800c2be:	68b9      	ldr	r1, [r7, #8]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	0018      	movs	r0, r3
 800c2c4:	f000 fc40 	bl	800cb48 <UART_Start_Receive_DMA>
 800c2c8:	0003      	movs	r3, r0
 800c2ca:	e000      	b.n	800c2ce <HAL_UART_Receive_DMA+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800c2cc:	2302      	movs	r3, #2
  }
}
 800c2ce:	0018      	movs	r0, r3
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	b004      	add	sp, #16
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	46c0      	nop			; (mov r8, r8)
 800c2d8:	40004800 	.word	0x40004800

0800c2dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c2e4:	46c0      	nop			; (mov r8, r8)
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	b002      	add	sp, #8
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c2f4:	46c0      	nop			; (mov r8, r8)
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	b002      	add	sp, #8
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	000a      	movs	r2, r1
 800c306:	1cbb      	adds	r3, r7, #2
 800c308:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c30a:	46c0      	nop			; (mov r8, r8)
 800c30c:	46bd      	mov	sp, r7
 800c30e:	b002      	add	sp, #8
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c314:	b5b0      	push	{r4, r5, r7, lr}
 800c316:	b08e      	sub	sp, #56	; 0x38
 800c318:	af00      	add	r7, sp, #0
 800c31a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c31c:	231a      	movs	r3, #26
 800c31e:	2218      	movs	r2, #24
 800c320:	4694      	mov	ip, r2
 800c322:	44bc      	add	ip, r7
 800c324:	4463      	add	r3, ip
 800c326:	2200      	movs	r2, #0
 800c328:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	689a      	ldr	r2, [r3, #8]
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	691b      	ldr	r3, [r3, #16]
 800c332:	431a      	orrs	r2, r3
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	695b      	ldr	r3, [r3, #20]
 800c338:	431a      	orrs	r2, r3
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	4313      	orrs	r3, r2
 800c340:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4ac1      	ldr	r2, [pc, #772]	; (800c650 <UART_SetConfig+0x33c>)
 800c34a:	4013      	ands	r3, r2
 800c34c:	0019      	movs	r1, r3
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c354:	430a      	orrs	r2, r1
 800c356:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	4abd      	ldr	r2, [pc, #756]	; (800c654 <UART_SetConfig+0x340>)
 800c360:	4013      	ands	r3, r2
 800c362:	0019      	movs	r1, r3
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	68da      	ldr	r2, [r3, #12]
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	430a      	orrs	r2, r1
 800c36e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4ab7      	ldr	r2, [pc, #732]	; (800c658 <UART_SetConfig+0x344>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d004      	beq.n	800c38a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	6a1b      	ldr	r3, [r3, #32]
 800c384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c386:	4313      	orrs	r3, r2
 800c388:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	4ab2      	ldr	r2, [pc, #712]	; (800c65c <UART_SetConfig+0x348>)
 800c392:	4013      	ands	r3, r2
 800c394:	0019      	movs	r1, r3
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c39c:	430a      	orrs	r2, r1
 800c39e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4aae      	ldr	r2, [pc, #696]	; (800c660 <UART_SetConfig+0x34c>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d136      	bne.n	800c418 <UART_SetConfig+0x104>
 800c3aa:	4bae      	ldr	r3, [pc, #696]	; (800c664 <UART_SetConfig+0x350>)
 800c3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ae:	2203      	movs	r2, #3
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d020      	beq.n	800c3f8 <UART_SetConfig+0xe4>
 800c3b6:	d827      	bhi.n	800c408 <UART_SetConfig+0xf4>
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d00d      	beq.n	800c3d8 <UART_SetConfig+0xc4>
 800c3bc:	d824      	bhi.n	800c408 <UART_SetConfig+0xf4>
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <UART_SetConfig+0xb4>
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d010      	beq.n	800c3e8 <UART_SetConfig+0xd4>
 800c3c6:	e01f      	b.n	800c408 <UART_SetConfig+0xf4>
 800c3c8:	231b      	movs	r3, #27
 800c3ca:	2218      	movs	r2, #24
 800c3cc:	4694      	mov	ip, r2
 800c3ce:	44bc      	add	ip, r7
 800c3d0:	4463      	add	r3, ip
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	701a      	strb	r2, [r3, #0]
 800c3d6:	e0ab      	b.n	800c530 <UART_SetConfig+0x21c>
 800c3d8:	231b      	movs	r3, #27
 800c3da:	2218      	movs	r2, #24
 800c3dc:	4694      	mov	ip, r2
 800c3de:	44bc      	add	ip, r7
 800c3e0:	4463      	add	r3, ip
 800c3e2:	2202      	movs	r2, #2
 800c3e4:	701a      	strb	r2, [r3, #0]
 800c3e6:	e0a3      	b.n	800c530 <UART_SetConfig+0x21c>
 800c3e8:	231b      	movs	r3, #27
 800c3ea:	2218      	movs	r2, #24
 800c3ec:	4694      	mov	ip, r2
 800c3ee:	44bc      	add	ip, r7
 800c3f0:	4463      	add	r3, ip
 800c3f2:	2204      	movs	r2, #4
 800c3f4:	701a      	strb	r2, [r3, #0]
 800c3f6:	e09b      	b.n	800c530 <UART_SetConfig+0x21c>
 800c3f8:	231b      	movs	r3, #27
 800c3fa:	2218      	movs	r2, #24
 800c3fc:	4694      	mov	ip, r2
 800c3fe:	44bc      	add	ip, r7
 800c400:	4463      	add	r3, ip
 800c402:	2208      	movs	r2, #8
 800c404:	701a      	strb	r2, [r3, #0]
 800c406:	e093      	b.n	800c530 <UART_SetConfig+0x21c>
 800c408:	231b      	movs	r3, #27
 800c40a:	2218      	movs	r2, #24
 800c40c:	4694      	mov	ip, r2
 800c40e:	44bc      	add	ip, r7
 800c410:	4463      	add	r3, ip
 800c412:	2210      	movs	r2, #16
 800c414:	701a      	strb	r2, [r3, #0]
 800c416:	e08b      	b.n	800c530 <UART_SetConfig+0x21c>
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a92      	ldr	r2, [pc, #584]	; (800c668 <UART_SetConfig+0x354>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d136      	bne.n	800c490 <UART_SetConfig+0x17c>
 800c422:	4b90      	ldr	r3, [pc, #576]	; (800c664 <UART_SetConfig+0x350>)
 800c424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c426:	220c      	movs	r2, #12
 800c428:	4013      	ands	r3, r2
 800c42a:	2b0c      	cmp	r3, #12
 800c42c:	d020      	beq.n	800c470 <UART_SetConfig+0x15c>
 800c42e:	d827      	bhi.n	800c480 <UART_SetConfig+0x16c>
 800c430:	2b08      	cmp	r3, #8
 800c432:	d00d      	beq.n	800c450 <UART_SetConfig+0x13c>
 800c434:	d824      	bhi.n	800c480 <UART_SetConfig+0x16c>
 800c436:	2b00      	cmp	r3, #0
 800c438:	d002      	beq.n	800c440 <UART_SetConfig+0x12c>
 800c43a:	2b04      	cmp	r3, #4
 800c43c:	d010      	beq.n	800c460 <UART_SetConfig+0x14c>
 800c43e:	e01f      	b.n	800c480 <UART_SetConfig+0x16c>
 800c440:	231b      	movs	r3, #27
 800c442:	2218      	movs	r2, #24
 800c444:	4694      	mov	ip, r2
 800c446:	44bc      	add	ip, r7
 800c448:	4463      	add	r3, ip
 800c44a:	2200      	movs	r2, #0
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	e06f      	b.n	800c530 <UART_SetConfig+0x21c>
 800c450:	231b      	movs	r3, #27
 800c452:	2218      	movs	r2, #24
 800c454:	4694      	mov	ip, r2
 800c456:	44bc      	add	ip, r7
 800c458:	4463      	add	r3, ip
 800c45a:	2202      	movs	r2, #2
 800c45c:	701a      	strb	r2, [r3, #0]
 800c45e:	e067      	b.n	800c530 <UART_SetConfig+0x21c>
 800c460:	231b      	movs	r3, #27
 800c462:	2218      	movs	r2, #24
 800c464:	4694      	mov	ip, r2
 800c466:	44bc      	add	ip, r7
 800c468:	4463      	add	r3, ip
 800c46a:	2204      	movs	r2, #4
 800c46c:	701a      	strb	r2, [r3, #0]
 800c46e:	e05f      	b.n	800c530 <UART_SetConfig+0x21c>
 800c470:	231b      	movs	r3, #27
 800c472:	2218      	movs	r2, #24
 800c474:	4694      	mov	ip, r2
 800c476:	44bc      	add	ip, r7
 800c478:	4463      	add	r3, ip
 800c47a:	2208      	movs	r2, #8
 800c47c:	701a      	strb	r2, [r3, #0]
 800c47e:	e057      	b.n	800c530 <UART_SetConfig+0x21c>
 800c480:	231b      	movs	r3, #27
 800c482:	2218      	movs	r2, #24
 800c484:	4694      	mov	ip, r2
 800c486:	44bc      	add	ip, r7
 800c488:	4463      	add	r3, ip
 800c48a:	2210      	movs	r2, #16
 800c48c:	701a      	strb	r2, [r3, #0]
 800c48e:	e04f      	b.n	800c530 <UART_SetConfig+0x21c>
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a70      	ldr	r2, [pc, #448]	; (800c658 <UART_SetConfig+0x344>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d143      	bne.n	800c522 <UART_SetConfig+0x20e>
 800c49a:	4b72      	ldr	r3, [pc, #456]	; (800c664 <UART_SetConfig+0x350>)
 800c49c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c49e:	23c0      	movs	r3, #192	; 0xc0
 800c4a0:	011b      	lsls	r3, r3, #4
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	22c0      	movs	r2, #192	; 0xc0
 800c4a6:	0112      	lsls	r2, r2, #4
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d02a      	beq.n	800c502 <UART_SetConfig+0x1ee>
 800c4ac:	22c0      	movs	r2, #192	; 0xc0
 800c4ae:	0112      	lsls	r2, r2, #4
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d82e      	bhi.n	800c512 <UART_SetConfig+0x1fe>
 800c4b4:	2280      	movs	r2, #128	; 0x80
 800c4b6:	0112      	lsls	r2, r2, #4
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d012      	beq.n	800c4e2 <UART_SetConfig+0x1ce>
 800c4bc:	2280      	movs	r2, #128	; 0x80
 800c4be:	0112      	lsls	r2, r2, #4
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d826      	bhi.n	800c512 <UART_SetConfig+0x1fe>
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d004      	beq.n	800c4d2 <UART_SetConfig+0x1be>
 800c4c8:	2280      	movs	r2, #128	; 0x80
 800c4ca:	00d2      	lsls	r2, r2, #3
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d010      	beq.n	800c4f2 <UART_SetConfig+0x1de>
 800c4d0:	e01f      	b.n	800c512 <UART_SetConfig+0x1fe>
 800c4d2:	231b      	movs	r3, #27
 800c4d4:	2218      	movs	r2, #24
 800c4d6:	4694      	mov	ip, r2
 800c4d8:	44bc      	add	ip, r7
 800c4da:	4463      	add	r3, ip
 800c4dc:	2200      	movs	r2, #0
 800c4de:	701a      	strb	r2, [r3, #0]
 800c4e0:	e026      	b.n	800c530 <UART_SetConfig+0x21c>
 800c4e2:	231b      	movs	r3, #27
 800c4e4:	2218      	movs	r2, #24
 800c4e6:	4694      	mov	ip, r2
 800c4e8:	44bc      	add	ip, r7
 800c4ea:	4463      	add	r3, ip
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	701a      	strb	r2, [r3, #0]
 800c4f0:	e01e      	b.n	800c530 <UART_SetConfig+0x21c>
 800c4f2:	231b      	movs	r3, #27
 800c4f4:	2218      	movs	r2, #24
 800c4f6:	4694      	mov	ip, r2
 800c4f8:	44bc      	add	ip, r7
 800c4fa:	4463      	add	r3, ip
 800c4fc:	2204      	movs	r2, #4
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	e016      	b.n	800c530 <UART_SetConfig+0x21c>
 800c502:	231b      	movs	r3, #27
 800c504:	2218      	movs	r2, #24
 800c506:	4694      	mov	ip, r2
 800c508:	44bc      	add	ip, r7
 800c50a:	4463      	add	r3, ip
 800c50c:	2208      	movs	r2, #8
 800c50e:	701a      	strb	r2, [r3, #0]
 800c510:	e00e      	b.n	800c530 <UART_SetConfig+0x21c>
 800c512:	231b      	movs	r3, #27
 800c514:	2218      	movs	r2, #24
 800c516:	4694      	mov	ip, r2
 800c518:	44bc      	add	ip, r7
 800c51a:	4463      	add	r3, ip
 800c51c:	2210      	movs	r2, #16
 800c51e:	701a      	strb	r2, [r3, #0]
 800c520:	e006      	b.n	800c530 <UART_SetConfig+0x21c>
 800c522:	231b      	movs	r3, #27
 800c524:	2218      	movs	r2, #24
 800c526:	4694      	mov	ip, r2
 800c528:	44bc      	add	ip, r7
 800c52a:	4463      	add	r3, ip
 800c52c:	2210      	movs	r2, #16
 800c52e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a48      	ldr	r2, [pc, #288]	; (800c658 <UART_SetConfig+0x344>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d000      	beq.n	800c53c <UART_SetConfig+0x228>
 800c53a:	e09b      	b.n	800c674 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c53c:	231b      	movs	r3, #27
 800c53e:	2218      	movs	r2, #24
 800c540:	4694      	mov	ip, r2
 800c542:	44bc      	add	ip, r7
 800c544:	4463      	add	r3, ip
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	2b08      	cmp	r3, #8
 800c54a:	d01d      	beq.n	800c588 <UART_SetConfig+0x274>
 800c54c:	dc20      	bgt.n	800c590 <UART_SetConfig+0x27c>
 800c54e:	2b04      	cmp	r3, #4
 800c550:	d015      	beq.n	800c57e <UART_SetConfig+0x26a>
 800c552:	dc1d      	bgt.n	800c590 <UART_SetConfig+0x27c>
 800c554:	2b00      	cmp	r3, #0
 800c556:	d002      	beq.n	800c55e <UART_SetConfig+0x24a>
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d005      	beq.n	800c568 <UART_SetConfig+0x254>
 800c55c:	e018      	b.n	800c590 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c55e:	f7fe f811 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 800c562:	0003      	movs	r3, r0
 800c564:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c566:	e01d      	b.n	800c5a4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c568:	4b3e      	ldr	r3, [pc, #248]	; (800c664 <UART_SetConfig+0x350>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2210      	movs	r2, #16
 800c56e:	4013      	ands	r3, r2
 800c570:	d002      	beq.n	800c578 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c572:	4b3e      	ldr	r3, [pc, #248]	; (800c66c <UART_SetConfig+0x358>)
 800c574:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c576:	e015      	b.n	800c5a4 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 800c578:	4b3d      	ldr	r3, [pc, #244]	; (800c670 <UART_SetConfig+0x35c>)
 800c57a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c57c:	e012      	b.n	800c5a4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c57e:	f7fd ff51 	bl	800a424 <HAL_RCC_GetSysClockFreq>
 800c582:	0003      	movs	r3, r0
 800c584:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c586:	e00d      	b.n	800c5a4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c588:	2380      	movs	r3, #128	; 0x80
 800c58a:	021b      	lsls	r3, r3, #8
 800c58c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c58e:	e009      	b.n	800c5a4 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800c590:	2300      	movs	r3, #0
 800c592:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c594:	231a      	movs	r3, #26
 800c596:	2218      	movs	r2, #24
 800c598:	4694      	mov	ip, r2
 800c59a:	44bc      	add	ip, r7
 800c59c:	4463      	add	r3, ip
 800c59e:	2201      	movs	r2, #1
 800c5a0:	701a      	strb	r2, [r3, #0]
        break;
 800c5a2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d100      	bne.n	800c5ac <UART_SetConfig+0x298>
 800c5aa:	e139      	b.n	800c820 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	0013      	movs	r3, r2
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	189b      	adds	r3, r3, r2
 800c5b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d305      	bcc.n	800c5c8 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c5c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d907      	bls.n	800c5d8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800c5c8:	231a      	movs	r3, #26
 800c5ca:	2218      	movs	r2, #24
 800c5cc:	4694      	mov	ip, r2
 800c5ce:	44bc      	add	ip, r7
 800c5d0:	4463      	add	r3, ip
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	701a      	strb	r2, [r3, #0]
 800c5d6:	e123      	b.n	800c820 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5da:	613b      	str	r3, [r7, #16]
 800c5dc:	2300      	movs	r3, #0
 800c5de:	617b      	str	r3, [r7, #20]
 800c5e0:	6939      	ldr	r1, [r7, #16]
 800c5e2:	697a      	ldr	r2, [r7, #20]
 800c5e4:	000b      	movs	r3, r1
 800c5e6:	0e1b      	lsrs	r3, r3, #24
 800c5e8:	0010      	movs	r0, r2
 800c5ea:	0205      	lsls	r5, r0, #8
 800c5ec:	431d      	orrs	r5, r3
 800c5ee:	000b      	movs	r3, r1
 800c5f0:	021c      	lsls	r4, r3, #8
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	085b      	lsrs	r3, r3, #1
 800c5f8:	60bb      	str	r3, [r7, #8]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	68b8      	ldr	r0, [r7, #8]
 800c600:	68f9      	ldr	r1, [r7, #12]
 800c602:	1900      	adds	r0, r0, r4
 800c604:	4169      	adcs	r1, r5
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	603b      	str	r3, [r7, #0]
 800c60c:	2300      	movs	r3, #0
 800c60e:	607b      	str	r3, [r7, #4]
 800c610:	683a      	ldr	r2, [r7, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f7f3 fe7c 	bl	8000310 <__aeabi_uldivmod>
 800c618:	0002      	movs	r2, r0
 800c61a:	000b      	movs	r3, r1
 800c61c:	0013      	movs	r3, r2
 800c61e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c622:	23c0      	movs	r3, #192	; 0xc0
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	429a      	cmp	r2, r3
 800c628:	d309      	bcc.n	800c63e <UART_SetConfig+0x32a>
 800c62a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c62c:	2380      	movs	r3, #128	; 0x80
 800c62e:	035b      	lsls	r3, r3, #13
 800c630:	429a      	cmp	r2, r3
 800c632:	d204      	bcs.n	800c63e <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c63a:	60da      	str	r2, [r3, #12]
 800c63c:	e0f0      	b.n	800c820 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800c63e:	231a      	movs	r3, #26
 800c640:	2218      	movs	r2, #24
 800c642:	4694      	mov	ip, r2
 800c644:	44bc      	add	ip, r7
 800c646:	4463      	add	r3, ip
 800c648:	2201      	movs	r2, #1
 800c64a:	701a      	strb	r2, [r3, #0]
 800c64c:	e0e8      	b.n	800c820 <UART_SetConfig+0x50c>
 800c64e:	46c0      	nop			; (mov r8, r8)
 800c650:	efff69f3 	.word	0xefff69f3
 800c654:	ffffcfff 	.word	0xffffcfff
 800c658:	40004800 	.word	0x40004800
 800c65c:	fffff4ff 	.word	0xfffff4ff
 800c660:	40013800 	.word	0x40013800
 800c664:	40021000 	.word	0x40021000
 800c668:	40004400 	.word	0x40004400
 800c66c:	003d0900 	.word	0x003d0900
 800c670:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	69da      	ldr	r2, [r3, #28]
 800c678:	2380      	movs	r3, #128	; 0x80
 800c67a:	021b      	lsls	r3, r3, #8
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d000      	beq.n	800c682 <UART_SetConfig+0x36e>
 800c680:	e074      	b.n	800c76c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800c682:	231b      	movs	r3, #27
 800c684:	2218      	movs	r2, #24
 800c686:	4694      	mov	ip, r2
 800c688:	44bc      	add	ip, r7
 800c68a:	4463      	add	r3, ip
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	2b08      	cmp	r3, #8
 800c690:	d822      	bhi.n	800c6d8 <UART_SetConfig+0x3c4>
 800c692:	009a      	lsls	r2, r3, #2
 800c694:	4b6a      	ldr	r3, [pc, #424]	; (800c840 <UART_SetConfig+0x52c>)
 800c696:	18d3      	adds	r3, r2, r3
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c69c:	f7fd ff72 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 800c6a0:	0003      	movs	r3, r0
 800c6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6a4:	e022      	b.n	800c6ec <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6a6:	f7fd ff83 	bl	800a5b0 <HAL_RCC_GetPCLK2Freq>
 800c6aa:	0003      	movs	r3, r0
 800c6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6ae:	e01d      	b.n	800c6ec <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6b0:	4b64      	ldr	r3, [pc, #400]	; (800c844 <UART_SetConfig+0x530>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2210      	movs	r2, #16
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	d002      	beq.n	800c6c0 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c6ba:	4b63      	ldr	r3, [pc, #396]	; (800c848 <UART_SetConfig+0x534>)
 800c6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6be:	e015      	b.n	800c6ec <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 800c6c0:	4b62      	ldr	r3, [pc, #392]	; (800c84c <UART_SetConfig+0x538>)
 800c6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6c4:	e012      	b.n	800c6ec <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c6c6:	f7fd fead 	bl	800a424 <HAL_RCC_GetSysClockFreq>
 800c6ca:	0003      	movs	r3, r0
 800c6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6ce:	e00d      	b.n	800c6ec <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6d0:	2380      	movs	r3, #128	; 0x80
 800c6d2:	021b      	lsls	r3, r3, #8
 800c6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6d6:	e009      	b.n	800c6ec <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c6dc:	231a      	movs	r3, #26
 800c6de:	2218      	movs	r2, #24
 800c6e0:	4694      	mov	ip, r2
 800c6e2:	44bc      	add	ip, r7
 800c6e4:	4463      	add	r3, ip
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	701a      	strb	r2, [r3, #0]
        break;
 800c6ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d100      	bne.n	800c6f4 <UART_SetConfig+0x3e0>
 800c6f2:	e095      	b.n	800c820 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f6:	005a      	lsls	r2, r3, #1
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	085b      	lsrs	r3, r3, #1
 800c6fe:	18d2      	adds	r2, r2, r3
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	0019      	movs	r1, r3
 800c706:	0010      	movs	r0, r2
 800c708:	f7f3 fcfe 	bl	8000108 <__udivsi3>
 800c70c:	0003      	movs	r3, r0
 800c70e:	b29b      	uxth	r3, r3
 800c710:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	2b0f      	cmp	r3, #15
 800c716:	d921      	bls.n	800c75c <UART_SetConfig+0x448>
 800c718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c71a:	2380      	movs	r3, #128	; 0x80
 800c71c:	025b      	lsls	r3, r3, #9
 800c71e:	429a      	cmp	r2, r3
 800c720:	d21c      	bcs.n	800c75c <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c724:	b29a      	uxth	r2, r3
 800c726:	200e      	movs	r0, #14
 800c728:	2418      	movs	r4, #24
 800c72a:	193b      	adds	r3, r7, r4
 800c72c:	181b      	adds	r3, r3, r0
 800c72e:	210f      	movs	r1, #15
 800c730:	438a      	bics	r2, r1
 800c732:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	085b      	lsrs	r3, r3, #1
 800c738:	b29b      	uxth	r3, r3
 800c73a:	2207      	movs	r2, #7
 800c73c:	4013      	ands	r3, r2
 800c73e:	b299      	uxth	r1, r3
 800c740:	193b      	adds	r3, r7, r4
 800c742:	181b      	adds	r3, r3, r0
 800c744:	193a      	adds	r2, r7, r4
 800c746:	1812      	adds	r2, r2, r0
 800c748:	8812      	ldrh	r2, [r2, #0]
 800c74a:	430a      	orrs	r2, r1
 800c74c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	193a      	adds	r2, r7, r4
 800c754:	1812      	adds	r2, r2, r0
 800c756:	8812      	ldrh	r2, [r2, #0]
 800c758:	60da      	str	r2, [r3, #12]
 800c75a:	e061      	b.n	800c820 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800c75c:	231a      	movs	r3, #26
 800c75e:	2218      	movs	r2, #24
 800c760:	4694      	mov	ip, r2
 800c762:	44bc      	add	ip, r7
 800c764:	4463      	add	r3, ip
 800c766:	2201      	movs	r2, #1
 800c768:	701a      	strb	r2, [r3, #0]
 800c76a:	e059      	b.n	800c820 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c76c:	231b      	movs	r3, #27
 800c76e:	2218      	movs	r2, #24
 800c770:	4694      	mov	ip, r2
 800c772:	44bc      	add	ip, r7
 800c774:	4463      	add	r3, ip
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	2b08      	cmp	r3, #8
 800c77a:	d822      	bhi.n	800c7c2 <UART_SetConfig+0x4ae>
 800c77c:	009a      	lsls	r2, r3, #2
 800c77e:	4b34      	ldr	r3, [pc, #208]	; (800c850 <UART_SetConfig+0x53c>)
 800c780:	18d3      	adds	r3, r2, r3
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c786:	f7fd fefd 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 800c78a:	0003      	movs	r3, r0
 800c78c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c78e:	e022      	b.n	800c7d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c790:	f7fd ff0e 	bl	800a5b0 <HAL_RCC_GetPCLK2Freq>
 800c794:	0003      	movs	r3, r0
 800c796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c798:	e01d      	b.n	800c7d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c79a:	4b2a      	ldr	r3, [pc, #168]	; (800c844 <UART_SetConfig+0x530>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2210      	movs	r2, #16
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	d002      	beq.n	800c7aa <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c7a4:	4b28      	ldr	r3, [pc, #160]	; (800c848 <UART_SetConfig+0x534>)
 800c7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7a8:	e015      	b.n	800c7d6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800c7aa:	4b28      	ldr	r3, [pc, #160]	; (800c84c <UART_SetConfig+0x538>)
 800c7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7ae:	e012      	b.n	800c7d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7b0:	f7fd fe38 	bl	800a424 <HAL_RCC_GetSysClockFreq>
 800c7b4:	0003      	movs	r3, r0
 800c7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7b8:	e00d      	b.n	800c7d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7ba:	2380      	movs	r3, #128	; 0x80
 800c7bc:	021b      	lsls	r3, r3, #8
 800c7be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7c0:	e009      	b.n	800c7d6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c7c6:	231a      	movs	r3, #26
 800c7c8:	2218      	movs	r2, #24
 800c7ca:	4694      	mov	ip, r2
 800c7cc:	44bc      	add	ip, r7
 800c7ce:	4463      	add	r3, ip
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	701a      	strb	r2, [r3, #0]
        break;
 800c7d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d021      	beq.n	800c820 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	085a      	lsrs	r2, r3, #1
 800c7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e4:	18d2      	adds	r2, r2, r3
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	0019      	movs	r1, r3
 800c7ec:	0010      	movs	r0, r2
 800c7ee:	f7f3 fc8b 	bl	8000108 <__udivsi3>
 800c7f2:	0003      	movs	r3, r0
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fa:	2b0f      	cmp	r3, #15
 800c7fc:	d909      	bls.n	800c812 <UART_SetConfig+0x4fe>
 800c7fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c800:	2380      	movs	r3, #128	; 0x80
 800c802:	025b      	lsls	r3, r3, #9
 800c804:	429a      	cmp	r2, r3
 800c806:	d204      	bcs.n	800c812 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c80e:	60da      	str	r2, [r3, #12]
 800c810:	e006      	b.n	800c820 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800c812:	231a      	movs	r3, #26
 800c814:	2218      	movs	r2, #24
 800c816:	4694      	mov	ip, r2
 800c818:	44bc      	add	ip, r7
 800c81a:	4463      	add	r3, ip
 800c81c:	2201      	movs	r2, #1
 800c81e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	2200      	movs	r2, #0
 800c824:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	2200      	movs	r2, #0
 800c82a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c82c:	231a      	movs	r3, #26
 800c82e:	2218      	movs	r2, #24
 800c830:	4694      	mov	ip, r2
 800c832:	44bc      	add	ip, r7
 800c834:	4463      	add	r3, ip
 800c836:	781b      	ldrb	r3, [r3, #0]
}
 800c838:	0018      	movs	r0, r3
 800c83a:	46bd      	mov	sp, r7
 800c83c:	b00e      	add	sp, #56	; 0x38
 800c83e:	bdb0      	pop	{r4, r5, r7, pc}
 800c840:	0800f674 	.word	0x0800f674
 800c844:	40021000 	.word	0x40021000
 800c848:	003d0900 	.word	0x003d0900
 800c84c:	00f42400 	.word	0x00f42400
 800c850:	0800f698 	.word	0x0800f698

0800c854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c860:	2201      	movs	r2, #1
 800c862:	4013      	ands	r3, r2
 800c864:	d00b      	beq.n	800c87e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	4a4a      	ldr	r2, [pc, #296]	; (800c998 <UART_AdvFeatureConfig+0x144>)
 800c86e:	4013      	ands	r3, r2
 800c870:	0019      	movs	r1, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	430a      	orrs	r2, r1
 800c87c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c882:	2202      	movs	r2, #2
 800c884:	4013      	ands	r3, r2
 800c886:	d00b      	beq.n	800c8a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	4a43      	ldr	r2, [pc, #268]	; (800c99c <UART_AdvFeatureConfig+0x148>)
 800c890:	4013      	ands	r3, r2
 800c892:	0019      	movs	r1, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	430a      	orrs	r2, r1
 800c89e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a4:	2204      	movs	r2, #4
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	d00b      	beq.n	800c8c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	4a3b      	ldr	r2, [pc, #236]	; (800c9a0 <UART_AdvFeatureConfig+0x14c>)
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	0019      	movs	r1, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	430a      	orrs	r2, r1
 800c8c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c6:	2208      	movs	r2, #8
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	d00b      	beq.n	800c8e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	4a34      	ldr	r2, [pc, #208]	; (800c9a4 <UART_AdvFeatureConfig+0x150>)
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	0019      	movs	r1, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	430a      	orrs	r2, r1
 800c8e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e8:	2210      	movs	r2, #16
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	d00b      	beq.n	800c906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	4a2c      	ldr	r2, [pc, #176]	; (800c9a8 <UART_AdvFeatureConfig+0x154>)
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	0019      	movs	r1, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	430a      	orrs	r2, r1
 800c904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90a:	2220      	movs	r2, #32
 800c90c:	4013      	ands	r3, r2
 800c90e:	d00b      	beq.n	800c928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	4a25      	ldr	r2, [pc, #148]	; (800c9ac <UART_AdvFeatureConfig+0x158>)
 800c918:	4013      	ands	r3, r2
 800c91a:	0019      	movs	r1, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	430a      	orrs	r2, r1
 800c926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92c:	2240      	movs	r2, #64	; 0x40
 800c92e:	4013      	ands	r3, r2
 800c930:	d01d      	beq.n	800c96e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	4a1d      	ldr	r2, [pc, #116]	; (800c9b0 <UART_AdvFeatureConfig+0x15c>)
 800c93a:	4013      	ands	r3, r2
 800c93c:	0019      	movs	r1, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	430a      	orrs	r2, r1
 800c948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c94e:	2380      	movs	r3, #128	; 0x80
 800c950:	035b      	lsls	r3, r3, #13
 800c952:	429a      	cmp	r2, r3
 800c954:	d10b      	bne.n	800c96e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	4a15      	ldr	r2, [pc, #84]	; (800c9b4 <UART_AdvFeatureConfig+0x160>)
 800c95e:	4013      	ands	r3, r2
 800c960:	0019      	movs	r1, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	430a      	orrs	r2, r1
 800c96c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c972:	2280      	movs	r2, #128	; 0x80
 800c974:	4013      	ands	r3, r2
 800c976:	d00b      	beq.n	800c990 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	4a0e      	ldr	r2, [pc, #56]	; (800c9b8 <UART_AdvFeatureConfig+0x164>)
 800c980:	4013      	ands	r3, r2
 800c982:	0019      	movs	r1, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	430a      	orrs	r2, r1
 800c98e:	605a      	str	r2, [r3, #4]
  }
}
 800c990:	46c0      	nop			; (mov r8, r8)
 800c992:	46bd      	mov	sp, r7
 800c994:	b002      	add	sp, #8
 800c996:	bd80      	pop	{r7, pc}
 800c998:	fffdffff 	.word	0xfffdffff
 800c99c:	fffeffff 	.word	0xfffeffff
 800c9a0:	fffbffff 	.word	0xfffbffff
 800c9a4:	ffff7fff 	.word	0xffff7fff
 800c9a8:	ffffefff 	.word	0xffffefff
 800c9ac:	ffffdfff 	.word	0xffffdfff
 800c9b0:	ffefffff 	.word	0xffefffff
 800c9b4:	ff9fffff 	.word	0xff9fffff
 800c9b8:	fff7ffff 	.word	0xfff7ffff

0800c9bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b086      	sub	sp, #24
 800c9c0:	af02      	add	r7, sp, #8
 800c9c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2280      	movs	r2, #128	; 0x80
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9cc:	f7fb f8d4 	bl	8007b78 <HAL_GetTick>
 800c9d0:	0003      	movs	r3, r0
 800c9d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2208      	movs	r2, #8
 800c9dc:	4013      	ands	r3, r2
 800c9de:	2b08      	cmp	r3, #8
 800c9e0:	d10c      	bne.n	800c9fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2280      	movs	r2, #128	; 0x80
 800c9e6:	0391      	lsls	r1, r2, #14
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	4a17      	ldr	r2, [pc, #92]	; (800ca48 <UART_CheckIdleState+0x8c>)
 800c9ec:	9200      	str	r2, [sp, #0]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f000 f82c 	bl	800ca4c <UART_WaitOnFlagUntilTimeout>
 800c9f4:	1e03      	subs	r3, r0, #0
 800c9f6:	d001      	beq.n	800c9fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9f8:	2303      	movs	r3, #3
 800c9fa:	e021      	b.n	800ca40 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2204      	movs	r2, #4
 800ca04:	4013      	ands	r3, r2
 800ca06:	2b04      	cmp	r3, #4
 800ca08:	d10c      	bne.n	800ca24 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2280      	movs	r2, #128	; 0x80
 800ca0e:	03d1      	lsls	r1, r2, #15
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	4a0d      	ldr	r2, [pc, #52]	; (800ca48 <UART_CheckIdleState+0x8c>)
 800ca14:	9200      	str	r2, [sp, #0]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f000 f818 	bl	800ca4c <UART_WaitOnFlagUntilTimeout>
 800ca1c:	1e03      	subs	r3, r0, #0
 800ca1e:	d001      	beq.n	800ca24 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca20:	2303      	movs	r3, #3
 800ca22:	e00d      	b.n	800ca40 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2220      	movs	r2, #32
 800ca28:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2220      	movs	r2, #32
 800ca2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2274      	movs	r2, #116	; 0x74
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	0018      	movs	r0, r3
 800ca42:	46bd      	mov	sp, r7
 800ca44:	b004      	add	sp, #16
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	01ffffff 	.word	0x01ffffff

0800ca4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	603b      	str	r3, [r7, #0]
 800ca58:	1dfb      	adds	r3, r7, #7
 800ca5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca5c:	e05e      	b.n	800cb1c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	3301      	adds	r3, #1
 800ca62:	d05b      	beq.n	800cb1c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca64:	f7fb f888 	bl	8007b78 <HAL_GetTick>
 800ca68:	0002      	movs	r2, r0
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	69ba      	ldr	r2, [r7, #24]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d302      	bcc.n	800ca7a <UART_WaitOnFlagUntilTimeout+0x2e>
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d11b      	bne.n	800cab2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	492f      	ldr	r1, [pc, #188]	; (800cb44 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800ca86:	400a      	ands	r2, r1
 800ca88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	689a      	ldr	r2, [r3, #8]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2101      	movs	r1, #1
 800ca96:	438a      	bics	r2, r1
 800ca98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2220      	movs	r2, #32
 800ca9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2220      	movs	r2, #32
 800caa4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2274      	movs	r2, #116	; 0x74
 800caaa:	2100      	movs	r1, #0
 800caac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	e044      	b.n	800cb3c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2204      	movs	r2, #4
 800caba:	4013      	ands	r3, r2
 800cabc:	d02e      	beq.n	800cb1c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	69da      	ldr	r2, [r3, #28]
 800cac4:	2380      	movs	r3, #128	; 0x80
 800cac6:	011b      	lsls	r3, r3, #4
 800cac8:	401a      	ands	r2, r3
 800caca:	2380      	movs	r3, #128	; 0x80
 800cacc:	011b      	lsls	r3, r3, #4
 800cace:	429a      	cmp	r2, r3
 800cad0:	d124      	bne.n	800cb1c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2280      	movs	r2, #128	; 0x80
 800cad8:	0112      	lsls	r2, r2, #4
 800cada:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4917      	ldr	r1, [pc, #92]	; (800cb44 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800cae8:	400a      	ands	r2, r1
 800caea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	689a      	ldr	r2, [r3, #8]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2101      	movs	r1, #1
 800caf8:	438a      	bics	r2, r1
 800cafa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2220      	movs	r2, #32
 800cb00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2220      	movs	r2, #32
 800cb06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2280      	movs	r2, #128	; 0x80
 800cb0c:	2120      	movs	r1, #32
 800cb0e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2274      	movs	r2, #116	; 0x74
 800cb14:	2100      	movs	r1, #0
 800cb16:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800cb18:	2303      	movs	r3, #3
 800cb1a:	e00f      	b.n	800cb3c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	69db      	ldr	r3, [r3, #28]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	4013      	ands	r3, r2
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	425a      	negs	r2, r3
 800cb2c:	4153      	adcs	r3, r2
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	001a      	movs	r2, r3
 800cb32:	1dfb      	adds	r3, r7, #7
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d091      	beq.n	800ca5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	b004      	add	sp, #16
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	fffffe5f 	.word	0xfffffe5f

0800cb48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	1dbb      	adds	r3, r7, #6
 800cb54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	1dba      	adds	r2, r7, #6
 800cb60:	2158      	movs	r1, #88	; 0x58
 800cb62:	8812      	ldrh	r2, [r2, #0]
 800cb64:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2280      	movs	r2, #128	; 0x80
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2222      	movs	r2, #34	; 0x22
 800cb72:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d02b      	beq.n	800cbd4 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb80:	4a25      	ldr	r2, [pc, #148]	; (800cc18 <UART_Start_Receive_DMA+0xd0>)
 800cb82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb88:	4a24      	ldr	r2, [pc, #144]	; (800cc1c <UART_Start_Receive_DMA+0xd4>)
 800cb8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb90:	4a23      	ldr	r2, [pc, #140]	; (800cc20 <UART_Start_Receive_DMA+0xd8>)
 800cb92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb98:	2200      	movs	r2, #0
 800cb9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3324      	adds	r3, #36	; 0x24
 800cba6:	0019      	movs	r1, r3
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbac:	001a      	movs	r2, r3
 800cbae:	1dbb      	adds	r3, r7, #6
 800cbb0:	881b      	ldrh	r3, [r3, #0]
 800cbb2:	f7fb fe61 	bl	8008878 <HAL_DMA_Start_IT>
 800cbb6:	1e03      	subs	r3, r0, #0
 800cbb8:	d00c      	beq.n	800cbd4 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2280      	movs	r2, #128	; 0x80
 800cbbe:	2110      	movs	r1, #16
 800cbc0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2274      	movs	r2, #116	; 0x74
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	5499      	strb	r1, [r3, r2]

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2220      	movs	r2, #32
 800cbce:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e01d      	b.n	800cc10 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2274      	movs	r2, #116	; 0x74
 800cbd8:	2100      	movs	r1, #0
 800cbda:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2180      	movs	r1, #128	; 0x80
 800cbe8:	0049      	lsls	r1, r1, #1
 800cbea:	430a      	orrs	r2, r1
 800cbec:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	689a      	ldr	r2, [r3, #8]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2101      	movs	r1, #1
 800cbfa:	430a      	orrs	r2, r1
 800cbfc:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	689a      	ldr	r2, [r3, #8]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2140      	movs	r1, #64	; 0x40
 800cc0a:	430a      	orrs	r2, r1
 800cc0c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	0018      	movs	r0, r3
 800cc12:	46bd      	mov	sp, r7
 800cc14:	b004      	add	sp, #16
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	0800ccad 	.word	0x0800ccad
 800cc1c:	0800cd4d 	.word	0x0800cd4d
 800cc20:	0800cd89 	.word	0x0800cd89

0800cc24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	21c0      	movs	r1, #192	; 0xc0
 800cc38:	438a      	bics	r2, r1
 800cc3a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2220      	movs	r2, #32
 800cc40:	679a      	str	r2, [r3, #120]	; 0x78
}
 800cc42:	46c0      	nop			; (mov r8, r8)
 800cc44:	46bd      	mov	sp, r7
 800cc46:	b002      	add	sp, #8
 800cc48:	bd80      	pop	{r7, pc}
	...

0800cc4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4912      	ldr	r1, [pc, #72]	; (800cca8 <UART_EndRxTransfer+0x5c>)
 800cc60:	400a      	ands	r2, r1
 800cc62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	689a      	ldr	r2, [r3, #8]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2101      	movs	r1, #1
 800cc70:	438a      	bics	r2, r1
 800cc72:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d107      	bne.n	800cc8c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2110      	movs	r1, #16
 800cc88:	438a      	bics	r2, r1
 800cc8a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2220      	movs	r2, #32
 800cc90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800cc9e:	46c0      	nop			; (mov r8, r8)
 800cca0:	46bd      	mov	sp, r7
 800cca2:	b002      	add	sp, #8
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	46c0      	nop			; (mov r8, r8)
 800cca8:	fffffedf 	.word	0xfffffedf

0800ccac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2220      	movs	r2, #32
 800ccc2:	4013      	ands	r3, r2
 800ccc4:	d12a      	bne.n	800cd1c <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	225a      	movs	r2, #90	; 0x5a
 800ccca:	2100      	movs	r1, #0
 800cccc:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	491b      	ldr	r1, [pc, #108]	; (800cd48 <UART_DMAReceiveCplt+0x9c>)
 800ccda:	400a      	ands	r2, r1
 800ccdc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	689a      	ldr	r2, [r3, #8]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2101      	movs	r1, #1
 800ccea:	438a      	bics	r2, r1
 800ccec:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2140      	movs	r1, #64	; 0x40
 800ccfa:	438a      	bics	r2, r1
 800ccfc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2220      	movs	r2, #32
 800cd02:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d107      	bne.n	800cd1c <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2110      	movs	r1, #16
 800cd18:	438a      	bics	r2, r1
 800cd1a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d108      	bne.n	800cd36 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2258      	movs	r2, #88	; 0x58
 800cd28:	5a9a      	ldrh	r2, [r3, r2]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	0011      	movs	r1, r2
 800cd2e:	0018      	movs	r0, r3
 800cd30:	f7ff fae4 	bl	800c2fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd34:	e003      	b.n	800cd3e <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	0018      	movs	r0, r3
 800cd3a:	f7f9 faaf 	bl	800629c <HAL_UART_RxCpltCallback>
}
 800cd3e:	46c0      	nop			; (mov r8, r8)
 800cd40:	46bd      	mov	sp, r7
 800cd42:	b004      	add	sp, #16
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	46c0      	nop			; (mov r8, r8)
 800cd48:	fffffeff 	.word	0xfffffeff

0800cd4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd58:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d10a      	bne.n	800cd78 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2258      	movs	r2, #88	; 0x58
 800cd66:	5a9b      	ldrh	r3, [r3, r2]
 800cd68:	085b      	lsrs	r3, r3, #1
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	0011      	movs	r1, r2
 800cd70:	0018      	movs	r0, r3
 800cd72:	f7ff fac3 	bl	800c2fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd76:	e003      	b.n	800cd80 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	0018      	movs	r0, r3
 800cd7c:	f7ff faae 	bl	800c2dc <HAL_UART_RxHalfCpltCallback>
}
 800cd80:	46c0      	nop			; (mov r8, r8)
 800cd82:	46bd      	mov	sp, r7
 800cd84:	b004      	add	sp, #16
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cda0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	2280      	movs	r2, #128	; 0x80
 800cdaa:	4013      	ands	r3, r2
 800cdac:	2b80      	cmp	r3, #128	; 0x80
 800cdae:	d10a      	bne.n	800cdc6 <UART_DMAError+0x3e>
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	2b21      	cmp	r3, #33	; 0x21
 800cdb4:	d107      	bne.n	800cdc6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2252      	movs	r2, #82	; 0x52
 800cdba:	2100      	movs	r1, #0
 800cdbc:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	0018      	movs	r0, r3
 800cdc2:	f7ff ff2f 	bl	800cc24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	2240      	movs	r2, #64	; 0x40
 800cdce:	4013      	ands	r3, r2
 800cdd0:	2b40      	cmp	r3, #64	; 0x40
 800cdd2:	d10a      	bne.n	800cdea <UART_DMAError+0x62>
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2b22      	cmp	r3, #34	; 0x22
 800cdd8:	d107      	bne.n	800cdea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	225a      	movs	r2, #90	; 0x5a
 800cdde:	2100      	movs	r1, #0
 800cde0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	0018      	movs	r0, r3
 800cde6:	f7ff ff31 	bl	800cc4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	2280      	movs	r2, #128	; 0x80
 800cdee:	589b      	ldr	r3, [r3, r2]
 800cdf0:	2210      	movs	r2, #16
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2180      	movs	r1, #128	; 0x80
 800cdf8:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	0018      	movs	r0, r3
 800cdfe:	f7ff fa75 	bl	800c2ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce02:	46c0      	nop			; (mov r8, r8)
 800ce04:	46bd      	mov	sp, r7
 800ce06:	b006      	add	sp, #24
 800ce08:	bd80      	pop	{r7, pc}
	...

0800ce0c <__errno>:
 800ce0c:	4b01      	ldr	r3, [pc, #4]	; (800ce14 <__errno+0x8>)
 800ce0e:	6818      	ldr	r0, [r3, #0]
 800ce10:	4770      	bx	lr
 800ce12:	46c0      	nop			; (mov r8, r8)
 800ce14:	2000002c 	.word	0x2000002c

0800ce18 <__libc_init_array>:
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	2600      	movs	r6, #0
 800ce1c:	4d0c      	ldr	r5, [pc, #48]	; (800ce50 <__libc_init_array+0x38>)
 800ce1e:	4c0d      	ldr	r4, [pc, #52]	; (800ce54 <__libc_init_array+0x3c>)
 800ce20:	1b64      	subs	r4, r4, r5
 800ce22:	10a4      	asrs	r4, r4, #2
 800ce24:	42a6      	cmp	r6, r4
 800ce26:	d109      	bne.n	800ce3c <__libc_init_array+0x24>
 800ce28:	2600      	movs	r6, #0
 800ce2a:	f000 f8b7 	bl	800cf9c <_init>
 800ce2e:	4d0a      	ldr	r5, [pc, #40]	; (800ce58 <__libc_init_array+0x40>)
 800ce30:	4c0a      	ldr	r4, [pc, #40]	; (800ce5c <__libc_init_array+0x44>)
 800ce32:	1b64      	subs	r4, r4, r5
 800ce34:	10a4      	asrs	r4, r4, #2
 800ce36:	42a6      	cmp	r6, r4
 800ce38:	d105      	bne.n	800ce46 <__libc_init_array+0x2e>
 800ce3a:	bd70      	pop	{r4, r5, r6, pc}
 800ce3c:	00b3      	lsls	r3, r6, #2
 800ce3e:	58eb      	ldr	r3, [r5, r3]
 800ce40:	4798      	blx	r3
 800ce42:	3601      	adds	r6, #1
 800ce44:	e7ee      	b.n	800ce24 <__libc_init_array+0xc>
 800ce46:	00b3      	lsls	r3, r6, #2
 800ce48:	58eb      	ldr	r3, [r5, r3]
 800ce4a:	4798      	blx	r3
 800ce4c:	3601      	adds	r6, #1
 800ce4e:	e7f2      	b.n	800ce36 <__libc_init_array+0x1e>
 800ce50:	0800f6c4 	.word	0x0800f6c4
 800ce54:	0800f6c4 	.word	0x0800f6c4
 800ce58:	0800f6c4 	.word	0x0800f6c4
 800ce5c:	0800f6c8 	.word	0x0800f6c8

0800ce60 <malloc>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	4b03      	ldr	r3, [pc, #12]	; (800ce70 <malloc+0x10>)
 800ce64:	0001      	movs	r1, r0
 800ce66:	6818      	ldr	r0, [r3, #0]
 800ce68:	f000 f816 	bl	800ce98 <_malloc_r>
 800ce6c:	bd10      	pop	{r4, pc}
 800ce6e:	46c0      	nop			; (mov r8, r8)
 800ce70:	2000002c 	.word	0x2000002c

0800ce74 <memcpy>:
 800ce74:	2300      	movs	r3, #0
 800ce76:	b510      	push	{r4, lr}
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d100      	bne.n	800ce7e <memcpy+0xa>
 800ce7c:	bd10      	pop	{r4, pc}
 800ce7e:	5ccc      	ldrb	r4, [r1, r3]
 800ce80:	54c4      	strb	r4, [r0, r3]
 800ce82:	3301      	adds	r3, #1
 800ce84:	e7f8      	b.n	800ce78 <memcpy+0x4>

0800ce86 <memset>:
 800ce86:	0003      	movs	r3, r0
 800ce88:	1882      	adds	r2, r0, r2
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d100      	bne.n	800ce90 <memset+0xa>
 800ce8e:	4770      	bx	lr
 800ce90:	7019      	strb	r1, [r3, #0]
 800ce92:	3301      	adds	r3, #1
 800ce94:	e7f9      	b.n	800ce8a <memset+0x4>
	...

0800ce98 <_malloc_r>:
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	1ccd      	adds	r5, r1, #3
 800ce9e:	439d      	bics	r5, r3
 800cea0:	3508      	adds	r5, #8
 800cea2:	0006      	movs	r6, r0
 800cea4:	2d0c      	cmp	r5, #12
 800cea6:	d21f      	bcs.n	800cee8 <_malloc_r+0x50>
 800cea8:	250c      	movs	r5, #12
 800ceaa:	42a9      	cmp	r1, r5
 800ceac:	d81e      	bhi.n	800ceec <_malloc_r+0x54>
 800ceae:	0030      	movs	r0, r6
 800ceb0:	f000 f862 	bl	800cf78 <__malloc_lock>
 800ceb4:	4925      	ldr	r1, [pc, #148]	; (800cf4c <_malloc_r+0xb4>)
 800ceb6:	680a      	ldr	r2, [r1, #0]
 800ceb8:	0014      	movs	r4, r2
 800ceba:	2c00      	cmp	r4, #0
 800cebc:	d11a      	bne.n	800cef4 <_malloc_r+0x5c>
 800cebe:	4f24      	ldr	r7, [pc, #144]	; (800cf50 <_malloc_r+0xb8>)
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d104      	bne.n	800ced0 <_malloc_r+0x38>
 800cec6:	0021      	movs	r1, r4
 800cec8:	0030      	movs	r0, r6
 800ceca:	f000 f843 	bl	800cf54 <_sbrk_r>
 800cece:	6038      	str	r0, [r7, #0]
 800ced0:	0029      	movs	r1, r5
 800ced2:	0030      	movs	r0, r6
 800ced4:	f000 f83e 	bl	800cf54 <_sbrk_r>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d12b      	bne.n	800cf34 <_malloc_r+0x9c>
 800cedc:	230c      	movs	r3, #12
 800cede:	0030      	movs	r0, r6
 800cee0:	6033      	str	r3, [r6, #0]
 800cee2:	f000 f851 	bl	800cf88 <__malloc_unlock>
 800cee6:	e003      	b.n	800cef0 <_malloc_r+0x58>
 800cee8:	2d00      	cmp	r5, #0
 800ceea:	dade      	bge.n	800ceaa <_malloc_r+0x12>
 800ceec:	230c      	movs	r3, #12
 800ceee:	6033      	str	r3, [r6, #0]
 800cef0:	2000      	movs	r0, #0
 800cef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	1b5b      	subs	r3, r3, r5
 800cef8:	d419      	bmi.n	800cf2e <_malloc_r+0x96>
 800cefa:	2b0b      	cmp	r3, #11
 800cefc:	d903      	bls.n	800cf06 <_malloc_r+0x6e>
 800cefe:	6023      	str	r3, [r4, #0]
 800cf00:	18e4      	adds	r4, r4, r3
 800cf02:	6025      	str	r5, [r4, #0]
 800cf04:	e003      	b.n	800cf0e <_malloc_r+0x76>
 800cf06:	6863      	ldr	r3, [r4, #4]
 800cf08:	42a2      	cmp	r2, r4
 800cf0a:	d10e      	bne.n	800cf2a <_malloc_r+0x92>
 800cf0c:	600b      	str	r3, [r1, #0]
 800cf0e:	0030      	movs	r0, r6
 800cf10:	f000 f83a 	bl	800cf88 <__malloc_unlock>
 800cf14:	0020      	movs	r0, r4
 800cf16:	2207      	movs	r2, #7
 800cf18:	300b      	adds	r0, #11
 800cf1a:	1d23      	adds	r3, r4, #4
 800cf1c:	4390      	bics	r0, r2
 800cf1e:	1ac2      	subs	r2, r0, r3
 800cf20:	4298      	cmp	r0, r3
 800cf22:	d0e6      	beq.n	800cef2 <_malloc_r+0x5a>
 800cf24:	1a1b      	subs	r3, r3, r0
 800cf26:	50a3      	str	r3, [r4, r2]
 800cf28:	e7e3      	b.n	800cef2 <_malloc_r+0x5a>
 800cf2a:	6053      	str	r3, [r2, #4]
 800cf2c:	e7ef      	b.n	800cf0e <_malloc_r+0x76>
 800cf2e:	0022      	movs	r2, r4
 800cf30:	6864      	ldr	r4, [r4, #4]
 800cf32:	e7c2      	b.n	800ceba <_malloc_r+0x22>
 800cf34:	2303      	movs	r3, #3
 800cf36:	1cc4      	adds	r4, r0, #3
 800cf38:	439c      	bics	r4, r3
 800cf3a:	42a0      	cmp	r0, r4
 800cf3c:	d0e1      	beq.n	800cf02 <_malloc_r+0x6a>
 800cf3e:	1a21      	subs	r1, r4, r0
 800cf40:	0030      	movs	r0, r6
 800cf42:	f000 f807 	bl	800cf54 <_sbrk_r>
 800cf46:	1c43      	adds	r3, r0, #1
 800cf48:	d1db      	bne.n	800cf02 <_malloc_r+0x6a>
 800cf4a:	e7c7      	b.n	800cedc <_malloc_r+0x44>
 800cf4c:	20000114 	.word	0x20000114
 800cf50:	20000118 	.word	0x20000118

0800cf54 <_sbrk_r>:
 800cf54:	2300      	movs	r3, #0
 800cf56:	b570      	push	{r4, r5, r6, lr}
 800cf58:	4d06      	ldr	r5, [pc, #24]	; (800cf74 <_sbrk_r+0x20>)
 800cf5a:	0004      	movs	r4, r0
 800cf5c:	0008      	movs	r0, r1
 800cf5e:	602b      	str	r3, [r5, #0]
 800cf60:	f7fa fafe 	bl	8007560 <_sbrk>
 800cf64:	1c43      	adds	r3, r0, #1
 800cf66:	d103      	bne.n	800cf70 <_sbrk_r+0x1c>
 800cf68:	682b      	ldr	r3, [r5, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d000      	beq.n	800cf70 <_sbrk_r+0x1c>
 800cf6e:	6023      	str	r3, [r4, #0]
 800cf70:	bd70      	pop	{r4, r5, r6, pc}
 800cf72:	46c0      	nop			; (mov r8, r8)
 800cf74:	20000514 	.word	0x20000514

0800cf78 <__malloc_lock>:
 800cf78:	b510      	push	{r4, lr}
 800cf7a:	4802      	ldr	r0, [pc, #8]	; (800cf84 <__malloc_lock+0xc>)
 800cf7c:	f000 f80c 	bl	800cf98 <__retarget_lock_acquire_recursive>
 800cf80:	bd10      	pop	{r4, pc}
 800cf82:	46c0      	nop			; (mov r8, r8)
 800cf84:	2000051c 	.word	0x2000051c

0800cf88 <__malloc_unlock>:
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	4802      	ldr	r0, [pc, #8]	; (800cf94 <__malloc_unlock+0xc>)
 800cf8c:	f000 f805 	bl	800cf9a <__retarget_lock_release_recursive>
 800cf90:	bd10      	pop	{r4, pc}
 800cf92:	46c0      	nop			; (mov r8, r8)
 800cf94:	2000051c 	.word	0x2000051c

0800cf98 <__retarget_lock_acquire_recursive>:
 800cf98:	4770      	bx	lr

0800cf9a <__retarget_lock_release_recursive>:
 800cf9a:	4770      	bx	lr

0800cf9c <_init>:
 800cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9e:	46c0      	nop			; (mov r8, r8)
 800cfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfa2:	bc08      	pop	{r3}
 800cfa4:	469e      	mov	lr, r3
 800cfa6:	4770      	bx	lr

0800cfa8 <_fini>:
 800cfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfaa:	46c0      	nop			; (mov r8, r8)
 800cfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfae:	bc08      	pop	{r3}
 800cfb0:	469e      	mov	lr, r3
 800cfb2:	4770      	bx	lr
