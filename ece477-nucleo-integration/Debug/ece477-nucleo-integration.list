
ece477-nucleo-integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a408  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e60  0800a4c8  0800a4c8  0001a4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b328  0800b328  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800b328  0800b328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b330  0800b330  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b330  0800b330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b334  0800b334  0001b334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000090  0800b3c8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  0800b3c8  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3aa  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004442  00000000  00000000  0003c462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  000408a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  00041f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b61  00000000  00000000  00043430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3f0  00000000  00000000  0005bf91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c3d  00000000  00000000  00078381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100fbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f8  00000000  00000000  00101014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a4b0 	.word	0x0800a4b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	0800a4b0 	.word	0x0800a4b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f001 fe24 	bl	8001f1c <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f001 fe1f 	bl	8001f1c <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_fadd>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	4646      	mov	r6, r8
 800044c:	46d6      	mov	lr, sl
 800044e:	464f      	mov	r7, r9
 8000450:	024d      	lsls	r5, r1, #9
 8000452:	0242      	lsls	r2, r0, #9
 8000454:	b5c0      	push	{r6, r7, lr}
 8000456:	0a52      	lsrs	r2, r2, #9
 8000458:	0a6e      	lsrs	r6, r5, #9
 800045a:	0047      	lsls	r7, r0, #1
 800045c:	46b0      	mov	r8, r6
 800045e:	0e3f      	lsrs	r7, r7, #24
 8000460:	004e      	lsls	r6, r1, #1
 8000462:	0fc4      	lsrs	r4, r0, #31
 8000464:	00d0      	lsls	r0, r2, #3
 8000466:	4694      	mov	ip, r2
 8000468:	003b      	movs	r3, r7
 800046a:	4682      	mov	sl, r0
 800046c:	0e36      	lsrs	r6, r6, #24
 800046e:	0fc9      	lsrs	r1, r1, #31
 8000470:	09ad      	lsrs	r5, r5, #6
 8000472:	428c      	cmp	r4, r1
 8000474:	d06d      	beq.n	8000552 <__aeabi_fadd+0x10a>
 8000476:	1bb8      	subs	r0, r7, r6
 8000478:	4681      	mov	r9, r0
 800047a:	2800      	cmp	r0, #0
 800047c:	dd4d      	ble.n	800051a <__aeabi_fadd+0xd2>
 800047e:	2e00      	cmp	r6, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_fadd+0x3c>
 8000482:	e088      	b.n	8000596 <__aeabi_fadd+0x14e>
 8000484:	2fff      	cmp	r7, #255	; 0xff
 8000486:	d05a      	beq.n	800053e <__aeabi_fadd+0xf6>
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	04db      	lsls	r3, r3, #19
 800048c:	431d      	orrs	r5, r3
 800048e:	464b      	mov	r3, r9
 8000490:	2201      	movs	r2, #1
 8000492:	2b1b      	cmp	r3, #27
 8000494:	dc0a      	bgt.n	80004ac <__aeabi_fadd+0x64>
 8000496:	002b      	movs	r3, r5
 8000498:	464a      	mov	r2, r9
 800049a:	4649      	mov	r1, r9
 800049c:	40d3      	lsrs	r3, r2
 800049e:	2220      	movs	r2, #32
 80004a0:	1a52      	subs	r2, r2, r1
 80004a2:	4095      	lsls	r5, r2
 80004a4:	002a      	movs	r2, r5
 80004a6:	1e55      	subs	r5, r2, #1
 80004a8:	41aa      	sbcs	r2, r5
 80004aa:	431a      	orrs	r2, r3
 80004ac:	4653      	mov	r3, sl
 80004ae:	1a9a      	subs	r2, r3, r2
 80004b0:	0153      	lsls	r3, r2, #5
 80004b2:	d400      	bmi.n	80004b6 <__aeabi_fadd+0x6e>
 80004b4:	e0b9      	b.n	800062a <__aeabi_fadd+0x1e2>
 80004b6:	0192      	lsls	r2, r2, #6
 80004b8:	0996      	lsrs	r6, r2, #6
 80004ba:	0030      	movs	r0, r6
 80004bc:	f001 fd10 	bl	8001ee0 <__clzsi2>
 80004c0:	3805      	subs	r0, #5
 80004c2:	4086      	lsls	r6, r0
 80004c4:	4287      	cmp	r7, r0
 80004c6:	dd00      	ble.n	80004ca <__aeabi_fadd+0x82>
 80004c8:	e0d4      	b.n	8000674 <__aeabi_fadd+0x22c>
 80004ca:	0033      	movs	r3, r6
 80004cc:	1bc7      	subs	r7, r0, r7
 80004ce:	2020      	movs	r0, #32
 80004d0:	3701      	adds	r7, #1
 80004d2:	40fb      	lsrs	r3, r7
 80004d4:	1bc7      	subs	r7, r0, r7
 80004d6:	40be      	lsls	r6, r7
 80004d8:	0032      	movs	r2, r6
 80004da:	1e56      	subs	r6, r2, #1
 80004dc:	41b2      	sbcs	r2, r6
 80004de:	2700      	movs	r7, #0
 80004e0:	431a      	orrs	r2, r3
 80004e2:	0753      	lsls	r3, r2, #29
 80004e4:	d004      	beq.n	80004f0 <__aeabi_fadd+0xa8>
 80004e6:	230f      	movs	r3, #15
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d000      	beq.n	80004f0 <__aeabi_fadd+0xa8>
 80004ee:	3204      	adds	r2, #4
 80004f0:	0153      	lsls	r3, r2, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0xae>
 80004f4:	e09c      	b.n	8000630 <__aeabi_fadd+0x1e8>
 80004f6:	1c7b      	adds	r3, r7, #1
 80004f8:	2ffe      	cmp	r7, #254	; 0xfe
 80004fa:	d100      	bne.n	80004fe <__aeabi_fadd+0xb6>
 80004fc:	e09a      	b.n	8000634 <__aeabi_fadd+0x1ec>
 80004fe:	0192      	lsls	r2, r2, #6
 8000500:	0a52      	lsrs	r2, r2, #9
 8000502:	4694      	mov	ip, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	05d8      	lsls	r0, r3, #23
 8000508:	4663      	mov	r3, ip
 800050a:	07e4      	lsls	r4, r4, #31
 800050c:	4318      	orrs	r0, r3
 800050e:	4320      	orrs	r0, r4
 8000510:	bce0      	pop	{r5, r6, r7}
 8000512:	46ba      	mov	sl, r7
 8000514:	46b1      	mov	r9, r6
 8000516:	46a8      	mov	r8, r5
 8000518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051a:	2800      	cmp	r0, #0
 800051c:	d049      	beq.n	80005b2 <__aeabi_fadd+0x16a>
 800051e:	1bf3      	subs	r3, r6, r7
 8000520:	2f00      	cmp	r7, #0
 8000522:	d000      	beq.n	8000526 <__aeabi_fadd+0xde>
 8000524:	e0b6      	b.n	8000694 <__aeabi_fadd+0x24c>
 8000526:	4652      	mov	r2, sl
 8000528:	2a00      	cmp	r2, #0
 800052a:	d060      	beq.n	80005ee <__aeabi_fadd+0x1a6>
 800052c:	3b01      	subs	r3, #1
 800052e:	2b00      	cmp	r3, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0xec>
 8000532:	e0fc      	b.n	800072e <__aeabi_fadd+0x2e6>
 8000534:	2eff      	cmp	r6, #255	; 0xff
 8000536:	d000      	beq.n	800053a <__aeabi_fadd+0xf2>
 8000538:	e0b4      	b.n	80006a4 <__aeabi_fadd+0x25c>
 800053a:	000c      	movs	r4, r1
 800053c:	4642      	mov	r2, r8
 800053e:	2a00      	cmp	r2, #0
 8000540:	d078      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 8000542:	2080      	movs	r0, #128	; 0x80
 8000544:	03c0      	lsls	r0, r0, #15
 8000546:	4310      	orrs	r0, r2
 8000548:	0242      	lsls	r2, r0, #9
 800054a:	0a53      	lsrs	r3, r2, #9
 800054c:	469c      	mov	ip, r3
 800054e:	23ff      	movs	r3, #255	; 0xff
 8000550:	e7d9      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000552:	1bb9      	subs	r1, r7, r6
 8000554:	2900      	cmp	r1, #0
 8000556:	dd71      	ble.n	800063c <__aeabi_fadd+0x1f4>
 8000558:	2e00      	cmp	r6, #0
 800055a:	d03f      	beq.n	80005dc <__aeabi_fadd+0x194>
 800055c:	2fff      	cmp	r7, #255	; 0xff
 800055e:	d0ee      	beq.n	800053e <__aeabi_fadd+0xf6>
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	04db      	lsls	r3, r3, #19
 8000564:	431d      	orrs	r5, r3
 8000566:	2201      	movs	r2, #1
 8000568:	291b      	cmp	r1, #27
 800056a:	dc07      	bgt.n	800057c <__aeabi_fadd+0x134>
 800056c:	002a      	movs	r2, r5
 800056e:	2320      	movs	r3, #32
 8000570:	40ca      	lsrs	r2, r1
 8000572:	1a59      	subs	r1, r3, r1
 8000574:	408d      	lsls	r5, r1
 8000576:	1e6b      	subs	r3, r5, #1
 8000578:	419d      	sbcs	r5, r3
 800057a:	432a      	orrs	r2, r5
 800057c:	4452      	add	r2, sl
 800057e:	0153      	lsls	r3, r2, #5
 8000580:	d553      	bpl.n	800062a <__aeabi_fadd+0x1e2>
 8000582:	3701      	adds	r7, #1
 8000584:	2fff      	cmp	r7, #255	; 0xff
 8000586:	d055      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 8000588:	2301      	movs	r3, #1
 800058a:	497b      	ldr	r1, [pc, #492]	; (8000778 <__aeabi_fadd+0x330>)
 800058c:	4013      	ands	r3, r2
 800058e:	0852      	lsrs	r2, r2, #1
 8000590:	400a      	ands	r2, r1
 8000592:	431a      	orrs	r2, r3
 8000594:	e7a5      	b.n	80004e2 <__aeabi_fadd+0x9a>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d02c      	beq.n	80005f4 <__aeabi_fadd+0x1ac>
 800059a:	2301      	movs	r3, #1
 800059c:	425b      	negs	r3, r3
 800059e:	469c      	mov	ip, r3
 80005a0:	44e1      	add	r9, ip
 80005a2:	464b      	mov	r3, r9
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x162>
 80005a8:	e0ad      	b.n	8000706 <__aeabi_fadd+0x2be>
 80005aa:	2fff      	cmp	r7, #255	; 0xff
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fadd+0x168>
 80005ae:	e76e      	b.n	800048e <__aeabi_fadd+0x46>
 80005b0:	e7c5      	b.n	800053e <__aeabi_fadd+0xf6>
 80005b2:	20fe      	movs	r0, #254	; 0xfe
 80005b4:	1c7e      	adds	r6, r7, #1
 80005b6:	4230      	tst	r0, r6
 80005b8:	d160      	bne.n	800067c <__aeabi_fadd+0x234>
 80005ba:	2f00      	cmp	r7, #0
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fadd+0x178>
 80005be:	e093      	b.n	80006e8 <__aeabi_fadd+0x2a0>
 80005c0:	4652      	mov	r2, sl
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x180>
 80005c6:	e0b6      	b.n	8000736 <__aeabi_fadd+0x2ee>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d09c      	beq.n	8000506 <__aeabi_fadd+0xbe>
 80005cc:	1b52      	subs	r2, r2, r5
 80005ce:	0150      	lsls	r0, r2, #5
 80005d0:	d400      	bmi.n	80005d4 <__aeabi_fadd+0x18c>
 80005d2:	e0c3      	b.n	800075c <__aeabi_fadd+0x314>
 80005d4:	4653      	mov	r3, sl
 80005d6:	000c      	movs	r4, r1
 80005d8:	1aea      	subs	r2, r5, r3
 80005da:	e782      	b.n	80004e2 <__aeabi_fadd+0x9a>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d009      	beq.n	80005f4 <__aeabi_fadd+0x1ac>
 80005e0:	3901      	subs	r1, #1
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x1a0>
 80005e6:	e08b      	b.n	8000700 <__aeabi_fadd+0x2b8>
 80005e8:	2fff      	cmp	r7, #255	; 0xff
 80005ea:	d1bc      	bne.n	8000566 <__aeabi_fadd+0x11e>
 80005ec:	e7a7      	b.n	800053e <__aeabi_fadd+0xf6>
 80005ee:	000c      	movs	r4, r1
 80005f0:	4642      	mov	r2, r8
 80005f2:	0037      	movs	r7, r6
 80005f4:	2fff      	cmp	r7, #255	; 0xff
 80005f6:	d0a2      	beq.n	800053e <__aeabi_fadd+0xf6>
 80005f8:	0252      	lsls	r2, r2, #9
 80005fa:	0a53      	lsrs	r3, r2, #9
 80005fc:	469c      	mov	ip, r3
 80005fe:	b2fb      	uxtb	r3, r7
 8000600:	e781      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000602:	21fe      	movs	r1, #254	; 0xfe
 8000604:	3701      	adds	r7, #1
 8000606:	4239      	tst	r1, r7
 8000608:	d165      	bne.n	80006d6 <__aeabi_fadd+0x28e>
 800060a:	2b00      	cmp	r3, #0
 800060c:	d17e      	bne.n	800070c <__aeabi_fadd+0x2c4>
 800060e:	2800      	cmp	r0, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_fadd+0x1cc>
 8000612:	e0aa      	b.n	800076a <__aeabi_fadd+0x322>
 8000614:	2d00      	cmp	r5, #0
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x1d2>
 8000618:	e775      	b.n	8000506 <__aeabi_fadd+0xbe>
 800061a:	002a      	movs	r2, r5
 800061c:	4452      	add	r2, sl
 800061e:	2700      	movs	r7, #0
 8000620:	0153      	lsls	r3, r2, #5
 8000622:	d502      	bpl.n	800062a <__aeabi_fadd+0x1e2>
 8000624:	4b55      	ldr	r3, [pc, #340]	; (800077c <__aeabi_fadd+0x334>)
 8000626:	3701      	adds	r7, #1
 8000628:	401a      	ands	r2, r3
 800062a:	0753      	lsls	r3, r2, #29
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x1e8>
 800062e:	e75a      	b.n	80004e6 <__aeabi_fadd+0x9e>
 8000630:	08d2      	lsrs	r2, r2, #3
 8000632:	e7df      	b.n	80005f4 <__aeabi_fadd+0x1ac>
 8000634:	2200      	movs	r2, #0
 8000636:	23ff      	movs	r3, #255	; 0xff
 8000638:	4694      	mov	ip, r2
 800063a:	e764      	b.n	8000506 <__aeabi_fadd+0xbe>
 800063c:	2900      	cmp	r1, #0
 800063e:	d0e0      	beq.n	8000602 <__aeabi_fadd+0x1ba>
 8000640:	1bf3      	subs	r3, r6, r7
 8000642:	2f00      	cmp	r7, #0
 8000644:	d03e      	beq.n	80006c4 <__aeabi_fadd+0x27c>
 8000646:	2eff      	cmp	r6, #255	; 0xff
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x204>
 800064a:	e777      	b.n	800053c <__aeabi_fadd+0xf4>
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0001      	movs	r1, r0
 8000650:	04d2      	lsls	r2, r2, #19
 8000652:	4311      	orrs	r1, r2
 8000654:	468a      	mov	sl, r1
 8000656:	2201      	movs	r2, #1
 8000658:	2b1b      	cmp	r3, #27
 800065a:	dc08      	bgt.n	800066e <__aeabi_fadd+0x226>
 800065c:	4652      	mov	r2, sl
 800065e:	2120      	movs	r1, #32
 8000660:	4650      	mov	r0, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	1acb      	subs	r3, r1, r3
 8000666:	4098      	lsls	r0, r3
 8000668:	1e43      	subs	r3, r0, #1
 800066a:	4198      	sbcs	r0, r3
 800066c:	4302      	orrs	r2, r0
 800066e:	0037      	movs	r7, r6
 8000670:	1952      	adds	r2, r2, r5
 8000672:	e784      	b.n	800057e <__aeabi_fadd+0x136>
 8000674:	4a41      	ldr	r2, [pc, #260]	; (800077c <__aeabi_fadd+0x334>)
 8000676:	1a3f      	subs	r7, r7, r0
 8000678:	4032      	ands	r2, r6
 800067a:	e732      	b.n	80004e2 <__aeabi_fadd+0x9a>
 800067c:	4653      	mov	r3, sl
 800067e:	1b5e      	subs	r6, r3, r5
 8000680:	0173      	lsls	r3, r6, #5
 8000682:	d42d      	bmi.n	80006e0 <__aeabi_fadd+0x298>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d000      	beq.n	800068a <__aeabi_fadd+0x242>
 8000688:	e717      	b.n	80004ba <__aeabi_fadd+0x72>
 800068a:	2200      	movs	r2, #0
 800068c:	2400      	movs	r4, #0
 800068e:	2300      	movs	r3, #0
 8000690:	4694      	mov	ip, r2
 8000692:	e738      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000694:	2eff      	cmp	r6, #255	; 0xff
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x252>
 8000698:	e74f      	b.n	800053a <__aeabi_fadd+0xf2>
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	4650      	mov	r0, sl
 800069e:	04d2      	lsls	r2, r2, #19
 80006a0:	4310      	orrs	r0, r2
 80006a2:	4682      	mov	sl, r0
 80006a4:	2201      	movs	r2, #1
 80006a6:	2b1b      	cmp	r3, #27
 80006a8:	dc08      	bgt.n	80006bc <__aeabi_fadd+0x274>
 80006aa:	4652      	mov	r2, sl
 80006ac:	2420      	movs	r4, #32
 80006ae:	4650      	mov	r0, sl
 80006b0:	40da      	lsrs	r2, r3
 80006b2:	1ae3      	subs	r3, r4, r3
 80006b4:	4098      	lsls	r0, r3
 80006b6:	1e43      	subs	r3, r0, #1
 80006b8:	4198      	sbcs	r0, r3
 80006ba:	4302      	orrs	r2, r0
 80006bc:	000c      	movs	r4, r1
 80006be:	0037      	movs	r7, r6
 80006c0:	1aaa      	subs	r2, r5, r2
 80006c2:	e6f5      	b.n	80004b0 <__aeabi_fadd+0x68>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d093      	beq.n	80005f0 <__aeabi_fadd+0x1a8>
 80006c8:	3b01      	subs	r3, #1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d04f      	beq.n	800076e <__aeabi_fadd+0x326>
 80006ce:	2eff      	cmp	r6, #255	; 0xff
 80006d0:	d1c1      	bne.n	8000656 <__aeabi_fadd+0x20e>
 80006d2:	4642      	mov	r2, r8
 80006d4:	e733      	b.n	800053e <__aeabi_fadd+0xf6>
 80006d6:	2fff      	cmp	r7, #255	; 0xff
 80006d8:	d0ac      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 80006da:	4455      	add	r5, sl
 80006dc:	086a      	lsrs	r2, r5, #1
 80006de:	e7a4      	b.n	800062a <__aeabi_fadd+0x1e2>
 80006e0:	4653      	mov	r3, sl
 80006e2:	000c      	movs	r4, r1
 80006e4:	1aee      	subs	r6, r5, r3
 80006e6:	e6e8      	b.n	80004ba <__aeabi_fadd+0x72>
 80006e8:	4653      	mov	r3, sl
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d128      	bne.n	8000740 <__aeabi_fadd+0x2f8>
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d000      	beq.n	80006f4 <__aeabi_fadd+0x2ac>
 80006f2:	e722      	b.n	800053a <__aeabi_fadd+0xf2>
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	03db      	lsls	r3, r3, #15
 80006f8:	469c      	mov	ip, r3
 80006fa:	2400      	movs	r4, #0
 80006fc:	23ff      	movs	r3, #255	; 0xff
 80006fe:	e702      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000700:	002a      	movs	r2, r5
 8000702:	4452      	add	r2, sl
 8000704:	e73b      	b.n	800057e <__aeabi_fadd+0x136>
 8000706:	4653      	mov	r3, sl
 8000708:	1b5a      	subs	r2, r3, r5
 800070a:	e6d1      	b.n	80004b0 <__aeabi_fadd+0x68>
 800070c:	2800      	cmp	r0, #0
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x2ca>
 8000710:	e714      	b.n	800053c <__aeabi_fadd+0xf4>
 8000712:	2d00      	cmp	r5, #0
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x2d0>
 8000716:	e712      	b.n	800053e <__aeabi_fadd+0xf6>
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	03db      	lsls	r3, r3, #15
 800071c:	421a      	tst	r2, r3
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x2da>
 8000720:	e70d      	b.n	800053e <__aeabi_fadd+0xf6>
 8000722:	4641      	mov	r1, r8
 8000724:	4219      	tst	r1, r3
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x2e2>
 8000728:	e709      	b.n	800053e <__aeabi_fadd+0xf6>
 800072a:	4642      	mov	r2, r8
 800072c:	e707      	b.n	800053e <__aeabi_fadd+0xf6>
 800072e:	000c      	movs	r4, r1
 8000730:	0037      	movs	r7, r6
 8000732:	1aaa      	subs	r2, r5, r2
 8000734:	e6bc      	b.n	80004b0 <__aeabi_fadd+0x68>
 8000736:	2d00      	cmp	r5, #0
 8000738:	d013      	beq.n	8000762 <__aeabi_fadd+0x31a>
 800073a:	000c      	movs	r4, r1
 800073c:	46c4      	mov	ip, r8
 800073e:	e6e2      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x2fe>
 8000744:	e6fb      	b.n	800053e <__aeabi_fadd+0xf6>
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	03db      	lsls	r3, r3, #15
 800074a:	421a      	tst	r2, r3
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x308>
 800074e:	e6f6      	b.n	800053e <__aeabi_fadd+0xf6>
 8000750:	4640      	mov	r0, r8
 8000752:	4218      	tst	r0, r3
 8000754:	d000      	beq.n	8000758 <__aeabi_fadd+0x310>
 8000756:	e6f2      	b.n	800053e <__aeabi_fadd+0xf6>
 8000758:	000c      	movs	r4, r1
 800075a:	e6ef      	b.n	800053c <__aeabi_fadd+0xf4>
 800075c:	2a00      	cmp	r2, #0
 800075e:	d000      	beq.n	8000762 <__aeabi_fadd+0x31a>
 8000760:	e763      	b.n	800062a <__aeabi_fadd+0x1e2>
 8000762:	2200      	movs	r2, #0
 8000764:	2400      	movs	r4, #0
 8000766:	4694      	mov	ip, r2
 8000768:	e6cd      	b.n	8000506 <__aeabi_fadd+0xbe>
 800076a:	46c4      	mov	ip, r8
 800076c:	e6cb      	b.n	8000506 <__aeabi_fadd+0xbe>
 800076e:	002a      	movs	r2, r5
 8000770:	0037      	movs	r7, r6
 8000772:	4452      	add	r2, sl
 8000774:	e703      	b.n	800057e <__aeabi_fadd+0x136>
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	7dffffff 	.word	0x7dffffff
 800077c:	fbffffff 	.word	0xfbffffff

08000780 <__aeabi_fdiv>:
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	464f      	mov	r7, r9
 8000784:	4646      	mov	r6, r8
 8000786:	46d6      	mov	lr, sl
 8000788:	0245      	lsls	r5, r0, #9
 800078a:	b5c0      	push	{r6, r7, lr}
 800078c:	0047      	lsls	r7, r0, #1
 800078e:	1c0c      	adds	r4, r1, #0
 8000790:	0a6d      	lsrs	r5, r5, #9
 8000792:	0e3f      	lsrs	r7, r7, #24
 8000794:	0fc6      	lsrs	r6, r0, #31
 8000796:	2f00      	cmp	r7, #0
 8000798:	d066      	beq.n	8000868 <__aeabi_fdiv+0xe8>
 800079a:	2fff      	cmp	r7, #255	; 0xff
 800079c:	d06c      	beq.n	8000878 <__aeabi_fdiv+0xf8>
 800079e:	2300      	movs	r3, #0
 80007a0:	00ea      	lsls	r2, r5, #3
 80007a2:	2580      	movs	r5, #128	; 0x80
 80007a4:	4699      	mov	r9, r3
 80007a6:	469a      	mov	sl, r3
 80007a8:	04ed      	lsls	r5, r5, #19
 80007aa:	4315      	orrs	r5, r2
 80007ac:	3f7f      	subs	r7, #127	; 0x7f
 80007ae:	0260      	lsls	r0, r4, #9
 80007b0:	0061      	lsls	r1, r4, #1
 80007b2:	0a43      	lsrs	r3, r0, #9
 80007b4:	4698      	mov	r8, r3
 80007b6:	0e09      	lsrs	r1, r1, #24
 80007b8:	0fe4      	lsrs	r4, r4, #31
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d048      	beq.n	8000850 <__aeabi_fdiv+0xd0>
 80007be:	29ff      	cmp	r1, #255	; 0xff
 80007c0:	d010      	beq.n	80007e4 <__aeabi_fdiv+0x64>
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	00d8      	lsls	r0, r3, #3
 80007c6:	04d2      	lsls	r2, r2, #19
 80007c8:	4302      	orrs	r2, r0
 80007ca:	4690      	mov	r8, r2
 80007cc:	2000      	movs	r0, #0
 80007ce:	397f      	subs	r1, #127	; 0x7f
 80007d0:	464a      	mov	r2, r9
 80007d2:	0033      	movs	r3, r6
 80007d4:	1a7f      	subs	r7, r7, r1
 80007d6:	4302      	orrs	r2, r0
 80007d8:	496c      	ldr	r1, [pc, #432]	; (800098c <__aeabi_fdiv+0x20c>)
 80007da:	0092      	lsls	r2, r2, #2
 80007dc:	588a      	ldr	r2, [r1, r2]
 80007de:	4063      	eors	r3, r4
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4697      	mov	pc, r2
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d16d      	bne.n	80008c4 <__aeabi_fdiv+0x144>
 80007e8:	2002      	movs	r0, #2
 80007ea:	3fff      	subs	r7, #255	; 0xff
 80007ec:	e033      	b.n	8000856 <__aeabi_fdiv+0xd6>
 80007ee:	2300      	movs	r3, #0
 80007f0:	4698      	mov	r8, r3
 80007f2:	0026      	movs	r6, r4
 80007f4:	4645      	mov	r5, r8
 80007f6:	4682      	mov	sl, r0
 80007f8:	4653      	mov	r3, sl
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d100      	bne.n	8000800 <__aeabi_fdiv+0x80>
 80007fe:	e07f      	b.n	8000900 <__aeabi_fdiv+0x180>
 8000800:	2b03      	cmp	r3, #3
 8000802:	d100      	bne.n	8000806 <__aeabi_fdiv+0x86>
 8000804:	e094      	b.n	8000930 <__aeabi_fdiv+0x1b0>
 8000806:	2b01      	cmp	r3, #1
 8000808:	d017      	beq.n	800083a <__aeabi_fdiv+0xba>
 800080a:	0038      	movs	r0, r7
 800080c:	307f      	adds	r0, #127	; 0x7f
 800080e:	2800      	cmp	r0, #0
 8000810:	dd5f      	ble.n	80008d2 <__aeabi_fdiv+0x152>
 8000812:	076b      	lsls	r3, r5, #29
 8000814:	d004      	beq.n	8000820 <__aeabi_fdiv+0xa0>
 8000816:	230f      	movs	r3, #15
 8000818:	402b      	ands	r3, r5
 800081a:	2b04      	cmp	r3, #4
 800081c:	d000      	beq.n	8000820 <__aeabi_fdiv+0xa0>
 800081e:	3504      	adds	r5, #4
 8000820:	012b      	lsls	r3, r5, #4
 8000822:	d503      	bpl.n	800082c <__aeabi_fdiv+0xac>
 8000824:	0038      	movs	r0, r7
 8000826:	4b5a      	ldr	r3, [pc, #360]	; (8000990 <__aeabi_fdiv+0x210>)
 8000828:	3080      	adds	r0, #128	; 0x80
 800082a:	401d      	ands	r5, r3
 800082c:	28fe      	cmp	r0, #254	; 0xfe
 800082e:	dc67      	bgt.n	8000900 <__aeabi_fdiv+0x180>
 8000830:	01ad      	lsls	r5, r5, #6
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	b2c0      	uxtb	r0, r0
 8000836:	e002      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000838:	001e      	movs	r6, r3
 800083a:	2000      	movs	r0, #0
 800083c:	2500      	movs	r5, #0
 800083e:	05c0      	lsls	r0, r0, #23
 8000840:	4328      	orrs	r0, r5
 8000842:	07f6      	lsls	r6, r6, #31
 8000844:	4330      	orrs	r0, r6
 8000846:	bce0      	pop	{r5, r6, r7}
 8000848:	46ba      	mov	sl, r7
 800084a:	46b1      	mov	r9, r6
 800084c:	46a8      	mov	r8, r5
 800084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000850:	2b00      	cmp	r3, #0
 8000852:	d12b      	bne.n	80008ac <__aeabi_fdiv+0x12c>
 8000854:	2001      	movs	r0, #1
 8000856:	464a      	mov	r2, r9
 8000858:	0033      	movs	r3, r6
 800085a:	494e      	ldr	r1, [pc, #312]	; (8000994 <__aeabi_fdiv+0x214>)
 800085c:	4302      	orrs	r2, r0
 800085e:	0092      	lsls	r2, r2, #2
 8000860:	588a      	ldr	r2, [r1, r2]
 8000862:	4063      	eors	r3, r4
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4697      	mov	pc, r2
 8000868:	2d00      	cmp	r5, #0
 800086a:	d113      	bne.n	8000894 <__aeabi_fdiv+0x114>
 800086c:	2304      	movs	r3, #4
 800086e:	4699      	mov	r9, r3
 8000870:	3b03      	subs	r3, #3
 8000872:	2700      	movs	r7, #0
 8000874:	469a      	mov	sl, r3
 8000876:	e79a      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000878:	2d00      	cmp	r5, #0
 800087a:	d105      	bne.n	8000888 <__aeabi_fdiv+0x108>
 800087c:	2308      	movs	r3, #8
 800087e:	4699      	mov	r9, r3
 8000880:	3b06      	subs	r3, #6
 8000882:	27ff      	movs	r7, #255	; 0xff
 8000884:	469a      	mov	sl, r3
 8000886:	e792      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000888:	230c      	movs	r3, #12
 800088a:	4699      	mov	r9, r3
 800088c:	3b09      	subs	r3, #9
 800088e:	27ff      	movs	r7, #255	; 0xff
 8000890:	469a      	mov	sl, r3
 8000892:	e78c      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000894:	0028      	movs	r0, r5
 8000896:	f001 fb23 	bl	8001ee0 <__clzsi2>
 800089a:	2776      	movs	r7, #118	; 0x76
 800089c:	1f43      	subs	r3, r0, #5
 800089e:	409d      	lsls	r5, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	427f      	negs	r7, r7
 80008a4:	4699      	mov	r9, r3
 80008a6:	469a      	mov	sl, r3
 80008a8:	1a3f      	subs	r7, r7, r0
 80008aa:	e780      	b.n	80007ae <__aeabi_fdiv+0x2e>
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fb17 	bl	8001ee0 <__clzsi2>
 80008b2:	4642      	mov	r2, r8
 80008b4:	1f43      	subs	r3, r0, #5
 80008b6:	2176      	movs	r1, #118	; 0x76
 80008b8:	409a      	lsls	r2, r3
 80008ba:	4249      	negs	r1, r1
 80008bc:	1a09      	subs	r1, r1, r0
 80008be:	4690      	mov	r8, r2
 80008c0:	2000      	movs	r0, #0
 80008c2:	e785      	b.n	80007d0 <__aeabi_fdiv+0x50>
 80008c4:	21ff      	movs	r1, #255	; 0xff
 80008c6:	2003      	movs	r0, #3
 80008c8:	e782      	b.n	80007d0 <__aeabi_fdiv+0x50>
 80008ca:	001e      	movs	r6, r3
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	2500      	movs	r5, #0
 80008d0:	e7b5      	b.n	800083e <__aeabi_fdiv+0xbe>
 80008d2:	2301      	movs	r3, #1
 80008d4:	1a1b      	subs	r3, r3, r0
 80008d6:	2b1b      	cmp	r3, #27
 80008d8:	dcaf      	bgt.n	800083a <__aeabi_fdiv+0xba>
 80008da:	379e      	adds	r7, #158	; 0x9e
 80008dc:	0029      	movs	r1, r5
 80008de:	40bd      	lsls	r5, r7
 80008e0:	40d9      	lsrs	r1, r3
 80008e2:	1e6a      	subs	r2, r5, #1
 80008e4:	4195      	sbcs	r5, r2
 80008e6:	430d      	orrs	r5, r1
 80008e8:	076b      	lsls	r3, r5, #29
 80008ea:	d004      	beq.n	80008f6 <__aeabi_fdiv+0x176>
 80008ec:	230f      	movs	r3, #15
 80008ee:	402b      	ands	r3, r5
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fdiv+0x176>
 80008f4:	3504      	adds	r5, #4
 80008f6:	016b      	lsls	r3, r5, #5
 80008f8:	d544      	bpl.n	8000984 <__aeabi_fdiv+0x204>
 80008fa:	2001      	movs	r0, #1
 80008fc:	2500      	movs	r5, #0
 80008fe:	e79e      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	2500      	movs	r5, #0
 8000904:	e79b      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000906:	2580      	movs	r5, #128	; 0x80
 8000908:	2600      	movs	r6, #0
 800090a:	20ff      	movs	r0, #255	; 0xff
 800090c:	03ed      	lsls	r5, r5, #15
 800090e:	e796      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000910:	2300      	movs	r3, #0
 8000912:	4698      	mov	r8, r3
 8000914:	2080      	movs	r0, #128	; 0x80
 8000916:	03c0      	lsls	r0, r0, #15
 8000918:	4205      	tst	r5, r0
 800091a:	d009      	beq.n	8000930 <__aeabi_fdiv+0x1b0>
 800091c:	4643      	mov	r3, r8
 800091e:	4203      	tst	r3, r0
 8000920:	d106      	bne.n	8000930 <__aeabi_fdiv+0x1b0>
 8000922:	4645      	mov	r5, r8
 8000924:	4305      	orrs	r5, r0
 8000926:	026d      	lsls	r5, r5, #9
 8000928:	0026      	movs	r6, r4
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	e786      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000930:	2080      	movs	r0, #128	; 0x80
 8000932:	03c0      	lsls	r0, r0, #15
 8000934:	4305      	orrs	r5, r0
 8000936:	026d      	lsls	r5, r5, #9
 8000938:	20ff      	movs	r0, #255	; 0xff
 800093a:	0a6d      	lsrs	r5, r5, #9
 800093c:	e77f      	b.n	800083e <__aeabi_fdiv+0xbe>
 800093e:	4641      	mov	r1, r8
 8000940:	016a      	lsls	r2, r5, #5
 8000942:	0148      	lsls	r0, r1, #5
 8000944:	4282      	cmp	r2, r0
 8000946:	d219      	bcs.n	800097c <__aeabi_fdiv+0x1fc>
 8000948:	211b      	movs	r1, #27
 800094a:	2500      	movs	r5, #0
 800094c:	3f01      	subs	r7, #1
 800094e:	2601      	movs	r6, #1
 8000950:	0014      	movs	r4, r2
 8000952:	006d      	lsls	r5, r5, #1
 8000954:	0052      	lsls	r2, r2, #1
 8000956:	2c00      	cmp	r4, #0
 8000958:	db01      	blt.n	800095e <__aeabi_fdiv+0x1de>
 800095a:	4290      	cmp	r0, r2
 800095c:	d801      	bhi.n	8000962 <__aeabi_fdiv+0x1e2>
 800095e:	1a12      	subs	r2, r2, r0
 8000960:	4335      	orrs	r5, r6
 8000962:	3901      	subs	r1, #1
 8000964:	2900      	cmp	r1, #0
 8000966:	d1f3      	bne.n	8000950 <__aeabi_fdiv+0x1d0>
 8000968:	1e50      	subs	r0, r2, #1
 800096a:	4182      	sbcs	r2, r0
 800096c:	0038      	movs	r0, r7
 800096e:	307f      	adds	r0, #127	; 0x7f
 8000970:	001e      	movs	r6, r3
 8000972:	4315      	orrs	r5, r2
 8000974:	2800      	cmp	r0, #0
 8000976:	dd00      	ble.n	800097a <__aeabi_fdiv+0x1fa>
 8000978:	e74b      	b.n	8000812 <__aeabi_fdiv+0x92>
 800097a:	e7aa      	b.n	80008d2 <__aeabi_fdiv+0x152>
 800097c:	211a      	movs	r1, #26
 800097e:	2501      	movs	r5, #1
 8000980:	1a12      	subs	r2, r2, r0
 8000982:	e7e4      	b.n	800094e <__aeabi_fdiv+0x1ce>
 8000984:	01ad      	lsls	r5, r5, #6
 8000986:	2000      	movs	r0, #0
 8000988:	0a6d      	lsrs	r5, r5, #9
 800098a:	e758      	b.n	800083e <__aeabi_fdiv+0xbe>
 800098c:	0800abe4 	.word	0x0800abe4
 8000990:	f7ffffff 	.word	0xf7ffffff
 8000994:	0800ac24 	.word	0x0800ac24

08000998 <__aeabi_fmul>:
 8000998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099a:	4657      	mov	r7, sl
 800099c:	464e      	mov	r6, r9
 800099e:	4645      	mov	r5, r8
 80009a0:	46de      	mov	lr, fp
 80009a2:	0244      	lsls	r4, r0, #9
 80009a4:	b5e0      	push	{r5, r6, r7, lr}
 80009a6:	0045      	lsls	r5, r0, #1
 80009a8:	1c0f      	adds	r7, r1, #0
 80009aa:	0a64      	lsrs	r4, r4, #9
 80009ac:	0e2d      	lsrs	r5, r5, #24
 80009ae:	0fc6      	lsrs	r6, r0, #31
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d047      	beq.n	8000a44 <__aeabi_fmul+0xac>
 80009b4:	2dff      	cmp	r5, #255	; 0xff
 80009b6:	d04d      	beq.n	8000a54 <__aeabi_fmul+0xbc>
 80009b8:	2300      	movs	r3, #0
 80009ba:	2080      	movs	r0, #128	; 0x80
 80009bc:	469a      	mov	sl, r3
 80009be:	469b      	mov	fp, r3
 80009c0:	00e4      	lsls	r4, r4, #3
 80009c2:	04c0      	lsls	r0, r0, #19
 80009c4:	4304      	orrs	r4, r0
 80009c6:	3d7f      	subs	r5, #127	; 0x7f
 80009c8:	0278      	lsls	r0, r7, #9
 80009ca:	0a43      	lsrs	r3, r0, #9
 80009cc:	4699      	mov	r9, r3
 80009ce:	007a      	lsls	r2, r7, #1
 80009d0:	0ffb      	lsrs	r3, r7, #31
 80009d2:	4698      	mov	r8, r3
 80009d4:	0e12      	lsrs	r2, r2, #24
 80009d6:	464b      	mov	r3, r9
 80009d8:	d044      	beq.n	8000a64 <__aeabi_fmul+0xcc>
 80009da:	2aff      	cmp	r2, #255	; 0xff
 80009dc:	d011      	beq.n	8000a02 <__aeabi_fmul+0x6a>
 80009de:	00d8      	lsls	r0, r3, #3
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	04db      	lsls	r3, r3, #19
 80009e4:	4303      	orrs	r3, r0
 80009e6:	4699      	mov	r9, r3
 80009e8:	2000      	movs	r0, #0
 80009ea:	3a7f      	subs	r2, #127	; 0x7f
 80009ec:	18ad      	adds	r5, r5, r2
 80009ee:	4647      	mov	r7, r8
 80009f0:	4653      	mov	r3, sl
 80009f2:	4077      	eors	r7, r6
 80009f4:	1c69      	adds	r1, r5, #1
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	d83f      	bhi.n	8000a7a <__aeabi_fmul+0xe2>
 80009fa:	4a72      	ldr	r2, [pc, #456]	; (8000bc4 <__aeabi_fmul+0x22c>)
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	58d3      	ldr	r3, [r2, r3]
 8000a00:	469f      	mov	pc, r3
 8000a02:	35ff      	adds	r5, #255	; 0xff
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fmul+0x72>
 8000a08:	e079      	b.n	8000afe <__aeabi_fmul+0x166>
 8000a0a:	4652      	mov	r2, sl
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	4692      	mov	sl, r2
 8000a12:	2002      	movs	r0, #2
 8000a14:	e7eb      	b.n	80009ee <__aeabi_fmul+0x56>
 8000a16:	4647      	mov	r7, r8
 8000a18:	464c      	mov	r4, r9
 8000a1a:	4683      	mov	fp, r0
 8000a1c:	465b      	mov	r3, fp
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d028      	beq.n	8000a74 <__aeabi_fmul+0xdc>
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fmul+0x90>
 8000a26:	e0c6      	b.n	8000bb6 <__aeabi_fmul+0x21e>
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d14f      	bne.n	8000acc <__aeabi_fmul+0x134>
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	2400      	movs	r4, #0
 8000a30:	05c0      	lsls	r0, r0, #23
 8000a32:	07ff      	lsls	r7, r7, #31
 8000a34:	4320      	orrs	r0, r4
 8000a36:	4338      	orrs	r0, r7
 8000a38:	bcf0      	pop	{r4, r5, r6, r7}
 8000a3a:	46bb      	mov	fp, r7
 8000a3c:	46b2      	mov	sl, r6
 8000a3e:	46a9      	mov	r9, r5
 8000a40:	46a0      	mov	r8, r4
 8000a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d171      	bne.n	8000b2c <__aeabi_fmul+0x194>
 8000a48:	2304      	movs	r3, #4
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	2500      	movs	r5, #0
 8000a50:	469b      	mov	fp, r3
 8000a52:	e7b9      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000a54:	2c00      	cmp	r4, #0
 8000a56:	d163      	bne.n	8000b20 <__aeabi_fmul+0x188>
 8000a58:	2308      	movs	r3, #8
 8000a5a:	469a      	mov	sl, r3
 8000a5c:	3b06      	subs	r3, #6
 8000a5e:	25ff      	movs	r5, #255	; 0xff
 8000a60:	469b      	mov	fp, r3
 8000a62:	e7b1      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d150      	bne.n	8000b0a <__aeabi_fmul+0x172>
 8000a68:	4652      	mov	r2, sl
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	4692      	mov	sl, r2
 8000a70:	2001      	movs	r0, #1
 8000a72:	e7bc      	b.n	80009ee <__aeabi_fmul+0x56>
 8000a74:	20ff      	movs	r0, #255	; 0xff
 8000a76:	2400      	movs	r4, #0
 8000a78:	e7da      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000a7a:	4648      	mov	r0, r9
 8000a7c:	0c26      	lsrs	r6, r4, #16
 8000a7e:	0424      	lsls	r4, r4, #16
 8000a80:	0c22      	lsrs	r2, r4, #16
 8000a82:	0404      	lsls	r4, r0, #16
 8000a84:	0c24      	lsrs	r4, r4, #16
 8000a86:	464b      	mov	r3, r9
 8000a88:	0020      	movs	r0, r4
 8000a8a:	0c1b      	lsrs	r3, r3, #16
 8000a8c:	4350      	muls	r0, r2
 8000a8e:	4374      	muls	r4, r6
 8000a90:	435a      	muls	r2, r3
 8000a92:	435e      	muls	r6, r3
 8000a94:	1912      	adds	r2, r2, r4
 8000a96:	0c03      	lsrs	r3, r0, #16
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	d903      	bls.n	8000aa6 <__aeabi_fmul+0x10e>
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	0252      	lsls	r2, r2, #9
 8000aa2:	4694      	mov	ip, r2
 8000aa4:	4466      	add	r6, ip
 8000aa6:	0400      	lsls	r0, r0, #16
 8000aa8:	041a      	lsls	r2, r3, #16
 8000aaa:	0c00      	lsrs	r0, r0, #16
 8000aac:	1812      	adds	r2, r2, r0
 8000aae:	0194      	lsls	r4, r2, #6
 8000ab0:	1e60      	subs	r0, r4, #1
 8000ab2:	4184      	sbcs	r4, r0
 8000ab4:	0c1b      	lsrs	r3, r3, #16
 8000ab6:	0e92      	lsrs	r2, r2, #26
 8000ab8:	199b      	adds	r3, r3, r6
 8000aba:	4314      	orrs	r4, r2
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	d572      	bpl.n	8000baa <__aeabi_fmul+0x212>
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	0863      	lsrs	r3, r4, #1
 8000ac8:	4004      	ands	r4, r0
 8000aca:	431c      	orrs	r4, r3
 8000acc:	0008      	movs	r0, r1
 8000ace:	307f      	adds	r0, #127	; 0x7f
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	dd3c      	ble.n	8000b4e <__aeabi_fmul+0x1b6>
 8000ad4:	0763      	lsls	r3, r4, #29
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_fmul+0x14a>
 8000ad8:	230f      	movs	r3, #15
 8000ada:	4023      	ands	r3, r4
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fmul+0x14a>
 8000ae0:	3404      	adds	r4, #4
 8000ae2:	0123      	lsls	r3, r4, #4
 8000ae4:	d503      	bpl.n	8000aee <__aeabi_fmul+0x156>
 8000ae6:	3180      	adds	r1, #128	; 0x80
 8000ae8:	0008      	movs	r0, r1
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <__aeabi_fmul+0x230>)
 8000aec:	401c      	ands	r4, r3
 8000aee:	28fe      	cmp	r0, #254	; 0xfe
 8000af0:	dcc0      	bgt.n	8000a74 <__aeabi_fmul+0xdc>
 8000af2:	01a4      	lsls	r4, r4, #6
 8000af4:	0a64      	lsrs	r4, r4, #9
 8000af6:	b2c0      	uxtb	r0, r0
 8000af8:	e79a      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000afa:	0037      	movs	r7, r6
 8000afc:	e78e      	b.n	8000a1c <__aeabi_fmul+0x84>
 8000afe:	4652      	mov	r2, sl
 8000b00:	2303      	movs	r3, #3
 8000b02:	431a      	orrs	r2, r3
 8000b04:	4692      	mov	sl, r2
 8000b06:	2003      	movs	r0, #3
 8000b08:	e771      	b.n	80009ee <__aeabi_fmul+0x56>
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	f001 f9e8 	bl	8001ee0 <__clzsi2>
 8000b10:	464a      	mov	r2, r9
 8000b12:	1f43      	subs	r3, r0, #5
 8000b14:	409a      	lsls	r2, r3
 8000b16:	1a2d      	subs	r5, r5, r0
 8000b18:	4691      	mov	r9, r2
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	3d76      	subs	r5, #118	; 0x76
 8000b1e:	e766      	b.n	80009ee <__aeabi_fmul+0x56>
 8000b20:	230c      	movs	r3, #12
 8000b22:	469a      	mov	sl, r3
 8000b24:	3b09      	subs	r3, #9
 8000b26:	25ff      	movs	r5, #255	; 0xff
 8000b28:	469b      	mov	fp, r3
 8000b2a:	e74d      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000b2c:	0020      	movs	r0, r4
 8000b2e:	f001 f9d7 	bl	8001ee0 <__clzsi2>
 8000b32:	2576      	movs	r5, #118	; 0x76
 8000b34:	1f43      	subs	r3, r0, #5
 8000b36:	409c      	lsls	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	426d      	negs	r5, r5
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	469b      	mov	fp, r3
 8000b40:	1a2d      	subs	r5, r5, r0
 8000b42:	e741      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000b44:	2480      	movs	r4, #128	; 0x80
 8000b46:	2700      	movs	r7, #0
 8000b48:	20ff      	movs	r0, #255	; 0xff
 8000b4a:	03e4      	lsls	r4, r4, #15
 8000b4c:	e770      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	1a1b      	subs	r3, r3, r0
 8000b52:	2b1b      	cmp	r3, #27
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_fmul+0x1c0>
 8000b56:	e769      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000b58:	319e      	adds	r1, #158	; 0x9e
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	408c      	lsls	r4, r1
 8000b5e:	40d8      	lsrs	r0, r3
 8000b60:	1e63      	subs	r3, r4, #1
 8000b62:	419c      	sbcs	r4, r3
 8000b64:	4304      	orrs	r4, r0
 8000b66:	0763      	lsls	r3, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x1dc>
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	4023      	ands	r3, r4
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x1dc>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0163      	lsls	r3, r4, #5
 8000b76:	d51a      	bpl.n	8000bae <__aeabi_fmul+0x216>
 8000b78:	2001      	movs	r0, #1
 8000b7a:	2400      	movs	r4, #0
 8000b7c:	e758      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000b7e:	2080      	movs	r0, #128	; 0x80
 8000b80:	03c0      	lsls	r0, r0, #15
 8000b82:	4204      	tst	r4, r0
 8000b84:	d009      	beq.n	8000b9a <__aeabi_fmul+0x202>
 8000b86:	464b      	mov	r3, r9
 8000b88:	4203      	tst	r3, r0
 8000b8a:	d106      	bne.n	8000b9a <__aeabi_fmul+0x202>
 8000b8c:	464c      	mov	r4, r9
 8000b8e:	4304      	orrs	r4, r0
 8000b90:	0264      	lsls	r4, r4, #9
 8000b92:	4647      	mov	r7, r8
 8000b94:	20ff      	movs	r0, #255	; 0xff
 8000b96:	0a64      	lsrs	r4, r4, #9
 8000b98:	e74a      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000b9a:	2080      	movs	r0, #128	; 0x80
 8000b9c:	03c0      	lsls	r0, r0, #15
 8000b9e:	4304      	orrs	r4, r0
 8000ba0:	0264      	lsls	r4, r4, #9
 8000ba2:	0037      	movs	r7, r6
 8000ba4:	20ff      	movs	r0, #255	; 0xff
 8000ba6:	0a64      	lsrs	r4, r4, #9
 8000ba8:	e742      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000baa:	0029      	movs	r1, r5
 8000bac:	e78e      	b.n	8000acc <__aeabi_fmul+0x134>
 8000bae:	01a4      	lsls	r4, r4, #6
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	e73c      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000bb6:	2080      	movs	r0, #128	; 0x80
 8000bb8:	03c0      	lsls	r0, r0, #15
 8000bba:	4304      	orrs	r4, r0
 8000bbc:	0264      	lsls	r4, r4, #9
 8000bbe:	20ff      	movs	r0, #255	; 0xff
 8000bc0:	0a64      	lsrs	r4, r4, #9
 8000bc2:	e735      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000bc4:	0800ac64 	.word	0x0800ac64
 8000bc8:	f7ffffff 	.word	0xf7ffffff

08000bcc <__aeabi_f2iz>:
 8000bcc:	0241      	lsls	r1, r0, #9
 8000bce:	0042      	lsls	r2, r0, #1
 8000bd0:	0fc3      	lsrs	r3, r0, #31
 8000bd2:	0a49      	lsrs	r1, r1, #9
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	2a7e      	cmp	r2, #126	; 0x7e
 8000bda:	d903      	bls.n	8000be4 <__aeabi_f2iz+0x18>
 8000bdc:	2a9d      	cmp	r2, #157	; 0x9d
 8000bde:	d902      	bls.n	8000be6 <__aeabi_f2iz+0x1a>
 8000be0:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <__aeabi_f2iz+0x3c>)
 8000be2:	1898      	adds	r0, r3, r2
 8000be4:	4770      	bx	lr
 8000be6:	2080      	movs	r0, #128	; 0x80
 8000be8:	0400      	lsls	r0, r0, #16
 8000bea:	4301      	orrs	r1, r0
 8000bec:	2a95      	cmp	r2, #149	; 0x95
 8000bee:	dc07      	bgt.n	8000c00 <__aeabi_f2iz+0x34>
 8000bf0:	2096      	movs	r0, #150	; 0x96
 8000bf2:	1a82      	subs	r2, r0, r2
 8000bf4:	40d1      	lsrs	r1, r2
 8000bf6:	4248      	negs	r0, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1f3      	bne.n	8000be4 <__aeabi_f2iz+0x18>
 8000bfc:	0008      	movs	r0, r1
 8000bfe:	e7f1      	b.n	8000be4 <__aeabi_f2iz+0x18>
 8000c00:	3a96      	subs	r2, #150	; 0x96
 8000c02:	4091      	lsls	r1, r2
 8000c04:	e7f7      	b.n	8000bf6 <__aeabi_f2iz+0x2a>
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	7fffffff 	.word	0x7fffffff

08000c0c <__aeabi_i2f>:
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d013      	beq.n	8000c3a <__aeabi_i2f+0x2e>
 8000c12:	17c3      	asrs	r3, r0, #31
 8000c14:	18c5      	adds	r5, r0, r3
 8000c16:	405d      	eors	r5, r3
 8000c18:	0fc4      	lsrs	r4, r0, #31
 8000c1a:	0028      	movs	r0, r5
 8000c1c:	f001 f960 	bl	8001ee0 <__clzsi2>
 8000c20:	239e      	movs	r3, #158	; 0x9e
 8000c22:	0001      	movs	r1, r0
 8000c24:	1a1b      	subs	r3, r3, r0
 8000c26:	2b96      	cmp	r3, #150	; 0x96
 8000c28:	dc0f      	bgt.n	8000c4a <__aeabi_i2f+0x3e>
 8000c2a:	2808      	cmp	r0, #8
 8000c2c:	dd01      	ble.n	8000c32 <__aeabi_i2f+0x26>
 8000c2e:	3908      	subs	r1, #8
 8000c30:	408d      	lsls	r5, r1
 8000c32:	026d      	lsls	r5, r5, #9
 8000c34:	0a6d      	lsrs	r5, r5, #9
 8000c36:	b2d8      	uxtb	r0, r3
 8000c38:	e002      	b.n	8000c40 <__aeabi_i2f+0x34>
 8000c3a:	2400      	movs	r4, #0
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	2500      	movs	r5, #0
 8000c40:	05c0      	lsls	r0, r0, #23
 8000c42:	4328      	orrs	r0, r5
 8000c44:	07e4      	lsls	r4, r4, #31
 8000c46:	4320      	orrs	r0, r4
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
 8000c4a:	2b99      	cmp	r3, #153	; 0x99
 8000c4c:	dd0b      	ble.n	8000c66 <__aeabi_i2f+0x5a>
 8000c4e:	2205      	movs	r2, #5
 8000c50:	002e      	movs	r6, r5
 8000c52:	1a12      	subs	r2, r2, r0
 8000c54:	40d6      	lsrs	r6, r2
 8000c56:	0002      	movs	r2, r0
 8000c58:	321b      	adds	r2, #27
 8000c5a:	4095      	lsls	r5, r2
 8000c5c:	0028      	movs	r0, r5
 8000c5e:	1e45      	subs	r5, r0, #1
 8000c60:	41a8      	sbcs	r0, r5
 8000c62:	0035      	movs	r5, r6
 8000c64:	4305      	orrs	r5, r0
 8000c66:	2905      	cmp	r1, #5
 8000c68:	dd01      	ble.n	8000c6e <__aeabi_i2f+0x62>
 8000c6a:	1f4a      	subs	r2, r1, #5
 8000c6c:	4095      	lsls	r5, r2
 8000c6e:	002a      	movs	r2, r5
 8000c70:	4e08      	ldr	r6, [pc, #32]	; (8000c94 <__aeabi_i2f+0x88>)
 8000c72:	4032      	ands	r2, r6
 8000c74:	0768      	lsls	r0, r5, #29
 8000c76:	d009      	beq.n	8000c8c <__aeabi_i2f+0x80>
 8000c78:	200f      	movs	r0, #15
 8000c7a:	4028      	ands	r0, r5
 8000c7c:	2804      	cmp	r0, #4
 8000c7e:	d005      	beq.n	8000c8c <__aeabi_i2f+0x80>
 8000c80:	3204      	adds	r2, #4
 8000c82:	0150      	lsls	r0, r2, #5
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_i2f+0x80>
 8000c86:	239f      	movs	r3, #159	; 0x9f
 8000c88:	4032      	ands	r2, r6
 8000c8a:	1a5b      	subs	r3, r3, r1
 8000c8c:	0192      	lsls	r2, r2, #6
 8000c8e:	0a55      	lsrs	r5, r2, #9
 8000c90:	b2d8      	uxtb	r0, r3
 8000c92:	e7d5      	b.n	8000c40 <__aeabi_i2f+0x34>
 8000c94:	fbffffff 	.word	0xfbffffff

08000c98 <__aeabi_dadd>:
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	464f      	mov	r7, r9
 8000c9c:	46d6      	mov	lr, sl
 8000c9e:	4646      	mov	r6, r8
 8000ca0:	000d      	movs	r5, r1
 8000ca2:	0001      	movs	r1, r0
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	b5c0      	push	{r6, r7, lr}
 8000ca8:	0017      	movs	r7, r2
 8000caa:	032b      	lsls	r3, r5, #12
 8000cac:	0a5a      	lsrs	r2, r3, #9
 8000cae:	0f4b      	lsrs	r3, r1, #29
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	00ca      	lsls	r2, r1, #3
 8000cb4:	4691      	mov	r9, r2
 8000cb6:	0302      	lsls	r2, r0, #12
 8000cb8:	006e      	lsls	r6, r5, #1
 8000cba:	0041      	lsls	r1, r0, #1
 8000cbc:	0a52      	lsrs	r2, r2, #9
 8000cbe:	0fec      	lsrs	r4, r5, #31
 8000cc0:	0f7d      	lsrs	r5, r7, #29
 8000cc2:	4315      	orrs	r5, r2
 8000cc4:	0d76      	lsrs	r6, r6, #21
 8000cc6:	0d49      	lsrs	r1, r1, #21
 8000cc8:	0fc0      	lsrs	r0, r0, #31
 8000cca:	4682      	mov	sl, r0
 8000ccc:	46ac      	mov	ip, r5
 8000cce:	00ff      	lsls	r7, r7, #3
 8000cd0:	1a72      	subs	r2, r6, r1
 8000cd2:	4284      	cmp	r4, r0
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dadd+0x40>
 8000cd6:	e098      	b.n	8000e0a <__aeabi_dadd+0x172>
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	dc00      	bgt.n	8000cde <__aeabi_dadd+0x46>
 8000cdc:	e081      	b.n	8000de2 <__aeabi_dadd+0x14a>
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x4c>
 8000ce2:	e0b6      	b.n	8000e52 <__aeabi_dadd+0x1ba>
 8000ce4:	49c9      	ldr	r1, [pc, #804]	; (800100c <__aeabi_dadd+0x374>)
 8000ce6:	428e      	cmp	r6, r1
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x54>
 8000cea:	e172      	b.n	8000fd2 <__aeabi_dadd+0x33a>
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0028      	movs	r0, r5
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	4308      	orrs	r0, r1
 8000cf4:	4684      	mov	ip, r0
 8000cf6:	2a38      	cmp	r2, #56	; 0x38
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dadd+0x64>
 8000cfa:	e15e      	b.n	8000fba <__aeabi_dadd+0x322>
 8000cfc:	2a1f      	cmp	r2, #31
 8000cfe:	dd00      	ble.n	8000d02 <__aeabi_dadd+0x6a>
 8000d00:	e1ee      	b.n	80010e0 <__aeabi_dadd+0x448>
 8000d02:	2020      	movs	r0, #32
 8000d04:	0039      	movs	r1, r7
 8000d06:	4665      	mov	r5, ip
 8000d08:	1a80      	subs	r0, r0, r2
 8000d0a:	4087      	lsls	r7, r0
 8000d0c:	40d1      	lsrs	r1, r2
 8000d0e:	4085      	lsls	r5, r0
 8000d10:	430d      	orrs	r5, r1
 8000d12:	0039      	movs	r1, r7
 8000d14:	1e4f      	subs	r7, r1, #1
 8000d16:	41b9      	sbcs	r1, r7
 8000d18:	4667      	mov	r7, ip
 8000d1a:	40d7      	lsrs	r7, r2
 8000d1c:	4329      	orrs	r1, r5
 8000d1e:	1bdb      	subs	r3, r3, r7
 8000d20:	464a      	mov	r2, r9
 8000d22:	1a55      	subs	r5, r2, r1
 8000d24:	45a9      	cmp	r9, r5
 8000d26:	4189      	sbcs	r1, r1
 8000d28:	4249      	negs	r1, r1
 8000d2a:	1a5b      	subs	r3, r3, r1
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	4643      	mov	r3, r8
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	d400      	bmi.n	8000d36 <__aeabi_dadd+0x9e>
 8000d34:	e0cc      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8000d36:	4643      	mov	r3, r8
 8000d38:	025b      	lsls	r3, r3, #9
 8000d3a:	0a5b      	lsrs	r3, r3, #9
 8000d3c:	4698      	mov	r8, r3
 8000d3e:	4643      	mov	r3, r8
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d100      	bne.n	8000d46 <__aeabi_dadd+0xae>
 8000d44:	e12c      	b.n	8000fa0 <__aeabi_dadd+0x308>
 8000d46:	4640      	mov	r0, r8
 8000d48:	f001 f8ca 	bl	8001ee0 <__clzsi2>
 8000d4c:	0001      	movs	r1, r0
 8000d4e:	3908      	subs	r1, #8
 8000d50:	2220      	movs	r2, #32
 8000d52:	0028      	movs	r0, r5
 8000d54:	4643      	mov	r3, r8
 8000d56:	1a52      	subs	r2, r2, r1
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	40d0      	lsrs	r0, r2
 8000d5c:	408d      	lsls	r5, r1
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	428e      	cmp	r6, r1
 8000d62:	dd00      	ble.n	8000d66 <__aeabi_dadd+0xce>
 8000d64:	e117      	b.n	8000f96 <__aeabi_dadd+0x2fe>
 8000d66:	1b8e      	subs	r6, r1, r6
 8000d68:	1c72      	adds	r2, r6, #1
 8000d6a:	2a1f      	cmp	r2, #31
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_dadd+0xd8>
 8000d6e:	e1a7      	b.n	80010c0 <__aeabi_dadd+0x428>
 8000d70:	2120      	movs	r1, #32
 8000d72:	0018      	movs	r0, r3
 8000d74:	002e      	movs	r6, r5
 8000d76:	1a89      	subs	r1, r1, r2
 8000d78:	408d      	lsls	r5, r1
 8000d7a:	4088      	lsls	r0, r1
 8000d7c:	40d6      	lsrs	r6, r2
 8000d7e:	40d3      	lsrs	r3, r2
 8000d80:	1e69      	subs	r1, r5, #1
 8000d82:	418d      	sbcs	r5, r1
 8000d84:	4330      	orrs	r0, r6
 8000d86:	4698      	mov	r8, r3
 8000d88:	2600      	movs	r6, #0
 8000d8a:	4305      	orrs	r5, r0
 8000d8c:	076b      	lsls	r3, r5, #29
 8000d8e:	d009      	beq.n	8000da4 <__aeabi_dadd+0x10c>
 8000d90:	230f      	movs	r3, #15
 8000d92:	402b      	ands	r3, r5
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d005      	beq.n	8000da4 <__aeabi_dadd+0x10c>
 8000d98:	1d2b      	adds	r3, r5, #4
 8000d9a:	42ab      	cmp	r3, r5
 8000d9c:	41ad      	sbcs	r5, r5
 8000d9e:	426d      	negs	r5, r5
 8000da0:	44a8      	add	r8, r5
 8000da2:	001d      	movs	r5, r3
 8000da4:	4643      	mov	r3, r8
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	d400      	bmi.n	8000dac <__aeabi_dadd+0x114>
 8000daa:	e094      	b.n	8000ed6 <__aeabi_dadd+0x23e>
 8000dac:	4b97      	ldr	r3, [pc, #604]	; (800100c <__aeabi_dadd+0x374>)
 8000dae:	1c72      	adds	r2, r6, #1
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dadd+0x11e>
 8000db4:	e09d      	b.n	8000ef2 <__aeabi_dadd+0x25a>
 8000db6:	4641      	mov	r1, r8
 8000db8:	4b95      	ldr	r3, [pc, #596]	; (8001010 <__aeabi_dadd+0x378>)
 8000dba:	08ed      	lsrs	r5, r5, #3
 8000dbc:	4019      	ands	r1, r3
 8000dbe:	000b      	movs	r3, r1
 8000dc0:	0552      	lsls	r2, r2, #21
 8000dc2:	0749      	lsls	r1, r1, #29
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	4329      	orrs	r1, r5
 8000dc8:	0b1b      	lsrs	r3, r3, #12
 8000dca:	0d52      	lsrs	r2, r2, #21
 8000dcc:	0512      	lsls	r2, r2, #20
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	07e4      	lsls	r4, r4, #31
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	0008      	movs	r0, r1
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	bce0      	pop	{r5, r6, r7}
 8000dda:	46ba      	mov	sl, r7
 8000ddc:	46b1      	mov	r9, r6
 8000dde:	46a8      	mov	r8, r5
 8000de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d043      	beq.n	8000e6e <__aeabi_dadd+0x1d6>
 8000de6:	1b8a      	subs	r2, r1, r6
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d000      	beq.n	8000dee <__aeabi_dadd+0x156>
 8000dec:	e12a      	b.n	8001044 <__aeabi_dadd+0x3ac>
 8000dee:	464c      	mov	r4, r9
 8000df0:	431c      	orrs	r4, r3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dadd+0x15e>
 8000df4:	e1d1      	b.n	800119a <__aeabi_dadd+0x502>
 8000df6:	1e54      	subs	r4, r2, #1
 8000df8:	2a01      	cmp	r2, #1
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x166>
 8000dfc:	e21f      	b.n	800123e <__aeabi_dadd+0x5a6>
 8000dfe:	4d83      	ldr	r5, [pc, #524]	; (800100c <__aeabi_dadd+0x374>)
 8000e00:	42aa      	cmp	r2, r5
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x16e>
 8000e04:	e272      	b.n	80012ec <__aeabi_dadd+0x654>
 8000e06:	0022      	movs	r2, r4
 8000e08:	e123      	b.n	8001052 <__aeabi_dadd+0x3ba>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	dc00      	bgt.n	8000e10 <__aeabi_dadd+0x178>
 8000e0e:	e098      	b.n	8000f42 <__aeabi_dadd+0x2aa>
 8000e10:	2900      	cmp	r1, #0
 8000e12:	d042      	beq.n	8000e9a <__aeabi_dadd+0x202>
 8000e14:	497d      	ldr	r1, [pc, #500]	; (800100c <__aeabi_dadd+0x374>)
 8000e16:	428e      	cmp	r6, r1
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dadd+0x184>
 8000e1a:	e0da      	b.n	8000fd2 <__aeabi_dadd+0x33a>
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	0028      	movs	r0, r5
 8000e20:	0409      	lsls	r1, r1, #16
 8000e22:	4308      	orrs	r0, r1
 8000e24:	4684      	mov	ip, r0
 8000e26:	2a38      	cmp	r2, #56	; 0x38
 8000e28:	dd00      	ble.n	8000e2c <__aeabi_dadd+0x194>
 8000e2a:	e129      	b.n	8001080 <__aeabi_dadd+0x3e8>
 8000e2c:	2a1f      	cmp	r2, #31
 8000e2e:	dc00      	bgt.n	8000e32 <__aeabi_dadd+0x19a>
 8000e30:	e187      	b.n	8001142 <__aeabi_dadd+0x4aa>
 8000e32:	0011      	movs	r1, r2
 8000e34:	4665      	mov	r5, ip
 8000e36:	3920      	subs	r1, #32
 8000e38:	40cd      	lsrs	r5, r1
 8000e3a:	2a20      	cmp	r2, #32
 8000e3c:	d004      	beq.n	8000e48 <__aeabi_dadd+0x1b0>
 8000e3e:	2040      	movs	r0, #64	; 0x40
 8000e40:	4661      	mov	r1, ip
 8000e42:	1a82      	subs	r2, r0, r2
 8000e44:	4091      	lsls	r1, r2
 8000e46:	430f      	orrs	r7, r1
 8000e48:	0039      	movs	r1, r7
 8000e4a:	1e4f      	subs	r7, r1, #1
 8000e4c:	41b9      	sbcs	r1, r7
 8000e4e:	430d      	orrs	r5, r1
 8000e50:	e11b      	b.n	800108a <__aeabi_dadd+0x3f2>
 8000e52:	0029      	movs	r1, r5
 8000e54:	4339      	orrs	r1, r7
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dadd+0x1c2>
 8000e58:	e0b5      	b.n	8000fc6 <__aeabi_dadd+0x32e>
 8000e5a:	1e51      	subs	r1, r2, #1
 8000e5c:	2a01      	cmp	r2, #1
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x1ca>
 8000e60:	e1ab      	b.n	80011ba <__aeabi_dadd+0x522>
 8000e62:	486a      	ldr	r0, [pc, #424]	; (800100c <__aeabi_dadd+0x374>)
 8000e64:	4282      	cmp	r2, r0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dadd+0x1d2>
 8000e68:	e1b2      	b.n	80011d0 <__aeabi_dadd+0x538>
 8000e6a:	000a      	movs	r2, r1
 8000e6c:	e743      	b.n	8000cf6 <__aeabi_dadd+0x5e>
 8000e6e:	4969      	ldr	r1, [pc, #420]	; (8001014 <__aeabi_dadd+0x37c>)
 8000e70:	1c75      	adds	r5, r6, #1
 8000e72:	420d      	tst	r5, r1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_dadd+0x1e0>
 8000e76:	e0cf      	b.n	8001018 <__aeabi_dadd+0x380>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d000      	beq.n	8000e7e <__aeabi_dadd+0x1e6>
 8000e7c:	e193      	b.n	80011a6 <__aeabi_dadd+0x50e>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	4319      	orrs	r1, r3
 8000e82:	d100      	bne.n	8000e86 <__aeabi_dadd+0x1ee>
 8000e84:	e1d1      	b.n	800122a <__aeabi_dadd+0x592>
 8000e86:	4661      	mov	r1, ip
 8000e88:	4339      	orrs	r1, r7
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_dadd+0x1f6>
 8000e8c:	e1e3      	b.n	8001256 <__aeabi_dadd+0x5be>
 8000e8e:	4649      	mov	r1, r9
 8000e90:	0758      	lsls	r0, r3, #29
 8000e92:	08c9      	lsrs	r1, r1, #3
 8000e94:	4301      	orrs	r1, r0
 8000e96:	08db      	lsrs	r3, r3, #3
 8000e98:	e026      	b.n	8000ee8 <__aeabi_dadd+0x250>
 8000e9a:	0029      	movs	r1, r5
 8000e9c:	4339      	orrs	r1, r7
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dadd+0x20a>
 8000ea0:	e091      	b.n	8000fc6 <__aeabi_dadd+0x32e>
 8000ea2:	1e51      	subs	r1, r2, #1
 8000ea4:	2a01      	cmp	r2, #1
 8000ea6:	d005      	beq.n	8000eb4 <__aeabi_dadd+0x21c>
 8000ea8:	4858      	ldr	r0, [pc, #352]	; (800100c <__aeabi_dadd+0x374>)
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_dadd+0x218>
 8000eae:	e18f      	b.n	80011d0 <__aeabi_dadd+0x538>
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	e7b8      	b.n	8000e26 <__aeabi_dadd+0x18e>
 8000eb4:	003d      	movs	r5, r7
 8000eb6:	444d      	add	r5, r9
 8000eb8:	454d      	cmp	r5, r9
 8000eba:	4189      	sbcs	r1, r1
 8000ebc:	4463      	add	r3, ip
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	4249      	negs	r1, r1
 8000ec2:	4488      	add	r8, r1
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	2602      	movs	r6, #2
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	d500      	bpl.n	8000ece <__aeabi_dadd+0x236>
 8000ecc:	e0eb      	b.n	80010a6 <__aeabi_dadd+0x40e>
 8000ece:	3e01      	subs	r6, #1
 8000ed0:	076b      	lsls	r3, r5, #29
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_dadd+0x23e>
 8000ed4:	e75c      	b.n	8000d90 <__aeabi_dadd+0xf8>
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	08e9      	lsrs	r1, r5, #3
 8000eda:	075a      	lsls	r2, r3, #29
 8000edc:	4311      	orrs	r1, r2
 8000ede:	0032      	movs	r2, r6
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	484a      	ldr	r0, [pc, #296]	; (800100c <__aeabi_dadd+0x374>)
 8000ee4:	4282      	cmp	r2, r0
 8000ee6:	d021      	beq.n	8000f2c <__aeabi_dadd+0x294>
 8000ee8:	031b      	lsls	r3, r3, #12
 8000eea:	0552      	lsls	r2, r2, #21
 8000eec:	0b1b      	lsrs	r3, r3, #12
 8000eee:	0d52      	lsrs	r2, r2, #21
 8000ef0:	e76c      	b.n	8000dcc <__aeabi_dadd+0x134>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	e769      	b.n	8000dcc <__aeabi_dadd+0x134>
 8000ef8:	002a      	movs	r2, r5
 8000efa:	433a      	orrs	r2, r7
 8000efc:	d069      	beq.n	8000fd2 <__aeabi_dadd+0x33a>
 8000efe:	464a      	mov	r2, r9
 8000f00:	0758      	lsls	r0, r3, #29
 8000f02:	08d1      	lsrs	r1, r2, #3
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	031b      	lsls	r3, r3, #12
 8000f0a:	4308      	orrs	r0, r1
 8000f0c:	421a      	tst	r2, r3
 8000f0e:	d007      	beq.n	8000f20 <__aeabi_dadd+0x288>
 8000f10:	0029      	movs	r1, r5
 8000f12:	08ed      	lsrs	r5, r5, #3
 8000f14:	421d      	tst	r5, r3
 8000f16:	d103      	bne.n	8000f20 <__aeabi_dadd+0x288>
 8000f18:	002a      	movs	r2, r5
 8000f1a:	08ff      	lsrs	r7, r7, #3
 8000f1c:	0748      	lsls	r0, r1, #29
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0f43      	lsrs	r3, r0, #29
 8000f22:	00c1      	lsls	r1, r0, #3
 8000f24:	075b      	lsls	r3, r3, #29
 8000f26:	08c9      	lsrs	r1, r1, #3
 8000f28:	4319      	orrs	r1, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dadd+0x29c>
 8000f32:	e213      	b.n	800135c <__aeabi_dadd+0x6c4>
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	0312      	lsls	r2, r2, #12
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	4a33      	ldr	r2, [pc, #204]	; (800100c <__aeabi_dadd+0x374>)
 8000f3e:	0b1b      	lsrs	r3, r3, #12
 8000f40:	e744      	b.n	8000dcc <__aeabi_dadd+0x134>
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d04b      	beq.n	8000fde <__aeabi_dadd+0x346>
 8000f46:	1b8a      	subs	r2, r1, r6
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_dadd+0x2b6>
 8000f4c:	e0e7      	b.n	800111e <__aeabi_dadd+0x486>
 8000f4e:	482f      	ldr	r0, [pc, #188]	; (800100c <__aeabi_dadd+0x374>)
 8000f50:	4281      	cmp	r1, r0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dadd+0x2be>
 8000f54:	e195      	b.n	8001282 <__aeabi_dadd+0x5ea>
 8000f56:	2080      	movs	r0, #128	; 0x80
 8000f58:	0400      	lsls	r0, r0, #16
 8000f5a:	4303      	orrs	r3, r0
 8000f5c:	2a38      	cmp	r2, #56	; 0x38
 8000f5e:	dd00      	ble.n	8000f62 <__aeabi_dadd+0x2ca>
 8000f60:	e143      	b.n	80011ea <__aeabi_dadd+0x552>
 8000f62:	2a1f      	cmp	r2, #31
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_dadd+0x2d0>
 8000f66:	e1db      	b.n	8001320 <__aeabi_dadd+0x688>
 8000f68:	2020      	movs	r0, #32
 8000f6a:	001d      	movs	r5, r3
 8000f6c:	464e      	mov	r6, r9
 8000f6e:	1a80      	subs	r0, r0, r2
 8000f70:	4085      	lsls	r5, r0
 8000f72:	40d6      	lsrs	r6, r2
 8000f74:	4335      	orrs	r5, r6
 8000f76:	464e      	mov	r6, r9
 8000f78:	4086      	lsls	r6, r0
 8000f7a:	0030      	movs	r0, r6
 8000f7c:	40d3      	lsrs	r3, r2
 8000f7e:	1e46      	subs	r6, r0, #1
 8000f80:	41b0      	sbcs	r0, r6
 8000f82:	449c      	add	ip, r3
 8000f84:	4305      	orrs	r5, r0
 8000f86:	19ed      	adds	r5, r5, r7
 8000f88:	42bd      	cmp	r5, r7
 8000f8a:	419b      	sbcs	r3, r3
 8000f8c:	425b      	negs	r3, r3
 8000f8e:	4463      	add	r3, ip
 8000f90:	4698      	mov	r8, r3
 8000f92:	000e      	movs	r6, r1
 8000f94:	e07f      	b.n	8001096 <__aeabi_dadd+0x3fe>
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <__aeabi_dadd+0x378>)
 8000f98:	1a76      	subs	r6, r6, r1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	4698      	mov	r8, r3
 8000f9e:	e6f5      	b.n	8000d8c <__aeabi_dadd+0xf4>
 8000fa0:	0028      	movs	r0, r5
 8000fa2:	f000 ff9d 	bl	8001ee0 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	3118      	adds	r1, #24
 8000faa:	291f      	cmp	r1, #31
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_dadd+0x318>
 8000fae:	e6cf      	b.n	8000d50 <__aeabi_dadd+0xb8>
 8000fb0:	002b      	movs	r3, r5
 8000fb2:	3808      	subs	r0, #8
 8000fb4:	4083      	lsls	r3, r0
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	e6d2      	b.n	8000d60 <__aeabi_dadd+0xc8>
 8000fba:	4662      	mov	r2, ip
 8000fbc:	433a      	orrs	r2, r7
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	1e4f      	subs	r7, r1, #1
 8000fc2:	41b9      	sbcs	r1, r7
 8000fc4:	e6ac      	b.n	8000d20 <__aeabi_dadd+0x88>
 8000fc6:	4649      	mov	r1, r9
 8000fc8:	0758      	lsls	r0, r3, #29
 8000fca:	08c9      	lsrs	r1, r1, #3
 8000fcc:	4301      	orrs	r1, r0
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	e787      	b.n	8000ee2 <__aeabi_dadd+0x24a>
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	075a      	lsls	r2, r3, #29
 8000fd6:	08c9      	lsrs	r1, r1, #3
 8000fd8:	4311      	orrs	r1, r2
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	e7a6      	b.n	8000f2c <__aeabi_dadd+0x294>
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <__aeabi_dadd+0x37c>)
 8000fe0:	1c70      	adds	r0, r6, #1
 8000fe2:	4208      	tst	r0, r1
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_dadd+0x350>
 8000fe6:	e0bb      	b.n	8001160 <__aeabi_dadd+0x4c8>
 8000fe8:	2e00      	cmp	r6, #0
 8000fea:	d000      	beq.n	8000fee <__aeabi_dadd+0x356>
 8000fec:	e114      	b.n	8001218 <__aeabi_dadd+0x580>
 8000fee:	4649      	mov	r1, r9
 8000ff0:	4319      	orrs	r1, r3
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dadd+0x35e>
 8000ff4:	e175      	b.n	80012e2 <__aeabi_dadd+0x64a>
 8000ff6:	0029      	movs	r1, r5
 8000ff8:	4339      	orrs	r1, r7
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_dadd+0x366>
 8000ffc:	e17e      	b.n	80012fc <__aeabi_dadd+0x664>
 8000ffe:	4649      	mov	r1, r9
 8001000:	0758      	lsls	r0, r3, #29
 8001002:	08c9      	lsrs	r1, r1, #3
 8001004:	4301      	orrs	r1, r0
 8001006:	08db      	lsrs	r3, r3, #3
 8001008:	e76e      	b.n	8000ee8 <__aeabi_dadd+0x250>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	000007ff 	.word	0x000007ff
 8001010:	ff7fffff 	.word	0xff7fffff
 8001014:	000007fe 	.word	0x000007fe
 8001018:	4649      	mov	r1, r9
 800101a:	1bcd      	subs	r5, r1, r7
 800101c:	4661      	mov	r1, ip
 800101e:	1a58      	subs	r0, r3, r1
 8001020:	45a9      	cmp	r9, r5
 8001022:	4189      	sbcs	r1, r1
 8001024:	4249      	negs	r1, r1
 8001026:	4688      	mov	r8, r1
 8001028:	0001      	movs	r1, r0
 800102a:	4640      	mov	r0, r8
 800102c:	1a09      	subs	r1, r1, r0
 800102e:	4688      	mov	r8, r1
 8001030:	0209      	lsls	r1, r1, #8
 8001032:	d500      	bpl.n	8001036 <__aeabi_dadd+0x39e>
 8001034:	e0a6      	b.n	8001184 <__aeabi_dadd+0x4ec>
 8001036:	4641      	mov	r1, r8
 8001038:	4329      	orrs	r1, r5
 800103a:	d000      	beq.n	800103e <__aeabi_dadd+0x3a6>
 800103c:	e67f      	b.n	8000d3e <__aeabi_dadd+0xa6>
 800103e:	2300      	movs	r3, #0
 8001040:	2400      	movs	r4, #0
 8001042:	e751      	b.n	8000ee8 <__aeabi_dadd+0x250>
 8001044:	4cc7      	ldr	r4, [pc, #796]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001046:	42a1      	cmp	r1, r4
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x3b4>
 800104a:	e0c7      	b.n	80011dc <__aeabi_dadd+0x544>
 800104c:	2480      	movs	r4, #128	; 0x80
 800104e:	0424      	lsls	r4, r4, #16
 8001050:	4323      	orrs	r3, r4
 8001052:	2a38      	cmp	r2, #56	; 0x38
 8001054:	dc54      	bgt.n	8001100 <__aeabi_dadd+0x468>
 8001056:	2a1f      	cmp	r2, #31
 8001058:	dd00      	ble.n	800105c <__aeabi_dadd+0x3c4>
 800105a:	e0cc      	b.n	80011f6 <__aeabi_dadd+0x55e>
 800105c:	2420      	movs	r4, #32
 800105e:	4648      	mov	r0, r9
 8001060:	1aa4      	subs	r4, r4, r2
 8001062:	001d      	movs	r5, r3
 8001064:	464e      	mov	r6, r9
 8001066:	40a0      	lsls	r0, r4
 8001068:	40d6      	lsrs	r6, r2
 800106a:	40a5      	lsls	r5, r4
 800106c:	0004      	movs	r4, r0
 800106e:	40d3      	lsrs	r3, r2
 8001070:	4662      	mov	r2, ip
 8001072:	4335      	orrs	r5, r6
 8001074:	1e66      	subs	r6, r4, #1
 8001076:	41b4      	sbcs	r4, r6
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	469c      	mov	ip, r3
 800107c:	4325      	orrs	r5, r4
 800107e:	e044      	b.n	800110a <__aeabi_dadd+0x472>
 8001080:	4662      	mov	r2, ip
 8001082:	433a      	orrs	r2, r7
 8001084:	0015      	movs	r5, r2
 8001086:	1e6f      	subs	r7, r5, #1
 8001088:	41bd      	sbcs	r5, r7
 800108a:	444d      	add	r5, r9
 800108c:	454d      	cmp	r5, r9
 800108e:	4189      	sbcs	r1, r1
 8001090:	4249      	negs	r1, r1
 8001092:	4688      	mov	r8, r1
 8001094:	4498      	add	r8, r3
 8001096:	4643      	mov	r3, r8
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	d400      	bmi.n	800109e <__aeabi_dadd+0x406>
 800109c:	e718      	b.n	8000ed0 <__aeabi_dadd+0x238>
 800109e:	4bb1      	ldr	r3, [pc, #708]	; (8001364 <__aeabi_dadd+0x6cc>)
 80010a0:	3601      	adds	r6, #1
 80010a2:	429e      	cmp	r6, r3
 80010a4:	d049      	beq.n	800113a <__aeabi_dadd+0x4a2>
 80010a6:	4642      	mov	r2, r8
 80010a8:	4baf      	ldr	r3, [pc, #700]	; (8001368 <__aeabi_dadd+0x6d0>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	401a      	ands	r2, r3
 80010ae:	0013      	movs	r3, r2
 80010b0:	086a      	lsrs	r2, r5, #1
 80010b2:	400d      	ands	r5, r1
 80010b4:	4315      	orrs	r5, r2
 80010b6:	07d9      	lsls	r1, r3, #31
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	4698      	mov	r8, r3
 80010bc:	430d      	orrs	r5, r1
 80010be:	e665      	b.n	8000d8c <__aeabi_dadd+0xf4>
 80010c0:	0018      	movs	r0, r3
 80010c2:	3e1f      	subs	r6, #31
 80010c4:	40f0      	lsrs	r0, r6
 80010c6:	2a20      	cmp	r2, #32
 80010c8:	d003      	beq.n	80010d2 <__aeabi_dadd+0x43a>
 80010ca:	2140      	movs	r1, #64	; 0x40
 80010cc:	1a8a      	subs	r2, r1, r2
 80010ce:	4093      	lsls	r3, r2
 80010d0:	431d      	orrs	r5, r3
 80010d2:	1e69      	subs	r1, r5, #1
 80010d4:	418d      	sbcs	r5, r1
 80010d6:	2300      	movs	r3, #0
 80010d8:	2600      	movs	r6, #0
 80010da:	4698      	mov	r8, r3
 80010dc:	4305      	orrs	r5, r0
 80010de:	e6f7      	b.n	8000ed0 <__aeabi_dadd+0x238>
 80010e0:	0011      	movs	r1, r2
 80010e2:	4665      	mov	r5, ip
 80010e4:	3920      	subs	r1, #32
 80010e6:	40cd      	lsrs	r5, r1
 80010e8:	2a20      	cmp	r2, #32
 80010ea:	d004      	beq.n	80010f6 <__aeabi_dadd+0x45e>
 80010ec:	2040      	movs	r0, #64	; 0x40
 80010ee:	4661      	mov	r1, ip
 80010f0:	1a82      	subs	r2, r0, r2
 80010f2:	4091      	lsls	r1, r2
 80010f4:	430f      	orrs	r7, r1
 80010f6:	0039      	movs	r1, r7
 80010f8:	1e4f      	subs	r7, r1, #1
 80010fa:	41b9      	sbcs	r1, r7
 80010fc:	4329      	orrs	r1, r5
 80010fe:	e60f      	b.n	8000d20 <__aeabi_dadd+0x88>
 8001100:	464a      	mov	r2, r9
 8001102:	4313      	orrs	r3, r2
 8001104:	001d      	movs	r5, r3
 8001106:	1e6b      	subs	r3, r5, #1
 8001108:	419d      	sbcs	r5, r3
 800110a:	1b7d      	subs	r5, r7, r5
 800110c:	42af      	cmp	r7, r5
 800110e:	419b      	sbcs	r3, r3
 8001110:	4662      	mov	r2, ip
 8001112:	425b      	negs	r3, r3
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	4698      	mov	r8, r3
 8001118:	4654      	mov	r4, sl
 800111a:	000e      	movs	r6, r1
 800111c:	e607      	b.n	8000d2e <__aeabi_dadd+0x96>
 800111e:	4648      	mov	r0, r9
 8001120:	4318      	orrs	r0, r3
 8001122:	d100      	bne.n	8001126 <__aeabi_dadd+0x48e>
 8001124:	e0b3      	b.n	800128e <__aeabi_dadd+0x5f6>
 8001126:	1e50      	subs	r0, r2, #1
 8001128:	2a01      	cmp	r2, #1
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x496>
 800112c:	e10d      	b.n	800134a <__aeabi_dadd+0x6b2>
 800112e:	4d8d      	ldr	r5, [pc, #564]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001130:	42aa      	cmp	r2, r5
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x49e>
 8001134:	e0a5      	b.n	8001282 <__aeabi_dadd+0x5ea>
 8001136:	0002      	movs	r2, r0
 8001138:	e710      	b.n	8000f5c <__aeabi_dadd+0x2c4>
 800113a:	0032      	movs	r2, r6
 800113c:	2300      	movs	r3, #0
 800113e:	2100      	movs	r1, #0
 8001140:	e644      	b.n	8000dcc <__aeabi_dadd+0x134>
 8001142:	2120      	movs	r1, #32
 8001144:	0038      	movs	r0, r7
 8001146:	1a89      	subs	r1, r1, r2
 8001148:	4665      	mov	r5, ip
 800114a:	408f      	lsls	r7, r1
 800114c:	408d      	lsls	r5, r1
 800114e:	40d0      	lsrs	r0, r2
 8001150:	1e79      	subs	r1, r7, #1
 8001152:	418f      	sbcs	r7, r1
 8001154:	4305      	orrs	r5, r0
 8001156:	433d      	orrs	r5, r7
 8001158:	4667      	mov	r7, ip
 800115a:	40d7      	lsrs	r7, r2
 800115c:	19db      	adds	r3, r3, r7
 800115e:	e794      	b.n	800108a <__aeabi_dadd+0x3f2>
 8001160:	4a80      	ldr	r2, [pc, #512]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001162:	4290      	cmp	r0, r2
 8001164:	d100      	bne.n	8001168 <__aeabi_dadd+0x4d0>
 8001166:	e0ec      	b.n	8001342 <__aeabi_dadd+0x6aa>
 8001168:	0039      	movs	r1, r7
 800116a:	4449      	add	r1, r9
 800116c:	4549      	cmp	r1, r9
 800116e:	4192      	sbcs	r2, r2
 8001170:	4463      	add	r3, ip
 8001172:	4252      	negs	r2, r2
 8001174:	189b      	adds	r3, r3, r2
 8001176:	07dd      	lsls	r5, r3, #31
 8001178:	0849      	lsrs	r1, r1, #1
 800117a:	085b      	lsrs	r3, r3, #1
 800117c:	4698      	mov	r8, r3
 800117e:	0006      	movs	r6, r0
 8001180:	430d      	orrs	r5, r1
 8001182:	e6a5      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8001184:	464a      	mov	r2, r9
 8001186:	1abd      	subs	r5, r7, r2
 8001188:	42af      	cmp	r7, r5
 800118a:	4189      	sbcs	r1, r1
 800118c:	4662      	mov	r2, ip
 800118e:	4249      	negs	r1, r1
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	1a5b      	subs	r3, r3, r1
 8001194:	4698      	mov	r8, r3
 8001196:	4654      	mov	r4, sl
 8001198:	e5d1      	b.n	8000d3e <__aeabi_dadd+0xa6>
 800119a:	076c      	lsls	r4, r5, #29
 800119c:	08f9      	lsrs	r1, r7, #3
 800119e:	4321      	orrs	r1, r4
 80011a0:	08eb      	lsrs	r3, r5, #3
 80011a2:	0004      	movs	r4, r0
 80011a4:	e69d      	b.n	8000ee2 <__aeabi_dadd+0x24a>
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	d175      	bne.n	8001298 <__aeabi_dadd+0x600>
 80011ac:	4661      	mov	r1, ip
 80011ae:	4339      	orrs	r1, r7
 80011b0:	d114      	bne.n	80011dc <__aeabi_dadd+0x544>
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	2400      	movs	r4, #0
 80011b6:	031b      	lsls	r3, r3, #12
 80011b8:	e6bc      	b.n	8000f34 <__aeabi_dadd+0x29c>
 80011ba:	464a      	mov	r2, r9
 80011bc:	1bd5      	subs	r5, r2, r7
 80011be:	45a9      	cmp	r9, r5
 80011c0:	4189      	sbcs	r1, r1
 80011c2:	4662      	mov	r2, ip
 80011c4:	4249      	negs	r1, r1
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	1a5b      	subs	r3, r3, r1
 80011ca:	4698      	mov	r8, r3
 80011cc:	2601      	movs	r6, #1
 80011ce:	e5ae      	b.n	8000d2e <__aeabi_dadd+0x96>
 80011d0:	464a      	mov	r2, r9
 80011d2:	08d1      	lsrs	r1, r2, #3
 80011d4:	075a      	lsls	r2, r3, #29
 80011d6:	4311      	orrs	r1, r2
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	e6a7      	b.n	8000f2c <__aeabi_dadd+0x294>
 80011dc:	4663      	mov	r3, ip
 80011de:	08f9      	lsrs	r1, r7, #3
 80011e0:	075a      	lsls	r2, r3, #29
 80011e2:	4654      	mov	r4, sl
 80011e4:	4311      	orrs	r1, r2
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	e6a0      	b.n	8000f2c <__aeabi_dadd+0x294>
 80011ea:	464a      	mov	r2, r9
 80011ec:	4313      	orrs	r3, r2
 80011ee:	001d      	movs	r5, r3
 80011f0:	1e6b      	subs	r3, r5, #1
 80011f2:	419d      	sbcs	r5, r3
 80011f4:	e6c7      	b.n	8000f86 <__aeabi_dadd+0x2ee>
 80011f6:	0014      	movs	r4, r2
 80011f8:	001e      	movs	r6, r3
 80011fa:	3c20      	subs	r4, #32
 80011fc:	40e6      	lsrs	r6, r4
 80011fe:	2a20      	cmp	r2, #32
 8001200:	d005      	beq.n	800120e <__aeabi_dadd+0x576>
 8001202:	2440      	movs	r4, #64	; 0x40
 8001204:	1aa2      	subs	r2, r4, r2
 8001206:	4093      	lsls	r3, r2
 8001208:	464a      	mov	r2, r9
 800120a:	431a      	orrs	r2, r3
 800120c:	4691      	mov	r9, r2
 800120e:	464d      	mov	r5, r9
 8001210:	1e6b      	subs	r3, r5, #1
 8001212:	419d      	sbcs	r5, r3
 8001214:	4335      	orrs	r5, r6
 8001216:	e778      	b.n	800110a <__aeabi_dadd+0x472>
 8001218:	464a      	mov	r2, r9
 800121a:	431a      	orrs	r2, r3
 800121c:	d000      	beq.n	8001220 <__aeabi_dadd+0x588>
 800121e:	e66b      	b.n	8000ef8 <__aeabi_dadd+0x260>
 8001220:	076b      	lsls	r3, r5, #29
 8001222:	08f9      	lsrs	r1, r7, #3
 8001224:	4319      	orrs	r1, r3
 8001226:	08eb      	lsrs	r3, r5, #3
 8001228:	e680      	b.n	8000f2c <__aeabi_dadd+0x294>
 800122a:	4661      	mov	r1, ip
 800122c:	4339      	orrs	r1, r7
 800122e:	d054      	beq.n	80012da <__aeabi_dadd+0x642>
 8001230:	4663      	mov	r3, ip
 8001232:	08f9      	lsrs	r1, r7, #3
 8001234:	075c      	lsls	r4, r3, #29
 8001236:	4321      	orrs	r1, r4
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	0004      	movs	r4, r0
 800123c:	e654      	b.n	8000ee8 <__aeabi_dadd+0x250>
 800123e:	464a      	mov	r2, r9
 8001240:	1abd      	subs	r5, r7, r2
 8001242:	42af      	cmp	r7, r5
 8001244:	4189      	sbcs	r1, r1
 8001246:	4662      	mov	r2, ip
 8001248:	4249      	negs	r1, r1
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	1a5b      	subs	r3, r3, r1
 800124e:	4698      	mov	r8, r3
 8001250:	0004      	movs	r4, r0
 8001252:	2601      	movs	r6, #1
 8001254:	e56b      	b.n	8000d2e <__aeabi_dadd+0x96>
 8001256:	464a      	mov	r2, r9
 8001258:	1bd5      	subs	r5, r2, r7
 800125a:	45a9      	cmp	r9, r5
 800125c:	4189      	sbcs	r1, r1
 800125e:	4662      	mov	r2, ip
 8001260:	4249      	negs	r1, r1
 8001262:	1a9a      	subs	r2, r3, r2
 8001264:	1a52      	subs	r2, r2, r1
 8001266:	4690      	mov	r8, r2
 8001268:	0212      	lsls	r2, r2, #8
 800126a:	d532      	bpl.n	80012d2 <__aeabi_dadd+0x63a>
 800126c:	464a      	mov	r2, r9
 800126e:	1abd      	subs	r5, r7, r2
 8001270:	42af      	cmp	r7, r5
 8001272:	4189      	sbcs	r1, r1
 8001274:	4662      	mov	r2, ip
 8001276:	4249      	negs	r1, r1
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	4698      	mov	r8, r3
 800127e:	0004      	movs	r4, r0
 8001280:	e584      	b.n	8000d8c <__aeabi_dadd+0xf4>
 8001282:	4663      	mov	r3, ip
 8001284:	08f9      	lsrs	r1, r7, #3
 8001286:	075a      	lsls	r2, r3, #29
 8001288:	4311      	orrs	r1, r2
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	e64e      	b.n	8000f2c <__aeabi_dadd+0x294>
 800128e:	08f9      	lsrs	r1, r7, #3
 8001290:	0768      	lsls	r0, r5, #29
 8001292:	4301      	orrs	r1, r0
 8001294:	08eb      	lsrs	r3, r5, #3
 8001296:	e624      	b.n	8000ee2 <__aeabi_dadd+0x24a>
 8001298:	4662      	mov	r2, ip
 800129a:	433a      	orrs	r2, r7
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x608>
 800129e:	e698      	b.n	8000fd2 <__aeabi_dadd+0x33a>
 80012a0:	464a      	mov	r2, r9
 80012a2:	08d1      	lsrs	r1, r2, #3
 80012a4:	075a      	lsls	r2, r3, #29
 80012a6:	4311      	orrs	r1, r2
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	031b      	lsls	r3, r3, #12
 80012ae:	421a      	tst	r2, r3
 80012b0:	d008      	beq.n	80012c4 <__aeabi_dadd+0x62c>
 80012b2:	4660      	mov	r0, ip
 80012b4:	08c5      	lsrs	r5, r0, #3
 80012b6:	421d      	tst	r5, r3
 80012b8:	d104      	bne.n	80012c4 <__aeabi_dadd+0x62c>
 80012ba:	4654      	mov	r4, sl
 80012bc:	002a      	movs	r2, r5
 80012be:	08f9      	lsrs	r1, r7, #3
 80012c0:	0743      	lsls	r3, r0, #29
 80012c2:	4319      	orrs	r1, r3
 80012c4:	0f4b      	lsrs	r3, r1, #29
 80012c6:	00c9      	lsls	r1, r1, #3
 80012c8:	075b      	lsls	r3, r3, #29
 80012ca:	08c9      	lsrs	r1, r1, #3
 80012cc:	4319      	orrs	r1, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	e62c      	b.n	8000f2c <__aeabi_dadd+0x294>
 80012d2:	4641      	mov	r1, r8
 80012d4:	4329      	orrs	r1, r5
 80012d6:	d000      	beq.n	80012da <__aeabi_dadd+0x642>
 80012d8:	e5fa      	b.n	8000ed0 <__aeabi_dadd+0x238>
 80012da:	2300      	movs	r3, #0
 80012dc:	000a      	movs	r2, r1
 80012de:	2400      	movs	r4, #0
 80012e0:	e602      	b.n	8000ee8 <__aeabi_dadd+0x250>
 80012e2:	076b      	lsls	r3, r5, #29
 80012e4:	08f9      	lsrs	r1, r7, #3
 80012e6:	4319      	orrs	r1, r3
 80012e8:	08eb      	lsrs	r3, r5, #3
 80012ea:	e5fd      	b.n	8000ee8 <__aeabi_dadd+0x250>
 80012ec:	4663      	mov	r3, ip
 80012ee:	08f9      	lsrs	r1, r7, #3
 80012f0:	075b      	lsls	r3, r3, #29
 80012f2:	4319      	orrs	r1, r3
 80012f4:	4663      	mov	r3, ip
 80012f6:	0004      	movs	r4, r0
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	e617      	b.n	8000f2c <__aeabi_dadd+0x294>
 80012fc:	003d      	movs	r5, r7
 80012fe:	444d      	add	r5, r9
 8001300:	4463      	add	r3, ip
 8001302:	454d      	cmp	r5, r9
 8001304:	4189      	sbcs	r1, r1
 8001306:	4698      	mov	r8, r3
 8001308:	4249      	negs	r1, r1
 800130a:	4488      	add	r8, r1
 800130c:	4643      	mov	r3, r8
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	d400      	bmi.n	8001314 <__aeabi_dadd+0x67c>
 8001312:	e5dd      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8001314:	4642      	mov	r2, r8
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <__aeabi_dadd+0x6d0>)
 8001318:	2601      	movs	r6, #1
 800131a:	401a      	ands	r2, r3
 800131c:	4690      	mov	r8, r2
 800131e:	e5d7      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8001320:	0010      	movs	r0, r2
 8001322:	001e      	movs	r6, r3
 8001324:	3820      	subs	r0, #32
 8001326:	40c6      	lsrs	r6, r0
 8001328:	2a20      	cmp	r2, #32
 800132a:	d005      	beq.n	8001338 <__aeabi_dadd+0x6a0>
 800132c:	2040      	movs	r0, #64	; 0x40
 800132e:	1a82      	subs	r2, r0, r2
 8001330:	4093      	lsls	r3, r2
 8001332:	464a      	mov	r2, r9
 8001334:	431a      	orrs	r2, r3
 8001336:	4691      	mov	r9, r2
 8001338:	464d      	mov	r5, r9
 800133a:	1e6b      	subs	r3, r5, #1
 800133c:	419d      	sbcs	r5, r3
 800133e:	4335      	orrs	r5, r6
 8001340:	e621      	b.n	8000f86 <__aeabi_dadd+0x2ee>
 8001342:	0002      	movs	r2, r0
 8001344:	2300      	movs	r3, #0
 8001346:	2100      	movs	r1, #0
 8001348:	e540      	b.n	8000dcc <__aeabi_dadd+0x134>
 800134a:	464a      	mov	r2, r9
 800134c:	19d5      	adds	r5, r2, r7
 800134e:	42bd      	cmp	r5, r7
 8001350:	4189      	sbcs	r1, r1
 8001352:	4463      	add	r3, ip
 8001354:	4698      	mov	r8, r3
 8001356:	4249      	negs	r1, r1
 8001358:	4488      	add	r8, r1
 800135a:	e5b3      	b.n	8000ec4 <__aeabi_dadd+0x22c>
 800135c:	2100      	movs	r1, #0
 800135e:	4a01      	ldr	r2, [pc, #4]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001360:	000b      	movs	r3, r1
 8001362:	e533      	b.n	8000dcc <__aeabi_dadd+0x134>
 8001364:	000007ff 	.word	0x000007ff
 8001368:	ff7fffff 	.word	0xff7fffff

0800136c <__aeabi_ddiv>:
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	4657      	mov	r7, sl
 8001370:	464e      	mov	r6, r9
 8001372:	4645      	mov	r5, r8
 8001374:	46de      	mov	lr, fp
 8001376:	b5e0      	push	{r5, r6, r7, lr}
 8001378:	4681      	mov	r9, r0
 800137a:	0005      	movs	r5, r0
 800137c:	030c      	lsls	r4, r1, #12
 800137e:	0048      	lsls	r0, r1, #1
 8001380:	4692      	mov	sl, r2
 8001382:	001f      	movs	r7, r3
 8001384:	b085      	sub	sp, #20
 8001386:	0b24      	lsrs	r4, r4, #12
 8001388:	0d40      	lsrs	r0, r0, #21
 800138a:	0fce      	lsrs	r6, r1, #31
 800138c:	2800      	cmp	r0, #0
 800138e:	d059      	beq.n	8001444 <__aeabi_ddiv+0xd8>
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <__aeabi_ddiv+0x244>)
 8001392:	4298      	cmp	r0, r3
 8001394:	d100      	bne.n	8001398 <__aeabi_ddiv+0x2c>
 8001396:	e098      	b.n	80014ca <__aeabi_ddiv+0x15e>
 8001398:	0f6b      	lsrs	r3, r5, #29
 800139a:	00e4      	lsls	r4, r4, #3
 800139c:	431c      	orrs	r4, r3
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	041b      	lsls	r3, r3, #16
 80013a2:	4323      	orrs	r3, r4
 80013a4:	4698      	mov	r8, r3
 80013a6:	4b83      	ldr	r3, [pc, #524]	; (80015b4 <__aeabi_ddiv+0x248>)
 80013a8:	00ed      	lsls	r5, r5, #3
 80013aa:	469b      	mov	fp, r3
 80013ac:	2300      	movs	r3, #0
 80013ae:	4699      	mov	r9, r3
 80013b0:	4483      	add	fp, r0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	033c      	lsls	r4, r7, #12
 80013b6:	007b      	lsls	r3, r7, #1
 80013b8:	4650      	mov	r0, sl
 80013ba:	0b24      	lsrs	r4, r4, #12
 80013bc:	0d5b      	lsrs	r3, r3, #21
 80013be:	0fff      	lsrs	r7, r7, #31
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d067      	beq.n	8001494 <__aeabi_ddiv+0x128>
 80013c4:	4a7a      	ldr	r2, [pc, #488]	; (80015b0 <__aeabi_ddiv+0x244>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d018      	beq.n	80013fc <__aeabi_ddiv+0x90>
 80013ca:	497a      	ldr	r1, [pc, #488]	; (80015b4 <__aeabi_ddiv+0x248>)
 80013cc:	0f42      	lsrs	r2, r0, #29
 80013ce:	468c      	mov	ip, r1
 80013d0:	00e4      	lsls	r4, r4, #3
 80013d2:	4659      	mov	r1, fp
 80013d4:	4314      	orrs	r4, r2
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	4463      	add	r3, ip
 80013da:	0412      	lsls	r2, r2, #16
 80013dc:	1acb      	subs	r3, r1, r3
 80013de:	4314      	orrs	r4, r2
 80013e0:	469b      	mov	fp, r3
 80013e2:	00c2      	lsls	r2, r0, #3
 80013e4:	2000      	movs	r0, #0
 80013e6:	0033      	movs	r3, r6
 80013e8:	407b      	eors	r3, r7
 80013ea:	469a      	mov	sl, r3
 80013ec:	464b      	mov	r3, r9
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	d900      	bls.n	80013f4 <__aeabi_ddiv+0x88>
 80013f2:	e0ef      	b.n	80015d4 <__aeabi_ddiv+0x268>
 80013f4:	4970      	ldr	r1, [pc, #448]	; (80015b8 <__aeabi_ddiv+0x24c>)
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	58cb      	ldr	r3, [r1, r3]
 80013fa:	469f      	mov	pc, r3
 80013fc:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <__aeabi_ddiv+0x250>)
 80013fe:	4652      	mov	r2, sl
 8001400:	469c      	mov	ip, r3
 8001402:	4322      	orrs	r2, r4
 8001404:	44e3      	add	fp, ip
 8001406:	2a00      	cmp	r2, #0
 8001408:	d000      	beq.n	800140c <__aeabi_ddiv+0xa0>
 800140a:	e095      	b.n	8001538 <__aeabi_ddiv+0x1cc>
 800140c:	4649      	mov	r1, r9
 800140e:	2302      	movs	r3, #2
 8001410:	4319      	orrs	r1, r3
 8001412:	4689      	mov	r9, r1
 8001414:	2400      	movs	r4, #0
 8001416:	2002      	movs	r0, #2
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 800141a:	2300      	movs	r3, #0
 800141c:	2400      	movs	r4, #0
 800141e:	2500      	movs	r5, #0
 8001420:	4652      	mov	r2, sl
 8001422:	051b      	lsls	r3, r3, #20
 8001424:	4323      	orrs	r3, r4
 8001426:	07d2      	lsls	r2, r2, #31
 8001428:	4313      	orrs	r3, r2
 800142a:	0028      	movs	r0, r5
 800142c:	0019      	movs	r1, r3
 800142e:	b005      	add	sp, #20
 8001430:	bcf0      	pop	{r4, r5, r6, r7}
 8001432:	46bb      	mov	fp, r7
 8001434:	46b2      	mov	sl, r6
 8001436:	46a9      	mov	r9, r5
 8001438:	46a0      	mov	r8, r4
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143c:	2400      	movs	r4, #0
 800143e:	2500      	movs	r5, #0
 8001440:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <__aeabi_ddiv+0x244>)
 8001442:	e7ed      	b.n	8001420 <__aeabi_ddiv+0xb4>
 8001444:	464b      	mov	r3, r9
 8001446:	4323      	orrs	r3, r4
 8001448:	4698      	mov	r8, r3
 800144a:	d100      	bne.n	800144e <__aeabi_ddiv+0xe2>
 800144c:	e089      	b.n	8001562 <__aeabi_ddiv+0x1f6>
 800144e:	2c00      	cmp	r4, #0
 8001450:	d100      	bne.n	8001454 <__aeabi_ddiv+0xe8>
 8001452:	e1e0      	b.n	8001816 <__aeabi_ddiv+0x4aa>
 8001454:	0020      	movs	r0, r4
 8001456:	f000 fd43 	bl	8001ee0 <__clzsi2>
 800145a:	0001      	movs	r1, r0
 800145c:	0002      	movs	r2, r0
 800145e:	390b      	subs	r1, #11
 8001460:	231d      	movs	r3, #29
 8001462:	1a5b      	subs	r3, r3, r1
 8001464:	4649      	mov	r1, r9
 8001466:	0010      	movs	r0, r2
 8001468:	40d9      	lsrs	r1, r3
 800146a:	3808      	subs	r0, #8
 800146c:	4084      	lsls	r4, r0
 800146e:	000b      	movs	r3, r1
 8001470:	464d      	mov	r5, r9
 8001472:	4323      	orrs	r3, r4
 8001474:	4698      	mov	r8, r3
 8001476:	4085      	lsls	r5, r0
 8001478:	4851      	ldr	r0, [pc, #324]	; (80015c0 <__aeabi_ddiv+0x254>)
 800147a:	033c      	lsls	r4, r7, #12
 800147c:	1a83      	subs	r3, r0, r2
 800147e:	469b      	mov	fp, r3
 8001480:	2300      	movs	r3, #0
 8001482:	4699      	mov	r9, r3
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	007b      	lsls	r3, r7, #1
 8001488:	4650      	mov	r0, sl
 800148a:	0b24      	lsrs	r4, r4, #12
 800148c:	0d5b      	lsrs	r3, r3, #21
 800148e:	0fff      	lsrs	r7, r7, #31
 8001490:	2b00      	cmp	r3, #0
 8001492:	d197      	bne.n	80013c4 <__aeabi_ddiv+0x58>
 8001494:	4652      	mov	r2, sl
 8001496:	4322      	orrs	r2, r4
 8001498:	d055      	beq.n	8001546 <__aeabi_ddiv+0x1da>
 800149a:	2c00      	cmp	r4, #0
 800149c:	d100      	bne.n	80014a0 <__aeabi_ddiv+0x134>
 800149e:	e1ca      	b.n	8001836 <__aeabi_ddiv+0x4ca>
 80014a0:	0020      	movs	r0, r4
 80014a2:	f000 fd1d 	bl	8001ee0 <__clzsi2>
 80014a6:	0002      	movs	r2, r0
 80014a8:	3a0b      	subs	r2, #11
 80014aa:	231d      	movs	r3, #29
 80014ac:	0001      	movs	r1, r0
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	4652      	mov	r2, sl
 80014b2:	3908      	subs	r1, #8
 80014b4:	40da      	lsrs	r2, r3
 80014b6:	408c      	lsls	r4, r1
 80014b8:	4314      	orrs	r4, r2
 80014ba:	4652      	mov	r2, sl
 80014bc:	408a      	lsls	r2, r1
 80014be:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <__aeabi_ddiv+0x258>)
 80014c0:	4458      	add	r0, fp
 80014c2:	469b      	mov	fp, r3
 80014c4:	4483      	add	fp, r0
 80014c6:	2000      	movs	r0, #0
 80014c8:	e78d      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	4323      	orrs	r3, r4
 80014ce:	4698      	mov	r8, r3
 80014d0:	d140      	bne.n	8001554 <__aeabi_ddiv+0x1e8>
 80014d2:	2308      	movs	r3, #8
 80014d4:	4699      	mov	r9, r3
 80014d6:	3b06      	subs	r3, #6
 80014d8:	2500      	movs	r5, #0
 80014da:	4683      	mov	fp, r0
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	e769      	b.n	80013b4 <__aeabi_ddiv+0x48>
 80014e0:	46b2      	mov	sl, r6
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d0a9      	beq.n	800143c <__aeabi_ddiv+0xd0>
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d100      	bne.n	80014ee <__aeabi_ddiv+0x182>
 80014ec:	e211      	b.n	8001912 <__aeabi_ddiv+0x5a6>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d093      	beq.n	800141a <__aeabi_ddiv+0xae>
 80014f2:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <__aeabi_ddiv+0x25c>)
 80014f4:	445a      	add	r2, fp
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	dc00      	bgt.n	80014fc <__aeabi_ddiv+0x190>
 80014fa:	e13c      	b.n	8001776 <__aeabi_ddiv+0x40a>
 80014fc:	076b      	lsls	r3, r5, #29
 80014fe:	d000      	beq.n	8001502 <__aeabi_ddiv+0x196>
 8001500:	e1a7      	b.n	8001852 <__aeabi_ddiv+0x4e6>
 8001502:	08ed      	lsrs	r5, r5, #3
 8001504:	4643      	mov	r3, r8
 8001506:	01db      	lsls	r3, r3, #7
 8001508:	d506      	bpl.n	8001518 <__aeabi_ddiv+0x1ac>
 800150a:	4642      	mov	r2, r8
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <__aeabi_ddiv+0x260>)
 800150e:	401a      	ands	r2, r3
 8001510:	4690      	mov	r8, r2
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	445a      	add	r2, fp
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <__aeabi_ddiv+0x264>)
 800151a:	429a      	cmp	r2, r3
 800151c:	dc8e      	bgt.n	800143c <__aeabi_ddiv+0xd0>
 800151e:	4643      	mov	r3, r8
 8001520:	0552      	lsls	r2, r2, #21
 8001522:	0758      	lsls	r0, r3, #29
 8001524:	025c      	lsls	r4, r3, #9
 8001526:	4305      	orrs	r5, r0
 8001528:	0b24      	lsrs	r4, r4, #12
 800152a:	0d53      	lsrs	r3, r2, #21
 800152c:	e778      	b.n	8001420 <__aeabi_ddiv+0xb4>
 800152e:	46ba      	mov	sl, r7
 8001530:	46a0      	mov	r8, r4
 8001532:	0015      	movs	r5, r2
 8001534:	9000      	str	r0, [sp, #0]
 8001536:	e7d4      	b.n	80014e2 <__aeabi_ddiv+0x176>
 8001538:	464a      	mov	r2, r9
 800153a:	2303      	movs	r3, #3
 800153c:	431a      	orrs	r2, r3
 800153e:	4691      	mov	r9, r2
 8001540:	2003      	movs	r0, #3
 8001542:	4652      	mov	r2, sl
 8001544:	e74f      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 8001546:	4649      	mov	r1, r9
 8001548:	2301      	movs	r3, #1
 800154a:	4319      	orrs	r1, r3
 800154c:	4689      	mov	r9, r1
 800154e:	2400      	movs	r4, #0
 8001550:	2001      	movs	r0, #1
 8001552:	e748      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 8001554:	230c      	movs	r3, #12
 8001556:	4699      	mov	r9, r3
 8001558:	3b09      	subs	r3, #9
 800155a:	46a0      	mov	r8, r4
 800155c:	4683      	mov	fp, r0
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	e728      	b.n	80013b4 <__aeabi_ddiv+0x48>
 8001562:	2304      	movs	r3, #4
 8001564:	4699      	mov	r9, r3
 8001566:	2300      	movs	r3, #0
 8001568:	469b      	mov	fp, r3
 800156a:	3301      	adds	r3, #1
 800156c:	2500      	movs	r5, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	e720      	b.n	80013b4 <__aeabi_ddiv+0x48>
 8001572:	2300      	movs	r3, #0
 8001574:	2480      	movs	r4, #128	; 0x80
 8001576:	469a      	mov	sl, r3
 8001578:	2500      	movs	r5, #0
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <__aeabi_ddiv+0x244>)
 800157c:	0324      	lsls	r4, r4, #12
 800157e:	e74f      	b.n	8001420 <__aeabi_ddiv+0xb4>
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	4641      	mov	r1, r8
 8001584:	031b      	lsls	r3, r3, #12
 8001586:	4219      	tst	r1, r3
 8001588:	d008      	beq.n	800159c <__aeabi_ddiv+0x230>
 800158a:	421c      	tst	r4, r3
 800158c:	d106      	bne.n	800159c <__aeabi_ddiv+0x230>
 800158e:	431c      	orrs	r4, r3
 8001590:	0324      	lsls	r4, r4, #12
 8001592:	46ba      	mov	sl, r7
 8001594:	0015      	movs	r5, r2
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <__aeabi_ddiv+0x244>)
 8001598:	0b24      	lsrs	r4, r4, #12
 800159a:	e741      	b.n	8001420 <__aeabi_ddiv+0xb4>
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	4643      	mov	r3, r8
 80015a0:	0324      	lsls	r4, r4, #12
 80015a2:	431c      	orrs	r4, r3
 80015a4:	0324      	lsls	r4, r4, #12
 80015a6:	46b2      	mov	sl, r6
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <__aeabi_ddiv+0x244>)
 80015aa:	0b24      	lsrs	r4, r4, #12
 80015ac:	e738      	b.n	8001420 <__aeabi_ddiv+0xb4>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	000007ff 	.word	0x000007ff
 80015b4:	fffffc01 	.word	0xfffffc01
 80015b8:	0800aca4 	.word	0x0800aca4
 80015bc:	fffff801 	.word	0xfffff801
 80015c0:	fffffc0d 	.word	0xfffffc0d
 80015c4:	000003f3 	.word	0x000003f3
 80015c8:	000003ff 	.word	0x000003ff
 80015cc:	feffffff 	.word	0xfeffffff
 80015d0:	000007fe 	.word	0x000007fe
 80015d4:	4544      	cmp	r4, r8
 80015d6:	d200      	bcs.n	80015da <__aeabi_ddiv+0x26e>
 80015d8:	e116      	b.n	8001808 <__aeabi_ddiv+0x49c>
 80015da:	d100      	bne.n	80015de <__aeabi_ddiv+0x272>
 80015dc:	e111      	b.n	8001802 <__aeabi_ddiv+0x496>
 80015de:	2301      	movs	r3, #1
 80015e0:	425b      	negs	r3, r3
 80015e2:	469c      	mov	ip, r3
 80015e4:	002e      	movs	r6, r5
 80015e6:	4640      	mov	r0, r8
 80015e8:	2500      	movs	r5, #0
 80015ea:	44e3      	add	fp, ip
 80015ec:	0223      	lsls	r3, r4, #8
 80015ee:	0e14      	lsrs	r4, r2, #24
 80015f0:	431c      	orrs	r4, r3
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	4699      	mov	r9, r3
 80015f6:	0423      	lsls	r3, r4, #16
 80015f8:	0c1f      	lsrs	r7, r3, #16
 80015fa:	0212      	lsls	r2, r2, #8
 80015fc:	4649      	mov	r1, r9
 80015fe:	9200      	str	r2, [sp, #0]
 8001600:	9701      	str	r7, [sp, #4]
 8001602:	f7fe fe07 	bl	8000214 <__aeabi_uidivmod>
 8001606:	0002      	movs	r2, r0
 8001608:	437a      	muls	r2, r7
 800160a:	040b      	lsls	r3, r1, #16
 800160c:	0c31      	lsrs	r1, r6, #16
 800160e:	4680      	mov	r8, r0
 8001610:	4319      	orrs	r1, r3
 8001612:	428a      	cmp	r2, r1
 8001614:	d90b      	bls.n	800162e <__aeabi_ddiv+0x2c2>
 8001616:	2301      	movs	r3, #1
 8001618:	425b      	negs	r3, r3
 800161a:	469c      	mov	ip, r3
 800161c:	1909      	adds	r1, r1, r4
 800161e:	44e0      	add	r8, ip
 8001620:	428c      	cmp	r4, r1
 8001622:	d804      	bhi.n	800162e <__aeabi_ddiv+0x2c2>
 8001624:	428a      	cmp	r2, r1
 8001626:	d902      	bls.n	800162e <__aeabi_ddiv+0x2c2>
 8001628:	1e83      	subs	r3, r0, #2
 800162a:	4698      	mov	r8, r3
 800162c:	1909      	adds	r1, r1, r4
 800162e:	1a88      	subs	r0, r1, r2
 8001630:	4649      	mov	r1, r9
 8001632:	f7fe fdef 	bl	8000214 <__aeabi_uidivmod>
 8001636:	0409      	lsls	r1, r1, #16
 8001638:	468c      	mov	ip, r1
 800163a:	0431      	lsls	r1, r6, #16
 800163c:	4666      	mov	r6, ip
 800163e:	9a01      	ldr	r2, [sp, #4]
 8001640:	0c09      	lsrs	r1, r1, #16
 8001642:	4342      	muls	r2, r0
 8001644:	0003      	movs	r3, r0
 8001646:	4331      	orrs	r1, r6
 8001648:	428a      	cmp	r2, r1
 800164a:	d904      	bls.n	8001656 <__aeabi_ddiv+0x2ea>
 800164c:	1909      	adds	r1, r1, r4
 800164e:	3b01      	subs	r3, #1
 8001650:	428c      	cmp	r4, r1
 8001652:	d800      	bhi.n	8001656 <__aeabi_ddiv+0x2ea>
 8001654:	e111      	b.n	800187a <__aeabi_ddiv+0x50e>
 8001656:	1a89      	subs	r1, r1, r2
 8001658:	4642      	mov	r2, r8
 800165a:	9e00      	ldr	r6, [sp, #0]
 800165c:	0412      	lsls	r2, r2, #16
 800165e:	431a      	orrs	r2, r3
 8001660:	0c33      	lsrs	r3, r6, #16
 8001662:	001f      	movs	r7, r3
 8001664:	0c10      	lsrs	r0, r2, #16
 8001666:	4690      	mov	r8, r2
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	0413      	lsls	r3, r2, #16
 800166c:	0432      	lsls	r2, r6, #16
 800166e:	0c16      	lsrs	r6, r2, #16
 8001670:	0032      	movs	r2, r6
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	435a      	muls	r2, r3
 8001676:	9603      	str	r6, [sp, #12]
 8001678:	437b      	muls	r3, r7
 800167a:	4346      	muls	r6, r0
 800167c:	4378      	muls	r0, r7
 800167e:	0c17      	lsrs	r7, r2, #16
 8001680:	46bc      	mov	ip, r7
 8001682:	199b      	adds	r3, r3, r6
 8001684:	4463      	add	r3, ip
 8001686:	429e      	cmp	r6, r3
 8001688:	d903      	bls.n	8001692 <__aeabi_ddiv+0x326>
 800168a:	2680      	movs	r6, #128	; 0x80
 800168c:	0276      	lsls	r6, r6, #9
 800168e:	46b4      	mov	ip, r6
 8001690:	4460      	add	r0, ip
 8001692:	0c1e      	lsrs	r6, r3, #16
 8001694:	1830      	adds	r0, r6, r0
 8001696:	0416      	lsls	r6, r2, #16
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	0c36      	lsrs	r6, r6, #16
 800169c:	199e      	adds	r6, r3, r6
 800169e:	4281      	cmp	r1, r0
 80016a0:	d200      	bcs.n	80016a4 <__aeabi_ddiv+0x338>
 80016a2:	e09c      	b.n	80017de <__aeabi_ddiv+0x472>
 80016a4:	d100      	bne.n	80016a8 <__aeabi_ddiv+0x33c>
 80016a6:	e097      	b.n	80017d8 <__aeabi_ddiv+0x46c>
 80016a8:	1bae      	subs	r6, r5, r6
 80016aa:	1a09      	subs	r1, r1, r0
 80016ac:	42b5      	cmp	r5, r6
 80016ae:	4180      	sbcs	r0, r0
 80016b0:	4240      	negs	r0, r0
 80016b2:	1a08      	subs	r0, r1, r0
 80016b4:	4284      	cmp	r4, r0
 80016b6:	d100      	bne.n	80016ba <__aeabi_ddiv+0x34e>
 80016b8:	e111      	b.n	80018de <__aeabi_ddiv+0x572>
 80016ba:	4649      	mov	r1, r9
 80016bc:	f7fe fdaa 	bl	8000214 <__aeabi_uidivmod>
 80016c0:	9a01      	ldr	r2, [sp, #4]
 80016c2:	040b      	lsls	r3, r1, #16
 80016c4:	4342      	muls	r2, r0
 80016c6:	0c31      	lsrs	r1, r6, #16
 80016c8:	0005      	movs	r5, r0
 80016ca:	4319      	orrs	r1, r3
 80016cc:	428a      	cmp	r2, r1
 80016ce:	d907      	bls.n	80016e0 <__aeabi_ddiv+0x374>
 80016d0:	1909      	adds	r1, r1, r4
 80016d2:	3d01      	subs	r5, #1
 80016d4:	428c      	cmp	r4, r1
 80016d6:	d803      	bhi.n	80016e0 <__aeabi_ddiv+0x374>
 80016d8:	428a      	cmp	r2, r1
 80016da:	d901      	bls.n	80016e0 <__aeabi_ddiv+0x374>
 80016dc:	1e85      	subs	r5, r0, #2
 80016de:	1909      	adds	r1, r1, r4
 80016e0:	1a88      	subs	r0, r1, r2
 80016e2:	4649      	mov	r1, r9
 80016e4:	f7fe fd96 	bl	8000214 <__aeabi_uidivmod>
 80016e8:	0409      	lsls	r1, r1, #16
 80016ea:	468c      	mov	ip, r1
 80016ec:	0431      	lsls	r1, r6, #16
 80016ee:	4666      	mov	r6, ip
 80016f0:	9a01      	ldr	r2, [sp, #4]
 80016f2:	0c09      	lsrs	r1, r1, #16
 80016f4:	4342      	muls	r2, r0
 80016f6:	0003      	movs	r3, r0
 80016f8:	4331      	orrs	r1, r6
 80016fa:	428a      	cmp	r2, r1
 80016fc:	d907      	bls.n	800170e <__aeabi_ddiv+0x3a2>
 80016fe:	1909      	adds	r1, r1, r4
 8001700:	3b01      	subs	r3, #1
 8001702:	428c      	cmp	r4, r1
 8001704:	d803      	bhi.n	800170e <__aeabi_ddiv+0x3a2>
 8001706:	428a      	cmp	r2, r1
 8001708:	d901      	bls.n	800170e <__aeabi_ddiv+0x3a2>
 800170a:	1e83      	subs	r3, r0, #2
 800170c:	1909      	adds	r1, r1, r4
 800170e:	9e03      	ldr	r6, [sp, #12]
 8001710:	1a89      	subs	r1, r1, r2
 8001712:	0032      	movs	r2, r6
 8001714:	042d      	lsls	r5, r5, #16
 8001716:	431d      	orrs	r5, r3
 8001718:	9f02      	ldr	r7, [sp, #8]
 800171a:	042b      	lsls	r3, r5, #16
 800171c:	0c1b      	lsrs	r3, r3, #16
 800171e:	435a      	muls	r2, r3
 8001720:	437b      	muls	r3, r7
 8001722:	469c      	mov	ip, r3
 8001724:	0c28      	lsrs	r0, r5, #16
 8001726:	4346      	muls	r6, r0
 8001728:	0c13      	lsrs	r3, r2, #16
 800172a:	44b4      	add	ip, r6
 800172c:	4463      	add	r3, ip
 800172e:	4378      	muls	r0, r7
 8001730:	429e      	cmp	r6, r3
 8001732:	d903      	bls.n	800173c <__aeabi_ddiv+0x3d0>
 8001734:	2680      	movs	r6, #128	; 0x80
 8001736:	0276      	lsls	r6, r6, #9
 8001738:	46b4      	mov	ip, r6
 800173a:	4460      	add	r0, ip
 800173c:	0c1e      	lsrs	r6, r3, #16
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	0c12      	lsrs	r2, r2, #16
 8001744:	1830      	adds	r0, r6, r0
 8001746:	189b      	adds	r3, r3, r2
 8001748:	4281      	cmp	r1, r0
 800174a:	d306      	bcc.n	800175a <__aeabi_ddiv+0x3ee>
 800174c:	d002      	beq.n	8001754 <__aeabi_ddiv+0x3e8>
 800174e:	2301      	movs	r3, #1
 8001750:	431d      	orrs	r5, r3
 8001752:	e6ce      	b.n	80014f2 <__aeabi_ddiv+0x186>
 8001754:	2b00      	cmp	r3, #0
 8001756:	d100      	bne.n	800175a <__aeabi_ddiv+0x3ee>
 8001758:	e6cb      	b.n	80014f2 <__aeabi_ddiv+0x186>
 800175a:	1861      	adds	r1, r4, r1
 800175c:	1e6e      	subs	r6, r5, #1
 800175e:	42a1      	cmp	r1, r4
 8001760:	d200      	bcs.n	8001764 <__aeabi_ddiv+0x3f8>
 8001762:	e0a4      	b.n	80018ae <__aeabi_ddiv+0x542>
 8001764:	4281      	cmp	r1, r0
 8001766:	d200      	bcs.n	800176a <__aeabi_ddiv+0x3fe>
 8001768:	e0c9      	b.n	80018fe <__aeabi_ddiv+0x592>
 800176a:	d100      	bne.n	800176e <__aeabi_ddiv+0x402>
 800176c:	e0d9      	b.n	8001922 <__aeabi_ddiv+0x5b6>
 800176e:	0035      	movs	r5, r6
 8001770:	e7ed      	b.n	800174e <__aeabi_ddiv+0x3e2>
 8001772:	2501      	movs	r5, #1
 8001774:	426d      	negs	r5, r5
 8001776:	2101      	movs	r1, #1
 8001778:	1a89      	subs	r1, r1, r2
 800177a:	2938      	cmp	r1, #56	; 0x38
 800177c:	dd00      	ble.n	8001780 <__aeabi_ddiv+0x414>
 800177e:	e64c      	b.n	800141a <__aeabi_ddiv+0xae>
 8001780:	291f      	cmp	r1, #31
 8001782:	dc00      	bgt.n	8001786 <__aeabi_ddiv+0x41a>
 8001784:	e07f      	b.n	8001886 <__aeabi_ddiv+0x51a>
 8001786:	231f      	movs	r3, #31
 8001788:	425b      	negs	r3, r3
 800178a:	1a9a      	subs	r2, r3, r2
 800178c:	4643      	mov	r3, r8
 800178e:	40d3      	lsrs	r3, r2
 8001790:	2920      	cmp	r1, #32
 8001792:	d004      	beq.n	800179e <__aeabi_ddiv+0x432>
 8001794:	4644      	mov	r4, r8
 8001796:	4a65      	ldr	r2, [pc, #404]	; (800192c <__aeabi_ddiv+0x5c0>)
 8001798:	445a      	add	r2, fp
 800179a:	4094      	lsls	r4, r2
 800179c:	4325      	orrs	r5, r4
 800179e:	1e6a      	subs	r2, r5, #1
 80017a0:	4195      	sbcs	r5, r2
 80017a2:	2207      	movs	r2, #7
 80017a4:	432b      	orrs	r3, r5
 80017a6:	0015      	movs	r5, r2
 80017a8:	2400      	movs	r4, #0
 80017aa:	401d      	ands	r5, r3
 80017ac:	421a      	tst	r2, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_ddiv+0x446>
 80017b0:	e0a1      	b.n	80018f6 <__aeabi_ddiv+0x58a>
 80017b2:	220f      	movs	r2, #15
 80017b4:	2400      	movs	r4, #0
 80017b6:	401a      	ands	r2, r3
 80017b8:	2a04      	cmp	r2, #4
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0x452>
 80017bc:	e098      	b.n	80018f0 <__aeabi_ddiv+0x584>
 80017be:	1d1a      	adds	r2, r3, #4
 80017c0:	429a      	cmp	r2, r3
 80017c2:	419b      	sbcs	r3, r3
 80017c4:	425b      	negs	r3, r3
 80017c6:	18e4      	adds	r4, r4, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	0222      	lsls	r2, r4, #8
 80017cc:	d400      	bmi.n	80017d0 <__aeabi_ddiv+0x464>
 80017ce:	e08f      	b.n	80018f0 <__aeabi_ddiv+0x584>
 80017d0:	2301      	movs	r3, #1
 80017d2:	2400      	movs	r4, #0
 80017d4:	2500      	movs	r5, #0
 80017d6:	e623      	b.n	8001420 <__aeabi_ddiv+0xb4>
 80017d8:	42b5      	cmp	r5, r6
 80017da:	d300      	bcc.n	80017de <__aeabi_ddiv+0x472>
 80017dc:	e764      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 80017de:	4643      	mov	r3, r8
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	9b00      	ldr	r3, [sp, #0]
 80017e4:	469c      	mov	ip, r3
 80017e6:	4465      	add	r5, ip
 80017e8:	001f      	movs	r7, r3
 80017ea:	429d      	cmp	r5, r3
 80017ec:	419b      	sbcs	r3, r3
 80017ee:	425b      	negs	r3, r3
 80017f0:	191b      	adds	r3, r3, r4
 80017f2:	18c9      	adds	r1, r1, r3
 80017f4:	428c      	cmp	r4, r1
 80017f6:	d23a      	bcs.n	800186e <__aeabi_ddiv+0x502>
 80017f8:	4288      	cmp	r0, r1
 80017fa:	d863      	bhi.n	80018c4 <__aeabi_ddiv+0x558>
 80017fc:	d060      	beq.n	80018c0 <__aeabi_ddiv+0x554>
 80017fe:	4690      	mov	r8, r2
 8001800:	e752      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 8001802:	42aa      	cmp	r2, r5
 8001804:	d900      	bls.n	8001808 <__aeabi_ddiv+0x49c>
 8001806:	e6ea      	b.n	80015de <__aeabi_ddiv+0x272>
 8001808:	4643      	mov	r3, r8
 800180a:	07de      	lsls	r6, r3, #31
 800180c:	0858      	lsrs	r0, r3, #1
 800180e:	086b      	lsrs	r3, r5, #1
 8001810:	431e      	orrs	r6, r3
 8001812:	07ed      	lsls	r5, r5, #31
 8001814:	e6ea      	b.n	80015ec <__aeabi_ddiv+0x280>
 8001816:	4648      	mov	r0, r9
 8001818:	f000 fb62 	bl	8001ee0 <__clzsi2>
 800181c:	0001      	movs	r1, r0
 800181e:	0002      	movs	r2, r0
 8001820:	3115      	adds	r1, #21
 8001822:	3220      	adds	r2, #32
 8001824:	291c      	cmp	r1, #28
 8001826:	dc00      	bgt.n	800182a <__aeabi_ddiv+0x4be>
 8001828:	e61a      	b.n	8001460 <__aeabi_ddiv+0xf4>
 800182a:	464b      	mov	r3, r9
 800182c:	3808      	subs	r0, #8
 800182e:	4083      	lsls	r3, r0
 8001830:	2500      	movs	r5, #0
 8001832:	4698      	mov	r8, r3
 8001834:	e620      	b.n	8001478 <__aeabi_ddiv+0x10c>
 8001836:	f000 fb53 	bl	8001ee0 <__clzsi2>
 800183a:	0003      	movs	r3, r0
 800183c:	001a      	movs	r2, r3
 800183e:	3215      	adds	r2, #21
 8001840:	3020      	adds	r0, #32
 8001842:	2a1c      	cmp	r2, #28
 8001844:	dc00      	bgt.n	8001848 <__aeabi_ddiv+0x4dc>
 8001846:	e630      	b.n	80014aa <__aeabi_ddiv+0x13e>
 8001848:	4654      	mov	r4, sl
 800184a:	3b08      	subs	r3, #8
 800184c:	2200      	movs	r2, #0
 800184e:	409c      	lsls	r4, r3
 8001850:	e635      	b.n	80014be <__aeabi_ddiv+0x152>
 8001852:	230f      	movs	r3, #15
 8001854:	402b      	ands	r3, r5
 8001856:	2b04      	cmp	r3, #4
 8001858:	d100      	bne.n	800185c <__aeabi_ddiv+0x4f0>
 800185a:	e652      	b.n	8001502 <__aeabi_ddiv+0x196>
 800185c:	2305      	movs	r3, #5
 800185e:	425b      	negs	r3, r3
 8001860:	42ab      	cmp	r3, r5
 8001862:	419b      	sbcs	r3, r3
 8001864:	3504      	adds	r5, #4
 8001866:	425b      	negs	r3, r3
 8001868:	08ed      	lsrs	r5, r5, #3
 800186a:	4498      	add	r8, r3
 800186c:	e64a      	b.n	8001504 <__aeabi_ddiv+0x198>
 800186e:	428c      	cmp	r4, r1
 8001870:	d1c5      	bne.n	80017fe <__aeabi_ddiv+0x492>
 8001872:	42af      	cmp	r7, r5
 8001874:	d9c0      	bls.n	80017f8 <__aeabi_ddiv+0x48c>
 8001876:	4690      	mov	r8, r2
 8001878:	e716      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 800187a:	428a      	cmp	r2, r1
 800187c:	d800      	bhi.n	8001880 <__aeabi_ddiv+0x514>
 800187e:	e6ea      	b.n	8001656 <__aeabi_ddiv+0x2ea>
 8001880:	1e83      	subs	r3, r0, #2
 8001882:	1909      	adds	r1, r1, r4
 8001884:	e6e7      	b.n	8001656 <__aeabi_ddiv+0x2ea>
 8001886:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <__aeabi_ddiv+0x5c4>)
 8001888:	0028      	movs	r0, r5
 800188a:	445a      	add	r2, fp
 800188c:	4643      	mov	r3, r8
 800188e:	4095      	lsls	r5, r2
 8001890:	4093      	lsls	r3, r2
 8001892:	40c8      	lsrs	r0, r1
 8001894:	1e6a      	subs	r2, r5, #1
 8001896:	4195      	sbcs	r5, r2
 8001898:	4644      	mov	r4, r8
 800189a:	4303      	orrs	r3, r0
 800189c:	432b      	orrs	r3, r5
 800189e:	40cc      	lsrs	r4, r1
 80018a0:	075a      	lsls	r2, r3, #29
 80018a2:	d092      	beq.n	80017ca <__aeabi_ddiv+0x45e>
 80018a4:	220f      	movs	r2, #15
 80018a6:	401a      	ands	r2, r3
 80018a8:	2a04      	cmp	r2, #4
 80018aa:	d188      	bne.n	80017be <__aeabi_ddiv+0x452>
 80018ac:	e78d      	b.n	80017ca <__aeabi_ddiv+0x45e>
 80018ae:	0035      	movs	r5, r6
 80018b0:	4281      	cmp	r1, r0
 80018b2:	d000      	beq.n	80018b6 <__aeabi_ddiv+0x54a>
 80018b4:	e74b      	b.n	800174e <__aeabi_ddiv+0x3e2>
 80018b6:	9a00      	ldr	r2, [sp, #0]
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d000      	beq.n	80018be <__aeabi_ddiv+0x552>
 80018bc:	e747      	b.n	800174e <__aeabi_ddiv+0x3e2>
 80018be:	e618      	b.n	80014f2 <__aeabi_ddiv+0x186>
 80018c0:	42ae      	cmp	r6, r5
 80018c2:	d99c      	bls.n	80017fe <__aeabi_ddiv+0x492>
 80018c4:	2302      	movs	r3, #2
 80018c6:	425b      	negs	r3, r3
 80018c8:	469c      	mov	ip, r3
 80018ca:	9b00      	ldr	r3, [sp, #0]
 80018cc:	44e0      	add	r8, ip
 80018ce:	469c      	mov	ip, r3
 80018d0:	4465      	add	r5, ip
 80018d2:	429d      	cmp	r5, r3
 80018d4:	419b      	sbcs	r3, r3
 80018d6:	425b      	negs	r3, r3
 80018d8:	191b      	adds	r3, r3, r4
 80018da:	18c9      	adds	r1, r1, r3
 80018dc:	e6e4      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <__aeabi_ddiv+0x5c8>)
 80018e0:	445a      	add	r2, fp
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	dc00      	bgt.n	80018e8 <__aeabi_ddiv+0x57c>
 80018e6:	e744      	b.n	8001772 <__aeabi_ddiv+0x406>
 80018e8:	2301      	movs	r3, #1
 80018ea:	2500      	movs	r5, #0
 80018ec:	4498      	add	r8, r3
 80018ee:	e609      	b.n	8001504 <__aeabi_ddiv+0x198>
 80018f0:	0765      	lsls	r5, r4, #29
 80018f2:	0264      	lsls	r4, r4, #9
 80018f4:	0b24      	lsrs	r4, r4, #12
 80018f6:	08db      	lsrs	r3, r3, #3
 80018f8:	431d      	orrs	r5, r3
 80018fa:	2300      	movs	r3, #0
 80018fc:	e590      	b.n	8001420 <__aeabi_ddiv+0xb4>
 80018fe:	9e00      	ldr	r6, [sp, #0]
 8001900:	3d02      	subs	r5, #2
 8001902:	0072      	lsls	r2, r6, #1
 8001904:	42b2      	cmp	r2, r6
 8001906:	41bf      	sbcs	r7, r7
 8001908:	427f      	negs	r7, r7
 800190a:	193c      	adds	r4, r7, r4
 800190c:	1909      	adds	r1, r1, r4
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	e7ce      	b.n	80018b0 <__aeabi_ddiv+0x544>
 8001912:	2480      	movs	r4, #128	; 0x80
 8001914:	4643      	mov	r3, r8
 8001916:	0324      	lsls	r4, r4, #12
 8001918:	431c      	orrs	r4, r3
 800191a:	0324      	lsls	r4, r4, #12
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <__aeabi_ddiv+0x5cc>)
 800191e:	0b24      	lsrs	r4, r4, #12
 8001920:	e57e      	b.n	8001420 <__aeabi_ddiv+0xb4>
 8001922:	9a00      	ldr	r2, [sp, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d3ea      	bcc.n	80018fe <__aeabi_ddiv+0x592>
 8001928:	0035      	movs	r5, r6
 800192a:	e7c4      	b.n	80018b6 <__aeabi_ddiv+0x54a>
 800192c:	0000043e 	.word	0x0000043e
 8001930:	0000041e 	.word	0x0000041e
 8001934:	000003ff 	.word	0x000003ff
 8001938:	000007ff 	.word	0x000007ff

0800193c <__aeabi_dmul>:
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193e:	4657      	mov	r7, sl
 8001940:	464e      	mov	r6, r9
 8001942:	4645      	mov	r5, r8
 8001944:	46de      	mov	lr, fp
 8001946:	b5e0      	push	{r5, r6, r7, lr}
 8001948:	4698      	mov	r8, r3
 800194a:	030c      	lsls	r4, r1, #12
 800194c:	004b      	lsls	r3, r1, #1
 800194e:	0006      	movs	r6, r0
 8001950:	4692      	mov	sl, r2
 8001952:	b087      	sub	sp, #28
 8001954:	0b24      	lsrs	r4, r4, #12
 8001956:	0d5b      	lsrs	r3, r3, #21
 8001958:	0fcf      	lsrs	r7, r1, #31
 800195a:	2b00      	cmp	r3, #0
 800195c:	d06c      	beq.n	8001a38 <__aeabi_dmul+0xfc>
 800195e:	4add      	ldr	r2, [pc, #884]	; (8001cd4 <__aeabi_dmul+0x398>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d100      	bne.n	8001966 <__aeabi_dmul+0x2a>
 8001964:	e086      	b.n	8001a74 <__aeabi_dmul+0x138>
 8001966:	0f42      	lsrs	r2, r0, #29
 8001968:	00e4      	lsls	r4, r4, #3
 800196a:	4314      	orrs	r4, r2
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	0412      	lsls	r2, r2, #16
 8001970:	4314      	orrs	r4, r2
 8001972:	4ad9      	ldr	r2, [pc, #868]	; (8001cd8 <__aeabi_dmul+0x39c>)
 8001974:	00c5      	lsls	r5, r0, #3
 8001976:	4694      	mov	ip, r2
 8001978:	4463      	add	r3, ip
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2300      	movs	r3, #0
 800197e:	4699      	mov	r9, r3
 8001980:	469b      	mov	fp, r3
 8001982:	4643      	mov	r3, r8
 8001984:	4642      	mov	r2, r8
 8001986:	031e      	lsls	r6, r3, #12
 8001988:	0fd2      	lsrs	r2, r2, #31
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4650      	mov	r0, sl
 800198e:	4690      	mov	r8, r2
 8001990:	0b36      	lsrs	r6, r6, #12
 8001992:	0d5b      	lsrs	r3, r3, #21
 8001994:	d100      	bne.n	8001998 <__aeabi_dmul+0x5c>
 8001996:	e078      	b.n	8001a8a <__aeabi_dmul+0x14e>
 8001998:	4ace      	ldr	r2, [pc, #824]	; (8001cd4 <__aeabi_dmul+0x398>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01d      	beq.n	80019da <__aeabi_dmul+0x9e>
 800199e:	49ce      	ldr	r1, [pc, #824]	; (8001cd8 <__aeabi_dmul+0x39c>)
 80019a0:	0f42      	lsrs	r2, r0, #29
 80019a2:	468c      	mov	ip, r1
 80019a4:	9900      	ldr	r1, [sp, #0]
 80019a6:	4463      	add	r3, ip
 80019a8:	00f6      	lsls	r6, r6, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4316      	orrs	r6, r2
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	449c      	add	ip, r3
 80019b2:	0412      	lsls	r2, r2, #16
 80019b4:	4663      	mov	r3, ip
 80019b6:	4316      	orrs	r6, r2
 80019b8:	00c2      	lsls	r2, r0, #3
 80019ba:	2000      	movs	r0, #0
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	9900      	ldr	r1, [sp, #0]
 80019c0:	4643      	mov	r3, r8
 80019c2:	3101      	adds	r1, #1
 80019c4:	468c      	mov	ip, r1
 80019c6:	4649      	mov	r1, r9
 80019c8:	407b      	eors	r3, r7
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	290f      	cmp	r1, #15
 80019ce:	d900      	bls.n	80019d2 <__aeabi_dmul+0x96>
 80019d0:	e07e      	b.n	8001ad0 <__aeabi_dmul+0x194>
 80019d2:	4bc2      	ldr	r3, [pc, #776]	; (8001cdc <__aeabi_dmul+0x3a0>)
 80019d4:	0089      	lsls	r1, r1, #2
 80019d6:	5859      	ldr	r1, [r3, r1]
 80019d8:	468f      	mov	pc, r1
 80019da:	4652      	mov	r2, sl
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	4332      	orrs	r2, r6
 80019e0:	d000      	beq.n	80019e4 <__aeabi_dmul+0xa8>
 80019e2:	e156      	b.n	8001c92 <__aeabi_dmul+0x356>
 80019e4:	49bb      	ldr	r1, [pc, #748]	; (8001cd4 <__aeabi_dmul+0x398>)
 80019e6:	2600      	movs	r6, #0
 80019e8:	468c      	mov	ip, r1
 80019ea:	4463      	add	r3, ip
 80019ec:	4649      	mov	r1, r9
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2302      	movs	r3, #2
 80019f2:	4319      	orrs	r1, r3
 80019f4:	4689      	mov	r9, r1
 80019f6:	2002      	movs	r0, #2
 80019f8:	e7e1      	b.n	80019be <__aeabi_dmul+0x82>
 80019fa:	4643      	mov	r3, r8
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	0034      	movs	r4, r6
 8001a00:	0015      	movs	r5, r2
 8001a02:	4683      	mov	fp, r0
 8001a04:	465b      	mov	r3, fp
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d05e      	beq.n	8001ac8 <__aeabi_dmul+0x18c>
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dmul+0xd4>
 8001a0e:	e1f3      	b.n	8001df8 <__aeabi_dmul+0x4bc>
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dmul+0xda>
 8001a14:	e118      	b.n	8001c48 <__aeabi_dmul+0x30c>
 8001a16:	2200      	movs	r2, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	9b01      	ldr	r3, [sp, #4]
 8001a1e:	0512      	lsls	r2, r2, #20
 8001a20:	4322      	orrs	r2, r4
 8001a22:	07db      	lsls	r3, r3, #31
 8001a24:	431a      	orrs	r2, r3
 8001a26:	0028      	movs	r0, r5
 8001a28:	0011      	movs	r1, r2
 8001a2a:	b007      	add	sp, #28
 8001a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a2e:	46bb      	mov	fp, r7
 8001a30:	46b2      	mov	sl, r6
 8001a32:	46a9      	mov	r9, r5
 8001a34:	46a0      	mov	r8, r4
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a38:	0025      	movs	r5, r4
 8001a3a:	4305      	orrs	r5, r0
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dmul+0x104>
 8001a3e:	e141      	b.n	8001cc4 <__aeabi_dmul+0x388>
 8001a40:	2c00      	cmp	r4, #0
 8001a42:	d100      	bne.n	8001a46 <__aeabi_dmul+0x10a>
 8001a44:	e1ad      	b.n	8001da2 <__aeabi_dmul+0x466>
 8001a46:	0020      	movs	r0, r4
 8001a48:	f000 fa4a 	bl	8001ee0 <__clzsi2>
 8001a4c:	0001      	movs	r1, r0
 8001a4e:	0002      	movs	r2, r0
 8001a50:	390b      	subs	r1, #11
 8001a52:	231d      	movs	r3, #29
 8001a54:	0010      	movs	r0, r2
 8001a56:	1a5b      	subs	r3, r3, r1
 8001a58:	0031      	movs	r1, r6
 8001a5a:	0035      	movs	r5, r6
 8001a5c:	3808      	subs	r0, #8
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	40d9      	lsrs	r1, r3
 8001a62:	4085      	lsls	r5, r0
 8001a64:	430c      	orrs	r4, r1
 8001a66:	489e      	ldr	r0, [pc, #632]	; (8001ce0 <__aeabi_dmul+0x3a4>)
 8001a68:	1a83      	subs	r3, r0, r2
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	4699      	mov	r9, r3
 8001a70:	469b      	mov	fp, r3
 8001a72:	e786      	b.n	8001982 <__aeabi_dmul+0x46>
 8001a74:	0005      	movs	r5, r0
 8001a76:	4325      	orrs	r5, r4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dmul+0x140>
 8001a7a:	e11c      	b.n	8001cb6 <__aeabi_dmul+0x37a>
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2302      	movs	r3, #2
 8001a82:	2400      	movs	r4, #0
 8001a84:	4691      	mov	r9, r2
 8001a86:	469b      	mov	fp, r3
 8001a88:	e77b      	b.n	8001982 <__aeabi_dmul+0x46>
 8001a8a:	4652      	mov	r2, sl
 8001a8c:	4332      	orrs	r2, r6
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dmul+0x156>
 8001a90:	e10a      	b.n	8001ca8 <__aeabi_dmul+0x36c>
 8001a92:	2e00      	cmp	r6, #0
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dmul+0x15c>
 8001a96:	e176      	b.n	8001d86 <__aeabi_dmul+0x44a>
 8001a98:	0030      	movs	r0, r6
 8001a9a:	f000 fa21 	bl	8001ee0 <__clzsi2>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	3a0b      	subs	r2, #11
 8001aa2:	231d      	movs	r3, #29
 8001aa4:	0001      	movs	r1, r0
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	4652      	mov	r2, sl
 8001aaa:	3908      	subs	r1, #8
 8001aac:	40da      	lsrs	r2, r3
 8001aae:	408e      	lsls	r6, r1
 8001ab0:	4316      	orrs	r6, r2
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	408a      	lsls	r2, r1
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	4989      	ldr	r1, [pc, #548]	; (8001ce0 <__aeabi_dmul+0x3a4>)
 8001aba:	1a18      	subs	r0, r3, r0
 8001abc:	0003      	movs	r3, r0
 8001abe:	468c      	mov	ip, r1
 8001ac0:	4463      	add	r3, ip
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	e77a      	b.n	80019be <__aeabi_dmul+0x82>
 8001ac8:	2400      	movs	r4, #0
 8001aca:	2500      	movs	r5, #0
 8001acc:	4a81      	ldr	r2, [pc, #516]	; (8001cd4 <__aeabi_dmul+0x398>)
 8001ace:	e7a5      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001ad0:	0c2f      	lsrs	r7, r5, #16
 8001ad2:	042d      	lsls	r5, r5, #16
 8001ad4:	0c2d      	lsrs	r5, r5, #16
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	0c11      	lsrs	r1, r2, #16
 8001ada:	0412      	lsls	r2, r2, #16
 8001adc:	0c12      	lsrs	r2, r2, #16
 8001ade:	4353      	muls	r3, r2
 8001ae0:	4698      	mov	r8, r3
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	0028      	movs	r0, r5
 8001ae6:	437b      	muls	r3, r7
 8001ae8:	4699      	mov	r9, r3
 8001aea:	4348      	muls	r0, r1
 8001aec:	4448      	add	r0, r9
 8001aee:	4683      	mov	fp, r0
 8001af0:	4640      	mov	r0, r8
 8001af2:	000b      	movs	r3, r1
 8001af4:	0c00      	lsrs	r0, r0, #16
 8001af6:	4682      	mov	sl, r0
 8001af8:	4658      	mov	r0, fp
 8001afa:	437b      	muls	r3, r7
 8001afc:	4450      	add	r0, sl
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	4581      	cmp	r9, r0
 8001b02:	d906      	bls.n	8001b12 <__aeabi_dmul+0x1d6>
 8001b04:	469a      	mov	sl, r3
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	025b      	lsls	r3, r3, #9
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	44ca      	add	sl, r9
 8001b0e:	4653      	mov	r3, sl
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	0c03      	lsrs	r3, r0, #16
 8001b14:	469b      	mov	fp, r3
 8001b16:	4643      	mov	r3, r8
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	0400      	lsls	r0, r0, #16
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	4698      	mov	r8, r3
 8001b20:	0003      	movs	r3, r0
 8001b22:	4443      	add	r3, r8
 8001b24:	9304      	str	r3, [sp, #16]
 8001b26:	0c33      	lsrs	r3, r6, #16
 8001b28:	4699      	mov	r9, r3
 8001b2a:	002b      	movs	r3, r5
 8001b2c:	0436      	lsls	r6, r6, #16
 8001b2e:	0c36      	lsrs	r6, r6, #16
 8001b30:	4373      	muls	r3, r6
 8001b32:	4698      	mov	r8, r3
 8001b34:	0033      	movs	r3, r6
 8001b36:	437b      	muls	r3, r7
 8001b38:	469a      	mov	sl, r3
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	435d      	muls	r5, r3
 8001b3e:	435f      	muls	r7, r3
 8001b40:	4643      	mov	r3, r8
 8001b42:	4455      	add	r5, sl
 8001b44:	0c18      	lsrs	r0, r3, #16
 8001b46:	1940      	adds	r0, r0, r5
 8001b48:	4582      	cmp	sl, r0
 8001b4a:	d903      	bls.n	8001b54 <__aeabi_dmul+0x218>
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	025b      	lsls	r3, r3, #9
 8001b50:	469a      	mov	sl, r3
 8001b52:	4457      	add	r7, sl
 8001b54:	0c05      	lsrs	r5, r0, #16
 8001b56:	19eb      	adds	r3, r5, r7
 8001b58:	9305      	str	r3, [sp, #20]
 8001b5a:	4643      	mov	r3, r8
 8001b5c:	041d      	lsls	r5, r3, #16
 8001b5e:	0c2d      	lsrs	r5, r5, #16
 8001b60:	0400      	lsls	r0, r0, #16
 8001b62:	1940      	adds	r0, r0, r5
 8001b64:	0c25      	lsrs	r5, r4, #16
 8001b66:	0424      	lsls	r4, r4, #16
 8001b68:	0c24      	lsrs	r4, r4, #16
 8001b6a:	0027      	movs	r7, r4
 8001b6c:	4357      	muls	r7, r2
 8001b6e:	436a      	muls	r2, r5
 8001b70:	4690      	mov	r8, r2
 8001b72:	002a      	movs	r2, r5
 8001b74:	0c3b      	lsrs	r3, r7, #16
 8001b76:	469a      	mov	sl, r3
 8001b78:	434a      	muls	r2, r1
 8001b7a:	4361      	muls	r1, r4
 8001b7c:	4441      	add	r1, r8
 8001b7e:	4451      	add	r1, sl
 8001b80:	4483      	add	fp, r0
 8001b82:	4588      	cmp	r8, r1
 8001b84:	d903      	bls.n	8001b8e <__aeabi_dmul+0x252>
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	025b      	lsls	r3, r3, #9
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	4442      	add	r2, r8
 8001b8e:	043f      	lsls	r7, r7, #16
 8001b90:	0c0b      	lsrs	r3, r1, #16
 8001b92:	0c3f      	lsrs	r7, r7, #16
 8001b94:	0409      	lsls	r1, r1, #16
 8001b96:	19c9      	adds	r1, r1, r7
 8001b98:	0027      	movs	r7, r4
 8001b9a:	4698      	mov	r8, r3
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	4377      	muls	r7, r6
 8001ba0:	435c      	muls	r4, r3
 8001ba2:	436e      	muls	r6, r5
 8001ba4:	435d      	muls	r5, r3
 8001ba6:	0c3b      	lsrs	r3, r7, #16
 8001ba8:	4699      	mov	r9, r3
 8001baa:	19a4      	adds	r4, r4, r6
 8001bac:	444c      	add	r4, r9
 8001bae:	4442      	add	r2, r8
 8001bb0:	9503      	str	r5, [sp, #12]
 8001bb2:	42a6      	cmp	r6, r4
 8001bb4:	d904      	bls.n	8001bc0 <__aeabi_dmul+0x284>
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	025b      	lsls	r3, r3, #9
 8001bba:	4698      	mov	r8, r3
 8001bbc:	4445      	add	r5, r8
 8001bbe:	9503      	str	r5, [sp, #12]
 8001bc0:	9b02      	ldr	r3, [sp, #8]
 8001bc2:	043f      	lsls	r7, r7, #16
 8001bc4:	445b      	add	r3, fp
 8001bc6:	001e      	movs	r6, r3
 8001bc8:	4283      	cmp	r3, r0
 8001bca:	4180      	sbcs	r0, r0
 8001bcc:	0423      	lsls	r3, r4, #16
 8001bce:	4698      	mov	r8, r3
 8001bd0:	9b05      	ldr	r3, [sp, #20]
 8001bd2:	0c3f      	lsrs	r7, r7, #16
 8001bd4:	4447      	add	r7, r8
 8001bd6:	4698      	mov	r8, r3
 8001bd8:	1876      	adds	r6, r6, r1
 8001bda:	428e      	cmp	r6, r1
 8001bdc:	4189      	sbcs	r1, r1
 8001bde:	4447      	add	r7, r8
 8001be0:	4240      	negs	r0, r0
 8001be2:	183d      	adds	r5, r7, r0
 8001be4:	46a8      	mov	r8, r5
 8001be6:	4693      	mov	fp, r2
 8001be8:	4249      	negs	r1, r1
 8001bea:	468a      	mov	sl, r1
 8001bec:	44c3      	add	fp, r8
 8001bee:	429f      	cmp	r7, r3
 8001bf0:	41bf      	sbcs	r7, r7
 8001bf2:	4580      	cmp	r8, r0
 8001bf4:	4180      	sbcs	r0, r0
 8001bf6:	9b03      	ldr	r3, [sp, #12]
 8001bf8:	44da      	add	sl, fp
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	4653      	mov	r3, sl
 8001bfe:	4240      	negs	r0, r0
 8001c00:	427f      	negs	r7, r7
 8001c02:	4307      	orrs	r7, r0
 8001c04:	0c24      	lsrs	r4, r4, #16
 8001c06:	4593      	cmp	fp, r2
 8001c08:	4192      	sbcs	r2, r2
 8001c0a:	458a      	cmp	sl, r1
 8001c0c:	4189      	sbcs	r1, r1
 8001c0e:	193f      	adds	r7, r7, r4
 8001c10:	0ddc      	lsrs	r4, r3, #23
 8001c12:	9b04      	ldr	r3, [sp, #16]
 8001c14:	0275      	lsls	r5, r6, #9
 8001c16:	431d      	orrs	r5, r3
 8001c18:	1e68      	subs	r0, r5, #1
 8001c1a:	4185      	sbcs	r5, r0
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	4252      	negs	r2, r2
 8001c20:	4249      	negs	r1, r1
 8001c22:	430a      	orrs	r2, r1
 8001c24:	18bf      	adds	r7, r7, r2
 8001c26:	4447      	add	r7, r8
 8001c28:	0df6      	lsrs	r6, r6, #23
 8001c2a:	027f      	lsls	r7, r7, #9
 8001c2c:	4335      	orrs	r5, r6
 8001c2e:	025a      	lsls	r2, r3, #9
 8001c30:	433c      	orrs	r4, r7
 8001c32:	4315      	orrs	r5, r2
 8001c34:	01fb      	lsls	r3, r7, #7
 8001c36:	d400      	bmi.n	8001c3a <__aeabi_dmul+0x2fe>
 8001c38:	e0c1      	b.n	8001dbe <__aeabi_dmul+0x482>
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	086a      	lsrs	r2, r5, #1
 8001c3e:	400d      	ands	r5, r1
 8001c40:	4315      	orrs	r5, r2
 8001c42:	07e2      	lsls	r2, r4, #31
 8001c44:	4315      	orrs	r5, r2
 8001c46:	0864      	lsrs	r4, r4, #1
 8001c48:	4926      	ldr	r1, [pc, #152]	; (8001ce4 <__aeabi_dmul+0x3a8>)
 8001c4a:	4461      	add	r1, ip
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	dd56      	ble.n	8001cfe <__aeabi_dmul+0x3c2>
 8001c50:	076b      	lsls	r3, r5, #29
 8001c52:	d009      	beq.n	8001c68 <__aeabi_dmul+0x32c>
 8001c54:	220f      	movs	r2, #15
 8001c56:	402a      	ands	r2, r5
 8001c58:	2a04      	cmp	r2, #4
 8001c5a:	d005      	beq.n	8001c68 <__aeabi_dmul+0x32c>
 8001c5c:	1d2a      	adds	r2, r5, #4
 8001c5e:	42aa      	cmp	r2, r5
 8001c60:	41ad      	sbcs	r5, r5
 8001c62:	426d      	negs	r5, r5
 8001c64:	1964      	adds	r4, r4, r5
 8001c66:	0015      	movs	r5, r2
 8001c68:	01e3      	lsls	r3, r4, #7
 8001c6a:	d504      	bpl.n	8001c76 <__aeabi_dmul+0x33a>
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <__aeabi_dmul+0x3ac>)
 8001c70:	00c9      	lsls	r1, r1, #3
 8001c72:	4014      	ands	r4, r2
 8001c74:	4461      	add	r1, ip
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <__aeabi_dmul+0x3b0>)
 8001c78:	4291      	cmp	r1, r2
 8001c7a:	dd00      	ble.n	8001c7e <__aeabi_dmul+0x342>
 8001c7c:	e724      	b.n	8001ac8 <__aeabi_dmul+0x18c>
 8001c7e:	0762      	lsls	r2, r4, #29
 8001c80:	08ed      	lsrs	r5, r5, #3
 8001c82:	0264      	lsls	r4, r4, #9
 8001c84:	0549      	lsls	r1, r1, #21
 8001c86:	4315      	orrs	r5, r2
 8001c88:	0b24      	lsrs	r4, r4, #12
 8001c8a:	0d4a      	lsrs	r2, r1, #21
 8001c8c:	e6c6      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001c8e:	9701      	str	r7, [sp, #4]
 8001c90:	e6b8      	b.n	8001a04 <__aeabi_dmul+0xc8>
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <__aeabi_dmul+0x398>)
 8001c94:	2003      	movs	r0, #3
 8001c96:	4694      	mov	ip, r2
 8001c98:	4463      	add	r3, ip
 8001c9a:	464a      	mov	r2, r9
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	4691      	mov	r9, r2
 8001ca4:	4652      	mov	r2, sl
 8001ca6:	e68a      	b.n	80019be <__aeabi_dmul+0x82>
 8001ca8:	4649      	mov	r1, r9
 8001caa:	2301      	movs	r3, #1
 8001cac:	4319      	orrs	r1, r3
 8001cae:	4689      	mov	r9, r1
 8001cb0:	2600      	movs	r6, #0
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	e683      	b.n	80019be <__aeabi_dmul+0x82>
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2303      	movs	r3, #3
 8001cbc:	0005      	movs	r5, r0
 8001cbe:	4691      	mov	r9, r2
 8001cc0:	469b      	mov	fp, r3
 8001cc2:	e65e      	b.n	8001982 <__aeabi_dmul+0x46>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	4699      	mov	r9, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	2400      	movs	r4, #0
 8001cd0:	469b      	mov	fp, r3
 8001cd2:	e656      	b.n	8001982 <__aeabi_dmul+0x46>
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	fffffc01 	.word	0xfffffc01
 8001cdc:	0800ace4 	.word	0x0800ace4
 8001ce0:	fffffc0d 	.word	0xfffffc0d
 8001ce4:	000003ff 	.word	0x000003ff
 8001ce8:	feffffff 	.word	0xfeffffff
 8001cec:	000007fe 	.word	0x000007fe
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2480      	movs	r4, #128	; 0x80
 8001cf4:	2500      	movs	r5, #0
 8001cf6:	4a44      	ldr	r2, [pc, #272]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	0324      	lsls	r4, r4, #12
 8001cfc:	e68e      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001cfe:	2001      	movs	r0, #1
 8001d00:	1a40      	subs	r0, r0, r1
 8001d02:	2838      	cmp	r0, #56	; 0x38
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dmul+0x3cc>
 8001d06:	e686      	b.n	8001a16 <__aeabi_dmul+0xda>
 8001d08:	281f      	cmp	r0, #31
 8001d0a:	dd5b      	ble.n	8001dc4 <__aeabi_dmul+0x488>
 8001d0c:	221f      	movs	r2, #31
 8001d0e:	0023      	movs	r3, r4
 8001d10:	4252      	negs	r2, r2
 8001d12:	1a51      	subs	r1, r2, r1
 8001d14:	40cb      	lsrs	r3, r1
 8001d16:	0019      	movs	r1, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d003      	beq.n	8001d24 <__aeabi_dmul+0x3e8>
 8001d1c:	4a3b      	ldr	r2, [pc, #236]	; (8001e0c <__aeabi_dmul+0x4d0>)
 8001d1e:	4462      	add	r2, ip
 8001d20:	4094      	lsls	r4, r2
 8001d22:	4325      	orrs	r5, r4
 8001d24:	1e6a      	subs	r2, r5, #1
 8001d26:	4195      	sbcs	r5, r2
 8001d28:	002a      	movs	r2, r5
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	2107      	movs	r1, #7
 8001d2e:	000d      	movs	r5, r1
 8001d30:	2400      	movs	r4, #0
 8001d32:	4015      	ands	r5, r2
 8001d34:	4211      	tst	r1, r2
 8001d36:	d05b      	beq.n	8001df0 <__aeabi_dmul+0x4b4>
 8001d38:	210f      	movs	r1, #15
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	4011      	ands	r1, r2
 8001d3e:	2904      	cmp	r1, #4
 8001d40:	d053      	beq.n	8001dea <__aeabi_dmul+0x4ae>
 8001d42:	1d11      	adds	r1, r2, #4
 8001d44:	4291      	cmp	r1, r2
 8001d46:	4192      	sbcs	r2, r2
 8001d48:	4252      	negs	r2, r2
 8001d4a:	18a4      	adds	r4, r4, r2
 8001d4c:	000a      	movs	r2, r1
 8001d4e:	0223      	lsls	r3, r4, #8
 8001d50:	d54b      	bpl.n	8001dea <__aeabi_dmul+0x4ae>
 8001d52:	2201      	movs	r2, #1
 8001d54:	2400      	movs	r4, #0
 8001d56:	2500      	movs	r5, #0
 8001d58:	e660      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	031b      	lsls	r3, r3, #12
 8001d5e:	421c      	tst	r4, r3
 8001d60:	d009      	beq.n	8001d76 <__aeabi_dmul+0x43a>
 8001d62:	421e      	tst	r6, r3
 8001d64:	d107      	bne.n	8001d76 <__aeabi_dmul+0x43a>
 8001d66:	4333      	orrs	r3, r6
 8001d68:	031c      	lsls	r4, r3, #12
 8001d6a:	4643      	mov	r3, r8
 8001d6c:	0015      	movs	r5, r2
 8001d6e:	0b24      	lsrs	r4, r4, #12
 8001d70:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	e652      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0312      	lsls	r2, r2, #12
 8001d7a:	4314      	orrs	r4, r2
 8001d7c:	0324      	lsls	r4, r4, #12
 8001d7e:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001d80:	0b24      	lsrs	r4, r4, #12
 8001d82:	9701      	str	r7, [sp, #4]
 8001d84:	e64a      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001d86:	f000 f8ab 	bl	8001ee0 <__clzsi2>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	3215      	adds	r2, #21
 8001d90:	3020      	adds	r0, #32
 8001d92:	2a1c      	cmp	r2, #28
 8001d94:	dc00      	bgt.n	8001d98 <__aeabi_dmul+0x45c>
 8001d96:	e684      	b.n	8001aa2 <__aeabi_dmul+0x166>
 8001d98:	4656      	mov	r6, sl
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	409e      	lsls	r6, r3
 8001da0:	e689      	b.n	8001ab6 <__aeabi_dmul+0x17a>
 8001da2:	f000 f89d 	bl	8001ee0 <__clzsi2>
 8001da6:	0001      	movs	r1, r0
 8001da8:	0002      	movs	r2, r0
 8001daa:	3115      	adds	r1, #21
 8001dac:	3220      	adds	r2, #32
 8001dae:	291c      	cmp	r1, #28
 8001db0:	dc00      	bgt.n	8001db4 <__aeabi_dmul+0x478>
 8001db2:	e64e      	b.n	8001a52 <__aeabi_dmul+0x116>
 8001db4:	0034      	movs	r4, r6
 8001db6:	3808      	subs	r0, #8
 8001db8:	2500      	movs	r5, #0
 8001dba:	4084      	lsls	r4, r0
 8001dbc:	e653      	b.n	8001a66 <__aeabi_dmul+0x12a>
 8001dbe:	9b00      	ldr	r3, [sp, #0]
 8001dc0:	469c      	mov	ip, r3
 8001dc2:	e741      	b.n	8001c48 <__aeabi_dmul+0x30c>
 8001dc4:	4912      	ldr	r1, [pc, #72]	; (8001e10 <__aeabi_dmul+0x4d4>)
 8001dc6:	0022      	movs	r2, r4
 8001dc8:	4461      	add	r1, ip
 8001dca:	002e      	movs	r6, r5
 8001dcc:	408d      	lsls	r5, r1
 8001dce:	408a      	lsls	r2, r1
 8001dd0:	40c6      	lsrs	r6, r0
 8001dd2:	1e69      	subs	r1, r5, #1
 8001dd4:	418d      	sbcs	r5, r1
 8001dd6:	4332      	orrs	r2, r6
 8001dd8:	432a      	orrs	r2, r5
 8001dda:	40c4      	lsrs	r4, r0
 8001ddc:	0753      	lsls	r3, r2, #29
 8001dde:	d0b6      	beq.n	8001d4e <__aeabi_dmul+0x412>
 8001de0:	210f      	movs	r1, #15
 8001de2:	4011      	ands	r1, r2
 8001de4:	2904      	cmp	r1, #4
 8001de6:	d1ac      	bne.n	8001d42 <__aeabi_dmul+0x406>
 8001de8:	e7b1      	b.n	8001d4e <__aeabi_dmul+0x412>
 8001dea:	0765      	lsls	r5, r4, #29
 8001dec:	0264      	lsls	r4, r4, #9
 8001dee:	0b24      	lsrs	r4, r4, #12
 8001df0:	08d2      	lsrs	r2, r2, #3
 8001df2:	4315      	orrs	r5, r2
 8001df4:	2200      	movs	r2, #0
 8001df6:	e611      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	0312      	lsls	r2, r2, #12
 8001dfc:	4314      	orrs	r4, r2
 8001dfe:	0324      	lsls	r4, r4, #12
 8001e00:	4a01      	ldr	r2, [pc, #4]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001e02:	0b24      	lsrs	r4, r4, #12
 8001e04:	e60a      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	0000043e 	.word	0x0000043e
 8001e10:	0000041e 	.word	0x0000041e

08001e14 <__aeabi_d2iz>:
 8001e14:	000a      	movs	r2, r1
 8001e16:	b530      	push	{r4, r5, lr}
 8001e18:	4c13      	ldr	r4, [pc, #76]	; (8001e68 <__aeabi_d2iz+0x54>)
 8001e1a:	0053      	lsls	r3, r2, #1
 8001e1c:	0309      	lsls	r1, r1, #12
 8001e1e:	0005      	movs	r5, r0
 8001e20:	0b09      	lsrs	r1, r1, #12
 8001e22:	2000      	movs	r0, #0
 8001e24:	0d5b      	lsrs	r3, r3, #21
 8001e26:	0fd2      	lsrs	r2, r2, #31
 8001e28:	42a3      	cmp	r3, r4
 8001e2a:	dd04      	ble.n	8001e36 <__aeabi_d2iz+0x22>
 8001e2c:	480f      	ldr	r0, [pc, #60]	; (8001e6c <__aeabi_d2iz+0x58>)
 8001e2e:	4283      	cmp	r3, r0
 8001e30:	dd02      	ble.n	8001e38 <__aeabi_d2iz+0x24>
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <__aeabi_d2iz+0x5c>)
 8001e34:	18d0      	adds	r0, r2, r3
 8001e36:	bd30      	pop	{r4, r5, pc}
 8001e38:	2080      	movs	r0, #128	; 0x80
 8001e3a:	0340      	lsls	r0, r0, #13
 8001e3c:	4301      	orrs	r1, r0
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <__aeabi_d2iz+0x60>)
 8001e40:	1ac0      	subs	r0, r0, r3
 8001e42:	281f      	cmp	r0, #31
 8001e44:	dd08      	ble.n	8001e58 <__aeabi_d2iz+0x44>
 8001e46:	480c      	ldr	r0, [pc, #48]	; (8001e78 <__aeabi_d2iz+0x64>)
 8001e48:	1ac3      	subs	r3, r0, r3
 8001e4a:	40d9      	lsrs	r1, r3
 8001e4c:	000b      	movs	r3, r1
 8001e4e:	4258      	negs	r0, r3
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d1f0      	bne.n	8001e36 <__aeabi_d2iz+0x22>
 8001e54:	0018      	movs	r0, r3
 8001e56:	e7ee      	b.n	8001e36 <__aeabi_d2iz+0x22>
 8001e58:	4c08      	ldr	r4, [pc, #32]	; (8001e7c <__aeabi_d2iz+0x68>)
 8001e5a:	40c5      	lsrs	r5, r0
 8001e5c:	46a4      	mov	ip, r4
 8001e5e:	4463      	add	r3, ip
 8001e60:	4099      	lsls	r1, r3
 8001e62:	000b      	movs	r3, r1
 8001e64:	432b      	orrs	r3, r5
 8001e66:	e7f2      	b.n	8001e4e <__aeabi_d2iz+0x3a>
 8001e68:	000003fe 	.word	0x000003fe
 8001e6c:	0000041d 	.word	0x0000041d
 8001e70:	7fffffff 	.word	0x7fffffff
 8001e74:	00000433 	.word	0x00000433
 8001e78:	00000413 	.word	0x00000413
 8001e7c:	fffffbed 	.word	0xfffffbed

08001e80 <__aeabi_i2d>:
 8001e80:	b570      	push	{r4, r5, r6, lr}
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d016      	beq.n	8001eb4 <__aeabi_i2d+0x34>
 8001e86:	17c3      	asrs	r3, r0, #31
 8001e88:	18c5      	adds	r5, r0, r3
 8001e8a:	405d      	eors	r5, r3
 8001e8c:	0fc4      	lsrs	r4, r0, #31
 8001e8e:	0028      	movs	r0, r5
 8001e90:	f000 f826 	bl	8001ee0 <__clzsi2>
 8001e94:	4a11      	ldr	r2, [pc, #68]	; (8001edc <__aeabi_i2d+0x5c>)
 8001e96:	1a12      	subs	r2, r2, r0
 8001e98:	280a      	cmp	r0, #10
 8001e9a:	dc16      	bgt.n	8001eca <__aeabi_i2d+0x4a>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	002e      	movs	r6, r5
 8001ea0:	3315      	adds	r3, #21
 8001ea2:	409e      	lsls	r6, r3
 8001ea4:	230b      	movs	r3, #11
 8001ea6:	1a18      	subs	r0, r3, r0
 8001ea8:	40c5      	lsrs	r5, r0
 8001eaa:	0553      	lsls	r3, r2, #21
 8001eac:	032d      	lsls	r5, r5, #12
 8001eae:	0b2d      	lsrs	r5, r5, #12
 8001eb0:	0d5b      	lsrs	r3, r3, #21
 8001eb2:	e003      	b.n	8001ebc <__aeabi_i2d+0x3c>
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2500      	movs	r5, #0
 8001eba:	2600      	movs	r6, #0
 8001ebc:	051b      	lsls	r3, r3, #20
 8001ebe:	432b      	orrs	r3, r5
 8001ec0:	07e4      	lsls	r4, r4, #31
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	0030      	movs	r0, r6
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
 8001eca:	380b      	subs	r0, #11
 8001ecc:	4085      	lsls	r5, r0
 8001ece:	0553      	lsls	r3, r2, #21
 8001ed0:	032d      	lsls	r5, r5, #12
 8001ed2:	2600      	movs	r6, #0
 8001ed4:	0b2d      	lsrs	r5, r5, #12
 8001ed6:	0d5b      	lsrs	r3, r3, #21
 8001ed8:	e7f0      	b.n	8001ebc <__aeabi_i2d+0x3c>
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	0000041e 	.word	0x0000041e

08001ee0 <__clzsi2>:
 8001ee0:	211c      	movs	r1, #28
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	4298      	cmp	r0, r3
 8001ee8:	d301      	bcc.n	8001eee <__clzsi2+0xe>
 8001eea:	0c00      	lsrs	r0, r0, #16
 8001eec:	3910      	subs	r1, #16
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	4298      	cmp	r0, r3
 8001ef2:	d301      	bcc.n	8001ef8 <__clzsi2+0x18>
 8001ef4:	0a00      	lsrs	r0, r0, #8
 8001ef6:	3908      	subs	r1, #8
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	4298      	cmp	r0, r3
 8001efc:	d301      	bcc.n	8001f02 <__clzsi2+0x22>
 8001efe:	0900      	lsrs	r0, r0, #4
 8001f00:	3904      	subs	r1, #4
 8001f02:	a202      	add	r2, pc, #8	; (adr r2, 8001f0c <__clzsi2+0x2c>)
 8001f04:	5c10      	ldrb	r0, [r2, r0]
 8001f06:	1840      	adds	r0, r0, r1
 8001f08:	4770      	bx	lr
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	02020304 	.word	0x02020304
 8001f10:	01010101 	.word	0x01010101
	...

08001f1c <__clzdi2>:
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	2900      	cmp	r1, #0
 8001f20:	d103      	bne.n	8001f2a <__clzdi2+0xe>
 8001f22:	f7ff ffdd 	bl	8001ee0 <__clzsi2>
 8001f26:	3020      	adds	r0, #32
 8001f28:	e002      	b.n	8001f30 <__clzdi2+0x14>
 8001f2a:	1c08      	adds	r0, r1, #0
 8001f2c:	f7ff ffd8 	bl	8001ee0 <__clzsi2>
 8001f30:	bd10      	pop	{r4, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)

08001f34 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f3a:	003b      	movs	r3, r7
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	2308      	movs	r3, #8
 8001f40:	001a      	movs	r2, r3
 8001f42:	2100      	movs	r1, #0
 8001f44:	f008 fa29 	bl	800a39a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <MX_ADC_Init+0xd8>)
 8001f4a:	4a31      	ldr	r2, [pc, #196]	; (8002010 <MX_ADC_Init+0xdc>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	; (800200c <MX_ADC_Init+0xd8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f54:	4b2d      	ldr	r3, [pc, #180]	; (800200c <MX_ADC_Init+0xd8>)
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	05d2      	lsls	r2, r2, #23
 8001f5a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <MX_ADC_Init+0xd8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <MX_ADC_Init+0xd8>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <MX_ADC_Init+0xd8>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <MX_ADC_Init+0xd8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <MX_ADC_Init+0xd8>)
 8001f76:	2220      	movs	r2, #32
 8001f78:	2101      	movs	r1, #1
 8001f7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f7c:	4b23      	ldr	r3, [pc, #140]	; (800200c <MX_ADC_Init+0xd8>)
 8001f7e:	2221      	movs	r2, #33	; 0x21
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <MX_ADC_Init+0xd8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <MX_ADC_Init+0xd8>)
 8001f8c:	22c2      	movs	r2, #194	; 0xc2
 8001f8e:	32ff      	adds	r2, #255	; 0xff
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <MX_ADC_Init+0xd8>)
 8001f94:	222c      	movs	r2, #44	; 0x2c
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <MX_ADC_Init+0xd8>)
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <MX_ADC_Init+0xd8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <MX_ADC_Init+0xd8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <MX_ADC_Init+0xd8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <MX_ADC_Init+0xd8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <MX_ADC_Init+0xd8>)
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f003 fcd8 	bl	8005970 <HAL_ADC_Init>
 8001fc0:	1e03      	subs	r3, r0, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001fc4:	f002 fafc 	bl	80045c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fc8:	003b      	movs	r3, r7
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001fce:	003b      	movs	r3, r7
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	0152      	lsls	r2, r2, #5
 8001fd4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001fd6:	003a      	movs	r2, r7
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_ADC_Init+0xd8>)
 8001fda:	0011      	movs	r1, r2
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f004 f835 	bl	800604c <HAL_ADC_ConfigChannel>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d001      	beq.n	8001fea <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001fe6:	f002 faeb 	bl	80045c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fea:	003b      	movs	r3, r7
 8001fec:	4a09      	ldr	r2, [pc, #36]	; (8002014 <MX_ADC_Init+0xe0>)
 8001fee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ff0:	003a      	movs	r2, r7
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_ADC_Init+0xd8>)
 8001ff4:	0011      	movs	r1, r2
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f004 f828 	bl	800604c <HAL_ADC_ConfigChannel>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d001      	beq.n	8002004 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8002000:	f002 fade 	bl	80045c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000150 	.word	0x20000150
 8002010:	40012400 	.word	0x40012400
 8002014:	04000002 	.word	0x04000002

08002018 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	240c      	movs	r4, #12
 8002022:	193b      	adds	r3, r7, r4
 8002024:	0018      	movs	r0, r3
 8002026:	2314      	movs	r3, #20
 8002028:	001a      	movs	r2, r3
 800202a:	2100      	movs	r1, #0
 800202c:	f008 f9b5 	bl	800a39a <memset>
  if(adcHandle->Instance==ADC1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2e      	ldr	r2, [pc, #184]	; (80020f0 <HAL_ADC_MspInit+0xd8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d155      	bne.n	80020e6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_ADC_MspInit+0xdc>)
 800203c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_ADC_MspInit+0xdc>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0089      	lsls	r1, r1, #2
 8002044:	430a      	orrs	r2, r1
 8002046:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_ADC_MspInit+0xdc>)
 800204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_ADC_MspInit+0xdc>)
 800204e:	2101      	movs	r1, #1
 8002050:	430a      	orrs	r2, r1
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_ADC_MspInit+0xdc>)
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002060:	193b      	adds	r3, r7, r4
 8002062:	2203      	movs	r2, #3
 8002064:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002066:	193b      	adds	r3, r7, r4
 8002068:	2203      	movs	r2, #3
 800206a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	193b      	adds	r3, r7, r4
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	193a      	adds	r2, r7, r4
 8002074:	23a0      	movs	r3, #160	; 0xa0
 8002076:	05db      	lsls	r3, r3, #23
 8002078:	0011      	movs	r1, r2
 800207a:	0018      	movs	r0, r3
 800207c:	f004 fbb0 	bl	80067e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 8002082:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_ADC_MspInit+0xe4>)
 8002084:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 8002094:	2200      	movs	r2, #0
 8002096:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002098:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	0052      	lsls	r2, r2, #1
 80020a4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	00d2      	lsls	r2, r2, #3
 80020ac:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 80020b0:	2220      	movs	r2, #32
 80020b2:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 80020bc:	0018      	movs	r0, r3
 80020be:	f004 fa69 	bl	8006594 <HAL_DMA_Init>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d001      	beq.n	80020ca <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80020c6:	f002 fa7b 	bl	80045c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_ADC_MspInit+0xe0>)
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2101      	movs	r1, #1
 80020da:	200c      	movs	r0, #12
 80020dc:	f004 fa28 	bl	8006530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80020e0:	200c      	movs	r0, #12
 80020e2:	f004 fa3a 	bl	800655a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b009      	add	sp, #36	; 0x24
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	40012400 	.word	0x40012400
 80020f4:	40021000 	.word	0x40021000
 80020f8:	20000108 	.word	0x20000108
 80020fc:	40020008 	.word	0x40020008

08002100 <setup_wifi>:
//Todo check if busy before sending

//TODO - implement OK check + Error Retry

// This function sets the wifi mode to station, sets the AP to connect to,
int setup_wifi(char * ssid, char * password){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]

  //TODO - define error

//  serial_select(WIFI);
  serial_println("AT+CWMODE=1");
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <setup_wifi+0x38>)
 800210c:	0018      	movs	r0, r3
 800210e:	f002 fb05 	bl	800471c <serial_println>
  HAL_Delay(50); //dealy of 50 ms
 8002112:	2032      	movs	r0, #50	; 0x32
 8002114:	f003 fc08 	bl	8005928 <HAL_Delay>
  serial_printf("AT+CWJAP=\"%s\",\"%s\"\n", ssid, password);
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <setup_wifi+0x3c>)
 800211e:	0018      	movs	r0, r3
 8002120:	f002 fb3c 	bl	800479c <serial_printf>
  HAL_Delay(2000);
 8002124:	23fa      	movs	r3, #250	; 0xfa
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	0018      	movs	r0, r3
 800212a:	f003 fbfd 	bl	8005928 <HAL_Delay>
  //TODO wait until OK

  return AT_SUCCESS;
 800212e:	2300      	movs	r3, #0
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	0800a4c8 	.word	0x0800a4c8
 800213c:	0800a4d4 	.word	0x0800a4d4

08002140 <sent_freshbyte_data>:

int sent_freshbyte_data(int temp_F, int humid, int methane){
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b087      	sub	sp, #28
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]

  //TODO - define error

  serial_printf("AT+HTTPCLIENT=3,0,\"http://maker.ifttt.com/trigger/ece477/"
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <sent_freshbyte_data+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	687c      	ldr	r4, [r7, #4]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	68f9      	ldr	r1, [r7, #12]
 8002156:	480b      	ldr	r0, [pc, #44]	; (8002184 <sent_freshbyte_data+0x44>)
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	0023      	movs	r3, r4
 800215c:	f002 fb1e 	bl	800479c <serial_printf>
                "with/key/cRY9n1jJnl-fCLuPYsZZ-8\",\"maker.ifttt.com\",\""
                "/trigger/ece477/with/key/cRY9n1jJnl-fCLuPYsZZ-8\",1,\""
                "value1=%d&value2=%d&value3=%d%%7C%%7C%%7C%d\"\n", temp_F, humid, methane, session_id);
  HAL_Delay(2000);
 8002160:	23fa      	movs	r3, #250	; 0xfa
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	0018      	movs	r0, r3
 8002166:	f003 fbdf 	bl	8005928 <HAL_Delay>
  session_id++;
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <sent_freshbyte_data+0x40>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <sent_freshbyte_data+0x40>)
 8002172:	601a      	str	r2, [r3, #0]

  return AT_SUCCESS;
 8002174:	2300      	movs	r3, #0
}
 8002176:	0018      	movs	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	b005      	add	sp, #20
 800217c:	bd90      	pop	{r4, r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	20000000 	.word	0x20000000
 8002184:	0800a4e8 	.word	0x0800a4e8

08002188 <BQ27441_voltage>:
/*****************************************************************************
 ********************** Battery Characteristics Functions ********************
 *****************************************************************************/
// Reads and returns the battery voltage
uint16_t BQ27441_voltage(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	return BQ27441_readWord(BQ27441_COMMAND_VOLTAGE);
 800218c:	2004      	movs	r0, #4
 800218e:	f000 f91b 	bl	80023c8 <BQ27441_readWord>
 8002192:	0003      	movs	r3, r0
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <BQ27441_current>:

// Reads and returns the specified current measurement
int16_t BQ27441_current(current_measure type)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	0002      	movs	r2, r0
 80021a2:	1dfb      	adds	r3, r7, #7
 80021a4:	701a      	strb	r2, [r3, #0]
	int16_t current = 0;
 80021a6:	230e      	movs	r3, #14
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2200      	movs	r2, #0
 80021ac:	801a      	strh	r2, [r3, #0]
	switch (type)
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d017      	beq.n	80021e6 <BQ27441_current+0x4c>
 80021b6:	dc1f      	bgt.n	80021f8 <BQ27441_current+0x5e>
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <BQ27441_current+0x28>
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d009      	beq.n	80021d4 <BQ27441_current+0x3a>
 80021c0:	e01a      	b.n	80021f8 <BQ27441_current+0x5e>
	{
	case AVG:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_CURRENT);
 80021c2:	2010      	movs	r0, #16
 80021c4:	f000 f900 	bl	80023c8 <BQ27441_readWord>
 80021c8:	0003      	movs	r3, r0
 80021ca:	001a      	movs	r2, r3
 80021cc:	230e      	movs	r3, #14
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	801a      	strh	r2, [r3, #0]
		break;
 80021d2:	e011      	b.n	80021f8 <BQ27441_current+0x5e>
	case STBY:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_STDBY_CURRENT);
 80021d4:	2012      	movs	r0, #18
 80021d6:	f000 f8f7 	bl	80023c8 <BQ27441_readWord>
 80021da:	0003      	movs	r3, r0
 80021dc:	001a      	movs	r2, r3
 80021de:	230e      	movs	r3, #14
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	801a      	strh	r2, [r3, #0]
		break;
 80021e4:	e008      	b.n	80021f8 <BQ27441_current+0x5e>
	case MAX:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_MAX_CURRENT);
 80021e6:	2014      	movs	r0, #20
 80021e8:	f000 f8ee 	bl	80023c8 <BQ27441_readWord>
 80021ec:	0003      	movs	r3, r0
 80021ee:	001a      	movs	r2, r3
 80021f0:	230e      	movs	r3, #14
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	801a      	strh	r2, [r3, #0]
		break;
 80021f6:	46c0      	nop			; (mov r8, r8)
	}

	return current;
 80021f8:	230e      	movs	r3, #14
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}

08002208 <BQ27441_capacity>:

// Reads and returns the specified capacity measurement
uint16_t BQ27441_capacity(capacity_measure type)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	0002      	movs	r2, r0
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	701a      	strb	r2, [r3, #0]
	uint16_t capacity = 0;
 8002214:	230e      	movs	r3, #14
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2200      	movs	r2, #0
 800221a:	801a      	strh	r2, [r3, #0]
	switch (type)
 800221c:	1dfb      	adds	r3, r7, #7
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d845      	bhi.n	80022b0 <BQ27441_capacity+0xa8>
 8002224:	009a      	lsls	r2, r3, #2
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <BQ27441_capacity+0xb8>)
 8002228:	18d3      	adds	r3, r2, r3
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	469f      	mov	pc, r3
	{
	case REMAIN:
		return BQ27441_readWord(BQ27441_COMMAND_REM_CAPACITY);
 800222e:	200c      	movs	r0, #12
 8002230:	f000 f8ca 	bl	80023c8 <BQ27441_readWord>
 8002234:	0003      	movs	r3, r0
 8002236:	e03e      	b.n	80022b6 <BQ27441_capacity+0xae>
		break;
	case FULL:
		return BQ27441_readWord(BQ27441_COMMAND_FULL_CAPACITY);
 8002238:	200e      	movs	r0, #14
 800223a:	f000 f8c5 	bl	80023c8 <BQ27441_readWord>
 800223e:	0003      	movs	r3, r0
 8002240:	e039      	b.n	80022b6 <BQ27441_capacity+0xae>
		break;
	case AVAIL:
		capacity = BQ27441_readWord(BQ27441_COMMAND_NOM_CAPACITY);
 8002242:	230e      	movs	r3, #14
 8002244:	18fc      	adds	r4, r7, r3
 8002246:	2008      	movs	r0, #8
 8002248:	f000 f8be 	bl	80023c8 <BQ27441_readWord>
 800224c:	0003      	movs	r3, r0
 800224e:	8023      	strh	r3, [r4, #0]
		break;
 8002250:	e02e      	b.n	80022b0 <BQ27441_capacity+0xa8>
	case AVAIL_FULL:
		capacity = BQ27441_readWord(BQ27441_COMMAND_AVAIL_CAPACITY);
 8002252:	230e      	movs	r3, #14
 8002254:	18fc      	adds	r4, r7, r3
 8002256:	200a      	movs	r0, #10
 8002258:	f000 f8b6 	bl	80023c8 <BQ27441_readWord>
 800225c:	0003      	movs	r3, r0
 800225e:	8023      	strh	r3, [r4, #0]
		break;
 8002260:	e026      	b.n	80022b0 <BQ27441_capacity+0xa8>
	case REMAIN_F:
		capacity = BQ27441_readWord(BQ27441_COMMAND_REM_CAP_FIL);
 8002262:	230e      	movs	r3, #14
 8002264:	18fc      	adds	r4, r7, r3
 8002266:	202a      	movs	r0, #42	; 0x2a
 8002268:	f000 f8ae 	bl	80023c8 <BQ27441_readWord>
 800226c:	0003      	movs	r3, r0
 800226e:	8023      	strh	r3, [r4, #0]
		break;
 8002270:	e01e      	b.n	80022b0 <BQ27441_capacity+0xa8>
	case REMAIN_UF:
		capacity = BQ27441_readWord(BQ27441_COMMAND_REM_CAP_UNFL);
 8002272:	230e      	movs	r3, #14
 8002274:	18fc      	adds	r4, r7, r3
 8002276:	2028      	movs	r0, #40	; 0x28
 8002278:	f000 f8a6 	bl	80023c8 <BQ27441_readWord>
 800227c:	0003      	movs	r3, r0
 800227e:	8023      	strh	r3, [r4, #0]
		break;
 8002280:	e016      	b.n	80022b0 <BQ27441_capacity+0xa8>
	case FULL_F:
		capacity = BQ27441_readWord(BQ27441_COMMAND_FULL_CAP_FIL);
 8002282:	230e      	movs	r3, #14
 8002284:	18fc      	adds	r4, r7, r3
 8002286:	202e      	movs	r0, #46	; 0x2e
 8002288:	f000 f89e 	bl	80023c8 <BQ27441_readWord>
 800228c:	0003      	movs	r3, r0
 800228e:	8023      	strh	r3, [r4, #0]
		break;
 8002290:	e00e      	b.n	80022b0 <BQ27441_capacity+0xa8>
	case FULL_UF:
		capacity = BQ27441_readWord(BQ27441_COMMAND_FULL_CAP_UNFL);
 8002292:	230e      	movs	r3, #14
 8002294:	18fc      	adds	r4, r7, r3
 8002296:	202c      	movs	r0, #44	; 0x2c
 8002298:	f000 f896 	bl	80023c8 <BQ27441_readWord>
 800229c:	0003      	movs	r3, r0
 800229e:	8023      	strh	r3, [r4, #0]
		break;
 80022a0:	e006      	b.n	80022b0 <BQ27441_capacity+0xa8>
	case DESIGN:
		capacity = BQ27441_readWord(BQ27441_EXTENDED_CAPACITY);
 80022a2:	230e      	movs	r3, #14
 80022a4:	18fc      	adds	r4, r7, r3
 80022a6:	203c      	movs	r0, #60	; 0x3c
 80022a8:	f000 f88e 	bl	80023c8 <BQ27441_readWord>
 80022ac:	0003      	movs	r3, r0
 80022ae:	8023      	strh	r3, [r4, #0]
//		capacity = BQ27441_readWord(0x4A);
	}

	return capacity;
 80022b0:	230e      	movs	r3, #14
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	881b      	ldrh	r3, [r3, #0]
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b005      	add	sp, #20
 80022bc:	bd90      	pop	{r4, r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	0800ad24 	.word	0x0800ad24

080022c4 <BQ27441_power>:

// Reads and returns measured average power
int16_t BQ27441_power(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
 80022c8:	2018      	movs	r0, #24
 80022ca:	f000 f87d 	bl	80023c8 <BQ27441_readWord>
 80022ce:	0003      	movs	r3, r0
 80022d0:	b21b      	sxth	r3, r3
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <BQ27441_soc>:

// Reads and returns specified state of charge measurement
uint16_t BQ27441_soc(soc_measure type)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	0002      	movs	r2, r0
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	701a      	strb	r2, [r3, #0]
	uint16_t socRet = 0;
 80022e4:	230e      	movs	r3, #14
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	801a      	strh	r2, [r3, #0]
	switch (type)
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <BQ27441_soc+0x22>
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d008      	beq.n	800230a <BQ27441_soc+0x32>
 80022f8:	e00f      	b.n	800231a <BQ27441_soc+0x42>
	{
	case FILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 80022fa:	230e      	movs	r3, #14
 80022fc:	18fc      	adds	r4, r7, r3
 80022fe:	201c      	movs	r0, #28
 8002300:	f000 f862 	bl	80023c8 <BQ27441_readWord>
 8002304:	0003      	movs	r3, r0
 8002306:	8023      	strh	r3, [r4, #0]
		break;
 8002308:	e007      	b.n	800231a <BQ27441_soc+0x42>
	case UNFILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 800230a:	230e      	movs	r3, #14
 800230c:	18fc      	adds	r4, r7, r3
 800230e:	2030      	movs	r0, #48	; 0x30
 8002310:	f000 f85a 	bl	80023c8 <BQ27441_readWord>
 8002314:	0003      	movs	r3, r0
 8002316:	8023      	strh	r3, [r4, #0]
		break;
 8002318:	46c0      	nop			; (mov r8, r8)
	}

	return socRet;
 800231a:	230e      	movs	r3, #14
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	881b      	ldrh	r3, [r3, #0]
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b005      	add	sp, #20
 8002326:	bd90      	pop	{r4, r7, pc}

08002328 <BQ27441_soh>:

// Reads and returns specified state of health measurement
uint8_t BQ27441_soh(soh_measure type)
{
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	0002      	movs	r2, r0
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	701a      	strb	r2, [r3, #0]
	uint16_t sohRaw = BQ27441_readWord(BQ27441_COMMAND_SOH);
 8002334:	250e      	movs	r5, #14
 8002336:	197c      	adds	r4, r7, r5
 8002338:	2020      	movs	r0, #32
 800233a:	f000 f845 	bl	80023c8 <BQ27441_readWord>
 800233e:	0003      	movs	r3, r0
 8002340:	8023      	strh	r3, [r4, #0]
	uint8_t sohStatus = sohRaw >> 8;
 8002342:	0029      	movs	r1, r5
 8002344:	187b      	adds	r3, r7, r1
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	b29a      	uxth	r2, r3
 800234c:	230d      	movs	r3, #13
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	701a      	strb	r2, [r3, #0]
	uint8_t sohPercent = sohRaw & 0x00FF;
 8002352:	200c      	movs	r0, #12
 8002354:	183b      	adds	r3, r7, r0
 8002356:	187a      	adds	r2, r7, r1
 8002358:	8812      	ldrh	r2, [r2, #0]
 800235a:	701a      	strb	r2, [r3, #0]

	if (type == PERCENT)
 800235c:	1dfb      	adds	r3, r7, #7
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <BQ27441_soh+0x42>
		return sohPercent;
 8002364:	183b      	adds	r3, r7, r0
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	e002      	b.n	8002370 <BQ27441_soh+0x48>
	else
		return sohStatus;
 800236a:	230d      	movs	r3, #13
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	781b      	ldrb	r3, [r3, #0]
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b004      	add	sp, #16
 8002376:	bdb0      	pop	{r4, r5, r7, pc}

08002378 <BQ27441_temperature>:

// Reads and returns specified temperature measurement
uint16_t BQ27441_temperature(temp_measure type)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	0002      	movs	r2, r0
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	701a      	strb	r2, [r3, #0]
	uint16_t temp = 0;
 8002384:	230e      	movs	r3, #14
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	2200      	movs	r2, #0
 800238a:	801a      	strh	r2, [r3, #0]
	switch (type)
 800238c:	1dfb      	adds	r3, r7, #7
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <BQ27441_temperature+0x22>
 8002394:	2b01      	cmp	r3, #1
 8002396:	d008      	beq.n	80023aa <BQ27441_temperature+0x32>
 8002398:	e00f      	b.n	80023ba <BQ27441_temperature+0x42>
	{
	case BATTERY:
		temp = BQ27441_readWord(BQ27441_COMMAND_TEMP);
 800239a:	230e      	movs	r3, #14
 800239c:	18fc      	adds	r4, r7, r3
 800239e:	2002      	movs	r0, #2
 80023a0:	f000 f812 	bl	80023c8 <BQ27441_readWord>
 80023a4:	0003      	movs	r3, r0
 80023a6:	8023      	strh	r3, [r4, #0]
		break;
 80023a8:	e007      	b.n	80023ba <BQ27441_temperature+0x42>
	case INTERNAL_TEMP:
		temp = BQ27441_readWord(BQ27441_COMMAND_INT_TEMP);
 80023aa:	230e      	movs	r3, #14
 80023ac:	18fc      	adds	r4, r7, r3
 80023ae:	201e      	movs	r0, #30
 80023b0:	f000 f80a 	bl	80023c8 <BQ27441_readWord>
 80023b4:	0003      	movs	r3, r0
 80023b6:	8023      	strh	r3, [r4, #0]
		break;
 80023b8:	46c0      	nop			; (mov r8, r8)
	}
	return temp;
 80023ba:	230e      	movs	r3, #14
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	881b      	ldrh	r3, [r3, #0]
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b005      	add	sp, #20
 80023c6:	bd90      	pop	{r4, r7, pc}

080023c8 <BQ27441_readWord>:
	return BAT_INIT_SUCCESS;
}

// Read a 16-bit command word from the BQ27441-G1A
uint16_t BQ27441_readWord(uint16_t subAddress)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af04      	add	r7, sp, #16
 80023ce:	0002      	movs	r2, r0
 80023d0:	1dbb      	adds	r3, r7, #6
 80023d2:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
//	i2cReadBytes(subAddress, data, 2);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), subAddress, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80023d4:	1dbb      	adds	r3, r7, #6
 80023d6:	881a      	ldrh	r2, [r3, #0]
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <BQ27441_readWord+0x48>)
 80023da:	2301      	movs	r3, #1
 80023dc:	425b      	negs	r3, r3
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	2302      	movs	r3, #2
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	240c      	movs	r4, #12
 80023e6:	193b      	adds	r3, r7, r4
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2301      	movs	r3, #1
 80023ec:	21aa      	movs	r1, #170	; 0xaa
 80023ee:	f004 fd75 	bl	8006edc <HAL_I2C_Mem_Read>
	return ((uint16_t) data[1] << 8) | data[0];
 80023f2:	0021      	movs	r1, r4
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	785b      	ldrb	r3, [r3, #1]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	b21a      	sxth	r2, r3
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b21b      	sxth	r3, r3
 8002402:	4313      	orrs	r3, r2
 8002404:	b21b      	sxth	r3, r3
 8002406:	b29b      	uxth	r3, r3
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b005      	add	sp, #20
 800240e:	bd90      	pop	{r4, r7, pc}
 8002410:	200001c8 	.word	0x200001c8

08002414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <MX_DMA_Init+0x38>)
 800241c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <MX_DMA_Init+0x38>)
 8002420:	2101      	movs	r1, #1
 8002422:	430a      	orrs	r2, r1
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_DMA_Init+0x38>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	2201      	movs	r2, #1
 800242c:	4013      	ands	r3, r2
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	2009      	movs	r0, #9
 8002438:	f004 f87a 	bl	8006530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800243c:	2009      	movs	r0, #9
 800243e:	f004 f88c 	bl	800655a <HAL_NVIC_EnableIRQ>

}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b002      	add	sp, #8
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	40021000 	.word	0x40021000

08002450 <epd_command>:
    @brief This function sends an EPD command with no data
    @param c    The command to send
    @param end  If true, the CS pin will be pulled high following the transaction. Pass true for Adafruit functions that don't define it during call!
    @return     A byte of data read back from the EPD.
*/
uint8_t epd_command(uint8_t c, bool end) {
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af02      	add	r7, sp, #8
 8002456:	0002      	movs	r2, r0
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	1c0a      	adds	r2, r1, #0
 8002460:	701a      	strb	r2, [r3, #0]
    EPD_CS_HIGH;    // Ensure the CS pin is high before starting the transaction
 8002462:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <epd_command+0xc8>)
 8002464:	2201      	movs	r2, #1
 8002466:	2140      	movs	r1, #64	; 0x40
 8002468:	0018      	movs	r0, r3
 800246a:	f004 fb2f 	bl	8006acc <HAL_GPIO_WritePin>
    EPD_DC_LOW;     // Set DC low to indicate that a command is being sent
 800246e:	4b2b      	ldr	r3, [pc, #172]	; (800251c <epd_command+0xcc>)
 8002470:	2200      	movs	r2, #0
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	0018      	movs	r0, r3
 8002476:	f004 fb29 	bl	8006acc <HAL_GPIO_WritePin>
    EPD_CS_LOW;     // Set CS low to indicate the start of the transaction
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <epd_command+0xc8>)
 800247c:	2200      	movs	r2, #0
 800247e:	2140      	movs	r1, #64	; 0x40
 8002480:	0018      	movs	r0, r3
 8002482:	f004 fb23 	bl	8006acc <HAL_GPIO_WritePin>

    uint8_t rxData;
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&EPD_SPI, &c, &rxData, 1, HAL_MAX_DELAY);
 8002486:	2517      	movs	r5, #23
 8002488:	197c      	adds	r4, r7, r5
 800248a:	230f      	movs	r3, #15
 800248c:	18fa      	adds	r2, r7, r3
 800248e:	1df9      	adds	r1, r7, #7
 8002490:	4823      	ldr	r0, [pc, #140]	; (8002520 <epd_command+0xd0>)
 8002492:	2301      	movs	r3, #1
 8002494:	425b      	negs	r3, r3
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2301      	movs	r3, #1
 800249a:	f006 fb85 	bl	8008ba8 <HAL_SPI_TransmitReceive>
 800249e:	0003      	movs	r3, r0
 80024a0:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) {
 80024a2:	197b      	adds	r3, r7, r5
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d024      	beq.n	80024f4 <epd_command+0xa4>
        char *err;
        switch (status) {
 80024aa:	197b      	adds	r3, r7, r5
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d00b      	beq.n	80024ca <epd_command+0x7a>
 80024b2:	dc18      	bgt.n	80024e6 <epd_command+0x96>
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d00f      	beq.n	80024d8 <epd_command+0x88>
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d114      	bne.n	80024e6 <epd_command+0x96>
            case HAL_BUSY:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_BUSY";
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <epd_command+0xd4>)
 80024be:	613b      	str	r3, [r7, #16]
                serial_println(err);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f002 f92a 	bl	800471c <serial_println>
                break;
 80024c8:	e015      	b.n	80024f6 <epd_command+0xa6>
            case HAL_TIMEOUT:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_TIMEOUT";
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <epd_command+0xd8>)
 80024cc:	613b      	str	r3, [r7, #16]
                serial_println(err);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f002 f923 	bl	800471c <serial_println>
                break;
 80024d6:	e00e      	b.n	80024f6 <epd_command+0xa6>
            case HAL_ERROR:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_ERROR";
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <epd_command+0xdc>)
 80024da:	613b      	str	r3, [r7, #16]
                serial_println(err);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	0018      	movs	r0, r3
 80024e0:	f002 f91c 	bl	800471c <serial_println>
                break;
 80024e4:	e007      	b.n	80024f6 <epd_command+0xa6>
            default:
                err = "EPD_COMMAND: FAILED TO TX/RX - UNKNOWN ERROR";
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <epd_command+0xe0>)
 80024e8:	613b      	str	r3, [r7, #16]
                serial_println(err);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f002 f915 	bl	800471c <serial_println>
                break;
 80024f2:	e000      	b.n	80024f6 <epd_command+0xa6>
        }
    }
 80024f4:	46c0      	nop			; (mov r8, r8)

    if (end) {
 80024f6:	1dbb      	adds	r3, r7, #6
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <epd_command+0xba>
        EPD_CS_HIGH;
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <epd_command+0xc8>)
 8002500:	2201      	movs	r2, #1
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	0018      	movs	r0, r3
 8002506:	f004 fae1 	bl	8006acc <HAL_GPIO_WritePin>
    }

    return rxData;
 800250a:	230f      	movs	r3, #15
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	781b      	ldrb	r3, [r3, #0]
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	b006      	add	sp, #24
 8002516:	bdb0      	pop	{r4, r5, r7, pc}
 8002518:	50000400 	.word	0x50000400
 800251c:	50000800 	.word	0x50000800
 8002520:	200002a4 	.word	0x200002a4
 8002524:	0800a654 	.word	0x0800a654
 8002528:	0800a67c 	.word	0x0800a67c
 800252c:	0800a6a8 	.word	0x0800a6a8
 8002530:	0800a6d4 	.word	0x0800a6d4

08002534 <epd_data>:
/*!
    @brief This function sends data to the EPD for an ONGOING transaction
    @param buf the buffer of data to send
    @param len the length of the data buffer
*/
void epd_data(const uint8_t *buf, uint16_t len) {
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	000a      	movs	r2, r1
 800253e:	1cbb      	adds	r3, r7, #2
 8002540:	801a      	strh	r2, [r3, #0]
    EPD_DC_HIGH;
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <epd_data+0x40>)
 8002544:	2201      	movs	r2, #1
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	0018      	movs	r0, r3
 800254a:	f004 fabf 	bl	8006acc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&EPD_SPI, buf, len, HAL_MAX_DELAY);
 800254e:	2301      	movs	r3, #1
 8002550:	425c      	negs	r4, r3
 8002552:	1cbb      	adds	r3, r7, #2
 8002554:	881a      	ldrh	r2, [r3, #0]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4807      	ldr	r0, [pc, #28]	; (8002578 <epd_data+0x44>)
 800255a:	0023      	movs	r3, r4
 800255c:	f006 f8a8 	bl	80086b0 <HAL_SPI_Transmit>
    EPD_CS_HIGH;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <epd_data+0x48>)
 8002562:	2201      	movs	r2, #1
 8002564:	2140      	movs	r1, #64	; 0x40
 8002566:	0018      	movs	r0, r3
 8002568:	f004 fab0 	bl	8006acc <HAL_GPIO_WritePin>
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b003      	add	sp, #12
 8002572:	bd90      	pop	{r4, r7, pc}
 8002574:	50000800 	.word	0x50000800
 8002578:	200002a4 	.word	0x200002a4
 800257c:	50000400 	.word	0x50000400

08002580 <epd_pCommand>:
    @brief This function sends an EPD command with data
    @param c the command to send
    @param buf the buffer of data to send
    @param len the length of the data buffer
*/
void epd_pCommand(uint8_t c, const uint8_t *buf, uint16_t len) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6039      	str	r1, [r7, #0]
 8002588:	0011      	movs	r1, r2
 800258a:	1dfb      	adds	r3, r7, #7
 800258c:	1c02      	adds	r2, r0, #0
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	1c0a      	adds	r2, r1, #0
 8002594:	801a      	strh	r2, [r3, #0]
    epd_command(c, false);
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2100      	movs	r1, #0
 800259c:	0018      	movs	r0, r3
 800259e:	f7ff ff57 	bl	8002450 <epd_command>
    epd_data(buf, len);
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	0011      	movs	r1, r2
 80025aa:	0018      	movs	r0, r3
 80025ac:	f7ff ffc2 	bl	8002534 <epd_data>
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <epd_commandList>:

/*!
 * @brief This function is used by epd_powerUp() to send over the display initialization code
 * @param init_code
 */
void epd_commandList(const uint8_t *init_code) {
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b095      	sub	sp, #84	; 0x54
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
    uint8_t buf[64];

    while (*init_code != 0xFE) {
 80025c0:	e03d      	b.n	800263e <epd_commandList+0x86>
        uint8_t cmd = *init_code;
 80025c2:	214b      	movs	r1, #75	; 0x4b
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	7812      	ldrb	r2, [r2, #0]
 80025ca:	701a      	strb	r2, [r3, #0]
        init_code++;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3301      	adds	r3, #1
 80025d0:	607b      	str	r3, [r7, #4]
        uint8_t num_args = *init_code;
 80025d2:	244a      	movs	r4, #74	; 0x4a
 80025d4:	193b      	adds	r3, r7, r4
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	701a      	strb	r2, [r3, #0]
        init_code++;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3301      	adds	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
        if (cmd == 0xFF) {
 80025e2:	187b      	adds	r3, r7, r1
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2bff      	cmp	r3, #255	; 0xff
 80025e8:	d107      	bne.n	80025fa <epd_commandList+0x42>
            epd_busy();
 80025ea:	f000 f836 	bl	800265a <epd_busy>
            HAL_Delay(num_args);
 80025ee:	193b      	adds	r3, r7, r4
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f003 f998 	bl	8005928 <HAL_Delay>
            continue;
 80025f8:	e021      	b.n	800263e <epd_commandList+0x86>
//            while (1) {
//                HAL_Delay(HAL_MAX_DELAY);
//            }
//        }

        for (int i = 0; i < num_args; i++) {
 80025fa:	2300      	movs	r3, #0
 80025fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025fe:	e00d      	b.n	800261c <epd_commandList+0x64>
            buf[i] = *init_code;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7819      	ldrb	r1, [r3, #0]
 8002604:	2308      	movs	r3, #8
 8002606:	18fa      	adds	r2, r7, r3
 8002608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260a:	18d3      	adds	r3, r2, r3
 800260c:	1c0a      	adds	r2, r1, #0
 800260e:	701a      	strb	r2, [r3, #0]
            init_code++;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3301      	adds	r3, #1
 8002614:	607b      	str	r3, [r7, #4]
        for (int i = 0; i < num_args; i++) {
 8002616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002618:	3301      	adds	r3, #1
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261c:	214a      	movs	r1, #74	; 0x4a
 800261e:	187b      	adds	r3, r7, r1
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002624:	429a      	cmp	r2, r3
 8002626:	dbeb      	blt.n	8002600 <epd_commandList+0x48>
        }

        epd_pCommand(cmd, buf, num_args);
 8002628:	187b      	adds	r3, r7, r1
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b29a      	uxth	r2, r3
 800262e:	2308      	movs	r3, #8
 8002630:	18f9      	adds	r1, r7, r3
 8002632:	234b      	movs	r3, #75	; 0x4b
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff ffa1 	bl	8002580 <epd_pCommand>
    while (*init_code != 0xFE) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2bfe      	cmp	r3, #254	; 0xfe
 8002644:	d1bd      	bne.n	80025c2 <epd_commandList+0xa>
    }
}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	b015      	add	sp, #84	; 0x54
 800264e:	bd90      	pop	{r4, r7, pc}

08002650 <epd_reset>:

/*!
 * @brief This function performs a hardware reset on the display if EPD_NRST_PIN is defined
 */
void epd_reset() {
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
        HAL_Delay(10);
        HAL_GPIO_WritePin(EPD_NRST_GPIO_Port, EPD_NRST_Pin, GPIO_PIN_SET);
        HAL_Delay(10);
    }
#endif
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <epd_busy>:

/*!
 * @brief If EPD_BUSY_Pin is defined, this function blocks execution while the EPD is busy. Else, it simply waits.
 */
void epd_busy() {
 800265a:	b580      	push	{r7, lr}
 800265c:	af00      	add	r7, sp, #0
        }
    } else {
        HAL_Delay(BUSY_WAIT);
    }
#else
    HAL_Delay(BUSY_WAIT);
 800265e:	23fa      	movs	r3, #250	; 0xfa
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	0018      	movs	r0, r3
 8002664:	f003 f960 	bl	8005928 <HAL_Delay>
#endif
}
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <epd_update>:

/*!
 * @brief This function sends the display refresh command to the EPD
 */
void epd_update() {
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
    epd_command(IL91874_DISPLAY_REFRESH, true);
 8002674:	2101      	movs	r1, #1
 8002676:	2012      	movs	r0, #18
 8002678:	f7ff feea 	bl	8002450 <epd_command>
    HAL_Delay(100);
 800267c:	2064      	movs	r0, #100	; 0x64
 800267e:	f003 f953 	bl	8005928 <HAL_Delay>
    epd_busy();
 8002682:	f7ff ffea 	bl	800265a <epd_busy>
    if (!use_busy) {
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <epd_update+0x34>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2201      	movs	r2, #1
 800268c:	4053      	eors	r3, r2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <epd_update+0x2c>
        HAL_Delay(REFRESH_WAIT);
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <epd_update+0x38>)
 8002696:	0018      	movs	r0, r3
 8002698:	f003 f946 	bl	8005928 <HAL_Delay>
    }
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	200000ad 	.word	0x200000ad
 80026a8:	000032c8 	.word	0x000032c8

080026ac <epd_powerUp>:

/*!
 * @brief This function performs the EPD power on sequence.
 */
void epd_powerUp() {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
    uint8_t buf[5];

    epd_reset();  // TODO: Implement this later for future use. Would be helpful to have.
 80026b2:	f7ff ffcd 	bl	8002650 <epd_reset>
    HAL_Delay(200);
 80026b6:	20c8      	movs	r0, #200	; 0xc8
 80026b8:	f003 f936 	bl	8005928 <HAL_Delay>
    const uint8_t *init_code = epd_init_code;
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <epd_powerUp+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]

    if (init_code != NULL) {
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01e      	beq.n	8002706 <epd_powerUp+0x5a>
      epd_commandList(init_code);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7ff ff74 	bl	80025b8 <epd_commandList>

      buf[0] = (EPD_HEIGHT >> 8) & 0xFF;
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
      buf[1] = EPD_HEIGHT & 0xFF;
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	22b0      	movs	r2, #176	; 0xb0
 80026da:	705a      	strb	r2, [r3, #1]
      buf[2] = (EPD_WIDTH >> 8) & 0xFF;
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2201      	movs	r2, #1
 80026e0:	709a      	strb	r2, [r3, #2]
      buf[3] = EPD_WIDTH & 0xFF;
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2208      	movs	r2, #8
 80026e6:	70da      	strb	r2, [r3, #3]
      epd_pCommand(IL91874_RESOLUTION, buf, 4);
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	2204      	movs	r2, #4
 80026ec:	0019      	movs	r1, r3
 80026ee:	2061      	movs	r0, #97	; 0x61
 80026f0:	f7ff ff46 	bl	8002580 <epd_pCommand>

      buf[0] = 0x00;
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
      epd_pCommand(IL91874_PDRF, buf, 1);
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2201      	movs	r2, #1
 80026fe:	0019      	movs	r1, r3
 8002700:	2016      	movs	r0, #22
 8002702:	f7ff ff3d 	bl	8002580 <epd_pCommand>
    }
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b004      	add	sp, #16
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	200000b4 	.word	0x200000b4

08002714 <epd_powerDown>:

/*!
 * @brief This function performs the EPD power down sequence.
 *          If EPD_NRST_Pin is defined, the EPD will be put in a deep sleep mode to further conserve power.
 */
void epd_powerDown() {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
    uint8_t buf[1];

    buf[0] = 0xF7;
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	22f7      	movs	r2, #247	; 0xf7
 800271e:	701a      	strb	r2, [r3, #0]
    epd_pCommand(IL91874_CDI, buf, 1);
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2201      	movs	r2, #1
 8002724:	0019      	movs	r1, r3
 8002726:	2050      	movs	r0, #80	; 0x50
 8002728:	f7ff ff2a 	bl	8002580 <epd_pCommand>

    // power off
    epd_command(IL91874_POWER_OFF, true);
 800272c:	2101      	movs	r1, #1
 800272e:	2002      	movs	r0, #2
 8002730:	f7ff fe8e 	bl	8002450 <epd_command>
    epd_busy();
 8002734:	f7ff ff91 	bl	800265a <epd_busy>

    // Only deep sleep if we can get out of it
    if (use_nrst) {
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <epd_powerDown+0x48>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <epd_powerDown+0x3e>
        buf[0] = 0xA5;
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	22a5      	movs	r2, #165	; 0xa5
 8002744:	701a      	strb	r2, [r3, #0]
        epd_pCommand(IL91874_DEEP_SLEEP, buf, 1);
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2201      	movs	r2, #1
 800274a:	0019      	movs	r1, r3
 800274c:	2007      	movs	r0, #7
 800274e:	f7ff ff17 	bl	8002580 <epd_pCommand>
    }
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	200000ac 	.word	0x200000ac

08002760 <epd_writeRAMcommand>:
/*!
 * @brief This function sends the relevant display draw command to either draw in B/W or Color
 * @param index     Set to 0 for black and white drawing. Set to 1 for color drawing.
 * @return          A byte of data from the EPD.
 */
uint8_t epd_writeRAMcommand(uint8_t index) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	0002      	movs	r2, r0
 8002768:	1dfb      	adds	r3, r7, #7
 800276a:	701a      	strb	r2, [r3, #0]
    if (index == 0) {
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <epd_writeRAMcommand+0x20>
        return epd_command(EPD_RAM_BW, false);
 8002774:	2100      	movs	r1, #0
 8002776:	2010      	movs	r0, #16
 8002778:	f7ff fe6a 	bl	8002450 <epd_command>
 800277c:	0003      	movs	r3, r0
 800277e:	e00a      	b.n	8002796 <epd_writeRAMcommand+0x36>
    }
    if (index == 1) {
 8002780:	1dfb      	adds	r3, r7, #7
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <epd_writeRAMcommand+0x34>
        return epd_command(EPD_RAM_RED, false);
 8002788:	2100      	movs	r1, #0
 800278a:	2013      	movs	r0, #19
 800278c:	f7ff fe60 	bl	8002450 <epd_command>
 8002790:	0003      	movs	r3, r0
 8002792:	e000      	b.n	8002796 <epd_writeRAMcommand+0x36>
    }

    return 0;
 8002794:	2300      	movs	r3, #0
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b002      	add	sp, #8
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <set_black_buffer>:
 * @brief This function sets the global variables for black buffer. Can be used to swap buffers b/t colors.
 *          NOTE: Ability to swap buffers requires that EPD_USE_COLOR be defined.
 * @param index     The buffer to select for black.
 * @param inverted  Whether or not to treat the colors in the buffer as inverted.
 */
void set_black_buffer(int8_t index, bool inverted) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	0002      	movs	r2, r0
 80027a8:	1dfb      	adds	r3, r7, #7
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	1dbb      	adds	r3, r7, #6
 80027ae:	1c0a      	adds	r2, r1, #0
 80027b0:	701a      	strb	r2, [r3, #0]
    if (index == 0) {
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b25b      	sxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10c      	bne.n	80027d6 <set_black_buffer+0x36>
        if (use_sram) {
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <set_black_buffer+0x48>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <set_black_buffer+0x2e>
            black_buffer_addr = buffer1_addr;
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <set_black_buffer+0x4c>)
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <set_black_buffer+0x50>)
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e003      	b.n	80027d6 <set_black_buffer+0x36>
        } else {
            black_buffer = buffer1;
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <set_black_buffer+0x54>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <set_black_buffer+0x58>)
 80027d4:	601a      	str	r2, [r3, #0]
        } else {
            black_buffer = buffer2;
        }
    }
#endif
    black_buffer_inverted = inverted;
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <set_black_buffer+0x5c>)
 80027d8:	1dba      	adds	r2, r7, #6
 80027da:	7812      	ldrb	r2, [r2, #0]
 80027dc:	701a      	strb	r2, [r3, #0]
}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b002      	add	sp, #8
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	20000004 	.word	0x20000004
 80027ec:	200001ae 	.word	0x200001ae
 80027f0:	200001ac 	.word	0x200001ac
 80027f4:	200001b4 	.word	0x200001b4
 80027f8:	200001b8 	.word	0x200001b8
 80027fc:	200000af 	.word	0x200000af

08002800 <epd_init>:

/*!
 * @brief This function performs the initialization sequence for the EPD.
 * @param sram_enabled  A boolean that indicates whether or not the use the EPD's external SRAM module.
 */
void epd_init(bool sram_enabled) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	0002      	movs	r2, r0
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	701a      	strb	r2, [r3, #0]
    buffer1_size = ((uint32_t) EPD_WIDTH * (uint32_t) EPD_HEIGHT) / 8;  // Calculate the (first) buffer's size
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <epd_init+0xbc>)
 800280e:	4a2c      	ldr	r2, [pc, #176]	; (80028c0 <epd_init+0xc0>)
 8002810:	601a      	str	r2, [r3, #0]
    use_sram = sram_enabled;                                            // Set the SRAM usage flag
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <epd_init+0xc4>)
 8002814:	1dfa      	adds	r2, r7, #7
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	701a      	strb	r2, [r3, #0]
    } else {                                        // Set up buffers for MCU RAM usage
        buffer1 = (uint8_t *) malloc(buffer1_size); // First buffer's address
        buffer2 = (uint8_t *) malloc(buffer2_size); // Second buffer's address
    }
#else
    if (use_sram) {         // Set up the buffer for SRAM usage
 800281a:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <epd_init+0xc4>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d006      	beq.n	8002830 <epd_init+0x30>
        buffer1_addr = 0;   // The buffer's address
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <epd_init+0xc8>)
 8002824:	2200      	movs	r2, #0
 8002826:	801a      	strh	r2, [r3, #0]
        buffer1 = NULL;     // Set MCU RAM buffer pointer to NULL
 8002828:	4b28      	ldr	r3, [pc, #160]	; (80028cc <epd_init+0xcc>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e008      	b.n	8002842 <epd_init+0x42>
    } else {                                        // Set up buffer for MCU RAM usage
        buffer1 = (uint8_t *) malloc(buffer1_size); // The buffer's address
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <epd_init+0xbc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0018      	movs	r0, r3
 8002836:	f007 fd9d 	bl	800a374 <malloc>
 800283a:	0003      	movs	r3, r0
 800283c:	001a      	movs	r2, r3
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <epd_init+0xcc>)
 8002840:	601a      	str	r2, [r3, #0]
    }
#endif

    single_byte_tx = true;  // Seems like this EPD requires CS to go high b/t each byte, ergo single byte transactions
 8002842:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <epd_init+0xd0>)
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]

    if (use_sram) { // If using SRAM, set the SRAM module to run in sequential mode
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <epd_init+0xc4>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <epd_init+0x5a>
        sram_write8(0, K640_SEQUENTIAL_MODE, MCPSRAM_WRSR);
 8002850:	2201      	movs	r2, #1
 8002852:	2140      	movs	r1, #64	; 0x40
 8002854:	2000      	movs	r0, #0
 8002856:	f002 f9da 	bl	8004c0e <sram_write8>
    }

    EPD_CS_HIGH;                                // Make sure CS starts high.
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <epd_init+0xd4>)
 800285c:	2201      	movs	r2, #1
 800285e:	2140      	movs	r1, #64	; 0x40
 8002860:	0018      	movs	r0, r3
 8002862:	f004 f933 	bl	8006acc <HAL_GPIO_WritePin>
    epd_reset();                                // reset the display, if at all possible.
 8002866:	f7ff fef3 	bl	8002650 <epd_reset>
    epd_powerDown();                            // Turn off the display.
 800286a:	f7ff ff53 	bl	8002714 <epd_powerDown>
    epd_init_code = ti_270c44_tri_init_code;    // Set the pointer to the correct initialization code.
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <epd_init+0xd8>)
 8002870:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <epd_init+0xdc>)
 8002872:	601a      	str	r2, [r3, #0]

    // Setup the black and color buffers to buffer1 and buffer2 respectively
    set_black_buffer(0, false);
 8002874:	2100      	movs	r1, #0
 8002876:	2000      	movs	r0, #0
 8002878:	f7ff ff92 	bl	80027a0 <set_black_buffer>
#ifdef EPD_USE_COLOR
    set_color_buffer(1, false);
#endif

    // Initialize layer_colors[] LUT
    layer_colors[EPD_WHITE] = 0b00;
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <epd_init+0xe0>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
    layer_colors[EPD_BLACK] = 0b01;
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <epd_init+0xe0>)
 8002884:	2201      	movs	r2, #1
 8002886:	705a      	strb	r2, [r3, #1]
    layer_colors[EPD_RED] = 0b10;
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <epd_init+0xe0>)
 800288a:	2202      	movs	r2, #2
 800288c:	709a      	strb	r2, [r3, #2]
    layer_colors[EPD_GRAY] = 0b10;
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <epd_init+0xe0>)
 8002890:	2202      	movs	r2, #2
 8002892:	70da      	strb	r2, [r3, #3]
    layer_colors[EPD_LIGHT] = 0b00;
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <epd_init+0xe0>)
 8002896:	2200      	movs	r2, #0
 8002898:	715a      	strb	r2, [r3, #5]
    layer_colors[EPD_DARK] = 0b01;
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <epd_init+0xe0>)
 800289c:	2201      	movs	r2, #1
 800289e:	711a      	strb	r2, [r3, #4]

    // Set the display width, height, and rotation to their default values.
    width = EPD_WIDTH;
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <epd_init+0xe4>)
 80028a2:	2284      	movs	r2, #132	; 0x84
 80028a4:	0052      	lsls	r2, r2, #1
 80028a6:	801a      	strh	r2, [r3, #0]
    height = EPD_HEIGHT;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <epd_init+0xe8>)
 80028aa:	22b0      	movs	r2, #176	; 0xb0
 80028ac:	801a      	strh	r2, [r3, #0]
    rotation = 2;           // Set rotation to 2 since it matches the push-buttons on the shield
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <epd_init+0xec>)
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b002      	add	sp, #8
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	200001b0 	.word	0x200001b0
 80028c0:	000016b0 	.word	0x000016b0
 80028c4:	20000004 	.word	0x20000004
 80028c8:	200001ae 	.word	0x200001ae
 80028cc:	200001b4 	.word	0x200001b4
 80028d0:	200000ae 	.word	0x200000ae
 80028d4:	50000400 	.word	0x50000400
 80028d8:	200000b4 	.word	0x200000b4
 80028dc:	0800ad48 	.word	0x0800ad48
 80028e0:	200001bc 	.word	0x200001bc
 80028e4:	200001c4 	.word	0x200001c4
 80028e8:	200001c2 	.word	0x200001c2
 80028ec:	20000005 	.word	0x20000005

080028f0 <clear_buffer>:

/*!
 * @brief This function clears the display buffer(s)
 */
void clear_buffer() {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
    if (use_sram) {
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <clear_buffer+0x74>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d017      	beq.n	800292c <clear_buffer+0x3c>
        if (black_buffer_inverted) {
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <clear_buffer+0x78>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <clear_buffer+0x28>
            sram_erase(black_buffer_addr, buffer1_size, 0xFF);
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <clear_buffer+0x7c>)
 8002906:	8818      	ldrh	r0, [r3, #0]
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <clear_buffer+0x80>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	22ff      	movs	r2, #255	; 0xff
 8002910:	0019      	movs	r1, r3
 8002912:	f002 f999 	bl	8004c48 <sram_erase>
                memset(color_buffer, 0x00, buffer2_size);
            }
        }
#endif
    }
}
 8002916:	e022      	b.n	800295e <clear_buffer+0x6e>
            sram_erase(black_buffer_addr, buffer1_size, 0x00);
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <clear_buffer+0x7c>)
 800291a:	8818      	ldrh	r0, [r3, #0]
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <clear_buffer+0x80>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	2200      	movs	r2, #0
 8002924:	0019      	movs	r1, r3
 8002926:	f002 f98f 	bl	8004c48 <sram_erase>
}
 800292a:	e018      	b.n	800295e <clear_buffer+0x6e>
        if (black_buffer) {
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <clear_buffer+0x84>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d014      	beq.n	800295e <clear_buffer+0x6e>
            if (black_buffer_inverted) {
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <clear_buffer+0x78>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <clear_buffer+0x5e>
                memset(black_buffer, 0xFF, buffer1_size);
 800293c:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <clear_buffer+0x84>)
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <clear_buffer+0x80>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	001a      	movs	r2, r3
 8002946:	21ff      	movs	r1, #255	; 0xff
 8002948:	f007 fd27 	bl	800a39a <memset>
}
 800294c:	e007      	b.n	800295e <clear_buffer+0x6e>
                memset(black_buffer, 0x00, buffer1_size);
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <clear_buffer+0x84>)
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <clear_buffer+0x80>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	001a      	movs	r2, r3
 8002958:	2100      	movs	r1, #0
 800295a:	f007 fd1e 	bl	800a39a <memset>
}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000004 	.word	0x20000004
 8002968:	200000af 	.word	0x200000af
 800296c:	200001ac 	.word	0x200001ac
 8002970:	200001b0 	.word	0x200001b0
 8002974:	200001b8 	.word	0x200001b8

08002978 <spi_transfer>:
 * @brief This is a helper function for write_SRAM_to_epd().
 *          It transfers a byte to the EPD and reads a byte from the external SRAM
 * @param d     The byte to send to the EPD.
 * @return      The next byte to send to the EPD.
 */
uint8_t spi_transfer(uint8_t d) {
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b087      	sub	sp, #28
 800297c:	af02      	add	r7, sp, #8
 800297e:	0002      	movs	r2, r0
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	701a      	strb	r2, [r3, #0]
    uint8_t b[1] = {0x00};
 8002984:	240c      	movs	r4, #12
 8002986:	193b      	adds	r3, r7, r4
 8002988:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <spi_transfer+0x70>)
 800298a:	7812      	ldrb	r2, [r2, #0]
 800298c:	701a      	strb	r2, [r3, #0]
    if (single_byte_tx) {
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <spi_transfer+0x74>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d017      	beq.n	80029c6 <spi_transfer+0x4e>
        EPD_CS_LOW;
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <spi_transfer+0x78>)
 8002998:	2200      	movs	r2, #0
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	0018      	movs	r0, r3
 800299e:	f004 f895 	bl	8006acc <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&EPD_SPI, &d, b, 1, HAL_MAX_DELAY);
 80029a2:	193a      	adds	r2, r7, r4
 80029a4:	1df9      	adds	r1, r7, #7
 80029a6:	4813      	ldr	r0, [pc, #76]	; (80029f4 <spi_transfer+0x7c>)
 80029a8:	2301      	movs	r3, #1
 80029aa:	425b      	negs	r3, r3
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	f006 f8fa 	bl	8008ba8 <HAL_SPI_TransmitReceive>
        EPD_CS_HIGH;
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <spi_transfer+0x78>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	2140      	movs	r1, #64	; 0x40
 80029ba:	0018      	movs	r0, r3
 80029bc:	f004 f886 	bl	8006acc <HAL_GPIO_WritePin>
        return b[0];
 80029c0:	193b      	adds	r3, r7, r4
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	e00b      	b.n	80029de <spi_transfer+0x66>
    } else {
        HAL_SPI_TransmitReceive(&EPD_SPI, &d, b, 1, HAL_MAX_DELAY);
 80029c6:	240c      	movs	r4, #12
 80029c8:	193a      	adds	r2, r7, r4
 80029ca:	1df9      	adds	r1, r7, #7
 80029cc:	4809      	ldr	r0, [pc, #36]	; (80029f4 <spi_transfer+0x7c>)
 80029ce:	2301      	movs	r3, #1
 80029d0:	425b      	negs	r3, r3
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2301      	movs	r3, #1
 80029d6:	f006 f8e7 	bl	8008ba8 <HAL_SPI_TransmitReceive>
        return b[0];
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	781b      	ldrb	r3, [r3, #0]
    }
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b005      	add	sp, #20
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	0800a704 	.word	0x0800a704
 80029ec:	200000ae 	.word	0x200000ae
 80029f0:	50000400 	.word	0x50000400
 80029f4:	200002a4 	.word	0x200002a4

080029f8 <write_SRAM_to_epd>:
 * @param sram_addr     The starting address of the buffer in SRAM.
 * @param buffer_size   The size of the buffer.
 * @param epd_location  The EPD location to write to. 0 writes to black, 1 writes to color.
 * @param invert        Whether or not to invert the image.
 */
void write_SRAM_to_epd(uint16_t sram_addr, uint32_t buffer_size, uint8_t epd_location, bool invert) {
 80029f8:	b5b0      	push	{r4, r5, r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	0004      	movs	r4, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	0010      	movs	r0, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	1dbb      	adds	r3, r7, #6
 8002a08:	1c22      	adds	r2, r4, #0
 8002a0a:	801a      	strh	r2, [r3, #0]
 8002a0c:	1d7b      	adds	r3, r7, #5
 8002a0e:	1c02      	adds	r2, r0, #0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	1c0a      	adds	r2, r1, #0
 8002a16:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    sram_csLow();
 8002a18:	f001 fffa 	bl	8004a10 <sram_csLow>
    // send read command
    spi_transfer(MCPSRAM_READ);
 8002a1c:	2003      	movs	r0, #3
 8002a1e:	f7ff ffab 	bl	8002978 <spi_transfer>
    // send address
    spi_transfer(sram_addr >> 8);
 8002a22:	1dbb      	adds	r3, r7, #6
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff ffa3 	bl	8002978 <spi_transfer>
    spi_transfer(sram_addr & 0xFF);
 8002a32:	1dbb      	adds	r3, r7, #6
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7ff ff9d 	bl	8002978 <spi_transfer>

    // first data byte from SRAM will be transferred in at the same time as the EPD command is transferred out
    // note: calling epd_writeRAMcommand will start an SPI tx with the EPD
    c = epd_writeRAMcommand(epd_location);
 8002a3e:	230f      	movs	r3, #15
 8002a40:	18fc      	adds	r4, r7, r3
 8002a42:	1d7b      	adds	r3, r7, #5
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7ff fe8a 	bl	8002760 <epd_writeRAMcommand>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	7023      	strb	r3, [r4, #0]

    EPD_DC_HIGH;
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <write_SRAM_to_epd+0xe4>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	0018      	movs	r0, r3
 8002a58:	f004 f838 	bl	8006acc <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < buffer_size; i++) {
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	e02c      	b.n	8002abc <write_SRAM_to_epd+0xc4>
        c = (invert) ? ~c : c;  // Invert the data if need be
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <write_SRAM_to_epd+0x7e>
 8002a6a:	230f      	movs	r3, #15
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e002      	b.n	8002a7c <write_SRAM_to_epd+0x84>
 8002a76:	230f      	movs	r3, #15
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	250f      	movs	r5, #15
 8002a7e:	197a      	adds	r2, r7, r5
 8002a80:	7013      	strb	r3, [r2, #0]
        c = spi_transfer(c);    // Tx the current byte and Rx the next
 8002a82:	197c      	adds	r4, r7, r5
 8002a84:	197b      	adds	r3, r7, r5
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff ff75 	bl	8002978 <spi_transfer>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	7023      	strb	r3, [r4, #0]

        serial_printf("0x%x, ", c);
 8002a92:	197b      	adds	r3, r7, r5
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <write_SRAM_to_epd+0xe8>)
 8002a98:	0011      	movs	r1, r2
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f001 fe7e 	bl	800479c <serial_printf>
        if (i % 32 == 31) {
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	221f      	movs	r2, #31
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b1f      	cmp	r3, #31
 8002aa8:	d105      	bne.n	8002ab6 <write_SRAM_to_epd+0xbe>
            serial_printf("\n$%x: ", i);
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <write_SRAM_to_epd+0xec>)
 8002aae:	0011      	movs	r1, r2
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f001 fe73 	bl	800479c <serial_printf>
    for (uint32_t i = 0; i < buffer_size; i++) {
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3ce      	bcc.n	8002a62 <write_SRAM_to_epd+0x6a>
        }
    }
    EPD_CS_HIGH;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <write_SRAM_to_epd+0xf0>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2140      	movs	r1, #64	; 0x40
 8002aca:	0018      	movs	r0, r3
 8002acc:	f003 fffe 	bl	8006acc <HAL_GPIO_WritePin>
    sram_csHigh();
 8002ad0:	f001 ff90 	bl	80049f4 <sram_csHigh>
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b004      	add	sp, #16
 8002ada:	bdb0      	pop	{r4, r5, r7, pc}
 8002adc:	50000800 	.word	0x50000800
 8002ae0:	0800a708 	.word	0x0800a708
 8002ae4:	0800a710 	.word	0x0800a710
 8002ae8:	50000400 	.word	0x50000400

08002aec <write_RAM_to_epd>:
 * @param frame_buffer  The display buffer to transfer to the EPD.
 * @param buffer_size   The size of the display buffer.
 * @param epd_location  The EPD location to write to. 0 writes to black, 1 writes to color.
 * @param invert        Whether or not to invert the image.
 */
void write_RAM_to_epd(uint8_t *frame_buffer, uint32_t buffer_size, uint8_t epd_location, bool invert) {
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	0019      	movs	r1, r3
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	1dbb      	adds	r3, r7, #6
 8002afe:	1c0a      	adds	r2, r1, #0
 8002b00:	701a      	strb	r2, [r3, #0]
    epd_writeRAMcommand(epd_location);
 8002b02:	1dfb      	adds	r3, r7, #7
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7ff fe2a 	bl	8002760 <epd_writeRAMcommand>
//    serial_printf("Writing from RAM[0x%x]: \n", &frame_buffer);
//    HAL_Delay(10);
    EPD_DC_HIGH;
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <write_RAM_to_epd+0xb0>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	0018      	movs	r0, r3
 8002b14:	f003 ffda 	bl	8006acc <HAL_GPIO_WritePin>
//    HAL_Delay(10);
    for (uint32_t i = 0; i < buffer_size; i++) {
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	e02d      	b.n	8002b7a <write_RAM_to_epd+0x8e>
        uint8_t d = invert ? ~frame_buffer[i] : frame_buffer[i];
 8002b1e:	1dbb      	adds	r3, r7, #6
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <write_RAM_to_epd+0x48>
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	18d3      	adds	r3, r2, r3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e003      	b.n	8002b3c <write_RAM_to_epd+0x50>
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	18d3      	adds	r3, r2, r3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2413      	movs	r4, #19
 8002b3e:	193a      	adds	r2, r7, r4
 8002b40:	7013      	strb	r3, [r2, #0]
        EPD_CS_LOW;
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <write_RAM_to_epd+0xb4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	2140      	movs	r1, #64	; 0x40
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f003 ffbf 	bl	8006acc <HAL_GPIO_WritePin>
        HAL_Delay(5);
 8002b4e:	2005      	movs	r0, #5
 8002b50:	f002 feea 	bl	8005928 <HAL_Delay>
        HAL_SPI_Transmit(&EPD_SPI, &d, 1, HAL_MAX_DELAY);
 8002b54:	2301      	movs	r3, #1
 8002b56:	425b      	negs	r3, r3
 8002b58:	1939      	adds	r1, r7, r4
 8002b5a:	4812      	ldr	r0, [pc, #72]	; (8002ba4 <write_RAM_to_epd+0xb8>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f005 fda7 	bl	80086b0 <HAL_SPI_Transmit>
        EPD_CS_HIGH;
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <write_RAM_to_epd+0xb4>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	2140      	movs	r1, #64	; 0x40
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f003 ffaf 	bl	8006acc <HAL_GPIO_WritePin>
        HAL_Delay(5);
 8002b6e:	2005      	movs	r0, #5
 8002b70:	f002 feda 	bl	8005928 <HAL_Delay>
    for (uint32_t i = 0; i < buffer_size; i++) {
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3301      	adds	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d3cd      	bcc.n	8002b1e <write_RAM_to_epd+0x32>
//        serial_printf("%x ", d);
//        if ((i + 1) % (width / 8) == 0) {
//            serial_printf("\n");
//        }
    }
    EPD_CS_HIGH;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <write_RAM_to_epd+0xb4>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	2140      	movs	r1, #64	; 0x40
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f003 ff9f 	bl	8006acc <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8002b8e:	2002      	movs	r0, #2
 8002b90:	f002 feca 	bl	8005928 <HAL_Delay>
    return;
 8002b94:	46c0      	nop			; (mov r8, r8)
}
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b007      	add	sp, #28
 8002b9a:	bd90      	pop	{r4, r7, pc}
 8002b9c:	50000800 	.word	0x50000800
 8002ba0:	50000400 	.word	0x50000400
 8002ba4:	200002a4 	.word	0x200002a4

08002ba8 <display>:

/*!
 * @brief This function writes the current display buffer(s) to the EPD and draws an image.
 * @param sleep     Set to true if the EPD should go to sleep after drawing.
 */
void display(bool sleep) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	0002      	movs	r2, r0
 8002bb0:	1dfb      	adds	r3, r7, #7
 8002bb2:	701a      	strb	r2, [r3, #0]
    epd_powerUp();
 8002bb4:	f7ff fd7a 	bl	80026ac <epd_powerUp>
    if (use_sram) {
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <display+0x58>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <display+0x2a>
        write_SRAM_to_epd(buffer1_addr, buffer1_size, 0, false);
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <display+0x5c>)
 8002bc2:	8818      	ldrh	r0, [r3, #0]
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <display+0x60>)
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f7ff ff14 	bl	80029f8 <write_SRAM_to_epd>
 8002bd0:	e007      	b.n	8002be2 <display+0x3a>
    } else {
        write_RAM_to_epd(buffer1, buffer1_size, 0, false);
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <display+0x64>)
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <display+0x60>)
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f7ff ff85 	bl	8002aec <write_RAM_to_epd>
            write_RAM_to_epd(buffer2, buffer2_size, 1, false);
        }
    }
#endif

    epd_update();
 8002be2:	f7ff fd45 	bl	8002670 <epd_update>
    partials_since_last_full_update = 0;
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <display+0x68>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]

    if (sleep) {
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <display+0x50>
        epd_powerDown();
 8002bf4:	f7ff fd8e 	bl	8002714 <epd_powerDown>
    }
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000004 	.word	0x20000004
 8002c04:	200001ae 	.word	0x200001ae
 8002c08:	200001b0 	.word	0x200001b0
 8002c0c:	200001b4 	.word	0x200001b4
 8002c10:	200000b0 	.word	0x200000b0

08002c14 <draw_pixel>:
 * @brief This function draws a pixel in the display buffer.
 * @param x     The x-coordinate of the pixel
 * @param y     The y-coordinate of the pixel
 * @param color The color of the pixel
 */
void draw_pixel(int16_t x, int16_t y, uint16_t color) {
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	0004      	movs	r4, r0
 8002c1c:	0008      	movs	r0, r1
 8002c1e:	0011      	movs	r1, r2
 8002c20:	1dbb      	adds	r3, r7, #6
 8002c22:	1c22      	adds	r2, r4, #0
 8002c24:	801a      	strh	r2, [r3, #0]
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	1c02      	adds	r2, r0, #0
 8002c2a:	801a      	strh	r2, [r3, #0]
 8002c2c:	1cbb      	adds	r3, r7, #2
 8002c2e:	1c0a      	adds	r2, r1, #0
 8002c30:	801a      	strh	r2, [r3, #0]
    if ((x < 0) || (x >= width) || (y < 0) || (y >= height)) {
 8002c32:	1dbb      	adds	r3, r7, #6
 8002c34:	2200      	movs	r2, #0
 8002c36:	5e9b      	ldrsh	r3, [r3, r2]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db12      	blt.n	8002c62 <draw_pixel+0x4e>
 8002c3c:	1dbb      	adds	r3, r7, #6
 8002c3e:	2200      	movs	r2, #0
 8002c40:	5e9b      	ldrsh	r3, [r3, r2]
 8002c42:	4a84      	ldr	r2, [pc, #528]	; (8002e54 <draw_pixel+0x240>)
 8002c44:	8812      	ldrh	r2, [r2, #0]
 8002c46:	4293      	cmp	r3, r2
 8002c48:	da0b      	bge.n	8002c62 <draw_pixel+0x4e>
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	5e9b      	ldrsh	r3, [r3, r2]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	db06      	blt.n	8002c62 <draw_pixel+0x4e>
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2200      	movs	r2, #0
 8002c58:	5e9b      	ldrsh	r3, [r3, r2]
 8002c5a:	4a7f      	ldr	r2, [pc, #508]	; (8002e58 <draw_pixel+0x244>)
 8002c5c:	8812      	ldrh	r2, [r2, #0]
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	db0a      	blt.n	8002c78 <draw_pixel+0x64>
        serial_printf("Pixel off screen! (%d, %d)", x, y);
 8002c62:	1dbb      	adds	r3, r7, #6
 8002c64:	2100      	movs	r1, #0
 8002c66:	5e59      	ldrsh	r1, [r3, r1]
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	5e9a      	ldrsh	r2, [r3, r2]
 8002c6e:	4b7b      	ldr	r3, [pc, #492]	; (8002e5c <draw_pixel+0x248>)
 8002c70:	0018      	movs	r0, r3
 8002c72:	f001 fd93 	bl	800479c <serial_printf>
 8002c76:	e0e9      	b.n	8002e4c <draw_pixel+0x238>
    uint8_t *black_pBuf;
#ifdef EPD_USE_COLOR
    uint8_t *color_pBuf;
#endif

    switch (rotation) {
 8002c78:	4b79      	ldr	r3, [pc, #484]	; (8002e60 <draw_pixel+0x24c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d035      	beq.n	8002cec <draw_pixel+0xd8>
 8002c80:	dc49      	bgt.n	8002d16 <draw_pixel+0x102>
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d022      	beq.n	8002ccc <draw_pixel+0xb8>
 8002c86:	dc46      	bgt.n	8002d16 <draw_pixel+0x102>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <draw_pixel+0x7e>
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d007      	beq.n	8002ca0 <draw_pixel+0x8c>
 8002c90:	e041      	b.n	8002d16 <draw_pixel+0x102>
    	case 0:
    		y = y + 8;
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	3308      	adds	r3, #8
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	801a      	strh	r2, [r3, #0]
    		break;
 8002c9e:	e03a      	b.n	8002d16 <draw_pixel+0x102>
        case 1: EPD_swap(x, y);
 8002ca0:	2110      	movs	r1, #16
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	1dba      	adds	r2, r7, #6
 8002ca6:	8812      	ldrh	r2, [r2, #0]
 8002ca8:	801a      	strh	r2, [r3, #0]
 8002caa:	1dbb      	adds	r3, r7, #6
 8002cac:	1d3a      	adds	r2, r7, #4
 8002cae:	8812      	ldrh	r2, [r2, #0]
 8002cb0:	801a      	strh	r2, [r3, #0]
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	187a      	adds	r2, r7, r1
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	801a      	strh	r2, [r3, #0]
            x = EPD_WIDTH - x - 1;
 8002cba:	1dbb      	adds	r3, r7, #6
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	32ff      	adds	r2, #255	; 0xff
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	1dbb      	adds	r3, r7, #6
 8002cc8:	801a      	strh	r2, [r3, #0]
            break;
 8002cca:	e024      	b.n	8002d16 <draw_pixel+0x102>
        case 2:
            x = EPD_WIDTH - x - 1;
 8002ccc:	1dbb      	adds	r3, r7, #6
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	32ff      	adds	r2, #255	; 0xff
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	1dbb      	adds	r3, r7, #6
 8002cda:	801a      	strh	r2, [r3, #0]
//            y = EPD_HEIGHT - y - 1;
            y = EPD_HEIGHT - y - 1 + 8;
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	22b7      	movs	r2, #183	; 0xb7
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	801a      	strh	r2, [r3, #0]
            break;
 8002cea:	e014      	b.n	8002d16 <draw_pixel+0x102>
        case 3: EPD_swap(x, y);
 8002cec:	2112      	movs	r1, #18
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	1dba      	adds	r2, r7, #6
 8002cf2:	8812      	ldrh	r2, [r2, #0]
 8002cf4:	801a      	strh	r2, [r3, #0]
 8002cf6:	1dbb      	adds	r3, r7, #6
 8002cf8:	1d3a      	adds	r2, r7, #4
 8002cfa:	8812      	ldrh	r2, [r2, #0]
 8002cfc:	801a      	strh	r2, [r3, #0]
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	187a      	adds	r2, r7, r1
 8002d02:	8812      	ldrh	r2, [r2, #0]
 8002d04:	801a      	strh	r2, [r3, #0]
            y = EPD_HEIGHT - y - 1;
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	22af      	movs	r2, #175	; 0xaf
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	801a      	strh	r2, [r3, #0]
            break;
 8002d14:	46c0      	nop			; (mov r8, r8)
    }

    uint16_t addr = ((uint32_t) (EPD_WIDTH - 1 - x) * (uint32_t) EPD_HEIGHT + y) / 8;
 8002d16:	1dbb      	adds	r3, r7, #6
 8002d18:	2200      	movs	r2, #0
 8002d1a:	5e9b      	ldrsh	r3, [r3, r2]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	32ff      	adds	r2, #255	; 0xff
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	001a      	movs	r2, r3
 8002d24:	23b0      	movs	r3, #176	; 0xb0
 8002d26:	435a      	muls	r2, r3
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5e5b      	ldrsh	r3, [r3, r1]
 8002d2e:	18d3      	adds	r3, r2, r3
 8002d30:	08da      	lsrs	r2, r3, #3
 8002d32:	210e      	movs	r1, #14
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	801a      	strh	r2, [r3, #0]
    uint8_t black_c;
#ifdef EPD_USE_COLOR
    uint8_t color_c;
#endif

    if (use_sram) {
 8002d38:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <draw_pixel+0x250>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d011      	beq.n	8002d64 <draw_pixel+0x150>
        black_c = sram_read8(black_buffer_addr + addr, MCPSRAM_READ);
 8002d40:	4b49      	ldr	r3, [pc, #292]	; (8002e68 <draw_pixel+0x254>)
 8002d42:	881a      	ldrh	r2, [r3, #0]
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	18d3      	adds	r3, r2, r3
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f001 ff44 	bl	8004bdc <sram_read8>
 8002d54:	0003      	movs	r3, r0
 8002d56:	001a      	movs	r2, r3
 8002d58:	210c      	movs	r1, #12
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	701a      	strb	r2, [r3, #0]
        black_pBuf = &black_c;
 8002d5e:	187b      	adds	r3, r7, r1
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	e006      	b.n	8002d72 <draw_pixel+0x15e>
#ifdef EPD_USE_COLOR
        color_c = sram_read8(color_buffer_addr + addr, MCPSRAM_READ);
        color_pBuf = &color_c;
#endif
    } else {
        black_pBuf = black_buffer + addr;
 8002d64:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <draw_pixel+0x258>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	230e      	movs	r3, #14
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	18d3      	adds	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
        *color_pBuf |= (1 << (7 - y % 8));
    }
#endif

    bool black_bit;
    black_bit = layer_colors[color] & 0x1;
 8002d72:	1cbb      	adds	r3, r7, #2
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	4a3e      	ldr	r2, [pc, #248]	; (8002e70 <draw_pixel+0x25c>)
 8002d78:	5cd3      	ldrb	r3, [r2, r3]
 8002d7a:	001a      	movs	r2, r3
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	401a      	ands	r2, r3
 8002d80:	200d      	movs	r0, #13
 8002d82:	183b      	adds	r3, r7, r0
 8002d84:	1e51      	subs	r1, r2, #1
 8002d86:	418a      	sbcs	r2, r1
 8002d88:	701a      	strb	r2, [r3, #0]
    if ((black_bit && black_buffer_inverted) || (!black_bit && !black_buffer_inverted)) {
 8002d8a:	183b      	adds	r3, r7, r0
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <draw_pixel+0x186>
 8002d92:	4b38      	ldr	r3, [pc, #224]	; (8002e74 <draw_pixel+0x260>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <draw_pixel+0x1a4>
 8002d9a:	230d      	movs	r3, #13
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2201      	movs	r2, #1
 8002da2:	4053      	eors	r3, r2
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d024      	beq.n	8002df4 <draw_pixel+0x1e0>
 8002daa:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <draw_pixel+0x260>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2201      	movs	r2, #1
 8002db0:	4053      	eors	r3, r2
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01d      	beq.n	8002df4 <draw_pixel+0x1e0>
        *black_pBuf &= ~(1 << (7 - y % 8));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b25a      	sxtb	r2, r3
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	5e5b      	ldrsh	r3, [r3, r1]
 8002dc4:	492c      	ldr	r1, [pc, #176]	; (8002e78 <draw_pixel+0x264>)
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	d504      	bpl.n	8002dd4 <draw_pixel+0x1c0>
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	2108      	movs	r1, #8
 8002dce:	4249      	negs	r1, r1
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b21b      	sxth	r3, r3
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	2307      	movs	r3, #7
 8002dda:	1a5b      	subs	r3, r3, r1
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4099      	lsls	r1, r3
 8002de0:	000b      	movs	r3, r1
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	4013      	ands	r3, r2
 8002dea:	b25b      	sxtb	r3, r3
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e01a      	b.n	8002e2a <draw_pixel+0x216>
    } else {
        *black_pBuf |= (1 << (7 - y % 8));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b25a      	sxtb	r2, r3
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	5e5b      	ldrsh	r3, [r3, r1]
 8002e00:	491d      	ldr	r1, [pc, #116]	; (8002e78 <draw_pixel+0x264>)
 8002e02:	400b      	ands	r3, r1
 8002e04:	d504      	bpl.n	8002e10 <draw_pixel+0x1fc>
 8002e06:	3b01      	subs	r3, #1
 8002e08:	2108      	movs	r1, #8
 8002e0a:	4249      	negs	r1, r1
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	3301      	adds	r3, #1
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	0019      	movs	r1, r3
 8002e14:	2307      	movs	r3, #7
 8002e16:	1a5b      	subs	r3, r3, r1
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4099      	lsls	r1, r3
 8002e1c:	000b      	movs	r3, r1
 8002e1e:	b25b      	sxtb	r3, r3
 8002e20:	4313      	orrs	r3, r2
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	701a      	strb	r2, [r3, #0]
    }

    if (use_sram) {
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <draw_pixel+0x250>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <draw_pixel+0x238>
#ifdef EPD_USE_COLOR
        sram_write8(color_buffer_addr + addr, *color_pBuf, MCPSRAM_WRITE);
#endif
        sram_write8(black_buffer_addr + addr, *black_pBuf, MCPSRAM_WRITE);
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <draw_pixel+0x254>)
 8002e34:	881a      	ldrh	r2, [r3, #0]
 8002e36:	230e      	movs	r3, #14
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	18d3      	adds	r3, r2, r3
 8002e3e:	b298      	uxth	r0, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2202      	movs	r2, #2
 8002e46:	0019      	movs	r1, r3
 8002e48:	f001 fee1 	bl	8004c0e <sram_write8>
    }
}
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b007      	add	sp, #28
 8002e50:	bd90      	pop	{r4, r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	200001c4 	.word	0x200001c4
 8002e58:	200001c2 	.word	0x200001c2
 8002e5c:	0800a718 	.word	0x0800a718
 8002e60:	20000005 	.word	0x20000005
 8002e64:	20000004 	.word	0x20000004
 8002e68:	200001ac 	.word	0x200001ac
 8002e6c:	200001b8 	.word	0x200001b8
 8002e70:	200001bc 	.word	0x200001bc
 8002e74:	200000af 	.word	0x200000af
 8002e78:	80000007 	.word	0x80000007

08002e7c <set_text_size>:
/*!
 * @brief       Sets the scaling factors for the x and y axis of text.
 * @param   x   The desired scaling factor for the x-axis of a character.
 * @param   y   The desired scaling factor for the y-axis of a character.
 */
void set_text_size(uint8_t x, uint8_t y) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	0002      	movs	r2, r0
 8002e84:	1dfb      	adds	r3, r7, #7
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	1dbb      	adds	r3, r7, #6
 8002e8a:	1c0a      	adds	r2, r1, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
    textsize_x = (x > 0) ? x : 1;
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <set_text_size+0x20>
 8002e96:	1dfb      	adds	r3, r7, #7
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	e000      	b.n	8002e9e <set_text_size+0x22>
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <set_text_size+0x44>)
 8002ea0:	701a      	strb	r2, [r3, #0]
    textsize_y = (y > 0) ? y : 1;
 8002ea2:	1dbb      	adds	r3, r7, #6
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <set_text_size+0x34>
 8002eaa:	1dbb      	adds	r3, r7, #6
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	e000      	b.n	8002eb2 <set_text_size+0x36>
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <set_text_size+0x48>)
 8002eb4:	701a      	strb	r2, [r3, #0]
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b002      	add	sp, #8
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	20000006 	.word	0x20000006
 8002ec4:	20000007 	.word	0x20000007

08002ec8 <set_text_scale>:

/*!
 * @brief      Sets the scaling factors for the x and y axis to be the same value.
 * @param   s  The desired scaling factor for the x and y axis of a character.
 */
void set_text_scale(uint8_t s) { set_text_size(s, s); }
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	0002      	movs	r2, r0
 8002ed0:	1dfb      	adds	r3, r7, #7
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	1dfb      	adds	r3, r7, #7
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	0011      	movs	r1, r2
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f7ff ffcc 	bl	8002e7c <set_text_size>
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}

08002eec <set_cursor>:
/*!
 * @brief       Sets the cursor to a new location on the display.
 * @param   x   The x coordinate of the new location
 * @param   y   The y coordinate of the new location
 */
void set_cursor(uint16_t x, uint16_t y) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	1dbb      	adds	r3, r7, #6
 8002ef6:	801a      	strh	r2, [r3, #0]
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	1c0a      	adds	r2, r1, #0
 8002efc:	801a      	strh	r2, [r3, #0]
    cursor_x = x;
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	2200      	movs	r2, #0
 8002f02:	5e9a      	ldrsh	r2, [r3, r2]
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <set_cursor+0x30>)
 8002f06:	801a      	strh	r2, [r3, #0]
    cursor_y = y;
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	5e9a      	ldrsh	r2, [r3, r2]
 8002f0e:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <set_cursor+0x34>)
 8002f10:	801a      	strh	r2, [r3, #0]
}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b002      	add	sp, #8
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	200000b8 	.word	0x200000b8
 8002f20:	200000ba 	.word	0x200000ba

08002f24 <set_x_margin>:

/*!
 * @brief       Sets a horizontal offset from the left of the display for all lines of text.
 * @param   m   The number of pixels to offset by
 */
void set_x_margin(uint8_t m) { margin_x = m; }
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	1dfb      	adds	r3, r7, #7
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <set_x_margin+0x1c>)
 8002f32:	1dfa      	adds	r2, r7, #7
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200000bc 	.word	0x200000bc

08002f44 <set_y_margin>:

/*!
 * @brief       Sets a vertical offset from the top of the display for all text.
 * @param   m   The number of pixels to offset by
 */
void set_y_margin(uint8_t m) { margin_y = m; }
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <set_y_margin+0x1c>)
 8002f52:	1dfa      	adds	r2, r7, #7
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200000bd 	.word	0x200000bd

08002f64 <write_line>:
    @param    y0  Start point y coordinate
    @param    x1  End point x coordinate
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
void write_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8002f64:	b5b0      	push	{r4, r5, r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	0005      	movs	r5, r0
 8002f6c:	000c      	movs	r4, r1
 8002f6e:	0010      	movs	r0, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	1dbb      	adds	r3, r7, #6
 8002f74:	1c2a      	adds	r2, r5, #0
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	1c22      	adds	r2, r4, #0
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	1cbb      	adds	r3, r7, #2
 8002f80:	1c02      	adds	r2, r0, #0
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	003b      	movs	r3, r7
 8002f86:	1c0a      	adds	r2, r1, #0
 8002f88:	801a      	strh	r2, [r3, #0]
    int16_t steep = _abs(y1 - y0) > _abs(x1 - x0);
 8002f8a:	003b      	movs	r3, r7
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	5e9a      	ldrsh	r2, [r3, r2]
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	2100      	movs	r1, #0
 8002f94:	5e5b      	ldrsh	r3, [r3, r1]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	17d9      	asrs	r1, r3, #31
 8002f9a:	185a      	adds	r2, r3, r1
 8002f9c:	404a      	eors	r2, r1
 8002f9e:	1cbb      	adds	r3, r7, #2
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	5e59      	ldrsh	r1, [r3, r1]
 8002fa4:	1dbb      	adds	r3, r7, #6
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	5e1b      	ldrsh	r3, [r3, r0]
 8002faa:	1acb      	subs	r3, r1, r3
 8002fac:	17d9      	asrs	r1, r3, #31
 8002fae:	185b      	adds	r3, r3, r1
 8002fb0:	404b      	eors	r3, r1
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dc01      	bgt.n	8002fbc <write_line+0x58>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	1c19      	adds	r1, r3, #0
 8002fbc:	b2ca      	uxtb	r2, r1
 8002fbe:	211a      	movs	r1, #26
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	5e9b      	ldrsh	r3, [r3, r2]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d019      	beq.n	8003002 <write_line+0x9e>
        _swap_int16_t(x0, y0);
 8002fce:	2118      	movs	r1, #24
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	1dba      	adds	r2, r7, #6
 8002fd4:	8812      	ldrh	r2, [r2, #0]
 8002fd6:	801a      	strh	r2, [r3, #0]
 8002fd8:	1dbb      	adds	r3, r7, #6
 8002fda:	1d3a      	adds	r2, r7, #4
 8002fdc:	8812      	ldrh	r2, [r2, #0]
 8002fde:	801a      	strh	r2, [r3, #0]
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	187a      	adds	r2, r7, r1
 8002fe4:	8812      	ldrh	r2, [r2, #0]
 8002fe6:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8002fe8:	2116      	movs	r1, #22
 8002fea:	187b      	adds	r3, r7, r1
 8002fec:	1cba      	adds	r2, r7, #2
 8002fee:	8812      	ldrh	r2, [r2, #0]
 8002ff0:	801a      	strh	r2, [r3, #0]
 8002ff2:	1cbb      	adds	r3, r7, #2
 8002ff4:	003a      	movs	r2, r7
 8002ff6:	8812      	ldrh	r2, [r2, #0]
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	003b      	movs	r3, r7
 8002ffc:	187a      	adds	r2, r7, r1
 8002ffe:	8812      	ldrh	r2, [r2, #0]
 8003000:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8003002:	1dba      	adds	r2, r7, #6
 8003004:	1cbb      	adds	r3, r7, #2
 8003006:	2100      	movs	r1, #0
 8003008:	5e52      	ldrsh	r2, [r2, r1]
 800300a:	2100      	movs	r1, #0
 800300c:	5e5b      	ldrsh	r3, [r3, r1]
 800300e:	429a      	cmp	r2, r3
 8003010:	dd19      	ble.n	8003046 <write_line+0xe2>
        _swap_int16_t(x0, x1);
 8003012:	2114      	movs	r1, #20
 8003014:	187b      	adds	r3, r7, r1
 8003016:	1dba      	adds	r2, r7, #6
 8003018:	8812      	ldrh	r2, [r2, #0]
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	1dbb      	adds	r3, r7, #6
 800301e:	1cba      	adds	r2, r7, #2
 8003020:	8812      	ldrh	r2, [r2, #0]
 8003022:	801a      	strh	r2, [r3, #0]
 8003024:	1cbb      	adds	r3, r7, #2
 8003026:	187a      	adds	r2, r7, r1
 8003028:	8812      	ldrh	r2, [r2, #0]
 800302a:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 800302c:	2112      	movs	r1, #18
 800302e:	187b      	adds	r3, r7, r1
 8003030:	1d3a      	adds	r2, r7, #4
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	003a      	movs	r2, r7
 800303a:	8812      	ldrh	r2, [r2, #0]
 800303c:	801a      	strh	r2, [r3, #0]
 800303e:	003b      	movs	r3, r7
 8003040:	187a      	adds	r2, r7, r1
 8003042:	8812      	ldrh	r2, [r2, #0]
 8003044:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003046:	1cbb      	adds	r3, r7, #2
 8003048:	881a      	ldrh	r2, [r3, #0]
 800304a:	1dbb      	adds	r3, r7, #6
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	b29a      	uxth	r2, r3
 8003052:	2110      	movs	r1, #16
 8003054:	187b      	adds	r3, r7, r1
 8003056:	801a      	strh	r2, [r3, #0]
    dy = _abs(y1 - y0);
 8003058:	003b      	movs	r3, r7
 800305a:	2200      	movs	r2, #0
 800305c:	5e9a      	ldrsh	r2, [r3, r2]
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	2000      	movs	r0, #0
 8003062:	5e1b      	ldrsh	r3, [r3, r0]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	17d8      	asrs	r0, r3, #31
 8003068:	181a      	adds	r2, r3, r0
 800306a:	4042      	eors	r2, r0
 800306c:	230e      	movs	r3, #14
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8003072:	231e      	movs	r3, #30
 8003074:	18fa      	adds	r2, r7, r3
 8003076:	187b      	adds	r3, r7, r1
 8003078:	2100      	movs	r1, #0
 800307a:	5e5b      	ldrsh	r3, [r3, r1]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da00      	bge.n	8003082 <write_line+0x11e>
 8003080:	3301      	adds	r3, #1
 8003082:	105b      	asrs	r3, r3, #1
 8003084:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8003086:	1d3a      	adds	r2, r7, #4
 8003088:	003b      	movs	r3, r7
 800308a:	2100      	movs	r1, #0
 800308c:	5e52      	ldrsh	r2, [r2, r1]
 800308e:	2100      	movs	r1, #0
 8003090:	5e5b      	ldrsh	r3, [r3, r1]
 8003092:	429a      	cmp	r2, r3
 8003094:	da04      	bge.n	80030a0 <write_line+0x13c>
        ystep = 1;
 8003096:	231c      	movs	r3, #28
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	2201      	movs	r2, #1
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	e04d      	b.n	800313c <write_line+0x1d8>
    } else {
        ystep = -1;
 80030a0:	231c      	movs	r3, #28
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2201      	movs	r2, #1
 80030a6:	4252      	negs	r2, r2
 80030a8:	801a      	strh	r2, [r3, #0]
    }

    for (; x0 <= x1; x0++) {
 80030aa:	e047      	b.n	800313c <write_line+0x1d8>
        if (steep) {
 80030ac:	231a      	movs	r3, #26
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	5e9b      	ldrsh	r3, [r3, r2]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00c      	beq.n	80030d2 <write_line+0x16e>
            draw_pixel(y0, x0, color);
 80030b8:	2330      	movs	r3, #48	; 0x30
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	1dbb      	adds	r3, r7, #6
 80030c0:	2100      	movs	r1, #0
 80030c2:	5e59      	ldrsh	r1, [r3, r1]
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	2000      	movs	r0, #0
 80030c8:	5e1b      	ldrsh	r3, [r3, r0]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff fda2 	bl	8002c14 <draw_pixel>
 80030d0:	e00b      	b.n	80030ea <write_line+0x186>
        } else {
            draw_pixel(x0, y0, color);
 80030d2:	2330      	movs	r3, #48	; 0x30
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	881a      	ldrh	r2, [r3, #0]
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	2100      	movs	r1, #0
 80030dc:	5e59      	ldrsh	r1, [r3, r1]
 80030de:	1dbb      	adds	r3, r7, #6
 80030e0:	2000      	movs	r0, #0
 80030e2:	5e1b      	ldrsh	r3, [r3, r0]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff fd95 	bl	8002c14 <draw_pixel>
        }
        err -= dy;
 80030ea:	211e      	movs	r1, #30
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	881a      	ldrh	r2, [r3, #0]
 80030f0:	230e      	movs	r3, #14
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	2200      	movs	r2, #0
 8003102:	5e9b      	ldrsh	r3, [r3, r2]
 8003104:	2b00      	cmp	r3, #0
 8003106:	da11      	bge.n	800312c <write_line+0x1c8>
            y0 += ystep;
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	881a      	ldrh	r2, [r3, #0]
 800310c:	231c      	movs	r3, #28
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	18d3      	adds	r3, r2, r3
 8003114:	b29a      	uxth	r2, r3
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	801a      	strh	r2, [r3, #0]
            err += dx;
 800311a:	187b      	adds	r3, r7, r1
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	2310      	movs	r3, #16
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	18d3      	adds	r3, r2, r3
 8003126:	b29a      	uxth	r2, r3
 8003128:	187b      	adds	r3, r7, r1
 800312a:	801a      	strh	r2, [r3, #0]
    for (; x0 <= x1; x0++) {
 800312c:	1dbb      	adds	r3, r7, #6
 800312e:	2200      	movs	r2, #0
 8003130:	5e9b      	ldrsh	r3, [r3, r2]
 8003132:	b29b      	uxth	r3, r3
 8003134:	3301      	adds	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	1dbb      	adds	r3, r7, #6
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	1dba      	adds	r2, r7, #6
 800313e:	1cbb      	adds	r3, r7, #2
 8003140:	2100      	movs	r1, #0
 8003142:	5e52      	ldrsh	r2, [r2, r1]
 8003144:	2100      	movs	r1, #0
 8003146:	5e5b      	ldrsh	r3, [r3, r1]
 8003148:	429a      	cmp	r2, r3
 800314a:	ddaf      	ble.n	80030ac <write_line+0x148>
        }
    }
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	46bd      	mov	sp, r7
 8003152:	b008      	add	sp, #32
 8003154:	bdb0      	pop	{r4, r5, r7, pc}

08003156 <write_fast_vLine>:
 * @param x     The top-most x coordinate
 * @param y     The top-most y coordinate
 * @param h     The height in pixels
 * @param color The 16-bit 5-6-5 color to use
 */
void write_fast_vLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8003156:	b5b0      	push	{r4, r5, r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af02      	add	r7, sp, #8
 800315c:	0005      	movs	r5, r0
 800315e:	000c      	movs	r4, r1
 8003160:	0010      	movs	r0, r2
 8003162:	0019      	movs	r1, r3
 8003164:	1dbb      	adds	r3, r7, #6
 8003166:	1c2a      	adds	r2, r5, #0
 8003168:	801a      	strh	r2, [r3, #0]
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	1c22      	adds	r2, r4, #0
 800316e:	801a      	strh	r2, [r3, #0]
 8003170:	1cbb      	adds	r3, r7, #2
 8003172:	1c02      	adds	r2, r0, #0
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	003b      	movs	r3, r7
 8003178:	1c0a      	adds	r2, r1, #0
 800317a:	801a      	strh	r2, [r3, #0]
    write_line(x, y, x, y + h - 1, color);
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	881a      	ldrh	r2, [r3, #0]
 8003180:	1cbb      	adds	r3, r7, #2
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	18d3      	adds	r3, r2, r3
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29b      	uxth	r3, r3
 800318c:	b21c      	sxth	r4, r3
 800318e:	1dbb      	adds	r3, r7, #6
 8003190:	2200      	movs	r2, #0
 8003192:	5e9a      	ldrsh	r2, [r3, r2]
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	2100      	movs	r1, #0
 8003198:	5e59      	ldrsh	r1, [r3, r1]
 800319a:	1dbb      	adds	r3, r7, #6
 800319c:	2000      	movs	r0, #0
 800319e:	5e18      	ldrsh	r0, [r3, r0]
 80031a0:	003b      	movs	r3, r7
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	0023      	movs	r3, r4
 80031a8:	f7ff fedc 	bl	8002f64 <write_line>
//    fill_rect(x, y, 1, h, color);
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bdb0      	pop	{r4, r5, r7, pc}

080031b4 <fill_rect>:
 * @param y     The top-left corner y coordinate
 * @param w     The width in pixels
 * @param h     The height in pixels
 * @param color The 16-bit 5-6-5 color to use
 */
void fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	0005      	movs	r5, r0
 80031bc:	000c      	movs	r4, r1
 80031be:	0010      	movs	r0, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	1dbb      	adds	r3, r7, #6
 80031c4:	1c2a      	adds	r2, r5, #0
 80031c6:	801a      	strh	r2, [r3, #0]
 80031c8:	1d3b      	adds	r3, r7, #4
 80031ca:	1c22      	adds	r2, r4, #0
 80031cc:	801a      	strh	r2, [r3, #0]
 80031ce:	1cbb      	adds	r3, r7, #2
 80031d0:	1c02      	adds	r2, r0, #0
 80031d2:	801a      	strh	r2, [r3, #0]
 80031d4:	003b      	movs	r3, r7
 80031d6:	1c0a      	adds	r2, r1, #0
 80031d8:	801a      	strh	r2, [r3, #0]
    for (int16_t i = x; i < (x + w); i++) {
 80031da:	230e      	movs	r3, #14
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	1dba      	adds	r2, r7, #6
 80031e0:	8812      	ldrh	r2, [r2, #0]
 80031e2:	801a      	strh	r2, [r3, #0]
 80031e4:	e018      	b.n	8003218 <fill_rect+0x64>
        write_fast_vLine(i, y, h, color);
 80031e6:	2320      	movs	r3, #32
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	881c      	ldrh	r4, [r3, #0]
 80031ec:	003b      	movs	r3, r7
 80031ee:	2200      	movs	r2, #0
 80031f0:	5e9a      	ldrsh	r2, [r3, r2]
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	2100      	movs	r1, #0
 80031f6:	5e59      	ldrsh	r1, [r3, r1]
 80031f8:	250e      	movs	r5, #14
 80031fa:	197b      	adds	r3, r7, r5
 80031fc:	2000      	movs	r0, #0
 80031fe:	5e18      	ldrsh	r0, [r3, r0]
 8003200:	0023      	movs	r3, r4
 8003202:	f7ff ffa8 	bl	8003156 <write_fast_vLine>
    for (int16_t i = x; i < (x + w); i++) {
 8003206:	0029      	movs	r1, r5
 8003208:	187b      	adds	r3, r7, r1
 800320a:	2200      	movs	r2, #0
 800320c:	5e9b      	ldrsh	r3, [r3, r2]
 800320e:	b29b      	uxth	r3, r3
 8003210:	3301      	adds	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	187b      	adds	r3, r7, r1
 8003216:	801a      	strh	r2, [r3, #0]
 8003218:	230e      	movs	r3, #14
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2200      	movs	r2, #0
 800321e:	5e9a      	ldrsh	r2, [r3, r2]
 8003220:	1dbb      	adds	r3, r7, #6
 8003222:	2100      	movs	r1, #0
 8003224:	5e59      	ldrsh	r1, [r3, r1]
 8003226:	1cbb      	adds	r3, r7, #2
 8003228:	2000      	movs	r0, #0
 800322a:	5e1b      	ldrsh	r3, [r3, r0]
 800322c:	18cb      	adds	r3, r1, r3
 800322e:	429a      	cmp	r2, r3
 8003230:	dbd9      	blt.n	80031e6 <fill_rect+0x32>
    }
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bdb0      	pop	{r4, r5, r7, pc}

0800323c <draw_char>:
 * @param color     The color of the char
 * @param bg        The background color of the char
 * @param size_x    The width of the char
 * @param size_y    The height of the char
 */
void draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 800323c:	b5b0      	push	{r4, r5, r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af02      	add	r7, sp, #8
 8003242:	0005      	movs	r5, r0
 8003244:	000c      	movs	r4, r1
 8003246:	0010      	movs	r0, r2
 8003248:	0019      	movs	r1, r3
 800324a:	1dbb      	adds	r3, r7, #6
 800324c:	1c2a      	adds	r2, r5, #0
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	1c22      	adds	r2, r4, #0
 8003254:	801a      	strh	r2, [r3, #0]
 8003256:	1cfb      	adds	r3, r7, #3
 8003258:	1c02      	adds	r2, r0, #0
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	003b      	movs	r3, r7
 800325e:	1c0a      	adds	r2, r1, #0
 8003260:	801a      	strh	r2, [r3, #0]
    // TODO: add handling for non-classic fonts (if possible)
    if ((x >= width) ||                 // Clip right
 8003262:	1dbb      	adds	r3, r7, #6
 8003264:	2200      	movs	r2, #0
 8003266:	5e9b      	ldrsh	r3, [r3, r2]
 8003268:	4aac      	ldr	r2, [pc, #688]	; (800351c <draw_char+0x2e0>)
 800326a:	8812      	ldrh	r2, [r2, #0]
 800326c:	4293      	cmp	r3, r2
 800326e:	da1d      	bge.n	80032ac <draw_char+0x70>
        (y >= height) ||                // Clip bottom
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	2200      	movs	r2, #0
 8003274:	5e9b      	ldrsh	r3, [r3, r2]
 8003276:	4aaa      	ldr	r2, [pc, #680]	; (8003520 <draw_char+0x2e4>)
 8003278:	8812      	ldrh	r2, [r2, #0]
    if ((x >= width) ||                 // Clip right
 800327a:	4293      	cmp	r3, r2
 800327c:	da16      	bge.n	80032ac <draw_char+0x70>
        ((x + 6 * size_x - 1) < 0) ||   // Clip left
 800327e:	1dbb      	adds	r3, r7, #6
 8003280:	2100      	movs	r1, #0
 8003282:	5e59      	ldrsh	r1, [r3, r1]
 8003284:	2324      	movs	r3, #36	; 0x24
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	0013      	movs	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	189b      	adds	r3, r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	18cb      	adds	r3, r1, r3
        (y >= height) ||                // Clip bottom
 8003294:	2b00      	cmp	r3, #0
 8003296:	dd09      	ble.n	80032ac <draw_char+0x70>
        ((y + 8 * size_y - 1) < 0)) {   // Clip top
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	2200      	movs	r2, #0
 800329c:	5e9a      	ldrsh	r2, [r3, r2]
 800329e:	2328      	movs	r3, #40	; 0x28
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	18d3      	adds	r3, r2, r3
        ((x + 6 * size_x - 1) < 0) ||   // Clip left
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	dc04      	bgt.n	80032b6 <draw_char+0x7a>
        serial_println("CLIPPING TEXT");
 80032ac:	4b9d      	ldr	r3, [pc, #628]	; (8003524 <draw_char+0x2e8>)
 80032ae:	0018      	movs	r0, r3
 80032b0:	f001 fa34 	bl	800471c <serial_println>
        return;
 80032b4:	e12e      	b.n	8003514 <draw_char+0x2d8>
    // There was an inline patch from Adafruit for an older version of glcdfont.c that was missing a character
    // This version of drawChar relies on the newer version of glcdfont.c, so the fix isn't implemented here
    // The fix in question goes something like this:
    // if (old_glcdfont && (c >= 176)) c++;

    for (int8_t i = 0; i < 5; i++) {
 80032b6:	230f      	movs	r3, #15
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e0e1      	b.n	8003484 <draw_char+0x248>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80032c0:	1cfb      	adds	r3, r7, #3
 80032c2:	781a      	ldrb	r2, [r3, #0]
 80032c4:	0013      	movs	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	189a      	adds	r2, r3, r2
 80032ca:	230f      	movs	r3, #15
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	18d2      	adds	r2, r2, r3
 80032d4:	230e      	movs	r3, #14
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	4993      	ldr	r1, [pc, #588]	; (8003528 <draw_char+0x2ec>)
 80032da:	5c8a      	ldrb	r2, [r1, r2]
 80032dc:	701a      	strb	r2, [r3, #0]

        for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80032de:	230d      	movs	r3, #13
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e0bd      	b.n	8003464 <draw_char+0x228>
            if (line & 1) {
 80032e8:	230e      	movs	r3, #14
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2201      	movs	r2, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	d050      	beq.n	8003396 <draw_char+0x15a>
                if (size_x == 1 && size_y == 1) {
 80032f4:	2324      	movs	r3, #36	; 0x24
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d11e      	bne.n	800333c <draw_char+0x100>
 80032fe:	2328      	movs	r3, #40	; 0x28
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <draw_char+0x100>
                    draw_pixel(x + i, y + j, color);
 8003308:	230f      	movs	r3, #15
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b25b      	sxtb	r3, r3
 8003310:	b29a      	uxth	r2, r3
 8003312:	1dbb      	adds	r3, r7, #6
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	18d3      	adds	r3, r2, r3
 8003318:	b29b      	uxth	r3, r3
 800331a:	b218      	sxth	r0, r3
 800331c:	230d      	movs	r3, #13
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b25b      	sxtb	r3, r3
 8003324:	b29a      	uxth	r2, r3
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	18d3      	adds	r3, r2, r3
 800332c:	b29b      	uxth	r3, r3
 800332e:	b219      	sxth	r1, r3
 8003330:	003b      	movs	r3, r7
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	001a      	movs	r2, r3
 8003336:	f7ff fc6d 	bl	8002c14 <draw_pixel>
 800333a:	e084      	b.n	8003446 <draw_char+0x20a>
                } else {
                    fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 800333c:	230f      	movs	r3, #15
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	b25b      	sxtb	r3, r3
 8003344:	b29b      	uxth	r3, r3
 8003346:	2424      	movs	r4, #36	; 0x24
 8003348:	193a      	adds	r2, r7, r4
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	b292      	uxth	r2, r2
 800334e:	4353      	muls	r3, r2
 8003350:	b29a      	uxth	r2, r3
 8003352:	1dbb      	adds	r3, r7, #6
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	18d3      	adds	r3, r2, r3
 8003358:	b29b      	uxth	r3, r3
 800335a:	b218      	sxth	r0, r3
 800335c:	230d      	movs	r3, #13
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b25b      	sxtb	r3, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	2528      	movs	r5, #40	; 0x28
 8003368:	197a      	adds	r2, r7, r5
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	b292      	uxth	r2, r2
 800336e:	4353      	muls	r3, r2
 8003370:	b29a      	uxth	r2, r3
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	18d3      	adds	r3, r2, r3
 8003378:	b29b      	uxth	r3, r3
 800337a:	b219      	sxth	r1, r3
 800337c:	193b      	adds	r3, r7, r4
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b21a      	sxth	r2, r3
 8003382:	197b      	adds	r3, r7, r5
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b21c      	sxth	r4, r3
 8003388:	003b      	movs	r3, r7
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	0023      	movs	r3, r4
 8003390:	f7ff ff10 	bl	80031b4 <fill_rect>
 8003394:	e057      	b.n	8003446 <draw_char+0x20a>
                }
            } else if (bg != color) {
 8003396:	2420      	movs	r4, #32
 8003398:	193b      	adds	r3, r7, r4
 800339a:	0039      	movs	r1, r7
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	880b      	ldrh	r3, [r1, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d050      	beq.n	8003446 <draw_char+0x20a>
                if (size_x == 1 && size_y == 1) {
 80033a4:	2324      	movs	r3, #36	; 0x24
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d11e      	bne.n	80033ec <draw_char+0x1b0>
 80033ae:	2328      	movs	r3, #40	; 0x28
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d119      	bne.n	80033ec <draw_char+0x1b0>
                    draw_pixel(x + i, y + j, bg);
 80033b8:	230f      	movs	r3, #15
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	b25b      	sxtb	r3, r3
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	1dbb      	adds	r3, r7, #6
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	18d3      	adds	r3, r2, r3
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b218      	sxth	r0, r3
 80033cc:	230d      	movs	r3, #13
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	18d3      	adds	r3, r2, r3
 80033dc:	b29b      	uxth	r3, r3
 80033de:	b219      	sxth	r1, r3
 80033e0:	193b      	adds	r3, r7, r4
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	001a      	movs	r2, r3
 80033e6:	f7ff fc15 	bl	8002c14 <draw_pixel>
 80033ea:	e02c      	b.n	8003446 <draw_char+0x20a>
                } else {
                    fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80033ec:	230f      	movs	r3, #15
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b25b      	sxtb	r3, r3
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2424      	movs	r4, #36	; 0x24
 80033f8:	193a      	adds	r2, r7, r4
 80033fa:	7812      	ldrb	r2, [r2, #0]
 80033fc:	b292      	uxth	r2, r2
 80033fe:	4353      	muls	r3, r2
 8003400:	b29a      	uxth	r2, r3
 8003402:	1dbb      	adds	r3, r7, #6
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	18d3      	adds	r3, r2, r3
 8003408:	b29b      	uxth	r3, r3
 800340a:	b218      	sxth	r0, r3
 800340c:	230d      	movs	r3, #13
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b25b      	sxtb	r3, r3
 8003414:	b29b      	uxth	r3, r3
 8003416:	2528      	movs	r5, #40	; 0x28
 8003418:	197a      	adds	r2, r7, r5
 800341a:	7812      	ldrb	r2, [r2, #0]
 800341c:	b292      	uxth	r2, r2
 800341e:	4353      	muls	r3, r2
 8003420:	b29a      	uxth	r2, r3
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	18d3      	adds	r3, r2, r3
 8003428:	b29b      	uxth	r3, r3
 800342a:	b219      	sxth	r1, r3
 800342c:	193b      	adds	r3, r7, r4
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b21a      	sxth	r2, r3
 8003432:	197b      	adds	r3, r7, r5
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b21c      	sxth	r4, r3
 8003438:	2320      	movs	r3, #32
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	0023      	movs	r3, r4
 8003442:	f7ff feb7 	bl	80031b4 <fill_rect>
        for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8003446:	210d      	movs	r1, #13
 8003448:	187b      	adds	r3, r7, r1
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b25b      	sxtb	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	b2da      	uxtb	r2, r3
 8003454:	187b      	adds	r3, r7, r1
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	220e      	movs	r2, #14
 800345a:	18bb      	adds	r3, r7, r2
 800345c:	18ba      	adds	r2, r7, r2
 800345e:	7812      	ldrb	r2, [r2, #0]
 8003460:	0852      	lsrs	r2, r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	230d      	movs	r3, #13
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b25b      	sxtb	r3, r3
 800346c:	2b07      	cmp	r3, #7
 800346e:	dc00      	bgt.n	8003472 <draw_char+0x236>
 8003470:	e73a      	b.n	80032e8 <draw_char+0xac>
    for (int8_t i = 0; i < 5; i++) {
 8003472:	210f      	movs	r1, #15
 8003474:	187b      	adds	r3, r7, r1
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b25b      	sxtb	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	187b      	adds	r3, r7, r1
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	230f      	movs	r3, #15
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b25b      	sxtb	r3, r3
 800348c:	2b04      	cmp	r3, #4
 800348e:	dc00      	bgt.n	8003492 <draw_char+0x256>
 8003490:	e716      	b.n	80032c0 <draw_char+0x84>
                }
            }
        } // End inner for loop
    } // End outer for loop

    if (bg != color) {
 8003492:	2420      	movs	r4, #32
 8003494:	193b      	adds	r3, r7, r4
 8003496:	0039      	movs	r1, r7
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	880b      	ldrh	r3, [r1, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d039      	beq.n	8003514 <draw_char+0x2d8>
        if (size_x == 1 && size_y == 1) {
 80034a0:	2324      	movs	r3, #36	; 0x24
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d113      	bne.n	80034d2 <draw_char+0x296>
 80034aa:	2328      	movs	r3, #40	; 0x28
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10e      	bne.n	80034d2 <draw_char+0x296>
            write_fast_vLine(x + 5, y, 8, bg);
 80034b4:	1dbb      	adds	r3, r7, #6
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	3305      	adds	r3, #5
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	b218      	sxth	r0, r3
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	881a      	ldrh	r2, [r3, #0]
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	2100      	movs	r1, #0
 80034c6:	5e59      	ldrsh	r1, [r3, r1]
 80034c8:	0013      	movs	r3, r2
 80034ca:	2208      	movs	r2, #8
 80034cc:	f7ff fe43 	bl	8003156 <write_fast_vLine>
 80034d0:	e020      	b.n	8003514 <draw_char+0x2d8>
        } else {
            fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80034d2:	2124      	movs	r1, #36	; 0x24
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	1c1a      	adds	r2, r3, #0
 80034dc:	0092      	lsls	r2, r2, #2
 80034de:	18d3      	adds	r3, r2, r3
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	1dbb      	adds	r3, r7, #6
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	18d3      	adds	r3, r2, r3
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b218      	sxth	r0, r3
 80034ec:	187b      	adds	r3, r7, r1
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b21a      	sxth	r2, r3
 80034f2:	2328      	movs	r3, #40	; 0x28
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b21c      	sxth	r4, r3
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	2100      	movs	r1, #0
 8003504:	5e59      	ldrsh	r1, [r3, r1]
 8003506:	2320      	movs	r3, #32
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	0023      	movs	r3, r4
 8003510:	f7ff fe50 	bl	80031b4 <fill_rect>
        }
    }
}
 8003514:	46bd      	mov	sp, r7
 8003516:	b004      	add	sp, #16
 8003518:	bdb0      	pop	{r4, r5, r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	200001c4 	.word	0x200001c4
 8003520:	200001c2 	.word	0x200001c2
 8003524:	0800a734 	.word	0x0800a734
 8003528:	0800ad64 	.word	0x0800ad64

0800352c <write>:

/*!
 * @brief This function draws a character to the display at the current location of the cursor.
 * @param c
 */
void write(uint8_t c) {
 800352c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800352e:	b087      	sub	sp, #28
 8003530:	af04      	add	r7, sp, #16
 8003532:	0002      	movs	r2, r0
 8003534:	1dfb      	adds	r3, r7, #7
 8003536:	701a      	strb	r2, [r3, #0]
    // TODO: add handling for non-classic fonts (if possible)

    if (c == '\n') {                // Newline?
 8003538:	1dfb      	adds	r3, r7, #7
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b0a      	cmp	r3, #10
 800353e:	d113      	bne.n	8003568 <write+0x3c>
        cursor_x = margin_x;        // Reset x to the margin
 8003540:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <write+0x114>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b21a      	sxth	r2, r3
 8003546:	4b3f      	ldr	r3, [pc, #252]	; (8003644 <write+0x118>)
 8003548:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize_y * 8; // Advance y by one line
 800354a:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <write+0x11c>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	b29a      	uxth	r2, r3
 8003554:	4b3d      	ldr	r3, [pc, #244]	; (800364c <write+0x120>)
 8003556:	2100      	movs	r1, #0
 8003558:	5e5b      	ldrsh	r3, [r3, r1]
 800355a:	b29b      	uxth	r3, r3
 800355c:	18d3      	adds	r3, r2, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	b21a      	sxth	r2, r3
 8003562:	4b3a      	ldr	r3, [pc, #232]	; (800364c <write+0x120>)
 8003564:	801a      	strh	r2, [r3, #0]
        }

        draw_char(cursor_x, cursor_y, c, text_color, text_bg_color, textsize_x, textsize_y);
        cursor_x += textsize_x * 6; // Advance x by one character
    }
}
 8003566:	e066      	b.n	8003636 <write+0x10a>
    } else if (c != '\r') {         // Ignore carriage returns
 8003568:	1dfb      	adds	r3, r7, #7
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b0d      	cmp	r3, #13
 800356e:	d062      	beq.n	8003636 <write+0x10a>
        if (wrap && ((cursor_x + textsize_x * 6) > width)) {    // Off right?
 8003570:	4b37      	ldr	r3, [pc, #220]	; (8003650 <write+0x124>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d022      	beq.n	80035be <write+0x92>
 8003578:	4b32      	ldr	r3, [pc, #200]	; (8003644 <write+0x118>)
 800357a:	2200      	movs	r2, #0
 800357c:	5e9b      	ldrsh	r3, [r3, r2]
 800357e:	0019      	movs	r1, r3
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <write+0x128>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	001a      	movs	r2, r3
 8003586:	0013      	movs	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	189b      	adds	r3, r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	18cb      	adds	r3, r1, r3
 8003590:	4a31      	ldr	r2, [pc, #196]	; (8003658 <write+0x12c>)
 8003592:	8812      	ldrh	r2, [r2, #0]
 8003594:	4293      	cmp	r3, r2
 8003596:	dd12      	ble.n	80035be <write+0x92>
            cursor_x = margin_x;        // Reset x to the margin
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <write+0x114>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b21a      	sxth	r2, r3
 800359e:	4b29      	ldr	r3, [pc, #164]	; (8003644 <write+0x118>)
 80035a0:	801a      	strh	r2, [r3, #0]
            cursor_y += textsize_y * 8; // Advance y one line
 80035a2:	4b29      	ldr	r3, [pc, #164]	; (8003648 <write+0x11c>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	4b27      	ldr	r3, [pc, #156]	; (800364c <write+0x120>)
 80035ae:	2100      	movs	r1, #0
 80035b0:	5e5b      	ldrsh	r3, [r3, r1]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	18d3      	adds	r3, r2, r3
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	b21a      	sxth	r2, r3
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <write+0x120>)
 80035bc:	801a      	strh	r2, [r3, #0]
        if ((cursor_y + textsize_y * 8) > height) { // Off bottom?
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <write+0x120>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	5e9b      	ldrsh	r3, [r3, r2]
 80035c4:	001a      	movs	r2, r3
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <write+0x11c>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	18d3      	adds	r3, r2, r3
 80035ce:	4a23      	ldr	r2, [pc, #140]	; (800365c <write+0x130>)
 80035d0:	8812      	ldrh	r2, [r2, #0]
 80035d2:	4293      	cmp	r3, r2
 80035d4:	dd04      	ble.n	80035e0 <write+0xb4>
            cursor_y = margin_y;                    // Reset y to the margin
 80035d6:	4b22      	ldr	r3, [pc, #136]	; (8003660 <write+0x134>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b21a      	sxth	r2, r3
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <write+0x120>)
 80035de:	801a      	strh	r2, [r3, #0]
        draw_char(cursor_x, cursor_y, c, text_color, text_bg_color, textsize_x, textsize_y);
 80035e0:	4b18      	ldr	r3, [pc, #96]	; (8003644 <write+0x118>)
 80035e2:	2400      	movs	r4, #0
 80035e4:	5f1c      	ldrsh	r4, [r3, r4]
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <write+0x120>)
 80035e8:	2500      	movs	r5, #0
 80035ea:	5f5d      	ldrsh	r5, [r3, r5]
 80035ec:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <write+0x138>)
 80035ee:	881e      	ldrh	r6, [r3, #0]
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <write+0x13c>)
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	4a17      	ldr	r2, [pc, #92]	; (8003654 <write+0x128>)
 80035f6:	7812      	ldrb	r2, [r2, #0]
 80035f8:	4913      	ldr	r1, [pc, #76]	; (8003648 <write+0x11c>)
 80035fa:	7809      	ldrb	r1, [r1, #0]
 80035fc:	1df8      	adds	r0, r7, #7
 80035fe:	7800      	ldrb	r0, [r0, #0]
 8003600:	9102      	str	r1, [sp, #8]
 8003602:	9201      	str	r2, [sp, #4]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	0033      	movs	r3, r6
 8003608:	0002      	movs	r2, r0
 800360a:	0029      	movs	r1, r5
 800360c:	0020      	movs	r0, r4
 800360e:	f7ff fe15 	bl	800323c <draw_char>
        cursor_x += textsize_x * 6; // Advance x by one character
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <write+0x128>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	1c1a      	adds	r2, r3, #0
 800361a:	1c13      	adds	r3, r2, #0
 800361c:	18db      	adds	r3, r3, r3
 800361e:	189b      	adds	r3, r3, r2
 8003620:	18db      	adds	r3, r3, r3
 8003622:	b29a      	uxth	r2, r3
 8003624:	4b07      	ldr	r3, [pc, #28]	; (8003644 <write+0x118>)
 8003626:	2100      	movs	r1, #0
 8003628:	5e5b      	ldrsh	r3, [r3, r1]
 800362a:	b29b      	uxth	r3, r3
 800362c:	18d3      	adds	r3, r2, r3
 800362e:	b29b      	uxth	r3, r3
 8003630:	b21a      	sxth	r2, r3
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <write+0x118>)
 8003634:	801a      	strh	r2, [r3, #0]
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b003      	add	sp, #12
 800363c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	200000bc 	.word	0x200000bc
 8003644:	200000b8 	.word	0x200000b8
 8003648:	20000007 	.word	0x20000007
 800364c:	200000ba 	.word	0x200000ba
 8003650:	200000c0 	.word	0x200000c0
 8003654:	20000006 	.word	0x20000006
 8003658:	200001c4 	.word	0x200001c4
 800365c:	200001c2 	.word	0x200001c2
 8003660:	200000bd 	.word	0x200000bd
 8003664:	20000008 	.word	0x20000008
 8003668:	200000be 	.word	0x200000be

0800366c <printWrite>:

/*!
 * @brief Print a *char string to the display
 * @param str   The string to print
 */
void printWrite (const char *str) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	while (*str) {
 8003674:	e006      	b.n	8003684 <printWrite+0x18>
		write(*str++);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	0018      	movs	r0, r3
 8003680:	f7ff ff54 	bl	800352c <write>
	while (*str) {
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f4      	bne.n	8003676 <printWrite+0xa>
	}
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	46bd      	mov	sp, r7
 8003692:	b002      	add	sp, #8
 8003694:	bd80      	pop	{r7, pc}

08003696 <printChar>:

/*!
 * @brief Print a character to the display
 * @param c     The character to print
 */
void printChar(char c) {
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	0002      	movs	r2, r0
 800369e:	1dfb      	adds	r3, r7, #7
 80036a0:	701a      	strb	r2, [r3, #0]
	write(c);
 80036a2:	1dfb      	adds	r3, r7, #7
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7ff ff40 	bl	800352c <write>
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b002      	add	sp, #8
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <printString>:

/*!
 * @brief Print a char[] string to the display
 * @param str   The string to primt
 */
void printString(const char str[]) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	printWrite(str);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0018      	movs	r0, r3
 80036c0:	f7ff ffd4 	bl	800366c <printWrite>
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}

080036cc <printUnsigned>:
/*!
 * @brief Print an unsigned value to the display
 * @param n     The unsigned value
 * @param base  The base of the unsigned value
 */
void printUnsigned(unsigned long n, uint8_t base) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	; 0x30
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	000a      	movs	r2, r1
 80036d6:	1cfb      	adds	r3, r7, #3
 80036d8:	701a      	strb	r2, [r3, #0]
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (n == 0) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d11b      	bne.n	800371c <printUnsigned+0x50>
		printChar('0');
 80036e4:	2030      	movs	r0, #48	; 0x30
 80036e6:	f7ff ffd6 	bl	8003696 <printChar>
 80036ea:	e039      	b.n	8003760 <printUnsigned+0x94>
		return;
	} 
	while (n > 0) {
		buf[i++] = n % base;
 80036ec:	1cfb      	adds	r3, r7, #3
 80036ee:	781a      	ldrb	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0011      	movs	r1, r2
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7fc fd8d 	bl	8000214 <__aeabi_uidivmod>
 80036fa:	000b      	movs	r3, r1
 80036fc:	0019      	movs	r1, r3
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003704:	b2c9      	uxtb	r1, r1
 8003706:	220c      	movs	r2, #12
 8003708:	18ba      	adds	r2, r7, r2
 800370a:	54d1      	strb	r1, [r2, r3]
		n /= base;
 800370c:	1cfb      	adds	r3, r7, #3
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	0019      	movs	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fc fcf8 	bl	8000108 <__udivsi3>
 8003718:	0003      	movs	r3, r0
 800371a:	607b      	str	r3, [r7, #4]
	while (n > 0) {
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e4      	bne.n	80036ec <printUnsigned+0x20>
	}
	for (; i > 0; i--) {
 8003722:	e01a      	b.n	800375a <printUnsigned+0x8e>
		printChar((char) (buf[i - 1] < 10 ? '0' + buf[i - 1] : 'A' + buf[i - 1] - 10));
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003726:	3b01      	subs	r3, #1
 8003728:	210c      	movs	r1, #12
 800372a:	187a      	adds	r2, r7, r1
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	2b09      	cmp	r3, #9
 8003730:	d806      	bhi.n	8003740 <printUnsigned+0x74>
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	3b01      	subs	r3, #1
 8003736:	187a      	adds	r2, r7, r1
 8003738:	5cd3      	ldrb	r3, [r2, r3]
 800373a:	3330      	adds	r3, #48	; 0x30
 800373c:	b2db      	uxtb	r3, r3
 800373e:	e006      	b.n	800374e <printUnsigned+0x82>
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	3b01      	subs	r3, #1
 8003744:	220c      	movs	r2, #12
 8003746:	18ba      	adds	r2, r7, r2
 8003748:	5cd3      	ldrb	r3, [r2, r3]
 800374a:	3337      	adds	r3, #55	; 0x37
 800374c:	b2db      	uxtb	r3, r3
 800374e:	0018      	movs	r0, r3
 8003750:	f7ff ffa1 	bl	8003696 <printChar>
	for (; i > 0; i--) {
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	3b01      	subs	r3, #1
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e1      	bne.n	8003724 <printUnsigned+0x58>
	}
}
 8003760:	46bd      	mov	sp, r7
 8003762:	b00c      	add	sp, #48	; 0x30
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376e:	240c      	movs	r4, #12
 8003770:	193b      	adds	r3, r7, r4
 8003772:	0018      	movs	r0, r3
 8003774:	2314      	movs	r3, #20
 8003776:	001a      	movs	r2, r3
 8003778:	2100      	movs	r1, #0
 800377a:	f006 fe0e 	bl	800a39a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800377e:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <MX_GPIO_Init+0x184>)
 8003780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003782:	4b5a      	ldr	r3, [pc, #360]	; (80038ec <MX_GPIO_Init+0x184>)
 8003784:	2101      	movs	r1, #1
 8003786:	430a      	orrs	r2, r1
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c
 800378a:	4b58      	ldr	r3, [pc, #352]	; (80038ec <MX_GPIO_Init+0x184>)
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	2201      	movs	r2, #1
 8003790:	4013      	ands	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003796:	4b55      	ldr	r3, [pc, #340]	; (80038ec <MX_GPIO_Init+0x184>)
 8003798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379a:	4b54      	ldr	r3, [pc, #336]	; (80038ec <MX_GPIO_Init+0x184>)
 800379c:	2102      	movs	r1, #2
 800379e:	430a      	orrs	r2, r1
 80037a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80037a2:	4b52      	ldr	r3, [pc, #328]	; (80038ec <MX_GPIO_Init+0x184>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	2202      	movs	r2, #2
 80037a8:	4013      	ands	r3, r2
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ae:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <MX_GPIO_Init+0x184>)
 80037b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b2:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <MX_GPIO_Init+0x184>)
 80037b4:	2104      	movs	r1, #4
 80037b6:	430a      	orrs	r2, r1
 80037b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ba:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <MX_GPIO_Init+0x184>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	2204      	movs	r2, #4
 80037c0:	4013      	ands	r3, r2
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_DC_Pin|EN_5V_Pin|SRAM_CS_Pin, GPIO_PIN_RESET);
 80037c6:	23e0      	movs	r3, #224	; 0xe0
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4849      	ldr	r0, [pc, #292]	; (80038f0 <MX_GPIO_Init+0x188>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	0019      	movs	r1, r3
 80037d0:	f003 f97c 	bl	8006acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	0059      	lsls	r1, r3, #1
 80037d8:	23a0      	movs	r3, #160	; 0xa0
 80037da:	05db      	lsls	r3, r3, #23
 80037dc:	2200      	movs	r2, #0
 80037de:	0018      	movs	r0, r3
 80037e0:	f003 f974 	bl	8006acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <MX_GPIO_Init+0x18c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	2170      	movs	r1, #112	; 0x70
 80037ea:	0018      	movs	r0, r3
 80037ec:	f003 f96e 	bl	8006acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PROX_INT_Pin;
 80037f0:	193b      	adds	r3, r7, r4
 80037f2:	2204      	movs	r2, #4
 80037f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80037f6:	193b      	adds	r3, r7, r4
 80037f8:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <MX_GPIO_Init+0x190>)
 80037fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	2202      	movs	r2, #2
 8003800:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PROX_INT_GPIO_Port, &GPIO_InitStruct);
 8003802:	193b      	adds	r3, r7, r4
 8003804:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <MX_GPIO_Init+0x18c>)
 8003806:	0019      	movs	r1, r3
 8003808:	0010      	movs	r0, r2
 800380a:	f002 ffe9 	bl	80067e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_DC_Pin;
 800380e:	193b      	adds	r3, r7, r4
 8003810:	2280      	movs	r2, #128	; 0x80
 8003812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003814:	193b      	adds	r3, r7, r4
 8003816:	2201      	movs	r2, #1
 8003818:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	193b      	adds	r3, r7, r4
 800381c:	2200      	movs	r2, #0
 800381e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003820:	193b      	adds	r3, r7, r4
 8003822:	2201      	movs	r2, #1
 8003824:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_DC_GPIO_Port, &GPIO_InitStruct);
 8003826:	193b      	adds	r3, r7, r4
 8003828:	4a31      	ldr	r2, [pc, #196]	; (80038f0 <MX_GPIO_Init+0x188>)
 800382a:	0019      	movs	r1, r3
 800382c:	0010      	movs	r0, r2
 800382e:	f002 ffd7 	bl	80067e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_5V_Pin|SRAM_CS_Pin;
 8003832:	0021      	movs	r1, r4
 8003834:	187b      	adds	r3, r7, r1
 8003836:	22c0      	movs	r2, #192	; 0xc0
 8003838:	0092      	lsls	r2, r2, #2
 800383a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800383c:	000c      	movs	r4, r1
 800383e:	193b      	adds	r3, r7, r4
 8003840:	2201      	movs	r2, #1
 8003842:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	193b      	adds	r3, r7, r4
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	193b      	adds	r3, r7, r4
 800384c:	2200      	movs	r2, #0
 800384e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003850:	193b      	adds	r3, r7, r4
 8003852:	4a27      	ldr	r2, [pc, #156]	; (80038f0 <MX_GPIO_Init+0x188>)
 8003854:	0019      	movs	r1, r3
 8003856:	0010      	movs	r0, r2
 8003858:	f002 ffc2 	bl	80067e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800385c:	0021      	movs	r1, r4
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2280      	movs	r2, #128	; 0x80
 8003862:	0052      	lsls	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003866:	000c      	movs	r4, r1
 8003868:	193b      	adds	r3, r7, r4
 800386a:	2201      	movs	r2, #1
 800386c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	193b      	adds	r3, r7, r4
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003874:	193b      	adds	r3, r7, r4
 8003876:	2200      	movs	r2, #0
 8003878:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387a:	193a      	adds	r2, r7, r4
 800387c:	23a0      	movs	r3, #160	; 0xa0
 800387e:	05db      	lsls	r3, r3, #23
 8003880:	0011      	movs	r1, r2
 8003882:	0018      	movs	r0, r3
 8003884:	f002 ffac 	bl	80067e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003888:	193b      	adds	r3, r7, r4
 800388a:	2230      	movs	r2, #48	; 0x30
 800388c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800388e:	193b      	adds	r3, r7, r4
 8003890:	2201      	movs	r2, #1
 8003892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	193b      	adds	r3, r7, r4
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389a:	193b      	adds	r3, r7, r4
 800389c:	2200      	movs	r2, #0
 800389e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a0:	193b      	adds	r3, r7, r4
 80038a2:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <MX_GPIO_Init+0x18c>)
 80038a4:	0019      	movs	r1, r3
 80038a6:	0010      	movs	r0, r2
 80038a8:	f002 ff9a 	bl	80067e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin;
 80038ac:	0021      	movs	r1, r4
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	2240      	movs	r2, #64	; 0x40
 80038b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b4:	187b      	adds	r3, r7, r1
 80038b6:	2201      	movs	r2, #1
 80038b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	187b      	adds	r3, r7, r1
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	2201      	movs	r2, #1
 80038c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_CS_GPIO_Port, &GPIO_InitStruct);
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <MX_GPIO_Init+0x18c>)
 80038ca:	0019      	movs	r1, r3
 80038cc:	0010      	movs	r0, r2
 80038ce:	f002 ff87 	bl	80067e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2101      	movs	r1, #1
 80038d6:	2006      	movs	r0, #6
 80038d8:	f002 fe2a 	bl	8006530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80038dc:	2006      	movs	r0, #6
 80038de:	f002 fe3c 	bl	800655a <HAL_NVIC_EnableIRQ>

}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b009      	add	sp, #36	; 0x24
 80038e8:	bd90      	pop	{r4, r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	40021000 	.word	0x40021000
 80038f0:	50000800 	.word	0x50000800
 80038f4:	50000400 	.word	0x50000400
 80038f8:	10210000 	.word	0x10210000

080038fc <hts221_reboot>:
int hts221_calc_temp(int16_t T_OUT, HTS_Cal * hts_cal_data);
int hts221_calc_humid(int16_t H_OUT, HTS_Cal * hts_cal_data);
int hts221_reboot(void);

// Function code
int hts221_reboot() {
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b087      	sub	sp, #28
 8003900:	af04      	add	r7, sp, #16
    uint8_t buf[1];			// read buffer

    /* === Reboot HTS221 === */

    //read register
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003902:	1dfc      	adds	r4, r7, #7
 8003904:	482a      	ldr	r0, [pc, #168]	; (80039b0 <hts221_reboot+0xb4>)
 8003906:	2301      	movs	r3, #1
 8003908:	425b      	negs	r3, r3
 800390a:	9302      	str	r3, [sp, #8]
 800390c:	2301      	movs	r3, #1
 800390e:	9301      	str	r3, [sp, #4]
 8003910:	1d3b      	adds	r3, r7, #4
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	2301      	movs	r3, #1
 8003916:	2221      	movs	r2, #33	; 0x21
 8003918:	21be      	movs	r1, #190	; 0xbe
 800391a:	f003 fadf 	bl	8006edc <HAL_I2C_Mem_Read>
 800391e:	0003      	movs	r3, r0
 8003920:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8003922:	1dfb      	adds	r3, r7, #7
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <hts221_reboot+0x34>
        return HTS_REBOOT_FAIL;
 800392a:	2301      	movs	r3, #1
 800392c:	425b      	negs	r3, r3
 800392e:	e03b      	b.n	80039a8 <hts221_reboot+0xac>
    }

    //write boot bit
    buf[0] |= HTS_CTRL_REG2_BOOT;
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2280      	movs	r2, #128	; 0x80
 8003936:	4252      	negs	r2, r2
 8003938:	4313      	orrs	r3, r2
 800393a:	b2da      	uxtb	r2, r3
 800393c:	1d3b      	adds	r3, r7, #4
 800393e:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003940:	1dfc      	adds	r4, r7, #7
 8003942:	481b      	ldr	r0, [pc, #108]	; (80039b0 <hts221_reboot+0xb4>)
 8003944:	2301      	movs	r3, #1
 8003946:	425b      	negs	r3, r3
 8003948:	9302      	str	r3, [sp, #8]
 800394a:	2301      	movs	r3, #1
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	2301      	movs	r3, #1
 8003954:	2221      	movs	r2, #33	; 0x21
 8003956:	21be      	movs	r1, #190	; 0xbe
 8003958:	f003 f992 	bl	8006c80 <HAL_I2C_Mem_Write>
 800395c:	0003      	movs	r3, r0
 800395e:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <hts221_reboot+0x72>
        return HTS_REBOOT_FAIL;
 8003968:	2301      	movs	r3, #1
 800396a:	425b      	negs	r3, r3
 800396c:	e01c      	b.n	80039a8 <hts221_reboot+0xac>
    }

    //wait for device to restart + clear boot bit
    do{
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 800396e:	1dfc      	adds	r4, r7, #7
 8003970:	480f      	ldr	r0, [pc, #60]	; (80039b0 <hts221_reboot+0xb4>)
 8003972:	2301      	movs	r3, #1
 8003974:	425b      	negs	r3, r3
 8003976:	9302      	str	r3, [sp, #8]
 8003978:	2301      	movs	r3, #1
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2301      	movs	r3, #1
 8003982:	2221      	movs	r2, #33	; 0x21
 8003984:	21be      	movs	r1, #190	; 0xbe
 8003986:	f003 faa9 	bl	8006edc <HAL_I2C_Mem_Read>
 800398a:	0003      	movs	r3, r0
 800398c:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 800398e:	1dfb      	adds	r3, r7, #7
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <hts221_reboot+0xa0>
            return HTS_REBOOT_FAIL;
 8003996:	2301      	movs	r3, #1
 8003998:	425b      	negs	r3, r3
 800399a:	e005      	b.n	80039a8 <hts221_reboot+0xac>
        }
    } while (buf[0] & HTS_CTRL_REG2_BOOT);
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	b25b      	sxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	dbe3      	blt.n	800396e <hts221_reboot+0x72>

//	serial_println("Rebooted\n");

    return HTS_REBOOT_SUCCESS;
 80039a6:	2301      	movs	r3, #1

}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b003      	add	sp, #12
 80039ae:	bd90      	pop	{r4, r7, pc}
 80039b0:	200001c8 	.word	0x200001c8

080039b4 <hts221_init>:

HTS_Cal * hts221_init () {
 80039b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b6:	b08d      	sub	sp, #52	; 0x34
 80039b8:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;	// I2C return status
    uint8_t buf[7];			// read buffer

    if (hts221_reboot() == -1) {
 80039ba:	f7ff ff9f 	bl	80038fc <hts221_reboot>
 80039be:	0003      	movs	r3, r0
 80039c0:	3301      	adds	r3, #1
 80039c2:	d105      	bne.n	80039d0 <hts221_init+0x1c>
        serial_println("Reboot FAIL\n");
 80039c4:	4bdc      	ldr	r3, [pc, #880]	; (8003d38 <hts221_init+0x384>)
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 fea8 	bl	800471c <serial_println>
        return NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e21a      	b.n	8003e06 <hts221_init+0x452>
    }

    /* === Set HTS221 to wake mode === */
    buf[0] = HTS_CTRL_REG1_PD | HTS_CTRL_REG1_BUD;
 80039d0:	003b      	movs	r3, r7
 80039d2:	2284      	movs	r2, #132	; 0x84
 80039d4:	701a      	strb	r2, [r3, #0]

    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80039d6:	251f      	movs	r5, #31
 80039d8:	197c      	adds	r4, r7, r5
 80039da:	48d8      	ldr	r0, [pc, #864]	; (8003d3c <hts221_init+0x388>)
 80039dc:	2301      	movs	r3, #1
 80039de:	425b      	negs	r3, r3
 80039e0:	9302      	str	r3, [sp, #8]
 80039e2:	2301      	movs	r3, #1
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	003b      	movs	r3, r7
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2301      	movs	r3, #1
 80039ec:	2220      	movs	r2, #32
 80039ee:	21be      	movs	r1, #190	; 0xbe
 80039f0:	f003 f946 	bl	8006c80 <HAL_I2C_Mem_Write>
 80039f4:	0003      	movs	r3, r0
 80039f6:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 80039f8:	197b      	adds	r3, r7, r5
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <hts221_init+0x50>
        return NULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e200      	b.n	8003e06 <hts221_init+0x452>
    }
    else  {
        /* === Read in temperature calibration data === */
        // buf[0] = T0_degC_x8
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_degC_x8, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003a04:	251f      	movs	r5, #31
 8003a06:	197c      	adds	r4, r7, r5
 8003a08:	48cc      	ldr	r0, [pc, #816]	; (8003d3c <hts221_init+0x388>)
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	425b      	negs	r3, r3
 8003a0e:	9302      	str	r3, [sp, #8]
 8003a10:	2301      	movs	r3, #1
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	003b      	movs	r3, r7
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	2232      	movs	r2, #50	; 0x32
 8003a1c:	21be      	movs	r1, #190	; 0xbe
 8003a1e:	f003 fa5d 	bl	8006edc <HAL_I2C_Mem_Read>
 8003a22:	0003      	movs	r3, r0
 8003a24:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003a26:	197b      	adds	r3, r7, r5
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <hts221_init+0x7e>
            return NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e1e9      	b.n	8003e06 <hts221_init+0x452>
        }

        // buf[1] = T1_degC_x8
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_degC_x8, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8003a32:	003b      	movs	r3, r7
 8003a34:	3301      	adds	r3, #1
 8003a36:	251f      	movs	r5, #31
 8003a38:	197c      	adds	r4, r7, r5
 8003a3a:	48c0      	ldr	r0, [pc, #768]	; (8003d3c <hts221_init+0x388>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4252      	negs	r2, r2
 8003a40:	9202      	str	r2, [sp, #8]
 8003a42:	2201      	movs	r2, #1
 8003a44:	9201      	str	r2, [sp, #4]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	2233      	movs	r2, #51	; 0x33
 8003a4c:	21be      	movs	r1, #190	; 0xbe
 8003a4e:	f003 fa45 	bl	8006edc <HAL_I2C_Mem_Read>
 8003a52:	0003      	movs	r3, r0
 8003a54:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003a56:	197b      	adds	r3, r7, r5
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <hts221_init+0xae>
            return NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e1d1      	b.n	8003e06 <hts221_init+0x452>
        }

        // buf[2] = T1_T0_msb
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_T0_msb, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8003a62:	003b      	movs	r3, r7
 8003a64:	3302      	adds	r3, #2
 8003a66:	251f      	movs	r5, #31
 8003a68:	197c      	adds	r4, r7, r5
 8003a6a:	48b4      	ldr	r0, [pc, #720]	; (8003d3c <hts221_init+0x388>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4252      	negs	r2, r2
 8003a70:	9202      	str	r2, [sp, #8]
 8003a72:	2201      	movs	r2, #1
 8003a74:	9201      	str	r2, [sp, #4]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2301      	movs	r3, #1
 8003a7a:	2235      	movs	r2, #53	; 0x35
 8003a7c:	21be      	movs	r1, #190	; 0xbe
 8003a7e:	f003 fa2d 	bl	8006edc <HAL_I2C_Mem_Read>
 8003a82:	0003      	movs	r3, r0
 8003a84:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003a86:	197b      	adds	r3, r7, r5
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <hts221_init+0xde>
            return NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e1b9      	b.n	8003e06 <hts221_init+0x452>
        }

        // buf[3] = HTS_CAL_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 3, 1, HAL_MAX_DELAY);
 8003a92:	003b      	movs	r3, r7
 8003a94:	3303      	adds	r3, #3
 8003a96:	251f      	movs	r5, #31
 8003a98:	197c      	adds	r4, r7, r5
 8003a9a:	48a8      	ldr	r0, [pc, #672]	; (8003d3c <hts221_init+0x388>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4252      	negs	r2, r2
 8003aa0:	9202      	str	r2, [sp, #8]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	9201      	str	r2, [sp, #4]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	223c      	movs	r2, #60	; 0x3c
 8003aac:	21be      	movs	r1, #190	; 0xbe
 8003aae:	f003 fa15 	bl	8006edc <HAL_I2C_Mem_Read>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003ab6:	197b      	adds	r3, r7, r5
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <hts221_init+0x10e>
            return NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e1a1      	b.n	8003e06 <hts221_init+0x452>
        }

        // buf[4] = HTS_CAL_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 4, 1, HAL_MAX_DELAY);
 8003ac2:	003b      	movs	r3, r7
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	251f      	movs	r5, #31
 8003ac8:	197c      	adds	r4, r7, r5
 8003aca:	489c      	ldr	r0, [pc, #624]	; (8003d3c <hts221_init+0x388>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	4252      	negs	r2, r2
 8003ad0:	9202      	str	r2, [sp, #8]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	9201      	str	r2, [sp, #4]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	2301      	movs	r3, #1
 8003ada:	223d      	movs	r2, #61	; 0x3d
 8003adc:	21be      	movs	r1, #190	; 0xbe
 8003ade:	f003 f9fd 	bl	8006edc <HAL_I2C_Mem_Read>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003ae6:	197b      	adds	r3, r7, r5
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <hts221_init+0x13e>
            return NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e189      	b.n	8003e06 <hts221_init+0x452>
        }

        // buf[5] = HTS_CAL_T1_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 5, 1, HAL_MAX_DELAY);
 8003af2:	003b      	movs	r3, r7
 8003af4:	3305      	adds	r3, #5
 8003af6:	251f      	movs	r5, #31
 8003af8:	197c      	adds	r4, r7, r5
 8003afa:	4890      	ldr	r0, [pc, #576]	; (8003d3c <hts221_init+0x388>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	4252      	negs	r2, r2
 8003b00:	9202      	str	r2, [sp, #8]
 8003b02:	2201      	movs	r2, #1
 8003b04:	9201      	str	r2, [sp, #4]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2301      	movs	r3, #1
 8003b0a:	223e      	movs	r2, #62	; 0x3e
 8003b0c:	21be      	movs	r1, #190	; 0xbe
 8003b0e:	f003 f9e5 	bl	8006edc <HAL_I2C_Mem_Read>
 8003b12:	0003      	movs	r3, r0
 8003b14:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003b16:	197b      	adds	r3, r7, r5
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <hts221_init+0x16e>
            return NULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e171      	b.n	8003e06 <hts221_init+0x452>
        }

        // buf[6] = HTS_CAL_T1_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 6, 1, HAL_MAX_DELAY);
 8003b22:	003b      	movs	r3, r7
 8003b24:	3306      	adds	r3, #6
 8003b26:	251f      	movs	r5, #31
 8003b28:	197c      	adds	r4, r7, r5
 8003b2a:	4884      	ldr	r0, [pc, #528]	; (8003d3c <hts221_init+0x388>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	4252      	negs	r2, r2
 8003b30:	9202      	str	r2, [sp, #8]
 8003b32:	2201      	movs	r2, #1
 8003b34:	9201      	str	r2, [sp, #4]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2301      	movs	r3, #1
 8003b3a:	223f      	movs	r2, #63	; 0x3f
 8003b3c:	21be      	movs	r1, #190	; 0xbe
 8003b3e:	f003 f9cd 	bl	8006edc <HAL_I2C_Mem_Read>
 8003b42:	0003      	movs	r3, r0
 8003b44:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003b46:	197b      	adds	r3, r7, r5
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <hts221_init+0x19e>
            return NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e159      	b.n	8003e06 <hts221_init+0x452>
        }

        /* === Process temperature calibration data === */

        uint16_t T0_degC_R32 = buf[0];
 8003b52:	003b      	movs	r3, r7
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	201c      	movs	r0, #28
 8003b58:	183b      	adds	r3, r7, r0
 8003b5a:	801a      	strh	r2, [r3, #0]
        uint16_t T1_degC_R33 = buf[1];
 8003b5c:	003b      	movs	r3, r7
 8003b5e:	785a      	ldrb	r2, [r3, #1]
 8003b60:	241a      	movs	r4, #26
 8003b62:	193b      	adds	r3, r7, r4
 8003b64:	801a      	strh	r2, [r3, #0]
        uint16_t T1_T0_msb 	= buf[2];
 8003b66:	003b      	movs	r3, r7
 8003b68:	789a      	ldrb	r2, [r3, #2]
 8003b6a:	2518      	movs	r5, #24
 8003b6c:	197b      	adds	r3, r7, r5
 8003b6e:	801a      	strh	r2, [r3, #0]
        int16_t T0_OUT = (buf[3] | (buf[4] << 8)); // This should be signed int
 8003b70:	003b      	movs	r3, r7
 8003b72:	78db      	ldrb	r3, [r3, #3]
 8003b74:	b219      	sxth	r1, r3
 8003b76:	003b      	movs	r3, r7
 8003b78:	791b      	ldrb	r3, [r3, #4]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	b21a      	sxth	r2, r3
 8003b7e:	2616      	movs	r6, #22
 8003b80:	19bb      	adds	r3, r7, r6
 8003b82:	430a      	orrs	r2, r1
 8003b84:	801a      	strh	r2, [r3, #0]
        int16_t T1_OUT = (buf[5] | (buf[6] << 8)); // This should be signed int
 8003b86:	003b      	movs	r3, r7
 8003b88:	795b      	ldrb	r3, [r3, #5]
 8003b8a:	b219      	sxth	r1, r3
 8003b8c:	003b      	movs	r3, r7
 8003b8e:	799b      	ldrb	r3, [r3, #6]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	b21a      	sxth	r2, r3
 8003b94:	2314      	movs	r3, #20
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	801a      	strh	r2, [r3, #0]

        // add msb's for 10 bit values
        T0_degC_R32 |= (T1_T0_msb & 0b0011) << 8;
 8003b9c:	197b      	adds	r3, r7, r5
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	b21a      	sxth	r2, r3
 8003ba4:	23c0      	movs	r3, #192	; 0xc0
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b21a      	sxth	r2, r3
 8003bac:	183b      	adds	r3, r7, r0
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5e5b      	ldrsh	r3, [r3, r1]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	b21a      	sxth	r2, r3
 8003bb6:	183b      	adds	r3, r7, r0
 8003bb8:	801a      	strh	r2, [r3, #0]
        T1_degC_R33 |= (T1_T0_msb & 0b1100) << 6;
 8003bba:	197b      	adds	r3, r7, r5
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	019b      	lsls	r3, r3, #6
 8003bc0:	b21a      	sxth	r2, r3
 8003bc2:	23c0      	movs	r3, #192	; 0xc0
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	b21a      	sxth	r2, r3
 8003bca:	0021      	movs	r1, r4
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2400      	movs	r4, #0
 8003bd0:	5f1b      	ldrsh	r3, [r3, r4]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	b21a      	sxth	r2, r3
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	801a      	strh	r2, [r3, #0]

        // divide by 8
        T0_degC_R32 >>= 3;
 8003bda:	183b      	adds	r3, r7, r0
 8003bdc:	0004      	movs	r4, r0
 8003bde:	183a      	adds	r2, r7, r0
 8003be0:	8812      	ldrh	r2, [r2, #0]
 8003be2:	08d2      	lsrs	r2, r2, #3
 8003be4:	801a      	strh	r2, [r3, #0]
        T1_degC_R33 >>= 3;
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	000d      	movs	r5, r1
 8003bea:	187a      	adds	r2, r7, r1
 8003bec:	8812      	ldrh	r2, [r2, #0]
 8003bee:	08d2      	lsrs	r2, r2, #3
 8003bf0:	801a      	strh	r2, [r3, #0]

        // init struct to store calibration data
        HTS_Cal * hts_cal_data = malloc(sizeof(HTS_Cal));
 8003bf2:	2018      	movs	r0, #24
 8003bf4:	f006 fbbe 	bl	800a374 <malloc>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	613b      	str	r3, [r7, #16]

        hts_cal_data->T0_OUT = T0_OUT;
 8003bfc:	19bb      	adds	r3, r7, r6
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5e5a      	ldrsh	r2, [r3, r1]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	601a      	str	r2, [r3, #0]
        hts_cal_data->correction_factor = (float) (T1_degC_R33 - T0_degC_R32) / (T1_OUT - T0_OUT);
 8003c06:	197b      	adds	r3, r7, r5
 8003c08:	881a      	ldrh	r2, [r3, #0]
 8003c0a:	0025      	movs	r5, r4
 8003c0c:	193b      	adds	r3, r7, r4
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7fc fffa 	bl	8000c0c <__aeabi_i2f>
 8003c18:	1c04      	adds	r4, r0, #0
 8003c1a:	2314      	movs	r3, #20
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	2200      	movs	r2, #0
 8003c20:	5e9a      	ldrsh	r2, [r3, r2]
 8003c22:	19bb      	adds	r3, r7, r6
 8003c24:	2100      	movs	r1, #0
 8003c26:	5e5b      	ldrsh	r3, [r3, r1]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7fc ffee 	bl	8000c0c <__aeabi_i2f>
 8003c30:	1c03      	adds	r3, r0, #0
 8003c32:	1c19      	adds	r1, r3, #0
 8003c34:	1c20      	adds	r0, r4, #0
 8003c36:	f7fc fda3 	bl	8000780 <__aeabi_fdiv>
 8003c3a:	1c03      	adds	r3, r0, #0
 8003c3c:	1c1a      	adds	r2, r3, #0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	605a      	str	r2, [r3, #4]
        hts_cal_data->offset = T0_degC_R32;
 8003c42:	197b      	adds	r3, r7, r5
 8003c44:	881a      	ldrh	r2, [r3, #0]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	609a      	str	r2, [r3, #8]

        /*=== Read in humidity calibration data ===*/
        // buf[0] = HTS_CAL_H0_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003c4a:	251f      	movs	r5, #31
 8003c4c:	197c      	adds	r4, r7, r5
 8003c4e:	483b      	ldr	r0, [pc, #236]	; (8003d3c <hts221_init+0x388>)
 8003c50:	2301      	movs	r3, #1
 8003c52:	425b      	negs	r3, r3
 8003c54:	9302      	str	r3, [sp, #8]
 8003c56:	2301      	movs	r3, #1
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	003b      	movs	r3, r7
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2301      	movs	r3, #1
 8003c60:	2236      	movs	r2, #54	; 0x36
 8003c62:	21be      	movs	r1, #190	; 0xbe
 8003c64:	f003 f93a 	bl	8006edc <HAL_I2C_Mem_Read>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003c6c:	197b      	adds	r3, r7, r5
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <hts221_init+0x2c4>
            return NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e0c6      	b.n	8003e06 <hts221_init+0x452>
        }

        // buf[1] = HTS_CAL_H0_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8003c78:	003b      	movs	r3, r7
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	251f      	movs	r5, #31
 8003c7e:	197c      	adds	r4, r7, r5
 8003c80:	482e      	ldr	r0, [pc, #184]	; (8003d3c <hts221_init+0x388>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	4252      	negs	r2, r2
 8003c86:	9202      	str	r2, [sp, #8]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	9201      	str	r2, [sp, #4]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	2301      	movs	r3, #1
 8003c90:	2237      	movs	r2, #55	; 0x37
 8003c92:	21be      	movs	r1, #190	; 0xbe
 8003c94:	f003 f922 	bl	8006edc <HAL_I2C_Mem_Read>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003c9c:	197b      	adds	r3, r7, r5
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <hts221_init+0x2f4>
            return NULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e0ae      	b.n	8003e06 <hts221_init+0x452>
        }

        // buf[2] = HTS_CAL_H1_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8003ca8:	003b      	movs	r3, r7
 8003caa:	3302      	adds	r3, #2
 8003cac:	251f      	movs	r5, #31
 8003cae:	197c      	adds	r4, r7, r5
 8003cb0:	4822      	ldr	r0, [pc, #136]	; (8003d3c <hts221_init+0x388>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4252      	negs	r2, r2
 8003cb6:	9202      	str	r2, [sp, #8]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	9201      	str	r2, [sp, #4]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	223a      	movs	r2, #58	; 0x3a
 8003cc2:	21be      	movs	r1, #190	; 0xbe
 8003cc4:	f003 f90a 	bl	8006edc <HAL_I2C_Mem_Read>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003ccc:	197b      	adds	r3, r7, r5
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <hts221_init+0x324>
            return NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e096      	b.n	8003e06 <hts221_init+0x452>
        }

        // buf[3] = HTS_CAL_H1_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 3, 1, HAL_MAX_DELAY);
 8003cd8:	003b      	movs	r3, r7
 8003cda:	3303      	adds	r3, #3
 8003cdc:	251f      	movs	r5, #31
 8003cde:	197c      	adds	r4, r7, r5
 8003ce0:	4816      	ldr	r0, [pc, #88]	; (8003d3c <hts221_init+0x388>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	4252      	negs	r2, r2
 8003ce6:	9202      	str	r2, [sp, #8]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	9201      	str	r2, [sp, #4]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2301      	movs	r3, #1
 8003cf0:	223b      	movs	r2, #59	; 0x3b
 8003cf2:	21be      	movs	r1, #190	; 0xbe
 8003cf4:	f003 f8f2 	bl	8006edc <HAL_I2C_Mem_Read>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003cfc:	197b      	adds	r3, r7, r5
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <hts221_init+0x354>
            return NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e07e      	b.n	8003e06 <hts221_init+0x452>
        }

        // buf[4] = HTS_CAL_H0_rH_x2
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 4, 1, HAL_MAX_DELAY);
 8003d08:	003b      	movs	r3, r7
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	251f      	movs	r5, #31
 8003d0e:	197c      	adds	r4, r7, r5
 8003d10:	480a      	ldr	r0, [pc, #40]	; (8003d3c <hts221_init+0x388>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	4252      	negs	r2, r2
 8003d16:	9202      	str	r2, [sp, #8]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	9201      	str	r2, [sp, #4]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2301      	movs	r3, #1
 8003d20:	2230      	movs	r2, #48	; 0x30
 8003d22:	21be      	movs	r1, #190	; 0xbe
 8003d24:	f003 f8da 	bl	8006edc <HAL_I2C_Mem_Read>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003d2c:	197b      	adds	r3, r7, r5
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <hts221_init+0x38c>
            return NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e066      	b.n	8003e06 <hts221_init+0x452>
 8003d38:	0800a744 	.word	0x0800a744
 8003d3c:	200001c8 	.word	0x200001c8
        }

        // buf[5] = HTS_CAL_H1_rH_x2
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 5, 1, HAL_MAX_DELAY);
 8003d40:	003b      	movs	r3, r7
 8003d42:	3305      	adds	r3, #5
 8003d44:	251f      	movs	r5, #31
 8003d46:	197c      	adds	r4, r7, r5
 8003d48:	4831      	ldr	r0, [pc, #196]	; (8003e10 <hts221_init+0x45c>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	4252      	negs	r2, r2
 8003d4e:	9202      	str	r2, [sp, #8]
 8003d50:	2201      	movs	r2, #1
 8003d52:	9201      	str	r2, [sp, #4]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2301      	movs	r3, #1
 8003d58:	2231      	movs	r2, #49	; 0x31
 8003d5a:	21be      	movs	r1, #190	; 0xbe
 8003d5c:	f003 f8be 	bl	8006edc <HAL_I2C_Mem_Read>
 8003d60:	0003      	movs	r3, r0
 8003d62:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003d64:	197b      	adds	r3, r7, r5
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <hts221_init+0x3bc>
            return NULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e04a      	b.n	8003e06 <hts221_init+0x452>
        }

        /*=== Process humidity calibration data ===*/
        uint8_t H0_Rh_R30 = buf[4] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 8003d70:	003b      	movs	r3, r7
 8003d72:	791a      	ldrb	r2, [r3, #4]
 8003d74:	200f      	movs	r0, #15
 8003d76:	183b      	adds	r3, r7, r0
 8003d78:	0852      	lsrs	r2, r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]
        uint8_t H1_Rh_R31 = buf[5] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 8003d7c:	003b      	movs	r3, r7
 8003d7e:	795a      	ldrb	r2, [r3, #5]
 8003d80:	250e      	movs	r5, #14
 8003d82:	197b      	adds	r3, r7, r5
 8003d84:	0852      	lsrs	r2, r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
        int16_t H0_T0_OUT = (buf[0] | (buf[1] << 8)); // This should be signed int
 8003d88:	003b      	movs	r3, r7
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b219      	sxth	r1, r3
 8003d8e:	003b      	movs	r3, r7
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	b21a      	sxth	r2, r3
 8003d96:	240c      	movs	r4, #12
 8003d98:	193b      	adds	r3, r7, r4
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	801a      	strh	r2, [r3, #0]
        int16_t H1_T0_OUT = (buf[2] | (buf[3] << 8)); // This should be signed int
 8003d9e:	003b      	movs	r3, r7
 8003da0:	789b      	ldrb	r3, [r3, #2]
 8003da2:	b219      	sxth	r1, r3
 8003da4:	003b      	movs	r3, r7
 8003da6:	78db      	ldrb	r3, [r3, #3]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	b21a      	sxth	r2, r3
 8003dac:	230a      	movs	r3, #10
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	430a      	orrs	r2, r1
 8003db2:	801a      	strh	r2, [r3, #0]

        //Store Humid.
        hts_cal_data->H0_OUT = H0_T0_OUT;
 8003db4:	0026      	movs	r6, r4
 8003db6:	193b      	adds	r3, r7, r4
 8003db8:	2100      	movs	r1, #0
 8003dba:	5e5a      	ldrsh	r2, [r3, r1]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	60da      	str	r2, [r3, #12]
        hts_cal_data->humid_correction_factor = (float) (H1_Rh_R31 - H0_Rh_R30) / (H1_T0_OUT - H0_T0_OUT);
 8003dc0:	197b      	adds	r3, r7, r5
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	0005      	movs	r5, r0
 8003dc6:	183b      	adds	r3, r7, r0
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7fc ff1d 	bl	8000c0c <__aeabi_i2f>
 8003dd2:	1c04      	adds	r4, r0, #0
 8003dd4:	230a      	movs	r3, #10
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	5e9a      	ldrsh	r2, [r3, r2]
 8003ddc:	19bb      	adds	r3, r7, r6
 8003dde:	2100      	movs	r1, #0
 8003de0:	5e5b      	ldrsh	r3, [r3, r1]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7fc ff11 	bl	8000c0c <__aeabi_i2f>
 8003dea:	1c03      	adds	r3, r0, #0
 8003dec:	1c19      	adds	r1, r3, #0
 8003dee:	1c20      	adds	r0, r4, #0
 8003df0:	f7fc fcc6 	bl	8000780 <__aeabi_fdiv>
 8003df4:	1c03      	adds	r3, r0, #0
 8003df6:	1c1a      	adds	r2, r3, #0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	611a      	str	r2, [r3, #16]
        hts_cal_data->humid_offset = H0_Rh_R30;
 8003dfc:	197b      	adds	r3, r7, r5
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	615a      	str	r2, [r3, #20]

        return hts_cal_data;
 8003e04:	693b      	ldr	r3, [r7, #16]
    }

    return NULL;
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b009      	add	sp, #36	; 0x24
 8003e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	200001c8 	.word	0x200001c8

08003e14 <hts221_get_temp>:

int hts221_get_temp(char unit, HTS_Cal * hts_cal_data){
 8003e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e16:	b08d      	sub	sp, #52	; 0x34
 8003e18:	af04      	add	r7, sp, #16
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	1dfb      	adds	r3, r7, #7
 8003e20:	701a      	strb	r2, [r3, #0]
    uint8_t buf[7];			// read buffer
    int16_t T_OUT;			// T_OUT raw temperature reading
    int temp_adj;			// calibrated temperature value

    /* === Start a temperature reading === */
    buf[0] = HTS_CTRL_REG2_ONE_SHOT;
 8003e22:	210c      	movs	r1, #12
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003e2a:	231b      	movs	r3, #27
 8003e2c:	18fc      	adds	r4, r7, r3
 8003e2e:	4849      	ldr	r0, [pc, #292]	; (8003f54 <hts221_get_temp+0x140>)
 8003e30:	2301      	movs	r3, #1
 8003e32:	425b      	negs	r3, r3
 8003e34:	9302      	str	r3, [sp, #8]
 8003e36:	2301      	movs	r3, #1
 8003e38:	9301      	str	r3, [sp, #4]
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	2301      	movs	r3, #1
 8003e40:	2221      	movs	r2, #33	; 0x21
 8003e42:	21be      	movs	r1, #190	; 0xbe
 8003e44:	f002 ff1c 	bl	8006c80 <HAL_I2C_Mem_Write>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	7023      	strb	r3, [r4, #0]

    /* === Read in temperature data === */

    //TODO check that this loop is right...
    // Try three times for temp data to be ready
    for (int i = 0; i < 3; ++i) {
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	e01a      	b.n	8003e88 <hts221_get_temp+0x74>
        // buf[0] = HTS_STATUS_REG
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003e52:	231b      	movs	r3, #27
 8003e54:	18fc      	adds	r4, r7, r3
 8003e56:	483f      	ldr	r0, [pc, #252]	; (8003f54 <hts221_get_temp+0x140>)
 8003e58:	2301      	movs	r3, #1
 8003e5a:	425b      	negs	r3, r3
 8003e5c:	9302      	str	r3, [sp, #8]
 8003e5e:	2301      	movs	r3, #1
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	250c      	movs	r5, #12
 8003e64:	197b      	adds	r3, r7, r5
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2301      	movs	r3, #1
 8003e6a:	2227      	movs	r2, #39	; 0x27
 8003e6c:	21be      	movs	r1, #190	; 0xbe
 8003e6e:	f003 f835 	bl	8006edc <HAL_I2C_Mem_Read>
 8003e72:	0003      	movs	r3, r0
 8003e74:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
            // TODO: error handling
        }
        if (buf[0] & 1){
 8003e76:	197b      	adds	r3, r7, r5
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d106      	bne.n	8003e90 <hts221_get_temp+0x7c>
    for (int i = 0; i < 3; ++i) {
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3301      	adds	r3, #1
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	dde1      	ble.n	8003e52 <hts221_get_temp+0x3e>
 8003e8e:	e000      	b.n	8003e92 <hts221_get_temp+0x7e>
            // new temp. data ready
            break;
 8003e90:	46c0      	nop			; (mov r8, r8)
        }
        //TODO - HAL_WAIT?
    }

    // buf[1] = HTS_TEMP_OUT_L
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8003e92:	250c      	movs	r5, #12
 8003e94:	197b      	adds	r3, r7, r5
 8003e96:	3301      	adds	r3, #1
 8003e98:	261b      	movs	r6, #27
 8003e9a:	19bc      	adds	r4, r7, r6
 8003e9c:	482d      	ldr	r0, [pc, #180]	; (8003f54 <hts221_get_temp+0x140>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4252      	negs	r2, r2
 8003ea2:	9202      	str	r2, [sp, #8]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	9201      	str	r2, [sp, #4]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	2301      	movs	r3, #1
 8003eac:	222a      	movs	r2, #42	; 0x2a
 8003eae:	21be      	movs	r1, #190	; 0xbe
 8003eb0:	f003 f814 	bl	8006edc <HAL_I2C_Mem_Read>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
        // TODO: error handling
    }

    // buf[2] = HTS_TEMP_OUT_H
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8003eb8:	197b      	adds	r3, r7, r5
 8003eba:	3302      	adds	r3, #2
 8003ebc:	19bc      	adds	r4, r7, r6
 8003ebe:	4825      	ldr	r0, [pc, #148]	; (8003f54 <hts221_get_temp+0x140>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	4252      	negs	r2, r2
 8003ec4:	9202      	str	r2, [sp, #8]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	9201      	str	r2, [sp, #4]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	2301      	movs	r3, #1
 8003ece:	222b      	movs	r2, #43	; 0x2b
 8003ed0:	21be      	movs	r1, #190	; 0xbe
 8003ed2:	f003 f803 	bl	8006edc <HAL_I2C_Mem_Read>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
        // TODO: error handling
    }

    T_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 8003eda:	197b      	adds	r3, r7, r5
 8003edc:	785b      	ldrb	r3, [r3, #1]
 8003ede:	b219      	sxth	r1, r3
 8003ee0:	197b      	adds	r3, r7, r5
 8003ee2:	789b      	ldrb	r3, [r3, #2]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	b21a      	sxth	r2, r3
 8003ee8:	2018      	movs	r0, #24
 8003eea:	183b      	adds	r3, r7, r0
 8003eec:	430a      	orrs	r2, r1
 8003eee:	801a      	strh	r2, [r3, #0]

    temp_adj = hts221_calc_temp(T_OUT, hts_cal_data);
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	183b      	adds	r3, r7, r0
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	5e5b      	ldrsh	r3, [r3, r1]
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f000 f832 	bl	8003f64 <hts221_calc_temp>
 8003f00:	0003      	movs	r3, r0
 8003f02:	617b      	str	r3, [r7, #20]

    // Return in correct units
    if (unit == 'F'){
 8003f04:	1dfb      	adds	r3, r7, #7
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b46      	cmp	r3, #70	; 0x46
 8003f0a:	d11e      	bne.n	8003f4a <hts221_get_temp+0x136>
        //Fahrenheit
        return (temp_adj * 9.0 / 5.0) + 32;
 8003f0c:	6978      	ldr	r0, [r7, #20]
 8003f0e:	f7fd ffb7 	bl	8001e80 <__aeabi_i2d>
 8003f12:	2200      	movs	r2, #0
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <hts221_get_temp+0x144>)
 8003f16:	f7fd fd11 	bl	800193c <__aeabi_dmul>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	000b      	movs	r3, r1
 8003f1e:	0010      	movs	r0, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	2200      	movs	r2, #0
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <hts221_get_temp+0x148>)
 8003f26:	f7fd fa21 	bl	800136c <__aeabi_ddiv>
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	000b      	movs	r3, r1
 8003f2e:	0010      	movs	r0, r2
 8003f30:	0019      	movs	r1, r3
 8003f32:	2200      	movs	r2, #0
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <hts221_get_temp+0x14c>)
 8003f36:	f7fc feaf 	bl	8000c98 <__aeabi_dadd>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	000b      	movs	r3, r1
 8003f3e:	0010      	movs	r0, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	f7fd ff67 	bl	8001e14 <__aeabi_d2iz>
 8003f46:	0003      	movs	r3, r0
 8003f48:	e000      	b.n	8003f4c <hts221_get_temp+0x138>

    }
    else {
        //Celsius
        return temp_adj;
 8003f4a:	697b      	ldr	r3, [r7, #20]
    }

}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b009      	add	sp, #36	; 0x24
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f54:	200001c8 	.word	0x200001c8
 8003f58:	40220000 	.word	0x40220000
 8003f5c:	40140000 	.word	0x40140000
 8003f60:	40400000 	.word	0x40400000

08003f64 <hts221_calc_temp>:

int hts221_calc_temp(int16_t T_OUT, HTS_Cal * hts_cal_data) {
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	1dbb      	adds	r3, r7, #6
 8003f70:	801a      	strh	r2, [r3, #0]

    int zeroed_temp = T_OUT - hts_cal_data->T0_OUT;
 8003f72:	1dbb      	adds	r3, r7, #6
 8003f74:	2200      	movs	r2, #0
 8003f76:	5e9a      	ldrsh	r2, [r3, r2]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	60fb      	str	r3, [r7, #12]
    int temp_adj = (zeroed_temp * hts_cal_data->correction_factor) + hts_cal_data->offset;
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7fc fe43 	bl	8000c0c <__aeabi_i2f>
 8003f86:	1c02      	adds	r2, r0, #0
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	1c19      	adds	r1, r3, #0
 8003f8e:	1c10      	adds	r0, r2, #0
 8003f90:	f7fc fd02 	bl	8000998 <__aeabi_fmul>
 8003f94:	1c03      	adds	r3, r0, #0
 8003f96:	1c1c      	adds	r4, r3, #0
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7fc fe35 	bl	8000c0c <__aeabi_i2f>
 8003fa2:	1c03      	adds	r3, r0, #0
 8003fa4:	1c19      	adds	r1, r3, #0
 8003fa6:	1c20      	adds	r0, r4, #0
 8003fa8:	f7fc fa4e 	bl	8000448 <__aeabi_fadd>
 8003fac:	1c03      	adds	r3, r0, #0
 8003fae:	1c18      	adds	r0, r3, #0
 8003fb0:	f7fc fe0c 	bl	8000bcc <__aeabi_f2iz>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	60bb      	str	r3, [r7, #8]

    return temp_adj;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b005      	add	sp, #20
 8003fc0:	bd90      	pop	{r4, r7, pc}
	...

08003fc4 <hts221_get_humid>:

int hts221_get_humid(HTS_Cal * hts_cal_data) {
 8003fc4:	b5b0      	push	{r4, r5, r7, lr}
 8003fc6:	b08c      	sub	sp, #48	; 0x30
 8003fc8:	af04      	add	r7, sp, #16
 8003fca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];			// read buffer
    int16_t H_OUT;			// H_OUT raw temperature reading
    int humid_adj;			// calibrated temperature value

    /* === Start a humidity reading === */
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003fcc:	251f      	movs	r5, #31
 8003fce:	197c      	adds	r4, r7, r5
 8003fd0:	4866      	ldr	r0, [pc, #408]	; (800416c <hts221_get_humid+0x1a8>)
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	9302      	str	r3, [sp, #8]
 8003fd8:	2301      	movs	r3, #1
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	230c      	movs	r3, #12
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	2221      	movs	r2, #33	; 0x21
 8003fe6:	21be      	movs	r1, #190	; 0xbe
 8003fe8:	f002 ff78 	bl	8006edc <HAL_I2C_Mem_Read>
 8003fec:	0003      	movs	r3, r0
 8003fee:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8003ff0:	197b      	adds	r3, r7, r5
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <hts221_get_humid+0x3a>
        return HUMID_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	425b      	negs	r3, r3
 8003ffc:	e0b2      	b.n	8004164 <hts221_get_humid+0x1a0>
    }

    buf[0] |= HTS_CTRL_REG2_ONE_SHOT;
 8003ffe:	210c      	movs	r1, #12
 8004000:	187b      	adds	r3, r7, r1
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2201      	movs	r2, #1
 8004006:	4313      	orrs	r3, r2
 8004008:	b2da      	uxtb	r2, r3
 800400a:	187b      	adds	r3, r7, r1
 800400c:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 800400e:	251f      	movs	r5, #31
 8004010:	197c      	adds	r4, r7, r5
 8004012:	4856      	ldr	r0, [pc, #344]	; (800416c <hts221_get_humid+0x1a8>)
 8004014:	2301      	movs	r3, #1
 8004016:	425b      	negs	r3, r3
 8004018:	9302      	str	r3, [sp, #8]
 800401a:	2301      	movs	r3, #1
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	187b      	adds	r3, r7, r1
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2301      	movs	r3, #1
 8004024:	2221      	movs	r2, #33	; 0x21
 8004026:	21be      	movs	r1, #190	; 0xbe
 8004028:	f002 fe2a 	bl	8006c80 <HAL_I2C_Mem_Write>
 800402c:	0003      	movs	r3, r0
 800402e:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8004030:	197b      	adds	r3, r7, r5
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <hts221_get_humid+0x7a>
        return HUMID_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	425b      	negs	r3, r3
 800403c:	e092      	b.n	8004164 <hts221_get_humid+0x1a0>
    }

    // wait for one shot bit to clear by the hts
    do{
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 800403e:	251f      	movs	r5, #31
 8004040:	197c      	adds	r4, r7, r5
 8004042:	484a      	ldr	r0, [pc, #296]	; (800416c <hts221_get_humid+0x1a8>)
 8004044:	2301      	movs	r3, #1
 8004046:	425b      	negs	r3, r3
 8004048:	9302      	str	r3, [sp, #8]
 800404a:	2301      	movs	r3, #1
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	230c      	movs	r3, #12
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2301      	movs	r3, #1
 8004056:	2221      	movs	r2, #33	; 0x21
 8004058:	21be      	movs	r1, #190	; 0xbe
 800405a:	f002 ff3f 	bl	8006edc <HAL_I2C_Mem_Read>
 800405e:	0003      	movs	r3, r0
 8004060:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8004062:	197b      	adds	r3, r7, r5
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <hts221_get_humid+0xac>
            return HUMID_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	425b      	negs	r3, r3
 800406e:	e079      	b.n	8004164 <hts221_get_humid+0x1a0>
        }
    } while (buf[0] & HTS_CTRL_REG2_ONE_SHOT);
 8004070:	210c      	movs	r1, #12
 8004072:	187b      	adds	r3, r7, r1
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	001a      	movs	r2, r3
 8004078:	2301      	movs	r3, #1
 800407a:	4013      	ands	r3, r2
 800407c:	d1df      	bne.n	800403e <hts221_get_humid+0x7a>

    /* === Read in humidity data === */

    //TODO check that this loop is right...
    // Try three times for temp data to be ready
    for (int i = 0; i < 3; ++i) {
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b02      	cmp	r3, #2
 8004086:	dc22      	bgt.n	80040ce <hts221_get_humid+0x10a>
        // buf[0] = HTS_STATUS_REG
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8004088:	251f      	movs	r5, #31
 800408a:	197c      	adds	r4, r7, r5
 800408c:	4837      	ldr	r0, [pc, #220]	; (800416c <hts221_get_humid+0x1a8>)
 800408e:	2301      	movs	r3, #1
 8004090:	425b      	negs	r3, r3
 8004092:	9302      	str	r3, [sp, #8]
 8004094:	2301      	movs	r3, #1
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	187b      	adds	r3, r7, r1
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2301      	movs	r3, #1
 800409e:	2227      	movs	r2, #39	; 0x27
 80040a0:	21be      	movs	r1, #190	; 0xbe
 80040a2:	f002 ff1b 	bl	8006edc <HAL_I2C_Mem_Read>
 80040a6:	0003      	movs	r3, r0
 80040a8:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80040aa:	197b      	adds	r3, r7, r5
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <hts221_get_humid+0xf4>
            return HUMID_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	425b      	negs	r3, r3
 80040b6:	e055      	b.n	8004164 <hts221_get_humid+0x1a0>
        }
        if (buf[0] & 2){
 80040b8:	230c      	movs	r3, #12
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	001a      	movs	r2, r3
 80040c0:	2302      	movs	r3, #2
 80040c2:	4013      	ands	r3, r2
 80040c4:	d102      	bne.n	80040cc <hts221_get_humid+0x108>
            // new humid. data ready
            break;
        }
        return HUMID_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	425b      	negs	r3, r3
 80040ca:	e04b      	b.n	8004164 <hts221_get_humid+0x1a0>
            break;
 80040cc:	46c0      	nop			; (mov r8, r8)
    }

    // buf[1] = HTS_HUMIDITY_OUT_L
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 80040ce:	230c      	movs	r3, #12
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	251f      	movs	r5, #31
 80040d6:	197c      	adds	r4, r7, r5
 80040d8:	4824      	ldr	r0, [pc, #144]	; (800416c <hts221_get_humid+0x1a8>)
 80040da:	2201      	movs	r2, #1
 80040dc:	4252      	negs	r2, r2
 80040de:	9202      	str	r2, [sp, #8]
 80040e0:	2201      	movs	r2, #1
 80040e2:	9201      	str	r2, [sp, #4]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	2301      	movs	r3, #1
 80040e8:	2228      	movs	r2, #40	; 0x28
 80040ea:	21be      	movs	r1, #190	; 0xbe
 80040ec:	f002 fef6 	bl	8006edc <HAL_I2C_Mem_Read>
 80040f0:	0003      	movs	r3, r0
 80040f2:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 80040f4:	197b      	adds	r3, r7, r5
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <hts221_get_humid+0x13e>
        return HUMID_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	425b      	negs	r3, r3
 8004100:	e030      	b.n	8004164 <hts221_get_humid+0x1a0>
    }

    // buf[2] = HTS_HUMIDITY_OUT_H
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8004102:	230c      	movs	r3, #12
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	3302      	adds	r3, #2
 8004108:	251f      	movs	r5, #31
 800410a:	197c      	adds	r4, r7, r5
 800410c:	4817      	ldr	r0, [pc, #92]	; (800416c <hts221_get_humid+0x1a8>)
 800410e:	2201      	movs	r2, #1
 8004110:	4252      	negs	r2, r2
 8004112:	9202      	str	r2, [sp, #8]
 8004114:	2201      	movs	r2, #1
 8004116:	9201      	str	r2, [sp, #4]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	2301      	movs	r3, #1
 800411c:	2229      	movs	r2, #41	; 0x29
 800411e:	21be      	movs	r1, #190	; 0xbe
 8004120:	f002 fedc 	bl	8006edc <HAL_I2C_Mem_Read>
 8004124:	0003      	movs	r3, r0
 8004126:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8004128:	197b      	adds	r3, r7, r5
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <hts221_get_humid+0x172>
        return HUMID_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	425b      	negs	r3, r3
 8004134:	e016      	b.n	8004164 <hts221_get_humid+0x1a0>
    }

    H_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 8004136:	220c      	movs	r2, #12
 8004138:	18bb      	adds	r3, r7, r2
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	b219      	sxth	r1, r3
 800413e:	18bb      	adds	r3, r7, r2
 8004140:	789b      	ldrb	r3, [r3, #2]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	b21a      	sxth	r2, r3
 8004146:	2016      	movs	r0, #22
 8004148:	183b      	adds	r3, r7, r0
 800414a:	430a      	orrs	r2, r1
 800414c:	801a      	strh	r2, [r3, #0]

    humid_adj = hts221_calc_humid(H_OUT, hts_cal_data);
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	183b      	adds	r3, r7, r0
 8004152:	2100      	movs	r1, #0
 8004154:	5e5b      	ldrsh	r3, [r3, r1]
 8004156:	0011      	movs	r1, r2
 8004158:	0018      	movs	r0, r3
 800415a:	f000 f809 	bl	8004170 <hts221_calc_humid>
 800415e:	0003      	movs	r3, r0
 8004160:	613b      	str	r3, [r7, #16]

    return humid_adj;
 8004162:	693b      	ldr	r3, [r7, #16]

}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b008      	add	sp, #32
 800416a:	bdb0      	pop	{r4, r5, r7, pc}
 800416c:	200001c8 	.word	0x200001c8

08004170 <hts221_calc_humid>:

int hts221_calc_humid(int16_t H_OUT, HTS_Cal * hts_cal_data){
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	0002      	movs	r2, r0
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	1dbb      	adds	r3, r7, #6
 800417c:	801a      	strh	r2, [r3, #0]

    int zeroed_humid = H_OUT - hts_cal_data->H0_OUT;
 800417e:	1dbb      	adds	r3, r7, #6
 8004180:	2200      	movs	r2, #0
 8004182:	5e9a      	ldrsh	r2, [r3, r2]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	60fb      	str	r3, [r7, #12]
    int humid_adj = (zeroed_humid * hts_cal_data->humid_correction_factor) + hts_cal_data->humid_offset;
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7fc fd3d 	bl	8000c0c <__aeabi_i2f>
 8004192:	1c02      	adds	r2, r0, #0
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	1c19      	adds	r1, r3, #0
 800419a:	1c10      	adds	r0, r2, #0
 800419c:	f7fc fbfc 	bl	8000998 <__aeabi_fmul>
 80041a0:	1c03      	adds	r3, r0, #0
 80041a2:	1c1c      	adds	r4, r3, #0
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	0018      	movs	r0, r3
 80041aa:	f7fc fd2f 	bl	8000c0c <__aeabi_i2f>
 80041ae:	1c03      	adds	r3, r0, #0
 80041b0:	1c19      	adds	r1, r3, #0
 80041b2:	1c20      	adds	r0, r4, #0
 80041b4:	f7fc f948 	bl	8000448 <__aeabi_fadd>
 80041b8:	1c03      	adds	r3, r0, #0
 80041ba:	1c18      	adds	r0, r3, #0
 80041bc:	f7fc fd06 	bl	8000bcc <__aeabi_f2iz>
 80041c0:	0003      	movs	r3, r0
 80041c2:	60bb      	str	r3, [r7, #8]

    return humid_adj;
 80041c4:	68bb      	ldr	r3, [r7, #8]

 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b005      	add	sp, #20
 80041cc:	bd90      	pop	{r4, r7, pc}
	...

080041d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041d4:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <MX_I2C1_Init+0x74>)
 80041d6:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <MX_I2C1_Init+0x78>)
 80041d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80041da:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <MX_I2C1_Init+0x74>)
 80041dc:	4a1b      	ldr	r2, [pc, #108]	; (800424c <MX_I2C1_Init+0x7c>)
 80041de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041e0:	4b18      	ldr	r3, [pc, #96]	; (8004244 <MX_I2C1_Init+0x74>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <MX_I2C1_Init+0x74>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <MX_I2C1_Init+0x74>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <MX_I2C1_Init+0x74>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <MX_I2C1_Init+0x74>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <MX_I2C1_Init+0x74>)
 8004200:	2200      	movs	r2, #0
 8004202:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <MX_I2C1_Init+0x74>)
 8004206:	2200      	movs	r2, #0
 8004208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <MX_I2C1_Init+0x74>)
 800420c:	0018      	movs	r0, r3
 800420e:	f002 fca1 	bl	8006b54 <HAL_I2C_Init>
 8004212:	1e03      	subs	r3, r0, #0
 8004214:	d001      	beq.n	800421a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004216:	f000 f9d3 	bl	80045c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <MX_I2C1_Init+0x74>)
 800421c:	2100      	movs	r1, #0
 800421e:	0018      	movs	r0, r3
 8004220:	f003 f9ce 	bl	80075c0 <HAL_I2CEx_ConfigAnalogFilter>
 8004224:	1e03      	subs	r3, r0, #0
 8004226:	d001      	beq.n	800422c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004228:	f000 f9ca 	bl	80045c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <MX_I2C1_Init+0x74>)
 800422e:	2100      	movs	r1, #0
 8004230:	0018      	movs	r0, r3
 8004232:	f003 fa11 	bl	8007658 <HAL_I2CEx_ConfigDigitalFilter>
 8004236:	1e03      	subs	r3, r0, #0
 8004238:	d001      	beq.n	800423e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800423a:	f000 f9c1 	bl	80045c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	200001c8 	.word	0x200001c8
 8004248:	40005400 	.word	0x40005400
 800424c:	00707cbb 	.word	0x00707cbb

08004250 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004258:	240c      	movs	r4, #12
 800425a:	193b      	adds	r3, r7, r4
 800425c:	0018      	movs	r0, r3
 800425e:	2314      	movs	r3, #20
 8004260:	001a      	movs	r2, r3
 8004262:	2100      	movs	r1, #0
 8004264:	f006 f899 	bl	800a39a <memset>
  if(i2cHandle->Instance==I2C1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <HAL_I2C_MspInit+0x80>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d129      	bne.n	80042c6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <HAL_I2C_MspInit+0x84>)
 8004274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004276:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <HAL_I2C_MspInit+0x84>)
 8004278:	2102      	movs	r1, #2
 800427a:	430a      	orrs	r2, r1
 800427c:	62da      	str	r2, [r3, #44]	; 0x2c
 800427e:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <HAL_I2C_MspInit+0x84>)
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	2202      	movs	r2, #2
 8004284:	4013      	ands	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800428a:	193b      	adds	r3, r7, r4
 800428c:	22c0      	movs	r2, #192	; 0xc0
 800428e:	0092      	lsls	r2, r2, #2
 8004290:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004292:	0021      	movs	r1, r4
 8004294:	187b      	adds	r3, r7, r1
 8004296:	2212      	movs	r2, #18
 8004298:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800429a:	187b      	adds	r3, r7, r1
 800429c:	2201      	movs	r2, #1
 800429e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a0:	187b      	adds	r3, r7, r1
 80042a2:	2203      	movs	r2, #3
 80042a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	2204      	movs	r2, #4
 80042aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ac:	187b      	adds	r3, r7, r1
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <HAL_I2C_MspInit+0x88>)
 80042b0:	0019      	movs	r1, r3
 80042b2:	0010      	movs	r0, r2
 80042b4:	f002 fa94 	bl	80067e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_I2C_MspInit+0x84>)
 80042ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_I2C_MspInit+0x84>)
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	0389      	lsls	r1, r1, #14
 80042c2:	430a      	orrs	r2, r1
 80042c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b009      	add	sp, #36	; 0x24
 80042cc:	bd90      	pop	{r4, r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	40005400 	.word	0x40005400
 80042d4:	40021000 	.word	0x40021000
 80042d8:	50000400 	.word	0x50000400

080042dc <HAL_ADC_LevelOutOfWindowCallback>:
  display(false);
  serial_println("Done!\n");

}

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
    serial_println("*** ADC WATCHDOG INTERRUPT ***");
 80042e4:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_ADC_LevelOutOfWindowCallback+0xf8>)
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 fa18 	bl	800471c <serial_println>
    HAL_Delay(500);
 80042ec:	23fa      	movs	r3, #250	; 0xfa
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	0018      	movs	r0, r3
 80042f2:	f001 fb19 	bl	8005928 <HAL_Delay>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 80042f6:	2301      	movs	r3, #1
 80042f8:	425a      	negs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0011      	movs	r1, r2
 80042fe:	0018      	movs	r0, r3
 8004300:	f001 fd3e 	bl	8005d80 <HAL_ADC_PollForConversion>
    uint32_t adc_value = HAL_ADC_GetValue(hadc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	0018      	movs	r0, r3
 8004308:	f001 fdd0 	bl	8005eac <HAL_ADC_GetValue>
 800430c:	0003      	movs	r3, r0
 800430e:	617b      	str	r3, [r7, #20]
    serial_printf("ADC reading: %d\n", adc_value);
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_ADC_LevelOutOfWindowCallback+0xfc>)
 8004314:	0011      	movs	r1, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f000 fa40 	bl	800479c <serial_printf>
    HAL_ADC_Stop(hadc);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	0018      	movs	r0, r3
 8004320:	f001 fcee 	bl	8005d00 <HAL_ADC_Stop>

    // Change the thresholds
    uint32_t curr_upper = (hadc->Instance->TR >> 16) & 0x00000FFF;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	051b      	lsls	r3, r3, #20
 800432e:	0d1b      	lsrs	r3, r3, #20
 8004330:	613b      	str	r3, [r7, #16]
    uint32_t curr_lower = (hadc->Instance->TR & 0x00000FFF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	051b      	lsls	r3, r3, #20
 800433a:	0d1b      	lsrs	r3, r3, #20
 800433c:	60fb      	str	r3, [r7, #12]

    if (curr_upper != 0x0FFF) { //  we trig'd because something was placed onto the sensor
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4a26      	ldr	r2, [pc, #152]	; (80043dc <HAL_ADC_LevelOutOfWindowCallback+0x100>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01c      	beq.n	8004380 <HAL_ADC_LevelOutOfWindowCallback+0xa4>
        serial_println("Something was placed on me!");
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <HAL_ADC_LevelOutOfWindowCallback+0x104>)
 8004348:	0018      	movs	r0, r3
 800434a:	f000 f9e7 	bl	800471c <serial_println>
        // change upper threshold to max so that it can't be triggered due to something sitting on the pressure sensor
        hadc->Instance->TR = (0x0FFF << 16);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a24      	ldr	r2, [pc, #144]	; (80043e4 <HAL_ADC_LevelOutOfWindowCallback+0x108>)
 8004354:	621a      	str	r2, [r3, #32]
        hadc->Instance->TR |= curr_upper;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a19      	ldr	r1, [r3, #32]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	430a      	orrs	r2, r1
 8004364:	621a      	str	r2, [r3, #32]
        HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <HAL_ADC_LevelOutOfWindowCallback+0x10c>)
 8004368:	2200      	movs	r2, #0
 800436a:	2120      	movs	r1, #32
 800436c:	0018      	movs	r0, r3
 800436e:	f002 fbad 	bl	8006acc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_ADC_LevelOutOfWindowCallback+0x10c>)
 8004374:	2201      	movs	r2, #1
 8004376:	2110      	movs	r1, #16
 8004378:	0018      	movs	r0, r3
 800437a:	f002 fba7 	bl	8006acc <HAL_GPIO_WritePin>
 800437e:	e01c      	b.n	80043ba <HAL_ADC_LevelOutOfWindowCallback+0xde>
    } else {
        serial_println("Something was removed from me!");
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_ADC_LevelOutOfWindowCallback+0x110>)
 8004382:	0018      	movs	r0, r3
 8004384:	f000 f9ca 	bl	800471c <serial_println>
        hadc->Instance->TR = (curr_lower << 16);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	0412      	lsls	r2, r2, #16
 8004390:	621a      	str	r2, [r3, #32]
        hadc->Instance->TR &= ~(0x0000FFFF); // clear the lower threshold
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	0c12      	lsrs	r2, r2, #16
 800439e:	0412      	lsls	r2, r2, #16
 80043a0:	621a      	str	r2, [r3, #32]
        HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <HAL_ADC_LevelOutOfWindowCallback+0x10c>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	2120      	movs	r1, #32
 80043a8:	0018      	movs	r0, r3
 80043aa:	f002 fb8f 	bl	8006acc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_ADC_LevelOutOfWindowCallback+0x10c>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	2110      	movs	r1, #16
 80043b4:	0018      	movs	r0, r3
 80043b6:	f002 fb89 	bl	8006acc <HAL_GPIO_WritePin>
    }

    serial_print("\n");
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <HAL_ADC_LevelOutOfWindowCallback+0x114>)
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 f997 	bl	80046f0 <serial_print>

    HAL_ADC_Start(hadc);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	0018      	movs	r0, r3
 80043c6:	f001 fc47 	bl	8005c58 <HAL_ADC_Start>

}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b006      	add	sp, #24
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	0800a7e0 	.word	0x0800a7e0
 80043d8:	0800a800 	.word	0x0800a800
 80043dc:	00000fff 	.word	0x00000fff
 80043e0:	0800a814 	.word	0x0800a814
 80043e4:	0fff0000 	.word	0x0fff0000
 80043e8:	50000400 	.word	0x50000400
 80043ec:	0800a830 	.word	0x0800a830
 80043f0:	0800a850 	.word	0x0800a850

080043f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043f8:	f001 fa26 	bl	8005848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043fc:	f000 f844 	bl	8004488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004400:	f7ff f9b2 	bl	8003768 <MX_GPIO_Init>
  MX_DMA_Init();
 8004404:	f7fe f806 	bl	8002414 <MX_DMA_Init>
  MX_I2C1_Init();
 8004408:	f7ff fee2 	bl	80041d0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800440c:	f001 f812 	bl	8005434 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8004410:	f000 ff80 	bl	8005314 <MX_TIM6_Init>
  MX_SPI1_Init();
 8004414:	f000 fa72 	bl	80048fc <MX_SPI1_Init>
  MX_ADC_Init();
 8004418:	f7fd fd8c 	bl	8001f34 <MX_ADC_Init>
  MX_TIM2_Init();
 800441c:	f000 ff26 	bl	800526c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004420:	f000 ffd8 	bl	80053d4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004424:	f000 f8a8 	bl	8004578 <MX_NVIC_Init>
  serial_printf("%s\n", prediction_days);
  serial_println("Did you see that? I was chatting with the wi-fi module for a little bit ;)");
*/

  // Clear the serial debug terminal
  serial_select(DEBUG_PRINT);
 8004428:	2001      	movs	r0, #1
 800442a:	f000 f913 	bl	8004654 <serial_select>
  serial_clear();
 800442e:	f000 f945 	bl	80046bc <serial_clear>
  epd_init(false);
 8004432:	2000      	movs	r0, #0
 8004434:	f7fe f9e4 	bl	8002800 <epd_init>

  // Disable prox interrupt while refreshing display
  VCNL4010_disable_Interrupt();
 8004438:	f001 f8a2 	bl	8005580 <VCNL4010_disable_Interrupt>

//  display_setup();

  serial_printf("Initializing I2C peripherals... ");
 800443c:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <main+0x80>)
 800443e:	0018      	movs	r0, r3
 8004440:	f000 f9ac 	bl	800479c <serial_printf>
  hts_cal_data = hts221_init();
 8004444:	f7ff fab6 	bl	80039b4 <hts221_init>
 8004448:	0002      	movs	r2, r0
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <main+0x84>)
 800444c:	601a      	str	r2, [r3, #0]
//  bq_init_ret = bq_init();
  VCNL4010_setLEDcurrent(20);
 800444e:	2014      	movs	r0, #20
 8004450:	f001 f8fb 	bl	800564a <VCNL4010_setLEDcurrent>
  VCNL4010_enable_Interrupt();
 8004454:	f001 f8b0 	bl	80055b8 <VCNL4010_enable_Interrupt>
  serial_println("Done!");
 8004458:	4b08      	ldr	r3, [pc, #32]	; (800447c <main+0x88>)
 800445a:	0018      	movs	r0, r3
 800445c:	f000 f95e 	bl	800471c <serial_println>
  serial_printf("Health\t\t\t\t\t%d\t%%\r\n", soh);
  serial_printf("Battery Pack Temp\t\t\t%d\tK\r\n", temp_bat);
  serial_printf("Current Bat IC Temp is\t\t\t%d\tK\r\n", temp_bq_IC);
   */

  HAL_TIM_Base_Start_IT(&htim6);
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <main+0x8c>)
 8004462:	0018      	movs	r0, r3
 8004464:	f004 feda 	bl	800921c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <main+0x90>)
 800446a:	0018      	movs	r0, r3
 800446c:	f004 fed6 	bl	800921c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004470:	e7fe      	b.n	8004470 <main+0x7c>
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	0800a854 	.word	0x0800a854
 8004478:	20000214 	.word	0x20000214
 800447c:	0800a770 	.word	0x0800a770
 8004480:	200002fc 	.word	0x200002fc
 8004484:	2000033c 	.word	0x2000033c

08004488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b09d      	sub	sp, #116	; 0x74
 800448c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800448e:	2438      	movs	r4, #56	; 0x38
 8004490:	193b      	adds	r3, r7, r4
 8004492:	0018      	movs	r0, r3
 8004494:	2338      	movs	r3, #56	; 0x38
 8004496:	001a      	movs	r2, r3
 8004498:	2100      	movs	r1, #0
 800449a:	f005 ff7e 	bl	800a39a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800449e:	2324      	movs	r3, #36	; 0x24
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	0018      	movs	r0, r3
 80044a4:	2314      	movs	r3, #20
 80044a6:	001a      	movs	r2, r3
 80044a8:	2100      	movs	r1, #0
 80044aa:	f005 ff76 	bl	800a39a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044ae:	003b      	movs	r3, r7
 80044b0:	0018      	movs	r0, r3
 80044b2:	2324      	movs	r3, #36	; 0x24
 80044b4:	001a      	movs	r2, r3
 80044b6:	2100      	movs	r1, #0
 80044b8:	f005 ff6f 	bl	800a39a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044bc:	4b2c      	ldr	r3, [pc, #176]	; (8004570 <SystemClock_Config+0xe8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <SystemClock_Config+0xec>)
 80044c2:	401a      	ands	r2, r3
 80044c4:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <SystemClock_Config+0xe8>)
 80044c6:	2180      	movs	r1, #128	; 0x80
 80044c8:	0109      	lsls	r1, r1, #4
 80044ca:	430a      	orrs	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044ce:	0021      	movs	r1, r4
 80044d0:	187b      	adds	r3, r7, r1
 80044d2:	2202      	movs	r2, #2
 80044d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	2201      	movs	r2, #1
 80044da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044dc:	187b      	adds	r3, r7, r1
 80044de:	2210      	movs	r2, #16
 80044e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044e2:	187b      	adds	r3, r7, r1
 80044e4:	2202      	movs	r2, #2
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044e8:	187b      	adds	r3, r7, r1
 80044ea:	2200      	movs	r2, #0
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80044ee:	187b      	adds	r3, r7, r1
 80044f0:	2280      	movs	r2, #128	; 0x80
 80044f2:	02d2      	lsls	r2, r2, #11
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80044f6:	187b      	adds	r3, r7, r1
 80044f8:	2280      	movs	r2, #128	; 0x80
 80044fa:	03d2      	lsls	r2, r2, #15
 80044fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044fe:	187b      	adds	r3, r7, r1
 8004500:	0018      	movs	r0, r3
 8004502:	f003 f8f5 	bl	80076f0 <HAL_RCC_OscConfig>
 8004506:	1e03      	subs	r3, r0, #0
 8004508:	d001      	beq.n	800450e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800450a:	f000 f859 	bl	80045c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800450e:	2124      	movs	r1, #36	; 0x24
 8004510:	187b      	adds	r3, r7, r1
 8004512:	220f      	movs	r2, #15
 8004514:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004516:	187b      	adds	r3, r7, r1
 8004518:	2203      	movs	r2, #3
 800451a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800451c:	187b      	adds	r3, r7, r1
 800451e:	2200      	movs	r2, #0
 8004520:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004522:	187b      	adds	r3, r7, r1
 8004524:	2200      	movs	r2, #0
 8004526:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004528:	187b      	adds	r3, r7, r1
 800452a:	2200      	movs	r2, #0
 800452c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800452e:	187b      	adds	r3, r7, r1
 8004530:	2101      	movs	r1, #1
 8004532:	0018      	movs	r0, r3
 8004534:	f003 fca0 	bl	8007e78 <HAL_RCC_ClockConfig>
 8004538:	1e03      	subs	r3, r0, #0
 800453a:	d001      	beq.n	8004540 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800453c:	f000 f840 	bl	80045c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004540:	003b      	movs	r3, r7
 8004542:	220b      	movs	r2, #11
 8004544:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004546:	003b      	movs	r3, r7
 8004548:	2200      	movs	r2, #0
 800454a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800454c:	003b      	movs	r3, r7
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004552:	003b      	movs	r3, r7
 8004554:	2200      	movs	r2, #0
 8004556:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004558:	003b      	movs	r3, r7
 800455a:	0018      	movs	r0, r3
 800455c:	f003 feb0 	bl	80082c0 <HAL_RCCEx_PeriphCLKConfig>
 8004560:	1e03      	subs	r3, r0, #0
 8004562:	d001      	beq.n	8004568 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8004564:	f000 f82c 	bl	80045c0 <Error_Handler>
  }
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b01d      	add	sp, #116	; 0x74
 800456e:	bd90      	pop	{r4, r7, pc}
 8004570:	40007000 	.word	0x40007000
 8004574:	ffffe7ff 	.word	0xffffe7ff

08004578 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800457c:	2200      	movs	r2, #0
 800457e:	2101      	movs	r1, #1
 8004580:	2011      	movs	r0, #17
 8004582:	f001 ffd5 	bl	8006530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004586:	2011      	movs	r0, #17
 8004588:	f001 ffe7 	bl	800655a <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800458c:	2200      	movs	r2, #0
 800458e:	2100      	movs	r1, #0
 8004590:	200f      	movs	r0, #15
 8004592:	f001 ffcd 	bl	8006530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004596:	200f      	movs	r0, #15
 8004598:	f001 ffdf 	bl	800655a <HAL_NVIC_EnableIRQ>
}
 800459c:	46c0      	nop			; (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
    serial_printf("Buffer is half full!\n");
//    HAL_DMA_IRQHandler(&hdma_adc);
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
    serial_printf("Buffer is completely full!\n");
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <HAL_ADC_ConvCpltCallback+0x18>)
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 f8f4 	bl	800479c <serial_printf>
//    HAL_DMA_IRQHandler(&hdma_adc);
}
 80045b4:	46c0      	nop			; (mov r8, r8)
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b002      	add	sp, #8
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	0800a890 	.word	0x0800a890

080045c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045c4:	b672      	cpsid	i
}
 80045c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045c8:	e7fe      	b.n	80045c8 <Error_Handler+0x8>
	...

080045cc <convert>:

// Internal functions to serial_print
char *convert(unsigned int num, int base);
size_t strlen(const char *str);

char *convert(unsigned int num, int base) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  static char Representation[]= "0123456789ABCDEF";
  static char buffer[50];
  char *ptr;

  ptr = &buffer[49];
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <convert+0x50>)
 80045d8:	60fb      	str	r3, [r7, #12]
  *ptr = '\0';
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]

  do {
    *--ptr = Representation[num%base];
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	0011      	movs	r1, r2
 80045e6:	0018      	movs	r0, r3
 80045e8:	f7fb fe14 	bl	8000214 <__aeabi_uidivmod>
 80045ec:	000b      	movs	r3, r1
 80045ee:	001a      	movs	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <convert+0x54>)
 80045f8:	5c9a      	ldrb	r2, [r3, r2]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	701a      	strb	r2, [r3, #0]
    num /= base;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	0019      	movs	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fb fd80 	bl	8000108 <__udivsi3>
 8004608:	0003      	movs	r3, r0
 800460a:	607b      	str	r3, [r7, #4]
  } while(num != 0);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e6      	bne.n	80045e0 <convert+0x14>

  return(ptr);
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b004      	add	sp, #16
 800461a:	bd80      	pop	{r7, pc}
 800461c:	200000f9 	.word	0x200000f9
 8004620:	2000000c 	.word	0x2000000c

08004624 <strlen>:

/*!
    @brief https://stackoverflow.com/questions/22520413/c-strlen-implementation-in-one-line-of-code
*/
size_t strlen (const char *str) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  return (*str) ? strlen(++str) + 1 : 0;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <strlen+0x24>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3301      	adds	r3, #1
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	0018      	movs	r0, r3
 800463e:	f7ff fff1 	bl	8004624 <strlen>
 8004642:	0003      	movs	r3, r0
 8004644:	3301      	adds	r3, #1
 8004646:	e000      	b.n	800464a <strlen+0x26>
 8004648:	2300      	movs	r3, #0
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b002      	add	sp, #8
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <serial_select>:
// End of internal functions for serial_print

void serial_select(enum uart_line_t line) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	0002      	movs	r2, r0
 800465c:	1dfb      	adds	r3, r7, #7
 800465e:	701a      	strb	r2, [r3, #0]
  switch (line) {
 8004660:	1dfb      	adds	r3, r7, #7
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <serial_select+0x1a>
 8004668:	2b01      	cmp	r3, #1
 800466a:	d00d      	beq.n	8004688 <serial_select+0x34>
    case DEBUG_PRINT:
      current_line = line;
      serial_line = SERIAL_UART;
      break;
  }
}
 800466c:	e019      	b.n	80046a2 <serial_select+0x4e>
      current_line = line;
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <serial_select+0x58>)
 8004670:	1dfa      	adds	r2, r7, #7
 8004672:	7812      	ldrb	r2, [r2, #0]
 8004674:	701a      	strb	r2, [r3, #0]
      serial_line = WIFI_UART;
 8004676:	4a0e      	ldr	r2, [pc, #56]	; (80046b0 <serial_select+0x5c>)
 8004678:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <serial_select+0x60>)
 800467a:	0010      	movs	r0, r2
 800467c:	0019      	movs	r1, r3
 800467e:	2384      	movs	r3, #132	; 0x84
 8004680:	001a      	movs	r2, r3
 8004682:	f005 fe81 	bl	800a388 <memcpy>
      break;
 8004686:	e00c      	b.n	80046a2 <serial_select+0x4e>
      current_line = line;
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <serial_select+0x58>)
 800468a:	1dfa      	adds	r2, r7, #7
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	701a      	strb	r2, [r3, #0]
      serial_line = SERIAL_UART;
 8004690:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <serial_select+0x5c>)
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <serial_select+0x64>)
 8004694:	0010      	movs	r0, r2
 8004696:	0019      	movs	r1, r3
 8004698:	2384      	movs	r3, #132	; 0x84
 800469a:	001a      	movs	r2, r3
 800469c:	f005 fe74 	bl	800a388 <memcpy>
      break;
 80046a0:	46c0      	nop			; (mov r8, r8)
}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b002      	add	sp, #8
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	2000021c 	.word	0x2000021c
 80046b0:	20000220 	.word	0x20000220
 80046b4:	2000037c 	.word	0x2000037c
 80046b8:	20000400 	.word	0x20000400

080046bc <serial_clear>:

void serial_clear() {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
  char clear_sequence[] = {0x1b, 0x5B, 0x32, 0x4A, 0x1b, 0x5B, 0x48};
 80046c2:	003b      	movs	r3, r7
 80046c4:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <serial_clear+0x2c>)
 80046c6:	6811      	ldr	r1, [r2, #0]
 80046c8:	6019      	str	r1, [r3, #0]
 80046ca:	8891      	ldrh	r1, [r2, #4]
 80046cc:	8099      	strh	r1, [r3, #4]
 80046ce:	7992      	ldrb	r2, [r2, #6]
 80046d0:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&serial_line, (unsigned char*) clear_sequence, sizeof clear_sequence, HAL_MAX_DELAY);
 80046d2:	2301      	movs	r3, #1
 80046d4:	425b      	negs	r3, r3
 80046d6:	0039      	movs	r1, r7
 80046d8:	4804      	ldr	r0, [pc, #16]	; (80046ec <serial_clear+0x30>)
 80046da:	2207      	movs	r2, #7
 80046dc:	f005 f95e 	bl	800999c <HAL_UART_Transmit>
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	0800a8ac 	.word	0x0800a8ac
 80046ec:	20000220 	.word	0x20000220

080046f0 <serial_print>:

void serial_print(char string[]) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serial_line, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7ff ff92 	bl	8004624 <strlen>
 8004700:	0003      	movs	r3, r0
 8004702:	b29a      	uxth	r2, r3
 8004704:	2301      	movs	r3, #1
 8004706:	425b      	negs	r3, r3
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4803      	ldr	r0, [pc, #12]	; (8004718 <serial_print+0x28>)
 800470c:	f005 f946 	bl	800999c <HAL_UART_Transmit>
}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b002      	add	sp, #8
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000220 	.word	0x20000220

0800471c <serial_println>:

void serial_println(char *string) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serial_line, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	0018      	movs	r0, r3
 8004728:	f7ff ff7c 	bl	8004624 <strlen>
 800472c:	0003      	movs	r3, r0
 800472e:	b29a      	uxth	r2, r3
 8004730:	2301      	movs	r3, #1
 8004732:	425b      	negs	r3, r3
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	480b      	ldr	r0, [pc, #44]	; (8004764 <serial_println+0x48>)
 8004738:	f005 f930 	bl	800999c <HAL_UART_Transmit>
  char* newline = ((current_line == WIFI) ? "\r\n" : "\r\f");
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <serial_println+0x4c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <serial_println+0x2c>
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <serial_println+0x50>)
 8004746:	e000      	b.n	800474a <serial_println+0x2e>
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <serial_println+0x54>)
 800474a:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&serial_line, (unsigned char*) newline, 2, HAL_MAX_DELAY);
 800474c:	2301      	movs	r3, #1
 800474e:	425b      	negs	r3, r3
 8004750:	68f9      	ldr	r1, [r7, #12]
 8004752:	4804      	ldr	r0, [pc, #16]	; (8004764 <serial_println+0x48>)
 8004754:	2202      	movs	r2, #2
 8004756:	f005 f921 	bl	800999c <HAL_UART_Transmit>
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b004      	add	sp, #16
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	20000220 	.word	0x20000220
 8004768:	2000021c 	.word	0x2000021c
 800476c:	0800a8b4 	.word	0x0800a8b4
 8004770:	0800a8b8 	.word	0x0800a8b8

08004774 <serial_putc>:

void serial_putc(char c) {
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	0002      	movs	r2, r0
 800477c:	1dfb      	adds	r3, r7, #7
 800477e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&serial_line, (unsigned char*) &c, 1, HAL_MAX_DELAY);
 8004780:	2301      	movs	r3, #1
 8004782:	425b      	negs	r3, r3
 8004784:	1df9      	adds	r1, r7, #7
 8004786:	4804      	ldr	r0, [pc, #16]	; (8004798 <serial_putc+0x24>)
 8004788:	2201      	movs	r2, #1
 800478a:	f005 f907 	bl	800999c <HAL_UART_Transmit>
}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	46bd      	mov	sp, r7
 8004792:	b002      	add	sp, #8
 8004794:	bd80      	pop	{r7, pc}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	20000220 	.word	0x20000220

0800479c <serial_printf>:
}

/*!
    @brief a version of printf implmented from http://www.firmcodes.com/write-printf-function-c/
*/
void serial_printf(char format[], ...) {
 800479c:	b40f      	push	{r0, r1, r2, r3}
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
  char c;
  char *s;

  //Module 1: Initializing Myprintf's arguments
  va_list arg;
  va_start(arg, format);
 80047a4:	2324      	movs	r3, #36	; 0x24
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	603b      	str	r3, [r7, #0]

  for(traverse = format; *traverse != '\0'; traverse++) {
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e08c      	b.n	80048ca <serial_printf+0x12e>
    while( (*traverse != '%') && (*traverse != '\0')) {
      if (*traverse == '\n') {
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b0a      	cmp	r3, #10
 80047b6:	d10a      	bne.n	80047ce <serial_printf+0x32>
        serial_print(((current_line == WIFI) ? "\r\n" : "\r\f"));
 80047b8:	4b4a      	ldr	r3, [pc, #296]	; (80048e4 <serial_printf+0x148>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <serial_printf+0x28>
 80047c0:	4b49      	ldr	r3, [pc, #292]	; (80048e8 <serial_printf+0x14c>)
 80047c2:	e000      	b.n	80047c6 <serial_printf+0x2a>
 80047c4:	4b49      	ldr	r3, [pc, #292]	; (80048ec <serial_printf+0x150>)
 80047c6:	0018      	movs	r0, r3
 80047c8:	f7ff ff92 	bl	80046f0 <serial_print>
 80047cc:	e004      	b.n	80047d8 <serial_printf+0x3c>
      }
      else {
        serial_putc(*traverse);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7ff ffce 	bl	8004774 <serial_putc>
      }
      traverse++;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3301      	adds	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
    while( (*traverse != '%') && (*traverse != '\0')) {
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b25      	cmp	r3, #37	; 0x25
 80047e4:	d003      	beq.n	80047ee <serial_printf+0x52>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e0      	bne.n	80047b0 <serial_printf+0x14>
    }

    if (*traverse == '\0') break;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d100      	bne.n	80047f8 <serial_printf+0x5c>
 80047f6:	e06d      	b.n	80048d4 <serial_printf+0x138>
    traverse++;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	3301      	adds	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]

    //Module 2: Fetching and executing arguments
    switch(*traverse) {
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b25      	cmp	r3, #37	; 0x25
 8004804:	d059      	beq.n	80048ba <serial_printf+0x11e>
 8004806:	db5d      	blt.n	80048c4 <serial_printf+0x128>
 8004808:	2b78      	cmp	r3, #120	; 0x78
 800480a:	dc5b      	bgt.n	80048c4 <serial_printf+0x128>
 800480c:	2b63      	cmp	r3, #99	; 0x63
 800480e:	db59      	blt.n	80048c4 <serial_printf+0x128>
 8004810:	3b63      	subs	r3, #99	; 0x63
 8004812:	2b15      	cmp	r3, #21
 8004814:	d856      	bhi.n	80048c4 <serial_printf+0x128>
 8004816:	009a      	lsls	r2, r3, #2
 8004818:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <serial_printf+0x154>)
 800481a:	18d3      	adds	r3, r2, r3
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	469f      	mov	pc, r3
      case 'c' :
        c = va_arg(arg,int);		//Fetch char argument
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	1d1a      	adds	r2, r3, #4
 8004824:	603a      	str	r2, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	1dfb      	adds	r3, r7, #7
 800482a:	701a      	strb	r2, [r3, #0]
        serial_putc(c);
 800482c:	1dfb      	adds	r3, r7, #7
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	0018      	movs	r0, r3
 8004832:	f7ff ff9f 	bl	8004774 <serial_putc>
        break;
 8004836:	e045      	b.n	80048c4 <serial_printf+0x128>
      case 'd' :
        signed_i = va_arg(arg,int); 		//Fetch Decimal/Integer argument
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	1d1a      	adds	r2, r3, #4
 800483c:	603a      	str	r2, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	613b      	str	r3, [r7, #16]
        if (signed_i < 0) {
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	da06      	bge.n	8004856 <serial_printf+0xba>
          signed_i = -signed_i;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	425b      	negs	r3, r3
 800484c:	613b      	str	r3, [r7, #16]
          serial_print("-");
 800484e:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <serial_printf+0x158>)
 8004850:	0018      	movs	r0, r3
 8004852:	f7ff ff4d 	bl	80046f0 <serial_print>
        }
        serial_print(convert(signed_i, 10));
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	210a      	movs	r1, #10
 800485a:	0018      	movs	r0, r3
 800485c:	f7ff feb6 	bl	80045cc <convert>
 8004860:	0003      	movs	r3, r0
 8004862:	0018      	movs	r0, r3
 8004864:	f7ff ff44 	bl	80046f0 <serial_print>
        break;
 8004868:	e02c      	b.n	80048c4 <serial_printf+0x128>
      case 'o':
        i = va_arg(arg,unsigned int); //Fetch Octal representation
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	1d1a      	adds	r2, r3, #4
 800486e:	603a      	str	r2, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]
        serial_print(convert(i, 8));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2108      	movs	r1, #8
 8004878:	0018      	movs	r0, r3
 800487a:	f7ff fea7 	bl	80045cc <convert>
 800487e:	0003      	movs	r3, r0
 8004880:	0018      	movs	r0, r3
 8004882:	f7ff ff35 	bl	80046f0 <serial_print>
        break;
 8004886:	e01d      	b.n	80048c4 <serial_printf+0x128>
      case 's':
        s = va_arg(arg,char *); 		//Fetch string
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	1d1a      	adds	r2, r3, #4
 800488c:	603a      	str	r2, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60bb      	str	r3, [r7, #8]
        serial_print(s);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	0018      	movs	r0, r3
 8004896:	f7ff ff2b 	bl	80046f0 <serial_print>
        break;
 800489a:	e013      	b.n	80048c4 <serial_printf+0x128>
      case 'x':
        i = va_arg(arg,unsigned int); //Fetch Hexadecimal representation
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	1d1a      	adds	r2, r3, #4
 80048a0:	603a      	str	r2, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
        serial_print(convert(i, 16));
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2110      	movs	r1, #16
 80048aa:	0018      	movs	r0, r3
 80048ac:	f7ff fe8e 	bl	80045cc <convert>
 80048b0:	0003      	movs	r3, r0
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7ff ff1c 	bl	80046f0 <serial_print>
        break;
 80048b8:	e004      	b.n	80048c4 <serial_printf+0x128>

      case '%':
        serial_print("%");
 80048ba:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <serial_printf+0x15c>)
 80048bc:	0018      	movs	r0, r3
 80048be:	f7ff ff17 	bl	80046f0 <serial_print>
        break;
 80048c2:	46c0      	nop			; (mov r8, r8)
  for(traverse = format; *traverse != '\0'; traverse++) {
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	3301      	adds	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d185      	bne.n	80047de <serial_printf+0x42>
    }
  }

  //Module 3: Closing argument list to necessary clean-up
  va_end(arg);
} 
 80048d2:	e000      	b.n	80048d6 <serial_printf+0x13a>
    if (*traverse == '\0') break;
 80048d4:	46c0      	nop			; (mov r8, r8)
} 
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	b006      	add	sp, #24
 80048dc:	bc80      	pop	{r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	b004      	add	sp, #16
 80048e2:	4718      	bx	r3
 80048e4:	2000021c 	.word	0x2000021c
 80048e8:	0800a8b4 	.word	0x0800a8b4
 80048ec:	0800a8b8 	.word	0x0800a8b8
 80048f0:	0800b264 	.word	0x0800b264
 80048f4:	0800a8bc 	.word	0x0800a8bc
 80048f8:	0800a8c0 	.word	0x0800a8c0

080048fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004900:	4b18      	ldr	r3, [pc, #96]	; (8004964 <MX_SPI1_Init+0x68>)
 8004902:	4a19      	ldr	r2, [pc, #100]	; (8004968 <MX_SPI1_Init+0x6c>)
 8004904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004906:	4b17      	ldr	r3, [pc, #92]	; (8004964 <MX_SPI1_Init+0x68>)
 8004908:	2282      	movs	r2, #130	; 0x82
 800490a:	0052      	lsls	r2, r2, #1
 800490c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <MX_SPI1_Init+0x68>)
 8004910:	2200      	movs	r2, #0
 8004912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004914:	4b13      	ldr	r3, [pc, #76]	; (8004964 <MX_SPI1_Init+0x68>)
 8004916:	2200      	movs	r2, #0
 8004918:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <MX_SPI1_Init+0x68>)
 800491c:	2200      	movs	r2, #0
 800491e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <MX_SPI1_Init+0x68>)
 8004922:	2200      	movs	r2, #0
 8004924:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <MX_SPI1_Init+0x68>)
 8004928:	2280      	movs	r2, #128	; 0x80
 800492a:	0092      	lsls	r2, r2, #2
 800492c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <MX_SPI1_Init+0x68>)
 8004930:	2200      	movs	r2, #0
 8004932:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <MX_SPI1_Init+0x68>)
 8004936:	2200      	movs	r2, #0
 8004938:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <MX_SPI1_Init+0x68>)
 800493c:	2200      	movs	r2, #0
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <MX_SPI1_Init+0x68>)
 8004942:	2200      	movs	r2, #0
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004946:	4b07      	ldr	r3, [pc, #28]	; (8004964 <MX_SPI1_Init+0x68>)
 8004948:	2207      	movs	r2, #7
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <MX_SPI1_Init+0x68>)
 800494e:	0018      	movs	r0, r3
 8004950:	f003 fe1a 	bl	8008588 <HAL_SPI_Init>
 8004954:	1e03      	subs	r3, r0, #0
 8004956:	d001      	beq.n	800495c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004958:	f7ff fe32 	bl	80045c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800495c:	46c0      	nop			; (mov r8, r8)
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	200002a4 	.word	0x200002a4
 8004968:	40013000 	.word	0x40013000

0800496c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b089      	sub	sp, #36	; 0x24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004974:	240c      	movs	r4, #12
 8004976:	193b      	adds	r3, r7, r4
 8004978:	0018      	movs	r0, r3
 800497a:	2314      	movs	r3, #20
 800497c:	001a      	movs	r2, r3
 800497e:	2100      	movs	r1, #0
 8004980:	f005 fd0b 	bl	800a39a <memset>
  if(spiHandle->Instance==SPI1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a18      	ldr	r2, [pc, #96]	; (80049ec <HAL_SPI_MspInit+0x80>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d129      	bne.n	80049e2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800498e:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <HAL_SPI_MspInit+0x84>)
 8004990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004992:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <HAL_SPI_MspInit+0x84>)
 8004994:	2180      	movs	r1, #128	; 0x80
 8004996:	0149      	lsls	r1, r1, #5
 8004998:	430a      	orrs	r2, r1
 800499a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800499c:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <HAL_SPI_MspInit+0x84>)
 800499e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a0:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <HAL_SPI_MspInit+0x84>)
 80049a2:	2101      	movs	r1, #1
 80049a4:	430a      	orrs	r2, r1
 80049a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <HAL_SPI_MspInit+0x84>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	2201      	movs	r2, #1
 80049ae:	4013      	ands	r3, r2
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80049b4:	0021      	movs	r1, r4
 80049b6:	187b      	adds	r3, r7, r1
 80049b8:	22e0      	movs	r2, #224	; 0xe0
 80049ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049bc:	187b      	adds	r3, r7, r1
 80049be:	2202      	movs	r2, #2
 80049c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c2:	187b      	adds	r3, r7, r1
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80049c8:	187b      	adds	r3, r7, r1
 80049ca:	2201      	movs	r2, #1
 80049cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80049ce:	187b      	adds	r3, r7, r1
 80049d0:	2200      	movs	r2, #0
 80049d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d4:	187a      	adds	r2, r7, r1
 80049d6:	23a0      	movs	r3, #160	; 0xa0
 80049d8:	05db      	lsls	r3, r3, #23
 80049da:	0011      	movs	r1, r2
 80049dc:	0018      	movs	r0, r3
 80049de:	f001 feff 	bl	80067e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b009      	add	sp, #36	; 0x24
 80049e8:	bd90      	pop	{r4, r7, pc}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	40013000 	.word	0x40013000
 80049f0:	40021000 	.word	0x40021000

080049f4 <sram_csHigh>:

#define SRAM_SPI hspi1


// Function Code
void sram_csHigh() {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_SET);
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4803      	ldr	r0, [pc, #12]	; (8004a0c <sram_csHigh+0x18>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	0019      	movs	r1, r3
 8004a02:	f002 f863 	bl	8006acc <HAL_GPIO_WritePin>
}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	50000800 	.word	0x50000800

08004a10 <sram_csLow>:

void sram_csLow() {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_RESET);
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4803      	ldr	r0, [pc, #12]	; (8004a28 <sram_csLow+0x18>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	f002 f855 	bl	8006acc <HAL_GPIO_WritePin>
}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	50000800 	.word	0x50000800

08004a2c <sram_write>:
    @param addr the addres to write to
    @param buf the data buffer to write
    @param num the nubmer of bytes to write (from the buffer)
    @param reg pass MCPSRAM_WRSR if you're writing the status register, MCPSRAM_WRITE if you are writing data. Use MCPSRAM_WRITE in Adafruit functions that don't specify reg (default value).
*/
void sram_write(uint16_t addr, uint8_t* buf, uint16_t num, uint8_t reg) {
 8004a2c:	b5b0      	push	{r4, r5, r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	0004      	movs	r4, r0
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	0010      	movs	r0, r2
 8004a38:	0019      	movs	r1, r3
 8004a3a:	250e      	movs	r5, #14
 8004a3c:	197b      	adds	r3, r7, r5
 8004a3e:	1c22      	adds	r2, r4, #0
 8004a40:	801a      	strh	r2, [r3, #0]
 8004a42:	230c      	movs	r3, #12
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	1c02      	adds	r2, r0, #0
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	1dfb      	adds	r3, r7, #7
 8004a4c:	1c0a      	adds	r2, r1, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 8004a50:	f7ff ffde 	bl	8004a10 <sram_csLow>

    // write command and address
    uint8_t cmdbuf[3] = {
 8004a54:	2118      	movs	r1, #24
 8004a56:	187b      	adds	r3, r7, r1
 8004a58:	1dfa      	adds	r2, r7, #7
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	701a      	strb	r2, [r3, #0]
        reg,
        (uint8_t) (addr >> 8),
 8004a5e:	197b      	adds	r3, r7, r5
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8004a68:	187b      	adds	r3, r7, r1
 8004a6a:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 8004a6c:	197b      	adds	r3, r7, r5
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8004a72:	187b      	adds	r3, r7, r1
 8004a74:	709a      	strb	r2, [r3, #2]
    };
    
    for (int i = 0; i < 3; i++) {
 8004a76:	2300      	movs	r3, #0
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7a:	e019      	b.n	8004ab0 <sram_write+0x84>
        uint8_t d = cmdbuf[i];
 8004a7c:	2318      	movs	r3, #24
 8004a7e:	18fa      	adds	r2, r7, r3
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	18d3      	adds	r3, r2, r3
 8004a84:	781a      	ldrb	r2, [r3, #0]
 8004a86:	2117      	movs	r1, #23
 8004a88:	187b      	adds	r3, r7, r1
 8004a8a:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8004a8c:	231f      	movs	r3, #31
 8004a8e:	18fc      	adds	r4, r7, r3
 8004a90:	2301      	movs	r3, #1
 8004a92:	425b      	negs	r3, r3
 8004a94:	1879      	adds	r1, r7, r1
 8004a96:	481c      	ldr	r0, [pc, #112]	; (8004b08 <sram_write+0xdc>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f003 fe09 	bl	80086b0 <HAL_SPI_Transmit>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	7023      	strb	r3, [r4, #0]
//        if (status != HAL_OK) {
//            char error[] = "SRAM_WRITE: FAILED TO SEND CMD/ADDR\r\f";
//            serial_println(error);
//        }
        if (reg != MCPSRAM_WRITE) {
 8004aa2:	1dfb      	adds	r3, r7, #7
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d106      	bne.n	8004ab8 <sram_write+0x8c>
    for (int i = 0; i < 3; i++) {
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	3301      	adds	r3, #1
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	dde2      	ble.n	8004a7c <sram_write+0x50>
 8004ab6:	e000      	b.n	8004aba <sram_write+0x8e>
            break;
 8004ab8:	46c0      	nop			; (mov r8, r8)
        }
    }

    for (int i = 0; i < num; i++) {
 8004aba:	2300      	movs	r3, #0
 8004abc:	623b      	str	r3, [r7, #32]
 8004abe:	e014      	b.n	8004aea <sram_write+0xbe>
        uint8_t d = buf[i];
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	18d3      	adds	r3, r2, r3
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	2116      	movs	r1, #22
 8004aca:	187b      	adds	r3, r7, r1
 8004acc:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8004ace:	231e      	movs	r3, #30
 8004ad0:	18fc      	adds	r4, r7, r3
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	425b      	negs	r3, r3
 8004ad6:	1879      	adds	r1, r7, r1
 8004ad8:	480b      	ldr	r0, [pc, #44]	; (8004b08 <sram_write+0xdc>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	f003 fde8 	bl	80086b0 <HAL_SPI_Transmit>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num; i++) {
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	623b      	str	r3, [r7, #32]
 8004aea:	230c      	movs	r3, #12
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	6a3a      	ldr	r2, [r7, #32]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	dbe4      	blt.n	8004ac0 <sram_write+0x94>
//            char error[] = "SRAM_WRITE: FAILED TO SEND\r\f";
//            serial_println(error);
//        }
    }

    sram_csHigh();
 8004af6:	f7ff ff7d 	bl	80049f4 <sram_csHigh>
    HAL_Delay(100);
 8004afa:	2064      	movs	r0, #100	; 0x64
 8004afc:	f000 ff14 	bl	8005928 <HAL_Delay>
}
 8004b00:	46c0      	nop			; (mov r8, r8)
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b00a      	add	sp, #40	; 0x28
 8004b06:	bdb0      	pop	{r4, r5, r7, pc}
 8004b08:	200002a4 	.word	0x200002a4

08004b0c <sram_read>:
    @param addr the address to read from
    @param buf the data buffer to read into
    @param num the number of bytes to read
    @param reg pass MCPSRAM_RDSR if you're reading the status register, MCPSRAM_READ if you are reading data. Use MCPSRAM_READ in Adafruit functions that don't specify reg (default value).
*/
void sram_read(uint16_t addr, uint8_t *buf, uint16_t num, uint8_t reg) {
 8004b0c:	b5b0      	push	{r4, r5, r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	0004      	movs	r4, r0
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	0010      	movs	r0, r2
 8004b18:	0019      	movs	r1, r3
 8004b1a:	250e      	movs	r5, #14
 8004b1c:	197b      	adds	r3, r7, r5
 8004b1e:	1c22      	adds	r2, r4, #0
 8004b20:	801a      	strh	r2, [r3, #0]
 8004b22:	230c      	movs	r3, #12
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	1c02      	adds	r2, r0, #0
 8004b28:	801a      	strh	r2, [r3, #0]
 8004b2a:	1dfb      	adds	r3, r7, #7
 8004b2c:	1c0a      	adds	r2, r1, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 8004b30:	f7ff ff6e 	bl	8004a10 <sram_csLow>

    // read command and address
    uint8_t cmdbuf[3] = {
 8004b34:	2118      	movs	r1, #24
 8004b36:	187b      	adds	r3, r7, r1
 8004b38:	1dfa      	adds	r2, r7, #7
 8004b3a:	7812      	ldrb	r2, [r2, #0]
 8004b3c:	701a      	strb	r2, [r3, #0]
        reg,
        (uint8_t) (addr >> 8),
 8004b3e:	197b      	adds	r3, r7, r5
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 8004b4c:	197b      	adds	r3, r7, r5
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8004b52:	187b      	adds	r3, r7, r1
 8004b54:	709a      	strb	r2, [r3, #2]
    };

    for (int i = 0; i < 3; i++) {
 8004b56:	2300      	movs	r3, #0
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5a:	e019      	b.n	8004b90 <sram_read+0x84>
        uint8_t d = cmdbuf[i];
 8004b5c:	2318      	movs	r3, #24
 8004b5e:	18fa      	adds	r2, r7, r3
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	18d3      	adds	r3, r2, r3
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	2117      	movs	r1, #23
 8004b68:	187b      	adds	r3, r7, r1
 8004b6a:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8004b6c:	231f      	movs	r3, #31
 8004b6e:	18fc      	adds	r4, r7, r3
 8004b70:	2301      	movs	r3, #1
 8004b72:	425b      	negs	r3, r3
 8004b74:	1879      	adds	r1, r7, r1
 8004b76:	4818      	ldr	r0, [pc, #96]	; (8004bd8 <sram_read+0xcc>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f003 fd99 	bl	80086b0 <HAL_SPI_Transmit>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	7023      	strb	r3, [r4, #0]
//        if (status != HAL_OK) {
//            char error[] = "SRAM_READ: FAILED TO SEND";
//            serial_println(error);
//        }
        if (reg != MCPSRAM_READ) {
 8004b82:	1dfb      	adds	r3, r7, #7
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d106      	bne.n	8004b98 <sram_read+0x8c>
    for (int i = 0; i < 3; i++) {
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	dde2      	ble.n	8004b5c <sram_read+0x50>
 8004b96:	e000      	b.n	8004b9a <sram_read+0x8e>
            break;
 8004b98:	46c0      	nop			; (mov r8, r8)
        }
    }

    for (int i = 0; i < num; i++) {
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
 8004b9e:	e00f      	b.n	8004bc0 <sram_read+0xb4>
        HAL_StatusTypeDef status = HAL_SPI_Receive(&SRAM_SPI, buf++, 1, HAL_MAX_DELAY);
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	1c4b      	adds	r3, r1, #1
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	231e      	movs	r3, #30
 8004ba8:	18fc      	adds	r4, r7, r3
 8004baa:	2301      	movs	r3, #1
 8004bac:	425b      	negs	r3, r3
 8004bae:	480a      	ldr	r0, [pc, #40]	; (8004bd8 <sram_read+0xcc>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f003 fed3 	bl	800895c <HAL_SPI_Receive>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num; i++) {
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	623b      	str	r3, [r7, #32]
 8004bc0:	230c      	movs	r3, #12
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	6a3a      	ldr	r2, [r7, #32]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	dbe9      	blt.n	8004ba0 <sram_read+0x94>
//                    serial_println(msg);
//                    break;
//            }
//        }
    }
    sram_csHigh();
 8004bcc:	f7ff ff12 	bl	80049f4 <sram_csHigh>
}
 8004bd0:	46c0      	nop			; (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b00a      	add	sp, #40	; 0x28
 8004bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8004bd8:	200002a4 	.word	0x200002a4

08004bdc <sram_read8>:
/*! @brief read 1 byte of data at the specified address
    @param addr the address to read data at
    @param reg pass MCPSRAM_RDSR if you're reading the status register, MCPSRAM_READ if you are reading data. Use MCPSRAM_READ in Adafruit functions that don't specify reg (default value).
    @returns the read data byte
*/
uint8_t sram_read8(uint16_t addr, uint8_t reg) {
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	0002      	movs	r2, r0
 8004be4:	1dbb      	adds	r3, r7, #6
 8004be6:	801a      	strh	r2, [r3, #0]
 8004be8:	1d7b      	adds	r3, r7, #5
 8004bea:	1c0a      	adds	r2, r1, #0
 8004bec:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    sram_read(addr, &c, 1, reg);
 8004bee:	1d7b      	adds	r3, r7, #5
 8004bf0:	781a      	ldrb	r2, [r3, #0]
 8004bf2:	240f      	movs	r4, #15
 8004bf4:	1939      	adds	r1, r7, r4
 8004bf6:	1dbb      	adds	r3, r7, #6
 8004bf8:	8818      	ldrh	r0, [r3, #0]
 8004bfa:	0013      	movs	r3, r2
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f7ff ff85 	bl	8004b0c <sram_read>
    return c;
 8004c02:	193b      	adds	r3, r7, r4
 8004c04:	781b      	ldrb	r3, [r3, #0]
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b005      	add	sp, #20
 8004c0c:	bd90      	pop	{r4, r7, pc}

08004c0e <sram_write8>:
/*!
    @param addr the address to write to
    @param val the value to write
    @param reg MCPSRAM_WRITE if writing data, MCPSRAM_WRSR if writing a status register. Use MCPSRAM_WRITE in Adafruit functions that don't specify reg (default value).
*/
void sram_write8(uint16_t addr, uint8_t val, uint8_t reg) {
 8004c0e:	b590      	push	{r4, r7, lr}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	0004      	movs	r4, r0
 8004c16:	0008      	movs	r0, r1
 8004c18:	0011      	movs	r1, r2
 8004c1a:	1dbb      	adds	r3, r7, #6
 8004c1c:	1c22      	adds	r2, r4, #0
 8004c1e:	801a      	strh	r2, [r3, #0]
 8004c20:	1d7b      	adds	r3, r7, #5
 8004c22:	1c02      	adds	r2, r0, #0
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	1d3b      	adds	r3, r7, #4
 8004c28:	1c0a      	adds	r2, r1, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
    sram_write(addr, &val, 1, reg);
 8004c2c:	1d3b      	adds	r3, r7, #4
 8004c2e:	781a      	ldrb	r2, [r3, #0]
 8004c30:	1d79      	adds	r1, r7, #5
 8004c32:	1dbb      	adds	r3, r7, #6
 8004c34:	8818      	ldrh	r0, [r3, #0]
 8004c36:	0013      	movs	r3, r2
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f7ff fef7 	bl	8004a2c <sram_write>
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b003      	add	sp, #12
 8004c44:	bd90      	pop	{r4, r7, pc}
	...

08004c48 <sram_erase>:
/*!
    @param addr the address to start the erase at
    @param length the number of byts to fill
    @param val the value to set the data to
*/
void sram_erase(uint16_t addr, uint16_t length, uint8_t val) {
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b089      	sub	sp, #36	; 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	0004      	movs	r4, r0
 8004c50:	0008      	movs	r0, r1
 8004c52:	0011      	movs	r1, r2
 8004c54:	1dbb      	adds	r3, r7, #6
 8004c56:	1c22      	adds	r2, r4, #0
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	1d3b      	adds	r3, r7, #4
 8004c5c:	1c02      	adds	r2, r0, #0
 8004c5e:	801a      	strh	r2, [r3, #0]
 8004c60:	1cfb      	adds	r3, r7, #3
 8004c62:	1c0a      	adds	r2, r1, #0
 8004c64:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 8004c66:	f7ff fed3 	bl	8004a10 <sram_csLow>

    // write command and addrress
    uint8_t cmdbuf[3] = {
 8004c6a:	2110      	movs	r1, #16
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	2202      	movs	r2, #2
 8004c70:	701a      	strb	r2, [r3, #0]
        MCPSRAM_WRITE,
        (uint8_t) (addr >> 8),
 8004c72:	1dbb      	adds	r3, r7, #6
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8004c7c:	187b      	adds	r3, r7, r1
 8004c7e:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 8004c80:	1dbb      	adds	r3, r7, #6
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	709a      	strb	r2, [r3, #2]
    };

    for (int i = 0; i < 3; i++) {
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	e015      	b.n	8004cbc <sram_erase+0x74>
        uint8_t d = cmdbuf[i];
 8004c90:	2310      	movs	r3, #16
 8004c92:	18fa      	adds	r2, r7, r3
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	18d3      	adds	r3, r2, r3
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	210f      	movs	r1, #15
 8004c9c:	187b      	adds	r3, r7, r1
 8004c9e:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8004ca0:	2316      	movs	r3, #22
 8004ca2:	18fc      	adds	r4, r7, r3
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	425b      	negs	r3, r3
 8004ca8:	1879      	adds	r1, r7, r1
 8004caa:	4816      	ldr	r0, [pc, #88]	; (8004d04 <sram_erase+0xbc>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	f003 fcff 	bl	80086b0 <HAL_SPI_Transmit>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 3; i++) {
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	dde6      	ble.n	8004c90 <sram_erase+0x48>
//            serial_println(error);
//        }
    }

    // write buffer of data
    for (int i = 0; i < length; i++) {
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	e012      	b.n	8004cee <sram_erase+0xa6>
        uint8_t d = val;
 8004cc8:	210e      	movs	r1, #14
 8004cca:	187b      	adds	r3, r7, r1
 8004ccc:	1cfa      	adds	r2, r7, #3
 8004cce:	7812      	ldrb	r2, [r2, #0]
 8004cd0:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8004cd2:	2317      	movs	r3, #23
 8004cd4:	18fc      	adds	r4, r7, r3
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	425b      	negs	r3, r3
 8004cda:	1879      	adds	r1, r7, r1
 8004cdc:	4809      	ldr	r0, [pc, #36]	; (8004d04 <sram_erase+0xbc>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f003 fce6 	bl	80086b0 <HAL_SPI_Transmit>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < length; i++) {
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	3301      	adds	r3, #1
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	1d3b      	adds	r3, r7, #4
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	dbe7      	blt.n	8004cc8 <sram_erase+0x80>
//            char error[] = "SRAM_ERASE: TX ERR\r\f";
//            serial_println(error);
//        }
    }

    sram_csHigh();
 8004cf8:	f7ff fe7c 	bl	80049f4 <sram_csHigh>
 8004cfc:	46c0      	nop			; (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b009      	add	sp, #36	; 0x24
 8004d02:	bd90      	pop	{r4, r7, pc}
 8004d04:	200002a4 	.word	0x200002a4

08004d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <HAL_MspInit+0x24>)
 8004d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_MspInit+0x24>)
 8004d12:	2101      	movs	r1, #1
 8004d14:	430a      	orrs	r2, r1
 8004d16:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <HAL_MspInit+0x24>)
 8004d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1c:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <HAL_MspInit+0x24>)
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	0549      	lsls	r1, r1, #21
 8004d22:	430a      	orrs	r2, r1
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000

08004d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
    serial_println("NMI_Handler: something's not being handled right!");
 8004d34:	4b02      	ldr	r3, [pc, #8]	; (8004d40 <NMI_Handler+0x10>)
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7ff fcf0 	bl	800471c <serial_println>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d3c:	e7fe      	b.n	8004d3c <NMI_Handler+0xc>
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	0800a8c4 	.word	0x0800a8c4

08004d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    serial_println("HardFault_Handler: hard fault occurred!!!");
 8004d48:	4b02      	ldr	r3, [pc, #8]	; (8004d54 <HardFault_Handler+0x10>)
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f7ff fce6 	bl	800471c <serial_println>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d50:	e7fe      	b.n	8004d50 <HardFault_Handler+0xc>
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	0800a8f8 	.word	0x0800a8f8

08004d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d70:	f000 fdbe 	bl	80058f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004d7c:	b5b0      	push	{r4, r5, r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

    //Prox. Sensor Interrupt

    serial_printf("==EXTI2 - PROX INT==\n");
 8004d82:	4b62      	ldr	r3, [pc, #392]	; (8004f0c <EXTI2_3_IRQHandler+0x190>)
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7ff fd09 	bl	800479c <serial_printf>
    VCNL4010_ack_ISR();
 8004d8a:	f000 fc45 	bl	8005618 <VCNL4010_ack_ISR>
    state = 1;
 8004d8e:	4b60      	ldr	r3, [pc, #384]	; (8004f10 <EXTI2_3_IRQHandler+0x194>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

    serial_printf("Getting readings... ");
 8004d94:	4b5f      	ldr	r3, [pc, #380]	; (8004f14 <EXTI2_3_IRQHandler+0x198>)
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7ff fd00 	bl	800479c <serial_printf>
    set_cursor(2,2);
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	2002      	movs	r0, #2
 8004da0:	f7fe f8a4 	bl	8002eec <set_cursor>
    printString("EXTI2_3_IRQHandler: PROX INT TRIG'D\n");
 8004da4:	4b5c      	ldr	r3, [pc, #368]	; (8004f18 <EXTI2_3_IRQHandler+0x19c>)
 8004da6:	0018      	movs	r0, r3
 8004da8:	f7fe fc84 	bl	80036b4 <printString>
    uint16_t proximity = VCNL4010_readProximity();
 8004dac:	251e      	movs	r5, #30
 8004dae:	197c      	adds	r4, r7, r5
 8004db0:	f000 fc62 	bl	8005678 <VCNL4010_readProximity>
 8004db4:	0003      	movs	r3, r0
 8004db6:	8023      	strh	r3, [r4, #0]
    printString("PROX (RAW): "); printUnsigned(proximity, 10); printString("\n");
 8004db8:	4b58      	ldr	r3, [pc, #352]	; (8004f1c <EXTI2_3_IRQHandler+0x1a0>)
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f7fe fc7a 	bl	80036b4 <printString>
 8004dc0:	197b      	adds	r3, r7, r5
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	210a      	movs	r1, #10
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f7fe fc80 	bl	80036cc <printUnsigned>
 8004dcc:	4b54      	ldr	r3, [pc, #336]	; (8004f20 <EXTI2_3_IRQHandler+0x1a4>)
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f7fe fc70 	bl	80036b4 <printString>

    int temp = hts221_get_temp('C', hts_cal_data);
 8004dd4:	4b53      	ldr	r3, [pc, #332]	; (8004f24 <EXTI2_3_IRQHandler+0x1a8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	0019      	movs	r1, r3
 8004dda:	2043      	movs	r0, #67	; 0x43
 8004ddc:	f7ff f81a 	bl	8003e14 <hts221_get_temp>
 8004de0:	0003      	movs	r3, r0
 8004de2:	61bb      	str	r3, [r7, #24]
    if (temp == TEMP_ERROR) {
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	4a50      	ldr	r2, [pc, #320]	; (8004f28 <EXTI2_3_IRQHandler+0x1ac>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d104      	bne.n	8004df6 <EXTI2_3_IRQHandler+0x7a>
        printString("ERR READING TEMP\n");
 8004dec:	4b4f      	ldr	r3, [pc, #316]	; (8004f2c <EXTI2_3_IRQHandler+0x1b0>)
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7fe fc60 	bl	80036b4 <printString>
 8004df4:	e00c      	b.n	8004e10 <EXTI2_3_IRQHandler+0x94>
    }
    else {
        printString("TEMP: ");
 8004df6:	4b4e      	ldr	r3, [pc, #312]	; (8004f30 <EXTI2_3_IRQHandler+0x1b4>)
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fe fc5b 	bl	80036b4 <printString>
        printUnsigned(temp, 10);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	210a      	movs	r1, #10
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7fe fc62 	bl	80036cc <printUnsigned>
        printString(" deg C\n");
 8004e08:	4b4a      	ldr	r3, [pc, #296]	; (8004f34 <EXTI2_3_IRQHandler+0x1b8>)
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f7fe fc52 	bl	80036b4 <printString>
    }

    int humid = hts221_get_humid(hts_cal_data);
 8004e10:	4b44      	ldr	r3, [pc, #272]	; (8004f24 <EXTI2_3_IRQHandler+0x1a8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7ff f8d5 	bl	8003fc4 <hts221_get_humid>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	617b      	str	r3, [r7, #20]
    if (humid == HUMID_ERROR) {
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	3301      	adds	r3, #1
 8004e22:	d104      	bne.n	8004e2e <EXTI2_3_IRQHandler+0xb2>
        printString("ERR READING RH\n");
 8004e24:	4b44      	ldr	r3, [pc, #272]	; (8004f38 <EXTI2_3_IRQHandler+0x1bc>)
 8004e26:	0018      	movs	r0, r3
 8004e28:	f7fe fc44 	bl	80036b4 <printString>
 8004e2c:	e00c      	b.n	8004e48 <EXTI2_3_IRQHandler+0xcc>
    }
    else {
        printString("RH: ");
 8004e2e:	4b43      	ldr	r3, [pc, #268]	; (8004f3c <EXTI2_3_IRQHandler+0x1c0>)
 8004e30:	0018      	movs	r0, r3
 8004e32:	f7fe fc3f 	bl	80036b4 <printString>
        printUnsigned(humid, 10);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	210a      	movs	r1, #10
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f7fe fc46 	bl	80036cc <printUnsigned>
        printString(" \n");
 8004e40:	4b3f      	ldr	r3, [pc, #252]	; (8004f40 <EXTI2_3_IRQHandler+0x1c4>)
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7fe fc36 	bl	80036b4 <printString>
    }

    uint16_t voltage = BQ27441_voltage();
 8004e48:	2312      	movs	r3, #18
 8004e4a:	18fc      	adds	r4, r7, r3
 8004e4c:	f7fd f99c 	bl	8002188 <BQ27441_voltage>
 8004e50:	0003      	movs	r3, r0
 8004e52:	8023      	strh	r3, [r4, #0]
    uint16_t soc = BQ27441_soc(FILTERED);
 8004e54:	2310      	movs	r3, #16
 8004e56:	18fc      	adds	r4, r7, r3
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f7fd fa3d 	bl	80022d8 <BQ27441_soc>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	8023      	strh	r3, [r4, #0]
    uint16_t current = BQ27441_current(AVG);
 8004e62:	2000      	movs	r0, #0
 8004e64:	f7fd f999 	bl	800219a <BQ27441_current>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	230e      	movs	r3, #14
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	801a      	strh	r2, [r3, #0]
    uint16_t cap_remaining = BQ27441_capacity(REMAIN);
 8004e72:	230c      	movs	r3, #12
 8004e74:	18fc      	adds	r4, r7, r3
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7fd f9c6 	bl	8002208 <BQ27441_capacity>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	8023      	strh	r3, [r4, #0]
    uint16_t cap_max = BQ27441_capacity(DESIGN);
 8004e80:	230a      	movs	r3, #10
 8004e82:	18fc      	adds	r4, r7, r3
 8004e84:	2008      	movs	r0, #8
 8004e86:	f7fd f9bf 	bl	8002208 <BQ27441_capacity>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	8023      	strh	r3, [r4, #0]
    int16_t power = BQ27441_power(); //average draw
 8004e8e:	2308      	movs	r3, #8
 8004e90:	18fc      	adds	r4, r7, r3
 8004e92:	f7fd fa17 	bl	80022c4 <BQ27441_power>
 8004e96:	0003      	movs	r3, r0
 8004e98:	8023      	strh	r3, [r4, #0]
    uint16_t soh = BQ27441_soh(PERCENT);
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7fd fa44 	bl	8002328 <BQ27441_soh>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	1dbb      	adds	r3, r7, #6
 8004ea6:	801a      	strh	r2, [r3, #0]
    uint16_t temp_bat = BQ27441_temperature(BATTERY) / 10;
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	f7fd fa65 	bl	8002378 <BQ27441_temperature>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	1d3c      	adds	r4, r7, #4
 8004eb2:	210a      	movs	r1, #10
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f7fb f927 	bl	8000108 <__udivsi3>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	8023      	strh	r3, [r4, #0]
    uint16_t temp_bq_IC = BQ27441_temperature(INTERNAL_TEMP) / 10;
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	f7fd fa5a 	bl	8002378 <BQ27441_temperature>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	1cbc      	adds	r4, r7, #2
 8004ec8:	210a      	movs	r1, #10
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f7fb f91c 	bl	8000108 <__udivsi3>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	8023      	strh	r3, [r4, #0]
    serial_printf("Done!\n");
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <EXTI2_3_IRQHandler+0x1c8>)
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7ff fc60 	bl	800479c <serial_printf>

    serial_printf("Printing readings... ");
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <EXTI2_3_IRQHandler+0x1cc>)
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f7ff fc5c 	bl	800479c <serial_printf>
//    printString("REM CAP: "); printUnsigned(cap_remaining, 10); printString(" mAh\n");
//    printString("AVG PWR: "); printFloat(power, 0); printString(" mW\n");
//    printString("HEALTH: "); printUnsigned(soh, 10); printString("\n");
//    printString("BATT TEMP: "); printUnsigned(temp_bat, 10); printString(" K \n");
//    printString("IC TEMP: "); printUnsigned(temp_bq_IC, 10); printString(" K \n");
    serial_printf("Done!\n");
 8004ee4:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <EXTI2_3_IRQHandler+0x1c8>)
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f7ff fc58 	bl	800479c <serial_printf>

    serial_printf("Updating display... ");
 8004eec:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <EXTI2_3_IRQHandler+0x1d0>)
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f7ff fc54 	bl	800479c <serial_printf>
//    display(false);
    serial_printf("Done!\n\n");
 8004ef4:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <EXTI2_3_IRQHandler+0x1d4>)
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f7ff fc50 	bl	800479c <serial_printf>

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004efc:	2004      	movs	r0, #4
 8004efe:	f001 fe03 	bl	8006b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b008      	add	sp, #32
 8004f08:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	0800a924 	.word	0x0800a924
 8004f10:	200000c4 	.word	0x200000c4
 8004f14:	0800a93c 	.word	0x0800a93c
 8004f18:	0800a954 	.word	0x0800a954
 8004f1c:	0800a97c 	.word	0x0800a97c
 8004f20:	0800a98c 	.word	0x0800a98c
 8004f24:	20000214 	.word	0x20000214
 8004f28:	fffffe34 	.word	0xfffffe34
 8004f2c:	0800a990 	.word	0x0800a990
 8004f30:	0800a9a4 	.word	0x0800a9a4
 8004f34:	0800a9ac 	.word	0x0800a9ac
 8004f38:	0800a9b4 	.word	0x0800a9b4
 8004f3c:	0800a9c4 	.word	0x0800a9c4
 8004f40:	0800a9cc 	.word	0x0800a9cc
 8004f44:	0800a9d0 	.word	0x0800a9d0
 8004f48:	0800a9d8 	.word	0x0800a9d8
 8004f4c:	0800a9f0 	.word	0x0800a9f0
 8004f50:	0800aa08 	.word	0x0800aa08

08004f54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004f58:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <DMA1_Channel1_IRQHandler+0x14>)
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f001 fb92 	bl	8006684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	20000108 	.word	0x20000108

08004f6c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <ADC1_COMP_IRQHandler+0x14>)
 8004f72:	0018      	movs	r0, r3
 8004f74:	f000 ffa6 	bl	8005ec4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004f78:	46c0      	nop			; (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	20000150 	.word	0x20000150

08004f84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

    GPIOA->BSRR |= GPIO_BSRR_BS_8;
 8004f88:	23a0      	movs	r3, #160	; 0xa0
 8004f8a:	05db      	lsls	r3, r3, #23
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	23a0      	movs	r3, #160	; 0xa0
 8004f90:	05db      	lsls	r3, r3, #23
 8004f92:	2180      	movs	r1, #128	; 0x80
 8004f94:	0049      	lsls	r1, r1, #1
 8004f96:	430a      	orrs	r2, r1
 8004f98:	619a      	str	r2, [r3, #24]
//        button_history[3] = (button_history[3] >> 1);
//    }
//
//    GPIOA->BSRR |= GPIO_BSRR_BR_8;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f9a:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <TIM2_IRQHandler+0x24>)
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f004 f989 	bl	80092b4 <HAL_TIM_IRQHandler>
//
//    if (button_history[3] == pressed_mask) {
//        serial_println("mango");
//    }
  /* USER CODE END TIM2_IRQn 1 */
}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	2000033c 	.word	0x2000033c

08004fac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004fac:	b5b0      	push	{r4, r5, r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  // Timer 6 should gather new sensor readings, upload these data to the cloud via Wi-Fi, pull the updated prediction, and update the display.

  // Turn on the 5V power to the methane and Wi-Fi peripherals
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8004fb2:	2380      	movs	r3, #128	; 0x80
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4854      	ldr	r0, [pc, #336]	; (8005108 <TIM6_DAC_IRQHandler+0x15c>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	0019      	movs	r1, r3
 8004fbc:	f001 fd86 	bl	8006acc <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 8004fc0:	4b52      	ldr	r3, [pc, #328]	; (800510c <TIM6_DAC_IRQHandler+0x160>)
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f000 fcb0 	bl	8005928 <HAL_Delay>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004fc8:	4b51      	ldr	r3, [pc, #324]	; (8005110 <TIM6_DAC_IRQHandler+0x164>)
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f004 f972 	bl	80092b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  // Gather sensor data
  uint16_t proximity = VCNL4010_readProximity();
 8004fd0:	250e      	movs	r5, #14
 8004fd2:	197c      	adds	r4, r7, r5
 8004fd4:	f000 fb50 	bl	8005678 <VCNL4010_readProximity>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	8023      	strh	r3, [r4, #0]
  serial_printf("Proximity Reading is \t\t\t%d (0x%x)\r\n", proximity, proximity);
 8004fdc:	197b      	adds	r3, r7, r5
 8004fde:	8819      	ldrh	r1, [r3, #0]
 8004fe0:	197b      	adds	r3, r7, r5
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	4b4b      	ldr	r3, [pc, #300]	; (8005114 <TIM6_DAC_IRQHandler+0x168>)
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7ff fbd8 	bl	800479c <serial_printf>

  int temp = -200;
 8004fec:	23c8      	movs	r3, #200	; 0xc8
 8004fee:	425b      	negs	r3, r3
 8004ff0:	617b      	str	r3, [r7, #20]
  int humid = -1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	425b      	negs	r3, r3
 8004ff6:	613b      	str	r3, [r7, #16]
  int methane = -1;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	425b      	negs	r3, r3
 8004ffc:	60bb      	str	r3, [r7, #8]
  if (hts_cal_data != NULL) {
 8004ffe:	4b46      	ldr	r3, [pc, #280]	; (8005118 <TIM6_DAC_IRQHandler+0x16c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02c      	beq.n	8005060 <TIM6_DAC_IRQHandler+0xb4>
    temp = hts221_get_temp('F', hts_cal_data);
 8005006:	4b44      	ldr	r3, [pc, #272]	; (8005118 <TIM6_DAC_IRQHandler+0x16c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	0019      	movs	r1, r3
 800500c:	2046      	movs	r0, #70	; 0x46
 800500e:	f7fe ff01 	bl	8003e14 <hts221_get_temp>
 8005012:	0003      	movs	r3, r0
 8005014:	617b      	str	r3, [r7, #20]
    if (temp == TEMP_ERROR) serial_printf("Error reading temperature\r\n");
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	4a40      	ldr	r2, [pc, #256]	; (800511c <TIM6_DAC_IRQHandler+0x170>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d104      	bne.n	8005028 <TIM6_DAC_IRQHandler+0x7c>
 800501e:	4b40      	ldr	r3, [pc, #256]	; (8005120 <TIM6_DAC_IRQHandler+0x174>)
 8005020:	0018      	movs	r0, r3
 8005022:	f7ff fbbb 	bl	800479c <serial_printf>
 8005026:	e005      	b.n	8005034 <TIM6_DAC_IRQHandler+0x88>
    else serial_printf("Current temperature is \t\t\t%d\tC\r\n", temp);
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4b3e      	ldr	r3, [pc, #248]	; (8005124 <TIM6_DAC_IRQHandler+0x178>)
 800502c:	0011      	movs	r1, r2
 800502e:	0018      	movs	r0, r3
 8005030:	f7ff fbb4 	bl	800479c <serial_printf>

    humid = hts221_get_humid(hts_cal_data);
 8005034:	4b38      	ldr	r3, [pc, #224]	; (8005118 <TIM6_DAC_IRQHandler+0x16c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	0018      	movs	r0, r3
 800503a:	f7fe ffc3 	bl	8003fc4 <hts221_get_humid>
 800503e:	0003      	movs	r3, r0
 8005040:	613b      	str	r3, [r7, #16]
    if (humid == HUMID_ERROR) serial_printf("Error reading humidity\r\n");
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	3301      	adds	r3, #1
 8005046:	d104      	bne.n	8005052 <TIM6_DAC_IRQHandler+0xa6>
 8005048:	4b37      	ldr	r3, [pc, #220]	; (8005128 <TIM6_DAC_IRQHandler+0x17c>)
 800504a:	0018      	movs	r0, r3
 800504c:	f7ff fba6 	bl	800479c <serial_printf>
 8005050:	e00a      	b.n	8005068 <TIM6_DAC_IRQHandler+0xbc>
    else serial_printf("Current Relative Humidity is \t\t%d\t%c\r\n\n", humid, 37);
 8005052:	6939      	ldr	r1, [r7, #16]
 8005054:	4b35      	ldr	r3, [pc, #212]	; (800512c <TIM6_DAC_IRQHandler+0x180>)
 8005056:	2225      	movs	r2, #37	; 0x25
 8005058:	0018      	movs	r0, r3
 800505a:	f7ff fb9f 	bl	800479c <serial_printf>
 800505e:	e003      	b.n	8005068 <TIM6_DAC_IRQHandler+0xbc>
  } else {
    serial_printf("Temp/RH sensor initialization has failed.\n Please power cycle system to attemp reinitialization.\n");
 8005060:	4b33      	ldr	r3, [pc, #204]	; (8005130 <TIM6_DAC_IRQHandler+0x184>)
 8005062:	0018      	movs	r0, r3
 8005064:	f7ff fb9a 	bl	800479c <serial_printf>
  }

//  uint16_t voltage = BQ27441_voltage();
  uint16_t soc = BQ27441_soc(FILTERED);
 8005068:	1dbc      	adds	r4, r7, #6
 800506a:	2000      	movs	r0, #0
 800506c:	f7fd f934 	bl	80022d8 <BQ27441_soc>
 8005070:	0003      	movs	r3, r0
 8005072:	8023      	strh	r3, [r4, #0]
//  serial_printf("Health\t\t\t\t\t%d\t%%\r\n", soh);
//  serial_printf("Battery Pack Temp\t\t\t%d\tK\r\n", temp_bat);
//  serial_printf("Current Bat IC Temp is\t\t\t%d\tK\r\n\n", temp_bq_IC);

  // TODO: Add ADC reading for methane sensor - fix
  HAL_ADC_Start(&hadc);
 8005074:	4b2f      	ldr	r3, [pc, #188]	; (8005134 <TIM6_DAC_IRQHandler+0x188>)
 8005076:	0018      	movs	r0, r3
 8005078:	f000 fdee 	bl	8005c58 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800507c:	2301      	movs	r3, #1
 800507e:	425a      	negs	r2, r3
 8005080:	4b2c      	ldr	r3, [pc, #176]	; (8005134 <TIM6_DAC_IRQHandler+0x188>)
 8005082:	0011      	movs	r1, r2
 8005084:	0018      	movs	r0, r3
 8005086:	f000 fe7b 	bl	8005d80 <HAL_ADC_PollForConversion>
  methane = HAL_ADC_GetValue(&hadc);
 800508a:	4b2a      	ldr	r3, [pc, #168]	; (8005134 <TIM6_DAC_IRQHandler+0x188>)
 800508c:	0018      	movs	r0, r3
 800508e:	f000 ff0d 	bl	8005eac <HAL_ADC_GetValue>
 8005092:	0003      	movs	r3, r0
 8005094:	60bb      	str	r3, [r7, #8]
  HAL_ADC_Stop(&hadc);
 8005096:	4b27      	ldr	r3, [pc, #156]	; (8005134 <TIM6_DAC_IRQHandler+0x188>)
 8005098:	0018      	movs	r0, r3
 800509a:	f000 fe31 	bl	8005d00 <HAL_ADC_Stop>

  serial_printf("Methane: %d\n", methane);
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4b25      	ldr	r3, [pc, #148]	; (8005138 <TIM6_DAC_IRQHandler+0x18c>)
 80050a2:	0011      	movs	r1, r2
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7ff fb79 	bl	800479c <serial_printf>

  // Send sensor data to cloud
  serial_select(WIFI);
 80050aa:	2000      	movs	r0, #0
 80050ac:	f7ff fad2 	bl	8004654 <serial_select>
  if (setup_wifi("ASUS", "rickroll362") == AT_FAIL) {
 80050b0:	4a22      	ldr	r2, [pc, #136]	; (800513c <TIM6_DAC_IRQHandler+0x190>)
 80050b2:	4b23      	ldr	r3, [pc, #140]	; (8005140 <TIM6_DAC_IRQHandler+0x194>)
 80050b4:	0011      	movs	r1, r2
 80050b6:	0018      	movs	r0, r3
 80050b8:	f7fd f822 	bl	8002100 <setup_wifi>
    // TODO: error handling
  }
  if (sent_freshbyte_data(temp, humid, methane) == AT_FAIL){
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	6939      	ldr	r1, [r7, #16]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	0018      	movs	r0, r3
 80050c4:	f7fd f83c 	bl	8002140 <sent_freshbyte_data>
    // TODO: error handling
  }

  // Disable the 5V regulator
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_RESET);
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	480e      	ldr	r0, [pc, #56]	; (8005108 <TIM6_DAC_IRQHandler+0x15c>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	0019      	movs	r1, r3
 80050d2:	f001 fcfb 	bl	8006acc <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80050d6:	4b0d      	ldr	r3, [pc, #52]	; (800510c <TIM6_DAC_IRQHandler+0x160>)
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 fc25 	bl	8005928 <HAL_Delay>
  serial_select(DEBUG_PRINT);
 80050de:	2001      	movs	r0, #1
 80050e0:	f7ff fab8 	bl	8004654 <serial_select>
  serial_println("Interrupt done!");
 80050e4:	4b17      	ldr	r3, [pc, #92]	; (8005144 <TIM6_DAC_IRQHandler+0x198>)
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7ff fb18 	bl	800471c <serial_println>

  //get prediction
//  int prediction = get_prediction();

  //TODO: get prediction int
  display_readings(soc, temp, humid, methane, 10);
 80050ec:	1dbb      	adds	r3, r7, #6
 80050ee:	8818      	ldrh	r0, [r3, #0]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	6979      	ldr	r1, [r7, #20]
 80050f6:	240a      	movs	r4, #10
 80050f8:	9400      	str	r4, [sp, #0]
 80050fa:	f000 f825 	bl	8005148 <display_readings>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	46bd      	mov	sp, r7
 8005102:	b006      	add	sp, #24
 8005104:	bdb0      	pop	{r4, r5, r7, pc}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	50000800 	.word	0x50000800
 800510c:	00001388 	.word	0x00001388
 8005110:	200002fc 	.word	0x200002fc
 8005114:	0800aa10 	.word	0x0800aa10
 8005118:	20000214 	.word	0x20000214
 800511c:	fffffe34 	.word	0xfffffe34
 8005120:	0800aa34 	.word	0x0800aa34
 8005124:	0800aa50 	.word	0x0800aa50
 8005128:	0800aa74 	.word	0x0800aa74
 800512c:	0800aa90 	.word	0x0800aa90
 8005130:	0800aab8 	.word	0x0800aab8
 8005134:	20000150 	.word	0x20000150
 8005138:	0800ab1c 	.word	0x0800ab1c
 800513c:	0800ab2c 	.word	0x0800ab2c
 8005140:	0800ab38 	.word	0x0800ab38
 8005144:	0800ab40 	.word	0x0800ab40

08005148 <display_readings>:

/* USER CODE BEGIN 1 */
void display_readings(int battery, int temp, int humid, int methane_raw, int prediction_days) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]

  //use string or use

  int methane_ppm = methane_raw;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	617b      	str	r3, [r7, #20]
  // TODO: get ppm methane value for display
  //  int methane_ppm = ADC_calc_ppm(methane_raw);

  serial_select(DEBUG_PRINT);
 800515a:	2001      	movs	r0, #1
 800515c:	f7ff fa7a 	bl	8004654 <serial_select>
  serial_printf("Clearing display buffers...\n");
 8005160:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <display_readings+0x90>)
 8005162:	0018      	movs	r0, r3
 8005164:	f7ff fb1a 	bl	800479c <serial_printf>
  clear_buffer();
 8005168:	f7fd fbc2 	bl	80028f0 <clear_buffer>

  serial_printf("Powering up display...\n");
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <display_readings+0x94>)
 800516e:	0018      	movs	r0, r3
 8005170:	f7ff fb14 	bl	800479c <serial_printf>
  epd_powerUp();
 8005174:	f7fd fa9a 	bl	80026ac <epd_powerUp>

  serial_printf("Writing to B/W buffer...\n");
 8005178:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <display_readings+0x98>)
 800517a:	0018      	movs	r0, r3
 800517c:	f7ff fb0e 	bl	800479c <serial_printf>
  write_RAM_to_epd(buffer1, buffer1_size, 0, false);
 8005180:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <display_readings+0x9c>)
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <display_readings+0xa0>)
 8005186:	6819      	ldr	r1, [r3, #0]
 8005188:	2300      	movs	r3, #0
 800518a:	2200      	movs	r2, #0
 800518c:	f7fd fcae 	bl	8002aec <write_RAM_to_epd>

  serial_printf("Writing to R buffer...\n");
 8005190:	4b16      	ldr	r3, [pc, #88]	; (80051ec <display_readings+0xa4>)
 8005192:	0018      	movs	r0, r3
 8005194:	f7ff fb02 	bl	800479c <serial_printf>
  write_RAM_to_epd(buffer1, buffer1_size, 1, false);
 8005198:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <display_readings+0x9c>)
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <display_readings+0xa0>)
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	2300      	movs	r3, #0
 80051a2:	2201      	movs	r2, #1
 80051a4:	f7fd fca2 	bl	8002aec <write_RAM_to_epd>

  serial_println("Printing random information to display\n");
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <display_readings+0xa8>)
 80051aa:	0018      	movs	r0, r3
 80051ac:	f7ff fab6 	bl	800471c <serial_println>
  set_text_scale(2);
 80051b0:	2002      	movs	r0, #2
 80051b2:	f7fd fe89 	bl	8002ec8 <set_text_scale>
  set_x_margin(1);
 80051b6:	2001      	movs	r0, #1
 80051b8:	f7fd feb4 	bl	8002f24 <set_x_margin>
  set_y_margin(1);
 80051bc:	2001      	movs	r0, #1
 80051be:	f7fd fec1 	bl	8002f44 <set_y_margin>
  set_cursor(1,1);
 80051c2:	2101      	movs	r1, #1
 80051c4:	2001      	movs	r0, #1
 80051c6:	f7fd fe91 	bl	8002eec <set_cursor>
//  printString("Food: Banana\n");
//  // TODO: get time elapsed from RTC
//  printString("Time Elapsed: 2 days\n");
//  printString("Est. Days Left: %d days\n", prediction_days);

  display(true);
 80051ca:	2001      	movs	r0, #1
 80051cc:	f7fd fcec 	bl	8002ba8 <display>
}
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b006      	add	sp, #24
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	0800ab50 	.word	0x0800ab50
 80051dc:	0800ab70 	.word	0x0800ab70
 80051e0:	0800ab88 	.word	0x0800ab88
 80051e4:	200001b4 	.word	0x200001b4
 80051e8:	200001b0 	.word	0x200001b0
 80051ec:	0800aba4 	.word	0x0800aba4
 80051f0:	0800abbc 	.word	0x0800abbc

080051f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051fc:	4a14      	ldr	r2, [pc, #80]	; (8005250 <_sbrk+0x5c>)
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <_sbrk+0x60>)
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005208:	4b13      	ldr	r3, [pc, #76]	; (8005258 <_sbrk+0x64>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d102      	bne.n	8005216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005210:	4b11      	ldr	r3, [pc, #68]	; (8005258 <_sbrk+0x64>)
 8005212:	4a12      	ldr	r2, [pc, #72]	; (800525c <_sbrk+0x68>)
 8005214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005216:	4b10      	ldr	r3, [pc, #64]	; (8005258 <_sbrk+0x64>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	18d3      	adds	r3, r2, r3
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	429a      	cmp	r2, r3
 8005222:	d207      	bcs.n	8005234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005224:	f005 f87c 	bl	800a320 <__errno>
 8005228:	0003      	movs	r3, r0
 800522a:	220c      	movs	r2, #12
 800522c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800522e:	2301      	movs	r3, #1
 8005230:	425b      	negs	r3, r3
 8005232:	e009      	b.n	8005248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005234:	4b08      	ldr	r3, [pc, #32]	; (8005258 <_sbrk+0x64>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800523a:	4b07      	ldr	r3, [pc, #28]	; (8005258 <_sbrk+0x64>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	18d2      	adds	r2, r2, r3
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <_sbrk+0x64>)
 8005244:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005246:	68fb      	ldr	r3, [r7, #12]
}
 8005248:	0018      	movs	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	b006      	add	sp, #24
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20002000 	.word	0x20002000
 8005254:	00000400 	.word	0x00000400
 8005258:	200000fc 	.word	0x200000fc
 800525c:	20000498 	.word	0x20000498

08005260 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005264:	46c0      	nop			; (mov r8, r8)
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005272:	2308      	movs	r3, #8
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	0018      	movs	r0, r3
 8005278:	2310      	movs	r3, #16
 800527a:	001a      	movs	r2, r3
 800527c:	2100      	movs	r1, #0
 800527e:	f005 f88c 	bl	800a39a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005282:	003b      	movs	r3, r7
 8005284:	0018      	movs	r0, r3
 8005286:	2308      	movs	r3, #8
 8005288:	001a      	movs	r2, r3
 800528a:	2100      	movs	r1, #0
 800528c:	f005 f885 	bl	800a39a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005290:	4b1e      	ldr	r3, [pc, #120]	; (800530c <MX_TIM2_Init+0xa0>)
 8005292:	2280      	movs	r2, #128	; 0x80
 8005294:	05d2      	lsls	r2, r2, #23
 8005296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000 - 1;
 8005298:	4b1c      	ldr	r3, [pc, #112]	; (800530c <MX_TIM2_Init+0xa0>)
 800529a:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <MX_TIM2_Init+0xa4>)
 800529c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800529e:	4b1b      	ldr	r3, [pc, #108]	; (800530c <MX_TIM2_Init+0xa0>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80052a4:	4b19      	ldr	r3, [pc, #100]	; (800530c <MX_TIM2_Init+0xa0>)
 80052a6:	2264      	movs	r2, #100	; 0x64
 80052a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052aa:	4b18      	ldr	r3, [pc, #96]	; (800530c <MX_TIM2_Init+0xa0>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052b0:	4b16      	ldr	r3, [pc, #88]	; (800530c <MX_TIM2_Init+0xa0>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80052b6:	4b15      	ldr	r3, [pc, #84]	; (800530c <MX_TIM2_Init+0xa0>)
 80052b8:	0018      	movs	r0, r3
 80052ba:	f003 ff6f 	bl	800919c <HAL_TIM_Base_Init>
 80052be:	1e03      	subs	r3, r0, #0
 80052c0:	d001      	beq.n	80052c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80052c2:	f7ff f97d 	bl	80045c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052c6:	2108      	movs	r1, #8
 80052c8:	187b      	adds	r3, r7, r1
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	0152      	lsls	r2, r2, #5
 80052ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052d0:	187a      	adds	r2, r7, r1
 80052d2:	4b0e      	ldr	r3, [pc, #56]	; (800530c <MX_TIM2_Init+0xa0>)
 80052d4:	0011      	movs	r1, r2
 80052d6:	0018      	movs	r0, r3
 80052d8:	f004 f8d4 	bl	8009484 <HAL_TIM_ConfigClockSource>
 80052dc:	1e03      	subs	r3, r0, #0
 80052de:	d001      	beq.n	80052e4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80052e0:	f7ff f96e 	bl	80045c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052e4:	003b      	movs	r3, r7
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052ea:	003b      	movs	r3, r7
 80052ec:	2200      	movs	r2, #0
 80052ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052f0:	003a      	movs	r2, r7
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <MX_TIM2_Init+0xa0>)
 80052f4:	0011      	movs	r1, r2
 80052f6:	0018      	movs	r0, r3
 80052f8:	f004 faa4 	bl	8009844 <HAL_TIMEx_MasterConfigSynchronization>
 80052fc:	1e03      	subs	r3, r0, #0
 80052fe:	d001      	beq.n	8005304 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8005300:	f7ff f95e 	bl	80045c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005304:	46c0      	nop			; (mov r8, r8)
 8005306:	46bd      	mov	sp, r7
 8005308:	b006      	add	sp, #24
 800530a:	bd80      	pop	{r7, pc}
 800530c:	2000033c 	.word	0x2000033c
 8005310:	00000f9f 	.word	0x00000f9f

08005314 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800531a:	003b      	movs	r3, r7
 800531c:	0018      	movs	r0, r3
 800531e:	2308      	movs	r3, #8
 8005320:	001a      	movs	r2, r3
 8005322:	2100      	movs	r1, #0
 8005324:	f005 f839 	bl	800a39a <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005328:	4b15      	ldr	r3, [pc, #84]	; (8005380 <MX_TIM6_Init+0x6c>)
 800532a:	4a16      	ldr	r2, [pc, #88]	; (8005384 <MX_TIM6_Init+0x70>)
 800532c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2097-1;
 800532e:	4b14      	ldr	r3, [pc, #80]	; (8005380 <MX_TIM6_Init+0x6c>)
 8005330:	2283      	movs	r2, #131	; 0x83
 8005332:	0112      	lsls	r2, r2, #4
 8005334:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005336:	4b12      	ldr	r3, [pc, #72]	; (8005380 <MX_TIM6_Init+0x6c>)
 8005338:	2200      	movs	r2, #0
 800533a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 60000-1;
 800533c:	4b10      	ldr	r3, [pc, #64]	; (8005380 <MX_TIM6_Init+0x6c>)
 800533e:	4a12      	ldr	r2, [pc, #72]	; (8005388 <MX_TIM6_Init+0x74>)
 8005340:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <MX_TIM6_Init+0x6c>)
 8005344:	2200      	movs	r2, #0
 8005346:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005348:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <MX_TIM6_Init+0x6c>)
 800534a:	0018      	movs	r0, r3
 800534c:	f003 ff26 	bl	800919c <HAL_TIM_Base_Init>
 8005350:	1e03      	subs	r3, r0, #0
 8005352:	d001      	beq.n	8005358 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8005354:	f7ff f934 	bl	80045c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005358:	003b      	movs	r3, r7
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800535e:	003b      	movs	r3, r7
 8005360:	2200      	movs	r2, #0
 8005362:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005364:	003a      	movs	r2, r7
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <MX_TIM6_Init+0x6c>)
 8005368:	0011      	movs	r1, r2
 800536a:	0018      	movs	r0, r3
 800536c:	f004 fa6a 	bl	8009844 <HAL_TIMEx_MasterConfigSynchronization>
 8005370:	1e03      	subs	r3, r0, #0
 8005372:	d001      	beq.n	8005378 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8005374:	f7ff f924 	bl	80045c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b002      	add	sp, #8
 800537e:	bd80      	pop	{r7, pc}
 8005380:	200002fc 	.word	0x200002fc
 8005384:	40001000 	.word	0x40001000
 8005388:	0000ea5f 	.word	0x0000ea5f

0800538c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	05db      	lsls	r3, r3, #23
 800539c:	429a      	cmp	r2, r3
 800539e:	d106      	bne.n	80053ae <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <HAL_TIM_Base_MspInit+0x40>)
 80053a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a4:	4b09      	ldr	r3, [pc, #36]	; (80053cc <HAL_TIM_Base_MspInit+0x40>)
 80053a6:	2101      	movs	r1, #1
 80053a8:	430a      	orrs	r2, r1
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80053ac:	e00a      	b.n	80053c4 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM6)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a07      	ldr	r2, [pc, #28]	; (80053d0 <HAL_TIM_Base_MspInit+0x44>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d105      	bne.n	80053c4 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80053b8:	4b04      	ldr	r3, [pc, #16]	; (80053cc <HAL_TIM_Base_MspInit+0x40>)
 80053ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053bc:	4b03      	ldr	r3, [pc, #12]	; (80053cc <HAL_TIM_Base_MspInit+0x40>)
 80053be:	2110      	movs	r1, #16
 80053c0:	430a      	orrs	r2, r1
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b002      	add	sp, #8
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40001000 	.word	0x40001000

080053d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053d8:	4b14      	ldr	r3, [pc, #80]	; (800542c <MX_USART1_UART_Init+0x58>)
 80053da:	4a15      	ldr	r2, [pc, #84]	; (8005430 <MX_USART1_UART_Init+0x5c>)
 80053dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80053de:	4b13      	ldr	r3, [pc, #76]	; (800542c <MX_USART1_UART_Init+0x58>)
 80053e0:	22e1      	movs	r2, #225	; 0xe1
 80053e2:	0252      	lsls	r2, r2, #9
 80053e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053e6:	4b11      	ldr	r3, [pc, #68]	; (800542c <MX_USART1_UART_Init+0x58>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053ec:	4b0f      	ldr	r3, [pc, #60]	; (800542c <MX_USART1_UART_Init+0x58>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053f2:	4b0e      	ldr	r3, [pc, #56]	; (800542c <MX_USART1_UART_Init+0x58>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <MX_USART1_UART_Init+0x58>)
 80053fa:	220c      	movs	r2, #12
 80053fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053fe:	4b0b      	ldr	r3, [pc, #44]	; (800542c <MX_USART1_UART_Init+0x58>)
 8005400:	2200      	movs	r2, #0
 8005402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005404:	4b09      	ldr	r3, [pc, #36]	; (800542c <MX_USART1_UART_Init+0x58>)
 8005406:	2200      	movs	r2, #0
 8005408:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800540a:	4b08      	ldr	r3, [pc, #32]	; (800542c <MX_USART1_UART_Init+0x58>)
 800540c:	2200      	movs	r2, #0
 800540e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005410:	4b06      	ldr	r3, [pc, #24]	; (800542c <MX_USART1_UART_Init+0x58>)
 8005412:	2200      	movs	r2, #0
 8005414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <MX_USART1_UART_Init+0x58>)
 8005418:	0018      	movs	r0, r3
 800541a:	f004 fa6b 	bl	80098f4 <HAL_UART_Init>
 800541e:	1e03      	subs	r3, r0, #0
 8005420:	d001      	beq.n	8005426 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005422:	f7ff f8cd 	bl	80045c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	2000037c 	.word	0x2000037c
 8005430:	40013800 	.word	0x40013800

08005434 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005438:	4b14      	ldr	r3, [pc, #80]	; (800548c <MX_USART2_UART_Init+0x58>)
 800543a:	4a15      	ldr	r2, [pc, #84]	; (8005490 <MX_USART2_UART_Init+0x5c>)
 800543c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <MX_USART2_UART_Init+0x58>)
 8005440:	2296      	movs	r2, #150	; 0x96
 8005442:	0192      	lsls	r2, r2, #6
 8005444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005446:	4b11      	ldr	r3, [pc, #68]	; (800548c <MX_USART2_UART_Init+0x58>)
 8005448:	2200      	movs	r2, #0
 800544a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <MX_USART2_UART_Init+0x58>)
 800544e:	2200      	movs	r2, #0
 8005450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005452:	4b0e      	ldr	r3, [pc, #56]	; (800548c <MX_USART2_UART_Init+0x58>)
 8005454:	2200      	movs	r2, #0
 8005456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <MX_USART2_UART_Init+0x58>)
 800545a:	220c      	movs	r2, #12
 800545c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <MX_USART2_UART_Init+0x58>)
 8005460:	2200      	movs	r2, #0
 8005462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <MX_USART2_UART_Init+0x58>)
 8005466:	2200      	movs	r2, #0
 8005468:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800546a:	4b08      	ldr	r3, [pc, #32]	; (800548c <MX_USART2_UART_Init+0x58>)
 800546c:	2200      	movs	r2, #0
 800546e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <MX_USART2_UART_Init+0x58>)
 8005472:	2200      	movs	r2, #0
 8005474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <MX_USART2_UART_Init+0x58>)
 8005478:	0018      	movs	r0, r3
 800547a:	f004 fa3b 	bl	80098f4 <HAL_UART_Init>
 800547e:	1e03      	subs	r3, r0, #0
 8005480:	d001      	beq.n	8005486 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005482:	f7ff f89d 	bl	80045c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000400 	.word	0x20000400
 8005490:	40004400 	.word	0x40004400

08005494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b08b      	sub	sp, #44	; 0x2c
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	2414      	movs	r4, #20
 800549e:	193b      	adds	r3, r7, r4
 80054a0:	0018      	movs	r0, r3
 80054a2:	2314      	movs	r3, #20
 80054a4:	001a      	movs	r2, r3
 80054a6:	2100      	movs	r1, #0
 80054a8:	f004 ff77 	bl	800a39a <memset>
  if(uartHandle->Instance==USART1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a30      	ldr	r2, [pc, #192]	; (8005574 <HAL_UART_MspInit+0xe0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d12b      	bne.n	800550e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80054b6:	4b30      	ldr	r3, [pc, #192]	; (8005578 <HAL_UART_MspInit+0xe4>)
 80054b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ba:	4b2f      	ldr	r3, [pc, #188]	; (8005578 <HAL_UART_MspInit+0xe4>)
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	01c9      	lsls	r1, r1, #7
 80054c0:	430a      	orrs	r2, r1
 80054c2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c4:	4b2c      	ldr	r3, [pc, #176]	; (8005578 <HAL_UART_MspInit+0xe4>)
 80054c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c8:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <HAL_UART_MspInit+0xe4>)
 80054ca:	2101      	movs	r1, #1
 80054cc:	430a      	orrs	r2, r1
 80054ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80054d0:	4b29      	ldr	r3, [pc, #164]	; (8005578 <HAL_UART_MspInit+0xe4>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	2201      	movs	r2, #1
 80054d6:	4013      	ands	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80054dc:	193b      	adds	r3, r7, r4
 80054de:	22c0      	movs	r2, #192	; 0xc0
 80054e0:	00d2      	lsls	r2, r2, #3
 80054e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e4:	0021      	movs	r1, r4
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	2202      	movs	r2, #2
 80054ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	2200      	movs	r2, #0
 80054f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f2:	187b      	adds	r3, r7, r1
 80054f4:	2203      	movs	r2, #3
 80054f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80054f8:	187b      	adds	r3, r7, r1
 80054fa:	2204      	movs	r2, #4
 80054fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054fe:	187a      	adds	r2, r7, r1
 8005500:	23a0      	movs	r3, #160	; 0xa0
 8005502:	05db      	lsls	r3, r3, #23
 8005504:	0011      	movs	r1, r2
 8005506:	0018      	movs	r0, r3
 8005508:	f001 f96a 	bl	80067e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800550c:	e02e      	b.n	800556c <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART2)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1a      	ldr	r2, [pc, #104]	; (800557c <HAL_UART_MspInit+0xe8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d129      	bne.n	800556c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005518:	4b17      	ldr	r3, [pc, #92]	; (8005578 <HAL_UART_MspInit+0xe4>)
 800551a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551c:	4b16      	ldr	r3, [pc, #88]	; (8005578 <HAL_UART_MspInit+0xe4>)
 800551e:	2180      	movs	r1, #128	; 0x80
 8005520:	0289      	lsls	r1, r1, #10
 8005522:	430a      	orrs	r2, r1
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <HAL_UART_MspInit+0xe4>)
 8005528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552a:	4b13      	ldr	r3, [pc, #76]	; (8005578 <HAL_UART_MspInit+0xe4>)
 800552c:	2101      	movs	r1, #1
 800552e:	430a      	orrs	r2, r1
 8005530:	62da      	str	r2, [r3, #44]	; 0x2c
 8005532:	4b11      	ldr	r3, [pc, #68]	; (8005578 <HAL_UART_MspInit+0xe4>)
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	2201      	movs	r2, #1
 8005538:	4013      	ands	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800553e:	2114      	movs	r1, #20
 8005540:	187b      	adds	r3, r7, r1
 8005542:	220c      	movs	r2, #12
 8005544:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005546:	187b      	adds	r3, r7, r1
 8005548:	2202      	movs	r2, #2
 800554a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554c:	187b      	adds	r3, r7, r1
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005552:	187b      	adds	r3, r7, r1
 8005554:	2203      	movs	r2, #3
 8005556:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8005558:	187b      	adds	r3, r7, r1
 800555a:	2204      	movs	r2, #4
 800555c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800555e:	187a      	adds	r2, r7, r1
 8005560:	23a0      	movs	r3, #160	; 0xa0
 8005562:	05db      	lsls	r3, r3, #23
 8005564:	0011      	movs	r1, r2
 8005566:	0018      	movs	r0, r3
 8005568:	f001 f93a 	bl	80067e0 <HAL_GPIO_Init>
}
 800556c:	46c0      	nop			; (mov r8, r8)
 800556e:	46bd      	mov	sp, r7
 8005570:	b00b      	add	sp, #44	; 0x2c
 8005572:	bd90      	pop	{r4, r7, pc}
 8005574:	40013800 	.word	0x40013800
 8005578:	40021000 	.word	0x40021000
 800557c:	40004400 	.word	0x40004400

08005580 <VCNL4010_disable_Interrupt>:
/*!
    @brief  Disable threshold interrupt and set the threshold values
*/
/**************************************************************************/

void VCNL4010_disable_Interrupt() {
 8005580:	b590      	push	{r4, r7, lr}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
  VCNL4010_ack_ISR();
 8005586:	f000 f847 	bl	8005618 <VCNL4010_ack_ISR>
  //Unset INT_THRES_EN
  uint8_t temp = VCNL4010_read8(VCNL4010_INTCONTROL);
 800558a:	1dfc      	adds	r4, r7, #7
 800558c:	2089      	movs	r0, #137	; 0x89
 800558e:	f000 f8eb 	bl	8005768 <VCNL4010_read8>
 8005592:	0003      	movs	r3, r0
 8005594:	7023      	strb	r3, [r4, #0]
  temp &= 0xf0; //clear first 4 bits - clear all interrupt bits
 8005596:	1dfb      	adds	r3, r7, #7
 8005598:	1dfa      	adds	r2, r7, #7
 800559a:	7812      	ldrb	r2, [r2, #0]
 800559c:	210f      	movs	r1, #15
 800559e:	438a      	bics	r2, r1
 80055a0:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTCONTROL, temp);
 80055a2:	1dfb      	adds	r3, r7, #7
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	0019      	movs	r1, r3
 80055a8:	2089      	movs	r0, #137	; 0x89
 80055aa:	f000 f891 	bl	80056d0 <VCNL4010_write8>

}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b003      	add	sp, #12
 80055b4:	bd90      	pop	{r4, r7, pc}
	...

080055b8 <VCNL4010_enable_Interrupt>:
/*!
    @brief  Enable threshold interrupt and set the threshold values
*/
/**************************************************************************/

void VCNL4010_enable_Interrupt() {
 80055b8:	b590      	push	{r4, r7, lr}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
  VCNL4010_ack_ISR();
 80055be:	f000 f82b 	bl	8005618 <VCNL4010_ack_ISR>
  //Set INT_THRES_EN
  uint8_t temp = VCNL4010_read8(VCNL4010_INTCONTROL);
 80055c2:	1dfc      	adds	r4, r7, #7
 80055c4:	2089      	movs	r0, #137	; 0x89
 80055c6:	f000 f8cf 	bl	8005768 <VCNL4010_read8>
 80055ca:	0003      	movs	r3, r0
 80055cc:	7023      	strb	r3, [r4, #0]
  temp &= 0xf0; //clear first 4 bits
 80055ce:	1dfb      	adds	r3, r7, #7
 80055d0:	1dfa      	adds	r2, r7, #7
 80055d2:	7812      	ldrb	r2, [r2, #0]
 80055d4:	210f      	movs	r1, #15
 80055d6:	438a      	bics	r2, r1
 80055d8:	701a      	strb	r2, [r3, #0]
  temp |= 0x2; //set INT_THRES_EN bit
 80055da:	1dfb      	adds	r3, r7, #7
 80055dc:	1dfa      	adds	r2, r7, #7
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	2102      	movs	r1, #2
 80055e2:	430a      	orrs	r2, r1
 80055e4:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTCONTROL, temp);
 80055e6:	1dfb      	adds	r3, r7, #7
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	0019      	movs	r1, r3
 80055ec:	2089      	movs	r0, #137	; 0x89
 80055ee:	f000 f86f 	bl	80056d0 <VCNL4010_write8>

  //set low threshold - not really using... so set to 0.
  VCNL4010_write16(VCNL4010_LOWTHRESHOLD, 0);
 80055f2:	2100      	movs	r1, #0
 80055f4:	208a      	movs	r0, #138	; 0x8a
 80055f6:	f000 f88b 	bl	8005710 <VCNL4010_write16>

//  uint16_t threshold = ((22000 & 0xFF00) >> 8) | ((22000 & 0xFF) << 8);
    uint16_t threshold = 2300;
 80055fa:	1d3b      	adds	r3, r7, #4
 80055fc:	4a05      	ldr	r2, [pc, #20]	; (8005614 <VCNL4010_enable_Interrupt+0x5c>)
 80055fe:	801a      	strh	r2, [r3, #0]

  //set high threshold
    VCNL4010_write16(VCNL4010_HITHRESHOLD, threshold);
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	0019      	movs	r1, r3
 8005606:	208c      	movs	r0, #140	; 0x8c
 8005608:	f000 f882 	bl	8005710 <VCNL4010_write16>
//  VCNL4010_write16(VCNL4010_HITHRESHOLD, 2500);

}
 800560c:	46c0      	nop			; (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	b003      	add	sp, #12
 8005612:	bd90      	pop	{r4, r7, pc}
 8005614:	000008fc 	.word	0x000008fc

08005618 <VCNL4010_ack_ISR>:
/*!
    @brief  Clear Interrupt Status Register
*/
/**************************************************************************/

void VCNL4010_ack_ISR() {
 8005618:	b590      	push	{r4, r7, lr}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
  //Set INT_THRES_EN
  uint8_t temp = VCNL4010_read8(VCNL4010_INTSTAT);
 800561e:	1dfc      	adds	r4, r7, #7
 8005620:	208e      	movs	r0, #142	; 0x8e
 8005622:	f000 f8a1 	bl	8005768 <VCNL4010_read8>
 8005626:	0003      	movs	r3, r0
 8005628:	7023      	strb	r3, [r4, #0]
  temp &= 0xfc; //clear first 2 bits
 800562a:	1dfb      	adds	r3, r7, #7
 800562c:	1dfa      	adds	r2, r7, #7
 800562e:	7812      	ldrb	r2, [r2, #0]
 8005630:	2103      	movs	r1, #3
 8005632:	438a      	bics	r2, r1
 8005634:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTSTAT, temp);
 8005636:	1dfb      	adds	r3, r7, #7
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	0019      	movs	r1, r3
 800563c:	208e      	movs	r0, #142	; 0x8e
 800563e:	f000 f847 	bl	80056d0 <VCNL4010_write8>
}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	46bd      	mov	sp, r7
 8005646:	b003      	add	sp, #12
 8005648:	bd90      	pop	{r4, r7, pc}

0800564a <VCNL4010_setLEDcurrent>:
   10 mA, so if you set it to 5, its 50mA. Minimum is 0 (0 mA, off), max is 20
   (200mA)
*/
/**************************************************************************/

void VCNL4010_setLEDcurrent(uint8_t current_10mA) {
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	0002      	movs	r2, r0
 8005652:	1dfb      	adds	r3, r7, #7
 8005654:	701a      	strb	r2, [r3, #0]
  if (current_10mA > 20)
 8005656:	1dfb      	adds	r3, r7, #7
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b14      	cmp	r3, #20
 800565c:	d902      	bls.n	8005664 <VCNL4010_setLEDcurrent+0x1a>
    current_10mA = 20;
 800565e:	1dfb      	adds	r3, r7, #7
 8005660:	2214      	movs	r2, #20
 8005662:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_IRLED, current_10mA);
 8005664:	1dfb      	adds	r3, r7, #7
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	0019      	movs	r1, r3
 800566a:	2083      	movs	r0, #131	; 0x83
 800566c:	f000 f830 	bl	80056d0 <VCNL4010_write8>
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	b002      	add	sp, #8
 8005676:	bd80      	pop	{r7, pc}

08005678 <VCNL4010_readProximity>:
    @return Raw 16-bit reading value, will vary with LED current, unit-less!
    TODO - Fix infinite loop, add timeout!
*/
/**************************************************************************/

uint16_t VCNL4010_readProximity(void) {
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
  uint8_t i = VCNL4010_read8(VCNL4010_INTSTAT);
 800567e:	1dfc      	adds	r4, r7, #7
 8005680:	208e      	movs	r0, #142	; 0x8e
 8005682:	f000 f871 	bl	8005768 <VCNL4010_read8>
 8005686:	0003      	movs	r3, r0
 8005688:	7023      	strb	r3, [r4, #0]
  i &= ~0x80;
 800568a:	1dfb      	adds	r3, r7, #7
 800568c:	1dfa      	adds	r2, r7, #7
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	217f      	movs	r1, #127	; 0x7f
 8005692:	400a      	ands	r2, r1
 8005694:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTSTAT, i);
 8005696:	1dfb      	adds	r3, r7, #7
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	0019      	movs	r1, r3
 800569c:	208e      	movs	r0, #142	; 0x8e
 800569e:	f000 f817 	bl	80056d0 <VCNL4010_write8>

  VCNL4010_write8(VCNL4010_COMMAND, VCNL4010_MEASUREPROXIMITY);
 80056a2:	2108      	movs	r1, #8
 80056a4:	2080      	movs	r0, #128	; 0x80
 80056a6:	f000 f813 	bl	80056d0 <VCNL4010_write8>
  while (1) {
    // Serial.println(read8(VCNL4010_INTSTAT), HEX);
    uint8_t result = VCNL4010_read8(VCNL4010_COMMAND);
 80056aa:	1dbc      	adds	r4, r7, #6
 80056ac:	2080      	movs	r0, #128	; 0x80
 80056ae:	f000 f85b 	bl	8005768 <VCNL4010_read8>
 80056b2:	0003      	movs	r3, r0
 80056b4:	7023      	strb	r3, [r4, #0]
    // Serial.print("Ready = 0x"); Serial.println(result, HEX);
    if (result & VCNL4010_PROXIMITYREADY) {
 80056b6:	1dbb      	adds	r3, r7, #6
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2220      	movs	r2, #32
 80056bc:	4013      	ands	r3, r2
 80056be:	d0f4      	beq.n	80056aa <VCNL4010_readProximity+0x32>
      return VCNL4010_read16(VCNL4010_PROXIMITYDATA);
 80056c0:	2087      	movs	r0, #135	; 0x87
 80056c2:	f000 f86f 	bl	80057a4 <VCNL4010_read16>
 80056c6:	0003      	movs	r3, r0
    }
//    delay(1);
  }
}
 80056c8:	0018      	movs	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b003      	add	sp, #12
 80056ce:	bd90      	pop	{r4, r7, pc}

080056d0 <VCNL4010_write8>:
    }
  }
}

HAL_StatusTypeDef VCNL4010_write8(uint8_t subAddress, uint8_t data)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af04      	add	r7, sp, #16
 80056d6:	0002      	movs	r2, r0
 80056d8:	1dfb      	adds	r3, r7, #7
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	1dbb      	adds	r3, r7, #6
 80056de:	1c0a      	adds	r2, r1, #0
 80056e0:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80056e2:	1dfb      	adds	r3, r7, #7
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	4808      	ldr	r0, [pc, #32]	; (800570c <VCNL4010_write8+0x3c>)
 80056ea:	2301      	movs	r3, #1
 80056ec:	425b      	negs	r3, r3
 80056ee:	9302      	str	r3, [sp, #8]
 80056f0:	2301      	movs	r3, #1
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	1dbb      	adds	r3, r7, #6
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	2301      	movs	r3, #1
 80056fa:	2126      	movs	r1, #38	; 0x26
 80056fc:	f001 fac0 	bl	8006c80 <HAL_I2C_Mem_Write>
 8005700:	0003      	movs	r3, r0

}
 8005702:	0018      	movs	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	b002      	add	sp, #8
 8005708:	bd80      	pop	{r7, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	200001c8 	.word	0x200001c8

08005710 <VCNL4010_write16>:

HAL_StatusTypeDef VCNL4010_write16(uint8_t subAddress, uint16_t data)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af04      	add	r7, sp, #16
 8005716:	0002      	movs	r2, r0
 8005718:	1dfb      	adds	r3, r7, #7
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	1c0a      	adds	r2, r1, #0
 8005720:	801a      	strh	r2, [r3, #0]

  uint8_t temp[2];
  temp[0] = (uint8_t) 0xFF & (data >> 8); //high byte is stored first
 8005722:	1d3b      	adds	r3, r7, #4
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	b29b      	uxth	r3, r3
 800572a:	b2da      	uxtb	r2, r3
 800572c:	210c      	movs	r1, #12
 800572e:	187b      	adds	r3, r7, r1
 8005730:	701a      	strb	r2, [r3, #0]
  temp[1] = (uint8_t) (0xFF & data);      //low byte is stored second
 8005732:	1d3b      	adds	r3, r7, #4
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	187b      	adds	r3, r7, r1
 800573a:	705a      	strb	r2, [r3, #1]

  return HAL_I2C_Mem_Write(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, temp, 2, HAL_MAX_DELAY);
 800573c:	1dfb      	adds	r3, r7, #7
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	b29a      	uxth	r2, r3
 8005742:	4808      	ldr	r0, [pc, #32]	; (8005764 <VCNL4010_write16+0x54>)
 8005744:	2301      	movs	r3, #1
 8005746:	425b      	negs	r3, r3
 8005748:	9302      	str	r3, [sp, #8]
 800574a:	2302      	movs	r3, #2
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	187b      	adds	r3, r7, r1
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	2301      	movs	r3, #1
 8005754:	2126      	movs	r1, #38	; 0x26
 8005756:	f001 fa93 	bl	8006c80 <HAL_I2C_Mem_Write>
 800575a:	0003      	movs	r3, r0

}
 800575c:	0018      	movs	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	b004      	add	sp, #16
 8005762:	bd80      	pop	{r7, pc}
 8005764:	200001c8 	.word	0x200001c8

08005768 <VCNL4010_read8>:

uint8_t VCNL4010_read8(uint8_t subAddress){
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b089      	sub	sp, #36	; 0x24
 800576c:	af04      	add	r7, sp, #16
 800576e:	0002      	movs	r2, r0
 8005770:	1dfb      	adds	r3, r7, #7
 8005772:	701a      	strb	r2, [r3, #0]

	uint8_t data;
	HAL_I2C_Mem_Read(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8005774:	1dfb      	adds	r3, r7, #7
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	b29a      	uxth	r2, r3
 800577a:	4809      	ldr	r0, [pc, #36]	; (80057a0 <VCNL4010_read8+0x38>)
 800577c:	2301      	movs	r3, #1
 800577e:	425b      	negs	r3, r3
 8005780:	9302      	str	r3, [sp, #8]
 8005782:	2301      	movs	r3, #1
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	240f      	movs	r4, #15
 8005788:	193b      	adds	r3, r7, r4
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2301      	movs	r3, #1
 800578e:	2126      	movs	r1, #38	; 0x26
 8005790:	f001 fba4 	bl	8006edc <HAL_I2C_Mem_Read>
	return ((uint8_t) data);
 8005794:	193b      	adds	r3, r7, r4
 8005796:	781b      	ldrb	r3, [r3, #0]
}
 8005798:	0018      	movs	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	b005      	add	sp, #20
 800579e:	bd90      	pop	{r4, r7, pc}
 80057a0:	200001c8 	.word	0x200001c8

080057a4 <VCNL4010_read16>:

uint16_t VCNL4010_read16(uint8_t subAddress){
 80057a4:	b590      	push	{r4, r7, lr}
 80057a6:	b089      	sub	sp, #36	; 0x24
 80057a8:	af04      	add	r7, sp, #16
 80057aa:	0002      	movs	r2, r0
 80057ac:	1dfb      	adds	r3, r7, #7
 80057ae:	701a      	strb	r2, [r3, #0]

	uint8_t data[2];
	HAL_I2C_Mem_Read(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80057b0:	1dfb      	adds	r3, r7, #7
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	480e      	ldr	r0, [pc, #56]	; (80057f0 <VCNL4010_read16+0x4c>)
 80057b8:	2301      	movs	r3, #1
 80057ba:	425b      	negs	r3, r3
 80057bc:	9302      	str	r3, [sp, #8]
 80057be:	2302      	movs	r3, #2
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	240c      	movs	r4, #12
 80057c4:	193b      	adds	r3, r7, r4
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	2301      	movs	r3, #1
 80057ca:	2126      	movs	r1, #38	; 0x26
 80057cc:	f001 fb86 	bl	8006edc <HAL_I2C_Mem_Read>
	return ((uint16_t) data[0] << 8) | data[1];
 80057d0:	0021      	movs	r1, r4
 80057d2:	187b      	adds	r3, r7, r1
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	b21a      	sxth	r2, r3
 80057da:	187b      	adds	r3, r7, r1
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	b21b      	sxth	r3, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	b21b      	sxth	r3, r3
 80057e4:	b29b      	uxth	r3, r3
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b005      	add	sp, #20
 80057ec:	bd90      	pop	{r4, r7, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	200001c8 	.word	0x200001c8

080057f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80057f4:	480d      	ldr	r0, [pc, #52]	; (800582c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80057f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80057f8:	480d      	ldr	r0, [pc, #52]	; (8005830 <LoopForever+0x6>)
  ldr r1, =_edata
 80057fa:	490e      	ldr	r1, [pc, #56]	; (8005834 <LoopForever+0xa>)
  ldr r2, =_sidata
 80057fc:	4a0e      	ldr	r2, [pc, #56]	; (8005838 <LoopForever+0xe>)
  movs r3, #0
 80057fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005800:	e002      	b.n	8005808 <LoopCopyDataInit>

08005802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005806:	3304      	adds	r3, #4

08005808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800580a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800580c:	d3f9      	bcc.n	8005802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800580e:	4a0b      	ldr	r2, [pc, #44]	; (800583c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005810:	4c0b      	ldr	r4, [pc, #44]	; (8005840 <LoopForever+0x16>)
  movs r3, #0
 8005812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005814:	e001      	b.n	800581a <LoopFillZerobss>

08005816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005818:	3204      	adds	r2, #4

0800581a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800581a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800581c:	d3fb      	bcc.n	8005816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800581e:	f7ff fd1f 	bl	8005260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005822:	f004 fd83 	bl	800a32c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005826:	f7fe fde5 	bl	80043f4 <main>

0800582a <LoopForever>:

LoopForever:
    b LoopForever
 800582a:	e7fe      	b.n	800582a <LoopForever>
  ldr   r0, =_estack
 800582c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005834:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8005838:	0800b338 	.word	0x0800b338
  ldr r2, =_sbss
 800583c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8005840:	20000498 	.word	0x20000498

08005844 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005844:	e7fe      	b.n	8005844 <DMA1_Channel2_3_IRQHandler>
	...

08005848 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800584e:	1dfb      	adds	r3, r7, #7
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <HAL_Init+0x3c>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <HAL_Init+0x3c>)
 800585a:	2140      	movs	r1, #64	; 0x40
 800585c:	430a      	orrs	r2, r1
 800585e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005860:	2000      	movs	r0, #0
 8005862:	f000 f811 	bl	8005888 <HAL_InitTick>
 8005866:	1e03      	subs	r3, r0, #0
 8005868:	d003      	beq.n	8005872 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800586a:	1dfb      	adds	r3, r7, #7
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e001      	b.n	8005876 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005872:	f7ff fa49 	bl	8004d08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005876:	1dfb      	adds	r3, r7, #7
 8005878:	781b      	ldrb	r3, [r3, #0]
}
 800587a:	0018      	movs	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	b002      	add	sp, #8
 8005880:	bd80      	pop	{r7, pc}
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	40022000 	.word	0x40022000

08005888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005888:	b590      	push	{r4, r7, lr}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005890:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <HAL_InitTick+0x5c>)
 8005892:	681c      	ldr	r4, [r3, #0]
 8005894:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <HAL_InitTick+0x60>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	0019      	movs	r1, r3
 800589a:	23fa      	movs	r3, #250	; 0xfa
 800589c:	0098      	lsls	r0, r3, #2
 800589e:	f7fa fc33 	bl	8000108 <__udivsi3>
 80058a2:	0003      	movs	r3, r0
 80058a4:	0019      	movs	r1, r3
 80058a6:	0020      	movs	r0, r4
 80058a8:	f7fa fc2e 	bl	8000108 <__udivsi3>
 80058ac:	0003      	movs	r3, r0
 80058ae:	0018      	movs	r0, r3
 80058b0:	f000 fe63 	bl	800657a <HAL_SYSTICK_Config>
 80058b4:	1e03      	subs	r3, r0, #0
 80058b6:	d001      	beq.n	80058bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e00f      	b.n	80058dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d80b      	bhi.n	80058da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	2301      	movs	r3, #1
 80058c6:	425b      	negs	r3, r3
 80058c8:	2200      	movs	r2, #0
 80058ca:	0018      	movs	r0, r3
 80058cc:	f000 fe30 	bl	8006530 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <HAL_InitTick+0x64>)
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e000      	b.n	80058dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
}
 80058dc:	0018      	movs	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	b003      	add	sp, #12
 80058e2:	bd90      	pop	{r4, r7, pc}
 80058e4:	20000020 	.word	0x20000020
 80058e8:	20000028 	.word	0x20000028
 80058ec:	20000024 	.word	0x20000024

080058f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_IncTick+0x1c>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	001a      	movs	r2, r3
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <HAL_IncTick+0x20>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	18d2      	adds	r2, r2, r3
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <HAL_IncTick+0x20>)
 8005902:	601a      	str	r2, [r3, #0]
}
 8005904:	46c0      	nop			; (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	20000028 	.word	0x20000028
 8005910:	20000484 	.word	0x20000484

08005914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  return uwTick;
 8005918:	4b02      	ldr	r3, [pc, #8]	; (8005924 <HAL_GetTick+0x10>)
 800591a:	681b      	ldr	r3, [r3, #0]
}
 800591c:	0018      	movs	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	20000484 	.word	0x20000484

08005928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005930:	f7ff fff0 	bl	8005914 <HAL_GetTick>
 8005934:	0003      	movs	r3, r0
 8005936:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3301      	adds	r3, #1
 8005940:	d005      	beq.n	800594e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005942:	4b0a      	ldr	r3, [pc, #40]	; (800596c <HAL_Delay+0x44>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	001a      	movs	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	189b      	adds	r3, r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	f7ff ffe0 	bl	8005914 <HAL_GetTick>
 8005954:	0002      	movs	r2, r0
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	429a      	cmp	r2, r3
 800595e:	d8f7      	bhi.n	8005950 <HAL_Delay+0x28>
  {
  }
}
 8005960:	46c0      	nop			; (mov r8, r8)
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b004      	add	sp, #16
 8005968:	bd80      	pop	{r7, pc}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	20000028 	.word	0x20000028

08005970 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e159      	b.n	8005c36 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2250      	movs	r2, #80	; 0x50
 8005994:	2100      	movs	r1, #0
 8005996:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	0018      	movs	r0, r3
 800599c:	f7fc fb3c 	bl	8002018 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	2210      	movs	r2, #16
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d005      	beq.n	80059b8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2204      	movs	r2, #4
 80059b4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80059b6:	d00b      	beq.n	80059d0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	2210      	movs	r2, #16
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2250      	movs	r2, #80	; 0x50
 80059c8:	2100      	movs	r1, #0
 80059ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e132      	b.n	8005c36 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d4:	4a9a      	ldr	r2, [pc, #616]	; (8005c40 <HAL_ADC_Init+0x2d0>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	2202      	movs	r2, #2
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2203      	movs	r2, #3
 80059e8:	4013      	ands	r3, r2
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d108      	bne.n	8005a00 <HAL_ADC_Init+0x90>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2201      	movs	r2, #1
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_ADC_Init+0x90>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <HAL_ADC_Init+0x92>
 8005a00:	2300      	movs	r3, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d149      	bne.n	8005a9a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	23c0      	movs	r3, #192	; 0xc0
 8005a0c:	061b      	lsls	r3, r3, #24
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d00b      	beq.n	8005a2a <HAL_ADC_Init+0xba>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	05db      	lsls	r3, r3, #23
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d005      	beq.n	8005a2a <HAL_ADC_Init+0xba>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	2380      	movs	r3, #128	; 0x80
 8005a24:	061b      	lsls	r3, r3, #24
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d111      	bne.n	8005a4e <HAL_ADC_Init+0xde>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	0092      	lsls	r2, r2, #2
 8005a36:	0892      	lsrs	r2, r2, #2
 8005a38:	611a      	str	r2, [r3, #16]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6919      	ldr	r1, [r3, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	611a      	str	r2, [r3, #16]
 8005a4c:	e014      	b.n	8005a78 <HAL_ADC_Init+0x108>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	0092      	lsls	r2, r2, #2
 8005a5a:	0892      	lsrs	r2, r2, #2
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	4b79      	ldr	r3, [pc, #484]	; (8005c44 <HAL_ADC_Init+0x2d4>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b78      	ldr	r3, [pc, #480]	; (8005c44 <HAL_ADC_Init+0x2d4>)
 8005a64:	4978      	ldr	r1, [pc, #480]	; (8005c48 <HAL_ADC_Init+0x2d8>)
 8005a66:	400a      	ands	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	4b76      	ldr	r3, [pc, #472]	; (8005c44 <HAL_ADC_Init+0x2d4>)
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	4b74      	ldr	r3, [pc, #464]	; (8005c44 <HAL_ADC_Init+0x2d4>)
 8005a74:	430a      	orrs	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2118      	movs	r1, #24
 8005a84:	438a      	bics	r2, r1
 8005a86:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68d9      	ldr	r1, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005a9a:	4b6a      	ldr	r3, [pc, #424]	; (8005c44 <HAL_ADC_Init+0x2d4>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4b69      	ldr	r3, [pc, #420]	; (8005c44 <HAL_ADC_Init+0x2d4>)
 8005aa0:	496a      	ldr	r1, [pc, #424]	; (8005c4c <HAL_ADC_Init+0x2dc>)
 8005aa2:	400a      	ands	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8005aa6:	4b67      	ldr	r3, [pc, #412]	; (8005c44 <HAL_ADC_Init+0x2d4>)
 8005aa8:	6819      	ldr	r1, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aae:	065a      	lsls	r2, r3, #25
 8005ab0:	4b64      	ldr	r3, [pc, #400]	; (8005c44 <HAL_ADC_Init+0x2d4>)
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	055b      	lsls	r3, r3, #21
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d108      	bne.n	8005ad6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2180      	movs	r1, #128	; 0x80
 8005ad0:	0549      	lsls	r1, r1, #21
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	495b      	ldr	r1, [pc, #364]	; (8005c50 <HAL_ADC_Init+0x2e0>)
 8005ae2:	400a      	ands	r2, r1
 8005ae4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68d9      	ldr	r1, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d101      	bne.n	8005afc <HAL_ADC_Init+0x18c>
 8005af8:	2304      	movs	r3, #4
 8005afa:	e000      	b.n	8005afe <HAL_ADC_Init+0x18e>
 8005afc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005afe:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2020      	movs	r0, #32
 8005b04:	5c1b      	ldrb	r3, [r3, r0]
 8005b06:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005b08:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	202c      	movs	r0, #44	; 0x2c
 8005b0e:	5c1b      	ldrb	r3, [r3, r0]
 8005b10:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005b12:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005b18:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005b20:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005b28:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b36:	23c2      	movs	r3, #194	; 0xc2
 8005b38:	33ff      	adds	r3, #255	; 0xff
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d00b      	beq.n	8005b56 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68d9      	ldr	r1, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2221      	movs	r2, #33	; 0x21
 8005b5a:	5c9b      	ldrb	r3, [r3, r2]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d11a      	bne.n	8005b96 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	5c9b      	ldrb	r3, [r3, r2]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	0249      	lsls	r1, r1, #9
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	60da      	str	r2, [r3, #12]
 8005b7c:	e00b      	b.n	8005b96 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	2220      	movs	r2, #32
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	2201      	movs	r2, #1
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d11f      	bne.n	8005bde <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	492a      	ldr	r1, [pc, #168]	; (8005c54 <HAL_ADC_Init+0x2e4>)
 8005baa:	400a      	ands	r2, r1
 8005bac:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6919      	ldr	r1, [r3, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005bbc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8005bc2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	611a      	str	r2, [r3, #16]
 8005bdc:	e00e      	b.n	8005bfc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2201      	movs	r2, #1
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	438a      	bics	r2, r1
 8005bfa:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2107      	movs	r1, #7
 8005c08:	438a      	bics	r2, r1
 8005c0a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6959      	ldr	r1, [r3, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c28:	2203      	movs	r2, #3
 8005c2a:	4393      	bics	r3, r2
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	0018      	movs	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b002      	add	sp, #8
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	fffffefd 	.word	0xfffffefd
 8005c44:	40012708 	.word	0x40012708
 8005c48:	ffc3ffff 	.word	0xffc3ffff
 8005c4c:	fdffffff 	.word	0xfdffffff
 8005c50:	fffe0219 	.word	0xfffe0219
 8005c54:	fffffc03 	.word	0xfffffc03

08005c58 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c60:	230f      	movs	r3, #15
 8005c62:	18fb      	adds	r3, r7, r3
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	4013      	ands	r3, r2
 8005c72:	d138      	bne.n	8005ce6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2250      	movs	r2, #80	; 0x50
 8005c78:	5c9b      	ldrb	r3, [r3, r2]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_ADC_Start+0x2a>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e038      	b.n	8005cf4 <HAL_ADC_Start+0x9c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2250      	movs	r2, #80	; 0x50
 8005c86:	2101      	movs	r1, #1
 8005c88:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d007      	beq.n	8005ca2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005c92:	230f      	movs	r3, #15
 8005c94:	18fc      	adds	r4, r7, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f000 fa77 	bl	800618c <ADC_Enable>
 8005c9e:	0003      	movs	r3, r0
 8005ca0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005ca2:	230f      	movs	r3, #15
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d120      	bne.n	8005cee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb0:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <HAL_ADC_Start+0xa4>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	2280      	movs	r2, #128	; 0x80
 8005cb6:	0052      	lsls	r2, r2, #1
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2250      	movs	r2, #80	; 0x50
 8005cc8:	2100      	movs	r1, #0
 8005cca:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	221c      	movs	r2, #28
 8005cd2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2104      	movs	r1, #4
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	e003      	b.n	8005cee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005ce6:	230f      	movs	r3, #15
 8005ce8:	18fb      	adds	r3, r7, r3
 8005cea:	2202      	movs	r2, #2
 8005cec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005cee:	230f      	movs	r3, #15
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	781b      	ldrb	r3, [r3, #0]
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b005      	add	sp, #20
 8005cfa:	bd90      	pop	{r4, r7, pc}
 8005cfc:	fffff0fe 	.word	0xfffff0fe

08005d00 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005d00:	b5b0      	push	{r4, r5, r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d08:	230f      	movs	r3, #15
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2250      	movs	r2, #80	; 0x50
 8005d14:	5c9b      	ldrb	r3, [r3, r2]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_ADC_Stop+0x1e>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e029      	b.n	8005d72 <HAL_ADC_Stop+0x72>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2250      	movs	r2, #80	; 0x50
 8005d22:	2101      	movs	r1, #1
 8005d24:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005d26:	250f      	movs	r5, #15
 8005d28:	197c      	adds	r4, r7, r5
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 faed 	bl	800630c <ADC_ConversionStop>
 8005d32:	0003      	movs	r3, r0
 8005d34:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005d36:	197b      	adds	r3, r7, r5
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d112      	bne.n	8005d64 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005d3e:	197c      	adds	r4, r7, r5
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	0018      	movs	r0, r3
 8005d44:	f000 fa82 	bl	800624c <ADC_Disable>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005d4c:	197b      	adds	r3, r7, r5
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d107      	bne.n	8005d64 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d58:	4a08      	ldr	r2, [pc, #32]	; (8005d7c <HAL_ADC_Stop+0x7c>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2250      	movs	r2, #80	; 0x50
 8005d68:	2100      	movs	r1, #0
 8005d6a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005d6c:	230f      	movs	r3, #15
 8005d6e:	18fb      	adds	r3, r7, r3
 8005d70:	781b      	ldrb	r3, [r3, #0]
}
 8005d72:	0018      	movs	r0, r3
 8005d74:	46bd      	mov	sp, r7
 8005d76:	b004      	add	sp, #16
 8005d78:	bdb0      	pop	{r4, r5, r7, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	fffffefe 	.word	0xfffffefe

08005d80 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d102      	bne.n	8005da0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8005d9a:	2308      	movs	r3, #8
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e014      	b.n	8005dca <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d10b      	bne.n	8005dc6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db2:	2220      	movs	r2, #32
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2250      	movs	r2, #80	; 0x50
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e06c      	b.n	8005ea0 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005dca:	f7ff fda3 	bl	8005914 <HAL_GetTick>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005dd2:	e019      	b.n	8005e08 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	d016      	beq.n	8005e08 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <HAL_ADC_PollForConversion+0x70>
 8005de0:	f7ff fd98 	bl	8005914 <HAL_GetTick>
 8005de4:	0002      	movs	r2, r0
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d20b      	bcs.n	8005e08 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df4:	2204      	movs	r2, #4
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2250      	movs	r2, #80	; 0x50
 8005e00:	2100      	movs	r1, #0
 8005e02:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e04b      	b.n	8005ea0 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4013      	ands	r3, r2
 8005e12:	d0df      	beq.n	8005dd4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e18:	2280      	movs	r2, #128	; 0x80
 8005e1a:	0092      	lsls	r2, r2, #2
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	23c0      	movs	r3, #192	; 0xc0
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d12e      	bne.n	8005e8e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d129      	bne.n	8005e8e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2208      	movs	r2, #8
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d122      	bne.n	8005e8e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2204      	movs	r2, #4
 8005e50:	4013      	ands	r3, r2
 8005e52:	d110      	bne.n	8005e76 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	210c      	movs	r1, #12
 8005e60:	438a      	bics	r2, r1
 8005e62:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e68:	4a0f      	ldr	r2, [pc, #60]	; (8005ea8 <HAL_ADC_PollForConversion+0x128>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54
 8005e74:	e00b      	b.n	8005e8e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e86:	2201      	movs	r2, #1
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	220c      	movs	r2, #12
 8005e9c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b004      	add	sp, #16
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	fffffefe 	.word	0xfffffefe

08005eac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005eba:	0018      	movs	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b002      	add	sp, #8
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d106      	bne.n	8005ee8 <HAL_ADC_IRQHandler+0x24>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d00d      	beq.n	8005f04 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2208      	movs	r2, #8
 8005ef0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d154      	bne.n	8005fa0 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2208      	movs	r2, #8
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d14d      	bne.n	8005fa0 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	2210      	movs	r2, #16
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d106      	bne.n	8005f1c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	2280      	movs	r2, #128	; 0x80
 8005f14:	0092      	lsls	r2, r2, #2
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	23c0      	movs	r3, #192	; 0xc0
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	4013      	ands	r3, r2
 8005f28:	d12e      	bne.n	8005f88 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d129      	bne.n	8005f88 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2208      	movs	r2, #8
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d122      	bne.n	8005f88 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	d110      	bne.n	8005f70 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	210c      	movs	r1, #12
 8005f5a:	438a      	bics	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	4a35      	ldr	r2, [pc, #212]	; (8006038 <HAL_ADC_IRQHandler+0x174>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	2201      	movs	r2, #1
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	655a      	str	r2, [r3, #84]	; 0x54
 8005f6e:	e00b      	b.n	8005f88 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f74:	2220      	movs	r2, #32
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f80:	2201      	movs	r2, #1
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f7fe fb0a 	bl	80045a4 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d003      	beq.n	8005fa0 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	220c      	movs	r2, #12
 8005f9e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2280      	movs	r2, #128	; 0x80
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b80      	cmp	r3, #128	; 0x80
 8005fac:	d115      	bne.n	8005fda <HAL_ADC_IRQHandler+0x116>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2280      	movs	r2, #128	; 0x80
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	d10e      	bne.n	8005fda <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	2280      	movs	r2, #128	; 0x80
 8005fc2:	0252      	lsls	r2, r2, #9
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f7fe f985 	bl	80042dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2280      	movs	r2, #128	; 0x80
 8005fd8:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2210      	movs	r2, #16
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d123      	bne.n	8006030 <HAL_ADC_IRQHandler+0x16c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2210      	movs	r2, #16
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b10      	cmp	r3, #16
 8005ff4:	d11c      	bne.n	8006030 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d006      	beq.n	800600c <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10d      	bne.n	8006028 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006010:	2202      	movs	r2, #2
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2210      	movs	r2, #16
 800601e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	0018      	movs	r0, r3
 8006024:	f000 f80a 	bl	800603c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2210      	movs	r2, #16
 800602e:	601a      	str	r2, [r3, #0]
  }
  
}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b002      	add	sp, #8
 8006036:	bd80      	pop	{r7, pc}
 8006038:	fffffefe 	.word	0xfffffefe

0800603c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006044:	46c0      	nop			; (mov r8, r8)
 8006046:	46bd      	mov	sp, r7
 8006048:	b002      	add	sp, #8
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2250      	movs	r2, #80	; 0x50
 800605a:	5c9b      	ldrb	r3, [r3, r2]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_ADC_ConfigChannel+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e085      	b.n	8006170 <HAL_ADC_ConfigChannel+0x124>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2250      	movs	r2, #80	; 0x50
 8006068:	2101      	movs	r1, #1
 800606a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2204      	movs	r2, #4
 8006074:	4013      	ands	r3, r2
 8006076:	d00b      	beq.n	8006090 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	2220      	movs	r2, #32
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2250      	movs	r2, #80	; 0x50
 8006088:	2100      	movs	r1, #0
 800608a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e06f      	b.n	8006170 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4a38      	ldr	r2, [pc, #224]	; (8006178 <HAL_ADC_ConfigChannel+0x12c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d035      	beq.n	8006106 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	035b      	lsls	r3, r3, #13
 80060a6:	0b5a      	lsrs	r2, r3, #13
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	02db      	lsls	r3, r3, #11
 80060b8:	4013      	ands	r3, r2
 80060ba:	d009      	beq.n	80060d0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80060bc:	4b2f      	ldr	r3, [pc, #188]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4b2e      	ldr	r3, [pc, #184]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	0409      	lsls	r1, r1, #16
 80060c6:	430a      	orrs	r2, r1
 80060c8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80060ca:	200a      	movs	r0, #10
 80060cc:	f000 f964 	bl	8006398 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	2380      	movs	r3, #128	; 0x80
 80060d6:	029b      	lsls	r3, r3, #10
 80060d8:	4013      	ands	r3, r2
 80060da:	d006      	beq.n	80060ea <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80060dc:	4b27      	ldr	r3, [pc, #156]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b26      	ldr	r3, [pc, #152]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 80060e2:	2180      	movs	r1, #128	; 0x80
 80060e4:	03c9      	lsls	r1, r1, #15
 80060e6:	430a      	orrs	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	2380      	movs	r3, #128	; 0x80
 80060f0:	025b      	lsls	r3, r3, #9
 80060f2:	4013      	ands	r3, r2
 80060f4:	d037      	beq.n	8006166 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80060f6:	4b21      	ldr	r3, [pc, #132]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b20      	ldr	r3, [pc, #128]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	0449      	lsls	r1, r1, #17
 8006100:	430a      	orrs	r2, r1
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	e02f      	b.n	8006166 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	035b      	lsls	r3, r3, #13
 8006112:	0b5b      	lsrs	r3, r3, #13
 8006114:	43d9      	mvns	r1, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	400a      	ands	r2, r1
 800611c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	2380      	movs	r3, #128	; 0x80
 8006124:	02db      	lsls	r3, r3, #11
 8006126:	4013      	ands	r3, r2
 8006128:	d005      	beq.n	8006136 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800612a:	4b14      	ldr	r3, [pc, #80]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 8006130:	4913      	ldr	r1, [pc, #76]	; (8006180 <HAL_ADC_ConfigChannel+0x134>)
 8006132:	400a      	ands	r2, r1
 8006134:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	2380      	movs	r3, #128	; 0x80
 800613c:	029b      	lsls	r3, r3, #10
 800613e:	4013      	ands	r3, r2
 8006140:	d005      	beq.n	800614e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006142:	4b0e      	ldr	r3, [pc, #56]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b0d      	ldr	r3, [pc, #52]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 8006148:	490e      	ldr	r1, [pc, #56]	; (8006184 <HAL_ADC_ConfigChannel+0x138>)
 800614a:	400a      	ands	r2, r1
 800614c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	2380      	movs	r3, #128	; 0x80
 8006154:	025b      	lsls	r3, r3, #9
 8006156:	4013      	ands	r3, r2
 8006158:	d005      	beq.n	8006166 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800615a:	4b08      	ldr	r3, [pc, #32]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b07      	ldr	r3, [pc, #28]	; (800617c <HAL_ADC_ConfigChannel+0x130>)
 8006160:	4909      	ldr	r1, [pc, #36]	; (8006188 <HAL_ADC_ConfigChannel+0x13c>)
 8006162:	400a      	ands	r2, r1
 8006164:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2250      	movs	r2, #80	; 0x50
 800616a:	2100      	movs	r1, #0
 800616c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	0018      	movs	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	b002      	add	sp, #8
 8006176:	bd80      	pop	{r7, pc}
 8006178:	00001001 	.word	0x00001001
 800617c:	40012708 	.word	0x40012708
 8006180:	ff7fffff 	.word	0xff7fffff
 8006184:	ffbfffff 	.word	0xffbfffff
 8006188:	feffffff 	.word	0xfeffffff

0800618c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2203      	movs	r2, #3
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d108      	bne.n	80061b8 <ADC_Enable+0x2c>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2201      	movs	r2, #1
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <ADC_Enable+0x2c>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <ADC_Enable+0x2e>
 80061b8:	2300      	movs	r3, #0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d13f      	bne.n	800623e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4a20      	ldr	r2, [pc, #128]	; (8006248 <ADC_Enable+0xbc>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	d00d      	beq.n	80061e6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	2210      	movs	r2, #16
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061da:	2201      	movs	r2, #1
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e02c      	b.n	8006240 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2101      	movs	r1, #1
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80061f6:	2001      	movs	r0, #1
 80061f8:	f000 f8ce 	bl	8006398 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80061fc:	f7ff fb8a 	bl	8005914 <HAL_GetTick>
 8006200:	0003      	movs	r3, r0
 8006202:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006204:	e014      	b.n	8006230 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006206:	f7ff fb85 	bl	8005914 <HAL_GetTick>
 800620a:	0002      	movs	r2, r0
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b0a      	cmp	r3, #10
 8006212:	d90d      	bls.n	8006230 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006218:	2210      	movs	r2, #16
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006224:	2201      	movs	r2, #1
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e007      	b.n	8006240 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	4013      	ands	r3, r2
 800623a:	2b01      	cmp	r3, #1
 800623c:	d1e3      	bne.n	8006206 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	0018      	movs	r0, r3
 8006242:	46bd      	mov	sp, r7
 8006244:	b004      	add	sp, #16
 8006246:	bd80      	pop	{r7, pc}
 8006248:	80000017 	.word	0x80000017

0800624c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2203      	movs	r2, #3
 8006260:	4013      	ands	r3, r2
 8006262:	2b01      	cmp	r3, #1
 8006264:	d108      	bne.n	8006278 <ADC_Disable+0x2c>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2201      	movs	r2, #1
 800626e:	4013      	ands	r3, r2
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <ADC_Disable+0x2c>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <ADC_Disable+0x2e>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d041      	beq.n	8006302 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2205      	movs	r2, #5
 8006286:	4013      	ands	r3, r2
 8006288:	2b01      	cmp	r3, #1
 800628a:	d110      	bne.n	80062ae <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2102      	movs	r1, #2
 8006298:	430a      	orrs	r2, r1
 800629a:	609a      	str	r2, [r3, #8]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2203      	movs	r2, #3
 80062a2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80062a4:	f7ff fb36 	bl	8005914 <HAL_GetTick>
 80062a8:	0003      	movs	r3, r0
 80062aa:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80062ac:	e022      	b.n	80062f4 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	2210      	movs	r2, #16
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062be:	2201      	movs	r2, #1
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e01c      	b.n	8006304 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80062ca:	f7ff fb23 	bl	8005914 <HAL_GetTick>
 80062ce:	0002      	movs	r2, r0
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b0a      	cmp	r3, #10
 80062d6:	d90d      	bls.n	80062f4 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062dc:	2210      	movs	r2, #16
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e8:	2201      	movs	r2, #1
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e007      	b.n	8006304 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2201      	movs	r2, #1
 80062fc:	4013      	ands	r3, r2
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d0e3      	beq.n	80062ca <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	0018      	movs	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	b004      	add	sp, #16
 800630a:	bd80      	pop	{r7, pc}

0800630c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	2204      	movs	r2, #4
 8006320:	4013      	ands	r3, r2
 8006322:	d034      	beq.n	800638e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2204      	movs	r2, #4
 800632c:	4013      	ands	r3, r2
 800632e:	2b04      	cmp	r3, #4
 8006330:	d10d      	bne.n	800634e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	2202      	movs	r2, #2
 800633a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800633c:	d107      	bne.n	800634e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2110      	movs	r1, #16
 800634a:	430a      	orrs	r2, r1
 800634c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800634e:	f7ff fae1 	bl	8005914 <HAL_GetTick>
 8006352:	0003      	movs	r3, r0
 8006354:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006356:	e014      	b.n	8006382 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006358:	f7ff fadc 	bl	8005914 <HAL_GetTick>
 800635c:	0002      	movs	r2, r0
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b0a      	cmp	r3, #10
 8006364:	d90d      	bls.n	8006382 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	2210      	movs	r2, #16
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006376:	2201      	movs	r2, #1
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e006      	b.n	8006390 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2204      	movs	r2, #4
 800638a:	4013      	ands	r3, r2
 800638c:	d1e4      	bne.n	8006358 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	0018      	movs	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	b004      	add	sp, #16
 8006396:	bd80      	pop	{r7, pc}

08006398 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <ADC_DelayMicroSecond+0x38>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	490b      	ldr	r1, [pc, #44]	; (80063d4 <ADC_DelayMicroSecond+0x3c>)
 80063a6:	0018      	movs	r0, r3
 80063a8:	f7f9 feae 	bl	8000108 <__udivsi3>
 80063ac:	0003      	movs	r3, r0
 80063ae:	001a      	movs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4353      	muls	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80063b6:	e002      	b.n	80063be <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1f9      	bne.n	80063b8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	46bd      	mov	sp, r7
 80063ca:	b004      	add	sp, #16
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	46c0      	nop			; (mov r8, r8)
 80063d0:	20000020 	.word	0x20000020
 80063d4:	000f4240 	.word	0x000f4240

080063d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	0002      	movs	r2, r0
 80063e0:	1dfb      	adds	r3, r7, #7
 80063e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80063e4:	1dfb      	adds	r3, r7, #7
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b7f      	cmp	r3, #127	; 0x7f
 80063ea:	d809      	bhi.n	8006400 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063ec:	1dfb      	adds	r3, r7, #7
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	001a      	movs	r2, r3
 80063f2:	231f      	movs	r3, #31
 80063f4:	401a      	ands	r2, r3
 80063f6:	4b04      	ldr	r3, [pc, #16]	; (8006408 <__NVIC_EnableIRQ+0x30>)
 80063f8:	2101      	movs	r1, #1
 80063fa:	4091      	lsls	r1, r2
 80063fc:	000a      	movs	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]
  }
}
 8006400:	46c0      	nop			; (mov r8, r8)
 8006402:	46bd      	mov	sp, r7
 8006404:	b002      	add	sp, #8
 8006406:	bd80      	pop	{r7, pc}
 8006408:	e000e100 	.word	0xe000e100

0800640c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800640c:	b590      	push	{r4, r7, lr}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	0002      	movs	r2, r0
 8006414:	6039      	str	r1, [r7, #0]
 8006416:	1dfb      	adds	r3, r7, #7
 8006418:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800641a:	1dfb      	adds	r3, r7, #7
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b7f      	cmp	r3, #127	; 0x7f
 8006420:	d828      	bhi.n	8006474 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006422:	4a2f      	ldr	r2, [pc, #188]	; (80064e0 <__NVIC_SetPriority+0xd4>)
 8006424:	1dfb      	adds	r3, r7, #7
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	b25b      	sxtb	r3, r3
 800642a:	089b      	lsrs	r3, r3, #2
 800642c:	33c0      	adds	r3, #192	; 0xc0
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	589b      	ldr	r3, [r3, r2]
 8006432:	1dfa      	adds	r2, r7, #7
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	0011      	movs	r1, r2
 8006438:	2203      	movs	r2, #3
 800643a:	400a      	ands	r2, r1
 800643c:	00d2      	lsls	r2, r2, #3
 800643e:	21ff      	movs	r1, #255	; 0xff
 8006440:	4091      	lsls	r1, r2
 8006442:	000a      	movs	r2, r1
 8006444:	43d2      	mvns	r2, r2
 8006446:	401a      	ands	r2, r3
 8006448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	019b      	lsls	r3, r3, #6
 800644e:	22ff      	movs	r2, #255	; 0xff
 8006450:	401a      	ands	r2, r3
 8006452:	1dfb      	adds	r3, r7, #7
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	0018      	movs	r0, r3
 8006458:	2303      	movs	r3, #3
 800645a:	4003      	ands	r3, r0
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006460:	481f      	ldr	r0, [pc, #124]	; (80064e0 <__NVIC_SetPriority+0xd4>)
 8006462:	1dfb      	adds	r3, r7, #7
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b25b      	sxtb	r3, r3
 8006468:	089b      	lsrs	r3, r3, #2
 800646a:	430a      	orrs	r2, r1
 800646c:	33c0      	adds	r3, #192	; 0xc0
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006472:	e031      	b.n	80064d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006474:	4a1b      	ldr	r2, [pc, #108]	; (80064e4 <__NVIC_SetPriority+0xd8>)
 8006476:	1dfb      	adds	r3, r7, #7
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	0019      	movs	r1, r3
 800647c:	230f      	movs	r3, #15
 800647e:	400b      	ands	r3, r1
 8006480:	3b08      	subs	r3, #8
 8006482:	089b      	lsrs	r3, r3, #2
 8006484:	3306      	adds	r3, #6
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	18d3      	adds	r3, r2, r3
 800648a:	3304      	adds	r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	1dfa      	adds	r2, r7, #7
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	0011      	movs	r1, r2
 8006494:	2203      	movs	r2, #3
 8006496:	400a      	ands	r2, r1
 8006498:	00d2      	lsls	r2, r2, #3
 800649a:	21ff      	movs	r1, #255	; 0xff
 800649c:	4091      	lsls	r1, r2
 800649e:	000a      	movs	r2, r1
 80064a0:	43d2      	mvns	r2, r2
 80064a2:	401a      	ands	r2, r3
 80064a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	019b      	lsls	r3, r3, #6
 80064aa:	22ff      	movs	r2, #255	; 0xff
 80064ac:	401a      	ands	r2, r3
 80064ae:	1dfb      	adds	r3, r7, #7
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	0018      	movs	r0, r3
 80064b4:	2303      	movs	r3, #3
 80064b6:	4003      	ands	r3, r0
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064bc:	4809      	ldr	r0, [pc, #36]	; (80064e4 <__NVIC_SetPriority+0xd8>)
 80064be:	1dfb      	adds	r3, r7, #7
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	001c      	movs	r4, r3
 80064c4:	230f      	movs	r3, #15
 80064c6:	4023      	ands	r3, r4
 80064c8:	3b08      	subs	r3, #8
 80064ca:	089b      	lsrs	r3, r3, #2
 80064cc:	430a      	orrs	r2, r1
 80064ce:	3306      	adds	r3, #6
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	18c3      	adds	r3, r0, r3
 80064d4:	3304      	adds	r3, #4
 80064d6:	601a      	str	r2, [r3, #0]
}
 80064d8:	46c0      	nop			; (mov r8, r8)
 80064da:	46bd      	mov	sp, r7
 80064dc:	b003      	add	sp, #12
 80064de:	bd90      	pop	{r4, r7, pc}
 80064e0:	e000e100 	.word	0xe000e100
 80064e4:	e000ed00 	.word	0xe000ed00

080064e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	1e5a      	subs	r2, r3, #1
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	045b      	lsls	r3, r3, #17
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d301      	bcc.n	8006500 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064fc:	2301      	movs	r3, #1
 80064fe:	e010      	b.n	8006522 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006500:	4b0a      	ldr	r3, [pc, #40]	; (800652c <SysTick_Config+0x44>)
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	3a01      	subs	r2, #1
 8006506:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006508:	2301      	movs	r3, #1
 800650a:	425b      	negs	r3, r3
 800650c:	2103      	movs	r1, #3
 800650e:	0018      	movs	r0, r3
 8006510:	f7ff ff7c 	bl	800640c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <SysTick_Config+0x44>)
 8006516:	2200      	movs	r2, #0
 8006518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800651a:	4b04      	ldr	r3, [pc, #16]	; (800652c <SysTick_Config+0x44>)
 800651c:	2207      	movs	r2, #7
 800651e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006520:	2300      	movs	r3, #0
}
 8006522:	0018      	movs	r0, r3
 8006524:	46bd      	mov	sp, r7
 8006526:	b002      	add	sp, #8
 8006528:	bd80      	pop	{r7, pc}
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	e000e010 	.word	0xe000e010

08006530 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	607a      	str	r2, [r7, #4]
 800653a:	210f      	movs	r1, #15
 800653c:	187b      	adds	r3, r7, r1
 800653e:	1c02      	adds	r2, r0, #0
 8006540:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	187b      	adds	r3, r7, r1
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	b25b      	sxtb	r3, r3
 800654a:	0011      	movs	r1, r2
 800654c:	0018      	movs	r0, r3
 800654e:	f7ff ff5d 	bl	800640c <__NVIC_SetPriority>
}
 8006552:	46c0      	nop			; (mov r8, r8)
 8006554:	46bd      	mov	sp, r7
 8006556:	b004      	add	sp, #16
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	0002      	movs	r2, r0
 8006562:	1dfb      	adds	r3, r7, #7
 8006564:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006566:	1dfb      	adds	r3, r7, #7
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	b25b      	sxtb	r3, r3
 800656c:	0018      	movs	r0, r3
 800656e:	f7ff ff33 	bl	80063d8 <__NVIC_EnableIRQ>
}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	46bd      	mov	sp, r7
 8006576:	b002      	add	sp, #8
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0018      	movs	r0, r3
 8006586:	f7ff ffaf 	bl	80064e8 <SysTick_Config>
 800658a:	0003      	movs	r3, r0
}
 800658c:	0018      	movs	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	b002      	add	sp, #8
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e061      	b.n	800666a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a32      	ldr	r2, [pc, #200]	; (8006674 <HAL_DMA_Init+0xe0>)
 80065ac:	4694      	mov	ip, r2
 80065ae:	4463      	add	r3, ip
 80065b0:	2114      	movs	r1, #20
 80065b2:	0018      	movs	r0, r3
 80065b4:	f7f9 fda8 	bl	8000108 <__udivsi3>
 80065b8:	0003      	movs	r3, r0
 80065ba:	009a      	lsls	r2, r3, #2
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a2d      	ldr	r2, [pc, #180]	; (8006678 <HAL_DMA_Init+0xe4>)
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2225      	movs	r2, #37	; 0x25
 80065ca:	2102      	movs	r1, #2
 80065cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a28      	ldr	r2, [pc, #160]	; (800667c <HAL_DMA_Init+0xe8>)
 80065da:	4013      	ands	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80065e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	01db      	lsls	r3, r3, #7
 800661c:	429a      	cmp	r2, r3
 800661e:	d018      	beq.n	8006652 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006620:	4b17      	ldr	r3, [pc, #92]	; (8006680 <HAL_DMA_Init+0xec>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006628:	211c      	movs	r1, #28
 800662a:	400b      	ands	r3, r1
 800662c:	210f      	movs	r1, #15
 800662e:	4099      	lsls	r1, r3
 8006630:	000b      	movs	r3, r1
 8006632:	43d9      	mvns	r1, r3
 8006634:	4b12      	ldr	r3, [pc, #72]	; (8006680 <HAL_DMA_Init+0xec>)
 8006636:	400a      	ands	r2, r1
 8006638:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <HAL_DMA_Init+0xec>)
 800663c:	6819      	ldr	r1, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	201c      	movs	r0, #28
 8006648:	4003      	ands	r3, r0
 800664a:	409a      	lsls	r2, r3
 800664c:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <HAL_DMA_Init+0xec>)
 800664e:	430a      	orrs	r2, r1
 8006650:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2225      	movs	r2, #37	; 0x25
 800665c:	2101      	movs	r1, #1
 800665e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2224      	movs	r2, #36	; 0x24
 8006664:	2100      	movs	r1, #0
 8006666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	0018      	movs	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	b004      	add	sp, #16
 8006670:	bd80      	pop	{r7, pc}
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	bffdfff8 	.word	0xbffdfff8
 8006678:	40020000 	.word	0x40020000
 800667c:	ffff800f 	.word	0xffff800f
 8006680:	400200a8 	.word	0x400200a8

08006684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	221c      	movs	r2, #28
 80066a2:	4013      	ands	r3, r2
 80066a4:	2204      	movs	r2, #4
 80066a6:	409a      	lsls	r2, r3
 80066a8:	0013      	movs	r3, r2
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4013      	ands	r3, r2
 80066ae:	d026      	beq.n	80066fe <HAL_DMA_IRQHandler+0x7a>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2204      	movs	r2, #4
 80066b4:	4013      	ands	r3, r2
 80066b6:	d022      	beq.n	80066fe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2220      	movs	r2, #32
 80066c0:	4013      	ands	r3, r2
 80066c2:	d107      	bne.n	80066d4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2104      	movs	r1, #4
 80066d0:	438a      	bics	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d8:	221c      	movs	r2, #28
 80066da:	401a      	ands	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	2104      	movs	r1, #4
 80066e2:	4091      	lsls	r1, r2
 80066e4:	000a      	movs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d100      	bne.n	80066f2 <HAL_DMA_IRQHandler+0x6e>
 80066f0:	e071      	b.n	80067d6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	0010      	movs	r0, r2
 80066fa:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80066fc:	e06b      	b.n	80067d6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	221c      	movs	r2, #28
 8006704:	4013      	ands	r3, r2
 8006706:	2202      	movs	r2, #2
 8006708:	409a      	lsls	r2, r3
 800670a:	0013      	movs	r3, r2
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4013      	ands	r3, r2
 8006710:	d02d      	beq.n	800676e <HAL_DMA_IRQHandler+0xea>
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2202      	movs	r2, #2
 8006716:	4013      	ands	r3, r2
 8006718:	d029      	beq.n	800676e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2220      	movs	r2, #32
 8006722:	4013      	ands	r3, r2
 8006724:	d10b      	bne.n	800673e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	210a      	movs	r1, #10
 8006732:	438a      	bics	r2, r1
 8006734:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2225      	movs	r2, #37	; 0x25
 800673a:	2101      	movs	r1, #1
 800673c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	221c      	movs	r2, #28
 8006744:	401a      	ands	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	2102      	movs	r1, #2
 800674c:	4091      	lsls	r1, r2
 800674e:	000a      	movs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2224      	movs	r2, #36	; 0x24
 8006756:	2100      	movs	r1, #0
 8006758:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d039      	beq.n	80067d6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	0010      	movs	r0, r2
 800676a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800676c:	e033      	b.n	80067d6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006772:	221c      	movs	r2, #28
 8006774:	4013      	ands	r3, r2
 8006776:	2208      	movs	r2, #8
 8006778:	409a      	lsls	r2, r3
 800677a:	0013      	movs	r3, r2
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4013      	ands	r3, r2
 8006780:	d02a      	beq.n	80067d8 <HAL_DMA_IRQHandler+0x154>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2208      	movs	r2, #8
 8006786:	4013      	ands	r3, r2
 8006788:	d026      	beq.n	80067d8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	210e      	movs	r1, #14
 8006796:	438a      	bics	r2, r1
 8006798:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679e:	221c      	movs	r2, #28
 80067a0:	401a      	ands	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	2101      	movs	r1, #1
 80067a8:	4091      	lsls	r1, r2
 80067aa:	000a      	movs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2225      	movs	r2, #37	; 0x25
 80067b8:	2101      	movs	r1, #1
 80067ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2224      	movs	r2, #36	; 0x24
 80067c0:	2100      	movs	r1, #0
 80067c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	0010      	movs	r0, r2
 80067d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80067d6:	46c0      	nop			; (mov r8, r8)
 80067d8:	46c0      	nop			; (mov r8, r8)
}
 80067da:	46bd      	mov	sp, r7
 80067dc:	b004      	add	sp, #16
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80067f6:	e14f      	b.n	8006a98 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2101      	movs	r1, #1
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4091      	lsls	r1, r2
 8006802:	000a      	movs	r2, r1
 8006804:	4013      	ands	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d100      	bne.n	8006810 <HAL_GPIO_Init+0x30>
 800680e:	e140      	b.n	8006a92 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d00b      	beq.n	8006830 <HAL_GPIO_Init+0x50>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d007      	beq.n	8006830 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006824:	2b11      	cmp	r3, #17
 8006826:	d003      	beq.n	8006830 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b12      	cmp	r3, #18
 800682e:	d130      	bne.n	8006892 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	2203      	movs	r2, #3
 800683c:	409a      	lsls	r2, r3
 800683e:	0013      	movs	r3, r2
 8006840:	43da      	mvns	r2, r3
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4013      	ands	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	409a      	lsls	r2, r3
 8006852:	0013      	movs	r3, r2
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006866:	2201      	movs	r2, #1
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	409a      	lsls	r2, r3
 800686c:	0013      	movs	r3, r2
 800686e:	43da      	mvns	r2, r3
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	4013      	ands	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	091b      	lsrs	r3, r3, #4
 800687c:	2201      	movs	r2, #1
 800687e:	401a      	ands	r2, r3
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	409a      	lsls	r2, r3
 8006884:	0013      	movs	r3, r2
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	2203      	movs	r2, #3
 800689e:	409a      	lsls	r2, r3
 80068a0:	0013      	movs	r3, r2
 80068a2:	43da      	mvns	r2, r3
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4013      	ands	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	409a      	lsls	r2, r3
 80068b4:	0013      	movs	r3, r2
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d003      	beq.n	80068d2 <HAL_GPIO_Init+0xf2>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b12      	cmp	r3, #18
 80068d0:	d123      	bne.n	800691a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	08da      	lsrs	r2, r3, #3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3208      	adds	r2, #8
 80068da:	0092      	lsls	r2, r2, #2
 80068dc:	58d3      	ldr	r3, [r2, r3]
 80068de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2207      	movs	r2, #7
 80068e4:	4013      	ands	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	220f      	movs	r2, #15
 80068ea:	409a      	lsls	r2, r3
 80068ec:	0013      	movs	r3, r2
 80068ee:	43da      	mvns	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4013      	ands	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2107      	movs	r1, #7
 80068fe:	400b      	ands	r3, r1
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	409a      	lsls	r2, r3
 8006904:	0013      	movs	r3, r2
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	08da      	lsrs	r2, r3, #3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3208      	adds	r2, #8
 8006914:	0092      	lsls	r2, r2, #2
 8006916:	6939      	ldr	r1, [r7, #16]
 8006918:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	2203      	movs	r2, #3
 8006926:	409a      	lsls	r2, r3
 8006928:	0013      	movs	r3, r2
 800692a:	43da      	mvns	r2, r3
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4013      	ands	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2203      	movs	r2, #3
 8006938:	401a      	ands	r2, r3
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	409a      	lsls	r2, r3
 8006940:	0013      	movs	r3, r2
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	2380      	movs	r3, #128	; 0x80
 8006954:	055b      	lsls	r3, r3, #21
 8006956:	4013      	ands	r3, r2
 8006958:	d100      	bne.n	800695c <HAL_GPIO_Init+0x17c>
 800695a:	e09a      	b.n	8006a92 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800695c:	4b54      	ldr	r3, [pc, #336]	; (8006ab0 <HAL_GPIO_Init+0x2d0>)
 800695e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006960:	4b53      	ldr	r3, [pc, #332]	; (8006ab0 <HAL_GPIO_Init+0x2d0>)
 8006962:	2101      	movs	r1, #1
 8006964:	430a      	orrs	r2, r1
 8006966:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006968:	4a52      	ldr	r2, [pc, #328]	; (8006ab4 <HAL_GPIO_Init+0x2d4>)
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	089b      	lsrs	r3, r3, #2
 800696e:	3302      	adds	r3, #2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	589b      	ldr	r3, [r3, r2]
 8006974:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2203      	movs	r2, #3
 800697a:	4013      	ands	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	220f      	movs	r2, #15
 8006980:	409a      	lsls	r2, r3
 8006982:	0013      	movs	r3, r2
 8006984:	43da      	mvns	r2, r3
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4013      	ands	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	23a0      	movs	r3, #160	; 0xa0
 8006990:	05db      	lsls	r3, r3, #23
 8006992:	429a      	cmp	r2, r3
 8006994:	d019      	beq.n	80069ca <HAL_GPIO_Init+0x1ea>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a47      	ldr	r2, [pc, #284]	; (8006ab8 <HAL_GPIO_Init+0x2d8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_GPIO_Init+0x1e6>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a46      	ldr	r2, [pc, #280]	; (8006abc <HAL_GPIO_Init+0x2dc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00d      	beq.n	80069c2 <HAL_GPIO_Init+0x1e2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a45      	ldr	r2, [pc, #276]	; (8006ac0 <HAL_GPIO_Init+0x2e0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d007      	beq.n	80069be <HAL_GPIO_Init+0x1de>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a44      	ldr	r2, [pc, #272]	; (8006ac4 <HAL_GPIO_Init+0x2e4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d101      	bne.n	80069ba <HAL_GPIO_Init+0x1da>
 80069b6:	2305      	movs	r3, #5
 80069b8:	e008      	b.n	80069cc <HAL_GPIO_Init+0x1ec>
 80069ba:	2306      	movs	r3, #6
 80069bc:	e006      	b.n	80069cc <HAL_GPIO_Init+0x1ec>
 80069be:	2303      	movs	r3, #3
 80069c0:	e004      	b.n	80069cc <HAL_GPIO_Init+0x1ec>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e002      	b.n	80069cc <HAL_GPIO_Init+0x1ec>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <HAL_GPIO_Init+0x1ec>
 80069ca:	2300      	movs	r3, #0
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	2103      	movs	r1, #3
 80069d0:	400a      	ands	r2, r1
 80069d2:	0092      	lsls	r2, r2, #2
 80069d4:	4093      	lsls	r3, r2
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069dc:	4935      	ldr	r1, [pc, #212]	; (8006ab4 <HAL_GPIO_Init+0x2d4>)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	089b      	lsrs	r3, r3, #2
 80069e2:	3302      	adds	r3, #2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069ea:	4b37      	ldr	r3, [pc, #220]	; (8006ac8 <HAL_GPIO_Init+0x2e8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	43da      	mvns	r2, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4013      	ands	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	2380      	movs	r3, #128	; 0x80
 8006a00:	025b      	lsls	r3, r3, #9
 8006a02:	4013      	ands	r3, r2
 8006a04:	d003      	beq.n	8006a0e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006a0e:	4b2e      	ldr	r3, [pc, #184]	; (8006ac8 <HAL_GPIO_Init+0x2e8>)
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006a14:	4b2c      	ldr	r3, [pc, #176]	; (8006ac8 <HAL_GPIO_Init+0x2e8>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	43da      	mvns	r2, r3
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	4013      	ands	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	2380      	movs	r3, #128	; 0x80
 8006a2a:	029b      	lsls	r3, r3, #10
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006a38:	4b23      	ldr	r3, [pc, #140]	; (8006ac8 <HAL_GPIO_Init+0x2e8>)
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a3e:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <HAL_GPIO_Init+0x2e8>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	43da      	mvns	r2, r3
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	2380      	movs	r3, #128	; 0x80
 8006a54:	035b      	lsls	r3, r3, #13
 8006a56:	4013      	ands	r3, r2
 8006a58:	d003      	beq.n	8006a62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006a62:	4b19      	ldr	r3, [pc, #100]	; (8006ac8 <HAL_GPIO_Init+0x2e8>)
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006a68:	4b17      	ldr	r3, [pc, #92]	; (8006ac8 <HAL_GPIO_Init+0x2e8>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	43da      	mvns	r2, r3
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	4013      	ands	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	2380      	movs	r3, #128	; 0x80
 8006a7e:	039b      	lsls	r3, r3, #14
 8006a80:	4013      	ands	r3, r2
 8006a82:	d003      	beq.n	8006a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006a8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ac8 <HAL_GPIO_Init+0x2e8>)
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	3301      	adds	r3, #1
 8006a96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	40da      	lsrs	r2, r3
 8006aa0:	1e13      	subs	r3, r2, #0
 8006aa2:	d000      	beq.n	8006aa6 <HAL_GPIO_Init+0x2c6>
 8006aa4:	e6a8      	b.n	80067f8 <HAL_GPIO_Init+0x18>
  }
}
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	46c0      	nop			; (mov r8, r8)
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	b006      	add	sp, #24
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	50000400 	.word	0x50000400
 8006abc:	50000800 	.word	0x50000800
 8006ac0:	50000c00 	.word	0x50000c00
 8006ac4:	50001c00 	.word	0x50001c00
 8006ac8:	40010400 	.word	0x40010400

08006acc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	0008      	movs	r0, r1
 8006ad6:	0011      	movs	r1, r2
 8006ad8:	1cbb      	adds	r3, r7, #2
 8006ada:	1c02      	adds	r2, r0, #0
 8006adc:	801a      	strh	r2, [r3, #0]
 8006ade:	1c7b      	adds	r3, r7, #1
 8006ae0:	1c0a      	adds	r2, r1, #0
 8006ae2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ae4:	1c7b      	adds	r3, r7, #1
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006aec:	1cbb      	adds	r3, r7, #2
 8006aee:	881a      	ldrh	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006af4:	e003      	b.n	8006afe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006af6:	1cbb      	adds	r3, r7, #2
 8006af8:	881a      	ldrh	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b002      	add	sp, #8
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	0002      	movs	r2, r0
 8006b10:	1dbb      	adds	r3, r7, #6
 8006b12:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	1dba      	adds	r2, r7, #6
 8006b1a:	8812      	ldrh	r2, [r2, #0]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	d008      	beq.n	8006b32 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b20:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006b22:	1dba      	adds	r2, r7, #6
 8006b24:	8812      	ldrh	r2, [r2, #0]
 8006b26:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b28:	1dbb      	adds	r3, r7, #6
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f000 f807 	bl	8006b40 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	46bd      	mov	sp, r7
 8006b36:	b002      	add	sp, #8
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	46c0      	nop			; (mov r8, r8)
 8006b3c:	40010400 	.word	0x40010400

08006b40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	0002      	movs	r2, r0
 8006b48:	1dbb      	adds	r3, r7, #6
 8006b4a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006b4c:	46c0      	nop			; (mov r8, r8)
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	b002      	add	sp, #8
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e082      	b.n	8006c6c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2241      	movs	r2, #65	; 0x41
 8006b6a:	5c9b      	ldrb	r3, [r3, r2]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d107      	bne.n	8006b82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2240      	movs	r2, #64	; 0x40
 8006b76:	2100      	movs	r1, #0
 8006b78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f7fd fb67 	bl	8004250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2241      	movs	r2, #65	; 0x41
 8006b86:	2124      	movs	r1, #36	; 0x24
 8006b88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2101      	movs	r1, #1
 8006b96:	438a      	bics	r2, r1
 8006b98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4934      	ldr	r1, [pc, #208]	; (8006c74 <HAL_I2C_Init+0x120>)
 8006ba4:	400a      	ands	r2, r1
 8006ba6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4931      	ldr	r1, [pc, #196]	; (8006c78 <HAL_I2C_Init+0x124>)
 8006bb4:	400a      	ands	r2, r1
 8006bb6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d108      	bne.n	8006bd2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2180      	movs	r1, #128	; 0x80
 8006bca:	0209      	lsls	r1, r1, #8
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	609a      	str	r2, [r3, #8]
 8006bd0:	e007      	b.n	8006be2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2184      	movs	r1, #132	; 0x84
 8006bdc:	0209      	lsls	r1, r1, #8
 8006bde:	430a      	orrs	r2, r1
 8006be0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d104      	bne.n	8006bf4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2280      	movs	r2, #128	; 0x80
 8006bf0:	0112      	lsls	r2, r2, #4
 8006bf2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	491f      	ldr	r1, [pc, #124]	; (8006c7c <HAL_I2C_Init+0x128>)
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	491a      	ldr	r1, [pc, #104]	; (8006c78 <HAL_I2C_Init+0x124>)
 8006c10:	400a      	ands	r2, r1
 8006c12:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	0011      	movs	r1, r2
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	021a      	lsls	r2, r3, #8
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69d9      	ldr	r1, [r3, #28]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1a      	ldr	r2, [r3, #32]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2101      	movs	r1, #1
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2241      	movs	r2, #65	; 0x41
 8006c58:	2120      	movs	r1, #32
 8006c5a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2242      	movs	r2, #66	; 0x42
 8006c66:	2100      	movs	r1, #0
 8006c68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b002      	add	sp, #8
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	f0ffffff 	.word	0xf0ffffff
 8006c78:	ffff7fff 	.word	0xffff7fff
 8006c7c:	02008000 	.word	0x02008000

08006c80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c80:	b590      	push	{r4, r7, lr}
 8006c82:	b089      	sub	sp, #36	; 0x24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	000c      	movs	r4, r1
 8006c8a:	0010      	movs	r0, r2
 8006c8c:	0019      	movs	r1, r3
 8006c8e:	230a      	movs	r3, #10
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	1c22      	adds	r2, r4, #0
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	2308      	movs	r3, #8
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	1c02      	adds	r2, r0, #0
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	1dbb      	adds	r3, r7, #6
 8006ca0:	1c0a      	adds	r2, r1, #0
 8006ca2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2241      	movs	r2, #65	; 0x41
 8006ca8:	5c9b      	ldrb	r3, [r3, r2]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d000      	beq.n	8006cb2 <HAL_I2C_Mem_Write+0x32>
 8006cb0:	e10c      	b.n	8006ecc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <HAL_I2C_Mem_Write+0x42>
 8006cb8:	232c      	movs	r3, #44	; 0x2c
 8006cba:	18fb      	adds	r3, r7, r3
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d105      	bne.n	8006cce <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2280      	movs	r2, #128	; 0x80
 8006cc6:	0092      	lsls	r2, r2, #2
 8006cc8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e0ff      	b.n	8006ece <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2240      	movs	r2, #64	; 0x40
 8006cd2:	5c9b      	ldrb	r3, [r3, r2]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_I2C_Mem_Write+0x5c>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e0f8      	b.n	8006ece <HAL_I2C_Mem_Write+0x24e>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2240      	movs	r2, #64	; 0x40
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ce4:	f7fe fe16 	bl	8005914 <HAL_GetTick>
 8006ce8:	0003      	movs	r3, r0
 8006cea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cec:	2380      	movs	r3, #128	; 0x80
 8006cee:	0219      	lsls	r1, r3, #8
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	2319      	movs	r3, #25
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f000 fb0b 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8006cfe:	1e03      	subs	r3, r0, #0
 8006d00:	d001      	beq.n	8006d06 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e0e3      	b.n	8006ece <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2241      	movs	r2, #65	; 0x41
 8006d0a:	2121      	movs	r1, #33	; 0x21
 8006d0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2242      	movs	r2, #66	; 0x42
 8006d12:	2140      	movs	r1, #64	; 0x40
 8006d14:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	222c      	movs	r2, #44	; 0x2c
 8006d26:	18ba      	adds	r2, r7, r2
 8006d28:	8812      	ldrh	r2, [r2, #0]
 8006d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d32:	1dbb      	adds	r3, r7, #6
 8006d34:	881c      	ldrh	r4, [r3, #0]
 8006d36:	2308      	movs	r3, #8
 8006d38:	18fb      	adds	r3, r7, r3
 8006d3a:	881a      	ldrh	r2, [r3, #0]
 8006d3c:	230a      	movs	r3, #10
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	8819      	ldrh	r1, [r3, #0]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	0023      	movs	r3, r4
 8006d4e:	f000 f9f9 	bl	8007144 <I2C_RequestMemoryWrite>
 8006d52:	1e03      	subs	r3, r0, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2240      	movs	r2, #64	; 0x40
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e0b5      	b.n	8006ece <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	2bff      	cmp	r3, #255	; 0xff
 8006d6a:	d911      	bls.n	8006d90 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	22ff      	movs	r2, #255	; 0xff
 8006d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	2380      	movs	r3, #128	; 0x80
 8006d7a:	045c      	lsls	r4, r3, #17
 8006d7c:	230a      	movs	r3, #10
 8006d7e:	18fb      	adds	r3, r7, r3
 8006d80:	8819      	ldrh	r1, [r3, #0]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	2300      	movs	r3, #0
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	0023      	movs	r3, r4
 8006d8a:	f000 fbe3 	bl	8007554 <I2C_TransferConfig>
 8006d8e:	e012      	b.n	8006db6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	049c      	lsls	r4, r3, #18
 8006da4:	230a      	movs	r3, #10
 8006da6:	18fb      	adds	r3, r7, r3
 8006da8:	8819      	ldrh	r1, [r3, #0]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	2300      	movs	r3, #0
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	0023      	movs	r3, r4
 8006db2:	f000 fbcf 	bl	8007554 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f000 fae8 	bl	8007392 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dc2:	1e03      	subs	r3, r0, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e081      	b.n	8006ece <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	781a      	ldrb	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d03a      	beq.n	8006e7a <HAL_I2C_Mem_Write+0x1fa>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d136      	bne.n	8006e7a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	0013      	movs	r3, r2
 8006e16:	2200      	movs	r2, #0
 8006e18:	2180      	movs	r1, #128	; 0x80
 8006e1a:	f000 fa7b 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8006e1e:	1e03      	subs	r3, r0, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e053      	b.n	8006ece <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2bff      	cmp	r3, #255	; 0xff
 8006e2e:	d911      	bls.n	8006e54 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	22ff      	movs	r2, #255	; 0xff
 8006e34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	2380      	movs	r3, #128	; 0x80
 8006e3e:	045c      	lsls	r4, r3, #17
 8006e40:	230a      	movs	r3, #10
 8006e42:	18fb      	adds	r3, r7, r3
 8006e44:	8819      	ldrh	r1, [r3, #0]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	0023      	movs	r3, r4
 8006e4e:	f000 fb81 	bl	8007554 <I2C_TransferConfig>
 8006e52:	e012      	b.n	8006e7a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	2380      	movs	r3, #128	; 0x80
 8006e66:	049c      	lsls	r4, r3, #18
 8006e68:	230a      	movs	r3, #10
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	8819      	ldrh	r1, [r3, #0]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	2300      	movs	r3, #0
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	0023      	movs	r3, r4
 8006e76:	f000 fb6d 	bl	8007554 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d198      	bne.n	8006db6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f000 fac0 	bl	8007410 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e90:	1e03      	subs	r3, r0, #0
 8006e92:	d001      	beq.n	8006e98 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e01a      	b.n	8006ece <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	490b      	ldr	r1, [pc, #44]	; (8006ed8 <HAL_I2C_Mem_Write+0x258>)
 8006eac:	400a      	ands	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2241      	movs	r2, #65	; 0x41
 8006eb4:	2120      	movs	r1, #32
 8006eb6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2242      	movs	r2, #66	; 0x42
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2240      	movs	r2, #64	; 0x40
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e000      	b.n	8006ece <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006ecc:	2302      	movs	r3, #2
  }
}
 8006ece:	0018      	movs	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b007      	add	sp, #28
 8006ed4:	bd90      	pop	{r4, r7, pc}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	fe00e800 	.word	0xfe00e800

08006edc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006edc:	b590      	push	{r4, r7, lr}
 8006ede:	b089      	sub	sp, #36	; 0x24
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	000c      	movs	r4, r1
 8006ee6:	0010      	movs	r0, r2
 8006ee8:	0019      	movs	r1, r3
 8006eea:	230a      	movs	r3, #10
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	1c22      	adds	r2, r4, #0
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	18fb      	adds	r3, r7, r3
 8006ef6:	1c02      	adds	r2, r0, #0
 8006ef8:	801a      	strh	r2, [r3, #0]
 8006efa:	1dbb      	adds	r3, r7, #6
 8006efc:	1c0a      	adds	r2, r1, #0
 8006efe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2241      	movs	r2, #65	; 0x41
 8006f04:	5c9b      	ldrb	r3, [r3, r2]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d000      	beq.n	8006f0e <HAL_I2C_Mem_Read+0x32>
 8006f0c:	e110      	b.n	8007130 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <HAL_I2C_Mem_Read+0x42>
 8006f14:	232c      	movs	r3, #44	; 0x2c
 8006f16:	18fb      	adds	r3, r7, r3
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d105      	bne.n	8006f2a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2280      	movs	r2, #128	; 0x80
 8006f22:	0092      	lsls	r2, r2, #2
 8006f24:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e103      	b.n	8007132 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2240      	movs	r2, #64	; 0x40
 8006f2e:	5c9b      	ldrb	r3, [r3, r2]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_I2C_Mem_Read+0x5c>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e0fc      	b.n	8007132 <HAL_I2C_Mem_Read+0x256>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2240      	movs	r2, #64	; 0x40
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f40:	f7fe fce8 	bl	8005914 <HAL_GetTick>
 8006f44:	0003      	movs	r3, r0
 8006f46:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	0219      	lsls	r1, r3, #8
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	2319      	movs	r3, #25
 8006f54:	2201      	movs	r2, #1
 8006f56:	f000 f9dd 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8006f5a:	1e03      	subs	r3, r0, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e0e7      	b.n	8007132 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2241      	movs	r2, #65	; 0x41
 8006f66:	2122      	movs	r1, #34	; 0x22
 8006f68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2242      	movs	r2, #66	; 0x42
 8006f6e:	2140      	movs	r1, #64	; 0x40
 8006f70:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	222c      	movs	r2, #44	; 0x2c
 8006f82:	18ba      	adds	r2, r7, r2
 8006f84:	8812      	ldrh	r2, [r2, #0]
 8006f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f8e:	1dbb      	adds	r3, r7, #6
 8006f90:	881c      	ldrh	r4, [r3, #0]
 8006f92:	2308      	movs	r3, #8
 8006f94:	18fb      	adds	r3, r7, r3
 8006f96:	881a      	ldrh	r2, [r3, #0]
 8006f98:	230a      	movs	r3, #10
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	8819      	ldrh	r1, [r3, #0]
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	0023      	movs	r3, r4
 8006faa:	f000 f92f 	bl	800720c <I2C_RequestMemoryRead>
 8006fae:	1e03      	subs	r3, r0, #0
 8006fb0:	d005      	beq.n	8006fbe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2240      	movs	r2, #64	; 0x40
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e0b9      	b.n	8007132 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2bff      	cmp	r3, #255	; 0xff
 8006fc6:	d911      	bls.n	8006fec <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	22ff      	movs	r2, #255	; 0xff
 8006fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	045c      	lsls	r4, r3, #17
 8006fd8:	230a      	movs	r3, #10
 8006fda:	18fb      	adds	r3, r7, r3
 8006fdc:	8819      	ldrh	r1, [r3, #0]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	4b56      	ldr	r3, [pc, #344]	; (800713c <HAL_I2C_Mem_Read+0x260>)
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	0023      	movs	r3, r4
 8006fe6:	f000 fab5 	bl	8007554 <I2C_TransferConfig>
 8006fea:	e012      	b.n	8007012 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	2380      	movs	r3, #128	; 0x80
 8006ffe:	049c      	lsls	r4, r3, #18
 8007000:	230a      	movs	r3, #10
 8007002:	18fb      	adds	r3, r7, r3
 8007004:	8819      	ldrh	r1, [r3, #0]
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	4b4c      	ldr	r3, [pc, #304]	; (800713c <HAL_I2C_Mem_Read+0x260>)
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	0023      	movs	r3, r4
 800700e:	f000 faa1 	bl	8007554 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	0013      	movs	r3, r2
 800701c:	2200      	movs	r2, #0
 800701e:	2104      	movs	r1, #4
 8007020:	f000 f978 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8007024:	1e03      	subs	r3, r0, #0
 8007026:	d001      	beq.n	800702c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e082      	b.n	8007132 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007048:	3b01      	subs	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007054:	b29b      	uxth	r3, r3
 8007056:	3b01      	subs	r3, #1
 8007058:	b29a      	uxth	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d03a      	beq.n	80070de <HAL_I2C_Mem_Read+0x202>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706c:	2b00      	cmp	r3, #0
 800706e:	d136      	bne.n	80070de <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	0013      	movs	r3, r2
 800707a:	2200      	movs	r2, #0
 800707c:	2180      	movs	r1, #128	; 0x80
 800707e:	f000 f949 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8007082:	1e03      	subs	r3, r0, #0
 8007084:	d001      	beq.n	800708a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e053      	b.n	8007132 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708e:	b29b      	uxth	r3, r3
 8007090:	2bff      	cmp	r3, #255	; 0xff
 8007092:	d911      	bls.n	80070b8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	22ff      	movs	r2, #255	; 0xff
 8007098:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	045c      	lsls	r4, r3, #17
 80070a4:	230a      	movs	r3, #10
 80070a6:	18fb      	adds	r3, r7, r3
 80070a8:	8819      	ldrh	r1, [r3, #0]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	2300      	movs	r3, #0
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	0023      	movs	r3, r4
 80070b2:	f000 fa4f 	bl	8007554 <I2C_TransferConfig>
 80070b6:	e012      	b.n	80070de <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	2380      	movs	r3, #128	; 0x80
 80070ca:	049c      	lsls	r4, r3, #18
 80070cc:	230a      	movs	r3, #10
 80070ce:	18fb      	adds	r3, r7, r3
 80070d0:	8819      	ldrh	r1, [r3, #0]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	2300      	movs	r3, #0
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	0023      	movs	r3, r4
 80070da:	f000 fa3b 	bl	8007554 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d194      	bne.n	8007012 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	0018      	movs	r0, r3
 80070f0:	f000 f98e 	bl	8007410 <I2C_WaitOnSTOPFlagUntilTimeout>
 80070f4:	1e03      	subs	r3, r0, #0
 80070f6:	d001      	beq.n	80070fc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e01a      	b.n	8007132 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2220      	movs	r2, #32
 8007102:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	490c      	ldr	r1, [pc, #48]	; (8007140 <HAL_I2C_Mem_Read+0x264>)
 8007110:	400a      	ands	r2, r1
 8007112:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2241      	movs	r2, #65	; 0x41
 8007118:	2120      	movs	r1, #32
 800711a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2242      	movs	r2, #66	; 0x42
 8007120:	2100      	movs	r1, #0
 8007122:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2240      	movs	r2, #64	; 0x40
 8007128:	2100      	movs	r1, #0
 800712a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	e000      	b.n	8007132 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007130:	2302      	movs	r3, #2
  }
}
 8007132:	0018      	movs	r0, r3
 8007134:	46bd      	mov	sp, r7
 8007136:	b007      	add	sp, #28
 8007138:	bd90      	pop	{r4, r7, pc}
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	80002400 	.word	0x80002400
 8007140:	fe00e800 	.word	0xfe00e800

08007144 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b5b0      	push	{r4, r5, r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af02      	add	r7, sp, #8
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	000c      	movs	r4, r1
 800714e:	0010      	movs	r0, r2
 8007150:	0019      	movs	r1, r3
 8007152:	250a      	movs	r5, #10
 8007154:	197b      	adds	r3, r7, r5
 8007156:	1c22      	adds	r2, r4, #0
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	2308      	movs	r3, #8
 800715c:	18fb      	adds	r3, r7, r3
 800715e:	1c02      	adds	r2, r0, #0
 8007160:	801a      	strh	r2, [r3, #0]
 8007162:	1dbb      	adds	r3, r7, #6
 8007164:	1c0a      	adds	r2, r1, #0
 8007166:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007168:	1dbb      	adds	r3, r7, #6
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	2380      	movs	r3, #128	; 0x80
 8007170:	045c      	lsls	r4, r3, #17
 8007172:	197b      	adds	r3, r7, r5
 8007174:	8819      	ldrh	r1, [r3, #0]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	4b23      	ldr	r3, [pc, #140]	; (8007208 <I2C_RequestMemoryWrite+0xc4>)
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	0023      	movs	r3, r4
 800717e:	f000 f9e9 	bl	8007554 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007184:	6a39      	ldr	r1, [r7, #32]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	0018      	movs	r0, r3
 800718a:	f000 f902 	bl	8007392 <I2C_WaitOnTXISFlagUntilTimeout>
 800718e:	1e03      	subs	r3, r0, #0
 8007190:	d001      	beq.n	8007196 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e033      	b.n	80071fe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007196:	1dbb      	adds	r3, r7, #6
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d107      	bne.n	80071ae <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800719e:	2308      	movs	r3, #8
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	629a      	str	r2, [r3, #40]	; 0x28
 80071ac:	e019      	b.n	80071e2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071ae:	2308      	movs	r3, #8
 80071b0:	18fb      	adds	r3, r7, r3
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	6a39      	ldr	r1, [r7, #32]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	0018      	movs	r0, r3
 80071c8:	f000 f8e3 	bl	8007392 <I2C_WaitOnTXISFlagUntilTimeout>
 80071cc:	1e03      	subs	r3, r0, #0
 80071ce:	d001      	beq.n	80071d4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e014      	b.n	80071fe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071d4:	2308      	movs	r3, #8
 80071d6:	18fb      	adds	r3, r7, r3
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80071e2:	6a3a      	ldr	r2, [r7, #32]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	0013      	movs	r3, r2
 80071ec:	2200      	movs	r2, #0
 80071ee:	2180      	movs	r1, #128	; 0x80
 80071f0:	f000 f890 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 80071f4:	1e03      	subs	r3, r0, #0
 80071f6:	d001      	beq.n	80071fc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e000      	b.n	80071fe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	0018      	movs	r0, r3
 8007200:	46bd      	mov	sp, r7
 8007202:	b004      	add	sp, #16
 8007204:	bdb0      	pop	{r4, r5, r7, pc}
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	80002000 	.word	0x80002000

0800720c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800720c:	b5b0      	push	{r4, r5, r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af02      	add	r7, sp, #8
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	000c      	movs	r4, r1
 8007216:	0010      	movs	r0, r2
 8007218:	0019      	movs	r1, r3
 800721a:	250a      	movs	r5, #10
 800721c:	197b      	adds	r3, r7, r5
 800721e:	1c22      	adds	r2, r4, #0
 8007220:	801a      	strh	r2, [r3, #0]
 8007222:	2308      	movs	r3, #8
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	1c02      	adds	r2, r0, #0
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	1dbb      	adds	r3, r7, #6
 800722c:	1c0a      	adds	r2, r1, #0
 800722e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007230:	1dbb      	adds	r3, r7, #6
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b2da      	uxtb	r2, r3
 8007236:	197b      	adds	r3, r7, r5
 8007238:	8819      	ldrh	r1, [r3, #0]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	4b23      	ldr	r3, [pc, #140]	; (80072cc <I2C_RequestMemoryRead+0xc0>)
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	2300      	movs	r3, #0
 8007242:	f000 f987 	bl	8007554 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007248:	6a39      	ldr	r1, [r7, #32]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	0018      	movs	r0, r3
 800724e:	f000 f8a0 	bl	8007392 <I2C_WaitOnTXISFlagUntilTimeout>
 8007252:	1e03      	subs	r3, r0, #0
 8007254:	d001      	beq.n	800725a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e033      	b.n	80072c2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800725a:	1dbb      	adds	r3, r7, #6
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d107      	bne.n	8007272 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007262:	2308      	movs	r3, #8
 8007264:	18fb      	adds	r3, r7, r3
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b2da      	uxtb	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	629a      	str	r2, [r3, #40]	; 0x28
 8007270:	e019      	b.n	80072a6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007272:	2308      	movs	r3, #8
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	b29b      	uxth	r3, r3
 800727c:	b2da      	uxtb	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007286:	6a39      	ldr	r1, [r7, #32]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	0018      	movs	r0, r3
 800728c:	f000 f881 	bl	8007392 <I2C_WaitOnTXISFlagUntilTimeout>
 8007290:	1e03      	subs	r3, r0, #0
 8007292:	d001      	beq.n	8007298 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e014      	b.n	80072c2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007298:	2308      	movs	r3, #8
 800729a:	18fb      	adds	r3, r7, r3
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80072a6:	6a3a      	ldr	r2, [r7, #32]
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	0013      	movs	r3, r2
 80072b0:	2200      	movs	r2, #0
 80072b2:	2140      	movs	r1, #64	; 0x40
 80072b4:	f000 f82e 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 80072b8:	1e03      	subs	r3, r0, #0
 80072ba:	d001      	beq.n	80072c0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e000      	b.n	80072c2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	0018      	movs	r0, r3
 80072c4:	46bd      	mov	sp, r7
 80072c6:	b004      	add	sp, #16
 80072c8:	bdb0      	pop	{r4, r5, r7, pc}
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	80002000 	.word	0x80002000

080072d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	2202      	movs	r2, #2
 80072e0:	4013      	ands	r3, r2
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d103      	bne.n	80072ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2200      	movs	r2, #0
 80072ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	2201      	movs	r2, #1
 80072f6:	4013      	ands	r3, r2
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d007      	beq.n	800730c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699a      	ldr	r2, [r3, #24]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2101      	movs	r1, #1
 8007308:	430a      	orrs	r2, r1
 800730a:	619a      	str	r2, [r3, #24]
  }
}
 800730c:	46c0      	nop			; (mov r8, r8)
 800730e:	46bd      	mov	sp, r7
 8007310:	b002      	add	sp, #8
 8007312:	bd80      	pop	{r7, pc}

08007314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	1dfb      	adds	r3, r7, #7
 8007322:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007324:	e021      	b.n	800736a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	3301      	adds	r3, #1
 800732a:	d01e      	beq.n	800736a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732c:	f7fe faf2 	bl	8005914 <HAL_GetTick>
 8007330:	0002      	movs	r2, r0
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d302      	bcc.n	8007342 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d113      	bne.n	800736a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007346:	2220      	movs	r2, #32
 8007348:	431a      	orrs	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2241      	movs	r2, #65	; 0x41
 8007352:	2120      	movs	r1, #32
 8007354:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2242      	movs	r2, #66	; 0x42
 800735a:	2100      	movs	r1, #0
 800735c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2240      	movs	r2, #64	; 0x40
 8007362:	2100      	movs	r1, #0
 8007364:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e00f      	b.n	800738a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	4013      	ands	r3, r2
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	425a      	negs	r2, r3
 800737a:	4153      	adcs	r3, r2
 800737c:	b2db      	uxtb	r3, r3
 800737e:	001a      	movs	r2, r3
 8007380:	1dfb      	adds	r3, r7, #7
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d0ce      	beq.n	8007326 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	0018      	movs	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	b004      	add	sp, #16
 8007390:	bd80      	pop	{r7, pc}

08007392 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800739e:	e02b      	b.n	80073f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	0018      	movs	r0, r3
 80073a8:	f000 f86e 	bl	8007488 <I2C_IsAcknowledgeFailed>
 80073ac:	1e03      	subs	r3, r0, #0
 80073ae:	d001      	beq.n	80073b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e029      	b.n	8007408 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	3301      	adds	r3, #1
 80073b8:	d01e      	beq.n	80073f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ba:	f7fe faab 	bl	8005914 <HAL_GetTick>
 80073be:	0002      	movs	r2, r0
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d302      	bcc.n	80073d0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d113      	bne.n	80073f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d4:	2220      	movs	r2, #32
 80073d6:	431a      	orrs	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2241      	movs	r2, #65	; 0x41
 80073e0:	2120      	movs	r1, #32
 80073e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2242      	movs	r2, #66	; 0x42
 80073e8:	2100      	movs	r1, #0
 80073ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2240      	movs	r2, #64	; 0x40
 80073f0:	2100      	movs	r1, #0
 80073f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e007      	b.n	8007408 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	2202      	movs	r2, #2
 8007400:	4013      	ands	r3, r2
 8007402:	2b02      	cmp	r3, #2
 8007404:	d1cc      	bne.n	80073a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	0018      	movs	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	b004      	add	sp, #16
 800740e:	bd80      	pop	{r7, pc}

08007410 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800741c:	e028      	b.n	8007470 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	0018      	movs	r0, r3
 8007426:	f000 f82f 	bl	8007488 <I2C_IsAcknowledgeFailed>
 800742a:	1e03      	subs	r3, r0, #0
 800742c:	d001      	beq.n	8007432 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e026      	b.n	8007480 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007432:	f7fe fa6f 	bl	8005914 <HAL_GetTick>
 8007436:	0002      	movs	r2, r0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d113      	bne.n	8007470 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744c:	2220      	movs	r2, #32
 800744e:	431a      	orrs	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2241      	movs	r2, #65	; 0x41
 8007458:	2120      	movs	r1, #32
 800745a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2242      	movs	r2, #66	; 0x42
 8007460:	2100      	movs	r1, #0
 8007462:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2240      	movs	r2, #64	; 0x40
 8007468:	2100      	movs	r1, #0
 800746a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e007      	b.n	8007480 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	2220      	movs	r2, #32
 8007478:	4013      	ands	r3, r2
 800747a:	2b20      	cmp	r3, #32
 800747c:	d1cf      	bne.n	800741e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	0018      	movs	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	b004      	add	sp, #16
 8007486:	bd80      	pop	{r7, pc}

08007488 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	2210      	movs	r2, #16
 800749c:	4013      	ands	r3, r2
 800749e:	2b10      	cmp	r3, #16
 80074a0:	d151      	bne.n	8007546 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074a2:	e021      	b.n	80074e8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	3301      	adds	r3, #1
 80074a8:	d01e      	beq.n	80074e8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074aa:	f7fe fa33 	bl	8005914 <HAL_GetTick>
 80074ae:	0002      	movs	r2, r0
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d302      	bcc.n	80074c0 <I2C_IsAcknowledgeFailed+0x38>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d113      	bne.n	80074e8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c4:	2220      	movs	r2, #32
 80074c6:	431a      	orrs	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2241      	movs	r2, #65	; 0x41
 80074d0:	2120      	movs	r1, #32
 80074d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2242      	movs	r2, #66	; 0x42
 80074d8:	2100      	movs	r1, #0
 80074da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2240      	movs	r2, #64	; 0x40
 80074e0:	2100      	movs	r1, #0
 80074e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e02f      	b.n	8007548 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	2220      	movs	r2, #32
 80074f0:	4013      	ands	r3, r2
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d1d6      	bne.n	80074a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2210      	movs	r2, #16
 80074fc:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2220      	movs	r2, #32
 8007504:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	0018      	movs	r0, r3
 800750a:	f7ff fee1 	bl	80072d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	490d      	ldr	r1, [pc, #52]	; (8007550 <I2C_IsAcknowledgeFailed+0xc8>)
 800751a:	400a      	ands	r2, r1
 800751c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	2204      	movs	r2, #4
 8007524:	431a      	orrs	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2241      	movs	r2, #65	; 0x41
 800752e:	2120      	movs	r1, #32
 8007530:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2242      	movs	r2, #66	; 0x42
 8007536:	2100      	movs	r1, #0
 8007538:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2240      	movs	r2, #64	; 0x40
 800753e:	2100      	movs	r1, #0
 8007540:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	0018      	movs	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	b004      	add	sp, #16
 800754e:	bd80      	pop	{r7, pc}
 8007550:	fe00e800 	.word	0xfe00e800

08007554 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007554:	b590      	push	{r4, r7, lr}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	0008      	movs	r0, r1
 800755e:	0011      	movs	r1, r2
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	240a      	movs	r4, #10
 8007564:	193b      	adds	r3, r7, r4
 8007566:	1c02      	adds	r2, r0, #0
 8007568:	801a      	strh	r2, [r3, #0]
 800756a:	2009      	movs	r0, #9
 800756c:	183b      	adds	r3, r7, r0
 800756e:	1c0a      	adds	r2, r1, #0
 8007570:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	6a3a      	ldr	r2, [r7, #32]
 800757a:	0d51      	lsrs	r1, r2, #21
 800757c:	2280      	movs	r2, #128	; 0x80
 800757e:	00d2      	lsls	r2, r2, #3
 8007580:	400a      	ands	r2, r1
 8007582:	490e      	ldr	r1, [pc, #56]	; (80075bc <I2C_TransferConfig+0x68>)
 8007584:	430a      	orrs	r2, r1
 8007586:	43d2      	mvns	r2, r2
 8007588:	401a      	ands	r2, r3
 800758a:	0011      	movs	r1, r2
 800758c:	193b      	adds	r3, r7, r4
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	059b      	lsls	r3, r3, #22
 8007592:	0d9a      	lsrs	r2, r3, #22
 8007594:	183b      	adds	r3, r7, r0
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	0418      	lsls	r0, r3, #16
 800759a:	23ff      	movs	r3, #255	; 0xff
 800759c:	041b      	lsls	r3, r3, #16
 800759e:	4003      	ands	r3, r0
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	431a      	orrs	r2, r3
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	431a      	orrs	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b005      	add	sp, #20
 80075b8:	bd90      	pop	{r4, r7, pc}
 80075ba:	46c0      	nop			; (mov r8, r8)
 80075bc:	03ff63ff 	.word	0x03ff63ff

080075c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2241      	movs	r2, #65	; 0x41
 80075ce:	5c9b      	ldrb	r3, [r3, r2]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d138      	bne.n	8007648 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2240      	movs	r2, #64	; 0x40
 80075da:	5c9b      	ldrb	r3, [r3, r2]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e032      	b.n	800764a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2240      	movs	r2, #64	; 0x40
 80075e8:	2101      	movs	r1, #1
 80075ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2241      	movs	r2, #65	; 0x41
 80075f0:	2124      	movs	r1, #36	; 0x24
 80075f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2101      	movs	r1, #1
 8007600:	438a      	bics	r2, r1
 8007602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4911      	ldr	r1, [pc, #68]	; (8007654 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007610:	400a      	ands	r2, r1
 8007612:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6819      	ldr	r1, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2101      	movs	r1, #1
 8007630:	430a      	orrs	r2, r1
 8007632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2241      	movs	r2, #65	; 0x41
 8007638:	2120      	movs	r1, #32
 800763a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2240      	movs	r2, #64	; 0x40
 8007640:	2100      	movs	r1, #0
 8007642:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	e000      	b.n	800764a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007648:	2302      	movs	r3, #2
  }
}
 800764a:	0018      	movs	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	b002      	add	sp, #8
 8007650:	bd80      	pop	{r7, pc}
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	ffffefff 	.word	0xffffefff

08007658 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2241      	movs	r2, #65	; 0x41
 8007666:	5c9b      	ldrb	r3, [r3, r2]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b20      	cmp	r3, #32
 800766c:	d139      	bne.n	80076e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2240      	movs	r2, #64	; 0x40
 8007672:	5c9b      	ldrb	r3, [r3, r2]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d101      	bne.n	800767c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007678:	2302      	movs	r3, #2
 800767a:	e033      	b.n	80076e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2240      	movs	r2, #64	; 0x40
 8007680:	2101      	movs	r1, #1
 8007682:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2241      	movs	r2, #65	; 0x41
 8007688:	2124      	movs	r1, #36	; 0x24
 800768a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2101      	movs	r1, #1
 8007698:	438a      	bics	r2, r1
 800769a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4a11      	ldr	r2, [pc, #68]	; (80076ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2101      	movs	r1, #1
 80076ca:	430a      	orrs	r2, r1
 80076cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2241      	movs	r2, #65	; 0x41
 80076d2:	2120      	movs	r1, #32
 80076d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2240      	movs	r2, #64	; 0x40
 80076da:	2100      	movs	r1, #0
 80076dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	e000      	b.n	80076e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076e2:	2302      	movs	r3, #2
  }
}
 80076e4:	0018      	movs	r0, r3
 80076e6:	46bd      	mov	sp, r7
 80076e8:	b004      	add	sp, #16
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	fffff0ff 	.word	0xfffff0ff

080076f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076f0:	b5b0      	push	{r4, r5, r7, lr}
 80076f2:	b08a      	sub	sp, #40	; 0x28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f000 fbaf 	bl	8007e62 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007704:	4bcf      	ldr	r3, [pc, #828]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	220c      	movs	r2, #12
 800770a:	4013      	ands	r3, r2
 800770c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800770e:	4bcd      	ldr	r3, [pc, #820]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	2380      	movs	r3, #128	; 0x80
 8007714:	025b      	lsls	r3, r3, #9
 8007716:	4013      	ands	r3, r2
 8007718:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2201      	movs	r2, #1
 8007720:	4013      	ands	r3, r2
 8007722:	d100      	bne.n	8007726 <HAL_RCC_OscConfig+0x36>
 8007724:	e07e      	b.n	8007824 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	2b08      	cmp	r3, #8
 800772a:	d007      	beq.n	800773c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	2b0c      	cmp	r3, #12
 8007730:	d112      	bne.n	8007758 <HAL_RCC_OscConfig+0x68>
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	2380      	movs	r3, #128	; 0x80
 8007736:	025b      	lsls	r3, r3, #9
 8007738:	429a      	cmp	r2, r3
 800773a:	d10d      	bne.n	8007758 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800773c:	4bc1      	ldr	r3, [pc, #772]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	2380      	movs	r3, #128	; 0x80
 8007742:	029b      	lsls	r3, r3, #10
 8007744:	4013      	ands	r3, r2
 8007746:	d100      	bne.n	800774a <HAL_RCC_OscConfig+0x5a>
 8007748:	e06b      	b.n	8007822 <HAL_RCC_OscConfig+0x132>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d167      	bne.n	8007822 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f000 fb85 	bl	8007e62 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	2380      	movs	r3, #128	; 0x80
 800775e:	025b      	lsls	r3, r3, #9
 8007760:	429a      	cmp	r2, r3
 8007762:	d107      	bne.n	8007774 <HAL_RCC_OscConfig+0x84>
 8007764:	4bb7      	ldr	r3, [pc, #732]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	4bb6      	ldr	r3, [pc, #728]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 800776a:	2180      	movs	r1, #128	; 0x80
 800776c:	0249      	lsls	r1, r1, #9
 800776e:	430a      	orrs	r2, r1
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	e027      	b.n	80077c4 <HAL_RCC_OscConfig+0xd4>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	23a0      	movs	r3, #160	; 0xa0
 800777a:	02db      	lsls	r3, r3, #11
 800777c:	429a      	cmp	r2, r3
 800777e:	d10e      	bne.n	800779e <HAL_RCC_OscConfig+0xae>
 8007780:	4bb0      	ldr	r3, [pc, #704]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	4baf      	ldr	r3, [pc, #700]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007786:	2180      	movs	r1, #128	; 0x80
 8007788:	02c9      	lsls	r1, r1, #11
 800778a:	430a      	orrs	r2, r1
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	4bad      	ldr	r3, [pc, #692]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4bac      	ldr	r3, [pc, #688]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007794:	2180      	movs	r1, #128	; 0x80
 8007796:	0249      	lsls	r1, r1, #9
 8007798:	430a      	orrs	r2, r1
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	e012      	b.n	80077c4 <HAL_RCC_OscConfig+0xd4>
 800779e:	4ba9      	ldr	r3, [pc, #676]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4ba8      	ldr	r3, [pc, #672]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80077a4:	49a8      	ldr	r1, [pc, #672]	; (8007a48 <HAL_RCC_OscConfig+0x358>)
 80077a6:	400a      	ands	r2, r1
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	4ba6      	ldr	r3, [pc, #664]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	2380      	movs	r3, #128	; 0x80
 80077b0:	025b      	lsls	r3, r3, #9
 80077b2:	4013      	ands	r3, r2
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4ba2      	ldr	r3, [pc, #648]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	4ba1      	ldr	r3, [pc, #644]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80077be:	49a3      	ldr	r1, [pc, #652]	; (8007a4c <HAL_RCC_OscConfig+0x35c>)
 80077c0:	400a      	ands	r2, r1
 80077c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077cc:	f7fe f8a2 	bl	8005914 <HAL_GetTick>
 80077d0:	0003      	movs	r3, r0
 80077d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077d4:	e009      	b.n	80077ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077d6:	f7fe f89d 	bl	8005914 <HAL_GetTick>
 80077da:	0002      	movs	r2, r0
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b64      	cmp	r3, #100	; 0x64
 80077e2:	d902      	bls.n	80077ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	f000 fb3c 	bl	8007e62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077ea:	4b96      	ldr	r3, [pc, #600]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	2380      	movs	r3, #128	; 0x80
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	4013      	ands	r3, r2
 80077f4:	d0ef      	beq.n	80077d6 <HAL_RCC_OscConfig+0xe6>
 80077f6:	e015      	b.n	8007824 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f8:	f7fe f88c 	bl	8005914 <HAL_GetTick>
 80077fc:	0003      	movs	r3, r0
 80077fe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007800:	e008      	b.n	8007814 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007802:	f7fe f887 	bl	8005914 <HAL_GetTick>
 8007806:	0002      	movs	r2, r0
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b64      	cmp	r3, #100	; 0x64
 800780e:	d901      	bls.n	8007814 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e326      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007814:	4b8b      	ldr	r3, [pc, #556]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	029b      	lsls	r3, r3, #10
 800781c:	4013      	ands	r3, r2
 800781e:	d1f0      	bne.n	8007802 <HAL_RCC_OscConfig+0x112>
 8007820:	e000      	b.n	8007824 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007822:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2202      	movs	r2, #2
 800782a:	4013      	ands	r3, r2
 800782c:	d100      	bne.n	8007830 <HAL_RCC_OscConfig+0x140>
 800782e:	e08b      	b.n	8007948 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	2b04      	cmp	r3, #4
 800783a:	d005      	beq.n	8007848 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	2b0c      	cmp	r3, #12
 8007840:	d13e      	bne.n	80078c0 <HAL_RCC_OscConfig+0x1d0>
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d13b      	bne.n	80078c0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007848:	4b7e      	ldr	r3, [pc, #504]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2204      	movs	r2, #4
 800784e:	4013      	ands	r3, r2
 8007850:	d004      	beq.n	800785c <HAL_RCC_OscConfig+0x16c>
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e302      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800785c:	4b79      	ldr	r3, [pc, #484]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	4a7b      	ldr	r2, [pc, #492]	; (8007a50 <HAL_RCC_OscConfig+0x360>)
 8007862:	4013      	ands	r3, r2
 8007864:	0019      	movs	r1, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	021a      	lsls	r2, r3, #8
 800786c:	4b75      	ldr	r3, [pc, #468]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 800786e:	430a      	orrs	r2, r1
 8007870:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007872:	4b74      	ldr	r3, [pc, #464]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2209      	movs	r2, #9
 8007878:	4393      	bics	r3, r2
 800787a:	0019      	movs	r1, r3
 800787c:	4b71      	ldr	r3, [pc, #452]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	430a      	orrs	r2, r1
 8007882:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007884:	f000 fc40 	bl	8008108 <HAL_RCC_GetSysClockFreq>
 8007888:	0001      	movs	r1, r0
 800788a:	4b6e      	ldr	r3, [pc, #440]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	091b      	lsrs	r3, r3, #4
 8007890:	220f      	movs	r2, #15
 8007892:	4013      	ands	r3, r2
 8007894:	4a6f      	ldr	r2, [pc, #444]	; (8007a54 <HAL_RCC_OscConfig+0x364>)
 8007896:	5cd3      	ldrb	r3, [r2, r3]
 8007898:	000a      	movs	r2, r1
 800789a:	40da      	lsrs	r2, r3
 800789c:	4b6e      	ldr	r3, [pc, #440]	; (8007a58 <HAL_RCC_OscConfig+0x368>)
 800789e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80078a0:	4b6e      	ldr	r3, [pc, #440]	; (8007a5c <HAL_RCC_OscConfig+0x36c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2513      	movs	r5, #19
 80078a6:	197c      	adds	r4, r7, r5
 80078a8:	0018      	movs	r0, r3
 80078aa:	f7fd ffed 	bl	8005888 <HAL_InitTick>
 80078ae:	0003      	movs	r3, r0
 80078b0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80078b2:	197b      	adds	r3, r7, r5
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d046      	beq.n	8007948 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80078ba:	197b      	adds	r3, r7, r5
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	e2d0      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d027      	beq.n	8007916 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80078c6:	4b5f      	ldr	r3, [pc, #380]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2209      	movs	r2, #9
 80078cc:	4393      	bics	r3, r2
 80078ce:	0019      	movs	r1, r3
 80078d0:	4b5c      	ldr	r3, [pc, #368]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d8:	f7fe f81c 	bl	8005914 <HAL_GetTick>
 80078dc:	0003      	movs	r3, r0
 80078de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078e2:	f7fe f817 	bl	8005914 <HAL_GetTick>
 80078e6:	0002      	movs	r2, r0
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e2b6      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078f4:	4b53      	ldr	r3, [pc, #332]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2204      	movs	r2, #4
 80078fa:	4013      	ands	r3, r2
 80078fc:	d0f1      	beq.n	80078e2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078fe:	4b51      	ldr	r3, [pc, #324]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	4a53      	ldr	r2, [pc, #332]	; (8007a50 <HAL_RCC_OscConfig+0x360>)
 8007904:	4013      	ands	r3, r2
 8007906:	0019      	movs	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	021a      	lsls	r2, r3, #8
 800790e:	4b4d      	ldr	r3, [pc, #308]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007910:	430a      	orrs	r2, r1
 8007912:	605a      	str	r2, [r3, #4]
 8007914:	e018      	b.n	8007948 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007916:	4b4b      	ldr	r3, [pc, #300]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b4a      	ldr	r3, [pc, #296]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 800791c:	2101      	movs	r1, #1
 800791e:	438a      	bics	r2, r1
 8007920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007922:	f7fd fff7 	bl	8005914 <HAL_GetTick>
 8007926:	0003      	movs	r3, r0
 8007928:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800792a:	e008      	b.n	800793e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800792c:	f7fd fff2 	bl	8005914 <HAL_GetTick>
 8007930:	0002      	movs	r2, r0
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b02      	cmp	r3, #2
 8007938:	d901      	bls.n	800793e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e291      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800793e:	4b41      	ldr	r3, [pc, #260]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2204      	movs	r2, #4
 8007944:	4013      	ands	r3, r2
 8007946:	d1f1      	bne.n	800792c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2210      	movs	r2, #16
 800794e:	4013      	ands	r3, r2
 8007950:	d100      	bne.n	8007954 <HAL_RCC_OscConfig+0x264>
 8007952:	e0a1      	b.n	8007a98 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d140      	bne.n	80079dc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800795a:	4b3a      	ldr	r3, [pc, #232]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	2380      	movs	r3, #128	; 0x80
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4013      	ands	r3, r2
 8007964:	d005      	beq.n	8007972 <HAL_RCC_OscConfig+0x282>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e277      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007972:	4b34      	ldr	r3, [pc, #208]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	4a3a      	ldr	r2, [pc, #232]	; (8007a60 <HAL_RCC_OscConfig+0x370>)
 8007978:	4013      	ands	r3, r2
 800797a:	0019      	movs	r1, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007980:	4b30      	ldr	r3, [pc, #192]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007986:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	0a19      	lsrs	r1, r3, #8
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	061a      	lsls	r2, r3, #24
 8007994:	4b2b      	ldr	r3, [pc, #172]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007996:	430a      	orrs	r2, r1
 8007998:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	0b5b      	lsrs	r3, r3, #13
 80079a0:	3301      	adds	r3, #1
 80079a2:	2280      	movs	r2, #128	; 0x80
 80079a4:	0212      	lsls	r2, r2, #8
 80079a6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80079a8:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	091b      	lsrs	r3, r3, #4
 80079ae:	210f      	movs	r1, #15
 80079b0:	400b      	ands	r3, r1
 80079b2:	4928      	ldr	r1, [pc, #160]	; (8007a54 <HAL_RCC_OscConfig+0x364>)
 80079b4:	5ccb      	ldrb	r3, [r1, r3]
 80079b6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80079b8:	4b27      	ldr	r3, [pc, #156]	; (8007a58 <HAL_RCC_OscConfig+0x368>)
 80079ba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80079bc:	4b27      	ldr	r3, [pc, #156]	; (8007a5c <HAL_RCC_OscConfig+0x36c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2513      	movs	r5, #19
 80079c2:	197c      	adds	r4, r7, r5
 80079c4:	0018      	movs	r0, r3
 80079c6:	f7fd ff5f 	bl	8005888 <HAL_InitTick>
 80079ca:	0003      	movs	r3, r0
 80079cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80079ce:	197b      	adds	r3, r7, r5
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d060      	beq.n	8007a98 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80079d6:	197b      	adds	r3, r7, r5
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	e242      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d03f      	beq.n	8007a64 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80079e4:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 80079ea:	2180      	movs	r1, #128	; 0x80
 80079ec:	0049      	lsls	r1, r1, #1
 80079ee:	430a      	orrs	r2, r1
 80079f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f2:	f7fd ff8f 	bl	8005914 <HAL_GetTick>
 80079f6:	0003      	movs	r3, r0
 80079f8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079fc:	f7fd ff8a 	bl	8005914 <HAL_GetTick>
 8007a00:	0002      	movs	r2, r0
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e229      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	2380      	movs	r3, #128	; 0x80
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4013      	ands	r3, r2
 8007a18:	d0f0      	beq.n	80079fc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a1a:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	4a10      	ldr	r2, [pc, #64]	; (8007a60 <HAL_RCC_OscConfig+0x370>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	0019      	movs	r1, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a28:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	0a19      	lsrs	r1, r3, #8
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	061a      	lsls	r2, r3, #24
 8007a3c:	4b01      	ldr	r3, [pc, #4]	; (8007a44 <HAL_RCC_OscConfig+0x354>)
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
 8007a42:	e029      	b.n	8007a98 <HAL_RCC_OscConfig+0x3a8>
 8007a44:	40021000 	.word	0x40021000
 8007a48:	fffeffff 	.word	0xfffeffff
 8007a4c:	fffbffff 	.word	0xfffbffff
 8007a50:	ffffe0ff 	.word	0xffffe0ff
 8007a54:	0800b2bc 	.word	0x0800b2bc
 8007a58:	20000020 	.word	0x20000020
 8007a5c:	20000024 	.word	0x20000024
 8007a60:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007a64:	4bbd      	ldr	r3, [pc, #756]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4bbc      	ldr	r3, [pc, #752]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007a6a:	49bd      	ldr	r1, [pc, #756]	; (8007d60 <HAL_RCC_OscConfig+0x670>)
 8007a6c:	400a      	ands	r2, r1
 8007a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a70:	f7fd ff50 	bl	8005914 <HAL_GetTick>
 8007a74:	0003      	movs	r3, r0
 8007a76:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007a78:	e008      	b.n	8007a8c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a7a:	f7fd ff4b 	bl	8005914 <HAL_GetTick>
 8007a7e:	0002      	movs	r2, r0
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d901      	bls.n	8007a8c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e1ea      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007a8c:	4bb3      	ldr	r3, [pc, #716]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	2380      	movs	r3, #128	; 0x80
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4013      	ands	r3, r2
 8007a96:	d1f0      	bne.n	8007a7a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	d036      	beq.n	8007b10 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d019      	beq.n	8007ade <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007aaa:	4bac      	ldr	r3, [pc, #688]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007aae:	4bab      	ldr	r3, [pc, #684]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ab6:	f7fd ff2d 	bl	8005914 <HAL_GetTick>
 8007aba:	0003      	movs	r3, r0
 8007abc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ac0:	f7fd ff28 	bl	8005914 <HAL_GetTick>
 8007ac4:	0002      	movs	r2, r0
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e1c7      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ad2:	4ba2      	ldr	r3, [pc, #648]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	4013      	ands	r3, r2
 8007ada:	d0f1      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x3d0>
 8007adc:	e018      	b.n	8007b10 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ade:	4b9f      	ldr	r3, [pc, #636]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ae2:	4b9e      	ldr	r3, [pc, #632]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	438a      	bics	r2, r1
 8007ae8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007aea:	f7fd ff13 	bl	8005914 <HAL_GetTick>
 8007aee:	0003      	movs	r3, r0
 8007af0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007af2:	e008      	b.n	8007b06 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007af4:	f7fd ff0e 	bl	8005914 <HAL_GetTick>
 8007af8:	0002      	movs	r2, r0
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e1ad      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b06:	4b95      	ldr	r3, [pc, #596]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	d1f1      	bne.n	8007af4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2204      	movs	r2, #4
 8007b16:	4013      	ands	r3, r2
 8007b18:	d100      	bne.n	8007b1c <HAL_RCC_OscConfig+0x42c>
 8007b1a:	e0ae      	b.n	8007c7a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b1c:	2027      	movs	r0, #39	; 0x27
 8007b1e:	183b      	adds	r3, r7, r0
 8007b20:	2200      	movs	r2, #0
 8007b22:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b24:	4b8d      	ldr	r3, [pc, #564]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b28:	2380      	movs	r3, #128	; 0x80
 8007b2a:	055b      	lsls	r3, r3, #21
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	d109      	bne.n	8007b44 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b30:	4b8a      	ldr	r3, [pc, #552]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b34:	4b89      	ldr	r3, [pc, #548]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007b36:	2180      	movs	r1, #128	; 0x80
 8007b38:	0549      	lsls	r1, r1, #21
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007b3e:	183b      	adds	r3, r7, r0
 8007b40:	2201      	movs	r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b44:	4b87      	ldr	r3, [pc, #540]	; (8007d64 <HAL_RCC_OscConfig+0x674>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	2380      	movs	r3, #128	; 0x80
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	d11a      	bne.n	8007b86 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b50:	4b84      	ldr	r3, [pc, #528]	; (8007d64 <HAL_RCC_OscConfig+0x674>)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	4b83      	ldr	r3, [pc, #524]	; (8007d64 <HAL_RCC_OscConfig+0x674>)
 8007b56:	2180      	movs	r1, #128	; 0x80
 8007b58:	0049      	lsls	r1, r1, #1
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b5e:	f7fd fed9 	bl	8005914 <HAL_GetTick>
 8007b62:	0003      	movs	r3, r0
 8007b64:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b68:	f7fd fed4 	bl	8005914 <HAL_GetTick>
 8007b6c:	0002      	movs	r2, r0
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b64      	cmp	r3, #100	; 0x64
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e173      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b7a:	4b7a      	ldr	r3, [pc, #488]	; (8007d64 <HAL_RCC_OscConfig+0x674>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	2380      	movs	r3, #128	; 0x80
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	4013      	ands	r3, r2
 8007b84:	d0f0      	beq.n	8007b68 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	2380      	movs	r3, #128	; 0x80
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d107      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x4b2>
 8007b92:	4b72      	ldr	r3, [pc, #456]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007b94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b96:	4b71      	ldr	r3, [pc, #452]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007b98:	2180      	movs	r1, #128	; 0x80
 8007b9a:	0049      	lsls	r1, r1, #1
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	651a      	str	r2, [r3, #80]	; 0x50
 8007ba0:	e031      	b.n	8007c06 <HAL_RCC_OscConfig+0x516>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10c      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x4d4>
 8007baa:	4b6c      	ldr	r3, [pc, #432]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bae:	4b6b      	ldr	r3, [pc, #428]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007bb0:	496b      	ldr	r1, [pc, #428]	; (8007d60 <HAL_RCC_OscConfig+0x670>)
 8007bb2:	400a      	ands	r2, r1
 8007bb4:	651a      	str	r2, [r3, #80]	; 0x50
 8007bb6:	4b69      	ldr	r3, [pc, #420]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007bb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bba:	4b68      	ldr	r3, [pc, #416]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007bbc:	496a      	ldr	r1, [pc, #424]	; (8007d68 <HAL_RCC_OscConfig+0x678>)
 8007bbe:	400a      	ands	r2, r1
 8007bc0:	651a      	str	r2, [r3, #80]	; 0x50
 8007bc2:	e020      	b.n	8007c06 <HAL_RCC_OscConfig+0x516>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	23a0      	movs	r3, #160	; 0xa0
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d10e      	bne.n	8007bee <HAL_RCC_OscConfig+0x4fe>
 8007bd0:	4b62      	ldr	r3, [pc, #392]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bd4:	4b61      	ldr	r3, [pc, #388]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007bd6:	2180      	movs	r1, #128	; 0x80
 8007bd8:	00c9      	lsls	r1, r1, #3
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	651a      	str	r2, [r3, #80]	; 0x50
 8007bde:	4b5f      	ldr	r3, [pc, #380]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007be2:	4b5e      	ldr	r3, [pc, #376]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007be4:	2180      	movs	r1, #128	; 0x80
 8007be6:	0049      	lsls	r1, r1, #1
 8007be8:	430a      	orrs	r2, r1
 8007bea:	651a      	str	r2, [r3, #80]	; 0x50
 8007bec:	e00b      	b.n	8007c06 <HAL_RCC_OscConfig+0x516>
 8007bee:	4b5b      	ldr	r3, [pc, #364]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bf2:	4b5a      	ldr	r3, [pc, #360]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007bf4:	495a      	ldr	r1, [pc, #360]	; (8007d60 <HAL_RCC_OscConfig+0x670>)
 8007bf6:	400a      	ands	r2, r1
 8007bf8:	651a      	str	r2, [r3, #80]	; 0x50
 8007bfa:	4b58      	ldr	r3, [pc, #352]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bfe:	4b57      	ldr	r3, [pc, #348]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007c00:	4959      	ldr	r1, [pc, #356]	; (8007d68 <HAL_RCC_OscConfig+0x678>)
 8007c02:	400a      	ands	r2, r1
 8007c04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d015      	beq.n	8007c3a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c0e:	f7fd fe81 	bl	8005914 <HAL_GetTick>
 8007c12:	0003      	movs	r3, r0
 8007c14:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c16:	e009      	b.n	8007c2c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c18:	f7fd fe7c 	bl	8005914 <HAL_GetTick>
 8007c1c:	0002      	movs	r2, r0
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	4a52      	ldr	r2, [pc, #328]	; (8007d6c <HAL_RCC_OscConfig+0x67c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e11a      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c2c:	4b4b      	ldr	r3, [pc, #300]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007c2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c30:	2380      	movs	r3, #128	; 0x80
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4013      	ands	r3, r2
 8007c36:	d0ef      	beq.n	8007c18 <HAL_RCC_OscConfig+0x528>
 8007c38:	e014      	b.n	8007c64 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c3a:	f7fd fe6b 	bl	8005914 <HAL_GetTick>
 8007c3e:	0003      	movs	r3, r0
 8007c40:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c42:	e009      	b.n	8007c58 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c44:	f7fd fe66 	bl	8005914 <HAL_GetTick>
 8007c48:	0002      	movs	r2, r0
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	4a47      	ldr	r2, [pc, #284]	; (8007d6c <HAL_RCC_OscConfig+0x67c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d901      	bls.n	8007c58 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e104      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c58:	4b40      	ldr	r3, [pc, #256]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007c5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c5c:	2380      	movs	r3, #128	; 0x80
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4013      	ands	r3, r2
 8007c62:	d1ef      	bne.n	8007c44 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007c64:	2327      	movs	r3, #39	; 0x27
 8007c66:	18fb      	adds	r3, r7, r3
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d105      	bne.n	8007c7a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c6e:	4b3b      	ldr	r3, [pc, #236]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c72:	4b3a      	ldr	r3, [pc, #232]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007c74:	493e      	ldr	r1, [pc, #248]	; (8007d70 <HAL_RCC_OscConfig+0x680>)
 8007c76:	400a      	ands	r2, r1
 8007c78:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	4013      	ands	r3, r2
 8007c82:	d049      	beq.n	8007d18 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d026      	beq.n	8007cda <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007c8c:	4b33      	ldr	r3, [pc, #204]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	4b32      	ldr	r3, [pc, #200]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007c92:	2101      	movs	r1, #1
 8007c94:	430a      	orrs	r2, r1
 8007c96:	609a      	str	r2, [r3, #8]
 8007c98:	4b30      	ldr	r3, [pc, #192]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c9c:	4b2f      	ldr	r3, [pc, #188]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	635a      	str	r2, [r3, #52]	; 0x34
 8007ca4:	4b33      	ldr	r3, [pc, #204]	; (8007d74 <HAL_RCC_OscConfig+0x684>)
 8007ca6:	6a1a      	ldr	r2, [r3, #32]
 8007ca8:	4b32      	ldr	r3, [pc, #200]	; (8007d74 <HAL_RCC_OscConfig+0x684>)
 8007caa:	2180      	movs	r1, #128	; 0x80
 8007cac:	0189      	lsls	r1, r1, #6
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb2:	f7fd fe2f 	bl	8005914 <HAL_GetTick>
 8007cb6:	0003      	movs	r3, r0
 8007cb8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cbc:	f7fd fe2a 	bl	8005914 <HAL_GetTick>
 8007cc0:	0002      	movs	r2, r0
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e0c9      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cce:	4b23      	ldr	r3, [pc, #140]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	d0f1      	beq.n	8007cbc <HAL_RCC_OscConfig+0x5cc>
 8007cd8:	e01e      	b.n	8007d18 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007cda:	4b20      	ldr	r3, [pc, #128]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	4b1f      	ldr	r3, [pc, #124]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	438a      	bics	r2, r1
 8007ce4:	609a      	str	r2, [r3, #8]
 8007ce6:	4b23      	ldr	r3, [pc, #140]	; (8007d74 <HAL_RCC_OscConfig+0x684>)
 8007ce8:	6a1a      	ldr	r2, [r3, #32]
 8007cea:	4b22      	ldr	r3, [pc, #136]	; (8007d74 <HAL_RCC_OscConfig+0x684>)
 8007cec:	4922      	ldr	r1, [pc, #136]	; (8007d78 <HAL_RCC_OscConfig+0x688>)
 8007cee:	400a      	ands	r2, r1
 8007cf0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cf2:	f7fd fe0f 	bl	8005914 <HAL_GetTick>
 8007cf6:	0003      	movs	r3, r0
 8007cf8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cfa:	e008      	b.n	8007d0e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cfc:	f7fd fe0a 	bl	8005914 <HAL_GetTick>
 8007d00:	0002      	movs	r2, r0
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e0a9      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	2202      	movs	r2, #2
 8007d14:	4013      	ands	r3, r2
 8007d16:	d1f1      	bne.n	8007cfc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d100      	bne.n	8007d22 <HAL_RCC_OscConfig+0x632>
 8007d20:	e09e      	b.n	8007e60 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	2b0c      	cmp	r3, #12
 8007d26:	d100      	bne.n	8007d2a <HAL_RCC_OscConfig+0x63a>
 8007d28:	e077      	b.n	8007e1a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d158      	bne.n	8007de4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <HAL_RCC_OscConfig+0x66c>)
 8007d38:	4910      	ldr	r1, [pc, #64]	; (8007d7c <HAL_RCC_OscConfig+0x68c>)
 8007d3a:	400a      	ands	r2, r1
 8007d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3e:	f7fd fde9 	bl	8005914 <HAL_GetTick>
 8007d42:	0003      	movs	r3, r0
 8007d44:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007d46:	e01b      	b.n	8007d80 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d48:	f7fd fde4 	bl	8005914 <HAL_GetTick>
 8007d4c:	0002      	movs	r2, r0
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d914      	bls.n	8007d80 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e083      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	40021000 	.word	0x40021000
 8007d60:	fffffeff 	.word	0xfffffeff
 8007d64:	40007000 	.word	0x40007000
 8007d68:	fffffbff 	.word	0xfffffbff
 8007d6c:	00001388 	.word	0x00001388
 8007d70:	efffffff 	.word	0xefffffff
 8007d74:	40010000 	.word	0x40010000
 8007d78:	ffffdfff 	.word	0xffffdfff
 8007d7c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007d80:	4b3a      	ldr	r3, [pc, #232]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	2380      	movs	r3, #128	; 0x80
 8007d86:	049b      	lsls	r3, r3, #18
 8007d88:	4013      	ands	r3, r2
 8007d8a:	d1dd      	bne.n	8007d48 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d8c:	4b37      	ldr	r3, [pc, #220]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	4a37      	ldr	r2, [pc, #220]	; (8007e70 <HAL_RCC_OscConfig+0x780>)
 8007d92:	4013      	ands	r3, r2
 8007d94:	0019      	movs	r1, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da4:	431a      	orrs	r2, r3
 8007da6:	4b31      	ldr	r3, [pc, #196]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007da8:	430a      	orrs	r2, r1
 8007daa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dac:	4b2f      	ldr	r3, [pc, #188]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	4b2e      	ldr	r3, [pc, #184]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007db2:	2180      	movs	r1, #128	; 0x80
 8007db4:	0449      	lsls	r1, r1, #17
 8007db6:	430a      	orrs	r2, r1
 8007db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dba:	f7fd fdab 	bl	8005914 <HAL_GetTick>
 8007dbe:	0003      	movs	r3, r0
 8007dc0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dc4:	f7fd fda6 	bl	8005914 <HAL_GetTick>
 8007dc8:	0002      	movs	r2, r0
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e045      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007dd6:	4b25      	ldr	r3, [pc, #148]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	2380      	movs	r3, #128	; 0x80
 8007ddc:	049b      	lsls	r3, r3, #18
 8007dde:	4013      	ands	r3, r2
 8007de0:	d0f0      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x6d4>
 8007de2:	e03d      	b.n	8007e60 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007de4:	4b21      	ldr	r3, [pc, #132]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	4b20      	ldr	r3, [pc, #128]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007dea:	4922      	ldr	r1, [pc, #136]	; (8007e74 <HAL_RCC_OscConfig+0x784>)
 8007dec:	400a      	ands	r2, r1
 8007dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df0:	f7fd fd90 	bl	8005914 <HAL_GetTick>
 8007df4:	0003      	movs	r3, r0
 8007df6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007df8:	e008      	b.n	8007e0c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dfa:	f7fd fd8b 	bl	8005914 <HAL_GetTick>
 8007dfe:	0002      	movs	r2, r0
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e02a      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007e0c:	4b17      	ldr	r3, [pc, #92]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	2380      	movs	r3, #128	; 0x80
 8007e12:	049b      	lsls	r3, r3, #18
 8007e14:	4013      	ands	r3, r2
 8007e16:	d1f0      	bne.n	8007dfa <HAL_RCC_OscConfig+0x70a>
 8007e18:	e022      	b.n	8007e60 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e01d      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007e26:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <HAL_RCC_OscConfig+0x77c>)
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	2380      	movs	r3, #128	; 0x80
 8007e30:	025b      	lsls	r3, r3, #9
 8007e32:	401a      	ands	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d10f      	bne.n	8007e5c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007e3c:	69fa      	ldr	r2, [r7, #28]
 8007e3e:	23f0      	movs	r3, #240	; 0xf0
 8007e40:	039b      	lsls	r3, r3, #14
 8007e42:	401a      	ands	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d107      	bne.n	8007e5c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	23c0      	movs	r3, #192	; 0xc0
 8007e50:	041b      	lsls	r3, r3, #16
 8007e52:	401a      	ands	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d001      	beq.n	8007e60 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e000      	b.n	8007e62 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	0018      	movs	r0, r3
 8007e64:	46bd      	mov	sp, r7
 8007e66:	b00a      	add	sp, #40	; 0x28
 8007e68:	bdb0      	pop	{r4, r5, r7, pc}
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	40021000 	.word	0x40021000
 8007e70:	ff02ffff 	.word	0xff02ffff
 8007e74:	feffffff 	.word	0xfeffffff

08007e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e78:	b5b0      	push	{r4, r5, r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e128      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e8c:	4b96      	ldr	r3, [pc, #600]	; (80080e8 <HAL_RCC_ClockConfig+0x270>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2201      	movs	r2, #1
 8007e92:	4013      	ands	r3, r2
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d91e      	bls.n	8007ed8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9a:	4b93      	ldr	r3, [pc, #588]	; (80080e8 <HAL_RCC_ClockConfig+0x270>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4393      	bics	r3, r2
 8007ea2:	0019      	movs	r1, r3
 8007ea4:	4b90      	ldr	r3, [pc, #576]	; (80080e8 <HAL_RCC_ClockConfig+0x270>)
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007eac:	f7fd fd32 	bl	8005914 <HAL_GetTick>
 8007eb0:	0003      	movs	r3, r0
 8007eb2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb4:	e009      	b.n	8007eca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eb6:	f7fd fd2d 	bl	8005914 <HAL_GetTick>
 8007eba:	0002      	movs	r2, r0
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	4a8a      	ldr	r2, [pc, #552]	; (80080ec <HAL_RCC_ClockConfig+0x274>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e109      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eca:	4b87      	ldr	r3, [pc, #540]	; (80080e8 <HAL_RCC_ClockConfig+0x270>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d1ee      	bne.n	8007eb6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2202      	movs	r2, #2
 8007ede:	4013      	ands	r3, r2
 8007ee0:	d009      	beq.n	8007ef6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ee2:	4b83      	ldr	r3, [pc, #524]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	22f0      	movs	r2, #240	; 0xf0
 8007ee8:	4393      	bics	r3, r2
 8007eea:	0019      	movs	r1, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	4b7f      	ldr	r3, [pc, #508]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2201      	movs	r2, #1
 8007efc:	4013      	ands	r3, r2
 8007efe:	d100      	bne.n	8007f02 <HAL_RCC_ClockConfig+0x8a>
 8007f00:	e089      	b.n	8008016 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d107      	bne.n	8007f1a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f0a:	4b79      	ldr	r3, [pc, #484]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	2380      	movs	r3, #128	; 0x80
 8007f10:	029b      	lsls	r3, r3, #10
 8007f12:	4013      	ands	r3, r2
 8007f14:	d120      	bne.n	8007f58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e0e1      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d107      	bne.n	8007f32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f22:	4b73      	ldr	r3, [pc, #460]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	2380      	movs	r3, #128	; 0x80
 8007f28:	049b      	lsls	r3, r3, #18
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	d114      	bne.n	8007f58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e0d5      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d106      	bne.n	8007f48 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f3a:	4b6d      	ldr	r3, [pc, #436]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2204      	movs	r2, #4
 8007f40:	4013      	ands	r3, r2
 8007f42:	d109      	bne.n	8007f58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e0ca      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007f48:	4b69      	ldr	r3, [pc, #420]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	2380      	movs	r3, #128	; 0x80
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4013      	ands	r3, r2
 8007f52:	d101      	bne.n	8007f58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e0c2      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f58:	4b65      	ldr	r3, [pc, #404]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	4393      	bics	r3, r2
 8007f60:	0019      	movs	r1, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	4b62      	ldr	r3, [pc, #392]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f6c:	f7fd fcd2 	bl	8005914 <HAL_GetTick>
 8007f70:	0003      	movs	r3, r0
 8007f72:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d111      	bne.n	8007fa0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f7c:	e009      	b.n	8007f92 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f7e:	f7fd fcc9 	bl	8005914 <HAL_GetTick>
 8007f82:	0002      	movs	r2, r0
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	4a58      	ldr	r2, [pc, #352]	; (80080ec <HAL_RCC_ClockConfig+0x274>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e0a5      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f92:	4b57      	ldr	r3, [pc, #348]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	220c      	movs	r2, #12
 8007f98:	4013      	ands	r3, r2
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	d1ef      	bne.n	8007f7e <HAL_RCC_ClockConfig+0x106>
 8007f9e:	e03a      	b.n	8008016 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d111      	bne.n	8007fcc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fa8:	e009      	b.n	8007fbe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007faa:	f7fd fcb3 	bl	8005914 <HAL_GetTick>
 8007fae:	0002      	movs	r2, r0
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	4a4d      	ldr	r2, [pc, #308]	; (80080ec <HAL_RCC_ClockConfig+0x274>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e08f      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fbe:	4b4c      	ldr	r3, [pc, #304]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	220c      	movs	r2, #12
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	2b0c      	cmp	r3, #12
 8007fc8:	d1ef      	bne.n	8007faa <HAL_RCC_ClockConfig+0x132>
 8007fca:	e024      	b.n	8008016 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d11b      	bne.n	800800c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fd4:	e009      	b.n	8007fea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fd6:	f7fd fc9d 	bl	8005914 <HAL_GetTick>
 8007fda:	0002      	movs	r2, r0
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	4a42      	ldr	r2, [pc, #264]	; (80080ec <HAL_RCC_ClockConfig+0x274>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d901      	bls.n	8007fea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e079      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fea:	4b41      	ldr	r3, [pc, #260]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	220c      	movs	r2, #12
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d1ef      	bne.n	8007fd6 <HAL_RCC_ClockConfig+0x15e>
 8007ff6:	e00e      	b.n	8008016 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ff8:	f7fd fc8c 	bl	8005914 <HAL_GetTick>
 8007ffc:	0002      	movs	r2, r0
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	4a3a      	ldr	r2, [pc, #232]	; (80080ec <HAL_RCC_ClockConfig+0x274>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d901      	bls.n	800800c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e068      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800800c:	4b38      	ldr	r3, [pc, #224]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	220c      	movs	r2, #12
 8008012:	4013      	ands	r3, r2
 8008014:	d1f0      	bne.n	8007ff8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008016:	4b34      	ldr	r3, [pc, #208]	; (80080e8 <HAL_RCC_ClockConfig+0x270>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2201      	movs	r2, #1
 800801c:	4013      	ands	r3, r2
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d21e      	bcs.n	8008062 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008024:	4b30      	ldr	r3, [pc, #192]	; (80080e8 <HAL_RCC_ClockConfig+0x270>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2201      	movs	r2, #1
 800802a:	4393      	bics	r3, r2
 800802c:	0019      	movs	r1, r3
 800802e:	4b2e      	ldr	r3, [pc, #184]	; (80080e8 <HAL_RCC_ClockConfig+0x270>)
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008036:	f7fd fc6d 	bl	8005914 <HAL_GetTick>
 800803a:	0003      	movs	r3, r0
 800803c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800803e:	e009      	b.n	8008054 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008040:	f7fd fc68 	bl	8005914 <HAL_GetTick>
 8008044:	0002      	movs	r2, r0
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	4a28      	ldr	r2, [pc, #160]	; (80080ec <HAL_RCC_ClockConfig+0x274>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d901      	bls.n	8008054 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e044      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008054:	4b24      	ldr	r3, [pc, #144]	; (80080e8 <HAL_RCC_ClockConfig+0x270>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2201      	movs	r2, #1
 800805a:	4013      	ands	r3, r2
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d1ee      	bne.n	8008040 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2204      	movs	r2, #4
 8008068:	4013      	ands	r3, r2
 800806a:	d009      	beq.n	8008080 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800806c:	4b20      	ldr	r3, [pc, #128]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	4a20      	ldr	r2, [pc, #128]	; (80080f4 <HAL_RCC_ClockConfig+0x27c>)
 8008072:	4013      	ands	r3, r2
 8008074:	0019      	movs	r1, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	4b1d      	ldr	r3, [pc, #116]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 800807c:	430a      	orrs	r2, r1
 800807e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2208      	movs	r2, #8
 8008086:	4013      	ands	r3, r2
 8008088:	d00a      	beq.n	80080a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800808a:	4b19      	ldr	r3, [pc, #100]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	4a1a      	ldr	r2, [pc, #104]	; (80080f8 <HAL_RCC_ClockConfig+0x280>)
 8008090:	4013      	ands	r3, r2
 8008092:	0019      	movs	r1, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	00da      	lsls	r2, r3, #3
 800809a:	4b15      	ldr	r3, [pc, #84]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 800809c:	430a      	orrs	r2, r1
 800809e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080a0:	f000 f832 	bl	8008108 <HAL_RCC_GetSysClockFreq>
 80080a4:	0001      	movs	r1, r0
 80080a6:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <HAL_RCC_ClockConfig+0x278>)
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	091b      	lsrs	r3, r3, #4
 80080ac:	220f      	movs	r2, #15
 80080ae:	4013      	ands	r3, r2
 80080b0:	4a12      	ldr	r2, [pc, #72]	; (80080fc <HAL_RCC_ClockConfig+0x284>)
 80080b2:	5cd3      	ldrb	r3, [r2, r3]
 80080b4:	000a      	movs	r2, r1
 80080b6:	40da      	lsrs	r2, r3
 80080b8:	4b11      	ldr	r3, [pc, #68]	; (8008100 <HAL_RCC_ClockConfig+0x288>)
 80080ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80080bc:	4b11      	ldr	r3, [pc, #68]	; (8008104 <HAL_RCC_ClockConfig+0x28c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	250b      	movs	r5, #11
 80080c2:	197c      	adds	r4, r7, r5
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7fd fbdf 	bl	8005888 <HAL_InitTick>
 80080ca:	0003      	movs	r3, r0
 80080cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80080ce:	197b      	adds	r3, r7, r5
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80080d6:	197b      	adds	r3, r7, r5
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	e000      	b.n	80080de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	0018      	movs	r0, r3
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b004      	add	sp, #16
 80080e4:	bdb0      	pop	{r4, r5, r7, pc}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	40022000 	.word	0x40022000
 80080ec:	00001388 	.word	0x00001388
 80080f0:	40021000 	.word	0x40021000
 80080f4:	fffff8ff 	.word	0xfffff8ff
 80080f8:	ffffc7ff 	.word	0xffffc7ff
 80080fc:	0800b2bc 	.word	0x0800b2bc
 8008100:	20000020 	.word	0x20000020
 8008104:	20000024 	.word	0x20000024

08008108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008108:	b5b0      	push	{r4, r5, r7, lr}
 800810a:	b08e      	sub	sp, #56	; 0x38
 800810c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800810e:	4b4c      	ldr	r3, [pc, #304]	; (8008240 <HAL_RCC_GetSysClockFreq+0x138>)
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008116:	230c      	movs	r3, #12
 8008118:	4013      	ands	r3, r2
 800811a:	2b0c      	cmp	r3, #12
 800811c:	d014      	beq.n	8008148 <HAL_RCC_GetSysClockFreq+0x40>
 800811e:	d900      	bls.n	8008122 <HAL_RCC_GetSysClockFreq+0x1a>
 8008120:	e07b      	b.n	800821a <HAL_RCC_GetSysClockFreq+0x112>
 8008122:	2b04      	cmp	r3, #4
 8008124:	d002      	beq.n	800812c <HAL_RCC_GetSysClockFreq+0x24>
 8008126:	2b08      	cmp	r3, #8
 8008128:	d00b      	beq.n	8008142 <HAL_RCC_GetSysClockFreq+0x3a>
 800812a:	e076      	b.n	800821a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800812c:	4b44      	ldr	r3, [pc, #272]	; (8008240 <HAL_RCC_GetSysClockFreq+0x138>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2210      	movs	r2, #16
 8008132:	4013      	ands	r3, r2
 8008134:	d002      	beq.n	800813c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008136:	4b43      	ldr	r3, [pc, #268]	; (8008244 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008138:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800813a:	e07c      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800813c:	4b42      	ldr	r3, [pc, #264]	; (8008248 <HAL_RCC_GetSysClockFreq+0x140>)
 800813e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008140:	e079      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008142:	4b42      	ldr	r3, [pc, #264]	; (800824c <HAL_RCC_GetSysClockFreq+0x144>)
 8008144:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008146:	e076      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	0c9a      	lsrs	r2, r3, #18
 800814c:	230f      	movs	r3, #15
 800814e:	401a      	ands	r2, r3
 8008150:	4b3f      	ldr	r3, [pc, #252]	; (8008250 <HAL_RCC_GetSysClockFreq+0x148>)
 8008152:	5c9b      	ldrb	r3, [r3, r2]
 8008154:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	0d9a      	lsrs	r2, r3, #22
 800815a:	2303      	movs	r3, #3
 800815c:	4013      	ands	r3, r2
 800815e:	3301      	adds	r3, #1
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008162:	4b37      	ldr	r3, [pc, #220]	; (8008240 <HAL_RCC_GetSysClockFreq+0x138>)
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	2380      	movs	r3, #128	; 0x80
 8008168:	025b      	lsls	r3, r3, #9
 800816a:	4013      	ands	r3, r2
 800816c:	d01a      	beq.n	80081a4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	2300      	movs	r3, #0
 8008174:	61fb      	str	r3, [r7, #28]
 8008176:	4a35      	ldr	r2, [pc, #212]	; (800824c <HAL_RCC_GetSysClockFreq+0x144>)
 8008178:	2300      	movs	r3, #0
 800817a:	69b8      	ldr	r0, [r7, #24]
 800817c:	69f9      	ldr	r1, [r7, #28]
 800817e:	f7f8 f86f 	bl	8000260 <__aeabi_lmul>
 8008182:	0002      	movs	r2, r0
 8008184:	000b      	movs	r3, r1
 8008186:	0010      	movs	r0, r2
 8008188:	0019      	movs	r1, r3
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	2300      	movs	r3, #0
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f7f8 f843 	bl	8000220 <__aeabi_uldivmod>
 800819a:	0002      	movs	r2, r0
 800819c:	000b      	movs	r3, r1
 800819e:	0013      	movs	r3, r2
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
 80081a2:	e037      	b.n	8008214 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80081a4:	4b26      	ldr	r3, [pc, #152]	; (8008240 <HAL_RCC_GetSysClockFreq+0x138>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2210      	movs	r2, #16
 80081aa:	4013      	ands	r3, r2
 80081ac:	d01a      	beq.n	80081e4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	4a23      	ldr	r2, [pc, #140]	; (8008244 <HAL_RCC_GetSysClockFreq+0x13c>)
 80081b8:	2300      	movs	r3, #0
 80081ba:	68b8      	ldr	r0, [r7, #8]
 80081bc:	68f9      	ldr	r1, [r7, #12]
 80081be:	f7f8 f84f 	bl	8000260 <__aeabi_lmul>
 80081c2:	0002      	movs	r2, r0
 80081c4:	000b      	movs	r3, r1
 80081c6:	0010      	movs	r0, r2
 80081c8:	0019      	movs	r1, r3
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	603b      	str	r3, [r7, #0]
 80081ce:	2300      	movs	r3, #0
 80081d0:	607b      	str	r3, [r7, #4]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f7f8 f823 	bl	8000220 <__aeabi_uldivmod>
 80081da:	0002      	movs	r2, r0
 80081dc:	000b      	movs	r3, r1
 80081de:	0013      	movs	r3, r2
 80081e0:	637b      	str	r3, [r7, #52]	; 0x34
 80081e2:	e017      	b.n	8008214 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	0018      	movs	r0, r3
 80081e8:	2300      	movs	r3, #0
 80081ea:	0019      	movs	r1, r3
 80081ec:	4a16      	ldr	r2, [pc, #88]	; (8008248 <HAL_RCC_GetSysClockFreq+0x140>)
 80081ee:	2300      	movs	r3, #0
 80081f0:	f7f8 f836 	bl	8000260 <__aeabi_lmul>
 80081f4:	0002      	movs	r2, r0
 80081f6:	000b      	movs	r3, r1
 80081f8:	0010      	movs	r0, r2
 80081fa:	0019      	movs	r1, r3
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	001c      	movs	r4, r3
 8008200:	2300      	movs	r3, #0
 8008202:	001d      	movs	r5, r3
 8008204:	0022      	movs	r2, r4
 8008206:	002b      	movs	r3, r5
 8008208:	f7f8 f80a 	bl	8000220 <__aeabi_uldivmod>
 800820c:	0002      	movs	r2, r0
 800820e:	000b      	movs	r3, r1
 8008210:	0013      	movs	r3, r2
 8008212:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8008214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008216:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008218:	e00d      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800821a:	4b09      	ldr	r3, [pc, #36]	; (8008240 <HAL_RCC_GetSysClockFreq+0x138>)
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	0b5b      	lsrs	r3, r3, #13
 8008220:	2207      	movs	r2, #7
 8008222:	4013      	ands	r3, r2
 8008224:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	3301      	adds	r3, #1
 800822a:	2280      	movs	r2, #128	; 0x80
 800822c:	0212      	lsls	r2, r2, #8
 800822e:	409a      	lsls	r2, r3
 8008230:	0013      	movs	r3, r2
 8008232:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008234:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008238:	0018      	movs	r0, r3
 800823a:	46bd      	mov	sp, r7
 800823c:	b00e      	add	sp, #56	; 0x38
 800823e:	bdb0      	pop	{r4, r5, r7, pc}
 8008240:	40021000 	.word	0x40021000
 8008244:	003d0900 	.word	0x003d0900
 8008248:	00f42400 	.word	0x00f42400
 800824c:	007a1200 	.word	0x007a1200
 8008250:	0800b2d4 	.word	0x0800b2d4

08008254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008258:	4b02      	ldr	r3, [pc, #8]	; (8008264 <HAL_RCC_GetHCLKFreq+0x10>)
 800825a:	681b      	ldr	r3, [r3, #0]
}
 800825c:	0018      	movs	r0, r3
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	20000020 	.word	0x20000020

08008268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800826c:	f7ff fff2 	bl	8008254 <HAL_RCC_GetHCLKFreq>
 8008270:	0001      	movs	r1, r0
 8008272:	4b06      	ldr	r3, [pc, #24]	; (800828c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	0a1b      	lsrs	r3, r3, #8
 8008278:	2207      	movs	r2, #7
 800827a:	4013      	ands	r3, r2
 800827c:	4a04      	ldr	r2, [pc, #16]	; (8008290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800827e:	5cd3      	ldrb	r3, [r2, r3]
 8008280:	40d9      	lsrs	r1, r3
 8008282:	000b      	movs	r3, r1
}
 8008284:	0018      	movs	r0, r3
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	46c0      	nop			; (mov r8, r8)
 800828c:	40021000 	.word	0x40021000
 8008290:	0800b2cc 	.word	0x0800b2cc

08008294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008298:	f7ff ffdc 	bl	8008254 <HAL_RCC_GetHCLKFreq>
 800829c:	0001      	movs	r1, r0
 800829e:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	0adb      	lsrs	r3, r3, #11
 80082a4:	2207      	movs	r2, #7
 80082a6:	4013      	ands	r3, r2
 80082a8:	4a04      	ldr	r2, [pc, #16]	; (80082bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80082aa:	5cd3      	ldrb	r3, [r2, r3]
 80082ac:	40d9      	lsrs	r1, r3
 80082ae:	000b      	movs	r3, r1
}
 80082b0:	0018      	movs	r0, r3
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	40021000 	.word	0x40021000
 80082bc:	0800b2cc 	.word	0x0800b2cc

080082c0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80082c8:	2317      	movs	r3, #23
 80082ca:	18fb      	adds	r3, r7, r3
 80082cc:	2200      	movs	r2, #0
 80082ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2220      	movs	r2, #32
 80082d6:	4013      	ands	r3, r2
 80082d8:	d106      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	2380      	movs	r3, #128	; 0x80
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	4013      	ands	r3, r2
 80082e4:	d100      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80082e6:	e0d9      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082e8:	4b9c      	ldr	r3, [pc, #624]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80082ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ec:	2380      	movs	r3, #128	; 0x80
 80082ee:	055b      	lsls	r3, r3, #21
 80082f0:	4013      	ands	r3, r2
 80082f2:	d10a      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082f4:	4b99      	ldr	r3, [pc, #612]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80082f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f8:	4b98      	ldr	r3, [pc, #608]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80082fa:	2180      	movs	r1, #128	; 0x80
 80082fc:	0549      	lsls	r1, r1, #21
 80082fe:	430a      	orrs	r2, r1
 8008300:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008302:	2317      	movs	r3, #23
 8008304:	18fb      	adds	r3, r7, r3
 8008306:	2201      	movs	r2, #1
 8008308:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800830a:	4b95      	ldr	r3, [pc, #596]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	2380      	movs	r3, #128	; 0x80
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	4013      	ands	r3, r2
 8008314:	d11a      	bne.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008316:	4b92      	ldr	r3, [pc, #584]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	4b91      	ldr	r3, [pc, #580]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800831c:	2180      	movs	r1, #128	; 0x80
 800831e:	0049      	lsls	r1, r1, #1
 8008320:	430a      	orrs	r2, r1
 8008322:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008324:	f7fd faf6 	bl	8005914 <HAL_GetTick>
 8008328:	0003      	movs	r3, r0
 800832a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800832c:	e008      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800832e:	f7fd faf1 	bl	8005914 <HAL_GetTick>
 8008332:	0002      	movs	r2, r0
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b64      	cmp	r3, #100	; 0x64
 800833a:	d901      	bls.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e108      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008340:	4b87      	ldr	r3, [pc, #540]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	2380      	movs	r3, #128	; 0x80
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	4013      	ands	r3, r2
 800834a:	d0f0      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800834c:	4b83      	ldr	r3, [pc, #524]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	23c0      	movs	r3, #192	; 0xc0
 8008352:	039b      	lsls	r3, r3, #14
 8008354:	4013      	ands	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	23c0      	movs	r3, #192	; 0xc0
 800835e:	039b      	lsls	r3, r3, #14
 8008360:	4013      	ands	r3, r2
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	429a      	cmp	r2, r3
 8008366:	d107      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	23c0      	movs	r3, #192	; 0xc0
 800836e:	039b      	lsls	r3, r3, #14
 8008370:	4013      	ands	r3, r2
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	429a      	cmp	r2, r3
 8008376:	d013      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	23c0      	movs	r3, #192	; 0xc0
 800837e:	029b      	lsls	r3, r3, #10
 8008380:	401a      	ands	r2, r3
 8008382:	23c0      	movs	r3, #192	; 0xc0
 8008384:	029b      	lsls	r3, r3, #10
 8008386:	429a      	cmp	r2, r3
 8008388:	d10a      	bne.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800838a:	4b74      	ldr	r3, [pc, #464]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	2380      	movs	r3, #128	; 0x80
 8008390:	029b      	lsls	r3, r3, #10
 8008392:	401a      	ands	r2, r3
 8008394:	2380      	movs	r3, #128	; 0x80
 8008396:	029b      	lsls	r3, r3, #10
 8008398:	429a      	cmp	r2, r3
 800839a:	d101      	bne.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e0d8      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80083a0:	4b6e      	ldr	r3, [pc, #440]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80083a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083a4:	23c0      	movs	r3, #192	; 0xc0
 80083a6:	029b      	lsls	r3, r3, #10
 80083a8:	4013      	ands	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d049      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	23c0      	movs	r3, #192	; 0xc0
 80083b8:	029b      	lsls	r3, r3, #10
 80083ba:	4013      	ands	r3, r2
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d004      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2220      	movs	r2, #32
 80083c8:	4013      	ands	r3, r2
 80083ca:	d10d      	bne.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	23c0      	movs	r3, #192	; 0xc0
 80083d2:	029b      	lsls	r3, r3, #10
 80083d4:	4013      	ands	r3, r2
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d034      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	4013      	ands	r3, r2
 80083e6:	d02e      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80083e8:	4b5c      	ldr	r3, [pc, #368]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80083ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ec:	4a5d      	ldr	r2, [pc, #372]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083f2:	4b5a      	ldr	r3, [pc, #360]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80083f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083f6:	4b59      	ldr	r3, [pc, #356]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80083f8:	2180      	movs	r1, #128	; 0x80
 80083fa:	0309      	lsls	r1, r1, #12
 80083fc:	430a      	orrs	r2, r1
 80083fe:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008400:	4b56      	ldr	r3, [pc, #344]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008402:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008404:	4b55      	ldr	r3, [pc, #340]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008406:	4958      	ldr	r1, [pc, #352]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008408:	400a      	ands	r2, r1
 800840a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800840c:	4b53      	ldr	r3, [pc, #332]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	2380      	movs	r3, #128	; 0x80
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	4013      	ands	r3, r2
 800841a:	d014      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800841c:	f7fd fa7a 	bl	8005914 <HAL_GetTick>
 8008420:	0003      	movs	r3, r0
 8008422:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008424:	e009      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008426:	f7fd fa75 	bl	8005914 <HAL_GetTick>
 800842a:	0002      	movs	r2, r0
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	4a4e      	ldr	r2, [pc, #312]	; (800856c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d901      	bls.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e08b      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800843a:	4b48      	ldr	r3, [pc, #288]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800843c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800843e:	2380      	movs	r3, #128	; 0x80
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4013      	ands	r3, r2
 8008444:	d0ef      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	23c0      	movs	r3, #192	; 0xc0
 800844c:	029b      	lsls	r3, r3, #10
 800844e:	401a      	ands	r2, r3
 8008450:	23c0      	movs	r3, #192	; 0xc0
 8008452:	029b      	lsls	r3, r3, #10
 8008454:	429a      	cmp	r2, r3
 8008456:	d10c      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008458:	4b40      	ldr	r3, [pc, #256]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a44      	ldr	r2, [pc, #272]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800845e:	4013      	ands	r3, r2
 8008460:	0019      	movs	r1, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	23c0      	movs	r3, #192	; 0xc0
 8008468:	039b      	lsls	r3, r3, #14
 800846a:	401a      	ands	r2, r3
 800846c:	4b3b      	ldr	r3, [pc, #236]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800846e:	430a      	orrs	r2, r1
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	4b3a      	ldr	r3, [pc, #232]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008474:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	23c0      	movs	r3, #192	; 0xc0
 800847c:	029b      	lsls	r3, r3, #10
 800847e:	401a      	ands	r2, r3
 8008480:	4b36      	ldr	r3, [pc, #216]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008482:	430a      	orrs	r2, r1
 8008484:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008486:	2317      	movs	r3, #23
 8008488:	18fb      	adds	r3, r7, r3
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d105      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008490:	4b32      	ldr	r3, [pc, #200]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008494:	4b31      	ldr	r3, [pc, #196]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008496:	4937      	ldr	r1, [pc, #220]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008498:	400a      	ands	r2, r1
 800849a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2201      	movs	r2, #1
 80084a2:	4013      	ands	r3, r2
 80084a4:	d009      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084a6:	4b2d      	ldr	r3, [pc, #180]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80084a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084aa:	2203      	movs	r2, #3
 80084ac:	4393      	bics	r3, r2
 80084ae:	0019      	movs	r1, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	4b29      	ldr	r3, [pc, #164]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80084b6:	430a      	orrs	r2, r1
 80084b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2202      	movs	r2, #2
 80084c0:	4013      	ands	r3, r2
 80084c2:	d009      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084c4:	4b25      	ldr	r3, [pc, #148]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80084c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c8:	220c      	movs	r2, #12
 80084ca:	4393      	bics	r3, r2
 80084cc:	0019      	movs	r1, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691a      	ldr	r2, [r3, #16]
 80084d2:	4b22      	ldr	r3, [pc, #136]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80084d4:	430a      	orrs	r2, r1
 80084d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2204      	movs	r2, #4
 80084de:	4013      	ands	r3, r2
 80084e0:	d009      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084e2:	4b1e      	ldr	r3, [pc, #120]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80084e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e6:	4a24      	ldr	r2, [pc, #144]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80084e8:	4013      	ands	r3, r2
 80084ea:	0019      	movs	r1, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	695a      	ldr	r2, [r3, #20]
 80084f0:	4b1a      	ldr	r3, [pc, #104]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80084f2:	430a      	orrs	r2, r1
 80084f4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2208      	movs	r2, #8
 80084fc:	4013      	ands	r3, r2
 80084fe:	d009      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008500:	4b16      	ldr	r3, [pc, #88]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008504:	4a1d      	ldr	r2, [pc, #116]	; (800857c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008506:	4013      	ands	r3, r2
 8008508:	0019      	movs	r1, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	4b13      	ldr	r3, [pc, #76]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008510:	430a      	orrs	r2, r1
 8008512:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2240      	movs	r2, #64	; 0x40
 800851a:	4013      	ands	r3, r2
 800851c:	d009      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800851e:	4b0f      	ldr	r3, [pc, #60]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008522:	4a17      	ldr	r2, [pc, #92]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008524:	4013      	ands	r3, r2
 8008526:	0019      	movs	r1, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1a      	ldr	r2, [r3, #32]
 800852c:	4b0b      	ldr	r3, [pc, #44]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800852e:	430a      	orrs	r2, r1
 8008530:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2280      	movs	r2, #128	; 0x80
 8008538:	4013      	ands	r3, r2
 800853a:	d009      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800853c:	4b07      	ldr	r3, [pc, #28]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800853e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008540:	4a10      	ldr	r2, [pc, #64]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008542:	4013      	ands	r3, r2
 8008544:	0019      	movs	r1, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	69da      	ldr	r2, [r3, #28]
 800854a:	4b04      	ldr	r3, [pc, #16]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800854c:	430a      	orrs	r2, r1
 800854e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	0018      	movs	r0, r3
 8008554:	46bd      	mov	sp, r7
 8008556:	b006      	add	sp, #24
 8008558:	bd80      	pop	{r7, pc}
 800855a:	46c0      	nop			; (mov r8, r8)
 800855c:	40021000 	.word	0x40021000
 8008560:	40007000 	.word	0x40007000
 8008564:	fffcffff 	.word	0xfffcffff
 8008568:	fff7ffff 	.word	0xfff7ffff
 800856c:	00001388 	.word	0x00001388
 8008570:	ffcfffff 	.word	0xffcfffff
 8008574:	efffffff 	.word	0xefffffff
 8008578:	fffff3ff 	.word	0xfffff3ff
 800857c:	ffffcfff 	.word	0xffffcfff
 8008580:	fbffffff 	.word	0xfbffffff
 8008584:	fff3ffff 	.word	0xfff3ffff

08008588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e083      	b.n	80086a2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d109      	bne.n	80085b6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	2382      	movs	r3, #130	; 0x82
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d009      	beq.n	80085c2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	61da      	str	r2, [r3, #28]
 80085b4:	e005      	b.n	80085c2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2251      	movs	r2, #81	; 0x51
 80085cc:	5c9b      	ldrb	r3, [r3, r2]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d107      	bne.n	80085e4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2250      	movs	r2, #80	; 0x50
 80085d8:	2100      	movs	r1, #0
 80085da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	0018      	movs	r0, r3
 80085e0:	f7fc f9c4 	bl	800496c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2251      	movs	r2, #81	; 0x51
 80085e8:	2102      	movs	r1, #2
 80085ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2140      	movs	r1, #64	; 0x40
 80085f8:	438a      	bics	r2, r1
 80085fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	2382      	movs	r3, #130	; 0x82
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	401a      	ands	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6899      	ldr	r1, [r3, #8]
 800860a:	2384      	movs	r3, #132	; 0x84
 800860c:	021b      	lsls	r3, r3, #8
 800860e:	400b      	ands	r3, r1
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68d9      	ldr	r1, [r3, #12]
 8008616:	2380      	movs	r3, #128	; 0x80
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	400b      	ands	r3, r1
 800861c:	431a      	orrs	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	2102      	movs	r1, #2
 8008624:	400b      	ands	r3, r1
 8008626:	431a      	orrs	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	2101      	movs	r1, #1
 800862e:	400b      	ands	r3, r1
 8008630:	431a      	orrs	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6999      	ldr	r1, [r3, #24]
 8008636:	2380      	movs	r3, #128	; 0x80
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	400b      	ands	r3, r1
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	2138      	movs	r1, #56	; 0x38
 8008644:	400b      	ands	r3, r1
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	2180      	movs	r1, #128	; 0x80
 800864e:	400b      	ands	r3, r1
 8008650:	431a      	orrs	r2, r3
 8008652:	0011      	movs	r1, r2
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008658:	2380      	movs	r3, #128	; 0x80
 800865a:	019b      	lsls	r3, r3, #6
 800865c:	401a      	ands	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	0c1b      	lsrs	r3, r3, #16
 800866c:	2204      	movs	r2, #4
 800866e:	4013      	ands	r3, r2
 8008670:	0019      	movs	r1, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	2210      	movs	r2, #16
 8008678:	401a      	ands	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69da      	ldr	r2, [r3, #28]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4907      	ldr	r1, [pc, #28]	; (80086ac <HAL_SPI_Init+0x124>)
 800868e:	400a      	ands	r2, r1
 8008690:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2251      	movs	r2, #81	; 0x51
 800869c:	2101      	movs	r1, #1
 800869e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	0018      	movs	r0, r3
 80086a4:	46bd      	mov	sp, r7
 80086a6:	b002      	add	sp, #8
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	fffff7ff 	.word	0xfffff7ff

080086b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	1dbb      	adds	r3, r7, #6
 80086be:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086c0:	231f      	movs	r3, #31
 80086c2:	18fb      	adds	r3, r7, r3
 80086c4:	2200      	movs	r2, #0
 80086c6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2250      	movs	r2, #80	; 0x50
 80086cc:	5c9b      	ldrb	r3, [r3, r2]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d101      	bne.n	80086d6 <HAL_SPI_Transmit+0x26>
 80086d2:	2302      	movs	r3, #2
 80086d4:	e13e      	b.n	8008954 <HAL_SPI_Transmit+0x2a4>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2250      	movs	r2, #80	; 0x50
 80086da:	2101      	movs	r1, #1
 80086dc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086de:	f7fd f919 	bl	8005914 <HAL_GetTick>
 80086e2:	0003      	movs	r3, r0
 80086e4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80086e6:	2316      	movs	r3, #22
 80086e8:	18fb      	adds	r3, r7, r3
 80086ea:	1dba      	adds	r2, r7, #6
 80086ec:	8812      	ldrh	r2, [r2, #0]
 80086ee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2251      	movs	r2, #81	; 0x51
 80086f4:	5c9b      	ldrb	r3, [r3, r2]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d004      	beq.n	8008706 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80086fc:	231f      	movs	r3, #31
 80086fe:	18fb      	adds	r3, r7, r3
 8008700:	2202      	movs	r2, #2
 8008702:	701a      	strb	r2, [r3, #0]
    goto error;
 8008704:	e11b      	b.n	800893e <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <HAL_SPI_Transmit+0x64>
 800870c:	1dbb      	adds	r3, r7, #6
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d104      	bne.n	800871e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008714:	231f      	movs	r3, #31
 8008716:	18fb      	adds	r3, r7, r3
 8008718:	2201      	movs	r2, #1
 800871a:	701a      	strb	r2, [r3, #0]
    goto error;
 800871c:	e10f      	b.n	800893e <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2251      	movs	r2, #81	; 0x51
 8008722:	2103      	movs	r1, #3
 8008724:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	1dba      	adds	r2, r7, #6
 8008736:	8812      	ldrh	r2, [r2, #0]
 8008738:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	1dba      	adds	r2, r7, #6
 800873e:	8812      	ldrh	r2, [r2, #0]
 8008740:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	2380      	movs	r3, #128	; 0x80
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	429a      	cmp	r2, r3
 800876a:	d110      	bne.n	800878e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2140      	movs	r1, #64	; 0x40
 8008778:	438a      	bics	r2, r1
 800877a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2180      	movs	r1, #128	; 0x80
 8008788:	01c9      	lsls	r1, r1, #7
 800878a:	430a      	orrs	r2, r1
 800878c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2240      	movs	r2, #64	; 0x40
 8008796:	4013      	ands	r3, r2
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	d007      	beq.n	80087ac <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2140      	movs	r1, #64	; 0x40
 80087a8:	430a      	orrs	r2, r1
 80087aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	68da      	ldr	r2, [r3, #12]
 80087b0:	2380      	movs	r3, #128	; 0x80
 80087b2:	011b      	lsls	r3, r3, #4
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d14e      	bne.n	8008856 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d004      	beq.n	80087ca <HAL_SPI_Transmit+0x11a>
 80087c0:	2316      	movs	r3, #22
 80087c2:	18fb      	adds	r3, r7, r3
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d13f      	bne.n	800884a <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ce:	881a      	ldrh	r2, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	1c9a      	adds	r2, r3, #2
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80087ee:	e02c      	b.n	800884a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	2202      	movs	r2, #2
 80087f8:	4013      	ands	r3, r2
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d112      	bne.n	8008824 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	881a      	ldrh	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880e:	1c9a      	adds	r2, r3, #2
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008818:	b29b      	uxth	r3, r3
 800881a:	3b01      	subs	r3, #1
 800881c:	b29a      	uxth	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	86da      	strh	r2, [r3, #54]	; 0x36
 8008822:	e012      	b.n	800884a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008824:	f7fd f876 	bl	8005914 <HAL_GetTick>
 8008828:	0002      	movs	r2, r0
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	429a      	cmp	r2, r3
 8008832:	d802      	bhi.n	800883a <HAL_SPI_Transmit+0x18a>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	3301      	adds	r3, #1
 8008838:	d102      	bne.n	8008840 <HAL_SPI_Transmit+0x190>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8008840:	231f      	movs	r3, #31
 8008842:	18fb      	adds	r3, r7, r3
 8008844:	2203      	movs	r2, #3
 8008846:	701a      	strb	r2, [r3, #0]
          goto error;
 8008848:	e079      	b.n	800893e <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800884e:	b29b      	uxth	r3, r3
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1cd      	bne.n	80087f0 <HAL_SPI_Transmit+0x140>
 8008854:	e04f      	b.n	80088f6 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d004      	beq.n	8008868 <HAL_SPI_Transmit+0x1b8>
 800885e:	2316      	movs	r3, #22
 8008860:	18fb      	adds	r3, r7, r3
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d141      	bne.n	80088ec <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	330c      	adds	r3, #12
 8008872:	7812      	ldrb	r2, [r2, #0]
 8008874:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008884:	b29b      	uxth	r3, r3
 8008886:	3b01      	subs	r3, #1
 8008888:	b29a      	uxth	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800888e:	e02d      	b.n	80088ec <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	2202      	movs	r2, #2
 8008898:	4013      	ands	r3, r2
 800889a:	2b02      	cmp	r3, #2
 800889c:	d113      	bne.n	80088c6 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	330c      	adds	r3, #12
 80088a8:	7812      	ldrb	r2, [r2, #0]
 80088aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80088c4:	e012      	b.n	80088ec <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088c6:	f7fd f825 	bl	8005914 <HAL_GetTick>
 80088ca:	0002      	movs	r2, r0
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d802      	bhi.n	80088dc <HAL_SPI_Transmit+0x22c>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	3301      	adds	r3, #1
 80088da:	d102      	bne.n	80088e2 <HAL_SPI_Transmit+0x232>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d104      	bne.n	80088ec <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80088e2:	231f      	movs	r3, #31
 80088e4:	18fb      	adds	r3, r7, r3
 80088e6:	2203      	movs	r2, #3
 80088e8:	701a      	strb	r2, [r3, #0]
          goto error;
 80088ea:	e028      	b.n	800893e <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1cc      	bne.n	8008890 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	0018      	movs	r0, r3
 80088fe:	f000 fc07 	bl	8009110 <SPI_EndRxTxTransaction>
 8008902:	1e03      	subs	r3, r0, #0
 8008904:	d002      	beq.n	800890c <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2220      	movs	r2, #32
 800890a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008914:	2300      	movs	r3, #0
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	613b      	str	r3, [r7, #16]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	613b      	str	r3, [r7, #16]
 8008928:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892e:	2b00      	cmp	r3, #0
 8008930:	d004      	beq.n	800893c <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8008932:	231f      	movs	r3, #31
 8008934:	18fb      	adds	r3, r7, r3
 8008936:	2201      	movs	r2, #1
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e000      	b.n	800893e <HAL_SPI_Transmit+0x28e>
  }

error:
 800893c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2251      	movs	r2, #81	; 0x51
 8008942:	2101      	movs	r1, #1
 8008944:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2250      	movs	r2, #80	; 0x50
 800894a:	2100      	movs	r1, #0
 800894c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800894e:	231f      	movs	r3, #31
 8008950:	18fb      	adds	r3, r7, r3
 8008952:	781b      	ldrb	r3, [r3, #0]
}
 8008954:	0018      	movs	r0, r3
 8008956:	46bd      	mov	sp, r7
 8008958:	b008      	add	sp, #32
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800895c:	b590      	push	{r4, r7, lr}
 800895e:	b089      	sub	sp, #36	; 0x24
 8008960:	af02      	add	r7, sp, #8
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	1dbb      	adds	r3, r7, #6
 800896a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800896c:	2317      	movs	r3, #23
 800896e:	18fb      	adds	r3, r7, r3
 8008970:	2200      	movs	r2, #0
 8008972:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	2382      	movs	r3, #130	; 0x82
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	429a      	cmp	r2, r3
 800897e:	d113      	bne.n	80089a8 <HAL_SPI_Receive+0x4c>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10f      	bne.n	80089a8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2251      	movs	r2, #81	; 0x51
 800898c:	2104      	movs	r1, #4
 800898e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008990:	1dbb      	adds	r3, r7, #6
 8008992:	881c      	ldrh	r4, [r3, #0]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	0023      	movs	r3, r4
 80089a0:	f000 f902 	bl	8008ba8 <HAL_SPI_TransmitReceive>
 80089a4:	0003      	movs	r3, r0
 80089a6:	e0f9      	b.n	8008b9c <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2250      	movs	r2, #80	; 0x50
 80089ac:	5c9b      	ldrb	r3, [r3, r2]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d101      	bne.n	80089b6 <HAL_SPI_Receive+0x5a>
 80089b2:	2302      	movs	r3, #2
 80089b4:	e0f2      	b.n	8008b9c <HAL_SPI_Receive+0x240>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2250      	movs	r2, #80	; 0x50
 80089ba:	2101      	movs	r1, #1
 80089bc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089be:	f7fc ffa9 	bl	8005914 <HAL_GetTick>
 80089c2:	0003      	movs	r3, r0
 80089c4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2251      	movs	r2, #81	; 0x51
 80089ca:	5c9b      	ldrb	r3, [r3, r2]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d004      	beq.n	80089dc <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80089d2:	2317      	movs	r3, #23
 80089d4:	18fb      	adds	r3, r7, r3
 80089d6:	2202      	movs	r2, #2
 80089d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80089da:	e0d4      	b.n	8008b86 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <HAL_SPI_Receive+0x8e>
 80089e2:	1dbb      	adds	r3, r7, #6
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d104      	bne.n	80089f4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80089ea:	2317      	movs	r3, #23
 80089ec:	18fb      	adds	r3, r7, r3
 80089ee:	2201      	movs	r2, #1
 80089f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80089f2:	e0c8      	b.n	8008b86 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2251      	movs	r2, #81	; 0x51
 80089f8:	2104      	movs	r1, #4
 80089fa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1dba      	adds	r2, r7, #6
 8008a0c:	8812      	ldrh	r2, [r2, #0]
 8008a0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	1dba      	adds	r2, r7, #6
 8008a14:	8812      	ldrh	r2, [r2, #0]
 8008a16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	2380      	movs	r3, #128	; 0x80
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d10f      	bne.n	8008a62 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2140      	movs	r1, #64	; 0x40
 8008a4e:	438a      	bics	r2, r1
 8008a50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4951      	ldr	r1, [pc, #324]	; (8008ba4 <HAL_SPI_Receive+0x248>)
 8008a5e:	400a      	ands	r2, r1
 8008a60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2240      	movs	r2, #64	; 0x40
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	2b40      	cmp	r3, #64	; 0x40
 8008a6e:	d007      	beq.n	8008a80 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2140      	movs	r1, #64	; 0x40
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d164      	bne.n	8008b52 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008a88:	e02f      	b.n	8008aea <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2201      	movs	r2, #1
 8008a92:	4013      	ands	r3, r2
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d115      	bne.n	8008ac4 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	330c      	adds	r3, #12
 8008a9e:	001a      	movs	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	7812      	ldrb	r2, [r2, #0]
 8008aa6:	b2d2      	uxtb	r2, r2
 8008aa8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aae:	1c5a      	adds	r2, r3, #1
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	3b01      	subs	r3, #1
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ac2:	e012      	b.n	8008aea <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ac4:	f7fc ff26 	bl	8005914 <HAL_GetTick>
 8008ac8:	0002      	movs	r2, r0
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d802      	bhi.n	8008ada <HAL_SPI_Receive+0x17e>
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	d102      	bne.n	8008ae0 <HAL_SPI_Receive+0x184>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d104      	bne.n	8008aea <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8008ae0:	2317      	movs	r3, #23
 8008ae2:	18fb      	adds	r3, r7, r3
 8008ae4:	2203      	movs	r2, #3
 8008ae6:	701a      	strb	r2, [r3, #0]
          goto error;
 8008ae8:	e04d      	b.n	8008b86 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1ca      	bne.n	8008a8a <HAL_SPI_Receive+0x12e>
 8008af4:	e032      	b.n	8008b5c <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2201      	movs	r2, #1
 8008afe:	4013      	ands	r3, r2
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d113      	bne.n	8008b2c <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0e:	b292      	uxth	r2, r2
 8008b10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	1c9a      	adds	r2, r3, #2
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b2a:	e012      	b.n	8008b52 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b2c:	f7fc fef2 	bl	8005914 <HAL_GetTick>
 8008b30:	0002      	movs	r2, r0
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d802      	bhi.n	8008b42 <HAL_SPI_Receive+0x1e6>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	d102      	bne.n	8008b48 <HAL_SPI_Receive+0x1ec>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d104      	bne.n	8008b52 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8008b48:	2317      	movs	r3, #23
 8008b4a:	18fb      	adds	r3, r7, r3
 8008b4c:	2203      	movs	r2, #3
 8008b4e:	701a      	strb	r2, [r3, #0]
          goto error;
 8008b50:	e019      	b.n	8008b86 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1cc      	bne.n	8008af6 <HAL_SPI_Receive+0x19a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	0018      	movs	r0, r3
 8008b64:	f000 fa6a 	bl	800903c <SPI_EndRxTransaction>
 8008b68:	1e03      	subs	r3, r0, #0
 8008b6a:	d002      	beq.n	8008b72 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2220      	movs	r2, #32
 8008b70:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d004      	beq.n	8008b84 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8008b7a:	2317      	movs	r3, #23
 8008b7c:	18fb      	adds	r3, r7, r3
 8008b7e:	2201      	movs	r2, #1
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	e000      	b.n	8008b86 <HAL_SPI_Receive+0x22a>
  }

error :
 8008b84:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2251      	movs	r2, #81	; 0x51
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2250      	movs	r2, #80	; 0x50
 8008b92:	2100      	movs	r1, #0
 8008b94:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008b96:	2317      	movs	r3, #23
 8008b98:	18fb      	adds	r3, r7, r3
 8008b9a:	781b      	ldrb	r3, [r3, #0]
}
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	b007      	add	sp, #28
 8008ba2:	bd90      	pop	{r4, r7, pc}
 8008ba4:	ffffbfff 	.word	0xffffbfff

08008ba8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08c      	sub	sp, #48	; 0x30
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	001a      	movs	r2, r3
 8008bb6:	1cbb      	adds	r3, r7, #2
 8008bb8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008bbe:	232b      	movs	r3, #43	; 0x2b
 8008bc0:	18fb      	adds	r3, r7, r3
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2250      	movs	r2, #80	; 0x50
 8008bca:	5c9b      	ldrb	r3, [r3, r2]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_SPI_TransmitReceive+0x2c>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e1a0      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x36e>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2250      	movs	r2, #80	; 0x50
 8008bd8:	2101      	movs	r1, #1
 8008bda:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bdc:	f7fc fe9a 	bl	8005914 <HAL_GetTick>
 8008be0:	0003      	movs	r3, r0
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008be4:	2023      	movs	r0, #35	; 0x23
 8008be6:	183b      	adds	r3, r7, r0
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	2151      	movs	r1, #81	; 0x51
 8008bec:	5c52      	ldrb	r2, [r2, r1]
 8008bee:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008bf6:	231a      	movs	r3, #26
 8008bf8:	18fb      	adds	r3, r7, r3
 8008bfa:	1cba      	adds	r2, r7, #2
 8008bfc:	8812      	ldrh	r2, [r2, #0]
 8008bfe:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c00:	183b      	adds	r3, r7, r0
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d011      	beq.n	8008c2c <HAL_SPI_TransmitReceive+0x84>
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	2382      	movs	r3, #130	; 0x82
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d107      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d103      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x7a>
 8008c1a:	183b      	adds	r3, r7, r0
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d004      	beq.n	8008c2c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008c22:	232b      	movs	r3, #43	; 0x2b
 8008c24:	18fb      	adds	r3, r7, r3
 8008c26:	2202      	movs	r2, #2
 8008c28:	701a      	strb	r2, [r3, #0]
    goto error;
 8008c2a:	e169      	b.n	8008f00 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d006      	beq.n	8008c40 <HAL_SPI_TransmitReceive+0x98>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d003      	beq.n	8008c40 <HAL_SPI_TransmitReceive+0x98>
 8008c38:	1cbb      	adds	r3, r7, #2
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d104      	bne.n	8008c4a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008c40:	232b      	movs	r3, #43	; 0x2b
 8008c42:	18fb      	adds	r3, r7, r3
 8008c44:	2201      	movs	r2, #1
 8008c46:	701a      	strb	r2, [r3, #0]
    goto error;
 8008c48:	e15a      	b.n	8008f00 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2251      	movs	r2, #81	; 0x51
 8008c4e:	5c9b      	ldrb	r3, [r3, r2]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d003      	beq.n	8008c5e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2251      	movs	r2, #81	; 0x51
 8008c5a:	2105      	movs	r1, #5
 8008c5c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	1cba      	adds	r2, r7, #2
 8008c6e:	8812      	ldrh	r2, [r2, #0]
 8008c70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	1cba      	adds	r2, r7, #2
 8008c76:	8812      	ldrh	r2, [r2, #0]
 8008c78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	1cba      	adds	r2, r7, #2
 8008c84:	8812      	ldrh	r2, [r2, #0]
 8008c86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	1cba      	adds	r2, r7, #2
 8008c8c:	8812      	ldrh	r2, [r2, #0]
 8008c8e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2240      	movs	r2, #64	; 0x40
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	2b40      	cmp	r3, #64	; 0x40
 8008ca8:	d007      	beq.n	8008cba <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2140      	movs	r1, #64	; 0x40
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	2380      	movs	r3, #128	; 0x80
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d000      	beq.n	8008cc8 <HAL_SPI_TransmitReceive+0x120>
 8008cc6:	e07a      	b.n	8008dbe <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d004      	beq.n	8008cda <HAL_SPI_TransmitReceive+0x132>
 8008cd0:	231a      	movs	r3, #26
 8008cd2:	18fb      	adds	r3, r7, r3
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d166      	bne.n	8008da8 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	881a      	ldrh	r2, [r3, #0]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	1c9a      	adds	r2, r3, #2
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cfe:	e053      	b.n	8008da8 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2202      	movs	r2, #2
 8008d08:	4013      	ands	r3, r2
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d11b      	bne.n	8008d46 <HAL_SPI_TransmitReceive+0x19e>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d016      	beq.n	8008d46 <HAL_SPI_TransmitReceive+0x19e>
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d113      	bne.n	8008d46 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d22:	881a      	ldrh	r2, [r3, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2e:	1c9a      	adds	r2, r3, #2
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	4013      	ands	r3, r2
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d119      	bne.n	8008d88 <HAL_SPI_TransmitReceive+0x1e0>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d014      	beq.n	8008d88 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	b292      	uxth	r2, r2
 8008d6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	1c9a      	adds	r2, r3, #2
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d84:	2301      	movs	r3, #1
 8008d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d88:	f7fc fdc4 	bl	8005914 <HAL_GetTick>
 8008d8c:	0002      	movs	r2, r0
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d807      	bhi.n	8008da8 <HAL_SPI_TransmitReceive+0x200>
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	d004      	beq.n	8008da8 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8008d9e:	232b      	movs	r3, #43	; 0x2b
 8008da0:	18fb      	adds	r3, r7, r3
 8008da2:	2203      	movs	r2, #3
 8008da4:	701a      	strb	r2, [r3, #0]
        goto error;
 8008da6:	e0ab      	b.n	8008f00 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1a6      	bne.n	8008d00 <HAL_SPI_TransmitReceive+0x158>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1a1      	bne.n	8008d00 <HAL_SPI_TransmitReceive+0x158>
 8008dbc:	e07f      	b.n	8008ebe <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x22a>
 8008dc6:	231a      	movs	r3, #26
 8008dc8:	18fb      	adds	r3, r7, r3
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d000      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x22a>
 8008dd0:	e06b      	b.n	8008eaa <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	330c      	adds	r3, #12
 8008ddc:	7812      	ldrb	r2, [r2, #0]
 8008dde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	3b01      	subs	r3, #1
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008df8:	e057      	b.n	8008eaa <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2202      	movs	r2, #2
 8008e02:	4013      	ands	r3, r2
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d11c      	bne.n	8008e42 <HAL_SPI_TransmitReceive+0x29a>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d017      	beq.n	8008e42 <HAL_SPI_TransmitReceive+0x29a>
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d114      	bne.n	8008e42 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	330c      	adds	r3, #12
 8008e22:	7812      	ldrb	r2, [r2, #0]
 8008e24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d119      	bne.n	8008e84 <HAL_SPI_TransmitReceive+0x2dc>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d014      	beq.n	8008e84 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e80:	2301      	movs	r3, #1
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e84:	f7fc fd46 	bl	8005914 <HAL_GetTick>
 8008e88:	0002      	movs	r2, r0
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d802      	bhi.n	8008e9a <HAL_SPI_TransmitReceive+0x2f2>
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	3301      	adds	r3, #1
 8008e98:	d102      	bne.n	8008ea0 <HAL_SPI_TransmitReceive+0x2f8>
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d104      	bne.n	8008eaa <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8008ea0:	232b      	movs	r3, #43	; 0x2b
 8008ea2:	18fb      	adds	r3, r7, r3
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	701a      	strb	r2, [r3, #0]
        goto error;
 8008ea8:	e02a      	b.n	8008f00 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1a2      	bne.n	8008dfa <HAL_SPI_TransmitReceive+0x252>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d19d      	bne.n	8008dfa <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	f000 f923 	bl	8009110 <SPI_EndRxTxTransaction>
 8008eca:	1e03      	subs	r3, r0, #0
 8008ecc:	d007      	beq.n	8008ede <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8008ece:	232b      	movs	r3, #43	; 0x2b
 8008ed0:	18fb      	adds	r3, r7, r3
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008edc:	e010      	b.n	8008f00 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10b      	bne.n	8008efe <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	617b      	str	r3, [r7, #20]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	e000      	b.n	8008f00 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8008efe:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2251      	movs	r2, #81	; 0x51
 8008f04:	2101      	movs	r1, #1
 8008f06:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2250      	movs	r2, #80	; 0x50
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008f10:	232b      	movs	r3, #43	; 0x2b
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	781b      	ldrb	r3, [r3, #0]
}
 8008f16:	0018      	movs	r0, r3
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	b00c      	add	sp, #48	; 0x30
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b088      	sub	sp, #32
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	1dfb      	adds	r3, r7, #7
 8008f2e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f30:	f7fc fcf0 	bl	8005914 <HAL_GetTick>
 8008f34:	0002      	movs	r2, r0
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	1a9b      	subs	r3, r3, r2
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	18d3      	adds	r3, r2, r3
 8008f3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f40:	f7fc fce8 	bl	8005914 <HAL_GetTick>
 8008f44:	0003      	movs	r3, r0
 8008f46:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f48:	4b3a      	ldr	r3, [pc, #232]	; (8009034 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	015b      	lsls	r3, r3, #5
 8008f4e:	0d1b      	lsrs	r3, r3, #20
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	4353      	muls	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f56:	e058      	b.n	800900a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	d055      	beq.n	800900a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f5e:	f7fc fcd9 	bl	8005914 <HAL_GetTick>
 8008f62:	0002      	movs	r2, r0
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d902      	bls.n	8008f74 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d142      	bne.n	8008ffa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	21e0      	movs	r1, #224	; 0xe0
 8008f80:	438a      	bics	r2, r1
 8008f82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	2382      	movs	r3, #130	; 0x82
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d113      	bne.n	8008fb8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	2380      	movs	r3, #128	; 0x80
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d005      	beq.n	8008fa8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	689a      	ldr	r2, [r3, #8]
 8008fa0:	2380      	movs	r3, #128	; 0x80
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d107      	bne.n	8008fb8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2140      	movs	r1, #64	; 0x40
 8008fb4:	438a      	bics	r2, r1
 8008fb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fbc:	2380      	movs	r3, #128	; 0x80
 8008fbe:	019b      	lsls	r3, r3, #6
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d110      	bne.n	8008fe6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	491a      	ldr	r1, [pc, #104]	; (8009038 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008fd0:	400a      	ands	r2, r1
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2180      	movs	r1, #128	; 0x80
 8008fe0:	0189      	lsls	r1, r1, #6
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2251      	movs	r2, #81	; 0x51
 8008fea:	2101      	movs	r1, #1
 8008fec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2250      	movs	r2, #80	; 0x50
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e017      	b.n	800902a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	3b01      	subs	r3, #1
 8009008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	4013      	ands	r3, r2
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	425a      	negs	r2, r3
 800901a:	4153      	adcs	r3, r2
 800901c:	b2db      	uxtb	r3, r3
 800901e:	001a      	movs	r2, r3
 8009020:	1dfb      	adds	r3, r7, #7
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	429a      	cmp	r2, r3
 8009026:	d197      	bne.n	8008f58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	0018      	movs	r0, r3
 800902c:	46bd      	mov	sp, r7
 800902e:	b008      	add	sp, #32
 8009030:	bd80      	pop	{r7, pc}
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	20000020 	.word	0x20000020
 8009038:	ffffdfff 	.word	0xffffdfff

0800903c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af02      	add	r7, sp, #8
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	2382      	movs	r3, #130	; 0x82
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	429a      	cmp	r2, r3
 8009052:	d113      	bne.n	800907c <SPI_EndRxTransaction+0x40>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	2380      	movs	r3, #128	; 0x80
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	429a      	cmp	r2, r3
 800905e:	d005      	beq.n	800906c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	2380      	movs	r3, #128	; 0x80
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	429a      	cmp	r2, r3
 800906a:	d107      	bne.n	800907c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2140      	movs	r1, #64	; 0x40
 8009078:	438a      	bics	r2, r1
 800907a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	2382      	movs	r3, #130	; 0x82
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	429a      	cmp	r2, r3
 8009086:	d12b      	bne.n	80090e0 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	2380      	movs	r3, #128	; 0x80
 800908e:	00db      	lsls	r3, r3, #3
 8009090:	429a      	cmp	r2, r3
 8009092:	d012      	beq.n	80090ba <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	0013      	movs	r3, r2
 800909e:	2200      	movs	r2, #0
 80090a0:	2180      	movs	r1, #128	; 0x80
 80090a2:	f7ff ff3d 	bl	8008f20 <SPI_WaitFlagStateUntilTimeout>
 80090a6:	1e03      	subs	r3, r0, #0
 80090a8:	d02d      	beq.n	8009106 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ae:	2220      	movs	r2, #32
 80090b0:	431a      	orrs	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e026      	b.n	8009108 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	0013      	movs	r3, r2
 80090c4:	2200      	movs	r2, #0
 80090c6:	2101      	movs	r1, #1
 80090c8:	f7ff ff2a 	bl	8008f20 <SPI_WaitFlagStateUntilTimeout>
 80090cc:	1e03      	subs	r3, r0, #0
 80090ce:	d01a      	beq.n	8009106 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d4:	2220      	movs	r2, #32
 80090d6:	431a      	orrs	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e013      	b.n	8009108 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	0013      	movs	r3, r2
 80090ea:	2200      	movs	r2, #0
 80090ec:	2101      	movs	r1, #1
 80090ee:	f7ff ff17 	bl	8008f20 <SPI_WaitFlagStateUntilTimeout>
 80090f2:	1e03      	subs	r3, r0, #0
 80090f4:	d007      	beq.n	8009106 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fa:	2220      	movs	r2, #32
 80090fc:	431a      	orrs	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e000      	b.n	8009108 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	0018      	movs	r0, r3
 800910a:	46bd      	mov	sp, r7
 800910c:	b004      	add	sp, #16
 800910e:	bd80      	pop	{r7, pc}

08009110 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af02      	add	r7, sp, #8
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800911c:	4b1d      	ldr	r3, [pc, #116]	; (8009194 <SPI_EndRxTxTransaction+0x84>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	491d      	ldr	r1, [pc, #116]	; (8009198 <SPI_EndRxTxTransaction+0x88>)
 8009122:	0018      	movs	r0, r3
 8009124:	f7f6 fff0 	bl	8000108 <__udivsi3>
 8009128:	0003      	movs	r3, r0
 800912a:	001a      	movs	r2, r3
 800912c:	0013      	movs	r3, r2
 800912e:	015b      	lsls	r3, r3, #5
 8009130:	1a9b      	subs	r3, r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	189b      	adds	r3, r3, r2
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	2382      	movs	r3, #130	; 0x82
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	429a      	cmp	r2, r3
 8009144:	d112      	bne.n	800916c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	0013      	movs	r3, r2
 8009150:	2200      	movs	r2, #0
 8009152:	2180      	movs	r1, #128	; 0x80
 8009154:	f7ff fee4 	bl	8008f20 <SPI_WaitFlagStateUntilTimeout>
 8009158:	1e03      	subs	r3, r0, #0
 800915a:	d016      	beq.n	800918a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009160:	2220      	movs	r2, #32
 8009162:	431a      	orrs	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e00f      	b.n	800918c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00a      	beq.n	8009188 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	3b01      	subs	r3, #1
 8009176:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	2280      	movs	r2, #128	; 0x80
 8009180:	4013      	ands	r3, r2
 8009182:	2b80      	cmp	r3, #128	; 0x80
 8009184:	d0f2      	beq.n	800916c <SPI_EndRxTxTransaction+0x5c>
 8009186:	e000      	b.n	800918a <SPI_EndRxTxTransaction+0x7a>
        break;
 8009188:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	0018      	movs	r0, r3
 800918e:	46bd      	mov	sp, r7
 8009190:	b006      	add	sp, #24
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20000020 	.word	0x20000020
 8009198:	016e3600 	.word	0x016e3600

0800919c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e032      	b.n	8009214 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2239      	movs	r2, #57	; 0x39
 80091b2:	5c9b      	ldrb	r3, [r3, r2]
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d107      	bne.n	80091ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2238      	movs	r2, #56	; 0x38
 80091be:	2100      	movs	r1, #0
 80091c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	0018      	movs	r0, r3
 80091c6:	f7fc f8e1 	bl	800538c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2239      	movs	r2, #57	; 0x39
 80091ce:	2102      	movs	r1, #2
 80091d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3304      	adds	r3, #4
 80091da:	0019      	movs	r1, r3
 80091dc:	0010      	movs	r0, r2
 80091de:	f000 fa43 	bl	8009668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	223e      	movs	r2, #62	; 0x3e
 80091e6:	2101      	movs	r1, #1
 80091e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	223a      	movs	r2, #58	; 0x3a
 80091ee:	2101      	movs	r1, #1
 80091f0:	5499      	strb	r1, [r3, r2]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	223b      	movs	r2, #59	; 0x3b
 80091f6:	2101      	movs	r1, #1
 80091f8:	5499      	strb	r1, [r3, r2]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	223c      	movs	r2, #60	; 0x3c
 80091fe:	2101      	movs	r1, #1
 8009200:	5499      	strb	r1, [r3, r2]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	223d      	movs	r2, #61	; 0x3d
 8009206:	2101      	movs	r1, #1
 8009208:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2239      	movs	r2, #57	; 0x39
 800920e:	2101      	movs	r1, #1
 8009210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	0018      	movs	r0, r3
 8009216:	46bd      	mov	sp, r7
 8009218:	b002      	add	sp, #8
 800921a:	bd80      	pop	{r7, pc}

0800921c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2239      	movs	r2, #57	; 0x39
 8009228:	5c9b      	ldrb	r3, [r3, r2]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b01      	cmp	r3, #1
 800922e:	d001      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e036      	b.n	80092a2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2239      	movs	r2, #57	; 0x39
 8009238:	2102      	movs	r1, #2
 800923a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2101      	movs	r1, #1
 8009248:	430a      	orrs	r2, r1
 800924a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	2380      	movs	r3, #128	; 0x80
 8009252:	05db      	lsls	r3, r3, #23
 8009254:	429a      	cmp	r2, r3
 8009256:	d009      	beq.n	800926c <HAL_TIM_Base_Start_IT+0x50>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a13      	ldr	r2, [pc, #76]	; (80092ac <HAL_TIM_Base_Start_IT+0x90>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d004      	beq.n	800926c <HAL_TIM_Base_Start_IT+0x50>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a12      	ldr	r2, [pc, #72]	; (80092b0 <HAL_TIM_Base_Start_IT+0x94>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d111      	bne.n	8009290 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	2207      	movs	r2, #7
 8009274:	4013      	ands	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b06      	cmp	r3, #6
 800927c:	d010      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2101      	movs	r1, #1
 800928a:	430a      	orrs	r2, r1
 800928c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800928e:	e007      	b.n	80092a0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2101      	movs	r1, #1
 800929c:	430a      	orrs	r2, r1
 800929e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	0018      	movs	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	b004      	add	sp, #16
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	46c0      	nop			; (mov r8, r8)
 80092ac:	40010800 	.word	0x40010800
 80092b0:	40011400 	.word	0x40011400

080092b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2202      	movs	r2, #2
 80092c4:	4013      	ands	r3, r2
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d124      	bne.n	8009314 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	2202      	movs	r2, #2
 80092d2:	4013      	ands	r3, r2
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d11d      	bne.n	8009314 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2203      	movs	r2, #3
 80092de:	4252      	negs	r2, r2
 80092e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	2203      	movs	r2, #3
 80092f0:	4013      	ands	r3, r2
 80092f2:	d004      	beq.n	80092fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	0018      	movs	r0, r3
 80092f8:	f000 f99e 	bl	8009638 <HAL_TIM_IC_CaptureCallback>
 80092fc:	e007      	b.n	800930e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	0018      	movs	r0, r3
 8009302:	f000 f991 	bl	8009628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	0018      	movs	r0, r3
 800930a:	f000 f99d 	bl	8009648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	2204      	movs	r2, #4
 800931c:	4013      	ands	r3, r2
 800931e:	2b04      	cmp	r3, #4
 8009320:	d125      	bne.n	800936e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	2204      	movs	r2, #4
 800932a:	4013      	ands	r3, r2
 800932c:	2b04      	cmp	r3, #4
 800932e:	d11e      	bne.n	800936e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2205      	movs	r2, #5
 8009336:	4252      	negs	r2, r2
 8009338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2202      	movs	r2, #2
 800933e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699a      	ldr	r2, [r3, #24]
 8009346:	23c0      	movs	r3, #192	; 0xc0
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4013      	ands	r3, r2
 800934c:	d004      	beq.n	8009358 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	0018      	movs	r0, r3
 8009352:	f000 f971 	bl	8009638 <HAL_TIM_IC_CaptureCallback>
 8009356:	e007      	b.n	8009368 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	0018      	movs	r0, r3
 800935c:	f000 f964 	bl	8009628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	0018      	movs	r0, r3
 8009364:	f000 f970 	bl	8009648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2208      	movs	r2, #8
 8009376:	4013      	ands	r3, r2
 8009378:	2b08      	cmp	r3, #8
 800937a:	d124      	bne.n	80093c6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	2208      	movs	r2, #8
 8009384:	4013      	ands	r3, r2
 8009386:	2b08      	cmp	r3, #8
 8009388:	d11d      	bne.n	80093c6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2209      	movs	r2, #9
 8009390:	4252      	negs	r2, r2
 8009392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2204      	movs	r2, #4
 8009398:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	2203      	movs	r2, #3
 80093a2:	4013      	ands	r3, r2
 80093a4:	d004      	beq.n	80093b0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	0018      	movs	r0, r3
 80093aa:	f000 f945 	bl	8009638 <HAL_TIM_IC_CaptureCallback>
 80093ae:	e007      	b.n	80093c0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	0018      	movs	r0, r3
 80093b4:	f000 f938 	bl	8009628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	0018      	movs	r0, r3
 80093bc:	f000 f944 	bl	8009648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	2210      	movs	r2, #16
 80093ce:	4013      	ands	r3, r2
 80093d0:	2b10      	cmp	r3, #16
 80093d2:	d125      	bne.n	8009420 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	2210      	movs	r2, #16
 80093dc:	4013      	ands	r3, r2
 80093de:	2b10      	cmp	r3, #16
 80093e0:	d11e      	bne.n	8009420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2211      	movs	r2, #17
 80093e8:	4252      	negs	r2, r2
 80093ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2208      	movs	r2, #8
 80093f0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	69da      	ldr	r2, [r3, #28]
 80093f8:	23c0      	movs	r3, #192	; 0xc0
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4013      	ands	r3, r2
 80093fe:	d004      	beq.n	800940a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	0018      	movs	r0, r3
 8009404:	f000 f918 	bl	8009638 <HAL_TIM_IC_CaptureCallback>
 8009408:	e007      	b.n	800941a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	0018      	movs	r0, r3
 800940e:	f000 f90b 	bl	8009628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	0018      	movs	r0, r3
 8009416:	f000 f917 	bl	8009648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	2201      	movs	r2, #1
 8009428:	4013      	ands	r3, r2
 800942a:	2b01      	cmp	r3, #1
 800942c:	d10f      	bne.n	800944e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	2201      	movs	r2, #1
 8009436:	4013      	ands	r3, r2
 8009438:	2b01      	cmp	r3, #1
 800943a:	d108      	bne.n	800944e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2202      	movs	r2, #2
 8009442:	4252      	negs	r2, r2
 8009444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	0018      	movs	r0, r3
 800944a:	f000 f8e5 	bl	8009618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	2240      	movs	r2, #64	; 0x40
 8009456:	4013      	ands	r3, r2
 8009458:	2b40      	cmp	r3, #64	; 0x40
 800945a:	d10f      	bne.n	800947c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	2240      	movs	r2, #64	; 0x40
 8009464:	4013      	ands	r3, r2
 8009466:	2b40      	cmp	r3, #64	; 0x40
 8009468:	d108      	bne.n	800947c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2241      	movs	r2, #65	; 0x41
 8009470:	4252      	negs	r2, r2
 8009472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	0018      	movs	r0, r3
 8009478:	f000 f8ee 	bl	8009658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800947c:	46c0      	nop			; (mov r8, r8)
 800947e:	46bd      	mov	sp, r7
 8009480:	b002      	add	sp, #8
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2238      	movs	r2, #56	; 0x38
 8009492:	5c9b      	ldrb	r3, [r3, r2]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d101      	bne.n	800949c <HAL_TIM_ConfigClockSource+0x18>
 8009498:	2302      	movs	r3, #2
 800949a:	e0b7      	b.n	800960c <HAL_TIM_ConfigClockSource+0x188>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2238      	movs	r2, #56	; 0x38
 80094a0:	2101      	movs	r1, #1
 80094a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2239      	movs	r2, #57	; 0x39
 80094a8:	2102      	movs	r1, #2
 80094aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2277      	movs	r2, #119	; 0x77
 80094b8:	4393      	bics	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4a55      	ldr	r2, [pc, #340]	; (8009614 <HAL_TIM_ConfigClockSource+0x190>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2280      	movs	r2, #128	; 0x80
 80094d2:	0192      	lsls	r2, r2, #6
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d040      	beq.n	800955a <HAL_TIM_ConfigClockSource+0xd6>
 80094d8:	2280      	movs	r2, #128	; 0x80
 80094da:	0192      	lsls	r2, r2, #6
 80094dc:	4293      	cmp	r3, r2
 80094de:	d900      	bls.n	80094e2 <HAL_TIM_ConfigClockSource+0x5e>
 80094e0:	e088      	b.n	80095f4 <HAL_TIM_ConfigClockSource+0x170>
 80094e2:	2280      	movs	r2, #128	; 0x80
 80094e4:	0152      	lsls	r2, r2, #5
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d100      	bne.n	80094ec <HAL_TIM_ConfigClockSource+0x68>
 80094ea:	e085      	b.n	80095f8 <HAL_TIM_ConfigClockSource+0x174>
 80094ec:	2280      	movs	r2, #128	; 0x80
 80094ee:	0152      	lsls	r2, r2, #5
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d900      	bls.n	80094f6 <HAL_TIM_ConfigClockSource+0x72>
 80094f4:	e07e      	b.n	80095f4 <HAL_TIM_ConfigClockSource+0x170>
 80094f6:	2b70      	cmp	r3, #112	; 0x70
 80094f8:	d018      	beq.n	800952c <HAL_TIM_ConfigClockSource+0xa8>
 80094fa:	d900      	bls.n	80094fe <HAL_TIM_ConfigClockSource+0x7a>
 80094fc:	e07a      	b.n	80095f4 <HAL_TIM_ConfigClockSource+0x170>
 80094fe:	2b60      	cmp	r3, #96	; 0x60
 8009500:	d04f      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x11e>
 8009502:	d900      	bls.n	8009506 <HAL_TIM_ConfigClockSource+0x82>
 8009504:	e076      	b.n	80095f4 <HAL_TIM_ConfigClockSource+0x170>
 8009506:	2b50      	cmp	r3, #80	; 0x50
 8009508:	d03b      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0xfe>
 800950a:	d900      	bls.n	800950e <HAL_TIM_ConfigClockSource+0x8a>
 800950c:	e072      	b.n	80095f4 <HAL_TIM_ConfigClockSource+0x170>
 800950e:	2b40      	cmp	r3, #64	; 0x40
 8009510:	d057      	beq.n	80095c2 <HAL_TIM_ConfigClockSource+0x13e>
 8009512:	d900      	bls.n	8009516 <HAL_TIM_ConfigClockSource+0x92>
 8009514:	e06e      	b.n	80095f4 <HAL_TIM_ConfigClockSource+0x170>
 8009516:	2b30      	cmp	r3, #48	; 0x30
 8009518:	d063      	beq.n	80095e2 <HAL_TIM_ConfigClockSource+0x15e>
 800951a:	d86b      	bhi.n	80095f4 <HAL_TIM_ConfigClockSource+0x170>
 800951c:	2b20      	cmp	r3, #32
 800951e:	d060      	beq.n	80095e2 <HAL_TIM_ConfigClockSource+0x15e>
 8009520:	d868      	bhi.n	80095f4 <HAL_TIM_ConfigClockSource+0x170>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d05d      	beq.n	80095e2 <HAL_TIM_ConfigClockSource+0x15e>
 8009526:	2b10      	cmp	r3, #16
 8009528:	d05b      	beq.n	80095e2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800952a:	e063      	b.n	80095f4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	6899      	ldr	r1, [r3, #8]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f000 f962 	bl	8009804 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2277      	movs	r2, #119	; 0x77
 800954c:	4313      	orrs	r3, r2
 800954e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	609a      	str	r2, [r3, #8]
      break;
 8009558:	e04f      	b.n	80095fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	6899      	ldr	r1, [r3, #8]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	685a      	ldr	r2, [r3, #4]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f000 f94b 	bl	8009804 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2180      	movs	r1, #128	; 0x80
 800957a:	01c9      	lsls	r1, r1, #7
 800957c:	430a      	orrs	r2, r1
 800957e:	609a      	str	r2, [r3, #8]
      break;
 8009580:	e03b      	b.n	80095fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	6859      	ldr	r1, [r3, #4]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	001a      	movs	r2, r3
 8009590:	f000 f8be 	bl	8009710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2150      	movs	r1, #80	; 0x50
 800959a:	0018      	movs	r0, r3
 800959c:	f000 f918 	bl	80097d0 <TIM_ITRx_SetConfig>
      break;
 80095a0:	e02b      	b.n	80095fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	6859      	ldr	r1, [r3, #4]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	001a      	movs	r2, r3
 80095b0:	f000 f8dc 	bl	800976c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2160      	movs	r1, #96	; 0x60
 80095ba:	0018      	movs	r0, r3
 80095bc:	f000 f908 	bl	80097d0 <TIM_ITRx_SetConfig>
      break;
 80095c0:	e01b      	b.n	80095fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	6859      	ldr	r1, [r3, #4]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	001a      	movs	r2, r3
 80095d0:	f000 f89e 	bl	8009710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2140      	movs	r1, #64	; 0x40
 80095da:	0018      	movs	r0, r3
 80095dc:	f000 f8f8 	bl	80097d0 <TIM_ITRx_SetConfig>
      break;
 80095e0:	e00b      	b.n	80095fa <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	0019      	movs	r1, r3
 80095ec:	0010      	movs	r0, r2
 80095ee:	f000 f8ef 	bl	80097d0 <TIM_ITRx_SetConfig>
        break;
 80095f2:	e002      	b.n	80095fa <HAL_TIM_ConfigClockSource+0x176>
      break;
 80095f4:	46c0      	nop			; (mov r8, r8)
 80095f6:	e000      	b.n	80095fa <HAL_TIM_ConfigClockSource+0x176>
      break;
 80095f8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2239      	movs	r2, #57	; 0x39
 80095fe:	2101      	movs	r1, #1
 8009600:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2238      	movs	r2, #56	; 0x38
 8009606:	2100      	movs	r1, #0
 8009608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	0018      	movs	r0, r3
 800960e:	46bd      	mov	sp, r7
 8009610:	b004      	add	sp, #16
 8009612:	bd80      	pop	{r7, pc}
 8009614:	ffff00ff 	.word	0xffff00ff

08009618 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009620:	46c0      	nop			; (mov r8, r8)
 8009622:	46bd      	mov	sp, r7
 8009624:	b002      	add	sp, #8
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009630:	46c0      	nop			; (mov r8, r8)
 8009632:	46bd      	mov	sp, r7
 8009634:	b002      	add	sp, #8
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009640:	46c0      	nop			; (mov r8, r8)
 8009642:	46bd      	mov	sp, r7
 8009644:	b002      	add	sp, #8
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009650:	46c0      	nop			; (mov r8, r8)
 8009652:	46bd      	mov	sp, r7
 8009654:	b002      	add	sp, #8
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009660:	46c0      	nop			; (mov r8, r8)
 8009662:	46bd      	mov	sp, r7
 8009664:	b002      	add	sp, #8
 8009666:	bd80      	pop	{r7, pc}

08009668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	2380      	movs	r3, #128	; 0x80
 800967c:	05db      	lsls	r3, r3, #23
 800967e:	429a      	cmp	r2, r3
 8009680:	d007      	beq.n	8009692 <TIM_Base_SetConfig+0x2a>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a1f      	ldr	r2, [pc, #124]	; (8009704 <TIM_Base_SetConfig+0x9c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d003      	beq.n	8009692 <TIM_Base_SetConfig+0x2a>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a1e      	ldr	r2, [pc, #120]	; (8009708 <TIM_Base_SetConfig+0xa0>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d108      	bne.n	80096a4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2270      	movs	r2, #112	; 0x70
 8009696:	4393      	bics	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	2380      	movs	r3, #128	; 0x80
 80096a8:	05db      	lsls	r3, r3, #23
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d007      	beq.n	80096be <TIM_Base_SetConfig+0x56>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a14      	ldr	r2, [pc, #80]	; (8009704 <TIM_Base_SetConfig+0x9c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d003      	beq.n	80096be <TIM_Base_SetConfig+0x56>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a13      	ldr	r2, [pc, #76]	; (8009708 <TIM_Base_SetConfig+0xa0>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d108      	bne.n	80096d0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	4a12      	ldr	r2, [pc, #72]	; (800970c <TIM_Base_SetConfig+0xa4>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2280      	movs	r2, #128	; 0x80
 80096d4:	4393      	bics	r3, r2
 80096d6:	001a      	movs	r2, r3
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	689a      	ldr	r2, [r3, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	615a      	str	r2, [r3, #20]
}
 80096fc:	46c0      	nop			; (mov r8, r8)
 80096fe:	46bd      	mov	sp, r7
 8009700:	b004      	add	sp, #16
 8009702:	bd80      	pop	{r7, pc}
 8009704:	40010800 	.word	0x40010800
 8009708:	40011400 	.word	0x40011400
 800970c:	fffffcff 	.word	0xfffffcff

08009710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	2201      	movs	r2, #1
 8009728:	4393      	bics	r3, r2
 800972a:	001a      	movs	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	22f0      	movs	r2, #240	; 0xf0
 800973a:	4393      	bics	r3, r2
 800973c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	011b      	lsls	r3, r3, #4
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4313      	orrs	r3, r2
 8009746:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	220a      	movs	r2, #10
 800974c:	4393      	bics	r3, r2
 800974e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4313      	orrs	r3, r2
 8009756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	621a      	str	r2, [r3, #32]
}
 8009764:	46c0      	nop			; (mov r8, r8)
 8009766:	46bd      	mov	sp, r7
 8009768:	b006      	add	sp, #24
 800976a:	bd80      	pop	{r7, pc}

0800976c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	2210      	movs	r2, #16
 800977e:	4393      	bics	r3, r2
 8009780:	001a      	movs	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	4a0d      	ldr	r2, [pc, #52]	; (80097cc <TIM_TI2_ConfigInputStage+0x60>)
 8009796:	4013      	ands	r3, r2
 8009798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	031b      	lsls	r3, r3, #12
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	22a0      	movs	r2, #160	; 0xa0
 80097a8:	4393      	bics	r3, r2
 80097aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	621a      	str	r2, [r3, #32]
}
 80097c2:	46c0      	nop			; (mov r8, r8)
 80097c4:	46bd      	mov	sp, r7
 80097c6:	b006      	add	sp, #24
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	46c0      	nop			; (mov r8, r8)
 80097cc:	ffff0fff 	.word	0xffff0fff

080097d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2270      	movs	r2, #112	; 0x70
 80097e4:	4393      	bics	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	2207      	movs	r2, #7
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	609a      	str	r2, [r3, #8]
}
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	46bd      	mov	sp, r7
 80097fe:	b004      	add	sp, #16
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	4a09      	ldr	r2, [pc, #36]	; (8009840 <TIM_ETR_SetConfig+0x3c>)
 800981c:	4013      	ands	r3, r2
 800981e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	021a      	lsls	r2, r3, #8
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	431a      	orrs	r2, r3
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	4313      	orrs	r3, r2
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	609a      	str	r2, [r3, #8]
}
 8009838:	46c0      	nop			; (mov r8, r8)
 800983a:	46bd      	mov	sp, r7
 800983c:	b006      	add	sp, #24
 800983e:	bd80      	pop	{r7, pc}
 8009840:	ffff00ff 	.word	0xffff00ff

08009844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2238      	movs	r2, #56	; 0x38
 8009852:	5c9b      	ldrb	r3, [r3, r2]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d101      	bne.n	800985c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009858:	2302      	movs	r3, #2
 800985a:	e042      	b.n	80098e2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2238      	movs	r2, #56	; 0x38
 8009860:	2101      	movs	r1, #1
 8009862:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2239      	movs	r2, #57	; 0x39
 8009868:	2102      	movs	r1, #2
 800986a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2270      	movs	r2, #112	; 0x70
 8009880:	4393      	bics	r3, r2
 8009882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	2380      	movs	r3, #128	; 0x80
 800989c:	05db      	lsls	r3, r3, #23
 800989e:	429a      	cmp	r2, r3
 80098a0:	d009      	beq.n	80098b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a11      	ldr	r2, [pc, #68]	; (80098ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d004      	beq.n	80098b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a0f      	ldr	r2, [pc, #60]	; (80098f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d10c      	bne.n	80098d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2280      	movs	r2, #128	; 0x80
 80098ba:	4393      	bics	r3, r2
 80098bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2239      	movs	r2, #57	; 0x39
 80098d4:	2101      	movs	r1, #1
 80098d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2238      	movs	r2, #56	; 0x38
 80098dc:	2100      	movs	r1, #0
 80098de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	0018      	movs	r0, r3
 80098e4:	46bd      	mov	sp, r7
 80098e6:	b004      	add	sp, #16
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	46c0      	nop			; (mov r8, r8)
 80098ec:	40010800 	.word	0x40010800
 80098f0:	40011400 	.word	0x40011400

080098f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e044      	b.n	8009990 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800990a:	2b00      	cmp	r3, #0
 800990c:	d107      	bne.n	800991e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2274      	movs	r2, #116	; 0x74
 8009912:	2100      	movs	r1, #0
 8009914:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	0018      	movs	r0, r3
 800991a:	f7fb fdbb 	bl	8005494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2224      	movs	r2, #36	; 0x24
 8009922:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2101      	movs	r1, #1
 8009930:	438a      	bics	r2, r1
 8009932:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	0018      	movs	r0, r3
 8009938:	f000 f8d8 	bl	8009aec <UART_SetConfig>
 800993c:	0003      	movs	r3, r0
 800993e:	2b01      	cmp	r3, #1
 8009940:	d101      	bne.n	8009946 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e024      	b.n	8009990 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	0018      	movs	r0, r3
 8009952:	f000 fb6b 	bl	800a02c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	490d      	ldr	r1, [pc, #52]	; (8009998 <HAL_UART_Init+0xa4>)
 8009962:	400a      	ands	r2, r1
 8009964:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	212a      	movs	r1, #42	; 0x2a
 8009972:	438a      	bics	r2, r1
 8009974:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2101      	movs	r1, #1
 8009982:	430a      	orrs	r2, r1
 8009984:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	0018      	movs	r0, r3
 800998a:	f000 fc03 	bl	800a194 <UART_CheckIdleState>
 800998e:	0003      	movs	r3, r0
}
 8009990:	0018      	movs	r0, r3
 8009992:	46bd      	mov	sp, r7
 8009994:	b002      	add	sp, #8
 8009996:	bd80      	pop	{r7, pc}
 8009998:	ffffb7ff 	.word	0xffffb7ff

0800999c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08a      	sub	sp, #40	; 0x28
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	1dbb      	adds	r3, r7, #6
 80099aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	d000      	beq.n	80099b6 <HAL_UART_Transmit+0x1a>
 80099b4:	e095      	b.n	8009ae2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <HAL_UART_Transmit+0x28>
 80099bc:	1dbb      	adds	r3, r7, #6
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e08d      	b.n	8009ae4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	2380      	movs	r3, #128	; 0x80
 80099ce:	015b      	lsls	r3, r3, #5
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d109      	bne.n	80099e8 <HAL_UART_Transmit+0x4c>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d105      	bne.n	80099e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2201      	movs	r2, #1
 80099e0:	4013      	ands	r3, r2
 80099e2:	d001      	beq.n	80099e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e07d      	b.n	8009ae4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2274      	movs	r2, #116	; 0x74
 80099ec:	5c9b      	ldrb	r3, [r3, r2]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d101      	bne.n	80099f6 <HAL_UART_Transmit+0x5a>
 80099f2:	2302      	movs	r3, #2
 80099f4:	e076      	b.n	8009ae4 <HAL_UART_Transmit+0x148>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2274      	movs	r2, #116	; 0x74
 80099fa:	2101      	movs	r1, #1
 80099fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2280      	movs	r2, #128	; 0x80
 8009a02:	2100      	movs	r1, #0
 8009a04:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2221      	movs	r2, #33	; 0x21
 8009a0a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a0c:	f7fb ff82 	bl	8005914 <HAL_GetTick>
 8009a10:	0003      	movs	r3, r0
 8009a12:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	1dba      	adds	r2, r7, #6
 8009a18:	2150      	movs	r1, #80	; 0x50
 8009a1a:	8812      	ldrh	r2, [r2, #0]
 8009a1c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	1dba      	adds	r2, r7, #6
 8009a22:	2152      	movs	r1, #82	; 0x52
 8009a24:	8812      	ldrh	r2, [r2, #0]
 8009a26:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	689a      	ldr	r2, [r3, #8]
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	015b      	lsls	r3, r3, #5
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d108      	bne.n	8009a46 <HAL_UART_Transmit+0xaa>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d104      	bne.n	8009a46 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	61bb      	str	r3, [r7, #24]
 8009a44:	e003      	b.n	8009a4e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2274      	movs	r2, #116	; 0x74
 8009a52:	2100      	movs	r1, #0
 8009a54:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8009a56:	e02c      	b.n	8009ab2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	0013      	movs	r3, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	2180      	movs	r1, #128	; 0x80
 8009a66:	f000 fbdd 	bl	800a224 <UART_WaitOnFlagUntilTimeout>
 8009a6a:	1e03      	subs	r3, r0, #0
 8009a6c:	d001      	beq.n	8009a72 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e038      	b.n	8009ae4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10b      	bne.n	8009a90 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	001a      	movs	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	05d2      	lsls	r2, r2, #23
 8009a84:	0dd2      	lsrs	r2, r2, #23
 8009a86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	3302      	adds	r3, #2
 8009a8c:	61bb      	str	r3, [r7, #24]
 8009a8e:	e007      	b.n	8009aa0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	781a      	ldrb	r2, [r3, #0]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2252      	movs	r2, #82	; 0x52
 8009aa4:	5a9b      	ldrh	r3, [r3, r2]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	b299      	uxth	r1, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2252      	movs	r2, #82	; 0x52
 8009ab0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2252      	movs	r2, #82	; 0x52
 8009ab6:	5a9b      	ldrh	r3, [r3, r2]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1cc      	bne.n	8009a58 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	0013      	movs	r3, r2
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2140      	movs	r1, #64	; 0x40
 8009acc:	f000 fbaa 	bl	800a224 <UART_WaitOnFlagUntilTimeout>
 8009ad0:	1e03      	subs	r3, r0, #0
 8009ad2:	d001      	beq.n	8009ad8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e005      	b.n	8009ae4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2220      	movs	r2, #32
 8009adc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e000      	b.n	8009ae4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
  }
}
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	b008      	add	sp, #32
 8009aea:	bd80      	pop	{r7, pc}

08009aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009aec:	b5b0      	push	{r4, r5, r7, lr}
 8009aee:	b08e      	sub	sp, #56	; 0x38
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009af4:	231a      	movs	r3, #26
 8009af6:	2218      	movs	r2, #24
 8009af8:	4694      	mov	ip, r2
 8009afa:	44bc      	add	ip, r7
 8009afc:	4463      	add	r3, ip
 8009afe:	2200      	movs	r2, #0
 8009b00:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	689a      	ldr	r2, [r3, #8]
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	431a      	orrs	r2, r3
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4ac1      	ldr	r2, [pc, #772]	; (8009e28 <UART_SetConfig+0x33c>)
 8009b22:	4013      	ands	r3, r2
 8009b24:	0019      	movs	r1, r3
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	4abd      	ldr	r2, [pc, #756]	; (8009e2c <UART_SetConfig+0x340>)
 8009b38:	4013      	ands	r3, r2
 8009b3a:	0019      	movs	r1, r3
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	430a      	orrs	r2, r1
 8009b46:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4ab7      	ldr	r2, [pc, #732]	; (8009e30 <UART_SetConfig+0x344>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d004      	beq.n	8009b62 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	6a1b      	ldr	r3, [r3, #32]
 8009b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	4ab2      	ldr	r2, [pc, #712]	; (8009e34 <UART_SetConfig+0x348>)
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	0019      	movs	r1, r3
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b74:	430a      	orrs	r2, r1
 8009b76:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4aae      	ldr	r2, [pc, #696]	; (8009e38 <UART_SetConfig+0x34c>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d136      	bne.n	8009bf0 <UART_SetConfig+0x104>
 8009b82:	4bae      	ldr	r3, [pc, #696]	; (8009e3c <UART_SetConfig+0x350>)
 8009b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b86:	2203      	movs	r2, #3
 8009b88:	4013      	ands	r3, r2
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d020      	beq.n	8009bd0 <UART_SetConfig+0xe4>
 8009b8e:	d827      	bhi.n	8009be0 <UART_SetConfig+0xf4>
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d00d      	beq.n	8009bb0 <UART_SetConfig+0xc4>
 8009b94:	d824      	bhi.n	8009be0 <UART_SetConfig+0xf4>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d002      	beq.n	8009ba0 <UART_SetConfig+0xb4>
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d010      	beq.n	8009bc0 <UART_SetConfig+0xd4>
 8009b9e:	e01f      	b.n	8009be0 <UART_SetConfig+0xf4>
 8009ba0:	231b      	movs	r3, #27
 8009ba2:	2218      	movs	r2, #24
 8009ba4:	4694      	mov	ip, r2
 8009ba6:	44bc      	add	ip, r7
 8009ba8:	4463      	add	r3, ip
 8009baa:	2201      	movs	r2, #1
 8009bac:	701a      	strb	r2, [r3, #0]
 8009bae:	e0ab      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009bb0:	231b      	movs	r3, #27
 8009bb2:	2218      	movs	r2, #24
 8009bb4:	4694      	mov	ip, r2
 8009bb6:	44bc      	add	ip, r7
 8009bb8:	4463      	add	r3, ip
 8009bba:	2202      	movs	r2, #2
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	e0a3      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009bc0:	231b      	movs	r3, #27
 8009bc2:	2218      	movs	r2, #24
 8009bc4:	4694      	mov	ip, r2
 8009bc6:	44bc      	add	ip, r7
 8009bc8:	4463      	add	r3, ip
 8009bca:	2204      	movs	r2, #4
 8009bcc:	701a      	strb	r2, [r3, #0]
 8009bce:	e09b      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009bd0:	231b      	movs	r3, #27
 8009bd2:	2218      	movs	r2, #24
 8009bd4:	4694      	mov	ip, r2
 8009bd6:	44bc      	add	ip, r7
 8009bd8:	4463      	add	r3, ip
 8009bda:	2208      	movs	r2, #8
 8009bdc:	701a      	strb	r2, [r3, #0]
 8009bde:	e093      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009be0:	231b      	movs	r3, #27
 8009be2:	2218      	movs	r2, #24
 8009be4:	4694      	mov	ip, r2
 8009be6:	44bc      	add	ip, r7
 8009be8:	4463      	add	r3, ip
 8009bea:	2210      	movs	r2, #16
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	e08b      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a92      	ldr	r2, [pc, #584]	; (8009e40 <UART_SetConfig+0x354>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d136      	bne.n	8009c68 <UART_SetConfig+0x17c>
 8009bfa:	4b90      	ldr	r3, [pc, #576]	; (8009e3c <UART_SetConfig+0x350>)
 8009bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfe:	220c      	movs	r2, #12
 8009c00:	4013      	ands	r3, r2
 8009c02:	2b0c      	cmp	r3, #12
 8009c04:	d020      	beq.n	8009c48 <UART_SetConfig+0x15c>
 8009c06:	d827      	bhi.n	8009c58 <UART_SetConfig+0x16c>
 8009c08:	2b08      	cmp	r3, #8
 8009c0a:	d00d      	beq.n	8009c28 <UART_SetConfig+0x13c>
 8009c0c:	d824      	bhi.n	8009c58 <UART_SetConfig+0x16c>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <UART_SetConfig+0x12c>
 8009c12:	2b04      	cmp	r3, #4
 8009c14:	d010      	beq.n	8009c38 <UART_SetConfig+0x14c>
 8009c16:	e01f      	b.n	8009c58 <UART_SetConfig+0x16c>
 8009c18:	231b      	movs	r3, #27
 8009c1a:	2218      	movs	r2, #24
 8009c1c:	4694      	mov	ip, r2
 8009c1e:	44bc      	add	ip, r7
 8009c20:	4463      	add	r3, ip
 8009c22:	2200      	movs	r2, #0
 8009c24:	701a      	strb	r2, [r3, #0]
 8009c26:	e06f      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009c28:	231b      	movs	r3, #27
 8009c2a:	2218      	movs	r2, #24
 8009c2c:	4694      	mov	ip, r2
 8009c2e:	44bc      	add	ip, r7
 8009c30:	4463      	add	r3, ip
 8009c32:	2202      	movs	r2, #2
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	e067      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009c38:	231b      	movs	r3, #27
 8009c3a:	2218      	movs	r2, #24
 8009c3c:	4694      	mov	ip, r2
 8009c3e:	44bc      	add	ip, r7
 8009c40:	4463      	add	r3, ip
 8009c42:	2204      	movs	r2, #4
 8009c44:	701a      	strb	r2, [r3, #0]
 8009c46:	e05f      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009c48:	231b      	movs	r3, #27
 8009c4a:	2218      	movs	r2, #24
 8009c4c:	4694      	mov	ip, r2
 8009c4e:	44bc      	add	ip, r7
 8009c50:	4463      	add	r3, ip
 8009c52:	2208      	movs	r2, #8
 8009c54:	701a      	strb	r2, [r3, #0]
 8009c56:	e057      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009c58:	231b      	movs	r3, #27
 8009c5a:	2218      	movs	r2, #24
 8009c5c:	4694      	mov	ip, r2
 8009c5e:	44bc      	add	ip, r7
 8009c60:	4463      	add	r3, ip
 8009c62:	2210      	movs	r2, #16
 8009c64:	701a      	strb	r2, [r3, #0]
 8009c66:	e04f      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a70      	ldr	r2, [pc, #448]	; (8009e30 <UART_SetConfig+0x344>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d143      	bne.n	8009cfa <UART_SetConfig+0x20e>
 8009c72:	4b72      	ldr	r3, [pc, #456]	; (8009e3c <UART_SetConfig+0x350>)
 8009c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c76:	23c0      	movs	r3, #192	; 0xc0
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	22c0      	movs	r2, #192	; 0xc0
 8009c7e:	0112      	lsls	r2, r2, #4
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d02a      	beq.n	8009cda <UART_SetConfig+0x1ee>
 8009c84:	22c0      	movs	r2, #192	; 0xc0
 8009c86:	0112      	lsls	r2, r2, #4
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d82e      	bhi.n	8009cea <UART_SetConfig+0x1fe>
 8009c8c:	2280      	movs	r2, #128	; 0x80
 8009c8e:	0112      	lsls	r2, r2, #4
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d012      	beq.n	8009cba <UART_SetConfig+0x1ce>
 8009c94:	2280      	movs	r2, #128	; 0x80
 8009c96:	0112      	lsls	r2, r2, #4
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d826      	bhi.n	8009cea <UART_SetConfig+0x1fe>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d004      	beq.n	8009caa <UART_SetConfig+0x1be>
 8009ca0:	2280      	movs	r2, #128	; 0x80
 8009ca2:	00d2      	lsls	r2, r2, #3
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d010      	beq.n	8009cca <UART_SetConfig+0x1de>
 8009ca8:	e01f      	b.n	8009cea <UART_SetConfig+0x1fe>
 8009caa:	231b      	movs	r3, #27
 8009cac:	2218      	movs	r2, #24
 8009cae:	4694      	mov	ip, r2
 8009cb0:	44bc      	add	ip, r7
 8009cb2:	4463      	add	r3, ip
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	701a      	strb	r2, [r3, #0]
 8009cb8:	e026      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009cba:	231b      	movs	r3, #27
 8009cbc:	2218      	movs	r2, #24
 8009cbe:	4694      	mov	ip, r2
 8009cc0:	44bc      	add	ip, r7
 8009cc2:	4463      	add	r3, ip
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	701a      	strb	r2, [r3, #0]
 8009cc8:	e01e      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009cca:	231b      	movs	r3, #27
 8009ccc:	2218      	movs	r2, #24
 8009cce:	4694      	mov	ip, r2
 8009cd0:	44bc      	add	ip, r7
 8009cd2:	4463      	add	r3, ip
 8009cd4:	2204      	movs	r2, #4
 8009cd6:	701a      	strb	r2, [r3, #0]
 8009cd8:	e016      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009cda:	231b      	movs	r3, #27
 8009cdc:	2218      	movs	r2, #24
 8009cde:	4694      	mov	ip, r2
 8009ce0:	44bc      	add	ip, r7
 8009ce2:	4463      	add	r3, ip
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	701a      	strb	r2, [r3, #0]
 8009ce8:	e00e      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009cea:	231b      	movs	r3, #27
 8009cec:	2218      	movs	r2, #24
 8009cee:	4694      	mov	ip, r2
 8009cf0:	44bc      	add	ip, r7
 8009cf2:	4463      	add	r3, ip
 8009cf4:	2210      	movs	r2, #16
 8009cf6:	701a      	strb	r2, [r3, #0]
 8009cf8:	e006      	b.n	8009d08 <UART_SetConfig+0x21c>
 8009cfa:	231b      	movs	r3, #27
 8009cfc:	2218      	movs	r2, #24
 8009cfe:	4694      	mov	ip, r2
 8009d00:	44bc      	add	ip, r7
 8009d02:	4463      	add	r3, ip
 8009d04:	2210      	movs	r2, #16
 8009d06:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a48      	ldr	r2, [pc, #288]	; (8009e30 <UART_SetConfig+0x344>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d000      	beq.n	8009d14 <UART_SetConfig+0x228>
 8009d12:	e09b      	b.n	8009e4c <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d14:	231b      	movs	r3, #27
 8009d16:	2218      	movs	r2, #24
 8009d18:	4694      	mov	ip, r2
 8009d1a:	44bc      	add	ip, r7
 8009d1c:	4463      	add	r3, ip
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b08      	cmp	r3, #8
 8009d22:	d01d      	beq.n	8009d60 <UART_SetConfig+0x274>
 8009d24:	dc20      	bgt.n	8009d68 <UART_SetConfig+0x27c>
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d015      	beq.n	8009d56 <UART_SetConfig+0x26a>
 8009d2a:	dc1d      	bgt.n	8009d68 <UART_SetConfig+0x27c>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <UART_SetConfig+0x24a>
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d005      	beq.n	8009d40 <UART_SetConfig+0x254>
 8009d34:	e018      	b.n	8009d68 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d36:	f7fe fa97 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 8009d3a:	0003      	movs	r3, r0
 8009d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d3e:	e01d      	b.n	8009d7c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d40:	4b3e      	ldr	r3, [pc, #248]	; (8009e3c <UART_SetConfig+0x350>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2210      	movs	r2, #16
 8009d46:	4013      	ands	r3, r2
 8009d48:	d002      	beq.n	8009d50 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009d4a:	4b3e      	ldr	r3, [pc, #248]	; (8009e44 <UART_SetConfig+0x358>)
 8009d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d4e:	e015      	b.n	8009d7c <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8009d50:	4b3d      	ldr	r3, [pc, #244]	; (8009e48 <UART_SetConfig+0x35c>)
 8009d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d54:	e012      	b.n	8009d7c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d56:	f7fe f9d7 	bl	8008108 <HAL_RCC_GetSysClockFreq>
 8009d5a:	0003      	movs	r3, r0
 8009d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d5e:	e00d      	b.n	8009d7c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d60:	2380      	movs	r3, #128	; 0x80
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d66:	e009      	b.n	8009d7c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d6c:	231a      	movs	r3, #26
 8009d6e:	2218      	movs	r2, #24
 8009d70:	4694      	mov	ip, r2
 8009d72:	44bc      	add	ip, r7
 8009d74:	4463      	add	r3, ip
 8009d76:	2201      	movs	r2, #1
 8009d78:	701a      	strb	r2, [r3, #0]
        break;
 8009d7a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d100      	bne.n	8009d84 <UART_SetConfig+0x298>
 8009d82:	e139      	b.n	8009ff8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	0013      	movs	r3, r2
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	189b      	adds	r3, r3, r2
 8009d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d305      	bcc.n	8009da0 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d907      	bls.n	8009db0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009da0:	231a      	movs	r3, #26
 8009da2:	2218      	movs	r2, #24
 8009da4:	4694      	mov	ip, r2
 8009da6:	44bc      	add	ip, r7
 8009da8:	4463      	add	r3, ip
 8009daa:	2201      	movs	r2, #1
 8009dac:	701a      	strb	r2, [r3, #0]
 8009dae:	e123      	b.n	8009ff8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db2:	613b      	str	r3, [r7, #16]
 8009db4:	2300      	movs	r3, #0
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	6939      	ldr	r1, [r7, #16]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	000b      	movs	r3, r1
 8009dbe:	0e1b      	lsrs	r3, r3, #24
 8009dc0:	0010      	movs	r0, r2
 8009dc2:	0205      	lsls	r5, r0, #8
 8009dc4:	431d      	orrs	r5, r3
 8009dc6:	000b      	movs	r3, r1
 8009dc8:	021c      	lsls	r4, r3, #8
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	085b      	lsrs	r3, r3, #1
 8009dd0:	60bb      	str	r3, [r7, #8]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60fb      	str	r3, [r7, #12]
 8009dd6:	68b8      	ldr	r0, [r7, #8]
 8009dd8:	68f9      	ldr	r1, [r7, #12]
 8009dda:	1900      	adds	r0, r0, r4
 8009ddc:	4169      	adcs	r1, r5
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	603b      	str	r3, [r7, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	607b      	str	r3, [r7, #4]
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f7f6 fa18 	bl	8000220 <__aeabi_uldivmod>
 8009df0:	0002      	movs	r2, r0
 8009df2:	000b      	movs	r3, r1
 8009df4:	0013      	movs	r3, r2
 8009df6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dfa:	23c0      	movs	r3, #192	; 0xc0
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d309      	bcc.n	8009e16 <UART_SetConfig+0x32a>
 8009e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e04:	2380      	movs	r3, #128	; 0x80
 8009e06:	035b      	lsls	r3, r3, #13
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d204      	bcs.n	8009e16 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e12:	60da      	str	r2, [r3, #12]
 8009e14:	e0f0      	b.n	8009ff8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8009e16:	231a      	movs	r3, #26
 8009e18:	2218      	movs	r2, #24
 8009e1a:	4694      	mov	ip, r2
 8009e1c:	44bc      	add	ip, r7
 8009e1e:	4463      	add	r3, ip
 8009e20:	2201      	movs	r2, #1
 8009e22:	701a      	strb	r2, [r3, #0]
 8009e24:	e0e8      	b.n	8009ff8 <UART_SetConfig+0x50c>
 8009e26:	46c0      	nop			; (mov r8, r8)
 8009e28:	efff69f3 	.word	0xefff69f3
 8009e2c:	ffffcfff 	.word	0xffffcfff
 8009e30:	40004800 	.word	0x40004800
 8009e34:	fffff4ff 	.word	0xfffff4ff
 8009e38:	40013800 	.word	0x40013800
 8009e3c:	40021000 	.word	0x40021000
 8009e40:	40004400 	.word	0x40004400
 8009e44:	003d0900 	.word	0x003d0900
 8009e48:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	69da      	ldr	r2, [r3, #28]
 8009e50:	2380      	movs	r3, #128	; 0x80
 8009e52:	021b      	lsls	r3, r3, #8
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d000      	beq.n	8009e5a <UART_SetConfig+0x36e>
 8009e58:	e074      	b.n	8009f44 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009e5a:	231b      	movs	r3, #27
 8009e5c:	2218      	movs	r2, #24
 8009e5e:	4694      	mov	ip, r2
 8009e60:	44bc      	add	ip, r7
 8009e62:	4463      	add	r3, ip
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	d822      	bhi.n	8009eb0 <UART_SetConfig+0x3c4>
 8009e6a:	009a      	lsls	r2, r3, #2
 8009e6c:	4b6a      	ldr	r3, [pc, #424]	; (800a018 <UART_SetConfig+0x52c>)
 8009e6e:	18d3      	adds	r3, r2, r3
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e74:	f7fe f9f8 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 8009e78:	0003      	movs	r3, r0
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e7c:	e022      	b.n	8009ec4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e7e:	f7fe fa09 	bl	8008294 <HAL_RCC_GetPCLK2Freq>
 8009e82:	0003      	movs	r3, r0
 8009e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e86:	e01d      	b.n	8009ec4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e88:	4b64      	ldr	r3, [pc, #400]	; (800a01c <UART_SetConfig+0x530>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2210      	movs	r2, #16
 8009e8e:	4013      	ands	r3, r2
 8009e90:	d002      	beq.n	8009e98 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009e92:	4b63      	ldr	r3, [pc, #396]	; (800a020 <UART_SetConfig+0x534>)
 8009e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e96:	e015      	b.n	8009ec4 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8009e98:	4b62      	ldr	r3, [pc, #392]	; (800a024 <UART_SetConfig+0x538>)
 8009e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e9c:	e012      	b.n	8009ec4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e9e:	f7fe f933 	bl	8008108 <HAL_RCC_GetSysClockFreq>
 8009ea2:	0003      	movs	r3, r0
 8009ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ea6:	e00d      	b.n	8009ec4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ea8:	2380      	movs	r3, #128	; 0x80
 8009eaa:	021b      	lsls	r3, r3, #8
 8009eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eae:	e009      	b.n	8009ec4 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009eb4:	231a      	movs	r3, #26
 8009eb6:	2218      	movs	r2, #24
 8009eb8:	4694      	mov	ip, r2
 8009eba:	44bc      	add	ip, r7
 8009ebc:	4463      	add	r3, ip
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	701a      	strb	r2, [r3, #0]
        break;
 8009ec2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d100      	bne.n	8009ecc <UART_SetConfig+0x3e0>
 8009eca:	e095      	b.n	8009ff8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ece:	005a      	lsls	r2, r3, #1
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	085b      	lsrs	r3, r3, #1
 8009ed6:	18d2      	adds	r2, r2, r3
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	0019      	movs	r1, r3
 8009ede:	0010      	movs	r0, r2
 8009ee0:	f7f6 f912 	bl	8000108 <__udivsi3>
 8009ee4:	0003      	movs	r3, r0
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	2b0f      	cmp	r3, #15
 8009eee:	d921      	bls.n	8009f34 <UART_SetConfig+0x448>
 8009ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ef2:	2380      	movs	r3, #128	; 0x80
 8009ef4:	025b      	lsls	r3, r3, #9
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d21c      	bcs.n	8009f34 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	200e      	movs	r0, #14
 8009f00:	2418      	movs	r4, #24
 8009f02:	193b      	adds	r3, r7, r4
 8009f04:	181b      	adds	r3, r3, r0
 8009f06:	210f      	movs	r1, #15
 8009f08:	438a      	bics	r2, r1
 8009f0a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	085b      	lsrs	r3, r3, #1
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	2207      	movs	r2, #7
 8009f14:	4013      	ands	r3, r2
 8009f16:	b299      	uxth	r1, r3
 8009f18:	193b      	adds	r3, r7, r4
 8009f1a:	181b      	adds	r3, r3, r0
 8009f1c:	193a      	adds	r2, r7, r4
 8009f1e:	1812      	adds	r2, r2, r0
 8009f20:	8812      	ldrh	r2, [r2, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	193a      	adds	r2, r7, r4
 8009f2c:	1812      	adds	r2, r2, r0
 8009f2e:	8812      	ldrh	r2, [r2, #0]
 8009f30:	60da      	str	r2, [r3, #12]
 8009f32:	e061      	b.n	8009ff8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8009f34:	231a      	movs	r3, #26
 8009f36:	2218      	movs	r2, #24
 8009f38:	4694      	mov	ip, r2
 8009f3a:	44bc      	add	ip, r7
 8009f3c:	4463      	add	r3, ip
 8009f3e:	2201      	movs	r2, #1
 8009f40:	701a      	strb	r2, [r3, #0]
 8009f42:	e059      	b.n	8009ff8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f44:	231b      	movs	r3, #27
 8009f46:	2218      	movs	r2, #24
 8009f48:	4694      	mov	ip, r2
 8009f4a:	44bc      	add	ip, r7
 8009f4c:	4463      	add	r3, ip
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d822      	bhi.n	8009f9a <UART_SetConfig+0x4ae>
 8009f54:	009a      	lsls	r2, r3, #2
 8009f56:	4b34      	ldr	r3, [pc, #208]	; (800a028 <UART_SetConfig+0x53c>)
 8009f58:	18d3      	adds	r3, r2, r3
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f5e:	f7fe f983 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 8009f62:	0003      	movs	r3, r0
 8009f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f66:	e022      	b.n	8009fae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f68:	f7fe f994 	bl	8008294 <HAL_RCC_GetPCLK2Freq>
 8009f6c:	0003      	movs	r3, r0
 8009f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f70:	e01d      	b.n	8009fae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f72:	4b2a      	ldr	r3, [pc, #168]	; (800a01c <UART_SetConfig+0x530>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2210      	movs	r2, #16
 8009f78:	4013      	ands	r3, r2
 8009f7a:	d002      	beq.n	8009f82 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009f7c:	4b28      	ldr	r3, [pc, #160]	; (800a020 <UART_SetConfig+0x534>)
 8009f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f80:	e015      	b.n	8009fae <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8009f82:	4b28      	ldr	r3, [pc, #160]	; (800a024 <UART_SetConfig+0x538>)
 8009f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f86:	e012      	b.n	8009fae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f88:	f7fe f8be 	bl	8008108 <HAL_RCC_GetSysClockFreq>
 8009f8c:	0003      	movs	r3, r0
 8009f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f90:	e00d      	b.n	8009fae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f92:	2380      	movs	r3, #128	; 0x80
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f98:	e009      	b.n	8009fae <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f9e:	231a      	movs	r3, #26
 8009fa0:	2218      	movs	r2, #24
 8009fa2:	4694      	mov	ip, r2
 8009fa4:	44bc      	add	ip, r7
 8009fa6:	4463      	add	r3, ip
 8009fa8:	2201      	movs	r2, #1
 8009faa:	701a      	strb	r2, [r3, #0]
        break;
 8009fac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d021      	beq.n	8009ff8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	085a      	lsrs	r2, r3, #1
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	18d2      	adds	r2, r2, r3
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	0019      	movs	r1, r3
 8009fc4:	0010      	movs	r0, r2
 8009fc6:	f7f6 f89f 	bl	8000108 <__udivsi3>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	2b0f      	cmp	r3, #15
 8009fd4:	d909      	bls.n	8009fea <UART_SetConfig+0x4fe>
 8009fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fd8:	2380      	movs	r3, #128	; 0x80
 8009fda:	025b      	lsls	r3, r3, #9
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d204      	bcs.n	8009fea <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fe6:	60da      	str	r2, [r3, #12]
 8009fe8:	e006      	b.n	8009ff8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8009fea:	231a      	movs	r3, #26
 8009fec:	2218      	movs	r2, #24
 8009fee:	4694      	mov	ip, r2
 8009ff0:	44bc      	add	ip, r7
 8009ff2:	4463      	add	r3, ip
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	2200      	movs	r2, #0
 800a002:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a004:	231a      	movs	r3, #26
 800a006:	2218      	movs	r2, #24
 800a008:	4694      	mov	ip, r2
 800a00a:	44bc      	add	ip, r7
 800a00c:	4463      	add	r3, ip
 800a00e:	781b      	ldrb	r3, [r3, #0]
}
 800a010:	0018      	movs	r0, r3
 800a012:	46bd      	mov	sp, r7
 800a014:	b00e      	add	sp, #56	; 0x38
 800a016:	bdb0      	pop	{r4, r5, r7, pc}
 800a018:	0800b2e0 	.word	0x0800b2e0
 800a01c:	40021000 	.word	0x40021000
 800a020:	003d0900 	.word	0x003d0900
 800a024:	00f42400 	.word	0x00f42400
 800a028:	0800b304 	.word	0x0800b304

0800a02c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	2201      	movs	r2, #1
 800a03a:	4013      	ands	r3, r2
 800a03c:	d00b      	beq.n	800a056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	4a4a      	ldr	r2, [pc, #296]	; (800a170 <UART_AdvFeatureConfig+0x144>)
 800a046:	4013      	ands	r3, r2
 800a048:	0019      	movs	r1, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05a:	2202      	movs	r2, #2
 800a05c:	4013      	ands	r3, r2
 800a05e:	d00b      	beq.n	800a078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	4a43      	ldr	r2, [pc, #268]	; (800a174 <UART_AdvFeatureConfig+0x148>)
 800a068:	4013      	ands	r3, r2
 800a06a:	0019      	movs	r1, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	430a      	orrs	r2, r1
 800a076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	2204      	movs	r2, #4
 800a07e:	4013      	ands	r3, r2
 800a080:	d00b      	beq.n	800a09a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	4a3b      	ldr	r2, [pc, #236]	; (800a178 <UART_AdvFeatureConfig+0x14c>)
 800a08a:	4013      	ands	r3, r2
 800a08c:	0019      	movs	r1, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	2208      	movs	r2, #8
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	d00b      	beq.n	800a0bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	4a34      	ldr	r2, [pc, #208]	; (800a17c <UART_AdvFeatureConfig+0x150>)
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	0019      	movs	r1, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	2210      	movs	r2, #16
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	d00b      	beq.n	800a0de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	4a2c      	ldr	r2, [pc, #176]	; (800a180 <UART_AdvFeatureConfig+0x154>)
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	0019      	movs	r1, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	d00b      	beq.n	800a100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	4a25      	ldr	r2, [pc, #148]	; (800a184 <UART_AdvFeatureConfig+0x158>)
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	0019      	movs	r1, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	2240      	movs	r2, #64	; 0x40
 800a106:	4013      	ands	r3, r2
 800a108:	d01d      	beq.n	800a146 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	4a1d      	ldr	r2, [pc, #116]	; (800a188 <UART_AdvFeatureConfig+0x15c>)
 800a112:	4013      	ands	r3, r2
 800a114:	0019      	movs	r1, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a126:	2380      	movs	r3, #128	; 0x80
 800a128:	035b      	lsls	r3, r3, #13
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d10b      	bne.n	800a146 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	4a15      	ldr	r2, [pc, #84]	; (800a18c <UART_AdvFeatureConfig+0x160>)
 800a136:	4013      	ands	r3, r2
 800a138:	0019      	movs	r1, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	2280      	movs	r2, #128	; 0x80
 800a14c:	4013      	ands	r3, r2
 800a14e:	d00b      	beq.n	800a168 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	4a0e      	ldr	r2, [pc, #56]	; (800a190 <UART_AdvFeatureConfig+0x164>)
 800a158:	4013      	ands	r3, r2
 800a15a:	0019      	movs	r1, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	605a      	str	r2, [r3, #4]
  }
}
 800a168:	46c0      	nop			; (mov r8, r8)
 800a16a:	46bd      	mov	sp, r7
 800a16c:	b002      	add	sp, #8
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	fffdffff 	.word	0xfffdffff
 800a174:	fffeffff 	.word	0xfffeffff
 800a178:	fffbffff 	.word	0xfffbffff
 800a17c:	ffff7fff 	.word	0xffff7fff
 800a180:	ffffefff 	.word	0xffffefff
 800a184:	ffffdfff 	.word	0xffffdfff
 800a188:	ffefffff 	.word	0xffefffff
 800a18c:	ff9fffff 	.word	0xff9fffff
 800a190:	fff7ffff 	.word	0xfff7ffff

0800a194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af02      	add	r7, sp, #8
 800a19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2280      	movs	r2, #128	; 0x80
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1a4:	f7fb fbb6 	bl	8005914 <HAL_GetTick>
 800a1a8:	0003      	movs	r3, r0
 800a1aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2208      	movs	r2, #8
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d10c      	bne.n	800a1d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2280      	movs	r2, #128	; 0x80
 800a1be:	0391      	lsls	r1, r2, #14
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	4a17      	ldr	r2, [pc, #92]	; (800a220 <UART_CheckIdleState+0x8c>)
 800a1c4:	9200      	str	r2, [sp, #0]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f000 f82c 	bl	800a224 <UART_WaitOnFlagUntilTimeout>
 800a1cc:	1e03      	subs	r3, r0, #0
 800a1ce:	d001      	beq.n	800a1d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e021      	b.n	800a218 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2204      	movs	r2, #4
 800a1dc:	4013      	ands	r3, r2
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d10c      	bne.n	800a1fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2280      	movs	r2, #128	; 0x80
 800a1e6:	03d1      	lsls	r1, r2, #15
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	4a0d      	ldr	r2, [pc, #52]	; (800a220 <UART_CheckIdleState+0x8c>)
 800a1ec:	9200      	str	r2, [sp, #0]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f000 f818 	bl	800a224 <UART_WaitOnFlagUntilTimeout>
 800a1f4:	1e03      	subs	r3, r0, #0
 800a1f6:	d001      	beq.n	800a1fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e00d      	b.n	800a218 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2220      	movs	r2, #32
 800a200:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2220      	movs	r2, #32
 800a206:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2274      	movs	r2, #116	; 0x74
 800a212:	2100      	movs	r1, #0
 800a214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	0018      	movs	r0, r3
 800a21a:	46bd      	mov	sp, r7
 800a21c:	b004      	add	sp, #16
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	01ffffff 	.word	0x01ffffff

0800a224 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	603b      	str	r3, [r7, #0]
 800a230:	1dfb      	adds	r3, r7, #7
 800a232:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a234:	e05e      	b.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	3301      	adds	r3, #1
 800a23a:	d05b      	beq.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a23c:	f7fb fb6a 	bl	8005914 <HAL_GetTick>
 800a240:	0002      	movs	r2, r0
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	69ba      	ldr	r2, [r7, #24]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d302      	bcc.n	800a252 <UART_WaitOnFlagUntilTimeout+0x2e>
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d11b      	bne.n	800a28a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	492f      	ldr	r1, [pc, #188]	; (800a31c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800a25e:	400a      	ands	r2, r1
 800a260:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2101      	movs	r1, #1
 800a26e:	438a      	bics	r2, r1
 800a270:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2220      	movs	r2, #32
 800a276:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2220      	movs	r2, #32
 800a27c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2274      	movs	r2, #116	; 0x74
 800a282:	2100      	movs	r1, #0
 800a284:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e044      	b.n	800a314 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2204      	movs	r2, #4
 800a292:	4013      	ands	r3, r2
 800a294:	d02e      	beq.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69da      	ldr	r2, [r3, #28]
 800a29c:	2380      	movs	r3, #128	; 0x80
 800a29e:	011b      	lsls	r3, r3, #4
 800a2a0:	401a      	ands	r2, r3
 800a2a2:	2380      	movs	r3, #128	; 0x80
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d124      	bne.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2280      	movs	r2, #128	; 0x80
 800a2b0:	0112      	lsls	r2, r2, #4
 800a2b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4917      	ldr	r1, [pc, #92]	; (800a31c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800a2c0:	400a      	ands	r2, r1
 800a2c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	438a      	bics	r2, r1
 800a2d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2220      	movs	r2, #32
 800a2d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2220      	movs	r2, #32
 800a2de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2280      	movs	r2, #128	; 0x80
 800a2e4:	2120      	movs	r1, #32
 800a2e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2274      	movs	r2, #116	; 0x74
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e00f      	b.n	800a314 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	425a      	negs	r2, r3
 800a304:	4153      	adcs	r3, r2
 800a306:	b2db      	uxtb	r3, r3
 800a308:	001a      	movs	r2, r3
 800a30a:	1dfb      	adds	r3, r7, #7
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d091      	beq.n	800a236 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	0018      	movs	r0, r3
 800a316:	46bd      	mov	sp, r7
 800a318:	b004      	add	sp, #16
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	fffffe5f 	.word	0xfffffe5f

0800a320 <__errno>:
 800a320:	4b01      	ldr	r3, [pc, #4]	; (800a328 <__errno+0x8>)
 800a322:	6818      	ldr	r0, [r3, #0]
 800a324:	4770      	bx	lr
 800a326:	46c0      	nop			; (mov r8, r8)
 800a328:	2000002c 	.word	0x2000002c

0800a32c <__libc_init_array>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	2600      	movs	r6, #0
 800a330:	4d0c      	ldr	r5, [pc, #48]	; (800a364 <__libc_init_array+0x38>)
 800a332:	4c0d      	ldr	r4, [pc, #52]	; (800a368 <__libc_init_array+0x3c>)
 800a334:	1b64      	subs	r4, r4, r5
 800a336:	10a4      	asrs	r4, r4, #2
 800a338:	42a6      	cmp	r6, r4
 800a33a:	d109      	bne.n	800a350 <__libc_init_array+0x24>
 800a33c:	2600      	movs	r6, #0
 800a33e:	f000 f8b7 	bl	800a4b0 <_init>
 800a342:	4d0a      	ldr	r5, [pc, #40]	; (800a36c <__libc_init_array+0x40>)
 800a344:	4c0a      	ldr	r4, [pc, #40]	; (800a370 <__libc_init_array+0x44>)
 800a346:	1b64      	subs	r4, r4, r5
 800a348:	10a4      	asrs	r4, r4, #2
 800a34a:	42a6      	cmp	r6, r4
 800a34c:	d105      	bne.n	800a35a <__libc_init_array+0x2e>
 800a34e:	bd70      	pop	{r4, r5, r6, pc}
 800a350:	00b3      	lsls	r3, r6, #2
 800a352:	58eb      	ldr	r3, [r5, r3]
 800a354:	4798      	blx	r3
 800a356:	3601      	adds	r6, #1
 800a358:	e7ee      	b.n	800a338 <__libc_init_array+0xc>
 800a35a:	00b3      	lsls	r3, r6, #2
 800a35c:	58eb      	ldr	r3, [r5, r3]
 800a35e:	4798      	blx	r3
 800a360:	3601      	adds	r6, #1
 800a362:	e7f2      	b.n	800a34a <__libc_init_array+0x1e>
 800a364:	0800b330 	.word	0x0800b330
 800a368:	0800b330 	.word	0x0800b330
 800a36c:	0800b330 	.word	0x0800b330
 800a370:	0800b334 	.word	0x0800b334

0800a374 <malloc>:
 800a374:	b510      	push	{r4, lr}
 800a376:	4b03      	ldr	r3, [pc, #12]	; (800a384 <malloc+0x10>)
 800a378:	0001      	movs	r1, r0
 800a37a:	6818      	ldr	r0, [r3, #0]
 800a37c:	f000 f816 	bl	800a3ac <_malloc_r>
 800a380:	bd10      	pop	{r4, pc}
 800a382:	46c0      	nop			; (mov r8, r8)
 800a384:	2000002c 	.word	0x2000002c

0800a388 <memcpy>:
 800a388:	2300      	movs	r3, #0
 800a38a:	b510      	push	{r4, lr}
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d100      	bne.n	800a392 <memcpy+0xa>
 800a390:	bd10      	pop	{r4, pc}
 800a392:	5ccc      	ldrb	r4, [r1, r3]
 800a394:	54c4      	strb	r4, [r0, r3]
 800a396:	3301      	adds	r3, #1
 800a398:	e7f8      	b.n	800a38c <memcpy+0x4>

0800a39a <memset>:
 800a39a:	0003      	movs	r3, r0
 800a39c:	1882      	adds	r2, r0, r2
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d100      	bne.n	800a3a4 <memset+0xa>
 800a3a2:	4770      	bx	lr
 800a3a4:	7019      	strb	r1, [r3, #0]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	e7f9      	b.n	800a39e <memset+0x4>
	...

0800a3ac <_malloc_r>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	1ccd      	adds	r5, r1, #3
 800a3b2:	439d      	bics	r5, r3
 800a3b4:	3508      	adds	r5, #8
 800a3b6:	0006      	movs	r6, r0
 800a3b8:	2d0c      	cmp	r5, #12
 800a3ba:	d21f      	bcs.n	800a3fc <_malloc_r+0x50>
 800a3bc:	250c      	movs	r5, #12
 800a3be:	42a9      	cmp	r1, r5
 800a3c0:	d81e      	bhi.n	800a400 <_malloc_r+0x54>
 800a3c2:	0030      	movs	r0, r6
 800a3c4:	f000 f862 	bl	800a48c <__malloc_lock>
 800a3c8:	4925      	ldr	r1, [pc, #148]	; (800a460 <_malloc_r+0xb4>)
 800a3ca:	680a      	ldr	r2, [r1, #0]
 800a3cc:	0014      	movs	r4, r2
 800a3ce:	2c00      	cmp	r4, #0
 800a3d0:	d11a      	bne.n	800a408 <_malloc_r+0x5c>
 800a3d2:	4f24      	ldr	r7, [pc, #144]	; (800a464 <_malloc_r+0xb8>)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d104      	bne.n	800a3e4 <_malloc_r+0x38>
 800a3da:	0021      	movs	r1, r4
 800a3dc:	0030      	movs	r0, r6
 800a3de:	f000 f843 	bl	800a468 <_sbrk_r>
 800a3e2:	6038      	str	r0, [r7, #0]
 800a3e4:	0029      	movs	r1, r5
 800a3e6:	0030      	movs	r0, r6
 800a3e8:	f000 f83e 	bl	800a468 <_sbrk_r>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d12b      	bne.n	800a448 <_malloc_r+0x9c>
 800a3f0:	230c      	movs	r3, #12
 800a3f2:	0030      	movs	r0, r6
 800a3f4:	6033      	str	r3, [r6, #0]
 800a3f6:	f000 f851 	bl	800a49c <__malloc_unlock>
 800a3fa:	e003      	b.n	800a404 <_malloc_r+0x58>
 800a3fc:	2d00      	cmp	r5, #0
 800a3fe:	dade      	bge.n	800a3be <_malloc_r+0x12>
 800a400:	230c      	movs	r3, #12
 800a402:	6033      	str	r3, [r6, #0]
 800a404:	2000      	movs	r0, #0
 800a406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	1b5b      	subs	r3, r3, r5
 800a40c:	d419      	bmi.n	800a442 <_malloc_r+0x96>
 800a40e:	2b0b      	cmp	r3, #11
 800a410:	d903      	bls.n	800a41a <_malloc_r+0x6e>
 800a412:	6023      	str	r3, [r4, #0]
 800a414:	18e4      	adds	r4, r4, r3
 800a416:	6025      	str	r5, [r4, #0]
 800a418:	e003      	b.n	800a422 <_malloc_r+0x76>
 800a41a:	6863      	ldr	r3, [r4, #4]
 800a41c:	42a2      	cmp	r2, r4
 800a41e:	d10e      	bne.n	800a43e <_malloc_r+0x92>
 800a420:	600b      	str	r3, [r1, #0]
 800a422:	0030      	movs	r0, r6
 800a424:	f000 f83a 	bl	800a49c <__malloc_unlock>
 800a428:	0020      	movs	r0, r4
 800a42a:	2207      	movs	r2, #7
 800a42c:	300b      	adds	r0, #11
 800a42e:	1d23      	adds	r3, r4, #4
 800a430:	4390      	bics	r0, r2
 800a432:	1ac2      	subs	r2, r0, r3
 800a434:	4298      	cmp	r0, r3
 800a436:	d0e6      	beq.n	800a406 <_malloc_r+0x5a>
 800a438:	1a1b      	subs	r3, r3, r0
 800a43a:	50a3      	str	r3, [r4, r2]
 800a43c:	e7e3      	b.n	800a406 <_malloc_r+0x5a>
 800a43e:	6053      	str	r3, [r2, #4]
 800a440:	e7ef      	b.n	800a422 <_malloc_r+0x76>
 800a442:	0022      	movs	r2, r4
 800a444:	6864      	ldr	r4, [r4, #4]
 800a446:	e7c2      	b.n	800a3ce <_malloc_r+0x22>
 800a448:	2303      	movs	r3, #3
 800a44a:	1cc4      	adds	r4, r0, #3
 800a44c:	439c      	bics	r4, r3
 800a44e:	42a0      	cmp	r0, r4
 800a450:	d0e1      	beq.n	800a416 <_malloc_r+0x6a>
 800a452:	1a21      	subs	r1, r4, r0
 800a454:	0030      	movs	r0, r6
 800a456:	f000 f807 	bl	800a468 <_sbrk_r>
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	d1db      	bne.n	800a416 <_malloc_r+0x6a>
 800a45e:	e7c7      	b.n	800a3f0 <_malloc_r+0x44>
 800a460:	20000100 	.word	0x20000100
 800a464:	20000104 	.word	0x20000104

0800a468 <_sbrk_r>:
 800a468:	2300      	movs	r3, #0
 800a46a:	b570      	push	{r4, r5, r6, lr}
 800a46c:	4d06      	ldr	r5, [pc, #24]	; (800a488 <_sbrk_r+0x20>)
 800a46e:	0004      	movs	r4, r0
 800a470:	0008      	movs	r0, r1
 800a472:	602b      	str	r3, [r5, #0]
 800a474:	f7fa febe 	bl	80051f4 <_sbrk>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d103      	bne.n	800a484 <_sbrk_r+0x1c>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d000      	beq.n	800a484 <_sbrk_r+0x1c>
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	bd70      	pop	{r4, r5, r6, pc}
 800a486:	46c0      	nop			; (mov r8, r8)
 800a488:	20000488 	.word	0x20000488

0800a48c <__malloc_lock>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	4802      	ldr	r0, [pc, #8]	; (800a498 <__malloc_lock+0xc>)
 800a490:	f000 f80c 	bl	800a4ac <__retarget_lock_acquire_recursive>
 800a494:	bd10      	pop	{r4, pc}
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	20000490 	.word	0x20000490

0800a49c <__malloc_unlock>:
 800a49c:	b510      	push	{r4, lr}
 800a49e:	4802      	ldr	r0, [pc, #8]	; (800a4a8 <__malloc_unlock+0xc>)
 800a4a0:	f000 f805 	bl	800a4ae <__retarget_lock_release_recursive>
 800a4a4:	bd10      	pop	{r4, pc}
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	20000490 	.word	0x20000490

0800a4ac <__retarget_lock_acquire_recursive>:
 800a4ac:	4770      	bx	lr

0800a4ae <__retarget_lock_release_recursive>:
 800a4ae:	4770      	bx	lr

0800a4b0 <_init>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	46c0      	nop			; (mov r8, r8)
 800a4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b6:	bc08      	pop	{r3}
 800a4b8:	469e      	mov	lr, r3
 800a4ba:	4770      	bx	lr

0800a4bc <_fini>:
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	46c0      	nop			; (mov r8, r8)
 800a4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c2:	bc08      	pop	{r3}
 800a4c4:	469e      	mov	lr, r3
 800a4c6:	4770      	bx	lr
