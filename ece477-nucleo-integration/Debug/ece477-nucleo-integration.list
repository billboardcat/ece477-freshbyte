
ece477-nucleo-integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cdc  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae94  0800ae94  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae94  0800ae94  0001ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae9c  0800ae9c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae9c  0800ae9c  0001ae9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aea0  0800aea0  0001aea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800aea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  2000008c  0800af30  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800af30  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae1e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004111  00000000  00000000  0003aed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0003efe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  00040630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017948  00000000  00000000  00041ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb45  00000000  00000000  00059418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008827e  00000000  00000000  00074f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd1db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ec  00000000  00000000  000fd230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a1a0 	.word	0x0800a1a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	0800a1a0 	.word	0x0800a1a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f001 fe24 	bl	8001f1c <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f001 fe1f 	bl	8001f1c <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_fadd>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	4646      	mov	r6, r8
 800044c:	46d6      	mov	lr, sl
 800044e:	464f      	mov	r7, r9
 8000450:	024d      	lsls	r5, r1, #9
 8000452:	0242      	lsls	r2, r0, #9
 8000454:	b5c0      	push	{r6, r7, lr}
 8000456:	0a52      	lsrs	r2, r2, #9
 8000458:	0a6e      	lsrs	r6, r5, #9
 800045a:	0047      	lsls	r7, r0, #1
 800045c:	46b0      	mov	r8, r6
 800045e:	0e3f      	lsrs	r7, r7, #24
 8000460:	004e      	lsls	r6, r1, #1
 8000462:	0fc4      	lsrs	r4, r0, #31
 8000464:	00d0      	lsls	r0, r2, #3
 8000466:	4694      	mov	ip, r2
 8000468:	003b      	movs	r3, r7
 800046a:	4682      	mov	sl, r0
 800046c:	0e36      	lsrs	r6, r6, #24
 800046e:	0fc9      	lsrs	r1, r1, #31
 8000470:	09ad      	lsrs	r5, r5, #6
 8000472:	428c      	cmp	r4, r1
 8000474:	d06d      	beq.n	8000552 <__aeabi_fadd+0x10a>
 8000476:	1bb8      	subs	r0, r7, r6
 8000478:	4681      	mov	r9, r0
 800047a:	2800      	cmp	r0, #0
 800047c:	dd4d      	ble.n	800051a <__aeabi_fadd+0xd2>
 800047e:	2e00      	cmp	r6, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_fadd+0x3c>
 8000482:	e088      	b.n	8000596 <__aeabi_fadd+0x14e>
 8000484:	2fff      	cmp	r7, #255	; 0xff
 8000486:	d05a      	beq.n	800053e <__aeabi_fadd+0xf6>
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	04db      	lsls	r3, r3, #19
 800048c:	431d      	orrs	r5, r3
 800048e:	464b      	mov	r3, r9
 8000490:	2201      	movs	r2, #1
 8000492:	2b1b      	cmp	r3, #27
 8000494:	dc0a      	bgt.n	80004ac <__aeabi_fadd+0x64>
 8000496:	002b      	movs	r3, r5
 8000498:	464a      	mov	r2, r9
 800049a:	4649      	mov	r1, r9
 800049c:	40d3      	lsrs	r3, r2
 800049e:	2220      	movs	r2, #32
 80004a0:	1a52      	subs	r2, r2, r1
 80004a2:	4095      	lsls	r5, r2
 80004a4:	002a      	movs	r2, r5
 80004a6:	1e55      	subs	r5, r2, #1
 80004a8:	41aa      	sbcs	r2, r5
 80004aa:	431a      	orrs	r2, r3
 80004ac:	4653      	mov	r3, sl
 80004ae:	1a9a      	subs	r2, r3, r2
 80004b0:	0153      	lsls	r3, r2, #5
 80004b2:	d400      	bmi.n	80004b6 <__aeabi_fadd+0x6e>
 80004b4:	e0b9      	b.n	800062a <__aeabi_fadd+0x1e2>
 80004b6:	0192      	lsls	r2, r2, #6
 80004b8:	0996      	lsrs	r6, r2, #6
 80004ba:	0030      	movs	r0, r6
 80004bc:	f001 fd10 	bl	8001ee0 <__clzsi2>
 80004c0:	3805      	subs	r0, #5
 80004c2:	4086      	lsls	r6, r0
 80004c4:	4287      	cmp	r7, r0
 80004c6:	dd00      	ble.n	80004ca <__aeabi_fadd+0x82>
 80004c8:	e0d4      	b.n	8000674 <__aeabi_fadd+0x22c>
 80004ca:	0033      	movs	r3, r6
 80004cc:	1bc7      	subs	r7, r0, r7
 80004ce:	2020      	movs	r0, #32
 80004d0:	3701      	adds	r7, #1
 80004d2:	40fb      	lsrs	r3, r7
 80004d4:	1bc7      	subs	r7, r0, r7
 80004d6:	40be      	lsls	r6, r7
 80004d8:	0032      	movs	r2, r6
 80004da:	1e56      	subs	r6, r2, #1
 80004dc:	41b2      	sbcs	r2, r6
 80004de:	2700      	movs	r7, #0
 80004e0:	431a      	orrs	r2, r3
 80004e2:	0753      	lsls	r3, r2, #29
 80004e4:	d004      	beq.n	80004f0 <__aeabi_fadd+0xa8>
 80004e6:	230f      	movs	r3, #15
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d000      	beq.n	80004f0 <__aeabi_fadd+0xa8>
 80004ee:	3204      	adds	r2, #4
 80004f0:	0153      	lsls	r3, r2, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0xae>
 80004f4:	e09c      	b.n	8000630 <__aeabi_fadd+0x1e8>
 80004f6:	1c7b      	adds	r3, r7, #1
 80004f8:	2ffe      	cmp	r7, #254	; 0xfe
 80004fa:	d100      	bne.n	80004fe <__aeabi_fadd+0xb6>
 80004fc:	e09a      	b.n	8000634 <__aeabi_fadd+0x1ec>
 80004fe:	0192      	lsls	r2, r2, #6
 8000500:	0a52      	lsrs	r2, r2, #9
 8000502:	4694      	mov	ip, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	05d8      	lsls	r0, r3, #23
 8000508:	4663      	mov	r3, ip
 800050a:	07e4      	lsls	r4, r4, #31
 800050c:	4318      	orrs	r0, r3
 800050e:	4320      	orrs	r0, r4
 8000510:	bce0      	pop	{r5, r6, r7}
 8000512:	46ba      	mov	sl, r7
 8000514:	46b1      	mov	r9, r6
 8000516:	46a8      	mov	r8, r5
 8000518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051a:	2800      	cmp	r0, #0
 800051c:	d049      	beq.n	80005b2 <__aeabi_fadd+0x16a>
 800051e:	1bf3      	subs	r3, r6, r7
 8000520:	2f00      	cmp	r7, #0
 8000522:	d000      	beq.n	8000526 <__aeabi_fadd+0xde>
 8000524:	e0b6      	b.n	8000694 <__aeabi_fadd+0x24c>
 8000526:	4652      	mov	r2, sl
 8000528:	2a00      	cmp	r2, #0
 800052a:	d060      	beq.n	80005ee <__aeabi_fadd+0x1a6>
 800052c:	3b01      	subs	r3, #1
 800052e:	2b00      	cmp	r3, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0xec>
 8000532:	e0fc      	b.n	800072e <__aeabi_fadd+0x2e6>
 8000534:	2eff      	cmp	r6, #255	; 0xff
 8000536:	d000      	beq.n	800053a <__aeabi_fadd+0xf2>
 8000538:	e0b4      	b.n	80006a4 <__aeabi_fadd+0x25c>
 800053a:	000c      	movs	r4, r1
 800053c:	4642      	mov	r2, r8
 800053e:	2a00      	cmp	r2, #0
 8000540:	d078      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 8000542:	2080      	movs	r0, #128	; 0x80
 8000544:	03c0      	lsls	r0, r0, #15
 8000546:	4310      	orrs	r0, r2
 8000548:	0242      	lsls	r2, r0, #9
 800054a:	0a53      	lsrs	r3, r2, #9
 800054c:	469c      	mov	ip, r3
 800054e:	23ff      	movs	r3, #255	; 0xff
 8000550:	e7d9      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000552:	1bb9      	subs	r1, r7, r6
 8000554:	2900      	cmp	r1, #0
 8000556:	dd71      	ble.n	800063c <__aeabi_fadd+0x1f4>
 8000558:	2e00      	cmp	r6, #0
 800055a:	d03f      	beq.n	80005dc <__aeabi_fadd+0x194>
 800055c:	2fff      	cmp	r7, #255	; 0xff
 800055e:	d0ee      	beq.n	800053e <__aeabi_fadd+0xf6>
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	04db      	lsls	r3, r3, #19
 8000564:	431d      	orrs	r5, r3
 8000566:	2201      	movs	r2, #1
 8000568:	291b      	cmp	r1, #27
 800056a:	dc07      	bgt.n	800057c <__aeabi_fadd+0x134>
 800056c:	002a      	movs	r2, r5
 800056e:	2320      	movs	r3, #32
 8000570:	40ca      	lsrs	r2, r1
 8000572:	1a59      	subs	r1, r3, r1
 8000574:	408d      	lsls	r5, r1
 8000576:	1e6b      	subs	r3, r5, #1
 8000578:	419d      	sbcs	r5, r3
 800057a:	432a      	orrs	r2, r5
 800057c:	4452      	add	r2, sl
 800057e:	0153      	lsls	r3, r2, #5
 8000580:	d553      	bpl.n	800062a <__aeabi_fadd+0x1e2>
 8000582:	3701      	adds	r7, #1
 8000584:	2fff      	cmp	r7, #255	; 0xff
 8000586:	d055      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 8000588:	2301      	movs	r3, #1
 800058a:	497b      	ldr	r1, [pc, #492]	; (8000778 <__aeabi_fadd+0x330>)
 800058c:	4013      	ands	r3, r2
 800058e:	0852      	lsrs	r2, r2, #1
 8000590:	400a      	ands	r2, r1
 8000592:	431a      	orrs	r2, r3
 8000594:	e7a5      	b.n	80004e2 <__aeabi_fadd+0x9a>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d02c      	beq.n	80005f4 <__aeabi_fadd+0x1ac>
 800059a:	2301      	movs	r3, #1
 800059c:	425b      	negs	r3, r3
 800059e:	469c      	mov	ip, r3
 80005a0:	44e1      	add	r9, ip
 80005a2:	464b      	mov	r3, r9
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x162>
 80005a8:	e0ad      	b.n	8000706 <__aeabi_fadd+0x2be>
 80005aa:	2fff      	cmp	r7, #255	; 0xff
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fadd+0x168>
 80005ae:	e76e      	b.n	800048e <__aeabi_fadd+0x46>
 80005b0:	e7c5      	b.n	800053e <__aeabi_fadd+0xf6>
 80005b2:	20fe      	movs	r0, #254	; 0xfe
 80005b4:	1c7e      	adds	r6, r7, #1
 80005b6:	4230      	tst	r0, r6
 80005b8:	d160      	bne.n	800067c <__aeabi_fadd+0x234>
 80005ba:	2f00      	cmp	r7, #0
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fadd+0x178>
 80005be:	e093      	b.n	80006e8 <__aeabi_fadd+0x2a0>
 80005c0:	4652      	mov	r2, sl
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x180>
 80005c6:	e0b6      	b.n	8000736 <__aeabi_fadd+0x2ee>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d09c      	beq.n	8000506 <__aeabi_fadd+0xbe>
 80005cc:	1b52      	subs	r2, r2, r5
 80005ce:	0150      	lsls	r0, r2, #5
 80005d0:	d400      	bmi.n	80005d4 <__aeabi_fadd+0x18c>
 80005d2:	e0c3      	b.n	800075c <__aeabi_fadd+0x314>
 80005d4:	4653      	mov	r3, sl
 80005d6:	000c      	movs	r4, r1
 80005d8:	1aea      	subs	r2, r5, r3
 80005da:	e782      	b.n	80004e2 <__aeabi_fadd+0x9a>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d009      	beq.n	80005f4 <__aeabi_fadd+0x1ac>
 80005e0:	3901      	subs	r1, #1
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x1a0>
 80005e6:	e08b      	b.n	8000700 <__aeabi_fadd+0x2b8>
 80005e8:	2fff      	cmp	r7, #255	; 0xff
 80005ea:	d1bc      	bne.n	8000566 <__aeabi_fadd+0x11e>
 80005ec:	e7a7      	b.n	800053e <__aeabi_fadd+0xf6>
 80005ee:	000c      	movs	r4, r1
 80005f0:	4642      	mov	r2, r8
 80005f2:	0037      	movs	r7, r6
 80005f4:	2fff      	cmp	r7, #255	; 0xff
 80005f6:	d0a2      	beq.n	800053e <__aeabi_fadd+0xf6>
 80005f8:	0252      	lsls	r2, r2, #9
 80005fa:	0a53      	lsrs	r3, r2, #9
 80005fc:	469c      	mov	ip, r3
 80005fe:	b2fb      	uxtb	r3, r7
 8000600:	e781      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000602:	21fe      	movs	r1, #254	; 0xfe
 8000604:	3701      	adds	r7, #1
 8000606:	4239      	tst	r1, r7
 8000608:	d165      	bne.n	80006d6 <__aeabi_fadd+0x28e>
 800060a:	2b00      	cmp	r3, #0
 800060c:	d17e      	bne.n	800070c <__aeabi_fadd+0x2c4>
 800060e:	2800      	cmp	r0, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_fadd+0x1cc>
 8000612:	e0aa      	b.n	800076a <__aeabi_fadd+0x322>
 8000614:	2d00      	cmp	r5, #0
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x1d2>
 8000618:	e775      	b.n	8000506 <__aeabi_fadd+0xbe>
 800061a:	002a      	movs	r2, r5
 800061c:	4452      	add	r2, sl
 800061e:	2700      	movs	r7, #0
 8000620:	0153      	lsls	r3, r2, #5
 8000622:	d502      	bpl.n	800062a <__aeabi_fadd+0x1e2>
 8000624:	4b55      	ldr	r3, [pc, #340]	; (800077c <__aeabi_fadd+0x334>)
 8000626:	3701      	adds	r7, #1
 8000628:	401a      	ands	r2, r3
 800062a:	0753      	lsls	r3, r2, #29
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x1e8>
 800062e:	e75a      	b.n	80004e6 <__aeabi_fadd+0x9e>
 8000630:	08d2      	lsrs	r2, r2, #3
 8000632:	e7df      	b.n	80005f4 <__aeabi_fadd+0x1ac>
 8000634:	2200      	movs	r2, #0
 8000636:	23ff      	movs	r3, #255	; 0xff
 8000638:	4694      	mov	ip, r2
 800063a:	e764      	b.n	8000506 <__aeabi_fadd+0xbe>
 800063c:	2900      	cmp	r1, #0
 800063e:	d0e0      	beq.n	8000602 <__aeabi_fadd+0x1ba>
 8000640:	1bf3      	subs	r3, r6, r7
 8000642:	2f00      	cmp	r7, #0
 8000644:	d03e      	beq.n	80006c4 <__aeabi_fadd+0x27c>
 8000646:	2eff      	cmp	r6, #255	; 0xff
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x204>
 800064a:	e777      	b.n	800053c <__aeabi_fadd+0xf4>
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0001      	movs	r1, r0
 8000650:	04d2      	lsls	r2, r2, #19
 8000652:	4311      	orrs	r1, r2
 8000654:	468a      	mov	sl, r1
 8000656:	2201      	movs	r2, #1
 8000658:	2b1b      	cmp	r3, #27
 800065a:	dc08      	bgt.n	800066e <__aeabi_fadd+0x226>
 800065c:	4652      	mov	r2, sl
 800065e:	2120      	movs	r1, #32
 8000660:	4650      	mov	r0, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	1acb      	subs	r3, r1, r3
 8000666:	4098      	lsls	r0, r3
 8000668:	1e43      	subs	r3, r0, #1
 800066a:	4198      	sbcs	r0, r3
 800066c:	4302      	orrs	r2, r0
 800066e:	0037      	movs	r7, r6
 8000670:	1952      	adds	r2, r2, r5
 8000672:	e784      	b.n	800057e <__aeabi_fadd+0x136>
 8000674:	4a41      	ldr	r2, [pc, #260]	; (800077c <__aeabi_fadd+0x334>)
 8000676:	1a3f      	subs	r7, r7, r0
 8000678:	4032      	ands	r2, r6
 800067a:	e732      	b.n	80004e2 <__aeabi_fadd+0x9a>
 800067c:	4653      	mov	r3, sl
 800067e:	1b5e      	subs	r6, r3, r5
 8000680:	0173      	lsls	r3, r6, #5
 8000682:	d42d      	bmi.n	80006e0 <__aeabi_fadd+0x298>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d000      	beq.n	800068a <__aeabi_fadd+0x242>
 8000688:	e717      	b.n	80004ba <__aeabi_fadd+0x72>
 800068a:	2200      	movs	r2, #0
 800068c:	2400      	movs	r4, #0
 800068e:	2300      	movs	r3, #0
 8000690:	4694      	mov	ip, r2
 8000692:	e738      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000694:	2eff      	cmp	r6, #255	; 0xff
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x252>
 8000698:	e74f      	b.n	800053a <__aeabi_fadd+0xf2>
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	4650      	mov	r0, sl
 800069e:	04d2      	lsls	r2, r2, #19
 80006a0:	4310      	orrs	r0, r2
 80006a2:	4682      	mov	sl, r0
 80006a4:	2201      	movs	r2, #1
 80006a6:	2b1b      	cmp	r3, #27
 80006a8:	dc08      	bgt.n	80006bc <__aeabi_fadd+0x274>
 80006aa:	4652      	mov	r2, sl
 80006ac:	2420      	movs	r4, #32
 80006ae:	4650      	mov	r0, sl
 80006b0:	40da      	lsrs	r2, r3
 80006b2:	1ae3      	subs	r3, r4, r3
 80006b4:	4098      	lsls	r0, r3
 80006b6:	1e43      	subs	r3, r0, #1
 80006b8:	4198      	sbcs	r0, r3
 80006ba:	4302      	orrs	r2, r0
 80006bc:	000c      	movs	r4, r1
 80006be:	0037      	movs	r7, r6
 80006c0:	1aaa      	subs	r2, r5, r2
 80006c2:	e6f5      	b.n	80004b0 <__aeabi_fadd+0x68>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d093      	beq.n	80005f0 <__aeabi_fadd+0x1a8>
 80006c8:	3b01      	subs	r3, #1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d04f      	beq.n	800076e <__aeabi_fadd+0x326>
 80006ce:	2eff      	cmp	r6, #255	; 0xff
 80006d0:	d1c1      	bne.n	8000656 <__aeabi_fadd+0x20e>
 80006d2:	4642      	mov	r2, r8
 80006d4:	e733      	b.n	800053e <__aeabi_fadd+0xf6>
 80006d6:	2fff      	cmp	r7, #255	; 0xff
 80006d8:	d0ac      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 80006da:	4455      	add	r5, sl
 80006dc:	086a      	lsrs	r2, r5, #1
 80006de:	e7a4      	b.n	800062a <__aeabi_fadd+0x1e2>
 80006e0:	4653      	mov	r3, sl
 80006e2:	000c      	movs	r4, r1
 80006e4:	1aee      	subs	r6, r5, r3
 80006e6:	e6e8      	b.n	80004ba <__aeabi_fadd+0x72>
 80006e8:	4653      	mov	r3, sl
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d128      	bne.n	8000740 <__aeabi_fadd+0x2f8>
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d000      	beq.n	80006f4 <__aeabi_fadd+0x2ac>
 80006f2:	e722      	b.n	800053a <__aeabi_fadd+0xf2>
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	03db      	lsls	r3, r3, #15
 80006f8:	469c      	mov	ip, r3
 80006fa:	2400      	movs	r4, #0
 80006fc:	23ff      	movs	r3, #255	; 0xff
 80006fe:	e702      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000700:	002a      	movs	r2, r5
 8000702:	4452      	add	r2, sl
 8000704:	e73b      	b.n	800057e <__aeabi_fadd+0x136>
 8000706:	4653      	mov	r3, sl
 8000708:	1b5a      	subs	r2, r3, r5
 800070a:	e6d1      	b.n	80004b0 <__aeabi_fadd+0x68>
 800070c:	2800      	cmp	r0, #0
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x2ca>
 8000710:	e714      	b.n	800053c <__aeabi_fadd+0xf4>
 8000712:	2d00      	cmp	r5, #0
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x2d0>
 8000716:	e712      	b.n	800053e <__aeabi_fadd+0xf6>
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	03db      	lsls	r3, r3, #15
 800071c:	421a      	tst	r2, r3
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x2da>
 8000720:	e70d      	b.n	800053e <__aeabi_fadd+0xf6>
 8000722:	4641      	mov	r1, r8
 8000724:	4219      	tst	r1, r3
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x2e2>
 8000728:	e709      	b.n	800053e <__aeabi_fadd+0xf6>
 800072a:	4642      	mov	r2, r8
 800072c:	e707      	b.n	800053e <__aeabi_fadd+0xf6>
 800072e:	000c      	movs	r4, r1
 8000730:	0037      	movs	r7, r6
 8000732:	1aaa      	subs	r2, r5, r2
 8000734:	e6bc      	b.n	80004b0 <__aeabi_fadd+0x68>
 8000736:	2d00      	cmp	r5, #0
 8000738:	d013      	beq.n	8000762 <__aeabi_fadd+0x31a>
 800073a:	000c      	movs	r4, r1
 800073c:	46c4      	mov	ip, r8
 800073e:	e6e2      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x2fe>
 8000744:	e6fb      	b.n	800053e <__aeabi_fadd+0xf6>
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	03db      	lsls	r3, r3, #15
 800074a:	421a      	tst	r2, r3
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x308>
 800074e:	e6f6      	b.n	800053e <__aeabi_fadd+0xf6>
 8000750:	4640      	mov	r0, r8
 8000752:	4218      	tst	r0, r3
 8000754:	d000      	beq.n	8000758 <__aeabi_fadd+0x310>
 8000756:	e6f2      	b.n	800053e <__aeabi_fadd+0xf6>
 8000758:	000c      	movs	r4, r1
 800075a:	e6ef      	b.n	800053c <__aeabi_fadd+0xf4>
 800075c:	2a00      	cmp	r2, #0
 800075e:	d000      	beq.n	8000762 <__aeabi_fadd+0x31a>
 8000760:	e763      	b.n	800062a <__aeabi_fadd+0x1e2>
 8000762:	2200      	movs	r2, #0
 8000764:	2400      	movs	r4, #0
 8000766:	4694      	mov	ip, r2
 8000768:	e6cd      	b.n	8000506 <__aeabi_fadd+0xbe>
 800076a:	46c4      	mov	ip, r8
 800076c:	e6cb      	b.n	8000506 <__aeabi_fadd+0xbe>
 800076e:	002a      	movs	r2, r5
 8000770:	0037      	movs	r7, r6
 8000772:	4452      	add	r2, sl
 8000774:	e703      	b.n	800057e <__aeabi_fadd+0x136>
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	7dffffff 	.word	0x7dffffff
 800077c:	fbffffff 	.word	0xfbffffff

08000780 <__aeabi_fdiv>:
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	464f      	mov	r7, r9
 8000784:	4646      	mov	r6, r8
 8000786:	46d6      	mov	lr, sl
 8000788:	0245      	lsls	r5, r0, #9
 800078a:	b5c0      	push	{r6, r7, lr}
 800078c:	0047      	lsls	r7, r0, #1
 800078e:	1c0c      	adds	r4, r1, #0
 8000790:	0a6d      	lsrs	r5, r5, #9
 8000792:	0e3f      	lsrs	r7, r7, #24
 8000794:	0fc6      	lsrs	r6, r0, #31
 8000796:	2f00      	cmp	r7, #0
 8000798:	d066      	beq.n	8000868 <__aeabi_fdiv+0xe8>
 800079a:	2fff      	cmp	r7, #255	; 0xff
 800079c:	d06c      	beq.n	8000878 <__aeabi_fdiv+0xf8>
 800079e:	2300      	movs	r3, #0
 80007a0:	00ea      	lsls	r2, r5, #3
 80007a2:	2580      	movs	r5, #128	; 0x80
 80007a4:	4699      	mov	r9, r3
 80007a6:	469a      	mov	sl, r3
 80007a8:	04ed      	lsls	r5, r5, #19
 80007aa:	4315      	orrs	r5, r2
 80007ac:	3f7f      	subs	r7, #127	; 0x7f
 80007ae:	0260      	lsls	r0, r4, #9
 80007b0:	0061      	lsls	r1, r4, #1
 80007b2:	0a43      	lsrs	r3, r0, #9
 80007b4:	4698      	mov	r8, r3
 80007b6:	0e09      	lsrs	r1, r1, #24
 80007b8:	0fe4      	lsrs	r4, r4, #31
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d048      	beq.n	8000850 <__aeabi_fdiv+0xd0>
 80007be:	29ff      	cmp	r1, #255	; 0xff
 80007c0:	d010      	beq.n	80007e4 <__aeabi_fdiv+0x64>
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	00d8      	lsls	r0, r3, #3
 80007c6:	04d2      	lsls	r2, r2, #19
 80007c8:	4302      	orrs	r2, r0
 80007ca:	4690      	mov	r8, r2
 80007cc:	2000      	movs	r0, #0
 80007ce:	397f      	subs	r1, #127	; 0x7f
 80007d0:	464a      	mov	r2, r9
 80007d2:	0033      	movs	r3, r6
 80007d4:	1a7f      	subs	r7, r7, r1
 80007d6:	4302      	orrs	r2, r0
 80007d8:	496c      	ldr	r1, [pc, #432]	; (800098c <__aeabi_fdiv+0x20c>)
 80007da:	0092      	lsls	r2, r2, #2
 80007dc:	588a      	ldr	r2, [r1, r2]
 80007de:	4063      	eors	r3, r4
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4697      	mov	pc, r2
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d16d      	bne.n	80008c4 <__aeabi_fdiv+0x144>
 80007e8:	2002      	movs	r0, #2
 80007ea:	3fff      	subs	r7, #255	; 0xff
 80007ec:	e033      	b.n	8000856 <__aeabi_fdiv+0xd6>
 80007ee:	2300      	movs	r3, #0
 80007f0:	4698      	mov	r8, r3
 80007f2:	0026      	movs	r6, r4
 80007f4:	4645      	mov	r5, r8
 80007f6:	4682      	mov	sl, r0
 80007f8:	4653      	mov	r3, sl
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d100      	bne.n	8000800 <__aeabi_fdiv+0x80>
 80007fe:	e07f      	b.n	8000900 <__aeabi_fdiv+0x180>
 8000800:	2b03      	cmp	r3, #3
 8000802:	d100      	bne.n	8000806 <__aeabi_fdiv+0x86>
 8000804:	e094      	b.n	8000930 <__aeabi_fdiv+0x1b0>
 8000806:	2b01      	cmp	r3, #1
 8000808:	d017      	beq.n	800083a <__aeabi_fdiv+0xba>
 800080a:	0038      	movs	r0, r7
 800080c:	307f      	adds	r0, #127	; 0x7f
 800080e:	2800      	cmp	r0, #0
 8000810:	dd5f      	ble.n	80008d2 <__aeabi_fdiv+0x152>
 8000812:	076b      	lsls	r3, r5, #29
 8000814:	d004      	beq.n	8000820 <__aeabi_fdiv+0xa0>
 8000816:	230f      	movs	r3, #15
 8000818:	402b      	ands	r3, r5
 800081a:	2b04      	cmp	r3, #4
 800081c:	d000      	beq.n	8000820 <__aeabi_fdiv+0xa0>
 800081e:	3504      	adds	r5, #4
 8000820:	012b      	lsls	r3, r5, #4
 8000822:	d503      	bpl.n	800082c <__aeabi_fdiv+0xac>
 8000824:	0038      	movs	r0, r7
 8000826:	4b5a      	ldr	r3, [pc, #360]	; (8000990 <__aeabi_fdiv+0x210>)
 8000828:	3080      	adds	r0, #128	; 0x80
 800082a:	401d      	ands	r5, r3
 800082c:	28fe      	cmp	r0, #254	; 0xfe
 800082e:	dc67      	bgt.n	8000900 <__aeabi_fdiv+0x180>
 8000830:	01ad      	lsls	r5, r5, #6
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	b2c0      	uxtb	r0, r0
 8000836:	e002      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000838:	001e      	movs	r6, r3
 800083a:	2000      	movs	r0, #0
 800083c:	2500      	movs	r5, #0
 800083e:	05c0      	lsls	r0, r0, #23
 8000840:	4328      	orrs	r0, r5
 8000842:	07f6      	lsls	r6, r6, #31
 8000844:	4330      	orrs	r0, r6
 8000846:	bce0      	pop	{r5, r6, r7}
 8000848:	46ba      	mov	sl, r7
 800084a:	46b1      	mov	r9, r6
 800084c:	46a8      	mov	r8, r5
 800084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000850:	2b00      	cmp	r3, #0
 8000852:	d12b      	bne.n	80008ac <__aeabi_fdiv+0x12c>
 8000854:	2001      	movs	r0, #1
 8000856:	464a      	mov	r2, r9
 8000858:	0033      	movs	r3, r6
 800085a:	494e      	ldr	r1, [pc, #312]	; (8000994 <__aeabi_fdiv+0x214>)
 800085c:	4302      	orrs	r2, r0
 800085e:	0092      	lsls	r2, r2, #2
 8000860:	588a      	ldr	r2, [r1, r2]
 8000862:	4063      	eors	r3, r4
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4697      	mov	pc, r2
 8000868:	2d00      	cmp	r5, #0
 800086a:	d113      	bne.n	8000894 <__aeabi_fdiv+0x114>
 800086c:	2304      	movs	r3, #4
 800086e:	4699      	mov	r9, r3
 8000870:	3b03      	subs	r3, #3
 8000872:	2700      	movs	r7, #0
 8000874:	469a      	mov	sl, r3
 8000876:	e79a      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000878:	2d00      	cmp	r5, #0
 800087a:	d105      	bne.n	8000888 <__aeabi_fdiv+0x108>
 800087c:	2308      	movs	r3, #8
 800087e:	4699      	mov	r9, r3
 8000880:	3b06      	subs	r3, #6
 8000882:	27ff      	movs	r7, #255	; 0xff
 8000884:	469a      	mov	sl, r3
 8000886:	e792      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000888:	230c      	movs	r3, #12
 800088a:	4699      	mov	r9, r3
 800088c:	3b09      	subs	r3, #9
 800088e:	27ff      	movs	r7, #255	; 0xff
 8000890:	469a      	mov	sl, r3
 8000892:	e78c      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000894:	0028      	movs	r0, r5
 8000896:	f001 fb23 	bl	8001ee0 <__clzsi2>
 800089a:	2776      	movs	r7, #118	; 0x76
 800089c:	1f43      	subs	r3, r0, #5
 800089e:	409d      	lsls	r5, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	427f      	negs	r7, r7
 80008a4:	4699      	mov	r9, r3
 80008a6:	469a      	mov	sl, r3
 80008a8:	1a3f      	subs	r7, r7, r0
 80008aa:	e780      	b.n	80007ae <__aeabi_fdiv+0x2e>
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fb17 	bl	8001ee0 <__clzsi2>
 80008b2:	4642      	mov	r2, r8
 80008b4:	1f43      	subs	r3, r0, #5
 80008b6:	2176      	movs	r1, #118	; 0x76
 80008b8:	409a      	lsls	r2, r3
 80008ba:	4249      	negs	r1, r1
 80008bc:	1a09      	subs	r1, r1, r0
 80008be:	4690      	mov	r8, r2
 80008c0:	2000      	movs	r0, #0
 80008c2:	e785      	b.n	80007d0 <__aeabi_fdiv+0x50>
 80008c4:	21ff      	movs	r1, #255	; 0xff
 80008c6:	2003      	movs	r0, #3
 80008c8:	e782      	b.n	80007d0 <__aeabi_fdiv+0x50>
 80008ca:	001e      	movs	r6, r3
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	2500      	movs	r5, #0
 80008d0:	e7b5      	b.n	800083e <__aeabi_fdiv+0xbe>
 80008d2:	2301      	movs	r3, #1
 80008d4:	1a1b      	subs	r3, r3, r0
 80008d6:	2b1b      	cmp	r3, #27
 80008d8:	dcaf      	bgt.n	800083a <__aeabi_fdiv+0xba>
 80008da:	379e      	adds	r7, #158	; 0x9e
 80008dc:	0029      	movs	r1, r5
 80008de:	40bd      	lsls	r5, r7
 80008e0:	40d9      	lsrs	r1, r3
 80008e2:	1e6a      	subs	r2, r5, #1
 80008e4:	4195      	sbcs	r5, r2
 80008e6:	430d      	orrs	r5, r1
 80008e8:	076b      	lsls	r3, r5, #29
 80008ea:	d004      	beq.n	80008f6 <__aeabi_fdiv+0x176>
 80008ec:	230f      	movs	r3, #15
 80008ee:	402b      	ands	r3, r5
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fdiv+0x176>
 80008f4:	3504      	adds	r5, #4
 80008f6:	016b      	lsls	r3, r5, #5
 80008f8:	d544      	bpl.n	8000984 <__aeabi_fdiv+0x204>
 80008fa:	2001      	movs	r0, #1
 80008fc:	2500      	movs	r5, #0
 80008fe:	e79e      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	2500      	movs	r5, #0
 8000904:	e79b      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000906:	2580      	movs	r5, #128	; 0x80
 8000908:	2600      	movs	r6, #0
 800090a:	20ff      	movs	r0, #255	; 0xff
 800090c:	03ed      	lsls	r5, r5, #15
 800090e:	e796      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000910:	2300      	movs	r3, #0
 8000912:	4698      	mov	r8, r3
 8000914:	2080      	movs	r0, #128	; 0x80
 8000916:	03c0      	lsls	r0, r0, #15
 8000918:	4205      	tst	r5, r0
 800091a:	d009      	beq.n	8000930 <__aeabi_fdiv+0x1b0>
 800091c:	4643      	mov	r3, r8
 800091e:	4203      	tst	r3, r0
 8000920:	d106      	bne.n	8000930 <__aeabi_fdiv+0x1b0>
 8000922:	4645      	mov	r5, r8
 8000924:	4305      	orrs	r5, r0
 8000926:	026d      	lsls	r5, r5, #9
 8000928:	0026      	movs	r6, r4
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	e786      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000930:	2080      	movs	r0, #128	; 0x80
 8000932:	03c0      	lsls	r0, r0, #15
 8000934:	4305      	orrs	r5, r0
 8000936:	026d      	lsls	r5, r5, #9
 8000938:	20ff      	movs	r0, #255	; 0xff
 800093a:	0a6d      	lsrs	r5, r5, #9
 800093c:	e77f      	b.n	800083e <__aeabi_fdiv+0xbe>
 800093e:	4641      	mov	r1, r8
 8000940:	016a      	lsls	r2, r5, #5
 8000942:	0148      	lsls	r0, r1, #5
 8000944:	4282      	cmp	r2, r0
 8000946:	d219      	bcs.n	800097c <__aeabi_fdiv+0x1fc>
 8000948:	211b      	movs	r1, #27
 800094a:	2500      	movs	r5, #0
 800094c:	3f01      	subs	r7, #1
 800094e:	2601      	movs	r6, #1
 8000950:	0014      	movs	r4, r2
 8000952:	006d      	lsls	r5, r5, #1
 8000954:	0052      	lsls	r2, r2, #1
 8000956:	2c00      	cmp	r4, #0
 8000958:	db01      	blt.n	800095e <__aeabi_fdiv+0x1de>
 800095a:	4290      	cmp	r0, r2
 800095c:	d801      	bhi.n	8000962 <__aeabi_fdiv+0x1e2>
 800095e:	1a12      	subs	r2, r2, r0
 8000960:	4335      	orrs	r5, r6
 8000962:	3901      	subs	r1, #1
 8000964:	2900      	cmp	r1, #0
 8000966:	d1f3      	bne.n	8000950 <__aeabi_fdiv+0x1d0>
 8000968:	1e50      	subs	r0, r2, #1
 800096a:	4182      	sbcs	r2, r0
 800096c:	0038      	movs	r0, r7
 800096e:	307f      	adds	r0, #127	; 0x7f
 8000970:	001e      	movs	r6, r3
 8000972:	4315      	orrs	r5, r2
 8000974:	2800      	cmp	r0, #0
 8000976:	dd00      	ble.n	800097a <__aeabi_fdiv+0x1fa>
 8000978:	e74b      	b.n	8000812 <__aeabi_fdiv+0x92>
 800097a:	e7aa      	b.n	80008d2 <__aeabi_fdiv+0x152>
 800097c:	211a      	movs	r1, #26
 800097e:	2501      	movs	r5, #1
 8000980:	1a12      	subs	r2, r2, r0
 8000982:	e7e4      	b.n	800094e <__aeabi_fdiv+0x1ce>
 8000984:	01ad      	lsls	r5, r5, #6
 8000986:	2000      	movs	r0, #0
 8000988:	0a6d      	lsrs	r5, r5, #9
 800098a:	e758      	b.n	800083e <__aeabi_fdiv+0xbe>
 800098c:	0800a76c 	.word	0x0800a76c
 8000990:	f7ffffff 	.word	0xf7ffffff
 8000994:	0800a7ac 	.word	0x0800a7ac

08000998 <__aeabi_fmul>:
 8000998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099a:	4657      	mov	r7, sl
 800099c:	464e      	mov	r6, r9
 800099e:	4645      	mov	r5, r8
 80009a0:	46de      	mov	lr, fp
 80009a2:	0244      	lsls	r4, r0, #9
 80009a4:	b5e0      	push	{r5, r6, r7, lr}
 80009a6:	0045      	lsls	r5, r0, #1
 80009a8:	1c0f      	adds	r7, r1, #0
 80009aa:	0a64      	lsrs	r4, r4, #9
 80009ac:	0e2d      	lsrs	r5, r5, #24
 80009ae:	0fc6      	lsrs	r6, r0, #31
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d047      	beq.n	8000a44 <__aeabi_fmul+0xac>
 80009b4:	2dff      	cmp	r5, #255	; 0xff
 80009b6:	d04d      	beq.n	8000a54 <__aeabi_fmul+0xbc>
 80009b8:	2300      	movs	r3, #0
 80009ba:	2080      	movs	r0, #128	; 0x80
 80009bc:	469a      	mov	sl, r3
 80009be:	469b      	mov	fp, r3
 80009c0:	00e4      	lsls	r4, r4, #3
 80009c2:	04c0      	lsls	r0, r0, #19
 80009c4:	4304      	orrs	r4, r0
 80009c6:	3d7f      	subs	r5, #127	; 0x7f
 80009c8:	0278      	lsls	r0, r7, #9
 80009ca:	0a43      	lsrs	r3, r0, #9
 80009cc:	4699      	mov	r9, r3
 80009ce:	007a      	lsls	r2, r7, #1
 80009d0:	0ffb      	lsrs	r3, r7, #31
 80009d2:	4698      	mov	r8, r3
 80009d4:	0e12      	lsrs	r2, r2, #24
 80009d6:	464b      	mov	r3, r9
 80009d8:	d044      	beq.n	8000a64 <__aeabi_fmul+0xcc>
 80009da:	2aff      	cmp	r2, #255	; 0xff
 80009dc:	d011      	beq.n	8000a02 <__aeabi_fmul+0x6a>
 80009de:	00d8      	lsls	r0, r3, #3
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	04db      	lsls	r3, r3, #19
 80009e4:	4303      	orrs	r3, r0
 80009e6:	4699      	mov	r9, r3
 80009e8:	2000      	movs	r0, #0
 80009ea:	3a7f      	subs	r2, #127	; 0x7f
 80009ec:	18ad      	adds	r5, r5, r2
 80009ee:	4647      	mov	r7, r8
 80009f0:	4653      	mov	r3, sl
 80009f2:	4077      	eors	r7, r6
 80009f4:	1c69      	adds	r1, r5, #1
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	d83f      	bhi.n	8000a7a <__aeabi_fmul+0xe2>
 80009fa:	4a72      	ldr	r2, [pc, #456]	; (8000bc4 <__aeabi_fmul+0x22c>)
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	58d3      	ldr	r3, [r2, r3]
 8000a00:	469f      	mov	pc, r3
 8000a02:	35ff      	adds	r5, #255	; 0xff
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fmul+0x72>
 8000a08:	e079      	b.n	8000afe <__aeabi_fmul+0x166>
 8000a0a:	4652      	mov	r2, sl
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	4692      	mov	sl, r2
 8000a12:	2002      	movs	r0, #2
 8000a14:	e7eb      	b.n	80009ee <__aeabi_fmul+0x56>
 8000a16:	4647      	mov	r7, r8
 8000a18:	464c      	mov	r4, r9
 8000a1a:	4683      	mov	fp, r0
 8000a1c:	465b      	mov	r3, fp
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d028      	beq.n	8000a74 <__aeabi_fmul+0xdc>
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fmul+0x90>
 8000a26:	e0c6      	b.n	8000bb6 <__aeabi_fmul+0x21e>
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d14f      	bne.n	8000acc <__aeabi_fmul+0x134>
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	2400      	movs	r4, #0
 8000a30:	05c0      	lsls	r0, r0, #23
 8000a32:	07ff      	lsls	r7, r7, #31
 8000a34:	4320      	orrs	r0, r4
 8000a36:	4338      	orrs	r0, r7
 8000a38:	bcf0      	pop	{r4, r5, r6, r7}
 8000a3a:	46bb      	mov	fp, r7
 8000a3c:	46b2      	mov	sl, r6
 8000a3e:	46a9      	mov	r9, r5
 8000a40:	46a0      	mov	r8, r4
 8000a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d171      	bne.n	8000b2c <__aeabi_fmul+0x194>
 8000a48:	2304      	movs	r3, #4
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	2500      	movs	r5, #0
 8000a50:	469b      	mov	fp, r3
 8000a52:	e7b9      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000a54:	2c00      	cmp	r4, #0
 8000a56:	d163      	bne.n	8000b20 <__aeabi_fmul+0x188>
 8000a58:	2308      	movs	r3, #8
 8000a5a:	469a      	mov	sl, r3
 8000a5c:	3b06      	subs	r3, #6
 8000a5e:	25ff      	movs	r5, #255	; 0xff
 8000a60:	469b      	mov	fp, r3
 8000a62:	e7b1      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d150      	bne.n	8000b0a <__aeabi_fmul+0x172>
 8000a68:	4652      	mov	r2, sl
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	4692      	mov	sl, r2
 8000a70:	2001      	movs	r0, #1
 8000a72:	e7bc      	b.n	80009ee <__aeabi_fmul+0x56>
 8000a74:	20ff      	movs	r0, #255	; 0xff
 8000a76:	2400      	movs	r4, #0
 8000a78:	e7da      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000a7a:	4648      	mov	r0, r9
 8000a7c:	0c26      	lsrs	r6, r4, #16
 8000a7e:	0424      	lsls	r4, r4, #16
 8000a80:	0c22      	lsrs	r2, r4, #16
 8000a82:	0404      	lsls	r4, r0, #16
 8000a84:	0c24      	lsrs	r4, r4, #16
 8000a86:	464b      	mov	r3, r9
 8000a88:	0020      	movs	r0, r4
 8000a8a:	0c1b      	lsrs	r3, r3, #16
 8000a8c:	4350      	muls	r0, r2
 8000a8e:	4374      	muls	r4, r6
 8000a90:	435a      	muls	r2, r3
 8000a92:	435e      	muls	r6, r3
 8000a94:	1912      	adds	r2, r2, r4
 8000a96:	0c03      	lsrs	r3, r0, #16
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	d903      	bls.n	8000aa6 <__aeabi_fmul+0x10e>
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	0252      	lsls	r2, r2, #9
 8000aa2:	4694      	mov	ip, r2
 8000aa4:	4466      	add	r6, ip
 8000aa6:	0400      	lsls	r0, r0, #16
 8000aa8:	041a      	lsls	r2, r3, #16
 8000aaa:	0c00      	lsrs	r0, r0, #16
 8000aac:	1812      	adds	r2, r2, r0
 8000aae:	0194      	lsls	r4, r2, #6
 8000ab0:	1e60      	subs	r0, r4, #1
 8000ab2:	4184      	sbcs	r4, r0
 8000ab4:	0c1b      	lsrs	r3, r3, #16
 8000ab6:	0e92      	lsrs	r2, r2, #26
 8000ab8:	199b      	adds	r3, r3, r6
 8000aba:	4314      	orrs	r4, r2
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	d572      	bpl.n	8000baa <__aeabi_fmul+0x212>
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	0863      	lsrs	r3, r4, #1
 8000ac8:	4004      	ands	r4, r0
 8000aca:	431c      	orrs	r4, r3
 8000acc:	0008      	movs	r0, r1
 8000ace:	307f      	adds	r0, #127	; 0x7f
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	dd3c      	ble.n	8000b4e <__aeabi_fmul+0x1b6>
 8000ad4:	0763      	lsls	r3, r4, #29
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_fmul+0x14a>
 8000ad8:	230f      	movs	r3, #15
 8000ada:	4023      	ands	r3, r4
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fmul+0x14a>
 8000ae0:	3404      	adds	r4, #4
 8000ae2:	0123      	lsls	r3, r4, #4
 8000ae4:	d503      	bpl.n	8000aee <__aeabi_fmul+0x156>
 8000ae6:	3180      	adds	r1, #128	; 0x80
 8000ae8:	0008      	movs	r0, r1
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <__aeabi_fmul+0x230>)
 8000aec:	401c      	ands	r4, r3
 8000aee:	28fe      	cmp	r0, #254	; 0xfe
 8000af0:	dcc0      	bgt.n	8000a74 <__aeabi_fmul+0xdc>
 8000af2:	01a4      	lsls	r4, r4, #6
 8000af4:	0a64      	lsrs	r4, r4, #9
 8000af6:	b2c0      	uxtb	r0, r0
 8000af8:	e79a      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000afa:	0037      	movs	r7, r6
 8000afc:	e78e      	b.n	8000a1c <__aeabi_fmul+0x84>
 8000afe:	4652      	mov	r2, sl
 8000b00:	2303      	movs	r3, #3
 8000b02:	431a      	orrs	r2, r3
 8000b04:	4692      	mov	sl, r2
 8000b06:	2003      	movs	r0, #3
 8000b08:	e771      	b.n	80009ee <__aeabi_fmul+0x56>
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	f001 f9e8 	bl	8001ee0 <__clzsi2>
 8000b10:	464a      	mov	r2, r9
 8000b12:	1f43      	subs	r3, r0, #5
 8000b14:	409a      	lsls	r2, r3
 8000b16:	1a2d      	subs	r5, r5, r0
 8000b18:	4691      	mov	r9, r2
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	3d76      	subs	r5, #118	; 0x76
 8000b1e:	e766      	b.n	80009ee <__aeabi_fmul+0x56>
 8000b20:	230c      	movs	r3, #12
 8000b22:	469a      	mov	sl, r3
 8000b24:	3b09      	subs	r3, #9
 8000b26:	25ff      	movs	r5, #255	; 0xff
 8000b28:	469b      	mov	fp, r3
 8000b2a:	e74d      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000b2c:	0020      	movs	r0, r4
 8000b2e:	f001 f9d7 	bl	8001ee0 <__clzsi2>
 8000b32:	2576      	movs	r5, #118	; 0x76
 8000b34:	1f43      	subs	r3, r0, #5
 8000b36:	409c      	lsls	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	426d      	negs	r5, r5
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	469b      	mov	fp, r3
 8000b40:	1a2d      	subs	r5, r5, r0
 8000b42:	e741      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000b44:	2480      	movs	r4, #128	; 0x80
 8000b46:	2700      	movs	r7, #0
 8000b48:	20ff      	movs	r0, #255	; 0xff
 8000b4a:	03e4      	lsls	r4, r4, #15
 8000b4c:	e770      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	1a1b      	subs	r3, r3, r0
 8000b52:	2b1b      	cmp	r3, #27
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_fmul+0x1c0>
 8000b56:	e769      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000b58:	319e      	adds	r1, #158	; 0x9e
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	408c      	lsls	r4, r1
 8000b5e:	40d8      	lsrs	r0, r3
 8000b60:	1e63      	subs	r3, r4, #1
 8000b62:	419c      	sbcs	r4, r3
 8000b64:	4304      	orrs	r4, r0
 8000b66:	0763      	lsls	r3, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x1dc>
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	4023      	ands	r3, r4
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x1dc>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0163      	lsls	r3, r4, #5
 8000b76:	d51a      	bpl.n	8000bae <__aeabi_fmul+0x216>
 8000b78:	2001      	movs	r0, #1
 8000b7a:	2400      	movs	r4, #0
 8000b7c:	e758      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000b7e:	2080      	movs	r0, #128	; 0x80
 8000b80:	03c0      	lsls	r0, r0, #15
 8000b82:	4204      	tst	r4, r0
 8000b84:	d009      	beq.n	8000b9a <__aeabi_fmul+0x202>
 8000b86:	464b      	mov	r3, r9
 8000b88:	4203      	tst	r3, r0
 8000b8a:	d106      	bne.n	8000b9a <__aeabi_fmul+0x202>
 8000b8c:	464c      	mov	r4, r9
 8000b8e:	4304      	orrs	r4, r0
 8000b90:	0264      	lsls	r4, r4, #9
 8000b92:	4647      	mov	r7, r8
 8000b94:	20ff      	movs	r0, #255	; 0xff
 8000b96:	0a64      	lsrs	r4, r4, #9
 8000b98:	e74a      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000b9a:	2080      	movs	r0, #128	; 0x80
 8000b9c:	03c0      	lsls	r0, r0, #15
 8000b9e:	4304      	orrs	r4, r0
 8000ba0:	0264      	lsls	r4, r4, #9
 8000ba2:	0037      	movs	r7, r6
 8000ba4:	20ff      	movs	r0, #255	; 0xff
 8000ba6:	0a64      	lsrs	r4, r4, #9
 8000ba8:	e742      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000baa:	0029      	movs	r1, r5
 8000bac:	e78e      	b.n	8000acc <__aeabi_fmul+0x134>
 8000bae:	01a4      	lsls	r4, r4, #6
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	e73c      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000bb6:	2080      	movs	r0, #128	; 0x80
 8000bb8:	03c0      	lsls	r0, r0, #15
 8000bba:	4304      	orrs	r4, r0
 8000bbc:	0264      	lsls	r4, r4, #9
 8000bbe:	20ff      	movs	r0, #255	; 0xff
 8000bc0:	0a64      	lsrs	r4, r4, #9
 8000bc2:	e735      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000bc4:	0800a7ec 	.word	0x0800a7ec
 8000bc8:	f7ffffff 	.word	0xf7ffffff

08000bcc <__aeabi_f2iz>:
 8000bcc:	0241      	lsls	r1, r0, #9
 8000bce:	0042      	lsls	r2, r0, #1
 8000bd0:	0fc3      	lsrs	r3, r0, #31
 8000bd2:	0a49      	lsrs	r1, r1, #9
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	2a7e      	cmp	r2, #126	; 0x7e
 8000bda:	d903      	bls.n	8000be4 <__aeabi_f2iz+0x18>
 8000bdc:	2a9d      	cmp	r2, #157	; 0x9d
 8000bde:	d902      	bls.n	8000be6 <__aeabi_f2iz+0x1a>
 8000be0:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <__aeabi_f2iz+0x3c>)
 8000be2:	1898      	adds	r0, r3, r2
 8000be4:	4770      	bx	lr
 8000be6:	2080      	movs	r0, #128	; 0x80
 8000be8:	0400      	lsls	r0, r0, #16
 8000bea:	4301      	orrs	r1, r0
 8000bec:	2a95      	cmp	r2, #149	; 0x95
 8000bee:	dc07      	bgt.n	8000c00 <__aeabi_f2iz+0x34>
 8000bf0:	2096      	movs	r0, #150	; 0x96
 8000bf2:	1a82      	subs	r2, r0, r2
 8000bf4:	40d1      	lsrs	r1, r2
 8000bf6:	4248      	negs	r0, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1f3      	bne.n	8000be4 <__aeabi_f2iz+0x18>
 8000bfc:	0008      	movs	r0, r1
 8000bfe:	e7f1      	b.n	8000be4 <__aeabi_f2iz+0x18>
 8000c00:	3a96      	subs	r2, #150	; 0x96
 8000c02:	4091      	lsls	r1, r2
 8000c04:	e7f7      	b.n	8000bf6 <__aeabi_f2iz+0x2a>
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	7fffffff 	.word	0x7fffffff

08000c0c <__aeabi_i2f>:
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d013      	beq.n	8000c3a <__aeabi_i2f+0x2e>
 8000c12:	17c3      	asrs	r3, r0, #31
 8000c14:	18c5      	adds	r5, r0, r3
 8000c16:	405d      	eors	r5, r3
 8000c18:	0fc4      	lsrs	r4, r0, #31
 8000c1a:	0028      	movs	r0, r5
 8000c1c:	f001 f960 	bl	8001ee0 <__clzsi2>
 8000c20:	239e      	movs	r3, #158	; 0x9e
 8000c22:	0001      	movs	r1, r0
 8000c24:	1a1b      	subs	r3, r3, r0
 8000c26:	2b96      	cmp	r3, #150	; 0x96
 8000c28:	dc0f      	bgt.n	8000c4a <__aeabi_i2f+0x3e>
 8000c2a:	2808      	cmp	r0, #8
 8000c2c:	dd01      	ble.n	8000c32 <__aeabi_i2f+0x26>
 8000c2e:	3908      	subs	r1, #8
 8000c30:	408d      	lsls	r5, r1
 8000c32:	026d      	lsls	r5, r5, #9
 8000c34:	0a6d      	lsrs	r5, r5, #9
 8000c36:	b2d8      	uxtb	r0, r3
 8000c38:	e002      	b.n	8000c40 <__aeabi_i2f+0x34>
 8000c3a:	2400      	movs	r4, #0
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	2500      	movs	r5, #0
 8000c40:	05c0      	lsls	r0, r0, #23
 8000c42:	4328      	orrs	r0, r5
 8000c44:	07e4      	lsls	r4, r4, #31
 8000c46:	4320      	orrs	r0, r4
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
 8000c4a:	2b99      	cmp	r3, #153	; 0x99
 8000c4c:	dd0b      	ble.n	8000c66 <__aeabi_i2f+0x5a>
 8000c4e:	2205      	movs	r2, #5
 8000c50:	002e      	movs	r6, r5
 8000c52:	1a12      	subs	r2, r2, r0
 8000c54:	40d6      	lsrs	r6, r2
 8000c56:	0002      	movs	r2, r0
 8000c58:	321b      	adds	r2, #27
 8000c5a:	4095      	lsls	r5, r2
 8000c5c:	0028      	movs	r0, r5
 8000c5e:	1e45      	subs	r5, r0, #1
 8000c60:	41a8      	sbcs	r0, r5
 8000c62:	0035      	movs	r5, r6
 8000c64:	4305      	orrs	r5, r0
 8000c66:	2905      	cmp	r1, #5
 8000c68:	dd01      	ble.n	8000c6e <__aeabi_i2f+0x62>
 8000c6a:	1f4a      	subs	r2, r1, #5
 8000c6c:	4095      	lsls	r5, r2
 8000c6e:	002a      	movs	r2, r5
 8000c70:	4e08      	ldr	r6, [pc, #32]	; (8000c94 <__aeabi_i2f+0x88>)
 8000c72:	4032      	ands	r2, r6
 8000c74:	0768      	lsls	r0, r5, #29
 8000c76:	d009      	beq.n	8000c8c <__aeabi_i2f+0x80>
 8000c78:	200f      	movs	r0, #15
 8000c7a:	4028      	ands	r0, r5
 8000c7c:	2804      	cmp	r0, #4
 8000c7e:	d005      	beq.n	8000c8c <__aeabi_i2f+0x80>
 8000c80:	3204      	adds	r2, #4
 8000c82:	0150      	lsls	r0, r2, #5
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_i2f+0x80>
 8000c86:	239f      	movs	r3, #159	; 0x9f
 8000c88:	4032      	ands	r2, r6
 8000c8a:	1a5b      	subs	r3, r3, r1
 8000c8c:	0192      	lsls	r2, r2, #6
 8000c8e:	0a55      	lsrs	r5, r2, #9
 8000c90:	b2d8      	uxtb	r0, r3
 8000c92:	e7d5      	b.n	8000c40 <__aeabi_i2f+0x34>
 8000c94:	fbffffff 	.word	0xfbffffff

08000c98 <__aeabi_dadd>:
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	464f      	mov	r7, r9
 8000c9c:	46d6      	mov	lr, sl
 8000c9e:	4646      	mov	r6, r8
 8000ca0:	000d      	movs	r5, r1
 8000ca2:	0001      	movs	r1, r0
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	b5c0      	push	{r6, r7, lr}
 8000ca8:	0017      	movs	r7, r2
 8000caa:	032b      	lsls	r3, r5, #12
 8000cac:	0a5a      	lsrs	r2, r3, #9
 8000cae:	0f4b      	lsrs	r3, r1, #29
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	00ca      	lsls	r2, r1, #3
 8000cb4:	4691      	mov	r9, r2
 8000cb6:	0302      	lsls	r2, r0, #12
 8000cb8:	006e      	lsls	r6, r5, #1
 8000cba:	0041      	lsls	r1, r0, #1
 8000cbc:	0a52      	lsrs	r2, r2, #9
 8000cbe:	0fec      	lsrs	r4, r5, #31
 8000cc0:	0f7d      	lsrs	r5, r7, #29
 8000cc2:	4315      	orrs	r5, r2
 8000cc4:	0d76      	lsrs	r6, r6, #21
 8000cc6:	0d49      	lsrs	r1, r1, #21
 8000cc8:	0fc0      	lsrs	r0, r0, #31
 8000cca:	4682      	mov	sl, r0
 8000ccc:	46ac      	mov	ip, r5
 8000cce:	00ff      	lsls	r7, r7, #3
 8000cd0:	1a72      	subs	r2, r6, r1
 8000cd2:	4284      	cmp	r4, r0
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dadd+0x40>
 8000cd6:	e098      	b.n	8000e0a <__aeabi_dadd+0x172>
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	dc00      	bgt.n	8000cde <__aeabi_dadd+0x46>
 8000cdc:	e081      	b.n	8000de2 <__aeabi_dadd+0x14a>
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x4c>
 8000ce2:	e0b6      	b.n	8000e52 <__aeabi_dadd+0x1ba>
 8000ce4:	49c9      	ldr	r1, [pc, #804]	; (800100c <__aeabi_dadd+0x374>)
 8000ce6:	428e      	cmp	r6, r1
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x54>
 8000cea:	e172      	b.n	8000fd2 <__aeabi_dadd+0x33a>
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0028      	movs	r0, r5
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	4308      	orrs	r0, r1
 8000cf4:	4684      	mov	ip, r0
 8000cf6:	2a38      	cmp	r2, #56	; 0x38
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dadd+0x64>
 8000cfa:	e15e      	b.n	8000fba <__aeabi_dadd+0x322>
 8000cfc:	2a1f      	cmp	r2, #31
 8000cfe:	dd00      	ble.n	8000d02 <__aeabi_dadd+0x6a>
 8000d00:	e1ee      	b.n	80010e0 <__aeabi_dadd+0x448>
 8000d02:	2020      	movs	r0, #32
 8000d04:	0039      	movs	r1, r7
 8000d06:	4665      	mov	r5, ip
 8000d08:	1a80      	subs	r0, r0, r2
 8000d0a:	4087      	lsls	r7, r0
 8000d0c:	40d1      	lsrs	r1, r2
 8000d0e:	4085      	lsls	r5, r0
 8000d10:	430d      	orrs	r5, r1
 8000d12:	0039      	movs	r1, r7
 8000d14:	1e4f      	subs	r7, r1, #1
 8000d16:	41b9      	sbcs	r1, r7
 8000d18:	4667      	mov	r7, ip
 8000d1a:	40d7      	lsrs	r7, r2
 8000d1c:	4329      	orrs	r1, r5
 8000d1e:	1bdb      	subs	r3, r3, r7
 8000d20:	464a      	mov	r2, r9
 8000d22:	1a55      	subs	r5, r2, r1
 8000d24:	45a9      	cmp	r9, r5
 8000d26:	4189      	sbcs	r1, r1
 8000d28:	4249      	negs	r1, r1
 8000d2a:	1a5b      	subs	r3, r3, r1
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	4643      	mov	r3, r8
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	d400      	bmi.n	8000d36 <__aeabi_dadd+0x9e>
 8000d34:	e0cc      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8000d36:	4643      	mov	r3, r8
 8000d38:	025b      	lsls	r3, r3, #9
 8000d3a:	0a5b      	lsrs	r3, r3, #9
 8000d3c:	4698      	mov	r8, r3
 8000d3e:	4643      	mov	r3, r8
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d100      	bne.n	8000d46 <__aeabi_dadd+0xae>
 8000d44:	e12c      	b.n	8000fa0 <__aeabi_dadd+0x308>
 8000d46:	4640      	mov	r0, r8
 8000d48:	f001 f8ca 	bl	8001ee0 <__clzsi2>
 8000d4c:	0001      	movs	r1, r0
 8000d4e:	3908      	subs	r1, #8
 8000d50:	2220      	movs	r2, #32
 8000d52:	0028      	movs	r0, r5
 8000d54:	4643      	mov	r3, r8
 8000d56:	1a52      	subs	r2, r2, r1
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	40d0      	lsrs	r0, r2
 8000d5c:	408d      	lsls	r5, r1
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	428e      	cmp	r6, r1
 8000d62:	dd00      	ble.n	8000d66 <__aeabi_dadd+0xce>
 8000d64:	e117      	b.n	8000f96 <__aeabi_dadd+0x2fe>
 8000d66:	1b8e      	subs	r6, r1, r6
 8000d68:	1c72      	adds	r2, r6, #1
 8000d6a:	2a1f      	cmp	r2, #31
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_dadd+0xd8>
 8000d6e:	e1a7      	b.n	80010c0 <__aeabi_dadd+0x428>
 8000d70:	2120      	movs	r1, #32
 8000d72:	0018      	movs	r0, r3
 8000d74:	002e      	movs	r6, r5
 8000d76:	1a89      	subs	r1, r1, r2
 8000d78:	408d      	lsls	r5, r1
 8000d7a:	4088      	lsls	r0, r1
 8000d7c:	40d6      	lsrs	r6, r2
 8000d7e:	40d3      	lsrs	r3, r2
 8000d80:	1e69      	subs	r1, r5, #1
 8000d82:	418d      	sbcs	r5, r1
 8000d84:	4330      	orrs	r0, r6
 8000d86:	4698      	mov	r8, r3
 8000d88:	2600      	movs	r6, #0
 8000d8a:	4305      	orrs	r5, r0
 8000d8c:	076b      	lsls	r3, r5, #29
 8000d8e:	d009      	beq.n	8000da4 <__aeabi_dadd+0x10c>
 8000d90:	230f      	movs	r3, #15
 8000d92:	402b      	ands	r3, r5
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d005      	beq.n	8000da4 <__aeabi_dadd+0x10c>
 8000d98:	1d2b      	adds	r3, r5, #4
 8000d9a:	42ab      	cmp	r3, r5
 8000d9c:	41ad      	sbcs	r5, r5
 8000d9e:	426d      	negs	r5, r5
 8000da0:	44a8      	add	r8, r5
 8000da2:	001d      	movs	r5, r3
 8000da4:	4643      	mov	r3, r8
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	d400      	bmi.n	8000dac <__aeabi_dadd+0x114>
 8000daa:	e094      	b.n	8000ed6 <__aeabi_dadd+0x23e>
 8000dac:	4b97      	ldr	r3, [pc, #604]	; (800100c <__aeabi_dadd+0x374>)
 8000dae:	1c72      	adds	r2, r6, #1
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dadd+0x11e>
 8000db4:	e09d      	b.n	8000ef2 <__aeabi_dadd+0x25a>
 8000db6:	4641      	mov	r1, r8
 8000db8:	4b95      	ldr	r3, [pc, #596]	; (8001010 <__aeabi_dadd+0x378>)
 8000dba:	08ed      	lsrs	r5, r5, #3
 8000dbc:	4019      	ands	r1, r3
 8000dbe:	000b      	movs	r3, r1
 8000dc0:	0552      	lsls	r2, r2, #21
 8000dc2:	0749      	lsls	r1, r1, #29
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	4329      	orrs	r1, r5
 8000dc8:	0b1b      	lsrs	r3, r3, #12
 8000dca:	0d52      	lsrs	r2, r2, #21
 8000dcc:	0512      	lsls	r2, r2, #20
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	07e4      	lsls	r4, r4, #31
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	0008      	movs	r0, r1
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	bce0      	pop	{r5, r6, r7}
 8000dda:	46ba      	mov	sl, r7
 8000ddc:	46b1      	mov	r9, r6
 8000dde:	46a8      	mov	r8, r5
 8000de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d043      	beq.n	8000e6e <__aeabi_dadd+0x1d6>
 8000de6:	1b8a      	subs	r2, r1, r6
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d000      	beq.n	8000dee <__aeabi_dadd+0x156>
 8000dec:	e12a      	b.n	8001044 <__aeabi_dadd+0x3ac>
 8000dee:	464c      	mov	r4, r9
 8000df0:	431c      	orrs	r4, r3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dadd+0x15e>
 8000df4:	e1d1      	b.n	800119a <__aeabi_dadd+0x502>
 8000df6:	1e54      	subs	r4, r2, #1
 8000df8:	2a01      	cmp	r2, #1
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x166>
 8000dfc:	e21f      	b.n	800123e <__aeabi_dadd+0x5a6>
 8000dfe:	4d83      	ldr	r5, [pc, #524]	; (800100c <__aeabi_dadd+0x374>)
 8000e00:	42aa      	cmp	r2, r5
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x16e>
 8000e04:	e272      	b.n	80012ec <__aeabi_dadd+0x654>
 8000e06:	0022      	movs	r2, r4
 8000e08:	e123      	b.n	8001052 <__aeabi_dadd+0x3ba>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	dc00      	bgt.n	8000e10 <__aeabi_dadd+0x178>
 8000e0e:	e098      	b.n	8000f42 <__aeabi_dadd+0x2aa>
 8000e10:	2900      	cmp	r1, #0
 8000e12:	d042      	beq.n	8000e9a <__aeabi_dadd+0x202>
 8000e14:	497d      	ldr	r1, [pc, #500]	; (800100c <__aeabi_dadd+0x374>)
 8000e16:	428e      	cmp	r6, r1
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dadd+0x184>
 8000e1a:	e0da      	b.n	8000fd2 <__aeabi_dadd+0x33a>
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	0028      	movs	r0, r5
 8000e20:	0409      	lsls	r1, r1, #16
 8000e22:	4308      	orrs	r0, r1
 8000e24:	4684      	mov	ip, r0
 8000e26:	2a38      	cmp	r2, #56	; 0x38
 8000e28:	dd00      	ble.n	8000e2c <__aeabi_dadd+0x194>
 8000e2a:	e129      	b.n	8001080 <__aeabi_dadd+0x3e8>
 8000e2c:	2a1f      	cmp	r2, #31
 8000e2e:	dc00      	bgt.n	8000e32 <__aeabi_dadd+0x19a>
 8000e30:	e187      	b.n	8001142 <__aeabi_dadd+0x4aa>
 8000e32:	0011      	movs	r1, r2
 8000e34:	4665      	mov	r5, ip
 8000e36:	3920      	subs	r1, #32
 8000e38:	40cd      	lsrs	r5, r1
 8000e3a:	2a20      	cmp	r2, #32
 8000e3c:	d004      	beq.n	8000e48 <__aeabi_dadd+0x1b0>
 8000e3e:	2040      	movs	r0, #64	; 0x40
 8000e40:	4661      	mov	r1, ip
 8000e42:	1a82      	subs	r2, r0, r2
 8000e44:	4091      	lsls	r1, r2
 8000e46:	430f      	orrs	r7, r1
 8000e48:	0039      	movs	r1, r7
 8000e4a:	1e4f      	subs	r7, r1, #1
 8000e4c:	41b9      	sbcs	r1, r7
 8000e4e:	430d      	orrs	r5, r1
 8000e50:	e11b      	b.n	800108a <__aeabi_dadd+0x3f2>
 8000e52:	0029      	movs	r1, r5
 8000e54:	4339      	orrs	r1, r7
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dadd+0x1c2>
 8000e58:	e0b5      	b.n	8000fc6 <__aeabi_dadd+0x32e>
 8000e5a:	1e51      	subs	r1, r2, #1
 8000e5c:	2a01      	cmp	r2, #1
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x1ca>
 8000e60:	e1ab      	b.n	80011ba <__aeabi_dadd+0x522>
 8000e62:	486a      	ldr	r0, [pc, #424]	; (800100c <__aeabi_dadd+0x374>)
 8000e64:	4282      	cmp	r2, r0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dadd+0x1d2>
 8000e68:	e1b2      	b.n	80011d0 <__aeabi_dadd+0x538>
 8000e6a:	000a      	movs	r2, r1
 8000e6c:	e743      	b.n	8000cf6 <__aeabi_dadd+0x5e>
 8000e6e:	4969      	ldr	r1, [pc, #420]	; (8001014 <__aeabi_dadd+0x37c>)
 8000e70:	1c75      	adds	r5, r6, #1
 8000e72:	420d      	tst	r5, r1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_dadd+0x1e0>
 8000e76:	e0cf      	b.n	8001018 <__aeabi_dadd+0x380>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d000      	beq.n	8000e7e <__aeabi_dadd+0x1e6>
 8000e7c:	e193      	b.n	80011a6 <__aeabi_dadd+0x50e>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	4319      	orrs	r1, r3
 8000e82:	d100      	bne.n	8000e86 <__aeabi_dadd+0x1ee>
 8000e84:	e1d1      	b.n	800122a <__aeabi_dadd+0x592>
 8000e86:	4661      	mov	r1, ip
 8000e88:	4339      	orrs	r1, r7
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_dadd+0x1f6>
 8000e8c:	e1e3      	b.n	8001256 <__aeabi_dadd+0x5be>
 8000e8e:	4649      	mov	r1, r9
 8000e90:	0758      	lsls	r0, r3, #29
 8000e92:	08c9      	lsrs	r1, r1, #3
 8000e94:	4301      	orrs	r1, r0
 8000e96:	08db      	lsrs	r3, r3, #3
 8000e98:	e026      	b.n	8000ee8 <__aeabi_dadd+0x250>
 8000e9a:	0029      	movs	r1, r5
 8000e9c:	4339      	orrs	r1, r7
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dadd+0x20a>
 8000ea0:	e091      	b.n	8000fc6 <__aeabi_dadd+0x32e>
 8000ea2:	1e51      	subs	r1, r2, #1
 8000ea4:	2a01      	cmp	r2, #1
 8000ea6:	d005      	beq.n	8000eb4 <__aeabi_dadd+0x21c>
 8000ea8:	4858      	ldr	r0, [pc, #352]	; (800100c <__aeabi_dadd+0x374>)
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_dadd+0x218>
 8000eae:	e18f      	b.n	80011d0 <__aeabi_dadd+0x538>
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	e7b8      	b.n	8000e26 <__aeabi_dadd+0x18e>
 8000eb4:	003d      	movs	r5, r7
 8000eb6:	444d      	add	r5, r9
 8000eb8:	454d      	cmp	r5, r9
 8000eba:	4189      	sbcs	r1, r1
 8000ebc:	4463      	add	r3, ip
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	4249      	negs	r1, r1
 8000ec2:	4488      	add	r8, r1
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	2602      	movs	r6, #2
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	d500      	bpl.n	8000ece <__aeabi_dadd+0x236>
 8000ecc:	e0eb      	b.n	80010a6 <__aeabi_dadd+0x40e>
 8000ece:	3e01      	subs	r6, #1
 8000ed0:	076b      	lsls	r3, r5, #29
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_dadd+0x23e>
 8000ed4:	e75c      	b.n	8000d90 <__aeabi_dadd+0xf8>
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	08e9      	lsrs	r1, r5, #3
 8000eda:	075a      	lsls	r2, r3, #29
 8000edc:	4311      	orrs	r1, r2
 8000ede:	0032      	movs	r2, r6
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	484a      	ldr	r0, [pc, #296]	; (800100c <__aeabi_dadd+0x374>)
 8000ee4:	4282      	cmp	r2, r0
 8000ee6:	d021      	beq.n	8000f2c <__aeabi_dadd+0x294>
 8000ee8:	031b      	lsls	r3, r3, #12
 8000eea:	0552      	lsls	r2, r2, #21
 8000eec:	0b1b      	lsrs	r3, r3, #12
 8000eee:	0d52      	lsrs	r2, r2, #21
 8000ef0:	e76c      	b.n	8000dcc <__aeabi_dadd+0x134>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	e769      	b.n	8000dcc <__aeabi_dadd+0x134>
 8000ef8:	002a      	movs	r2, r5
 8000efa:	433a      	orrs	r2, r7
 8000efc:	d069      	beq.n	8000fd2 <__aeabi_dadd+0x33a>
 8000efe:	464a      	mov	r2, r9
 8000f00:	0758      	lsls	r0, r3, #29
 8000f02:	08d1      	lsrs	r1, r2, #3
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	031b      	lsls	r3, r3, #12
 8000f0a:	4308      	orrs	r0, r1
 8000f0c:	421a      	tst	r2, r3
 8000f0e:	d007      	beq.n	8000f20 <__aeabi_dadd+0x288>
 8000f10:	0029      	movs	r1, r5
 8000f12:	08ed      	lsrs	r5, r5, #3
 8000f14:	421d      	tst	r5, r3
 8000f16:	d103      	bne.n	8000f20 <__aeabi_dadd+0x288>
 8000f18:	002a      	movs	r2, r5
 8000f1a:	08ff      	lsrs	r7, r7, #3
 8000f1c:	0748      	lsls	r0, r1, #29
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0f43      	lsrs	r3, r0, #29
 8000f22:	00c1      	lsls	r1, r0, #3
 8000f24:	075b      	lsls	r3, r3, #29
 8000f26:	08c9      	lsrs	r1, r1, #3
 8000f28:	4319      	orrs	r1, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dadd+0x29c>
 8000f32:	e213      	b.n	800135c <__aeabi_dadd+0x6c4>
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	0312      	lsls	r2, r2, #12
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	4a33      	ldr	r2, [pc, #204]	; (800100c <__aeabi_dadd+0x374>)
 8000f3e:	0b1b      	lsrs	r3, r3, #12
 8000f40:	e744      	b.n	8000dcc <__aeabi_dadd+0x134>
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d04b      	beq.n	8000fde <__aeabi_dadd+0x346>
 8000f46:	1b8a      	subs	r2, r1, r6
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_dadd+0x2b6>
 8000f4c:	e0e7      	b.n	800111e <__aeabi_dadd+0x486>
 8000f4e:	482f      	ldr	r0, [pc, #188]	; (800100c <__aeabi_dadd+0x374>)
 8000f50:	4281      	cmp	r1, r0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dadd+0x2be>
 8000f54:	e195      	b.n	8001282 <__aeabi_dadd+0x5ea>
 8000f56:	2080      	movs	r0, #128	; 0x80
 8000f58:	0400      	lsls	r0, r0, #16
 8000f5a:	4303      	orrs	r3, r0
 8000f5c:	2a38      	cmp	r2, #56	; 0x38
 8000f5e:	dd00      	ble.n	8000f62 <__aeabi_dadd+0x2ca>
 8000f60:	e143      	b.n	80011ea <__aeabi_dadd+0x552>
 8000f62:	2a1f      	cmp	r2, #31
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_dadd+0x2d0>
 8000f66:	e1db      	b.n	8001320 <__aeabi_dadd+0x688>
 8000f68:	2020      	movs	r0, #32
 8000f6a:	001d      	movs	r5, r3
 8000f6c:	464e      	mov	r6, r9
 8000f6e:	1a80      	subs	r0, r0, r2
 8000f70:	4085      	lsls	r5, r0
 8000f72:	40d6      	lsrs	r6, r2
 8000f74:	4335      	orrs	r5, r6
 8000f76:	464e      	mov	r6, r9
 8000f78:	4086      	lsls	r6, r0
 8000f7a:	0030      	movs	r0, r6
 8000f7c:	40d3      	lsrs	r3, r2
 8000f7e:	1e46      	subs	r6, r0, #1
 8000f80:	41b0      	sbcs	r0, r6
 8000f82:	449c      	add	ip, r3
 8000f84:	4305      	orrs	r5, r0
 8000f86:	19ed      	adds	r5, r5, r7
 8000f88:	42bd      	cmp	r5, r7
 8000f8a:	419b      	sbcs	r3, r3
 8000f8c:	425b      	negs	r3, r3
 8000f8e:	4463      	add	r3, ip
 8000f90:	4698      	mov	r8, r3
 8000f92:	000e      	movs	r6, r1
 8000f94:	e07f      	b.n	8001096 <__aeabi_dadd+0x3fe>
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <__aeabi_dadd+0x378>)
 8000f98:	1a76      	subs	r6, r6, r1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	4698      	mov	r8, r3
 8000f9e:	e6f5      	b.n	8000d8c <__aeabi_dadd+0xf4>
 8000fa0:	0028      	movs	r0, r5
 8000fa2:	f000 ff9d 	bl	8001ee0 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	3118      	adds	r1, #24
 8000faa:	291f      	cmp	r1, #31
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_dadd+0x318>
 8000fae:	e6cf      	b.n	8000d50 <__aeabi_dadd+0xb8>
 8000fb0:	002b      	movs	r3, r5
 8000fb2:	3808      	subs	r0, #8
 8000fb4:	4083      	lsls	r3, r0
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	e6d2      	b.n	8000d60 <__aeabi_dadd+0xc8>
 8000fba:	4662      	mov	r2, ip
 8000fbc:	433a      	orrs	r2, r7
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	1e4f      	subs	r7, r1, #1
 8000fc2:	41b9      	sbcs	r1, r7
 8000fc4:	e6ac      	b.n	8000d20 <__aeabi_dadd+0x88>
 8000fc6:	4649      	mov	r1, r9
 8000fc8:	0758      	lsls	r0, r3, #29
 8000fca:	08c9      	lsrs	r1, r1, #3
 8000fcc:	4301      	orrs	r1, r0
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	e787      	b.n	8000ee2 <__aeabi_dadd+0x24a>
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	075a      	lsls	r2, r3, #29
 8000fd6:	08c9      	lsrs	r1, r1, #3
 8000fd8:	4311      	orrs	r1, r2
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	e7a6      	b.n	8000f2c <__aeabi_dadd+0x294>
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <__aeabi_dadd+0x37c>)
 8000fe0:	1c70      	adds	r0, r6, #1
 8000fe2:	4208      	tst	r0, r1
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_dadd+0x350>
 8000fe6:	e0bb      	b.n	8001160 <__aeabi_dadd+0x4c8>
 8000fe8:	2e00      	cmp	r6, #0
 8000fea:	d000      	beq.n	8000fee <__aeabi_dadd+0x356>
 8000fec:	e114      	b.n	8001218 <__aeabi_dadd+0x580>
 8000fee:	4649      	mov	r1, r9
 8000ff0:	4319      	orrs	r1, r3
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dadd+0x35e>
 8000ff4:	e175      	b.n	80012e2 <__aeabi_dadd+0x64a>
 8000ff6:	0029      	movs	r1, r5
 8000ff8:	4339      	orrs	r1, r7
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_dadd+0x366>
 8000ffc:	e17e      	b.n	80012fc <__aeabi_dadd+0x664>
 8000ffe:	4649      	mov	r1, r9
 8001000:	0758      	lsls	r0, r3, #29
 8001002:	08c9      	lsrs	r1, r1, #3
 8001004:	4301      	orrs	r1, r0
 8001006:	08db      	lsrs	r3, r3, #3
 8001008:	e76e      	b.n	8000ee8 <__aeabi_dadd+0x250>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	000007ff 	.word	0x000007ff
 8001010:	ff7fffff 	.word	0xff7fffff
 8001014:	000007fe 	.word	0x000007fe
 8001018:	4649      	mov	r1, r9
 800101a:	1bcd      	subs	r5, r1, r7
 800101c:	4661      	mov	r1, ip
 800101e:	1a58      	subs	r0, r3, r1
 8001020:	45a9      	cmp	r9, r5
 8001022:	4189      	sbcs	r1, r1
 8001024:	4249      	negs	r1, r1
 8001026:	4688      	mov	r8, r1
 8001028:	0001      	movs	r1, r0
 800102a:	4640      	mov	r0, r8
 800102c:	1a09      	subs	r1, r1, r0
 800102e:	4688      	mov	r8, r1
 8001030:	0209      	lsls	r1, r1, #8
 8001032:	d500      	bpl.n	8001036 <__aeabi_dadd+0x39e>
 8001034:	e0a6      	b.n	8001184 <__aeabi_dadd+0x4ec>
 8001036:	4641      	mov	r1, r8
 8001038:	4329      	orrs	r1, r5
 800103a:	d000      	beq.n	800103e <__aeabi_dadd+0x3a6>
 800103c:	e67f      	b.n	8000d3e <__aeabi_dadd+0xa6>
 800103e:	2300      	movs	r3, #0
 8001040:	2400      	movs	r4, #0
 8001042:	e751      	b.n	8000ee8 <__aeabi_dadd+0x250>
 8001044:	4cc7      	ldr	r4, [pc, #796]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001046:	42a1      	cmp	r1, r4
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x3b4>
 800104a:	e0c7      	b.n	80011dc <__aeabi_dadd+0x544>
 800104c:	2480      	movs	r4, #128	; 0x80
 800104e:	0424      	lsls	r4, r4, #16
 8001050:	4323      	orrs	r3, r4
 8001052:	2a38      	cmp	r2, #56	; 0x38
 8001054:	dc54      	bgt.n	8001100 <__aeabi_dadd+0x468>
 8001056:	2a1f      	cmp	r2, #31
 8001058:	dd00      	ble.n	800105c <__aeabi_dadd+0x3c4>
 800105a:	e0cc      	b.n	80011f6 <__aeabi_dadd+0x55e>
 800105c:	2420      	movs	r4, #32
 800105e:	4648      	mov	r0, r9
 8001060:	1aa4      	subs	r4, r4, r2
 8001062:	001d      	movs	r5, r3
 8001064:	464e      	mov	r6, r9
 8001066:	40a0      	lsls	r0, r4
 8001068:	40d6      	lsrs	r6, r2
 800106a:	40a5      	lsls	r5, r4
 800106c:	0004      	movs	r4, r0
 800106e:	40d3      	lsrs	r3, r2
 8001070:	4662      	mov	r2, ip
 8001072:	4335      	orrs	r5, r6
 8001074:	1e66      	subs	r6, r4, #1
 8001076:	41b4      	sbcs	r4, r6
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	469c      	mov	ip, r3
 800107c:	4325      	orrs	r5, r4
 800107e:	e044      	b.n	800110a <__aeabi_dadd+0x472>
 8001080:	4662      	mov	r2, ip
 8001082:	433a      	orrs	r2, r7
 8001084:	0015      	movs	r5, r2
 8001086:	1e6f      	subs	r7, r5, #1
 8001088:	41bd      	sbcs	r5, r7
 800108a:	444d      	add	r5, r9
 800108c:	454d      	cmp	r5, r9
 800108e:	4189      	sbcs	r1, r1
 8001090:	4249      	negs	r1, r1
 8001092:	4688      	mov	r8, r1
 8001094:	4498      	add	r8, r3
 8001096:	4643      	mov	r3, r8
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	d400      	bmi.n	800109e <__aeabi_dadd+0x406>
 800109c:	e718      	b.n	8000ed0 <__aeabi_dadd+0x238>
 800109e:	4bb1      	ldr	r3, [pc, #708]	; (8001364 <__aeabi_dadd+0x6cc>)
 80010a0:	3601      	adds	r6, #1
 80010a2:	429e      	cmp	r6, r3
 80010a4:	d049      	beq.n	800113a <__aeabi_dadd+0x4a2>
 80010a6:	4642      	mov	r2, r8
 80010a8:	4baf      	ldr	r3, [pc, #700]	; (8001368 <__aeabi_dadd+0x6d0>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	401a      	ands	r2, r3
 80010ae:	0013      	movs	r3, r2
 80010b0:	086a      	lsrs	r2, r5, #1
 80010b2:	400d      	ands	r5, r1
 80010b4:	4315      	orrs	r5, r2
 80010b6:	07d9      	lsls	r1, r3, #31
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	4698      	mov	r8, r3
 80010bc:	430d      	orrs	r5, r1
 80010be:	e665      	b.n	8000d8c <__aeabi_dadd+0xf4>
 80010c0:	0018      	movs	r0, r3
 80010c2:	3e1f      	subs	r6, #31
 80010c4:	40f0      	lsrs	r0, r6
 80010c6:	2a20      	cmp	r2, #32
 80010c8:	d003      	beq.n	80010d2 <__aeabi_dadd+0x43a>
 80010ca:	2140      	movs	r1, #64	; 0x40
 80010cc:	1a8a      	subs	r2, r1, r2
 80010ce:	4093      	lsls	r3, r2
 80010d0:	431d      	orrs	r5, r3
 80010d2:	1e69      	subs	r1, r5, #1
 80010d4:	418d      	sbcs	r5, r1
 80010d6:	2300      	movs	r3, #0
 80010d8:	2600      	movs	r6, #0
 80010da:	4698      	mov	r8, r3
 80010dc:	4305      	orrs	r5, r0
 80010de:	e6f7      	b.n	8000ed0 <__aeabi_dadd+0x238>
 80010e0:	0011      	movs	r1, r2
 80010e2:	4665      	mov	r5, ip
 80010e4:	3920      	subs	r1, #32
 80010e6:	40cd      	lsrs	r5, r1
 80010e8:	2a20      	cmp	r2, #32
 80010ea:	d004      	beq.n	80010f6 <__aeabi_dadd+0x45e>
 80010ec:	2040      	movs	r0, #64	; 0x40
 80010ee:	4661      	mov	r1, ip
 80010f0:	1a82      	subs	r2, r0, r2
 80010f2:	4091      	lsls	r1, r2
 80010f4:	430f      	orrs	r7, r1
 80010f6:	0039      	movs	r1, r7
 80010f8:	1e4f      	subs	r7, r1, #1
 80010fa:	41b9      	sbcs	r1, r7
 80010fc:	4329      	orrs	r1, r5
 80010fe:	e60f      	b.n	8000d20 <__aeabi_dadd+0x88>
 8001100:	464a      	mov	r2, r9
 8001102:	4313      	orrs	r3, r2
 8001104:	001d      	movs	r5, r3
 8001106:	1e6b      	subs	r3, r5, #1
 8001108:	419d      	sbcs	r5, r3
 800110a:	1b7d      	subs	r5, r7, r5
 800110c:	42af      	cmp	r7, r5
 800110e:	419b      	sbcs	r3, r3
 8001110:	4662      	mov	r2, ip
 8001112:	425b      	negs	r3, r3
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	4698      	mov	r8, r3
 8001118:	4654      	mov	r4, sl
 800111a:	000e      	movs	r6, r1
 800111c:	e607      	b.n	8000d2e <__aeabi_dadd+0x96>
 800111e:	4648      	mov	r0, r9
 8001120:	4318      	orrs	r0, r3
 8001122:	d100      	bne.n	8001126 <__aeabi_dadd+0x48e>
 8001124:	e0b3      	b.n	800128e <__aeabi_dadd+0x5f6>
 8001126:	1e50      	subs	r0, r2, #1
 8001128:	2a01      	cmp	r2, #1
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x496>
 800112c:	e10d      	b.n	800134a <__aeabi_dadd+0x6b2>
 800112e:	4d8d      	ldr	r5, [pc, #564]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001130:	42aa      	cmp	r2, r5
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x49e>
 8001134:	e0a5      	b.n	8001282 <__aeabi_dadd+0x5ea>
 8001136:	0002      	movs	r2, r0
 8001138:	e710      	b.n	8000f5c <__aeabi_dadd+0x2c4>
 800113a:	0032      	movs	r2, r6
 800113c:	2300      	movs	r3, #0
 800113e:	2100      	movs	r1, #0
 8001140:	e644      	b.n	8000dcc <__aeabi_dadd+0x134>
 8001142:	2120      	movs	r1, #32
 8001144:	0038      	movs	r0, r7
 8001146:	1a89      	subs	r1, r1, r2
 8001148:	4665      	mov	r5, ip
 800114a:	408f      	lsls	r7, r1
 800114c:	408d      	lsls	r5, r1
 800114e:	40d0      	lsrs	r0, r2
 8001150:	1e79      	subs	r1, r7, #1
 8001152:	418f      	sbcs	r7, r1
 8001154:	4305      	orrs	r5, r0
 8001156:	433d      	orrs	r5, r7
 8001158:	4667      	mov	r7, ip
 800115a:	40d7      	lsrs	r7, r2
 800115c:	19db      	adds	r3, r3, r7
 800115e:	e794      	b.n	800108a <__aeabi_dadd+0x3f2>
 8001160:	4a80      	ldr	r2, [pc, #512]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001162:	4290      	cmp	r0, r2
 8001164:	d100      	bne.n	8001168 <__aeabi_dadd+0x4d0>
 8001166:	e0ec      	b.n	8001342 <__aeabi_dadd+0x6aa>
 8001168:	0039      	movs	r1, r7
 800116a:	4449      	add	r1, r9
 800116c:	4549      	cmp	r1, r9
 800116e:	4192      	sbcs	r2, r2
 8001170:	4463      	add	r3, ip
 8001172:	4252      	negs	r2, r2
 8001174:	189b      	adds	r3, r3, r2
 8001176:	07dd      	lsls	r5, r3, #31
 8001178:	0849      	lsrs	r1, r1, #1
 800117a:	085b      	lsrs	r3, r3, #1
 800117c:	4698      	mov	r8, r3
 800117e:	0006      	movs	r6, r0
 8001180:	430d      	orrs	r5, r1
 8001182:	e6a5      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8001184:	464a      	mov	r2, r9
 8001186:	1abd      	subs	r5, r7, r2
 8001188:	42af      	cmp	r7, r5
 800118a:	4189      	sbcs	r1, r1
 800118c:	4662      	mov	r2, ip
 800118e:	4249      	negs	r1, r1
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	1a5b      	subs	r3, r3, r1
 8001194:	4698      	mov	r8, r3
 8001196:	4654      	mov	r4, sl
 8001198:	e5d1      	b.n	8000d3e <__aeabi_dadd+0xa6>
 800119a:	076c      	lsls	r4, r5, #29
 800119c:	08f9      	lsrs	r1, r7, #3
 800119e:	4321      	orrs	r1, r4
 80011a0:	08eb      	lsrs	r3, r5, #3
 80011a2:	0004      	movs	r4, r0
 80011a4:	e69d      	b.n	8000ee2 <__aeabi_dadd+0x24a>
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	d175      	bne.n	8001298 <__aeabi_dadd+0x600>
 80011ac:	4661      	mov	r1, ip
 80011ae:	4339      	orrs	r1, r7
 80011b0:	d114      	bne.n	80011dc <__aeabi_dadd+0x544>
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	2400      	movs	r4, #0
 80011b6:	031b      	lsls	r3, r3, #12
 80011b8:	e6bc      	b.n	8000f34 <__aeabi_dadd+0x29c>
 80011ba:	464a      	mov	r2, r9
 80011bc:	1bd5      	subs	r5, r2, r7
 80011be:	45a9      	cmp	r9, r5
 80011c0:	4189      	sbcs	r1, r1
 80011c2:	4662      	mov	r2, ip
 80011c4:	4249      	negs	r1, r1
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	1a5b      	subs	r3, r3, r1
 80011ca:	4698      	mov	r8, r3
 80011cc:	2601      	movs	r6, #1
 80011ce:	e5ae      	b.n	8000d2e <__aeabi_dadd+0x96>
 80011d0:	464a      	mov	r2, r9
 80011d2:	08d1      	lsrs	r1, r2, #3
 80011d4:	075a      	lsls	r2, r3, #29
 80011d6:	4311      	orrs	r1, r2
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	e6a7      	b.n	8000f2c <__aeabi_dadd+0x294>
 80011dc:	4663      	mov	r3, ip
 80011de:	08f9      	lsrs	r1, r7, #3
 80011e0:	075a      	lsls	r2, r3, #29
 80011e2:	4654      	mov	r4, sl
 80011e4:	4311      	orrs	r1, r2
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	e6a0      	b.n	8000f2c <__aeabi_dadd+0x294>
 80011ea:	464a      	mov	r2, r9
 80011ec:	4313      	orrs	r3, r2
 80011ee:	001d      	movs	r5, r3
 80011f0:	1e6b      	subs	r3, r5, #1
 80011f2:	419d      	sbcs	r5, r3
 80011f4:	e6c7      	b.n	8000f86 <__aeabi_dadd+0x2ee>
 80011f6:	0014      	movs	r4, r2
 80011f8:	001e      	movs	r6, r3
 80011fa:	3c20      	subs	r4, #32
 80011fc:	40e6      	lsrs	r6, r4
 80011fe:	2a20      	cmp	r2, #32
 8001200:	d005      	beq.n	800120e <__aeabi_dadd+0x576>
 8001202:	2440      	movs	r4, #64	; 0x40
 8001204:	1aa2      	subs	r2, r4, r2
 8001206:	4093      	lsls	r3, r2
 8001208:	464a      	mov	r2, r9
 800120a:	431a      	orrs	r2, r3
 800120c:	4691      	mov	r9, r2
 800120e:	464d      	mov	r5, r9
 8001210:	1e6b      	subs	r3, r5, #1
 8001212:	419d      	sbcs	r5, r3
 8001214:	4335      	orrs	r5, r6
 8001216:	e778      	b.n	800110a <__aeabi_dadd+0x472>
 8001218:	464a      	mov	r2, r9
 800121a:	431a      	orrs	r2, r3
 800121c:	d000      	beq.n	8001220 <__aeabi_dadd+0x588>
 800121e:	e66b      	b.n	8000ef8 <__aeabi_dadd+0x260>
 8001220:	076b      	lsls	r3, r5, #29
 8001222:	08f9      	lsrs	r1, r7, #3
 8001224:	4319      	orrs	r1, r3
 8001226:	08eb      	lsrs	r3, r5, #3
 8001228:	e680      	b.n	8000f2c <__aeabi_dadd+0x294>
 800122a:	4661      	mov	r1, ip
 800122c:	4339      	orrs	r1, r7
 800122e:	d054      	beq.n	80012da <__aeabi_dadd+0x642>
 8001230:	4663      	mov	r3, ip
 8001232:	08f9      	lsrs	r1, r7, #3
 8001234:	075c      	lsls	r4, r3, #29
 8001236:	4321      	orrs	r1, r4
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	0004      	movs	r4, r0
 800123c:	e654      	b.n	8000ee8 <__aeabi_dadd+0x250>
 800123e:	464a      	mov	r2, r9
 8001240:	1abd      	subs	r5, r7, r2
 8001242:	42af      	cmp	r7, r5
 8001244:	4189      	sbcs	r1, r1
 8001246:	4662      	mov	r2, ip
 8001248:	4249      	negs	r1, r1
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	1a5b      	subs	r3, r3, r1
 800124e:	4698      	mov	r8, r3
 8001250:	0004      	movs	r4, r0
 8001252:	2601      	movs	r6, #1
 8001254:	e56b      	b.n	8000d2e <__aeabi_dadd+0x96>
 8001256:	464a      	mov	r2, r9
 8001258:	1bd5      	subs	r5, r2, r7
 800125a:	45a9      	cmp	r9, r5
 800125c:	4189      	sbcs	r1, r1
 800125e:	4662      	mov	r2, ip
 8001260:	4249      	negs	r1, r1
 8001262:	1a9a      	subs	r2, r3, r2
 8001264:	1a52      	subs	r2, r2, r1
 8001266:	4690      	mov	r8, r2
 8001268:	0212      	lsls	r2, r2, #8
 800126a:	d532      	bpl.n	80012d2 <__aeabi_dadd+0x63a>
 800126c:	464a      	mov	r2, r9
 800126e:	1abd      	subs	r5, r7, r2
 8001270:	42af      	cmp	r7, r5
 8001272:	4189      	sbcs	r1, r1
 8001274:	4662      	mov	r2, ip
 8001276:	4249      	negs	r1, r1
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	4698      	mov	r8, r3
 800127e:	0004      	movs	r4, r0
 8001280:	e584      	b.n	8000d8c <__aeabi_dadd+0xf4>
 8001282:	4663      	mov	r3, ip
 8001284:	08f9      	lsrs	r1, r7, #3
 8001286:	075a      	lsls	r2, r3, #29
 8001288:	4311      	orrs	r1, r2
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	e64e      	b.n	8000f2c <__aeabi_dadd+0x294>
 800128e:	08f9      	lsrs	r1, r7, #3
 8001290:	0768      	lsls	r0, r5, #29
 8001292:	4301      	orrs	r1, r0
 8001294:	08eb      	lsrs	r3, r5, #3
 8001296:	e624      	b.n	8000ee2 <__aeabi_dadd+0x24a>
 8001298:	4662      	mov	r2, ip
 800129a:	433a      	orrs	r2, r7
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x608>
 800129e:	e698      	b.n	8000fd2 <__aeabi_dadd+0x33a>
 80012a0:	464a      	mov	r2, r9
 80012a2:	08d1      	lsrs	r1, r2, #3
 80012a4:	075a      	lsls	r2, r3, #29
 80012a6:	4311      	orrs	r1, r2
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	031b      	lsls	r3, r3, #12
 80012ae:	421a      	tst	r2, r3
 80012b0:	d008      	beq.n	80012c4 <__aeabi_dadd+0x62c>
 80012b2:	4660      	mov	r0, ip
 80012b4:	08c5      	lsrs	r5, r0, #3
 80012b6:	421d      	tst	r5, r3
 80012b8:	d104      	bne.n	80012c4 <__aeabi_dadd+0x62c>
 80012ba:	4654      	mov	r4, sl
 80012bc:	002a      	movs	r2, r5
 80012be:	08f9      	lsrs	r1, r7, #3
 80012c0:	0743      	lsls	r3, r0, #29
 80012c2:	4319      	orrs	r1, r3
 80012c4:	0f4b      	lsrs	r3, r1, #29
 80012c6:	00c9      	lsls	r1, r1, #3
 80012c8:	075b      	lsls	r3, r3, #29
 80012ca:	08c9      	lsrs	r1, r1, #3
 80012cc:	4319      	orrs	r1, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	e62c      	b.n	8000f2c <__aeabi_dadd+0x294>
 80012d2:	4641      	mov	r1, r8
 80012d4:	4329      	orrs	r1, r5
 80012d6:	d000      	beq.n	80012da <__aeabi_dadd+0x642>
 80012d8:	e5fa      	b.n	8000ed0 <__aeabi_dadd+0x238>
 80012da:	2300      	movs	r3, #0
 80012dc:	000a      	movs	r2, r1
 80012de:	2400      	movs	r4, #0
 80012e0:	e602      	b.n	8000ee8 <__aeabi_dadd+0x250>
 80012e2:	076b      	lsls	r3, r5, #29
 80012e4:	08f9      	lsrs	r1, r7, #3
 80012e6:	4319      	orrs	r1, r3
 80012e8:	08eb      	lsrs	r3, r5, #3
 80012ea:	e5fd      	b.n	8000ee8 <__aeabi_dadd+0x250>
 80012ec:	4663      	mov	r3, ip
 80012ee:	08f9      	lsrs	r1, r7, #3
 80012f0:	075b      	lsls	r3, r3, #29
 80012f2:	4319      	orrs	r1, r3
 80012f4:	4663      	mov	r3, ip
 80012f6:	0004      	movs	r4, r0
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	e617      	b.n	8000f2c <__aeabi_dadd+0x294>
 80012fc:	003d      	movs	r5, r7
 80012fe:	444d      	add	r5, r9
 8001300:	4463      	add	r3, ip
 8001302:	454d      	cmp	r5, r9
 8001304:	4189      	sbcs	r1, r1
 8001306:	4698      	mov	r8, r3
 8001308:	4249      	negs	r1, r1
 800130a:	4488      	add	r8, r1
 800130c:	4643      	mov	r3, r8
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	d400      	bmi.n	8001314 <__aeabi_dadd+0x67c>
 8001312:	e5dd      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8001314:	4642      	mov	r2, r8
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <__aeabi_dadd+0x6d0>)
 8001318:	2601      	movs	r6, #1
 800131a:	401a      	ands	r2, r3
 800131c:	4690      	mov	r8, r2
 800131e:	e5d7      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8001320:	0010      	movs	r0, r2
 8001322:	001e      	movs	r6, r3
 8001324:	3820      	subs	r0, #32
 8001326:	40c6      	lsrs	r6, r0
 8001328:	2a20      	cmp	r2, #32
 800132a:	d005      	beq.n	8001338 <__aeabi_dadd+0x6a0>
 800132c:	2040      	movs	r0, #64	; 0x40
 800132e:	1a82      	subs	r2, r0, r2
 8001330:	4093      	lsls	r3, r2
 8001332:	464a      	mov	r2, r9
 8001334:	431a      	orrs	r2, r3
 8001336:	4691      	mov	r9, r2
 8001338:	464d      	mov	r5, r9
 800133a:	1e6b      	subs	r3, r5, #1
 800133c:	419d      	sbcs	r5, r3
 800133e:	4335      	orrs	r5, r6
 8001340:	e621      	b.n	8000f86 <__aeabi_dadd+0x2ee>
 8001342:	0002      	movs	r2, r0
 8001344:	2300      	movs	r3, #0
 8001346:	2100      	movs	r1, #0
 8001348:	e540      	b.n	8000dcc <__aeabi_dadd+0x134>
 800134a:	464a      	mov	r2, r9
 800134c:	19d5      	adds	r5, r2, r7
 800134e:	42bd      	cmp	r5, r7
 8001350:	4189      	sbcs	r1, r1
 8001352:	4463      	add	r3, ip
 8001354:	4698      	mov	r8, r3
 8001356:	4249      	negs	r1, r1
 8001358:	4488      	add	r8, r1
 800135a:	e5b3      	b.n	8000ec4 <__aeabi_dadd+0x22c>
 800135c:	2100      	movs	r1, #0
 800135e:	4a01      	ldr	r2, [pc, #4]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001360:	000b      	movs	r3, r1
 8001362:	e533      	b.n	8000dcc <__aeabi_dadd+0x134>
 8001364:	000007ff 	.word	0x000007ff
 8001368:	ff7fffff 	.word	0xff7fffff

0800136c <__aeabi_ddiv>:
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	4657      	mov	r7, sl
 8001370:	464e      	mov	r6, r9
 8001372:	4645      	mov	r5, r8
 8001374:	46de      	mov	lr, fp
 8001376:	b5e0      	push	{r5, r6, r7, lr}
 8001378:	4681      	mov	r9, r0
 800137a:	0005      	movs	r5, r0
 800137c:	030c      	lsls	r4, r1, #12
 800137e:	0048      	lsls	r0, r1, #1
 8001380:	4692      	mov	sl, r2
 8001382:	001f      	movs	r7, r3
 8001384:	b085      	sub	sp, #20
 8001386:	0b24      	lsrs	r4, r4, #12
 8001388:	0d40      	lsrs	r0, r0, #21
 800138a:	0fce      	lsrs	r6, r1, #31
 800138c:	2800      	cmp	r0, #0
 800138e:	d059      	beq.n	8001444 <__aeabi_ddiv+0xd8>
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <__aeabi_ddiv+0x244>)
 8001392:	4298      	cmp	r0, r3
 8001394:	d100      	bne.n	8001398 <__aeabi_ddiv+0x2c>
 8001396:	e098      	b.n	80014ca <__aeabi_ddiv+0x15e>
 8001398:	0f6b      	lsrs	r3, r5, #29
 800139a:	00e4      	lsls	r4, r4, #3
 800139c:	431c      	orrs	r4, r3
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	041b      	lsls	r3, r3, #16
 80013a2:	4323      	orrs	r3, r4
 80013a4:	4698      	mov	r8, r3
 80013a6:	4b83      	ldr	r3, [pc, #524]	; (80015b4 <__aeabi_ddiv+0x248>)
 80013a8:	00ed      	lsls	r5, r5, #3
 80013aa:	469b      	mov	fp, r3
 80013ac:	2300      	movs	r3, #0
 80013ae:	4699      	mov	r9, r3
 80013b0:	4483      	add	fp, r0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	033c      	lsls	r4, r7, #12
 80013b6:	007b      	lsls	r3, r7, #1
 80013b8:	4650      	mov	r0, sl
 80013ba:	0b24      	lsrs	r4, r4, #12
 80013bc:	0d5b      	lsrs	r3, r3, #21
 80013be:	0fff      	lsrs	r7, r7, #31
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d067      	beq.n	8001494 <__aeabi_ddiv+0x128>
 80013c4:	4a7a      	ldr	r2, [pc, #488]	; (80015b0 <__aeabi_ddiv+0x244>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d018      	beq.n	80013fc <__aeabi_ddiv+0x90>
 80013ca:	497a      	ldr	r1, [pc, #488]	; (80015b4 <__aeabi_ddiv+0x248>)
 80013cc:	0f42      	lsrs	r2, r0, #29
 80013ce:	468c      	mov	ip, r1
 80013d0:	00e4      	lsls	r4, r4, #3
 80013d2:	4659      	mov	r1, fp
 80013d4:	4314      	orrs	r4, r2
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	4463      	add	r3, ip
 80013da:	0412      	lsls	r2, r2, #16
 80013dc:	1acb      	subs	r3, r1, r3
 80013de:	4314      	orrs	r4, r2
 80013e0:	469b      	mov	fp, r3
 80013e2:	00c2      	lsls	r2, r0, #3
 80013e4:	2000      	movs	r0, #0
 80013e6:	0033      	movs	r3, r6
 80013e8:	407b      	eors	r3, r7
 80013ea:	469a      	mov	sl, r3
 80013ec:	464b      	mov	r3, r9
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	d900      	bls.n	80013f4 <__aeabi_ddiv+0x88>
 80013f2:	e0ef      	b.n	80015d4 <__aeabi_ddiv+0x268>
 80013f4:	4970      	ldr	r1, [pc, #448]	; (80015b8 <__aeabi_ddiv+0x24c>)
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	58cb      	ldr	r3, [r1, r3]
 80013fa:	469f      	mov	pc, r3
 80013fc:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <__aeabi_ddiv+0x250>)
 80013fe:	4652      	mov	r2, sl
 8001400:	469c      	mov	ip, r3
 8001402:	4322      	orrs	r2, r4
 8001404:	44e3      	add	fp, ip
 8001406:	2a00      	cmp	r2, #0
 8001408:	d000      	beq.n	800140c <__aeabi_ddiv+0xa0>
 800140a:	e095      	b.n	8001538 <__aeabi_ddiv+0x1cc>
 800140c:	4649      	mov	r1, r9
 800140e:	2302      	movs	r3, #2
 8001410:	4319      	orrs	r1, r3
 8001412:	4689      	mov	r9, r1
 8001414:	2400      	movs	r4, #0
 8001416:	2002      	movs	r0, #2
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 800141a:	2300      	movs	r3, #0
 800141c:	2400      	movs	r4, #0
 800141e:	2500      	movs	r5, #0
 8001420:	4652      	mov	r2, sl
 8001422:	051b      	lsls	r3, r3, #20
 8001424:	4323      	orrs	r3, r4
 8001426:	07d2      	lsls	r2, r2, #31
 8001428:	4313      	orrs	r3, r2
 800142a:	0028      	movs	r0, r5
 800142c:	0019      	movs	r1, r3
 800142e:	b005      	add	sp, #20
 8001430:	bcf0      	pop	{r4, r5, r6, r7}
 8001432:	46bb      	mov	fp, r7
 8001434:	46b2      	mov	sl, r6
 8001436:	46a9      	mov	r9, r5
 8001438:	46a0      	mov	r8, r4
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143c:	2400      	movs	r4, #0
 800143e:	2500      	movs	r5, #0
 8001440:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <__aeabi_ddiv+0x244>)
 8001442:	e7ed      	b.n	8001420 <__aeabi_ddiv+0xb4>
 8001444:	464b      	mov	r3, r9
 8001446:	4323      	orrs	r3, r4
 8001448:	4698      	mov	r8, r3
 800144a:	d100      	bne.n	800144e <__aeabi_ddiv+0xe2>
 800144c:	e089      	b.n	8001562 <__aeabi_ddiv+0x1f6>
 800144e:	2c00      	cmp	r4, #0
 8001450:	d100      	bne.n	8001454 <__aeabi_ddiv+0xe8>
 8001452:	e1e0      	b.n	8001816 <__aeabi_ddiv+0x4aa>
 8001454:	0020      	movs	r0, r4
 8001456:	f000 fd43 	bl	8001ee0 <__clzsi2>
 800145a:	0001      	movs	r1, r0
 800145c:	0002      	movs	r2, r0
 800145e:	390b      	subs	r1, #11
 8001460:	231d      	movs	r3, #29
 8001462:	1a5b      	subs	r3, r3, r1
 8001464:	4649      	mov	r1, r9
 8001466:	0010      	movs	r0, r2
 8001468:	40d9      	lsrs	r1, r3
 800146a:	3808      	subs	r0, #8
 800146c:	4084      	lsls	r4, r0
 800146e:	000b      	movs	r3, r1
 8001470:	464d      	mov	r5, r9
 8001472:	4323      	orrs	r3, r4
 8001474:	4698      	mov	r8, r3
 8001476:	4085      	lsls	r5, r0
 8001478:	4851      	ldr	r0, [pc, #324]	; (80015c0 <__aeabi_ddiv+0x254>)
 800147a:	033c      	lsls	r4, r7, #12
 800147c:	1a83      	subs	r3, r0, r2
 800147e:	469b      	mov	fp, r3
 8001480:	2300      	movs	r3, #0
 8001482:	4699      	mov	r9, r3
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	007b      	lsls	r3, r7, #1
 8001488:	4650      	mov	r0, sl
 800148a:	0b24      	lsrs	r4, r4, #12
 800148c:	0d5b      	lsrs	r3, r3, #21
 800148e:	0fff      	lsrs	r7, r7, #31
 8001490:	2b00      	cmp	r3, #0
 8001492:	d197      	bne.n	80013c4 <__aeabi_ddiv+0x58>
 8001494:	4652      	mov	r2, sl
 8001496:	4322      	orrs	r2, r4
 8001498:	d055      	beq.n	8001546 <__aeabi_ddiv+0x1da>
 800149a:	2c00      	cmp	r4, #0
 800149c:	d100      	bne.n	80014a0 <__aeabi_ddiv+0x134>
 800149e:	e1ca      	b.n	8001836 <__aeabi_ddiv+0x4ca>
 80014a0:	0020      	movs	r0, r4
 80014a2:	f000 fd1d 	bl	8001ee0 <__clzsi2>
 80014a6:	0002      	movs	r2, r0
 80014a8:	3a0b      	subs	r2, #11
 80014aa:	231d      	movs	r3, #29
 80014ac:	0001      	movs	r1, r0
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	4652      	mov	r2, sl
 80014b2:	3908      	subs	r1, #8
 80014b4:	40da      	lsrs	r2, r3
 80014b6:	408c      	lsls	r4, r1
 80014b8:	4314      	orrs	r4, r2
 80014ba:	4652      	mov	r2, sl
 80014bc:	408a      	lsls	r2, r1
 80014be:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <__aeabi_ddiv+0x258>)
 80014c0:	4458      	add	r0, fp
 80014c2:	469b      	mov	fp, r3
 80014c4:	4483      	add	fp, r0
 80014c6:	2000      	movs	r0, #0
 80014c8:	e78d      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	4323      	orrs	r3, r4
 80014ce:	4698      	mov	r8, r3
 80014d0:	d140      	bne.n	8001554 <__aeabi_ddiv+0x1e8>
 80014d2:	2308      	movs	r3, #8
 80014d4:	4699      	mov	r9, r3
 80014d6:	3b06      	subs	r3, #6
 80014d8:	2500      	movs	r5, #0
 80014da:	4683      	mov	fp, r0
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	e769      	b.n	80013b4 <__aeabi_ddiv+0x48>
 80014e0:	46b2      	mov	sl, r6
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d0a9      	beq.n	800143c <__aeabi_ddiv+0xd0>
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d100      	bne.n	80014ee <__aeabi_ddiv+0x182>
 80014ec:	e211      	b.n	8001912 <__aeabi_ddiv+0x5a6>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d093      	beq.n	800141a <__aeabi_ddiv+0xae>
 80014f2:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <__aeabi_ddiv+0x25c>)
 80014f4:	445a      	add	r2, fp
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	dc00      	bgt.n	80014fc <__aeabi_ddiv+0x190>
 80014fa:	e13c      	b.n	8001776 <__aeabi_ddiv+0x40a>
 80014fc:	076b      	lsls	r3, r5, #29
 80014fe:	d000      	beq.n	8001502 <__aeabi_ddiv+0x196>
 8001500:	e1a7      	b.n	8001852 <__aeabi_ddiv+0x4e6>
 8001502:	08ed      	lsrs	r5, r5, #3
 8001504:	4643      	mov	r3, r8
 8001506:	01db      	lsls	r3, r3, #7
 8001508:	d506      	bpl.n	8001518 <__aeabi_ddiv+0x1ac>
 800150a:	4642      	mov	r2, r8
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <__aeabi_ddiv+0x260>)
 800150e:	401a      	ands	r2, r3
 8001510:	4690      	mov	r8, r2
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	445a      	add	r2, fp
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <__aeabi_ddiv+0x264>)
 800151a:	429a      	cmp	r2, r3
 800151c:	dc8e      	bgt.n	800143c <__aeabi_ddiv+0xd0>
 800151e:	4643      	mov	r3, r8
 8001520:	0552      	lsls	r2, r2, #21
 8001522:	0758      	lsls	r0, r3, #29
 8001524:	025c      	lsls	r4, r3, #9
 8001526:	4305      	orrs	r5, r0
 8001528:	0b24      	lsrs	r4, r4, #12
 800152a:	0d53      	lsrs	r3, r2, #21
 800152c:	e778      	b.n	8001420 <__aeabi_ddiv+0xb4>
 800152e:	46ba      	mov	sl, r7
 8001530:	46a0      	mov	r8, r4
 8001532:	0015      	movs	r5, r2
 8001534:	9000      	str	r0, [sp, #0]
 8001536:	e7d4      	b.n	80014e2 <__aeabi_ddiv+0x176>
 8001538:	464a      	mov	r2, r9
 800153a:	2303      	movs	r3, #3
 800153c:	431a      	orrs	r2, r3
 800153e:	4691      	mov	r9, r2
 8001540:	2003      	movs	r0, #3
 8001542:	4652      	mov	r2, sl
 8001544:	e74f      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 8001546:	4649      	mov	r1, r9
 8001548:	2301      	movs	r3, #1
 800154a:	4319      	orrs	r1, r3
 800154c:	4689      	mov	r9, r1
 800154e:	2400      	movs	r4, #0
 8001550:	2001      	movs	r0, #1
 8001552:	e748      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 8001554:	230c      	movs	r3, #12
 8001556:	4699      	mov	r9, r3
 8001558:	3b09      	subs	r3, #9
 800155a:	46a0      	mov	r8, r4
 800155c:	4683      	mov	fp, r0
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	e728      	b.n	80013b4 <__aeabi_ddiv+0x48>
 8001562:	2304      	movs	r3, #4
 8001564:	4699      	mov	r9, r3
 8001566:	2300      	movs	r3, #0
 8001568:	469b      	mov	fp, r3
 800156a:	3301      	adds	r3, #1
 800156c:	2500      	movs	r5, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	e720      	b.n	80013b4 <__aeabi_ddiv+0x48>
 8001572:	2300      	movs	r3, #0
 8001574:	2480      	movs	r4, #128	; 0x80
 8001576:	469a      	mov	sl, r3
 8001578:	2500      	movs	r5, #0
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <__aeabi_ddiv+0x244>)
 800157c:	0324      	lsls	r4, r4, #12
 800157e:	e74f      	b.n	8001420 <__aeabi_ddiv+0xb4>
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	4641      	mov	r1, r8
 8001584:	031b      	lsls	r3, r3, #12
 8001586:	4219      	tst	r1, r3
 8001588:	d008      	beq.n	800159c <__aeabi_ddiv+0x230>
 800158a:	421c      	tst	r4, r3
 800158c:	d106      	bne.n	800159c <__aeabi_ddiv+0x230>
 800158e:	431c      	orrs	r4, r3
 8001590:	0324      	lsls	r4, r4, #12
 8001592:	46ba      	mov	sl, r7
 8001594:	0015      	movs	r5, r2
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <__aeabi_ddiv+0x244>)
 8001598:	0b24      	lsrs	r4, r4, #12
 800159a:	e741      	b.n	8001420 <__aeabi_ddiv+0xb4>
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	4643      	mov	r3, r8
 80015a0:	0324      	lsls	r4, r4, #12
 80015a2:	431c      	orrs	r4, r3
 80015a4:	0324      	lsls	r4, r4, #12
 80015a6:	46b2      	mov	sl, r6
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <__aeabi_ddiv+0x244>)
 80015aa:	0b24      	lsrs	r4, r4, #12
 80015ac:	e738      	b.n	8001420 <__aeabi_ddiv+0xb4>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	000007ff 	.word	0x000007ff
 80015b4:	fffffc01 	.word	0xfffffc01
 80015b8:	0800a82c 	.word	0x0800a82c
 80015bc:	fffff801 	.word	0xfffff801
 80015c0:	fffffc0d 	.word	0xfffffc0d
 80015c4:	000003f3 	.word	0x000003f3
 80015c8:	000003ff 	.word	0x000003ff
 80015cc:	feffffff 	.word	0xfeffffff
 80015d0:	000007fe 	.word	0x000007fe
 80015d4:	4544      	cmp	r4, r8
 80015d6:	d200      	bcs.n	80015da <__aeabi_ddiv+0x26e>
 80015d8:	e116      	b.n	8001808 <__aeabi_ddiv+0x49c>
 80015da:	d100      	bne.n	80015de <__aeabi_ddiv+0x272>
 80015dc:	e111      	b.n	8001802 <__aeabi_ddiv+0x496>
 80015de:	2301      	movs	r3, #1
 80015e0:	425b      	negs	r3, r3
 80015e2:	469c      	mov	ip, r3
 80015e4:	002e      	movs	r6, r5
 80015e6:	4640      	mov	r0, r8
 80015e8:	2500      	movs	r5, #0
 80015ea:	44e3      	add	fp, ip
 80015ec:	0223      	lsls	r3, r4, #8
 80015ee:	0e14      	lsrs	r4, r2, #24
 80015f0:	431c      	orrs	r4, r3
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	4699      	mov	r9, r3
 80015f6:	0423      	lsls	r3, r4, #16
 80015f8:	0c1f      	lsrs	r7, r3, #16
 80015fa:	0212      	lsls	r2, r2, #8
 80015fc:	4649      	mov	r1, r9
 80015fe:	9200      	str	r2, [sp, #0]
 8001600:	9701      	str	r7, [sp, #4]
 8001602:	f7fe fe07 	bl	8000214 <__aeabi_uidivmod>
 8001606:	0002      	movs	r2, r0
 8001608:	437a      	muls	r2, r7
 800160a:	040b      	lsls	r3, r1, #16
 800160c:	0c31      	lsrs	r1, r6, #16
 800160e:	4680      	mov	r8, r0
 8001610:	4319      	orrs	r1, r3
 8001612:	428a      	cmp	r2, r1
 8001614:	d90b      	bls.n	800162e <__aeabi_ddiv+0x2c2>
 8001616:	2301      	movs	r3, #1
 8001618:	425b      	negs	r3, r3
 800161a:	469c      	mov	ip, r3
 800161c:	1909      	adds	r1, r1, r4
 800161e:	44e0      	add	r8, ip
 8001620:	428c      	cmp	r4, r1
 8001622:	d804      	bhi.n	800162e <__aeabi_ddiv+0x2c2>
 8001624:	428a      	cmp	r2, r1
 8001626:	d902      	bls.n	800162e <__aeabi_ddiv+0x2c2>
 8001628:	1e83      	subs	r3, r0, #2
 800162a:	4698      	mov	r8, r3
 800162c:	1909      	adds	r1, r1, r4
 800162e:	1a88      	subs	r0, r1, r2
 8001630:	4649      	mov	r1, r9
 8001632:	f7fe fdef 	bl	8000214 <__aeabi_uidivmod>
 8001636:	0409      	lsls	r1, r1, #16
 8001638:	468c      	mov	ip, r1
 800163a:	0431      	lsls	r1, r6, #16
 800163c:	4666      	mov	r6, ip
 800163e:	9a01      	ldr	r2, [sp, #4]
 8001640:	0c09      	lsrs	r1, r1, #16
 8001642:	4342      	muls	r2, r0
 8001644:	0003      	movs	r3, r0
 8001646:	4331      	orrs	r1, r6
 8001648:	428a      	cmp	r2, r1
 800164a:	d904      	bls.n	8001656 <__aeabi_ddiv+0x2ea>
 800164c:	1909      	adds	r1, r1, r4
 800164e:	3b01      	subs	r3, #1
 8001650:	428c      	cmp	r4, r1
 8001652:	d800      	bhi.n	8001656 <__aeabi_ddiv+0x2ea>
 8001654:	e111      	b.n	800187a <__aeabi_ddiv+0x50e>
 8001656:	1a89      	subs	r1, r1, r2
 8001658:	4642      	mov	r2, r8
 800165a:	9e00      	ldr	r6, [sp, #0]
 800165c:	0412      	lsls	r2, r2, #16
 800165e:	431a      	orrs	r2, r3
 8001660:	0c33      	lsrs	r3, r6, #16
 8001662:	001f      	movs	r7, r3
 8001664:	0c10      	lsrs	r0, r2, #16
 8001666:	4690      	mov	r8, r2
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	0413      	lsls	r3, r2, #16
 800166c:	0432      	lsls	r2, r6, #16
 800166e:	0c16      	lsrs	r6, r2, #16
 8001670:	0032      	movs	r2, r6
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	435a      	muls	r2, r3
 8001676:	9603      	str	r6, [sp, #12]
 8001678:	437b      	muls	r3, r7
 800167a:	4346      	muls	r6, r0
 800167c:	4378      	muls	r0, r7
 800167e:	0c17      	lsrs	r7, r2, #16
 8001680:	46bc      	mov	ip, r7
 8001682:	199b      	adds	r3, r3, r6
 8001684:	4463      	add	r3, ip
 8001686:	429e      	cmp	r6, r3
 8001688:	d903      	bls.n	8001692 <__aeabi_ddiv+0x326>
 800168a:	2680      	movs	r6, #128	; 0x80
 800168c:	0276      	lsls	r6, r6, #9
 800168e:	46b4      	mov	ip, r6
 8001690:	4460      	add	r0, ip
 8001692:	0c1e      	lsrs	r6, r3, #16
 8001694:	1830      	adds	r0, r6, r0
 8001696:	0416      	lsls	r6, r2, #16
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	0c36      	lsrs	r6, r6, #16
 800169c:	199e      	adds	r6, r3, r6
 800169e:	4281      	cmp	r1, r0
 80016a0:	d200      	bcs.n	80016a4 <__aeabi_ddiv+0x338>
 80016a2:	e09c      	b.n	80017de <__aeabi_ddiv+0x472>
 80016a4:	d100      	bne.n	80016a8 <__aeabi_ddiv+0x33c>
 80016a6:	e097      	b.n	80017d8 <__aeabi_ddiv+0x46c>
 80016a8:	1bae      	subs	r6, r5, r6
 80016aa:	1a09      	subs	r1, r1, r0
 80016ac:	42b5      	cmp	r5, r6
 80016ae:	4180      	sbcs	r0, r0
 80016b0:	4240      	negs	r0, r0
 80016b2:	1a08      	subs	r0, r1, r0
 80016b4:	4284      	cmp	r4, r0
 80016b6:	d100      	bne.n	80016ba <__aeabi_ddiv+0x34e>
 80016b8:	e111      	b.n	80018de <__aeabi_ddiv+0x572>
 80016ba:	4649      	mov	r1, r9
 80016bc:	f7fe fdaa 	bl	8000214 <__aeabi_uidivmod>
 80016c0:	9a01      	ldr	r2, [sp, #4]
 80016c2:	040b      	lsls	r3, r1, #16
 80016c4:	4342      	muls	r2, r0
 80016c6:	0c31      	lsrs	r1, r6, #16
 80016c8:	0005      	movs	r5, r0
 80016ca:	4319      	orrs	r1, r3
 80016cc:	428a      	cmp	r2, r1
 80016ce:	d907      	bls.n	80016e0 <__aeabi_ddiv+0x374>
 80016d0:	1909      	adds	r1, r1, r4
 80016d2:	3d01      	subs	r5, #1
 80016d4:	428c      	cmp	r4, r1
 80016d6:	d803      	bhi.n	80016e0 <__aeabi_ddiv+0x374>
 80016d8:	428a      	cmp	r2, r1
 80016da:	d901      	bls.n	80016e0 <__aeabi_ddiv+0x374>
 80016dc:	1e85      	subs	r5, r0, #2
 80016de:	1909      	adds	r1, r1, r4
 80016e0:	1a88      	subs	r0, r1, r2
 80016e2:	4649      	mov	r1, r9
 80016e4:	f7fe fd96 	bl	8000214 <__aeabi_uidivmod>
 80016e8:	0409      	lsls	r1, r1, #16
 80016ea:	468c      	mov	ip, r1
 80016ec:	0431      	lsls	r1, r6, #16
 80016ee:	4666      	mov	r6, ip
 80016f0:	9a01      	ldr	r2, [sp, #4]
 80016f2:	0c09      	lsrs	r1, r1, #16
 80016f4:	4342      	muls	r2, r0
 80016f6:	0003      	movs	r3, r0
 80016f8:	4331      	orrs	r1, r6
 80016fa:	428a      	cmp	r2, r1
 80016fc:	d907      	bls.n	800170e <__aeabi_ddiv+0x3a2>
 80016fe:	1909      	adds	r1, r1, r4
 8001700:	3b01      	subs	r3, #1
 8001702:	428c      	cmp	r4, r1
 8001704:	d803      	bhi.n	800170e <__aeabi_ddiv+0x3a2>
 8001706:	428a      	cmp	r2, r1
 8001708:	d901      	bls.n	800170e <__aeabi_ddiv+0x3a2>
 800170a:	1e83      	subs	r3, r0, #2
 800170c:	1909      	adds	r1, r1, r4
 800170e:	9e03      	ldr	r6, [sp, #12]
 8001710:	1a89      	subs	r1, r1, r2
 8001712:	0032      	movs	r2, r6
 8001714:	042d      	lsls	r5, r5, #16
 8001716:	431d      	orrs	r5, r3
 8001718:	9f02      	ldr	r7, [sp, #8]
 800171a:	042b      	lsls	r3, r5, #16
 800171c:	0c1b      	lsrs	r3, r3, #16
 800171e:	435a      	muls	r2, r3
 8001720:	437b      	muls	r3, r7
 8001722:	469c      	mov	ip, r3
 8001724:	0c28      	lsrs	r0, r5, #16
 8001726:	4346      	muls	r6, r0
 8001728:	0c13      	lsrs	r3, r2, #16
 800172a:	44b4      	add	ip, r6
 800172c:	4463      	add	r3, ip
 800172e:	4378      	muls	r0, r7
 8001730:	429e      	cmp	r6, r3
 8001732:	d903      	bls.n	800173c <__aeabi_ddiv+0x3d0>
 8001734:	2680      	movs	r6, #128	; 0x80
 8001736:	0276      	lsls	r6, r6, #9
 8001738:	46b4      	mov	ip, r6
 800173a:	4460      	add	r0, ip
 800173c:	0c1e      	lsrs	r6, r3, #16
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	0c12      	lsrs	r2, r2, #16
 8001744:	1830      	adds	r0, r6, r0
 8001746:	189b      	adds	r3, r3, r2
 8001748:	4281      	cmp	r1, r0
 800174a:	d306      	bcc.n	800175a <__aeabi_ddiv+0x3ee>
 800174c:	d002      	beq.n	8001754 <__aeabi_ddiv+0x3e8>
 800174e:	2301      	movs	r3, #1
 8001750:	431d      	orrs	r5, r3
 8001752:	e6ce      	b.n	80014f2 <__aeabi_ddiv+0x186>
 8001754:	2b00      	cmp	r3, #0
 8001756:	d100      	bne.n	800175a <__aeabi_ddiv+0x3ee>
 8001758:	e6cb      	b.n	80014f2 <__aeabi_ddiv+0x186>
 800175a:	1861      	adds	r1, r4, r1
 800175c:	1e6e      	subs	r6, r5, #1
 800175e:	42a1      	cmp	r1, r4
 8001760:	d200      	bcs.n	8001764 <__aeabi_ddiv+0x3f8>
 8001762:	e0a4      	b.n	80018ae <__aeabi_ddiv+0x542>
 8001764:	4281      	cmp	r1, r0
 8001766:	d200      	bcs.n	800176a <__aeabi_ddiv+0x3fe>
 8001768:	e0c9      	b.n	80018fe <__aeabi_ddiv+0x592>
 800176a:	d100      	bne.n	800176e <__aeabi_ddiv+0x402>
 800176c:	e0d9      	b.n	8001922 <__aeabi_ddiv+0x5b6>
 800176e:	0035      	movs	r5, r6
 8001770:	e7ed      	b.n	800174e <__aeabi_ddiv+0x3e2>
 8001772:	2501      	movs	r5, #1
 8001774:	426d      	negs	r5, r5
 8001776:	2101      	movs	r1, #1
 8001778:	1a89      	subs	r1, r1, r2
 800177a:	2938      	cmp	r1, #56	; 0x38
 800177c:	dd00      	ble.n	8001780 <__aeabi_ddiv+0x414>
 800177e:	e64c      	b.n	800141a <__aeabi_ddiv+0xae>
 8001780:	291f      	cmp	r1, #31
 8001782:	dc00      	bgt.n	8001786 <__aeabi_ddiv+0x41a>
 8001784:	e07f      	b.n	8001886 <__aeabi_ddiv+0x51a>
 8001786:	231f      	movs	r3, #31
 8001788:	425b      	negs	r3, r3
 800178a:	1a9a      	subs	r2, r3, r2
 800178c:	4643      	mov	r3, r8
 800178e:	40d3      	lsrs	r3, r2
 8001790:	2920      	cmp	r1, #32
 8001792:	d004      	beq.n	800179e <__aeabi_ddiv+0x432>
 8001794:	4644      	mov	r4, r8
 8001796:	4a65      	ldr	r2, [pc, #404]	; (800192c <__aeabi_ddiv+0x5c0>)
 8001798:	445a      	add	r2, fp
 800179a:	4094      	lsls	r4, r2
 800179c:	4325      	orrs	r5, r4
 800179e:	1e6a      	subs	r2, r5, #1
 80017a0:	4195      	sbcs	r5, r2
 80017a2:	2207      	movs	r2, #7
 80017a4:	432b      	orrs	r3, r5
 80017a6:	0015      	movs	r5, r2
 80017a8:	2400      	movs	r4, #0
 80017aa:	401d      	ands	r5, r3
 80017ac:	421a      	tst	r2, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_ddiv+0x446>
 80017b0:	e0a1      	b.n	80018f6 <__aeabi_ddiv+0x58a>
 80017b2:	220f      	movs	r2, #15
 80017b4:	2400      	movs	r4, #0
 80017b6:	401a      	ands	r2, r3
 80017b8:	2a04      	cmp	r2, #4
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0x452>
 80017bc:	e098      	b.n	80018f0 <__aeabi_ddiv+0x584>
 80017be:	1d1a      	adds	r2, r3, #4
 80017c0:	429a      	cmp	r2, r3
 80017c2:	419b      	sbcs	r3, r3
 80017c4:	425b      	negs	r3, r3
 80017c6:	18e4      	adds	r4, r4, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	0222      	lsls	r2, r4, #8
 80017cc:	d400      	bmi.n	80017d0 <__aeabi_ddiv+0x464>
 80017ce:	e08f      	b.n	80018f0 <__aeabi_ddiv+0x584>
 80017d0:	2301      	movs	r3, #1
 80017d2:	2400      	movs	r4, #0
 80017d4:	2500      	movs	r5, #0
 80017d6:	e623      	b.n	8001420 <__aeabi_ddiv+0xb4>
 80017d8:	42b5      	cmp	r5, r6
 80017da:	d300      	bcc.n	80017de <__aeabi_ddiv+0x472>
 80017dc:	e764      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 80017de:	4643      	mov	r3, r8
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	9b00      	ldr	r3, [sp, #0]
 80017e4:	469c      	mov	ip, r3
 80017e6:	4465      	add	r5, ip
 80017e8:	001f      	movs	r7, r3
 80017ea:	429d      	cmp	r5, r3
 80017ec:	419b      	sbcs	r3, r3
 80017ee:	425b      	negs	r3, r3
 80017f0:	191b      	adds	r3, r3, r4
 80017f2:	18c9      	adds	r1, r1, r3
 80017f4:	428c      	cmp	r4, r1
 80017f6:	d23a      	bcs.n	800186e <__aeabi_ddiv+0x502>
 80017f8:	4288      	cmp	r0, r1
 80017fa:	d863      	bhi.n	80018c4 <__aeabi_ddiv+0x558>
 80017fc:	d060      	beq.n	80018c0 <__aeabi_ddiv+0x554>
 80017fe:	4690      	mov	r8, r2
 8001800:	e752      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 8001802:	42aa      	cmp	r2, r5
 8001804:	d900      	bls.n	8001808 <__aeabi_ddiv+0x49c>
 8001806:	e6ea      	b.n	80015de <__aeabi_ddiv+0x272>
 8001808:	4643      	mov	r3, r8
 800180a:	07de      	lsls	r6, r3, #31
 800180c:	0858      	lsrs	r0, r3, #1
 800180e:	086b      	lsrs	r3, r5, #1
 8001810:	431e      	orrs	r6, r3
 8001812:	07ed      	lsls	r5, r5, #31
 8001814:	e6ea      	b.n	80015ec <__aeabi_ddiv+0x280>
 8001816:	4648      	mov	r0, r9
 8001818:	f000 fb62 	bl	8001ee0 <__clzsi2>
 800181c:	0001      	movs	r1, r0
 800181e:	0002      	movs	r2, r0
 8001820:	3115      	adds	r1, #21
 8001822:	3220      	adds	r2, #32
 8001824:	291c      	cmp	r1, #28
 8001826:	dc00      	bgt.n	800182a <__aeabi_ddiv+0x4be>
 8001828:	e61a      	b.n	8001460 <__aeabi_ddiv+0xf4>
 800182a:	464b      	mov	r3, r9
 800182c:	3808      	subs	r0, #8
 800182e:	4083      	lsls	r3, r0
 8001830:	2500      	movs	r5, #0
 8001832:	4698      	mov	r8, r3
 8001834:	e620      	b.n	8001478 <__aeabi_ddiv+0x10c>
 8001836:	f000 fb53 	bl	8001ee0 <__clzsi2>
 800183a:	0003      	movs	r3, r0
 800183c:	001a      	movs	r2, r3
 800183e:	3215      	adds	r2, #21
 8001840:	3020      	adds	r0, #32
 8001842:	2a1c      	cmp	r2, #28
 8001844:	dc00      	bgt.n	8001848 <__aeabi_ddiv+0x4dc>
 8001846:	e630      	b.n	80014aa <__aeabi_ddiv+0x13e>
 8001848:	4654      	mov	r4, sl
 800184a:	3b08      	subs	r3, #8
 800184c:	2200      	movs	r2, #0
 800184e:	409c      	lsls	r4, r3
 8001850:	e635      	b.n	80014be <__aeabi_ddiv+0x152>
 8001852:	230f      	movs	r3, #15
 8001854:	402b      	ands	r3, r5
 8001856:	2b04      	cmp	r3, #4
 8001858:	d100      	bne.n	800185c <__aeabi_ddiv+0x4f0>
 800185a:	e652      	b.n	8001502 <__aeabi_ddiv+0x196>
 800185c:	2305      	movs	r3, #5
 800185e:	425b      	negs	r3, r3
 8001860:	42ab      	cmp	r3, r5
 8001862:	419b      	sbcs	r3, r3
 8001864:	3504      	adds	r5, #4
 8001866:	425b      	negs	r3, r3
 8001868:	08ed      	lsrs	r5, r5, #3
 800186a:	4498      	add	r8, r3
 800186c:	e64a      	b.n	8001504 <__aeabi_ddiv+0x198>
 800186e:	428c      	cmp	r4, r1
 8001870:	d1c5      	bne.n	80017fe <__aeabi_ddiv+0x492>
 8001872:	42af      	cmp	r7, r5
 8001874:	d9c0      	bls.n	80017f8 <__aeabi_ddiv+0x48c>
 8001876:	4690      	mov	r8, r2
 8001878:	e716      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 800187a:	428a      	cmp	r2, r1
 800187c:	d800      	bhi.n	8001880 <__aeabi_ddiv+0x514>
 800187e:	e6ea      	b.n	8001656 <__aeabi_ddiv+0x2ea>
 8001880:	1e83      	subs	r3, r0, #2
 8001882:	1909      	adds	r1, r1, r4
 8001884:	e6e7      	b.n	8001656 <__aeabi_ddiv+0x2ea>
 8001886:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <__aeabi_ddiv+0x5c4>)
 8001888:	0028      	movs	r0, r5
 800188a:	445a      	add	r2, fp
 800188c:	4643      	mov	r3, r8
 800188e:	4095      	lsls	r5, r2
 8001890:	4093      	lsls	r3, r2
 8001892:	40c8      	lsrs	r0, r1
 8001894:	1e6a      	subs	r2, r5, #1
 8001896:	4195      	sbcs	r5, r2
 8001898:	4644      	mov	r4, r8
 800189a:	4303      	orrs	r3, r0
 800189c:	432b      	orrs	r3, r5
 800189e:	40cc      	lsrs	r4, r1
 80018a0:	075a      	lsls	r2, r3, #29
 80018a2:	d092      	beq.n	80017ca <__aeabi_ddiv+0x45e>
 80018a4:	220f      	movs	r2, #15
 80018a6:	401a      	ands	r2, r3
 80018a8:	2a04      	cmp	r2, #4
 80018aa:	d188      	bne.n	80017be <__aeabi_ddiv+0x452>
 80018ac:	e78d      	b.n	80017ca <__aeabi_ddiv+0x45e>
 80018ae:	0035      	movs	r5, r6
 80018b0:	4281      	cmp	r1, r0
 80018b2:	d000      	beq.n	80018b6 <__aeabi_ddiv+0x54a>
 80018b4:	e74b      	b.n	800174e <__aeabi_ddiv+0x3e2>
 80018b6:	9a00      	ldr	r2, [sp, #0]
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d000      	beq.n	80018be <__aeabi_ddiv+0x552>
 80018bc:	e747      	b.n	800174e <__aeabi_ddiv+0x3e2>
 80018be:	e618      	b.n	80014f2 <__aeabi_ddiv+0x186>
 80018c0:	42ae      	cmp	r6, r5
 80018c2:	d99c      	bls.n	80017fe <__aeabi_ddiv+0x492>
 80018c4:	2302      	movs	r3, #2
 80018c6:	425b      	negs	r3, r3
 80018c8:	469c      	mov	ip, r3
 80018ca:	9b00      	ldr	r3, [sp, #0]
 80018cc:	44e0      	add	r8, ip
 80018ce:	469c      	mov	ip, r3
 80018d0:	4465      	add	r5, ip
 80018d2:	429d      	cmp	r5, r3
 80018d4:	419b      	sbcs	r3, r3
 80018d6:	425b      	negs	r3, r3
 80018d8:	191b      	adds	r3, r3, r4
 80018da:	18c9      	adds	r1, r1, r3
 80018dc:	e6e4      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <__aeabi_ddiv+0x5c8>)
 80018e0:	445a      	add	r2, fp
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	dc00      	bgt.n	80018e8 <__aeabi_ddiv+0x57c>
 80018e6:	e744      	b.n	8001772 <__aeabi_ddiv+0x406>
 80018e8:	2301      	movs	r3, #1
 80018ea:	2500      	movs	r5, #0
 80018ec:	4498      	add	r8, r3
 80018ee:	e609      	b.n	8001504 <__aeabi_ddiv+0x198>
 80018f0:	0765      	lsls	r5, r4, #29
 80018f2:	0264      	lsls	r4, r4, #9
 80018f4:	0b24      	lsrs	r4, r4, #12
 80018f6:	08db      	lsrs	r3, r3, #3
 80018f8:	431d      	orrs	r5, r3
 80018fa:	2300      	movs	r3, #0
 80018fc:	e590      	b.n	8001420 <__aeabi_ddiv+0xb4>
 80018fe:	9e00      	ldr	r6, [sp, #0]
 8001900:	3d02      	subs	r5, #2
 8001902:	0072      	lsls	r2, r6, #1
 8001904:	42b2      	cmp	r2, r6
 8001906:	41bf      	sbcs	r7, r7
 8001908:	427f      	negs	r7, r7
 800190a:	193c      	adds	r4, r7, r4
 800190c:	1909      	adds	r1, r1, r4
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	e7ce      	b.n	80018b0 <__aeabi_ddiv+0x544>
 8001912:	2480      	movs	r4, #128	; 0x80
 8001914:	4643      	mov	r3, r8
 8001916:	0324      	lsls	r4, r4, #12
 8001918:	431c      	orrs	r4, r3
 800191a:	0324      	lsls	r4, r4, #12
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <__aeabi_ddiv+0x5cc>)
 800191e:	0b24      	lsrs	r4, r4, #12
 8001920:	e57e      	b.n	8001420 <__aeabi_ddiv+0xb4>
 8001922:	9a00      	ldr	r2, [sp, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d3ea      	bcc.n	80018fe <__aeabi_ddiv+0x592>
 8001928:	0035      	movs	r5, r6
 800192a:	e7c4      	b.n	80018b6 <__aeabi_ddiv+0x54a>
 800192c:	0000043e 	.word	0x0000043e
 8001930:	0000041e 	.word	0x0000041e
 8001934:	000003ff 	.word	0x000003ff
 8001938:	000007ff 	.word	0x000007ff

0800193c <__aeabi_dmul>:
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193e:	4657      	mov	r7, sl
 8001940:	464e      	mov	r6, r9
 8001942:	4645      	mov	r5, r8
 8001944:	46de      	mov	lr, fp
 8001946:	b5e0      	push	{r5, r6, r7, lr}
 8001948:	4698      	mov	r8, r3
 800194a:	030c      	lsls	r4, r1, #12
 800194c:	004b      	lsls	r3, r1, #1
 800194e:	0006      	movs	r6, r0
 8001950:	4692      	mov	sl, r2
 8001952:	b087      	sub	sp, #28
 8001954:	0b24      	lsrs	r4, r4, #12
 8001956:	0d5b      	lsrs	r3, r3, #21
 8001958:	0fcf      	lsrs	r7, r1, #31
 800195a:	2b00      	cmp	r3, #0
 800195c:	d06c      	beq.n	8001a38 <__aeabi_dmul+0xfc>
 800195e:	4add      	ldr	r2, [pc, #884]	; (8001cd4 <__aeabi_dmul+0x398>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d100      	bne.n	8001966 <__aeabi_dmul+0x2a>
 8001964:	e086      	b.n	8001a74 <__aeabi_dmul+0x138>
 8001966:	0f42      	lsrs	r2, r0, #29
 8001968:	00e4      	lsls	r4, r4, #3
 800196a:	4314      	orrs	r4, r2
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	0412      	lsls	r2, r2, #16
 8001970:	4314      	orrs	r4, r2
 8001972:	4ad9      	ldr	r2, [pc, #868]	; (8001cd8 <__aeabi_dmul+0x39c>)
 8001974:	00c5      	lsls	r5, r0, #3
 8001976:	4694      	mov	ip, r2
 8001978:	4463      	add	r3, ip
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2300      	movs	r3, #0
 800197e:	4699      	mov	r9, r3
 8001980:	469b      	mov	fp, r3
 8001982:	4643      	mov	r3, r8
 8001984:	4642      	mov	r2, r8
 8001986:	031e      	lsls	r6, r3, #12
 8001988:	0fd2      	lsrs	r2, r2, #31
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4650      	mov	r0, sl
 800198e:	4690      	mov	r8, r2
 8001990:	0b36      	lsrs	r6, r6, #12
 8001992:	0d5b      	lsrs	r3, r3, #21
 8001994:	d100      	bne.n	8001998 <__aeabi_dmul+0x5c>
 8001996:	e078      	b.n	8001a8a <__aeabi_dmul+0x14e>
 8001998:	4ace      	ldr	r2, [pc, #824]	; (8001cd4 <__aeabi_dmul+0x398>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01d      	beq.n	80019da <__aeabi_dmul+0x9e>
 800199e:	49ce      	ldr	r1, [pc, #824]	; (8001cd8 <__aeabi_dmul+0x39c>)
 80019a0:	0f42      	lsrs	r2, r0, #29
 80019a2:	468c      	mov	ip, r1
 80019a4:	9900      	ldr	r1, [sp, #0]
 80019a6:	4463      	add	r3, ip
 80019a8:	00f6      	lsls	r6, r6, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4316      	orrs	r6, r2
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	449c      	add	ip, r3
 80019b2:	0412      	lsls	r2, r2, #16
 80019b4:	4663      	mov	r3, ip
 80019b6:	4316      	orrs	r6, r2
 80019b8:	00c2      	lsls	r2, r0, #3
 80019ba:	2000      	movs	r0, #0
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	9900      	ldr	r1, [sp, #0]
 80019c0:	4643      	mov	r3, r8
 80019c2:	3101      	adds	r1, #1
 80019c4:	468c      	mov	ip, r1
 80019c6:	4649      	mov	r1, r9
 80019c8:	407b      	eors	r3, r7
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	290f      	cmp	r1, #15
 80019ce:	d900      	bls.n	80019d2 <__aeabi_dmul+0x96>
 80019d0:	e07e      	b.n	8001ad0 <__aeabi_dmul+0x194>
 80019d2:	4bc2      	ldr	r3, [pc, #776]	; (8001cdc <__aeabi_dmul+0x3a0>)
 80019d4:	0089      	lsls	r1, r1, #2
 80019d6:	5859      	ldr	r1, [r3, r1]
 80019d8:	468f      	mov	pc, r1
 80019da:	4652      	mov	r2, sl
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	4332      	orrs	r2, r6
 80019e0:	d000      	beq.n	80019e4 <__aeabi_dmul+0xa8>
 80019e2:	e156      	b.n	8001c92 <__aeabi_dmul+0x356>
 80019e4:	49bb      	ldr	r1, [pc, #748]	; (8001cd4 <__aeabi_dmul+0x398>)
 80019e6:	2600      	movs	r6, #0
 80019e8:	468c      	mov	ip, r1
 80019ea:	4463      	add	r3, ip
 80019ec:	4649      	mov	r1, r9
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2302      	movs	r3, #2
 80019f2:	4319      	orrs	r1, r3
 80019f4:	4689      	mov	r9, r1
 80019f6:	2002      	movs	r0, #2
 80019f8:	e7e1      	b.n	80019be <__aeabi_dmul+0x82>
 80019fa:	4643      	mov	r3, r8
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	0034      	movs	r4, r6
 8001a00:	0015      	movs	r5, r2
 8001a02:	4683      	mov	fp, r0
 8001a04:	465b      	mov	r3, fp
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d05e      	beq.n	8001ac8 <__aeabi_dmul+0x18c>
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dmul+0xd4>
 8001a0e:	e1f3      	b.n	8001df8 <__aeabi_dmul+0x4bc>
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dmul+0xda>
 8001a14:	e118      	b.n	8001c48 <__aeabi_dmul+0x30c>
 8001a16:	2200      	movs	r2, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	9b01      	ldr	r3, [sp, #4]
 8001a1e:	0512      	lsls	r2, r2, #20
 8001a20:	4322      	orrs	r2, r4
 8001a22:	07db      	lsls	r3, r3, #31
 8001a24:	431a      	orrs	r2, r3
 8001a26:	0028      	movs	r0, r5
 8001a28:	0011      	movs	r1, r2
 8001a2a:	b007      	add	sp, #28
 8001a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a2e:	46bb      	mov	fp, r7
 8001a30:	46b2      	mov	sl, r6
 8001a32:	46a9      	mov	r9, r5
 8001a34:	46a0      	mov	r8, r4
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a38:	0025      	movs	r5, r4
 8001a3a:	4305      	orrs	r5, r0
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dmul+0x104>
 8001a3e:	e141      	b.n	8001cc4 <__aeabi_dmul+0x388>
 8001a40:	2c00      	cmp	r4, #0
 8001a42:	d100      	bne.n	8001a46 <__aeabi_dmul+0x10a>
 8001a44:	e1ad      	b.n	8001da2 <__aeabi_dmul+0x466>
 8001a46:	0020      	movs	r0, r4
 8001a48:	f000 fa4a 	bl	8001ee0 <__clzsi2>
 8001a4c:	0001      	movs	r1, r0
 8001a4e:	0002      	movs	r2, r0
 8001a50:	390b      	subs	r1, #11
 8001a52:	231d      	movs	r3, #29
 8001a54:	0010      	movs	r0, r2
 8001a56:	1a5b      	subs	r3, r3, r1
 8001a58:	0031      	movs	r1, r6
 8001a5a:	0035      	movs	r5, r6
 8001a5c:	3808      	subs	r0, #8
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	40d9      	lsrs	r1, r3
 8001a62:	4085      	lsls	r5, r0
 8001a64:	430c      	orrs	r4, r1
 8001a66:	489e      	ldr	r0, [pc, #632]	; (8001ce0 <__aeabi_dmul+0x3a4>)
 8001a68:	1a83      	subs	r3, r0, r2
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	4699      	mov	r9, r3
 8001a70:	469b      	mov	fp, r3
 8001a72:	e786      	b.n	8001982 <__aeabi_dmul+0x46>
 8001a74:	0005      	movs	r5, r0
 8001a76:	4325      	orrs	r5, r4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dmul+0x140>
 8001a7a:	e11c      	b.n	8001cb6 <__aeabi_dmul+0x37a>
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2302      	movs	r3, #2
 8001a82:	2400      	movs	r4, #0
 8001a84:	4691      	mov	r9, r2
 8001a86:	469b      	mov	fp, r3
 8001a88:	e77b      	b.n	8001982 <__aeabi_dmul+0x46>
 8001a8a:	4652      	mov	r2, sl
 8001a8c:	4332      	orrs	r2, r6
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dmul+0x156>
 8001a90:	e10a      	b.n	8001ca8 <__aeabi_dmul+0x36c>
 8001a92:	2e00      	cmp	r6, #0
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dmul+0x15c>
 8001a96:	e176      	b.n	8001d86 <__aeabi_dmul+0x44a>
 8001a98:	0030      	movs	r0, r6
 8001a9a:	f000 fa21 	bl	8001ee0 <__clzsi2>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	3a0b      	subs	r2, #11
 8001aa2:	231d      	movs	r3, #29
 8001aa4:	0001      	movs	r1, r0
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	4652      	mov	r2, sl
 8001aaa:	3908      	subs	r1, #8
 8001aac:	40da      	lsrs	r2, r3
 8001aae:	408e      	lsls	r6, r1
 8001ab0:	4316      	orrs	r6, r2
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	408a      	lsls	r2, r1
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	4989      	ldr	r1, [pc, #548]	; (8001ce0 <__aeabi_dmul+0x3a4>)
 8001aba:	1a18      	subs	r0, r3, r0
 8001abc:	0003      	movs	r3, r0
 8001abe:	468c      	mov	ip, r1
 8001ac0:	4463      	add	r3, ip
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	e77a      	b.n	80019be <__aeabi_dmul+0x82>
 8001ac8:	2400      	movs	r4, #0
 8001aca:	2500      	movs	r5, #0
 8001acc:	4a81      	ldr	r2, [pc, #516]	; (8001cd4 <__aeabi_dmul+0x398>)
 8001ace:	e7a5      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001ad0:	0c2f      	lsrs	r7, r5, #16
 8001ad2:	042d      	lsls	r5, r5, #16
 8001ad4:	0c2d      	lsrs	r5, r5, #16
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	0c11      	lsrs	r1, r2, #16
 8001ada:	0412      	lsls	r2, r2, #16
 8001adc:	0c12      	lsrs	r2, r2, #16
 8001ade:	4353      	muls	r3, r2
 8001ae0:	4698      	mov	r8, r3
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	0028      	movs	r0, r5
 8001ae6:	437b      	muls	r3, r7
 8001ae8:	4699      	mov	r9, r3
 8001aea:	4348      	muls	r0, r1
 8001aec:	4448      	add	r0, r9
 8001aee:	4683      	mov	fp, r0
 8001af0:	4640      	mov	r0, r8
 8001af2:	000b      	movs	r3, r1
 8001af4:	0c00      	lsrs	r0, r0, #16
 8001af6:	4682      	mov	sl, r0
 8001af8:	4658      	mov	r0, fp
 8001afa:	437b      	muls	r3, r7
 8001afc:	4450      	add	r0, sl
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	4581      	cmp	r9, r0
 8001b02:	d906      	bls.n	8001b12 <__aeabi_dmul+0x1d6>
 8001b04:	469a      	mov	sl, r3
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	025b      	lsls	r3, r3, #9
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	44ca      	add	sl, r9
 8001b0e:	4653      	mov	r3, sl
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	0c03      	lsrs	r3, r0, #16
 8001b14:	469b      	mov	fp, r3
 8001b16:	4643      	mov	r3, r8
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	0400      	lsls	r0, r0, #16
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	4698      	mov	r8, r3
 8001b20:	0003      	movs	r3, r0
 8001b22:	4443      	add	r3, r8
 8001b24:	9304      	str	r3, [sp, #16]
 8001b26:	0c33      	lsrs	r3, r6, #16
 8001b28:	4699      	mov	r9, r3
 8001b2a:	002b      	movs	r3, r5
 8001b2c:	0436      	lsls	r6, r6, #16
 8001b2e:	0c36      	lsrs	r6, r6, #16
 8001b30:	4373      	muls	r3, r6
 8001b32:	4698      	mov	r8, r3
 8001b34:	0033      	movs	r3, r6
 8001b36:	437b      	muls	r3, r7
 8001b38:	469a      	mov	sl, r3
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	435d      	muls	r5, r3
 8001b3e:	435f      	muls	r7, r3
 8001b40:	4643      	mov	r3, r8
 8001b42:	4455      	add	r5, sl
 8001b44:	0c18      	lsrs	r0, r3, #16
 8001b46:	1940      	adds	r0, r0, r5
 8001b48:	4582      	cmp	sl, r0
 8001b4a:	d903      	bls.n	8001b54 <__aeabi_dmul+0x218>
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	025b      	lsls	r3, r3, #9
 8001b50:	469a      	mov	sl, r3
 8001b52:	4457      	add	r7, sl
 8001b54:	0c05      	lsrs	r5, r0, #16
 8001b56:	19eb      	adds	r3, r5, r7
 8001b58:	9305      	str	r3, [sp, #20]
 8001b5a:	4643      	mov	r3, r8
 8001b5c:	041d      	lsls	r5, r3, #16
 8001b5e:	0c2d      	lsrs	r5, r5, #16
 8001b60:	0400      	lsls	r0, r0, #16
 8001b62:	1940      	adds	r0, r0, r5
 8001b64:	0c25      	lsrs	r5, r4, #16
 8001b66:	0424      	lsls	r4, r4, #16
 8001b68:	0c24      	lsrs	r4, r4, #16
 8001b6a:	0027      	movs	r7, r4
 8001b6c:	4357      	muls	r7, r2
 8001b6e:	436a      	muls	r2, r5
 8001b70:	4690      	mov	r8, r2
 8001b72:	002a      	movs	r2, r5
 8001b74:	0c3b      	lsrs	r3, r7, #16
 8001b76:	469a      	mov	sl, r3
 8001b78:	434a      	muls	r2, r1
 8001b7a:	4361      	muls	r1, r4
 8001b7c:	4441      	add	r1, r8
 8001b7e:	4451      	add	r1, sl
 8001b80:	4483      	add	fp, r0
 8001b82:	4588      	cmp	r8, r1
 8001b84:	d903      	bls.n	8001b8e <__aeabi_dmul+0x252>
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	025b      	lsls	r3, r3, #9
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	4442      	add	r2, r8
 8001b8e:	043f      	lsls	r7, r7, #16
 8001b90:	0c0b      	lsrs	r3, r1, #16
 8001b92:	0c3f      	lsrs	r7, r7, #16
 8001b94:	0409      	lsls	r1, r1, #16
 8001b96:	19c9      	adds	r1, r1, r7
 8001b98:	0027      	movs	r7, r4
 8001b9a:	4698      	mov	r8, r3
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	4377      	muls	r7, r6
 8001ba0:	435c      	muls	r4, r3
 8001ba2:	436e      	muls	r6, r5
 8001ba4:	435d      	muls	r5, r3
 8001ba6:	0c3b      	lsrs	r3, r7, #16
 8001ba8:	4699      	mov	r9, r3
 8001baa:	19a4      	adds	r4, r4, r6
 8001bac:	444c      	add	r4, r9
 8001bae:	4442      	add	r2, r8
 8001bb0:	9503      	str	r5, [sp, #12]
 8001bb2:	42a6      	cmp	r6, r4
 8001bb4:	d904      	bls.n	8001bc0 <__aeabi_dmul+0x284>
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	025b      	lsls	r3, r3, #9
 8001bba:	4698      	mov	r8, r3
 8001bbc:	4445      	add	r5, r8
 8001bbe:	9503      	str	r5, [sp, #12]
 8001bc0:	9b02      	ldr	r3, [sp, #8]
 8001bc2:	043f      	lsls	r7, r7, #16
 8001bc4:	445b      	add	r3, fp
 8001bc6:	001e      	movs	r6, r3
 8001bc8:	4283      	cmp	r3, r0
 8001bca:	4180      	sbcs	r0, r0
 8001bcc:	0423      	lsls	r3, r4, #16
 8001bce:	4698      	mov	r8, r3
 8001bd0:	9b05      	ldr	r3, [sp, #20]
 8001bd2:	0c3f      	lsrs	r7, r7, #16
 8001bd4:	4447      	add	r7, r8
 8001bd6:	4698      	mov	r8, r3
 8001bd8:	1876      	adds	r6, r6, r1
 8001bda:	428e      	cmp	r6, r1
 8001bdc:	4189      	sbcs	r1, r1
 8001bde:	4447      	add	r7, r8
 8001be0:	4240      	negs	r0, r0
 8001be2:	183d      	adds	r5, r7, r0
 8001be4:	46a8      	mov	r8, r5
 8001be6:	4693      	mov	fp, r2
 8001be8:	4249      	negs	r1, r1
 8001bea:	468a      	mov	sl, r1
 8001bec:	44c3      	add	fp, r8
 8001bee:	429f      	cmp	r7, r3
 8001bf0:	41bf      	sbcs	r7, r7
 8001bf2:	4580      	cmp	r8, r0
 8001bf4:	4180      	sbcs	r0, r0
 8001bf6:	9b03      	ldr	r3, [sp, #12]
 8001bf8:	44da      	add	sl, fp
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	4653      	mov	r3, sl
 8001bfe:	4240      	negs	r0, r0
 8001c00:	427f      	negs	r7, r7
 8001c02:	4307      	orrs	r7, r0
 8001c04:	0c24      	lsrs	r4, r4, #16
 8001c06:	4593      	cmp	fp, r2
 8001c08:	4192      	sbcs	r2, r2
 8001c0a:	458a      	cmp	sl, r1
 8001c0c:	4189      	sbcs	r1, r1
 8001c0e:	193f      	adds	r7, r7, r4
 8001c10:	0ddc      	lsrs	r4, r3, #23
 8001c12:	9b04      	ldr	r3, [sp, #16]
 8001c14:	0275      	lsls	r5, r6, #9
 8001c16:	431d      	orrs	r5, r3
 8001c18:	1e68      	subs	r0, r5, #1
 8001c1a:	4185      	sbcs	r5, r0
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	4252      	negs	r2, r2
 8001c20:	4249      	negs	r1, r1
 8001c22:	430a      	orrs	r2, r1
 8001c24:	18bf      	adds	r7, r7, r2
 8001c26:	4447      	add	r7, r8
 8001c28:	0df6      	lsrs	r6, r6, #23
 8001c2a:	027f      	lsls	r7, r7, #9
 8001c2c:	4335      	orrs	r5, r6
 8001c2e:	025a      	lsls	r2, r3, #9
 8001c30:	433c      	orrs	r4, r7
 8001c32:	4315      	orrs	r5, r2
 8001c34:	01fb      	lsls	r3, r7, #7
 8001c36:	d400      	bmi.n	8001c3a <__aeabi_dmul+0x2fe>
 8001c38:	e0c1      	b.n	8001dbe <__aeabi_dmul+0x482>
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	086a      	lsrs	r2, r5, #1
 8001c3e:	400d      	ands	r5, r1
 8001c40:	4315      	orrs	r5, r2
 8001c42:	07e2      	lsls	r2, r4, #31
 8001c44:	4315      	orrs	r5, r2
 8001c46:	0864      	lsrs	r4, r4, #1
 8001c48:	4926      	ldr	r1, [pc, #152]	; (8001ce4 <__aeabi_dmul+0x3a8>)
 8001c4a:	4461      	add	r1, ip
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	dd56      	ble.n	8001cfe <__aeabi_dmul+0x3c2>
 8001c50:	076b      	lsls	r3, r5, #29
 8001c52:	d009      	beq.n	8001c68 <__aeabi_dmul+0x32c>
 8001c54:	220f      	movs	r2, #15
 8001c56:	402a      	ands	r2, r5
 8001c58:	2a04      	cmp	r2, #4
 8001c5a:	d005      	beq.n	8001c68 <__aeabi_dmul+0x32c>
 8001c5c:	1d2a      	adds	r2, r5, #4
 8001c5e:	42aa      	cmp	r2, r5
 8001c60:	41ad      	sbcs	r5, r5
 8001c62:	426d      	negs	r5, r5
 8001c64:	1964      	adds	r4, r4, r5
 8001c66:	0015      	movs	r5, r2
 8001c68:	01e3      	lsls	r3, r4, #7
 8001c6a:	d504      	bpl.n	8001c76 <__aeabi_dmul+0x33a>
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <__aeabi_dmul+0x3ac>)
 8001c70:	00c9      	lsls	r1, r1, #3
 8001c72:	4014      	ands	r4, r2
 8001c74:	4461      	add	r1, ip
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <__aeabi_dmul+0x3b0>)
 8001c78:	4291      	cmp	r1, r2
 8001c7a:	dd00      	ble.n	8001c7e <__aeabi_dmul+0x342>
 8001c7c:	e724      	b.n	8001ac8 <__aeabi_dmul+0x18c>
 8001c7e:	0762      	lsls	r2, r4, #29
 8001c80:	08ed      	lsrs	r5, r5, #3
 8001c82:	0264      	lsls	r4, r4, #9
 8001c84:	0549      	lsls	r1, r1, #21
 8001c86:	4315      	orrs	r5, r2
 8001c88:	0b24      	lsrs	r4, r4, #12
 8001c8a:	0d4a      	lsrs	r2, r1, #21
 8001c8c:	e6c6      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001c8e:	9701      	str	r7, [sp, #4]
 8001c90:	e6b8      	b.n	8001a04 <__aeabi_dmul+0xc8>
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <__aeabi_dmul+0x398>)
 8001c94:	2003      	movs	r0, #3
 8001c96:	4694      	mov	ip, r2
 8001c98:	4463      	add	r3, ip
 8001c9a:	464a      	mov	r2, r9
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	4691      	mov	r9, r2
 8001ca4:	4652      	mov	r2, sl
 8001ca6:	e68a      	b.n	80019be <__aeabi_dmul+0x82>
 8001ca8:	4649      	mov	r1, r9
 8001caa:	2301      	movs	r3, #1
 8001cac:	4319      	orrs	r1, r3
 8001cae:	4689      	mov	r9, r1
 8001cb0:	2600      	movs	r6, #0
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	e683      	b.n	80019be <__aeabi_dmul+0x82>
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2303      	movs	r3, #3
 8001cbc:	0005      	movs	r5, r0
 8001cbe:	4691      	mov	r9, r2
 8001cc0:	469b      	mov	fp, r3
 8001cc2:	e65e      	b.n	8001982 <__aeabi_dmul+0x46>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	4699      	mov	r9, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	2400      	movs	r4, #0
 8001cd0:	469b      	mov	fp, r3
 8001cd2:	e656      	b.n	8001982 <__aeabi_dmul+0x46>
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	fffffc01 	.word	0xfffffc01
 8001cdc:	0800a86c 	.word	0x0800a86c
 8001ce0:	fffffc0d 	.word	0xfffffc0d
 8001ce4:	000003ff 	.word	0x000003ff
 8001ce8:	feffffff 	.word	0xfeffffff
 8001cec:	000007fe 	.word	0x000007fe
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2480      	movs	r4, #128	; 0x80
 8001cf4:	2500      	movs	r5, #0
 8001cf6:	4a44      	ldr	r2, [pc, #272]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	0324      	lsls	r4, r4, #12
 8001cfc:	e68e      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001cfe:	2001      	movs	r0, #1
 8001d00:	1a40      	subs	r0, r0, r1
 8001d02:	2838      	cmp	r0, #56	; 0x38
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dmul+0x3cc>
 8001d06:	e686      	b.n	8001a16 <__aeabi_dmul+0xda>
 8001d08:	281f      	cmp	r0, #31
 8001d0a:	dd5b      	ble.n	8001dc4 <__aeabi_dmul+0x488>
 8001d0c:	221f      	movs	r2, #31
 8001d0e:	0023      	movs	r3, r4
 8001d10:	4252      	negs	r2, r2
 8001d12:	1a51      	subs	r1, r2, r1
 8001d14:	40cb      	lsrs	r3, r1
 8001d16:	0019      	movs	r1, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d003      	beq.n	8001d24 <__aeabi_dmul+0x3e8>
 8001d1c:	4a3b      	ldr	r2, [pc, #236]	; (8001e0c <__aeabi_dmul+0x4d0>)
 8001d1e:	4462      	add	r2, ip
 8001d20:	4094      	lsls	r4, r2
 8001d22:	4325      	orrs	r5, r4
 8001d24:	1e6a      	subs	r2, r5, #1
 8001d26:	4195      	sbcs	r5, r2
 8001d28:	002a      	movs	r2, r5
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	2107      	movs	r1, #7
 8001d2e:	000d      	movs	r5, r1
 8001d30:	2400      	movs	r4, #0
 8001d32:	4015      	ands	r5, r2
 8001d34:	4211      	tst	r1, r2
 8001d36:	d05b      	beq.n	8001df0 <__aeabi_dmul+0x4b4>
 8001d38:	210f      	movs	r1, #15
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	4011      	ands	r1, r2
 8001d3e:	2904      	cmp	r1, #4
 8001d40:	d053      	beq.n	8001dea <__aeabi_dmul+0x4ae>
 8001d42:	1d11      	adds	r1, r2, #4
 8001d44:	4291      	cmp	r1, r2
 8001d46:	4192      	sbcs	r2, r2
 8001d48:	4252      	negs	r2, r2
 8001d4a:	18a4      	adds	r4, r4, r2
 8001d4c:	000a      	movs	r2, r1
 8001d4e:	0223      	lsls	r3, r4, #8
 8001d50:	d54b      	bpl.n	8001dea <__aeabi_dmul+0x4ae>
 8001d52:	2201      	movs	r2, #1
 8001d54:	2400      	movs	r4, #0
 8001d56:	2500      	movs	r5, #0
 8001d58:	e660      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	031b      	lsls	r3, r3, #12
 8001d5e:	421c      	tst	r4, r3
 8001d60:	d009      	beq.n	8001d76 <__aeabi_dmul+0x43a>
 8001d62:	421e      	tst	r6, r3
 8001d64:	d107      	bne.n	8001d76 <__aeabi_dmul+0x43a>
 8001d66:	4333      	orrs	r3, r6
 8001d68:	031c      	lsls	r4, r3, #12
 8001d6a:	4643      	mov	r3, r8
 8001d6c:	0015      	movs	r5, r2
 8001d6e:	0b24      	lsrs	r4, r4, #12
 8001d70:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	e652      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0312      	lsls	r2, r2, #12
 8001d7a:	4314      	orrs	r4, r2
 8001d7c:	0324      	lsls	r4, r4, #12
 8001d7e:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001d80:	0b24      	lsrs	r4, r4, #12
 8001d82:	9701      	str	r7, [sp, #4]
 8001d84:	e64a      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001d86:	f000 f8ab 	bl	8001ee0 <__clzsi2>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	3215      	adds	r2, #21
 8001d90:	3020      	adds	r0, #32
 8001d92:	2a1c      	cmp	r2, #28
 8001d94:	dc00      	bgt.n	8001d98 <__aeabi_dmul+0x45c>
 8001d96:	e684      	b.n	8001aa2 <__aeabi_dmul+0x166>
 8001d98:	4656      	mov	r6, sl
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	409e      	lsls	r6, r3
 8001da0:	e689      	b.n	8001ab6 <__aeabi_dmul+0x17a>
 8001da2:	f000 f89d 	bl	8001ee0 <__clzsi2>
 8001da6:	0001      	movs	r1, r0
 8001da8:	0002      	movs	r2, r0
 8001daa:	3115      	adds	r1, #21
 8001dac:	3220      	adds	r2, #32
 8001dae:	291c      	cmp	r1, #28
 8001db0:	dc00      	bgt.n	8001db4 <__aeabi_dmul+0x478>
 8001db2:	e64e      	b.n	8001a52 <__aeabi_dmul+0x116>
 8001db4:	0034      	movs	r4, r6
 8001db6:	3808      	subs	r0, #8
 8001db8:	2500      	movs	r5, #0
 8001dba:	4084      	lsls	r4, r0
 8001dbc:	e653      	b.n	8001a66 <__aeabi_dmul+0x12a>
 8001dbe:	9b00      	ldr	r3, [sp, #0]
 8001dc0:	469c      	mov	ip, r3
 8001dc2:	e741      	b.n	8001c48 <__aeabi_dmul+0x30c>
 8001dc4:	4912      	ldr	r1, [pc, #72]	; (8001e10 <__aeabi_dmul+0x4d4>)
 8001dc6:	0022      	movs	r2, r4
 8001dc8:	4461      	add	r1, ip
 8001dca:	002e      	movs	r6, r5
 8001dcc:	408d      	lsls	r5, r1
 8001dce:	408a      	lsls	r2, r1
 8001dd0:	40c6      	lsrs	r6, r0
 8001dd2:	1e69      	subs	r1, r5, #1
 8001dd4:	418d      	sbcs	r5, r1
 8001dd6:	4332      	orrs	r2, r6
 8001dd8:	432a      	orrs	r2, r5
 8001dda:	40c4      	lsrs	r4, r0
 8001ddc:	0753      	lsls	r3, r2, #29
 8001dde:	d0b6      	beq.n	8001d4e <__aeabi_dmul+0x412>
 8001de0:	210f      	movs	r1, #15
 8001de2:	4011      	ands	r1, r2
 8001de4:	2904      	cmp	r1, #4
 8001de6:	d1ac      	bne.n	8001d42 <__aeabi_dmul+0x406>
 8001de8:	e7b1      	b.n	8001d4e <__aeabi_dmul+0x412>
 8001dea:	0765      	lsls	r5, r4, #29
 8001dec:	0264      	lsls	r4, r4, #9
 8001dee:	0b24      	lsrs	r4, r4, #12
 8001df0:	08d2      	lsrs	r2, r2, #3
 8001df2:	4315      	orrs	r5, r2
 8001df4:	2200      	movs	r2, #0
 8001df6:	e611      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	0312      	lsls	r2, r2, #12
 8001dfc:	4314      	orrs	r4, r2
 8001dfe:	0324      	lsls	r4, r4, #12
 8001e00:	4a01      	ldr	r2, [pc, #4]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001e02:	0b24      	lsrs	r4, r4, #12
 8001e04:	e60a      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	0000043e 	.word	0x0000043e
 8001e10:	0000041e 	.word	0x0000041e

08001e14 <__aeabi_d2iz>:
 8001e14:	000a      	movs	r2, r1
 8001e16:	b530      	push	{r4, r5, lr}
 8001e18:	4c13      	ldr	r4, [pc, #76]	; (8001e68 <__aeabi_d2iz+0x54>)
 8001e1a:	0053      	lsls	r3, r2, #1
 8001e1c:	0309      	lsls	r1, r1, #12
 8001e1e:	0005      	movs	r5, r0
 8001e20:	0b09      	lsrs	r1, r1, #12
 8001e22:	2000      	movs	r0, #0
 8001e24:	0d5b      	lsrs	r3, r3, #21
 8001e26:	0fd2      	lsrs	r2, r2, #31
 8001e28:	42a3      	cmp	r3, r4
 8001e2a:	dd04      	ble.n	8001e36 <__aeabi_d2iz+0x22>
 8001e2c:	480f      	ldr	r0, [pc, #60]	; (8001e6c <__aeabi_d2iz+0x58>)
 8001e2e:	4283      	cmp	r3, r0
 8001e30:	dd02      	ble.n	8001e38 <__aeabi_d2iz+0x24>
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <__aeabi_d2iz+0x5c>)
 8001e34:	18d0      	adds	r0, r2, r3
 8001e36:	bd30      	pop	{r4, r5, pc}
 8001e38:	2080      	movs	r0, #128	; 0x80
 8001e3a:	0340      	lsls	r0, r0, #13
 8001e3c:	4301      	orrs	r1, r0
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <__aeabi_d2iz+0x60>)
 8001e40:	1ac0      	subs	r0, r0, r3
 8001e42:	281f      	cmp	r0, #31
 8001e44:	dd08      	ble.n	8001e58 <__aeabi_d2iz+0x44>
 8001e46:	480c      	ldr	r0, [pc, #48]	; (8001e78 <__aeabi_d2iz+0x64>)
 8001e48:	1ac3      	subs	r3, r0, r3
 8001e4a:	40d9      	lsrs	r1, r3
 8001e4c:	000b      	movs	r3, r1
 8001e4e:	4258      	negs	r0, r3
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d1f0      	bne.n	8001e36 <__aeabi_d2iz+0x22>
 8001e54:	0018      	movs	r0, r3
 8001e56:	e7ee      	b.n	8001e36 <__aeabi_d2iz+0x22>
 8001e58:	4c08      	ldr	r4, [pc, #32]	; (8001e7c <__aeabi_d2iz+0x68>)
 8001e5a:	40c5      	lsrs	r5, r0
 8001e5c:	46a4      	mov	ip, r4
 8001e5e:	4463      	add	r3, ip
 8001e60:	4099      	lsls	r1, r3
 8001e62:	000b      	movs	r3, r1
 8001e64:	432b      	orrs	r3, r5
 8001e66:	e7f2      	b.n	8001e4e <__aeabi_d2iz+0x3a>
 8001e68:	000003fe 	.word	0x000003fe
 8001e6c:	0000041d 	.word	0x0000041d
 8001e70:	7fffffff 	.word	0x7fffffff
 8001e74:	00000433 	.word	0x00000433
 8001e78:	00000413 	.word	0x00000413
 8001e7c:	fffffbed 	.word	0xfffffbed

08001e80 <__aeabi_i2d>:
 8001e80:	b570      	push	{r4, r5, r6, lr}
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d016      	beq.n	8001eb4 <__aeabi_i2d+0x34>
 8001e86:	17c3      	asrs	r3, r0, #31
 8001e88:	18c5      	adds	r5, r0, r3
 8001e8a:	405d      	eors	r5, r3
 8001e8c:	0fc4      	lsrs	r4, r0, #31
 8001e8e:	0028      	movs	r0, r5
 8001e90:	f000 f826 	bl	8001ee0 <__clzsi2>
 8001e94:	4a11      	ldr	r2, [pc, #68]	; (8001edc <__aeabi_i2d+0x5c>)
 8001e96:	1a12      	subs	r2, r2, r0
 8001e98:	280a      	cmp	r0, #10
 8001e9a:	dc16      	bgt.n	8001eca <__aeabi_i2d+0x4a>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	002e      	movs	r6, r5
 8001ea0:	3315      	adds	r3, #21
 8001ea2:	409e      	lsls	r6, r3
 8001ea4:	230b      	movs	r3, #11
 8001ea6:	1a18      	subs	r0, r3, r0
 8001ea8:	40c5      	lsrs	r5, r0
 8001eaa:	0553      	lsls	r3, r2, #21
 8001eac:	032d      	lsls	r5, r5, #12
 8001eae:	0b2d      	lsrs	r5, r5, #12
 8001eb0:	0d5b      	lsrs	r3, r3, #21
 8001eb2:	e003      	b.n	8001ebc <__aeabi_i2d+0x3c>
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2500      	movs	r5, #0
 8001eba:	2600      	movs	r6, #0
 8001ebc:	051b      	lsls	r3, r3, #20
 8001ebe:	432b      	orrs	r3, r5
 8001ec0:	07e4      	lsls	r4, r4, #31
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	0030      	movs	r0, r6
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
 8001eca:	380b      	subs	r0, #11
 8001ecc:	4085      	lsls	r5, r0
 8001ece:	0553      	lsls	r3, r2, #21
 8001ed0:	032d      	lsls	r5, r5, #12
 8001ed2:	2600      	movs	r6, #0
 8001ed4:	0b2d      	lsrs	r5, r5, #12
 8001ed6:	0d5b      	lsrs	r3, r3, #21
 8001ed8:	e7f0      	b.n	8001ebc <__aeabi_i2d+0x3c>
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	0000041e 	.word	0x0000041e

08001ee0 <__clzsi2>:
 8001ee0:	211c      	movs	r1, #28
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	4298      	cmp	r0, r3
 8001ee8:	d301      	bcc.n	8001eee <__clzsi2+0xe>
 8001eea:	0c00      	lsrs	r0, r0, #16
 8001eec:	3910      	subs	r1, #16
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	4298      	cmp	r0, r3
 8001ef2:	d301      	bcc.n	8001ef8 <__clzsi2+0x18>
 8001ef4:	0a00      	lsrs	r0, r0, #8
 8001ef6:	3908      	subs	r1, #8
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	4298      	cmp	r0, r3
 8001efc:	d301      	bcc.n	8001f02 <__clzsi2+0x22>
 8001efe:	0900      	lsrs	r0, r0, #4
 8001f00:	3904      	subs	r1, #4
 8001f02:	a202      	add	r2, pc, #8	; (adr r2, 8001f0c <__clzsi2+0x2c>)
 8001f04:	5c10      	ldrb	r0, [r2, r0]
 8001f06:	1840      	adds	r0, r0, r1
 8001f08:	4770      	bx	lr
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	02020304 	.word	0x02020304
 8001f10:	01010101 	.word	0x01010101
	...

08001f1c <__clzdi2>:
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	2900      	cmp	r1, #0
 8001f20:	d103      	bne.n	8001f2a <__clzdi2+0xe>
 8001f22:	f7ff ffdd 	bl	8001ee0 <__clzsi2>
 8001f26:	3020      	adds	r0, #32
 8001f28:	e002      	b.n	8001f30 <__clzdi2+0x14>
 8001f2a:	1c08      	adds	r0, r1, #0
 8001f2c:	f7ff ffd8 	bl	8001ee0 <__clzsi2>
 8001f30:	bd10      	pop	{r4, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)

08001f34 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f3a:	2318      	movs	r3, #24
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	0018      	movs	r0, r3
 8001f40:	2308      	movs	r3, #8
 8001f42:	001a      	movs	r2, r3
 8001f44:	2100      	movs	r1, #0
 8001f46:	f008 f8a0 	bl	800a08a <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	2314      	movs	r3, #20
 8001f50:	001a      	movs	r2, r3
 8001f52:	2100      	movs	r1, #0
 8001f54:	f008 f899 	bl	800a08a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001f58:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <MX_ADC_Init+0x124>)
 8001f5a:	4a40      	ldr	r2, [pc, #256]	; (800205c <MX_ADC_Init+0x128>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <MX_ADC_Init+0x124>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f64:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <MX_ADC_Init+0x124>)
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	05d2      	lsls	r2, r2, #23
 8001f6a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f6c:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <MX_ADC_Init+0x124>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <MX_ADC_Init+0x124>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f78:	4b37      	ldr	r3, [pc, #220]	; (8002058 <MX_ADC_Init+0x124>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f7e:	4b36      	ldr	r3, [pc, #216]	; (8002058 <MX_ADC_Init+0x124>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <MX_ADC_Init+0x124>)
 8001f86:	2220      	movs	r2, #32
 8001f88:	2101      	movs	r1, #1
 8001f8a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f8c:	4b32      	ldr	r3, [pc, #200]	; (8002058 <MX_ADC_Init+0x124>)
 8001f8e:	2221      	movs	r2, #33	; 0x21
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f94:	4b30      	ldr	r3, [pc, #192]	; (8002058 <MX_ADC_Init+0x124>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <MX_ADC_Init+0x124>)
 8001f9c:	22c2      	movs	r2, #194	; 0xc2
 8001f9e:	32ff      	adds	r2, #255	; 0xff
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <MX_ADC_Init+0x124>)
 8001fa4:	222c      	movs	r2, #44	; 0x2c
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <MX_ADC_Init+0x124>)
 8001fac:	2204      	movs	r2, #4
 8001fae:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <MX_ADC_Init+0x124>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001fb6:	4b28      	ldr	r3, [pc, #160]	; (8002058 <MX_ADC_Init+0x124>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001fbc:	4b26      	ldr	r3, [pc, #152]	; (8002058 <MX_ADC_Init+0x124>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <MX_ADC_Init+0x124>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <MX_ADC_Init+0x124>)
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f003 faba 	bl	8005544 <HAL_ADC_Init>
 8001fd0:	1e03      	subs	r3, r0, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001fd4:	f002 f936 	bl	8004244 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fd8:	2118      	movs	r1, #24
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	0152      	lsls	r2, r2, #5
 8001fe6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001fe8:	187a      	adds	r2, r7, r1
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <MX_ADC_Init+0x124>)
 8001fec:	0011      	movs	r1, r2
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f003 fe16 	bl	8005c20 <HAL_ADC_ConfigChannel>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 8001ff8:	f002 f924 	bl	8004244 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ffc:	2118      	movs	r1, #24
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	4a17      	ldr	r2, [pc, #92]	; (8002060 <MX_ADC_Init+0x12c>)
 8002002:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002004:	187a      	adds	r2, r7, r1
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <MX_ADC_Init+0x124>)
 8002008:	0011      	movs	r1, r2
 800200a:	0018      	movs	r0, r3
 800200c:	f003 fe08 	bl	8005c20 <HAL_ADC_ConfigChannel>
 8002010:	1e03      	subs	r3, r0, #0
 8002012:	d001      	beq.n	8002018 <MX_ADC_Init+0xe4>
  {
    Error_Handler();
 8002014:	f002 f916 	bl	8004244 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	22c0      	movs	r2, #192	; 0xc0
 800201c:	0412      	lsls	r2, r2, #16
 800201e:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2201      	movs	r2, #1
 8002024:	605a      	str	r2, [r3, #4]
  AnalogWDGConfig.ITMode = ENABLE;
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2201      	movs	r2, #1
 800202a:	721a      	strb	r2, [r3, #8]
  AnalogWDGConfig.HighThreshold = 4095;
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <MX_ADC_Init+0x130>)
 8002030:	60da      	str	r2, [r3, #12]
  AnalogWDGConfig.LowThreshold = 2480;
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	229b      	movs	r2, #155	; 0x9b
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 800203a:	1d3a      	adds	r2, r7, #4
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_ADC_Init+0x124>)
 800203e:	0011      	movs	r1, r2
 8002040:	0018      	movs	r0, r3
 8002042:	f003 fe8d 	bl	8005d60 <HAL_ADC_AnalogWDGConfig>
 8002046:	1e03      	subs	r3, r0, #0
 8002048:	d001      	beq.n	800204e <MX_ADC_Init+0x11a>
  {
    Error_Handler();
 800204a:	f002 f8fb 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b008      	add	sp, #32
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	2000014c 	.word	0x2000014c
 800205c:	40012400 	.word	0x40012400
 8002060:	04000002 	.word	0x04000002
 8002064:	00000fff 	.word	0x00000fff

08002068 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	240c      	movs	r4, #12
 8002072:	193b      	adds	r3, r7, r4
 8002074:	0018      	movs	r0, r3
 8002076:	2314      	movs	r3, #20
 8002078:	001a      	movs	r2, r3
 800207a:	2100      	movs	r1, #0
 800207c:	f008 f805 	bl	800a08a <memset>
  if(adcHandle->Instance==ADC1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <HAL_ADC_MspInit+0xd8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d155      	bne.n	8002136 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800208a:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <HAL_ADC_MspInit+0xdc>)
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_ADC_MspInit+0xdc>)
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	0089      	lsls	r1, r1, #2
 8002094:	430a      	orrs	r2, r1
 8002096:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_ADC_MspInit+0xdc>)
 800209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_ADC_MspInit+0xdc>)
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_ADC_MspInit+0xdc>)
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	2201      	movs	r2, #1
 80020aa:	4013      	ands	r3, r2
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020b0:	193b      	adds	r3, r7, r4
 80020b2:	2203      	movs	r2, #3
 80020b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b6:	193b      	adds	r3, r7, r4
 80020b8:	2203      	movs	r2, #3
 80020ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	193a      	adds	r2, r7, r4
 80020c4:	23a0      	movs	r3, #160	; 0xa0
 80020c6:	05db      	lsls	r3, r3, #23
 80020c8:	0011      	movs	r1, r2
 80020ca:	0018      	movs	r0, r3
 80020cc:	f004 fa00 	bl	80064d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_ADC_MspInit+0xe4>)
 80020d4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	0052      	lsls	r2, r2, #1
 80020f4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	00d2      	lsls	r2, r2, #3
 80020fc:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 8002100:	2220      	movs	r2, #32
 8002102:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 800210c:	0018      	movs	r0, r3
 800210e:	f004 f8b9 	bl	8006284 <HAL_DMA_Init>
 8002112:	1e03      	subs	r3, r0, #0
 8002114:	d001      	beq.n	800211a <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8002116:	f002 f895 	bl	8004244 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 800211e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_ADC_MspInit+0xe0>)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2101      	movs	r1, #1
 800212a:	200c      	movs	r0, #12
 800212c:	f004 f878 	bl	8006220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002130:	200c      	movs	r0, #12
 8002132:	f004 f88a 	bl	800624a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b009      	add	sp, #36	; 0x24
 800213c:	bd90      	pop	{r4, r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	40012400 	.word	0x40012400
 8002144:	40021000 	.word	0x40021000
 8002148:	20000104 	.word	0x20000104
 800214c:	40020008 	.word	0x40020008

08002150 <ADC_Select_CH0>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC_Select_CH0(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
    HAL_ADC_Stop(&hadc);
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <ADC_Select_CH0+0x48>)
 8002158:	0018      	movs	r0, r3
 800215a:	f003 fbbb 	bl	80058d4 <HAL_ADC_Stop>
    ADC_ChannelConfTypeDef sConfig = {0};
 800215e:	003b      	movs	r3, r7
 8002160:	0018      	movs	r0, r3
 8002162:	2308      	movs	r3, #8
 8002164:	001a      	movs	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	f007 ff8f 	bl	800a08a <memset>

    sConfig.Channel = ADC_CHANNEL_0;
 800216c:	003b      	movs	r3, r7
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002172:	003b      	movs	r3, r7
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	0152      	lsls	r2, r2, #5
 8002178:	605a      	str	r2, [r3, #4]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800217a:	003a      	movs	r2, r7
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <ADC_Select_CH0+0x48>)
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f003 fd4d 	bl	8005c20 <HAL_ADC_ConfigChannel>
 8002186:	1e03      	subs	r3, r0, #0
 8002188:	d001      	beq.n	800218e <ADC_Select_CH0+0x3e>
    {
        Error_Handler();
 800218a:	f002 f85b 	bl	8004244 <Error_Handler>
    }
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b002      	add	sp, #8
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	2000014c 	.word	0x2000014c

0800219c <ADC_Select_CH1>:

void ADC_Select_CH1(void) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
    HAL_ADC_Stop(&hadc);
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <ADC_Select_CH1+0x48>)
 80021a4:	0018      	movs	r0, r3
 80021a6:	f003 fb95 	bl	80058d4 <HAL_ADC_Stop>
    ADC_ChannelConfTypeDef sConfig = {0};
 80021aa:	003b      	movs	r3, r7
 80021ac:	0018      	movs	r0, r3
 80021ae:	2308      	movs	r3, #8
 80021b0:	001a      	movs	r2, r3
 80021b2:	2100      	movs	r1, #0
 80021b4:	f007 ff69 	bl	800a08a <memset>

    sConfig.Channel = ADC_CHANNEL_1;
 80021b8:	003b      	movs	r3, r7
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <ADC_Select_CH1+0x4c>)
 80021bc:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021be:	003b      	movs	r3, r7
 80021c0:	2280      	movs	r2, #128	; 0x80
 80021c2:	0152      	lsls	r2, r2, #5
 80021c4:	605a      	str	r2, [r3, #4]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021c6:	003a      	movs	r2, r7
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <ADC_Select_CH1+0x48>)
 80021ca:	0011      	movs	r1, r2
 80021cc:	0018      	movs	r0, r3
 80021ce:	f003 fd27 	bl	8005c20 <HAL_ADC_ConfigChannel>
 80021d2:	1e03      	subs	r3, r0, #0
 80021d4:	d001      	beq.n	80021da <ADC_Select_CH1+0x3e>
    {
        Error_Handler();
 80021d6:	f002 f835 	bl	8004244 <Error_Handler>
    }
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	2000014c 	.word	0x2000014c
 80021e8:	04000002 	.word	0x04000002

080021ec <bq_init>:
#include "stm32l0xx_hal.h"
#include "i2c.h"

#define I2C hi2c1

int bq_init(){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
	// return BAT_INIT_FAIL if not able to init (BAT_INIT_SUCCESS for success)

	/* === Set BQ Max Battery Capacity === */
	if (BQ27441_setCapacity(BAT_CAP_MAX) != BAT_INIT_SUCCESS) return BAT_INIT_FAIL;
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <bq_init+0x34>)
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 f818 	bl	8002228 <BQ27441_setCapacity>
 80021f8:	0003      	movs	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d002      	beq.n	8002204 <bq_init+0x18>
 80021fe:	2301      	movs	r3, #1
 8002200:	425b      	negs	r3, r3
 8002202:	e00a      	b.n	800221a <bq_init+0x2e>
	/* === Set BQ Max Battery Energy === */
	/*
		Design Energy should be set to be Design Capacity × 3.7 if using the bq27441-G1A or Design
		Capacity × 3.8 if using the bq27441-G1B
	*/
	if (BQ27441_setDesignEnergy((uint16_t) ((float) BAT_CAP_MAX * 3.7)) != BAT_INIT_SUCCESS) return BAT_INIT_FAIL;
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <bq_init+0x38>)
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f834 	bl	8002274 <BQ27441_setDesignEnergy>
 800220c:	0003      	movs	r3, r0
 800220e:	2b01      	cmp	r3, #1
 8002210:	d002      	beq.n	8002218 <bq_init+0x2c>
 8002212:	2301      	movs	r3, #1
 8002214:	425b      	negs	r3, r3
 8002216:	e000      	b.n	800221a <bq_init+0x2e>
//	retval = BQ27441_writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
//	if (retval != BAT_INIT_SUCCESS)
//		return BAT_INIT_FAIL;


	return BAT_INIT_SUCCESS;
 8002218:	2301      	movs	r3, #1
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	00001130 	.word	0x00001130
 8002224:	00003f98 	.word	0x00003f98

08002228 <BQ27441_setCapacity>:
 ************************** Initialization Functions *************************
 *****************************************************************************/

// Configures the design capacity of the connected battery.
int BQ27441_setCapacity(uint16_t capacity)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	0002      	movs	r2, r0
 8002230:	1dbb      	adds	r3, r7, #6
 8002232:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0A (10)
	// Design capacity is a 2-byte piece of data - MSB first
	// Unit: mAh

	uint8_t capMSB = capacity >> 8;
 8002234:	1dbb      	adds	r3, r7, #6
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	b29a      	uxth	r2, r3
 800223c:	200f      	movs	r0, #15
 800223e:	183b      	adds	r3, r7, r0
 8002240:	701a      	strb	r2, [r3, #0]
	uint8_t capLSB = capacity & 0x00FF;
 8002242:	240e      	movs	r4, #14
 8002244:	193b      	adds	r3, r7, r4
 8002246:	1dba      	adds	r2, r7, #6
 8002248:	8812      	ldrh	r2, [r2, #0]
 800224a:	701a      	strb	r2, [r3, #0]
	uint8_t capacityData[2] = {capLSB, capMSB};
 800224c:	210c      	movs	r1, #12
 800224e:	187b      	adds	r3, r7, r1
 8002250:	193a      	adds	r2, r7, r4
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	187b      	adds	r3, r7, r1
 8002258:	183a      	adds	r2, r7, r0
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	705a      	strb	r2, [r3, #1]
	return BQ27441_writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
 800225e:	187a      	adds	r2, r7, r1
 8002260:	2302      	movs	r3, #2
 8002262:	210a      	movs	r1, #10
 8002264:	2052      	movs	r0, #82	; 0x52
 8002266:	f000 f94b 	bl	8002500 <BQ27441_writeExtendedData>
 800226a:	0003      	movs	r3, r0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b005      	add	sp, #20
 8002272:	bd90      	pop	{r4, r7, pc}

08002274 <BQ27441_setDesignEnergy>:

// Configures the design energy of the connected battery.
int BQ27441_setDesignEnergy(uint16_t energy)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	0002      	movs	r2, r0
 800227c:	1dbb      	adds	r3, r7, #6
 800227e:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0C (12)
	// Design energy is a 2-byte piece of data - MSB first
	// Unit: mWh

	uint8_t enMSB = energy >> 8;
 8002280:	1dbb      	adds	r3, r7, #6
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b29a      	uxth	r2, r3
 8002288:	200f      	movs	r0, #15
 800228a:	183b      	adds	r3, r7, r0
 800228c:	701a      	strb	r2, [r3, #0]
	uint8_t enLSB = energy & 0x00FF;
 800228e:	240e      	movs	r4, #14
 8002290:	193b      	adds	r3, r7, r4
 8002292:	1dba      	adds	r2, r7, #6
 8002294:	8812      	ldrh	r2, [r2, #0]
 8002296:	701a      	strb	r2, [r3, #0]
	uint8_t energyData[2] = {enLSB, enMSB};
 8002298:	210c      	movs	r1, #12
 800229a:	187b      	adds	r3, r7, r1
 800229c:	193a      	adds	r2, r7, r4
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	187b      	adds	r3, r7, r1
 80022a4:	183a      	adds	r2, r7, r0
 80022a6:	7812      	ldrb	r2, [r2, #0]
 80022a8:	705a      	strb	r2, [r3, #1]
	return BQ27441_writeExtendedData(BQ27441_ID_STATE, 12, energyData, 2);
 80022aa:	187a      	adds	r2, r7, r1
 80022ac:	2302      	movs	r3, #2
 80022ae:	210c      	movs	r1, #12
 80022b0:	2052      	movs	r0, #82	; 0x52
 80022b2:	f000 f925 	bl	8002500 <BQ27441_writeExtendedData>
 80022b6:	0003      	movs	r3, r0
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b005      	add	sp, #20
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <BQ27441_voltage>:
/*****************************************************************************
 ********************** Battery Characteristics Functions ********************
 *****************************************************************************/
// Reads and returns the battery voltage
uint16_t BQ27441_voltage(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	return BQ27441_readWord(BQ27441_COMMAND_VOLTAGE);
 80022c4:	2004      	movs	r0, #4
 80022c6:	f000 f983 	bl	80025d0 <BQ27441_readWord>
 80022ca:	0003      	movs	r3, r0
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <BQ27441_current>:

// Reads and returns the specified current measurement
int16_t BQ27441_current(current_measure type)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	0002      	movs	r2, r0
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	701a      	strb	r2, [r3, #0]
	int16_t current = 0;
 80022de:	230e      	movs	r3, #14
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2200      	movs	r2, #0
 80022e4:	801a      	strh	r2, [r3, #0]
	switch (type)
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d017      	beq.n	800231e <BQ27441_current+0x4c>
 80022ee:	dc1f      	bgt.n	8002330 <BQ27441_current+0x5e>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <BQ27441_current+0x28>
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d009      	beq.n	800230c <BQ27441_current+0x3a>
 80022f8:	e01a      	b.n	8002330 <BQ27441_current+0x5e>
	{
	case AVG:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_CURRENT);
 80022fa:	2010      	movs	r0, #16
 80022fc:	f000 f968 	bl	80025d0 <BQ27441_readWord>
 8002300:	0003      	movs	r3, r0
 8002302:	001a      	movs	r2, r3
 8002304:	230e      	movs	r3, #14
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	801a      	strh	r2, [r3, #0]
		break;
 800230a:	e011      	b.n	8002330 <BQ27441_current+0x5e>
	case STBY:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_STDBY_CURRENT);
 800230c:	2012      	movs	r0, #18
 800230e:	f000 f95f 	bl	80025d0 <BQ27441_readWord>
 8002312:	0003      	movs	r3, r0
 8002314:	001a      	movs	r2, r3
 8002316:	230e      	movs	r3, #14
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	801a      	strh	r2, [r3, #0]
		break;
 800231c:	e008      	b.n	8002330 <BQ27441_current+0x5e>
	case MAX:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_MAX_CURRENT);
 800231e:	2014      	movs	r0, #20
 8002320:	f000 f956 	bl	80025d0 <BQ27441_readWord>
 8002324:	0003      	movs	r3, r0
 8002326:	001a      	movs	r2, r3
 8002328:	230e      	movs	r3, #14
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	801a      	strh	r2, [r3, #0]
		break;
 800232e:	46c0      	nop			; (mov r8, r8)
	}

	return current;
 8002330:	230e      	movs	r3, #14
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2200      	movs	r2, #0
 8002336:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b004      	add	sp, #16
 800233e:	bd80      	pop	{r7, pc}

08002340 <BQ27441_capacity>:

// Reads and returns the specified capacity measurement
uint16_t BQ27441_capacity(capacity_measure type)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	0002      	movs	r2, r0
 8002348:	1dfb      	adds	r3, r7, #7
 800234a:	701a      	strb	r2, [r3, #0]
	uint16_t capacity = 0;
 800234c:	230e      	movs	r3, #14
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	2200      	movs	r2, #0
 8002352:	801a      	strh	r2, [r3, #0]
	switch (type)
 8002354:	1dfb      	adds	r3, r7, #7
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d845      	bhi.n	80023e8 <BQ27441_capacity+0xa8>
 800235c:	009a      	lsls	r2, r3, #2
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <BQ27441_capacity+0xb8>)
 8002360:	18d3      	adds	r3, r2, r3
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	469f      	mov	pc, r3
	{
	case REMAIN:
		return BQ27441_readWord(BQ27441_COMMAND_REM_CAPACITY);
 8002366:	200c      	movs	r0, #12
 8002368:	f000 f932 	bl	80025d0 <BQ27441_readWord>
 800236c:	0003      	movs	r3, r0
 800236e:	e03e      	b.n	80023ee <BQ27441_capacity+0xae>
		break;
	case FULL:
		return BQ27441_readWord(BQ27441_COMMAND_FULL_CAPACITY);
 8002370:	200e      	movs	r0, #14
 8002372:	f000 f92d 	bl	80025d0 <BQ27441_readWord>
 8002376:	0003      	movs	r3, r0
 8002378:	e039      	b.n	80023ee <BQ27441_capacity+0xae>
		break;
	case AVAIL:
		capacity = BQ27441_readWord(BQ27441_COMMAND_NOM_CAPACITY);
 800237a:	230e      	movs	r3, #14
 800237c:	18fc      	adds	r4, r7, r3
 800237e:	2008      	movs	r0, #8
 8002380:	f000 f926 	bl	80025d0 <BQ27441_readWord>
 8002384:	0003      	movs	r3, r0
 8002386:	8023      	strh	r3, [r4, #0]
		break;
 8002388:	e02e      	b.n	80023e8 <BQ27441_capacity+0xa8>
	case AVAIL_FULL:
		capacity = BQ27441_readWord(BQ27441_COMMAND_AVAIL_CAPACITY);
 800238a:	230e      	movs	r3, #14
 800238c:	18fc      	adds	r4, r7, r3
 800238e:	200a      	movs	r0, #10
 8002390:	f000 f91e 	bl	80025d0 <BQ27441_readWord>
 8002394:	0003      	movs	r3, r0
 8002396:	8023      	strh	r3, [r4, #0]
		break;
 8002398:	e026      	b.n	80023e8 <BQ27441_capacity+0xa8>
	case REMAIN_F:
		capacity = BQ27441_readWord(BQ27441_COMMAND_REM_CAP_FIL);
 800239a:	230e      	movs	r3, #14
 800239c:	18fc      	adds	r4, r7, r3
 800239e:	202a      	movs	r0, #42	; 0x2a
 80023a0:	f000 f916 	bl	80025d0 <BQ27441_readWord>
 80023a4:	0003      	movs	r3, r0
 80023a6:	8023      	strh	r3, [r4, #0]
		break;
 80023a8:	e01e      	b.n	80023e8 <BQ27441_capacity+0xa8>
	case REMAIN_UF:
		capacity = BQ27441_readWord(BQ27441_COMMAND_REM_CAP_UNFL);
 80023aa:	230e      	movs	r3, #14
 80023ac:	18fc      	adds	r4, r7, r3
 80023ae:	2028      	movs	r0, #40	; 0x28
 80023b0:	f000 f90e 	bl	80025d0 <BQ27441_readWord>
 80023b4:	0003      	movs	r3, r0
 80023b6:	8023      	strh	r3, [r4, #0]
		break;
 80023b8:	e016      	b.n	80023e8 <BQ27441_capacity+0xa8>
	case FULL_F:
		capacity = BQ27441_readWord(BQ27441_COMMAND_FULL_CAP_FIL);
 80023ba:	230e      	movs	r3, #14
 80023bc:	18fc      	adds	r4, r7, r3
 80023be:	202e      	movs	r0, #46	; 0x2e
 80023c0:	f000 f906 	bl	80025d0 <BQ27441_readWord>
 80023c4:	0003      	movs	r3, r0
 80023c6:	8023      	strh	r3, [r4, #0]
		break;
 80023c8:	e00e      	b.n	80023e8 <BQ27441_capacity+0xa8>
	case FULL_UF:
		capacity = BQ27441_readWord(BQ27441_COMMAND_FULL_CAP_UNFL);
 80023ca:	230e      	movs	r3, #14
 80023cc:	18fc      	adds	r4, r7, r3
 80023ce:	202c      	movs	r0, #44	; 0x2c
 80023d0:	f000 f8fe 	bl	80025d0 <BQ27441_readWord>
 80023d4:	0003      	movs	r3, r0
 80023d6:	8023      	strh	r3, [r4, #0]
		break;
 80023d8:	e006      	b.n	80023e8 <BQ27441_capacity+0xa8>
	case DESIGN:
		capacity = BQ27441_readWord(BQ27441_EXTENDED_CAPACITY);
 80023da:	230e      	movs	r3, #14
 80023dc:	18fc      	adds	r4, r7, r3
 80023de:	203c      	movs	r0, #60	; 0x3c
 80023e0:	f000 f8f6 	bl	80025d0 <BQ27441_readWord>
 80023e4:	0003      	movs	r3, r0
 80023e6:	8023      	strh	r3, [r4, #0]
//		capacity = BQ27441_readWord(0x4A);
	}

	return capacity;
 80023e8:	230e      	movs	r3, #14
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	881b      	ldrh	r3, [r3, #0]
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b005      	add	sp, #20
 80023f4:	bd90      	pop	{r4, r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0800a8ac 	.word	0x0800a8ac

080023fc <BQ27441_power>:

// Reads and returns measured average power
int16_t BQ27441_power(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
	return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
 8002400:	2018      	movs	r0, #24
 8002402:	f000 f8e5 	bl	80025d0 <BQ27441_readWord>
 8002406:	0003      	movs	r3, r0
 8002408:	b21b      	sxth	r3, r3
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <BQ27441_soc>:

// Reads and returns specified state of charge measurement
uint16_t BQ27441_soc(soc_measure type)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	0002      	movs	r2, r0
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	701a      	strb	r2, [r3, #0]
	uint16_t socRet = 0;
 800241c:	230e      	movs	r3, #14
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	801a      	strh	r2, [r3, #0]
	switch (type)
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <BQ27441_soc+0x22>
 800242c:	2b01      	cmp	r3, #1
 800242e:	d008      	beq.n	8002442 <BQ27441_soc+0x32>
 8002430:	e00f      	b.n	8002452 <BQ27441_soc+0x42>
	{
	case FILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 8002432:	230e      	movs	r3, #14
 8002434:	18fc      	adds	r4, r7, r3
 8002436:	201c      	movs	r0, #28
 8002438:	f000 f8ca 	bl	80025d0 <BQ27441_readWord>
 800243c:	0003      	movs	r3, r0
 800243e:	8023      	strh	r3, [r4, #0]
		break;
 8002440:	e007      	b.n	8002452 <BQ27441_soc+0x42>
	case UNFILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 8002442:	230e      	movs	r3, #14
 8002444:	18fc      	adds	r4, r7, r3
 8002446:	2030      	movs	r0, #48	; 0x30
 8002448:	f000 f8c2 	bl	80025d0 <BQ27441_readWord>
 800244c:	0003      	movs	r3, r0
 800244e:	8023      	strh	r3, [r4, #0]
		break;
 8002450:	46c0      	nop			; (mov r8, r8)
	}

	return socRet;
 8002452:	230e      	movs	r3, #14
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	881b      	ldrh	r3, [r3, #0]
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b005      	add	sp, #20
 800245e:	bd90      	pop	{r4, r7, pc}

08002460 <BQ27441_soh>:

// Reads and returns specified state of health measurement
uint8_t BQ27441_soh(soh_measure type)
{
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	0002      	movs	r2, r0
 8002468:	1dfb      	adds	r3, r7, #7
 800246a:	701a      	strb	r2, [r3, #0]
	uint16_t sohRaw = BQ27441_readWord(BQ27441_COMMAND_SOH);
 800246c:	250e      	movs	r5, #14
 800246e:	197c      	adds	r4, r7, r5
 8002470:	2020      	movs	r0, #32
 8002472:	f000 f8ad 	bl	80025d0 <BQ27441_readWord>
 8002476:	0003      	movs	r3, r0
 8002478:	8023      	strh	r3, [r4, #0]
	uint8_t sohStatus = sohRaw >> 8;
 800247a:	0029      	movs	r1, r5
 800247c:	187b      	adds	r3, r7, r1
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	b29a      	uxth	r2, r3
 8002484:	230d      	movs	r3, #13
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	701a      	strb	r2, [r3, #0]
	uint8_t sohPercent = sohRaw & 0x00FF;
 800248a:	200c      	movs	r0, #12
 800248c:	183b      	adds	r3, r7, r0
 800248e:	187a      	adds	r2, r7, r1
 8002490:	8812      	ldrh	r2, [r2, #0]
 8002492:	701a      	strb	r2, [r3, #0]

	if (type == PERCENT)
 8002494:	1dfb      	adds	r3, r7, #7
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <BQ27441_soh+0x42>
		return sohPercent;
 800249c:	183b      	adds	r3, r7, r0
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	e002      	b.n	80024a8 <BQ27441_soh+0x48>
	else
		return sohStatus;
 80024a2:	230d      	movs	r3, #13
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	781b      	ldrb	r3, [r3, #0]
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b004      	add	sp, #16
 80024ae:	bdb0      	pop	{r4, r5, r7, pc}

080024b0 <BQ27441_temperature>:

// Reads and returns specified temperature measurement
uint16_t BQ27441_temperature(temp_measure type)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	0002      	movs	r2, r0
 80024b8:	1dfb      	adds	r3, r7, #7
 80024ba:	701a      	strb	r2, [r3, #0]
	uint16_t temp = 0;
 80024bc:	230e      	movs	r3, #14
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2200      	movs	r2, #0
 80024c2:	801a      	strh	r2, [r3, #0]
	switch (type)
 80024c4:	1dfb      	adds	r3, r7, #7
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <BQ27441_temperature+0x22>
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d008      	beq.n	80024e2 <BQ27441_temperature+0x32>
 80024d0:	e00f      	b.n	80024f2 <BQ27441_temperature+0x42>
	{
	case BATTERY:
		temp = BQ27441_readWord(BQ27441_COMMAND_TEMP);
 80024d2:	230e      	movs	r3, #14
 80024d4:	18fc      	adds	r4, r7, r3
 80024d6:	2002      	movs	r0, #2
 80024d8:	f000 f87a 	bl	80025d0 <BQ27441_readWord>
 80024dc:	0003      	movs	r3, r0
 80024de:	8023      	strh	r3, [r4, #0]
		break;
 80024e0:	e007      	b.n	80024f2 <BQ27441_temperature+0x42>
	case INTERNAL_TEMP:
		temp = BQ27441_readWord(BQ27441_COMMAND_INT_TEMP);
 80024e2:	230e      	movs	r3, #14
 80024e4:	18fc      	adds	r4, r7, r3
 80024e6:	201e      	movs	r0, #30
 80024e8:	f000 f872 	bl	80025d0 <BQ27441_readWord>
 80024ec:	0003      	movs	r3, r0
 80024ee:	8023      	strh	r3, [r4, #0]
		break;
 80024f0:	46c0      	nop			; (mov r8, r8)
	}
	return temp;
 80024f2:	230e      	movs	r3, #14
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	881b      	ldrh	r3, [r3, #0]
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b005      	add	sp, #20
 80024fe:	bd90      	pop	{r4, r7, pc}

08002500 <BQ27441_writeExtendedData>:
 *****************************************************************************/

// Write a specified number of bytes to extended data specifying a
// class ID, position offset.
int BQ27441_writeExtendedData(uint8_t classID, uint8_t offset, uint8_t * data, uint8_t len)
{
 8002500:	b5b0      	push	{r4, r5, r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	0004      	movs	r4, r0
 8002508:	0008      	movs	r0, r1
 800250a:	603a      	str	r2, [r7, #0]
 800250c:	0019      	movs	r1, r3
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	1c22      	adds	r2, r4, #0
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	1dbb      	adds	r3, r7, #6
 8002516:	1c02      	adds	r2, r0, #0
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	1d7b      	adds	r3, r7, #5
 800251c:	1c0a      	adds	r2, r1, #0
 800251e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;	// I2C return status

	if (len > 32)
 8002520:	1d7b      	adds	r3, r7, #5
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b20      	cmp	r3, #32
 8002526:	d902      	bls.n	800252e <BQ27441_writeExtendedData+0x2e>
		return BAT_INIT_FAIL;
 8002528:	2301      	movs	r3, #1
 800252a:	425b      	negs	r3, r3
 800252c:	e04c      	b.n	80025c8 <BQ27441_writeExtendedData+0xc8>

	ret = BQ27441_blockDataControl();
 800252e:	250b      	movs	r5, #11
 8002530:	197c      	adds	r4, r7, r5
 8002532:	f000 f873 	bl	800261c <BQ27441_blockDataControl>
 8002536:	0003      	movs	r3, r0
 8002538:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) // // enable block data memory control
 800253a:	197b      	adds	r3, r7, r5
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <BQ27441_writeExtendedData+0x48>
		return BAT_INIT_FAIL; // Return false if enable fails
 8002542:	2301      	movs	r3, #1
 8002544:	425b      	negs	r3, r3
 8002546:	e03f      	b.n	80025c8 <BQ27441_writeExtendedData+0xc8>
	if (BQ27441_blockDataClass(classID) != HAL_OK) // Write class ID using DataBlockClass()
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	0018      	movs	r0, r3
 800254e:	f000 f87f 	bl	8002650 <BQ27441_blockDataClass>
 8002552:	1e03      	subs	r3, r0, #0
 8002554:	d002      	beq.n	800255c <BQ27441_writeExtendedData+0x5c>
		return BAT_INIT_FAIL;
 8002556:	2301      	movs	r3, #1
 8002558:	425b      	negs	r3, r3
 800255a:	e035      	b.n	80025c8 <BQ27441_writeExtendedData+0xc8>

	BQ27441_blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
 800255c:	1dbb      	adds	r3, r7, #6
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	b2db      	uxtb	r3, r3
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f88d 	bl	8002684 <BQ27441_blockDataOffset>
	BQ27441_computeBlockChecksum(); // Compute checksum going in
 800256a:	f000 f8bd 	bl	80026e8 <BQ27441_computeBlockChecksum>
	uint8_t oldCsum = BQ27441_blockDataChecksum();
 800256e:	230a      	movs	r3, #10
 8002570:	18fc      	adds	r4, r7, r3
 8002572:	f000 f8a1 	bl	80026b8 <BQ27441_blockDataChecksum>
 8002576:	0003      	movs	r3, r0
 8002578:	7023      	strb	r3, [r4, #0]

	// Write data bytes:
	for (int i = 0; i < len; i++)
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e012      	b.n	80025a6 <BQ27441_writeExtendedData+0xa6>
	{
		// Write to offset, mod 32 if offset is greater than 32
		// The blockDataOffset above sets the 32-bit block
		BQ27441_writeBlockData((offset % 32) + i, data[i]);
 8002580:	1dbb      	adds	r3, r7, #6
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	221f      	movs	r2, #31
 8002586:	4013      	ands	r3, r2
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	18d3      	adds	r3, r2, r3
 8002590:	b2d8      	uxtb	r0, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	18d3      	adds	r3, r2, r3
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	0019      	movs	r1, r3
 800259c:	f000 f8f4 	bl	8002788 <BQ27441_writeBlockData>
	for (int i = 0; i < len; i++)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	1d7b      	adds	r3, r7, #5
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dbe7      	blt.n	8002580 <BQ27441_writeExtendedData+0x80>
	}

	// Write new checksum using BlockDataChecksum (0x60)
	uint8_t newCsum = BQ27441_computeBlockChecksum(); // Compute the new checksum
 80025b0:	2509      	movs	r5, #9
 80025b2:	197c      	adds	r4, r7, r5
 80025b4:	f000 f898 	bl	80026e8 <BQ27441_computeBlockChecksum>
 80025b8:	0003      	movs	r3, r0
 80025ba:	7023      	strb	r3, [r4, #0]
	BQ27441_writeBlockChecksum(newCsum);
 80025bc:	197b      	adds	r3, r7, r5
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 f8c7 	bl	8002754 <BQ27441_writeBlockChecksum>


	return BAT_INIT_SUCCESS;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bdb0      	pop	{r4, r5, r7, pc}

080025d0 <BQ27441_readWord>:

// Read a 16-bit command word from the BQ27441-G1A
uint16_t BQ27441_readWord(uint16_t subAddress)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af04      	add	r7, sp, #16
 80025d6:	0002      	movs	r2, r0
 80025d8:	1dbb      	adds	r3, r7, #6
 80025da:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
//	i2cReadBytes(subAddress, data, 2);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), subAddress, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	881a      	ldrh	r2, [r3, #0]
 80025e0:	480d      	ldr	r0, [pc, #52]	; (8002618 <BQ27441_readWord+0x48>)
 80025e2:	2301      	movs	r3, #1
 80025e4:	425b      	negs	r3, r3
 80025e6:	9302      	str	r3, [sp, #8]
 80025e8:	2302      	movs	r3, #2
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	240c      	movs	r4, #12
 80025ee:	193b      	adds	r3, r7, r4
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2301      	movs	r3, #1
 80025f4:	21aa      	movs	r1, #170	; 0xaa
 80025f6:	f004 fae9 	bl	8006bcc <HAL_I2C_Mem_Read>
	return ((uint16_t) data[1] << 8) | data[0];
 80025fa:	0021      	movs	r1, r4
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	785b      	ldrb	r3, [r3, #1]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	b21a      	sxth	r2, r3
 8002604:	187b      	adds	r3, r7, r1
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b21b      	sxth	r3, r3
 800260a:	4313      	orrs	r3, r2
 800260c:	b21b      	sxth	r3, r3
 800260e:	b29b      	uxth	r3, r3
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b005      	add	sp, #20
 8002616:	bd90      	pop	{r4, r7, pc}
 8002618:	200001c4 	.word	0x200001c4

0800261c <BQ27441_blockDataControl>:

// Issue a BlockDataControl() command to enable BlockData access
HAL_StatusTypeDef BQ27441_blockDataControl(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af04      	add	r7, sp, #16
	uint8_t enableByte = 0x00;
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_CONTROL, &enableByte, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CONTROL, I2C_MEMADD_SIZE_8BIT, &enableByte, 1, HAL_MAX_DELAY);
 8002628:	4808      	ldr	r0, [pc, #32]	; (800264c <BQ27441_blockDataControl+0x30>)
 800262a:	2301      	movs	r3, #1
 800262c:	425b      	negs	r3, r3
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	2301      	movs	r3, #1
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	1dfb      	adds	r3, r7, #7
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2301      	movs	r3, #1
 800263a:	2261      	movs	r2, #97	; 0x61
 800263c:	21aa      	movs	r1, #170	; 0xaa
 800263e:	f004 f997 	bl	8006970 <HAL_I2C_Mem_Write>
 8002642:	0003      	movs	r3, r0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}
 800264c:	200001c4 	.word	0x200001c4

08002650 <BQ27441_blockDataClass>:

// Issue a DataClass() command to set the data class to be accessed
HAL_StatusTypeDef BQ27441_blockDataClass(uint8_t id)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af04      	add	r7, sp, #16
 8002656:	0002      	movs	r2, r0
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_DATACLASS, &id, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_DATACLASS, I2C_MEMADD_SIZE_8BIT, &id, 1, HAL_MAX_DELAY);
 800265c:	4808      	ldr	r0, [pc, #32]	; (8002680 <BQ27441_blockDataClass+0x30>)
 800265e:	2301      	movs	r3, #1
 8002660:	425b      	negs	r3, r3
 8002662:	9302      	str	r3, [sp, #8]
 8002664:	2301      	movs	r3, #1
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	1dfb      	adds	r3, r7, #7
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2301      	movs	r3, #1
 800266e:	223e      	movs	r2, #62	; 0x3e
 8002670:	21aa      	movs	r1, #170	; 0xaa
 8002672:	f004 f97d 	bl	8006970 <HAL_I2C_Mem_Write>
 8002676:	0003      	movs	r3, r0

}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200001c4 	.word	0x200001c4

08002684 <BQ27441_blockDataOffset>:

// Issue a DataBlock() command to set the data block to be accessed
HAL_StatusTypeDef BQ27441_blockDataOffset(uint8_t offset)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af04      	add	r7, sp, #16
 800268a:	0002      	movs	r2, r0
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_DATABLOCK, &offset, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_DATABLOCK, I2C_MEMADD_SIZE_8BIT, &offset, 1, HAL_MAX_DELAY);
 8002690:	4808      	ldr	r0, [pc, #32]	; (80026b4 <BQ27441_blockDataOffset+0x30>)
 8002692:	2301      	movs	r3, #1
 8002694:	425b      	negs	r3, r3
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	2301      	movs	r3, #1
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	1dfb      	adds	r3, r7, #7
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2301      	movs	r3, #1
 80026a2:	223f      	movs	r2, #63	; 0x3f
 80026a4:	21aa      	movs	r1, #170	; 0xaa
 80026a6:	f004 f963 	bl	8006970 <HAL_I2C_Mem_Write>
 80026aa:	0003      	movs	r3, r0

}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200001c4 	.word	0x200001c4

080026b8 <BQ27441_blockDataChecksum>:

// Read the current checksum using BlockDataCheckSum()
uint8_t BQ27441_blockDataChecksum(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af04      	add	r7, sp, #16
	uint8_t csum;
//	i2cReadBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, &csum, 1, HAL_MAX_DELAY);
 80026be:	4809      	ldr	r0, [pc, #36]	; (80026e4 <BQ27441_blockDataChecksum+0x2c>)
 80026c0:	2301      	movs	r3, #1
 80026c2:	425b      	negs	r3, r3
 80026c4:	9302      	str	r3, [sp, #8]
 80026c6:	2301      	movs	r3, #1
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	1dfb      	adds	r3, r7, #7
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2301      	movs	r3, #1
 80026d0:	2260      	movs	r2, #96	; 0x60
 80026d2:	21aa      	movs	r1, #170	; 0xaa
 80026d4:	f004 fa7a 	bl	8006bcc <HAL_I2C_Mem_Read>
	return csum;
 80026d8:	1dfb      	adds	r3, r7, #7
 80026da:	781b      	ldrb	r3, [r3, #0]
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200001c4 	.word	0x200001c4

080026e8 <BQ27441_computeBlockChecksum>:

// Read all 32 bytes of the loaded extended data and compute a
// checksum based on the values.
uint8_t BQ27441_computeBlockChecksum(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08e      	sub	sp, #56	; 0x38
 80026ec:	af04      	add	r7, sp, #16
	uint8_t data[32];
	// i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, data, 32, HAL_MAX_DELAY);
 80026ee:	4818      	ldr	r0, [pc, #96]	; (8002750 <BQ27441_computeBlockChecksum+0x68>)
 80026f0:	2301      	movs	r3, #1
 80026f2:	425b      	negs	r3, r3
 80026f4:	9302      	str	r3, [sp, #8]
 80026f6:	2320      	movs	r3, #32
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	003b      	movs	r3, r7
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2301      	movs	r3, #1
 8002700:	2260      	movs	r2, #96	; 0x60
 8002702:	21aa      	movs	r1, #170	; 0xaa
 8002704:	f004 fa62 	bl	8006bcc <HAL_I2C_Mem_Read>


	uint8_t csum = 0;
 8002708:	2327      	movs	r3, #39	; 0x27
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	623b      	str	r3, [r7, #32]
 8002714:	e00c      	b.n	8002730 <BQ27441_computeBlockChecksum+0x48>
	{
		csum += data[i];
 8002716:	003a      	movs	r2, r7
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	18d3      	adds	r3, r2, r3
 800271c:	7819      	ldrb	r1, [r3, #0]
 800271e:	2227      	movs	r2, #39	; 0x27
 8002720:	18bb      	adds	r3, r7, r2
 8002722:	18ba      	adds	r2, r7, r2
 8002724:	7812      	ldrb	r2, [r2, #0]
 8002726:	188a      	adds	r2, r1, r2
 8002728:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	3301      	adds	r3, #1
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	2b1f      	cmp	r3, #31
 8002734:	ddef      	ble.n	8002716 <BQ27441_computeBlockChecksum+0x2e>
	}
	csum = 255 - csum;
 8002736:	2127      	movs	r1, #39	; 0x27
 8002738:	187b      	adds	r3, r7, r1
 800273a:	187a      	adds	r2, r7, r1
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	43d2      	mvns	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

	return csum;
 8002742:	187b      	adds	r3, r7, r1
 8002744:	781b      	ldrb	r3, [r3, #0]
}
 8002746:	0018      	movs	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	b00a      	add	sp, #40	; 0x28
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	200001c4 	.word	0x200001c4

08002754 <BQ27441_writeBlockChecksum>:

// Use the BlockDataCheckSum() command to write a checksum value
HAL_StatusTypeDef BQ27441_writeBlockChecksum(uint8_t csum)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af04      	add	r7, sp, #16
 800275a:	0002      	movs	r2, r0
 800275c:	1dfb      	adds	r3, r7, #7
 800275e:	701a      	strb	r2, [r3, #0]
	//return i2cWriteBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, &csum, 1, HAL_MAX_DELAY);
 8002760:	4808      	ldr	r0, [pc, #32]	; (8002784 <BQ27441_writeBlockChecksum+0x30>)
 8002762:	2301      	movs	r3, #1
 8002764:	425b      	negs	r3, r3
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	2301      	movs	r3, #1
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2301      	movs	r3, #1
 8002772:	2260      	movs	r2, #96	; 0x60
 8002774:	21aa      	movs	r1, #170	; 0xaa
 8002776:	f004 f8fb 	bl	8006970 <HAL_I2C_Mem_Write>
 800277a:	0003      	movs	r3, r0
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b002      	add	sp, #8
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200001c4 	.word	0x200001c4

08002788 <BQ27441_writeBlockData>:

// Use BlockData() to write a byte to an offset of the loaded data
HAL_StatusTypeDef BQ27441_writeBlockData(uint8_t offset, uint8_t data)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af04      	add	r7, sp, #16
 800278e:	0002      	movs	r2, r0
 8002790:	1dfb      	adds	r3, r7, #7
 8002792:	701a      	strb	r2, [r3, #0]
 8002794:	1dbb      	adds	r3, r7, #6
 8002796:	1c0a      	adds	r2, r1, #0
 8002798:	701a      	strb	r2, [r3, #0]
	uint8_t address = offset + BQ27441_EXTENDED_BLOCKDATA;
 800279a:	210f      	movs	r1, #15
 800279c:	187b      	adds	r3, r7, r1
 800279e:	1dfa      	adds	r2, r7, #7
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	3240      	adds	r2, #64	; 0x40
 80027a4:	701a      	strb	r2, [r3, #0]
	//return i2cWriteBytes(address, &data, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), address, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	4808      	ldr	r0, [pc, #32]	; (80027d0 <BQ27441_writeBlockData+0x48>)
 80027ae:	2301      	movs	r3, #1
 80027b0:	425b      	negs	r3, r3
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	2301      	movs	r3, #1
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	1dbb      	adds	r3, r7, #6
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2301      	movs	r3, #1
 80027be:	21aa      	movs	r1, #170	; 0xaa
 80027c0:	f004 f8d6 	bl	8006970 <HAL_I2C_Mem_Write>
 80027c4:	0003      	movs	r3, r0

}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b004      	add	sp, #16
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	200001c4 	.word	0x200001c4

080027d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <MX_DMA_Init+0x38>)
 80027dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <MX_DMA_Init+0x38>)
 80027e0:	2101      	movs	r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <MX_DMA_Init+0x38>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	2201      	movs	r2, #1
 80027ec:	4013      	ands	r3, r2
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	2009      	movs	r0, #9
 80027f8:	f003 fd12 	bl	8006220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027fc:	2009      	movs	r0, #9
 80027fe:	f003 fd24 	bl	800624a <HAL_NVIC_EnableIRQ>

}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	46bd      	mov	sp, r7
 8002806:	b002      	add	sp, #8
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	40021000 	.word	0x40021000

08002810 <draw_pixel>:
 * @brief This function draws a pixel in the display buffer.
 * @param x     The x-coordinate of the pixel
 * @param y     The y-coordinate of the pixel
 * @param color The color of the pixel
 */
void draw_pixel(int16_t x, int16_t y, uint16_t color) {
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	0004      	movs	r4, r0
 8002818:	0008      	movs	r0, r1
 800281a:	0011      	movs	r1, r2
 800281c:	1dbb      	adds	r3, r7, #6
 800281e:	1c22      	adds	r2, r4, #0
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	1c02      	adds	r2, r0, #0
 8002826:	801a      	strh	r2, [r3, #0]
 8002828:	1cbb      	adds	r3, r7, #2
 800282a:	1c0a      	adds	r2, r1, #0
 800282c:	801a      	strh	r2, [r3, #0]
    if ((x < 0) || (x >= width) || (y < 0) || (y >= height)) {
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	2200      	movs	r2, #0
 8002832:	5e9b      	ldrsh	r3, [r3, r2]
 8002834:	2b00      	cmp	r3, #0
 8002836:	db12      	blt.n	800285e <draw_pixel+0x4e>
 8002838:	1dbb      	adds	r3, r7, #6
 800283a:	2200      	movs	r2, #0
 800283c:	5e9b      	ldrsh	r3, [r3, r2]
 800283e:	4a84      	ldr	r2, [pc, #528]	; (8002a50 <draw_pixel+0x240>)
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	4293      	cmp	r3, r2
 8002844:	da0b      	bge.n	800285e <draw_pixel+0x4e>
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	2200      	movs	r2, #0
 800284a:	5e9b      	ldrsh	r3, [r3, r2]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db06      	blt.n	800285e <draw_pixel+0x4e>
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	2200      	movs	r2, #0
 8002854:	5e9b      	ldrsh	r3, [r3, r2]
 8002856:	4a7f      	ldr	r2, [pc, #508]	; (8002a54 <draw_pixel+0x244>)
 8002858:	8812      	ldrh	r2, [r2, #0]
 800285a:	4293      	cmp	r3, r2
 800285c:	db0a      	blt.n	8002874 <draw_pixel+0x64>
        serial_printf("Pixel off screen! (%d, %d)", x, y);
 800285e:	1dbb      	adds	r3, r7, #6
 8002860:	2100      	movs	r1, #0
 8002862:	5e59      	ldrsh	r1, [r3, r1]
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2200      	movs	r2, #0
 8002868:	5e9a      	ldrsh	r2, [r3, r2]
 800286a:	4b7b      	ldr	r3, [pc, #492]	; (8002a58 <draw_pixel+0x248>)
 800286c:	0018      	movs	r0, r3
 800286e:	f001 fdd7 	bl	8004420 <serial_printf>
 8002872:	e0e9      	b.n	8002a48 <draw_pixel+0x238>
    uint8_t *black_pBuf;
#ifdef EPD_USE_COLOR
    uint8_t *color_pBuf;
#endif

    switch (rotation) {
 8002874:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <draw_pixel+0x24c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d035      	beq.n	80028e8 <draw_pixel+0xd8>
 800287c:	dc49      	bgt.n	8002912 <draw_pixel+0x102>
 800287e:	2b02      	cmp	r3, #2
 8002880:	d022      	beq.n	80028c8 <draw_pixel+0xb8>
 8002882:	dc46      	bgt.n	8002912 <draw_pixel+0x102>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <draw_pixel+0x7e>
 8002888:	2b01      	cmp	r3, #1
 800288a:	d007      	beq.n	800289c <draw_pixel+0x8c>
 800288c:	e041      	b.n	8002912 <draw_pixel+0x102>
    	case 0:
    		y = y + 8;
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	3308      	adds	r3, #8
 8002894:	b29a      	uxth	r2, r3
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	801a      	strh	r2, [r3, #0]
    		break;
 800289a:	e03a      	b.n	8002912 <draw_pixel+0x102>
        case 1: EPD_swap(x, y);
 800289c:	2110      	movs	r1, #16
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	1dba      	adds	r2, r7, #6
 80028a2:	8812      	ldrh	r2, [r2, #0]
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	1dbb      	adds	r3, r7, #6
 80028a8:	1d3a      	adds	r2, r7, #4
 80028aa:	8812      	ldrh	r2, [r2, #0]
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	187a      	adds	r2, r7, r1
 80028b2:	8812      	ldrh	r2, [r2, #0]
 80028b4:	801a      	strh	r2, [r3, #0]
            x = EPD_WIDTH - x - 1;
 80028b6:	1dbb      	adds	r3, r7, #6
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	2208      	movs	r2, #8
 80028bc:	32ff      	adds	r2, #255	; 0xff
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	1dbb      	adds	r3, r7, #6
 80028c4:	801a      	strh	r2, [r3, #0]
            break;
 80028c6:	e024      	b.n	8002912 <draw_pixel+0x102>
        case 2:
            x = EPD_WIDTH - x - 1;
 80028c8:	1dbb      	adds	r3, r7, #6
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	2208      	movs	r2, #8
 80028ce:	32ff      	adds	r2, #255	; 0xff
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	1dbb      	adds	r3, r7, #6
 80028d6:	801a      	strh	r2, [r3, #0]
//            y = EPD_HEIGHT - y - 1;
            y = EPD_HEIGHT - y - 1 + 8;
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	22b7      	movs	r2, #183	; 0xb7
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	801a      	strh	r2, [r3, #0]
            break;
 80028e6:	e014      	b.n	8002912 <draw_pixel+0x102>
        case 3: EPD_swap(x, y);
 80028e8:	2112      	movs	r1, #18
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	1dba      	adds	r2, r7, #6
 80028ee:	8812      	ldrh	r2, [r2, #0]
 80028f0:	801a      	strh	r2, [r3, #0]
 80028f2:	1dbb      	adds	r3, r7, #6
 80028f4:	1d3a      	adds	r2, r7, #4
 80028f6:	8812      	ldrh	r2, [r2, #0]
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	187a      	adds	r2, r7, r1
 80028fe:	8812      	ldrh	r2, [r2, #0]
 8002900:	801a      	strh	r2, [r3, #0]
            y = EPD_HEIGHT - y - 1;
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	22af      	movs	r2, #175	; 0xaf
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	b29a      	uxth	r2, r3
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	801a      	strh	r2, [r3, #0]
            break;
 8002910:	46c0      	nop			; (mov r8, r8)
    }

    uint16_t addr = ((uint32_t) (EPD_WIDTH - 1 - x) * (uint32_t) EPD_HEIGHT + y) / 8;
 8002912:	1dbb      	adds	r3, r7, #6
 8002914:	2200      	movs	r2, #0
 8002916:	5e9b      	ldrsh	r3, [r3, r2]
 8002918:	2208      	movs	r2, #8
 800291a:	32ff      	adds	r2, #255	; 0xff
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	001a      	movs	r2, r3
 8002920:	23b0      	movs	r3, #176	; 0xb0
 8002922:	435a      	muls	r2, r3
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2100      	movs	r1, #0
 8002928:	5e5b      	ldrsh	r3, [r3, r1]
 800292a:	18d3      	adds	r3, r2, r3
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	210e      	movs	r1, #14
 8002930:	187b      	adds	r3, r7, r1
 8002932:	801a      	strh	r2, [r3, #0]
    uint8_t black_c;
#ifdef EPD_USE_COLOR
    uint8_t color_c;
#endif

    if (use_sram) {
 8002934:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <draw_pixel+0x250>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d011      	beq.n	8002960 <draw_pixel+0x150>
        black_c = sram_read8(black_buffer_addr + addr, MCPSRAM_READ);
 800293c:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <draw_pixel+0x254>)
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	187b      	adds	r3, r7, r1
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	18d3      	adds	r3, r2, r3
 8002946:	b29b      	uxth	r3, r3
 8002948:	2103      	movs	r1, #3
 800294a:	0018      	movs	r0, r3
 800294c:	f001 ff86 	bl	800485c <sram_read8>
 8002950:	0003      	movs	r3, r0
 8002952:	001a      	movs	r2, r3
 8002954:	210c      	movs	r1, #12
 8002956:	187b      	adds	r3, r7, r1
 8002958:	701a      	strb	r2, [r3, #0]
        black_pBuf = &black_c;
 800295a:	187b      	adds	r3, r7, r1
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	e006      	b.n	800296e <draw_pixel+0x15e>
#ifdef EPD_USE_COLOR
        color_c = sram_read8(color_buffer_addr + addr, MCPSRAM_READ);
        color_pBuf = &color_c;
#endif
    } else {
        black_pBuf = black_buffer + addr;
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <draw_pixel+0x258>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	230e      	movs	r3, #14
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	18d3      	adds	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
        *color_pBuf |= (1 << (7 - y % 8));
    }
#endif

    bool black_bit;
    black_bit = layer_colors[color] & 0x1;
 800296e:	1cbb      	adds	r3, r7, #2
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	4a3e      	ldr	r2, [pc, #248]	; (8002a6c <draw_pixel+0x25c>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	001a      	movs	r2, r3
 8002978:	2301      	movs	r3, #1
 800297a:	401a      	ands	r2, r3
 800297c:	200d      	movs	r0, #13
 800297e:	183b      	adds	r3, r7, r0
 8002980:	1e51      	subs	r1, r2, #1
 8002982:	418a      	sbcs	r2, r1
 8002984:	701a      	strb	r2, [r3, #0]
    if ((black_bit && black_buffer_inverted) || (!black_bit && !black_buffer_inverted)) {
 8002986:	183b      	adds	r3, r7, r0
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <draw_pixel+0x186>
 800298e:	4b38      	ldr	r3, [pc, #224]	; (8002a70 <draw_pixel+0x260>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10e      	bne.n	80029b4 <draw_pixel+0x1a4>
 8002996:	230d      	movs	r3, #13
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2201      	movs	r2, #1
 800299e:	4053      	eors	r3, r2
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d024      	beq.n	80029f0 <draw_pixel+0x1e0>
 80029a6:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <draw_pixel+0x260>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2201      	movs	r2, #1
 80029ac:	4053      	eors	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01d      	beq.n	80029f0 <draw_pixel+0x1e0>
        *black_pBuf &= ~(1 << (7 - y % 8));
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	2100      	movs	r1, #0
 80029be:	5e5b      	ldrsh	r3, [r3, r1]
 80029c0:	492c      	ldr	r1, [pc, #176]	; (8002a74 <draw_pixel+0x264>)
 80029c2:	400b      	ands	r3, r1
 80029c4:	d504      	bpl.n	80029d0 <draw_pixel+0x1c0>
 80029c6:	3b01      	subs	r3, #1
 80029c8:	2108      	movs	r1, #8
 80029ca:	4249      	negs	r1, r1
 80029cc:	430b      	orrs	r3, r1
 80029ce:	3301      	adds	r3, #1
 80029d0:	b21b      	sxth	r3, r3
 80029d2:	0019      	movs	r1, r3
 80029d4:	2307      	movs	r3, #7
 80029d6:	1a5b      	subs	r3, r3, r1
 80029d8:	2101      	movs	r1, #1
 80029da:	4099      	lsls	r1, r3
 80029dc:	000b      	movs	r3, r1
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	4013      	ands	r3, r2
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e01a      	b.n	8002a26 <draw_pixel+0x216>
    } else {
        *black_pBuf |= (1 << (7 - y % 8));
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	b25a      	sxtb	r2, r3
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	2100      	movs	r1, #0
 80029fa:	5e5b      	ldrsh	r3, [r3, r1]
 80029fc:	491d      	ldr	r1, [pc, #116]	; (8002a74 <draw_pixel+0x264>)
 80029fe:	400b      	ands	r3, r1
 8002a00:	d504      	bpl.n	8002a0c <draw_pixel+0x1fc>
 8002a02:	3b01      	subs	r3, #1
 8002a04:	2108      	movs	r1, #8
 8002a06:	4249      	negs	r1, r1
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	0019      	movs	r1, r3
 8002a10:	2307      	movs	r3, #7
 8002a12:	1a5b      	subs	r3, r3, r1
 8002a14:	2101      	movs	r1, #1
 8002a16:	4099      	lsls	r1, r3
 8002a18:	000b      	movs	r3, r1
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b25b      	sxtb	r3, r3
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	701a      	strb	r2, [r3, #0]
    }

    if (use_sram) {
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <draw_pixel+0x250>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00c      	beq.n	8002a48 <draw_pixel+0x238>
#ifdef EPD_USE_COLOR
        sram_write8(color_buffer_addr + addr, *color_pBuf, MCPSRAM_WRITE);
#endif
        sram_write8(black_buffer_addr + addr, *black_pBuf, MCPSRAM_WRITE);
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <draw_pixel+0x254>)
 8002a30:	881a      	ldrh	r2, [r3, #0]
 8002a32:	230e      	movs	r3, #14
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	18d3      	adds	r3, r2, r3
 8002a3a:	b298      	uxth	r0, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2202      	movs	r2, #2
 8002a42:	0019      	movs	r1, r3
 8002a44:	f001 ff23 	bl	800488e <sram_write8>
    }
}
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b007      	add	sp, #28
 8002a4c:	bd90      	pop	{r4, r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	200001c0 	.word	0x200001c0
 8002a54:	200001be 	.word	0x200001be
 8002a58:	0800a27c 	.word	0x0800a27c
 8002a5c:	20000001 	.word	0x20000001
 8002a60:	20000000 	.word	0x20000000
 8002a64:	200001a8 	.word	0x200001a8
 8002a68:	200001b4 	.word	0x200001b4
 8002a6c:	200001b8 	.word	0x200001b8
 8002a70:	200000a8 	.word	0x200000a8
 8002a74:	80000007 	.word	0x80000007

08002a78 <set_cursor>:
/*!
 * @brief       Sets the cursor to a new location on the display.
 * @param   x   The x coordinate of the new location
 * @param   y   The y coordinate of the new location
 */
void set_cursor(uint16_t x, uint16_t y) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	0002      	movs	r2, r0
 8002a80:	1dbb      	adds	r3, r7, #6
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	1c0a      	adds	r2, r1, #0
 8002a88:	801a      	strh	r2, [r3, #0]
    cursor_x = x;
 8002a8a:	1dbb      	adds	r3, r7, #6
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	5e9a      	ldrsh	r2, [r3, r2]
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <set_cursor+0x30>)
 8002a92:	801a      	strh	r2, [r3, #0]
    cursor_y = y;
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	2200      	movs	r2, #0
 8002a98:	5e9a      	ldrsh	r2, [r3, r2]
 8002a9a:	4b04      	ldr	r3, [pc, #16]	; (8002aac <set_cursor+0x34>)
 8002a9c:	801a      	strh	r2, [r3, #0]
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b002      	add	sp, #8
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	200000aa 	.word	0x200000aa
 8002aac:	200000ac 	.word	0x200000ac

08002ab0 <write_line>:
    @param    y0  Start point y coordinate
    @param    x1  End point x coordinate
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
void write_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	0005      	movs	r5, r0
 8002ab8:	000c      	movs	r4, r1
 8002aba:	0010      	movs	r0, r2
 8002abc:	0019      	movs	r1, r3
 8002abe:	1dbb      	adds	r3, r7, #6
 8002ac0:	1c2a      	adds	r2, r5, #0
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	1c22      	adds	r2, r4, #0
 8002ac8:	801a      	strh	r2, [r3, #0]
 8002aca:	1cbb      	adds	r3, r7, #2
 8002acc:	1c02      	adds	r2, r0, #0
 8002ace:	801a      	strh	r2, [r3, #0]
 8002ad0:	003b      	movs	r3, r7
 8002ad2:	1c0a      	adds	r2, r1, #0
 8002ad4:	801a      	strh	r2, [r3, #0]
    int16_t steep = _abs(y1 - y0) > _abs(x1 - x0);
 8002ad6:	003b      	movs	r3, r7
 8002ad8:	2200      	movs	r2, #0
 8002ada:	5e9a      	ldrsh	r2, [r3, r2]
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5e5b      	ldrsh	r3, [r3, r1]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	17d9      	asrs	r1, r3, #31
 8002ae6:	185a      	adds	r2, r3, r1
 8002ae8:	404a      	eors	r2, r1
 8002aea:	1cbb      	adds	r3, r7, #2
 8002aec:	2100      	movs	r1, #0
 8002aee:	5e59      	ldrsh	r1, [r3, r1]
 8002af0:	1dbb      	adds	r3, r7, #6
 8002af2:	2000      	movs	r0, #0
 8002af4:	5e1b      	ldrsh	r3, [r3, r0]
 8002af6:	1acb      	subs	r3, r1, r3
 8002af8:	17d9      	asrs	r1, r3, #31
 8002afa:	185b      	adds	r3, r3, r1
 8002afc:	404b      	eors	r3, r1
 8002afe:	2101      	movs	r1, #1
 8002b00:	429a      	cmp	r2, r3
 8002b02:	dc01      	bgt.n	8002b08 <write_line+0x58>
 8002b04:	2300      	movs	r3, #0
 8002b06:	1c19      	adds	r1, r3, #0
 8002b08:	b2ca      	uxtb	r2, r1
 8002b0a:	211a      	movs	r1, #26
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2200      	movs	r2, #0
 8002b14:	5e9b      	ldrsh	r3, [r3, r2]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d019      	beq.n	8002b4e <write_line+0x9e>
        _swap_int16_t(x0, y0);
 8002b1a:	2118      	movs	r1, #24
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	1dba      	adds	r2, r7, #6
 8002b20:	8812      	ldrh	r2, [r2, #0]
 8002b22:	801a      	strh	r2, [r3, #0]
 8002b24:	1dbb      	adds	r3, r7, #6
 8002b26:	1d3a      	adds	r2, r7, #4
 8002b28:	8812      	ldrh	r2, [r2, #0]
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	187a      	adds	r2, r7, r1
 8002b30:	8812      	ldrh	r2, [r2, #0]
 8002b32:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8002b34:	2116      	movs	r1, #22
 8002b36:	187b      	adds	r3, r7, r1
 8002b38:	1cba      	adds	r2, r7, #2
 8002b3a:	8812      	ldrh	r2, [r2, #0]
 8002b3c:	801a      	strh	r2, [r3, #0]
 8002b3e:	1cbb      	adds	r3, r7, #2
 8002b40:	003a      	movs	r2, r7
 8002b42:	8812      	ldrh	r2, [r2, #0]
 8002b44:	801a      	strh	r2, [r3, #0]
 8002b46:	003b      	movs	r3, r7
 8002b48:	187a      	adds	r2, r7, r1
 8002b4a:	8812      	ldrh	r2, [r2, #0]
 8002b4c:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8002b4e:	1dba      	adds	r2, r7, #6
 8002b50:	1cbb      	adds	r3, r7, #2
 8002b52:	2100      	movs	r1, #0
 8002b54:	5e52      	ldrsh	r2, [r2, r1]
 8002b56:	2100      	movs	r1, #0
 8002b58:	5e5b      	ldrsh	r3, [r3, r1]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	dd19      	ble.n	8002b92 <write_line+0xe2>
        _swap_int16_t(x0, x1);
 8002b5e:	2114      	movs	r1, #20
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	1dba      	adds	r2, r7, #6
 8002b64:	8812      	ldrh	r2, [r2, #0]
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	1dbb      	adds	r3, r7, #6
 8002b6a:	1cba      	adds	r2, r7, #2
 8002b6c:	8812      	ldrh	r2, [r2, #0]
 8002b6e:	801a      	strh	r2, [r3, #0]
 8002b70:	1cbb      	adds	r3, r7, #2
 8002b72:	187a      	adds	r2, r7, r1
 8002b74:	8812      	ldrh	r2, [r2, #0]
 8002b76:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8002b78:	2112      	movs	r1, #18
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	1d3a      	adds	r2, r7, #4
 8002b7e:	8812      	ldrh	r2, [r2, #0]
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	003a      	movs	r2, r7
 8002b86:	8812      	ldrh	r2, [r2, #0]
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	003b      	movs	r3, r7
 8002b8c:	187a      	adds	r2, r7, r1
 8002b8e:	8812      	ldrh	r2, [r2, #0]
 8002b90:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8002b92:	1cbb      	adds	r3, r7, #2
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	1dbb      	adds	r3, r7, #6
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	801a      	strh	r2, [r3, #0]
    dy = _abs(y1 - y0);
 8002ba4:	003b      	movs	r3, r7
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	5e9a      	ldrsh	r2, [r3, r2]
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	2000      	movs	r0, #0
 8002bae:	5e1b      	ldrsh	r3, [r3, r0]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	17d8      	asrs	r0, r3, #31
 8002bb4:	181a      	adds	r2, r3, r0
 8002bb6:	4042      	eors	r2, r0
 8002bb8:	230e      	movs	r3, #14
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8002bbe:	231e      	movs	r3, #30
 8002bc0:	18fa      	adds	r2, r7, r3
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	5e5b      	ldrsh	r3, [r3, r1]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da00      	bge.n	8002bce <write_line+0x11e>
 8002bcc:	3301      	adds	r3, #1
 8002bce:	105b      	asrs	r3, r3, #1
 8002bd0:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8002bd2:	1d3a      	adds	r2, r7, #4
 8002bd4:	003b      	movs	r3, r7
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	5e52      	ldrsh	r2, [r2, r1]
 8002bda:	2100      	movs	r1, #0
 8002bdc:	5e5b      	ldrsh	r3, [r3, r1]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	da04      	bge.n	8002bec <write_line+0x13c>
        ystep = 1;
 8002be2:	231c      	movs	r3, #28
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2201      	movs	r2, #1
 8002be8:	801a      	strh	r2, [r3, #0]
 8002bea:	e04d      	b.n	8002c88 <write_line+0x1d8>
    } else {
        ystep = -1;
 8002bec:	231c      	movs	r3, #28
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4252      	negs	r2, r2
 8002bf4:	801a      	strh	r2, [r3, #0]
    }

    for (; x0 <= x1; x0++) {
 8002bf6:	e047      	b.n	8002c88 <write_line+0x1d8>
        if (steep) {
 8002bf8:	231a      	movs	r3, #26
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	5e9b      	ldrsh	r3, [r3, r2]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00c      	beq.n	8002c1e <write_line+0x16e>
            draw_pixel(y0, x0, color);
 8002c04:	2330      	movs	r3, #48	; 0x30
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	881a      	ldrh	r2, [r3, #0]
 8002c0a:	1dbb      	adds	r3, r7, #6
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	5e59      	ldrsh	r1, [r3, r1]
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	2000      	movs	r0, #0
 8002c14:	5e1b      	ldrsh	r3, [r3, r0]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff fdfa 	bl	8002810 <draw_pixel>
 8002c1c:	e00b      	b.n	8002c36 <write_line+0x186>
        } else {
            draw_pixel(x0, y0, color);
 8002c1e:	2330      	movs	r3, #48	; 0x30
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	881a      	ldrh	r2, [r3, #0]
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	2100      	movs	r1, #0
 8002c28:	5e59      	ldrsh	r1, [r3, r1]
 8002c2a:	1dbb      	adds	r3, r7, #6
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	5e1b      	ldrsh	r3, [r3, r0]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7ff fded 	bl	8002810 <draw_pixel>
        }
        err -= dy;
 8002c36:	211e      	movs	r1, #30
 8002c38:	187b      	adds	r3, r7, r1
 8002c3a:	881a      	ldrh	r2, [r3, #0]
 8002c3c:	230e      	movs	r3, #14
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	5e9b      	ldrsh	r3, [r3, r2]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	da11      	bge.n	8002c78 <write_line+0x1c8>
            y0 += ystep;
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	881a      	ldrh	r2, [r3, #0]
 8002c58:	231c      	movs	r3, #28
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	18d3      	adds	r3, r2, r3
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	801a      	strh	r2, [r3, #0]
            err += dx;
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	881a      	ldrh	r2, [r3, #0]
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	18d3      	adds	r3, r2, r3
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	801a      	strh	r2, [r3, #0]
    for (; x0 <= x1; x0++) {
 8002c78:	1dbb      	adds	r3, r7, #6
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	5e9b      	ldrsh	r3, [r3, r2]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	1dbb      	adds	r3, r7, #6
 8002c86:	801a      	strh	r2, [r3, #0]
 8002c88:	1dba      	adds	r2, r7, #6
 8002c8a:	1cbb      	adds	r3, r7, #2
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	5e52      	ldrsh	r2, [r2, r1]
 8002c90:	2100      	movs	r1, #0
 8002c92:	5e5b      	ldrsh	r3, [r3, r1]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	ddaf      	ble.n	8002bf8 <write_line+0x148>
        }
    }
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b008      	add	sp, #32
 8002ca0:	bdb0      	pop	{r4, r5, r7, pc}

08002ca2 <write_fast_vLine>:
 * @param x     The top-most x coordinate
 * @param y     The top-most y coordinate
 * @param h     The height in pixels
 * @param color The 16-bit 5-6-5 color to use
 */
void write_fast_vLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8002ca2:	b5b0      	push	{r4, r5, r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af02      	add	r7, sp, #8
 8002ca8:	0005      	movs	r5, r0
 8002caa:	000c      	movs	r4, r1
 8002cac:	0010      	movs	r0, r2
 8002cae:	0019      	movs	r1, r3
 8002cb0:	1dbb      	adds	r3, r7, #6
 8002cb2:	1c2a      	adds	r2, r5, #0
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	1c22      	adds	r2, r4, #0
 8002cba:	801a      	strh	r2, [r3, #0]
 8002cbc:	1cbb      	adds	r3, r7, #2
 8002cbe:	1c02      	adds	r2, r0, #0
 8002cc0:	801a      	strh	r2, [r3, #0]
 8002cc2:	003b      	movs	r3, r7
 8002cc4:	1c0a      	adds	r2, r1, #0
 8002cc6:	801a      	strh	r2, [r3, #0]
    write_line(x, y, x, y + h - 1, color);
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	881a      	ldrh	r2, [r3, #0]
 8002ccc:	1cbb      	adds	r3, r7, #2
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	b21c      	sxth	r4, r3
 8002cda:	1dbb      	adds	r3, r7, #6
 8002cdc:	2200      	movs	r2, #0
 8002cde:	5e9a      	ldrsh	r2, [r3, r2]
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5e59      	ldrsh	r1, [r3, r1]
 8002ce6:	1dbb      	adds	r3, r7, #6
 8002ce8:	2000      	movs	r0, #0
 8002cea:	5e18      	ldrsh	r0, [r3, r0]
 8002cec:	003b      	movs	r3, r7
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	0023      	movs	r3, r4
 8002cf4:	f7ff fedc 	bl	8002ab0 <write_line>
//    fill_rect(x, y, 1, h, color);
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b002      	add	sp, #8
 8002cfe:	bdb0      	pop	{r4, r5, r7, pc}

08002d00 <fill_rect>:
 * @param y     The top-left corner y coordinate
 * @param w     The width in pixels
 * @param h     The height in pixels
 * @param color The 16-bit 5-6-5 color to use
 */
void fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8002d00:	b5b0      	push	{r4, r5, r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	0005      	movs	r5, r0
 8002d08:	000c      	movs	r4, r1
 8002d0a:	0010      	movs	r0, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	1dbb      	adds	r3, r7, #6
 8002d10:	1c2a      	adds	r2, r5, #0
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	1c22      	adds	r2, r4, #0
 8002d18:	801a      	strh	r2, [r3, #0]
 8002d1a:	1cbb      	adds	r3, r7, #2
 8002d1c:	1c02      	adds	r2, r0, #0
 8002d1e:	801a      	strh	r2, [r3, #0]
 8002d20:	003b      	movs	r3, r7
 8002d22:	1c0a      	adds	r2, r1, #0
 8002d24:	801a      	strh	r2, [r3, #0]
    for (int16_t i = x; i < (x + w); i++) {
 8002d26:	230e      	movs	r3, #14
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	1dba      	adds	r2, r7, #6
 8002d2c:	8812      	ldrh	r2, [r2, #0]
 8002d2e:	801a      	strh	r2, [r3, #0]
 8002d30:	e018      	b.n	8002d64 <fill_rect+0x64>
        write_fast_vLine(i, y, h, color);
 8002d32:	2320      	movs	r3, #32
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	881c      	ldrh	r4, [r3, #0]
 8002d38:	003b      	movs	r3, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	5e9a      	ldrsh	r2, [r3, r2]
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	2100      	movs	r1, #0
 8002d42:	5e59      	ldrsh	r1, [r3, r1]
 8002d44:	250e      	movs	r5, #14
 8002d46:	197b      	adds	r3, r7, r5
 8002d48:	2000      	movs	r0, #0
 8002d4a:	5e18      	ldrsh	r0, [r3, r0]
 8002d4c:	0023      	movs	r3, r4
 8002d4e:	f7ff ffa8 	bl	8002ca2 <write_fast_vLine>
    for (int16_t i = x; i < (x + w); i++) {
 8002d52:	0029      	movs	r1, r5
 8002d54:	187b      	adds	r3, r7, r1
 8002d56:	2200      	movs	r2, #0
 8002d58:	5e9b      	ldrsh	r3, [r3, r2]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	801a      	strh	r2, [r3, #0]
 8002d64:	230e      	movs	r3, #14
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	5e9a      	ldrsh	r2, [r3, r2]
 8002d6c:	1dbb      	adds	r3, r7, #6
 8002d6e:	2100      	movs	r1, #0
 8002d70:	5e59      	ldrsh	r1, [r3, r1]
 8002d72:	1cbb      	adds	r3, r7, #2
 8002d74:	2000      	movs	r0, #0
 8002d76:	5e1b      	ldrsh	r3, [r3, r0]
 8002d78:	18cb      	adds	r3, r1, r3
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	dbd9      	blt.n	8002d32 <fill_rect+0x32>
    }
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b004      	add	sp, #16
 8002d86:	bdb0      	pop	{r4, r5, r7, pc}

08002d88 <draw_char>:
 * @param color     The color of the char
 * @param bg        The background color of the char
 * @param size_x    The width of the char
 * @param size_y    The height of the char
 */
void draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	0005      	movs	r5, r0
 8002d90:	000c      	movs	r4, r1
 8002d92:	0010      	movs	r0, r2
 8002d94:	0019      	movs	r1, r3
 8002d96:	1dbb      	adds	r3, r7, #6
 8002d98:	1c2a      	adds	r2, r5, #0
 8002d9a:	801a      	strh	r2, [r3, #0]
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	1c22      	adds	r2, r4, #0
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	1cfb      	adds	r3, r7, #3
 8002da4:	1c02      	adds	r2, r0, #0
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	003b      	movs	r3, r7
 8002daa:	1c0a      	adds	r2, r1, #0
 8002dac:	801a      	strh	r2, [r3, #0]
    // TODO: add handling for non-classic fonts (if possible)
    if ((x >= width) ||                 // Clip right
 8002dae:	1dbb      	adds	r3, r7, #6
 8002db0:	2200      	movs	r2, #0
 8002db2:	5e9b      	ldrsh	r3, [r3, r2]
 8002db4:	4aac      	ldr	r2, [pc, #688]	; (8003068 <draw_char+0x2e0>)
 8002db6:	8812      	ldrh	r2, [r2, #0]
 8002db8:	4293      	cmp	r3, r2
 8002dba:	da1d      	bge.n	8002df8 <draw_char+0x70>
        (y >= height) ||                // Clip bottom
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	5e9b      	ldrsh	r3, [r3, r2]
 8002dc2:	4aaa      	ldr	r2, [pc, #680]	; (800306c <draw_char+0x2e4>)
 8002dc4:	8812      	ldrh	r2, [r2, #0]
    if ((x >= width) ||                 // Clip right
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	da16      	bge.n	8002df8 <draw_char+0x70>
        ((x + 6 * size_x - 1) < 0) ||   // Clip left
 8002dca:	1dbb      	adds	r3, r7, #6
 8002dcc:	2100      	movs	r1, #0
 8002dce:	5e59      	ldrsh	r1, [r3, r1]
 8002dd0:	2324      	movs	r3, #36	; 0x24
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	781a      	ldrb	r2, [r3, #0]
 8002dd6:	0013      	movs	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	18cb      	adds	r3, r1, r3
        (y >= height) ||                // Clip bottom
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	dd09      	ble.n	8002df8 <draw_char+0x70>
        ((y + 8 * size_y - 1) < 0)) {   // Clip top
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	2200      	movs	r2, #0
 8002de8:	5e9a      	ldrsh	r2, [r3, r2]
 8002dea:	2328      	movs	r3, #40	; 0x28
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	18d3      	adds	r3, r2, r3
        ((x + 6 * size_x - 1) < 0) ||   // Clip left
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	dc04      	bgt.n	8002e02 <draw_char+0x7a>
        serial_println("CLIPPING TEXT");
 8002df8:	4b9d      	ldr	r3, [pc, #628]	; (8003070 <draw_char+0x2e8>)
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f001 fad0 	bl	80043a0 <serial_println>
        return;
 8002e00:	e12e      	b.n	8003060 <draw_char+0x2d8>
    // There was an inline patch from Adafruit for an older version of glcdfont.c that was missing a character
    // This version of drawChar relies on the newer version of glcdfont.c, so the fix isn't implemented here
    // The fix in question goes something like this:
    // if (old_glcdfont && (c >= 176)) c++;

    for (int8_t i = 0; i < 5; i++) {
 8002e02:	230f      	movs	r3, #15
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e0e1      	b.n	8002fd0 <draw_char+0x248>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8002e0c:	1cfb      	adds	r3, r7, #3
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	0013      	movs	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	189a      	adds	r2, r3, r2
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	18d2      	adds	r2, r2, r3
 8002e20:	230e      	movs	r3, #14
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	4993      	ldr	r1, [pc, #588]	; (8003074 <draw_char+0x2ec>)
 8002e26:	5c8a      	ldrb	r2, [r1, r2]
 8002e28:	701a      	strb	r2, [r3, #0]

        for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002e2a:	230d      	movs	r3, #13
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	e0bd      	b.n	8002fb0 <draw_char+0x228>
            if (line & 1) {
 8002e34:	230e      	movs	r3, #14
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d050      	beq.n	8002ee2 <draw_char+0x15a>
                if (size_x == 1 && size_y == 1) {
 8002e40:	2324      	movs	r3, #36	; 0x24
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d11e      	bne.n	8002e88 <draw_char+0x100>
 8002e4a:	2328      	movs	r3, #40	; 0x28
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d119      	bne.n	8002e88 <draw_char+0x100>
                    draw_pixel(x + i, y + j, color);
 8002e54:	230f      	movs	r3, #15
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b25b      	sxtb	r3, r3
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	1dbb      	adds	r3, r7, #6
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	18d3      	adds	r3, r2, r3
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	b218      	sxth	r0, r3
 8002e68:	230d      	movs	r3, #13
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	18d3      	adds	r3, r2, r3
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	b219      	sxth	r1, r3
 8002e7c:	003b      	movs	r3, r7
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	001a      	movs	r2, r3
 8002e82:	f7ff fcc5 	bl	8002810 <draw_pixel>
 8002e86:	e084      	b.n	8002f92 <draw_char+0x20a>
                } else {
                    fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8002e88:	230f      	movs	r3, #15
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2424      	movs	r4, #36	; 0x24
 8002e94:	193a      	adds	r2, r7, r4
 8002e96:	7812      	ldrb	r2, [r2, #0]
 8002e98:	b292      	uxth	r2, r2
 8002e9a:	4353      	muls	r3, r2
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	1dbb      	adds	r3, r7, #6
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	18d3      	adds	r3, r2, r3
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b218      	sxth	r0, r3
 8002ea8:	230d      	movs	r3, #13
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2528      	movs	r5, #40	; 0x28
 8002eb4:	197a      	adds	r2, r7, r5
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	b292      	uxth	r2, r2
 8002eba:	4353      	muls	r3, r2
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	18d3      	adds	r3, r2, r3
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	b219      	sxth	r1, r3
 8002ec8:	193b      	adds	r3, r7, r4
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b21a      	sxth	r2, r3
 8002ece:	197b      	adds	r3, r7, r5
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b21c      	sxth	r4, r3
 8002ed4:	003b      	movs	r3, r7
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	0023      	movs	r3, r4
 8002edc:	f7ff ff10 	bl	8002d00 <fill_rect>
 8002ee0:	e057      	b.n	8002f92 <draw_char+0x20a>
                }
            } else if (bg != color) {
 8002ee2:	2420      	movs	r4, #32
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	0039      	movs	r1, r7
 8002ee8:	881a      	ldrh	r2, [r3, #0]
 8002eea:	880b      	ldrh	r3, [r1, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d050      	beq.n	8002f92 <draw_char+0x20a>
                if (size_x == 1 && size_y == 1) {
 8002ef0:	2324      	movs	r3, #36	; 0x24
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d11e      	bne.n	8002f38 <draw_char+0x1b0>
 8002efa:	2328      	movs	r3, #40	; 0x28
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d119      	bne.n	8002f38 <draw_char+0x1b0>
                    draw_pixel(x + i, y + j, bg);
 8002f04:	230f      	movs	r3, #15
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	1dbb      	adds	r3, r7, #6
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	18d3      	adds	r3, r2, r3
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	b218      	sxth	r0, r3
 8002f18:	230d      	movs	r3, #13
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	18d3      	adds	r3, r2, r3
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b219      	sxth	r1, r3
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	001a      	movs	r2, r3
 8002f32:	f7ff fc6d 	bl	8002810 <draw_pixel>
 8002f36:	e02c      	b.n	8002f92 <draw_char+0x20a>
                } else {
                    fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8002f38:	230f      	movs	r3, #15
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b25b      	sxtb	r3, r3
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2424      	movs	r4, #36	; 0x24
 8002f44:	193a      	adds	r2, r7, r4
 8002f46:	7812      	ldrb	r2, [r2, #0]
 8002f48:	b292      	uxth	r2, r2
 8002f4a:	4353      	muls	r3, r2
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	1dbb      	adds	r3, r7, #6
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	18d3      	adds	r3, r2, r3
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	b218      	sxth	r0, r3
 8002f58:	230d      	movs	r3, #13
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2528      	movs	r5, #40	; 0x28
 8002f64:	197a      	adds	r2, r7, r5
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	b292      	uxth	r2, r2
 8002f6a:	4353      	muls	r3, r2
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	18d3      	adds	r3, r2, r3
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	b219      	sxth	r1, r3
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b21a      	sxth	r2, r3
 8002f7e:	197b      	adds	r3, r7, r5
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	b21c      	sxth	r4, r3
 8002f84:	2320      	movs	r3, #32
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	0023      	movs	r3, r4
 8002f8e:	f7ff feb7 	bl	8002d00 <fill_rect>
        for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002f92:	210d      	movs	r1, #13
 8002f94:	187b      	adds	r3, r7, r1
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	187b      	adds	r3, r7, r1
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	220e      	movs	r2, #14
 8002fa6:	18bb      	adds	r3, r7, r2
 8002fa8:	18ba      	adds	r2, r7, r2
 8002faa:	7812      	ldrb	r2, [r2, #0]
 8002fac:	0852      	lsrs	r2, r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	230d      	movs	r3, #13
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b25b      	sxtb	r3, r3
 8002fb8:	2b07      	cmp	r3, #7
 8002fba:	dc00      	bgt.n	8002fbe <draw_char+0x236>
 8002fbc:	e73a      	b.n	8002e34 <draw_char+0xac>
    for (int8_t i = 0; i < 5; i++) {
 8002fbe:	210f      	movs	r1, #15
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b25b      	sxtb	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b25b      	sxtb	r3, r3
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	dc00      	bgt.n	8002fde <draw_char+0x256>
 8002fdc:	e716      	b.n	8002e0c <draw_char+0x84>
                }
            }
        } // End inner for loop
    } // End outer for loop

    if (bg != color) {
 8002fde:	2420      	movs	r4, #32
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	0039      	movs	r1, r7
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	880b      	ldrh	r3, [r1, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d039      	beq.n	8003060 <draw_char+0x2d8>
        if (size_x == 1 && size_y == 1) {
 8002fec:	2324      	movs	r3, #36	; 0x24
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d113      	bne.n	800301e <draw_char+0x296>
 8002ff6:	2328      	movs	r3, #40	; 0x28
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10e      	bne.n	800301e <draw_char+0x296>
            write_fast_vLine(x + 5, y, 8, bg);
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	3305      	adds	r3, #5
 8003006:	b29b      	uxth	r3, r3
 8003008:	b218      	sxth	r0, r3
 800300a:	193b      	adds	r3, r7, r4
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	2100      	movs	r1, #0
 8003012:	5e59      	ldrsh	r1, [r3, r1]
 8003014:	0013      	movs	r3, r2
 8003016:	2208      	movs	r2, #8
 8003018:	f7ff fe43 	bl	8002ca2 <write_fast_vLine>
 800301c:	e020      	b.n	8003060 <draw_char+0x2d8>
        } else {
            fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800301e:	2124      	movs	r1, #36	; 0x24
 8003020:	187b      	adds	r3, r7, r1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b29b      	uxth	r3, r3
 8003026:	1c1a      	adds	r2, r3, #0
 8003028:	0092      	lsls	r2, r2, #2
 800302a:	18d3      	adds	r3, r2, r3
 800302c:	b29a      	uxth	r2, r3
 800302e:	1dbb      	adds	r3, r7, #6
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	18d3      	adds	r3, r2, r3
 8003034:	b29b      	uxth	r3, r3
 8003036:	b218      	sxth	r0, r3
 8003038:	187b      	adds	r3, r7, r1
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b21a      	sxth	r2, r3
 800303e:	2328      	movs	r3, #40	; 0x28
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b29b      	uxth	r3, r3
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	b29b      	uxth	r3, r3
 800304a:	b21c      	sxth	r4, r3
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	2100      	movs	r1, #0
 8003050:	5e59      	ldrsh	r1, [r3, r1]
 8003052:	2320      	movs	r3, #32
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	0023      	movs	r3, r4
 800305c:	f7ff fe50 	bl	8002d00 <fill_rect>
        }
    }
}
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bdb0      	pop	{r4, r5, r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	200001c0 	.word	0x200001c0
 800306c:	200001be 	.word	0x200001be
 8003070:	0800a298 	.word	0x0800a298
 8003074:	0800a8d0 	.word	0x0800a8d0

08003078 <write>:

/*!
 * @brief This function draws a character to the display at the current location of the cursor.
 * @param c
 */
void write(uint8_t c) {
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	b087      	sub	sp, #28
 800307c:	af04      	add	r7, sp, #16
 800307e:	0002      	movs	r2, r0
 8003080:	1dfb      	adds	r3, r7, #7
 8003082:	701a      	strb	r2, [r3, #0]
    // TODO: add handling for non-classic fonts (if possible)

    if (c == '\n') {                // Newline?
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b0a      	cmp	r3, #10
 800308a:	d113      	bne.n	80030b4 <write+0x3c>
        cursor_x = margin_x;        // Reset x to the margin
 800308c:	4b3f      	ldr	r3, [pc, #252]	; (800318c <write+0x114>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b21a      	sxth	r2, r3
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <write+0x118>)
 8003094:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize_y * 8; // Advance y by one line
 8003096:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <write+0x11c>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b3d      	ldr	r3, [pc, #244]	; (8003198 <write+0x120>)
 80030a2:	2100      	movs	r1, #0
 80030a4:	5e5b      	ldrsh	r3, [r3, r1]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	18d3      	adds	r3, r2, r3
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	b21a      	sxth	r2, r3
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <write+0x120>)
 80030b0:	801a      	strh	r2, [r3, #0]
        }

        draw_char(cursor_x, cursor_y, c, text_color, text_bg_color, textsize_x, textsize_y);
        cursor_x += textsize_x * 6; // Advance x by one character
    }
}
 80030b2:	e066      	b.n	8003182 <write+0x10a>
    } else if (c != '\r') {         // Ignore carriage returns
 80030b4:	1dfb      	adds	r3, r7, #7
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b0d      	cmp	r3, #13
 80030ba:	d062      	beq.n	8003182 <write+0x10a>
        if (wrap && ((cursor_x + textsize_x * 6) > width)) {    // Off right?
 80030bc:	4b37      	ldr	r3, [pc, #220]	; (800319c <write+0x124>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d022      	beq.n	800310a <write+0x92>
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <write+0x118>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	5e9b      	ldrsh	r3, [r3, r2]
 80030ca:	0019      	movs	r1, r3
 80030cc:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <write+0x128>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	001a      	movs	r2, r3
 80030d2:	0013      	movs	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	189b      	adds	r3, r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	18cb      	adds	r3, r1, r3
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <write+0x12c>)
 80030de:	8812      	ldrh	r2, [r2, #0]
 80030e0:	4293      	cmp	r3, r2
 80030e2:	dd12      	ble.n	800310a <write+0x92>
            cursor_x = margin_x;        // Reset x to the margin
 80030e4:	4b29      	ldr	r3, [pc, #164]	; (800318c <write+0x114>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	b21a      	sxth	r2, r3
 80030ea:	4b29      	ldr	r3, [pc, #164]	; (8003190 <write+0x118>)
 80030ec:	801a      	strh	r2, [r3, #0]
            cursor_y += textsize_y * 8; // Advance y one line
 80030ee:	4b29      	ldr	r3, [pc, #164]	; (8003194 <write+0x11c>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <write+0x120>)
 80030fa:	2100      	movs	r1, #0
 80030fc:	5e5b      	ldrsh	r3, [r3, r1]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	18d3      	adds	r3, r2, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	b21a      	sxth	r2, r3
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <write+0x120>)
 8003108:	801a      	strh	r2, [r3, #0]
        if ((cursor_y + textsize_y * 8) > height) { // Off bottom?
 800310a:	4b23      	ldr	r3, [pc, #140]	; (8003198 <write+0x120>)
 800310c:	2200      	movs	r2, #0
 800310e:	5e9b      	ldrsh	r3, [r3, r2]
 8003110:	001a      	movs	r2, r3
 8003112:	4b20      	ldr	r3, [pc, #128]	; (8003194 <write+0x11c>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	18d3      	adds	r3, r2, r3
 800311a:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <write+0x130>)
 800311c:	8812      	ldrh	r2, [r2, #0]
 800311e:	4293      	cmp	r3, r2
 8003120:	dd04      	ble.n	800312c <write+0xb4>
            cursor_y = margin_y;                    // Reset y to the margin
 8003122:	4b22      	ldr	r3, [pc, #136]	; (80031ac <write+0x134>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b21a      	sxth	r2, r3
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <write+0x120>)
 800312a:	801a      	strh	r2, [r3, #0]
        draw_char(cursor_x, cursor_y, c, text_color, text_bg_color, textsize_x, textsize_y);
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <write+0x118>)
 800312e:	2400      	movs	r4, #0
 8003130:	5f1c      	ldrsh	r4, [r3, r4]
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <write+0x120>)
 8003134:	2500      	movs	r5, #0
 8003136:	5f5d      	ldrsh	r5, [r3, r5]
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <write+0x138>)
 800313a:	881e      	ldrh	r6, [r3, #0]
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <write+0x13c>)
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <write+0x128>)
 8003142:	7812      	ldrb	r2, [r2, #0]
 8003144:	4913      	ldr	r1, [pc, #76]	; (8003194 <write+0x11c>)
 8003146:	7809      	ldrb	r1, [r1, #0]
 8003148:	1df8      	adds	r0, r7, #7
 800314a:	7800      	ldrb	r0, [r0, #0]
 800314c:	9102      	str	r1, [sp, #8]
 800314e:	9201      	str	r2, [sp, #4]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	0033      	movs	r3, r6
 8003154:	0002      	movs	r2, r0
 8003156:	0029      	movs	r1, r5
 8003158:	0020      	movs	r0, r4
 800315a:	f7ff fe15 	bl	8002d88 <draw_char>
        cursor_x += textsize_x * 6; // Advance x by one character
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <write+0x128>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	1c1a      	adds	r2, r3, #0
 8003166:	1c13      	adds	r3, r2, #0
 8003168:	18db      	adds	r3, r3, r3
 800316a:	189b      	adds	r3, r3, r2
 800316c:	18db      	adds	r3, r3, r3
 800316e:	b29a      	uxth	r2, r3
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <write+0x118>)
 8003172:	2100      	movs	r1, #0
 8003174:	5e5b      	ldrsh	r3, [r3, r1]
 8003176:	b29b      	uxth	r3, r3
 8003178:	18d3      	adds	r3, r2, r3
 800317a:	b29b      	uxth	r3, r3
 800317c:	b21a      	sxth	r2, r3
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <write+0x118>)
 8003180:	801a      	strh	r2, [r3, #0]
}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	b003      	add	sp, #12
 8003188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	200000ae 	.word	0x200000ae
 8003190:	200000aa 	.word	0x200000aa
 8003194:	20000003 	.word	0x20000003
 8003198:	200000ac 	.word	0x200000ac
 800319c:	200000b2 	.word	0x200000b2
 80031a0:	20000002 	.word	0x20000002
 80031a4:	200001c0 	.word	0x200001c0
 80031a8:	200001be 	.word	0x200001be
 80031ac:	200000af 	.word	0x200000af
 80031b0:	20000004 	.word	0x20000004
 80031b4:	200000b0 	.word	0x200000b0

080031b8 <printWrite>:

/*!
 * @brief Print a *char string to the display
 * @param str   The string to print
 */
void printWrite (const char *str) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	while (*str) {
 80031c0:	e006      	b.n	80031d0 <printWrite+0x18>
		write(*str++);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff ff54 	bl	8003078 <write>
	while (*str) {
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f4      	bne.n	80031c2 <printWrite+0xa>
	}
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <printChar>:

/*!
 * @brief Print a character to the display
 * @param c     The character to print
 */
void printChar(char c) {
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	0002      	movs	r2, r0
 80031ea:	1dfb      	adds	r3, r7, #7
 80031ec:	701a      	strb	r2, [r3, #0]
	write(c);
 80031ee:	1dfb      	adds	r3, r7, #7
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7ff ff40 	bl	8003078 <write>
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <printString>:

/*!
 * @brief Print a char[] string to the display
 * @param str   The string to primt
 */
void printString(const char str[]) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	printWrite(str);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	0018      	movs	r0, r3
 800320c:	f7ff ffd4 	bl	80031b8 <printWrite>
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}

08003218 <printUnsigned>:
/*!
 * @brief Print an unsigned value to the display
 * @param n     The unsigned value
 * @param base  The base of the unsigned value
 */
void printUnsigned(unsigned long n, uint8_t base) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	000a      	movs	r2, r1
 8003222:	1cfb      	adds	r3, r7, #3
 8003224:	701a      	strb	r2, [r3, #0]
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (n == 0) {
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11b      	bne.n	8003268 <printUnsigned+0x50>
		printChar('0');
 8003230:	2030      	movs	r0, #48	; 0x30
 8003232:	f7ff ffd6 	bl	80031e2 <printChar>
 8003236:	e039      	b.n	80032ac <printUnsigned+0x94>
		return;
	} 
	while (n > 0) {
		buf[i++] = n % base;
 8003238:	1cfb      	adds	r3, r7, #3
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	0011      	movs	r1, r2
 8003240:	0018      	movs	r0, r3
 8003242:	f7fc ffe7 	bl	8000214 <__aeabi_uidivmod>
 8003246:	000b      	movs	r3, r1
 8003248:	0019      	movs	r1, r3
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003250:	b2c9      	uxtb	r1, r1
 8003252:	220c      	movs	r2, #12
 8003254:	18ba      	adds	r2, r7, r2
 8003256:	54d1      	strb	r1, [r2, r3]
		n /= base;
 8003258:	1cfb      	adds	r3, r7, #3
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	0019      	movs	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fc ff52 	bl	8000108 <__udivsi3>
 8003264:	0003      	movs	r3, r0
 8003266:	607b      	str	r3, [r7, #4]
	while (n > 0) {
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e4      	bne.n	8003238 <printUnsigned+0x20>
	}
	for (; i > 0; i--) {
 800326e:	e01a      	b.n	80032a6 <printUnsigned+0x8e>
		printChar((char) (buf[i - 1] < 10 ? '0' + buf[i - 1] : 'A' + buf[i - 1] - 10));
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	3b01      	subs	r3, #1
 8003274:	210c      	movs	r1, #12
 8003276:	187a      	adds	r2, r7, r1
 8003278:	5cd3      	ldrb	r3, [r2, r3]
 800327a:	2b09      	cmp	r3, #9
 800327c:	d806      	bhi.n	800328c <printUnsigned+0x74>
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	3b01      	subs	r3, #1
 8003282:	187a      	adds	r2, r7, r1
 8003284:	5cd3      	ldrb	r3, [r2, r3]
 8003286:	3330      	adds	r3, #48	; 0x30
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e006      	b.n	800329a <printUnsigned+0x82>
 800328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328e:	3b01      	subs	r3, #1
 8003290:	220c      	movs	r2, #12
 8003292:	18ba      	adds	r2, r7, r2
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	3337      	adds	r3, #55	; 0x37
 8003298:	b2db      	uxtb	r3, r3
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff ffa1 	bl	80031e2 <printChar>
	for (; i > 0; i--) {
 80032a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a2:	3b01      	subs	r3, #1
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e1      	bne.n	8003270 <printUnsigned+0x58>
	}
}
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b00c      	add	sp, #48	; 0x30
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ba:	240c      	movs	r4, #12
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	0018      	movs	r0, r3
 80032c0:	2314      	movs	r3, #20
 80032c2:	001a      	movs	r2, r3
 80032c4:	2100      	movs	r1, #0
 80032c6:	f006 fee0 	bl	800a08a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	4b58      	ldr	r3, [pc, #352]	; (800342c <MX_GPIO_Init+0x178>)
 80032cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ce:	4b57      	ldr	r3, [pc, #348]	; (800342c <MX_GPIO_Init+0x178>)
 80032d0:	2101      	movs	r1, #1
 80032d2:	430a      	orrs	r2, r1
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80032d6:	4b55      	ldr	r3, [pc, #340]	; (800342c <MX_GPIO_Init+0x178>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	2201      	movs	r2, #1
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e2:	4b52      	ldr	r3, [pc, #328]	; (800342c <MX_GPIO_Init+0x178>)
 80032e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e6:	4b51      	ldr	r3, [pc, #324]	; (800342c <MX_GPIO_Init+0x178>)
 80032e8:	2102      	movs	r1, #2
 80032ea:	430a      	orrs	r2, r1
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80032ee:	4b4f      	ldr	r3, [pc, #316]	; (800342c <MX_GPIO_Init+0x178>)
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	2202      	movs	r2, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fa:	4b4c      	ldr	r3, [pc, #304]	; (800342c <MX_GPIO_Init+0x178>)
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	4b4b      	ldr	r3, [pc, #300]	; (800342c <MX_GPIO_Init+0x178>)
 8003300:	2104      	movs	r1, #4
 8003302:	430a      	orrs	r2, r1
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c
 8003306:	4b49      	ldr	r3, [pc, #292]	; (800342c <MX_GPIO_Init+0x178>)
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	2204      	movs	r2, #4
 800330c:	4013      	ands	r3, r2
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <MX_GPIO_Init+0x17c>)
 8003314:	2200      	movs	r2, #0
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	0018      	movs	r0, r3
 800331a:	f003 fa4f 	bl	80067bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|SRAM_CS_Pin, GPIO_PIN_RESET);
 800331e:	23c0      	movs	r3, #192	; 0xc0
 8003320:	0099      	lsls	r1, r3, #2
 8003322:	23a0      	movs	r3, #160	; 0xa0
 8003324:	05db      	lsls	r3, r3, #23
 8003326:	2200      	movs	r2, #0
 8003328:	0018      	movs	r0, r3
 800332a:	f003 fa47 	bl	80067bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <MX_GPIO_Init+0x180>)
 8003330:	2200      	movs	r2, #0
 8003332:	21b0      	movs	r1, #176	; 0xb0
 8003334:	0018      	movs	r0, r3
 8003336:	f003 fa41 	bl	80067bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800333a:	193b      	adds	r3, r7, r4
 800333c:	2204      	movs	r2, #4
 800333e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003340:	193b      	adds	r3, r7, r4
 8003342:	4a3d      	ldr	r2, [pc, #244]	; (8003438 <MX_GPIO_Init+0x184>)
 8003344:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	193b      	adds	r3, r7, r4
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334c:	193b      	adds	r3, r7, r4
 800334e:	4a39      	ldr	r2, [pc, #228]	; (8003434 <MX_GPIO_Init+0x180>)
 8003350:	0019      	movs	r1, r3
 8003352:	0010      	movs	r0, r2
 8003354:	f003 f8bc 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_DC_Pin;
 8003358:	193b      	adds	r3, r7, r4
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335e:	193b      	adds	r3, r7, r4
 8003360:	2201      	movs	r2, #1
 8003362:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	193b      	adds	r3, r7, r4
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800336a:	193b      	adds	r3, r7, r4
 800336c:	2201      	movs	r2, #1
 800336e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_DC_GPIO_Port, &GPIO_InitStruct);
 8003370:	193b      	adds	r3, r7, r4
 8003372:	4a2f      	ldr	r2, [pc, #188]	; (8003430 <MX_GPIO_Init+0x17c>)
 8003374:	0019      	movs	r1, r3
 8003376:	0010      	movs	r0, r2
 8003378:	f003 f8aa 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|SRAM_CS_Pin;
 800337c:	0021      	movs	r1, r4
 800337e:	187b      	adds	r3, r7, r1
 8003380:	22c0      	movs	r2, #192	; 0xc0
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	000c      	movs	r4, r1
 8003388:	193b      	adds	r3, r7, r4
 800338a:	2201      	movs	r2, #1
 800338c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	193b      	adds	r3, r7, r4
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003394:	193b      	adds	r3, r7, r4
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339a:	193a      	adds	r2, r7, r4
 800339c:	23a0      	movs	r3, #160	; 0xa0
 800339e:	05db      	lsls	r3, r3, #23
 80033a0:	0011      	movs	r1, r2
 80033a2:	0018      	movs	r0, r3
 80033a4:	f003 f894 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80033a8:	193b      	adds	r3, r7, r4
 80033aa:	22e0      	movs	r2, #224	; 0xe0
 80033ac:	0192      	lsls	r2, r2, #6
 80033ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	2200      	movs	r2, #0
 80033b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033b6:	193b      	adds	r3, r7, r4
 80033b8:	2202      	movs	r2, #2
 80033ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033bc:	193a      	adds	r2, r7, r4
 80033be:	23a0      	movs	r3, #160	; 0xa0
 80033c0:	05db      	lsls	r3, r3, #23
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f003 f883 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	2230      	movs	r2, #48	; 0x30
 80033ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d0:	193b      	adds	r3, r7, r4
 80033d2:	2201      	movs	r2, #1
 80033d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	193b      	adds	r3, r7, r4
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	193b      	adds	r3, r7, r4
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e2:	193b      	adds	r3, r7, r4
 80033e4:	4a13      	ldr	r2, [pc, #76]	; (8003434 <MX_GPIO_Init+0x180>)
 80033e6:	0019      	movs	r1, r3
 80033e8:	0010      	movs	r0, r2
 80033ea:	f003 f871 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin;
 80033ee:	0021      	movs	r1, r4
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	2201      	movs	r2, #1
 80033fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003402:	187b      	adds	r3, r7, r1
 8003404:	2201      	movs	r2, #1
 8003406:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_CS_GPIO_Port, &GPIO_InitStruct);
 8003408:	187b      	adds	r3, r7, r1
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <MX_GPIO_Init+0x180>)
 800340c:	0019      	movs	r1, r3
 800340e:	0010      	movs	r0, r2
 8003410:	f003 f85e 	bl	80064d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 8003414:	2200      	movs	r2, #0
 8003416:	2101      	movs	r1, #1
 8003418:	2006      	movs	r0, #6
 800341a:	f002 ff01 	bl	8006220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800341e:	2006      	movs	r0, #6
 8003420:	f002 ff13 	bl	800624a <HAL_NVIC_EnableIRQ>

}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b009      	add	sp, #36	; 0x24
 800342a:	bd90      	pop	{r4, r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	50000800 	.word	0x50000800
 8003434:	50000400 	.word	0x50000400
 8003438:	10210000 	.word	0x10210000

0800343c <hts221_reboot>:
int hts221_calc_temp(int16_t T_OUT, HTS_Cal * hts_cal_data);
int hts221_calc_humid(int16_t H_OUT, HTS_Cal * hts_cal_data);
int hts221_reboot(void);

// Function code
int hts221_reboot() {
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b087      	sub	sp, #28
 8003440:	af04      	add	r7, sp, #16
    uint8_t buf[1];			// read buffer

    /* === Reboot HTS221 === */

    //read register
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003442:	1dfc      	adds	r4, r7, #7
 8003444:	482c      	ldr	r0, [pc, #176]	; (80034f8 <hts221_reboot+0xbc>)
 8003446:	2301      	movs	r3, #1
 8003448:	425b      	negs	r3, r3
 800344a:	9302      	str	r3, [sp, #8]
 800344c:	2301      	movs	r3, #1
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2301      	movs	r3, #1
 8003456:	2221      	movs	r2, #33	; 0x21
 8003458:	21be      	movs	r1, #190	; 0xbe
 800345a:	f003 fbb7 	bl	8006bcc <HAL_I2C_Mem_Read>
 800345e:	0003      	movs	r3, r0
 8003460:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8003462:	1dfb      	adds	r3, r7, #7
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <hts221_reboot+0x34>
        return HTS_REBOOT_FAIL;
 800346a:	2301      	movs	r3, #1
 800346c:	425b      	negs	r3, r3
 800346e:	e03f      	b.n	80034f0 <hts221_reboot+0xb4>
    }

    //write boot bit
    buf[0] |= HTS_CTRL_REG2_BOOT;
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	4252      	negs	r2, r2
 8003478:	4313      	orrs	r3, r2
 800347a:	b2da      	uxtb	r2, r3
 800347c:	1d3b      	adds	r3, r7, #4
 800347e:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003480:	1dfc      	adds	r4, r7, #7
 8003482:	481d      	ldr	r0, [pc, #116]	; (80034f8 <hts221_reboot+0xbc>)
 8003484:	2301      	movs	r3, #1
 8003486:	425b      	negs	r3, r3
 8003488:	9302      	str	r3, [sp, #8]
 800348a:	2301      	movs	r3, #1
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2301      	movs	r3, #1
 8003494:	2221      	movs	r2, #33	; 0x21
 8003496:	21be      	movs	r1, #190	; 0xbe
 8003498:	f003 fa6a 	bl	8006970 <HAL_I2C_Mem_Write>
 800349c:	0003      	movs	r3, r0
 800349e:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <hts221_reboot+0x72>
        return HTS_REBOOT_FAIL;
 80034a8:	2301      	movs	r3, #1
 80034aa:	425b      	negs	r3, r3
 80034ac:	e020      	b.n	80034f0 <hts221_reboot+0xb4>
    }

    //wait for device to restart + clear boot bit
    do{
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80034ae:	1dfc      	adds	r4, r7, #7
 80034b0:	4811      	ldr	r0, [pc, #68]	; (80034f8 <hts221_reboot+0xbc>)
 80034b2:	2301      	movs	r3, #1
 80034b4:	425b      	negs	r3, r3
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	2301      	movs	r3, #1
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	1d3b      	adds	r3, r7, #4
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2301      	movs	r3, #1
 80034c2:	2221      	movs	r2, #33	; 0x21
 80034c4:	21be      	movs	r1, #190	; 0xbe
 80034c6:	f003 fb81 	bl	8006bcc <HAL_I2C_Mem_Read>
 80034ca:	0003      	movs	r3, r0
 80034cc:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80034ce:	1dfb      	adds	r3, r7, #7
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <hts221_reboot+0xa0>
            return HTS_REBOOT_FAIL;
 80034d6:	2301      	movs	r3, #1
 80034d8:	425b      	negs	r3, r3
 80034da:	e009      	b.n	80034f0 <hts221_reboot+0xb4>
        }
    } while (buf[0] & HTS_CTRL_REG2_BOOT);
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b25b      	sxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	dbe3      	blt.n	80034ae <hts221_reboot+0x72>

	serial_println("Rebooted\n");
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <hts221_reboot+0xc0>)
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 ff59 	bl	80043a0 <serial_println>

    return HTS_REBOOT_SUCCESS;
 80034ee:	2301      	movs	r3, #1

}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b003      	add	sp, #12
 80034f6:	bd90      	pop	{r4, r7, pc}
 80034f8:	200001c4 	.word	0x200001c4
 80034fc:	0800a2a8 	.word	0x0800a2a8

08003500 <hts221_init>:

HTS_Cal * hts221_init () {
 8003500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003502:	b08d      	sub	sp, #52	; 0x34
 8003504:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;	// I2C return status
    uint8_t buf[7];			// read buffer

    if (hts221_reboot() == -1) {
 8003506:	f7ff ff99 	bl	800343c <hts221_reboot>
 800350a:	0003      	movs	r3, r0
 800350c:	3301      	adds	r3, #1
 800350e:	d105      	bne.n	800351c <hts221_init+0x1c>
        serial_println("Reboot FAIL\n");
 8003510:	4bdc      	ldr	r3, [pc, #880]	; (8003884 <hts221_init+0x384>)
 8003512:	0018      	movs	r0, r3
 8003514:	f000 ff44 	bl	80043a0 <serial_println>
        return NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	e21a      	b.n	8003952 <hts221_init+0x452>
    }

    /* === Set HTS221 to wake mode === */
    buf[0] = HTS_CTRL_REG1_PD | HTS_CTRL_REG1_BUD;
 800351c:	003b      	movs	r3, r7
 800351e:	2284      	movs	r2, #132	; 0x84
 8003520:	701a      	strb	r2, [r3, #0]

    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003522:	251f      	movs	r5, #31
 8003524:	197c      	adds	r4, r7, r5
 8003526:	48d8      	ldr	r0, [pc, #864]	; (8003888 <hts221_init+0x388>)
 8003528:	2301      	movs	r3, #1
 800352a:	425b      	negs	r3, r3
 800352c:	9302      	str	r3, [sp, #8]
 800352e:	2301      	movs	r3, #1
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	003b      	movs	r3, r7
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2301      	movs	r3, #1
 8003538:	2220      	movs	r2, #32
 800353a:	21be      	movs	r1, #190	; 0xbe
 800353c:	f003 fa18 	bl	8006970 <HAL_I2C_Mem_Write>
 8003540:	0003      	movs	r3, r0
 8003542:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8003544:	197b      	adds	r3, r7, r5
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <hts221_init+0x50>
        return NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	e200      	b.n	8003952 <hts221_init+0x452>
    }
    else  {
        /* === Read in temperature calibration data === */
        // buf[0] = T0_degC_x8
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_degC_x8, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003550:	251f      	movs	r5, #31
 8003552:	197c      	adds	r4, r7, r5
 8003554:	48cc      	ldr	r0, [pc, #816]	; (8003888 <hts221_init+0x388>)
 8003556:	2301      	movs	r3, #1
 8003558:	425b      	negs	r3, r3
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	2301      	movs	r3, #1
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	003b      	movs	r3, r7
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2301      	movs	r3, #1
 8003566:	2232      	movs	r2, #50	; 0x32
 8003568:	21be      	movs	r1, #190	; 0xbe
 800356a:	f003 fb2f 	bl	8006bcc <HAL_I2C_Mem_Read>
 800356e:	0003      	movs	r3, r0
 8003570:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003572:	197b      	adds	r3, r7, r5
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <hts221_init+0x7e>
            return NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	e1e9      	b.n	8003952 <hts221_init+0x452>
        }

        // buf[1] = T1_degC_x8
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_degC_x8, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 800357e:	003b      	movs	r3, r7
 8003580:	3301      	adds	r3, #1
 8003582:	251f      	movs	r5, #31
 8003584:	197c      	adds	r4, r7, r5
 8003586:	48c0      	ldr	r0, [pc, #768]	; (8003888 <hts221_init+0x388>)
 8003588:	2201      	movs	r2, #1
 800358a:	4252      	negs	r2, r2
 800358c:	9202      	str	r2, [sp, #8]
 800358e:	2201      	movs	r2, #1
 8003590:	9201      	str	r2, [sp, #4]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2301      	movs	r3, #1
 8003596:	2233      	movs	r2, #51	; 0x33
 8003598:	21be      	movs	r1, #190	; 0xbe
 800359a:	f003 fb17 	bl	8006bcc <HAL_I2C_Mem_Read>
 800359e:	0003      	movs	r3, r0
 80035a0:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80035a2:	197b      	adds	r3, r7, r5
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <hts221_init+0xae>
            return NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e1d1      	b.n	8003952 <hts221_init+0x452>
        }

        // buf[2] = T1_T0_msb
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_T0_msb, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 80035ae:	003b      	movs	r3, r7
 80035b0:	3302      	adds	r3, #2
 80035b2:	251f      	movs	r5, #31
 80035b4:	197c      	adds	r4, r7, r5
 80035b6:	48b4      	ldr	r0, [pc, #720]	; (8003888 <hts221_init+0x388>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	4252      	negs	r2, r2
 80035bc:	9202      	str	r2, [sp, #8]
 80035be:	2201      	movs	r2, #1
 80035c0:	9201      	str	r2, [sp, #4]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2301      	movs	r3, #1
 80035c6:	2235      	movs	r2, #53	; 0x35
 80035c8:	21be      	movs	r1, #190	; 0xbe
 80035ca:	f003 faff 	bl	8006bcc <HAL_I2C_Mem_Read>
 80035ce:	0003      	movs	r3, r0
 80035d0:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80035d2:	197b      	adds	r3, r7, r5
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <hts221_init+0xde>
            return NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	e1b9      	b.n	8003952 <hts221_init+0x452>
        }

        // buf[3] = HTS_CAL_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 3, 1, HAL_MAX_DELAY);
 80035de:	003b      	movs	r3, r7
 80035e0:	3303      	adds	r3, #3
 80035e2:	251f      	movs	r5, #31
 80035e4:	197c      	adds	r4, r7, r5
 80035e6:	48a8      	ldr	r0, [pc, #672]	; (8003888 <hts221_init+0x388>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	4252      	negs	r2, r2
 80035ec:	9202      	str	r2, [sp, #8]
 80035ee:	2201      	movs	r2, #1
 80035f0:	9201      	str	r2, [sp, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2301      	movs	r3, #1
 80035f6:	223c      	movs	r2, #60	; 0x3c
 80035f8:	21be      	movs	r1, #190	; 0xbe
 80035fa:	f003 fae7 	bl	8006bcc <HAL_I2C_Mem_Read>
 80035fe:	0003      	movs	r3, r0
 8003600:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003602:	197b      	adds	r3, r7, r5
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <hts221_init+0x10e>
            return NULL;
 800360a:	2300      	movs	r3, #0
 800360c:	e1a1      	b.n	8003952 <hts221_init+0x452>
        }

        // buf[4] = HTS_CAL_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 4, 1, HAL_MAX_DELAY);
 800360e:	003b      	movs	r3, r7
 8003610:	3304      	adds	r3, #4
 8003612:	251f      	movs	r5, #31
 8003614:	197c      	adds	r4, r7, r5
 8003616:	489c      	ldr	r0, [pc, #624]	; (8003888 <hts221_init+0x388>)
 8003618:	2201      	movs	r2, #1
 800361a:	4252      	negs	r2, r2
 800361c:	9202      	str	r2, [sp, #8]
 800361e:	2201      	movs	r2, #1
 8003620:	9201      	str	r2, [sp, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2301      	movs	r3, #1
 8003626:	223d      	movs	r2, #61	; 0x3d
 8003628:	21be      	movs	r1, #190	; 0xbe
 800362a:	f003 facf 	bl	8006bcc <HAL_I2C_Mem_Read>
 800362e:	0003      	movs	r3, r0
 8003630:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003632:	197b      	adds	r3, r7, r5
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <hts221_init+0x13e>
            return NULL;
 800363a:	2300      	movs	r3, #0
 800363c:	e189      	b.n	8003952 <hts221_init+0x452>
        }

        // buf[5] = HTS_CAL_T1_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 5, 1, HAL_MAX_DELAY);
 800363e:	003b      	movs	r3, r7
 8003640:	3305      	adds	r3, #5
 8003642:	251f      	movs	r5, #31
 8003644:	197c      	adds	r4, r7, r5
 8003646:	4890      	ldr	r0, [pc, #576]	; (8003888 <hts221_init+0x388>)
 8003648:	2201      	movs	r2, #1
 800364a:	4252      	negs	r2, r2
 800364c:	9202      	str	r2, [sp, #8]
 800364e:	2201      	movs	r2, #1
 8003650:	9201      	str	r2, [sp, #4]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2301      	movs	r3, #1
 8003656:	223e      	movs	r2, #62	; 0x3e
 8003658:	21be      	movs	r1, #190	; 0xbe
 800365a:	f003 fab7 	bl	8006bcc <HAL_I2C_Mem_Read>
 800365e:	0003      	movs	r3, r0
 8003660:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003662:	197b      	adds	r3, r7, r5
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <hts221_init+0x16e>
            return NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	e171      	b.n	8003952 <hts221_init+0x452>
        }

        // buf[6] = HTS_CAL_T1_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 6, 1, HAL_MAX_DELAY);
 800366e:	003b      	movs	r3, r7
 8003670:	3306      	adds	r3, #6
 8003672:	251f      	movs	r5, #31
 8003674:	197c      	adds	r4, r7, r5
 8003676:	4884      	ldr	r0, [pc, #528]	; (8003888 <hts221_init+0x388>)
 8003678:	2201      	movs	r2, #1
 800367a:	4252      	negs	r2, r2
 800367c:	9202      	str	r2, [sp, #8]
 800367e:	2201      	movs	r2, #1
 8003680:	9201      	str	r2, [sp, #4]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2301      	movs	r3, #1
 8003686:	223f      	movs	r2, #63	; 0x3f
 8003688:	21be      	movs	r1, #190	; 0xbe
 800368a:	f003 fa9f 	bl	8006bcc <HAL_I2C_Mem_Read>
 800368e:	0003      	movs	r3, r0
 8003690:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003692:	197b      	adds	r3, r7, r5
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <hts221_init+0x19e>
            return NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	e159      	b.n	8003952 <hts221_init+0x452>
        }

        /* === Process temperature calibration data === */

        uint16_t T0_degC_R32 = buf[0];
 800369e:	003b      	movs	r3, r7
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	201c      	movs	r0, #28
 80036a4:	183b      	adds	r3, r7, r0
 80036a6:	801a      	strh	r2, [r3, #0]
        uint16_t T1_degC_R33 = buf[1];
 80036a8:	003b      	movs	r3, r7
 80036aa:	785a      	ldrb	r2, [r3, #1]
 80036ac:	241a      	movs	r4, #26
 80036ae:	193b      	adds	r3, r7, r4
 80036b0:	801a      	strh	r2, [r3, #0]
        uint16_t T1_T0_msb 	= buf[2];
 80036b2:	003b      	movs	r3, r7
 80036b4:	789a      	ldrb	r2, [r3, #2]
 80036b6:	2518      	movs	r5, #24
 80036b8:	197b      	adds	r3, r7, r5
 80036ba:	801a      	strh	r2, [r3, #0]
        int16_t T0_OUT = (buf[3] | (buf[4] << 8)); // This should be signed int
 80036bc:	003b      	movs	r3, r7
 80036be:	78db      	ldrb	r3, [r3, #3]
 80036c0:	b219      	sxth	r1, r3
 80036c2:	003b      	movs	r3, r7
 80036c4:	791b      	ldrb	r3, [r3, #4]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	2616      	movs	r6, #22
 80036cc:	19bb      	adds	r3, r7, r6
 80036ce:	430a      	orrs	r2, r1
 80036d0:	801a      	strh	r2, [r3, #0]
        int16_t T1_OUT = (buf[5] | (buf[6] << 8)); // This should be signed int
 80036d2:	003b      	movs	r3, r7
 80036d4:	795b      	ldrb	r3, [r3, #5]
 80036d6:	b219      	sxth	r1, r3
 80036d8:	003b      	movs	r3, r7
 80036da:	799b      	ldrb	r3, [r3, #6]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	b21a      	sxth	r2, r3
 80036e0:	2314      	movs	r3, #20
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	430a      	orrs	r2, r1
 80036e6:	801a      	strh	r2, [r3, #0]

        // add msb's for 10 bit values
        T0_degC_R32 |= (T1_T0_msb & 0b0011) << 8;
 80036e8:	197b      	adds	r3, r7, r5
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	b21a      	sxth	r2, r3
 80036f0:	23c0      	movs	r3, #192	; 0xc0
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4013      	ands	r3, r2
 80036f6:	b21a      	sxth	r2, r3
 80036f8:	183b      	adds	r3, r7, r0
 80036fa:	2100      	movs	r1, #0
 80036fc:	5e5b      	ldrsh	r3, [r3, r1]
 80036fe:	4313      	orrs	r3, r2
 8003700:	b21a      	sxth	r2, r3
 8003702:	183b      	adds	r3, r7, r0
 8003704:	801a      	strh	r2, [r3, #0]
        T1_degC_R33 |= (T1_T0_msb & 0b1100) << 6;
 8003706:	197b      	adds	r3, r7, r5
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	019b      	lsls	r3, r3, #6
 800370c:	b21a      	sxth	r2, r3
 800370e:	23c0      	movs	r3, #192	; 0xc0
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4013      	ands	r3, r2
 8003714:	b21a      	sxth	r2, r3
 8003716:	0021      	movs	r1, r4
 8003718:	187b      	adds	r3, r7, r1
 800371a:	2400      	movs	r4, #0
 800371c:	5f1b      	ldrsh	r3, [r3, r4]
 800371e:	4313      	orrs	r3, r2
 8003720:	b21a      	sxth	r2, r3
 8003722:	187b      	adds	r3, r7, r1
 8003724:	801a      	strh	r2, [r3, #0]

        // divide by 8
        T0_degC_R32 >>= 3;
 8003726:	183b      	adds	r3, r7, r0
 8003728:	0004      	movs	r4, r0
 800372a:	183a      	adds	r2, r7, r0
 800372c:	8812      	ldrh	r2, [r2, #0]
 800372e:	08d2      	lsrs	r2, r2, #3
 8003730:	801a      	strh	r2, [r3, #0]
        T1_degC_R33 >>= 3;
 8003732:	187b      	adds	r3, r7, r1
 8003734:	000d      	movs	r5, r1
 8003736:	187a      	adds	r2, r7, r1
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	08d2      	lsrs	r2, r2, #3
 800373c:	801a      	strh	r2, [r3, #0]

        // init struct to store calibration data
        HTS_Cal * hts_cal_data = malloc(sizeof(HTS_Cal));
 800373e:	2018      	movs	r0, #24
 8003740:	f006 fc90 	bl	800a064 <malloc>
 8003744:	0003      	movs	r3, r0
 8003746:	613b      	str	r3, [r7, #16]

        hts_cal_data->T0_OUT = T0_OUT;
 8003748:	19bb      	adds	r3, r7, r6
 800374a:	2100      	movs	r1, #0
 800374c:	5e5a      	ldrsh	r2, [r3, r1]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	601a      	str	r2, [r3, #0]
        hts_cal_data->correction_factor = (float) (T1_degC_R33 - T0_degC_R32) / (T1_OUT - T0_OUT);
 8003752:	197b      	adds	r3, r7, r5
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	0025      	movs	r5, r4
 8003758:	193b      	adds	r3, r7, r4
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	0018      	movs	r0, r3
 8003760:	f7fd fa54 	bl	8000c0c <__aeabi_i2f>
 8003764:	1c04      	adds	r4, r0, #0
 8003766:	2314      	movs	r3, #20
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	2200      	movs	r2, #0
 800376c:	5e9a      	ldrsh	r2, [r3, r2]
 800376e:	19bb      	adds	r3, r7, r6
 8003770:	2100      	movs	r1, #0
 8003772:	5e5b      	ldrsh	r3, [r3, r1]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	0018      	movs	r0, r3
 8003778:	f7fd fa48 	bl	8000c0c <__aeabi_i2f>
 800377c:	1c03      	adds	r3, r0, #0
 800377e:	1c19      	adds	r1, r3, #0
 8003780:	1c20      	adds	r0, r4, #0
 8003782:	f7fc fffd 	bl	8000780 <__aeabi_fdiv>
 8003786:	1c03      	adds	r3, r0, #0
 8003788:	1c1a      	adds	r2, r3, #0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	605a      	str	r2, [r3, #4]
        hts_cal_data->offset = T0_degC_R32;
 800378e:	197b      	adds	r3, r7, r5
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]

        /*=== Read in humidity calibration data ===*/
        // buf[0] = HTS_CAL_H0_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003796:	251f      	movs	r5, #31
 8003798:	197c      	adds	r4, r7, r5
 800379a:	483b      	ldr	r0, [pc, #236]	; (8003888 <hts221_init+0x388>)
 800379c:	2301      	movs	r3, #1
 800379e:	425b      	negs	r3, r3
 80037a0:	9302      	str	r3, [sp, #8]
 80037a2:	2301      	movs	r3, #1
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	003b      	movs	r3, r7
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	2301      	movs	r3, #1
 80037ac:	2236      	movs	r2, #54	; 0x36
 80037ae:	21be      	movs	r1, #190	; 0xbe
 80037b0:	f003 fa0c 	bl	8006bcc <HAL_I2C_Mem_Read>
 80037b4:	0003      	movs	r3, r0
 80037b6:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80037b8:	197b      	adds	r3, r7, r5
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <hts221_init+0x2c4>
            return NULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e0c6      	b.n	8003952 <hts221_init+0x452>
        }

        // buf[1] = HTS_CAL_H0_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 80037c4:	003b      	movs	r3, r7
 80037c6:	3301      	adds	r3, #1
 80037c8:	251f      	movs	r5, #31
 80037ca:	197c      	adds	r4, r7, r5
 80037cc:	482e      	ldr	r0, [pc, #184]	; (8003888 <hts221_init+0x388>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	4252      	negs	r2, r2
 80037d2:	9202      	str	r2, [sp, #8]
 80037d4:	2201      	movs	r2, #1
 80037d6:	9201      	str	r2, [sp, #4]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2301      	movs	r3, #1
 80037dc:	2237      	movs	r2, #55	; 0x37
 80037de:	21be      	movs	r1, #190	; 0xbe
 80037e0:	f003 f9f4 	bl	8006bcc <HAL_I2C_Mem_Read>
 80037e4:	0003      	movs	r3, r0
 80037e6:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80037e8:	197b      	adds	r3, r7, r5
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <hts221_init+0x2f4>
            return NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e0ae      	b.n	8003952 <hts221_init+0x452>
        }

        // buf[2] = HTS_CAL_H1_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 80037f4:	003b      	movs	r3, r7
 80037f6:	3302      	adds	r3, #2
 80037f8:	251f      	movs	r5, #31
 80037fa:	197c      	adds	r4, r7, r5
 80037fc:	4822      	ldr	r0, [pc, #136]	; (8003888 <hts221_init+0x388>)
 80037fe:	2201      	movs	r2, #1
 8003800:	4252      	negs	r2, r2
 8003802:	9202      	str	r2, [sp, #8]
 8003804:	2201      	movs	r2, #1
 8003806:	9201      	str	r2, [sp, #4]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	2301      	movs	r3, #1
 800380c:	223a      	movs	r2, #58	; 0x3a
 800380e:	21be      	movs	r1, #190	; 0xbe
 8003810:	f003 f9dc 	bl	8006bcc <HAL_I2C_Mem_Read>
 8003814:	0003      	movs	r3, r0
 8003816:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003818:	197b      	adds	r3, r7, r5
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <hts221_init+0x324>
            return NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	e096      	b.n	8003952 <hts221_init+0x452>
        }

        // buf[3] = HTS_CAL_H1_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 3, 1, HAL_MAX_DELAY);
 8003824:	003b      	movs	r3, r7
 8003826:	3303      	adds	r3, #3
 8003828:	251f      	movs	r5, #31
 800382a:	197c      	adds	r4, r7, r5
 800382c:	4816      	ldr	r0, [pc, #88]	; (8003888 <hts221_init+0x388>)
 800382e:	2201      	movs	r2, #1
 8003830:	4252      	negs	r2, r2
 8003832:	9202      	str	r2, [sp, #8]
 8003834:	2201      	movs	r2, #1
 8003836:	9201      	str	r2, [sp, #4]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	2301      	movs	r3, #1
 800383c:	223b      	movs	r2, #59	; 0x3b
 800383e:	21be      	movs	r1, #190	; 0xbe
 8003840:	f003 f9c4 	bl	8006bcc <HAL_I2C_Mem_Read>
 8003844:	0003      	movs	r3, r0
 8003846:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003848:	197b      	adds	r3, r7, r5
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <hts221_init+0x354>
            return NULL;
 8003850:	2300      	movs	r3, #0
 8003852:	e07e      	b.n	8003952 <hts221_init+0x452>
        }

        // buf[4] = HTS_CAL_H0_rH_x2
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 4, 1, HAL_MAX_DELAY);
 8003854:	003b      	movs	r3, r7
 8003856:	3304      	adds	r3, #4
 8003858:	251f      	movs	r5, #31
 800385a:	197c      	adds	r4, r7, r5
 800385c:	480a      	ldr	r0, [pc, #40]	; (8003888 <hts221_init+0x388>)
 800385e:	2201      	movs	r2, #1
 8003860:	4252      	negs	r2, r2
 8003862:	9202      	str	r2, [sp, #8]
 8003864:	2201      	movs	r2, #1
 8003866:	9201      	str	r2, [sp, #4]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	2301      	movs	r3, #1
 800386c:	2230      	movs	r2, #48	; 0x30
 800386e:	21be      	movs	r1, #190	; 0xbe
 8003870:	f003 f9ac 	bl	8006bcc <HAL_I2C_Mem_Read>
 8003874:	0003      	movs	r3, r0
 8003876:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003878:	197b      	adds	r3, r7, r5
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <hts221_init+0x38c>
            return NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	e066      	b.n	8003952 <hts221_init+0x452>
 8003884:	0800a2b4 	.word	0x0800a2b4
 8003888:	200001c4 	.word	0x200001c4
        }

        // buf[5] = HTS_CAL_H1_rH_x2
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 5, 1, HAL_MAX_DELAY);
 800388c:	003b      	movs	r3, r7
 800388e:	3305      	adds	r3, #5
 8003890:	251f      	movs	r5, #31
 8003892:	197c      	adds	r4, r7, r5
 8003894:	4831      	ldr	r0, [pc, #196]	; (800395c <hts221_init+0x45c>)
 8003896:	2201      	movs	r2, #1
 8003898:	4252      	negs	r2, r2
 800389a:	9202      	str	r2, [sp, #8]
 800389c:	2201      	movs	r2, #1
 800389e:	9201      	str	r2, [sp, #4]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2301      	movs	r3, #1
 80038a4:	2231      	movs	r2, #49	; 0x31
 80038a6:	21be      	movs	r1, #190	; 0xbe
 80038a8:	f003 f990 	bl	8006bcc <HAL_I2C_Mem_Read>
 80038ac:	0003      	movs	r3, r0
 80038ae:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80038b0:	197b      	adds	r3, r7, r5
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <hts221_init+0x3bc>
            return NULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e04a      	b.n	8003952 <hts221_init+0x452>
        }

        /*=== Process humidity calibration data ===*/
        uint8_t H0_Rh_R30 = buf[4] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 80038bc:	003b      	movs	r3, r7
 80038be:	791a      	ldrb	r2, [r3, #4]
 80038c0:	200f      	movs	r0, #15
 80038c2:	183b      	adds	r3, r7, r0
 80038c4:	0852      	lsrs	r2, r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
        uint8_t H1_Rh_R31 = buf[5] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 80038c8:	003b      	movs	r3, r7
 80038ca:	795a      	ldrb	r2, [r3, #5]
 80038cc:	250e      	movs	r5, #14
 80038ce:	197b      	adds	r3, r7, r5
 80038d0:	0852      	lsrs	r2, r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
        int16_t H0_T0_OUT = (buf[0] | (buf[1] << 8)); // This should be signed int
 80038d4:	003b      	movs	r3, r7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b219      	sxth	r1, r3
 80038da:	003b      	movs	r3, r7
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	b21a      	sxth	r2, r3
 80038e2:	240c      	movs	r4, #12
 80038e4:	193b      	adds	r3, r7, r4
 80038e6:	430a      	orrs	r2, r1
 80038e8:	801a      	strh	r2, [r3, #0]
        int16_t H1_T0_OUT = (buf[2] | (buf[3] << 8)); // This should be signed int
 80038ea:	003b      	movs	r3, r7
 80038ec:	789b      	ldrb	r3, [r3, #2]
 80038ee:	b219      	sxth	r1, r3
 80038f0:	003b      	movs	r3, r7
 80038f2:	78db      	ldrb	r3, [r3, #3]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	b21a      	sxth	r2, r3
 80038f8:	230a      	movs	r3, #10
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	430a      	orrs	r2, r1
 80038fe:	801a      	strh	r2, [r3, #0]

        //Store Humid.
        hts_cal_data->H0_OUT = H0_T0_OUT;
 8003900:	0026      	movs	r6, r4
 8003902:	193b      	adds	r3, r7, r4
 8003904:	2100      	movs	r1, #0
 8003906:	5e5a      	ldrsh	r2, [r3, r1]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	60da      	str	r2, [r3, #12]
        hts_cal_data->humid_correction_factor = (float) (H1_Rh_R31 - H0_Rh_R30) / (H1_T0_OUT - H0_T0_OUT);
 800390c:	197b      	adds	r3, r7, r5
 800390e:	781a      	ldrb	r2, [r3, #0]
 8003910:	0005      	movs	r5, r0
 8003912:	183b      	adds	r3, r7, r0
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	0018      	movs	r0, r3
 800391a:	f7fd f977 	bl	8000c0c <__aeabi_i2f>
 800391e:	1c04      	adds	r4, r0, #0
 8003920:	230a      	movs	r3, #10
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2200      	movs	r2, #0
 8003926:	5e9a      	ldrsh	r2, [r3, r2]
 8003928:	19bb      	adds	r3, r7, r6
 800392a:	2100      	movs	r1, #0
 800392c:	5e5b      	ldrsh	r3, [r3, r1]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	0018      	movs	r0, r3
 8003932:	f7fd f96b 	bl	8000c0c <__aeabi_i2f>
 8003936:	1c03      	adds	r3, r0, #0
 8003938:	1c19      	adds	r1, r3, #0
 800393a:	1c20      	adds	r0, r4, #0
 800393c:	f7fc ff20 	bl	8000780 <__aeabi_fdiv>
 8003940:	1c03      	adds	r3, r0, #0
 8003942:	1c1a      	adds	r2, r3, #0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	611a      	str	r2, [r3, #16]
        hts_cal_data->humid_offset = H0_Rh_R30;
 8003948:	197b      	adds	r3, r7, r5
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	615a      	str	r2, [r3, #20]

        return hts_cal_data;
 8003950:	693b      	ldr	r3, [r7, #16]
    }

    return NULL;
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b009      	add	sp, #36	; 0x24
 8003958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	200001c4 	.word	0x200001c4

08003960 <hts221_get_temp>:

int hts221_get_temp(char unit, HTS_Cal * hts_cal_data){
 8003960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003962:	b08d      	sub	sp, #52	; 0x34
 8003964:	af04      	add	r7, sp, #16
 8003966:	0002      	movs	r2, r0
 8003968:	6039      	str	r1, [r7, #0]
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	701a      	strb	r2, [r3, #0]
    uint8_t buf[7];			// read buffer
    int16_t T_OUT;			// T_OUT raw temperature reading
    int temp_adj;			// calibrated temperature value

    /* === Start a temperature reading === */
    buf[0] = HTS_CTRL_REG2_ONE_SHOT;
 800396e:	210c      	movs	r1, #12
 8003970:	187b      	adds	r3, r7, r1
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003976:	231b      	movs	r3, #27
 8003978:	18fc      	adds	r4, r7, r3
 800397a:	4849      	ldr	r0, [pc, #292]	; (8003aa0 <hts221_get_temp+0x140>)
 800397c:	2301      	movs	r3, #1
 800397e:	425b      	negs	r3, r3
 8003980:	9302      	str	r3, [sp, #8]
 8003982:	2301      	movs	r3, #1
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	187b      	adds	r3, r7, r1
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2301      	movs	r3, #1
 800398c:	2221      	movs	r2, #33	; 0x21
 800398e:	21be      	movs	r1, #190	; 0xbe
 8003990:	f002 ffee 	bl	8006970 <HAL_I2C_Mem_Write>
 8003994:	0003      	movs	r3, r0
 8003996:	7023      	strb	r3, [r4, #0]

    /* === Read in temperature data === */

    //TODO check that this loop is right...
    // Try three times for temp data to be ready
    for (int i = 0; i < 3; ++i) {
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e01a      	b.n	80039d4 <hts221_get_temp+0x74>
        // buf[0] = HTS_STATUS_REG
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 800399e:	231b      	movs	r3, #27
 80039a0:	18fc      	adds	r4, r7, r3
 80039a2:	483f      	ldr	r0, [pc, #252]	; (8003aa0 <hts221_get_temp+0x140>)
 80039a4:	2301      	movs	r3, #1
 80039a6:	425b      	negs	r3, r3
 80039a8:	9302      	str	r3, [sp, #8]
 80039aa:	2301      	movs	r3, #1
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	250c      	movs	r5, #12
 80039b0:	197b      	adds	r3, r7, r5
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2301      	movs	r3, #1
 80039b6:	2227      	movs	r2, #39	; 0x27
 80039b8:	21be      	movs	r1, #190	; 0xbe
 80039ba:	f003 f907 	bl	8006bcc <HAL_I2C_Mem_Read>
 80039be:	0003      	movs	r3, r0
 80039c0:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
            // TODO: error handling
        }
        if (buf[0] & 1){
 80039c2:	197b      	adds	r3, r7, r5
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	001a      	movs	r2, r3
 80039c8:	2301      	movs	r3, #1
 80039ca:	4013      	ands	r3, r2
 80039cc:	d106      	bne.n	80039dc <hts221_get_temp+0x7c>
    for (int i = 0; i < 3; ++i) {
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3301      	adds	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	dde1      	ble.n	800399e <hts221_get_temp+0x3e>
 80039da:	e000      	b.n	80039de <hts221_get_temp+0x7e>
            // new temp. data ready
            break;
 80039dc:	46c0      	nop			; (mov r8, r8)
        }
        //TODO - HAL_WAIT?
    }

    // buf[1] = HTS_TEMP_OUT_L
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 80039de:	250c      	movs	r5, #12
 80039e0:	197b      	adds	r3, r7, r5
 80039e2:	3301      	adds	r3, #1
 80039e4:	261b      	movs	r6, #27
 80039e6:	19bc      	adds	r4, r7, r6
 80039e8:	482d      	ldr	r0, [pc, #180]	; (8003aa0 <hts221_get_temp+0x140>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	4252      	negs	r2, r2
 80039ee:	9202      	str	r2, [sp, #8]
 80039f0:	2201      	movs	r2, #1
 80039f2:	9201      	str	r2, [sp, #4]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2301      	movs	r3, #1
 80039f8:	222a      	movs	r2, #42	; 0x2a
 80039fa:	21be      	movs	r1, #190	; 0xbe
 80039fc:	f003 f8e6 	bl	8006bcc <HAL_I2C_Mem_Read>
 8003a00:	0003      	movs	r3, r0
 8003a02:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
        // TODO: error handling
    }

    // buf[2] = HTS_TEMP_OUT_H
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8003a04:	197b      	adds	r3, r7, r5
 8003a06:	3302      	adds	r3, #2
 8003a08:	19bc      	adds	r4, r7, r6
 8003a0a:	4825      	ldr	r0, [pc, #148]	; (8003aa0 <hts221_get_temp+0x140>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4252      	negs	r2, r2
 8003a10:	9202      	str	r2, [sp, #8]
 8003a12:	2201      	movs	r2, #1
 8003a14:	9201      	str	r2, [sp, #4]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	222b      	movs	r2, #43	; 0x2b
 8003a1c:	21be      	movs	r1, #190	; 0xbe
 8003a1e:	f003 f8d5 	bl	8006bcc <HAL_I2C_Mem_Read>
 8003a22:	0003      	movs	r3, r0
 8003a24:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
        // TODO: error handling
    }

    T_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 8003a26:	197b      	adds	r3, r7, r5
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	b219      	sxth	r1, r3
 8003a2c:	197b      	adds	r3, r7, r5
 8003a2e:	789b      	ldrb	r3, [r3, #2]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	b21a      	sxth	r2, r3
 8003a34:	2018      	movs	r0, #24
 8003a36:	183b      	adds	r3, r7, r0
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	801a      	strh	r2, [r3, #0]

    temp_adj = hts221_calc_temp(T_OUT, hts_cal_data);
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	183b      	adds	r3, r7, r0
 8003a40:	2100      	movs	r1, #0
 8003a42:	5e5b      	ldrsh	r3, [r3, r1]
 8003a44:	0011      	movs	r1, r2
 8003a46:	0018      	movs	r0, r3
 8003a48:	f000 f832 	bl	8003ab0 <hts221_calc_temp>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	617b      	str	r3, [r7, #20]

    // Return in correct units
    if (unit == 'F'){
 8003a50:	1dfb      	adds	r3, r7, #7
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b46      	cmp	r3, #70	; 0x46
 8003a56:	d11e      	bne.n	8003a96 <hts221_get_temp+0x136>
        //Fahrenheit
        return (temp_adj * 9.0 / 5.0) + 32;
 8003a58:	6978      	ldr	r0, [r7, #20]
 8003a5a:	f7fe fa11 	bl	8001e80 <__aeabi_i2d>
 8003a5e:	2200      	movs	r2, #0
 8003a60:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <hts221_get_temp+0x144>)
 8003a62:	f7fd ff6b 	bl	800193c <__aeabi_dmul>
 8003a66:	0002      	movs	r2, r0
 8003a68:	000b      	movs	r3, r1
 8003a6a:	0010      	movs	r0, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <hts221_get_temp+0x148>)
 8003a72:	f7fd fc7b 	bl	800136c <__aeabi_ddiv>
 8003a76:	0002      	movs	r2, r0
 8003a78:	000b      	movs	r3, r1
 8003a7a:	0010      	movs	r0, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	2200      	movs	r2, #0
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <hts221_get_temp+0x14c>)
 8003a82:	f7fd f909 	bl	8000c98 <__aeabi_dadd>
 8003a86:	0002      	movs	r2, r0
 8003a88:	000b      	movs	r3, r1
 8003a8a:	0010      	movs	r0, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	f7fe f9c1 	bl	8001e14 <__aeabi_d2iz>
 8003a92:	0003      	movs	r3, r0
 8003a94:	e000      	b.n	8003a98 <hts221_get_temp+0x138>

    }
    else {
        //Celsius
        return temp_adj;
 8003a96:	697b      	ldr	r3, [r7, #20]
    }

}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b009      	add	sp, #36	; 0x24
 8003a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa0:	200001c4 	.word	0x200001c4
 8003aa4:	40220000 	.word	0x40220000
 8003aa8:	40140000 	.word	0x40140000
 8003aac:	40400000 	.word	0x40400000

08003ab0 <hts221_calc_temp>:

int hts221_calc_temp(int16_t T_OUT, HTS_Cal * hts_cal_data) {
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	1dbb      	adds	r3, r7, #6
 8003abc:	801a      	strh	r2, [r3, #0]

    int zeroed_temp = T_OUT - hts_cal_data->T0_OUT;
 8003abe:	1dbb      	adds	r3, r7, #6
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	5e9a      	ldrsh	r2, [r3, r2]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	60fb      	str	r3, [r7, #12]
    int temp_adj = (zeroed_temp * hts_cal_data->correction_factor) + hts_cal_data->offset;
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7fd f89d 	bl	8000c0c <__aeabi_i2f>
 8003ad2:	1c02      	adds	r2, r0, #0
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	1c19      	adds	r1, r3, #0
 8003ada:	1c10      	adds	r0, r2, #0
 8003adc:	f7fc ff5c 	bl	8000998 <__aeabi_fmul>
 8003ae0:	1c03      	adds	r3, r0, #0
 8003ae2:	1c1c      	adds	r4, r3, #0
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f7fd f88f 	bl	8000c0c <__aeabi_i2f>
 8003aee:	1c03      	adds	r3, r0, #0
 8003af0:	1c19      	adds	r1, r3, #0
 8003af2:	1c20      	adds	r0, r4, #0
 8003af4:	f7fc fca8 	bl	8000448 <__aeabi_fadd>
 8003af8:	1c03      	adds	r3, r0, #0
 8003afa:	1c18      	adds	r0, r3, #0
 8003afc:	f7fd f866 	bl	8000bcc <__aeabi_f2iz>
 8003b00:	0003      	movs	r3, r0
 8003b02:	60bb      	str	r3, [r7, #8]

    return temp_adj;
 8003b04:	68bb      	ldr	r3, [r7, #8]
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b005      	add	sp, #20
 8003b0c:	bd90      	pop	{r4, r7, pc}
	...

08003b10 <hts221_get_humid>:

int hts221_get_humid(HTS_Cal * hts_cal_data) {
 8003b10:	b5b0      	push	{r4, r5, r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af04      	add	r7, sp, #16
 8003b16:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];			// read buffer
    int16_t H_OUT;			// H_OUT raw temperature reading
    int humid_adj;			// calibrated temperature value

    /* === Start a humidity reading === */
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003b18:	251f      	movs	r5, #31
 8003b1a:	197c      	adds	r4, r7, r5
 8003b1c:	4866      	ldr	r0, [pc, #408]	; (8003cb8 <hts221_get_humid+0x1a8>)
 8003b1e:	2301      	movs	r3, #1
 8003b20:	425b      	negs	r3, r3
 8003b22:	9302      	str	r3, [sp, #8]
 8003b24:	2301      	movs	r3, #1
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	230c      	movs	r3, #12
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	2221      	movs	r2, #33	; 0x21
 8003b32:	21be      	movs	r1, #190	; 0xbe
 8003b34:	f003 f84a 	bl	8006bcc <HAL_I2C_Mem_Read>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8003b3c:	197b      	adds	r3, r7, r5
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <hts221_get_humid+0x3a>
        return HUMID_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	425b      	negs	r3, r3
 8003b48:	e0b2      	b.n	8003cb0 <hts221_get_humid+0x1a0>
    }

    buf[0] |= HTS_CTRL_REG2_ONE_SHOT;
 8003b4a:	210c      	movs	r1, #12
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	4313      	orrs	r3, r2
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003b5a:	251f      	movs	r5, #31
 8003b5c:	197c      	adds	r4, r7, r5
 8003b5e:	4856      	ldr	r0, [pc, #344]	; (8003cb8 <hts221_get_humid+0x1a8>)
 8003b60:	2301      	movs	r3, #1
 8003b62:	425b      	negs	r3, r3
 8003b64:	9302      	str	r3, [sp, #8]
 8003b66:	2301      	movs	r3, #1
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2301      	movs	r3, #1
 8003b70:	2221      	movs	r2, #33	; 0x21
 8003b72:	21be      	movs	r1, #190	; 0xbe
 8003b74:	f002 fefc 	bl	8006970 <HAL_I2C_Mem_Write>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8003b7c:	197b      	adds	r3, r7, r5
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <hts221_get_humid+0x7a>
        return HUMID_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	425b      	negs	r3, r3
 8003b88:	e092      	b.n	8003cb0 <hts221_get_humid+0x1a0>
    }

    // wait for one shot bit to clear by the hts
    do{
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003b8a:	251f      	movs	r5, #31
 8003b8c:	197c      	adds	r4, r7, r5
 8003b8e:	484a      	ldr	r0, [pc, #296]	; (8003cb8 <hts221_get_humid+0x1a8>)
 8003b90:	2301      	movs	r3, #1
 8003b92:	425b      	negs	r3, r3
 8003b94:	9302      	str	r3, [sp, #8]
 8003b96:	2301      	movs	r3, #1
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	230c      	movs	r3, #12
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	2221      	movs	r2, #33	; 0x21
 8003ba4:	21be      	movs	r1, #190	; 0xbe
 8003ba6:	f003 f811 	bl	8006bcc <HAL_I2C_Mem_Read>
 8003baa:	0003      	movs	r3, r0
 8003bac:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003bae:	197b      	adds	r3, r7, r5
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <hts221_get_humid+0xac>
            return HUMID_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	425b      	negs	r3, r3
 8003bba:	e079      	b.n	8003cb0 <hts221_get_humid+0x1a0>
        }
    } while (buf[0] & HTS_CTRL_REG2_ONE_SHOT);
 8003bbc:	210c      	movs	r1, #12
 8003bbe:	187b      	adds	r3, r7, r1
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	001a      	movs	r2, r3
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d1df      	bne.n	8003b8a <hts221_get_humid+0x7a>

    /* === Read in humidity data === */

    //TODO check that this loop is right...
    // Try three times for temp data to be ready
    for (int i = 0; i < 3; ++i) {
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	dc22      	bgt.n	8003c1a <hts221_get_humid+0x10a>
        // buf[0] = HTS_STATUS_REG
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003bd4:	251f      	movs	r5, #31
 8003bd6:	197c      	adds	r4, r7, r5
 8003bd8:	4837      	ldr	r0, [pc, #220]	; (8003cb8 <hts221_get_humid+0x1a8>)
 8003bda:	2301      	movs	r3, #1
 8003bdc:	425b      	negs	r3, r3
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	2301      	movs	r3, #1
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2301      	movs	r3, #1
 8003bea:	2227      	movs	r2, #39	; 0x27
 8003bec:	21be      	movs	r1, #190	; 0xbe
 8003bee:	f002 ffed 	bl	8006bcc <HAL_I2C_Mem_Read>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8003bf6:	197b      	adds	r3, r7, r5
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <hts221_get_humid+0xf4>
            return HUMID_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	425b      	negs	r3, r3
 8003c02:	e055      	b.n	8003cb0 <hts221_get_humid+0x1a0>
        }
        if (buf[0] & 2){
 8003c04:	230c      	movs	r3, #12
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d102      	bne.n	8003c18 <hts221_get_humid+0x108>
            // new humid. data ready
            break;
        }
        return HUMID_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	425b      	negs	r3, r3
 8003c16:	e04b      	b.n	8003cb0 <hts221_get_humid+0x1a0>
            break;
 8003c18:	46c0      	nop			; (mov r8, r8)
    }

    // buf[1] = HTS_HUMIDITY_OUT_L
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	251f      	movs	r5, #31
 8003c22:	197c      	adds	r4, r7, r5
 8003c24:	4824      	ldr	r0, [pc, #144]	; (8003cb8 <hts221_get_humid+0x1a8>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	4252      	negs	r2, r2
 8003c2a:	9202      	str	r2, [sp, #8]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	9201      	str	r2, [sp, #4]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2301      	movs	r3, #1
 8003c34:	2228      	movs	r2, #40	; 0x28
 8003c36:	21be      	movs	r1, #190	; 0xbe
 8003c38:	f002 ffc8 	bl	8006bcc <HAL_I2C_Mem_Read>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8003c40:	197b      	adds	r3, r7, r5
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <hts221_get_humid+0x13e>
        return HUMID_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	425b      	negs	r3, r3
 8003c4c:	e030      	b.n	8003cb0 <hts221_get_humid+0x1a0>
    }

    // buf[2] = HTS_HUMIDITY_OUT_H
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8003c4e:	230c      	movs	r3, #12
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	3302      	adds	r3, #2
 8003c54:	251f      	movs	r5, #31
 8003c56:	197c      	adds	r4, r7, r5
 8003c58:	4817      	ldr	r0, [pc, #92]	; (8003cb8 <hts221_get_humid+0x1a8>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	4252      	negs	r2, r2
 8003c5e:	9202      	str	r2, [sp, #8]
 8003c60:	2201      	movs	r2, #1
 8003c62:	9201      	str	r2, [sp, #4]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	2301      	movs	r3, #1
 8003c68:	2229      	movs	r2, #41	; 0x29
 8003c6a:	21be      	movs	r1, #190	; 0xbe
 8003c6c:	f002 ffae 	bl	8006bcc <HAL_I2C_Mem_Read>
 8003c70:	0003      	movs	r3, r0
 8003c72:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8003c74:	197b      	adds	r3, r7, r5
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <hts221_get_humid+0x172>
        return HUMID_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	425b      	negs	r3, r3
 8003c80:	e016      	b.n	8003cb0 <hts221_get_humid+0x1a0>
    }

    H_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 8003c82:	220c      	movs	r2, #12
 8003c84:	18bb      	adds	r3, r7, r2
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	b219      	sxth	r1, r3
 8003c8a:	18bb      	adds	r3, r7, r2
 8003c8c:	789b      	ldrb	r3, [r3, #2]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	b21a      	sxth	r2, r3
 8003c92:	2016      	movs	r0, #22
 8003c94:	183b      	adds	r3, r7, r0
 8003c96:	430a      	orrs	r2, r1
 8003c98:	801a      	strh	r2, [r3, #0]

    humid_adj = hts221_calc_humid(H_OUT, hts_cal_data);
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	183b      	adds	r3, r7, r0
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5e5b      	ldrsh	r3, [r3, r1]
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f000 f809 	bl	8003cbc <hts221_calc_humid>
 8003caa:	0003      	movs	r3, r0
 8003cac:	613b      	str	r3, [r7, #16]

    return humid_adj;
 8003cae:	693b      	ldr	r3, [r7, #16]

}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b008      	add	sp, #32
 8003cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb8:	200001c4 	.word	0x200001c4

08003cbc <hts221_calc_humid>:

int hts221_calc_humid(int16_t H_OUT, HTS_Cal * hts_cal_data){
 8003cbc:	b590      	push	{r4, r7, lr}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	0002      	movs	r2, r0
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	1dbb      	adds	r3, r7, #6
 8003cc8:	801a      	strh	r2, [r3, #0]

    int zeroed_humid = H_OUT - hts_cal_data->H0_OUT;
 8003cca:	1dbb      	adds	r3, r7, #6
 8003ccc:	2200      	movs	r2, #0
 8003cce:	5e9a      	ldrsh	r2, [r3, r2]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	60fb      	str	r3, [r7, #12]
    int humid_adj = (zeroed_humid * hts_cal_data->humid_correction_factor) + hts_cal_data->humid_offset;
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7fc ff97 	bl	8000c0c <__aeabi_i2f>
 8003cde:	1c02      	adds	r2, r0, #0
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	1c19      	adds	r1, r3, #0
 8003ce6:	1c10      	adds	r0, r2, #0
 8003ce8:	f7fc fe56 	bl	8000998 <__aeabi_fmul>
 8003cec:	1c03      	adds	r3, r0, #0
 8003cee:	1c1c      	adds	r4, r3, #0
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7fc ff89 	bl	8000c0c <__aeabi_i2f>
 8003cfa:	1c03      	adds	r3, r0, #0
 8003cfc:	1c19      	adds	r1, r3, #0
 8003cfe:	1c20      	adds	r0, r4, #0
 8003d00:	f7fc fba2 	bl	8000448 <__aeabi_fadd>
 8003d04:	1c03      	adds	r3, r0, #0
 8003d06:	1c18      	adds	r0, r3, #0
 8003d08:	f7fc ff60 	bl	8000bcc <__aeabi_f2iz>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	60bb      	str	r3, [r7, #8]

    return humid_adj;
 8003d10:	68bb      	ldr	r3, [r7, #8]

 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b005      	add	sp, #20
 8003d18:	bd90      	pop	{r4, r7, pc}
	...

08003d1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d22:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <MX_I2C1_Init+0x78>)
 8003d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003d26:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d28:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <MX_I2C1_Init+0x7c>)
 8003d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d32:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d44:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d56:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f002 fd73 	bl	8006844 <HAL_I2C_Init>
 8003d5e:	1e03      	subs	r3, r0, #0
 8003d60:	d001      	beq.n	8003d66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003d62:	f000 fa6f 	bl	8004244 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d66:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d68:	2100      	movs	r1, #0
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f003 faa0 	bl	80072b0 <HAL_I2CEx_ConfigAnalogFilter>
 8003d70:	1e03      	subs	r3, r0, #0
 8003d72:	d001      	beq.n	8003d78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003d74:	f000 fa66 	bl	8004244 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <MX_I2C1_Init+0x74>)
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f003 fae3 	bl	8007348 <HAL_I2CEx_ConfigDigitalFilter>
 8003d82:	1e03      	subs	r3, r0, #0
 8003d84:	d001      	beq.n	8003d8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003d86:	f000 fa5d 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	200001c4 	.word	0x200001c4
 8003d94:	40005400 	.word	0x40005400
 8003d98:	00707cbb 	.word	0x00707cbb

08003d9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	240c      	movs	r4, #12
 8003da6:	193b      	adds	r3, r7, r4
 8003da8:	0018      	movs	r0, r3
 8003daa:	2314      	movs	r3, #20
 8003dac:	001a      	movs	r2, r3
 8003dae:	2100      	movs	r1, #0
 8003db0:	f006 f96b 	bl	800a08a <memset>
  if(i2cHandle->Instance==I2C1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_I2C_MspInit+0x80>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d129      	bne.n	8003e12 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dbe:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <HAL_I2C_MspInit+0x84>)
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <HAL_I2C_MspInit+0x84>)
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <HAL_I2C_MspInit+0x84>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003dd6:	193b      	adds	r3, r7, r4
 8003dd8:	22c0      	movs	r2, #192	; 0xc0
 8003dda:	0092      	lsls	r2, r2, #2
 8003ddc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dde:	0021      	movs	r1, r4
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	2212      	movs	r2, #18
 8003de4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	2201      	movs	r2, #1
 8003dea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	2203      	movs	r2, #3
 8003df0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003df2:	187b      	adds	r3, r7, r1
 8003df4:	2204      	movs	r2, #4
 8003df6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df8:	187b      	adds	r3, r7, r1
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <HAL_I2C_MspInit+0x88>)
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	0010      	movs	r0, r2
 8003e00:	f002 fb66 	bl	80064d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_I2C_MspInit+0x84>)
 8003e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_I2C_MspInit+0x84>)
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	0389      	lsls	r1, r1, #14
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b009      	add	sp, #36	; 0x24
 8003e18:	bd90      	pop	{r4, r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	40005400 	.word	0x40005400
 8003e20:	40021000 	.word	0x40021000
 8003e24:	50000400 	.word	0x50000400

08003e28 <HAL_ADC_LevelOutOfWindowCallback>:
  set_cursor(2,2);
  printString("Initializing Peripherals...");
  display(false);
}

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
    serial_println("*** ADC WATCHDOG INTERRUPT ***");
 8003e30:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <HAL_ADC_LevelOutOfWindowCallback+0xf8>)
 8003e32:	0018      	movs	r0, r3
 8003e34:	f000 fab4 	bl	80043a0 <serial_println>
    HAL_Delay(500);
 8003e38:	23fa      	movs	r3, #250	; 0xfa
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f001 fb5d 	bl	80054fc <HAL_Delay>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8003e42:	2301      	movs	r3, #1
 8003e44:	425a      	negs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0011      	movs	r1, r2
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f001 fd82 	bl	8005954 <HAL_ADC_PollForConversion>
    uint32_t adc_value = HAL_ADC_GetValue(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	0018      	movs	r0, r3
 8003e54:	f001 fe14 	bl	8005a80 <HAL_ADC_GetValue>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	617b      	str	r3, [r7, #20]
    serial_printf("ADC reading: %d\n", adc_value);
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <HAL_ADC_LevelOutOfWindowCallback+0xfc>)
 8003e60:	0011      	movs	r1, r2
 8003e62:	0018      	movs	r0, r3
 8003e64:	f000 fadc 	bl	8004420 <serial_printf>
    HAL_ADC_Stop(hadc);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f001 fd32 	bl	80058d4 <HAL_ADC_Stop>

    // Change the thresholds
    uint32_t curr_upper = (hadc->Instance->TR >> 16) & 0x00000FFF;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	051b      	lsls	r3, r3, #20
 8003e7a:	0d1b      	lsrs	r3, r3, #20
 8003e7c:	613b      	str	r3, [r7, #16]
    uint32_t curr_lower = (hadc->Instance->TR & 0x00000FFF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	051b      	lsls	r3, r3, #20
 8003e86:	0d1b      	lsrs	r3, r3, #20
 8003e88:	60fb      	str	r3, [r7, #12]

    if (curr_upper != 0x0FFF) { //  we trig'd because something was placed onto the sensor
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4a26      	ldr	r2, [pc, #152]	; (8003f28 <HAL_ADC_LevelOutOfWindowCallback+0x100>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01c      	beq.n	8003ecc <HAL_ADC_LevelOutOfWindowCallback+0xa4>
        serial_println("Something was placed on me!");
 8003e92:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <HAL_ADC_LevelOutOfWindowCallback+0x104>)
 8003e94:	0018      	movs	r0, r3
 8003e96:	f000 fa83 	bl	80043a0 <serial_println>
        // change upper threshold to max so that it can't be triggered due to something sitting on the pressure sensor
        hadc->Instance->TR = (0x0FFF << 16);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <HAL_ADC_LevelOutOfWindowCallback+0x108>)
 8003ea0:	621a      	str	r2, [r3, #32]
        hadc->Instance->TR |= curr_upper;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6a19      	ldr	r1, [r3, #32]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	621a      	str	r2, [r3, #32]
        HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8003eb2:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <HAL_ADC_LevelOutOfWindowCallback+0x10c>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2120      	movs	r1, #32
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f002 fc7f 	bl	80067bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_ADC_LevelOutOfWindowCallback+0x10c>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	2110      	movs	r1, #16
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f002 fc79 	bl	80067bc <HAL_GPIO_WritePin>
 8003eca:	e01c      	b.n	8003f06 <HAL_ADC_LevelOutOfWindowCallback+0xde>
    } else {
        serial_println("Something was removed from me!");
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <HAL_ADC_LevelOutOfWindowCallback+0x110>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 fa66 	bl	80043a0 <serial_println>
        hadc->Instance->TR = (curr_lower << 16);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	0412      	lsls	r2, r2, #16
 8003edc:	621a      	str	r2, [r3, #32]
        hadc->Instance->TR &= ~(0x0000FFFF); // clear the lower threshold
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6a1a      	ldr	r2, [r3, #32]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	0c12      	lsrs	r2, r2, #16
 8003eea:	0412      	lsls	r2, r2, #16
 8003eec:	621a      	str	r2, [r3, #32]
        HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8003eee:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_ADC_LevelOutOfWindowCallback+0x10c>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	2120      	movs	r1, #32
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f002 fc61 	bl	80067bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8003efa:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <HAL_ADC_LevelOutOfWindowCallback+0x10c>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	2110      	movs	r1, #16
 8003f00:	0018      	movs	r0, r3
 8003f02:	f002 fc5b 	bl	80067bc <HAL_GPIO_WritePin>
    }

    serial_print("\n");
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <HAL_ADC_LevelOutOfWindowCallback+0x114>)
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 fa33 	bl	8004374 <serial_print>

    HAL_ADC_Start(hadc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	0018      	movs	r0, r3
 8003f12:	f001 fc8b 	bl	800582c <HAL_ADC_Start>

}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b006      	add	sp, #24
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	0800a34c 	.word	0x0800a34c
 8003f24:	0800a36c 	.word	0x0800a36c
 8003f28:	00000fff 	.word	0x00000fff
 8003f2c:	0800a380 	.word	0x0800a380
 8003f30:	0fff0000 	.word	0x0fff0000
 8003f34:	50000400 	.word	0x50000400
 8003f38:	0800a39c 	.word	0x0800a39c
 8003f3c:	0800a3bc 	.word	0x0800a3bc

08003f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f46:	f001 fa69 	bl	800541c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f4a:	f000 f8df 	bl	800410c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f4e:	f7ff f9b1 	bl	80032b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003f52:	f7fe fc3f 	bl	80027d4 <MX_DMA_Init>
  MX_I2C1_Init();
 8003f56:	f7ff fee1 	bl	8003d1c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003f5a:	f001 f84d 	bl	8004ff8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8003f5e:	f000 ffbb 	bl	8004ed8 <MX_TIM6_Init>
  MX_SPI1_Init();
 8003f62:	f000 fb0d 	bl	8004580 <MX_SPI1_Init>
  MX_ADC_Init();
 8003f66:	f7fd ffe5 	bl	8001f34 <MX_ADC_Init>
  MX_TIM2_Init();
 8003f6a:	f000 ff61 	bl	8004e30 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003f6e:	f001 f813 	bl	8004f98 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003f72:	f000 f943 	bl	80041fc <MX_NVIC_Init>
//  serial_printf("%s\n", prediction_days);
//  serial_println("Did you see that? I was chatting with the wi-fi module for a little bit ;)");


  // I2C Peripherals
  serial_select(DEBUG_PRINT);
 8003f76:	2001      	movs	r0, #1
 8003f78:	f000 f9ae 	bl	80042d8 <serial_select>
  serial_clear();
 8003f7c:	f000 f9e0 	bl	8004340 <serial_clear>

  serial_printf("Initializing I2C peripherals... ");
 8003f80:	4b54      	ldr	r3, [pc, #336]	; (80040d4 <main+0x194>)
 8003f82:	0018      	movs	r0, r3
 8003f84:	f000 fa4c 	bl	8004420 <serial_printf>
  hts_cal_data = hts221_init();
 8003f88:	f7ff faba 	bl	8003500 <hts221_init>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	4b52      	ldr	r3, [pc, #328]	; (80040d8 <main+0x198>)
 8003f90:	601a      	str	r2, [r3, #0]
  bq_init_ret = bq_init();
 8003f92:	f7fe f92b 	bl	80021ec <bq_init>
 8003f96:	0002      	movs	r2, r0
 8003f98:	4b50      	ldr	r3, [pc, #320]	; (80040dc <main+0x19c>)
 8003f9a:	601a      	str	r2, [r3, #0]
  VCNL4010_setLEDcurrent(5);
 8003f9c:	2005      	movs	r0, #5
 8003f9e:	f001 f93e 	bl	800521e <VCNL4010_setLEDcurrent>
  VCNL4010_enable_Interrupt();
 8003fa2:	f001 f8f3 	bl	800518c <VCNL4010_enable_Interrupt>
  serial_println("Done!");
 8003fa6:	4b4e      	ldr	r3, [pc, #312]	; (80040e0 <main+0x1a0>)
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f000 f9f9 	bl	80043a0 <serial_println>

  uint16_t voltage = BQ27441_voltage();
 8003fae:	2516      	movs	r5, #22
 8003fb0:	197c      	adds	r4, r7, r5
 8003fb2:	f7fe f985 	bl	80022c0 <BQ27441_voltage>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	8023      	strh	r3, [r4, #0]
  uint16_t soc = BQ27441_soc(FILTERED);
 8003fba:	2614      	movs	r6, #20
 8003fbc:	19bc      	adds	r4, r7, r6
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	f7fe fa26 	bl	8002410 <BQ27441_soc>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	8023      	strh	r3, [r4, #0]
  uint16_t current = BQ27441_current(AVG);
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f7fe f982 	bl	80022d2 <BQ27441_current>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	2312      	movs	r3, #18
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	801a      	strh	r2, [r3, #0]
  uint16_t cap_remaining = BQ27441_capacity(REMAIN);
 8003fd8:	2210      	movs	r2, #16
 8003fda:	18bc      	adds	r4, r7, r2
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f7fe f9af 	bl	8002340 <BQ27441_capacity>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	8023      	strh	r3, [r4, #0]
  uint16_t cap_max = BQ27441_capacity(DESIGN);
 8003fe6:	210e      	movs	r1, #14
 8003fe8:	187c      	adds	r4, r7, r1
 8003fea:	2008      	movs	r0, #8
 8003fec:	f7fe f9a8 	bl	8002340 <BQ27441_capacity>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	8023      	strh	r3, [r4, #0]
  int16_t power = BQ27441_power(); //average draw
 8003ff4:	200c      	movs	r0, #12
 8003ff6:	183c      	adds	r4, r7, r0
 8003ff8:	f7fe fa00 	bl	80023fc <BQ27441_power>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	8023      	strh	r3, [r4, #0]
  uint16_t soh = BQ27441_soh(PERCENT);
 8004000:	2000      	movs	r0, #0
 8004002:	f7fe fa2d 	bl	8002460 <BQ27441_soh>
 8004006:	0003      	movs	r3, r0
 8004008:	001a      	movs	r2, r3
 800400a:	240a      	movs	r4, #10
 800400c:	193b      	adds	r3, r7, r4
 800400e:	801a      	strh	r2, [r3, #0]
  uint16_t temp_bat = BQ27441_temperature(BATTERY) / 10;
 8004010:	2000      	movs	r0, #0
 8004012:	f7fe fa4d 	bl	80024b0 <BQ27441_temperature>
 8004016:	0003      	movs	r3, r0
 8004018:	2208      	movs	r2, #8
 800401a:	18bc      	adds	r4, r7, r2
 800401c:	210a      	movs	r1, #10
 800401e:	0018      	movs	r0, r3
 8004020:	f7fc f872 	bl	8000108 <__udivsi3>
 8004024:	0003      	movs	r3, r0
 8004026:	8023      	strh	r3, [r4, #0]
  uint16_t temp_bq_IC = BQ27441_temperature(INTERNAL_TEMP) / 10;
 8004028:	2001      	movs	r0, #1
 800402a:	f7fe fa41 	bl	80024b0 <BQ27441_temperature>
 800402e:	0003      	movs	r3, r0
 8004030:	1dbc      	adds	r4, r7, #6
 8004032:	210a      	movs	r1, #10
 8004034:	0018      	movs	r0, r3
 8004036:	f7fc f867 	bl	8000108 <__udivsi3>
 800403a:	0003      	movs	r3, r0
 800403c:	8023      	strh	r3, [r4, #0]

  serial_printf("State of Charge\t\t\t\t%d\t%%\r\n", soc);
 800403e:	19bb      	adds	r3, r7, r6
 8004040:	881a      	ldrh	r2, [r3, #0]
 8004042:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <main+0x1a4>)
 8004044:	0011      	movs	r1, r2
 8004046:	0018      	movs	r0, r3
 8004048:	f000 f9ea 	bl	8004420 <serial_printf>
  serial_printf("Battery Voltage\t\t\t\t%d\tmV\r\n", voltage);
 800404c:	197b      	adds	r3, r7, r5
 800404e:	881a      	ldrh	r2, [r3, #0]
 8004050:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <main+0x1a8>)
 8004052:	0011      	movs	r1, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f000 f9e3 	bl	8004420 <serial_printf>
  serial_printf("Current\t\t\t\t\t%d\tmA\r\n", current);
 800405a:	2312      	movs	r3, #18
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	881a      	ldrh	r2, [r3, #0]
 8004060:	4b22      	ldr	r3, [pc, #136]	; (80040ec <main+0x1ac>)
 8004062:	0011      	movs	r1, r2
 8004064:	0018      	movs	r0, r3
 8004066:	f000 f9db 	bl	8004420 <serial_printf>
  serial_printf("Max Capacity\t\t\t\t%d\tmAh\r\n", cap_max);
 800406a:	210e      	movs	r1, #14
 800406c:	187b      	adds	r3, r7, r1
 800406e:	881a      	ldrh	r2, [r3, #0]
 8004070:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <main+0x1b0>)
 8004072:	0011      	movs	r1, r2
 8004074:	0018      	movs	r0, r3
 8004076:	f000 f9d3 	bl	8004420 <serial_printf>
  serial_printf("Remaining Capacity\t\t\t%d\tmAh\r\n", cap_remaining);
 800407a:	2210      	movs	r2, #16
 800407c:	18bb      	adds	r3, r7, r2
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <main+0x1b4>)
 8004082:	0011      	movs	r1, r2
 8004084:	0018      	movs	r0, r3
 8004086:	f000 f9cb 	bl	8004420 <serial_printf>
  serial_printf("Ave power consumption\t\t\t%d\tmW\r\n", power);
 800408a:	200c      	movs	r0, #12
 800408c:	183b      	adds	r3, r7, r0
 800408e:	2200      	movs	r2, #0
 8004090:	5e9a      	ldrsh	r2, [r3, r2]
 8004092:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <main+0x1b8>)
 8004094:	0011      	movs	r1, r2
 8004096:	0018      	movs	r0, r3
 8004098:	f000 f9c2 	bl	8004420 <serial_printf>
  serial_printf("Health\t\t\t\t\t%d\t%%\r\n", soh);
 800409c:	240a      	movs	r4, #10
 800409e:	193b      	adds	r3, r7, r4
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	4b16      	ldr	r3, [pc, #88]	; (80040fc <main+0x1bc>)
 80040a4:	0011      	movs	r1, r2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f9ba 	bl	8004420 <serial_printf>
  serial_printf("Battery Pack Temp\t\t\t%d\tK\r\n", temp_bat);
 80040ac:	2208      	movs	r2, #8
 80040ae:	18bb      	adds	r3, r7, r2
 80040b0:	881a      	ldrh	r2, [r3, #0]
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <main+0x1c0>)
 80040b4:	0011      	movs	r1, r2
 80040b6:	0018      	movs	r0, r3
 80040b8:	f000 f9b2 	bl	8004420 <serial_printf>
  serial_printf("Current Bat IC Temp is\t\t\t%d\tK\r\n", temp_bq_IC);
 80040bc:	1dbb      	adds	r3, r7, #6
 80040be:	881a      	ldrh	r2, [r3, #0]
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <main+0x1c4>)
 80040c2:	0011      	movs	r1, r2
 80040c4:	0018      	movs	r0, r3
 80040c6:	f000 f9ab 	bl	8004420 <serial_printf>

//  display_setup();

//  HAL_TIM_Base_Start_IT(&htim6);
    HAL_TIM_Base_Start_IT(&htim2);
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <main+0x1c8>)
 80040cc:	0018      	movs	r0, r3
 80040ce:	f004 ff1d 	bl	8008f0c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80040d2:	e7fe      	b.n	80040d2 <main+0x192>
 80040d4:	0800a3c0 	.word	0x0800a3c0
 80040d8:	20000210 	.word	0x20000210
 80040dc:	20000214 	.word	0x20000214
 80040e0:	0800a2e0 	.word	0x0800a2e0
 80040e4:	0800a3e4 	.word	0x0800a3e4
 80040e8:	0800a400 	.word	0x0800a400
 80040ec:	0800a41c 	.word	0x0800a41c
 80040f0:	0800a430 	.word	0x0800a430
 80040f4:	0800a44c 	.word	0x0800a44c
 80040f8:	0800a46c 	.word	0x0800a46c
 80040fc:	0800a48c 	.word	0x0800a48c
 8004100:	0800a4a0 	.word	0x0800a4a0
 8004104:	0800a4bc 	.word	0x0800a4bc
 8004108:	20000338 	.word	0x20000338

0800410c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b09d      	sub	sp, #116	; 0x74
 8004110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004112:	2438      	movs	r4, #56	; 0x38
 8004114:	193b      	adds	r3, r7, r4
 8004116:	0018      	movs	r0, r3
 8004118:	2338      	movs	r3, #56	; 0x38
 800411a:	001a      	movs	r2, r3
 800411c:	2100      	movs	r1, #0
 800411e:	f005 ffb4 	bl	800a08a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004122:	2324      	movs	r3, #36	; 0x24
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	0018      	movs	r0, r3
 8004128:	2314      	movs	r3, #20
 800412a:	001a      	movs	r2, r3
 800412c:	2100      	movs	r1, #0
 800412e:	f005 ffac 	bl	800a08a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004132:	003b      	movs	r3, r7
 8004134:	0018      	movs	r0, r3
 8004136:	2324      	movs	r3, #36	; 0x24
 8004138:	001a      	movs	r2, r3
 800413a:	2100      	movs	r1, #0
 800413c:	f005 ffa5 	bl	800a08a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004140:	4b2c      	ldr	r3, [pc, #176]	; (80041f4 <SystemClock_Config+0xe8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2c      	ldr	r2, [pc, #176]	; (80041f8 <SystemClock_Config+0xec>)
 8004146:	401a      	ands	r2, r3
 8004148:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <SystemClock_Config+0xe8>)
 800414a:	2180      	movs	r1, #128	; 0x80
 800414c:	0109      	lsls	r1, r1, #4
 800414e:	430a      	orrs	r2, r1
 8004150:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004152:	0021      	movs	r1, r4
 8004154:	187b      	adds	r3, r7, r1
 8004156:	2202      	movs	r2, #2
 8004158:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800415a:	187b      	adds	r3, r7, r1
 800415c:	2201      	movs	r2, #1
 800415e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004160:	187b      	adds	r3, r7, r1
 8004162:	2210      	movs	r2, #16
 8004164:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004166:	187b      	adds	r3, r7, r1
 8004168:	2202      	movs	r2, #2
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800416c:	187b      	adds	r3, r7, r1
 800416e:	2200      	movs	r2, #0
 8004170:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8004172:	187b      	adds	r3, r7, r1
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	02d2      	lsls	r2, r2, #11
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800417a:	187b      	adds	r3, r7, r1
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	03d2      	lsls	r2, r2, #15
 8004180:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004182:	187b      	adds	r3, r7, r1
 8004184:	0018      	movs	r0, r3
 8004186:	f003 f92b 	bl	80073e0 <HAL_RCC_OscConfig>
 800418a:	1e03      	subs	r3, r0, #0
 800418c:	d001      	beq.n	8004192 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800418e:	f000 f859 	bl	8004244 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004192:	2124      	movs	r1, #36	; 0x24
 8004194:	187b      	adds	r3, r7, r1
 8004196:	220f      	movs	r2, #15
 8004198:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800419a:	187b      	adds	r3, r7, r1
 800419c:	2203      	movs	r2, #3
 800419e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	2200      	movs	r2, #0
 80041aa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	2200      	movs	r2, #0
 80041b0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	2101      	movs	r1, #1
 80041b6:	0018      	movs	r0, r3
 80041b8:	f003 fcd6 	bl	8007b68 <HAL_RCC_ClockConfig>
 80041bc:	1e03      	subs	r3, r0, #0
 80041be:	d001      	beq.n	80041c4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80041c0:	f000 f840 	bl	8004244 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80041c4:	003b      	movs	r3, r7
 80041c6:	220b      	movs	r2, #11
 80041c8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80041ca:	003b      	movs	r3, r7
 80041cc:	2200      	movs	r2, #0
 80041ce:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041d0:	003b      	movs	r3, r7
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80041d6:	003b      	movs	r3, r7
 80041d8:	2200      	movs	r2, #0
 80041da:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041dc:	003b      	movs	r3, r7
 80041de:	0018      	movs	r0, r3
 80041e0:	f003 fee6 	bl	8007fb0 <HAL_RCCEx_PeriphCLKConfig>
 80041e4:	1e03      	subs	r3, r0, #0
 80041e6:	d001      	beq.n	80041ec <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80041e8:	f000 f82c 	bl	8004244 <Error_Handler>
  }
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b01d      	add	sp, #116	; 0x74
 80041f2:	bd90      	pop	{r4, r7, pc}
 80041f4:	40007000 	.word	0x40007000
 80041f8:	ffffe7ff 	.word	0xffffe7ff

080041fc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004200:	2200      	movs	r2, #0
 8004202:	2101      	movs	r1, #1
 8004204:	2011      	movs	r0, #17
 8004206:	f002 f80b 	bl	8006220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800420a:	2011      	movs	r0, #17
 800420c:	f002 f81d 	bl	800624a <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004210:	2200      	movs	r2, #0
 8004212:	2100      	movs	r1, #0
 8004214:	200f      	movs	r0, #15
 8004216:	f002 f803 	bl	8006220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800421a:	200f      	movs	r0, #15
 800421c:	f002 f815 	bl	800624a <HAL_NVIC_EnableIRQ>
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
    serial_printf("Buffer is half full!\n");
//    HAL_DMA_IRQHandler(&hdma_adc);
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
    serial_printf("Buffer is completely full!\n");
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <HAL_ADC_ConvCpltCallback+0x18>)
 8004232:	0018      	movs	r0, r3
 8004234:	f000 f8f4 	bl	8004420 <serial_printf>
//    HAL_DMA_IRQHandler(&hdma_adc);
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b002      	add	sp, #8
 800423e:	bd80      	pop	{r7, pc}
 8004240:	0800a4f4 	.word	0x0800a4f4

08004244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004248:	b672      	cpsid	i
}
 800424a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800424c:	e7fe      	b.n	800424c <Error_Handler+0x8>
	...

08004250 <convert>:

// Internal functions to serial_print
char *convert(unsigned int num, int base);
size_t strlen(const char *str);

char *convert(unsigned int num, int base) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  static char Representation[]= "0123456789ABCDEF";
  static char buffer[50];
  char *ptr;

  ptr = &buffer[49];
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <convert+0x50>)
 800425c:	60fb      	str	r3, [r7, #12]
  *ptr = '\0';
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]

  do {
    *--ptr = Representation[num%base];
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	0011      	movs	r1, r2
 800426a:	0018      	movs	r0, r3
 800426c:	f7fb ffd2 	bl	8000214 <__aeabi_uidivmod>
 8004270:	000b      	movs	r3, r1
 8004272:	001a      	movs	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b01      	subs	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <convert+0x54>)
 800427c:	5c9a      	ldrb	r2, [r3, r2]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	701a      	strb	r2, [r3, #0]
    num /= base;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	0019      	movs	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fb ff3e 	bl	8000108 <__udivsi3>
 800428c:	0003      	movs	r3, r0
 800428e:	607b      	str	r3, [r7, #4]
  } while(num != 0);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e6      	bne.n	8004264 <convert+0x14>

  return(ptr);
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b004      	add	sp, #16
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200000f1 	.word	0x200000f1
 80042a4:	20000008 	.word	0x20000008

080042a8 <strlen>:

/*!
    @brief https://stackoverflow.com/questions/22520413/c-strlen-implementation-in-one-line-of-code
*/
size_t strlen (const char *str) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  return (*str) ? strlen(++str) + 1 : 0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d009      	beq.n	80042cc <strlen+0x24>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3301      	adds	r3, #1
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff fff1 	bl	80042a8 <strlen>
 80042c6:	0003      	movs	r3, r0
 80042c8:	3301      	adds	r3, #1
 80042ca:	e000      	b.n	80042ce <strlen+0x26>
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b002      	add	sp, #8
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <serial_select>:
// End of internal functions for serial_print

void serial_select(enum uart_line_t line) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	0002      	movs	r2, r0
 80042e0:	1dfb      	adds	r3, r7, #7
 80042e2:	701a      	strb	r2, [r3, #0]
  switch (line) {
 80042e4:	1dfb      	adds	r3, r7, #7
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <serial_select+0x1a>
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d00d      	beq.n	800430c <serial_select+0x34>
    case DEBUG_PRINT:
      current_line = line;
      serial_line = SERIAL_UART;
      break;
  }
}
 80042f0:	e019      	b.n	8004326 <serial_select+0x4e>
      current_line = line;
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <serial_select+0x58>)
 80042f4:	1dfa      	adds	r2, r7, #7
 80042f6:	7812      	ldrb	r2, [r2, #0]
 80042f8:	701a      	strb	r2, [r3, #0]
      serial_line = WIFI_UART;
 80042fa:	4a0e      	ldr	r2, [pc, #56]	; (8004334 <serial_select+0x5c>)
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <serial_select+0x60>)
 80042fe:	0010      	movs	r0, r2
 8004300:	0019      	movs	r1, r3
 8004302:	2384      	movs	r3, #132	; 0x84
 8004304:	001a      	movs	r2, r3
 8004306:	f005 feb7 	bl	800a078 <memcpy>
      break;
 800430a:	e00c      	b.n	8004326 <serial_select+0x4e>
      current_line = line;
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <serial_select+0x58>)
 800430e:	1dfa      	adds	r2, r7, #7
 8004310:	7812      	ldrb	r2, [r2, #0]
 8004312:	701a      	strb	r2, [r3, #0]
      serial_line = SERIAL_UART;
 8004314:	4a07      	ldr	r2, [pc, #28]	; (8004334 <serial_select+0x5c>)
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <serial_select+0x64>)
 8004318:	0010      	movs	r0, r2
 800431a:	0019      	movs	r1, r3
 800431c:	2384      	movs	r3, #132	; 0x84
 800431e:	001a      	movs	r2, r3
 8004320:	f005 feaa 	bl	800a078 <memcpy>
      break;
 8004324:	46c0      	nop			; (mov r8, r8)
}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b002      	add	sp, #8
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	20000218 	.word	0x20000218
 8004334:	2000021c 	.word	0x2000021c
 8004338:	20000378 	.word	0x20000378
 800433c:	200003fc 	.word	0x200003fc

08004340 <serial_clear>:

void serial_clear() {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
  char clear_sequence[] = {0x1b, 0x5B, 0x32, 0x4A, 0x1b, 0x5B, 0x48};
 8004346:	003b      	movs	r3, r7
 8004348:	4a08      	ldr	r2, [pc, #32]	; (800436c <serial_clear+0x2c>)
 800434a:	6811      	ldr	r1, [r2, #0]
 800434c:	6019      	str	r1, [r3, #0]
 800434e:	8891      	ldrh	r1, [r2, #4]
 8004350:	8099      	strh	r1, [r3, #4]
 8004352:	7992      	ldrb	r2, [r2, #6]
 8004354:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&serial_line, (unsigned char*) clear_sequence, sizeof clear_sequence, HAL_MAX_DELAY);
 8004356:	2301      	movs	r3, #1
 8004358:	425b      	negs	r3, r3
 800435a:	0039      	movs	r1, r7
 800435c:	4804      	ldr	r0, [pc, #16]	; (8004370 <serial_clear+0x30>)
 800435e:	2207      	movs	r2, #7
 8004360:	f005 f994 	bl	800968c <HAL_UART_Transmit>
}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}
 800436c:	0800a510 	.word	0x0800a510
 8004370:	2000021c 	.word	0x2000021c

08004374 <serial_print>:

void serial_print(char string[]) {
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serial_line, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	0018      	movs	r0, r3
 8004380:	f7ff ff92 	bl	80042a8 <strlen>
 8004384:	0003      	movs	r3, r0
 8004386:	b29a      	uxth	r2, r3
 8004388:	2301      	movs	r3, #1
 800438a:	425b      	negs	r3, r3
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4803      	ldr	r0, [pc, #12]	; (800439c <serial_print+0x28>)
 8004390:	f005 f97c 	bl	800968c <HAL_UART_Transmit>
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b002      	add	sp, #8
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2000021c 	.word	0x2000021c

080043a0 <serial_println>:

void serial_println(char *string) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serial_line, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7ff ff7c 	bl	80042a8 <strlen>
 80043b0:	0003      	movs	r3, r0
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	2301      	movs	r3, #1
 80043b6:	425b      	negs	r3, r3
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	480b      	ldr	r0, [pc, #44]	; (80043e8 <serial_println+0x48>)
 80043bc:	f005 f966 	bl	800968c <HAL_UART_Transmit>
  char* newline = ((current_line == WIFI) ? "\r\n" : "\r\f");
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <serial_println+0x4c>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <serial_println+0x2c>
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <serial_println+0x50>)
 80043ca:	e000      	b.n	80043ce <serial_println+0x2e>
 80043cc:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <serial_println+0x54>)
 80043ce:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&serial_line, (unsigned char*) newline, 2, HAL_MAX_DELAY);
 80043d0:	2301      	movs	r3, #1
 80043d2:	425b      	negs	r3, r3
 80043d4:	68f9      	ldr	r1, [r7, #12]
 80043d6:	4804      	ldr	r0, [pc, #16]	; (80043e8 <serial_println+0x48>)
 80043d8:	2202      	movs	r2, #2
 80043da:	f005 f957 	bl	800968c <HAL_UART_Transmit>
}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b004      	add	sp, #16
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	2000021c 	.word	0x2000021c
 80043ec:	20000218 	.word	0x20000218
 80043f0:	0800a518 	.word	0x0800a518
 80043f4:	0800a51c 	.word	0x0800a51c

080043f8 <serial_putc>:

void serial_putc(char c) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	0002      	movs	r2, r0
 8004400:	1dfb      	adds	r3, r7, #7
 8004402:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&serial_line, (unsigned char*) &c, 1, HAL_MAX_DELAY);
 8004404:	2301      	movs	r3, #1
 8004406:	425b      	negs	r3, r3
 8004408:	1df9      	adds	r1, r7, #7
 800440a:	4804      	ldr	r0, [pc, #16]	; (800441c <serial_putc+0x24>)
 800440c:	2201      	movs	r2, #1
 800440e:	f005 f93d 	bl	800968c <HAL_UART_Transmit>
}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	46bd      	mov	sp, r7
 8004416:	b002      	add	sp, #8
 8004418:	bd80      	pop	{r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	2000021c 	.word	0x2000021c

08004420 <serial_printf>:
}

/*!
    @brief a version of printf implmented from http://www.firmcodes.com/write-printf-function-c/
*/
void serial_printf(char format[], ...) {
 8004420:	b40f      	push	{r0, r1, r2, r3}
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
  char c;
  char *s;

  //Module 1: Initializing Myprintf's arguments
  va_list arg;
  va_start(arg, format);
 8004428:	2324      	movs	r3, #36	; 0x24
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	603b      	str	r3, [r7, #0]

  for(traverse = format; *traverse != '\0'; traverse++) {
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	e08c      	b.n	800454e <serial_printf+0x12e>
    while( (*traverse != '%') && (*traverse != '\0')) {
      if (*traverse == '\n') {
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b0a      	cmp	r3, #10
 800443a:	d10a      	bne.n	8004452 <serial_printf+0x32>
        serial_print(((current_line == WIFI) ? "\r\n" : "\r\f"));
 800443c:	4b4a      	ldr	r3, [pc, #296]	; (8004568 <serial_printf+0x148>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <serial_printf+0x28>
 8004444:	4b49      	ldr	r3, [pc, #292]	; (800456c <serial_printf+0x14c>)
 8004446:	e000      	b.n	800444a <serial_printf+0x2a>
 8004448:	4b49      	ldr	r3, [pc, #292]	; (8004570 <serial_printf+0x150>)
 800444a:	0018      	movs	r0, r3
 800444c:	f7ff ff92 	bl	8004374 <serial_print>
 8004450:	e004      	b.n	800445c <serial_printf+0x3c>
      }
      else {
        serial_putc(*traverse);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff ffce 	bl	80043f8 <serial_putc>
      }
      traverse++;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3301      	adds	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
    while( (*traverse != '%') && (*traverse != '\0')) {
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b25      	cmp	r3, #37	; 0x25
 8004468:	d003      	beq.n	8004472 <serial_printf+0x52>
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e0      	bne.n	8004434 <serial_printf+0x14>
    }

    if (*traverse == '\0') break;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d100      	bne.n	800447c <serial_printf+0x5c>
 800447a:	e06d      	b.n	8004558 <serial_printf+0x138>
    traverse++;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	3301      	adds	r3, #1
 8004480:	617b      	str	r3, [r7, #20]

    //Module 2: Fetching and executing arguments
    switch(*traverse) {
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b25      	cmp	r3, #37	; 0x25
 8004488:	d059      	beq.n	800453e <serial_printf+0x11e>
 800448a:	db5d      	blt.n	8004548 <serial_printf+0x128>
 800448c:	2b78      	cmp	r3, #120	; 0x78
 800448e:	dc5b      	bgt.n	8004548 <serial_printf+0x128>
 8004490:	2b63      	cmp	r3, #99	; 0x63
 8004492:	db59      	blt.n	8004548 <serial_printf+0x128>
 8004494:	3b63      	subs	r3, #99	; 0x63
 8004496:	2b15      	cmp	r3, #21
 8004498:	d856      	bhi.n	8004548 <serial_printf+0x128>
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <serial_printf+0x154>)
 800449e:	18d3      	adds	r3, r2, r3
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	469f      	mov	pc, r3
      case 'c' :
        c = va_arg(arg,int);		//Fetch char argument
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	1d1a      	adds	r2, r3, #4
 80044a8:	603a      	str	r2, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	1dfb      	adds	r3, r7, #7
 80044ae:	701a      	strb	r2, [r3, #0]
        serial_putc(c);
 80044b0:	1dfb      	adds	r3, r7, #7
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7ff ff9f 	bl	80043f8 <serial_putc>
        break;
 80044ba:	e045      	b.n	8004548 <serial_printf+0x128>
      case 'd' :
        signed_i = va_arg(arg,int); 		//Fetch Decimal/Integer argument
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	603a      	str	r2, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	613b      	str	r3, [r7, #16]
        if (signed_i < 0) {
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	da06      	bge.n	80044da <serial_printf+0xba>
          signed_i = -signed_i;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	425b      	negs	r3, r3
 80044d0:	613b      	str	r3, [r7, #16]
          serial_print("-");
 80044d2:	4b29      	ldr	r3, [pc, #164]	; (8004578 <serial_printf+0x158>)
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7ff ff4d 	bl	8004374 <serial_print>
        }
        serial_print(convert(signed_i, 10));
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	210a      	movs	r1, #10
 80044de:	0018      	movs	r0, r3
 80044e0:	f7ff feb6 	bl	8004250 <convert>
 80044e4:	0003      	movs	r3, r0
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7ff ff44 	bl	8004374 <serial_print>
        break;
 80044ec:	e02c      	b.n	8004548 <serial_printf+0x128>
      case 'o':
        i = va_arg(arg,unsigned int); //Fetch Octal representation
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	1d1a      	adds	r2, r3, #4
 80044f2:	603a      	str	r2, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]
        serial_print(convert(i, 8));
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2108      	movs	r1, #8
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7ff fea7 	bl	8004250 <convert>
 8004502:	0003      	movs	r3, r0
 8004504:	0018      	movs	r0, r3
 8004506:	f7ff ff35 	bl	8004374 <serial_print>
        break;
 800450a:	e01d      	b.n	8004548 <serial_printf+0x128>
      case 's':
        s = va_arg(arg,char *); 		//Fetch string
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	1d1a      	adds	r2, r3, #4
 8004510:	603a      	str	r2, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60bb      	str	r3, [r7, #8]
        serial_print(s);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0018      	movs	r0, r3
 800451a:	f7ff ff2b 	bl	8004374 <serial_print>
        break;
 800451e:	e013      	b.n	8004548 <serial_printf+0x128>
      case 'x':
        i = va_arg(arg,unsigned int); //Fetch Hexadecimal representation
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	1d1a      	adds	r2, r3, #4
 8004524:	603a      	str	r2, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]
        serial_print(convert(i, 16));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2110      	movs	r1, #16
 800452e:	0018      	movs	r0, r3
 8004530:	f7ff fe8e 	bl	8004250 <convert>
 8004534:	0003      	movs	r3, r0
 8004536:	0018      	movs	r0, r3
 8004538:	f7ff ff1c 	bl	8004374 <serial_print>
        break;
 800453c:	e004      	b.n	8004548 <serial_printf+0x128>

      case '%':
        serial_print("%");
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <serial_printf+0x15c>)
 8004540:	0018      	movs	r0, r3
 8004542:	f7ff ff17 	bl	8004374 <serial_print>
        break;
 8004546:	46c0      	nop			; (mov r8, r8)
  for(traverse = format; *traverse != '\0'; traverse++) {
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3301      	adds	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d185      	bne.n	8004462 <serial_printf+0x42>
    }
  }

  //Module 3: Closing argument list to necessary clean-up
  va_end(arg);
} 
 8004556:	e000      	b.n	800455a <serial_printf+0x13a>
    if (*traverse == '\0') break;
 8004558:	46c0      	nop			; (mov r8, r8)
} 
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b006      	add	sp, #24
 8004560:	bc80      	pop	{r7}
 8004562:	bc08      	pop	{r3}
 8004564:	b004      	add	sp, #16
 8004566:	4718      	bx	r3
 8004568:	20000218 	.word	0x20000218
 800456c:	0800a518 	.word	0x0800a518
 8004570:	0800a51c 	.word	0x0800a51c
 8004574:	0800add0 	.word	0x0800add0
 8004578:	0800a520 	.word	0x0800a520
 800457c:	0800a524 	.word	0x0800a524

08004580 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004584:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <MX_SPI1_Init+0x68>)
 8004586:	4a19      	ldr	r2, [pc, #100]	; (80045ec <MX_SPI1_Init+0x6c>)
 8004588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800458a:	4b17      	ldr	r3, [pc, #92]	; (80045e8 <MX_SPI1_Init+0x68>)
 800458c:	2282      	movs	r2, #130	; 0x82
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <MX_SPI1_Init+0x68>)
 8004594:	2200      	movs	r2, #0
 8004596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <MX_SPI1_Init+0x68>)
 800459a:	2200      	movs	r2, #0
 800459c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <MX_SPI1_Init+0x68>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045a4:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <MX_SPI1_Init+0x68>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <MX_SPI1_Init+0x68>)
 80045ac:	2280      	movs	r2, #128	; 0x80
 80045ae:	0092      	lsls	r2, r2, #2
 80045b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <MX_SPI1_Init+0x68>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <MX_SPI1_Init+0x68>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <MX_SPI1_Init+0x68>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <MX_SPI1_Init+0x68>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <MX_SPI1_Init+0x68>)
 80045cc:	2207      	movs	r2, #7
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <MX_SPI1_Init+0x68>)
 80045d2:	0018      	movs	r0, r3
 80045d4:	f003 fe50 	bl	8008278 <HAL_SPI_Init>
 80045d8:	1e03      	subs	r3, r0, #0
 80045da:	d001      	beq.n	80045e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80045dc:	f7ff fe32 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80045e0:	46c0      	nop			; (mov r8, r8)
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	200002a0 	.word	0x200002a0
 80045ec:	40013000 	.word	0x40013000

080045f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f8:	240c      	movs	r4, #12
 80045fa:	193b      	adds	r3, r7, r4
 80045fc:	0018      	movs	r0, r3
 80045fe:	2314      	movs	r3, #20
 8004600:	001a      	movs	r2, r3
 8004602:	2100      	movs	r1, #0
 8004604:	f005 fd41 	bl	800a08a <memset>
  if(spiHandle->Instance==SPI1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_SPI_MspInit+0x80>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d129      	bne.n	8004666 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004612:	4b18      	ldr	r3, [pc, #96]	; (8004674 <HAL_SPI_MspInit+0x84>)
 8004614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <HAL_SPI_MspInit+0x84>)
 8004618:	2180      	movs	r1, #128	; 0x80
 800461a:	0149      	lsls	r1, r1, #5
 800461c:	430a      	orrs	r2, r1
 800461e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004620:	4b14      	ldr	r3, [pc, #80]	; (8004674 <HAL_SPI_MspInit+0x84>)
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <HAL_SPI_MspInit+0x84>)
 8004626:	2101      	movs	r1, #1
 8004628:	430a      	orrs	r2, r1
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
 800462c:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_SPI_MspInit+0x84>)
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	2201      	movs	r2, #1
 8004632:	4013      	ands	r3, r2
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004638:	0021      	movs	r1, r4
 800463a:	187b      	adds	r3, r7, r1
 800463c:	22e0      	movs	r2, #224	; 0xe0
 800463e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004640:	187b      	adds	r3, r7, r1
 8004642:	2202      	movs	r2, #2
 8004644:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004646:	187b      	adds	r3, r7, r1
 8004648:	2200      	movs	r2, #0
 800464a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800464c:	187b      	adds	r3, r7, r1
 800464e:	2201      	movs	r2, #1
 8004650:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004652:	187b      	adds	r3, r7, r1
 8004654:	2200      	movs	r2, #0
 8004656:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004658:	187a      	adds	r2, r7, r1
 800465a:	23a0      	movs	r3, #160	; 0xa0
 800465c:	05db      	lsls	r3, r3, #23
 800465e:	0011      	movs	r1, r2
 8004660:	0018      	movs	r0, r3
 8004662:	f001 ff35 	bl	80064d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	b009      	add	sp, #36	; 0x24
 800466c:	bd90      	pop	{r4, r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	40013000 	.word	0x40013000
 8004674:	40021000 	.word	0x40021000

08004678 <sram_csHigh>:

#define SRAM_SPI hspi1


// Function Code
void sram_csHigh() {
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_SET);
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	0099      	lsls	r1, r3, #2
 8004680:	23a0      	movs	r3, #160	; 0xa0
 8004682:	05db      	lsls	r3, r3, #23
 8004684:	2201      	movs	r2, #1
 8004686:	0018      	movs	r0, r3
 8004688:	f002 f898 	bl	80067bc <HAL_GPIO_WritePin>
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <sram_csLow>:

void sram_csLow() {
 8004692:	b580      	push	{r7, lr}
 8004694:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_RESET);
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	0099      	lsls	r1, r3, #2
 800469a:	23a0      	movs	r3, #160	; 0xa0
 800469c:	05db      	lsls	r3, r3, #23
 800469e:	2200      	movs	r2, #0
 80046a0:	0018      	movs	r0, r3
 80046a2:	f002 f88b 	bl	80067bc <HAL_GPIO_WritePin>
}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <sram_write>:
    @param addr the addres to write to
    @param buf the data buffer to write
    @param num the nubmer of bytes to write (from the buffer)
    @param reg pass MCPSRAM_WRSR if you're writing the status register, MCPSRAM_WRITE if you are writing data. Use MCPSRAM_WRITE in Adafruit functions that don't specify reg (default value).
*/
void sram_write(uint16_t addr, uint8_t* buf, uint16_t num, uint8_t reg) {
 80046ac:	b5b0      	push	{r4, r5, r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	0004      	movs	r4, r0
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	0010      	movs	r0, r2
 80046b8:	0019      	movs	r1, r3
 80046ba:	250e      	movs	r5, #14
 80046bc:	197b      	adds	r3, r7, r5
 80046be:	1c22      	adds	r2, r4, #0
 80046c0:	801a      	strh	r2, [r3, #0]
 80046c2:	230c      	movs	r3, #12
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	1c02      	adds	r2, r0, #0
 80046c8:	801a      	strh	r2, [r3, #0]
 80046ca:	1dfb      	adds	r3, r7, #7
 80046cc:	1c0a      	adds	r2, r1, #0
 80046ce:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 80046d0:	f7ff ffdf 	bl	8004692 <sram_csLow>

    // write command and address
    uint8_t cmdbuf[3] = {
 80046d4:	2118      	movs	r1, #24
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	1dfa      	adds	r2, r7, #7
 80046da:	7812      	ldrb	r2, [r2, #0]
 80046dc:	701a      	strb	r2, [r3, #0]
        reg,
        (uint8_t) (addr >> 8),
 80046de:	197b      	adds	r3, r7, r5
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 80046ec:	197b      	adds	r3, r7, r5
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 80046f2:	187b      	adds	r3, r7, r1
 80046f4:	709a      	strb	r2, [r3, #2]
    };
    
    for (int i = 0; i < 3; i++) {
 80046f6:	2300      	movs	r3, #0
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
 80046fa:	e019      	b.n	8004730 <sram_write+0x84>
        uint8_t d = cmdbuf[i];
 80046fc:	2318      	movs	r3, #24
 80046fe:	18fa      	adds	r2, r7, r3
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	18d3      	adds	r3, r2, r3
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	2117      	movs	r1, #23
 8004708:	187b      	adds	r3, r7, r1
 800470a:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 800470c:	231f      	movs	r3, #31
 800470e:	18fc      	adds	r4, r7, r3
 8004710:	2301      	movs	r3, #1
 8004712:	425b      	negs	r3, r3
 8004714:	1879      	adds	r1, r7, r1
 8004716:	481c      	ldr	r0, [pc, #112]	; (8004788 <sram_write+0xdc>)
 8004718:	2201      	movs	r2, #1
 800471a:	f003 fe41 	bl	80083a0 <HAL_SPI_Transmit>
 800471e:	0003      	movs	r3, r0
 8004720:	7023      	strb	r3, [r4, #0]
//        if (status != HAL_OK) {
//            char error[] = "SRAM_WRITE: FAILED TO SEND CMD/ADDR\r\f";
//            serial_println(error);
//        }
        if (reg != MCPSRAM_WRITE) {
 8004722:	1dfb      	adds	r3, r7, #7
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d106      	bne.n	8004738 <sram_write+0x8c>
    for (int i = 0; i < 3; i++) {
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	3301      	adds	r3, #1
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	2b02      	cmp	r3, #2
 8004734:	dde2      	ble.n	80046fc <sram_write+0x50>
 8004736:	e000      	b.n	800473a <sram_write+0x8e>
            break;
 8004738:	46c0      	nop			; (mov r8, r8)
        }
    }

    for (int i = 0; i < num; i++) {
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	e014      	b.n	800476a <sram_write+0xbe>
        uint8_t d = buf[i];
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	18d3      	adds	r3, r2, r3
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	2116      	movs	r1, #22
 800474a:	187b      	adds	r3, r7, r1
 800474c:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 800474e:	231e      	movs	r3, #30
 8004750:	18fc      	adds	r4, r7, r3
 8004752:	2301      	movs	r3, #1
 8004754:	425b      	negs	r3, r3
 8004756:	1879      	adds	r1, r7, r1
 8004758:	480b      	ldr	r0, [pc, #44]	; (8004788 <sram_write+0xdc>)
 800475a:	2201      	movs	r2, #1
 800475c:	f003 fe20 	bl	80083a0 <HAL_SPI_Transmit>
 8004760:	0003      	movs	r3, r0
 8004762:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num; i++) {
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	3301      	adds	r3, #1
 8004768:	623b      	str	r3, [r7, #32]
 800476a:	230c      	movs	r3, #12
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	6a3a      	ldr	r2, [r7, #32]
 8004772:	429a      	cmp	r2, r3
 8004774:	dbe4      	blt.n	8004740 <sram_write+0x94>
//            char error[] = "SRAM_WRITE: FAILED TO SEND\r\f";
//            serial_println(error);
//        }
    }

    sram_csHigh();
 8004776:	f7ff ff7f 	bl	8004678 <sram_csHigh>
    HAL_Delay(100);
 800477a:	2064      	movs	r0, #100	; 0x64
 800477c:	f000 febe 	bl	80054fc <HAL_Delay>
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b00a      	add	sp, #40	; 0x28
 8004786:	bdb0      	pop	{r4, r5, r7, pc}
 8004788:	200002a0 	.word	0x200002a0

0800478c <sram_read>:
    @param addr the address to read from
    @param buf the data buffer to read into
    @param num the number of bytes to read
    @param reg pass MCPSRAM_RDSR if you're reading the status register, MCPSRAM_READ if you are reading data. Use MCPSRAM_READ in Adafruit functions that don't specify reg (default value).
*/
void sram_read(uint16_t addr, uint8_t *buf, uint16_t num, uint8_t reg) {
 800478c:	b5b0      	push	{r4, r5, r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	0004      	movs	r4, r0
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	0010      	movs	r0, r2
 8004798:	0019      	movs	r1, r3
 800479a:	250e      	movs	r5, #14
 800479c:	197b      	adds	r3, r7, r5
 800479e:	1c22      	adds	r2, r4, #0
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	230c      	movs	r3, #12
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	1c02      	adds	r2, r0, #0
 80047a8:	801a      	strh	r2, [r3, #0]
 80047aa:	1dfb      	adds	r3, r7, #7
 80047ac:	1c0a      	adds	r2, r1, #0
 80047ae:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 80047b0:	f7ff ff6f 	bl	8004692 <sram_csLow>

    // read command and address
    uint8_t cmdbuf[3] = {
 80047b4:	2118      	movs	r1, #24
 80047b6:	187b      	adds	r3, r7, r1
 80047b8:	1dfa      	adds	r2, r7, #7
 80047ba:	7812      	ldrb	r2, [r2, #0]
 80047bc:	701a      	strb	r2, [r3, #0]
        reg,
        (uint8_t) (addr >> 8),
 80047be:	197b      	adds	r3, r7, r5
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	0a1b      	lsrs	r3, r3, #8
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 80047c8:	187b      	adds	r3, r7, r1
 80047ca:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 80047cc:	197b      	adds	r3, r7, r5
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 80047d2:	187b      	adds	r3, r7, r1
 80047d4:	709a      	strb	r2, [r3, #2]
    };

    for (int i = 0; i < 3; i++) {
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
 80047da:	e019      	b.n	8004810 <sram_read+0x84>
        uint8_t d = cmdbuf[i];
 80047dc:	2318      	movs	r3, #24
 80047de:	18fa      	adds	r2, r7, r3
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	18d3      	adds	r3, r2, r3
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	2117      	movs	r1, #23
 80047e8:	187b      	adds	r3, r7, r1
 80047ea:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 80047ec:	231f      	movs	r3, #31
 80047ee:	18fc      	adds	r4, r7, r3
 80047f0:	2301      	movs	r3, #1
 80047f2:	425b      	negs	r3, r3
 80047f4:	1879      	adds	r1, r7, r1
 80047f6:	4818      	ldr	r0, [pc, #96]	; (8004858 <sram_read+0xcc>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	f003 fdd1 	bl	80083a0 <HAL_SPI_Transmit>
 80047fe:	0003      	movs	r3, r0
 8004800:	7023      	strb	r3, [r4, #0]
//        if (status != HAL_OK) {
//            char error[] = "SRAM_READ: FAILED TO SEND";
//            serial_println(error);
//        }
        if (reg != MCPSRAM_READ) {
 8004802:	1dfb      	adds	r3, r7, #7
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d106      	bne.n	8004818 <sram_read+0x8c>
    for (int i = 0; i < 3; i++) {
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	3301      	adds	r3, #1
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	2b02      	cmp	r3, #2
 8004814:	dde2      	ble.n	80047dc <sram_read+0x50>
 8004816:	e000      	b.n	800481a <sram_read+0x8e>
            break;
 8004818:	46c0      	nop			; (mov r8, r8)
        }
    }

    for (int i = 0; i < num; i++) {
 800481a:	2300      	movs	r3, #0
 800481c:	623b      	str	r3, [r7, #32]
 800481e:	e00f      	b.n	8004840 <sram_read+0xb4>
        HAL_StatusTypeDef status = HAL_SPI_Receive(&SRAM_SPI, buf++, 1, HAL_MAX_DELAY);
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	1c4b      	adds	r3, r1, #1
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	231e      	movs	r3, #30
 8004828:	18fc      	adds	r4, r7, r3
 800482a:	2301      	movs	r3, #1
 800482c:	425b      	negs	r3, r3
 800482e:	480a      	ldr	r0, [pc, #40]	; (8004858 <sram_read+0xcc>)
 8004830:	2201      	movs	r2, #1
 8004832:	f003 ff0b 	bl	800864c <HAL_SPI_Receive>
 8004836:	0003      	movs	r3, r0
 8004838:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num; i++) {
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	3301      	adds	r3, #1
 800483e:	623b      	str	r3, [r7, #32]
 8004840:	230c      	movs	r3, #12
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	6a3a      	ldr	r2, [r7, #32]
 8004848:	429a      	cmp	r2, r3
 800484a:	dbe9      	blt.n	8004820 <sram_read+0x94>
//                    serial_println(msg);
//                    break;
//            }
//        }
    }
    sram_csHigh();
 800484c:	f7ff ff14 	bl	8004678 <sram_csHigh>
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b00a      	add	sp, #40	; 0x28
 8004856:	bdb0      	pop	{r4, r5, r7, pc}
 8004858:	200002a0 	.word	0x200002a0

0800485c <sram_read8>:
/*! @brief read 1 byte of data at the specified address
    @param addr the address to read data at
    @param reg pass MCPSRAM_RDSR if you're reading the status register, MCPSRAM_READ if you are reading data. Use MCPSRAM_READ in Adafruit functions that don't specify reg (default value).
    @returns the read data byte
*/
uint8_t sram_read8(uint16_t addr, uint8_t reg) {
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	0002      	movs	r2, r0
 8004864:	1dbb      	adds	r3, r7, #6
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	1d7b      	adds	r3, r7, #5
 800486a:	1c0a      	adds	r2, r1, #0
 800486c:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    sram_read(addr, &c, 1, reg);
 800486e:	1d7b      	adds	r3, r7, #5
 8004870:	781a      	ldrb	r2, [r3, #0]
 8004872:	240f      	movs	r4, #15
 8004874:	1939      	adds	r1, r7, r4
 8004876:	1dbb      	adds	r3, r7, #6
 8004878:	8818      	ldrh	r0, [r3, #0]
 800487a:	0013      	movs	r3, r2
 800487c:	2201      	movs	r2, #1
 800487e:	f7ff ff85 	bl	800478c <sram_read>
    return c;
 8004882:	193b      	adds	r3, r7, r4
 8004884:	781b      	ldrb	r3, [r3, #0]
}
 8004886:	0018      	movs	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	b005      	add	sp, #20
 800488c:	bd90      	pop	{r4, r7, pc}

0800488e <sram_write8>:
/*!
    @param addr the address to write to
    @param val the value to write
    @param reg MCPSRAM_WRITE if writing data, MCPSRAM_WRSR if writing a status register. Use MCPSRAM_WRITE in Adafruit functions that don't specify reg (default value).
*/
void sram_write8(uint16_t addr, uint8_t val, uint8_t reg) {
 800488e:	b590      	push	{r4, r7, lr}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	0004      	movs	r4, r0
 8004896:	0008      	movs	r0, r1
 8004898:	0011      	movs	r1, r2
 800489a:	1dbb      	adds	r3, r7, #6
 800489c:	1c22      	adds	r2, r4, #0
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	1d7b      	adds	r3, r7, #5
 80048a2:	1c02      	adds	r2, r0, #0
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	1c0a      	adds	r2, r1, #0
 80048aa:	701a      	strb	r2, [r3, #0]
    sram_write(addr, &val, 1, reg);
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	781a      	ldrb	r2, [r3, #0]
 80048b0:	1d79      	adds	r1, r7, #5
 80048b2:	1dbb      	adds	r3, r7, #6
 80048b4:	8818      	ldrh	r0, [r3, #0]
 80048b6:	0013      	movs	r3, r2
 80048b8:	2201      	movs	r2, #1
 80048ba:	f7ff fef7 	bl	80046ac <sram_write>
}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b003      	add	sp, #12
 80048c4:	bd90      	pop	{r4, r7, pc}
	...

080048c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <HAL_MspInit+0x24>)
 80048ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_MspInit+0x24>)
 80048d2:	2101      	movs	r1, #1
 80048d4:	430a      	orrs	r2, r1
 80048d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80048d8:	4b04      	ldr	r3, [pc, #16]	; (80048ec <HAL_MspInit+0x24>)
 80048da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <HAL_MspInit+0x24>)
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	0549      	lsls	r1, r1, #21
 80048e2:	430a      	orrs	r2, r1
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000

080048f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
    serial_println("NMI_Handler: something's not being handled right!");
 80048f4:	4b02      	ldr	r3, [pc, #8]	; (8004900 <NMI_Handler+0x10>)
 80048f6:	0018      	movs	r0, r3
 80048f8:	f7ff fd52 	bl	80043a0 <serial_println>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048fc:	e7fe      	b.n	80048fc <NMI_Handler+0xc>
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	0800a528 	.word	0x0800a528

08004904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    serial_println("HardFault_Handler: hard fault occurred!!!");
 8004908:	4b02      	ldr	r3, [pc, #8]	; (8004914 <HardFault_Handler+0x10>)
 800490a:	0018      	movs	r0, r3
 800490c:	f7ff fd48 	bl	80043a0 <serial_println>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004910:	e7fe      	b.n	8004910 <HardFault_Handler+0xc>
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	0800a55c 	.word	0x0800a55c

08004918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800491c:	46c0      	nop			; (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004930:	f000 fdc8 	bl	80054c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800493c:	b5b0      	push	{r4, r5, r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004942:	2004      	movs	r0, #4
 8004944:	f001 ff58 	bl	80067f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */
  serial_printf("==EXTI2 - PROX INT==\n");
 8004948:	4b60      	ldr	r3, [pc, #384]	; (8004acc <EXTI2_3_IRQHandler+0x190>)
 800494a:	0018      	movs	r0, r3
 800494c:	f7ff fd68 	bl	8004420 <serial_printf>
  VCNL4010_ack_ISR();
 8004950:	f000 fc4c 	bl	80051ec <VCNL4010_ack_ISR>
  state = 1;
 8004954:	4b5e      	ldr	r3, [pc, #376]	; (8004ad0 <EXTI2_3_IRQHandler+0x194>)
 8004956:	2201      	movs	r2, #1
 8004958:	601a      	str	r2, [r3, #0]

  serial_printf("Getting readings... ");
 800495a:	4b5e      	ldr	r3, [pc, #376]	; (8004ad4 <EXTI2_3_IRQHandler+0x198>)
 800495c:	0018      	movs	r0, r3
 800495e:	f7ff fd5f 	bl	8004420 <serial_printf>
  set_cursor(2,2);
 8004962:	2102      	movs	r1, #2
 8004964:	2002      	movs	r0, #2
 8004966:	f7fe f887 	bl	8002a78 <set_cursor>
  printString("EXTI2_3_IRQHandler: PROX INT TRIG'D\n");
 800496a:	4b5b      	ldr	r3, [pc, #364]	; (8004ad8 <EXTI2_3_IRQHandler+0x19c>)
 800496c:	0018      	movs	r0, r3
 800496e:	f7fe fc47 	bl	8003200 <printString>
  uint16_t proximity = VCNL4010_readProximity();
 8004972:	251e      	movs	r5, #30
 8004974:	197c      	adds	r4, r7, r5
 8004976:	f000 fc69 	bl	800524c <VCNL4010_readProximity>
 800497a:	0003      	movs	r3, r0
 800497c:	8023      	strh	r3, [r4, #0]
  printString("PROX (RAW): "); printUnsigned(proximity, 10); printString("\n");
 800497e:	4b57      	ldr	r3, [pc, #348]	; (8004adc <EXTI2_3_IRQHandler+0x1a0>)
 8004980:	0018      	movs	r0, r3
 8004982:	f7fe fc3d 	bl	8003200 <printString>
 8004986:	197b      	adds	r3, r7, r5
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	210a      	movs	r1, #10
 800498c:	0018      	movs	r0, r3
 800498e:	f7fe fc43 	bl	8003218 <printUnsigned>
 8004992:	4b53      	ldr	r3, [pc, #332]	; (8004ae0 <EXTI2_3_IRQHandler+0x1a4>)
 8004994:	0018      	movs	r0, r3
 8004996:	f7fe fc33 	bl	8003200 <printString>

  int temp = hts221_get_temp('C', hts_cal_data);
 800499a:	4b52      	ldr	r3, [pc, #328]	; (8004ae4 <EXTI2_3_IRQHandler+0x1a8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	0019      	movs	r1, r3
 80049a0:	2043      	movs	r0, #67	; 0x43
 80049a2:	f7fe ffdd 	bl	8003960 <hts221_get_temp>
 80049a6:	0003      	movs	r3, r0
 80049a8:	61bb      	str	r3, [r7, #24]
  if (temp == TEMP_ERROR) {
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <EXTI2_3_IRQHandler+0x1ac>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d104      	bne.n	80049bc <EXTI2_3_IRQHandler+0x80>
      printString("ERR READING TEMP\n");
 80049b2:	4b4e      	ldr	r3, [pc, #312]	; (8004aec <EXTI2_3_IRQHandler+0x1b0>)
 80049b4:	0018      	movs	r0, r3
 80049b6:	f7fe fc23 	bl	8003200 <printString>
 80049ba:	e00c      	b.n	80049d6 <EXTI2_3_IRQHandler+0x9a>
  }
  else {
      printString("TEMP: ");
 80049bc:	4b4c      	ldr	r3, [pc, #304]	; (8004af0 <EXTI2_3_IRQHandler+0x1b4>)
 80049be:	0018      	movs	r0, r3
 80049c0:	f7fe fc1e 	bl	8003200 <printString>
      printUnsigned(temp, 10);
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	210a      	movs	r1, #10
 80049c8:	0018      	movs	r0, r3
 80049ca:	f7fe fc25 	bl	8003218 <printUnsigned>
      printString(" deg C\n");
 80049ce:	4b49      	ldr	r3, [pc, #292]	; (8004af4 <EXTI2_3_IRQHandler+0x1b8>)
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7fe fc15 	bl	8003200 <printString>
  }

  int humid = hts221_get_humid(hts_cal_data);
 80049d6:	4b43      	ldr	r3, [pc, #268]	; (8004ae4 <EXTI2_3_IRQHandler+0x1a8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	0018      	movs	r0, r3
 80049dc:	f7ff f898 	bl	8003b10 <hts221_get_humid>
 80049e0:	0003      	movs	r3, r0
 80049e2:	617b      	str	r3, [r7, #20]
  if (humid == HUMID_ERROR) {
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	3301      	adds	r3, #1
 80049e8:	d104      	bne.n	80049f4 <EXTI2_3_IRQHandler+0xb8>
      printString("ERR READING RH\n");
 80049ea:	4b43      	ldr	r3, [pc, #268]	; (8004af8 <EXTI2_3_IRQHandler+0x1bc>)
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7fe fc07 	bl	8003200 <printString>
 80049f2:	e00c      	b.n	8004a0e <EXTI2_3_IRQHandler+0xd2>
  }
  else {
      printString("RH: ");
 80049f4:	4b41      	ldr	r3, [pc, #260]	; (8004afc <EXTI2_3_IRQHandler+0x1c0>)
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7fe fc02 	bl	8003200 <printString>
      printUnsigned(humid, 10);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	210a      	movs	r1, #10
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7fe fc09 	bl	8003218 <printUnsigned>
      printString(" \n");
 8004a06:	4b3e      	ldr	r3, [pc, #248]	; (8004b00 <EXTI2_3_IRQHandler+0x1c4>)
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f7fe fbf9 	bl	8003200 <printString>
  }

    uint16_t voltage = BQ27441_voltage();
 8004a0e:	2312      	movs	r3, #18
 8004a10:	18fc      	adds	r4, r7, r3
 8004a12:	f7fd fc55 	bl	80022c0 <BQ27441_voltage>
 8004a16:	0003      	movs	r3, r0
 8004a18:	8023      	strh	r3, [r4, #0]
    uint16_t soc = BQ27441_soc(FILTERED);
 8004a1a:	2310      	movs	r3, #16
 8004a1c:	18fc      	adds	r4, r7, r3
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f7fd fcf6 	bl	8002410 <BQ27441_soc>
 8004a24:	0003      	movs	r3, r0
 8004a26:	8023      	strh	r3, [r4, #0]
    uint16_t current = BQ27441_current(AVG);
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f7fd fc52 	bl	80022d2 <BQ27441_current>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	001a      	movs	r2, r3
 8004a32:	230e      	movs	r3, #14
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	801a      	strh	r2, [r3, #0]
    uint16_t cap_remaining = BQ27441_capacity(REMAIN);
 8004a38:	230c      	movs	r3, #12
 8004a3a:	18fc      	adds	r4, r7, r3
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f7fd fc7f 	bl	8002340 <BQ27441_capacity>
 8004a42:	0003      	movs	r3, r0
 8004a44:	8023      	strh	r3, [r4, #0]
    uint16_t cap_max = BQ27441_capacity(DESIGN);
 8004a46:	230a      	movs	r3, #10
 8004a48:	18fc      	adds	r4, r7, r3
 8004a4a:	2008      	movs	r0, #8
 8004a4c:	f7fd fc78 	bl	8002340 <BQ27441_capacity>
 8004a50:	0003      	movs	r3, r0
 8004a52:	8023      	strh	r3, [r4, #0]
    int16_t power = BQ27441_power(); //average draw
 8004a54:	2308      	movs	r3, #8
 8004a56:	18fc      	adds	r4, r7, r3
 8004a58:	f7fd fcd0 	bl	80023fc <BQ27441_power>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	8023      	strh	r3, [r4, #0]
    uint16_t soh = BQ27441_soh(PERCENT);
 8004a60:	2000      	movs	r0, #0
 8004a62:	f7fd fcfd 	bl	8002460 <BQ27441_soh>
 8004a66:	0003      	movs	r3, r0
 8004a68:	001a      	movs	r2, r3
 8004a6a:	1dbb      	adds	r3, r7, #6
 8004a6c:	801a      	strh	r2, [r3, #0]
    uint16_t temp_bat = BQ27441_temperature(BATTERY) / 10;
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f7fd fd1e 	bl	80024b0 <BQ27441_temperature>
 8004a74:	0003      	movs	r3, r0
 8004a76:	1d3c      	adds	r4, r7, #4
 8004a78:	210a      	movs	r1, #10
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7fb fb44 	bl	8000108 <__udivsi3>
 8004a80:	0003      	movs	r3, r0
 8004a82:	8023      	strh	r3, [r4, #0]
    uint16_t temp_bq_IC = BQ27441_temperature(INTERNAL_TEMP) / 10;
 8004a84:	2001      	movs	r0, #1
 8004a86:	f7fd fd13 	bl	80024b0 <BQ27441_temperature>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	1cbc      	adds	r4, r7, #2
 8004a8e:	210a      	movs	r1, #10
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7fb fb39 	bl	8000108 <__udivsi3>
 8004a96:	0003      	movs	r3, r0
 8004a98:	8023      	strh	r3, [r4, #0]
    serial_printf("Done!\n");
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <EXTI2_3_IRQHandler+0x1c8>)
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7ff fcbf 	bl	8004420 <serial_printf>

    serial_printf("Printing readings... ");
 8004aa2:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <EXTI2_3_IRQHandler+0x1cc>)
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7ff fcbb 	bl	8004420 <serial_printf>
//    printString("REM CAP: "); printUnsigned(cap_remaining, 10); printString(" mAh\n");
//    printString("AVG PWR: "); printFloat(power, 0); printString(" mW\n");
//    printString("HEALTH: "); printUnsigned(soh, 10); printString("\n");
//    printString("BATT TEMP: "); printUnsigned(temp_bat, 10); printString(" K \n");
//    printString("IC TEMP: "); printUnsigned(temp_bq_IC, 10); printString(" K \n");
    serial_printf("Done!\n");
 8004aaa:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <EXTI2_3_IRQHandler+0x1c8>)
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7ff fcb7 	bl	8004420 <serial_printf>

    serial_printf("Updating display... ");
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <EXTI2_3_IRQHandler+0x1d0>)
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7ff fcb3 	bl	8004420 <serial_printf>
//    display(false);
    serial_printf("Done!\n\n");
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <EXTI2_3_IRQHandler+0x1d4>)
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7ff fcaf 	bl	8004420 <serial_printf>

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b008      	add	sp, #32
 8004ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	0800a588 	.word	0x0800a588
 8004ad0:	200000b4 	.word	0x200000b4
 8004ad4:	0800a5a0 	.word	0x0800a5a0
 8004ad8:	0800a5b8 	.word	0x0800a5b8
 8004adc:	0800a5e0 	.word	0x0800a5e0
 8004ae0:	0800a5f0 	.word	0x0800a5f0
 8004ae4:	20000210 	.word	0x20000210
 8004ae8:	fffffe34 	.word	0xfffffe34
 8004aec:	0800a5f4 	.word	0x0800a5f4
 8004af0:	0800a608 	.word	0x0800a608
 8004af4:	0800a610 	.word	0x0800a610
 8004af8:	0800a618 	.word	0x0800a618
 8004afc:	0800a628 	.word	0x0800a628
 8004b00:	0800a630 	.word	0x0800a630
 8004b04:	0800a634 	.word	0x0800a634
 8004b08:	0800a63c 	.word	0x0800a63c
 8004b0c:	0800a654 	.word	0x0800a654
 8004b10:	0800a66c 	.word	0x0800a66c

08004b14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <DMA1_Channel1_IRQHandler+0x14>)
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f001 fc2a 	bl	8006374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	20000104 	.word	0x20000104

08004b2c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <ADC1_COMP_IRQHandler+0x14>)
 8004b32:	0018      	movs	r0, r3
 8004b34:	f000 ffb0 	bl	8005a98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	2000014c 	.word	0x2000014c

08004b44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

    GPIOA->BSRR |= GPIO_BSRR_BS_8;
 8004b4a:	23a0      	movs	r3, #160	; 0xa0
 8004b4c:	05db      	lsls	r3, r3, #23
 8004b4e:	699a      	ldr	r2, [r3, #24]
 8004b50:	23a0      	movs	r3, #160	; 0xa0
 8004b52:	05db      	lsls	r3, r3, #23
 8004b54:	2180      	movs	r1, #128	; 0x80
 8004b56:	0049      	lsls	r1, r1, #1
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	619a      	str	r2, [r3, #24]
//        button_history[0] = (button_history[0] << 1) | 1;
//    } else {
//        button_history[0] = (button_history[0] >> 1);
//    }

    if (GPIOA->IDR & GPIO_IDR_ID11_Msk) {
 8004b5c:	23a0      	movs	r3, #160	; 0xa0
 8004b5e:	05db      	lsls	r3, r3, #23
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	4013      	ands	r3, r2
 8004b68:	d00a      	beq.n	8004b80 <TIM2_IRQHandler+0x3c>
        button_history[1] = (button_history[1] << 1) | 1;
 8004b6a:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004b6c:	785b      	ldrb	r3, [r3, #1]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	b25b      	sxtb	r3, r3
 8004b72:	2201      	movs	r2, #1
 8004b74:	4313      	orrs	r3, r2
 8004b76:	b25b      	sxtb	r3, r3
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4b3a      	ldr	r3, [pc, #232]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004b7c:	705a      	strb	r2, [r3, #1]
 8004b7e:	e005      	b.n	8004b8c <TIM2_IRQHandler+0x48>
    } else {
        button_history[1] = (button_history[1] >> 1);
 8004b80:	4b38      	ldr	r3, [pc, #224]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	4b36      	ldr	r3, [pc, #216]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004b8a:	705a      	strb	r2, [r3, #1]
    }

    if (GPIOA->IDR & GPIO_IDR_ID12_Msk) {
 8004b8c:	23a0      	movs	r3, #160	; 0xa0
 8004b8e:	05db      	lsls	r3, r3, #23
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	015b      	lsls	r3, r3, #5
 8004b96:	4013      	ands	r3, r2
 8004b98:	d00a      	beq.n	8004bb0 <TIM2_IRQHandler+0x6c>
        button_history[2] = (button_history[2] << 1) | 1;
 8004b9a:	4b32      	ldr	r3, [pc, #200]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004b9c:	789b      	ldrb	r3, [r3, #2]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	b25b      	sxtb	r3, r3
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	b25b      	sxtb	r3, r3
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4b2e      	ldr	r3, [pc, #184]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004bac:	709a      	strb	r2, [r3, #2]
 8004bae:	e005      	b.n	8004bbc <TIM2_IRQHandler+0x78>
    } else {
        button_history[2] = (button_history[2] >> 1);
 8004bb0:	4b2c      	ldr	r3, [pc, #176]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004bb2:	789b      	ldrb	r3, [r3, #2]
 8004bb4:	085b      	lsrs	r3, r3, #1
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004bba:	709a      	strb	r2, [r3, #2]
    }

    if (GPIOA->IDR & GPIO_IDR_ID13_Msk) {
 8004bbc:	23a0      	movs	r3, #160	; 0xa0
 8004bbe:	05db      	lsls	r3, r3, #23
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	019b      	lsls	r3, r3, #6
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d00a      	beq.n	8004be0 <TIM2_IRQHandler+0x9c>
        button_history[3] = (button_history[3] << 1) | 1;
 8004bca:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004bcc:	78db      	ldrb	r3, [r3, #3]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	b25b      	sxtb	r3, r3
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	b25b      	sxtb	r3, r3
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004bdc:	70da      	strb	r2, [r3, #3]
 8004bde:	e005      	b.n	8004bec <TIM2_IRQHandler+0xa8>
    } else {
        button_history[3] = (button_history[3] >> 1);
 8004be0:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004be2:	78db      	ldrb	r3, [r3, #3]
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b1e      	ldr	r3, [pc, #120]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004bea:	70da      	strb	r2, [r3, #3]
    }

    GPIOA->BSRR |= GPIO_BSRR_BR_8;
 8004bec:	23a0      	movs	r3, #160	; 0xa0
 8004bee:	05db      	lsls	r3, r3, #23
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	23a0      	movs	r3, #160	; 0xa0
 8004bf4:	05db      	lsls	r3, r3, #23
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	0449      	lsls	r1, r1, #17
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	619a      	str	r2, [r3, #24]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <TIM2_IRQHandler+0x124>)
 8004c00:	0018      	movs	r0, r3
 8004c02:	f004 f9cf 	bl	8008fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

    uint8_t pressed_mask = 0xFF;
 8004c06:	1dfb      	adds	r3, r7, #7
 8004c08:	22ff      	movs	r2, #255	; 0xff
 8004c0a:	701a      	strb	r2, [r3, #0]

    if (button_history[0] == pressed_mask) {
 8004c0c:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	1dfa      	adds	r2, r7, #7
 8004c12:	7812      	ldrb	r2, [r2, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d103      	bne.n	8004c20 <TIM2_IRQHandler+0xdc>
        serial_println("apple");
 8004c18:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <TIM2_IRQHandler+0x128>)
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f7ff fbc0 	bl	80043a0 <serial_println>
    }

    if (button_history[1] == pressed_mask) {
 8004c20:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	1dfa      	adds	r2, r7, #7
 8004c26:	7812      	ldrb	r2, [r2, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d103      	bne.n	8004c34 <TIM2_IRQHandler+0xf0>
        serial_println("banana");
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <TIM2_IRQHandler+0x12c>)
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f7ff fbb6 	bl	80043a0 <serial_println>
    }

    if (button_history[2] == pressed_mask) {
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004c36:	789b      	ldrb	r3, [r3, #2]
 8004c38:	1dfa      	adds	r2, r7, #7
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d103      	bne.n	8004c48 <TIM2_IRQHandler+0x104>
        serial_println("lemon");
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <TIM2_IRQHandler+0x130>)
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7ff fbac 	bl	80043a0 <serial_println>
    }

    if (button_history[3] == pressed_mask) {
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <TIM2_IRQHandler+0x120>)
 8004c4a:	78db      	ldrb	r3, [r3, #3]
 8004c4c:	1dfa      	adds	r2, r7, #7
 8004c4e:	7812      	ldrb	r2, [r2, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d103      	bne.n	8004c5c <TIM2_IRQHandler+0x118>
        serial_println("mango");
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <TIM2_IRQHandler+0x134>)
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7ff fba2 	bl	80043a0 <serial_println>
    }
  /* USER CODE END TIM2_IRQn 1 */
}
 8004c5c:	46c0      	nop			; (mov r8, r8)
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b002      	add	sp, #8
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	200000f4 	.word	0x200000f4
 8004c68:	20000338 	.word	0x20000338
 8004c6c:	0800a674 	.word	0x0800a674
 8004c70:	0800a67c 	.word	0x0800a67c
 8004c74:	0800a684 	.word	0x0800a684
 8004c78:	0800a68c 	.word	0x0800a68c

08004c7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004c7c:	b5b0      	push	{r4, r5, r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c82:	4b41      	ldr	r3, [pc, #260]	; (8004d88 <TIM6_DAC_IRQHandler+0x10c>)
 8004c84:	0018      	movs	r0, r3
 8004c86:	f004 f98d 	bl	8008fa4 <HAL_TIM_IRQHandler>
//
//    // TODO - delete this
//    VCNL4010_read8(VCNL4010_INTSTAT);
//    VCNL4010_read8(VCNL4010_INTCONTROL);
//
    uint16_t proximity = VCNL4010_readProximity();
 8004c8a:	250e      	movs	r5, #14
 8004c8c:	197c      	adds	r4, r7, r5
 8004c8e:	f000 fadd 	bl	800524c <VCNL4010_readProximity>
 8004c92:	0003      	movs	r3, r0
 8004c94:	8023      	strh	r3, [r4, #0]
    serial_printf("Proximity Reading is \t\t\t%d (0x%x)\r\n", proximity, proximity);
 8004c96:	197b      	adds	r3, r7, r5
 8004c98:	8819      	ldrh	r1, [r3, #0]
 8004c9a:	197b      	adds	r3, r7, r5
 8004c9c:	881a      	ldrh	r2, [r3, #0]
 8004c9e:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <TIM6_DAC_IRQHandler+0x110>)
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f7ff fbbd 	bl	8004420 <serial_printf>

    int temp = hts221_get_temp('C', hts_cal_data);
 8004ca6:	4b3a      	ldr	r3, [pc, #232]	; (8004d90 <TIM6_DAC_IRQHandler+0x114>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	0019      	movs	r1, r3
 8004cac:	2043      	movs	r0, #67	; 0x43
 8004cae:	f7fe fe57 	bl	8003960 <hts221_get_temp>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	60bb      	str	r3, [r7, #8]
    if (temp == TEMP_ERROR) serial_printf("Error reading temperature\r\n");
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4a36      	ldr	r2, [pc, #216]	; (8004d94 <TIM6_DAC_IRQHandler+0x118>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d104      	bne.n	8004cc8 <TIM6_DAC_IRQHandler+0x4c>
 8004cbe:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <TIM6_DAC_IRQHandler+0x11c>)
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f7ff fbad 	bl	8004420 <serial_printf>
 8004cc6:	e005      	b.n	8004cd4 <TIM6_DAC_IRQHandler+0x58>
    else serial_printf("Current temperature is \t\t\t%d\tC\r\n", temp);
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	4b34      	ldr	r3, [pc, #208]	; (8004d9c <TIM6_DAC_IRQHandler+0x120>)
 8004ccc:	0011      	movs	r1, r2
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f7ff fba6 	bl	8004420 <serial_printf>

    int humid = hts221_get_humid(hts_cal_data);
 8004cd4:	4b2e      	ldr	r3, [pc, #184]	; (8004d90 <TIM6_DAC_IRQHandler+0x114>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7fe ff19 	bl	8003b10 <hts221_get_humid>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	607b      	str	r3, [r7, #4]
    if (humid == HUMID_ERROR) serial_printf("Error reading humidity\r\n");
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	d104      	bne.n	8004cf2 <TIM6_DAC_IRQHandler+0x76>
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <TIM6_DAC_IRQHandler+0x124>)
 8004cea:	0018      	movs	r0, r3
 8004cec:	f7ff fb98 	bl	8004420 <serial_printf>
 8004cf0:	e005      	b.n	8004cfe <TIM6_DAC_IRQHandler+0x82>
    else serial_printf("Current Relative Humidity is \t\t%d\t%c\r\n\n", humid,37);
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <TIM6_DAC_IRQHandler+0x128>)
 8004cf6:	2225      	movs	r2, #37	; 0x25
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f7ff fb91 	bl	8004420 <serial_printf>


    ADC_Select_CH1();
 8004cfe:	f7fd fa4d 	bl	800219c <ADC_Select_CH1>
    HAL_Delay(500);
 8004d02:	23fa      	movs	r3, #250	; 0xfa
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	0018      	movs	r0, r3
 8004d08:	f000 fbf8 	bl	80054fc <HAL_Delay>
    HAL_ADC_Start(&hadc);
 8004d0c:	4b26      	ldr	r3, [pc, #152]	; (8004da8 <TIM6_DAC_IRQHandler+0x12c>)
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f000 fd8c 	bl	800582c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8004d14:	2301      	movs	r3, #1
 8004d16:	425a      	negs	r2, r3
 8004d18:	4b23      	ldr	r3, [pc, #140]	; (8004da8 <TIM6_DAC_IRQHandler+0x12c>)
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f000 fe19 	bl	8005954 <HAL_ADC_PollForConversion>
//    uint32_t adc_value = HAL_ADC_GetValue(&hadc);
    uint32_t adc_value = adc_readings[1] & 0xFFFF;
 8004d22:	4b22      	ldr	r3, [pc, #136]	; (8004dac <TIM6_DAC_IRQHandler+0x130>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3304      	adds	r3, #4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	0c1b      	lsrs	r3, r3, #16
 8004d2e:	603b      	str	r3, [r7, #0]
    serial_printf("RAW Methane is \t\t\t\t%d\n", adc_value);
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	4b1f      	ldr	r3, [pc, #124]	; (8004db0 <TIM6_DAC_IRQHandler+0x134>)
 8004d34:	0011      	movs	r1, r2
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7ff fb72 	bl	8004420 <serial_printf>

    HAL_ADC_Stop(&hadc);
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <TIM6_DAC_IRQHandler+0x12c>)
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f000 fdc8 	bl	80058d4 <HAL_ADC_Stop>
    ADC_Select_CH0();
 8004d44:	f7fd fa04 	bl	8002150 <ADC_Select_CH0>
    HAL_Delay(500);
 8004d48:	23fa      	movs	r3, #250	; 0xfa
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 fbd5 	bl	80054fc <HAL_Delay>
    HAL_ADC_Start(&hadc);
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <TIM6_DAC_IRQHandler+0x12c>)
 8004d54:	0018      	movs	r0, r3
 8004d56:	f000 fd69 	bl	800582c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	425a      	negs	r2, r3
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <TIM6_DAC_IRQHandler+0x12c>)
 8004d60:	0011      	movs	r1, r2
 8004d62:	0018      	movs	r0, r3
 8004d64:	f000 fdf6 	bl	8005954 <HAL_ADC_PollForConversion>
//    adc_value = HAL_ADC_GetValue(&hadc);
    adc_value = adc_readings[0] & 0xFFFF;
 8004d68:	4b10      	ldr	r3, [pc, #64]	; (8004dac <TIM6_DAC_IRQHandler+0x130>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	603b      	str	r3, [r7, #0]
    serial_printf("RAW Pressure is \t\t\t%d\n\n", adc_value);
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <TIM6_DAC_IRQHandler+0x138>)
 8004d78:	0011      	movs	r1, r2
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7ff fb50 	bl	8004420 <serial_printf>
//	  serial_printf("Battery Pack Temp\t\t\t%d\tK\r\n", temp_bat);
//	  serial_printf("Current Bat IC Temp is\t\t\t%d\tK\r\n\n", temp_bq_IC);
//  }

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b004      	add	sp, #16
 8004d86:	bdb0      	pop	{r4, r5, r7, pc}
 8004d88:	200002f8 	.word	0x200002f8
 8004d8c:	0800a694 	.word	0x0800a694
 8004d90:	20000210 	.word	0x20000210
 8004d94:	fffffe34 	.word	0xfffffe34
 8004d98:	0800a6b8 	.word	0x0800a6b8
 8004d9c:	0800a6d4 	.word	0x0800a6d4
 8004da0:	0800a6f8 	.word	0x0800a6f8
 8004da4:	0800a714 	.word	0x0800a714
 8004da8:	2000014c 	.word	0x2000014c
 8004dac:	200000b8 	.word	0x200000b8
 8004db0:	0800a73c 	.word	0x0800a73c
 8004db4:	0800a754 	.word	0x0800a754

08004db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dc0:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <_sbrk+0x5c>)
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <_sbrk+0x60>)
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <_sbrk+0x64>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dd4:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <_sbrk+0x64>)
 8004dd6:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <_sbrk+0x68>)
 8004dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <_sbrk+0x64>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d207      	bcs.n	8004df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004de8:	f005 f912 	bl	800a010 <__errno>
 8004dec:	0003      	movs	r3, r0
 8004dee:	220c      	movs	r2, #12
 8004df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004df2:	2301      	movs	r3, #1
 8004df4:	425b      	negs	r3, r3
 8004df6:	e009      	b.n	8004e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004df8:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <_sbrk+0x64>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dfe:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <_sbrk+0x64>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	18d2      	adds	r2, r2, r3
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <_sbrk+0x64>)
 8004e08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b006      	add	sp, #24
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20002000 	.word	0x20002000
 8004e18:	00000400 	.word	0x00000400
 8004e1c:	200000f8 	.word	0x200000f8
 8004e20:	20000498 	.word	0x20000498

08004e24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e36:	2308      	movs	r3, #8
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	001a      	movs	r2, r3
 8004e40:	2100      	movs	r1, #0
 8004e42:	f005 f922 	bl	800a08a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e46:	003b      	movs	r3, r7
 8004e48:	0018      	movs	r0, r3
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	001a      	movs	r2, r3
 8004e4e:	2100      	movs	r1, #0
 8004e50:	f005 f91b 	bl	800a08a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e54:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <MX_TIM2_Init+0xa0>)
 8004e56:	2280      	movs	r2, #128	; 0x80
 8004e58:	05d2      	lsls	r2, r2, #23
 8004e5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000 - 1;
 8004e5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ed0 <MX_TIM2_Init+0xa0>)
 8004e5e:	4a1d      	ldr	r2, [pc, #116]	; (8004ed4 <MX_TIM2_Init+0xa4>)
 8004e60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e62:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <MX_TIM2_Init+0xa0>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8004e68:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <MX_TIM2_Init+0xa0>)
 8004e6a:	2264      	movs	r2, #100	; 0x64
 8004e6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e6e:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <MX_TIM2_Init+0xa0>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e74:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <MX_TIM2_Init+0xa0>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <MX_TIM2_Init+0xa0>)
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f004 f805 	bl	8008e8c <HAL_TIM_Base_Init>
 8004e82:	1e03      	subs	r3, r0, #0
 8004e84:	d001      	beq.n	8004e8a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004e86:	f7ff f9dd 	bl	8004244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e8a:	2108      	movs	r1, #8
 8004e8c:	187b      	adds	r3, r7, r1
 8004e8e:	2280      	movs	r2, #128	; 0x80
 8004e90:	0152      	lsls	r2, r2, #5
 8004e92:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e94:	187a      	adds	r2, r7, r1
 8004e96:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <MX_TIM2_Init+0xa0>)
 8004e98:	0011      	movs	r1, r2
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f004 f96a 	bl	8009174 <HAL_TIM_ConfigClockSource>
 8004ea0:	1e03      	subs	r3, r0, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8004ea4:	f7ff f9ce 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ea8:	003b      	movs	r3, r7
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eae:	003b      	movs	r3, r7
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004eb4:	003a      	movs	r2, r7
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <MX_TIM2_Init+0xa0>)
 8004eb8:	0011      	movs	r1, r2
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f004 fb3a 	bl	8009534 <HAL_TIMEx_MasterConfigSynchronization>
 8004ec0:	1e03      	subs	r3, r0, #0
 8004ec2:	d001      	beq.n	8004ec8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8004ec4:	f7ff f9be 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b006      	add	sp, #24
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000338 	.word	0x20000338
 8004ed4:	00000f9f 	.word	0x00000f9f

08004ed8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ede:	003b      	movs	r3, r7
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	001a      	movs	r2, r3
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	f005 f8cf 	bl	800a08a <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004eec:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <MX_TIM6_Init+0x6c>)
 8004eee:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <MX_TIM6_Init+0x70>)
 8004ef0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2097-1;
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <MX_TIM6_Init+0x6c>)
 8004ef4:	2283      	movs	r2, #131	; 0x83
 8004ef6:	0112      	lsls	r2, r2, #4
 8004ef8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004efa:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <MX_TIM6_Init+0x6c>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 30000-1;
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <MX_TIM6_Init+0x6c>)
 8004f02:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <MX_TIM6_Init+0x74>)
 8004f04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f06:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <MX_TIM6_Init+0x6c>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <MX_TIM6_Init+0x6c>)
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f003 ffbc 	bl	8008e8c <HAL_TIM_Base_Init>
 8004f14:	1e03      	subs	r3, r0, #0
 8004f16:	d001      	beq.n	8004f1c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8004f18:	f7ff f994 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f1c:	003b      	movs	r3, r7
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f22:	003b      	movs	r3, r7
 8004f24:	2200      	movs	r2, #0
 8004f26:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004f28:	003a      	movs	r2, r7
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <MX_TIM6_Init+0x6c>)
 8004f2c:	0011      	movs	r1, r2
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f004 fb00 	bl	8009534 <HAL_TIMEx_MasterConfigSynchronization>
 8004f34:	1e03      	subs	r3, r0, #0
 8004f36:	d001      	beq.n	8004f3c <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8004f38:	f7ff f984 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b002      	add	sp, #8
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	200002f8 	.word	0x200002f8
 8004f48:	40001000 	.word	0x40001000
 8004f4c:	0000752f 	.word	0x0000752f

08004f50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	05db      	lsls	r3, r3, #23
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d106      	bne.n	8004f72 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_TIM_Base_MspInit+0x40>)
 8004f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f68:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <HAL_TIM_Base_MspInit+0x40>)
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004f70:	e00a      	b.n	8004f88 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM6)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a07      	ldr	r2, [pc, #28]	; (8004f94 <HAL_TIM_Base_MspInit+0x44>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d105      	bne.n	8004f88 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f7c:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <HAL_TIM_Base_MspInit+0x40>)
 8004f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f80:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <HAL_TIM_Base_MspInit+0x40>)
 8004f82:	2110      	movs	r1, #16
 8004f84:	430a      	orrs	r2, r1
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b002      	add	sp, #8
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40001000 	.word	0x40001000

08004f98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004f9e:	4a15      	ldr	r2, [pc, #84]	; (8004ff4 <MX_USART1_UART_Init+0x5c>)
 8004fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004fa2:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004fa4:	22e1      	movs	r2, #225	; 0xe1
 8004fa6:	0252      	lsls	r2, r2, #9
 8004fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004fbe:	220c      	movs	r2, #12
 8004fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fc8:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fd4:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <MX_USART1_UART_Init+0x58>)
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f004 fb01 	bl	80095e4 <HAL_UART_Init>
 8004fe2:	1e03      	subs	r3, r0, #0
 8004fe4:	d001      	beq.n	8004fea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004fe6:	f7ff f92d 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000378 	.word	0x20000378
 8004ff4:	40013800 	.word	0x40013800

08004ff8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ffc:	4b14      	ldr	r3, [pc, #80]	; (8005050 <MX_USART2_UART_Init+0x58>)
 8004ffe:	4a15      	ldr	r2, [pc, #84]	; (8005054 <MX_USART2_UART_Init+0x5c>)
 8005000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005002:	4b13      	ldr	r3, [pc, #76]	; (8005050 <MX_USART2_UART_Init+0x58>)
 8005004:	2296      	movs	r2, #150	; 0x96
 8005006:	0192      	lsls	r2, r2, #6
 8005008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800500a:	4b11      	ldr	r3, [pc, #68]	; (8005050 <MX_USART2_UART_Init+0x58>)
 800500c:	2200      	movs	r2, #0
 800500e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <MX_USART2_UART_Init+0x58>)
 8005012:	2200      	movs	r2, #0
 8005014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005016:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <MX_USART2_UART_Init+0x58>)
 8005018:	2200      	movs	r2, #0
 800501a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <MX_USART2_UART_Init+0x58>)
 800501e:	220c      	movs	r2, #12
 8005020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005022:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <MX_USART2_UART_Init+0x58>)
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <MX_USART2_UART_Init+0x58>)
 800502a:	2200      	movs	r2, #0
 800502c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800502e:	4b08      	ldr	r3, [pc, #32]	; (8005050 <MX_USART2_UART_Init+0x58>)
 8005030:	2200      	movs	r2, #0
 8005032:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005034:	4b06      	ldr	r3, [pc, #24]	; (8005050 <MX_USART2_UART_Init+0x58>)
 8005036:	2200      	movs	r2, #0
 8005038:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800503a:	4b05      	ldr	r3, [pc, #20]	; (8005050 <MX_USART2_UART_Init+0x58>)
 800503c:	0018      	movs	r0, r3
 800503e:	f004 fad1 	bl	80095e4 <HAL_UART_Init>
 8005042:	1e03      	subs	r3, r0, #0
 8005044:	d001      	beq.n	800504a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005046:	f7ff f8fd 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	200003fc 	.word	0x200003fc
 8005054:	40004400 	.word	0x40004400

08005058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b08b      	sub	sp, #44	; 0x2c
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	2414      	movs	r4, #20
 8005062:	193b      	adds	r3, r7, r4
 8005064:	0018      	movs	r0, r3
 8005066:	2314      	movs	r3, #20
 8005068:	001a      	movs	r2, r3
 800506a:	2100      	movs	r1, #0
 800506c:	f005 f80d 	bl	800a08a <memset>
  if(uartHandle->Instance==USART1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a41      	ldr	r2, [pc, #260]	; (800517c <HAL_UART_MspInit+0x124>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d14c      	bne.n	8005114 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800507a:	4b41      	ldr	r3, [pc, #260]	; (8005180 <HAL_UART_MspInit+0x128>)
 800507c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507e:	4b40      	ldr	r3, [pc, #256]	; (8005180 <HAL_UART_MspInit+0x128>)
 8005080:	2180      	movs	r1, #128	; 0x80
 8005082:	01c9      	lsls	r1, r1, #7
 8005084:	430a      	orrs	r2, r1
 8005086:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005088:	4b3d      	ldr	r3, [pc, #244]	; (8005180 <HAL_UART_MspInit+0x128>)
 800508a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508c:	4b3c      	ldr	r3, [pc, #240]	; (8005180 <HAL_UART_MspInit+0x128>)
 800508e:	2101      	movs	r1, #1
 8005090:	430a      	orrs	r2, r1
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c
 8005094:	4b3a      	ldr	r3, [pc, #232]	; (8005180 <HAL_UART_MspInit+0x128>)
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	2201      	movs	r2, #1
 800509a:	4013      	ands	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050a0:	4b37      	ldr	r3, [pc, #220]	; (8005180 <HAL_UART_MspInit+0x128>)
 80050a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a4:	4b36      	ldr	r3, [pc, #216]	; (8005180 <HAL_UART_MspInit+0x128>)
 80050a6:	2102      	movs	r1, #2
 80050a8:	430a      	orrs	r2, r1
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80050ac:	4b34      	ldr	r3, [pc, #208]	; (8005180 <HAL_UART_MspInit+0x128>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	2202      	movs	r2, #2
 80050b2:	4013      	ands	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80050b8:	193b      	adds	r3, r7, r4
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	00d2      	lsls	r2, r2, #3
 80050be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c0:	193b      	adds	r3, r7, r4
 80050c2:	2202      	movs	r2, #2
 80050c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c6:	193b      	adds	r3, r7, r4
 80050c8:	2200      	movs	r2, #0
 80050ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050cc:	193b      	adds	r3, r7, r4
 80050ce:	2203      	movs	r2, #3
 80050d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80050d2:	193b      	adds	r3, r7, r4
 80050d4:	2204      	movs	r2, #4
 80050d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d8:	193a      	adds	r2, r7, r4
 80050da:	23a0      	movs	r3, #160	; 0xa0
 80050dc:	05db      	lsls	r3, r3, #23
 80050de:	0011      	movs	r1, r2
 80050e0:	0018      	movs	r0, r3
 80050e2:	f001 f9f5 	bl	80064d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80050e6:	0021      	movs	r1, r4
 80050e8:	187b      	adds	r3, r7, r1
 80050ea:	2240      	movs	r2, #64	; 0x40
 80050ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ee:	187b      	adds	r3, r7, r1
 80050f0:	2202      	movs	r2, #2
 80050f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f4:	187b      	adds	r3, r7, r1
 80050f6:	2200      	movs	r2, #0
 80050f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050fa:	187b      	adds	r3, r7, r1
 80050fc:	2203      	movs	r2, #3
 80050fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8005100:	187b      	adds	r3, r7, r1
 8005102:	2200      	movs	r2, #0
 8005104:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005106:	187b      	adds	r3, r7, r1
 8005108:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <HAL_UART_MspInit+0x12c>)
 800510a:	0019      	movs	r1, r3
 800510c:	0010      	movs	r0, r2
 800510e:	f001 f9df 	bl	80064d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005112:	e02e      	b.n	8005172 <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <HAL_UART_MspInit+0x130>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d129      	bne.n	8005172 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800511e:	4b18      	ldr	r3, [pc, #96]	; (8005180 <HAL_UART_MspInit+0x128>)
 8005120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005122:	4b17      	ldr	r3, [pc, #92]	; (8005180 <HAL_UART_MspInit+0x128>)
 8005124:	2180      	movs	r1, #128	; 0x80
 8005126:	0289      	lsls	r1, r1, #10
 8005128:	430a      	orrs	r2, r1
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <HAL_UART_MspInit+0x128>)
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	4b13      	ldr	r3, [pc, #76]	; (8005180 <HAL_UART_MspInit+0x128>)
 8005132:	2101      	movs	r1, #1
 8005134:	430a      	orrs	r2, r1
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <HAL_UART_MspInit+0x128>)
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	2201      	movs	r2, #1
 800513e:	4013      	ands	r3, r2
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005144:	2114      	movs	r1, #20
 8005146:	187b      	adds	r3, r7, r1
 8005148:	220c      	movs	r2, #12
 800514a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514c:	187b      	adds	r3, r7, r1
 800514e:	2202      	movs	r2, #2
 8005150:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005152:	187b      	adds	r3, r7, r1
 8005154:	2200      	movs	r2, #0
 8005156:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005158:	187b      	adds	r3, r7, r1
 800515a:	2203      	movs	r2, #3
 800515c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800515e:	187b      	adds	r3, r7, r1
 8005160:	2204      	movs	r2, #4
 8005162:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005164:	187a      	adds	r2, r7, r1
 8005166:	23a0      	movs	r3, #160	; 0xa0
 8005168:	05db      	lsls	r3, r3, #23
 800516a:	0011      	movs	r1, r2
 800516c:	0018      	movs	r0, r3
 800516e:	f001 f9af 	bl	80064d0 <HAL_GPIO_Init>
}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	b00b      	add	sp, #44	; 0x2c
 8005178:	bd90      	pop	{r4, r7, pc}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	40013800 	.word	0x40013800
 8005180:	40021000 	.word	0x40021000
 8005184:	50000400 	.word	0x50000400
 8005188:	40004400 	.word	0x40004400

0800518c <VCNL4010_enable_Interrupt>:
/*!
    @brief  Enable threshold interrupt and set the threshold values
*/
/**************************************************************************/

void VCNL4010_enable_Interrupt() {
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
  VCNL4010_ack_ISR();
 8005192:	f000 f82b 	bl	80051ec <VCNL4010_ack_ISR>
  //Set INT_THRES_EN
  uint8_t temp = VCNL4010_read8(VCNL4010_INTCONTROL);
 8005196:	1dfc      	adds	r4, r7, #7
 8005198:	2089      	movs	r0, #137	; 0x89
 800519a:	f000 f8cf 	bl	800533c <VCNL4010_read8>
 800519e:	0003      	movs	r3, r0
 80051a0:	7023      	strb	r3, [r4, #0]
  temp &= 0xf0; //clear first 4 bits
 80051a2:	1dfb      	adds	r3, r7, #7
 80051a4:	1dfa      	adds	r2, r7, #7
 80051a6:	7812      	ldrb	r2, [r2, #0]
 80051a8:	210f      	movs	r1, #15
 80051aa:	438a      	bics	r2, r1
 80051ac:	701a      	strb	r2, [r3, #0]
  temp |= 0x2; //set INT_THRES_EN bit
 80051ae:	1dfb      	adds	r3, r7, #7
 80051b0:	1dfa      	adds	r2, r7, #7
 80051b2:	7812      	ldrb	r2, [r2, #0]
 80051b4:	2102      	movs	r1, #2
 80051b6:	430a      	orrs	r2, r1
 80051b8:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTCONTROL, temp);
 80051ba:	1dfb      	adds	r3, r7, #7
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	0019      	movs	r1, r3
 80051c0:	2089      	movs	r0, #137	; 0x89
 80051c2:	f000 f86f 	bl	80052a4 <VCNL4010_write8>

  //set low threshold - not really using... so set to 0.
  VCNL4010_write16(VCNL4010_LOWTHRESHOLD, 0);
 80051c6:	2100      	movs	r1, #0
 80051c8:	208a      	movs	r0, #138	; 0x8a
 80051ca:	f000 f88b 	bl	80052e4 <VCNL4010_write16>

//  uint16_t threshold = ((22000 & 0xFF00) >> 8) | ((22000 & 0xFF) << 8);
    uint16_t threshold = 2500;
 80051ce:	1d3b      	adds	r3, r7, #4
 80051d0:	4a05      	ldr	r2, [pc, #20]	; (80051e8 <VCNL4010_enable_Interrupt+0x5c>)
 80051d2:	801a      	strh	r2, [r3, #0]

  //set high threshold
    VCNL4010_write16(VCNL4010_HITHRESHOLD, threshold);
 80051d4:	1d3b      	adds	r3, r7, #4
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	0019      	movs	r1, r3
 80051da:	208c      	movs	r0, #140	; 0x8c
 80051dc:	f000 f882 	bl	80052e4 <VCNL4010_write16>
//  VCNL4010_write16(VCNL4010_HITHRESHOLD, 2500);

}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b003      	add	sp, #12
 80051e6:	bd90      	pop	{r4, r7, pc}
 80051e8:	000009c4 	.word	0x000009c4

080051ec <VCNL4010_ack_ISR>:
/*!
    @brief  Clear Interrupt Status Register
*/
/**************************************************************************/

void VCNL4010_ack_ISR() {
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
  //Set INT_THRES_EN
  uint8_t temp = VCNL4010_read8(VCNL4010_INTSTAT);
 80051f2:	1dfc      	adds	r4, r7, #7
 80051f4:	208e      	movs	r0, #142	; 0x8e
 80051f6:	f000 f8a1 	bl	800533c <VCNL4010_read8>
 80051fa:	0003      	movs	r3, r0
 80051fc:	7023      	strb	r3, [r4, #0]
  temp &= 0xfc; //clear first 2 bits
 80051fe:	1dfb      	adds	r3, r7, #7
 8005200:	1dfa      	adds	r2, r7, #7
 8005202:	7812      	ldrb	r2, [r2, #0]
 8005204:	2103      	movs	r1, #3
 8005206:	438a      	bics	r2, r1
 8005208:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTSTAT, temp);
 800520a:	1dfb      	adds	r3, r7, #7
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	0019      	movs	r1, r3
 8005210:	208e      	movs	r0, #142	; 0x8e
 8005212:	f000 f847 	bl	80052a4 <VCNL4010_write8>
}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	46bd      	mov	sp, r7
 800521a:	b003      	add	sp, #12
 800521c:	bd90      	pop	{r4, r7, pc}

0800521e <VCNL4010_setLEDcurrent>:
   10 mA, so if you set it to 5, its 50mA. Minimum is 0 (0 mA, off), max is 20
   (200mA)
*/
/**************************************************************************/

void VCNL4010_setLEDcurrent(uint8_t current_10mA) {
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	0002      	movs	r2, r0
 8005226:	1dfb      	adds	r3, r7, #7
 8005228:	701a      	strb	r2, [r3, #0]
  if (current_10mA > 20)
 800522a:	1dfb      	adds	r3, r7, #7
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b14      	cmp	r3, #20
 8005230:	d902      	bls.n	8005238 <VCNL4010_setLEDcurrent+0x1a>
    current_10mA = 20;
 8005232:	1dfb      	adds	r3, r7, #7
 8005234:	2214      	movs	r2, #20
 8005236:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_IRLED, current_10mA);
 8005238:	1dfb      	adds	r3, r7, #7
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	0019      	movs	r1, r3
 800523e:	2083      	movs	r0, #131	; 0x83
 8005240:	f000 f830 	bl	80052a4 <VCNL4010_write8>
}
 8005244:	46c0      	nop			; (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	b002      	add	sp, #8
 800524a:	bd80      	pop	{r7, pc}

0800524c <VCNL4010_readProximity>:
    @return Raw 16-bit reading value, will vary with LED current, unit-less!
    TODO - Fix infinite loop, add timeout!
*/
/**************************************************************************/

uint16_t VCNL4010_readProximity(void) {
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
  uint8_t i = VCNL4010_read8(VCNL4010_INTSTAT);
 8005252:	1dfc      	adds	r4, r7, #7
 8005254:	208e      	movs	r0, #142	; 0x8e
 8005256:	f000 f871 	bl	800533c <VCNL4010_read8>
 800525a:	0003      	movs	r3, r0
 800525c:	7023      	strb	r3, [r4, #0]
  i &= ~0x80;
 800525e:	1dfb      	adds	r3, r7, #7
 8005260:	1dfa      	adds	r2, r7, #7
 8005262:	7812      	ldrb	r2, [r2, #0]
 8005264:	217f      	movs	r1, #127	; 0x7f
 8005266:	400a      	ands	r2, r1
 8005268:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTSTAT, i);
 800526a:	1dfb      	adds	r3, r7, #7
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	0019      	movs	r1, r3
 8005270:	208e      	movs	r0, #142	; 0x8e
 8005272:	f000 f817 	bl	80052a4 <VCNL4010_write8>

  VCNL4010_write8(VCNL4010_COMMAND, VCNL4010_MEASUREPROXIMITY);
 8005276:	2108      	movs	r1, #8
 8005278:	2080      	movs	r0, #128	; 0x80
 800527a:	f000 f813 	bl	80052a4 <VCNL4010_write8>
  while (1) {
    // Serial.println(read8(VCNL4010_INTSTAT), HEX);
    uint8_t result = VCNL4010_read8(VCNL4010_COMMAND);
 800527e:	1dbc      	adds	r4, r7, #6
 8005280:	2080      	movs	r0, #128	; 0x80
 8005282:	f000 f85b 	bl	800533c <VCNL4010_read8>
 8005286:	0003      	movs	r3, r0
 8005288:	7023      	strb	r3, [r4, #0]
    // Serial.print("Ready = 0x"); Serial.println(result, HEX);
    if (result & VCNL4010_PROXIMITYREADY) {
 800528a:	1dbb      	adds	r3, r7, #6
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2220      	movs	r2, #32
 8005290:	4013      	ands	r3, r2
 8005292:	d0f4      	beq.n	800527e <VCNL4010_readProximity+0x32>
      return VCNL4010_read16(VCNL4010_PROXIMITYDATA);
 8005294:	2087      	movs	r0, #135	; 0x87
 8005296:	f000 f86f 	bl	8005378 <VCNL4010_read16>
 800529a:	0003      	movs	r3, r0
    }
//    delay(1);
  }
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b003      	add	sp, #12
 80052a2:	bd90      	pop	{r4, r7, pc}

080052a4 <VCNL4010_write8>:
    }
  }
}

HAL_StatusTypeDef VCNL4010_write8(uint8_t subAddress, uint8_t data)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af04      	add	r7, sp, #16
 80052aa:	0002      	movs	r2, r0
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	1dbb      	adds	r3, r7, #6
 80052b2:	1c0a      	adds	r2, r1, #0
 80052b4:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80052b6:	1dfb      	adds	r3, r7, #7
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	4808      	ldr	r0, [pc, #32]	; (80052e0 <VCNL4010_write8+0x3c>)
 80052be:	2301      	movs	r3, #1
 80052c0:	425b      	negs	r3, r3
 80052c2:	9302      	str	r3, [sp, #8]
 80052c4:	2301      	movs	r3, #1
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	1dbb      	adds	r3, r7, #6
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2301      	movs	r3, #1
 80052ce:	2126      	movs	r1, #38	; 0x26
 80052d0:	f001 fb4e 	bl	8006970 <HAL_I2C_Mem_Write>
 80052d4:	0003      	movs	r3, r0

}
 80052d6:	0018      	movs	r0, r3
 80052d8:	46bd      	mov	sp, r7
 80052da:	b002      	add	sp, #8
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	200001c4 	.word	0x200001c4

080052e4 <VCNL4010_write16>:

HAL_StatusTypeDef VCNL4010_write16(uint8_t subAddress, uint16_t data)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af04      	add	r7, sp, #16
 80052ea:	0002      	movs	r2, r0
 80052ec:	1dfb      	adds	r3, r7, #7
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	1d3b      	adds	r3, r7, #4
 80052f2:	1c0a      	adds	r2, r1, #0
 80052f4:	801a      	strh	r2, [r3, #0]

  uint8_t temp[2];
  temp[0] = (uint8_t) 0xFF & (data >> 8); //high byte is stored first
 80052f6:	1d3b      	adds	r3, r7, #4
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	210c      	movs	r1, #12
 8005302:	187b      	adds	r3, r7, r1
 8005304:	701a      	strb	r2, [r3, #0]
  temp[1] = (uint8_t) (0xFF & data);      //low byte is stored second
 8005306:	1d3b      	adds	r3, r7, #4
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	187b      	adds	r3, r7, r1
 800530e:	705a      	strb	r2, [r3, #1]

  return HAL_I2C_Mem_Write(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, temp, 2, HAL_MAX_DELAY);
 8005310:	1dfb      	adds	r3, r7, #7
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	b29a      	uxth	r2, r3
 8005316:	4808      	ldr	r0, [pc, #32]	; (8005338 <VCNL4010_write16+0x54>)
 8005318:	2301      	movs	r3, #1
 800531a:	425b      	negs	r3, r3
 800531c:	9302      	str	r3, [sp, #8]
 800531e:	2302      	movs	r3, #2
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	187b      	adds	r3, r7, r1
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	2301      	movs	r3, #1
 8005328:	2126      	movs	r1, #38	; 0x26
 800532a:	f001 fb21 	bl	8006970 <HAL_I2C_Mem_Write>
 800532e:	0003      	movs	r3, r0

}
 8005330:	0018      	movs	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	b004      	add	sp, #16
 8005336:	bd80      	pop	{r7, pc}
 8005338:	200001c4 	.word	0x200001c4

0800533c <VCNL4010_read8>:

uint8_t VCNL4010_read8(uint8_t subAddress){
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b089      	sub	sp, #36	; 0x24
 8005340:	af04      	add	r7, sp, #16
 8005342:	0002      	movs	r2, r0
 8005344:	1dfb      	adds	r3, r7, #7
 8005346:	701a      	strb	r2, [r3, #0]

	uint8_t data;
	HAL_I2C_Mem_Read(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8005348:	1dfb      	adds	r3, r7, #7
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	b29a      	uxth	r2, r3
 800534e:	4809      	ldr	r0, [pc, #36]	; (8005374 <VCNL4010_read8+0x38>)
 8005350:	2301      	movs	r3, #1
 8005352:	425b      	negs	r3, r3
 8005354:	9302      	str	r3, [sp, #8]
 8005356:	2301      	movs	r3, #1
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	240f      	movs	r4, #15
 800535c:	193b      	adds	r3, r7, r4
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	2301      	movs	r3, #1
 8005362:	2126      	movs	r1, #38	; 0x26
 8005364:	f001 fc32 	bl	8006bcc <HAL_I2C_Mem_Read>
	return ((uint8_t) data);
 8005368:	193b      	adds	r3, r7, r4
 800536a:	781b      	ldrb	r3, [r3, #0]
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b005      	add	sp, #20
 8005372:	bd90      	pop	{r4, r7, pc}
 8005374:	200001c4 	.word	0x200001c4

08005378 <VCNL4010_read16>:

uint16_t VCNL4010_read16(uint8_t subAddress){
 8005378:	b590      	push	{r4, r7, lr}
 800537a:	b089      	sub	sp, #36	; 0x24
 800537c:	af04      	add	r7, sp, #16
 800537e:	0002      	movs	r2, r0
 8005380:	1dfb      	adds	r3, r7, #7
 8005382:	701a      	strb	r2, [r3, #0]

	uint8_t data[2];
	HAL_I2C_Mem_Read(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8005384:	1dfb      	adds	r3, r7, #7
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	b29a      	uxth	r2, r3
 800538a:	480e      	ldr	r0, [pc, #56]	; (80053c4 <VCNL4010_read16+0x4c>)
 800538c:	2301      	movs	r3, #1
 800538e:	425b      	negs	r3, r3
 8005390:	9302      	str	r3, [sp, #8]
 8005392:	2302      	movs	r3, #2
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	240c      	movs	r4, #12
 8005398:	193b      	adds	r3, r7, r4
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	2301      	movs	r3, #1
 800539e:	2126      	movs	r1, #38	; 0x26
 80053a0:	f001 fc14 	bl	8006bcc <HAL_I2C_Mem_Read>
	return ((uint16_t) data[0] << 8) | data[1];
 80053a4:	0021      	movs	r1, r4
 80053a6:	187b      	adds	r3, r7, r1
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	b21a      	sxth	r2, r3
 80053ae:	187b      	adds	r3, r7, r1
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	b21b      	sxth	r3, r3
 80053b4:	4313      	orrs	r3, r2
 80053b6:	b21b      	sxth	r3, r3
 80053b8:	b29b      	uxth	r3, r3
}
 80053ba:	0018      	movs	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	b005      	add	sp, #20
 80053c0:	bd90      	pop	{r4, r7, pc}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	200001c4 	.word	0x200001c4

080053c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80053c8:	480d      	ldr	r0, [pc, #52]	; (8005400 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053cc:	480d      	ldr	r0, [pc, #52]	; (8005404 <LoopForever+0x6>)
  ldr r1, =_edata
 80053ce:	490e      	ldr	r1, [pc, #56]	; (8005408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80053d0:	4a0e      	ldr	r2, [pc, #56]	; (800540c <LoopForever+0xe>)
  movs r3, #0
 80053d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053d4:	e002      	b.n	80053dc <LoopCopyDataInit>

080053d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053da:	3304      	adds	r3, #4

080053dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053e0:	d3f9      	bcc.n	80053d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053e2:	4a0b      	ldr	r2, [pc, #44]	; (8005410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80053e4:	4c0b      	ldr	r4, [pc, #44]	; (8005414 <LoopForever+0x16>)
  movs r3, #0
 80053e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053e8:	e001      	b.n	80053ee <LoopFillZerobss>

080053ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053ec:	3204      	adds	r2, #4

080053ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053f0:	d3fb      	bcc.n	80053ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80053f2:	f7ff fd17 	bl	8004e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053f6:	f004 fe11 	bl	800a01c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053fa:	f7fe fda1 	bl	8003f40 <main>

080053fe <LoopForever>:

LoopForever:
    b LoopForever
 80053fe:	e7fe      	b.n	80053fe <LoopForever>
  ldr   r0, =_estack
 8005400:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005408:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800540c:	0800aea4 	.word	0x0800aea4
  ldr r2, =_sbss
 8005410:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8005414:	20000494 	.word	0x20000494

08005418 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005418:	e7fe      	b.n	8005418 <DMA1_Channel2_3_IRQHandler>
	...

0800541c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005422:	1dfb      	adds	r3, r7, #7
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_Init+0x3c>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_Init+0x3c>)
 800542e:	2140      	movs	r1, #64	; 0x40
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005434:	2000      	movs	r0, #0
 8005436:	f000 f811 	bl	800545c <HAL_InitTick>
 800543a:	1e03      	subs	r3, r0, #0
 800543c:	d003      	beq.n	8005446 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800543e:	1dfb      	adds	r3, r7, #7
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	e001      	b.n	800544a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005446:	f7ff fa3f 	bl	80048c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800544a:	1dfb      	adds	r3, r7, #7
 800544c:	781b      	ldrb	r3, [r3, #0]
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b002      	add	sp, #8
 8005454:	bd80      	pop	{r7, pc}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	40022000 	.word	0x40022000

0800545c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005464:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <HAL_InitTick+0x5c>)
 8005466:	681c      	ldr	r4, [r3, #0]
 8005468:	4b14      	ldr	r3, [pc, #80]	; (80054bc <HAL_InitTick+0x60>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	0019      	movs	r1, r3
 800546e:	23fa      	movs	r3, #250	; 0xfa
 8005470:	0098      	lsls	r0, r3, #2
 8005472:	f7fa fe49 	bl	8000108 <__udivsi3>
 8005476:	0003      	movs	r3, r0
 8005478:	0019      	movs	r1, r3
 800547a:	0020      	movs	r0, r4
 800547c:	f7fa fe44 	bl	8000108 <__udivsi3>
 8005480:	0003      	movs	r3, r0
 8005482:	0018      	movs	r0, r3
 8005484:	f000 fef1 	bl	800626a <HAL_SYSTICK_Config>
 8005488:	1e03      	subs	r3, r0, #0
 800548a:	d001      	beq.n	8005490 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e00f      	b.n	80054b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b03      	cmp	r3, #3
 8005494:	d80b      	bhi.n	80054ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	2301      	movs	r3, #1
 800549a:	425b      	negs	r3, r3
 800549c:	2200      	movs	r2, #0
 800549e:	0018      	movs	r0, r3
 80054a0:	f000 febe 	bl	8006220 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_InitTick+0x64>)
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b003      	add	sp, #12
 80054b6:	bd90      	pop	{r4, r7, pc}
 80054b8:	2000001c 	.word	0x2000001c
 80054bc:	20000024 	.word	0x20000024
 80054c0:	20000020 	.word	0x20000020

080054c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_IncTick+0x1c>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	001a      	movs	r2, r3
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_IncTick+0x20>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	18d2      	adds	r2, r2, r3
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <HAL_IncTick+0x20>)
 80054d6:	601a      	str	r2, [r3, #0]
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	20000024 	.word	0x20000024
 80054e4:	20000480 	.word	0x20000480

080054e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  return uwTick;
 80054ec:	4b02      	ldr	r3, [pc, #8]	; (80054f8 <HAL_GetTick+0x10>)
 80054ee:	681b      	ldr	r3, [r3, #0]
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	20000480 	.word	0x20000480

080054fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005504:	f7ff fff0 	bl	80054e8 <HAL_GetTick>
 8005508:	0003      	movs	r3, r0
 800550a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
 8005514:	d005      	beq.n	8005522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005516:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <HAL_Delay+0x44>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	001a      	movs	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	189b      	adds	r3, r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	f7ff ffe0 	bl	80054e8 <HAL_GetTick>
 8005528:	0002      	movs	r2, r0
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	429a      	cmp	r2, r3
 8005532:	d8f7      	bhi.n	8005524 <HAL_Delay+0x28>
  {
  }
}
 8005534:	46c0      	nop			; (mov r8, r8)
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	46bd      	mov	sp, r7
 800553a:	b004      	add	sp, #16
 800553c:	bd80      	pop	{r7, pc}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	20000024 	.word	0x20000024

08005544 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e159      	b.n	800580a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2250      	movs	r2, #80	; 0x50
 8005568:	2100      	movs	r1, #0
 800556a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	0018      	movs	r0, r3
 8005570:	f7fc fd7a 	bl	8002068 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005578:	2210      	movs	r2, #16
 800557a:	4013      	ands	r3, r2
 800557c:	2b10      	cmp	r3, #16
 800557e:	d005      	beq.n	800558c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2204      	movs	r2, #4
 8005588:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800558a:	d00b      	beq.n	80055a4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005590:	2210      	movs	r2, #16
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2250      	movs	r2, #80	; 0x50
 800559c:	2100      	movs	r1, #0
 800559e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e132      	b.n	800580a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	4a9a      	ldr	r2, [pc, #616]	; (8005814 <HAL_ADC_Init+0x2d0>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	2202      	movs	r2, #2
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2203      	movs	r2, #3
 80055bc:	4013      	ands	r3, r2
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d108      	bne.n	80055d4 <HAL_ADC_Init+0x90>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2201      	movs	r2, #1
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_ADC_Init+0x90>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_ADC_Init+0x92>
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d149      	bne.n	800566e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	23c0      	movs	r3, #192	; 0xc0
 80055e0:	061b      	lsls	r3, r3, #24
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d00b      	beq.n	80055fe <HAL_ADC_Init+0xba>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	2380      	movs	r3, #128	; 0x80
 80055ec:	05db      	lsls	r3, r3, #23
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d005      	beq.n	80055fe <HAL_ADC_Init+0xba>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d111      	bne.n	8005622 <HAL_ADC_Init+0xde>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	0092      	lsls	r2, r2, #2
 800560a:	0892      	lsrs	r2, r2, #2
 800560c:	611a      	str	r2, [r3, #16]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6919      	ldr	r1, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	611a      	str	r2, [r3, #16]
 8005620:	e014      	b.n	800564c <HAL_ADC_Init+0x108>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	0092      	lsls	r2, r2, #2
 800562e:	0892      	lsrs	r2, r2, #2
 8005630:	611a      	str	r2, [r3, #16]
 8005632:	4b79      	ldr	r3, [pc, #484]	; (8005818 <HAL_ADC_Init+0x2d4>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4b78      	ldr	r3, [pc, #480]	; (8005818 <HAL_ADC_Init+0x2d4>)
 8005638:	4978      	ldr	r1, [pc, #480]	; (800581c <HAL_ADC_Init+0x2d8>)
 800563a:	400a      	ands	r2, r1
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	4b76      	ldr	r3, [pc, #472]	; (8005818 <HAL_ADC_Init+0x2d4>)
 8005640:	6819      	ldr	r1, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	4b74      	ldr	r3, [pc, #464]	; (8005818 <HAL_ADC_Init+0x2d4>)
 8005648:	430a      	orrs	r2, r1
 800564a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2118      	movs	r1, #24
 8005658:	438a      	bics	r2, r1
 800565a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68d9      	ldr	r1, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800566e:	4b6a      	ldr	r3, [pc, #424]	; (8005818 <HAL_ADC_Init+0x2d4>)
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4b69      	ldr	r3, [pc, #420]	; (8005818 <HAL_ADC_Init+0x2d4>)
 8005674:	496a      	ldr	r1, [pc, #424]	; (8005820 <HAL_ADC_Init+0x2dc>)
 8005676:	400a      	ands	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800567a:	4b67      	ldr	r3, [pc, #412]	; (8005818 <HAL_ADC_Init+0x2d4>)
 800567c:	6819      	ldr	r1, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	065a      	lsls	r2, r3, #25
 8005684:	4b64      	ldr	r3, [pc, #400]	; (8005818 <HAL_ADC_Init+0x2d4>)
 8005686:	430a      	orrs	r2, r1
 8005688:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	055b      	lsls	r3, r3, #21
 8005694:	4013      	ands	r3, r2
 8005696:	d108      	bne.n	80056aa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2180      	movs	r1, #128	; 0x80
 80056a4:	0549      	lsls	r1, r1, #21
 80056a6:	430a      	orrs	r2, r1
 80056a8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	495b      	ldr	r1, [pc, #364]	; (8005824 <HAL_ADC_Init+0x2e0>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68d9      	ldr	r1, [r3, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d101      	bne.n	80056d0 <HAL_ADC_Init+0x18c>
 80056cc:	2304      	movs	r3, #4
 80056ce:	e000      	b.n	80056d2 <HAL_ADC_Init+0x18e>
 80056d0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80056d2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2020      	movs	r0, #32
 80056d8:	5c1b      	ldrb	r3, [r3, r0]
 80056da:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80056dc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	202c      	movs	r0, #44	; 0x2c
 80056e2:	5c1b      	ldrb	r3, [r3, r0]
 80056e4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80056e6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80056ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80056f4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80056fc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800570a:	23c2      	movs	r3, #194	; 0xc2
 800570c:	33ff      	adds	r3, #255	; 0xff
 800570e:	429a      	cmp	r2, r3
 8005710:	d00b      	beq.n	800572a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68d9      	ldr	r1, [r3, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2221      	movs	r2, #33	; 0x21
 800572e:	5c9b      	ldrb	r3, [r3, r2]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d11a      	bne.n	800576a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	5c9b      	ldrb	r3, [r3, r2]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	0249      	lsls	r1, r1, #9
 800574c:	430a      	orrs	r2, r1
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	e00b      	b.n	800576a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	2220      	movs	r2, #32
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	2201      	movs	r2, #1
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d11f      	bne.n	80057b2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	492a      	ldr	r1, [pc, #168]	; (8005828 <HAL_ADC_Init+0x2e4>)
 800577e:	400a      	ands	r2, r1
 8005780:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6919      	ldr	r1, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005790:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8005796:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2101      	movs	r1, #1
 80057ac:	430a      	orrs	r2, r1
 80057ae:	611a      	str	r2, [r3, #16]
 80057b0:	e00e      	b.n	80057d0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2201      	movs	r2, #1
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d107      	bne.n	80057d0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2101      	movs	r1, #1
 80057cc:	438a      	bics	r2, r1
 80057ce:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2107      	movs	r1, #7
 80057dc:	438a      	bics	r2, r1
 80057de:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6959      	ldr	r1, [r3, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fc:	2203      	movs	r2, #3
 80057fe:	4393      	bics	r3, r2
 8005800:	2201      	movs	r2, #1
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	0018      	movs	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	b002      	add	sp, #8
 8005810:	bd80      	pop	{r7, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	fffffefd 	.word	0xfffffefd
 8005818:	40012708 	.word	0x40012708
 800581c:	ffc3ffff 	.word	0xffc3ffff
 8005820:	fdffffff 	.word	0xfdffffff
 8005824:	fffe0219 	.word	0xfffe0219
 8005828:	fffffc03 	.word	0xfffffc03

0800582c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800582c:	b590      	push	{r4, r7, lr}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005834:	230f      	movs	r3, #15
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2204      	movs	r2, #4
 8005844:	4013      	ands	r3, r2
 8005846:	d138      	bne.n	80058ba <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2250      	movs	r2, #80	; 0x50
 800584c:	5c9b      	ldrb	r3, [r3, r2]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_ADC_Start+0x2a>
 8005852:	2302      	movs	r3, #2
 8005854:	e038      	b.n	80058c8 <HAL_ADC_Start+0x9c>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2250      	movs	r2, #80	; 0x50
 800585a:	2101      	movs	r1, #1
 800585c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d007      	beq.n	8005876 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005866:	230f      	movs	r3, #15
 8005868:	18fc      	adds	r4, r7, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	0018      	movs	r0, r3
 800586e:	f000 fb05 	bl	8005e7c <ADC_Enable>
 8005872:	0003      	movs	r3, r0
 8005874:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005876:	230f      	movs	r3, #15
 8005878:	18fb      	adds	r3, r7, r3
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d120      	bne.n	80058c2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005884:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <HAL_ADC_Start+0xa4>)
 8005886:	4013      	ands	r3, r2
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	0052      	lsls	r2, r2, #1
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2250      	movs	r2, #80	; 0x50
 800589c:	2100      	movs	r1, #0
 800589e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	221c      	movs	r2, #28
 80058a6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2104      	movs	r1, #4
 80058b4:	430a      	orrs	r2, r1
 80058b6:	609a      	str	r2, [r3, #8]
 80058b8:	e003      	b.n	80058c2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80058ba:	230f      	movs	r3, #15
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	2202      	movs	r2, #2
 80058c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80058c2:	230f      	movs	r3, #15
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	781b      	ldrb	r3, [r3, #0]
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b005      	add	sp, #20
 80058ce:	bd90      	pop	{r4, r7, pc}
 80058d0:	fffff0fe 	.word	0xfffff0fe

080058d4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80058d4:	b5b0      	push	{r4, r5, r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058dc:	230f      	movs	r3, #15
 80058de:	18fb      	adds	r3, r7, r3
 80058e0:	2200      	movs	r2, #0
 80058e2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2250      	movs	r2, #80	; 0x50
 80058e8:	5c9b      	ldrb	r3, [r3, r2]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_ADC_Stop+0x1e>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e029      	b.n	8005946 <HAL_ADC_Stop+0x72>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2250      	movs	r2, #80	; 0x50
 80058f6:	2101      	movs	r1, #1
 80058f8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80058fa:	250f      	movs	r5, #15
 80058fc:	197c      	adds	r4, r7, r5
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0018      	movs	r0, r3
 8005902:	f000 fb7b 	bl	8005ffc <ADC_ConversionStop>
 8005906:	0003      	movs	r3, r0
 8005908:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800590a:	197b      	adds	r3, r7, r5
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d112      	bne.n	8005938 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005912:	197c      	adds	r4, r7, r5
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	0018      	movs	r0, r3
 8005918:	f000 fb10 	bl	8005f3c <ADC_Disable>
 800591c:	0003      	movs	r3, r0
 800591e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005920:	197b      	adds	r3, r7, r5
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d107      	bne.n	8005938 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592c:	4a08      	ldr	r2, [pc, #32]	; (8005950 <HAL_ADC_Stop+0x7c>)
 800592e:	4013      	ands	r3, r2
 8005930:	2201      	movs	r2, #1
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2250      	movs	r2, #80	; 0x50
 800593c:	2100      	movs	r1, #0
 800593e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005940:	230f      	movs	r3, #15
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	781b      	ldrb	r3, [r3, #0]
}
 8005946:	0018      	movs	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	b004      	add	sp, #16
 800594c:	bdb0      	pop	{r4, r5, r7, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	fffffefe 	.word	0xfffffefe

08005954 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2b08      	cmp	r3, #8
 800596c:	d102      	bne.n	8005974 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800596e:	2308      	movs	r3, #8
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	e014      	b.n	800599e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	4013      	ands	r3, r2
 800597e:	2b01      	cmp	r3, #1
 8005980:	d10b      	bne.n	800599a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005986:	2220      	movs	r2, #32
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2250      	movs	r2, #80	; 0x50
 8005992:	2100      	movs	r1, #0
 8005994:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e06c      	b.n	8005a74 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800599a:	230c      	movs	r3, #12
 800599c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800599e:	f7ff fda3 	bl	80054e8 <HAL_GetTick>
 80059a2:	0003      	movs	r3, r0
 80059a4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80059a6:	e019      	b.n	80059dc <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	d016      	beq.n	80059dc <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <HAL_ADC_PollForConversion+0x70>
 80059b4:	f7ff fd98 	bl	80054e8 <HAL_GetTick>
 80059b8:	0002      	movs	r2, r0
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d20b      	bcs.n	80059dc <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c8:	2204      	movs	r2, #4
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2250      	movs	r2, #80	; 0x50
 80059d4:	2100      	movs	r1, #0
 80059d6:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e04b      	b.n	8005a74 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4013      	ands	r3, r2
 80059e6:	d0df      	beq.n	80059a8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	0092      	lsls	r2, r2, #2
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	23c0      	movs	r3, #192	; 0xc0
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	4013      	ands	r3, r2
 8005a02:	d12e      	bne.n	8005a62 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d129      	bne.n	8005a62 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2208      	movs	r2, #8
 8005a16:	4013      	ands	r3, r2
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d122      	bne.n	8005a62 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	2204      	movs	r2, #4
 8005a24:	4013      	ands	r3, r2
 8005a26:	d110      	bne.n	8005a4a <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	210c      	movs	r1, #12
 8005a34:	438a      	bics	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	4a0f      	ldr	r2, [pc, #60]	; (8005a7c <HAL_ADC_PollForConversion+0x128>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2201      	movs	r2, #1
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	655a      	str	r2, [r3, #84]	; 0x54
 8005a48:	e00b      	b.n	8005a62 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	2220      	movs	r2, #32
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	220c      	movs	r2, #12
 8005a70:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	0018      	movs	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b004      	add	sp, #16
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	fffffefe 	.word	0xfffffefe

08005a80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005a8e:	0018      	movs	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b002      	add	sp, #8
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d106      	bne.n	8005abc <HAL_ADC_IRQHandler+0x24>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d00d      	beq.n	8005ad8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2208      	movs	r2, #8
 8005ac4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d154      	bne.n	8005b74 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d14d      	bne.n	8005b74 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	2210      	movs	r2, #16
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d106      	bne.n	8005af0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	0092      	lsls	r2, r2, #2
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	23c0      	movs	r3, #192	; 0xc0
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4013      	ands	r3, r2
 8005afc:	d12e      	bne.n	8005b5c <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d129      	bne.n	8005b5c <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2208      	movs	r2, #8
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d122      	bne.n	8005b5c <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d110      	bne.n	8005b44 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	210c      	movs	r1, #12
 8005b2e:	438a      	bics	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	4a35      	ldr	r2, [pc, #212]	; (8005c0c <HAL_ADC_IRQHandler+0x174>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	655a      	str	r2, [r3, #84]	; 0x54
 8005b42:	e00b      	b.n	8005b5c <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b48:	2220      	movs	r2, #32
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b54:	2201      	movs	r2, #1
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7fe fb62 	bl	8004228 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d003      	beq.n	8005b74 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	220c      	movs	r2, #12
 8005b72:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b80      	cmp	r3, #128	; 0x80
 8005b80:	d115      	bne.n	8005bae <HAL_ADC_IRQHandler+0x116>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2280      	movs	r2, #128	; 0x80
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b80      	cmp	r3, #128	; 0x80
 8005b8e:	d10e      	bne.n	8005bae <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b94:	2280      	movs	r2, #128	; 0x80
 8005b96:	0252      	lsls	r2, r2, #9
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f7fe f941 	bl	8003e28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2280      	movs	r2, #128	; 0x80
 8005bac:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2210      	movs	r2, #16
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d123      	bne.n	8005c04 <HAL_ADC_IRQHandler+0x16c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2210      	movs	r2, #16
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2b10      	cmp	r3, #16
 8005bc8:	d11c      	bne.n	8005c04 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d006      	beq.n	8005be0 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d10d      	bne.n	8005bfc <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	2202      	movs	r2, #2
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f80a 	bl	8005c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2210      	movs	r2, #16
 8005c02:	601a      	str	r2, [r3, #0]
  }
  
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	46bd      	mov	sp, r7
 8005c08:	b002      	add	sp, #8
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	fffffefe 	.word	0xfffffefe

08005c10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005c18:	46c0      	nop			; (mov r8, r8)
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b002      	add	sp, #8
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2250      	movs	r2, #80	; 0x50
 8005c2e:	5c9b      	ldrb	r3, [r3, r2]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_ADC_ConfigChannel+0x18>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e085      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x124>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2250      	movs	r2, #80	; 0x50
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2204      	movs	r2, #4
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c50:	2220      	movs	r2, #32
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2250      	movs	r2, #80	; 0x50
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e06f      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4a38      	ldr	r2, [pc, #224]	; (8005d4c <HAL_ADC_ConfigChannel+0x12c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d035      	beq.n	8005cda <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	035b      	lsls	r3, r3, #13
 8005c7a:	0b5a      	lsrs	r2, r3, #13
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	02db      	lsls	r3, r3, #11
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8005c90:	4b2f      	ldr	r3, [pc, #188]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b2e      	ldr	r3, [pc, #184]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005c96:	2180      	movs	r1, #128	; 0x80
 8005c98:	0409      	lsls	r1, r1, #16
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005c9e:	200a      	movs	r0, #10
 8005ca0:	f000 f9f2 	bl	8006088 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	029b      	lsls	r3, r3, #10
 8005cac:	4013      	ands	r3, r2
 8005cae:	d006      	beq.n	8005cbe <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8005cb0:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005cb6:	2180      	movs	r1, #128	; 0x80
 8005cb8:	03c9      	lsls	r1, r1, #15
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	025b      	lsls	r3, r3, #9
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d037      	beq.n	8005d3a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8005cca:	4b21      	ldr	r3, [pc, #132]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	0449      	lsls	r1, r1, #17
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	e02f      	b.n	8005d3a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	035b      	lsls	r3, r3, #13
 8005ce6:	0b5b      	lsrs	r3, r3, #13
 8005ce8:	43d9      	mvns	r1, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	400a      	ands	r2, r1
 8005cf0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	2380      	movs	r3, #128	; 0x80
 8005cf8:	02db      	lsls	r3, r3, #11
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	d005      	beq.n	8005d0a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005cfe:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005d04:	4913      	ldr	r1, [pc, #76]	; (8005d54 <HAL_ADC_ConfigChannel+0x134>)
 8005d06:	400a      	ands	r2, r1
 8005d08:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	029b      	lsls	r3, r3, #10
 8005d12:	4013      	ands	r3, r2
 8005d14:	d005      	beq.n	8005d22 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005d16:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005d1c:	490e      	ldr	r1, [pc, #56]	; (8005d58 <HAL_ADC_ConfigChannel+0x138>)
 8005d1e:	400a      	ands	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	025b      	lsls	r3, r3, #9
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d005      	beq.n	8005d3a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <HAL_ADC_ConfigChannel+0x130>)
 8005d34:	4909      	ldr	r1, [pc, #36]	; (8005d5c <HAL_ADC_ConfigChannel+0x13c>)
 8005d36:	400a      	ands	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2250      	movs	r2, #80	; 0x50
 8005d3e:	2100      	movs	r1, #0
 8005d40:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	0018      	movs	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	b002      	add	sp, #8
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	00001001 	.word	0x00001001
 8005d50:	40012708 	.word	0x40012708
 8005d54:	ff7fffff 	.word	0xff7fffff
 8005d58:	ffbfffff 	.word	0xffbfffff
 8005d5c:	feffffff 	.word	0xfeffffff

08005d60 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d6a:	2317      	movs	r3, #23
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	2200      	movs	r2, #0
 8005d70:	701a      	strb	r2, [r3, #0]
  /* Verify if threshold is within the selected ADC resolution */
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2250      	movs	r2, #80	; 0x50
 8005d76:	5c9b      	ldrb	r3, [r3, r2]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_ADC_AnalogWDGConfig+0x20>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e074      	b.n	8005e6a <HAL_ADC_AnalogWDGConfig+0x10a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2250      	movs	r2, #80	; 0x50
 8005d84:	2101      	movs	r1, #1
 8005d86:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	4013      	ands	r3, r2
 8005d92:	d159      	bne.n	8005e48 <HAL_ADC_AnalogWDGConfig+0xe8>
  {
    /* Configure ADC Analog watchdog interrupt */
    if(AnalogWDGConfig->ITMode == ENABLE)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	7a1b      	ldrb	r3, [r3, #8]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d108      	bne.n	8005dae <HAL_ADC_AnalogWDGConfig+0x4e>
    {
      /* Enable the ADC Analog watchdog interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2180      	movs	r1, #128	; 0x80
 8005da8:	430a      	orrs	r2, r1
 8005daa:	605a      	str	r2, [r3, #4]
 8005dac:	e007      	b.n	8005dbe <HAL_ADC_AnalogWDGConfig+0x5e>
    }
    else
    {
      /* Disable the ADC Analog watchdog interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2180      	movs	r1, #128	; 0x80
 8005dba:	438a      	bics	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
    
    /* Configuration of analog watchdog:                                        */
    /*  - Set the analog watchdog mode                                          */
    /*  - Set the Analog watchdog channel (is not used if watchdog              */
    /*    mode "all channels": ADC_CFGR1_AWD1SGL=0)                             */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	492a      	ldr	r1, [pc, #168]	; (8005e74 <HAL_ADC_AnalogWDGConfig+0x114>)
 8005dca:	400a      	ands	r2, r1
 8005dcc:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_AWDEN  |
                               ADC_CFGR1_AWDCH);
    
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode |
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68d9      	ldr	r1, [r3, #12]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	6858      	ldr	r0, [r3, #4]
 8005ddc:	23f8      	movs	r3, #248	; 0xf8
 8005dde:	05db      	lsls	r3, r3, #23
 8005de0:	4003      	ands	r3, r0
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode |
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	60da      	str	r2, [r3, #12]
    
    
    /* Shift the offset in function of the selected ADC resolution: Thresholds  */
    /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0     */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	08db      	lsrs	r3, r3, #3
 8005df8:	2103      	movs	r1, #3
 8005dfa:	400b      	ands	r3, r1
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	0013      	movs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	08db      	lsrs	r3, r3, #3
 8005e10:	2103      	movs	r1, #3
 8005e12:	400b      	ands	r3, r1
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	409a      	lsls	r2, r3
 8005e18:	0013      	movs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
    
    /* Clear High & Low high thresholds */
    hadc->Instance->TR &= (uint32_t) ~ (ADC_TR_HT | ADC_TR_LT);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a1a      	ldr	r2, [r3, #32]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4914      	ldr	r1, [pc, #80]	; (8005e78 <HAL_ADC_AnalogWDGConfig+0x118>)
 8005e28:	400a      	ands	r2, r1
 8005e2a:	621a      	str	r2, [r3, #32]
    
    /* Set the high threshold */
    hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	0412      	lsls	r2, r2, #16
 8005e34:	621a      	str	r2, [r3, #32]
    /* Set the low threshold */
    hadc->Instance->TR |= tmpAWDLowThresholdShifted;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6a19      	ldr	r1, [r3, #32]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	621a      	str	r2, [r3, #32]
 8005e46:	e009      	b.n	8005e5c <HAL_ADC_AnalogWDGConfig+0xfc>
  /* If a conversion is on going on regular group, no update could be done    */
  /* on neither of the AWD configuration structure parameters.                */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8005e54:	2317      	movs	r3, #23
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	2201      	movs	r2, #1
 8005e5a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2250      	movs	r2, #80	; 0x50
 8005e60:	2100      	movs	r1, #0
 8005e62:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005e64:	2317      	movs	r3, #23
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	781b      	ldrb	r3, [r3, #0]
}
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	b006      	add	sp, #24
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	833fffff 	.word	0x833fffff
 8005e78:	f000f000 	.word	0xf000f000

08005e7c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2203      	movs	r2, #3
 8005e90:	4013      	ands	r3, r2
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d108      	bne.n	8005ea8 <ADC_Enable+0x2c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <ADC_Enable+0x2c>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <ADC_Enable+0x2e>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d13f      	bne.n	8005f2e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <ADC_Enable+0xbc>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d00d      	beq.n	8005ed6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebe:	2210      	movs	r2, #16
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eca:	2201      	movs	r2, #1
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e02c      	b.n	8005f30 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	f000 f8ce 	bl	8006088 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005eec:	f7ff fafc 	bl	80054e8 <HAL_GetTick>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005ef4:	e014      	b.n	8005f20 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ef6:	f7ff faf7 	bl	80054e8 <HAL_GetTick>
 8005efa:	0002      	movs	r2, r0
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b0a      	cmp	r3, #10
 8005f02:	d90d      	bls.n	8005f20 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	2210      	movs	r2, #16
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f14:	2201      	movs	r2, #1
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e007      	b.n	8005f30 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2201      	movs	r2, #1
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d1e3      	bne.n	8005ef6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	0018      	movs	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	b004      	add	sp, #16
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	80000017 	.word	0x80000017

08005f3c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2203      	movs	r2, #3
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d108      	bne.n	8005f68 <ADC_Disable+0x2c>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <ADC_Disable+0x2c>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <ADC_Disable+0x2e>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d041      	beq.n	8005ff2 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2205      	movs	r2, #5
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d110      	bne.n	8005f9e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2102      	movs	r1, #2
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	609a      	str	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2203      	movs	r2, #3
 8005f92:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f94:	f7ff faa8 	bl	80054e8 <HAL_GetTick>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005f9c:	e022      	b.n	8005fe4 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	2201      	movs	r2, #1
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e01c      	b.n	8005ff4 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005fba:	f7ff fa95 	bl	80054e8 <HAL_GetTick>
 8005fbe:	0002      	movs	r2, r0
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b0a      	cmp	r3, #10
 8005fc6:	d90d      	bls.n	8005fe4 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fcc:	2210      	movs	r2, #16
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd8:	2201      	movs	r2, #1
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e007      	b.n	8005ff4 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2201      	movs	r2, #1
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d0e3      	beq.n	8005fba <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	b004      	add	sp, #16
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2204      	movs	r2, #4
 8006010:	4013      	ands	r3, r2
 8006012:	d034      	beq.n	800607e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2204      	movs	r2, #4
 800601c:	4013      	ands	r3, r2
 800601e:	2b04      	cmp	r3, #4
 8006020:	d10d      	bne.n	800603e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2202      	movs	r2, #2
 800602a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800602c:	d107      	bne.n	800603e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2110      	movs	r1, #16
 800603a:	430a      	orrs	r2, r1
 800603c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800603e:	f7ff fa53 	bl	80054e8 <HAL_GetTick>
 8006042:	0003      	movs	r3, r0
 8006044:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006046:	e014      	b.n	8006072 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006048:	f7ff fa4e 	bl	80054e8 <HAL_GetTick>
 800604c:	0002      	movs	r2, r0
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b0a      	cmp	r3, #10
 8006054:	d90d      	bls.n	8006072 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	2210      	movs	r2, #16
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006066:	2201      	movs	r2, #1
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e006      	b.n	8006080 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2204      	movs	r2, #4
 800607a:	4013      	ands	r3, r2
 800607c:	d1e4      	bne.n	8006048 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	0018      	movs	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	b004      	add	sp, #16
 8006086:	bd80      	pop	{r7, pc}

08006088 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <ADC_DelayMicroSecond+0x38>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	490b      	ldr	r1, [pc, #44]	; (80060c4 <ADC_DelayMicroSecond+0x3c>)
 8006096:	0018      	movs	r0, r3
 8006098:	f7fa f836 	bl	8000108 <__udivsi3>
 800609c:	0003      	movs	r3, r0
 800609e:	001a      	movs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4353      	muls	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80060a6:	e002      	b.n	80060ae <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1f9      	bne.n	80060a8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80060b4:	46c0      	nop			; (mov r8, r8)
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b004      	add	sp, #16
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	2000001c 	.word	0x2000001c
 80060c4:	000f4240 	.word	0x000f4240

080060c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	0002      	movs	r2, r0
 80060d0:	1dfb      	adds	r3, r7, #7
 80060d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80060d4:	1dfb      	adds	r3, r7, #7
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b7f      	cmp	r3, #127	; 0x7f
 80060da:	d809      	bhi.n	80060f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060dc:	1dfb      	adds	r3, r7, #7
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	001a      	movs	r2, r3
 80060e2:	231f      	movs	r3, #31
 80060e4:	401a      	ands	r2, r3
 80060e6:	4b04      	ldr	r3, [pc, #16]	; (80060f8 <__NVIC_EnableIRQ+0x30>)
 80060e8:	2101      	movs	r1, #1
 80060ea:	4091      	lsls	r1, r2
 80060ec:	000a      	movs	r2, r1
 80060ee:	601a      	str	r2, [r3, #0]
  }
}
 80060f0:	46c0      	nop			; (mov r8, r8)
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b002      	add	sp, #8
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	e000e100 	.word	0xe000e100

080060fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	0002      	movs	r2, r0
 8006104:	6039      	str	r1, [r7, #0]
 8006106:	1dfb      	adds	r3, r7, #7
 8006108:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800610a:	1dfb      	adds	r3, r7, #7
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b7f      	cmp	r3, #127	; 0x7f
 8006110:	d828      	bhi.n	8006164 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006112:	4a2f      	ldr	r2, [pc, #188]	; (80061d0 <__NVIC_SetPriority+0xd4>)
 8006114:	1dfb      	adds	r3, r7, #7
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	b25b      	sxtb	r3, r3
 800611a:	089b      	lsrs	r3, r3, #2
 800611c:	33c0      	adds	r3, #192	; 0xc0
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	589b      	ldr	r3, [r3, r2]
 8006122:	1dfa      	adds	r2, r7, #7
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	0011      	movs	r1, r2
 8006128:	2203      	movs	r2, #3
 800612a:	400a      	ands	r2, r1
 800612c:	00d2      	lsls	r2, r2, #3
 800612e:	21ff      	movs	r1, #255	; 0xff
 8006130:	4091      	lsls	r1, r2
 8006132:	000a      	movs	r2, r1
 8006134:	43d2      	mvns	r2, r2
 8006136:	401a      	ands	r2, r3
 8006138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	019b      	lsls	r3, r3, #6
 800613e:	22ff      	movs	r2, #255	; 0xff
 8006140:	401a      	ands	r2, r3
 8006142:	1dfb      	adds	r3, r7, #7
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	0018      	movs	r0, r3
 8006148:	2303      	movs	r3, #3
 800614a:	4003      	ands	r3, r0
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006150:	481f      	ldr	r0, [pc, #124]	; (80061d0 <__NVIC_SetPriority+0xd4>)
 8006152:	1dfb      	adds	r3, r7, #7
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b25b      	sxtb	r3, r3
 8006158:	089b      	lsrs	r3, r3, #2
 800615a:	430a      	orrs	r2, r1
 800615c:	33c0      	adds	r3, #192	; 0xc0
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006162:	e031      	b.n	80061c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006164:	4a1b      	ldr	r2, [pc, #108]	; (80061d4 <__NVIC_SetPriority+0xd8>)
 8006166:	1dfb      	adds	r3, r7, #7
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	0019      	movs	r1, r3
 800616c:	230f      	movs	r3, #15
 800616e:	400b      	ands	r3, r1
 8006170:	3b08      	subs	r3, #8
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	3306      	adds	r3, #6
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	18d3      	adds	r3, r2, r3
 800617a:	3304      	adds	r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	1dfa      	adds	r2, r7, #7
 8006180:	7812      	ldrb	r2, [r2, #0]
 8006182:	0011      	movs	r1, r2
 8006184:	2203      	movs	r2, #3
 8006186:	400a      	ands	r2, r1
 8006188:	00d2      	lsls	r2, r2, #3
 800618a:	21ff      	movs	r1, #255	; 0xff
 800618c:	4091      	lsls	r1, r2
 800618e:	000a      	movs	r2, r1
 8006190:	43d2      	mvns	r2, r2
 8006192:	401a      	ands	r2, r3
 8006194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	019b      	lsls	r3, r3, #6
 800619a:	22ff      	movs	r2, #255	; 0xff
 800619c:	401a      	ands	r2, r3
 800619e:	1dfb      	adds	r3, r7, #7
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	0018      	movs	r0, r3
 80061a4:	2303      	movs	r3, #3
 80061a6:	4003      	ands	r3, r0
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80061ac:	4809      	ldr	r0, [pc, #36]	; (80061d4 <__NVIC_SetPriority+0xd8>)
 80061ae:	1dfb      	adds	r3, r7, #7
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	001c      	movs	r4, r3
 80061b4:	230f      	movs	r3, #15
 80061b6:	4023      	ands	r3, r4
 80061b8:	3b08      	subs	r3, #8
 80061ba:	089b      	lsrs	r3, r3, #2
 80061bc:	430a      	orrs	r2, r1
 80061be:	3306      	adds	r3, #6
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	18c3      	adds	r3, r0, r3
 80061c4:	3304      	adds	r3, #4
 80061c6:	601a      	str	r2, [r3, #0]
}
 80061c8:	46c0      	nop			; (mov r8, r8)
 80061ca:	46bd      	mov	sp, r7
 80061cc:	b003      	add	sp, #12
 80061ce:	bd90      	pop	{r4, r7, pc}
 80061d0:	e000e100 	.word	0xe000e100
 80061d4:	e000ed00 	.word	0xe000ed00

080061d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	1e5a      	subs	r2, r3, #1
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	045b      	lsls	r3, r3, #17
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d301      	bcc.n	80061f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061ec:	2301      	movs	r3, #1
 80061ee:	e010      	b.n	8006212 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <SysTick_Config+0x44>)
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	3a01      	subs	r2, #1
 80061f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061f8:	2301      	movs	r3, #1
 80061fa:	425b      	negs	r3, r3
 80061fc:	2103      	movs	r1, #3
 80061fe:	0018      	movs	r0, r3
 8006200:	f7ff ff7c 	bl	80060fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <SysTick_Config+0x44>)
 8006206:	2200      	movs	r2, #0
 8006208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800620a:	4b04      	ldr	r3, [pc, #16]	; (800621c <SysTick_Config+0x44>)
 800620c:	2207      	movs	r2, #7
 800620e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006210:	2300      	movs	r3, #0
}
 8006212:	0018      	movs	r0, r3
 8006214:	46bd      	mov	sp, r7
 8006216:	b002      	add	sp, #8
 8006218:	bd80      	pop	{r7, pc}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	e000e010 	.word	0xe000e010

08006220 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	210f      	movs	r1, #15
 800622c:	187b      	adds	r3, r7, r1
 800622e:	1c02      	adds	r2, r0, #0
 8006230:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	187b      	adds	r3, r7, r1
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	b25b      	sxtb	r3, r3
 800623a:	0011      	movs	r1, r2
 800623c:	0018      	movs	r0, r3
 800623e:	f7ff ff5d 	bl	80060fc <__NVIC_SetPriority>
}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	46bd      	mov	sp, r7
 8006246:	b004      	add	sp, #16
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	0002      	movs	r2, r0
 8006252:	1dfb      	adds	r3, r7, #7
 8006254:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006256:	1dfb      	adds	r3, r7, #7
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	b25b      	sxtb	r3, r3
 800625c:	0018      	movs	r0, r3
 800625e:	f7ff ff33 	bl	80060c8 <__NVIC_EnableIRQ>
}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	46bd      	mov	sp, r7
 8006266:	b002      	add	sp, #8
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0018      	movs	r0, r3
 8006276:	f7ff ffaf 	bl	80061d8 <SysTick_Config>
 800627a:	0003      	movs	r3, r0
}
 800627c:	0018      	movs	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	b002      	add	sp, #8
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e061      	b.n	800635a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a32      	ldr	r2, [pc, #200]	; (8006364 <HAL_DMA_Init+0xe0>)
 800629c:	4694      	mov	ip, r2
 800629e:	4463      	add	r3, ip
 80062a0:	2114      	movs	r1, #20
 80062a2:	0018      	movs	r0, r3
 80062a4:	f7f9 ff30 	bl	8000108 <__udivsi3>
 80062a8:	0003      	movs	r3, r0
 80062aa:	009a      	lsls	r2, r3, #2
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a2d      	ldr	r2, [pc, #180]	; (8006368 <HAL_DMA_Init+0xe4>)
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2225      	movs	r2, #37	; 0x25
 80062ba:	2102      	movs	r1, #2
 80062bc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4a28      	ldr	r2, [pc, #160]	; (800636c <HAL_DMA_Init+0xe8>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80062d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	01db      	lsls	r3, r3, #7
 800630c:	429a      	cmp	r2, r3
 800630e:	d018      	beq.n	8006342 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006310:	4b17      	ldr	r3, [pc, #92]	; (8006370 <HAL_DMA_Init+0xec>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006318:	211c      	movs	r1, #28
 800631a:	400b      	ands	r3, r1
 800631c:	210f      	movs	r1, #15
 800631e:	4099      	lsls	r1, r3
 8006320:	000b      	movs	r3, r1
 8006322:	43d9      	mvns	r1, r3
 8006324:	4b12      	ldr	r3, [pc, #72]	; (8006370 <HAL_DMA_Init+0xec>)
 8006326:	400a      	ands	r2, r1
 8006328:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800632a:	4b11      	ldr	r3, [pc, #68]	; (8006370 <HAL_DMA_Init+0xec>)
 800632c:	6819      	ldr	r1, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006336:	201c      	movs	r0, #28
 8006338:	4003      	ands	r3, r0
 800633a:	409a      	lsls	r2, r3
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <HAL_DMA_Init+0xec>)
 800633e:	430a      	orrs	r2, r1
 8006340:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2225      	movs	r2, #37	; 0x25
 800634c:	2101      	movs	r1, #1
 800634e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2224      	movs	r2, #36	; 0x24
 8006354:	2100      	movs	r1, #0
 8006356:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	0018      	movs	r0, r3
 800635c:	46bd      	mov	sp, r7
 800635e:	b004      	add	sp, #16
 8006360:	bd80      	pop	{r7, pc}
 8006362:	46c0      	nop			; (mov r8, r8)
 8006364:	bffdfff8 	.word	0xbffdfff8
 8006368:	40020000 	.word	0x40020000
 800636c:	ffff800f 	.word	0xffff800f
 8006370:	400200a8 	.word	0x400200a8

08006374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006390:	221c      	movs	r2, #28
 8006392:	4013      	ands	r3, r2
 8006394:	2204      	movs	r2, #4
 8006396:	409a      	lsls	r2, r3
 8006398:	0013      	movs	r3, r2
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4013      	ands	r3, r2
 800639e:	d026      	beq.n	80063ee <HAL_DMA_IRQHandler+0x7a>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2204      	movs	r2, #4
 80063a4:	4013      	ands	r3, r2
 80063a6:	d022      	beq.n	80063ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2220      	movs	r2, #32
 80063b0:	4013      	ands	r3, r2
 80063b2:	d107      	bne.n	80063c4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2104      	movs	r1, #4
 80063c0:	438a      	bics	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c8:	221c      	movs	r2, #28
 80063ca:	401a      	ands	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	2104      	movs	r1, #4
 80063d2:	4091      	lsls	r1, r2
 80063d4:	000a      	movs	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d100      	bne.n	80063e2 <HAL_DMA_IRQHandler+0x6e>
 80063e0:	e071      	b.n	80064c6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	0010      	movs	r0, r2
 80063ea:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80063ec:	e06b      	b.n	80064c6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	221c      	movs	r2, #28
 80063f4:	4013      	ands	r3, r2
 80063f6:	2202      	movs	r2, #2
 80063f8:	409a      	lsls	r2, r3
 80063fa:	0013      	movs	r3, r2
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4013      	ands	r3, r2
 8006400:	d02d      	beq.n	800645e <HAL_DMA_IRQHandler+0xea>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2202      	movs	r2, #2
 8006406:	4013      	ands	r3, r2
 8006408:	d029      	beq.n	800645e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2220      	movs	r2, #32
 8006412:	4013      	ands	r3, r2
 8006414:	d10b      	bne.n	800642e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	210a      	movs	r1, #10
 8006422:	438a      	bics	r2, r1
 8006424:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2225      	movs	r2, #37	; 0x25
 800642a:	2101      	movs	r1, #1
 800642c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006432:	221c      	movs	r2, #28
 8006434:	401a      	ands	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2102      	movs	r1, #2
 800643c:	4091      	lsls	r1, r2
 800643e:	000a      	movs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2224      	movs	r2, #36	; 0x24
 8006446:	2100      	movs	r1, #0
 8006448:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d039      	beq.n	80064c6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	0010      	movs	r0, r2
 800645a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800645c:	e033      	b.n	80064c6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006462:	221c      	movs	r2, #28
 8006464:	4013      	ands	r3, r2
 8006466:	2208      	movs	r2, #8
 8006468:	409a      	lsls	r2, r3
 800646a:	0013      	movs	r3, r2
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4013      	ands	r3, r2
 8006470:	d02a      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x154>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2208      	movs	r2, #8
 8006476:	4013      	ands	r3, r2
 8006478:	d026      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	210e      	movs	r1, #14
 8006486:	438a      	bics	r2, r1
 8006488:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648e:	221c      	movs	r2, #28
 8006490:	401a      	ands	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	2101      	movs	r1, #1
 8006498:	4091      	lsls	r1, r2
 800649a:	000a      	movs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2225      	movs	r2, #37	; 0x25
 80064a8:	2101      	movs	r1, #1
 80064aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2224      	movs	r2, #36	; 0x24
 80064b0:	2100      	movs	r1, #0
 80064b2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	0010      	movs	r0, r2
 80064c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	46c0      	nop			; (mov r8, r8)
}
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b004      	add	sp, #16
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80064e6:	e14f      	b.n	8006788 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2101      	movs	r1, #1
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4091      	lsls	r1, r2
 80064f2:	000a      	movs	r2, r1
 80064f4:	4013      	ands	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d100      	bne.n	8006500 <HAL_GPIO_Init+0x30>
 80064fe:	e140      	b.n	8006782 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d00b      	beq.n	8006520 <HAL_GPIO_Init+0x50>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d007      	beq.n	8006520 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006514:	2b11      	cmp	r3, #17
 8006516:	d003      	beq.n	8006520 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b12      	cmp	r3, #18
 800651e:	d130      	bne.n	8006582 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	2203      	movs	r2, #3
 800652c:	409a      	lsls	r2, r3
 800652e:	0013      	movs	r3, r2
 8006530:	43da      	mvns	r2, r3
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4013      	ands	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	409a      	lsls	r2, r3
 8006542:	0013      	movs	r3, r2
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006556:	2201      	movs	r2, #1
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	409a      	lsls	r2, r3
 800655c:	0013      	movs	r3, r2
 800655e:	43da      	mvns	r2, r3
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	4013      	ands	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	091b      	lsrs	r3, r3, #4
 800656c:	2201      	movs	r2, #1
 800656e:	401a      	ands	r2, r3
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	409a      	lsls	r2, r3
 8006574:	0013      	movs	r3, r2
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	2203      	movs	r2, #3
 800658e:	409a      	lsls	r2, r3
 8006590:	0013      	movs	r3, r2
 8006592:	43da      	mvns	r2, r3
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	4013      	ands	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	409a      	lsls	r2, r3
 80065a4:	0013      	movs	r3, r2
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d003      	beq.n	80065c2 <HAL_GPIO_Init+0xf2>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b12      	cmp	r3, #18
 80065c0:	d123      	bne.n	800660a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	08da      	lsrs	r2, r3, #3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3208      	adds	r2, #8
 80065ca:	0092      	lsls	r2, r2, #2
 80065cc:	58d3      	ldr	r3, [r2, r3]
 80065ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2207      	movs	r2, #7
 80065d4:	4013      	ands	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	220f      	movs	r2, #15
 80065da:	409a      	lsls	r2, r3
 80065dc:	0013      	movs	r3, r2
 80065de:	43da      	mvns	r2, r3
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4013      	ands	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2107      	movs	r1, #7
 80065ee:	400b      	ands	r3, r1
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	409a      	lsls	r2, r3
 80065f4:	0013      	movs	r3, r2
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	08da      	lsrs	r2, r3, #3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3208      	adds	r2, #8
 8006604:	0092      	lsls	r2, r2, #2
 8006606:	6939      	ldr	r1, [r7, #16]
 8006608:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	2203      	movs	r2, #3
 8006616:	409a      	lsls	r2, r3
 8006618:	0013      	movs	r3, r2
 800661a:	43da      	mvns	r2, r3
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4013      	ands	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2203      	movs	r2, #3
 8006628:	401a      	ands	r2, r3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	409a      	lsls	r2, r3
 8006630:	0013      	movs	r3, r2
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	2380      	movs	r3, #128	; 0x80
 8006644:	055b      	lsls	r3, r3, #21
 8006646:	4013      	ands	r3, r2
 8006648:	d100      	bne.n	800664c <HAL_GPIO_Init+0x17c>
 800664a:	e09a      	b.n	8006782 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800664c:	4b54      	ldr	r3, [pc, #336]	; (80067a0 <HAL_GPIO_Init+0x2d0>)
 800664e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006650:	4b53      	ldr	r3, [pc, #332]	; (80067a0 <HAL_GPIO_Init+0x2d0>)
 8006652:	2101      	movs	r1, #1
 8006654:	430a      	orrs	r2, r1
 8006656:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006658:	4a52      	ldr	r2, [pc, #328]	; (80067a4 <HAL_GPIO_Init+0x2d4>)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	089b      	lsrs	r3, r3, #2
 800665e:	3302      	adds	r3, #2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	589b      	ldr	r3, [r3, r2]
 8006664:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2203      	movs	r2, #3
 800666a:	4013      	ands	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	220f      	movs	r2, #15
 8006670:	409a      	lsls	r2, r3
 8006672:	0013      	movs	r3, r2
 8006674:	43da      	mvns	r2, r3
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	4013      	ands	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	23a0      	movs	r3, #160	; 0xa0
 8006680:	05db      	lsls	r3, r3, #23
 8006682:	429a      	cmp	r2, r3
 8006684:	d019      	beq.n	80066ba <HAL_GPIO_Init+0x1ea>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a47      	ldr	r2, [pc, #284]	; (80067a8 <HAL_GPIO_Init+0x2d8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <HAL_GPIO_Init+0x1e6>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a46      	ldr	r2, [pc, #280]	; (80067ac <HAL_GPIO_Init+0x2dc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00d      	beq.n	80066b2 <HAL_GPIO_Init+0x1e2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a45      	ldr	r2, [pc, #276]	; (80067b0 <HAL_GPIO_Init+0x2e0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d007      	beq.n	80066ae <HAL_GPIO_Init+0x1de>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a44      	ldr	r2, [pc, #272]	; (80067b4 <HAL_GPIO_Init+0x2e4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d101      	bne.n	80066aa <HAL_GPIO_Init+0x1da>
 80066a6:	2305      	movs	r3, #5
 80066a8:	e008      	b.n	80066bc <HAL_GPIO_Init+0x1ec>
 80066aa:	2306      	movs	r3, #6
 80066ac:	e006      	b.n	80066bc <HAL_GPIO_Init+0x1ec>
 80066ae:	2303      	movs	r3, #3
 80066b0:	e004      	b.n	80066bc <HAL_GPIO_Init+0x1ec>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e002      	b.n	80066bc <HAL_GPIO_Init+0x1ec>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <HAL_GPIO_Init+0x1ec>
 80066ba:	2300      	movs	r3, #0
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	2103      	movs	r1, #3
 80066c0:	400a      	ands	r2, r1
 80066c2:	0092      	lsls	r2, r2, #2
 80066c4:	4093      	lsls	r3, r2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066cc:	4935      	ldr	r1, [pc, #212]	; (80067a4 <HAL_GPIO_Init+0x2d4>)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	089b      	lsrs	r3, r3, #2
 80066d2:	3302      	adds	r3, #2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066da:	4b37      	ldr	r3, [pc, #220]	; (80067b8 <HAL_GPIO_Init+0x2e8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	43da      	mvns	r2, r3
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	4013      	ands	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	2380      	movs	r3, #128	; 0x80
 80066f0:	025b      	lsls	r3, r3, #9
 80066f2:	4013      	ands	r3, r2
 80066f4:	d003      	beq.n	80066fe <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80066fe:	4b2e      	ldr	r3, [pc, #184]	; (80067b8 <HAL_GPIO_Init+0x2e8>)
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006704:	4b2c      	ldr	r3, [pc, #176]	; (80067b8 <HAL_GPIO_Init+0x2e8>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	43da      	mvns	r2, r3
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	4013      	ands	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	029b      	lsls	r3, r3, #10
 800671c:	4013      	ands	r3, r2
 800671e:	d003      	beq.n	8006728 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006728:	4b23      	ldr	r3, [pc, #140]	; (80067b8 <HAL_GPIO_Init+0x2e8>)
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800672e:	4b22      	ldr	r3, [pc, #136]	; (80067b8 <HAL_GPIO_Init+0x2e8>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	43da      	mvns	r2, r3
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4013      	ands	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	2380      	movs	r3, #128	; 0x80
 8006744:	035b      	lsls	r3, r3, #13
 8006746:	4013      	ands	r3, r2
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006752:	4b19      	ldr	r3, [pc, #100]	; (80067b8 <HAL_GPIO_Init+0x2e8>)
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006758:	4b17      	ldr	r3, [pc, #92]	; (80067b8 <HAL_GPIO_Init+0x2e8>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	43da      	mvns	r2, r3
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4013      	ands	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	2380      	movs	r3, #128	; 0x80
 800676e:	039b      	lsls	r3, r3, #14
 8006770:	4013      	ands	r3, r2
 8006772:	d003      	beq.n	800677c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800677c:	4b0e      	ldr	r3, [pc, #56]	; (80067b8 <HAL_GPIO_Init+0x2e8>)
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	3301      	adds	r3, #1
 8006786:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	40da      	lsrs	r2, r3
 8006790:	1e13      	subs	r3, r2, #0
 8006792:	d000      	beq.n	8006796 <HAL_GPIO_Init+0x2c6>
 8006794:	e6a8      	b.n	80064e8 <HAL_GPIO_Init+0x18>
  }
}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	46c0      	nop			; (mov r8, r8)
 800679a:	46bd      	mov	sp, r7
 800679c:	b006      	add	sp, #24
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40021000 	.word	0x40021000
 80067a4:	40010000 	.word	0x40010000
 80067a8:	50000400 	.word	0x50000400
 80067ac:	50000800 	.word	0x50000800
 80067b0:	50000c00 	.word	0x50000c00
 80067b4:	50001c00 	.word	0x50001c00
 80067b8:	40010400 	.word	0x40010400

080067bc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	0008      	movs	r0, r1
 80067c6:	0011      	movs	r1, r2
 80067c8:	1cbb      	adds	r3, r7, #2
 80067ca:	1c02      	adds	r2, r0, #0
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	1c7b      	adds	r3, r7, #1
 80067d0:	1c0a      	adds	r2, r1, #0
 80067d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067d4:	1c7b      	adds	r3, r7, #1
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d004      	beq.n	80067e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067dc:	1cbb      	adds	r3, r7, #2
 80067de:	881a      	ldrh	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80067e4:	e003      	b.n	80067ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80067e6:	1cbb      	adds	r3, r7, #2
 80067e8:	881a      	ldrh	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	46bd      	mov	sp, r7
 80067f2:	b002      	add	sp, #8
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	0002      	movs	r2, r0
 8006800:	1dbb      	adds	r3, r7, #6
 8006802:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	1dba      	adds	r2, r7, #6
 800680a:	8812      	ldrh	r2, [r2, #0]
 800680c:	4013      	ands	r3, r2
 800680e:	d008      	beq.n	8006822 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006812:	1dba      	adds	r2, r7, #6
 8006814:	8812      	ldrh	r2, [r2, #0]
 8006816:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006818:	1dbb      	adds	r3, r7, #6
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 f807 	bl	8006830 <HAL_GPIO_EXTI_Callback>
  }
}
 8006822:	46c0      	nop			; (mov r8, r8)
 8006824:	46bd      	mov	sp, r7
 8006826:	b002      	add	sp, #8
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	40010400 	.word	0x40010400

08006830 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	0002      	movs	r2, r0
 8006838:	1dbb      	adds	r3, r7, #6
 800683a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800683c:	46c0      	nop			; (mov r8, r8)
 800683e:	46bd      	mov	sp, r7
 8006840:	b002      	add	sp, #8
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e082      	b.n	800695c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2241      	movs	r2, #65	; 0x41
 800685a:	5c9b      	ldrb	r3, [r3, r2]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d107      	bne.n	8006872 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2240      	movs	r2, #64	; 0x40
 8006866:	2100      	movs	r1, #0
 8006868:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	0018      	movs	r0, r3
 800686e:	f7fd fa95 	bl	8003d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2241      	movs	r2, #65	; 0x41
 8006876:	2124      	movs	r1, #36	; 0x24
 8006878:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2101      	movs	r1, #1
 8006886:	438a      	bics	r2, r1
 8006888:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4934      	ldr	r1, [pc, #208]	; (8006964 <HAL_I2C_Init+0x120>)
 8006894:	400a      	ands	r2, r1
 8006896:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4931      	ldr	r1, [pc, #196]	; (8006968 <HAL_I2C_Init+0x124>)
 80068a4:	400a      	ands	r2, r1
 80068a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d108      	bne.n	80068c2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2180      	movs	r1, #128	; 0x80
 80068ba:	0209      	lsls	r1, r1, #8
 80068bc:	430a      	orrs	r2, r1
 80068be:	609a      	str	r2, [r3, #8]
 80068c0:	e007      	b.n	80068d2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2184      	movs	r1, #132	; 0x84
 80068cc:	0209      	lsls	r1, r1, #8
 80068ce:	430a      	orrs	r2, r1
 80068d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d104      	bne.n	80068e4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2280      	movs	r2, #128	; 0x80
 80068e0:	0112      	lsls	r2, r2, #4
 80068e2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	491f      	ldr	r1, [pc, #124]	; (800696c <HAL_I2C_Init+0x128>)
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	491a      	ldr	r1, [pc, #104]	; (8006968 <HAL_I2C_Init+0x124>)
 8006900:	400a      	ands	r2, r1
 8006902:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	431a      	orrs	r2, r3
 800690e:	0011      	movs	r1, r2
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	021a      	lsls	r2, r3, #8
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69d9      	ldr	r1, [r3, #28]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2101      	movs	r1, #1
 800693a:	430a      	orrs	r2, r1
 800693c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2241      	movs	r2, #65	; 0x41
 8006948:	2120      	movs	r1, #32
 800694a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2242      	movs	r2, #66	; 0x42
 8006956:	2100      	movs	r1, #0
 8006958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	0018      	movs	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	b002      	add	sp, #8
 8006962:	bd80      	pop	{r7, pc}
 8006964:	f0ffffff 	.word	0xf0ffffff
 8006968:	ffff7fff 	.word	0xffff7fff
 800696c:	02008000 	.word	0x02008000

08006970 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b089      	sub	sp, #36	; 0x24
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	000c      	movs	r4, r1
 800697a:	0010      	movs	r0, r2
 800697c:	0019      	movs	r1, r3
 800697e:	230a      	movs	r3, #10
 8006980:	18fb      	adds	r3, r7, r3
 8006982:	1c22      	adds	r2, r4, #0
 8006984:	801a      	strh	r2, [r3, #0]
 8006986:	2308      	movs	r3, #8
 8006988:	18fb      	adds	r3, r7, r3
 800698a:	1c02      	adds	r2, r0, #0
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	1dbb      	adds	r3, r7, #6
 8006990:	1c0a      	adds	r2, r1, #0
 8006992:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2241      	movs	r2, #65	; 0x41
 8006998:	5c9b      	ldrb	r3, [r3, r2]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b20      	cmp	r3, #32
 800699e:	d000      	beq.n	80069a2 <HAL_I2C_Mem_Write+0x32>
 80069a0:	e10c      	b.n	8006bbc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <HAL_I2C_Mem_Write+0x42>
 80069a8:	232c      	movs	r3, #44	; 0x2c
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2280      	movs	r2, #128	; 0x80
 80069b6:	0092      	lsls	r2, r2, #2
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e0ff      	b.n	8006bbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2240      	movs	r2, #64	; 0x40
 80069c2:	5c9b      	ldrb	r3, [r3, r2]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_I2C_Mem_Write+0x5c>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e0f8      	b.n	8006bbe <HAL_I2C_Mem_Write+0x24e>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2240      	movs	r2, #64	; 0x40
 80069d0:	2101      	movs	r1, #1
 80069d2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069d4:	f7fe fd88 	bl	80054e8 <HAL_GetTick>
 80069d8:	0003      	movs	r3, r0
 80069da:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069dc:	2380      	movs	r3, #128	; 0x80
 80069de:	0219      	lsls	r1, r3, #8
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	2319      	movs	r3, #25
 80069e8:	2201      	movs	r2, #1
 80069ea:	f000 fb0b 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 80069ee:	1e03      	subs	r3, r0, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e0e3      	b.n	8006bbe <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2241      	movs	r2, #65	; 0x41
 80069fa:	2121      	movs	r1, #33	; 0x21
 80069fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2242      	movs	r2, #66	; 0x42
 8006a02:	2140      	movs	r1, #64	; 0x40
 8006a04:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	222c      	movs	r2, #44	; 0x2c
 8006a16:	18ba      	adds	r2, r7, r2
 8006a18:	8812      	ldrh	r2, [r2, #0]
 8006a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a22:	1dbb      	adds	r3, r7, #6
 8006a24:	881c      	ldrh	r4, [r3, #0]
 8006a26:	2308      	movs	r3, #8
 8006a28:	18fb      	adds	r3, r7, r3
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	230a      	movs	r3, #10
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	8819      	ldrh	r1, [r3, #0]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	0023      	movs	r3, r4
 8006a3e:	f000 f9f9 	bl	8006e34 <I2C_RequestMemoryWrite>
 8006a42:	1e03      	subs	r3, r0, #0
 8006a44:	d005      	beq.n	8006a52 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2240      	movs	r2, #64	; 0x40
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e0b5      	b.n	8006bbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2bff      	cmp	r3, #255	; 0xff
 8006a5a:	d911      	bls.n	8006a80 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	22ff      	movs	r2, #255	; 0xff
 8006a60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	2380      	movs	r3, #128	; 0x80
 8006a6a:	045c      	lsls	r4, r3, #17
 8006a6c:	230a      	movs	r3, #10
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	8819      	ldrh	r1, [r3, #0]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	2300      	movs	r3, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	0023      	movs	r3, r4
 8006a7a:	f000 fbe3 	bl	8007244 <I2C_TransferConfig>
 8006a7e:	e012      	b.n	8006aa6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	2380      	movs	r3, #128	; 0x80
 8006a92:	049c      	lsls	r4, r3, #18
 8006a94:	230a      	movs	r3, #10
 8006a96:	18fb      	adds	r3, r7, r3
 8006a98:	8819      	ldrh	r1, [r3, #0]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	0023      	movs	r3, r4
 8006aa2:	f000 fbcf 	bl	8007244 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	0018      	movs	r0, r3
 8006aae:	f000 fae8 	bl	8007082 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ab2:	1e03      	subs	r3, r0, #0
 8006ab4:	d001      	beq.n	8006aba <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e081      	b.n	8006bbe <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	781a      	ldrb	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d03a      	beq.n	8006b6a <HAL_I2C_Mem_Write+0x1fa>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d136      	bne.n	8006b6a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	0013      	movs	r3, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	2180      	movs	r1, #128	; 0x80
 8006b0a:	f000 fa7b 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006b0e:	1e03      	subs	r3, r0, #0
 8006b10:	d001      	beq.n	8006b16 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e053      	b.n	8006bbe <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2bff      	cmp	r3, #255	; 0xff
 8006b1e:	d911      	bls.n	8006b44 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	22ff      	movs	r2, #255	; 0xff
 8006b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	045c      	lsls	r4, r3, #17
 8006b30:	230a      	movs	r3, #10
 8006b32:	18fb      	adds	r3, r7, r3
 8006b34:	8819      	ldrh	r1, [r3, #0]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	0023      	movs	r3, r4
 8006b3e:	f000 fb81 	bl	8007244 <I2C_TransferConfig>
 8006b42:	e012      	b.n	8006b6a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	2380      	movs	r3, #128	; 0x80
 8006b56:	049c      	lsls	r4, r3, #18
 8006b58:	230a      	movs	r3, #10
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	8819      	ldrh	r1, [r3, #0]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	2300      	movs	r3, #0
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	0023      	movs	r3, r4
 8006b66:	f000 fb6d 	bl	8007244 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d198      	bne.n	8006aa6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f000 fac0 	bl	8007100 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b80:	1e03      	subs	r3, r0, #0
 8006b82:	d001      	beq.n	8006b88 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e01a      	b.n	8006bbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	490b      	ldr	r1, [pc, #44]	; (8006bc8 <HAL_I2C_Mem_Write+0x258>)
 8006b9c:	400a      	ands	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2241      	movs	r2, #65	; 0x41
 8006ba4:	2120      	movs	r1, #32
 8006ba6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2242      	movs	r2, #66	; 0x42
 8006bac:	2100      	movs	r1, #0
 8006bae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2240      	movs	r2, #64	; 0x40
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b007      	add	sp, #28
 8006bc4:	bd90      	pop	{r4, r7, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	fe00e800 	.word	0xfe00e800

08006bcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bcc:	b590      	push	{r4, r7, lr}
 8006bce:	b089      	sub	sp, #36	; 0x24
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	000c      	movs	r4, r1
 8006bd6:	0010      	movs	r0, r2
 8006bd8:	0019      	movs	r1, r3
 8006bda:	230a      	movs	r3, #10
 8006bdc:	18fb      	adds	r3, r7, r3
 8006bde:	1c22      	adds	r2, r4, #0
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	2308      	movs	r3, #8
 8006be4:	18fb      	adds	r3, r7, r3
 8006be6:	1c02      	adds	r2, r0, #0
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	1dbb      	adds	r3, r7, #6
 8006bec:	1c0a      	adds	r2, r1, #0
 8006bee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2241      	movs	r2, #65	; 0x41
 8006bf4:	5c9b      	ldrb	r3, [r3, r2]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d000      	beq.n	8006bfe <HAL_I2C_Mem_Read+0x32>
 8006bfc:	e110      	b.n	8006e20 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <HAL_I2C_Mem_Read+0x42>
 8006c04:	232c      	movs	r3, #44	; 0x2c
 8006c06:	18fb      	adds	r3, r7, r3
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d105      	bne.n	8006c1a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2280      	movs	r2, #128	; 0x80
 8006c12:	0092      	lsls	r2, r2, #2
 8006c14:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e103      	b.n	8006e22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2240      	movs	r2, #64	; 0x40
 8006c1e:	5c9b      	ldrb	r3, [r3, r2]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_I2C_Mem_Read+0x5c>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e0fc      	b.n	8006e22 <HAL_I2C_Mem_Read+0x256>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2240      	movs	r2, #64	; 0x40
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c30:	f7fe fc5a 	bl	80054e8 <HAL_GetTick>
 8006c34:	0003      	movs	r3, r0
 8006c36:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c38:	2380      	movs	r3, #128	; 0x80
 8006c3a:	0219      	lsls	r1, r3, #8
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	2319      	movs	r3, #25
 8006c44:	2201      	movs	r2, #1
 8006c46:	f000 f9dd 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006c4a:	1e03      	subs	r3, r0, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e0e7      	b.n	8006e22 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2241      	movs	r2, #65	; 0x41
 8006c56:	2122      	movs	r1, #34	; 0x22
 8006c58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2242      	movs	r2, #66	; 0x42
 8006c5e:	2140      	movs	r1, #64	; 0x40
 8006c60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	222c      	movs	r2, #44	; 0x2c
 8006c72:	18ba      	adds	r2, r7, r2
 8006c74:	8812      	ldrh	r2, [r2, #0]
 8006c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c7e:	1dbb      	adds	r3, r7, #6
 8006c80:	881c      	ldrh	r4, [r3, #0]
 8006c82:	2308      	movs	r3, #8
 8006c84:	18fb      	adds	r3, r7, r3
 8006c86:	881a      	ldrh	r2, [r3, #0]
 8006c88:	230a      	movs	r3, #10
 8006c8a:	18fb      	adds	r3, r7, r3
 8006c8c:	8819      	ldrh	r1, [r3, #0]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	9301      	str	r3, [sp, #4]
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	0023      	movs	r3, r4
 8006c9a:	f000 f92f 	bl	8006efc <I2C_RequestMemoryRead>
 8006c9e:	1e03      	subs	r3, r0, #0
 8006ca0:	d005      	beq.n	8006cae <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2240      	movs	r2, #64	; 0x40
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e0b9      	b.n	8006e22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2bff      	cmp	r3, #255	; 0xff
 8006cb6:	d911      	bls.n	8006cdc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	22ff      	movs	r2, #255	; 0xff
 8006cbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	2380      	movs	r3, #128	; 0x80
 8006cc6:	045c      	lsls	r4, r3, #17
 8006cc8:	230a      	movs	r3, #10
 8006cca:	18fb      	adds	r3, r7, r3
 8006ccc:	8819      	ldrh	r1, [r3, #0]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	4b56      	ldr	r3, [pc, #344]	; (8006e2c <HAL_I2C_Mem_Read+0x260>)
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	0023      	movs	r3, r4
 8006cd6:	f000 fab5 	bl	8007244 <I2C_TransferConfig>
 8006cda:	e012      	b.n	8006d02 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	2380      	movs	r3, #128	; 0x80
 8006cee:	049c      	lsls	r4, r3, #18
 8006cf0:	230a      	movs	r3, #10
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	8819      	ldrh	r1, [r3, #0]
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	4b4c      	ldr	r3, [pc, #304]	; (8006e2c <HAL_I2C_Mem_Read+0x260>)
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	0023      	movs	r3, r4
 8006cfe:	f000 faa1 	bl	8007244 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	0013      	movs	r3, r2
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2104      	movs	r1, #4
 8006d10:	f000 f978 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006d14:	1e03      	subs	r3, r0, #0
 8006d16:	d001      	beq.n	8006d1c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e082      	b.n	8006e22 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d03a      	beq.n	8006dce <HAL_I2C_Mem_Read+0x202>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d136      	bne.n	8006dce <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	0013      	movs	r3, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2180      	movs	r1, #128	; 0x80
 8006d6e:	f000 f949 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006d72:	1e03      	subs	r3, r0, #0
 8006d74:	d001      	beq.n	8006d7a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e053      	b.n	8006e22 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2bff      	cmp	r3, #255	; 0xff
 8006d82:	d911      	bls.n	8006da8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	22ff      	movs	r2, #255	; 0xff
 8006d88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	2380      	movs	r3, #128	; 0x80
 8006d92:	045c      	lsls	r4, r3, #17
 8006d94:	230a      	movs	r3, #10
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	8819      	ldrh	r1, [r3, #0]
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	0023      	movs	r3, r4
 8006da2:	f000 fa4f 	bl	8007244 <I2C_TransferConfig>
 8006da6:	e012      	b.n	8006dce <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	2380      	movs	r3, #128	; 0x80
 8006dba:	049c      	lsls	r4, r3, #18
 8006dbc:	230a      	movs	r3, #10
 8006dbe:	18fb      	adds	r3, r7, r3
 8006dc0:	8819      	ldrh	r1, [r3, #0]
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	0023      	movs	r3, r4
 8006dca:	f000 fa3b 	bl	8007244 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d194      	bne.n	8006d02 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	0018      	movs	r0, r3
 8006de0:	f000 f98e 	bl	8007100 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006de4:	1e03      	subs	r3, r0, #0
 8006de6:	d001      	beq.n	8006dec <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e01a      	b.n	8006e22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2220      	movs	r2, #32
 8006df2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	490c      	ldr	r1, [pc, #48]	; (8006e30 <HAL_I2C_Mem_Read+0x264>)
 8006e00:	400a      	ands	r2, r1
 8006e02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2241      	movs	r2, #65	; 0x41
 8006e08:	2120      	movs	r1, #32
 8006e0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2242      	movs	r2, #66	; 0x42
 8006e10:	2100      	movs	r1, #0
 8006e12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2240      	movs	r2, #64	; 0x40
 8006e18:	2100      	movs	r1, #0
 8006e1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e000      	b.n	8006e22 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8006e20:	2302      	movs	r3, #2
  }
}
 8006e22:	0018      	movs	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b007      	add	sp, #28
 8006e28:	bd90      	pop	{r4, r7, pc}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	80002400 	.word	0x80002400
 8006e30:	fe00e800 	.word	0xfe00e800

08006e34 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e34:	b5b0      	push	{r4, r5, r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	000c      	movs	r4, r1
 8006e3e:	0010      	movs	r0, r2
 8006e40:	0019      	movs	r1, r3
 8006e42:	250a      	movs	r5, #10
 8006e44:	197b      	adds	r3, r7, r5
 8006e46:	1c22      	adds	r2, r4, #0
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	18fb      	adds	r3, r7, r3
 8006e4e:	1c02      	adds	r2, r0, #0
 8006e50:	801a      	strh	r2, [r3, #0]
 8006e52:	1dbb      	adds	r3, r7, #6
 8006e54:	1c0a      	adds	r2, r1, #0
 8006e56:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e58:	1dbb      	adds	r3, r7, #6
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	2380      	movs	r3, #128	; 0x80
 8006e60:	045c      	lsls	r4, r3, #17
 8006e62:	197b      	adds	r3, r7, r5
 8006e64:	8819      	ldrh	r1, [r3, #0]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	4b23      	ldr	r3, [pc, #140]	; (8006ef8 <I2C_RequestMemoryWrite+0xc4>)
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	0023      	movs	r3, r4
 8006e6e:	f000 f9e9 	bl	8007244 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e74:	6a39      	ldr	r1, [r7, #32]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	0018      	movs	r0, r3
 8006e7a:	f000 f902 	bl	8007082 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e7e:	1e03      	subs	r3, r0, #0
 8006e80:	d001      	beq.n	8006e86 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e033      	b.n	8006eee <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e86:	1dbb      	adds	r3, r7, #6
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d107      	bne.n	8006e9e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e8e:	2308      	movs	r3, #8
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e9c:	e019      	b.n	8006ed2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e9e:	2308      	movs	r3, #8
 8006ea0:	18fb      	adds	r3, r7, r3
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	0a1b      	lsrs	r3, r3, #8
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb2:	6a39      	ldr	r1, [r7, #32]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f000 f8e3 	bl	8007082 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ebc:	1e03      	subs	r3, r0, #0
 8006ebe:	d001      	beq.n	8006ec4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e014      	b.n	8006eee <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed2:	6a3a      	ldr	r2, [r7, #32]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	0013      	movs	r3, r2
 8006edc:	2200      	movs	r2, #0
 8006ede:	2180      	movs	r1, #128	; 0x80
 8006ee0:	f000 f890 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006ee4:	1e03      	subs	r3, r0, #0
 8006ee6:	d001      	beq.n	8006eec <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	0018      	movs	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	b004      	add	sp, #16
 8006ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	80002000 	.word	0x80002000

08006efc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b5b0      	push	{r4, r5, r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	000c      	movs	r4, r1
 8006f06:	0010      	movs	r0, r2
 8006f08:	0019      	movs	r1, r3
 8006f0a:	250a      	movs	r5, #10
 8006f0c:	197b      	adds	r3, r7, r5
 8006f0e:	1c22      	adds	r2, r4, #0
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	2308      	movs	r3, #8
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	1c02      	adds	r2, r0, #0
 8006f18:	801a      	strh	r2, [r3, #0]
 8006f1a:	1dbb      	adds	r3, r7, #6
 8006f1c:	1c0a      	adds	r2, r1, #0
 8006f1e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006f20:	1dbb      	adds	r3, r7, #6
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	197b      	adds	r3, r7, r5
 8006f28:	8819      	ldrh	r1, [r3, #0]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	4b23      	ldr	r3, [pc, #140]	; (8006fbc <I2C_RequestMemoryRead+0xc0>)
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	2300      	movs	r3, #0
 8006f32:	f000 f987 	bl	8007244 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f38:	6a39      	ldr	r1, [r7, #32]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f000 f8a0 	bl	8007082 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f42:	1e03      	subs	r3, r0, #0
 8006f44:	d001      	beq.n	8006f4a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e033      	b.n	8006fb2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f4a:	1dbb      	adds	r3, r7, #6
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d107      	bne.n	8006f62 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f52:	2308      	movs	r3, #8
 8006f54:	18fb      	adds	r3, r7, r3
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8006f60:	e019      	b.n	8006f96 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f62:	2308      	movs	r3, #8
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	0a1b      	lsrs	r3, r3, #8
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f76:	6a39      	ldr	r1, [r7, #32]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f000 f881 	bl	8007082 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f80:	1e03      	subs	r3, r0, #0
 8006f82:	d001      	beq.n	8006f88 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e014      	b.n	8006fb2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f88:	2308      	movs	r3, #8
 8006f8a:	18fb      	adds	r3, r7, r3
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006f96:	6a3a      	ldr	r2, [r7, #32]
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	0013      	movs	r3, r2
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2140      	movs	r1, #64	; 0x40
 8006fa4:	f000 f82e 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006fa8:	1e03      	subs	r3, r0, #0
 8006faa:	d001      	beq.n	8006fb0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	b004      	add	sp, #16
 8006fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	80002000 	.word	0x80002000

08006fc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d103      	bne.n	8006fde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d007      	beq.n	8006ffc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	619a      	str	r2, [r3, #24]
  }
}
 8006ffc:	46c0      	nop			; (mov r8, r8)
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b002      	add	sp, #8
 8007002:	bd80      	pop	{r7, pc}

08007004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	1dfb      	adds	r3, r7, #7
 8007012:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007014:	e021      	b.n	800705a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	d01e      	beq.n	800705a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701c:	f7fe fa64 	bl	80054e8 <HAL_GetTick>
 8007020:	0002      	movs	r2, r0
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d302      	bcc.n	8007032 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d113      	bne.n	800705a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	2220      	movs	r2, #32
 8007038:	431a      	orrs	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2241      	movs	r2, #65	; 0x41
 8007042:	2120      	movs	r1, #32
 8007044:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2242      	movs	r2, #66	; 0x42
 800704a:	2100      	movs	r1, #0
 800704c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2240      	movs	r2, #64	; 0x40
 8007052:	2100      	movs	r1, #0
 8007054:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e00f      	b.n	800707a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	4013      	ands	r3, r2
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	425a      	negs	r2, r3
 800706a:	4153      	adcs	r3, r2
 800706c:	b2db      	uxtb	r3, r3
 800706e:	001a      	movs	r2, r3
 8007070:	1dfb      	adds	r3, r7, #7
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d0ce      	beq.n	8007016 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	0018      	movs	r0, r3
 800707c:	46bd      	mov	sp, r7
 800707e:	b004      	add	sp, #16
 8007080:	bd80      	pop	{r7, pc}

08007082 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800708e:	e02b      	b.n	80070e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	68b9      	ldr	r1, [r7, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	0018      	movs	r0, r3
 8007098:	f000 f86e 	bl	8007178 <I2C_IsAcknowledgeFailed>
 800709c:	1e03      	subs	r3, r0, #0
 800709e:	d001      	beq.n	80070a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e029      	b.n	80070f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3301      	adds	r3, #1
 80070a8:	d01e      	beq.n	80070e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070aa:	f7fe fa1d 	bl	80054e8 <HAL_GetTick>
 80070ae:	0002      	movs	r2, r0
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d302      	bcc.n	80070c0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d113      	bne.n	80070e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c4:	2220      	movs	r2, #32
 80070c6:	431a      	orrs	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2241      	movs	r2, #65	; 0x41
 80070d0:	2120      	movs	r1, #32
 80070d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2242      	movs	r2, #66	; 0x42
 80070d8:	2100      	movs	r1, #0
 80070da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2240      	movs	r2, #64	; 0x40
 80070e0:	2100      	movs	r1, #0
 80070e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e007      	b.n	80070f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	2202      	movs	r2, #2
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d1cc      	bne.n	8007090 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	0018      	movs	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b004      	add	sp, #16
 80070fe:	bd80      	pop	{r7, pc}

08007100 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800710c:	e028      	b.n	8007160 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	0018      	movs	r0, r3
 8007116:	f000 f82f 	bl	8007178 <I2C_IsAcknowledgeFailed>
 800711a:	1e03      	subs	r3, r0, #0
 800711c:	d001      	beq.n	8007122 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e026      	b.n	8007170 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007122:	f7fe f9e1 	bl	80054e8 <HAL_GetTick>
 8007126:	0002      	movs	r2, r0
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	429a      	cmp	r2, r3
 8007130:	d302      	bcc.n	8007138 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d113      	bne.n	8007160 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713c:	2220      	movs	r2, #32
 800713e:	431a      	orrs	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2241      	movs	r2, #65	; 0x41
 8007148:	2120      	movs	r1, #32
 800714a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2242      	movs	r2, #66	; 0x42
 8007150:	2100      	movs	r1, #0
 8007152:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2240      	movs	r2, #64	; 0x40
 8007158:	2100      	movs	r1, #0
 800715a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e007      	b.n	8007170 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	2220      	movs	r2, #32
 8007168:	4013      	ands	r3, r2
 800716a:	2b20      	cmp	r3, #32
 800716c:	d1cf      	bne.n	800710e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	0018      	movs	r0, r3
 8007172:	46bd      	mov	sp, r7
 8007174:	b004      	add	sp, #16
 8007176:	bd80      	pop	{r7, pc}

08007178 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2210      	movs	r2, #16
 800718c:	4013      	ands	r3, r2
 800718e:	2b10      	cmp	r3, #16
 8007190:	d151      	bne.n	8007236 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007192:	e021      	b.n	80071d8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	3301      	adds	r3, #1
 8007198:	d01e      	beq.n	80071d8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800719a:	f7fe f9a5 	bl	80054e8 <HAL_GetTick>
 800719e:	0002      	movs	r2, r0
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d302      	bcc.n	80071b0 <I2C_IsAcknowledgeFailed+0x38>
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d113      	bne.n	80071d8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b4:	2220      	movs	r2, #32
 80071b6:	431a      	orrs	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2241      	movs	r2, #65	; 0x41
 80071c0:	2120      	movs	r1, #32
 80071c2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2242      	movs	r2, #66	; 0x42
 80071c8:	2100      	movs	r1, #0
 80071ca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2240      	movs	r2, #64	; 0x40
 80071d0:	2100      	movs	r1, #0
 80071d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e02f      	b.n	8007238 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	2220      	movs	r2, #32
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d1d6      	bne.n	8007194 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2210      	movs	r2, #16
 80071ec:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2220      	movs	r2, #32
 80071f4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	0018      	movs	r0, r3
 80071fa:	f7ff fee1 	bl	8006fc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	490d      	ldr	r1, [pc, #52]	; (8007240 <I2C_IsAcknowledgeFailed+0xc8>)
 800720a:	400a      	ands	r2, r1
 800720c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	2204      	movs	r2, #4
 8007214:	431a      	orrs	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2241      	movs	r2, #65	; 0x41
 800721e:	2120      	movs	r1, #32
 8007220:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2242      	movs	r2, #66	; 0x42
 8007226:	2100      	movs	r1, #0
 8007228:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2240      	movs	r2, #64	; 0x40
 800722e:	2100      	movs	r1, #0
 8007230:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	0018      	movs	r0, r3
 800723a:	46bd      	mov	sp, r7
 800723c:	b004      	add	sp, #16
 800723e:	bd80      	pop	{r7, pc}
 8007240:	fe00e800 	.word	0xfe00e800

08007244 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007244:	b590      	push	{r4, r7, lr}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	0008      	movs	r0, r1
 800724e:	0011      	movs	r1, r2
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	240a      	movs	r4, #10
 8007254:	193b      	adds	r3, r7, r4
 8007256:	1c02      	adds	r2, r0, #0
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	2009      	movs	r0, #9
 800725c:	183b      	adds	r3, r7, r0
 800725e:	1c0a      	adds	r2, r1, #0
 8007260:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	6a3a      	ldr	r2, [r7, #32]
 800726a:	0d51      	lsrs	r1, r2, #21
 800726c:	2280      	movs	r2, #128	; 0x80
 800726e:	00d2      	lsls	r2, r2, #3
 8007270:	400a      	ands	r2, r1
 8007272:	490e      	ldr	r1, [pc, #56]	; (80072ac <I2C_TransferConfig+0x68>)
 8007274:	430a      	orrs	r2, r1
 8007276:	43d2      	mvns	r2, r2
 8007278:	401a      	ands	r2, r3
 800727a:	0011      	movs	r1, r2
 800727c:	193b      	adds	r3, r7, r4
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	059b      	lsls	r3, r3, #22
 8007282:	0d9a      	lsrs	r2, r3, #22
 8007284:	183b      	adds	r3, r7, r0
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	0418      	lsls	r0, r3, #16
 800728a:	23ff      	movs	r3, #255	; 0xff
 800728c:	041b      	lsls	r3, r3, #16
 800728e:	4003      	ands	r3, r0
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	431a      	orrs	r2, r3
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	431a      	orrs	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	46bd      	mov	sp, r7
 80072a6:	b005      	add	sp, #20
 80072a8:	bd90      	pop	{r4, r7, pc}
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	03ff63ff 	.word	0x03ff63ff

080072b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2241      	movs	r2, #65	; 0x41
 80072be:	5c9b      	ldrb	r3, [r3, r2]
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d138      	bne.n	8007338 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2240      	movs	r2, #64	; 0x40
 80072ca:	5c9b      	ldrb	r3, [r3, r2]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d101      	bne.n	80072d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80072d0:	2302      	movs	r3, #2
 80072d2:	e032      	b.n	800733a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2240      	movs	r2, #64	; 0x40
 80072d8:	2101      	movs	r1, #1
 80072da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2241      	movs	r2, #65	; 0x41
 80072e0:	2124      	movs	r1, #36	; 0x24
 80072e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2101      	movs	r1, #1
 80072f0:	438a      	bics	r2, r1
 80072f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4911      	ldr	r1, [pc, #68]	; (8007344 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007300:	400a      	ands	r2, r1
 8007302:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6819      	ldr	r1, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2101      	movs	r1, #1
 8007320:	430a      	orrs	r2, r1
 8007322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2241      	movs	r2, #65	; 0x41
 8007328:	2120      	movs	r1, #32
 800732a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2240      	movs	r2, #64	; 0x40
 8007330:	2100      	movs	r1, #0
 8007332:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	e000      	b.n	800733a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007338:	2302      	movs	r3, #2
  }
}
 800733a:	0018      	movs	r0, r3
 800733c:	46bd      	mov	sp, r7
 800733e:	b002      	add	sp, #8
 8007340:	bd80      	pop	{r7, pc}
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	ffffefff 	.word	0xffffefff

08007348 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2241      	movs	r2, #65	; 0x41
 8007356:	5c9b      	ldrb	r3, [r3, r2]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b20      	cmp	r3, #32
 800735c:	d139      	bne.n	80073d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2240      	movs	r2, #64	; 0x40
 8007362:	5c9b      	ldrb	r3, [r3, r2]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d101      	bne.n	800736c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007368:	2302      	movs	r3, #2
 800736a:	e033      	b.n	80073d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2240      	movs	r2, #64	; 0x40
 8007370:	2101      	movs	r1, #1
 8007372:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2241      	movs	r2, #65	; 0x41
 8007378:	2124      	movs	r1, #36	; 0x24
 800737a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2101      	movs	r1, #1
 8007388:	438a      	bics	r2, r1
 800738a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4a11      	ldr	r2, [pc, #68]	; (80073dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007398:	4013      	ands	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2101      	movs	r1, #1
 80073ba:	430a      	orrs	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2241      	movs	r2, #65	; 0x41
 80073c2:	2120      	movs	r1, #32
 80073c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2240      	movs	r2, #64	; 0x40
 80073ca:	2100      	movs	r1, #0
 80073cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e000      	b.n	80073d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80073d2:	2302      	movs	r3, #2
  }
}
 80073d4:	0018      	movs	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b004      	add	sp, #16
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	fffff0ff 	.word	0xfffff0ff

080073e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073e0:	b5b0      	push	{r4, r5, r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	f000 fbaf 	bl	8007b52 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073f4:	4bcf      	ldr	r3, [pc, #828]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	220c      	movs	r2, #12
 80073fa:	4013      	ands	r3, r2
 80073fc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073fe:	4bcd      	ldr	r3, [pc, #820]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	2380      	movs	r3, #128	; 0x80
 8007404:	025b      	lsls	r3, r3, #9
 8007406:	4013      	ands	r3, r2
 8007408:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2201      	movs	r2, #1
 8007410:	4013      	ands	r3, r2
 8007412:	d100      	bne.n	8007416 <HAL_RCC_OscConfig+0x36>
 8007414:	e07e      	b.n	8007514 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d007      	beq.n	800742c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	2b0c      	cmp	r3, #12
 8007420:	d112      	bne.n	8007448 <HAL_RCC_OscConfig+0x68>
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	025b      	lsls	r3, r3, #9
 8007428:	429a      	cmp	r2, r3
 800742a:	d10d      	bne.n	8007448 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800742c:	4bc1      	ldr	r3, [pc, #772]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	029b      	lsls	r3, r3, #10
 8007434:	4013      	ands	r3, r2
 8007436:	d100      	bne.n	800743a <HAL_RCC_OscConfig+0x5a>
 8007438:	e06b      	b.n	8007512 <HAL_RCC_OscConfig+0x132>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d167      	bne.n	8007512 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f000 fb85 	bl	8007b52 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	2380      	movs	r3, #128	; 0x80
 800744e:	025b      	lsls	r3, r3, #9
 8007450:	429a      	cmp	r2, r3
 8007452:	d107      	bne.n	8007464 <HAL_RCC_OscConfig+0x84>
 8007454:	4bb7      	ldr	r3, [pc, #732]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4bb6      	ldr	r3, [pc, #728]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800745a:	2180      	movs	r1, #128	; 0x80
 800745c:	0249      	lsls	r1, r1, #9
 800745e:	430a      	orrs	r2, r1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e027      	b.n	80074b4 <HAL_RCC_OscConfig+0xd4>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	23a0      	movs	r3, #160	; 0xa0
 800746a:	02db      	lsls	r3, r3, #11
 800746c:	429a      	cmp	r2, r3
 800746e:	d10e      	bne.n	800748e <HAL_RCC_OscConfig+0xae>
 8007470:	4bb0      	ldr	r3, [pc, #704]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	4baf      	ldr	r3, [pc, #700]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	02c9      	lsls	r1, r1, #11
 800747a:	430a      	orrs	r2, r1
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	4bad      	ldr	r3, [pc, #692]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4bac      	ldr	r3, [pc, #688]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	0249      	lsls	r1, r1, #9
 8007488:	430a      	orrs	r2, r1
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	e012      	b.n	80074b4 <HAL_RCC_OscConfig+0xd4>
 800748e:	4ba9      	ldr	r3, [pc, #676]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4ba8      	ldr	r3, [pc, #672]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007494:	49a8      	ldr	r1, [pc, #672]	; (8007738 <HAL_RCC_OscConfig+0x358>)
 8007496:	400a      	ands	r2, r1
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	4ba6      	ldr	r3, [pc, #664]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	2380      	movs	r3, #128	; 0x80
 80074a0:	025b      	lsls	r3, r3, #9
 80074a2:	4013      	ands	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4ba2      	ldr	r3, [pc, #648]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	4ba1      	ldr	r3, [pc, #644]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 80074ae:	49a3      	ldr	r1, [pc, #652]	; (800773c <HAL_RCC_OscConfig+0x35c>)
 80074b0:	400a      	ands	r2, r1
 80074b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d015      	beq.n	80074e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074bc:	f7fe f814 	bl	80054e8 <HAL_GetTick>
 80074c0:	0003      	movs	r3, r0
 80074c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074c4:	e009      	b.n	80074da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074c6:	f7fe f80f 	bl	80054e8 <HAL_GetTick>
 80074ca:	0002      	movs	r2, r0
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b64      	cmp	r3, #100	; 0x64
 80074d2:	d902      	bls.n	80074da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	f000 fb3c 	bl	8007b52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074da:	4b96      	ldr	r3, [pc, #600]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	2380      	movs	r3, #128	; 0x80
 80074e0:	029b      	lsls	r3, r3, #10
 80074e2:	4013      	ands	r3, r2
 80074e4:	d0ef      	beq.n	80074c6 <HAL_RCC_OscConfig+0xe6>
 80074e6:	e015      	b.n	8007514 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e8:	f7fd fffe 	bl	80054e8 <HAL_GetTick>
 80074ec:	0003      	movs	r3, r0
 80074ee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074f0:	e008      	b.n	8007504 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074f2:	f7fd fff9 	bl	80054e8 <HAL_GetTick>
 80074f6:	0002      	movs	r2, r0
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b64      	cmp	r3, #100	; 0x64
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e326      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007504:	4b8b      	ldr	r3, [pc, #556]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	2380      	movs	r3, #128	; 0x80
 800750a:	029b      	lsls	r3, r3, #10
 800750c:	4013      	ands	r3, r2
 800750e:	d1f0      	bne.n	80074f2 <HAL_RCC_OscConfig+0x112>
 8007510:	e000      	b.n	8007514 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007512:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2202      	movs	r2, #2
 800751a:	4013      	ands	r3, r2
 800751c:	d100      	bne.n	8007520 <HAL_RCC_OscConfig+0x140>
 800751e:	e08b      	b.n	8007638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	2b04      	cmp	r3, #4
 800752a:	d005      	beq.n	8007538 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	2b0c      	cmp	r3, #12
 8007530:	d13e      	bne.n	80075b0 <HAL_RCC_OscConfig+0x1d0>
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d13b      	bne.n	80075b0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007538:	4b7e      	ldr	r3, [pc, #504]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2204      	movs	r2, #4
 800753e:	4013      	ands	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_RCC_OscConfig+0x16c>
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e302      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800754c:	4b79      	ldr	r3, [pc, #484]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	4a7b      	ldr	r2, [pc, #492]	; (8007740 <HAL_RCC_OscConfig+0x360>)
 8007552:	4013      	ands	r3, r2
 8007554:	0019      	movs	r1, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	021a      	lsls	r2, r3, #8
 800755c:	4b75      	ldr	r3, [pc, #468]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007562:	4b74      	ldr	r3, [pc, #464]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2209      	movs	r2, #9
 8007568:	4393      	bics	r3, r2
 800756a:	0019      	movs	r1, r3
 800756c:	4b71      	ldr	r3, [pc, #452]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	430a      	orrs	r2, r1
 8007572:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007574:	f000 fc40 	bl	8007df8 <HAL_RCC_GetSysClockFreq>
 8007578:	0001      	movs	r1, r0
 800757a:	4b6e      	ldr	r3, [pc, #440]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	091b      	lsrs	r3, r3, #4
 8007580:	220f      	movs	r2, #15
 8007582:	4013      	ands	r3, r2
 8007584:	4a6f      	ldr	r2, [pc, #444]	; (8007744 <HAL_RCC_OscConfig+0x364>)
 8007586:	5cd3      	ldrb	r3, [r2, r3]
 8007588:	000a      	movs	r2, r1
 800758a:	40da      	lsrs	r2, r3
 800758c:	4b6e      	ldr	r3, [pc, #440]	; (8007748 <HAL_RCC_OscConfig+0x368>)
 800758e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8007590:	4b6e      	ldr	r3, [pc, #440]	; (800774c <HAL_RCC_OscConfig+0x36c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2513      	movs	r5, #19
 8007596:	197c      	adds	r4, r7, r5
 8007598:	0018      	movs	r0, r3
 800759a:	f7fd ff5f 	bl	800545c <HAL_InitTick>
 800759e:	0003      	movs	r3, r0
 80075a0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80075a2:	197b      	adds	r3, r7, r5
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d046      	beq.n	8007638 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80075aa:	197b      	adds	r3, r7, r5
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	e2d0      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d027      	beq.n	8007606 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80075b6:	4b5f      	ldr	r3, [pc, #380]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2209      	movs	r2, #9
 80075bc:	4393      	bics	r3, r2
 80075be:	0019      	movs	r1, r3
 80075c0:	4b5c      	ldr	r3, [pc, #368]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c8:	f7fd ff8e 	bl	80054e8 <HAL_GetTick>
 80075cc:	0003      	movs	r3, r0
 80075ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075d0:	e008      	b.n	80075e4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075d2:	f7fd ff89 	bl	80054e8 <HAL_GetTick>
 80075d6:	0002      	movs	r2, r0
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d901      	bls.n	80075e4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e2b6      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075e4:	4b53      	ldr	r3, [pc, #332]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2204      	movs	r2, #4
 80075ea:	4013      	ands	r3, r2
 80075ec:	d0f1      	beq.n	80075d2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ee:	4b51      	ldr	r3, [pc, #324]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	4a53      	ldr	r2, [pc, #332]	; (8007740 <HAL_RCC_OscConfig+0x360>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	0019      	movs	r1, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	021a      	lsls	r2, r3, #8
 80075fe:	4b4d      	ldr	r3, [pc, #308]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007600:	430a      	orrs	r2, r1
 8007602:	605a      	str	r2, [r3, #4]
 8007604:	e018      	b.n	8007638 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007606:	4b4b      	ldr	r3, [pc, #300]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4b4a      	ldr	r3, [pc, #296]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800760c:	2101      	movs	r1, #1
 800760e:	438a      	bics	r2, r1
 8007610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007612:	f7fd ff69 	bl	80054e8 <HAL_GetTick>
 8007616:	0003      	movs	r3, r0
 8007618:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800761a:	e008      	b.n	800762e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800761c:	f7fd ff64 	bl	80054e8 <HAL_GetTick>
 8007620:	0002      	movs	r2, r0
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e291      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800762e:	4b41      	ldr	r3, [pc, #260]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2204      	movs	r2, #4
 8007634:	4013      	ands	r3, r2
 8007636:	d1f1      	bne.n	800761c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2210      	movs	r2, #16
 800763e:	4013      	ands	r3, r2
 8007640:	d100      	bne.n	8007644 <HAL_RCC_OscConfig+0x264>
 8007642:	e0a1      	b.n	8007788 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d140      	bne.n	80076cc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800764a:	4b3a      	ldr	r3, [pc, #232]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	2380      	movs	r3, #128	; 0x80
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4013      	ands	r3, r2
 8007654:	d005      	beq.n	8007662 <HAL_RCC_OscConfig+0x282>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e277      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007662:	4b34      	ldr	r3, [pc, #208]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	4a3a      	ldr	r2, [pc, #232]	; (8007750 <HAL_RCC_OscConfig+0x370>)
 8007668:	4013      	ands	r3, r2
 800766a:	0019      	movs	r1, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007670:	4b30      	ldr	r3, [pc, #192]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007676:	4b2f      	ldr	r3, [pc, #188]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	021b      	lsls	r3, r3, #8
 800767c:	0a19      	lsrs	r1, r3, #8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	061a      	lsls	r2, r3, #24
 8007684:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007686:	430a      	orrs	r2, r1
 8007688:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	0b5b      	lsrs	r3, r3, #13
 8007690:	3301      	adds	r3, #1
 8007692:	2280      	movs	r2, #128	; 0x80
 8007694:	0212      	lsls	r2, r2, #8
 8007696:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007698:	4b26      	ldr	r3, [pc, #152]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	091b      	lsrs	r3, r3, #4
 800769e:	210f      	movs	r1, #15
 80076a0:	400b      	ands	r3, r1
 80076a2:	4928      	ldr	r1, [pc, #160]	; (8007744 <HAL_RCC_OscConfig+0x364>)
 80076a4:	5ccb      	ldrb	r3, [r1, r3]
 80076a6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80076a8:	4b27      	ldr	r3, [pc, #156]	; (8007748 <HAL_RCC_OscConfig+0x368>)
 80076aa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80076ac:	4b27      	ldr	r3, [pc, #156]	; (800774c <HAL_RCC_OscConfig+0x36c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2513      	movs	r5, #19
 80076b2:	197c      	adds	r4, r7, r5
 80076b4:	0018      	movs	r0, r3
 80076b6:	f7fd fed1 	bl	800545c <HAL_InitTick>
 80076ba:	0003      	movs	r3, r0
 80076bc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80076be:	197b      	adds	r3, r7, r5
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d060      	beq.n	8007788 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80076c6:	197b      	adds	r3, r7, r5
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	e242      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d03f      	beq.n	8007754 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80076d4:	4b17      	ldr	r3, [pc, #92]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	4b16      	ldr	r3, [pc, #88]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 80076da:	2180      	movs	r1, #128	; 0x80
 80076dc:	0049      	lsls	r1, r1, #1
 80076de:	430a      	orrs	r2, r1
 80076e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e2:	f7fd ff01 	bl	80054e8 <HAL_GetTick>
 80076e6:	0003      	movs	r3, r0
 80076e8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80076ec:	f7fd fefc 	bl	80054e8 <HAL_GetTick>
 80076f0:	0002      	movs	r2, r0
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e229      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	2380      	movs	r3, #128	; 0x80
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4013      	ands	r3, r2
 8007708:	d0f0      	beq.n	80076ec <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800770a:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	4a10      	ldr	r2, [pc, #64]	; (8007750 <HAL_RCC_OscConfig+0x370>)
 8007710:	4013      	ands	r3, r2
 8007712:	0019      	movs	r1, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007718:	4b06      	ldr	r3, [pc, #24]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800771e:	4b05      	ldr	r3, [pc, #20]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	0a19      	lsrs	r1, r3, #8
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	061a      	lsls	r2, r3, #24
 800772c:	4b01      	ldr	r3, [pc, #4]	; (8007734 <HAL_RCC_OscConfig+0x354>)
 800772e:	430a      	orrs	r2, r1
 8007730:	605a      	str	r2, [r3, #4]
 8007732:	e029      	b.n	8007788 <HAL_RCC_OscConfig+0x3a8>
 8007734:	40021000 	.word	0x40021000
 8007738:	fffeffff 	.word	0xfffeffff
 800773c:	fffbffff 	.word	0xfffbffff
 8007740:	ffffe0ff 	.word	0xffffe0ff
 8007744:	0800ae28 	.word	0x0800ae28
 8007748:	2000001c 	.word	0x2000001c
 800774c:	20000020 	.word	0x20000020
 8007750:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007754:	4bbd      	ldr	r3, [pc, #756]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	4bbc      	ldr	r3, [pc, #752]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 800775a:	49bd      	ldr	r1, [pc, #756]	; (8007a50 <HAL_RCC_OscConfig+0x670>)
 800775c:	400a      	ands	r2, r1
 800775e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007760:	f7fd fec2 	bl	80054e8 <HAL_GetTick>
 8007764:	0003      	movs	r3, r0
 8007766:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007768:	e008      	b.n	800777c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800776a:	f7fd febd 	bl	80054e8 <HAL_GetTick>
 800776e:	0002      	movs	r2, r0
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d901      	bls.n	800777c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e1ea      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800777c:	4bb3      	ldr	r3, [pc, #716]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	2380      	movs	r3, #128	; 0x80
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4013      	ands	r3, r2
 8007786:	d1f0      	bne.n	800776a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2208      	movs	r2, #8
 800778e:	4013      	ands	r3, r2
 8007790:	d036      	beq.n	8007800 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d019      	beq.n	80077ce <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800779a:	4bac      	ldr	r3, [pc, #688]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 800779c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800779e:	4bab      	ldr	r3, [pc, #684]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80077a0:	2101      	movs	r1, #1
 80077a2:	430a      	orrs	r2, r1
 80077a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077a6:	f7fd fe9f 	bl	80054e8 <HAL_GetTick>
 80077aa:	0003      	movs	r3, r0
 80077ac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80077ae:	e008      	b.n	80077c2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077b0:	f7fd fe9a 	bl	80054e8 <HAL_GetTick>
 80077b4:	0002      	movs	r2, r0
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e1c7      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80077c2:	4ba2      	ldr	r3, [pc, #648]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80077c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c6:	2202      	movs	r2, #2
 80077c8:	4013      	ands	r3, r2
 80077ca:	d0f1      	beq.n	80077b0 <HAL_RCC_OscConfig+0x3d0>
 80077cc:	e018      	b.n	8007800 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ce:	4b9f      	ldr	r3, [pc, #636]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80077d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077d2:	4b9e      	ldr	r3, [pc, #632]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80077d4:	2101      	movs	r1, #1
 80077d6:	438a      	bics	r2, r1
 80077d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077da:	f7fd fe85 	bl	80054e8 <HAL_GetTick>
 80077de:	0003      	movs	r3, r0
 80077e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077e4:	f7fd fe80 	bl	80054e8 <HAL_GetTick>
 80077e8:	0002      	movs	r2, r0
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e1ad      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80077f6:	4b95      	ldr	r3, [pc, #596]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80077f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fa:	2202      	movs	r2, #2
 80077fc:	4013      	ands	r3, r2
 80077fe:	d1f1      	bne.n	80077e4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2204      	movs	r2, #4
 8007806:	4013      	ands	r3, r2
 8007808:	d100      	bne.n	800780c <HAL_RCC_OscConfig+0x42c>
 800780a:	e0ae      	b.n	800796a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800780c:	2027      	movs	r0, #39	; 0x27
 800780e:	183b      	adds	r3, r7, r0
 8007810:	2200      	movs	r2, #0
 8007812:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007814:	4b8d      	ldr	r3, [pc, #564]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	055b      	lsls	r3, r3, #21
 800781c:	4013      	ands	r3, r2
 800781e:	d109      	bne.n	8007834 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007820:	4b8a      	ldr	r3, [pc, #552]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007824:	4b89      	ldr	r3, [pc, #548]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007826:	2180      	movs	r1, #128	; 0x80
 8007828:	0549      	lsls	r1, r1, #21
 800782a:	430a      	orrs	r2, r1
 800782c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800782e:	183b      	adds	r3, r7, r0
 8007830:	2201      	movs	r2, #1
 8007832:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007834:	4b87      	ldr	r3, [pc, #540]	; (8007a54 <HAL_RCC_OscConfig+0x674>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	2380      	movs	r3, #128	; 0x80
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	4013      	ands	r3, r2
 800783e:	d11a      	bne.n	8007876 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007840:	4b84      	ldr	r3, [pc, #528]	; (8007a54 <HAL_RCC_OscConfig+0x674>)
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	4b83      	ldr	r3, [pc, #524]	; (8007a54 <HAL_RCC_OscConfig+0x674>)
 8007846:	2180      	movs	r1, #128	; 0x80
 8007848:	0049      	lsls	r1, r1, #1
 800784a:	430a      	orrs	r2, r1
 800784c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800784e:	f7fd fe4b 	bl	80054e8 <HAL_GetTick>
 8007852:	0003      	movs	r3, r0
 8007854:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007858:	f7fd fe46 	bl	80054e8 <HAL_GetTick>
 800785c:	0002      	movs	r2, r0
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b64      	cmp	r3, #100	; 0x64
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e173      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800786a:	4b7a      	ldr	r3, [pc, #488]	; (8007a54 <HAL_RCC_OscConfig+0x674>)
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	2380      	movs	r3, #128	; 0x80
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	4013      	ands	r3, r2
 8007874:	d0f0      	beq.n	8007858 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	2380      	movs	r3, #128	; 0x80
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	429a      	cmp	r2, r3
 8007880:	d107      	bne.n	8007892 <HAL_RCC_OscConfig+0x4b2>
 8007882:	4b72      	ldr	r3, [pc, #456]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007884:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007886:	4b71      	ldr	r3, [pc, #452]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007888:	2180      	movs	r1, #128	; 0x80
 800788a:	0049      	lsls	r1, r1, #1
 800788c:	430a      	orrs	r2, r1
 800788e:	651a      	str	r2, [r3, #80]	; 0x50
 8007890:	e031      	b.n	80078f6 <HAL_RCC_OscConfig+0x516>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10c      	bne.n	80078b4 <HAL_RCC_OscConfig+0x4d4>
 800789a:	4b6c      	ldr	r3, [pc, #432]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 800789c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800789e:	4b6b      	ldr	r3, [pc, #428]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078a0:	496b      	ldr	r1, [pc, #428]	; (8007a50 <HAL_RCC_OscConfig+0x670>)
 80078a2:	400a      	ands	r2, r1
 80078a4:	651a      	str	r2, [r3, #80]	; 0x50
 80078a6:	4b69      	ldr	r3, [pc, #420]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078aa:	4b68      	ldr	r3, [pc, #416]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078ac:	496a      	ldr	r1, [pc, #424]	; (8007a58 <HAL_RCC_OscConfig+0x678>)
 80078ae:	400a      	ands	r2, r1
 80078b0:	651a      	str	r2, [r3, #80]	; 0x50
 80078b2:	e020      	b.n	80078f6 <HAL_RCC_OscConfig+0x516>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	23a0      	movs	r3, #160	; 0xa0
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	429a      	cmp	r2, r3
 80078be:	d10e      	bne.n	80078de <HAL_RCC_OscConfig+0x4fe>
 80078c0:	4b62      	ldr	r3, [pc, #392]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078c4:	4b61      	ldr	r3, [pc, #388]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078c6:	2180      	movs	r1, #128	; 0x80
 80078c8:	00c9      	lsls	r1, r1, #3
 80078ca:	430a      	orrs	r2, r1
 80078cc:	651a      	str	r2, [r3, #80]	; 0x50
 80078ce:	4b5f      	ldr	r3, [pc, #380]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078d2:	4b5e      	ldr	r3, [pc, #376]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078d4:	2180      	movs	r1, #128	; 0x80
 80078d6:	0049      	lsls	r1, r1, #1
 80078d8:	430a      	orrs	r2, r1
 80078da:	651a      	str	r2, [r3, #80]	; 0x50
 80078dc:	e00b      	b.n	80078f6 <HAL_RCC_OscConfig+0x516>
 80078de:	4b5b      	ldr	r3, [pc, #364]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078e2:	4b5a      	ldr	r3, [pc, #360]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078e4:	495a      	ldr	r1, [pc, #360]	; (8007a50 <HAL_RCC_OscConfig+0x670>)
 80078e6:	400a      	ands	r2, r1
 80078e8:	651a      	str	r2, [r3, #80]	; 0x50
 80078ea:	4b58      	ldr	r3, [pc, #352]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078ee:	4b57      	ldr	r3, [pc, #348]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80078f0:	4959      	ldr	r1, [pc, #356]	; (8007a58 <HAL_RCC_OscConfig+0x678>)
 80078f2:	400a      	ands	r2, r1
 80078f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d015      	beq.n	800792a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078fe:	f7fd fdf3 	bl	80054e8 <HAL_GetTick>
 8007902:	0003      	movs	r3, r0
 8007904:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007906:	e009      	b.n	800791c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007908:	f7fd fdee 	bl	80054e8 <HAL_GetTick>
 800790c:	0002      	movs	r2, r0
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	4a52      	ldr	r2, [pc, #328]	; (8007a5c <HAL_RCC_OscConfig+0x67c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d901      	bls.n	800791c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e11a      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800791c:	4b4b      	ldr	r3, [pc, #300]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 800791e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4013      	ands	r3, r2
 8007926:	d0ef      	beq.n	8007908 <HAL_RCC_OscConfig+0x528>
 8007928:	e014      	b.n	8007954 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800792a:	f7fd fddd 	bl	80054e8 <HAL_GetTick>
 800792e:	0003      	movs	r3, r0
 8007930:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007932:	e009      	b.n	8007948 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007934:	f7fd fdd8 	bl	80054e8 <HAL_GetTick>
 8007938:	0002      	movs	r2, r0
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	4a47      	ldr	r2, [pc, #284]	; (8007a5c <HAL_RCC_OscConfig+0x67c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d901      	bls.n	8007948 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e104      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007948:	4b40      	ldr	r3, [pc, #256]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 800794a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800794c:	2380      	movs	r3, #128	; 0x80
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4013      	ands	r3, r2
 8007952:	d1ef      	bne.n	8007934 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007954:	2327      	movs	r3, #39	; 0x27
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d105      	bne.n	800796a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800795e:	4b3b      	ldr	r3, [pc, #236]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007962:	4b3a      	ldr	r3, [pc, #232]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007964:	493e      	ldr	r1, [pc, #248]	; (8007a60 <HAL_RCC_OscConfig+0x680>)
 8007966:	400a      	ands	r2, r1
 8007968:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2220      	movs	r2, #32
 8007970:	4013      	ands	r3, r2
 8007972:	d049      	beq.n	8007a08 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d026      	beq.n	80079ca <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800797c:	4b33      	ldr	r3, [pc, #204]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	4b32      	ldr	r3, [pc, #200]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007982:	2101      	movs	r1, #1
 8007984:	430a      	orrs	r2, r1
 8007986:	609a      	str	r2, [r3, #8]
 8007988:	4b30      	ldr	r3, [pc, #192]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 800798a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800798c:	4b2f      	ldr	r3, [pc, #188]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 800798e:	2101      	movs	r1, #1
 8007990:	430a      	orrs	r2, r1
 8007992:	635a      	str	r2, [r3, #52]	; 0x34
 8007994:	4b33      	ldr	r3, [pc, #204]	; (8007a64 <HAL_RCC_OscConfig+0x684>)
 8007996:	6a1a      	ldr	r2, [r3, #32]
 8007998:	4b32      	ldr	r3, [pc, #200]	; (8007a64 <HAL_RCC_OscConfig+0x684>)
 800799a:	2180      	movs	r1, #128	; 0x80
 800799c:	0189      	lsls	r1, r1, #6
 800799e:	430a      	orrs	r2, r1
 80079a0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a2:	f7fd fda1 	bl	80054e8 <HAL_GetTick>
 80079a6:	0003      	movs	r3, r0
 80079a8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079ac:	f7fd fd9c 	bl	80054e8 <HAL_GetTick>
 80079b0:	0002      	movs	r2, r0
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e0c9      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079be:	4b23      	ldr	r3, [pc, #140]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2202      	movs	r2, #2
 80079c4:	4013      	ands	r3, r2
 80079c6:	d0f1      	beq.n	80079ac <HAL_RCC_OscConfig+0x5cc>
 80079c8:	e01e      	b.n	8007a08 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80079ca:	4b20      	ldr	r3, [pc, #128]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	4b1f      	ldr	r3, [pc, #124]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 80079d0:	2101      	movs	r1, #1
 80079d2:	438a      	bics	r2, r1
 80079d4:	609a      	str	r2, [r3, #8]
 80079d6:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <HAL_RCC_OscConfig+0x684>)
 80079d8:	6a1a      	ldr	r2, [r3, #32]
 80079da:	4b22      	ldr	r3, [pc, #136]	; (8007a64 <HAL_RCC_OscConfig+0x684>)
 80079dc:	4922      	ldr	r1, [pc, #136]	; (8007a68 <HAL_RCC_OscConfig+0x688>)
 80079de:	400a      	ands	r2, r1
 80079e0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e2:	f7fd fd81 	bl	80054e8 <HAL_GetTick>
 80079e6:	0003      	movs	r3, r0
 80079e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079ec:	f7fd fd7c 	bl	80054e8 <HAL_GetTick>
 80079f0:	0002      	movs	r2, r0
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e0a9      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079fe:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	2202      	movs	r2, #2
 8007a04:	4013      	ands	r3, r2
 8007a06:	d1f1      	bne.n	80079ec <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d100      	bne.n	8007a12 <HAL_RCC_OscConfig+0x632>
 8007a10:	e09e      	b.n	8007b50 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	2b0c      	cmp	r3, #12
 8007a16:	d100      	bne.n	8007a1a <HAL_RCC_OscConfig+0x63a>
 8007a18:	e077      	b.n	8007b0a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d158      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <HAL_RCC_OscConfig+0x66c>)
 8007a28:	4910      	ldr	r1, [pc, #64]	; (8007a6c <HAL_RCC_OscConfig+0x68c>)
 8007a2a:	400a      	ands	r2, r1
 8007a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a2e:	f7fd fd5b 	bl	80054e8 <HAL_GetTick>
 8007a32:	0003      	movs	r3, r0
 8007a34:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007a36:	e01b      	b.n	8007a70 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a38:	f7fd fd56 	bl	80054e8 <HAL_GetTick>
 8007a3c:	0002      	movs	r2, r0
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d914      	bls.n	8007a70 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e083      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
 8007a4a:	46c0      	nop			; (mov r8, r8)
 8007a4c:	40021000 	.word	0x40021000
 8007a50:	fffffeff 	.word	0xfffffeff
 8007a54:	40007000 	.word	0x40007000
 8007a58:	fffffbff 	.word	0xfffffbff
 8007a5c:	00001388 	.word	0x00001388
 8007a60:	efffffff 	.word	0xefffffff
 8007a64:	40010000 	.word	0x40010000
 8007a68:	ffffdfff 	.word	0xffffdfff
 8007a6c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007a70:	4b3a      	ldr	r3, [pc, #232]	; (8007b5c <HAL_RCC_OscConfig+0x77c>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	2380      	movs	r3, #128	; 0x80
 8007a76:	049b      	lsls	r3, r3, #18
 8007a78:	4013      	ands	r3, r2
 8007a7a:	d1dd      	bne.n	8007a38 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a7c:	4b37      	ldr	r3, [pc, #220]	; (8007b5c <HAL_RCC_OscConfig+0x77c>)
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	4a37      	ldr	r2, [pc, #220]	; (8007b60 <HAL_RCC_OscConfig+0x780>)
 8007a82:	4013      	ands	r3, r2
 8007a84:	0019      	movs	r1, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a94:	431a      	orrs	r2, r3
 8007a96:	4b31      	ldr	r3, [pc, #196]	; (8007b5c <HAL_RCC_OscConfig+0x77c>)
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a9c:	4b2f      	ldr	r3, [pc, #188]	; (8007b5c <HAL_RCC_OscConfig+0x77c>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	4b2e      	ldr	r3, [pc, #184]	; (8007b5c <HAL_RCC_OscConfig+0x77c>)
 8007aa2:	2180      	movs	r1, #128	; 0x80
 8007aa4:	0449      	lsls	r1, r1, #17
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aaa:	f7fd fd1d 	bl	80054e8 <HAL_GetTick>
 8007aae:	0003      	movs	r3, r0
 8007ab0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007ab2:	e008      	b.n	8007ac6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ab4:	f7fd fd18 	bl	80054e8 <HAL_GetTick>
 8007ab8:	0002      	movs	r2, r0
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e045      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007ac6:	4b25      	ldr	r3, [pc, #148]	; (8007b5c <HAL_RCC_OscConfig+0x77c>)
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	2380      	movs	r3, #128	; 0x80
 8007acc:	049b      	lsls	r3, r3, #18
 8007ace:	4013      	ands	r3, r2
 8007ad0:	d0f0      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x6d4>
 8007ad2:	e03d      	b.n	8007b50 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ad4:	4b21      	ldr	r3, [pc, #132]	; (8007b5c <HAL_RCC_OscConfig+0x77c>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	4b20      	ldr	r3, [pc, #128]	; (8007b5c <HAL_RCC_OscConfig+0x77c>)
 8007ada:	4922      	ldr	r1, [pc, #136]	; (8007b64 <HAL_RCC_OscConfig+0x784>)
 8007adc:	400a      	ands	r2, r1
 8007ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae0:	f7fd fd02 	bl	80054e8 <HAL_GetTick>
 8007ae4:	0003      	movs	r3, r0
 8007ae6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aea:	f7fd fcfd 	bl	80054e8 <HAL_GetTick>
 8007aee:	0002      	movs	r2, r0
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e02a      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007afc:	4b17      	ldr	r3, [pc, #92]	; (8007b5c <HAL_RCC_OscConfig+0x77c>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	2380      	movs	r3, #128	; 0x80
 8007b02:	049b      	lsls	r3, r3, #18
 8007b04:	4013      	ands	r3, r2
 8007b06:	d1f0      	bne.n	8007aea <HAL_RCC_OscConfig+0x70a>
 8007b08:	e022      	b.n	8007b50 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e01d      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007b16:	4b11      	ldr	r3, [pc, #68]	; (8007b5c <HAL_RCC_OscConfig+0x77c>)
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	2380      	movs	r3, #128	; 0x80
 8007b20:	025b      	lsls	r3, r3, #9
 8007b22:	401a      	ands	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d10f      	bne.n	8007b4c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	23f0      	movs	r3, #240	; 0xf0
 8007b30:	039b      	lsls	r3, r3, #14
 8007b32:	401a      	ands	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d107      	bne.n	8007b4c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007b3c:	69fa      	ldr	r2, [r7, #28]
 8007b3e:	23c0      	movs	r3, #192	; 0xc0
 8007b40:	041b      	lsls	r3, r3, #16
 8007b42:	401a      	ands	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d001      	beq.n	8007b50 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e000      	b.n	8007b52 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	0018      	movs	r0, r3
 8007b54:	46bd      	mov	sp, r7
 8007b56:	b00a      	add	sp, #40	; 0x28
 8007b58:	bdb0      	pop	{r4, r5, r7, pc}
 8007b5a:	46c0      	nop			; (mov r8, r8)
 8007b5c:	40021000 	.word	0x40021000
 8007b60:	ff02ffff 	.word	0xff02ffff
 8007b64:	feffffff 	.word	0xfeffffff

08007b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b68:	b5b0      	push	{r4, r5, r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e128      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b7c:	4b96      	ldr	r3, [pc, #600]	; (8007dd8 <HAL_RCC_ClockConfig+0x270>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2201      	movs	r2, #1
 8007b82:	4013      	ands	r3, r2
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d91e      	bls.n	8007bc8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b8a:	4b93      	ldr	r3, [pc, #588]	; (8007dd8 <HAL_RCC_ClockConfig+0x270>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	4393      	bics	r3, r2
 8007b92:	0019      	movs	r1, r3
 8007b94:	4b90      	ldr	r3, [pc, #576]	; (8007dd8 <HAL_RCC_ClockConfig+0x270>)
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b9c:	f7fd fca4 	bl	80054e8 <HAL_GetTick>
 8007ba0:	0003      	movs	r3, r0
 8007ba2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba4:	e009      	b.n	8007bba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ba6:	f7fd fc9f 	bl	80054e8 <HAL_GetTick>
 8007baa:	0002      	movs	r2, r0
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	4a8a      	ldr	r2, [pc, #552]	; (8007ddc <HAL_RCC_ClockConfig+0x274>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e109      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bba:	4b87      	ldr	r3, [pc, #540]	; (8007dd8 <HAL_RCC_ClockConfig+0x270>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d1ee      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	4013      	ands	r3, r2
 8007bd0:	d009      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bd2:	4b83      	ldr	r3, [pc, #524]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	22f0      	movs	r2, #240	; 0xf0
 8007bd8:	4393      	bics	r3, r2
 8007bda:	0019      	movs	r1, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	4b7f      	ldr	r3, [pc, #508]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007be2:	430a      	orrs	r2, r1
 8007be4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2201      	movs	r2, #1
 8007bec:	4013      	ands	r3, r2
 8007bee:	d100      	bne.n	8007bf2 <HAL_RCC_ClockConfig+0x8a>
 8007bf0:	e089      	b.n	8007d06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d107      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bfa:	4b79      	ldr	r3, [pc, #484]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	2380      	movs	r3, #128	; 0x80
 8007c00:	029b      	lsls	r3, r3, #10
 8007c02:	4013      	ands	r3, r2
 8007c04:	d120      	bne.n	8007c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e0e1      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d107      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c12:	4b73      	ldr	r3, [pc, #460]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	2380      	movs	r3, #128	; 0x80
 8007c18:	049b      	lsls	r3, r3, #18
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	d114      	bne.n	8007c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e0d5      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d106      	bne.n	8007c38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c2a:	4b6d      	ldr	r3, [pc, #436]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2204      	movs	r2, #4
 8007c30:	4013      	ands	r3, r2
 8007c32:	d109      	bne.n	8007c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e0ca      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007c38:	4b69      	ldr	r3, [pc, #420]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	2380      	movs	r3, #128	; 0x80
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4013      	ands	r3, r2
 8007c42:	d101      	bne.n	8007c48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e0c2      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c48:	4b65      	ldr	r3, [pc, #404]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	2203      	movs	r2, #3
 8007c4e:	4393      	bics	r3, r2
 8007c50:	0019      	movs	r1, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	4b62      	ldr	r3, [pc, #392]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c5c:	f7fd fc44 	bl	80054e8 <HAL_GetTick>
 8007c60:	0003      	movs	r3, r0
 8007c62:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d111      	bne.n	8007c90 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c6c:	e009      	b.n	8007c82 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c6e:	f7fd fc3b 	bl	80054e8 <HAL_GetTick>
 8007c72:	0002      	movs	r2, r0
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	4a58      	ldr	r2, [pc, #352]	; (8007ddc <HAL_RCC_ClockConfig+0x274>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e0a5      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c82:	4b57      	ldr	r3, [pc, #348]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	220c      	movs	r2, #12
 8007c88:	4013      	ands	r3, r2
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	d1ef      	bne.n	8007c6e <HAL_RCC_ClockConfig+0x106>
 8007c8e:	e03a      	b.n	8007d06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d111      	bne.n	8007cbc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c98:	e009      	b.n	8007cae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c9a:	f7fd fc25 	bl	80054e8 <HAL_GetTick>
 8007c9e:	0002      	movs	r2, r0
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	4a4d      	ldr	r2, [pc, #308]	; (8007ddc <HAL_RCC_ClockConfig+0x274>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e08f      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cae:	4b4c      	ldr	r3, [pc, #304]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	220c      	movs	r2, #12
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b0c      	cmp	r3, #12
 8007cb8:	d1ef      	bne.n	8007c9a <HAL_RCC_ClockConfig+0x132>
 8007cba:	e024      	b.n	8007d06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d11b      	bne.n	8007cfc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cc4:	e009      	b.n	8007cda <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cc6:	f7fd fc0f 	bl	80054e8 <HAL_GetTick>
 8007cca:	0002      	movs	r2, r0
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	4a42      	ldr	r2, [pc, #264]	; (8007ddc <HAL_RCC_ClockConfig+0x274>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d901      	bls.n	8007cda <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e079      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cda:	4b41      	ldr	r3, [pc, #260]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	220c      	movs	r2, #12
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d1ef      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0x15e>
 8007ce6:	e00e      	b.n	8007d06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ce8:	f7fd fbfe 	bl	80054e8 <HAL_GetTick>
 8007cec:	0002      	movs	r2, r0
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	4a3a      	ldr	r2, [pc, #232]	; (8007ddc <HAL_RCC_ClockConfig+0x274>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d901      	bls.n	8007cfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e068      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007cfc:	4b38      	ldr	r3, [pc, #224]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	220c      	movs	r2, #12
 8007d02:	4013      	ands	r3, r2
 8007d04:	d1f0      	bne.n	8007ce8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d06:	4b34      	ldr	r3, [pc, #208]	; (8007dd8 <HAL_RCC_ClockConfig+0x270>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d21e      	bcs.n	8007d52 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d14:	4b30      	ldr	r3, [pc, #192]	; (8007dd8 <HAL_RCC_ClockConfig+0x270>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4393      	bics	r3, r2
 8007d1c:	0019      	movs	r1, r3
 8007d1e:	4b2e      	ldr	r3, [pc, #184]	; (8007dd8 <HAL_RCC_ClockConfig+0x270>)
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007d26:	f7fd fbdf 	bl	80054e8 <HAL_GetTick>
 8007d2a:	0003      	movs	r3, r0
 8007d2c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d2e:	e009      	b.n	8007d44 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d30:	f7fd fbda 	bl	80054e8 <HAL_GetTick>
 8007d34:	0002      	movs	r2, r0
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	4a28      	ldr	r2, [pc, #160]	; (8007ddc <HAL_RCC_ClockConfig+0x274>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d901      	bls.n	8007d44 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e044      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <HAL_RCC_ClockConfig+0x270>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d1ee      	bne.n	8007d30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2204      	movs	r2, #4
 8007d58:	4013      	ands	r3, r2
 8007d5a:	d009      	beq.n	8007d70 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d5c:	4b20      	ldr	r3, [pc, #128]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	4a20      	ldr	r2, [pc, #128]	; (8007de4 <HAL_RCC_ClockConfig+0x27c>)
 8007d62:	4013      	ands	r3, r2
 8007d64:	0019      	movs	r1, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	4b1d      	ldr	r3, [pc, #116]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2208      	movs	r2, #8
 8007d76:	4013      	ands	r3, r2
 8007d78:	d00a      	beq.n	8007d90 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d7a:	4b19      	ldr	r3, [pc, #100]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	4a1a      	ldr	r2, [pc, #104]	; (8007de8 <HAL_RCC_ClockConfig+0x280>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	0019      	movs	r1, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	00da      	lsls	r2, r3, #3
 8007d8a:	4b15      	ldr	r3, [pc, #84]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d90:	f000 f832 	bl	8007df8 <HAL_RCC_GetSysClockFreq>
 8007d94:	0001      	movs	r1, r0
 8007d96:	4b12      	ldr	r3, [pc, #72]	; (8007de0 <HAL_RCC_ClockConfig+0x278>)
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	091b      	lsrs	r3, r3, #4
 8007d9c:	220f      	movs	r2, #15
 8007d9e:	4013      	ands	r3, r2
 8007da0:	4a12      	ldr	r2, [pc, #72]	; (8007dec <HAL_RCC_ClockConfig+0x284>)
 8007da2:	5cd3      	ldrb	r3, [r2, r3]
 8007da4:	000a      	movs	r2, r1
 8007da6:	40da      	lsrs	r2, r3
 8007da8:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <HAL_RCC_ClockConfig+0x288>)
 8007daa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007dac:	4b11      	ldr	r3, [pc, #68]	; (8007df4 <HAL_RCC_ClockConfig+0x28c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	250b      	movs	r5, #11
 8007db2:	197c      	adds	r4, r7, r5
 8007db4:	0018      	movs	r0, r3
 8007db6:	f7fd fb51 	bl	800545c <HAL_InitTick>
 8007dba:	0003      	movs	r3, r0
 8007dbc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8007dbe:	197b      	adds	r3, r7, r5
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8007dc6:	197b      	adds	r3, r7, r5
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	e000      	b.n	8007dce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	0018      	movs	r0, r3
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	b004      	add	sp, #16
 8007dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	40022000 	.word	0x40022000
 8007ddc:	00001388 	.word	0x00001388
 8007de0:	40021000 	.word	0x40021000
 8007de4:	fffff8ff 	.word	0xfffff8ff
 8007de8:	ffffc7ff 	.word	0xffffc7ff
 8007dec:	0800ae28 	.word	0x0800ae28
 8007df0:	2000001c 	.word	0x2000001c
 8007df4:	20000020 	.word	0x20000020

08007df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007df8:	b5b0      	push	{r4, r5, r7, lr}
 8007dfa:	b08e      	sub	sp, #56	; 0x38
 8007dfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8007dfe:	4b4c      	ldr	r3, [pc, #304]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e06:	230c      	movs	r3, #12
 8007e08:	4013      	ands	r3, r2
 8007e0a:	2b0c      	cmp	r3, #12
 8007e0c:	d014      	beq.n	8007e38 <HAL_RCC_GetSysClockFreq+0x40>
 8007e0e:	d900      	bls.n	8007e12 <HAL_RCC_GetSysClockFreq+0x1a>
 8007e10:	e07b      	b.n	8007f0a <HAL_RCC_GetSysClockFreq+0x112>
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d002      	beq.n	8007e1c <HAL_RCC_GetSysClockFreq+0x24>
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d00b      	beq.n	8007e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e1a:	e076      	b.n	8007f0a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007e1c:	4b44      	ldr	r3, [pc, #272]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2210      	movs	r2, #16
 8007e22:	4013      	ands	r3, r2
 8007e24:	d002      	beq.n	8007e2c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8007e26:	4b43      	ldr	r3, [pc, #268]	; (8007f34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007e28:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8007e2a:	e07c      	b.n	8007f26 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8007e2c:	4b42      	ldr	r3, [pc, #264]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x140>)
 8007e2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007e30:	e079      	b.n	8007f26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007e32:	4b42      	ldr	r3, [pc, #264]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x144>)
 8007e34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007e36:	e076      	b.n	8007f26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	0c9a      	lsrs	r2, r3, #18
 8007e3c:	230f      	movs	r3, #15
 8007e3e:	401a      	ands	r2, r3
 8007e40:	4b3f      	ldr	r3, [pc, #252]	; (8007f40 <HAL_RCC_GetSysClockFreq+0x148>)
 8007e42:	5c9b      	ldrb	r3, [r3, r2]
 8007e44:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	0d9a      	lsrs	r2, r3, #22
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	3301      	adds	r3, #1
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e52:	4b37      	ldr	r3, [pc, #220]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	2380      	movs	r3, #128	; 0x80
 8007e58:	025b      	lsls	r3, r3, #9
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	d01a      	beq.n	8007e94 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	61bb      	str	r3, [r7, #24]
 8007e62:	2300      	movs	r3, #0
 8007e64:	61fb      	str	r3, [r7, #28]
 8007e66:	4a35      	ldr	r2, [pc, #212]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x144>)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	69b8      	ldr	r0, [r7, #24]
 8007e6c:	69f9      	ldr	r1, [r7, #28]
 8007e6e:	f7f8 f9f7 	bl	8000260 <__aeabi_lmul>
 8007e72:	0002      	movs	r2, r0
 8007e74:	000b      	movs	r3, r1
 8007e76:	0010      	movs	r0, r2
 8007e78:	0019      	movs	r1, r3
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	613b      	str	r3, [r7, #16]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f7f8 f9cb 	bl	8000220 <__aeabi_uldivmod>
 8007e8a:	0002      	movs	r2, r0
 8007e8c:	000b      	movs	r3, r1
 8007e8e:	0013      	movs	r3, r2
 8007e90:	637b      	str	r3, [r7, #52]	; 0x34
 8007e92:	e037      	b.n	8007f04 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007e94:	4b26      	ldr	r3, [pc, #152]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2210      	movs	r2, #16
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	d01a      	beq.n	8007ed4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	60bb      	str	r3, [r7, #8]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	4a23      	ldr	r2, [pc, #140]	; (8007f34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	68b8      	ldr	r0, [r7, #8]
 8007eac:	68f9      	ldr	r1, [r7, #12]
 8007eae:	f7f8 f9d7 	bl	8000260 <__aeabi_lmul>
 8007eb2:	0002      	movs	r2, r0
 8007eb4:	000b      	movs	r3, r1
 8007eb6:	0010      	movs	r0, r2
 8007eb8:	0019      	movs	r1, r3
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f7f8 f9ab 	bl	8000220 <__aeabi_uldivmod>
 8007eca:	0002      	movs	r2, r0
 8007ecc:	000b      	movs	r3, r1
 8007ece:	0013      	movs	r3, r2
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed2:	e017      	b.n	8007f04 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	2300      	movs	r3, #0
 8007eda:	0019      	movs	r1, r3
 8007edc:	4a16      	ldr	r2, [pc, #88]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x140>)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f7f8 f9be 	bl	8000260 <__aeabi_lmul>
 8007ee4:	0002      	movs	r2, r0
 8007ee6:	000b      	movs	r3, r1
 8007ee8:	0010      	movs	r0, r2
 8007eea:	0019      	movs	r1, r3
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	001c      	movs	r4, r3
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	001d      	movs	r5, r3
 8007ef4:	0022      	movs	r2, r4
 8007ef6:	002b      	movs	r3, r5
 8007ef8:	f7f8 f992 	bl	8000220 <__aeabi_uldivmod>
 8007efc:	0002      	movs	r2, r0
 8007efe:	000b      	movs	r3, r1
 8007f00:	0013      	movs	r3, r2
 8007f02:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8007f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007f08:	e00d      	b.n	8007f26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007f0a:	4b09      	ldr	r3, [pc, #36]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x138>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	0b5b      	lsrs	r3, r3, #13
 8007f10:	2207      	movs	r2, #7
 8007f12:	4013      	ands	r3, r2
 8007f14:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	2280      	movs	r2, #128	; 0x80
 8007f1c:	0212      	lsls	r2, r2, #8
 8007f1e:	409a      	lsls	r2, r3
 8007f20:	0013      	movs	r3, r2
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007f24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007f28:	0018      	movs	r0, r3
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	b00e      	add	sp, #56	; 0x38
 8007f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007f30:	40021000 	.word	0x40021000
 8007f34:	003d0900 	.word	0x003d0900
 8007f38:	00f42400 	.word	0x00f42400
 8007f3c:	007a1200 	.word	0x007a1200
 8007f40:	0800ae40 	.word	0x0800ae40

08007f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f48:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
}
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	2000001c 	.word	0x2000001c

08007f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f5c:	f7ff fff2 	bl	8007f44 <HAL_RCC_GetHCLKFreq>
 8007f60:	0001      	movs	r1, r0
 8007f62:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	2207      	movs	r2, #7
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	4a04      	ldr	r2, [pc, #16]	; (8007f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f6e:	5cd3      	ldrb	r3, [r2, r3]
 8007f70:	40d9      	lsrs	r1, r3
 8007f72:	000b      	movs	r3, r1
}
 8007f74:	0018      	movs	r0, r3
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	46c0      	nop			; (mov r8, r8)
 8007f7c:	40021000 	.word	0x40021000
 8007f80:	0800ae38 	.word	0x0800ae38

08007f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f88:	f7ff ffdc 	bl	8007f44 <HAL_RCC_GetHCLKFreq>
 8007f8c:	0001      	movs	r1, r0
 8007f8e:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	0adb      	lsrs	r3, r3, #11
 8007f94:	2207      	movs	r2, #7
 8007f96:	4013      	ands	r3, r2
 8007f98:	4a04      	ldr	r2, [pc, #16]	; (8007fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f9a:	5cd3      	ldrb	r3, [r2, r3]
 8007f9c:	40d9      	lsrs	r1, r3
 8007f9e:	000b      	movs	r3, r1
}
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	40021000 	.word	0x40021000
 8007fac:	0800ae38 	.word	0x0800ae38

08007fb0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8007fb8:	2317      	movs	r3, #23
 8007fba:	18fb      	adds	r3, r7, r3
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	d106      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	2380      	movs	r3, #128	; 0x80
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	d100      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8007fd6:	e0d9      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fd8:	4b9c      	ldr	r3, [pc, #624]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fdc:	2380      	movs	r3, #128	; 0x80
 8007fde:	055b      	lsls	r3, r3, #21
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	d10a      	bne.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fe4:	4b99      	ldr	r3, [pc, #612]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe8:	4b98      	ldr	r3, [pc, #608]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007fea:	2180      	movs	r1, #128	; 0x80
 8007fec:	0549      	lsls	r1, r1, #21
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007ff2:	2317      	movs	r3, #23
 8007ff4:	18fb      	adds	r3, r7, r3
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ffa:	4b95      	ldr	r3, [pc, #596]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	2380      	movs	r3, #128	; 0x80
 8008000:	005b      	lsls	r3, r3, #1
 8008002:	4013      	ands	r3, r2
 8008004:	d11a      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008006:	4b92      	ldr	r3, [pc, #584]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	4b91      	ldr	r3, [pc, #580]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800800c:	2180      	movs	r1, #128	; 0x80
 800800e:	0049      	lsls	r1, r1, #1
 8008010:	430a      	orrs	r2, r1
 8008012:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008014:	f7fd fa68 	bl	80054e8 <HAL_GetTick>
 8008018:	0003      	movs	r3, r0
 800801a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800801c:	e008      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800801e:	f7fd fa63 	bl	80054e8 <HAL_GetTick>
 8008022:	0002      	movs	r2, r0
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b64      	cmp	r3, #100	; 0x64
 800802a:	d901      	bls.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e108      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008030:	4b87      	ldr	r3, [pc, #540]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	2380      	movs	r3, #128	; 0x80
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	4013      	ands	r3, r2
 800803a:	d0f0      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800803c:	4b83      	ldr	r3, [pc, #524]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	23c0      	movs	r3, #192	; 0xc0
 8008042:	039b      	lsls	r3, r3, #14
 8008044:	4013      	ands	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	23c0      	movs	r3, #192	; 0xc0
 800804e:	039b      	lsls	r3, r3, #14
 8008050:	4013      	ands	r3, r2
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	429a      	cmp	r2, r3
 8008056:	d107      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689a      	ldr	r2, [r3, #8]
 800805c:	23c0      	movs	r3, #192	; 0xc0
 800805e:	039b      	lsls	r3, r3, #14
 8008060:	4013      	ands	r3, r2
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	429a      	cmp	r2, r3
 8008066:	d013      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	23c0      	movs	r3, #192	; 0xc0
 800806e:	029b      	lsls	r3, r3, #10
 8008070:	401a      	ands	r2, r3
 8008072:	23c0      	movs	r3, #192	; 0xc0
 8008074:	029b      	lsls	r3, r3, #10
 8008076:	429a      	cmp	r2, r3
 8008078:	d10a      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800807a:	4b74      	ldr	r3, [pc, #464]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	2380      	movs	r3, #128	; 0x80
 8008080:	029b      	lsls	r3, r3, #10
 8008082:	401a      	ands	r2, r3
 8008084:	2380      	movs	r3, #128	; 0x80
 8008086:	029b      	lsls	r3, r3, #10
 8008088:	429a      	cmp	r2, r3
 800808a:	d101      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e0d8      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008090:	4b6e      	ldr	r3, [pc, #440]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008092:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008094:	23c0      	movs	r3, #192	; 0xc0
 8008096:	029b      	lsls	r3, r3, #10
 8008098:	4013      	ands	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d049      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	23c0      	movs	r3, #192	; 0xc0
 80080a8:	029b      	lsls	r3, r3, #10
 80080aa:	4013      	ands	r3, r2
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d004      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2220      	movs	r2, #32
 80080b8:	4013      	ands	r3, r2
 80080ba:	d10d      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	23c0      	movs	r3, #192	; 0xc0
 80080c2:	029b      	lsls	r3, r3, #10
 80080c4:	4013      	ands	r3, r2
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d034      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	2380      	movs	r3, #128	; 0x80
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	4013      	ands	r3, r2
 80080d6:	d02e      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80080d8:	4b5c      	ldr	r3, [pc, #368]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80080da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080dc:	4a5d      	ldr	r2, [pc, #372]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80080de:	4013      	ands	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80080e2:	4b5a      	ldr	r3, [pc, #360]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80080e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080e6:	4b59      	ldr	r3, [pc, #356]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80080e8:	2180      	movs	r1, #128	; 0x80
 80080ea:	0309      	lsls	r1, r1, #12
 80080ec:	430a      	orrs	r2, r1
 80080ee:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080f0:	4b56      	ldr	r3, [pc, #344]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80080f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080f4:	4b55      	ldr	r3, [pc, #340]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80080f6:	4958      	ldr	r1, [pc, #352]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80080f8:	400a      	ands	r2, r1
 80080fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80080fc:	4b53      	ldr	r3, [pc, #332]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	2380      	movs	r3, #128	; 0x80
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	4013      	ands	r3, r2
 800810a:	d014      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800810c:	f7fd f9ec 	bl	80054e8 <HAL_GetTick>
 8008110:	0003      	movs	r3, r0
 8008112:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008114:	e009      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008116:	f7fd f9e7 	bl	80054e8 <HAL_GetTick>
 800811a:	0002      	movs	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	4a4e      	ldr	r2, [pc, #312]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d901      	bls.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e08b      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800812a:	4b48      	ldr	r3, [pc, #288]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800812c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800812e:	2380      	movs	r3, #128	; 0x80
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4013      	ands	r3, r2
 8008134:	d0ef      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	23c0      	movs	r3, #192	; 0xc0
 800813c:	029b      	lsls	r3, r3, #10
 800813e:	401a      	ands	r2, r3
 8008140:	23c0      	movs	r3, #192	; 0xc0
 8008142:	029b      	lsls	r3, r3, #10
 8008144:	429a      	cmp	r2, r3
 8008146:	d10c      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008148:	4b40      	ldr	r3, [pc, #256]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a44      	ldr	r2, [pc, #272]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800814e:	4013      	ands	r3, r2
 8008150:	0019      	movs	r1, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	23c0      	movs	r3, #192	; 0xc0
 8008158:	039b      	lsls	r3, r3, #14
 800815a:	401a      	ands	r2, r3
 800815c:	4b3b      	ldr	r3, [pc, #236]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800815e:	430a      	orrs	r2, r1
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	4b3a      	ldr	r3, [pc, #232]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008164:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	23c0      	movs	r3, #192	; 0xc0
 800816c:	029b      	lsls	r3, r3, #10
 800816e:	401a      	ands	r2, r3
 8008170:	4b36      	ldr	r3, [pc, #216]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008172:	430a      	orrs	r2, r1
 8008174:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008176:	2317      	movs	r3, #23
 8008178:	18fb      	adds	r3, r7, r3
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d105      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008180:	4b32      	ldr	r3, [pc, #200]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008184:	4b31      	ldr	r3, [pc, #196]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008186:	4937      	ldr	r1, [pc, #220]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008188:	400a      	ands	r2, r1
 800818a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2201      	movs	r2, #1
 8008192:	4013      	ands	r3, r2
 8008194:	d009      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008196:	4b2d      	ldr	r3, [pc, #180]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819a:	2203      	movs	r2, #3
 800819c:	4393      	bics	r3, r2
 800819e:	0019      	movs	r1, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	4b29      	ldr	r3, [pc, #164]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80081a6:	430a      	orrs	r2, r1
 80081a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2202      	movs	r2, #2
 80081b0:	4013      	ands	r3, r2
 80081b2:	d009      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081b4:	4b25      	ldr	r3, [pc, #148]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80081b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b8:	220c      	movs	r2, #12
 80081ba:	4393      	bics	r3, r2
 80081bc:	0019      	movs	r1, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691a      	ldr	r2, [r3, #16]
 80081c2:	4b22      	ldr	r3, [pc, #136]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80081c4:	430a      	orrs	r2, r1
 80081c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2204      	movs	r2, #4
 80081ce:	4013      	ands	r3, r2
 80081d0:	d009      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80081d2:	4b1e      	ldr	r3, [pc, #120]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80081d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d6:	4a24      	ldr	r2, [pc, #144]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80081d8:	4013      	ands	r3, r2
 80081da:	0019      	movs	r1, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	695a      	ldr	r2, [r3, #20]
 80081e0:	4b1a      	ldr	r3, [pc, #104]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80081e2:	430a      	orrs	r2, r1
 80081e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2208      	movs	r2, #8
 80081ec:	4013      	ands	r3, r2
 80081ee:	d009      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081f0:	4b16      	ldr	r3, [pc, #88]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80081f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f4:	4a1d      	ldr	r2, [pc, #116]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	0019      	movs	r1, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	4b13      	ldr	r3, [pc, #76]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008200:	430a      	orrs	r2, r1
 8008202:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2240      	movs	r2, #64	; 0x40
 800820a:	4013      	ands	r3, r2
 800820c:	d009      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800820e:	4b0f      	ldr	r3, [pc, #60]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008212:	4a17      	ldr	r2, [pc, #92]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008214:	4013      	ands	r3, r2
 8008216:	0019      	movs	r1, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1a      	ldr	r2, [r3, #32]
 800821c:	4b0b      	ldr	r3, [pc, #44]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800821e:	430a      	orrs	r2, r1
 8008220:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2280      	movs	r2, #128	; 0x80
 8008228:	4013      	ands	r3, r2
 800822a:	d009      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800822e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008230:	4a10      	ldr	r2, [pc, #64]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008232:	4013      	ands	r3, r2
 8008234:	0019      	movs	r1, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69da      	ldr	r2, [r3, #28]
 800823a:	4b04      	ldr	r3, [pc, #16]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800823c:	430a      	orrs	r2, r1
 800823e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	0018      	movs	r0, r3
 8008244:	46bd      	mov	sp, r7
 8008246:	b006      	add	sp, #24
 8008248:	bd80      	pop	{r7, pc}
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	40021000 	.word	0x40021000
 8008250:	40007000 	.word	0x40007000
 8008254:	fffcffff 	.word	0xfffcffff
 8008258:	fff7ffff 	.word	0xfff7ffff
 800825c:	00001388 	.word	0x00001388
 8008260:	ffcfffff 	.word	0xffcfffff
 8008264:	efffffff 	.word	0xefffffff
 8008268:	fffff3ff 	.word	0xfffff3ff
 800826c:	ffffcfff 	.word	0xffffcfff
 8008270:	fbffffff 	.word	0xfbffffff
 8008274:	fff3ffff 	.word	0xfff3ffff

08008278 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e083      	b.n	8008392 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	d109      	bne.n	80082a6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	2382      	movs	r3, #130	; 0x82
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	429a      	cmp	r2, r3
 800829c:	d009      	beq.n	80082b2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	61da      	str	r2, [r3, #28]
 80082a4:	e005      	b.n	80082b2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2251      	movs	r2, #81	; 0x51
 80082bc:	5c9b      	ldrb	r3, [r3, r2]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d107      	bne.n	80082d4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2250      	movs	r2, #80	; 0x50
 80082c8:	2100      	movs	r1, #0
 80082ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	0018      	movs	r0, r3
 80082d0:	f7fc f98e 	bl	80045f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2251      	movs	r2, #81	; 0x51
 80082d8:	2102      	movs	r1, #2
 80082da:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2140      	movs	r1, #64	; 0x40
 80082e8:	438a      	bics	r2, r1
 80082ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	2382      	movs	r3, #130	; 0x82
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	401a      	ands	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6899      	ldr	r1, [r3, #8]
 80082fa:	2384      	movs	r3, #132	; 0x84
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	400b      	ands	r3, r1
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68d9      	ldr	r1, [r3, #12]
 8008306:	2380      	movs	r3, #128	; 0x80
 8008308:	011b      	lsls	r3, r3, #4
 800830a:	400b      	ands	r3, r1
 800830c:	431a      	orrs	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2102      	movs	r1, #2
 8008314:	400b      	ands	r3, r1
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	2101      	movs	r1, #1
 800831e:	400b      	ands	r3, r1
 8008320:	431a      	orrs	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6999      	ldr	r1, [r3, #24]
 8008326:	2380      	movs	r3, #128	; 0x80
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	400b      	ands	r3, r1
 800832c:	431a      	orrs	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	2138      	movs	r1, #56	; 0x38
 8008334:	400b      	ands	r3, r1
 8008336:	431a      	orrs	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	2180      	movs	r1, #128	; 0x80
 800833e:	400b      	ands	r3, r1
 8008340:	431a      	orrs	r2, r3
 8008342:	0011      	movs	r1, r2
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008348:	2380      	movs	r3, #128	; 0x80
 800834a:	019b      	lsls	r3, r3, #6
 800834c:	401a      	ands	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	0c1b      	lsrs	r3, r3, #16
 800835c:	2204      	movs	r2, #4
 800835e:	4013      	ands	r3, r2
 8008360:	0019      	movs	r1, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	2210      	movs	r2, #16
 8008368:	401a      	ands	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69da      	ldr	r2, [r3, #28]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4907      	ldr	r1, [pc, #28]	; (800839c <HAL_SPI_Init+0x124>)
 800837e:	400a      	ands	r2, r1
 8008380:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2251      	movs	r2, #81	; 0x51
 800838c:	2101      	movs	r1, #1
 800838e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	0018      	movs	r0, r3
 8008394:	46bd      	mov	sp, r7
 8008396:	b002      	add	sp, #8
 8008398:	bd80      	pop	{r7, pc}
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	fffff7ff 	.word	0xfffff7ff

080083a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	1dbb      	adds	r3, r7, #6
 80083ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083b0:	231f      	movs	r3, #31
 80083b2:	18fb      	adds	r3, r7, r3
 80083b4:	2200      	movs	r2, #0
 80083b6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2250      	movs	r2, #80	; 0x50
 80083bc:	5c9b      	ldrb	r3, [r3, r2]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d101      	bne.n	80083c6 <HAL_SPI_Transmit+0x26>
 80083c2:	2302      	movs	r3, #2
 80083c4:	e13e      	b.n	8008644 <HAL_SPI_Transmit+0x2a4>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2250      	movs	r2, #80	; 0x50
 80083ca:	2101      	movs	r1, #1
 80083cc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083ce:	f7fd f88b 	bl	80054e8 <HAL_GetTick>
 80083d2:	0003      	movs	r3, r0
 80083d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80083d6:	2316      	movs	r3, #22
 80083d8:	18fb      	adds	r3, r7, r3
 80083da:	1dba      	adds	r2, r7, #6
 80083dc:	8812      	ldrh	r2, [r2, #0]
 80083de:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2251      	movs	r2, #81	; 0x51
 80083e4:	5c9b      	ldrb	r3, [r3, r2]
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d004      	beq.n	80083f6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80083ec:	231f      	movs	r3, #31
 80083ee:	18fb      	adds	r3, r7, r3
 80083f0:	2202      	movs	r2, #2
 80083f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80083f4:	e11b      	b.n	800862e <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <HAL_SPI_Transmit+0x64>
 80083fc:	1dbb      	adds	r3, r7, #6
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d104      	bne.n	800840e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008404:	231f      	movs	r3, #31
 8008406:	18fb      	adds	r3, r7, r3
 8008408:	2201      	movs	r2, #1
 800840a:	701a      	strb	r2, [r3, #0]
    goto error;
 800840c:	e10f      	b.n	800862e <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2251      	movs	r2, #81	; 0x51
 8008412:	2103      	movs	r1, #3
 8008414:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1dba      	adds	r2, r7, #6
 8008426:	8812      	ldrh	r2, [r2, #0]
 8008428:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	1dba      	adds	r2, r7, #6
 800842e:	8812      	ldrh	r2, [r2, #0]
 8008430:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689a      	ldr	r2, [r3, #8]
 8008454:	2380      	movs	r3, #128	; 0x80
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	429a      	cmp	r2, r3
 800845a:	d110      	bne.n	800847e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2140      	movs	r1, #64	; 0x40
 8008468:	438a      	bics	r2, r1
 800846a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2180      	movs	r1, #128	; 0x80
 8008478:	01c9      	lsls	r1, r1, #7
 800847a:	430a      	orrs	r2, r1
 800847c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2240      	movs	r2, #64	; 0x40
 8008486:	4013      	ands	r3, r2
 8008488:	2b40      	cmp	r3, #64	; 0x40
 800848a:	d007      	beq.n	800849c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2140      	movs	r1, #64	; 0x40
 8008498:	430a      	orrs	r2, r1
 800849a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	2380      	movs	r3, #128	; 0x80
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d14e      	bne.n	8008546 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <HAL_SPI_Transmit+0x11a>
 80084b0:	2316      	movs	r3, #22
 80084b2:	18fb      	adds	r3, r7, r3
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d13f      	bne.n	800853a <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	881a      	ldrh	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	1c9a      	adds	r2, r3, #2
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b29a      	uxth	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80084de:	e02c      	b.n	800853a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	2202      	movs	r2, #2
 80084e8:	4013      	ands	r3, r2
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d112      	bne.n	8008514 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f2:	881a      	ldrh	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	1c9a      	adds	r2, r3, #2
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	86da      	strh	r2, [r3, #54]	; 0x36
 8008512:	e012      	b.n	800853a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008514:	f7fc ffe8 	bl	80054e8 <HAL_GetTick>
 8008518:	0002      	movs	r2, r0
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	d802      	bhi.n	800852a <HAL_SPI_Transmit+0x18a>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	d102      	bne.n	8008530 <HAL_SPI_Transmit+0x190>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d104      	bne.n	800853a <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8008530:	231f      	movs	r3, #31
 8008532:	18fb      	adds	r3, r7, r3
 8008534:	2203      	movs	r2, #3
 8008536:	701a      	strb	r2, [r3, #0]
          goto error;
 8008538:	e079      	b.n	800862e <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800853e:	b29b      	uxth	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1cd      	bne.n	80084e0 <HAL_SPI_Transmit+0x140>
 8008544:	e04f      	b.n	80085e6 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <HAL_SPI_Transmit+0x1b8>
 800854e:	2316      	movs	r3, #22
 8008550:	18fb      	adds	r3, r7, r3
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d141      	bne.n	80085dc <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	330c      	adds	r3, #12
 8008562:	7812      	ldrb	r2, [r2, #0]
 8008564:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008574:	b29b      	uxth	r3, r3
 8008576:	3b01      	subs	r3, #1
 8008578:	b29a      	uxth	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800857e:	e02d      	b.n	80085dc <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	2202      	movs	r2, #2
 8008588:	4013      	ands	r3, r2
 800858a:	2b02      	cmp	r3, #2
 800858c:	d113      	bne.n	80085b6 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	330c      	adds	r3, #12
 8008598:	7812      	ldrb	r2, [r2, #0]
 800859a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a0:	1c5a      	adds	r2, r3, #1
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	3b01      	subs	r3, #1
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80085b4:	e012      	b.n	80085dc <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085b6:	f7fc ff97 	bl	80054e8 <HAL_GetTick>
 80085ba:	0002      	movs	r2, r0
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d802      	bhi.n	80085cc <HAL_SPI_Transmit+0x22c>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	3301      	adds	r3, #1
 80085ca:	d102      	bne.n	80085d2 <HAL_SPI_Transmit+0x232>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d104      	bne.n	80085dc <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80085d2:	231f      	movs	r3, #31
 80085d4:	18fb      	adds	r3, r7, r3
 80085d6:	2203      	movs	r2, #3
 80085d8:	701a      	strb	r2, [r3, #0]
          goto error;
 80085da:	e028      	b.n	800862e <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1cc      	bne.n	8008580 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	0018      	movs	r0, r3
 80085ee:	f000 fc07 	bl	8008e00 <SPI_EndRxTxTransaction>
 80085f2:	1e03      	subs	r3, r0, #0
 80085f4:	d002      	beq.n	80085fc <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2220      	movs	r2, #32
 80085fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008604:	2300      	movs	r3, #0
 8008606:	613b      	str	r3, [r7, #16]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	613b      	str	r3, [r7, #16]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8008622:	231f      	movs	r3, #31
 8008624:	18fb      	adds	r3, r7, r3
 8008626:	2201      	movs	r2, #1
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	e000      	b.n	800862e <HAL_SPI_Transmit+0x28e>
  }

error:
 800862c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2251      	movs	r2, #81	; 0x51
 8008632:	2101      	movs	r1, #1
 8008634:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2250      	movs	r2, #80	; 0x50
 800863a:	2100      	movs	r1, #0
 800863c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800863e:	231f      	movs	r3, #31
 8008640:	18fb      	adds	r3, r7, r3
 8008642:	781b      	ldrb	r3, [r3, #0]
}
 8008644:	0018      	movs	r0, r3
 8008646:	46bd      	mov	sp, r7
 8008648:	b008      	add	sp, #32
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800864c:	b590      	push	{r4, r7, lr}
 800864e:	b089      	sub	sp, #36	; 0x24
 8008650:	af02      	add	r7, sp, #8
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	1dbb      	adds	r3, r7, #6
 800865a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800865c:	2317      	movs	r3, #23
 800865e:	18fb      	adds	r3, r7, r3
 8008660:	2200      	movs	r2, #0
 8008662:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	2382      	movs	r3, #130	; 0x82
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	429a      	cmp	r2, r3
 800866e:	d113      	bne.n	8008698 <HAL_SPI_Receive+0x4c>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10f      	bne.n	8008698 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2251      	movs	r2, #81	; 0x51
 800867c:	2104      	movs	r1, #4
 800867e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008680:	1dbb      	adds	r3, r7, #6
 8008682:	881c      	ldrh	r4, [r3, #0]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	0023      	movs	r3, r4
 8008690:	f000 f902 	bl	8008898 <HAL_SPI_TransmitReceive>
 8008694:	0003      	movs	r3, r0
 8008696:	e0f9      	b.n	800888c <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2250      	movs	r2, #80	; 0x50
 800869c:	5c9b      	ldrb	r3, [r3, r2]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d101      	bne.n	80086a6 <HAL_SPI_Receive+0x5a>
 80086a2:	2302      	movs	r3, #2
 80086a4:	e0f2      	b.n	800888c <HAL_SPI_Receive+0x240>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2250      	movs	r2, #80	; 0x50
 80086aa:	2101      	movs	r1, #1
 80086ac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086ae:	f7fc ff1b 	bl	80054e8 <HAL_GetTick>
 80086b2:	0003      	movs	r3, r0
 80086b4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2251      	movs	r2, #81	; 0x51
 80086ba:	5c9b      	ldrb	r3, [r3, r2]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d004      	beq.n	80086cc <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80086c2:	2317      	movs	r3, #23
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	2202      	movs	r2, #2
 80086c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80086ca:	e0d4      	b.n	8008876 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_SPI_Receive+0x8e>
 80086d2:	1dbb      	adds	r3, r7, #6
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d104      	bne.n	80086e4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80086da:	2317      	movs	r3, #23
 80086dc:	18fb      	adds	r3, r7, r3
 80086de:	2201      	movs	r2, #1
 80086e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80086e2:	e0c8      	b.n	8008876 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2251      	movs	r2, #81	; 0x51
 80086e8:	2104      	movs	r1, #4
 80086ea:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	1dba      	adds	r2, r7, #6
 80086fc:	8812      	ldrh	r2, [r2, #0]
 80086fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	1dba      	adds	r2, r7, #6
 8008704:	8812      	ldrh	r2, [r2, #0]
 8008706:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	2380      	movs	r3, #128	; 0x80
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	429a      	cmp	r2, r3
 8008730:	d10f      	bne.n	8008752 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2140      	movs	r1, #64	; 0x40
 800873e:	438a      	bics	r2, r1
 8008740:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4951      	ldr	r1, [pc, #324]	; (8008894 <HAL_SPI_Receive+0x248>)
 800874e:	400a      	ands	r2, r1
 8008750:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2240      	movs	r2, #64	; 0x40
 800875a:	4013      	ands	r3, r2
 800875c:	2b40      	cmp	r3, #64	; 0x40
 800875e:	d007      	beq.n	8008770 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2140      	movs	r1, #64	; 0x40
 800876c:	430a      	orrs	r2, r1
 800876e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d164      	bne.n	8008842 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008778:	e02f      	b.n	80087da <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	2201      	movs	r2, #1
 8008782:	4013      	ands	r3, r2
 8008784:	2b01      	cmp	r3, #1
 8008786:	d115      	bne.n	80087b4 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	330c      	adds	r3, #12
 800878e:	001a      	movs	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	7812      	ldrb	r2, [r2, #0]
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087b2:	e012      	b.n	80087da <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087b4:	f7fc fe98 	bl	80054e8 <HAL_GetTick>
 80087b8:	0002      	movs	r2, r0
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d802      	bhi.n	80087ca <HAL_SPI_Receive+0x17e>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	3301      	adds	r3, #1
 80087c8:	d102      	bne.n	80087d0 <HAL_SPI_Receive+0x184>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80087d0:	2317      	movs	r3, #23
 80087d2:	18fb      	adds	r3, r7, r3
 80087d4:	2203      	movs	r2, #3
 80087d6:	701a      	strb	r2, [r3, #0]
          goto error;
 80087d8:	e04d      	b.n	8008876 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087de:	b29b      	uxth	r3, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1ca      	bne.n	800877a <HAL_SPI_Receive+0x12e>
 80087e4:	e032      	b.n	800884c <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	2201      	movs	r2, #1
 80087ee:	4013      	ands	r3, r2
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d113      	bne.n	800881c <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fe:	b292      	uxth	r2, r2
 8008800:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	1c9a      	adds	r2, r3, #2
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	87da      	strh	r2, [r3, #62]	; 0x3e
 800881a:	e012      	b.n	8008842 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800881c:	f7fc fe64 	bl	80054e8 <HAL_GetTick>
 8008820:	0002      	movs	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d802      	bhi.n	8008832 <HAL_SPI_Receive+0x1e6>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	3301      	adds	r3, #1
 8008830:	d102      	bne.n	8008838 <HAL_SPI_Receive+0x1ec>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d104      	bne.n	8008842 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8008838:	2317      	movs	r3, #23
 800883a:	18fb      	adds	r3, r7, r3
 800883c:	2203      	movs	r2, #3
 800883e:	701a      	strb	r2, [r3, #0]
          goto error;
 8008840:	e019      	b.n	8008876 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008846:	b29b      	uxth	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1cc      	bne.n	80087e6 <HAL_SPI_Receive+0x19a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	0018      	movs	r0, r3
 8008854:	f000 fa6a 	bl	8008d2c <SPI_EndRxTransaction>
 8008858:	1e03      	subs	r3, r0, #0
 800885a:	d002      	beq.n	8008862 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2220      	movs	r2, #32
 8008860:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008866:	2b00      	cmp	r3, #0
 8008868:	d004      	beq.n	8008874 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 800886a:	2317      	movs	r3, #23
 800886c:	18fb      	adds	r3, r7, r3
 800886e:	2201      	movs	r2, #1
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	e000      	b.n	8008876 <HAL_SPI_Receive+0x22a>
  }

error :
 8008874:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2251      	movs	r2, #81	; 0x51
 800887a:	2101      	movs	r1, #1
 800887c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2250      	movs	r2, #80	; 0x50
 8008882:	2100      	movs	r1, #0
 8008884:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008886:	2317      	movs	r3, #23
 8008888:	18fb      	adds	r3, r7, r3
 800888a:	781b      	ldrb	r3, [r3, #0]
}
 800888c:	0018      	movs	r0, r3
 800888e:	46bd      	mov	sp, r7
 8008890:	b007      	add	sp, #28
 8008892:	bd90      	pop	{r4, r7, pc}
 8008894:	ffffbfff 	.word	0xffffbfff

08008898 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08c      	sub	sp, #48	; 0x30
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	001a      	movs	r2, r3
 80088a6:	1cbb      	adds	r3, r7, #2
 80088a8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80088aa:	2301      	movs	r3, #1
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80088ae:	232b      	movs	r3, #43	; 0x2b
 80088b0:	18fb      	adds	r3, r7, r3
 80088b2:	2200      	movs	r2, #0
 80088b4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2250      	movs	r2, #80	; 0x50
 80088ba:	5c9b      	ldrb	r3, [r3, r2]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_SPI_TransmitReceive+0x2c>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e1a0      	b.n	8008c06 <HAL_SPI_TransmitReceive+0x36e>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2250      	movs	r2, #80	; 0x50
 80088c8:	2101      	movs	r1, #1
 80088ca:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088cc:	f7fc fe0c 	bl	80054e8 <HAL_GetTick>
 80088d0:	0003      	movs	r3, r0
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80088d4:	2023      	movs	r0, #35	; 0x23
 80088d6:	183b      	adds	r3, r7, r0
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	2151      	movs	r1, #81	; 0x51
 80088dc:	5c52      	ldrb	r2, [r2, r1]
 80088de:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80088e6:	231a      	movs	r3, #26
 80088e8:	18fb      	adds	r3, r7, r3
 80088ea:	1cba      	adds	r2, r7, #2
 80088ec:	8812      	ldrh	r2, [r2, #0]
 80088ee:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80088f0:	183b      	adds	r3, r7, r0
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d011      	beq.n	800891c <HAL_SPI_TransmitReceive+0x84>
 80088f8:	69fa      	ldr	r2, [r7, #28]
 80088fa:	2382      	movs	r3, #130	; 0x82
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	429a      	cmp	r2, r3
 8008900:	d107      	bne.n	8008912 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d103      	bne.n	8008912 <HAL_SPI_TransmitReceive+0x7a>
 800890a:	183b      	adds	r3, r7, r0
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b04      	cmp	r3, #4
 8008910:	d004      	beq.n	800891c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008912:	232b      	movs	r3, #43	; 0x2b
 8008914:	18fb      	adds	r3, r7, r3
 8008916:	2202      	movs	r2, #2
 8008918:	701a      	strb	r2, [r3, #0]
    goto error;
 800891a:	e169      	b.n	8008bf0 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d006      	beq.n	8008930 <HAL_SPI_TransmitReceive+0x98>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <HAL_SPI_TransmitReceive+0x98>
 8008928:	1cbb      	adds	r3, r7, #2
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008930:	232b      	movs	r3, #43	; 0x2b
 8008932:	18fb      	adds	r3, r7, r3
 8008934:	2201      	movs	r2, #1
 8008936:	701a      	strb	r2, [r3, #0]
    goto error;
 8008938:	e15a      	b.n	8008bf0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2251      	movs	r2, #81	; 0x51
 800893e:	5c9b      	ldrb	r3, [r3, r2]
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b04      	cmp	r3, #4
 8008944:	d003      	beq.n	800894e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2251      	movs	r2, #81	; 0x51
 800894a:	2105      	movs	r1, #5
 800894c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1cba      	adds	r2, r7, #2
 800895e:	8812      	ldrh	r2, [r2, #0]
 8008960:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1cba      	adds	r2, r7, #2
 8008966:	8812      	ldrh	r2, [r2, #0]
 8008968:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	1cba      	adds	r2, r7, #2
 8008974:	8812      	ldrh	r2, [r2, #0]
 8008976:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	1cba      	adds	r2, r7, #2
 800897c:	8812      	ldrh	r2, [r2, #0]
 800897e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2240      	movs	r2, #64	; 0x40
 8008994:	4013      	ands	r3, r2
 8008996:	2b40      	cmp	r3, #64	; 0x40
 8008998:	d007      	beq.n	80089aa <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2140      	movs	r1, #64	; 0x40
 80089a6:	430a      	orrs	r2, r1
 80089a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	2380      	movs	r3, #128	; 0x80
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d000      	beq.n	80089b8 <HAL_SPI_TransmitReceive+0x120>
 80089b6:	e07a      	b.n	8008aae <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <HAL_SPI_TransmitReceive+0x132>
 80089c0:	231a      	movs	r3, #26
 80089c2:	18fb      	adds	r3, r7, r3
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d166      	bne.n	8008a98 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	881a      	ldrh	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	1c9a      	adds	r2, r3, #2
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089ee:	e053      	b.n	8008a98 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	2202      	movs	r2, #2
 80089f8:	4013      	ands	r3, r2
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d11b      	bne.n	8008a36 <HAL_SPI_TransmitReceive+0x19e>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d016      	beq.n	8008a36 <HAL_SPI_TransmitReceive+0x19e>
 8008a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d113      	bne.n	8008a36 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	881a      	ldrh	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1e:	1c9a      	adds	r2, r3, #2
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d119      	bne.n	8008a78 <HAL_SPI_TransmitReceive+0x1e0>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d014      	beq.n	8008a78 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68da      	ldr	r2, [r3, #12]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	b292      	uxth	r2, r2
 8008a5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	1c9a      	adds	r2, r3, #2
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a74:	2301      	movs	r3, #1
 8008a76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a78:	f7fc fd36 	bl	80054e8 <HAL_GetTick>
 8008a7c:	0002      	movs	r2, r0
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d807      	bhi.n	8008a98 <HAL_SPI_TransmitReceive+0x200>
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	d004      	beq.n	8008a98 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8008a8e:	232b      	movs	r3, #43	; 0x2b
 8008a90:	18fb      	adds	r3, r7, r3
 8008a92:	2203      	movs	r2, #3
 8008a94:	701a      	strb	r2, [r3, #0]
        goto error;
 8008a96:	e0ab      	b.n	8008bf0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1a6      	bne.n	80089f0 <HAL_SPI_TransmitReceive+0x158>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1a1      	bne.n	80089f0 <HAL_SPI_TransmitReceive+0x158>
 8008aac:	e07f      	b.n	8008bae <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <HAL_SPI_TransmitReceive+0x22a>
 8008ab6:	231a      	movs	r3, #26
 8008ab8:	18fb      	adds	r3, r7, r3
 8008aba:	881b      	ldrh	r3, [r3, #0]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d000      	beq.n	8008ac2 <HAL_SPI_TransmitReceive+0x22a>
 8008ac0:	e06b      	b.n	8008b9a <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	330c      	adds	r3, #12
 8008acc:	7812      	ldrb	r2, [r2, #0]
 8008ace:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ae8:	e057      	b.n	8008b9a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	2202      	movs	r2, #2
 8008af2:	4013      	ands	r3, r2
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d11c      	bne.n	8008b32 <HAL_SPI_TransmitReceive+0x29a>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d017      	beq.n	8008b32 <HAL_SPI_TransmitReceive+0x29a>
 8008b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d114      	bne.n	8008b32 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	330c      	adds	r3, #12
 8008b12:	7812      	ldrb	r2, [r2, #0]
 8008b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	3b01      	subs	r3, #1
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d119      	bne.n	8008b74 <HAL_SPI_TransmitReceive+0x2dc>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d014      	beq.n	8008b74 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b54:	b2d2      	uxtb	r2, r2
 8008b56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b70:	2301      	movs	r3, #1
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008b74:	f7fc fcb8 	bl	80054e8 <HAL_GetTick>
 8008b78:	0002      	movs	r2, r0
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d802      	bhi.n	8008b8a <HAL_SPI_TransmitReceive+0x2f2>
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	3301      	adds	r3, #1
 8008b88:	d102      	bne.n	8008b90 <HAL_SPI_TransmitReceive+0x2f8>
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d104      	bne.n	8008b9a <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8008b90:	232b      	movs	r3, #43	; 0x2b
 8008b92:	18fb      	adds	r3, r7, r3
 8008b94:	2203      	movs	r2, #3
 8008b96:	701a      	strb	r2, [r3, #0]
        goto error;
 8008b98:	e02a      	b.n	8008bf0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1a2      	bne.n	8008aea <HAL_SPI_TransmitReceive+0x252>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d19d      	bne.n	8008aea <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f000 f923 	bl	8008e00 <SPI_EndRxTxTransaction>
 8008bba:	1e03      	subs	r3, r0, #0
 8008bbc:	d007      	beq.n	8008bce <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8008bbe:	232b      	movs	r3, #43	; 0x2b
 8008bc0:	18fb      	adds	r3, r7, r3
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008bcc:	e010      	b.n	8008bf0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10b      	bne.n	8008bee <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	e000      	b.n	8008bf0 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8008bee:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2251      	movs	r2, #81	; 0x51
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2250      	movs	r2, #80	; 0x50
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008c00:	232b      	movs	r3, #43	; 0x2b
 8008c02:	18fb      	adds	r3, r7, r3
 8008c04:	781b      	ldrb	r3, [r3, #0]
}
 8008c06:	0018      	movs	r0, r3
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	b00c      	add	sp, #48	; 0x30
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	603b      	str	r3, [r7, #0]
 8008c1c:	1dfb      	adds	r3, r7, #7
 8008c1e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c20:	f7fc fc62 	bl	80054e8 <HAL_GetTick>
 8008c24:	0002      	movs	r2, r0
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	1a9b      	subs	r3, r3, r2
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	18d3      	adds	r3, r2, r3
 8008c2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c30:	f7fc fc5a 	bl	80054e8 <HAL_GetTick>
 8008c34:	0003      	movs	r3, r0
 8008c36:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c38:	4b3a      	ldr	r3, [pc, #232]	; (8008d24 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	015b      	lsls	r3, r3, #5
 8008c3e:	0d1b      	lsrs	r3, r3, #20
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	4353      	muls	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c46:	e058      	b.n	8008cfa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	d055      	beq.n	8008cfa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c4e:	f7fc fc4b 	bl	80054e8 <HAL_GetTick>
 8008c52:	0002      	movs	r2, r0
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	69fa      	ldr	r2, [r7, #28]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d902      	bls.n	8008c64 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d142      	bne.n	8008cea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	21e0      	movs	r1, #224	; 0xe0
 8008c70:	438a      	bics	r2, r1
 8008c72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	2382      	movs	r3, #130	; 0x82
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d113      	bne.n	8008ca8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	2380      	movs	r3, #128	; 0x80
 8008c86:	021b      	lsls	r3, r3, #8
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d005      	beq.n	8008c98 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	2380      	movs	r3, #128	; 0x80
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d107      	bne.n	8008ca8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2140      	movs	r1, #64	; 0x40
 8008ca4:	438a      	bics	r2, r1
 8008ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cac:	2380      	movs	r3, #128	; 0x80
 8008cae:	019b      	lsls	r3, r3, #6
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d110      	bne.n	8008cd6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	491a      	ldr	r1, [pc, #104]	; (8008d28 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008cc0:	400a      	ands	r2, r1
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2180      	movs	r1, #128	; 0x80
 8008cd0:	0189      	lsls	r1, r1, #6
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2251      	movs	r2, #81	; 0x51
 8008cda:	2101      	movs	r1, #1
 8008cdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2250      	movs	r2, #80	; 0x50
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e017      	b.n	8008d1a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	4013      	ands	r3, r2
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	425a      	negs	r2, r3
 8008d0a:	4153      	adcs	r3, r2
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	001a      	movs	r2, r3
 8008d10:	1dfb      	adds	r3, r7, #7
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d197      	bne.n	8008c48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	b008      	add	sp, #32
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	2000001c 	.word	0x2000001c
 8008d28:	ffffdfff 	.word	0xffffdfff

08008d2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af02      	add	r7, sp, #8
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	2382      	movs	r3, #130	; 0x82
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d113      	bne.n	8008d6c <SPI_EndRxTransaction+0x40>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	021b      	lsls	r3, r3, #8
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d005      	beq.n	8008d5c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	2380      	movs	r3, #128	; 0x80
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d107      	bne.n	8008d6c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2140      	movs	r1, #64	; 0x40
 8008d68:	438a      	bics	r2, r1
 8008d6a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	2382      	movs	r3, #130	; 0x82
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d12b      	bne.n	8008dd0 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	689a      	ldr	r2, [r3, #8]
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d012      	beq.n	8008daa <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	0013      	movs	r3, r2
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2180      	movs	r1, #128	; 0x80
 8008d92:	f7ff ff3d 	bl	8008c10 <SPI_WaitFlagStateUntilTimeout>
 8008d96:	1e03      	subs	r3, r0, #0
 8008d98:	d02d      	beq.n	8008df6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9e:	2220      	movs	r2, #32
 8008da0:	431a      	orrs	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e026      	b.n	8008df8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	0013      	movs	r3, r2
 8008db4:	2200      	movs	r2, #0
 8008db6:	2101      	movs	r1, #1
 8008db8:	f7ff ff2a 	bl	8008c10 <SPI_WaitFlagStateUntilTimeout>
 8008dbc:	1e03      	subs	r3, r0, #0
 8008dbe:	d01a      	beq.n	8008df6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e013      	b.n	8008df8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	0013      	movs	r3, r2
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2101      	movs	r1, #1
 8008dde:	f7ff ff17 	bl	8008c10 <SPI_WaitFlagStateUntilTimeout>
 8008de2:	1e03      	subs	r3, r0, #0
 8008de4:	d007      	beq.n	8008df6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dea:	2220      	movs	r2, #32
 8008dec:	431a      	orrs	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e000      	b.n	8008df8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	0018      	movs	r0, r3
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	b004      	add	sp, #16
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e0c:	4b1d      	ldr	r3, [pc, #116]	; (8008e84 <SPI_EndRxTxTransaction+0x84>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	491d      	ldr	r1, [pc, #116]	; (8008e88 <SPI_EndRxTxTransaction+0x88>)
 8008e12:	0018      	movs	r0, r3
 8008e14:	f7f7 f978 	bl	8000108 <__udivsi3>
 8008e18:	0003      	movs	r3, r0
 8008e1a:	001a      	movs	r2, r3
 8008e1c:	0013      	movs	r3, r2
 8008e1e:	015b      	lsls	r3, r3, #5
 8008e20:	1a9b      	subs	r3, r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	189b      	adds	r3, r3, r2
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	2382      	movs	r3, #130	; 0x82
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d112      	bne.n	8008e5c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	0013      	movs	r3, r2
 8008e40:	2200      	movs	r2, #0
 8008e42:	2180      	movs	r1, #128	; 0x80
 8008e44:	f7ff fee4 	bl	8008c10 <SPI_WaitFlagStateUntilTimeout>
 8008e48:	1e03      	subs	r3, r0, #0
 8008e4a:	d016      	beq.n	8008e7a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e50:	2220      	movs	r2, #32
 8008e52:	431a      	orrs	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e00f      	b.n	8008e7c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00a      	beq.n	8008e78 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	2280      	movs	r2, #128	; 0x80
 8008e70:	4013      	ands	r3, r2
 8008e72:	2b80      	cmp	r3, #128	; 0x80
 8008e74:	d0f2      	beq.n	8008e5c <SPI_EndRxTxTransaction+0x5c>
 8008e76:	e000      	b.n	8008e7a <SPI_EndRxTxTransaction+0x7a>
        break;
 8008e78:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b006      	add	sp, #24
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	2000001c 	.word	0x2000001c
 8008e88:	016e3600 	.word	0x016e3600

08008e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e032      	b.n	8008f04 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2239      	movs	r2, #57	; 0x39
 8008ea2:	5c9b      	ldrb	r3, [r3, r2]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d107      	bne.n	8008eba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2238      	movs	r2, #56	; 0x38
 8008eae:	2100      	movs	r1, #0
 8008eb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f7fc f84b 	bl	8004f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2239      	movs	r2, #57	; 0x39
 8008ebe:	2102      	movs	r1, #2
 8008ec0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	0019      	movs	r1, r3
 8008ecc:	0010      	movs	r0, r2
 8008ece:	f000 fa43 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	223e      	movs	r2, #62	; 0x3e
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	223a      	movs	r2, #58	; 0x3a
 8008ede:	2101      	movs	r1, #1
 8008ee0:	5499      	strb	r1, [r3, r2]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	223b      	movs	r2, #59	; 0x3b
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	5499      	strb	r1, [r3, r2]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	223c      	movs	r2, #60	; 0x3c
 8008eee:	2101      	movs	r1, #1
 8008ef0:	5499      	strb	r1, [r3, r2]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	223d      	movs	r2, #61	; 0x3d
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2239      	movs	r2, #57	; 0x39
 8008efe:	2101      	movs	r1, #1
 8008f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	0018      	movs	r0, r3
 8008f06:	46bd      	mov	sp, r7
 8008f08:	b002      	add	sp, #8
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2239      	movs	r2, #57	; 0x39
 8008f18:	5c9b      	ldrb	r3, [r3, r2]
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d001      	beq.n	8008f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e036      	b.n	8008f92 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2239      	movs	r2, #57	; 0x39
 8008f28:	2102      	movs	r1, #2
 8008f2a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2101      	movs	r1, #1
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	2380      	movs	r3, #128	; 0x80
 8008f42:	05db      	lsls	r3, r3, #23
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d009      	beq.n	8008f5c <HAL_TIM_Base_Start_IT+0x50>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a13      	ldr	r2, [pc, #76]	; (8008f9c <HAL_TIM_Base_Start_IT+0x90>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d004      	beq.n	8008f5c <HAL_TIM_Base_Start_IT+0x50>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a12      	ldr	r2, [pc, #72]	; (8008fa0 <HAL_TIM_Base_Start_IT+0x94>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d111      	bne.n	8008f80 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	2207      	movs	r2, #7
 8008f64:	4013      	ands	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b06      	cmp	r3, #6
 8008f6c:	d010      	beq.n	8008f90 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2101      	movs	r1, #1
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f7e:	e007      	b.n	8008f90 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	0018      	movs	r0, r3
 8008f94:	46bd      	mov	sp, r7
 8008f96:	b004      	add	sp, #16
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	40010800 	.word	0x40010800
 8008fa0:	40011400 	.word	0x40011400

08008fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d124      	bne.n	8009004 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d11d      	bne.n	8009004 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2203      	movs	r2, #3
 8008fce:	4252      	negs	r2, r2
 8008fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	2203      	movs	r2, #3
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	d004      	beq.n	8008fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f000 f99e 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8008fec:	e007      	b.n	8008ffe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	f000 f991 	bl	8009318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f000 f99d 	bl	8009338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	2204      	movs	r2, #4
 800900c:	4013      	ands	r3, r2
 800900e:	2b04      	cmp	r3, #4
 8009010:	d125      	bne.n	800905e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	2204      	movs	r2, #4
 800901a:	4013      	ands	r3, r2
 800901c:	2b04      	cmp	r3, #4
 800901e:	d11e      	bne.n	800905e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2205      	movs	r2, #5
 8009026:	4252      	negs	r2, r2
 8009028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2202      	movs	r2, #2
 800902e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	699a      	ldr	r2, [r3, #24]
 8009036:	23c0      	movs	r3, #192	; 0xc0
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4013      	ands	r3, r2
 800903c:	d004      	beq.n	8009048 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	0018      	movs	r0, r3
 8009042:	f000 f971 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8009046:	e007      	b.n	8009058 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	0018      	movs	r0, r3
 800904c:	f000 f964 	bl	8009318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	0018      	movs	r0, r3
 8009054:	f000 f970 	bl	8009338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	2208      	movs	r2, #8
 8009066:	4013      	ands	r3, r2
 8009068:	2b08      	cmp	r3, #8
 800906a:	d124      	bne.n	80090b6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	2208      	movs	r2, #8
 8009074:	4013      	ands	r3, r2
 8009076:	2b08      	cmp	r3, #8
 8009078:	d11d      	bne.n	80090b6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2209      	movs	r2, #9
 8009080:	4252      	negs	r2, r2
 8009082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2204      	movs	r2, #4
 8009088:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	2203      	movs	r2, #3
 8009092:	4013      	ands	r3, r2
 8009094:	d004      	beq.n	80090a0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	0018      	movs	r0, r3
 800909a:	f000 f945 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 800909e:	e007      	b.n	80090b0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	0018      	movs	r0, r3
 80090a4:	f000 f938 	bl	8009318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	0018      	movs	r0, r3
 80090ac:	f000 f944 	bl	8009338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2210      	movs	r2, #16
 80090be:	4013      	ands	r3, r2
 80090c0:	2b10      	cmp	r3, #16
 80090c2:	d125      	bne.n	8009110 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	2210      	movs	r2, #16
 80090cc:	4013      	ands	r3, r2
 80090ce:	2b10      	cmp	r3, #16
 80090d0:	d11e      	bne.n	8009110 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2211      	movs	r2, #17
 80090d8:	4252      	negs	r2, r2
 80090da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2208      	movs	r2, #8
 80090e0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	69da      	ldr	r2, [r3, #28]
 80090e8:	23c0      	movs	r3, #192	; 0xc0
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4013      	ands	r3, r2
 80090ee:	d004      	beq.n	80090fa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	0018      	movs	r0, r3
 80090f4:	f000 f918 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 80090f8:	e007      	b.n	800910a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	0018      	movs	r0, r3
 80090fe:	f000 f90b 	bl	8009318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	0018      	movs	r0, r3
 8009106:	f000 f917 	bl	8009338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	2201      	movs	r2, #1
 8009118:	4013      	ands	r3, r2
 800911a:	2b01      	cmp	r3, #1
 800911c:	d10f      	bne.n	800913e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	4013      	ands	r3, r2
 8009128:	2b01      	cmp	r3, #1
 800912a:	d108      	bne.n	800913e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2202      	movs	r2, #2
 8009132:	4252      	negs	r2, r2
 8009134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	0018      	movs	r0, r3
 800913a:	f000 f8e5 	bl	8009308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	2240      	movs	r2, #64	; 0x40
 8009146:	4013      	ands	r3, r2
 8009148:	2b40      	cmp	r3, #64	; 0x40
 800914a:	d10f      	bne.n	800916c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	2240      	movs	r2, #64	; 0x40
 8009154:	4013      	ands	r3, r2
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d108      	bne.n	800916c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2241      	movs	r2, #65	; 0x41
 8009160:	4252      	negs	r2, r2
 8009162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	0018      	movs	r0, r3
 8009168:	f000 f8ee 	bl	8009348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800916c:	46c0      	nop			; (mov r8, r8)
 800916e:	46bd      	mov	sp, r7
 8009170:	b002      	add	sp, #8
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2238      	movs	r2, #56	; 0x38
 8009182:	5c9b      	ldrb	r3, [r3, r2]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_TIM_ConfigClockSource+0x18>
 8009188:	2302      	movs	r3, #2
 800918a:	e0b7      	b.n	80092fc <HAL_TIM_ConfigClockSource+0x188>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2238      	movs	r2, #56	; 0x38
 8009190:	2101      	movs	r1, #1
 8009192:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2239      	movs	r2, #57	; 0x39
 8009198:	2102      	movs	r1, #2
 800919a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2277      	movs	r2, #119	; 0x77
 80091a8:	4393      	bics	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4a55      	ldr	r2, [pc, #340]	; (8009304 <HAL_TIM_ConfigClockSource+0x190>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2280      	movs	r2, #128	; 0x80
 80091c2:	0192      	lsls	r2, r2, #6
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d040      	beq.n	800924a <HAL_TIM_ConfigClockSource+0xd6>
 80091c8:	2280      	movs	r2, #128	; 0x80
 80091ca:	0192      	lsls	r2, r2, #6
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d900      	bls.n	80091d2 <HAL_TIM_ConfigClockSource+0x5e>
 80091d0:	e088      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x170>
 80091d2:	2280      	movs	r2, #128	; 0x80
 80091d4:	0152      	lsls	r2, r2, #5
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d100      	bne.n	80091dc <HAL_TIM_ConfigClockSource+0x68>
 80091da:	e085      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x174>
 80091dc:	2280      	movs	r2, #128	; 0x80
 80091de:	0152      	lsls	r2, r2, #5
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d900      	bls.n	80091e6 <HAL_TIM_ConfigClockSource+0x72>
 80091e4:	e07e      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x170>
 80091e6:	2b70      	cmp	r3, #112	; 0x70
 80091e8:	d018      	beq.n	800921c <HAL_TIM_ConfigClockSource+0xa8>
 80091ea:	d900      	bls.n	80091ee <HAL_TIM_ConfigClockSource+0x7a>
 80091ec:	e07a      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x170>
 80091ee:	2b60      	cmp	r3, #96	; 0x60
 80091f0:	d04f      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0x11e>
 80091f2:	d900      	bls.n	80091f6 <HAL_TIM_ConfigClockSource+0x82>
 80091f4:	e076      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x170>
 80091f6:	2b50      	cmp	r3, #80	; 0x50
 80091f8:	d03b      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0xfe>
 80091fa:	d900      	bls.n	80091fe <HAL_TIM_ConfigClockSource+0x8a>
 80091fc:	e072      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x170>
 80091fe:	2b40      	cmp	r3, #64	; 0x40
 8009200:	d057      	beq.n	80092b2 <HAL_TIM_ConfigClockSource+0x13e>
 8009202:	d900      	bls.n	8009206 <HAL_TIM_ConfigClockSource+0x92>
 8009204:	e06e      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x170>
 8009206:	2b30      	cmp	r3, #48	; 0x30
 8009208:	d063      	beq.n	80092d2 <HAL_TIM_ConfigClockSource+0x15e>
 800920a:	d86b      	bhi.n	80092e4 <HAL_TIM_ConfigClockSource+0x170>
 800920c:	2b20      	cmp	r3, #32
 800920e:	d060      	beq.n	80092d2 <HAL_TIM_ConfigClockSource+0x15e>
 8009210:	d868      	bhi.n	80092e4 <HAL_TIM_ConfigClockSource+0x170>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d05d      	beq.n	80092d2 <HAL_TIM_ConfigClockSource+0x15e>
 8009216:	2b10      	cmp	r3, #16
 8009218:	d05b      	beq.n	80092d2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800921a:	e063      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	6899      	ldr	r1, [r3, #8]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	f000 f962 	bl	80094f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2277      	movs	r2, #119	; 0x77
 800923c:	4313      	orrs	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	609a      	str	r2, [r3, #8]
      break;
 8009248:	e04f      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	6899      	ldr	r1, [r3, #8]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	f000 f94b 	bl	80094f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2180      	movs	r1, #128	; 0x80
 800926a:	01c9      	lsls	r1, r1, #7
 800926c:	430a      	orrs	r2, r1
 800926e:	609a      	str	r2, [r3, #8]
      break;
 8009270:	e03b      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	6859      	ldr	r1, [r3, #4]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	001a      	movs	r2, r3
 8009280:	f000 f8be 	bl	8009400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2150      	movs	r1, #80	; 0x50
 800928a:	0018      	movs	r0, r3
 800928c:	f000 f918 	bl	80094c0 <TIM_ITRx_SetConfig>
      break;
 8009290:	e02b      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	6859      	ldr	r1, [r3, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	001a      	movs	r2, r3
 80092a0:	f000 f8dc 	bl	800945c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2160      	movs	r1, #96	; 0x60
 80092aa:	0018      	movs	r0, r3
 80092ac:	f000 f908 	bl	80094c0 <TIM_ITRx_SetConfig>
      break;
 80092b0:	e01b      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6818      	ldr	r0, [r3, #0]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	6859      	ldr	r1, [r3, #4]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	001a      	movs	r2, r3
 80092c0:	f000 f89e 	bl	8009400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2140      	movs	r1, #64	; 0x40
 80092ca:	0018      	movs	r0, r3
 80092cc:	f000 f8f8 	bl	80094c0 <TIM_ITRx_SetConfig>
      break;
 80092d0:	e00b      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	0019      	movs	r1, r3
 80092dc:	0010      	movs	r0, r2
 80092de:	f000 f8ef 	bl	80094c0 <TIM_ITRx_SetConfig>
        break;
 80092e2:	e002      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      break;
 80092e4:	46c0      	nop			; (mov r8, r8)
 80092e6:	e000      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      break;
 80092e8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2239      	movs	r2, #57	; 0x39
 80092ee:	2101      	movs	r1, #1
 80092f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2238      	movs	r2, #56	; 0x38
 80092f6:	2100      	movs	r1, #0
 80092f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	0018      	movs	r0, r3
 80092fe:	46bd      	mov	sp, r7
 8009300:	b004      	add	sp, #16
 8009302:	bd80      	pop	{r7, pc}
 8009304:	ffff00ff 	.word	0xffff00ff

08009308 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009310:	46c0      	nop			; (mov r8, r8)
 8009312:	46bd      	mov	sp, r7
 8009314:	b002      	add	sp, #8
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009320:	46c0      	nop			; (mov r8, r8)
 8009322:	46bd      	mov	sp, r7
 8009324:	b002      	add	sp, #8
 8009326:	bd80      	pop	{r7, pc}

08009328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009330:	46c0      	nop			; (mov r8, r8)
 8009332:	46bd      	mov	sp, r7
 8009334:	b002      	add	sp, #8
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009340:	46c0      	nop			; (mov r8, r8)
 8009342:	46bd      	mov	sp, r7
 8009344:	b002      	add	sp, #8
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009350:	46c0      	nop			; (mov r8, r8)
 8009352:	46bd      	mov	sp, r7
 8009354:	b002      	add	sp, #8
 8009356:	bd80      	pop	{r7, pc}

08009358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	2380      	movs	r3, #128	; 0x80
 800936c:	05db      	lsls	r3, r3, #23
 800936e:	429a      	cmp	r2, r3
 8009370:	d007      	beq.n	8009382 <TIM_Base_SetConfig+0x2a>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a1f      	ldr	r2, [pc, #124]	; (80093f4 <TIM_Base_SetConfig+0x9c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d003      	beq.n	8009382 <TIM_Base_SetConfig+0x2a>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a1e      	ldr	r2, [pc, #120]	; (80093f8 <TIM_Base_SetConfig+0xa0>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d108      	bne.n	8009394 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2270      	movs	r2, #112	; 0x70
 8009386:	4393      	bics	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	4313      	orrs	r3, r2
 8009392:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	2380      	movs	r3, #128	; 0x80
 8009398:	05db      	lsls	r3, r3, #23
 800939a:	429a      	cmp	r2, r3
 800939c:	d007      	beq.n	80093ae <TIM_Base_SetConfig+0x56>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a14      	ldr	r2, [pc, #80]	; (80093f4 <TIM_Base_SetConfig+0x9c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d003      	beq.n	80093ae <TIM_Base_SetConfig+0x56>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a13      	ldr	r2, [pc, #76]	; (80093f8 <TIM_Base_SetConfig+0xa0>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d108      	bne.n	80093c0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4a12      	ldr	r2, [pc, #72]	; (80093fc <TIM_Base_SetConfig+0xa4>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4313      	orrs	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2280      	movs	r2, #128	; 0x80
 80093c4:	4393      	bics	r3, r2
 80093c6:	001a      	movs	r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	615a      	str	r2, [r3, #20]
}
 80093ec:	46c0      	nop			; (mov r8, r8)
 80093ee:	46bd      	mov	sp, r7
 80093f0:	b004      	add	sp, #16
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	40010800 	.word	0x40010800
 80093f8:	40011400 	.word	0x40011400
 80093fc:	fffffcff 	.word	0xfffffcff

08009400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6a1b      	ldr	r3, [r3, #32]
 8009410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	2201      	movs	r2, #1
 8009418:	4393      	bics	r3, r2
 800941a:	001a      	movs	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	22f0      	movs	r2, #240	; 0xf0
 800942a:	4393      	bics	r3, r2
 800942c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	011b      	lsls	r3, r3, #4
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	4313      	orrs	r3, r2
 8009436:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	220a      	movs	r2, #10
 800943c:	4393      	bics	r3, r2
 800943e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	4313      	orrs	r3, r2
 8009446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	621a      	str	r2, [r3, #32]
}
 8009454:	46c0      	nop			; (mov r8, r8)
 8009456:	46bd      	mov	sp, r7
 8009458:	b006      	add	sp, #24
 800945a:	bd80      	pop	{r7, pc}

0800945c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6a1b      	ldr	r3, [r3, #32]
 800946c:	2210      	movs	r2, #16
 800946e:	4393      	bics	r3, r2
 8009470:	001a      	movs	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	4a0d      	ldr	r2, [pc, #52]	; (80094bc <TIM_TI2_ConfigInputStage+0x60>)
 8009486:	4013      	ands	r3, r2
 8009488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	031b      	lsls	r3, r3, #12
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	4313      	orrs	r3, r2
 8009492:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	22a0      	movs	r2, #160	; 0xa0
 8009498:	4393      	bics	r3, r2
 800949a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	621a      	str	r2, [r3, #32]
}
 80094b2:	46c0      	nop			; (mov r8, r8)
 80094b4:	46bd      	mov	sp, r7
 80094b6:	b006      	add	sp, #24
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	46c0      	nop			; (mov r8, r8)
 80094bc:	ffff0fff 	.word	0xffff0fff

080094c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2270      	movs	r2, #112	; 0x70
 80094d4:	4393      	bics	r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4313      	orrs	r3, r2
 80094de:	2207      	movs	r2, #7
 80094e0:	4313      	orrs	r3, r2
 80094e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	609a      	str	r2, [r3, #8]
}
 80094ea:	46c0      	nop			; (mov r8, r8)
 80094ec:	46bd      	mov	sp, r7
 80094ee:	b004      	add	sp, #16
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
 8009500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	4a09      	ldr	r2, [pc, #36]	; (8009530 <TIM_ETR_SetConfig+0x3c>)
 800950c:	4013      	ands	r3, r2
 800950e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	021a      	lsls	r2, r3, #8
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	431a      	orrs	r2, r3
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4313      	orrs	r3, r2
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	4313      	orrs	r3, r2
 8009520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	609a      	str	r2, [r3, #8]
}
 8009528:	46c0      	nop			; (mov r8, r8)
 800952a:	46bd      	mov	sp, r7
 800952c:	b006      	add	sp, #24
 800952e:	bd80      	pop	{r7, pc}
 8009530:	ffff00ff 	.word	0xffff00ff

08009534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2238      	movs	r2, #56	; 0x38
 8009542:	5c9b      	ldrb	r3, [r3, r2]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d101      	bne.n	800954c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009548:	2302      	movs	r3, #2
 800954a:	e042      	b.n	80095d2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2238      	movs	r2, #56	; 0x38
 8009550:	2101      	movs	r1, #1
 8009552:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2239      	movs	r2, #57	; 0x39
 8009558:	2102      	movs	r1, #2
 800955a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2270      	movs	r2, #112	; 0x70
 8009570:	4393      	bics	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	2380      	movs	r3, #128	; 0x80
 800958c:	05db      	lsls	r3, r3, #23
 800958e:	429a      	cmp	r2, r3
 8009590:	d009      	beq.n	80095a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a11      	ldr	r2, [pc, #68]	; (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d004      	beq.n	80095a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a0f      	ldr	r2, [pc, #60]	; (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d10c      	bne.n	80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2280      	movs	r2, #128	; 0x80
 80095aa:	4393      	bics	r3, r2
 80095ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2239      	movs	r2, #57	; 0x39
 80095c4:	2101      	movs	r1, #1
 80095c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2238      	movs	r2, #56	; 0x38
 80095cc:	2100      	movs	r1, #0
 80095ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	0018      	movs	r0, r3
 80095d4:	46bd      	mov	sp, r7
 80095d6:	b004      	add	sp, #16
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	40010800 	.word	0x40010800
 80095e0:	40011400 	.word	0x40011400

080095e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e044      	b.n	8009680 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d107      	bne.n	800960e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2274      	movs	r2, #116	; 0x74
 8009602:	2100      	movs	r1, #0
 8009604:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	0018      	movs	r0, r3
 800960a:	f7fb fd25 	bl	8005058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2224      	movs	r2, #36	; 0x24
 8009612:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2101      	movs	r1, #1
 8009620:	438a      	bics	r2, r1
 8009622:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	0018      	movs	r0, r3
 8009628:	f000 f8d8 	bl	80097dc <UART_SetConfig>
 800962c:	0003      	movs	r3, r0
 800962e:	2b01      	cmp	r3, #1
 8009630:	d101      	bne.n	8009636 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e024      	b.n	8009680 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	0018      	movs	r0, r3
 8009642:	f000 fb6b 	bl	8009d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	490d      	ldr	r1, [pc, #52]	; (8009688 <HAL_UART_Init+0xa4>)
 8009652:	400a      	ands	r2, r1
 8009654:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689a      	ldr	r2, [r3, #8]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	212a      	movs	r1, #42	; 0x2a
 8009662:	438a      	bics	r2, r1
 8009664:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2101      	movs	r1, #1
 8009672:	430a      	orrs	r2, r1
 8009674:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	0018      	movs	r0, r3
 800967a:	f000 fc03 	bl	8009e84 <UART_CheckIdleState>
 800967e:	0003      	movs	r3, r0
}
 8009680:	0018      	movs	r0, r3
 8009682:	46bd      	mov	sp, r7
 8009684:	b002      	add	sp, #8
 8009686:	bd80      	pop	{r7, pc}
 8009688:	ffffb7ff 	.word	0xffffb7ff

0800968c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	; 0x28
 8009690:	af02      	add	r7, sp, #8
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	603b      	str	r3, [r7, #0]
 8009698:	1dbb      	adds	r3, r7, #6
 800969a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096a0:	2b20      	cmp	r3, #32
 80096a2:	d000      	beq.n	80096a6 <HAL_UART_Transmit+0x1a>
 80096a4:	e095      	b.n	80097d2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <HAL_UART_Transmit+0x28>
 80096ac:	1dbb      	adds	r3, r7, #6
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e08d      	b.n	80097d4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	2380      	movs	r3, #128	; 0x80
 80096be:	015b      	lsls	r3, r3, #5
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d109      	bne.n	80096d8 <HAL_UART_Transmit+0x4c>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d105      	bne.n	80096d8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2201      	movs	r2, #1
 80096d0:	4013      	ands	r3, r2
 80096d2:	d001      	beq.n	80096d8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e07d      	b.n	80097d4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2274      	movs	r2, #116	; 0x74
 80096dc:	5c9b      	ldrb	r3, [r3, r2]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d101      	bne.n	80096e6 <HAL_UART_Transmit+0x5a>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e076      	b.n	80097d4 <HAL_UART_Transmit+0x148>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2274      	movs	r2, #116	; 0x74
 80096ea:	2101      	movs	r1, #1
 80096ec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2280      	movs	r2, #128	; 0x80
 80096f2:	2100      	movs	r1, #0
 80096f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2221      	movs	r2, #33	; 0x21
 80096fa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096fc:	f7fb fef4 	bl	80054e8 <HAL_GetTick>
 8009700:	0003      	movs	r3, r0
 8009702:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	1dba      	adds	r2, r7, #6
 8009708:	2150      	movs	r1, #80	; 0x50
 800970a:	8812      	ldrh	r2, [r2, #0]
 800970c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	1dba      	adds	r2, r7, #6
 8009712:	2152      	movs	r1, #82	; 0x52
 8009714:	8812      	ldrh	r2, [r2, #0]
 8009716:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	2380      	movs	r3, #128	; 0x80
 800971e:	015b      	lsls	r3, r3, #5
 8009720:	429a      	cmp	r2, r3
 8009722:	d108      	bne.n	8009736 <HAL_UART_Transmit+0xaa>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800972c:	2300      	movs	r3, #0
 800972e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	e003      	b.n	800973e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800973a:	2300      	movs	r3, #0
 800973c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2274      	movs	r2, #116	; 0x74
 8009742:	2100      	movs	r1, #0
 8009744:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8009746:	e02c      	b.n	80097a2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	0013      	movs	r3, r2
 8009752:	2200      	movs	r2, #0
 8009754:	2180      	movs	r1, #128	; 0x80
 8009756:	f000 fbdd 	bl	8009f14 <UART_WaitOnFlagUntilTimeout>
 800975a:	1e03      	subs	r3, r0, #0
 800975c:	d001      	beq.n	8009762 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e038      	b.n	80097d4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10b      	bne.n	8009780 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	001a      	movs	r2, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	05d2      	lsls	r2, r2, #23
 8009774:	0dd2      	lsrs	r2, r2, #23
 8009776:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	3302      	adds	r3, #2
 800977c:	61bb      	str	r3, [r7, #24]
 800977e:	e007      	b.n	8009790 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	781a      	ldrb	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	3301      	adds	r3, #1
 800978e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2252      	movs	r2, #82	; 0x52
 8009794:	5a9b      	ldrh	r3, [r3, r2]
 8009796:	b29b      	uxth	r3, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	b299      	uxth	r1, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2252      	movs	r2, #82	; 0x52
 80097a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2252      	movs	r2, #82	; 0x52
 80097a6:	5a9b      	ldrh	r3, [r3, r2]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1cc      	bne.n	8009748 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	0013      	movs	r3, r2
 80097b8:	2200      	movs	r2, #0
 80097ba:	2140      	movs	r1, #64	; 0x40
 80097bc:	f000 fbaa 	bl	8009f14 <UART_WaitOnFlagUntilTimeout>
 80097c0:	1e03      	subs	r3, r0, #0
 80097c2:	d001      	beq.n	80097c8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e005      	b.n	80097d4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2220      	movs	r2, #32
 80097cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	e000      	b.n	80097d4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80097d2:	2302      	movs	r3, #2
  }
}
 80097d4:	0018      	movs	r0, r3
 80097d6:	46bd      	mov	sp, r7
 80097d8:	b008      	add	sp, #32
 80097da:	bd80      	pop	{r7, pc}

080097dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097dc:	b5b0      	push	{r4, r5, r7, lr}
 80097de:	b08e      	sub	sp, #56	; 0x38
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097e4:	231a      	movs	r3, #26
 80097e6:	2218      	movs	r2, #24
 80097e8:	4694      	mov	ip, r2
 80097ea:	44bc      	add	ip, r7
 80097ec:	4463      	add	r3, ip
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	689a      	ldr	r2, [r3, #8]
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	431a      	orrs	r2, r3
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	431a      	orrs	r2, r3
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	4313      	orrs	r3, r2
 8009808:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4ac1      	ldr	r2, [pc, #772]	; (8009b18 <UART_SetConfig+0x33c>)
 8009812:	4013      	ands	r3, r2
 8009814:	0019      	movs	r1, r3
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800981c:	430a      	orrs	r2, r1
 800981e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	4abd      	ldr	r2, [pc, #756]	; (8009b1c <UART_SetConfig+0x340>)
 8009828:	4013      	ands	r3, r2
 800982a:	0019      	movs	r1, r3
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4ab7      	ldr	r2, [pc, #732]	; (8009b20 <UART_SetConfig+0x344>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d004      	beq.n	8009852 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800984e:	4313      	orrs	r3, r2
 8009850:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	4ab2      	ldr	r2, [pc, #712]	; (8009b24 <UART_SetConfig+0x348>)
 800985a:	4013      	ands	r3, r2
 800985c:	0019      	movs	r1, r3
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009864:	430a      	orrs	r2, r1
 8009866:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4aae      	ldr	r2, [pc, #696]	; (8009b28 <UART_SetConfig+0x34c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d136      	bne.n	80098e0 <UART_SetConfig+0x104>
 8009872:	4bae      	ldr	r3, [pc, #696]	; (8009b2c <UART_SetConfig+0x350>)
 8009874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009876:	2203      	movs	r2, #3
 8009878:	4013      	ands	r3, r2
 800987a:	2b03      	cmp	r3, #3
 800987c:	d020      	beq.n	80098c0 <UART_SetConfig+0xe4>
 800987e:	d827      	bhi.n	80098d0 <UART_SetConfig+0xf4>
 8009880:	2b02      	cmp	r3, #2
 8009882:	d00d      	beq.n	80098a0 <UART_SetConfig+0xc4>
 8009884:	d824      	bhi.n	80098d0 <UART_SetConfig+0xf4>
 8009886:	2b00      	cmp	r3, #0
 8009888:	d002      	beq.n	8009890 <UART_SetConfig+0xb4>
 800988a:	2b01      	cmp	r3, #1
 800988c:	d010      	beq.n	80098b0 <UART_SetConfig+0xd4>
 800988e:	e01f      	b.n	80098d0 <UART_SetConfig+0xf4>
 8009890:	231b      	movs	r3, #27
 8009892:	2218      	movs	r2, #24
 8009894:	4694      	mov	ip, r2
 8009896:	44bc      	add	ip, r7
 8009898:	4463      	add	r3, ip
 800989a:	2201      	movs	r2, #1
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	e0ab      	b.n	80099f8 <UART_SetConfig+0x21c>
 80098a0:	231b      	movs	r3, #27
 80098a2:	2218      	movs	r2, #24
 80098a4:	4694      	mov	ip, r2
 80098a6:	44bc      	add	ip, r7
 80098a8:	4463      	add	r3, ip
 80098aa:	2202      	movs	r2, #2
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	e0a3      	b.n	80099f8 <UART_SetConfig+0x21c>
 80098b0:	231b      	movs	r3, #27
 80098b2:	2218      	movs	r2, #24
 80098b4:	4694      	mov	ip, r2
 80098b6:	44bc      	add	ip, r7
 80098b8:	4463      	add	r3, ip
 80098ba:	2204      	movs	r2, #4
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	e09b      	b.n	80099f8 <UART_SetConfig+0x21c>
 80098c0:	231b      	movs	r3, #27
 80098c2:	2218      	movs	r2, #24
 80098c4:	4694      	mov	ip, r2
 80098c6:	44bc      	add	ip, r7
 80098c8:	4463      	add	r3, ip
 80098ca:	2208      	movs	r2, #8
 80098cc:	701a      	strb	r2, [r3, #0]
 80098ce:	e093      	b.n	80099f8 <UART_SetConfig+0x21c>
 80098d0:	231b      	movs	r3, #27
 80098d2:	2218      	movs	r2, #24
 80098d4:	4694      	mov	ip, r2
 80098d6:	44bc      	add	ip, r7
 80098d8:	4463      	add	r3, ip
 80098da:	2210      	movs	r2, #16
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	e08b      	b.n	80099f8 <UART_SetConfig+0x21c>
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a92      	ldr	r2, [pc, #584]	; (8009b30 <UART_SetConfig+0x354>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d136      	bne.n	8009958 <UART_SetConfig+0x17c>
 80098ea:	4b90      	ldr	r3, [pc, #576]	; (8009b2c <UART_SetConfig+0x350>)
 80098ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ee:	220c      	movs	r2, #12
 80098f0:	4013      	ands	r3, r2
 80098f2:	2b0c      	cmp	r3, #12
 80098f4:	d020      	beq.n	8009938 <UART_SetConfig+0x15c>
 80098f6:	d827      	bhi.n	8009948 <UART_SetConfig+0x16c>
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	d00d      	beq.n	8009918 <UART_SetConfig+0x13c>
 80098fc:	d824      	bhi.n	8009948 <UART_SetConfig+0x16c>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <UART_SetConfig+0x12c>
 8009902:	2b04      	cmp	r3, #4
 8009904:	d010      	beq.n	8009928 <UART_SetConfig+0x14c>
 8009906:	e01f      	b.n	8009948 <UART_SetConfig+0x16c>
 8009908:	231b      	movs	r3, #27
 800990a:	2218      	movs	r2, #24
 800990c:	4694      	mov	ip, r2
 800990e:	44bc      	add	ip, r7
 8009910:	4463      	add	r3, ip
 8009912:	2200      	movs	r2, #0
 8009914:	701a      	strb	r2, [r3, #0]
 8009916:	e06f      	b.n	80099f8 <UART_SetConfig+0x21c>
 8009918:	231b      	movs	r3, #27
 800991a:	2218      	movs	r2, #24
 800991c:	4694      	mov	ip, r2
 800991e:	44bc      	add	ip, r7
 8009920:	4463      	add	r3, ip
 8009922:	2202      	movs	r2, #2
 8009924:	701a      	strb	r2, [r3, #0]
 8009926:	e067      	b.n	80099f8 <UART_SetConfig+0x21c>
 8009928:	231b      	movs	r3, #27
 800992a:	2218      	movs	r2, #24
 800992c:	4694      	mov	ip, r2
 800992e:	44bc      	add	ip, r7
 8009930:	4463      	add	r3, ip
 8009932:	2204      	movs	r2, #4
 8009934:	701a      	strb	r2, [r3, #0]
 8009936:	e05f      	b.n	80099f8 <UART_SetConfig+0x21c>
 8009938:	231b      	movs	r3, #27
 800993a:	2218      	movs	r2, #24
 800993c:	4694      	mov	ip, r2
 800993e:	44bc      	add	ip, r7
 8009940:	4463      	add	r3, ip
 8009942:	2208      	movs	r2, #8
 8009944:	701a      	strb	r2, [r3, #0]
 8009946:	e057      	b.n	80099f8 <UART_SetConfig+0x21c>
 8009948:	231b      	movs	r3, #27
 800994a:	2218      	movs	r2, #24
 800994c:	4694      	mov	ip, r2
 800994e:	44bc      	add	ip, r7
 8009950:	4463      	add	r3, ip
 8009952:	2210      	movs	r2, #16
 8009954:	701a      	strb	r2, [r3, #0]
 8009956:	e04f      	b.n	80099f8 <UART_SetConfig+0x21c>
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a70      	ldr	r2, [pc, #448]	; (8009b20 <UART_SetConfig+0x344>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d143      	bne.n	80099ea <UART_SetConfig+0x20e>
 8009962:	4b72      	ldr	r3, [pc, #456]	; (8009b2c <UART_SetConfig+0x350>)
 8009964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009966:	23c0      	movs	r3, #192	; 0xc0
 8009968:	011b      	lsls	r3, r3, #4
 800996a:	4013      	ands	r3, r2
 800996c:	22c0      	movs	r2, #192	; 0xc0
 800996e:	0112      	lsls	r2, r2, #4
 8009970:	4293      	cmp	r3, r2
 8009972:	d02a      	beq.n	80099ca <UART_SetConfig+0x1ee>
 8009974:	22c0      	movs	r2, #192	; 0xc0
 8009976:	0112      	lsls	r2, r2, #4
 8009978:	4293      	cmp	r3, r2
 800997a:	d82e      	bhi.n	80099da <UART_SetConfig+0x1fe>
 800997c:	2280      	movs	r2, #128	; 0x80
 800997e:	0112      	lsls	r2, r2, #4
 8009980:	4293      	cmp	r3, r2
 8009982:	d012      	beq.n	80099aa <UART_SetConfig+0x1ce>
 8009984:	2280      	movs	r2, #128	; 0x80
 8009986:	0112      	lsls	r2, r2, #4
 8009988:	4293      	cmp	r3, r2
 800998a:	d826      	bhi.n	80099da <UART_SetConfig+0x1fe>
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <UART_SetConfig+0x1be>
 8009990:	2280      	movs	r2, #128	; 0x80
 8009992:	00d2      	lsls	r2, r2, #3
 8009994:	4293      	cmp	r3, r2
 8009996:	d010      	beq.n	80099ba <UART_SetConfig+0x1de>
 8009998:	e01f      	b.n	80099da <UART_SetConfig+0x1fe>
 800999a:	231b      	movs	r3, #27
 800999c:	2218      	movs	r2, #24
 800999e:	4694      	mov	ip, r2
 80099a0:	44bc      	add	ip, r7
 80099a2:	4463      	add	r3, ip
 80099a4:	2200      	movs	r2, #0
 80099a6:	701a      	strb	r2, [r3, #0]
 80099a8:	e026      	b.n	80099f8 <UART_SetConfig+0x21c>
 80099aa:	231b      	movs	r3, #27
 80099ac:	2218      	movs	r2, #24
 80099ae:	4694      	mov	ip, r2
 80099b0:	44bc      	add	ip, r7
 80099b2:	4463      	add	r3, ip
 80099b4:	2202      	movs	r2, #2
 80099b6:	701a      	strb	r2, [r3, #0]
 80099b8:	e01e      	b.n	80099f8 <UART_SetConfig+0x21c>
 80099ba:	231b      	movs	r3, #27
 80099bc:	2218      	movs	r2, #24
 80099be:	4694      	mov	ip, r2
 80099c0:	44bc      	add	ip, r7
 80099c2:	4463      	add	r3, ip
 80099c4:	2204      	movs	r2, #4
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	e016      	b.n	80099f8 <UART_SetConfig+0x21c>
 80099ca:	231b      	movs	r3, #27
 80099cc:	2218      	movs	r2, #24
 80099ce:	4694      	mov	ip, r2
 80099d0:	44bc      	add	ip, r7
 80099d2:	4463      	add	r3, ip
 80099d4:	2208      	movs	r2, #8
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	e00e      	b.n	80099f8 <UART_SetConfig+0x21c>
 80099da:	231b      	movs	r3, #27
 80099dc:	2218      	movs	r2, #24
 80099de:	4694      	mov	ip, r2
 80099e0:	44bc      	add	ip, r7
 80099e2:	4463      	add	r3, ip
 80099e4:	2210      	movs	r2, #16
 80099e6:	701a      	strb	r2, [r3, #0]
 80099e8:	e006      	b.n	80099f8 <UART_SetConfig+0x21c>
 80099ea:	231b      	movs	r3, #27
 80099ec:	2218      	movs	r2, #24
 80099ee:	4694      	mov	ip, r2
 80099f0:	44bc      	add	ip, r7
 80099f2:	4463      	add	r3, ip
 80099f4:	2210      	movs	r2, #16
 80099f6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a48      	ldr	r2, [pc, #288]	; (8009b20 <UART_SetConfig+0x344>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d000      	beq.n	8009a04 <UART_SetConfig+0x228>
 8009a02:	e09b      	b.n	8009b3c <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a04:	231b      	movs	r3, #27
 8009a06:	2218      	movs	r2, #24
 8009a08:	4694      	mov	ip, r2
 8009a0a:	44bc      	add	ip, r7
 8009a0c:	4463      	add	r3, ip
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	2b08      	cmp	r3, #8
 8009a12:	d01d      	beq.n	8009a50 <UART_SetConfig+0x274>
 8009a14:	dc20      	bgt.n	8009a58 <UART_SetConfig+0x27c>
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	d015      	beq.n	8009a46 <UART_SetConfig+0x26a>
 8009a1a:	dc1d      	bgt.n	8009a58 <UART_SetConfig+0x27c>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <UART_SetConfig+0x24a>
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d005      	beq.n	8009a30 <UART_SetConfig+0x254>
 8009a24:	e018      	b.n	8009a58 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a26:	f7fe fa97 	bl	8007f58 <HAL_RCC_GetPCLK1Freq>
 8009a2a:	0003      	movs	r3, r0
 8009a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a2e:	e01d      	b.n	8009a6c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a30:	4b3e      	ldr	r3, [pc, #248]	; (8009b2c <UART_SetConfig+0x350>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2210      	movs	r2, #16
 8009a36:	4013      	ands	r3, r2
 8009a38:	d002      	beq.n	8009a40 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009a3a:	4b3e      	ldr	r3, [pc, #248]	; (8009b34 <UART_SetConfig+0x358>)
 8009a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a3e:	e015      	b.n	8009a6c <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8009a40:	4b3d      	ldr	r3, [pc, #244]	; (8009b38 <UART_SetConfig+0x35c>)
 8009a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a44:	e012      	b.n	8009a6c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a46:	f7fe f9d7 	bl	8007df8 <HAL_RCC_GetSysClockFreq>
 8009a4a:	0003      	movs	r3, r0
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a4e:	e00d      	b.n	8009a6c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a50:	2380      	movs	r3, #128	; 0x80
 8009a52:	021b      	lsls	r3, r3, #8
 8009a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a56:	e009      	b.n	8009a6c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009a5c:	231a      	movs	r3, #26
 8009a5e:	2218      	movs	r2, #24
 8009a60:	4694      	mov	ip, r2
 8009a62:	44bc      	add	ip, r7
 8009a64:	4463      	add	r3, ip
 8009a66:	2201      	movs	r2, #1
 8009a68:	701a      	strb	r2, [r3, #0]
        break;
 8009a6a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d100      	bne.n	8009a74 <UART_SetConfig+0x298>
 8009a72:	e139      	b.n	8009ce8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	0013      	movs	r3, r2
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	189b      	adds	r3, r3, r2
 8009a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d305      	bcc.n	8009a90 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d907      	bls.n	8009aa0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009a90:	231a      	movs	r3, #26
 8009a92:	2218      	movs	r2, #24
 8009a94:	4694      	mov	ip, r2
 8009a96:	44bc      	add	ip, r7
 8009a98:	4463      	add	r3, ip
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	701a      	strb	r2, [r3, #0]
 8009a9e:	e123      	b.n	8009ce8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa2:	613b      	str	r3, [r7, #16]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]
 8009aa8:	6939      	ldr	r1, [r7, #16]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	000b      	movs	r3, r1
 8009aae:	0e1b      	lsrs	r3, r3, #24
 8009ab0:	0010      	movs	r0, r2
 8009ab2:	0205      	lsls	r5, r0, #8
 8009ab4:	431d      	orrs	r5, r3
 8009ab6:	000b      	movs	r3, r1
 8009ab8:	021c      	lsls	r4, r3, #8
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	085b      	lsrs	r3, r3, #1
 8009ac0:	60bb      	str	r3, [r7, #8]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	68b8      	ldr	r0, [r7, #8]
 8009ac8:	68f9      	ldr	r1, [r7, #12]
 8009aca:	1900      	adds	r0, r0, r4
 8009acc:	4169      	adcs	r1, r5
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	607b      	str	r3, [r7, #4]
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f7f6 fba0 	bl	8000220 <__aeabi_uldivmod>
 8009ae0:	0002      	movs	r2, r0
 8009ae2:	000b      	movs	r3, r1
 8009ae4:	0013      	movs	r3, r2
 8009ae6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aea:	23c0      	movs	r3, #192	; 0xc0
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d309      	bcc.n	8009b06 <UART_SetConfig+0x32a>
 8009af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009af4:	2380      	movs	r3, #128	; 0x80
 8009af6:	035b      	lsls	r3, r3, #13
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d204      	bcs.n	8009b06 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b02:	60da      	str	r2, [r3, #12]
 8009b04:	e0f0      	b.n	8009ce8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8009b06:	231a      	movs	r3, #26
 8009b08:	2218      	movs	r2, #24
 8009b0a:	4694      	mov	ip, r2
 8009b0c:	44bc      	add	ip, r7
 8009b0e:	4463      	add	r3, ip
 8009b10:	2201      	movs	r2, #1
 8009b12:	701a      	strb	r2, [r3, #0]
 8009b14:	e0e8      	b.n	8009ce8 <UART_SetConfig+0x50c>
 8009b16:	46c0      	nop			; (mov r8, r8)
 8009b18:	efff69f3 	.word	0xefff69f3
 8009b1c:	ffffcfff 	.word	0xffffcfff
 8009b20:	40004800 	.word	0x40004800
 8009b24:	fffff4ff 	.word	0xfffff4ff
 8009b28:	40013800 	.word	0x40013800
 8009b2c:	40021000 	.word	0x40021000
 8009b30:	40004400 	.word	0x40004400
 8009b34:	003d0900 	.word	0x003d0900
 8009b38:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	69da      	ldr	r2, [r3, #28]
 8009b40:	2380      	movs	r3, #128	; 0x80
 8009b42:	021b      	lsls	r3, r3, #8
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d000      	beq.n	8009b4a <UART_SetConfig+0x36e>
 8009b48:	e074      	b.n	8009c34 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009b4a:	231b      	movs	r3, #27
 8009b4c:	2218      	movs	r2, #24
 8009b4e:	4694      	mov	ip, r2
 8009b50:	44bc      	add	ip, r7
 8009b52:	4463      	add	r3, ip
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b08      	cmp	r3, #8
 8009b58:	d822      	bhi.n	8009ba0 <UART_SetConfig+0x3c4>
 8009b5a:	009a      	lsls	r2, r3, #2
 8009b5c:	4b6a      	ldr	r3, [pc, #424]	; (8009d08 <UART_SetConfig+0x52c>)
 8009b5e:	18d3      	adds	r3, r2, r3
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b64:	f7fe f9f8 	bl	8007f58 <HAL_RCC_GetPCLK1Freq>
 8009b68:	0003      	movs	r3, r0
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b6c:	e022      	b.n	8009bb4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b6e:	f7fe fa09 	bl	8007f84 <HAL_RCC_GetPCLK2Freq>
 8009b72:	0003      	movs	r3, r0
 8009b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b76:	e01d      	b.n	8009bb4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b78:	4b64      	ldr	r3, [pc, #400]	; (8009d0c <UART_SetConfig+0x530>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2210      	movs	r2, #16
 8009b7e:	4013      	ands	r3, r2
 8009b80:	d002      	beq.n	8009b88 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009b82:	4b63      	ldr	r3, [pc, #396]	; (8009d10 <UART_SetConfig+0x534>)
 8009b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b86:	e015      	b.n	8009bb4 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8009b88:	4b62      	ldr	r3, [pc, #392]	; (8009d14 <UART_SetConfig+0x538>)
 8009b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b8c:	e012      	b.n	8009bb4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b8e:	f7fe f933 	bl	8007df8 <HAL_RCC_GetSysClockFreq>
 8009b92:	0003      	movs	r3, r0
 8009b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b96:	e00d      	b.n	8009bb4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b98:	2380      	movs	r3, #128	; 0x80
 8009b9a:	021b      	lsls	r3, r3, #8
 8009b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b9e:	e009      	b.n	8009bb4 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009ba4:	231a      	movs	r3, #26
 8009ba6:	2218      	movs	r2, #24
 8009ba8:	4694      	mov	ip, r2
 8009baa:	44bc      	add	ip, r7
 8009bac:	4463      	add	r3, ip
 8009bae:	2201      	movs	r2, #1
 8009bb0:	701a      	strb	r2, [r3, #0]
        break;
 8009bb2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d100      	bne.n	8009bbc <UART_SetConfig+0x3e0>
 8009bba:	e095      	b.n	8009ce8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	005a      	lsls	r2, r3, #1
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	085b      	lsrs	r3, r3, #1
 8009bc6:	18d2      	adds	r2, r2, r3
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	0019      	movs	r1, r3
 8009bce:	0010      	movs	r0, r2
 8009bd0:	f7f6 fa9a 	bl	8000108 <__udivsi3>
 8009bd4:	0003      	movs	r3, r0
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bdc:	2b0f      	cmp	r3, #15
 8009bde:	d921      	bls.n	8009c24 <UART_SetConfig+0x448>
 8009be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009be2:	2380      	movs	r3, #128	; 0x80
 8009be4:	025b      	lsls	r3, r3, #9
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d21c      	bcs.n	8009c24 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	200e      	movs	r0, #14
 8009bf0:	2418      	movs	r4, #24
 8009bf2:	193b      	adds	r3, r7, r4
 8009bf4:	181b      	adds	r3, r3, r0
 8009bf6:	210f      	movs	r1, #15
 8009bf8:	438a      	bics	r2, r1
 8009bfa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	085b      	lsrs	r3, r3, #1
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	2207      	movs	r2, #7
 8009c04:	4013      	ands	r3, r2
 8009c06:	b299      	uxth	r1, r3
 8009c08:	193b      	adds	r3, r7, r4
 8009c0a:	181b      	adds	r3, r3, r0
 8009c0c:	193a      	adds	r2, r7, r4
 8009c0e:	1812      	adds	r2, r2, r0
 8009c10:	8812      	ldrh	r2, [r2, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	193a      	adds	r2, r7, r4
 8009c1c:	1812      	adds	r2, r2, r0
 8009c1e:	8812      	ldrh	r2, [r2, #0]
 8009c20:	60da      	str	r2, [r3, #12]
 8009c22:	e061      	b.n	8009ce8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c24:	231a      	movs	r3, #26
 8009c26:	2218      	movs	r2, #24
 8009c28:	4694      	mov	ip, r2
 8009c2a:	44bc      	add	ip, r7
 8009c2c:	4463      	add	r3, ip
 8009c2e:	2201      	movs	r2, #1
 8009c30:	701a      	strb	r2, [r3, #0]
 8009c32:	e059      	b.n	8009ce8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c34:	231b      	movs	r3, #27
 8009c36:	2218      	movs	r2, #24
 8009c38:	4694      	mov	ip, r2
 8009c3a:	44bc      	add	ip, r7
 8009c3c:	4463      	add	r3, ip
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d822      	bhi.n	8009c8a <UART_SetConfig+0x4ae>
 8009c44:	009a      	lsls	r2, r3, #2
 8009c46:	4b34      	ldr	r3, [pc, #208]	; (8009d18 <UART_SetConfig+0x53c>)
 8009c48:	18d3      	adds	r3, r2, r3
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4e:	f7fe f983 	bl	8007f58 <HAL_RCC_GetPCLK1Freq>
 8009c52:	0003      	movs	r3, r0
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c56:	e022      	b.n	8009c9e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c58:	f7fe f994 	bl	8007f84 <HAL_RCC_GetPCLK2Freq>
 8009c5c:	0003      	movs	r3, r0
 8009c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c60:	e01d      	b.n	8009c9e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c62:	4b2a      	ldr	r3, [pc, #168]	; (8009d0c <UART_SetConfig+0x530>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2210      	movs	r2, #16
 8009c68:	4013      	ands	r3, r2
 8009c6a:	d002      	beq.n	8009c72 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009c6c:	4b28      	ldr	r3, [pc, #160]	; (8009d10 <UART_SetConfig+0x534>)
 8009c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c70:	e015      	b.n	8009c9e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8009c72:	4b28      	ldr	r3, [pc, #160]	; (8009d14 <UART_SetConfig+0x538>)
 8009c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c76:	e012      	b.n	8009c9e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c78:	f7fe f8be 	bl	8007df8 <HAL_RCC_GetSysClockFreq>
 8009c7c:	0003      	movs	r3, r0
 8009c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c80:	e00d      	b.n	8009c9e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c82:	2380      	movs	r3, #128	; 0x80
 8009c84:	021b      	lsls	r3, r3, #8
 8009c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c88:	e009      	b.n	8009c9e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c8e:	231a      	movs	r3, #26
 8009c90:	2218      	movs	r2, #24
 8009c92:	4694      	mov	ip, r2
 8009c94:	44bc      	add	ip, r7
 8009c96:	4463      	add	r3, ip
 8009c98:	2201      	movs	r2, #1
 8009c9a:	701a      	strb	r2, [r3, #0]
        break;
 8009c9c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d021      	beq.n	8009ce8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	085a      	lsrs	r2, r3, #1
 8009caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cac:	18d2      	adds	r2, r2, r3
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	0019      	movs	r1, r3
 8009cb4:	0010      	movs	r0, r2
 8009cb6:	f7f6 fa27 	bl	8000108 <__udivsi3>
 8009cba:	0003      	movs	r3, r0
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	2b0f      	cmp	r3, #15
 8009cc4:	d909      	bls.n	8009cda <UART_SetConfig+0x4fe>
 8009cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cc8:	2380      	movs	r3, #128	; 0x80
 8009cca:	025b      	lsls	r3, r3, #9
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d204      	bcs.n	8009cda <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cd6:	60da      	str	r2, [r3, #12]
 8009cd8:	e006      	b.n	8009ce8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cda:	231a      	movs	r3, #26
 8009cdc:	2218      	movs	r2, #24
 8009cde:	4694      	mov	ip, r2
 8009ce0:	44bc      	add	ip, r7
 8009ce2:	4463      	add	r3, ip
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	2200      	movs	r2, #0
 8009cec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009cf4:	231a      	movs	r3, #26
 8009cf6:	2218      	movs	r2, #24
 8009cf8:	4694      	mov	ip, r2
 8009cfa:	44bc      	add	ip, r7
 8009cfc:	4463      	add	r3, ip
 8009cfe:	781b      	ldrb	r3, [r3, #0]
}
 8009d00:	0018      	movs	r0, r3
 8009d02:	46bd      	mov	sp, r7
 8009d04:	b00e      	add	sp, #56	; 0x38
 8009d06:	bdb0      	pop	{r4, r5, r7, pc}
 8009d08:	0800ae4c 	.word	0x0800ae4c
 8009d0c:	40021000 	.word	0x40021000
 8009d10:	003d0900 	.word	0x003d0900
 8009d14:	00f42400 	.word	0x00f42400
 8009d18:	0800ae70 	.word	0x0800ae70

08009d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	2201      	movs	r2, #1
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	d00b      	beq.n	8009d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	4a4a      	ldr	r2, [pc, #296]	; (8009e60 <UART_AdvFeatureConfig+0x144>)
 8009d36:	4013      	ands	r3, r2
 8009d38:	0019      	movs	r1, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	430a      	orrs	r2, r1
 8009d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	d00b      	beq.n	8009d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	4a43      	ldr	r2, [pc, #268]	; (8009e64 <UART_AdvFeatureConfig+0x148>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	0019      	movs	r1, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	430a      	orrs	r2, r1
 8009d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	2204      	movs	r2, #4
 8009d6e:	4013      	ands	r3, r2
 8009d70:	d00b      	beq.n	8009d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	4a3b      	ldr	r2, [pc, #236]	; (8009e68 <UART_AdvFeatureConfig+0x14c>)
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	0019      	movs	r1, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8e:	2208      	movs	r2, #8
 8009d90:	4013      	ands	r3, r2
 8009d92:	d00b      	beq.n	8009dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	4a34      	ldr	r2, [pc, #208]	; (8009e6c <UART_AdvFeatureConfig+0x150>)
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	0019      	movs	r1, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	430a      	orrs	r2, r1
 8009daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	2210      	movs	r2, #16
 8009db2:	4013      	ands	r3, r2
 8009db4:	d00b      	beq.n	8009dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	4a2c      	ldr	r2, [pc, #176]	; (8009e70 <UART_AdvFeatureConfig+0x154>)
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	0019      	movs	r1, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	2220      	movs	r2, #32
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	d00b      	beq.n	8009df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	4a25      	ldr	r2, [pc, #148]	; (8009e74 <UART_AdvFeatureConfig+0x158>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	0019      	movs	r1, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	430a      	orrs	r2, r1
 8009dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df4:	2240      	movs	r2, #64	; 0x40
 8009df6:	4013      	ands	r3, r2
 8009df8:	d01d      	beq.n	8009e36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4a1d      	ldr	r2, [pc, #116]	; (8009e78 <UART_AdvFeatureConfig+0x15c>)
 8009e02:	4013      	ands	r3, r2
 8009e04:	0019      	movs	r1, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e16:	2380      	movs	r3, #128	; 0x80
 8009e18:	035b      	lsls	r3, r3, #13
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d10b      	bne.n	8009e36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	4a15      	ldr	r2, [pc, #84]	; (8009e7c <UART_AdvFeatureConfig+0x160>)
 8009e26:	4013      	ands	r3, r2
 8009e28:	0019      	movs	r1, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	2280      	movs	r2, #128	; 0x80
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	d00b      	beq.n	8009e58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	4a0e      	ldr	r2, [pc, #56]	; (8009e80 <UART_AdvFeatureConfig+0x164>)
 8009e48:	4013      	ands	r3, r2
 8009e4a:	0019      	movs	r1, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	605a      	str	r2, [r3, #4]
  }
}
 8009e58:	46c0      	nop			; (mov r8, r8)
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	b002      	add	sp, #8
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	fffdffff 	.word	0xfffdffff
 8009e64:	fffeffff 	.word	0xfffeffff
 8009e68:	fffbffff 	.word	0xfffbffff
 8009e6c:	ffff7fff 	.word	0xffff7fff
 8009e70:	ffffefff 	.word	0xffffefff
 8009e74:	ffffdfff 	.word	0xffffdfff
 8009e78:	ffefffff 	.word	0xffefffff
 8009e7c:	ff9fffff 	.word	0xff9fffff
 8009e80:	fff7ffff 	.word	0xfff7ffff

08009e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af02      	add	r7, sp, #8
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2280      	movs	r2, #128	; 0x80
 8009e90:	2100      	movs	r1, #0
 8009e92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e94:	f7fb fb28 	bl	80054e8 <HAL_GetTick>
 8009e98:	0003      	movs	r3, r0
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2208      	movs	r2, #8
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	2b08      	cmp	r3, #8
 8009ea8:	d10c      	bne.n	8009ec4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2280      	movs	r2, #128	; 0x80
 8009eae:	0391      	lsls	r1, r2, #14
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4a17      	ldr	r2, [pc, #92]	; (8009f10 <UART_CheckIdleState+0x8c>)
 8009eb4:	9200      	str	r2, [sp, #0]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f000 f82c 	bl	8009f14 <UART_WaitOnFlagUntilTimeout>
 8009ebc:	1e03      	subs	r3, r0, #0
 8009ebe:	d001      	beq.n	8009ec4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e021      	b.n	8009f08 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2204      	movs	r2, #4
 8009ecc:	4013      	ands	r3, r2
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	d10c      	bne.n	8009eec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2280      	movs	r2, #128	; 0x80
 8009ed6:	03d1      	lsls	r1, r2, #15
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	4a0d      	ldr	r2, [pc, #52]	; (8009f10 <UART_CheckIdleState+0x8c>)
 8009edc:	9200      	str	r2, [sp, #0]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f000 f818 	bl	8009f14 <UART_WaitOnFlagUntilTimeout>
 8009ee4:	1e03      	subs	r3, r0, #0
 8009ee6:	d001      	beq.n	8009eec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e00d      	b.n	8009f08 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2220      	movs	r2, #32
 8009ef0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2274      	movs	r2, #116	; 0x74
 8009f02:	2100      	movs	r1, #0
 8009f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	0018      	movs	r0, r3
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	b004      	add	sp, #16
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	01ffffff 	.word	0x01ffffff

08009f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	603b      	str	r3, [r7, #0]
 8009f20:	1dfb      	adds	r3, r7, #7
 8009f22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f24:	e05e      	b.n	8009fe4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	d05b      	beq.n	8009fe4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f2c:	f7fb fadc 	bl	80054e8 <HAL_GetTick>
 8009f30:	0002      	movs	r2, r0
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d302      	bcc.n	8009f42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d11b      	bne.n	8009f7a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	492f      	ldr	r1, [pc, #188]	; (800a00c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8009f4e:	400a      	ands	r2, r1
 8009f50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	438a      	bics	r2, r1
 8009f60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2220      	movs	r2, #32
 8009f66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2220      	movs	r2, #32
 8009f6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2274      	movs	r2, #116	; 0x74
 8009f72:	2100      	movs	r1, #0
 8009f74:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e044      	b.n	800a004 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2204      	movs	r2, #4
 8009f82:	4013      	ands	r3, r2
 8009f84:	d02e      	beq.n	8009fe4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	69da      	ldr	r2, [r3, #28]
 8009f8c:	2380      	movs	r3, #128	; 0x80
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	401a      	ands	r2, r3
 8009f92:	2380      	movs	r3, #128	; 0x80
 8009f94:	011b      	lsls	r3, r3, #4
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d124      	bne.n	8009fe4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2280      	movs	r2, #128	; 0x80
 8009fa0:	0112      	lsls	r2, r2, #4
 8009fa2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4917      	ldr	r1, [pc, #92]	; (800a00c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8009fb0:	400a      	ands	r2, r1
 8009fb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689a      	ldr	r2, [r3, #8]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	438a      	bics	r2, r1
 8009fc2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2280      	movs	r2, #128	; 0x80
 8009fd4:	2120      	movs	r1, #32
 8009fd6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2274      	movs	r2, #116	; 0x74
 8009fdc:	2100      	movs	r1, #0
 8009fde:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	e00f      	b.n	800a004 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	4013      	ands	r3, r2
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	425a      	negs	r2, r3
 8009ff4:	4153      	adcs	r3, r2
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	001a      	movs	r2, r3
 8009ffa:	1dfb      	adds	r3, r7, #7
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d091      	beq.n	8009f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	0018      	movs	r0, r3
 800a006:	46bd      	mov	sp, r7
 800a008:	b004      	add	sp, #16
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	fffffe5f 	.word	0xfffffe5f

0800a010 <__errno>:
 800a010:	4b01      	ldr	r3, [pc, #4]	; (800a018 <__errno+0x8>)
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	4770      	bx	lr
 800a016:	46c0      	nop			; (mov r8, r8)
 800a018:	20000028 	.word	0x20000028

0800a01c <__libc_init_array>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	2600      	movs	r6, #0
 800a020:	4d0c      	ldr	r5, [pc, #48]	; (800a054 <__libc_init_array+0x38>)
 800a022:	4c0d      	ldr	r4, [pc, #52]	; (800a058 <__libc_init_array+0x3c>)
 800a024:	1b64      	subs	r4, r4, r5
 800a026:	10a4      	asrs	r4, r4, #2
 800a028:	42a6      	cmp	r6, r4
 800a02a:	d109      	bne.n	800a040 <__libc_init_array+0x24>
 800a02c:	2600      	movs	r6, #0
 800a02e:	f000 f8b7 	bl	800a1a0 <_init>
 800a032:	4d0a      	ldr	r5, [pc, #40]	; (800a05c <__libc_init_array+0x40>)
 800a034:	4c0a      	ldr	r4, [pc, #40]	; (800a060 <__libc_init_array+0x44>)
 800a036:	1b64      	subs	r4, r4, r5
 800a038:	10a4      	asrs	r4, r4, #2
 800a03a:	42a6      	cmp	r6, r4
 800a03c:	d105      	bne.n	800a04a <__libc_init_array+0x2e>
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	00b3      	lsls	r3, r6, #2
 800a042:	58eb      	ldr	r3, [r5, r3]
 800a044:	4798      	blx	r3
 800a046:	3601      	adds	r6, #1
 800a048:	e7ee      	b.n	800a028 <__libc_init_array+0xc>
 800a04a:	00b3      	lsls	r3, r6, #2
 800a04c:	58eb      	ldr	r3, [r5, r3]
 800a04e:	4798      	blx	r3
 800a050:	3601      	adds	r6, #1
 800a052:	e7f2      	b.n	800a03a <__libc_init_array+0x1e>
 800a054:	0800ae9c 	.word	0x0800ae9c
 800a058:	0800ae9c 	.word	0x0800ae9c
 800a05c:	0800ae9c 	.word	0x0800ae9c
 800a060:	0800aea0 	.word	0x0800aea0

0800a064 <malloc>:
 800a064:	b510      	push	{r4, lr}
 800a066:	4b03      	ldr	r3, [pc, #12]	; (800a074 <malloc+0x10>)
 800a068:	0001      	movs	r1, r0
 800a06a:	6818      	ldr	r0, [r3, #0]
 800a06c:	f000 f816 	bl	800a09c <_malloc_r>
 800a070:	bd10      	pop	{r4, pc}
 800a072:	46c0      	nop			; (mov r8, r8)
 800a074:	20000028 	.word	0x20000028

0800a078 <memcpy>:
 800a078:	2300      	movs	r3, #0
 800a07a:	b510      	push	{r4, lr}
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d100      	bne.n	800a082 <memcpy+0xa>
 800a080:	bd10      	pop	{r4, pc}
 800a082:	5ccc      	ldrb	r4, [r1, r3]
 800a084:	54c4      	strb	r4, [r0, r3]
 800a086:	3301      	adds	r3, #1
 800a088:	e7f8      	b.n	800a07c <memcpy+0x4>

0800a08a <memset>:
 800a08a:	0003      	movs	r3, r0
 800a08c:	1882      	adds	r2, r0, r2
 800a08e:	4293      	cmp	r3, r2
 800a090:	d100      	bne.n	800a094 <memset+0xa>
 800a092:	4770      	bx	lr
 800a094:	7019      	strb	r1, [r3, #0]
 800a096:	3301      	adds	r3, #1
 800a098:	e7f9      	b.n	800a08e <memset+0x4>
	...

0800a09c <_malloc_r>:
 800a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09e:	2303      	movs	r3, #3
 800a0a0:	1ccd      	adds	r5, r1, #3
 800a0a2:	439d      	bics	r5, r3
 800a0a4:	3508      	adds	r5, #8
 800a0a6:	0006      	movs	r6, r0
 800a0a8:	2d0c      	cmp	r5, #12
 800a0aa:	d21f      	bcs.n	800a0ec <_malloc_r+0x50>
 800a0ac:	250c      	movs	r5, #12
 800a0ae:	42a9      	cmp	r1, r5
 800a0b0:	d81e      	bhi.n	800a0f0 <_malloc_r+0x54>
 800a0b2:	0030      	movs	r0, r6
 800a0b4:	f000 f862 	bl	800a17c <__malloc_lock>
 800a0b8:	4925      	ldr	r1, [pc, #148]	; (800a150 <_malloc_r+0xb4>)
 800a0ba:	680a      	ldr	r2, [r1, #0]
 800a0bc:	0014      	movs	r4, r2
 800a0be:	2c00      	cmp	r4, #0
 800a0c0:	d11a      	bne.n	800a0f8 <_malloc_r+0x5c>
 800a0c2:	4f24      	ldr	r7, [pc, #144]	; (800a154 <_malloc_r+0xb8>)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d104      	bne.n	800a0d4 <_malloc_r+0x38>
 800a0ca:	0021      	movs	r1, r4
 800a0cc:	0030      	movs	r0, r6
 800a0ce:	f000 f843 	bl	800a158 <_sbrk_r>
 800a0d2:	6038      	str	r0, [r7, #0]
 800a0d4:	0029      	movs	r1, r5
 800a0d6:	0030      	movs	r0, r6
 800a0d8:	f000 f83e 	bl	800a158 <_sbrk_r>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d12b      	bne.n	800a138 <_malloc_r+0x9c>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	0030      	movs	r0, r6
 800a0e4:	6033      	str	r3, [r6, #0]
 800a0e6:	f000 f851 	bl	800a18c <__malloc_unlock>
 800a0ea:	e003      	b.n	800a0f4 <_malloc_r+0x58>
 800a0ec:	2d00      	cmp	r5, #0
 800a0ee:	dade      	bge.n	800a0ae <_malloc_r+0x12>
 800a0f0:	230c      	movs	r3, #12
 800a0f2:	6033      	str	r3, [r6, #0]
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	1b5b      	subs	r3, r3, r5
 800a0fc:	d419      	bmi.n	800a132 <_malloc_r+0x96>
 800a0fe:	2b0b      	cmp	r3, #11
 800a100:	d903      	bls.n	800a10a <_malloc_r+0x6e>
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	18e4      	adds	r4, r4, r3
 800a106:	6025      	str	r5, [r4, #0]
 800a108:	e003      	b.n	800a112 <_malloc_r+0x76>
 800a10a:	6863      	ldr	r3, [r4, #4]
 800a10c:	42a2      	cmp	r2, r4
 800a10e:	d10e      	bne.n	800a12e <_malloc_r+0x92>
 800a110:	600b      	str	r3, [r1, #0]
 800a112:	0030      	movs	r0, r6
 800a114:	f000 f83a 	bl	800a18c <__malloc_unlock>
 800a118:	0020      	movs	r0, r4
 800a11a:	2207      	movs	r2, #7
 800a11c:	300b      	adds	r0, #11
 800a11e:	1d23      	adds	r3, r4, #4
 800a120:	4390      	bics	r0, r2
 800a122:	1ac2      	subs	r2, r0, r3
 800a124:	4298      	cmp	r0, r3
 800a126:	d0e6      	beq.n	800a0f6 <_malloc_r+0x5a>
 800a128:	1a1b      	subs	r3, r3, r0
 800a12a:	50a3      	str	r3, [r4, r2]
 800a12c:	e7e3      	b.n	800a0f6 <_malloc_r+0x5a>
 800a12e:	6053      	str	r3, [r2, #4]
 800a130:	e7ef      	b.n	800a112 <_malloc_r+0x76>
 800a132:	0022      	movs	r2, r4
 800a134:	6864      	ldr	r4, [r4, #4]
 800a136:	e7c2      	b.n	800a0be <_malloc_r+0x22>
 800a138:	2303      	movs	r3, #3
 800a13a:	1cc4      	adds	r4, r0, #3
 800a13c:	439c      	bics	r4, r3
 800a13e:	42a0      	cmp	r0, r4
 800a140:	d0e1      	beq.n	800a106 <_malloc_r+0x6a>
 800a142:	1a21      	subs	r1, r4, r0
 800a144:	0030      	movs	r0, r6
 800a146:	f000 f807 	bl	800a158 <_sbrk_r>
 800a14a:	1c43      	adds	r3, r0, #1
 800a14c:	d1db      	bne.n	800a106 <_malloc_r+0x6a>
 800a14e:	e7c7      	b.n	800a0e0 <_malloc_r+0x44>
 800a150:	200000fc 	.word	0x200000fc
 800a154:	20000100 	.word	0x20000100

0800a158 <_sbrk_r>:
 800a158:	2300      	movs	r3, #0
 800a15a:	b570      	push	{r4, r5, r6, lr}
 800a15c:	4d06      	ldr	r5, [pc, #24]	; (800a178 <_sbrk_r+0x20>)
 800a15e:	0004      	movs	r4, r0
 800a160:	0008      	movs	r0, r1
 800a162:	602b      	str	r3, [r5, #0]
 800a164:	f7fa fe28 	bl	8004db8 <_sbrk>
 800a168:	1c43      	adds	r3, r0, #1
 800a16a:	d103      	bne.n	800a174 <_sbrk_r+0x1c>
 800a16c:	682b      	ldr	r3, [r5, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d000      	beq.n	800a174 <_sbrk_r+0x1c>
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	bd70      	pop	{r4, r5, r6, pc}
 800a176:	46c0      	nop			; (mov r8, r8)
 800a178:	20000484 	.word	0x20000484

0800a17c <__malloc_lock>:
 800a17c:	b510      	push	{r4, lr}
 800a17e:	4802      	ldr	r0, [pc, #8]	; (800a188 <__malloc_lock+0xc>)
 800a180:	f000 f80c 	bl	800a19c <__retarget_lock_acquire_recursive>
 800a184:	bd10      	pop	{r4, pc}
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	2000048c 	.word	0x2000048c

0800a18c <__malloc_unlock>:
 800a18c:	b510      	push	{r4, lr}
 800a18e:	4802      	ldr	r0, [pc, #8]	; (800a198 <__malloc_unlock+0xc>)
 800a190:	f000 f805 	bl	800a19e <__retarget_lock_release_recursive>
 800a194:	bd10      	pop	{r4, pc}
 800a196:	46c0      	nop			; (mov r8, r8)
 800a198:	2000048c 	.word	0x2000048c

0800a19c <__retarget_lock_acquire_recursive>:
 800a19c:	4770      	bx	lr

0800a19e <__retarget_lock_release_recursive>:
 800a19e:	4770      	bx	lr

0800a1a0 <_init>:
 800a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a2:	46c0      	nop			; (mov r8, r8)
 800a1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a6:	bc08      	pop	{r3}
 800a1a8:	469e      	mov	lr, r3
 800a1aa:	4770      	bx	lr

0800a1ac <_fini>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b2:	bc08      	pop	{r3}
 800a1b4:	469e      	mov	lr, r3
 800a1b6:	4770      	bx	lr
