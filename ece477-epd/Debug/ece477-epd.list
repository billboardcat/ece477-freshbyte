
ece477-epd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da4  08005da4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dac  08005dac  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000008c  08005e40  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005e40  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010261  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a7b  00000000  00000000  00030315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00033be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014737  00000000  00000000  00034928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b5a  00000000  00000000  0004905f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a686  00000000  00000000  0005abb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d523f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f8  00000000  00000000  000d5294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005458 	.word	0x08005458

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08005458 	.word	0x08005458

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8d8 	bl	8000484 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8d3 	bl	8000484 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzsi2>:
 8000448:	211c      	movs	r1, #28
 800044a:	2301      	movs	r3, #1
 800044c:	041b      	lsls	r3, r3, #16
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0xe>
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	3910      	subs	r1, #16
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	4298      	cmp	r0, r3
 800045a:	d301      	bcc.n	8000460 <__clzsi2+0x18>
 800045c:	0a00      	lsrs	r0, r0, #8
 800045e:	3908      	subs	r1, #8
 8000460:	091b      	lsrs	r3, r3, #4
 8000462:	4298      	cmp	r0, r3
 8000464:	d301      	bcc.n	800046a <__clzsi2+0x22>
 8000466:	0900      	lsrs	r0, r0, #4
 8000468:	3904      	subs	r1, #4
 800046a:	a202      	add	r2, pc, #8	; (adr r2, 8000474 <__clzsi2+0x2c>)
 800046c:	5c10      	ldrb	r0, [r2, r0]
 800046e:	1840      	adds	r0, r0, r1
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	02020304 	.word	0x02020304
 8000478:	01010101 	.word	0x01010101
	...

08000484 <__clzdi2>:
 8000484:	b510      	push	{r4, lr}
 8000486:	2900      	cmp	r1, #0
 8000488:	d103      	bne.n	8000492 <__clzdi2+0xe>
 800048a:	f7ff ffdd 	bl	8000448 <__clzsi2>
 800048e:	3020      	adds	r0, #32
 8000490:	e002      	b.n	8000498 <__clzdi2+0x14>
 8000492:	1c08      	adds	r0, r1, #0
 8000494:	f7ff ffd8 	bl	8000448 <__clzsi2>
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <epd_command>:
    @brief This function sends an EPD command with no data
    @param c    The command to send
    @param end  If true, the CS pin will be pulled high following the transaction. Pass true for Adafruit functions that don't define it during call!
    @return     A byte of data read back from the EPD.
*/
uint8_t epd_command(uint8_t c, bool end) {
 800049c:	b5b0      	push	{r4, r5, r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	0002      	movs	r2, r0
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	1dbb      	adds	r3, r7, #6
 80004aa:	1c0a      	adds	r2, r1, #0
 80004ac:	701a      	strb	r2, [r3, #0]
    EPD_CS_HIGH;    // Ensure the CS pin is high before starting the transaction
 80004ae:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <epd_command+0xc8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	2140      	movs	r1, #64	; 0x40
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 fb59 	bl	8002b6c <HAL_GPIO_WritePin>
    EPD_DC_LOW;     // Set DC low to indicate that a command is being sent
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <epd_command+0xcc>)
 80004bc:	2200      	movs	r2, #0
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 fb53 	bl	8002b6c <HAL_GPIO_WritePin>
    EPD_CS_LOW;     // Set CS low to indicate the start of the transaction
 80004c6:	4b27      	ldr	r3, [pc, #156]	; (8000564 <epd_command+0xc8>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	2140      	movs	r1, #64	; 0x40
 80004cc:	0018      	movs	r0, r3
 80004ce:	f002 fb4d 	bl	8002b6c <HAL_GPIO_WritePin>

    uint8_t rxData;
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&EPD_SPI, &c, &rxData, 1, HAL_MAX_DELAY);
 80004d2:	2517      	movs	r5, #23
 80004d4:	197c      	adds	r4, r7, r5
 80004d6:	230f      	movs	r3, #15
 80004d8:	18fa      	adds	r2, r7, r3
 80004da:	1df9      	adds	r1, r7, #7
 80004dc:	4823      	ldr	r0, [pc, #140]	; (800056c <epd_command+0xd0>)
 80004de:	2301      	movs	r3, #1
 80004e0:	425b      	negs	r3, r3
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2301      	movs	r3, #1
 80004e6:	f003 fee9 	bl	80042bc <HAL_SPI_TransmitReceive>
 80004ea:	0003      	movs	r3, r0
 80004ec:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) {
 80004ee:	197b      	adds	r3, r7, r5
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d024      	beq.n	8000540 <epd_command+0xa4>
        char *err;
        switch (status) {
 80004f6:	197b      	adds	r3, r7, r5
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d00b      	beq.n	8000516 <epd_command+0x7a>
 80004fe:	dc18      	bgt.n	8000532 <epd_command+0x96>
 8000500:	2b01      	cmp	r3, #1
 8000502:	d00f      	beq.n	8000524 <epd_command+0x88>
 8000504:	2b02      	cmp	r3, #2
 8000506:	d114      	bne.n	8000532 <epd_command+0x96>
            case HAL_BUSY:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_BUSY";
 8000508:	4b19      	ldr	r3, [pc, #100]	; (8000570 <epd_command+0xd4>)
 800050a:	613b      	str	r3, [r7, #16]
                serial_println(err);
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fc6a 	bl	8001de8 <serial_println>
                break;
 8000514:	e015      	b.n	8000542 <epd_command+0xa6>
            case HAL_TIMEOUT:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_TIMEOUT";
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <epd_command+0xd8>)
 8000518:	613b      	str	r3, [r7, #16]
                serial_println(err);
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fc63 	bl	8001de8 <serial_println>
                break;
 8000522:	e00e      	b.n	8000542 <epd_command+0xa6>
            case HAL_ERROR:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_ERROR";
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <epd_command+0xdc>)
 8000526:	613b      	str	r3, [r7, #16]
                serial_println(err);
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	0018      	movs	r0, r3
 800052c:	f001 fc5c 	bl	8001de8 <serial_println>
                break;
 8000530:	e007      	b.n	8000542 <epd_command+0xa6>
            default:
                err = "EPD_COMMAND: FAILED TO TX/RX - UNKNOWN ERROR";
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <epd_command+0xe0>)
 8000534:	613b      	str	r3, [r7, #16]
                serial_println(err);
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fc55 	bl	8001de8 <serial_println>
                break;
 800053e:	e000      	b.n	8000542 <epd_command+0xa6>
        }
    }
 8000540:	46c0      	nop			; (mov r8, r8)

    if (end) {
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <epd_command+0xba>
        EPD_CS_HIGH;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <epd_command+0xc8>)
 800054c:	2201      	movs	r2, #1
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	0018      	movs	r0, r3
 8000552:	f002 fb0b 	bl	8002b6c <HAL_GPIO_WritePin>
    }

    return rxData;
 8000556:	230f      	movs	r3, #15
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	781b      	ldrb	r3, [r3, #0]
}
 800055c:	0018      	movs	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	b006      	add	sp, #24
 8000562:	bdb0      	pop	{r4, r5, r7, pc}
 8000564:	50000400 	.word	0x50000400
 8000568:	50000800 	.word	0x50000800
 800056c:	2000016c 	.word	0x2000016c
 8000570:	08005470 	.word	0x08005470
 8000574:	08005498 	.word	0x08005498
 8000578:	080054c4 	.word	0x080054c4
 800057c:	080054f0 	.word	0x080054f0

08000580 <epd_data>:
/*!
    @brief This function sends data to the EPD for an ONGOING transaction
    @param buf the buffer of data to send
    @param len the length of the data buffer
*/
void epd_data(const uint8_t *buf, uint16_t len) {
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	000a      	movs	r2, r1
 800058a:	1cbb      	adds	r3, r7, #2
 800058c:	801a      	strh	r2, [r3, #0]
    EPD_DC_HIGH;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <epd_data+0x40>)
 8000590:	2201      	movs	r2, #1
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	0018      	movs	r0, r3
 8000596:	f002 fae9 	bl	8002b6c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&EPD_SPI, buf, len, HAL_MAX_DELAY);
 800059a:	2301      	movs	r3, #1
 800059c:	425c      	negs	r4, r3
 800059e:	1cbb      	adds	r3, r7, #2
 80005a0:	881a      	ldrh	r2, [r3, #0]
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <epd_data+0x44>)
 80005a6:	0023      	movs	r3, r4
 80005a8:	f003 fc0c 	bl	8003dc4 <HAL_SPI_Transmit>
    EPD_CS_HIGH;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <epd_data+0x48>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	2140      	movs	r1, #64	; 0x40
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 fada 	bl	8002b6c <HAL_GPIO_WritePin>
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b003      	add	sp, #12
 80005be:	bd90      	pop	{r4, r7, pc}
 80005c0:	50000800 	.word	0x50000800
 80005c4:	2000016c 	.word	0x2000016c
 80005c8:	50000400 	.word	0x50000400

080005cc <epd_pCommand>:
    @brief This function sends an EPD command with data
    @param c the command to send
    @param buf the buffer of data to send
    @param len the length of the data buffer
*/
void epd_pCommand(uint8_t c, const uint8_t *buf, uint16_t len) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6039      	str	r1, [r7, #0]
 80005d4:	0011      	movs	r1, r2
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	1c02      	adds	r2, r0, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	1c0a      	adds	r2, r1, #0
 80005e0:	801a      	strh	r2, [r3, #0]
    epd_command(c, false);
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2100      	movs	r1, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff ff57 	bl	800049c <epd_command>
    epd_data(buf, len);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	881a      	ldrh	r2, [r3, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	0011      	movs	r1, r2
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff ffc2 	bl	8000580 <epd_data>
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}

08000604 <epd_commandList>:

/*!
 * @brief This function is used by epd_powerUp() to send over the display initialization code
 * @param init_code
 */
void epd_commandList(const uint8_t *init_code) {
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b095      	sub	sp, #84	; 0x54
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    uint8_t buf[64];

    while (*init_code != 0xFE) {
 800060c:	e03d      	b.n	800068a <epd_commandList+0x86>
        uint8_t cmd = *init_code;
 800060e:	214b      	movs	r1, #75	; 0x4b
 8000610:	187b      	adds	r3, r7, r1
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7812      	ldrb	r2, [r2, #0]
 8000616:	701a      	strb	r2, [r3, #0]
        init_code++;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
        uint8_t num_args = *init_code;
 800061e:	244a      	movs	r4, #74	; 0x4a
 8000620:	193b      	adds	r3, r7, r4
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	701a      	strb	r2, [r3, #0]
        init_code++;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
        if (cmd == 0xFF) {
 800062e:	187b      	adds	r3, r7, r1
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2bff      	cmp	r3, #255	; 0xff
 8000634:	d107      	bne.n	8000646 <epd_commandList+0x42>
            epd_busy();
 8000636:	f000 f836 	bl	80006a6 <epd_busy>
            HAL_Delay(num_args);
 800063a:	193b      	adds	r3, r7, r4
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	0018      	movs	r0, r3
 8000640:	f002 f846 	bl	80026d0 <HAL_Delay>
            continue;
 8000644:	e021      	b.n	800068a <epd_commandList+0x86>
//            while (1) {
//                HAL_Delay(HAL_MAX_DELAY);
//            }
//        }

        for (int i = 0; i < num_args; i++) {
 8000646:	2300      	movs	r3, #0
 8000648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800064a:	e00d      	b.n	8000668 <epd_commandList+0x64>
            buf[i] = *init_code;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	7819      	ldrb	r1, [r3, #0]
 8000650:	2308      	movs	r3, #8
 8000652:	18fa      	adds	r2, r7, r3
 8000654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000656:	18d3      	adds	r3, r2, r3
 8000658:	1c0a      	adds	r2, r1, #0
 800065a:	701a      	strb	r2, [r3, #0]
            init_code++;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
        for (int i = 0; i < num_args; i++) {
 8000662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000664:	3301      	adds	r3, #1
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000668:	214a      	movs	r1, #74	; 0x4a
 800066a:	187b      	adds	r3, r7, r1
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000670:	429a      	cmp	r2, r3
 8000672:	dbeb      	blt.n	800064c <epd_commandList+0x48>
        }

        epd_pCommand(cmd, buf, num_args);
 8000674:	187b      	adds	r3, r7, r1
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b29a      	uxth	r2, r3
 800067a:	2308      	movs	r3, #8
 800067c:	18f9      	adds	r1, r7, r3
 800067e:	234b      	movs	r3, #75	; 0x4b
 8000680:	18fb      	adds	r3, r7, r3
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff ffa1 	bl	80005cc <epd_pCommand>
    while (*init_code != 0xFE) {
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2bfe      	cmp	r3, #254	; 0xfe
 8000690:	d1bd      	bne.n	800060e <epd_commandList+0xa>
    }
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b015      	add	sp, #84	; 0x54
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <epd_reset>:

/*!
 * @brief This function performs a hardware reset on the display if EPD_NRST_PIN is defined
 */
void epd_reset() {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
        HAL_Delay(10);
        HAL_GPIO_WritePin(EPD_NRST_GPIO_Port, EPD_NRST_Pin, GPIO_PIN_SET);
        HAL_Delay(10);
    }
#endif
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <epd_busy>:

/*!
 * @brief If EPD_BUSY_Pin is defined, this function blocks execution while the EPD is busy. Else, it simply waits.
 */
void epd_busy() {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
        }
    } else {
        HAL_Delay(BUSY_WAIT);
    }
#else
    HAL_Delay(BUSY_WAIT);
 80006aa:	23fa      	movs	r3, #250	; 0xfa
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	0018      	movs	r0, r3
 80006b0:	f002 f80e 	bl	80026d0 <HAL_Delay>
#endif
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <epd_update>:

/*!
 * @brief This function sends the display refresh command to the EPD
 */
void epd_update() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    epd_command(IL91874_DISPLAY_REFRESH, true);
 80006c0:	2101      	movs	r1, #1
 80006c2:	2012      	movs	r0, #18
 80006c4:	f7ff feea 	bl	800049c <epd_command>
    HAL_Delay(100);
 80006c8:	2064      	movs	r0, #100	; 0x64
 80006ca:	f002 f801 	bl	80026d0 <HAL_Delay>
    epd_busy();
 80006ce:	f7ff ffea 	bl	80006a6 <epd_busy>
    if (!use_busy) {
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <epd_update+0x34>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4053      	eors	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <epd_update+0x2c>
        HAL_Delay(REFRESH_WAIT);
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <epd_update+0x38>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 fff4 	bl	80026d0 <HAL_Delay>
    }
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	200000a9 	.word	0x200000a9
 80006f4:	000032c8 	.word	0x000032c8

080006f8 <epd_powerUp>:

/*!
 * @brief This function performs the EPD power on sequence.
 */
void epd_powerUp() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
    uint8_t buf[5];

    epd_reset();  // TODO: Implement this later for future use. Would be helpful to have.
 80006fe:	f7ff ffcd 	bl	800069c <epd_reset>
    HAL_Delay(200);
 8000702:	20c8      	movs	r0, #200	; 0xc8
 8000704:	f001 ffe4 	bl	80026d0 <HAL_Delay>
    const uint8_t *init_code = epd_init_code;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <epd_powerUp+0x5c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	60fb      	str	r3, [r7, #12]

    epd_commandList(init_code);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff ff77 	bl	8000604 <epd_commandList>

    buf[0] = (EPD_HEIGHT >> 8) & 0xFF;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
    buf[1] = EPD_HEIGHT & 0xFF;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	22b0      	movs	r2, #176	; 0xb0
 8000720:	705a      	strb	r2, [r3, #1]
    buf[2] = (EPD_WIDTH >> 8) & 0xFF;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2201      	movs	r2, #1
 8000726:	709a      	strb	r2, [r3, #2]
    buf[3] = EPD_WIDTH & 0xFF;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2208      	movs	r2, #8
 800072c:	70da      	strb	r2, [r3, #3]
    epd_pCommand(IL91874_RESOLUTION, buf, 4);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2204      	movs	r2, #4
 8000732:	0019      	movs	r1, r3
 8000734:	2061      	movs	r0, #97	; 0x61
 8000736:	f7ff ff49 	bl	80005cc <epd_pCommand>

    buf[0] = 0x00;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
    epd_pCommand(IL91874_PDRF, buf, 1);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2201      	movs	r2, #1
 8000744:	0019      	movs	r1, r3
 8000746:	2016      	movs	r0, #22
 8000748:	f7ff ff40 	bl	80005cc <epd_pCommand>
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b004      	add	sp, #16
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000b0 	.word	0x200000b0

08000758 <epd_powerDown>:

/*!
 * @brief This function performs the EPD power down sequence.
 *          If EPD_NRST_Pin is defined, the EPD will be put in a deep sleep mode to further conserve power.
 */
void epd_powerDown() {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
    uint8_t buf[1];

    buf[0] = 0xF7;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	22f7      	movs	r2, #247	; 0xf7
 8000762:	701a      	strb	r2, [r3, #0]
    epd_pCommand(IL91874_CDI, buf, 1);
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2201      	movs	r2, #1
 8000768:	0019      	movs	r1, r3
 800076a:	2050      	movs	r0, #80	; 0x50
 800076c:	f7ff ff2e 	bl	80005cc <epd_pCommand>

    // power off
    epd_command(IL91874_POWER_OFF, true);
 8000770:	2101      	movs	r1, #1
 8000772:	2002      	movs	r0, #2
 8000774:	f7ff fe92 	bl	800049c <epd_command>
    epd_busy();
 8000778:	f7ff ff95 	bl	80006a6 <epd_busy>

    // Only deep sleep if we can get out of it
    if (use_nrst) {
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <epd_powerDown+0x48>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d008      	beq.n	8000796 <epd_powerDown+0x3e>
        buf[0] = 0xA5;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	22a5      	movs	r2, #165	; 0xa5
 8000788:	701a      	strb	r2, [r3, #0]
        epd_pCommand(IL91874_DEEP_SLEEP, buf, 1);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2201      	movs	r2, #1
 800078e:	0019      	movs	r1, r3
 8000790:	2007      	movs	r0, #7
 8000792:	f7ff ff1b 	bl	80005cc <epd_pCommand>
    }
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	200000a8 	.word	0x200000a8

080007a4 <epd_writeRAMcommand>:
/*!
 * @brief This function sends the relevant display draw command to either draw in B/W or Color
 * @param index     Set to 0 for black and white drawing. Set to 1 for color drawing.
 * @return          A byte of data from the EPD.
 */
uint8_t epd_writeRAMcommand(uint8_t index) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	701a      	strb	r2, [r3, #0]
    if (index == 0) {
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d105      	bne.n	80007c4 <epd_writeRAMcommand+0x20>
        return epd_command(EPD_RAM_BW, false);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2010      	movs	r0, #16
 80007bc:	f7ff fe6e 	bl	800049c <epd_command>
 80007c0:	0003      	movs	r3, r0
 80007c2:	e00a      	b.n	80007da <epd_writeRAMcommand+0x36>
    }
    if (index == 1) {
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d105      	bne.n	80007d8 <epd_writeRAMcommand+0x34>
        return epd_command(EPD_RAM_RED, false);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2013      	movs	r0, #19
 80007d0:	f7ff fe64 	bl	800049c <epd_command>
 80007d4:	0003      	movs	r3, r0
 80007d6:	e000      	b.n	80007da <epd_writeRAMcommand+0x36>
    }

    return 0;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	0018      	movs	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <set_black_buffer>:
 * @brief This function sets the global variables for black buffer. Can be used to swap buffers b/t colors.
 *          NOTE: Ability to swap buffers requires that EPD_USE_COLOR be defined.
 * @param index     The buffer to select for black.
 * @param inverted  Whether or not to treat the colors in the buffer as inverted.
 */
void set_black_buffer(int8_t index, bool inverted) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	1c0a      	adds	r2, r1, #0
 80007f4:	701a      	strb	r2, [r3, #0]
    if (index == 0) {
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10c      	bne.n	800081a <set_black_buffer+0x36>
        if (use_sram) {
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <set_black_buffer+0x48>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d004      	beq.n	8000812 <set_black_buffer+0x2e>
            black_buffer_addr = buffer1_addr;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <set_black_buffer+0x4c>)
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <set_black_buffer+0x50>)
 800080e:	801a      	strh	r2, [r3, #0]
 8000810:	e003      	b.n	800081a <set_black_buffer+0x36>
        } else {
            black_buffer = buffer1;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <set_black_buffer+0x54>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <set_black_buffer+0x58>)
 8000818:	601a      	str	r2, [r3, #0]
        } else {
            black_buffer = buffer2;
        }
    }
#endif
    black_buffer_inverted = inverted;
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <set_black_buffer+0x5c>)
 800081c:	1dba      	adds	r2, r7, #6
 800081e:	7812      	ldrb	r2, [r2, #0]
 8000820:	701a      	strb	r2, [r3, #0]
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	20000000 	.word	0x20000000
 8000830:	20000104 	.word	0x20000104
 8000834:	20000102 	.word	0x20000102
 8000838:	2000010c 	.word	0x2000010c
 800083c:	20000110 	.word	0x20000110
 8000840:	200000ab 	.word	0x200000ab

08000844 <epd_init>:

/*!
 * @brief This function performs the initialization sequence for the EPD.
 * @param sram_enabled  A boolean that indicates whether or not the use the EPD's external SRAM module.
 */
void epd_init(bool sram_enabled) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	0002      	movs	r2, r0
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	701a      	strb	r2, [r3, #0]
    buffer1_size = ((uint32_t) EPD_WIDTH * (uint32_t) EPD_HEIGHT) / 8;  // Calculate the (first) buffer's size
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <epd_init+0xbc>)
 8000852:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <epd_init+0xc0>)
 8000854:	601a      	str	r2, [r3, #0]
    use_sram = sram_enabled;                                            // Set the SRAM usage flag
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <epd_init+0xc4>)
 8000858:	1dfa      	adds	r2, r7, #7
 800085a:	7812      	ldrb	r2, [r2, #0]
 800085c:	701a      	strb	r2, [r3, #0]
    } else {                                        // Set up buffers for MCU RAM usage
        buffer1 = (uint8_t *) malloc(buffer1_size); // First buffer's address
        buffer2 = (uint8_t *) malloc(buffer2_size); // Second buffer's address
    }
#else
    if (use_sram) {         // Set up the buffer for SRAM usage
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <epd_init+0xc4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d006      	beq.n	8000874 <epd_init+0x30>
        buffer1_addr = 0;   // The buffer's address
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <epd_init+0xc8>)
 8000868:	2200      	movs	r2, #0
 800086a:	801a      	strh	r2, [r3, #0]
        buffer1 = NULL;     // Set MCU RAM buffer pointer to NULL
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <epd_init+0xcc>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	e008      	b.n	8000886 <epd_init+0x42>
    } else {                                        // Set up buffer for MCU RAM usage
        buffer1 = (uint8_t *) malloc(buffer1_size); // The buffer's address
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <epd_init+0xbc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	0018      	movs	r0, r3
 800087a:	f004 fd59 	bl	8005330 <malloc>
 800087e:	0003      	movs	r3, r0
 8000880:	001a      	movs	r2, r3
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <epd_init+0xcc>)
 8000884:	601a      	str	r2, [r3, #0]
    }
#endif

    single_byte_tx = true;  // Seems like this EPD requires CS to go high b/t each byte, ergo single byte transactions
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <epd_init+0xd0>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]

    if (use_sram) { // If using SRAM, set the SRAM module to run in sequential mode
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <epd_init+0xc4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <epd_init+0x5a>
        sram_write8(0, K640_SEQUENTIAL_MODE, MCPSRAM_WRSR);
 8000894:	2201      	movs	r2, #1
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	2000      	movs	r0, #0
 800089a:	f001 fd26 	bl	80022ea <sram_write8>
    }

    EPD_CS_HIGH;                                // Make sure CS starts high.
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <epd_init+0xd4>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 f961 	bl	8002b6c <HAL_GPIO_WritePin>
    epd_reset();                                // reset the display, if at all possible.
 80008aa:	f7ff fef7 	bl	800069c <epd_reset>
    epd_powerDown();                            // Turn off the display.
 80008ae:	f7ff ff53 	bl	8000758 <epd_powerDown>
    epd_init_code = ti_270c44_tri_init_code;    // Set the pointer to the correct initialization code.
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <epd_init+0xd8>)
 80008b4:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <epd_init+0xdc>)
 80008b6:	601a      	str	r2, [r3, #0]

    // Setup the black and color buffers to buffer1 and buffer2 respectively
    set_black_buffer(0, false);
 80008b8:	2100      	movs	r1, #0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ff92 	bl	80007e4 <set_black_buffer>
#ifdef EPD_USE_COLOR
    set_color_buffer(1, false);
#endif

    // Initialize layer_colors[] LUT
    layer_colors[EPD_WHITE] = 0b00;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <epd_init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
    layer_colors[EPD_BLACK] = 0b01;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <epd_init+0xe0>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	705a      	strb	r2, [r3, #1]
    layer_colors[EPD_RED] = 0b10;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <epd_init+0xe0>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	709a      	strb	r2, [r3, #2]
    layer_colors[EPD_GRAY] = 0b10;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <epd_init+0xe0>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	70da      	strb	r2, [r3, #3]
    layer_colors[EPD_LIGHT] = 0b00;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <epd_init+0xe0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	715a      	strb	r2, [r3, #5]
    layer_colors[EPD_DARK] = 0b01;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <epd_init+0xe0>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	711a      	strb	r2, [r3, #4]

    // Set the display width, height, and rotation to their default values.
    width = EPD_WIDTH;
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <epd_init+0xe4>)
 80008e6:	2284      	movs	r2, #132	; 0x84
 80008e8:	0052      	lsls	r2, r2, #1
 80008ea:	801a      	strh	r2, [r3, #0]
    height = EPD_HEIGHT;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <epd_init+0xe8>)
 80008ee:	22b0      	movs	r2, #176	; 0xb0
 80008f0:	801a      	strh	r2, [r3, #0]
    rotation = 2;           // Set rotation to 2 since it matches the push-buttons on the shield
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <epd_init+0xec>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	701a      	strb	r2, [r3, #0]
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b002      	add	sp, #8
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000108 	.word	0x20000108
 8000904:	000016b0 	.word	0x000016b0
 8000908:	20000000 	.word	0x20000000
 800090c:	20000104 	.word	0x20000104
 8000910:	2000010c 	.word	0x2000010c
 8000914:	200000aa 	.word	0x200000aa
 8000918:	50000400 	.word	0x50000400
 800091c:	200000b0 	.word	0x200000b0
 8000920:	080057c4 	.word	0x080057c4
 8000924:	20000114 	.word	0x20000114
 8000928:	2000011c 	.word	0x2000011c
 800092c:	2000011a 	.word	0x2000011a
 8000930:	20000100 	.word	0x20000100

08000934 <clear_buffer>:

/*!
 * @brief This function clears the display buffer(s)
 */
void clear_buffer() {
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    if (use_sram) {
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <clear_buffer+0x74>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d017      	beq.n	8000970 <clear_buffer+0x3c>
        if (black_buffer_inverted) {
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <clear_buffer+0x78>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d009      	beq.n	800095c <clear_buffer+0x28>
            sram_erase(black_buffer_addr, buffer1_size, 0xFF);
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <clear_buffer+0x7c>)
 800094a:	8818      	ldrh	r0, [r3, #0]
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <clear_buffer+0x80>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	b29b      	uxth	r3, r3
 8000952:	22ff      	movs	r2, #255	; 0xff
 8000954:	0019      	movs	r1, r3
 8000956:	f001 fce5 	bl	8002324 <sram_erase>
                memset(color_buffer, 0x00, buffer2_size);
            }
        }
#endif
    }
}
 800095a:	e022      	b.n	80009a2 <clear_buffer+0x6e>
            sram_erase(black_buffer_addr, buffer1_size, 0x00);
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <clear_buffer+0x7c>)
 800095e:	8818      	ldrh	r0, [r3, #0]
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <clear_buffer+0x80>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	b29b      	uxth	r3, r3
 8000966:	2200      	movs	r2, #0
 8000968:	0019      	movs	r1, r3
 800096a:	f001 fcdb 	bl	8002324 <sram_erase>
}
 800096e:	e018      	b.n	80009a2 <clear_buffer+0x6e>
        if (black_buffer) {
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <clear_buffer+0x84>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d014      	beq.n	80009a2 <clear_buffer+0x6e>
            if (black_buffer_inverted) {
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <clear_buffer+0x78>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d008      	beq.n	8000992 <clear_buffer+0x5e>
                memset(black_buffer, 0xFF, buffer1_size);
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <clear_buffer+0x84>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <clear_buffer+0x80>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	001a      	movs	r2, r3
 800098a:	21ff      	movs	r1, #255	; 0xff
 800098c:	f004 fcda 	bl	8005344 <memset>
}
 8000990:	e007      	b.n	80009a2 <clear_buffer+0x6e>
                memset(black_buffer, 0x00, buffer1_size);
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <clear_buffer+0x84>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <clear_buffer+0x80>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	001a      	movs	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	f004 fcd1 	bl	8005344 <memset>
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	200000ab 	.word	0x200000ab
 80009b0:	20000102 	.word	0x20000102
 80009b4:	20000108 	.word	0x20000108
 80009b8:	20000110 	.word	0x20000110

080009bc <spi_transfer>:
 * @brief This is a helper function for write_SRAM_to_epd().
 *          It transfers a byte to the EPD and reads a byte from the external SRAM
 * @param d     The byte to send to the EPD.
 * @return      The next byte to send to the EPD.
 */
uint8_t spi_transfer(uint8_t d) {
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b087      	sub	sp, #28
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	0002      	movs	r2, r0
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	701a      	strb	r2, [r3, #0]
    uint8_t b[1] = {0x00};
 80009c8:	240c      	movs	r4, #12
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <spi_transfer+0x70>)
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	701a      	strb	r2, [r3, #0]
    if (single_byte_tx) {
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <spi_transfer+0x74>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d017      	beq.n	8000a0a <spi_transfer+0x4e>
        EPD_CS_LOW;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <spi_transfer+0x78>)
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	0018      	movs	r0, r3
 80009e2:	f002 f8c3 	bl	8002b6c <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&EPD_SPI, &d, b, 1, HAL_MAX_DELAY);
 80009e6:	193a      	adds	r2, r7, r4
 80009e8:	1df9      	adds	r1, r7, #7
 80009ea:	4813      	ldr	r0, [pc, #76]	; (8000a38 <spi_transfer+0x7c>)
 80009ec:	2301      	movs	r3, #1
 80009ee:	425b      	negs	r3, r3
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2301      	movs	r3, #1
 80009f4:	f003 fc62 	bl	80042bc <HAL_SPI_TransmitReceive>
        EPD_CS_HIGH;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <spi_transfer+0x78>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 f8b4 	bl	8002b6c <HAL_GPIO_WritePin>
        return b[0];
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	e00b      	b.n	8000a22 <spi_transfer+0x66>
    } else {
        HAL_SPI_TransmitReceive(&EPD_SPI, &d, b, 1, HAL_MAX_DELAY);
 8000a0a:	240c      	movs	r4, #12
 8000a0c:	193a      	adds	r2, r7, r4
 8000a0e:	1df9      	adds	r1, r7, #7
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <spi_transfer+0x7c>)
 8000a12:	2301      	movs	r3, #1
 8000a14:	425b      	negs	r3, r3
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f003 fc4f 	bl	80042bc <HAL_SPI_TransmitReceive>
        return b[0];
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	781b      	ldrb	r3, [r3, #0]
    }
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b005      	add	sp, #20
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	08005520 	.word	0x08005520
 8000a30:	200000aa 	.word	0x200000aa
 8000a34:	50000400 	.word	0x50000400
 8000a38:	2000016c 	.word	0x2000016c

08000a3c <write_SRAM_to_epd>:
 * @param sram_addr     The starting address of the buffer in SRAM.
 * @param buffer_size   The size of the buffer.
 * @param epd_location  The EPD location to write to. 0 writes to black, 1 writes to color.
 * @param invert        Whether or not to invert the image.
 */
void write_SRAM_to_epd(uint16_t sram_addr, uint32_t buffer_size, uint8_t epd_location, bool invert) {
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0004      	movs	r4, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	0010      	movs	r0, r2
 8000a48:	0019      	movs	r1, r3
 8000a4a:	1dbb      	adds	r3, r7, #6
 8000a4c:	1c22      	adds	r2, r4, #0
 8000a4e:	801a      	strh	r2, [r3, #0]
 8000a50:	1d7b      	adds	r3, r7, #5
 8000a52:	1c02      	adds	r2, r0, #0
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	1c0a      	adds	r2, r1, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    sram_csLow();
 8000a5c:	f001 fb1f 	bl	800209e <sram_csLow>
    // send read command
    spi_transfer(MCPSRAM_READ);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f7ff ffab 	bl	80009bc <spi_transfer>
    // send address
    spi_transfer(sram_addr >> 8);
 8000a66:	1dbb      	adds	r3, r7, #6
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff ffa3 	bl	80009bc <spi_transfer>
    spi_transfer(sram_addr & 0xFF);
 8000a76:	1dbb      	adds	r3, r7, #6
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff9d 	bl	80009bc <spi_transfer>

    // first data byte from SRAM will be transferred in at the same time as the EPD command is transferred out
    // note: calling epd_writeRAMcommand will start an SPI tx with the EPD
    c = epd_writeRAMcommand(epd_location);
 8000a82:	230f      	movs	r3, #15
 8000a84:	18fc      	adds	r4, r7, r3
 8000a86:	1d7b      	adds	r3, r7, #5
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f7ff fe8a 	bl	80007a4 <epd_writeRAMcommand>
 8000a90:	0003      	movs	r3, r0
 8000a92:	7023      	strb	r3, [r4, #0]

    EPD_DC_HIGH;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <write_SRAM_to_epd+0xe4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 f866 	bl	8002b6c <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < buffer_size; i++) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	e02c      	b.n	8000b00 <write_SRAM_to_epd+0xc4>
        c = (invert) ? ~c : c;  // Invert the data if need be
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d005      	beq.n	8000aba <write_SRAM_to_epd+0x7e>
 8000aae:	230f      	movs	r3, #15
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	e002      	b.n	8000ac0 <write_SRAM_to_epd+0x84>
 8000aba:	230f      	movs	r3, #15
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	250f      	movs	r5, #15
 8000ac2:	197a      	adds	r2, r7, r5
 8000ac4:	7013      	strb	r3, [r2, #0]
        c = spi_transfer(c);    // Tx the current byte and Rx the next
 8000ac6:	197c      	adds	r4, r7, r5
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff ff75 	bl	80009bc <spi_transfer>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	7023      	strb	r3, [r4, #0]

        serial_printf("0x%x, ", c);
 8000ad6:	197b      	adds	r3, r7, r5
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <write_SRAM_to_epd+0xe8>)
 8000adc:	0011      	movs	r1, r2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 f9bc 	bl	8001e5c <serial_printf>
        if (i % 32 == 31) {
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	221f      	movs	r2, #31
 8000ae8:	4013      	ands	r3, r2
 8000aea:	2b1f      	cmp	r3, #31
 8000aec:	d105      	bne.n	8000afa <write_SRAM_to_epd+0xbe>
            serial_printf("\n$%x: ", i);
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <write_SRAM_to_epd+0xec>)
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 f9b1 	bl	8001e5c <serial_printf>
    for (uint32_t i = 0; i < buffer_size; i++) {
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	3301      	adds	r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d3ce      	bcc.n	8000aa6 <write_SRAM_to_epd+0x6a>
        }
    }
    EPD_CS_HIGH;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <write_SRAM_to_epd+0xf0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f002 f82c 	bl	8002b6c <HAL_GPIO_WritePin>
    sram_csHigh();
 8000b14:	f001 fab6 	bl	8002084 <sram_csHigh>
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b004      	add	sp, #16
 8000b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b20:	50000800 	.word	0x50000800
 8000b24:	08005524 	.word	0x08005524
 8000b28:	0800552c 	.word	0x0800552c
 8000b2c:	50000400 	.word	0x50000400

08000b30 <write_RAM_to_epd>:
 * @param frame_buffer  The display buffer to transfer to the EPD.
 * @param buffer_size   The size of the display buffer.
 * @param epd_location  The EPD location to write to. 0 writes to black, 1 writes to color.
 * @param invert        Whether or not to invert the image.
 */
void write_RAM_to_epd(uint8_t *frame_buffer, uint32_t buffer_size, uint8_t epd_location, bool invert) {
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	1dbb      	adds	r3, r7, #6
 8000b42:	1c0a      	adds	r2, r1, #0
 8000b44:	701a      	strb	r2, [r3, #0]
    epd_writeRAMcommand(epd_location);
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fe2a 	bl	80007a4 <epd_writeRAMcommand>
//    serial_printf("Writing from RAM[0x%x]: \n", &frame_buffer);
//    HAL_Delay(10);
    EPD_DC_HIGH;
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <write_RAM_to_epd+0xb0>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 f808 	bl	8002b6c <HAL_GPIO_WritePin>
//    HAL_Delay(10);
    for (uint32_t i = 0; i < buffer_size; i++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e02d      	b.n	8000bbe <write_RAM_to_epd+0x8e>
        uint8_t d = invert ? ~frame_buffer[i] : frame_buffer[i];
 8000b62:	1dbb      	adds	r3, r7, #6
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <write_RAM_to_epd+0x48>
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	18d3      	adds	r3, r2, r3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	e003      	b.n	8000b80 <write_RAM_to_epd+0x50>
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	18d3      	adds	r3, r2, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2413      	movs	r4, #19
 8000b82:	193a      	adds	r2, r7, r4
 8000b84:	7013      	strb	r3, [r2, #0]
        EPD_CS_LOW;
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <write_RAM_to_epd+0xb4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2140      	movs	r1, #64	; 0x40
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 ffed 	bl	8002b6c <HAL_GPIO_WritePin>
        HAL_Delay(5);
 8000b92:	2005      	movs	r0, #5
 8000b94:	f001 fd9c 	bl	80026d0 <HAL_Delay>
        HAL_SPI_Transmit(&EPD_SPI, &d, 1, HAL_MAX_DELAY);
 8000b98:	2301      	movs	r3, #1
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	1939      	adds	r1, r7, r4
 8000b9e:	4812      	ldr	r0, [pc, #72]	; (8000be8 <write_RAM_to_epd+0xb8>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f003 f90f 	bl	8003dc4 <HAL_SPI_Transmit>
        EPD_CS_HIGH;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <write_RAM_to_epd+0xb4>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2140      	movs	r1, #64	; 0x40
 8000bac:	0018      	movs	r0, r3
 8000bae:	f001 ffdd 	bl	8002b6c <HAL_GPIO_WritePin>
        HAL_Delay(5);
 8000bb2:	2005      	movs	r0, #5
 8000bb4:	f001 fd8c 	bl	80026d0 <HAL_Delay>
    for (uint32_t i = 0; i < buffer_size; i++) {
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d3cd      	bcc.n	8000b62 <write_RAM_to_epd+0x32>
//        serial_printf("%x ", d);
//        if ((i + 1) % (width / 8) == 0) {
//            serial_printf("\n");
//        }
    }
    EPD_CS_HIGH;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <write_RAM_to_epd+0xb4>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2140      	movs	r1, #64	; 0x40
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 ffcd 	bl	8002b6c <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f001 fd7c 	bl	80026d0 <HAL_Delay>
    return;
 8000bd8:	46c0      	nop			; (mov r8, r8)
}
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b007      	add	sp, #28
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	50000800 	.word	0x50000800
 8000be4:	50000400 	.word	0x50000400
 8000be8:	2000016c 	.word	0x2000016c

08000bec <display>:

/*!
 * @brief This function writes the current display buffer(s) to the EPD and draws an image.
 * @param sleep     Set to true if the EPD should go to sleep after drawing.
 */
void display(bool sleep) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	701a      	strb	r2, [r3, #0]
    epd_powerUp();
 8000bf8:	f7ff fd7e 	bl	80006f8 <epd_powerUp>
    if (use_sram) {
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <display+0x58>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <display+0x2a>
        write_SRAM_to_epd(buffer1_addr, buffer1_size, 0, false);
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <display+0x5c>)
 8000c06:	8818      	ldrh	r0, [r3, #0]
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <display+0x60>)
 8000c0a:	6819      	ldr	r1, [r3, #0]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f7ff ff14 	bl	8000a3c <write_SRAM_to_epd>
 8000c14:	e007      	b.n	8000c26 <display+0x3a>
    } else {
        write_RAM_to_epd(buffer1, buffer1_size, 0, false);
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <display+0x64>)
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <display+0x60>)
 8000c1c:	6819      	ldr	r1, [r3, #0]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2200      	movs	r2, #0
 8000c22:	f7ff ff85 	bl	8000b30 <write_RAM_to_epd>
            write_RAM_to_epd(buffer2, buffer2_size, 1, false);
        }
    }
#endif

    epd_update();
 8000c26:	f7ff fd49 	bl	80006bc <epd_update>
    partials_since_last_full_update = 0;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <display+0x68>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]

    if (sleep) {
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <display+0x50>
        epd_powerDown();
 8000c38:	f7ff fd8e 	bl	8000758 <epd_powerDown>
    }
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000104 	.word	0x20000104
 8000c4c:	20000108 	.word	0x20000108
 8000c50:	2000010c 	.word	0x2000010c
 8000c54:	200000ac 	.word	0x200000ac

08000c58 <draw_pixel>:
 * @brief This function draws a pixel in the display buffer.
 * @param x     The x-coordinate of the pixel
 * @param y     The y-coordinate of the pixel
 * @param color The color of the pixel
 */
void draw_pixel(int16_t x, int16_t y, uint16_t color) {
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	0004      	movs	r4, r0
 8000c60:	0008      	movs	r0, r1
 8000c62:	0011      	movs	r1, r2
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	1c22      	adds	r2, r4, #0
 8000c68:	801a      	strh	r2, [r3, #0]
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	1c02      	adds	r2, r0, #0
 8000c6e:	801a      	strh	r2, [r3, #0]
 8000c70:	1cbb      	adds	r3, r7, #2
 8000c72:	1c0a      	adds	r2, r1, #0
 8000c74:	801a      	strh	r2, [r3, #0]
    if ((x < 0) || (x >= width) || (y < 0) || (y >= height)) {
 8000c76:	1dbb      	adds	r3, r7, #6
 8000c78:	2200      	movs	r2, #0
 8000c7a:	5e9b      	ldrsh	r3, [r3, r2]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db12      	blt.n	8000ca6 <draw_pixel+0x4e>
 8000c80:	1dbb      	adds	r3, r7, #6
 8000c82:	2200      	movs	r2, #0
 8000c84:	5e9b      	ldrsh	r3, [r3, r2]
 8000c86:	4a84      	ldr	r2, [pc, #528]	; (8000e98 <draw_pixel+0x240>)
 8000c88:	8812      	ldrh	r2, [r2, #0]
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	da0b      	bge.n	8000ca6 <draw_pixel+0x4e>
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	5e9b      	ldrsh	r3, [r3, r2]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db06      	blt.n	8000ca6 <draw_pixel+0x4e>
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	5e9b      	ldrsh	r3, [r3, r2]
 8000c9e:	4a7f      	ldr	r2, [pc, #508]	; (8000e9c <draw_pixel+0x244>)
 8000ca0:	8812      	ldrh	r2, [r2, #0]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	db0a      	blt.n	8000cbc <draw_pixel+0x64>
        serial_printf("Pixel off screen! (%d, %d)", x, y);
 8000ca6:	1dbb      	adds	r3, r7, #6
 8000ca8:	2100      	movs	r1, #0
 8000caa:	5e59      	ldrsh	r1, [r3, r1]
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	5e9a      	ldrsh	r2, [r3, r2]
 8000cb2:	4b7b      	ldr	r3, [pc, #492]	; (8000ea0 <draw_pixel+0x248>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 f8d1 	bl	8001e5c <serial_printf>
 8000cba:	e0e9      	b.n	8000e90 <draw_pixel+0x238>
    uint8_t *black_pBuf;
#ifdef EPD_USE_COLOR
    uint8_t *color_pBuf;
#endif

    switch (rotation) {
 8000cbc:	4b79      	ldr	r3, [pc, #484]	; (8000ea4 <draw_pixel+0x24c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d035      	beq.n	8000d30 <draw_pixel+0xd8>
 8000cc4:	dc49      	bgt.n	8000d5a <draw_pixel+0x102>
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d022      	beq.n	8000d10 <draw_pixel+0xb8>
 8000cca:	dc46      	bgt.n	8000d5a <draw_pixel+0x102>
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <draw_pixel+0x7e>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d007      	beq.n	8000ce4 <draw_pixel+0x8c>
 8000cd4:	e041      	b.n	8000d5a <draw_pixel+0x102>
    	case 0:
    		y = y + 8;
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	801a      	strh	r2, [r3, #0]
    		break;
 8000ce2:	e03a      	b.n	8000d5a <draw_pixel+0x102>
        case 1: EPD_swap(x, y);
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	1dba      	adds	r2, r7, #6
 8000cea:	8812      	ldrh	r2, [r2, #0]
 8000cec:	801a      	strh	r2, [r3, #0]
 8000cee:	1dbb      	adds	r3, r7, #6
 8000cf0:	1d3a      	adds	r2, r7, #4
 8000cf2:	8812      	ldrh	r2, [r2, #0]
 8000cf4:	801a      	strh	r2, [r3, #0]
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	187a      	adds	r2, r7, r1
 8000cfa:	8812      	ldrh	r2, [r2, #0]
 8000cfc:	801a      	strh	r2, [r3, #0]
            x = EPD_WIDTH - x - 1;
 8000cfe:	1dbb      	adds	r3, r7, #6
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	2208      	movs	r2, #8
 8000d04:	32ff      	adds	r2, #255	; 0xff
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	801a      	strh	r2, [r3, #0]
            break;
 8000d0e:	e024      	b.n	8000d5a <draw_pixel+0x102>
        case 2:
            x = EPD_WIDTH - x - 1;
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	2208      	movs	r2, #8
 8000d16:	32ff      	adds	r2, #255	; 0xff
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	801a      	strh	r2, [r3, #0]
//            y = EPD_HEIGHT - y - 1;
            y = EPD_HEIGHT - y - 1 + 8;
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	22b7      	movs	r2, #183	; 0xb7
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	801a      	strh	r2, [r3, #0]
            break;
 8000d2e:	e014      	b.n	8000d5a <draw_pixel+0x102>
        case 3: EPD_swap(x, y);
 8000d30:	2112      	movs	r1, #18
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	1dba      	adds	r2, r7, #6
 8000d36:	8812      	ldrh	r2, [r2, #0]
 8000d38:	801a      	strh	r2, [r3, #0]
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	1d3a      	adds	r2, r7, #4
 8000d3e:	8812      	ldrh	r2, [r2, #0]
 8000d40:	801a      	strh	r2, [r3, #0]
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	187a      	adds	r2, r7, r1
 8000d46:	8812      	ldrh	r2, [r2, #0]
 8000d48:	801a      	strh	r2, [r3, #0]
            y = EPD_HEIGHT - y - 1;
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	22af      	movs	r2, #175	; 0xaf
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	801a      	strh	r2, [r3, #0]
            break;
 8000d58:	46c0      	nop			; (mov r8, r8)
    }

    uint16_t addr = ((uint32_t) (EPD_WIDTH - 1 - x) * (uint32_t) EPD_HEIGHT + y) / 8;
 8000d5a:	1dbb      	adds	r3, r7, #6
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	5e9b      	ldrsh	r3, [r3, r2]
 8000d60:	2208      	movs	r2, #8
 8000d62:	32ff      	adds	r2, #255	; 0xff
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	001a      	movs	r2, r3
 8000d68:	23b0      	movs	r3, #176	; 0xb0
 8000d6a:	435a      	muls	r2, r3
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2100      	movs	r1, #0
 8000d70:	5e5b      	ldrsh	r3, [r3, r1]
 8000d72:	18d3      	adds	r3, r2, r3
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	210e      	movs	r1, #14
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	801a      	strh	r2, [r3, #0]
    uint8_t black_c;
#ifdef EPD_USE_COLOR
    uint8_t color_c;
#endif

    if (use_sram) {
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <draw_pixel+0x250>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d011      	beq.n	8000da8 <draw_pixel+0x150>
        black_c = sram_read8(black_buffer_addr + addr, MCPSRAM_READ);
 8000d84:	4b49      	ldr	r3, [pc, #292]	; (8000eac <draw_pixel+0x254>)
 8000d86:	881a      	ldrh	r2, [r3, #0]
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	2103      	movs	r1, #3
 8000d92:	0018      	movs	r0, r3
 8000d94:	f001 fa90 	bl	80022b8 <sram_read8>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	210c      	movs	r1, #12
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	701a      	strb	r2, [r3, #0]
        black_pBuf = &black_c;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e006      	b.n	8000db6 <draw_pixel+0x15e>
#ifdef EPD_USE_COLOR
        color_c = sram_read8(color_buffer_addr + addr, MCPSRAM_READ);
        color_pBuf = &color_c;
#endif
    } else {
        black_pBuf = black_buffer + addr;
 8000da8:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <draw_pixel+0x258>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	230e      	movs	r3, #14
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	18d3      	adds	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
        *color_pBuf |= (1 << (7 - y % 8));
    }
#endif

    bool black_bit;
    black_bit = layer_colors[color] & 0x1;
 8000db6:	1cbb      	adds	r3, r7, #2
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	4a3e      	ldr	r2, [pc, #248]	; (8000eb4 <draw_pixel+0x25c>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	200d      	movs	r0, #13
 8000dc6:	183b      	adds	r3, r7, r0
 8000dc8:	1e51      	subs	r1, r2, #1
 8000dca:	418a      	sbcs	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
    if ((black_bit && black_buffer_inverted) || (!black_bit && !black_buffer_inverted)) {
 8000dce:	183b      	adds	r3, r7, r0
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <draw_pixel+0x186>
 8000dd6:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <draw_pixel+0x260>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10e      	bne.n	8000dfc <draw_pixel+0x1a4>
 8000dde:	230d      	movs	r3, #13
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4053      	eors	r3, r2
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d024      	beq.n	8000e38 <draw_pixel+0x1e0>
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <draw_pixel+0x260>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4053      	eors	r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d01d      	beq.n	8000e38 <draw_pixel+0x1e0>
        *black_pBuf &= ~(1 << (7 - y % 8));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2100      	movs	r1, #0
 8000e06:	5e5b      	ldrsh	r3, [r3, r1]
 8000e08:	492c      	ldr	r1, [pc, #176]	; (8000ebc <draw_pixel+0x264>)
 8000e0a:	400b      	ands	r3, r1
 8000e0c:	d504      	bpl.n	8000e18 <draw_pixel+0x1c0>
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	2108      	movs	r1, #8
 8000e12:	4249      	negs	r1, r1
 8000e14:	430b      	orrs	r3, r1
 8000e16:	3301      	adds	r3, #1
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	1a5b      	subs	r3, r3, r1
 8000e20:	2101      	movs	r1, #1
 8000e22:	4099      	lsls	r1, r3
 8000e24:	000b      	movs	r3, r1
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e01a      	b.n	8000e6e <draw_pixel+0x216>
    } else {
        *black_pBuf |= (1 << (7 - y % 8));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b25a      	sxtb	r2, r3
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2100      	movs	r1, #0
 8000e42:	5e5b      	ldrsh	r3, [r3, r1]
 8000e44:	491d      	ldr	r1, [pc, #116]	; (8000ebc <draw_pixel+0x264>)
 8000e46:	400b      	ands	r3, r1
 8000e48:	d504      	bpl.n	8000e54 <draw_pixel+0x1fc>
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	4249      	negs	r1, r1
 8000e50:	430b      	orrs	r3, r1
 8000e52:	3301      	adds	r3, #1
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	0019      	movs	r1, r3
 8000e58:	2307      	movs	r3, #7
 8000e5a:	1a5b      	subs	r3, r3, r1
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4099      	lsls	r1, r3
 8000e60:	000b      	movs	r3, r1
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	701a      	strb	r2, [r3, #0]
    }

    if (use_sram) {
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <draw_pixel+0x250>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00c      	beq.n	8000e90 <draw_pixel+0x238>
#ifdef EPD_USE_COLOR
        sram_write8(color_buffer_addr + addr, *color_pBuf, MCPSRAM_WRITE);
#endif
        sram_write8(black_buffer_addr + addr, *black_pBuf, MCPSRAM_WRITE);
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <draw_pixel+0x254>)
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	230e      	movs	r3, #14
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	18d3      	adds	r3, r2, r3
 8000e82:	b298      	uxth	r0, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	f001 fa2d 	bl	80022ea <sram_write8>
    }
}
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b007      	add	sp, #28
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	2000011c 	.word	0x2000011c
 8000e9c:	2000011a 	.word	0x2000011a
 8000ea0:	08005534 	.word	0x08005534
 8000ea4:	20000100 	.word	0x20000100
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000102 	.word	0x20000102
 8000eb0:	20000110 	.word	0x20000110
 8000eb4:	20000114 	.word	0x20000114
 8000eb8:	200000ab 	.word	0x200000ab
 8000ebc:	80000007 	.word	0x80000007

08000ec0 <set_rotation>:

/*!
 * @brief Sets the rotation for the display.
 * @param x   0 thru 3 corresponding to 4 cardinal rotations.
 */
void set_rotation(uint8_t x) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	701a      	strb	r2, [r3, #0]
    rotation = (x & 3);
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <set_rotation+0x5c>)
 8000ed8:	701a      	strb	r2, [r3, #0]
    switch (rotation) {
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <set_rotation+0x5c>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d010      	beq.n	8000f04 <set_rotation+0x44>
 8000ee2:	dc17      	bgt.n	8000f14 <set_rotation+0x54>
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d005      	beq.n	8000ef4 <set_rotation+0x34>
 8000ee8:	dc14      	bgt.n	8000f14 <set_rotation+0x54>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <set_rotation+0x34>
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d008      	beq.n	8000f04 <set_rotation+0x44>
        case 3:
            width = EPD_HEIGHT;
            height = EPD_WIDTH;
            break;
    }
}
 8000ef2:	e00f      	b.n	8000f14 <set_rotation+0x54>
            width = EPD_WIDTH;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <set_rotation+0x60>)
 8000ef6:	2284      	movs	r2, #132	; 0x84
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	801a      	strh	r2, [r3, #0]
            height = EPD_HEIGHT;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <set_rotation+0x64>)
 8000efe:	22b0      	movs	r2, #176	; 0xb0
 8000f00:	801a      	strh	r2, [r3, #0]
            break;
 8000f02:	e007      	b.n	8000f14 <set_rotation+0x54>
            width = EPD_HEIGHT;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <set_rotation+0x60>)
 8000f06:	22b0      	movs	r2, #176	; 0xb0
 8000f08:	801a      	strh	r2, [r3, #0]
            height = EPD_WIDTH;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <set_rotation+0x64>)
 8000f0c:	2284      	movs	r2, #132	; 0x84
 8000f0e:	0052      	lsls	r2, r2, #1
 8000f10:	801a      	strh	r2, [r3, #0]
            break;
 8000f12:	46c0      	nop			; (mov r8, r8)
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000100 	.word	0x20000100
 8000f20:	2000011c 	.word	0x2000011c
 8000f24:	2000011a 	.word	0x2000011a

08000f28 <set_text_size>:
/*!
 * @brief       Sets the scaling factors for the x and y axis of text.
 * @param   x   The desired scaling factor for the x-axis of a character.
 * @param   y   The desired scaling factor for the y-axis of a character.
 */
void set_text_size(uint8_t x, uint8_t y) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	0002      	movs	r2, r0
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	1dbb      	adds	r3, r7, #6
 8000f36:	1c0a      	adds	r2, r1, #0
 8000f38:	701a      	strb	r2, [r3, #0]
    textsize_x = (x > 0) ? x : 1;
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <set_text_size+0x20>
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	e000      	b.n	8000f4a <set_text_size+0x22>
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <set_text_size+0x44>)
 8000f4c:	701a      	strb	r2, [r3, #0]
    textsize_y = (y > 0) ? y : 1;
 8000f4e:	1dbb      	adds	r3, r7, #6
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <set_text_size+0x34>
 8000f56:	1dbb      	adds	r3, r7, #6
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	e000      	b.n	8000f5e <set_text_size+0x36>
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <set_text_size+0x48>)
 8000f60:	701a      	strb	r2, [r3, #0]
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	20000001 	.word	0x20000001
 8000f70:	20000002 	.word	0x20000002

08000f74 <set_text_scale>:

/*!
 * @brief      Sets the scaling factors for the x and y axis to be the same value.
 * @param   s  The desired scaling factor for the x and y axis of a character.
 */
void set_text_scale(uint8_t s) { set_text_size(s, s); }
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff ffcc 	bl	8000f28 <set_text_size>
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <set_cursor>:
/*!
 * @brief       Sets the cursor to a new location on the display.
 * @param   x   The x coordinate of the new location
 * @param   y   The y coordinate of the new location
 */
void set_cursor(uint16_t x, uint16_t y) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	1dbb      	adds	r3, r7, #6
 8000fa2:	801a      	strh	r2, [r3, #0]
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	1c0a      	adds	r2, r1, #0
 8000fa8:	801a      	strh	r2, [r3, #0]
    cursor_x = x;
 8000faa:	1dbb      	adds	r3, r7, #6
 8000fac:	2200      	movs	r2, #0
 8000fae:	5e9a      	ldrsh	r2, [r3, r2]
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <set_cursor+0x30>)
 8000fb2:	801a      	strh	r2, [r3, #0]
    cursor_y = y;
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	5e9a      	ldrsh	r2, [r3, r2]
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <set_cursor+0x34>)
 8000fbc:	801a      	strh	r2, [r3, #0]
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	200000b4 	.word	0x200000b4
 8000fcc:	200000b6 	.word	0x200000b6

08000fd0 <set_x_margin>:

/*!
 * @brief       Sets a horizontal offset from the left of the display for all lines of text.
 * @param   m   The number of pixels to offset by
 */
void set_x_margin(uint8_t m) { margin_x = m; }
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	1dfb      	adds	r3, r7, #7
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <set_x_margin+0x1c>)
 8000fde:	1dfa      	adds	r2, r7, #7
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000b8 	.word	0x200000b8

08000ff0 <set_y_margin>:

/*!
 * @brief       Sets a vertical offset from the top of the display for all text.
 * @param   m   The number of pixels to offset by
 */
void set_y_margin(uint8_t m) { margin_y = m; }
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <set_y_margin+0x1c>)
 8000ffe:	1dfa      	adds	r2, r7, #7
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000b9 	.word	0x200000b9

08001010 <write_line>:
    @param    y0  Start point y coordinate
    @param    x1  End point x coordinate
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
void write_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	0005      	movs	r5, r0
 8001018:	000c      	movs	r4, r1
 800101a:	0010      	movs	r0, r2
 800101c:	0019      	movs	r1, r3
 800101e:	1dbb      	adds	r3, r7, #6
 8001020:	1c2a      	adds	r2, r5, #0
 8001022:	801a      	strh	r2, [r3, #0]
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	1c22      	adds	r2, r4, #0
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	1cbb      	adds	r3, r7, #2
 800102c:	1c02      	adds	r2, r0, #0
 800102e:	801a      	strh	r2, [r3, #0]
 8001030:	003b      	movs	r3, r7
 8001032:	1c0a      	adds	r2, r1, #0
 8001034:	801a      	strh	r2, [r3, #0]
    int16_t steep = _abs(y1 - y0) > _abs(x1 - x0);
 8001036:	003b      	movs	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	5e9a      	ldrsh	r2, [r3, r2]
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2100      	movs	r1, #0
 8001040:	5e5b      	ldrsh	r3, [r3, r1]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	17d9      	asrs	r1, r3, #31
 8001046:	185a      	adds	r2, r3, r1
 8001048:	404a      	eors	r2, r1
 800104a:	1cbb      	adds	r3, r7, #2
 800104c:	2100      	movs	r1, #0
 800104e:	5e59      	ldrsh	r1, [r3, r1]
 8001050:	1dbb      	adds	r3, r7, #6
 8001052:	2000      	movs	r0, #0
 8001054:	5e1b      	ldrsh	r3, [r3, r0]
 8001056:	1acb      	subs	r3, r1, r3
 8001058:	17d9      	asrs	r1, r3, #31
 800105a:	185b      	adds	r3, r3, r1
 800105c:	404b      	eors	r3, r1
 800105e:	2101      	movs	r1, #1
 8001060:	429a      	cmp	r2, r3
 8001062:	dc01      	bgt.n	8001068 <write_line+0x58>
 8001064:	2300      	movs	r3, #0
 8001066:	1c19      	adds	r1, r3, #0
 8001068:	b2ca      	uxtb	r2, r1
 800106a:	211a      	movs	r1, #26
 800106c:	187b      	adds	r3, r7, r1
 800106e:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2200      	movs	r2, #0
 8001074:	5e9b      	ldrsh	r3, [r3, r2]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d019      	beq.n	80010ae <write_line+0x9e>
        _swap_int16_t(x0, y0);
 800107a:	2118      	movs	r1, #24
 800107c:	187b      	adds	r3, r7, r1
 800107e:	1dba      	adds	r2, r7, #6
 8001080:	8812      	ldrh	r2, [r2, #0]
 8001082:	801a      	strh	r2, [r3, #0]
 8001084:	1dbb      	adds	r3, r7, #6
 8001086:	1d3a      	adds	r2, r7, #4
 8001088:	8812      	ldrh	r2, [r2, #0]
 800108a:	801a      	strh	r2, [r3, #0]
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	187a      	adds	r2, r7, r1
 8001090:	8812      	ldrh	r2, [r2, #0]
 8001092:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8001094:	2116      	movs	r1, #22
 8001096:	187b      	adds	r3, r7, r1
 8001098:	1cba      	adds	r2, r7, #2
 800109a:	8812      	ldrh	r2, [r2, #0]
 800109c:	801a      	strh	r2, [r3, #0]
 800109e:	1cbb      	adds	r3, r7, #2
 80010a0:	003a      	movs	r2, r7
 80010a2:	8812      	ldrh	r2, [r2, #0]
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	003b      	movs	r3, r7
 80010a8:	187a      	adds	r2, r7, r1
 80010aa:	8812      	ldrh	r2, [r2, #0]
 80010ac:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 80010ae:	1dba      	adds	r2, r7, #6
 80010b0:	1cbb      	adds	r3, r7, #2
 80010b2:	2100      	movs	r1, #0
 80010b4:	5e52      	ldrsh	r2, [r2, r1]
 80010b6:	2100      	movs	r1, #0
 80010b8:	5e5b      	ldrsh	r3, [r3, r1]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dd19      	ble.n	80010f2 <write_line+0xe2>
        _swap_int16_t(x0, x1);
 80010be:	2114      	movs	r1, #20
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	1dba      	adds	r2, r7, #6
 80010c4:	8812      	ldrh	r2, [r2, #0]
 80010c6:	801a      	strh	r2, [r3, #0]
 80010c8:	1dbb      	adds	r3, r7, #6
 80010ca:	1cba      	adds	r2, r7, #2
 80010cc:	8812      	ldrh	r2, [r2, #0]
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	1cbb      	adds	r3, r7, #2
 80010d2:	187a      	adds	r2, r7, r1
 80010d4:	8812      	ldrh	r2, [r2, #0]
 80010d6:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 80010d8:	2112      	movs	r1, #18
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	1d3a      	adds	r2, r7, #4
 80010de:	8812      	ldrh	r2, [r2, #0]
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	003a      	movs	r2, r7
 80010e6:	8812      	ldrh	r2, [r2, #0]
 80010e8:	801a      	strh	r2, [r3, #0]
 80010ea:	003b      	movs	r3, r7
 80010ec:	187a      	adds	r2, r7, r1
 80010ee:	8812      	ldrh	r2, [r2, #0]
 80010f0:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80010f2:	1cbb      	adds	r3, r7, #2
 80010f4:	881a      	ldrh	r2, [r3, #0]
 80010f6:	1dbb      	adds	r3, r7, #6
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	2110      	movs	r1, #16
 8001100:	187b      	adds	r3, r7, r1
 8001102:	801a      	strh	r2, [r3, #0]
    dy = _abs(y1 - y0);
 8001104:	003b      	movs	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	5e9a      	ldrsh	r2, [r3, r2]
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2000      	movs	r0, #0
 800110e:	5e1b      	ldrsh	r3, [r3, r0]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	17d8      	asrs	r0, r3, #31
 8001114:	181a      	adds	r2, r3, r0
 8001116:	4042      	eors	r2, r0
 8001118:	230e      	movs	r3, #14
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 800111e:	231e      	movs	r3, #30
 8001120:	18fa      	adds	r2, r7, r3
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2100      	movs	r1, #0
 8001126:	5e5b      	ldrsh	r3, [r3, r1]
 8001128:	2b00      	cmp	r3, #0
 800112a:	da00      	bge.n	800112e <write_line+0x11e>
 800112c:	3301      	adds	r3, #1
 800112e:	105b      	asrs	r3, r3, #1
 8001130:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8001132:	1d3a      	adds	r2, r7, #4
 8001134:	003b      	movs	r3, r7
 8001136:	2100      	movs	r1, #0
 8001138:	5e52      	ldrsh	r2, [r2, r1]
 800113a:	2100      	movs	r1, #0
 800113c:	5e5b      	ldrsh	r3, [r3, r1]
 800113e:	429a      	cmp	r2, r3
 8001140:	da04      	bge.n	800114c <write_line+0x13c>
        ystep = 1;
 8001142:	231c      	movs	r3, #28
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	2201      	movs	r2, #1
 8001148:	801a      	strh	r2, [r3, #0]
 800114a:	e04d      	b.n	80011e8 <write_line+0x1d8>
    } else {
        ystep = -1;
 800114c:	231c      	movs	r3, #28
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2201      	movs	r2, #1
 8001152:	4252      	negs	r2, r2
 8001154:	801a      	strh	r2, [r3, #0]
    }

    for (; x0 <= x1; x0++) {
 8001156:	e047      	b.n	80011e8 <write_line+0x1d8>
        if (steep) {
 8001158:	231a      	movs	r3, #26
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2200      	movs	r2, #0
 800115e:	5e9b      	ldrsh	r3, [r3, r2]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00c      	beq.n	800117e <write_line+0x16e>
            draw_pixel(y0, x0, color);
 8001164:	2330      	movs	r3, #48	; 0x30
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	881a      	ldrh	r2, [r3, #0]
 800116a:	1dbb      	adds	r3, r7, #6
 800116c:	2100      	movs	r1, #0
 800116e:	5e59      	ldrsh	r1, [r3, r1]
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2000      	movs	r0, #0
 8001174:	5e1b      	ldrsh	r3, [r3, r0]
 8001176:	0018      	movs	r0, r3
 8001178:	f7ff fd6e 	bl	8000c58 <draw_pixel>
 800117c:	e00b      	b.n	8001196 <write_line+0x186>
        } else {
            draw_pixel(x0, y0, color);
 800117e:	2330      	movs	r3, #48	; 0x30
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	881a      	ldrh	r2, [r3, #0]
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2100      	movs	r1, #0
 8001188:	5e59      	ldrsh	r1, [r3, r1]
 800118a:	1dbb      	adds	r3, r7, #6
 800118c:	2000      	movs	r0, #0
 800118e:	5e1b      	ldrsh	r3, [r3, r0]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff fd61 	bl	8000c58 <draw_pixel>
        }
        err -= dy;
 8001196:	211e      	movs	r1, #30
 8001198:	187b      	adds	r3, r7, r1
 800119a:	881a      	ldrh	r2, [r3, #0]
 800119c:	230e      	movs	r3, #14
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2200      	movs	r2, #0
 80011ae:	5e9b      	ldrsh	r3, [r3, r2]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da11      	bge.n	80011d8 <write_line+0x1c8>
            y0 += ystep;
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	881a      	ldrh	r2, [r3, #0]
 80011b8:	231c      	movs	r3, #28
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	18d3      	adds	r3, r2, r3
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	801a      	strh	r2, [r3, #0]
            err += dx;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	881a      	ldrh	r2, [r3, #0]
 80011ca:	2310      	movs	r3, #16
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	18d3      	adds	r3, r2, r3
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	801a      	strh	r2, [r3, #0]
    for (; x0 <= x1; x0++) {
 80011d8:	1dbb      	adds	r3, r7, #6
 80011da:	2200      	movs	r2, #0
 80011dc:	5e9b      	ldrsh	r3, [r3, r2]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	3301      	adds	r3, #1
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	1dbb      	adds	r3, r7, #6
 80011e6:	801a      	strh	r2, [r3, #0]
 80011e8:	1dba      	adds	r2, r7, #6
 80011ea:	1cbb      	adds	r3, r7, #2
 80011ec:	2100      	movs	r1, #0
 80011ee:	5e52      	ldrsh	r2, [r2, r1]
 80011f0:	2100      	movs	r1, #0
 80011f2:	5e5b      	ldrsh	r3, [r3, r1]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	ddaf      	ble.n	8001158 <write_line+0x148>
        }
    }
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b008      	add	sp, #32
 8001200:	bdb0      	pop	{r4, r5, r7, pc}

08001202 <write_fast_vLine>:
 * @param x     The top-most x coordinate
 * @param y     The top-most y coordinate
 * @param h     The height in pixels
 * @param color The 16-bit 5-6-5 color to use
 */
void write_fast_vLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001202:	b5b0      	push	{r4, r5, r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af02      	add	r7, sp, #8
 8001208:	0005      	movs	r5, r0
 800120a:	000c      	movs	r4, r1
 800120c:	0010      	movs	r0, r2
 800120e:	0019      	movs	r1, r3
 8001210:	1dbb      	adds	r3, r7, #6
 8001212:	1c2a      	adds	r2, r5, #0
 8001214:	801a      	strh	r2, [r3, #0]
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	1c22      	adds	r2, r4, #0
 800121a:	801a      	strh	r2, [r3, #0]
 800121c:	1cbb      	adds	r3, r7, #2
 800121e:	1c02      	adds	r2, r0, #0
 8001220:	801a      	strh	r2, [r3, #0]
 8001222:	003b      	movs	r3, r7
 8001224:	1c0a      	adds	r2, r1, #0
 8001226:	801a      	strh	r2, [r3, #0]
    write_line(x, y, x, y + h - 1, color);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	881a      	ldrh	r2, [r3, #0]
 800122c:	1cbb      	adds	r3, r7, #2
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	b29b      	uxth	r3, r3
 8001234:	3b01      	subs	r3, #1
 8001236:	b29b      	uxth	r3, r3
 8001238:	b21c      	sxth	r4, r3
 800123a:	1dbb      	adds	r3, r7, #6
 800123c:	2200      	movs	r2, #0
 800123e:	5e9a      	ldrsh	r2, [r3, r2]
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2100      	movs	r1, #0
 8001244:	5e59      	ldrsh	r1, [r3, r1]
 8001246:	1dbb      	adds	r3, r7, #6
 8001248:	2000      	movs	r0, #0
 800124a:	5e18      	ldrsh	r0, [r3, r0]
 800124c:	003b      	movs	r3, r7
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	0023      	movs	r3, r4
 8001254:	f7ff fedc 	bl	8001010 <write_line>
//    fill_rect(x, y, 1, h, color);
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bdb0      	pop	{r4, r5, r7, pc}

08001260 <fill_rect>:
 * @param y     The top-left corner y coordinate
 * @param w     The width in pixels
 * @param h     The height in pixels
 * @param color The 16-bit 5-6-5 color to use
 */
void fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	0005      	movs	r5, r0
 8001268:	000c      	movs	r4, r1
 800126a:	0010      	movs	r0, r2
 800126c:	0019      	movs	r1, r3
 800126e:	1dbb      	adds	r3, r7, #6
 8001270:	1c2a      	adds	r2, r5, #0
 8001272:	801a      	strh	r2, [r3, #0]
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	1c22      	adds	r2, r4, #0
 8001278:	801a      	strh	r2, [r3, #0]
 800127a:	1cbb      	adds	r3, r7, #2
 800127c:	1c02      	adds	r2, r0, #0
 800127e:	801a      	strh	r2, [r3, #0]
 8001280:	003b      	movs	r3, r7
 8001282:	1c0a      	adds	r2, r1, #0
 8001284:	801a      	strh	r2, [r3, #0]
    for (int16_t i = x; i < (x + w); i++) {
 8001286:	230e      	movs	r3, #14
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	1dba      	adds	r2, r7, #6
 800128c:	8812      	ldrh	r2, [r2, #0]
 800128e:	801a      	strh	r2, [r3, #0]
 8001290:	e018      	b.n	80012c4 <fill_rect+0x64>
        write_fast_vLine(i, y, h, color);
 8001292:	2320      	movs	r3, #32
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	881c      	ldrh	r4, [r3, #0]
 8001298:	003b      	movs	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	5e9a      	ldrsh	r2, [r3, r2]
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2100      	movs	r1, #0
 80012a2:	5e59      	ldrsh	r1, [r3, r1]
 80012a4:	250e      	movs	r5, #14
 80012a6:	197b      	adds	r3, r7, r5
 80012a8:	2000      	movs	r0, #0
 80012aa:	5e18      	ldrsh	r0, [r3, r0]
 80012ac:	0023      	movs	r3, r4
 80012ae:	f7ff ffa8 	bl	8001202 <write_fast_vLine>
    for (int16_t i = x; i < (x + w); i++) {
 80012b2:	0029      	movs	r1, r5
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2200      	movs	r2, #0
 80012b8:	5e9b      	ldrsh	r3, [r3, r2]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	801a      	strh	r2, [r3, #0]
 80012c4:	230e      	movs	r3, #14
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	2200      	movs	r2, #0
 80012ca:	5e9a      	ldrsh	r2, [r3, r2]
 80012cc:	1dbb      	adds	r3, r7, #6
 80012ce:	2100      	movs	r1, #0
 80012d0:	5e59      	ldrsh	r1, [r3, r1]
 80012d2:	1cbb      	adds	r3, r7, #2
 80012d4:	2000      	movs	r0, #0
 80012d6:	5e1b      	ldrsh	r3, [r3, r0]
 80012d8:	18cb      	adds	r3, r1, r3
 80012da:	429a      	cmp	r2, r3
 80012dc:	dbd9      	blt.n	8001292 <fill_rect+0x32>
    }
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b004      	add	sp, #16
 80012e6:	bdb0      	pop	{r4, r5, r7, pc}

080012e8 <draw_char>:
 * @param color     The color of the char
 * @param bg        The background color of the char
 * @param size_x    The width of the char
 * @param size_y    The height of the char
 */
void draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	0005      	movs	r5, r0
 80012f0:	000c      	movs	r4, r1
 80012f2:	0010      	movs	r0, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	1dbb      	adds	r3, r7, #6
 80012f8:	1c2a      	adds	r2, r5, #0
 80012fa:	801a      	strh	r2, [r3, #0]
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	1c22      	adds	r2, r4, #0
 8001300:	801a      	strh	r2, [r3, #0]
 8001302:	1cfb      	adds	r3, r7, #3
 8001304:	1c02      	adds	r2, r0, #0
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	003b      	movs	r3, r7
 800130a:	1c0a      	adds	r2, r1, #0
 800130c:	801a      	strh	r2, [r3, #0]
    // TODO: add handling for non-classic fonts (if possible)
    if ((x >= width) ||                 // Clip right
 800130e:	1dbb      	adds	r3, r7, #6
 8001310:	2200      	movs	r2, #0
 8001312:	5e9b      	ldrsh	r3, [r3, r2]
 8001314:	4aac      	ldr	r2, [pc, #688]	; (80015c8 <draw_char+0x2e0>)
 8001316:	8812      	ldrh	r2, [r2, #0]
 8001318:	4293      	cmp	r3, r2
 800131a:	da1d      	bge.n	8001358 <draw_char+0x70>
        (y >= height) ||                // Clip bottom
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	5e9b      	ldrsh	r3, [r3, r2]
 8001322:	4aaa      	ldr	r2, [pc, #680]	; (80015cc <draw_char+0x2e4>)
 8001324:	8812      	ldrh	r2, [r2, #0]
    if ((x >= width) ||                 // Clip right
 8001326:	4293      	cmp	r3, r2
 8001328:	da16      	bge.n	8001358 <draw_char+0x70>
        ((x + 6 * size_x - 1) < 0) ||   // Clip left
 800132a:	1dbb      	adds	r3, r7, #6
 800132c:	2100      	movs	r1, #0
 800132e:	5e59      	ldrsh	r1, [r3, r1]
 8001330:	2324      	movs	r3, #36	; 0x24
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	0013      	movs	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	189b      	adds	r3, r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	18cb      	adds	r3, r1, r3
        (y >= height) ||                // Clip bottom
 8001340:	2b00      	cmp	r3, #0
 8001342:	dd09      	ble.n	8001358 <draw_char+0x70>
        ((y + 8 * size_y - 1) < 0)) {   // Clip top
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	5e9a      	ldrsh	r2, [r3, r2]
 800134a:	2328      	movs	r3, #40	; 0x28
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	18d3      	adds	r3, r2, r3
        ((x + 6 * size_x - 1) < 0) ||   // Clip left
 8001354:	2b00      	cmp	r3, #0
 8001356:	dc04      	bgt.n	8001362 <draw_char+0x7a>
        serial_println("CLIPPING TEXT");
 8001358:	4b9d      	ldr	r3, [pc, #628]	; (80015d0 <draw_char+0x2e8>)
 800135a:	0018      	movs	r0, r3
 800135c:	f000 fd44 	bl	8001de8 <serial_println>
        return;
 8001360:	e12e      	b.n	80015c0 <draw_char+0x2d8>
    // There was an inline patch from Adafruit for an older version of glcdfont.c that was missing a character
    // This version of drawChar relies on the newer version of glcdfont.c, so the fix isn't implemented here
    // The fix in question goes something like this:
    // if (old_glcdfont && (c >= 176)) c++;

    for (int8_t i = 0; i < 5; i++) {
 8001362:	230f      	movs	r3, #15
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	e0e1      	b.n	8001530 <draw_char+0x248>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 800136c:	1cfb      	adds	r3, r7, #3
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	0013      	movs	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	189a      	adds	r2, r3, r2
 8001376:	230f      	movs	r3, #15
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	18d2      	adds	r2, r2, r3
 8001380:	230e      	movs	r3, #14
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	4993      	ldr	r1, [pc, #588]	; (80015d4 <draw_char+0x2ec>)
 8001386:	5c8a      	ldrb	r2, [r1, r2]
 8001388:	701a      	strb	r2, [r3, #0]

        for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800138a:	230d      	movs	r3, #13
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e0bd      	b.n	8001510 <draw_char+0x228>
            if (line & 1) {
 8001394:	230e      	movs	r3, #14
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2201      	movs	r2, #1
 800139c:	4013      	ands	r3, r2
 800139e:	d050      	beq.n	8001442 <draw_char+0x15a>
                if (size_x == 1 && size_y == 1) {
 80013a0:	2324      	movs	r3, #36	; 0x24
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d11e      	bne.n	80013e8 <draw_char+0x100>
 80013aa:	2328      	movs	r3, #40	; 0x28
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d119      	bne.n	80013e8 <draw_char+0x100>
                    draw_pixel(x + i, y + j, color);
 80013b4:	230f      	movs	r3, #15
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	b29a      	uxth	r2, r3
 80013be:	1dbb      	adds	r3, r7, #6
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	18d3      	adds	r3, r2, r3
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b218      	sxth	r0, r3
 80013c8:	230d      	movs	r3, #13
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	18d3      	adds	r3, r2, r3
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b219      	sxth	r1, r3
 80013dc:	003b      	movs	r3, r7
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	001a      	movs	r2, r3
 80013e2:	f7ff fc39 	bl	8000c58 <draw_pixel>
 80013e6:	e084      	b.n	80014f2 <draw_char+0x20a>
                } else {
                    fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2424      	movs	r4, #36	; 0x24
 80013f4:	193a      	adds	r2, r7, r4
 80013f6:	7812      	ldrb	r2, [r2, #0]
 80013f8:	b292      	uxth	r2, r2
 80013fa:	4353      	muls	r3, r2
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	1dbb      	adds	r3, r7, #6
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	18d3      	adds	r3, r2, r3
 8001404:	b29b      	uxth	r3, r3
 8001406:	b218      	sxth	r0, r3
 8001408:	230d      	movs	r3, #13
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	b29b      	uxth	r3, r3
 8001412:	2528      	movs	r5, #40	; 0x28
 8001414:	197a      	adds	r2, r7, r5
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	b292      	uxth	r2, r2
 800141a:	4353      	muls	r3, r2
 800141c:	b29a      	uxth	r2, r3
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	18d3      	adds	r3, r2, r3
 8001424:	b29b      	uxth	r3, r3
 8001426:	b219      	sxth	r1, r3
 8001428:	193b      	adds	r3, r7, r4
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b21a      	sxth	r2, r3
 800142e:	197b      	adds	r3, r7, r5
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b21c      	sxth	r4, r3
 8001434:	003b      	movs	r3, r7
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	0023      	movs	r3, r4
 800143c:	f7ff ff10 	bl	8001260 <fill_rect>
 8001440:	e057      	b.n	80014f2 <draw_char+0x20a>
                }
            } else if (bg != color) {
 8001442:	2420      	movs	r4, #32
 8001444:	193b      	adds	r3, r7, r4
 8001446:	0039      	movs	r1, r7
 8001448:	881a      	ldrh	r2, [r3, #0]
 800144a:	880b      	ldrh	r3, [r1, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d050      	beq.n	80014f2 <draw_char+0x20a>
                if (size_x == 1 && size_y == 1) {
 8001450:	2324      	movs	r3, #36	; 0x24
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d11e      	bne.n	8001498 <draw_char+0x1b0>
 800145a:	2328      	movs	r3, #40	; 0x28
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d119      	bne.n	8001498 <draw_char+0x1b0>
                    draw_pixel(x + i, y + j, bg);
 8001464:	230f      	movs	r3, #15
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	b29a      	uxth	r2, r3
 800146e:	1dbb      	adds	r3, r7, #6
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	18d3      	adds	r3, r2, r3
 8001474:	b29b      	uxth	r3, r3
 8001476:	b218      	sxth	r0, r3
 8001478:	230d      	movs	r3, #13
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b25b      	sxtb	r3, r3
 8001480:	b29a      	uxth	r2, r3
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	18d3      	adds	r3, r2, r3
 8001488:	b29b      	uxth	r3, r3
 800148a:	b219      	sxth	r1, r3
 800148c:	193b      	adds	r3, r7, r4
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	001a      	movs	r2, r3
 8001492:	f7ff fbe1 	bl	8000c58 <draw_pixel>
 8001496:	e02c      	b.n	80014f2 <draw_char+0x20a>
                } else {
                    fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8001498:	230f      	movs	r3, #15
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2424      	movs	r4, #36	; 0x24
 80014a4:	193a      	adds	r2, r7, r4
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	b292      	uxth	r2, r2
 80014aa:	4353      	muls	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	1dbb      	adds	r3, r7, #6
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	18d3      	adds	r3, r2, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b218      	sxth	r0, r3
 80014b8:	230d      	movs	r3, #13
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2528      	movs	r5, #40	; 0x28
 80014c4:	197a      	adds	r2, r7, r5
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	b292      	uxth	r2, r2
 80014ca:	4353      	muls	r3, r2
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	18d3      	adds	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b219      	sxth	r1, r3
 80014d8:	193b      	adds	r3, r7, r4
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b21a      	sxth	r2, r3
 80014de:	197b      	adds	r3, r7, r5
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b21c      	sxth	r4, r3
 80014e4:	2320      	movs	r3, #32
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	0023      	movs	r3, r4
 80014ee:	f7ff feb7 	bl	8001260 <fill_rect>
        for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80014f2:	210d      	movs	r1, #13
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	187b      	adds	r3, r7, r1
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	220e      	movs	r2, #14
 8001506:	18bb      	adds	r3, r7, r2
 8001508:	18ba      	adds	r2, r7, r2
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	0852      	lsrs	r2, r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	230d      	movs	r3, #13
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b25b      	sxtb	r3, r3
 8001518:	2b07      	cmp	r3, #7
 800151a:	dc00      	bgt.n	800151e <draw_char+0x236>
 800151c:	e73a      	b.n	8001394 <draw_char+0xac>
    for (int8_t i = 0; i < 5; i++) {
 800151e:	210f      	movs	r1, #15
 8001520:	187b      	adds	r3, r7, r1
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b25b      	sxtb	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	3301      	adds	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	187b      	adds	r3, r7, r1
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	230f      	movs	r3, #15
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	2b04      	cmp	r3, #4
 800153a:	dc00      	bgt.n	800153e <draw_char+0x256>
 800153c:	e716      	b.n	800136c <draw_char+0x84>
                }
            }
        } // End inner for loop
    } // End outer for loop

    if (bg != color) {
 800153e:	2420      	movs	r4, #32
 8001540:	193b      	adds	r3, r7, r4
 8001542:	0039      	movs	r1, r7
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	880b      	ldrh	r3, [r1, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d039      	beq.n	80015c0 <draw_char+0x2d8>
        if (size_x == 1 && size_y == 1) {
 800154c:	2324      	movs	r3, #36	; 0x24
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d113      	bne.n	800157e <draw_char+0x296>
 8001556:	2328      	movs	r3, #40	; 0x28
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d10e      	bne.n	800157e <draw_char+0x296>
            write_fast_vLine(x + 5, y, 8, bg);
 8001560:	1dbb      	adds	r3, r7, #6
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	3305      	adds	r3, #5
 8001566:	b29b      	uxth	r3, r3
 8001568:	b218      	sxth	r0, r3
 800156a:	193b      	adds	r3, r7, r4
 800156c:	881a      	ldrh	r2, [r3, #0]
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2100      	movs	r1, #0
 8001572:	5e59      	ldrsh	r1, [r3, r1]
 8001574:	0013      	movs	r3, r2
 8001576:	2208      	movs	r2, #8
 8001578:	f7ff fe43 	bl	8001202 <write_fast_vLine>
 800157c:	e020      	b.n	80015c0 <draw_char+0x2d8>
        } else {
            fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800157e:	2124      	movs	r1, #36	; 0x24
 8001580:	187b      	adds	r3, r7, r1
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b29b      	uxth	r3, r3
 8001586:	1c1a      	adds	r2, r3, #0
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	18d3      	adds	r3, r2, r3
 800158c:	b29a      	uxth	r2, r3
 800158e:	1dbb      	adds	r3, r7, #6
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	18d3      	adds	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	b218      	sxth	r0, r3
 8001598:	187b      	adds	r3, r7, r1
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b21a      	sxth	r2, r3
 800159e:	2328      	movs	r3, #40	; 0x28
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b21c      	sxth	r4, r3
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2100      	movs	r1, #0
 80015b0:	5e59      	ldrsh	r1, [r3, r1]
 80015b2:	2320      	movs	r3, #32
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	0023      	movs	r3, r4
 80015bc:	f7ff fe50 	bl	8001260 <fill_rect>
        }
    }
}
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b004      	add	sp, #16
 80015c4:	bdb0      	pop	{r4, r5, r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	2000011c 	.word	0x2000011c
 80015cc:	2000011a 	.word	0x2000011a
 80015d0:	08005550 	.word	0x08005550
 80015d4:	080057e0 	.word	0x080057e0

080015d8 <write>:

/*!
 * @brief This function draws a character to the display at the current location of the cursor.
 * @param c
 */
void write(uint8_t c) {
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b087      	sub	sp, #28
 80015dc:	af04      	add	r7, sp, #16
 80015de:	0002      	movs	r2, r0
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	701a      	strb	r2, [r3, #0]
    // TODO: add handling for non-classic fonts (if possible)

    if (c == '\n') {                // Newline?
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b0a      	cmp	r3, #10
 80015ea:	d113      	bne.n	8001614 <write+0x3c>
        cursor_x = margin_x;        // Reset x to the margin
 80015ec:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <write+0x114>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <write+0x118>)
 80015f4:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize_y * 8; // Advance y by one line
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <write+0x11c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <write+0x120>)
 8001602:	2100      	movs	r1, #0
 8001604:	5e5b      	ldrsh	r3, [r3, r1]
 8001606:	b29b      	uxth	r3, r3
 8001608:	18d3      	adds	r3, r2, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	b21a      	sxth	r2, r3
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <write+0x120>)
 8001610:	801a      	strh	r2, [r3, #0]
        }

        draw_char(cursor_x, cursor_y, c, text_color, text_bg_color, textsize_x, textsize_y);
        cursor_x += textsize_x * 6; // Advance x by one character
    }
}
 8001612:	e066      	b.n	80016e2 <write+0x10a>
    } else if (c != '\r') {         // Ignore carriage returns
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b0d      	cmp	r3, #13
 800161a:	d062      	beq.n	80016e2 <write+0x10a>
        if (wrap && ((cursor_x + textsize_x * 6) > width)) {    // Off right?
 800161c:	4b37      	ldr	r3, [pc, #220]	; (80016fc <write+0x124>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d022      	beq.n	800166a <write+0x92>
 8001624:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <write+0x118>)
 8001626:	2200      	movs	r2, #0
 8001628:	5e9b      	ldrsh	r3, [r3, r2]
 800162a:	0019      	movs	r1, r3
 800162c:	4b34      	ldr	r3, [pc, #208]	; (8001700 <write+0x128>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	001a      	movs	r2, r3
 8001632:	0013      	movs	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	189b      	adds	r3, r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	18cb      	adds	r3, r1, r3
 800163c:	4a31      	ldr	r2, [pc, #196]	; (8001704 <write+0x12c>)
 800163e:	8812      	ldrh	r2, [r2, #0]
 8001640:	4293      	cmp	r3, r2
 8001642:	dd12      	ble.n	800166a <write+0x92>
            cursor_x = margin_x;        // Reset x to the margin
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <write+0x114>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b21a      	sxth	r2, r3
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <write+0x118>)
 800164c:	801a      	strh	r2, [r3, #0]
            cursor_y += textsize_y * 8; // Advance y one line
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <write+0x11c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <write+0x120>)
 800165a:	2100      	movs	r1, #0
 800165c:	5e5b      	ldrsh	r3, [r3, r1]
 800165e:	b29b      	uxth	r3, r3
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	b29b      	uxth	r3, r3
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <write+0x120>)
 8001668:	801a      	strh	r2, [r3, #0]
        if ((cursor_y + textsize_y * 8) > height) { // Off bottom?
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <write+0x120>)
 800166c:	2200      	movs	r2, #0
 800166e:	5e9b      	ldrsh	r3, [r3, r2]
 8001670:	001a      	movs	r2, r3
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <write+0x11c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	18d3      	adds	r3, r2, r3
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <write+0x130>)
 800167c:	8812      	ldrh	r2, [r2, #0]
 800167e:	4293      	cmp	r3, r2
 8001680:	dd04      	ble.n	800168c <write+0xb4>
            cursor_y = margin_y;                    // Reset y to the margin
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <write+0x134>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <write+0x120>)
 800168a:	801a      	strh	r2, [r3, #0]
        draw_char(cursor_x, cursor_y, c, text_color, text_bg_color, textsize_x, textsize_y);
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <write+0x118>)
 800168e:	2400      	movs	r4, #0
 8001690:	5f1c      	ldrsh	r4, [r3, r4]
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <write+0x120>)
 8001694:	2500      	movs	r5, #0
 8001696:	5f5d      	ldrsh	r5, [r3, r5]
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <write+0x138>)
 800169a:	881e      	ldrh	r6, [r3, #0]
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <write+0x13c>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	4a17      	ldr	r2, [pc, #92]	; (8001700 <write+0x128>)
 80016a2:	7812      	ldrb	r2, [r2, #0]
 80016a4:	4913      	ldr	r1, [pc, #76]	; (80016f4 <write+0x11c>)
 80016a6:	7809      	ldrb	r1, [r1, #0]
 80016a8:	1df8      	adds	r0, r7, #7
 80016aa:	7800      	ldrb	r0, [r0, #0]
 80016ac:	9102      	str	r1, [sp, #8]
 80016ae:	9201      	str	r2, [sp, #4]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	0033      	movs	r3, r6
 80016b4:	0002      	movs	r2, r0
 80016b6:	0029      	movs	r1, r5
 80016b8:	0020      	movs	r0, r4
 80016ba:	f7ff fe15 	bl	80012e8 <draw_char>
        cursor_x += textsize_x * 6; // Advance x by one character
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <write+0x128>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	1c1a      	adds	r2, r3, #0
 80016c6:	1c13      	adds	r3, r2, #0
 80016c8:	18db      	adds	r3, r3, r3
 80016ca:	189b      	adds	r3, r3, r2
 80016cc:	18db      	adds	r3, r3, r3
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <write+0x118>)
 80016d2:	2100      	movs	r1, #0
 80016d4:	5e5b      	ldrsh	r3, [r3, r1]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	18d3      	adds	r3, r2, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <write+0x118>)
 80016e0:	801a      	strh	r2, [r3, #0]
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b003      	add	sp, #12
 80016e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	200000b8 	.word	0x200000b8
 80016f0:	200000b4 	.word	0x200000b4
 80016f4:	20000002 	.word	0x20000002
 80016f8:	200000b6 	.word	0x200000b6
 80016fc:	200000bc 	.word	0x200000bc
 8001700:	20000001 	.word	0x20000001
 8001704:	2000011c 	.word	0x2000011c
 8001708:	2000011a 	.word	0x2000011a
 800170c:	200000b9 	.word	0x200000b9
 8001710:	20000004 	.word	0x20000004
 8001714:	200000ba 	.word	0x200000ba

08001718 <printWrite>:

/*!
 * @brief Print a *char string to the display
 * @param str   The string to print
 */
void printWrite (const char *str) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8001720:	e006      	b.n	8001730 <printWrite+0x18>
		write(*str++);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff ff54 	bl	80015d8 <write>
	while (*str) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f4      	bne.n	8001722 <printWrite+0xa>
	}
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}

08001742 <printString>:

/*!
 * @brief Print a char[] string to the display
 * @param str   The string to primt
 */
void printString(const char str[]) {
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	printWrite(str);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff ffe3 	bl	8001718 <printWrite>
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b08b      	sub	sp, #44	; 0x2c
 8001760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	2414      	movs	r4, #20
 8001764:	193b      	adds	r3, r7, r4
 8001766:	0018      	movs	r0, r3
 8001768:	2314      	movs	r3, #20
 800176a:	001a      	movs	r2, r3
 800176c:	2100      	movs	r1, #0
 800176e:	f003 fde9 	bl	8005344 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	4b49      	ldr	r3, [pc, #292]	; (8001898 <MX_GPIO_Init+0x13c>)
 8001774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001776:	4b48      	ldr	r3, [pc, #288]	; (8001898 <MX_GPIO_Init+0x13c>)
 8001778:	2104      	movs	r1, #4
 800177a:	430a      	orrs	r2, r1
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
 800177e:	4b46      	ldr	r3, [pc, #280]	; (8001898 <MX_GPIO_Init+0x13c>)
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	2204      	movs	r2, #4
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178a:	4b43      	ldr	r3, [pc, #268]	; (8001898 <MX_GPIO_Init+0x13c>)
 800178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178e:	4b42      	ldr	r3, [pc, #264]	; (8001898 <MX_GPIO_Init+0x13c>)
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	430a      	orrs	r2, r1
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
 8001796:	4b40      	ldr	r3, [pc, #256]	; (8001898 <MX_GPIO_Init+0x13c>)
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <MX_GPIO_Init+0x13c>)
 80017a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a6:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <MX_GPIO_Init+0x13c>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	430a      	orrs	r2, r1
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ae:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <MX_GPIO_Init+0x13c>)
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	2201      	movs	r2, #1
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <MX_GPIO_Init+0x13c>)
 80017bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017be:	4b36      	ldr	r3, [pc, #216]	; (8001898 <MX_GPIO_Init+0x13c>)
 80017c0:	2102      	movs	r1, #2
 80017c2:	430a      	orrs	r2, r1
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <MX_GPIO_Init+0x13c>)
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <MX_GPIO_Init+0x140>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	0018      	movs	r0, r3
 80017da:	f001 f9c7 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_SET);
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	0099      	lsls	r1, r3, #2
 80017e2:	23a0      	movs	r3, #160	; 0xa0
 80017e4:	05db      	lsls	r3, r3, #23
 80017e6:	2201      	movs	r2, #1
 80017e8:	0018      	movs	r0, r3
 80017ea:	f001 f9bf 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EPD_CS_Pin, GPIO_PIN_SET);
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <MX_GPIO_Init+0x144>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	2150      	movs	r1, #80	; 0x50
 80017f4:	0018      	movs	r0, r3
 80017f6:	f001 f9b9 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017fa:	193b      	adds	r3, r7, r4
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	0192      	lsls	r2, r2, #6
 8001800:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001802:	193b      	adds	r3, r7, r4
 8001804:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <MX_GPIO_Init+0x148>)
 8001806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	193b      	adds	r3, r7, r4
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800180e:	193b      	adds	r3, r7, r4
 8001810:	4a22      	ldr	r2, [pc, #136]	; (800189c <MX_GPIO_Init+0x140>)
 8001812:	0019      	movs	r1, r3
 8001814:	0010      	movs	r0, r2
 8001816:	f001 f833 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_DC_Pin;
 800181a:	193b      	adds	r3, r7, r4
 800181c:	2280      	movs	r2, #128	; 0x80
 800181e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	193b      	adds	r3, r7, r4
 8001822:	2201      	movs	r2, #1
 8001824:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	193b      	adds	r3, r7, r4
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	193b      	adds	r3, r7, r4
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_DC_GPIO_Port, &GPIO_InitStruct);
 8001832:	193b      	adds	r3, r7, r4
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <MX_GPIO_Init+0x140>)
 8001836:	0019      	movs	r1, r3
 8001838:	0010      	movs	r0, r2
 800183a:	f001 f821 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SRAM_CS_Pin;
 800183e:	0021      	movs	r1, r4
 8001840:	187b      	adds	r3, r7, r1
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	000c      	movs	r4, r1
 800184a:	193b      	adds	r3, r7, r4
 800184c:	2201      	movs	r2, #1
 800184e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	193b      	adds	r3, r7, r4
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2201      	movs	r2, #1
 800185a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SRAM_CS_GPIO_Port, &GPIO_InitStruct);
 800185c:	193a      	adds	r2, r7, r4
 800185e:	23a0      	movs	r3, #160	; 0xa0
 8001860:	05db      	lsls	r3, r3, #23
 8001862:	0011      	movs	r1, r2
 8001864:	0018      	movs	r0, r3
 8001866:	f001 f80b 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|EPD_CS_Pin;
 800186a:	0021      	movs	r1, r4
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2250      	movs	r2, #80	; 0x50
 8001870:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2201      	movs	r2, #1
 8001876:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	187b      	adds	r3, r7, r1
 8001886:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <MX_GPIO_Init+0x144>)
 8001888:	0019      	movs	r1, r3
 800188a:	0010      	movs	r0, r2
 800188c:	f000 fff8 	bl	8002880 <HAL_GPIO_Init>

}
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b00b      	add	sp, #44	; 0x2c
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	50000800 	.word	0x50000800
 80018a0:	50000400 	.word	0x50000400
 80018a4:	10210000 	.word	0x10210000

080018a8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MX_I2C2_Init+0x74>)
 80018ae:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <MX_I2C2_Init+0x78>)
 80018b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MX_I2C2_Init+0x74>)
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <MX_I2C2_Init+0x7c>)
 80018b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_I2C2_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_I2C2_Init+0x74>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_I2C2_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_I2C2_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_I2C2_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_I2C2_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_I2C2_Init+0x74>)
 80018de:	2200      	movs	r2, #0
 80018e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_I2C2_Init+0x74>)
 80018e4:	0018      	movs	r0, r3
 80018e6:	f001 f95f 	bl	8002ba8 <HAL_I2C_Init>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d001      	beq.n	80018f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018ee:	f000 fa01 	bl	8001cf4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <MX_I2C2_Init+0x74>)
 80018f4:	2100      	movs	r1, #0
 80018f6:	0018      	movs	r0, r3
 80018f8:	f001 f9ec 	bl	8002cd4 <HAL_I2CEx_ConfigAnalogFilter>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d001      	beq.n	8001904 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001900:	f000 f9f8 	bl	8001cf4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <MX_I2C2_Init+0x74>)
 8001906:	2100      	movs	r1, #0
 8001908:	0018      	movs	r0, r3
 800190a:	f001 fa2f 	bl	8002d6c <HAL_I2CEx_ConfigDigitalFilter>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d001      	beq.n	8001916 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001912:	f000 f9ef 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000120 	.word	0x20000120
 8001920:	40005800 	.word	0x40005800
 8001924:	00707cbb 	.word	0x00707cbb

08001928 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	240c      	movs	r4, #12
 8001932:	193b      	adds	r3, r7, r4
 8001934:	0018      	movs	r0, r3
 8001936:	2314      	movs	r3, #20
 8001938:	001a      	movs	r2, r3
 800193a:	2100      	movs	r1, #0
 800193c:	f003 fd02 	bl	8005344 <memset>
  if(i2cHandle->Instance==I2C2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <HAL_I2C_MspInit+0x80>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d129      	bne.n	800199e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_I2C_MspInit+0x84>)
 800194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_I2C_MspInit+0x84>)
 8001950:	2102      	movs	r1, #2
 8001952:	430a      	orrs	r2, r1
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_I2C_MspInit+0x84>)
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001962:	193b      	adds	r3, r7, r4
 8001964:	22c0      	movs	r2, #192	; 0xc0
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196a:	0021      	movs	r1, r4
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2212      	movs	r2, #18
 8001970:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2201      	movs	r2, #1
 8001976:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2203      	movs	r2, #3
 800197c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2206      	movs	r2, #6
 8001982:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	187b      	adds	r3, r7, r1
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <HAL_I2C_MspInit+0x88>)
 8001988:	0019      	movs	r1, r3
 800198a:	0010      	movs	r0, r2
 800198c:	f000 ff78 	bl	8002880 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_I2C_MspInit+0x84>)
 8001992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_I2C_MspInit+0x84>)
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	03c9      	lsls	r1, r1, #15
 800199a:	430a      	orrs	r2, r1
 800199c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b009      	add	sp, #36	; 0x24
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40005800 	.word	0x40005800
 80019ac:	40021000 	.word	0x40021000
 80019b0:	50000400 	.word	0x50000400

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ba:	f000 fe19 	bl	80025f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019be:	f000 f927 	bl	8001c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c2:	f7ff fecb 	bl	800175c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019c6:	f000 fd75 	bl	80024b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80019ca:	f000 fadf 	bl	8001f8c <MX_SPI1_Init>
  MX_I2C2_Init();
 80019ce:	f7ff ff6b 	bl	80018a8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

    serial_clear();
 80019d2:	f000 f9d9 	bl	8001d88 <serial_clear>
    serial_println("NOTE: Not all GFX and SRAM functions are tested here\n");
 80019d6:	4b74      	ldr	r3, [pc, #464]	; (8001ba8 <main+0x1f4>)
 80019d8:	0018      	movs	r0, r3
 80019da:	f000 fa05 	bl	8001de8 <serial_println>

    /***** SRAM TESTING CODE *****/

    serial_printf("Initializing display SRAM... ");
 80019de:	4b73      	ldr	r3, [pc, #460]	; (8001bac <main+0x1f8>)
 80019e0:	0018      	movs	r0, r3
 80019e2:	f000 fa3b 	bl	8001e5c <serial_printf>
    sram_init();
 80019e6:	f000 fb67 	bl	80020b8 <sram_init>
    serial_println("Done!");
 80019ea:	4b71      	ldr	r3, [pc, #452]	; (8001bb0 <main+0x1fc>)
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 f9fb 	bl	8001de8 <serial_println>

    uint8_t write_value = 0x42;
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	2242      	movs	r2, #66	; 0x42
 80019f6:	701a      	strb	r2, [r3, #0]
    serial_printf("Testing SRAM write... ");
 80019f8:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <main+0x200>)
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 fa2e 	bl	8001e5c <serial_printf>
    sram_erase(0x0008, 2, write_value);
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	001a      	movs	r2, r3
 8001a06:	2102      	movs	r1, #2
 8001a08:	2008      	movs	r0, #8
 8001a0a:	f000 fc8b 	bl	8002324 <sram_erase>
    serial_println("Done!");
 8001a0e:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <main+0x1fc>)
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 f9e9 	bl	8001de8 <serial_println>
    serial_printf("[0x0008] <== 0x%x\n", write_value);
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	4b67      	ldr	r3, [pc, #412]	; (8001bb8 <main+0x204>)
 8001a1c:	0011      	movs	r1, r2
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 fa1c 	bl	8001e5c <serial_printf>

    serial_printf("Testing SRAM read... ");
 8001a24:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <main+0x208>)
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 fa18 	bl	8001e5c <serial_printf>
    uint16_t read_val = sram_read8(0x0008, MCPSRAM_READ);
 8001a2c:	2103      	movs	r1, #3
 8001a2e:	2008      	movs	r0, #8
 8001a30:	f000 fc42 	bl	80022b8 <sram_read8>
 8001a34:	0003      	movs	r3, r0
 8001a36:	001a      	movs	r2, r3
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	801a      	strh	r2, [r3, #0]
    serial_println("Done!");
 8001a3c:	4b5c      	ldr	r3, [pc, #368]	; (8001bb0 <main+0x1fc>)
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f9d2 	bl	8001de8 <serial_println>
    serial_printf("[0x0008] ==> 0x%x\n\n", read_val);
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	881a      	ldrh	r2, [r3, #0]
 8001a48:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <main+0x20c>)
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 fa05 	bl	8001e5c <serial_printf>


    /***** DISPLAY TESTING CODE *****/
    /*** INITIALIZATION ***/
    serial_printf("Initializing display... ");
 8001a52:	4b5c      	ldr	r3, [pc, #368]	; (8001bc4 <main+0x210>)
 8001a54:	0018      	movs	r0, r3
 8001a56:	f000 fa01 	bl	8001e5c <serial_printf>
    epd_init(false);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7fe fef2 	bl	8000844 <epd_init>
    serial_println("Done!");
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <main+0x1fc>)
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 f9c0 	bl	8001de8 <serial_println>

    serial_printf("Setting display rotation... ");
 8001a68:	4b57      	ldr	r3, [pc, #348]	; (8001bc8 <main+0x214>)
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f000 f9f6 	bl	8001e5c <serial_printf>
    set_rotation(2);
 8001a70:	2002      	movs	r0, #2
 8001a72:	f7ff fa25 	bl	8000ec0 <set_rotation>
    serial_println("Done!");
 8001a76:	4b4e      	ldr	r3, [pc, #312]	; (8001bb0 <main+0x1fc>)
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 f9b5 	bl	8001de8 <serial_println>

    serial_printf("Clearing display buffers... ");
 8001a7e:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <main+0x218>)
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 f9eb 	bl	8001e5c <serial_printf>
    clear_buffer();
 8001a86:	f7fe ff55 	bl	8000934 <clear_buffer>
    epd_powerUp();
 8001a8a:	f7fe fe35 	bl	80006f8 <epd_powerUp>
    write_RAM_to_epd(buffer1, buffer1_size, 1, false);
 8001a8e:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <main+0x21c>)
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	4b50      	ldr	r3, [pc, #320]	; (8001bd4 <main+0x220>)
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	2300      	movs	r3, #0
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f7ff f849 	bl	8000b30 <write_RAM_to_epd>
    serial_println("Done!\n");
 8001a9e:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <main+0x224>)
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 f9a1 	bl	8001de8 <serial_println>
//    serial_printf("Manually writing buffer to the display (for color)... ");
//    epd_powerUp();
//    write_RAM_to_epd(buffer1, buffer1_size, 1, false);
//    serial_println("Done!");

    serial_printf("Clearing display buffers... ");
 8001aa6:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <main+0x218>)
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 f9d7 	bl	8001e5c <serial_printf>
    clear_buffer();
 8001aae:	f7fe ff41 	bl	8000934 <clear_buffer>
    serial_println("Done!\n");
 8001ab2:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <main+0x224>)
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 f997 	bl	8001de8 <serial_println>

    /*** TEXT ***/
    serial_printf("Setting text scaling... ");
 8001aba:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <main+0x228>)
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 f9cd 	bl	8001e5c <serial_printf>
    set_text_scale(2);
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f7ff fa56 	bl	8000f74 <set_text_scale>
    serial_println("Done!");
 8001ac8:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <main+0x1fc>)
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 f98c 	bl	8001de8 <serial_println>

    serial_printf("Setting x-margin... ");
 8001ad0:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <main+0x22c>)
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f000 f9c2 	bl	8001e5c <serial_printf>
    set_x_margin(2);
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7ff fa79 	bl	8000fd0 <set_x_margin>
    serial_println("Done!");
 8001ade:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <main+0x1fc>)
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f000 f981 	bl	8001de8 <serial_println>

    serial_printf("Setting cursor... ");
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <main+0x230>)
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f000 f9b7 	bl	8001e5c <serial_printf>
    set_cursor(2,2);
 8001aee:	2102      	movs	r1, #2
 8001af0:	2002      	movs	r0, #2
 8001af2:	f7ff fa51 	bl	8000f98 <set_cursor>
    serial_println("Done!");
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <main+0x1fc>)
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 f975 	bl	8001de8 <serial_println>
//
//	serial_printf("Writing buffer to the display... ");
//	display(false);
//    serial_println("Done!\n");

    serial_printf("Initial testing sequence done!\n\n");
 8001afe:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <main+0x234>)
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 f9ab 	bl	8001e5c <serial_printf>

    serial_printf("Clearing display buffers... ");
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <main+0x218>)
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 f9a7 	bl	8001e5c <serial_printf>
    clear_buffer();
 8001b0e:	f7fe ff11 	bl	8000934 <clear_buffer>
    epd_powerUp();
 8001b12:	f7fe fdf1 	bl	80006f8 <epd_powerUp>
    write_RAM_to_epd(buffer1, buffer1_size, 0, false);
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <main+0x21c>)
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <main+0x220>)
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2200      	movs	r2, #0
 8001b22:	f7ff f805 	bl	8000b30 <write_RAM_to_epd>
    write_RAM_to_epd(buffer1, buffer1_size, 1, false);
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <main+0x21c>)
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <main+0x220>)
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2201      	movs	r2, #1
 8001b32:	f7fe fffd 	bl	8000b30 <write_RAM_to_epd>
    serial_println("Done!\n");
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <main+0x224>)
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f000 f955 	bl	8001de8 <serial_println>

    serial_println("Printing random information to display\n");
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <main+0x238>)
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 f951 	bl	8001de8 <serial_println>
    set_text_scale(2);
 8001b46:	2002      	movs	r0, #2
 8001b48:	f7ff fa14 	bl	8000f74 <set_text_scale>
    set_x_margin(2);
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7ff fa3f 	bl	8000fd0 <set_x_margin>
	set_y_margin(2);
 8001b52:	2002      	movs	r0, #2
 8001b54:	f7ff fa4c 	bl	8000ff0 <set_y_margin>
	set_cursor(2,2);
 8001b58:	2102      	movs	r1, #2
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7ff fa1c 	bl	8000f98 <set_cursor>

	printString("4/10/2021, 12:00 PM\n");
 8001b60:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <main+0x23c>)
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7ff fded 	bl	8001742 <printString>
	printString("Battery: 90%\n");
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <main+0x240>)
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7ff fde9 	bl	8001742 <printString>
	printString("Temperature: 72 F\n");
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <main+0x244>)
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7ff fde5 	bl	8001742 <printString>
	printString("Rel. Humidity: 35%\n");
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <main+0x248>)
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f7ff fde1 	bl	8001742 <printString>
	printString("Methane: 115 ppm\n\n");
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <main+0x24c>)
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff fddd 	bl	8001742 <printString>
	printString("Food: Banana\n");
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <main+0x250>)
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f7ff fdd9 	bl	8001742 <printString>
	printString("Time Elapsed: 2 days\n");
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <main+0x254>)
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7ff fdd5 	bl	8001742 <printString>
	printString("Est. Days Left: 7 days\n");
 8001b98:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <main+0x258>)
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f7ff fdd1 	bl	8001742 <printString>

	display(false);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff f823 	bl	8000bec <display>
//    uint16_t temp;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8001ba6:	e7fe      	b.n	8001ba6 <main+0x1f2>
 8001ba8:	08005560 	.word	0x08005560
 8001bac:	08005598 	.word	0x08005598
 8001bb0:	080055b8 	.word	0x080055b8
 8001bb4:	080055c0 	.word	0x080055c0
 8001bb8:	080055d8 	.word	0x080055d8
 8001bbc:	080055ec 	.word	0x080055ec
 8001bc0:	08005604 	.word	0x08005604
 8001bc4:	08005618 	.word	0x08005618
 8001bc8:	08005634 	.word	0x08005634
 8001bcc:	08005654 	.word	0x08005654
 8001bd0:	2000010c 	.word	0x2000010c
 8001bd4:	20000108 	.word	0x20000108
 8001bd8:	08005674 	.word	0x08005674
 8001bdc:	0800567c 	.word	0x0800567c
 8001be0:	08005698 	.word	0x08005698
 8001be4:	080056b0 	.word	0x080056b0
 8001be8:	080056c4 	.word	0x080056c4
 8001bec:	080056e8 	.word	0x080056e8
 8001bf0:	08005710 	.word	0x08005710
 8001bf4:	08005728 	.word	0x08005728
 8001bf8:	08005738 	.word	0x08005738
 8001bfc:	0800574c 	.word	0x0800574c
 8001c00:	08005760 	.word	0x08005760
 8001c04:	08005774 	.word	0x08005774
 8001c08:	08005784 	.word	0x08005784
 8001c0c:	0800579c 	.word	0x0800579c

08001c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b09d      	sub	sp, #116	; 0x74
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	2438      	movs	r4, #56	; 0x38
 8001c18:	193b      	adds	r3, r7, r4
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	2338      	movs	r3, #56	; 0x38
 8001c1e:	001a      	movs	r2, r3
 8001c20:	2100      	movs	r1, #0
 8001c22:	f003 fb8f 	bl	8005344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c26:	2324      	movs	r3, #36	; 0x24
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	2314      	movs	r3, #20
 8001c2e:	001a      	movs	r2, r3
 8001c30:	2100      	movs	r1, #0
 8001c32:	f003 fb87 	bl	8005344 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c36:	003b      	movs	r3, r7
 8001c38:	0018      	movs	r0, r3
 8001c3a:	2324      	movs	r3, #36	; 0x24
 8001c3c:	001a      	movs	r2, r3
 8001c3e:	2100      	movs	r1, #0
 8001c40:	f003 fb80 	bl	8005344 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <SystemClock_Config+0xdc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <SystemClock_Config+0xe0>)
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <SystemClock_Config+0xdc>)
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0109      	lsls	r1, r1, #4
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c56:	0021      	movs	r1, r4
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2201      	movs	r2, #1
 8001c62:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	2210      	movs	r2, #16
 8001c68:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	2200      	movs	r2, #0
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	02d2      	lsls	r2, r2, #11
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	03d2      	lsls	r2, r2, #15
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f001 f8bb 	bl	8002e04 <HAL_RCC_OscConfig>
 8001c8e:	1e03      	subs	r3, r0, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001c92:	f000 f82f 	bl	8001cf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c96:	2124      	movs	r1, #36	; 0x24
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	2101      	movs	r1, #1
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f001 fc66 	bl	800358c <HAL_RCC_ClockConfig>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001cc4:	f000 f816 	bl	8001cf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cc8:	003b      	movs	r3, r7
 8001cca:	2202      	movs	r2, #2
 8001ccc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cce:	003b      	movs	r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	003b      	movs	r3, r7
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 fe7c 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ce0:	f000 f808 	bl	8001cf4 <Error_Handler>
  }
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b01d      	add	sp, #116	; 0x74
 8001cea:	bd90      	pop	{r4, r7, pc}
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	ffffe7ff 	.word	0xffffe7ff

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001cfc:	e7fe      	b.n	8001cfc <Error_Handler+0x8>
	...

08001d00 <convert>:

// Internal functions to serial_print
char *convert(unsigned int num, int base);
size_t strlen(const char *str);

char *convert(unsigned int num, int base) { 
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	static char Representation[]= "0123456789ABCDEF";
	static char buffer[50]; 
	char *ptr; 
	
	ptr = &buffer[49]; 
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <convert+0x50>)
 8001d0c:	60fb      	str	r3, [r7, #12]
	*ptr = '\0'; 
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
	
	do { 
		*--ptr = Representation[num%base]; 
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0011      	movs	r1, r2
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7fe fa7a 	bl	8000214 <__aeabi_uidivmod>
 8001d20:	000b      	movs	r3, r1
 8001d22:	001a      	movs	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <convert+0x54>)
 8001d2c:	5c9a      	ldrb	r2, [r3, r2]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	701a      	strb	r2, [r3, #0]
		num /= base; 
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	0019      	movs	r1, r3
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe f9e6 	bl	8000108 <__udivsi3>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	607b      	str	r3, [r7, #4]
	} while(num != 0); 
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1e6      	bne.n	8001d14 <convert+0x14>
	
	return(ptr); 
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b004      	add	sp, #16
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200000f1 	.word	0x200000f1
 8001d54:	20000008 	.word	0x20000008

08001d58 <strlen>:

/*!
    @brief https://stackoverflow.com/questions/22520413/c-strlen-implementation-in-one-line-of-code
*/
size_t strlen (const char *str) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    return (*str) ? strlen(++str) + 1 : 0;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <strlen+0x24>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff fff1 	bl	8001d58 <strlen>
 8001d76:	0003      	movs	r3, r0
 8001d78:	3301      	adds	r3, #1
 8001d7a:	e000      	b.n	8001d7e <strlen+0x26>
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <serial_clear>:
// End of internal functions for serial_print

void serial_clear() {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  char clear_sequence[] = {0x1b, 0x5B, 0x32, 0x4A, 0x1b, 0x5B, 0x48};
 8001d8e:	003b      	movs	r3, r7
 8001d90:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <serial_clear+0x2c>)
 8001d92:	6811      	ldr	r1, [r2, #0]
 8001d94:	6019      	str	r1, [r3, #0]
 8001d96:	8891      	ldrh	r1, [r2, #4]
 8001d98:	8099      	strh	r1, [r3, #4]
 8001d9a:	7992      	ldrb	r2, [r2, #6]
 8001d9c:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&SERAL_UART, (unsigned char*) clear_sequence, sizeof clear_sequence, HAL_MAX_DELAY);
 8001d9e:	2301      	movs	r3, #1
 8001da0:	425b      	negs	r3, r3
 8001da2:	0039      	movs	r1, r7
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <serial_clear+0x30>)
 8001da6:	2207      	movs	r2, #7
 8001da8:	f002 fdd6 	bl	8004958 <HAL_UART_Transmit>
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	080057b4 	.word	0x080057b4
 8001db8:	200001c4 	.word	0x200001c4

08001dbc <serial_print>:

void serial_print(char string[]) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&SERAL_UART, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff ffc6 	bl	8001d58 <strlen>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <serial_print+0x28>)
 8001dd8:	f002 fdbe 	bl	8004958 <HAL_UART_Transmit>
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b002      	add	sp, #8
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200001c4 	.word	0x200001c4

08001de8 <serial_println>:

void serial_println(char *string) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&SERAL_UART, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff ffb0 	bl	8001d58 <strlen>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	425b      	negs	r3, r3
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	480a      	ldr	r0, [pc, #40]	; (8001e2c <serial_println+0x44>)
 8001e04:	f002 fda8 	bl	8004958 <HAL_UART_Transmit>
  char newline[] = "\r\f";
 8001e08:	200c      	movs	r0, #12
 8001e0a:	183b      	adds	r3, r7, r0
 8001e0c:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <serial_println+0x48>)
 8001e0e:	8811      	ldrh	r1, [r2, #0]
 8001e10:	8019      	strh	r1, [r3, #0]
 8001e12:	7892      	ldrb	r2, [r2, #2]
 8001e14:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&SERAL_UART, (unsigned char*) newline, 2, HAL_MAX_DELAY);
 8001e16:	2301      	movs	r3, #1
 8001e18:	425b      	negs	r3, r3
 8001e1a:	1839      	adds	r1, r7, r0
 8001e1c:	4803      	ldr	r0, [pc, #12]	; (8001e2c <serial_println+0x44>)
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f002 fd9a 	bl	8004958 <HAL_UART_Transmit>
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200001c4 	.word	0x200001c4
 8001e30:	080057bc 	.word	0x080057bc

08001e34 <serial_putc>:

void serial_putc(char c) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&SERAL_UART, (unsigned char*) &c, 1, HAL_MAX_DELAY);
 8001e40:	2301      	movs	r3, #1
 8001e42:	425b      	negs	r3, r3
 8001e44:	1df9      	adds	r1, r7, #7
 8001e46:	4804      	ldr	r0, [pc, #16]	; (8001e58 <serial_putc+0x24>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f002 fd85 	bl	8004958 <HAL_UART_Transmit>
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b002      	add	sp, #8
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	200001c4 	.word	0x200001c4

08001e5c <serial_printf>:

/*!
    @brief a version of printf implmented from http://www.firmcodes.com/write-printf-function-c/
*/
void serial_printf(char format[], ...) { 
 8001e5c:	b40f      	push	{r0, r1, r2, r3}
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
    char c;
	char *s; 
	
	//Module 1: Initializing Myprintf's arguments 
	va_list arg; 
	va_start(arg, format); 
 8001e64:	2324      	movs	r3, #36	; 0x24
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	603b      	str	r3, [r7, #0]
	
	for(traverse = format; *traverse != '\0'; traverse++) { 
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e079      	b.n	8001f64 <serial_printf+0x108>
		while( (*traverse != '%') && (*traverse != '\0')) {
            if (*traverse == '\n') {
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b0a      	cmp	r3, #10
 8001e76:	d104      	bne.n	8001e82 <serial_printf+0x26>
            	serial_print("\r\f");
 8001e78:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <serial_printf+0x124>)
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f7ff ff9e 	bl	8001dbc <serial_print>
 8001e80:	e004      	b.n	8001e8c <serial_printf+0x30>
            }
            else {
            	serial_putc(*traverse);
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff ffd4 	bl	8001e34 <serial_putc>
            }
			traverse++; 
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
		while( (*traverse != '%') && (*traverse != '\0')) {
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b25      	cmp	r3, #37	; 0x25
 8001e98:	d003      	beq.n	8001ea2 <serial_printf+0x46>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1e6      	bne.n	8001e70 <serial_printf+0x14>
		} 

		if (*traverse == '\0') break;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d061      	beq.n	8001f6e <serial_printf+0x112>
		traverse++; 
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
		
		//Module 2: Fetching and executing arguments
		switch(*traverse) { 
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	3b63      	subs	r3, #99	; 0x63
 8001eb6:	2b15      	cmp	r3, #21
 8001eb8:	d851      	bhi.n	8001f5e <serial_printf+0x102>
 8001eba:	009a      	lsls	r2, r3, #2
 8001ebc:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <serial_printf+0x128>)
 8001ebe:	18d3      	adds	r3, r2, r3
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	469f      	mov	pc, r3
			case 'c' : 
                c = va_arg(arg,int);		//Fetch char argument
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	1d1a      	adds	r2, r3, #4
 8001ec8:	603a      	str	r2, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	1dfb      	adds	r3, r7, #7
 8001ece:	701a      	strb	r2, [r3, #0]
				serial_putc(c);
 8001ed0:	1dfb      	adds	r3, r7, #7
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff ffad 	bl	8001e34 <serial_putc>
				break; 	
 8001eda:	e040      	b.n	8001f5e <serial_printf+0x102>
			case 'd' : 
                signed_i = va_arg(arg,int); 		//Fetch Decimal/Integer argument
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	1d1a      	adds	r2, r3, #4
 8001ee0:	603a      	str	r2, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	613b      	str	r3, [r7, #16]
				if (signed_i < 0) {
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da06      	bge.n	8001efa <serial_printf+0x9e>
                    signed_i = -signed_i;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	425b      	negs	r3, r3
 8001ef0:	613b      	str	r3, [r7, #16]
                    serial_print("-");
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <serial_printf+0x12c>)
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff ff61 	bl	8001dbc <serial_print>
                } 
                serial_print(convert(signed_i, 10));
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	210a      	movs	r1, #10
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7ff fefe 	bl	8001d00 <convert>
 8001f04:	0003      	movs	r3, r0
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff ff58 	bl	8001dbc <serial_print>
                break; 	
 8001f0c:	e027      	b.n	8001f5e <serial_printf+0x102>
			case 'o':
                i = va_arg(arg,unsigned int); //Fetch Octal representation
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	1d1a      	adds	r2, r3, #4
 8001f12:	603a      	str	r2, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 8));
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff feef 	bl	8001d00 <convert>
 8001f22:	0003      	movs	r3, r0
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff ff49 	bl	8001dbc <serial_print>
                break; 
 8001f2a:	e018      	b.n	8001f5e <serial_printf+0x102>
			case 's': 
                s = va_arg(arg,char *); 		//Fetch string
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	1d1a      	adds	r2, r3, #4
 8001f30:	603a      	str	r2, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60bb      	str	r3, [r7, #8]
                serial_print(s);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff ff3f 	bl	8001dbc <serial_print>
                break; 
 8001f3e:	e00e      	b.n	8001f5e <serial_printf+0x102>
			case 'x': 
                i = va_arg(arg,unsigned int); //Fetch Hexadecimal representation
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	1d1a      	adds	r2, r3, #4
 8001f44:	603a      	str	r2, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 16));
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7ff fed6 	bl	8001d00 <convert>
 8001f54:	0003      	movs	r3, r0
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7ff ff30 	bl	8001dbc <serial_print>
                break; 
 8001f5c:	46c0      	nop			; (mov r8, r8)
	for(traverse = format; *traverse != '\0'; traverse++) { 
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d192      	bne.n	8001e92 <serial_printf+0x36>
		}	
	} 

	//Module 3: Closing argument list to necessary clean-up
	va_end(arg); 
} 
 8001f6c:	e000      	b.n	8001f70 <serial_printf+0x114>
		if (*traverse == '\0') break;
 8001f6e:	46c0      	nop			; (mov r8, r8)
} 
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b006      	add	sp, #24
 8001f76:	bc80      	pop	{r7}
 8001f78:	bc08      	pop	{r3}
 8001f7a:	b004      	add	sp, #16
 8001f7c:	4718      	bx	r3
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	080057bc 	.word	0x080057bc
 8001f84:	08005ce0 	.word	0x08005ce0
 8001f88:	080057c0 	.word	0x080057c0

08001f8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001f92:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <MX_SPI1_Init+0x6c>)
 8001f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001f98:	2282      	movs	r2, #130	; 0x82
 8001f9a:	0052      	lsls	r2, r2, #1
 8001f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb0:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	0092      	lsls	r2, r2, #2
 8001fbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f001 fe5c 	bl	8003c9c <HAL_SPI_Init>
 8001fe4:	1e03      	subs	r3, r0, #0
 8001fe6:	d001      	beq.n	8001fec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fe8:	f7ff fe84 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	2000016c 	.word	0x2000016c
 8001ff8:	40013000 	.word	0x40013000

08001ffc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	240c      	movs	r4, #12
 8002006:	193b      	adds	r3, r7, r4
 8002008:	0018      	movs	r0, r3
 800200a:	2314      	movs	r3, #20
 800200c:	001a      	movs	r2, r3
 800200e:	2100      	movs	r1, #0
 8002010:	f003 f998 	bl	8005344 <memset>
  if(spiHandle->Instance==SPI1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_SPI_MspInit+0x80>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d129      	bne.n	8002072 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_SPI_MspInit+0x84>)
 8002020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_SPI_MspInit+0x84>)
 8002024:	2180      	movs	r1, #128	; 0x80
 8002026:	0149      	lsls	r1, r1, #5
 8002028:	430a      	orrs	r2, r1
 800202a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_SPI_MspInit+0x84>)
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_SPI_MspInit+0x84>)
 8002032:	2101      	movs	r1, #1
 8002034:	430a      	orrs	r2, r1
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_SPI_MspInit+0x84>)
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	2201      	movs	r2, #1
 800203e:	4013      	ands	r3, r2
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002044:	0021      	movs	r1, r4
 8002046:	187b      	adds	r3, r7, r1
 8002048:	22e0      	movs	r2, #224	; 0xe0
 800204a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	187b      	adds	r3, r7, r1
 800204e:	2202      	movs	r2, #2
 8002050:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	187b      	adds	r3, r7, r1
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002058:	187b      	adds	r3, r7, r1
 800205a:	2201      	movs	r2, #1
 800205c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800205e:	187b      	adds	r3, r7, r1
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	187a      	adds	r2, r7, r1
 8002066:	23a0      	movs	r3, #160	; 0xa0
 8002068:	05db      	lsls	r3, r3, #23
 800206a:	0011      	movs	r1, r2
 800206c:	0018      	movs	r0, r3
 800206e:	f000 fc07 	bl	8002880 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	b009      	add	sp, #36	; 0x24
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	40013000 	.word	0x40013000
 8002080:	40021000 	.word	0x40021000

08002084 <sram_csHigh>:

#define SRAM_SPI hspi1


// Function Code
void sram_csHigh() {
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_SET);
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	0099      	lsls	r1, r3, #2
 800208c:	23a0      	movs	r3, #160	; 0xa0
 800208e:	05db      	lsls	r3, r3, #23
 8002090:	2201      	movs	r2, #1
 8002092:	0018      	movs	r0, r3
 8002094:	f000 fd6a 	bl	8002b6c <HAL_GPIO_WritePin>
}
 8002098:	46c0      	nop			; (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <sram_csLow>:

void sram_csLow() {
 800209e:	b580      	push	{r7, lr}
 80020a0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_RESET);
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	0099      	lsls	r1, r3, #2
 80020a6:	23a0      	movs	r3, #160	; 0xa0
 80020a8:	05db      	lsls	r3, r3, #23
 80020aa:	2200      	movs	r2, #0
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 fd5d 	bl	8002b6c <HAL_GPIO_WritePin>
}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <sram_init>:

/*!
    @brief initializes the sram module
*/
void sram_init() {
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
    sram_csHigh();
 80020be:	f7ff ffe1 	bl	8002084 <sram_csHigh>
    HAL_Delay(100);
 80020c2:	2064      	movs	r0, #100	; 0x64
 80020c4:	f000 fb04 	bl	80026d0 <HAL_Delay>
    sram_csLow();
 80020c8:	f7ff ffe9 	bl	800209e <sram_csLow>
    uint8_t magic_value = 0xFF;
 80020cc:	1cbb      	adds	r3, r7, #2
 80020ce:	22ff      	movs	r2, #255	; 0xff
 80020d0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	e00c      	b.n	80020f2 <sram_init+0x3a>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &magic_value, 1, HAL_MAX_DELAY);
 80020d8:	1cfc      	adds	r4, r7, #3
 80020da:	2301      	movs	r3, #1
 80020dc:	425b      	negs	r3, r3
 80020de:	1cb9      	adds	r1, r7, #2
 80020e0:	4808      	ldr	r0, [pc, #32]	; (8002104 <sram_init+0x4c>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	f001 fe6e 	bl	8003dc4 <HAL_SPI_Transmit>
 80020e8:	0003      	movs	r3, r0
 80020ea:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 3; i++) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3301      	adds	r3, #1
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	ddef      	ble.n	80020d8 <sram_init+0x20>
//        if (status != HAL_OK) {
//            char error[] = "SRAM_INIT: FAILED INIT MAGIC\r\f";
//            serial_println(error);
//        }
    }
    sram_csHigh();
 80020f8:	f7ff ffc4 	bl	8002084 <sram_csHigh>
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b003      	add	sp, #12
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	2000016c 	.word	0x2000016c

08002108 <sram_write>:
    @param addr the addres to write to
    @param buf the data buffer to write
    @param num the nubmer of bytes to write (from the buffer)
    @param reg pass MCPSRAM_WRSR if you're writing the status register, MCPSRAM_WRITE if you are writing data. Use MCPSRAM_WRITE in Adafruit functions that don't specify reg (default value).
*/
void sram_write(uint16_t addr, uint8_t* buf, uint16_t num, uint8_t reg) {
 8002108:	b5b0      	push	{r4, r5, r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	0004      	movs	r4, r0
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	0010      	movs	r0, r2
 8002114:	0019      	movs	r1, r3
 8002116:	250e      	movs	r5, #14
 8002118:	197b      	adds	r3, r7, r5
 800211a:	1c22      	adds	r2, r4, #0
 800211c:	801a      	strh	r2, [r3, #0]
 800211e:	230c      	movs	r3, #12
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	1c02      	adds	r2, r0, #0
 8002124:	801a      	strh	r2, [r3, #0]
 8002126:	1dfb      	adds	r3, r7, #7
 8002128:	1c0a      	adds	r2, r1, #0
 800212a:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 800212c:	f7ff ffb7 	bl	800209e <sram_csLow>

    // write command and address
    uint8_t cmdbuf[3] = {
 8002130:	2118      	movs	r1, #24
 8002132:	187b      	adds	r3, r7, r1
 8002134:	1dfa      	adds	r2, r7, #7
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	701a      	strb	r2, [r3, #0]
        reg,
        (uint8_t) (addr >> 8),
 800213a:	197b      	adds	r3, r7, r5
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b29b      	uxth	r3, r3
 8002142:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8002144:	187b      	adds	r3, r7, r1
 8002146:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 8002148:	197b      	adds	r3, r7, r5
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 800214e:	187b      	adds	r3, r7, r1
 8002150:	709a      	strb	r2, [r3, #2]
    };
    
    for (int i = 0; i < 3; i++) {
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	e019      	b.n	800218c <sram_write+0x84>
        uint8_t d = cmdbuf[i];
 8002158:	2318      	movs	r3, #24
 800215a:	18fa      	adds	r2, r7, r3
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	18d3      	adds	r3, r2, r3
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	2117      	movs	r1, #23
 8002164:	187b      	adds	r3, r7, r1
 8002166:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8002168:	231f      	movs	r3, #31
 800216a:	18fc      	adds	r4, r7, r3
 800216c:	2301      	movs	r3, #1
 800216e:	425b      	negs	r3, r3
 8002170:	1879      	adds	r1, r7, r1
 8002172:	481c      	ldr	r0, [pc, #112]	; (80021e4 <sram_write+0xdc>)
 8002174:	2201      	movs	r2, #1
 8002176:	f001 fe25 	bl	8003dc4 <HAL_SPI_Transmit>
 800217a:	0003      	movs	r3, r0
 800217c:	7023      	strb	r3, [r4, #0]
//        if (status != HAL_OK) {
//            char error[] = "SRAM_WRITE: FAILED TO SEND CMD/ADDR\r\f";
//            serial_println(error);
//        }
        if (reg != MCPSRAM_WRITE) {
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d106      	bne.n	8002194 <sram_write+0x8c>
    for (int i = 0; i < 3; i++) {
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	3301      	adds	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	2b02      	cmp	r3, #2
 8002190:	dde2      	ble.n	8002158 <sram_write+0x50>
 8002192:	e000      	b.n	8002196 <sram_write+0x8e>
            break;
 8002194:	46c0      	nop			; (mov r8, r8)
        }
    }

    for (int i = 0; i < num; i++) {
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	e014      	b.n	80021c6 <sram_write+0xbe>
        uint8_t d = buf[i];
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	18d3      	adds	r3, r2, r3
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	2116      	movs	r1, #22
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 80021aa:	231e      	movs	r3, #30
 80021ac:	18fc      	adds	r4, r7, r3
 80021ae:	2301      	movs	r3, #1
 80021b0:	425b      	negs	r3, r3
 80021b2:	1879      	adds	r1, r7, r1
 80021b4:	480b      	ldr	r0, [pc, #44]	; (80021e4 <sram_write+0xdc>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	f001 fe04 	bl	8003dc4 <HAL_SPI_Transmit>
 80021bc:	0003      	movs	r3, r0
 80021be:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num; i++) {
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	3301      	adds	r3, #1
 80021c4:	623b      	str	r3, [r7, #32]
 80021c6:	230c      	movs	r3, #12
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	6a3a      	ldr	r2, [r7, #32]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dbe4      	blt.n	800219c <sram_write+0x94>
//            char error[] = "SRAM_WRITE: FAILED TO SEND\r\f";
//            serial_println(error);
//        }
    }

    sram_csHigh();
 80021d2:	f7ff ff57 	bl	8002084 <sram_csHigh>
    HAL_Delay(100);
 80021d6:	2064      	movs	r0, #100	; 0x64
 80021d8:	f000 fa7a 	bl	80026d0 <HAL_Delay>
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b00a      	add	sp, #40	; 0x28
 80021e2:	bdb0      	pop	{r4, r5, r7, pc}
 80021e4:	2000016c 	.word	0x2000016c

080021e8 <sram_read>:
    @param addr the address to read from
    @param buf the data buffer to read into
    @param num the number of bytes to read
    @param reg pass MCPSRAM_RDSR if you're reading the status register, MCPSRAM_READ if you are reading data. Use MCPSRAM_READ in Adafruit functions that don't specify reg (default value).
*/
void sram_read(uint16_t addr, uint8_t *buf, uint16_t num, uint8_t reg) {
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	0004      	movs	r4, r0
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	0010      	movs	r0, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	250e      	movs	r5, #14
 80021f8:	197b      	adds	r3, r7, r5
 80021fa:	1c22      	adds	r2, r4, #0
 80021fc:	801a      	strh	r2, [r3, #0]
 80021fe:	230c      	movs	r3, #12
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	1c02      	adds	r2, r0, #0
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	1dfb      	adds	r3, r7, #7
 8002208:	1c0a      	adds	r2, r1, #0
 800220a:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 800220c:	f7ff ff47 	bl	800209e <sram_csLow>

    // read command and address
    uint8_t cmdbuf[3] = {
 8002210:	2118      	movs	r1, #24
 8002212:	187b      	adds	r3, r7, r1
 8002214:	1dfa      	adds	r2, r7, #7
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
        reg,
        (uint8_t) (addr >> 8),
 800221a:	197b      	adds	r3, r7, r5
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	b29b      	uxth	r3, r3
 8002222:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8002224:	187b      	adds	r3, r7, r1
 8002226:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 8002228:	197b      	adds	r3, r7, r5
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 800222e:	187b      	adds	r3, r7, r1
 8002230:	709a      	strb	r2, [r3, #2]
    };

    for (int i = 0; i < 3; i++) {
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	e019      	b.n	800226c <sram_read+0x84>
        uint8_t d = cmdbuf[i];
 8002238:	2318      	movs	r3, #24
 800223a:	18fa      	adds	r2, r7, r3
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	18d3      	adds	r3, r2, r3
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	2117      	movs	r1, #23
 8002244:	187b      	adds	r3, r7, r1
 8002246:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8002248:	231f      	movs	r3, #31
 800224a:	18fc      	adds	r4, r7, r3
 800224c:	2301      	movs	r3, #1
 800224e:	425b      	negs	r3, r3
 8002250:	1879      	adds	r1, r7, r1
 8002252:	4818      	ldr	r0, [pc, #96]	; (80022b4 <sram_read+0xcc>)
 8002254:	2201      	movs	r2, #1
 8002256:	f001 fdb5 	bl	8003dc4 <HAL_SPI_Transmit>
 800225a:	0003      	movs	r3, r0
 800225c:	7023      	strb	r3, [r4, #0]
//        if (status != HAL_OK) {
//            char error[] = "SRAM_READ: FAILED TO SEND";
//            serial_println(error);
//        }
        if (reg != MCPSRAM_READ) {
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d106      	bne.n	8002274 <sram_read+0x8c>
    for (int i = 0; i < 3; i++) {
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	3301      	adds	r3, #1
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	2b02      	cmp	r3, #2
 8002270:	dde2      	ble.n	8002238 <sram_read+0x50>
 8002272:	e000      	b.n	8002276 <sram_read+0x8e>
            break;
 8002274:	46c0      	nop			; (mov r8, r8)
        }
    }

    for (int i = 0; i < num; i++) {
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
 800227a:	e00f      	b.n	800229c <sram_read+0xb4>
        HAL_StatusTypeDef status = HAL_SPI_Receive(&SRAM_SPI, buf++, 1, HAL_MAX_DELAY);
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	1c4b      	adds	r3, r1, #1
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	231e      	movs	r3, #30
 8002284:	18fc      	adds	r4, r7, r3
 8002286:	2301      	movs	r3, #1
 8002288:	425b      	negs	r3, r3
 800228a:	480a      	ldr	r0, [pc, #40]	; (80022b4 <sram_read+0xcc>)
 800228c:	2201      	movs	r2, #1
 800228e:	f001 feef 	bl	8004070 <HAL_SPI_Receive>
 8002292:	0003      	movs	r3, r0
 8002294:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num; i++) {
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	3301      	adds	r3, #1
 800229a:	623b      	str	r3, [r7, #32]
 800229c:	230c      	movs	r3, #12
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	6a3a      	ldr	r2, [r7, #32]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	dbe9      	blt.n	800227c <sram_read+0x94>
//                    serial_println(msg);
//                    break;
//            }
//        }
    }
    sram_csHigh();
 80022a8:	f7ff feec 	bl	8002084 <sram_csHigh>
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b00a      	add	sp, #40	; 0x28
 80022b2:	bdb0      	pop	{r4, r5, r7, pc}
 80022b4:	2000016c 	.word	0x2000016c

080022b8 <sram_read8>:
/*! @brief read 1 byte of data at the specified address
    @param addr the address to read data at
    @param reg pass MCPSRAM_RDSR if you're reading the status register, MCPSRAM_READ if you are reading data. Use MCPSRAM_READ in Adafruit functions that don't specify reg (default value).
    @returns the read data byte
*/
uint8_t sram_read8(uint16_t addr, uint8_t reg) {
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	0002      	movs	r2, r0
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	801a      	strh	r2, [r3, #0]
 80022c4:	1d7b      	adds	r3, r7, #5
 80022c6:	1c0a      	adds	r2, r1, #0
 80022c8:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    sram_read(addr, &c, 1, reg);
 80022ca:	1d7b      	adds	r3, r7, #5
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	240f      	movs	r4, #15
 80022d0:	1939      	adds	r1, r7, r4
 80022d2:	1dbb      	adds	r3, r7, #6
 80022d4:	8818      	ldrh	r0, [r3, #0]
 80022d6:	0013      	movs	r3, r2
 80022d8:	2201      	movs	r2, #1
 80022da:	f7ff ff85 	bl	80021e8 <sram_read>
    return c;
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	781b      	ldrb	r3, [r3, #0]
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b005      	add	sp, #20
 80022e8:	bd90      	pop	{r4, r7, pc}

080022ea <sram_write8>:
/*!
    @param addr the address to write to
    @param val the value to write
    @param reg MCPSRAM_WRITE if writing data, MCPSRAM_WRSR if writing a status register. Use MCPSRAM_WRITE in Adafruit functions that don't specify reg (default value).
*/
void sram_write8(uint16_t addr, uint8_t val, uint8_t reg) {
 80022ea:	b590      	push	{r4, r7, lr}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	0004      	movs	r4, r0
 80022f2:	0008      	movs	r0, r1
 80022f4:	0011      	movs	r1, r2
 80022f6:	1dbb      	adds	r3, r7, #6
 80022f8:	1c22      	adds	r2, r4, #0
 80022fa:	801a      	strh	r2, [r3, #0]
 80022fc:	1d7b      	adds	r3, r7, #5
 80022fe:	1c02      	adds	r2, r0, #0
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	1c0a      	adds	r2, r1, #0
 8002306:	701a      	strb	r2, [r3, #0]
    sram_write(addr, &val, 1, reg);
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	1d79      	adds	r1, r7, #5
 800230e:	1dbb      	adds	r3, r7, #6
 8002310:	8818      	ldrh	r0, [r3, #0]
 8002312:	0013      	movs	r3, r2
 8002314:	2201      	movs	r2, #1
 8002316:	f7ff fef7 	bl	8002108 <sram_write>
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b003      	add	sp, #12
 8002320:	bd90      	pop	{r4, r7, pc}
	...

08002324 <sram_erase>:
/*!
    @param addr the address to start the erase at
    @param length the number of byts to fill
    @param val the value to set the data to
*/
void sram_erase(uint16_t addr, uint16_t length, uint8_t val) {
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	0004      	movs	r4, r0
 800232c:	0008      	movs	r0, r1
 800232e:	0011      	movs	r1, r2
 8002330:	1dbb      	adds	r3, r7, #6
 8002332:	1c22      	adds	r2, r4, #0
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	1c02      	adds	r2, r0, #0
 800233a:	801a      	strh	r2, [r3, #0]
 800233c:	1cfb      	adds	r3, r7, #3
 800233e:	1c0a      	adds	r2, r1, #0
 8002340:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 8002342:	f7ff feac 	bl	800209e <sram_csLow>

    // write command and addrress
    uint8_t cmdbuf[3] = {
 8002346:	2110      	movs	r1, #16
 8002348:	187b      	adds	r3, r7, r1
 800234a:	2202      	movs	r2, #2
 800234c:	701a      	strb	r2, [r3, #0]
        MCPSRAM_WRITE,
        (uint8_t) (addr >> 8),
 800234e:	1dbb      	adds	r3, r7, #6
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	b29b      	uxth	r3, r3
 8002356:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8002358:	187b      	adds	r3, r7, r1
 800235a:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 800235c:	1dbb      	adds	r3, r7, #6
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 8002362:	187b      	adds	r3, r7, r1
 8002364:	709a      	strb	r2, [r3, #2]
    };

    for (int i = 0; i < 3; i++) {
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e015      	b.n	8002398 <sram_erase+0x74>
        uint8_t d = cmdbuf[i];
 800236c:	2310      	movs	r3, #16
 800236e:	18fa      	adds	r2, r7, r3
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	18d3      	adds	r3, r2, r3
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	210f      	movs	r1, #15
 8002378:	187b      	adds	r3, r7, r1
 800237a:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 800237c:	2316      	movs	r3, #22
 800237e:	18fc      	adds	r4, r7, r3
 8002380:	2301      	movs	r3, #1
 8002382:	425b      	negs	r3, r3
 8002384:	1879      	adds	r1, r7, r1
 8002386:	4816      	ldr	r0, [pc, #88]	; (80023e0 <sram_erase+0xbc>)
 8002388:	2201      	movs	r2, #1
 800238a:	f001 fd1b 	bl	8003dc4 <HAL_SPI_Transmit>
 800238e:	0003      	movs	r3, r0
 8002390:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 3; i++) {
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b02      	cmp	r3, #2
 800239c:	dde6      	ble.n	800236c <sram_erase+0x48>
//            serial_println(error);
//        }
    }

    // write buffer of data
    for (int i = 0; i < length; i++) {
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	e012      	b.n	80023ca <sram_erase+0xa6>
        uint8_t d = val;
 80023a4:	210e      	movs	r1, #14
 80023a6:	187b      	adds	r3, r7, r1
 80023a8:	1cfa      	adds	r2, r7, #3
 80023aa:	7812      	ldrb	r2, [r2, #0]
 80023ac:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 80023ae:	2317      	movs	r3, #23
 80023b0:	18fc      	adds	r4, r7, r3
 80023b2:	2301      	movs	r3, #1
 80023b4:	425b      	negs	r3, r3
 80023b6:	1879      	adds	r1, r7, r1
 80023b8:	4809      	ldr	r0, [pc, #36]	; (80023e0 <sram_erase+0xbc>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	f001 fd02 	bl	8003dc4 <HAL_SPI_Transmit>
 80023c0:	0003      	movs	r3, r0
 80023c2:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < length; i++) {
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	dbe7      	blt.n	80023a4 <sram_erase+0x80>
//            char error[] = "SRAM_ERASE: TX ERR\r\f";
//            serial_println(error);
//        }
    }

    sram_csHigh();
 80023d4:	f7ff fe56 	bl	8002084 <sram_csHigh>
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b009      	add	sp, #36	; 0x24
 80023de:	bd90      	pop	{r4, r7, pc}
 80023e0:	2000016c 	.word	0x2000016c

080023e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_MspInit+0x24>)
 80023ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_MspInit+0x24>)
 80023ee:	2101      	movs	r1, #1
 80023f0:	430a      	orrs	r2, r1
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <HAL_MspInit+0x24>)
 80023f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_MspInit+0x24>)
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	0549      	lsls	r1, r1, #21
 80023fe:	430a      	orrs	r2, r1
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000

0800240c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <NMI_Handler+0x4>

08002412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler+0x4>

08002418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002430:	f000 f932 	bl	8002698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <_sbrk+0x5c>)
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <_sbrk+0x60>)
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <_sbrk+0x64>)
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <_sbrk+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d207      	bcs.n	800247c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800246c:	f002 ff36 	bl	80052dc <__errno>
 8002470:	0003      	movs	r3, r0
 8002472:	220c      	movs	r2, #12
 8002474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002476:	2301      	movs	r3, #1
 8002478:	425b      	negs	r3, r3
 800247a:	e009      	b.n	8002490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	18d2      	adds	r2, r2, r3
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <_sbrk+0x64>)
 800248c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b006      	add	sp, #24
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20002000 	.word	0x20002000
 800249c:	00000400 	.word	0x00000400
 80024a0:	200000f4 	.word	0x200000f4
 80024a4:	20000260 	.word	0x20000260

080024a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <MX_USART2_UART_Init+0x5c>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024c0:	2296      	movs	r2, #150	; 0x96
 80024c2:	0192      	lsls	r2, r2, #6
 80024c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <MX_USART2_UART_Init+0x58>)
 80024f8:	0018      	movs	r0, r3
 80024fa:	f002 f9d9 	bl	80048b0 <HAL_UART_Init>
 80024fe:	1e03      	subs	r3, r0, #0
 8002500:	d001      	beq.n	8002506 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002502:	f7ff fbf7 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	200001c4 	.word	0x200001c4
 8002510:	40004400 	.word	0x40004400

08002514 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	240c      	movs	r4, #12
 800251e:	193b      	adds	r3, r7, r4
 8002520:	0018      	movs	r0, r3
 8002522:	2314      	movs	r3, #20
 8002524:	001a      	movs	r2, r3
 8002526:	2100      	movs	r1, #0
 8002528:	f002 ff0c 	bl	8005344 <memset>
  if(uartHandle->Instance==USART2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a18      	ldr	r2, [pc, #96]	; (8002594 <HAL_UART_MspInit+0x80>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d129      	bne.n	800258a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_UART_MspInit+0x84>)
 8002538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_UART_MspInit+0x84>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0289      	lsls	r1, r1, #10
 8002540:	430a      	orrs	r2, r1
 8002542:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_UART_MspInit+0x84>)
 8002546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_UART_MspInit+0x84>)
 800254a:	2101      	movs	r1, #1
 800254c:	430a      	orrs	r2, r1
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_UART_MspInit+0x84>)
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	2201      	movs	r2, #1
 8002556:	4013      	ands	r3, r2
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800255c:	0021      	movs	r1, r4
 800255e:	187b      	adds	r3, r7, r1
 8002560:	220c      	movs	r2, #12
 8002562:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	187b      	adds	r3, r7, r1
 8002566:	2202      	movs	r2, #2
 8002568:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	187b      	adds	r3, r7, r1
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	187b      	adds	r3, r7, r1
 8002572:	2203      	movs	r2, #3
 8002574:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002576:	187b      	adds	r3, r7, r1
 8002578:	2204      	movs	r2, #4
 800257a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	187a      	adds	r2, r7, r1
 800257e:	23a0      	movs	r3, #160	; 0xa0
 8002580:	05db      	lsls	r3, r3, #23
 8002582:	0011      	movs	r1, r2
 8002584:	0018      	movs	r0, r3
 8002586:	f000 f97b 	bl	8002880 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b009      	add	sp, #36	; 0x24
 8002590:	bd90      	pop	{r4, r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40004400 	.word	0x40004400
 8002598:	40021000 	.word	0x40021000

0800259c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800259e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a0:	480d      	ldr	r0, [pc, #52]	; (80025d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80025a2:	490e      	ldr	r1, [pc, #56]	; (80025dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a4:	4a0e      	ldr	r2, [pc, #56]	; (80025e0 <LoopForever+0xe>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a8:	e002      	b.n	80025b0 <LoopCopyDataInit>

080025aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ae:	3304      	adds	r3, #4

080025b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b4:	d3f9      	bcc.n	80025aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025b8:	4c0b      	ldr	r4, [pc, #44]	; (80025e8 <LoopForever+0x16>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025bc:	e001      	b.n	80025c2 <LoopFillZerobss>

080025be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c0:	3204      	adds	r2, #4

080025c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c4:	d3fb      	bcc.n	80025be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80025c6:	f7ff ff6f 	bl	80024a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ca:	f002 fe8d 	bl	80052e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ce:	f7ff f9f1 	bl	80019b4 <main>

080025d2 <LoopForever>:

LoopForever:
    b LoopForever
 80025d2:	e7fe      	b.n	80025d2 <LoopForever>
  ldr   r0, =_estack
 80025d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80025d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025dc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80025e0:	08005db4 	.word	0x08005db4
  ldr r2, =_sbss
 80025e4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80025e8:	2000025c 	.word	0x2000025c

080025ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025ec:	e7fe      	b.n	80025ec <ADC1_COMP_IRQHandler>
	...

080025f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_Init+0x3c>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_Init+0x3c>)
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002608:	2000      	movs	r0, #0
 800260a:	f000 f811 	bl	8002630 <HAL_InitTick>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d003      	beq.n	800261a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002612:	1dfb      	adds	r3, r7, #7
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e001      	b.n	800261e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800261a:	f7ff fee3 	bl	80023e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800261e:	1dfb      	adds	r3, r7, #7
 8002620:	781b      	ldrb	r3, [r3, #0]
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b002      	add	sp, #8
 8002628:	bd80      	pop	{r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	40022000 	.word	0x40022000

08002630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_InitTick+0x5c>)
 800263a:	681c      	ldr	r4, [r3, #0]
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_InitTick+0x60>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	0019      	movs	r1, r3
 8002642:	23fa      	movs	r3, #250	; 0xfa
 8002644:	0098      	lsls	r0, r3, #2
 8002646:	f7fd fd5f 	bl	8000108 <__udivsi3>
 800264a:	0003      	movs	r3, r0
 800264c:	0019      	movs	r1, r3
 800264e:	0020      	movs	r0, r4
 8002650:	f7fd fd5a 	bl	8000108 <__udivsi3>
 8002654:	0003      	movs	r3, r0
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f905 	bl	8002866 <HAL_SYSTICK_Config>
 800265c:	1e03      	subs	r3, r0, #0
 800265e:	d001      	beq.n	8002664 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e00f      	b.n	8002684 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d80b      	bhi.n	8002682 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	2301      	movs	r3, #1
 800266e:	425b      	negs	r3, r3
 8002670:	2200      	movs	r2, #0
 8002672:	0018      	movs	r0, r3
 8002674:	f000 f8e2 	bl	800283c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_InitTick+0x64>)
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b003      	add	sp, #12
 800268a:	bd90      	pop	{r4, r7, pc}
 800268c:	2000001c 	.word	0x2000001c
 8002690:	20000024 	.word	0x20000024
 8002694:	20000020 	.word	0x20000020

08002698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_IncTick+0x1c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	001a      	movs	r2, r3
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_IncTick+0x20>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	18d2      	adds	r2, r2, r3
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_IncTick+0x20>)
 80026aa:	601a      	str	r2, [r3, #0]
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	20000024 	.word	0x20000024
 80026b8:	20000248 	.word	0x20000248

080026bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  return uwTick;
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_GetTick+0x10>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	20000248 	.word	0x20000248

080026d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d8:	f7ff fff0 	bl	80026bc <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3301      	adds	r3, #1
 80026e8:	d005      	beq.n	80026f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_Delay+0x44>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	001a      	movs	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	189b      	adds	r3, r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	f7ff ffe0 	bl	80026bc <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	429a      	cmp	r2, r3
 8002706:	d8f7      	bhi.n	80026f8 <HAL_Delay+0x28>
  {
  }
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	20000024 	.word	0x20000024

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	0002      	movs	r2, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	1dfb      	adds	r3, r7, #7
 8002724:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002726:	1dfb      	adds	r3, r7, #7
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b7f      	cmp	r3, #127	; 0x7f
 800272c:	d828      	bhi.n	8002780 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800272e:	4a2f      	ldr	r2, [pc, #188]	; (80027ec <__NVIC_SetPriority+0xd4>)
 8002730:	1dfb      	adds	r3, r7, #7
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b25b      	sxtb	r3, r3
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	33c0      	adds	r3, #192	; 0xc0
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	589b      	ldr	r3, [r3, r2]
 800273e:	1dfa      	adds	r2, r7, #7
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	0011      	movs	r1, r2
 8002744:	2203      	movs	r2, #3
 8002746:	400a      	ands	r2, r1
 8002748:	00d2      	lsls	r2, r2, #3
 800274a:	21ff      	movs	r1, #255	; 0xff
 800274c:	4091      	lsls	r1, r2
 800274e:	000a      	movs	r2, r1
 8002750:	43d2      	mvns	r2, r2
 8002752:	401a      	ands	r2, r3
 8002754:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	019b      	lsls	r3, r3, #6
 800275a:	22ff      	movs	r2, #255	; 0xff
 800275c:	401a      	ands	r2, r3
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	0018      	movs	r0, r3
 8002764:	2303      	movs	r3, #3
 8002766:	4003      	ands	r3, r0
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800276c:	481f      	ldr	r0, [pc, #124]	; (80027ec <__NVIC_SetPriority+0xd4>)
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	b25b      	sxtb	r3, r3
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	430a      	orrs	r2, r1
 8002778:	33c0      	adds	r3, #192	; 0xc0
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800277e:	e031      	b.n	80027e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002780:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <__NVIC_SetPriority+0xd8>)
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	0019      	movs	r1, r3
 8002788:	230f      	movs	r3, #15
 800278a:	400b      	ands	r3, r1
 800278c:	3b08      	subs	r3, #8
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3306      	adds	r3, #6
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	18d3      	adds	r3, r2, r3
 8002796:	3304      	adds	r3, #4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1dfa      	adds	r2, r7, #7
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	0011      	movs	r1, r2
 80027a0:	2203      	movs	r2, #3
 80027a2:	400a      	ands	r2, r1
 80027a4:	00d2      	lsls	r2, r2, #3
 80027a6:	21ff      	movs	r1, #255	; 0xff
 80027a8:	4091      	lsls	r1, r2
 80027aa:	000a      	movs	r2, r1
 80027ac:	43d2      	mvns	r2, r2
 80027ae:	401a      	ands	r2, r3
 80027b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	019b      	lsls	r3, r3, #6
 80027b6:	22ff      	movs	r2, #255	; 0xff
 80027b8:	401a      	ands	r2, r3
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	0018      	movs	r0, r3
 80027c0:	2303      	movs	r3, #3
 80027c2:	4003      	ands	r3, r0
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027c8:	4809      	ldr	r0, [pc, #36]	; (80027f0 <__NVIC_SetPriority+0xd8>)
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	001c      	movs	r4, r3
 80027d0:	230f      	movs	r3, #15
 80027d2:	4023      	ands	r3, r4
 80027d4:	3b08      	subs	r3, #8
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	430a      	orrs	r2, r1
 80027da:	3306      	adds	r3, #6
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	18c3      	adds	r3, r0, r3
 80027e0:	3304      	adds	r3, #4
 80027e2:	601a      	str	r2, [r3, #0]
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b003      	add	sp, #12
 80027ea:	bd90      	pop	{r4, r7, pc}
 80027ec:	e000e100 	.word	0xe000e100
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	1e5a      	subs	r2, r3, #1
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	045b      	lsls	r3, r3, #17
 8002804:	429a      	cmp	r2, r3
 8002806:	d301      	bcc.n	800280c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002808:	2301      	movs	r3, #1
 800280a:	e010      	b.n	800282e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <SysTick_Config+0x44>)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	3a01      	subs	r2, #1
 8002812:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002814:	2301      	movs	r3, #1
 8002816:	425b      	negs	r3, r3
 8002818:	2103      	movs	r1, #3
 800281a:	0018      	movs	r0, r3
 800281c:	f7ff ff7c 	bl	8002718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <SysTick_Config+0x44>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <SysTick_Config+0x44>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	0018      	movs	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	b002      	add	sp, #8
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	210f      	movs	r1, #15
 8002848:	187b      	adds	r3, r7, r1
 800284a:	1c02      	adds	r2, r0, #0
 800284c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	187b      	adds	r3, r7, r1
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b25b      	sxtb	r3, r3
 8002856:	0011      	movs	r1, r2
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff ff5d 	bl	8002718 <__NVIC_SetPriority>
}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b004      	add	sp, #16
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f7ff ffbf 	bl	80027f4 <SysTick_Config>
 8002876:	0003      	movs	r3, r0
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002896:	e14f      	b.n	8002b38 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4091      	lsls	r1, r2
 80028a2:	000a      	movs	r2, r1
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d100      	bne.n	80028b0 <HAL_GPIO_Init+0x30>
 80028ae:	e140      	b.n	8002b32 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d00b      	beq.n	80028d0 <HAL_GPIO_Init+0x50>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c4:	2b11      	cmp	r3, #17
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b12      	cmp	r3, #18
 80028ce:	d130      	bne.n	8002932 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	409a      	lsls	r2, r3
 80028de:	0013      	movs	r3, r2
 80028e0:	43da      	mvns	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	409a      	lsls	r2, r3
 80028f2:	0013      	movs	r3, r2
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002906:	2201      	movs	r2, #1
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	409a      	lsls	r2, r3
 800290c:	0013      	movs	r3, r2
 800290e:	43da      	mvns	r2, r3
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	2201      	movs	r2, #1
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
 8002924:	0013      	movs	r3, r2
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	409a      	lsls	r2, r3
 8002940:	0013      	movs	r3, r2
 8002942:	43da      	mvns	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	409a      	lsls	r2, r3
 8002954:	0013      	movs	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0xf2>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b12      	cmp	r3, #18
 8002970:	d123      	bne.n	80029ba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	08da      	lsrs	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3208      	adds	r2, #8
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	58d3      	ldr	r3, [r2, r3]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2207      	movs	r2, #7
 8002984:	4013      	ands	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	409a      	lsls	r2, r3
 800298c:	0013      	movs	r3, r2
 800298e:	43da      	mvns	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2107      	movs	r1, #7
 800299e:	400b      	ands	r3, r1
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	409a      	lsls	r2, r3
 80029a4:	0013      	movs	r3, r2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	08da      	lsrs	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3208      	adds	r2, #8
 80029b4:	0092      	lsls	r2, r2, #2
 80029b6:	6939      	ldr	r1, [r7, #16]
 80029b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	409a      	lsls	r2, r3
 80029c8:	0013      	movs	r3, r2
 80029ca:	43da      	mvns	r2, r3
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2203      	movs	r2, #3
 80029d8:	401a      	ands	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	409a      	lsls	r2, r3
 80029e0:	0013      	movs	r3, r2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	055b      	lsls	r3, r3, #21
 80029f6:	4013      	ands	r3, r2
 80029f8:	d100      	bne.n	80029fc <HAL_GPIO_Init+0x17c>
 80029fa:	e09a      	b.n	8002b32 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fc:	4b54      	ldr	r3, [pc, #336]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 80029fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	430a      	orrs	r2, r1
 8002a06:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_GPIO_Init+0x2d4>)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	589b      	ldr	r3, [r3, r2]
 8002a14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	409a      	lsls	r2, r3
 8002a22:	0013      	movs	r3, r2
 8002a24:	43da      	mvns	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	23a0      	movs	r3, #160	; 0xa0
 8002a30:	05db      	lsls	r3, r3, #23
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d019      	beq.n	8002a6a <HAL_GPIO_Init+0x1ea>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a47      	ldr	r2, [pc, #284]	; (8002b58 <HAL_GPIO_Init+0x2d8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_GPIO_Init+0x1e6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a46      	ldr	r2, [pc, #280]	; (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00d      	beq.n	8002a62 <HAL_GPIO_Init+0x1e2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a45      	ldr	r2, [pc, #276]	; (8002b60 <HAL_GPIO_Init+0x2e0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d007      	beq.n	8002a5e <HAL_GPIO_Init+0x1de>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a44      	ldr	r2, [pc, #272]	; (8002b64 <HAL_GPIO_Init+0x2e4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d101      	bne.n	8002a5a <HAL_GPIO_Init+0x1da>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e008      	b.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e004      	b.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	2103      	movs	r1, #3
 8002a70:	400a      	ands	r2, r1
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4093      	lsls	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a7c:	4935      	ldr	r1, [pc, #212]	; (8002b54 <HAL_GPIO_Init+0x2d4>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a8a:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	43da      	mvns	r2, r3
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	025b      	lsls	r3, r3, #9
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002aae:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	43da      	mvns	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	029b      	lsls	r3, r3, #10
 8002acc:	4013      	ands	r3, r2
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ad8:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	035b      	lsls	r3, r3, #13
 8002af6:	4013      	ands	r3, r2
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b02:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43da      	mvns	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	039b      	lsls	r3, r3, #14
 8002b20:	4013      	ands	r3, r2
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	40da      	lsrs	r2, r3
 8002b40:	1e13      	subs	r3, r2, #0
 8002b42:	d000      	beq.n	8002b46 <HAL_GPIO_Init+0x2c6>
 8002b44:	e6a8      	b.n	8002898 <HAL_GPIO_Init+0x18>
  }
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40010000 	.word	0x40010000
 8002b58:	50000400 	.word	0x50000400
 8002b5c:	50000800 	.word	0x50000800
 8002b60:	50000c00 	.word	0x50000c00
 8002b64:	50001c00 	.word	0x50001c00
 8002b68:	40010400 	.word	0x40010400

08002b6c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	0008      	movs	r0, r1
 8002b76:	0011      	movs	r1, r2
 8002b78:	1cbb      	adds	r3, r7, #2
 8002b7a:	1c02      	adds	r2, r0, #0
 8002b7c:	801a      	strh	r2, [r3, #0]
 8002b7e:	1c7b      	adds	r3, r7, #1
 8002b80:	1c0a      	adds	r2, r1, #0
 8002b82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b84:	1c7b      	adds	r3, r7, #1
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8c:	1cbb      	adds	r3, r7, #2
 8002b8e:	881a      	ldrh	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002b94:	e003      	b.n	8002b9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002b96:	1cbb      	adds	r3, r7, #2
 8002b98:	881a      	ldrh	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b002      	add	sp, #8
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e082      	b.n	8002cc0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2241      	movs	r2, #65	; 0x41
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2240      	movs	r2, #64	; 0x40
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7fe fea9 	bl	8001928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2241      	movs	r2, #65	; 0x41
 8002bda:	2124      	movs	r1, #36	; 0x24
 8002bdc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	438a      	bics	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4934      	ldr	r1, [pc, #208]	; (8002cc8 <HAL_I2C_Init+0x120>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4931      	ldr	r1, [pc, #196]	; (8002ccc <HAL_I2C_Init+0x124>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d108      	bne.n	8002c26 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	0209      	lsls	r1, r1, #8
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	e007      	b.n	8002c36 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2184      	movs	r1, #132	; 0x84
 8002c30:	0209      	lsls	r1, r1, #8
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d104      	bne.n	8002c48 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	0112      	lsls	r2, r2, #4
 8002c46:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	491f      	ldr	r1, [pc, #124]	; (8002cd0 <HAL_I2C_Init+0x128>)
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	491a      	ldr	r1, [pc, #104]	; (8002ccc <HAL_I2C_Init+0x124>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	0011      	movs	r1, r2
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	021a      	lsls	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69d9      	ldr	r1, [r3, #28]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1a      	ldr	r2, [r3, #32]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2241      	movs	r2, #65	; 0x41
 8002cac:	2120      	movs	r1, #32
 8002cae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2242      	movs	r2, #66	; 0x42
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	f0ffffff 	.word	0xf0ffffff
 8002ccc:	ffff7fff 	.word	0xffff7fff
 8002cd0:	02008000 	.word	0x02008000

08002cd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2241      	movs	r2, #65	; 0x41
 8002ce2:	5c9b      	ldrb	r3, [r3, r2]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d138      	bne.n	8002d5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2240      	movs	r2, #64	; 0x40
 8002cee:	5c9b      	ldrb	r3, [r3, r2]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e032      	b.n	8002d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2240      	movs	r2, #64	; 0x40
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2241      	movs	r2, #65	; 0x41
 8002d04:	2124      	movs	r1, #36	; 0x24
 8002d06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2101      	movs	r1, #1
 8002d14:	438a      	bics	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4911      	ldr	r1, [pc, #68]	; (8002d68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d24:	400a      	ands	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2241      	movs	r2, #65	; 0x41
 8002d4c:	2120      	movs	r1, #32
 8002d4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2240      	movs	r2, #64	; 0x40
 8002d54:	2100      	movs	r1, #0
 8002d56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	ffffefff 	.word	0xffffefff

08002d6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2241      	movs	r2, #65	; 0x41
 8002d7a:	5c9b      	ldrb	r3, [r3, r2]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d139      	bne.n	8002df6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2240      	movs	r2, #64	; 0x40
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e033      	b.n	8002df8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2240      	movs	r2, #64	; 0x40
 8002d94:	2101      	movs	r1, #1
 8002d96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2241      	movs	r2, #65	; 0x41
 8002d9c:	2124      	movs	r1, #36	; 0x24
 8002d9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2101      	movs	r1, #1
 8002dac:	438a      	bics	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a11      	ldr	r2, [pc, #68]	; (8002e00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2241      	movs	r2, #65	; 0x41
 8002de6:	2120      	movs	r1, #32
 8002de8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2240      	movs	r2, #64	; 0x40
 8002dee:	2100      	movs	r1, #0
 8002df0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
  }
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b004      	add	sp, #16
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	fffff0ff 	.word	0xfffff0ff

08002e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b5b0      	push	{r4, r5, r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f000 fbaf 	bl	8003576 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e18:	4bcf      	ldr	r3, [pc, #828]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	220c      	movs	r2, #12
 8002e1e:	4013      	ands	r3, r2
 8002e20:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e22:	4bcd      	ldr	r3, [pc, #820]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	025b      	lsls	r3, r3, #9
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2201      	movs	r2, #1
 8002e34:	4013      	ands	r3, r2
 8002e36:	d100      	bne.n	8002e3a <HAL_RCC_OscConfig+0x36>
 8002e38:	e07e      	b.n	8002f38 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d007      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d112      	bne.n	8002e6c <HAL_RCC_OscConfig+0x68>
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	025b      	lsls	r3, r3, #9
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d10d      	bne.n	8002e6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	4bc1      	ldr	r3, [pc, #772]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	029b      	lsls	r3, r3, #10
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5a>
 8002e5c:	e06b      	b.n	8002f36 <HAL_RCC_OscConfig+0x132>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d167      	bne.n	8002f36 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f000 fb85 	bl	8003576 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	025b      	lsls	r3, r3, #9
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_OscConfig+0x84>
 8002e78:	4bb7      	ldr	r3, [pc, #732]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4bb6      	ldr	r3, [pc, #728]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	0249      	lsls	r1, r1, #9
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e027      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	23a0      	movs	r3, #160	; 0xa0
 8002e8e:	02db      	lsls	r3, r3, #11
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d10e      	bne.n	8002eb2 <HAL_RCC_OscConfig+0xae>
 8002e94:	4bb0      	ldr	r3, [pc, #704]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4baf      	ldr	r3, [pc, #700]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	02c9      	lsls	r1, r1, #11
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	4bad      	ldr	r3, [pc, #692]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4bac      	ldr	r3, [pc, #688]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002ea8:	2180      	movs	r1, #128	; 0x80
 8002eaa:	0249      	lsls	r1, r1, #9
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e012      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
 8002eb2:	4ba9      	ldr	r3, [pc, #676]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4ba8      	ldr	r3, [pc, #672]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002eb8:	49a8      	ldr	r1, [pc, #672]	; (800315c <HAL_RCC_OscConfig+0x358>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	4ba6      	ldr	r3, [pc, #664]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	025b      	lsls	r3, r3, #9
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4ba2      	ldr	r3, [pc, #648]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4ba1      	ldr	r3, [pc, #644]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002ed2:	49a3      	ldr	r1, [pc, #652]	; (8003160 <HAL_RCC_OscConfig+0x35c>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7ff fbec 	bl	80026bc <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ee8:	e009      	b.n	8002efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eea:	f7ff fbe7 	bl	80026bc <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d902      	bls.n	8002efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	f000 fb3c 	bl	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002efe:	4b96      	ldr	r3, [pc, #600]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	029b      	lsls	r3, r3, #10
 8002f06:	4013      	ands	r3, r2
 8002f08:	d0ef      	beq.n	8002eea <HAL_RCC_OscConfig+0xe6>
 8002f0a:	e015      	b.n	8002f38 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7ff fbd6 	bl	80026bc <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f16:	f7ff fbd1 	bl	80026bc <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b64      	cmp	r3, #100	; 0x64
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e326      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f28:	4b8b      	ldr	r3, [pc, #556]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	029b      	lsls	r3, r3, #10
 8002f30:	4013      	ands	r3, r2
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x112>
 8002f34:	e000      	b.n	8002f38 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d100      	bne.n	8002f44 <HAL_RCC_OscConfig+0x140>
 8002f42:	e08b      	b.n	800305c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d13e      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1d0>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d13b      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002f5c:	4b7e      	ldr	r3, [pc, #504]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2204      	movs	r2, #4
 8002f62:	4013      	ands	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_RCC_OscConfig+0x16c>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e302      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f70:	4b79      	ldr	r3, [pc, #484]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a7b      	ldr	r2, [pc, #492]	; (8003164 <HAL_RCC_OscConfig+0x360>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	0019      	movs	r1, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f86:	4b74      	ldr	r3, [pc, #464]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2209      	movs	r2, #9
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	4b71      	ldr	r3, [pc, #452]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f98:	f000 fc40 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8002f9c:	0001      	movs	r1, r0
 8002f9e:	4b6e      	ldr	r3, [pc, #440]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	4a6f      	ldr	r2, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x364>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	000a      	movs	r2, r1
 8002fae:	40da      	lsrs	r2, r3
 8002fb0:	4b6e      	ldr	r3, [pc, #440]	; (800316c <HAL_RCC_OscConfig+0x368>)
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002fb4:	4b6e      	ldr	r3, [pc, #440]	; (8003170 <HAL_RCC_OscConfig+0x36c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2513      	movs	r5, #19
 8002fba:	197c      	adds	r4, r7, r5
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff fb37 	bl	8002630 <HAL_InitTick>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002fc6:	197b      	adds	r3, r7, r5
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d046      	beq.n	800305c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002fce:	197b      	adds	r3, r7, r5
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	e2d0      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d027      	beq.n	800302a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002fda:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2209      	movs	r2, #9
 8002fe0:	4393      	bics	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7ff fb66 	bl	80026bc <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7ff fb61 	bl	80026bc <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e2b6      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2204      	movs	r2, #4
 800300e:	4013      	ands	r3, r2
 8003010:	d0f1      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b51      	ldr	r3, [pc, #324]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a53      	ldr	r2, [pc, #332]	; (8003164 <HAL_RCC_OscConfig+0x360>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	021a      	lsls	r2, r3, #8
 8003022:	4b4d      	ldr	r3, [pc, #308]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	e018      	b.n	800305c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302a:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b4a      	ldr	r3, [pc, #296]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003030:	2101      	movs	r1, #1
 8003032:	438a      	bics	r2, r1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7ff fb41 	bl	80026bc <HAL_GetTick>
 800303a:	0003      	movs	r3, r0
 800303c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003040:	f7ff fb3c 	bl	80026bc <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e291      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003052:	4b41      	ldr	r3, [pc, #260]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2204      	movs	r2, #4
 8003058:	4013      	ands	r3, r2
 800305a:	d1f1      	bne.n	8003040 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	4013      	ands	r3, r2
 8003064:	d100      	bne.n	8003068 <HAL_RCC_OscConfig+0x264>
 8003066:	e0a1      	b.n	80031ac <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d140      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800306e:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4013      	ands	r3, r2
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x282>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e277      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003086:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <HAL_RCC_OscConfig+0x370>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003094:	4b30      	ldr	r3, [pc, #192]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800309a:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	0a19      	lsrs	r1, r3, #8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	061a      	lsls	r2, r3, #24
 80030a8:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	0b5b      	lsrs	r3, r3, #13
 80030b4:	3301      	adds	r3, #1
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	0212      	lsls	r2, r2, #8
 80030ba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80030bc:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	210f      	movs	r1, #15
 80030c4:	400b      	ands	r3, r1
 80030c6:	4928      	ldr	r1, [pc, #160]	; (8003168 <HAL_RCC_OscConfig+0x364>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x368>)
 80030ce:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x36c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2513      	movs	r5, #19
 80030d6:	197c      	adds	r4, r7, r5
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff faa9 	bl	8002630 <HAL_InitTick>
 80030de:	0003      	movs	r3, r0
 80030e0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80030e2:	197b      	adds	r3, r7, r5
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d060      	beq.n	80031ac <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80030ea:	197b      	adds	r3, r7, r5
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	e242      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d03f      	beq.n	8003178 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030f8:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	0049      	lsls	r1, r1, #1
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003106:	f7ff fad9 	bl	80026bc <HAL_GetTick>
 800310a:	0003      	movs	r3, r0
 800310c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003110:	f7ff fad4 	bl	80026bc <HAL_GetTick>
 8003114:	0002      	movs	r2, r0
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e229      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4013      	ands	r3, r2
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_RCC_OscConfig+0x370>)
 8003134:	4013      	ands	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	0a19      	lsrs	r1, r3, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	061a      	lsls	r2, r3, #24
 8003150:	4b01      	ldr	r3, [pc, #4]	; (8003158 <HAL_RCC_OscConfig+0x354>)
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	e029      	b.n	80031ac <HAL_RCC_OscConfig+0x3a8>
 8003158:	40021000 	.word	0x40021000
 800315c:	fffeffff 	.word	0xfffeffff
 8003160:	fffbffff 	.word	0xfffbffff
 8003164:	ffffe0ff 	.word	0xffffe0ff
 8003168:	08005d38 	.word	0x08005d38
 800316c:	2000001c 	.word	0x2000001c
 8003170:	20000020 	.word	0x20000020
 8003174:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003178:	4bbd      	ldr	r3, [pc, #756]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4bbc      	ldr	r3, [pc, #752]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800317e:	49bd      	ldr	r1, [pc, #756]	; (8003474 <HAL_RCC_OscConfig+0x670>)
 8003180:	400a      	ands	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff fa9a 	bl	80026bc <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800318e:	f7ff fa95 	bl	80026bc <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e1ea      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031a0:	4bb3      	ldr	r3, [pc, #716]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2208      	movs	r2, #8
 80031b2:	4013      	ands	r3, r2
 80031b4:	d036      	beq.n	8003224 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d019      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031be:	4bac      	ldr	r3, [pc, #688]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031c2:	4bab      	ldr	r3, [pc, #684]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031c4:	2101      	movs	r1, #1
 80031c6:	430a      	orrs	r2, r1
 80031c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7ff fa77 	bl	80026bc <HAL_GetTick>
 80031ce:	0003      	movs	r3, r0
 80031d0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d4:	f7ff fa72 	bl	80026bc <HAL_GetTick>
 80031d8:	0002      	movs	r2, r0
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1c7      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031e6:	4ba2      	ldr	r3, [pc, #648]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	d0f1      	beq.n	80031d4 <HAL_RCC_OscConfig+0x3d0>
 80031f0:	e018      	b.n	8003224 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f2:	4b9f      	ldr	r3, [pc, #636]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031f6:	4b9e      	ldr	r3, [pc, #632]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80031f8:	2101      	movs	r1, #1
 80031fa:	438a      	bics	r2, r1
 80031fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fe:	f7ff fa5d 	bl	80026bc <HAL_GetTick>
 8003202:	0003      	movs	r3, r0
 8003204:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003208:	f7ff fa58 	bl	80026bc <HAL_GetTick>
 800320c:	0002      	movs	r2, r0
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1ad      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800321a:	4b95      	ldr	r3, [pc, #596]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	2202      	movs	r2, #2
 8003220:	4013      	ands	r3, r2
 8003222:	d1f1      	bne.n	8003208 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2204      	movs	r2, #4
 800322a:	4013      	ands	r3, r2
 800322c:	d100      	bne.n	8003230 <HAL_RCC_OscConfig+0x42c>
 800322e:	e0ae      	b.n	800338e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003230:	2027      	movs	r0, #39	; 0x27
 8003232:	183b      	adds	r3, r7, r0
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003238:	4b8d      	ldr	r3, [pc, #564]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800323a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	055b      	lsls	r3, r3, #21
 8003240:	4013      	ands	r3, r2
 8003242:	d109      	bne.n	8003258 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003244:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003248:	4b89      	ldr	r3, [pc, #548]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	0549      	lsls	r1, r1, #21
 800324e:	430a      	orrs	r2, r1
 8003250:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003252:	183b      	adds	r3, r7, r0
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b87      	ldr	r3, [pc, #540]	; (8003478 <HAL_RCC_OscConfig+0x674>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d11a      	bne.n	800329a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003264:	4b84      	ldr	r3, [pc, #528]	; (8003478 <HAL_RCC_OscConfig+0x674>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b83      	ldr	r3, [pc, #524]	; (8003478 <HAL_RCC_OscConfig+0x674>)
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	0049      	lsls	r1, r1, #1
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003272:	f7ff fa23 	bl	80026bc <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7ff fa1e 	bl	80026bc <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e173      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b7a      	ldr	r3, [pc, #488]	; (8003478 <HAL_RCC_OscConfig+0x674>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
 80032a6:	4b72      	ldr	r3, [pc, #456]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032aa:	4b71      	ldr	r3, [pc, #452]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	0049      	lsls	r1, r1, #1
 80032b0:	430a      	orrs	r2, r1
 80032b2:	651a      	str	r2, [r3, #80]	; 0x50
 80032b4:	e031      	b.n	800331a <HAL_RCC_OscConfig+0x516>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4d4>
 80032be:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032c2:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032c4:	496b      	ldr	r1, [pc, #428]	; (8003474 <HAL_RCC_OscConfig+0x670>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	651a      	str	r2, [r3, #80]	; 0x50
 80032ca:	4b69      	ldr	r3, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032ce:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032d0:	496a      	ldr	r1, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x678>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	651a      	str	r2, [r3, #80]	; 0x50
 80032d6:	e020      	b.n	800331a <HAL_RCC_OscConfig+0x516>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	23a0      	movs	r3, #160	; 0xa0
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d10e      	bne.n	8003302 <HAL_RCC_OscConfig+0x4fe>
 80032e4:	4b62      	ldr	r3, [pc, #392]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032e8:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	00c9      	lsls	r1, r1, #3
 80032ee:	430a      	orrs	r2, r1
 80032f0:	651a      	str	r2, [r3, #80]	; 0x50
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f6:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	0049      	lsls	r1, r1, #1
 80032fc:	430a      	orrs	r2, r1
 80032fe:	651a      	str	r2, [r3, #80]	; 0x50
 8003300:	e00b      	b.n	800331a <HAL_RCC_OscConfig+0x516>
 8003302:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003306:	4b5a      	ldr	r3, [pc, #360]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003308:	495a      	ldr	r1, [pc, #360]	; (8003474 <HAL_RCC_OscConfig+0x670>)
 800330a:	400a      	ands	r2, r1
 800330c:	651a      	str	r2, [r3, #80]	; 0x50
 800330e:	4b58      	ldr	r3, [pc, #352]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003312:	4b57      	ldr	r3, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003314:	4959      	ldr	r1, [pc, #356]	; (800347c <HAL_RCC_OscConfig+0x678>)
 8003316:	400a      	ands	r2, r1
 8003318:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d015      	beq.n	800334e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7ff f9cb 	bl	80026bc <HAL_GetTick>
 8003326:	0003      	movs	r3, r0
 8003328:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800332a:	e009      	b.n	8003340 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7ff f9c6 	bl	80026bc <HAL_GetTick>
 8003330:	0002      	movs	r2, r0
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	4a52      	ldr	r2, [pc, #328]	; (8003480 <HAL_RCC_OscConfig+0x67c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e11a      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003340:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4013      	ands	r3, r2
 800334a:	d0ef      	beq.n	800332c <HAL_RCC_OscConfig+0x528>
 800334c:	e014      	b.n	8003378 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7ff f9b5 	bl	80026bc <HAL_GetTick>
 8003352:	0003      	movs	r3, r0
 8003354:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003356:	e009      	b.n	800336c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7ff f9b0 	bl	80026bc <HAL_GetTick>
 800335c:	0002      	movs	r2, r0
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	4a47      	ldr	r2, [pc, #284]	; (8003480 <HAL_RCC_OscConfig+0x67c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e104      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800336c:	4b40      	ldr	r3, [pc, #256]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800336e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4013      	ands	r3, r2
 8003376:	d1ef      	bne.n	8003358 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003378:	2327      	movs	r3, #39	; 0x27
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003382:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003386:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003388:	493e      	ldr	r1, [pc, #248]	; (8003484 <HAL_RCC_OscConfig+0x680>)
 800338a:	400a      	ands	r2, r1
 800338c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2220      	movs	r2, #32
 8003394:	4013      	ands	r3, r2
 8003396:	d049      	beq.n	800342c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d026      	beq.n	80033ee <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80033a0:	4b33      	ldr	r3, [pc, #204]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b0:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033b2:	2101      	movs	r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	635a      	str	r2, [r3, #52]	; 0x34
 80033b8:	4b33      	ldr	r3, [pc, #204]	; (8003488 <HAL_RCC_OscConfig+0x684>)
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	4b32      	ldr	r3, [pc, #200]	; (8003488 <HAL_RCC_OscConfig+0x684>)
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	0189      	lsls	r1, r1, #6
 80033c2:	430a      	orrs	r2, r1
 80033c4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7ff f979 	bl	80026bc <HAL_GetTick>
 80033ca:	0003      	movs	r3, r0
 80033cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d0:	f7ff f974 	bl	80026bc <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0c9      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2202      	movs	r2, #2
 80033e8:	4013      	ands	r3, r2
 80033ea:	d0f1      	beq.n	80033d0 <HAL_RCC_OscConfig+0x5cc>
 80033ec:	e01e      	b.n	800342c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 80033f4:	2101      	movs	r1, #1
 80033f6:	438a      	bics	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_RCC_OscConfig+0x684>)
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_OscConfig+0x684>)
 8003400:	4922      	ldr	r1, [pc, #136]	; (800348c <HAL_RCC_OscConfig+0x688>)
 8003402:	400a      	ands	r2, r1
 8003404:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7ff f959 	bl	80026bc <HAL_GetTick>
 800340a:	0003      	movs	r3, r0
 800340c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003410:	f7ff f954 	bl	80026bc <HAL_GetTick>
 8003414:	0002      	movs	r2, r0
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0a9      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2202      	movs	r2, #2
 8003428:	4013      	ands	r3, r2
 800342a:	d1f1      	bne.n	8003410 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d100      	bne.n	8003436 <HAL_RCC_OscConfig+0x632>
 8003434:	e09e      	b.n	8003574 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b0c      	cmp	r3, #12
 800343a:	d100      	bne.n	800343e <HAL_RCC_OscConfig+0x63a>
 800343c:	e077      	b.n	800352e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	2b02      	cmp	r3, #2
 8003444:	d158      	bne.n	80034f8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_OscConfig+0x66c>)
 800344c:	4910      	ldr	r1, [pc, #64]	; (8003490 <HAL_RCC_OscConfig+0x68c>)
 800344e:	400a      	ands	r2, r1
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7ff f933 	bl	80026bc <HAL_GetTick>
 8003456:	0003      	movs	r3, r0
 8003458:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800345a:	e01b      	b.n	8003494 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7ff f92e 	bl	80026bc <HAL_GetTick>
 8003460:	0002      	movs	r2, r0
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d914      	bls.n	8003494 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e083      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	40021000 	.word	0x40021000
 8003474:	fffffeff 	.word	0xfffffeff
 8003478:	40007000 	.word	0x40007000
 800347c:	fffffbff 	.word	0xfffffbff
 8003480:	00001388 	.word	0x00001388
 8003484:	efffffff 	.word	0xefffffff
 8003488:	40010000 	.word	0x40010000
 800348c:	ffffdfff 	.word	0xffffdfff
 8003490:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	049b      	lsls	r3, r3, #18
 800349c:	4013      	ands	r3, r2
 800349e:	d1dd      	bne.n	800345c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a0:	4b37      	ldr	r3, [pc, #220]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a37      	ldr	r2, [pc, #220]	; (8003584 <HAL_RCC_OscConfig+0x780>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	431a      	orrs	r2, r3
 80034ba:	4b31      	ldr	r3, [pc, #196]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034bc:	430a      	orrs	r2, r1
 80034be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c0:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034c6:	2180      	movs	r1, #128	; 0x80
 80034c8:	0449      	lsls	r1, r1, #17
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7ff f8f5 	bl	80026bc <HAL_GetTick>
 80034d2:	0003      	movs	r3, r0
 80034d4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d8:	f7ff f8f0 	bl	80026bc <HAL_GetTick>
 80034dc:	0002      	movs	r2, r0
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e045      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	049b      	lsls	r3, r3, #18
 80034f2:	4013      	ands	r3, r2
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x6d4>
 80034f6:	e03d      	b.n	8003574 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034fe:	4922      	ldr	r1, [pc, #136]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003500:	400a      	ands	r2, r1
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7ff f8da 	bl	80026bc <HAL_GetTick>
 8003508:	0003      	movs	r3, r0
 800350a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350e:	f7ff f8d5 	bl	80026bc <HAL_GetTick>
 8003512:	0002      	movs	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e02a      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	049b      	lsls	r3, r3, #18
 8003528:	4013      	ands	r3, r2
 800352a:	d1f0      	bne.n	800350e <HAL_RCC_OscConfig+0x70a>
 800352c:	e022      	b.n	8003574 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01d      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_RCC_OscConfig+0x77c>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	401a      	ands	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d10f      	bne.n	8003570 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	23f0      	movs	r3, #240	; 0xf0
 8003554:	039b      	lsls	r3, r3, #14
 8003556:	401a      	ands	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d107      	bne.n	8003570 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	23c0      	movs	r3, #192	; 0xc0
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	401a      	ands	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b00a      	add	sp, #40	; 0x28
 800357c:	bdb0      	pop	{r4, r5, r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	40021000 	.word	0x40021000
 8003584:	ff02ffff 	.word	0xff02ffff
 8003588:	feffffff 	.word	0xfeffffff

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b5b0      	push	{r4, r5, r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e128      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b96      	ldr	r3, [pc, #600]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4013      	ands	r3, r2
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d91e      	bls.n	80035ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b93      	ldr	r3, [pc, #588]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2201      	movs	r2, #1
 80035b4:	4393      	bics	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	4b90      	ldr	r3, [pc, #576]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035c0:	f7ff f87c 	bl	80026bc <HAL_GetTick>
 80035c4:	0003      	movs	r3, r0
 80035c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c8:	e009      	b.n	80035de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ca:	f7ff f877 	bl	80026bc <HAL_GetTick>
 80035ce:	0002      	movs	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	4a8a      	ldr	r2, [pc, #552]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e109      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b87      	ldr	r3, [pc, #540]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2201      	movs	r2, #1
 80035e4:	4013      	ands	r3, r2
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1ee      	bne.n	80035ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2202      	movs	r2, #2
 80035f2:	4013      	ands	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f6:	4b83      	ldr	r3, [pc, #524]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	22f0      	movs	r2, #240	; 0xf0
 80035fc:	4393      	bics	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b7f      	ldr	r3, [pc, #508]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003606:	430a      	orrs	r2, r1
 8003608:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	4013      	ands	r3, r2
 8003612:	d100      	bne.n	8003616 <HAL_RCC_ClockConfig+0x8a>
 8003614:	e089      	b.n	800372a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800361e:	4b79      	ldr	r3, [pc, #484]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	029b      	lsls	r3, r3, #10
 8003626:	4013      	ands	r3, r2
 8003628:	d120      	bne.n	800366c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0e1      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003636:	4b73      	ldr	r3, [pc, #460]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	049b      	lsls	r3, r3, #18
 800363e:	4013      	ands	r3, r2
 8003640:	d114      	bne.n	800366c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0d5      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d106      	bne.n	800365c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800364e:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2204      	movs	r2, #4
 8003654:	4013      	ands	r3, r2
 8003656:	d109      	bne.n	800366c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0ca      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800365c:	4b69      	ldr	r3, [pc, #420]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4013      	ands	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0c2      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366c:	4b65      	ldr	r3, [pc, #404]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2203      	movs	r2, #3
 8003672:	4393      	bics	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	4b62      	ldr	r3, [pc, #392]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 800367c:	430a      	orrs	r2, r1
 800367e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003680:	f7ff f81c 	bl	80026bc <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d111      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003690:	e009      	b.n	80036a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003692:	f7ff f813 	bl	80026bc <HAL_GetTick>
 8003696:	0002      	movs	r2, r0
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	4a58      	ldr	r2, [pc, #352]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e0a5      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a6:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	220c      	movs	r2, #12
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d1ef      	bne.n	8003692 <HAL_RCC_ClockConfig+0x106>
 80036b2:	e03a      	b.n	800372a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d111      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036bc:	e009      	b.n	80036d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036be:	f7fe fffd 	bl	80026bc <HAL_GetTick>
 80036c2:	0002      	movs	r2, r0
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	4a4d      	ldr	r2, [pc, #308]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e08f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d2:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	220c      	movs	r2, #12
 80036d8:	4013      	ands	r3, r2
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d1ef      	bne.n	80036be <HAL_RCC_ClockConfig+0x132>
 80036de:	e024      	b.n	800372a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d11b      	bne.n	8003720 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036e8:	e009      	b.n	80036fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ea:	f7fe ffe7 	bl	80026bc <HAL_GetTick>
 80036ee:	0002      	movs	r2, r0
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	4a42      	ldr	r2, [pc, #264]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e079      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fe:	4b41      	ldr	r3, [pc, #260]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	220c      	movs	r2, #12
 8003704:	4013      	ands	r3, r2
 8003706:	2b04      	cmp	r3, #4
 8003708:	d1ef      	bne.n	80036ea <HAL_RCC_ClockConfig+0x15e>
 800370a:	e00e      	b.n	800372a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800370c:	f7fe ffd6 	bl	80026bc <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	4a3a      	ldr	r2, [pc, #232]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e068      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003720:	4b38      	ldr	r3, [pc, #224]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	220c      	movs	r2, #12
 8003726:	4013      	ands	r3, r2
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2201      	movs	r2, #1
 8003730:	4013      	ands	r3, r2
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d21e      	bcs.n	8003776 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003738:	4b30      	ldr	r3, [pc, #192]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2201      	movs	r2, #1
 800373e:	4393      	bics	r3, r2
 8003740:	0019      	movs	r1, r3
 8003742:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800374a:	f7fe ffb7 	bl	80026bc <HAL_GetTick>
 800374e:	0003      	movs	r3, r0
 8003750:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	e009      	b.n	8003768 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003754:	f7fe ffb2 	bl	80026bc <HAL_GetTick>
 8003758:	0002      	movs	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	4a28      	ldr	r2, [pc, #160]	; (8003800 <HAL_RCC_ClockConfig+0x274>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e044      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003768:	4b24      	ldr	r3, [pc, #144]	; (80037fc <HAL_RCC_ClockConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2201      	movs	r2, #1
 800376e:	4013      	ands	r3, r2
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2204      	movs	r2, #4
 800377c:	4013      	ands	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a20      	ldr	r2, [pc, #128]	; (8003808 <HAL_RCC_ClockConfig+0x27c>)
 8003786:	4013      	ands	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2208      	movs	r2, #8
 800379a:	4013      	ands	r3, r2
 800379c:	d00a      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800379e:	4b19      	ldr	r3, [pc, #100]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4a1a      	ldr	r2, [pc, #104]	; (800380c <HAL_RCC_ClockConfig+0x280>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	0019      	movs	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	00da      	lsls	r2, r3, #3
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80037b0:	430a      	orrs	r2, r1
 80037b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b4:	f000 f832 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037b8:	0001      	movs	r1, r0
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_ClockConfig+0x278>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	220f      	movs	r2, #15
 80037c2:	4013      	ands	r3, r2
 80037c4:	4a12      	ldr	r2, [pc, #72]	; (8003810 <HAL_RCC_ClockConfig+0x284>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	000a      	movs	r2, r1
 80037ca:	40da      	lsrs	r2, r3
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_RCC_ClockConfig+0x288>)
 80037ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_RCC_ClockConfig+0x28c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	250b      	movs	r5, #11
 80037d6:	197c      	adds	r4, r7, r5
 80037d8:	0018      	movs	r0, r3
 80037da:	f7fe ff29 	bl	8002630 <HAL_InitTick>
 80037de:	0003      	movs	r3, r0
 80037e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80037e2:	197b      	adds	r3, r7, r5
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80037ea:	197b      	adds	r3, r7, r5
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b004      	add	sp, #16
 80037f8:	bdb0      	pop	{r4, r5, r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	40022000 	.word	0x40022000
 8003800:	00001388 	.word	0x00001388
 8003804:	40021000 	.word	0x40021000
 8003808:	fffff8ff 	.word	0xfffff8ff
 800380c:	ffffc7ff 	.word	0xffffc7ff
 8003810:	08005d38 	.word	0x08005d38
 8003814:	2000001c 	.word	0x2000001c
 8003818:	20000020 	.word	0x20000020

0800381c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	b5b0      	push	{r4, r5, r7, lr}
 800381e:	b08e      	sub	sp, #56	; 0x38
 8003820:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003822:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <HAL_RCC_GetSysClockFreq+0x138>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800382a:	230c      	movs	r3, #12
 800382c:	4013      	ands	r3, r2
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d014      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x40>
 8003832:	d900      	bls.n	8003836 <HAL_RCC_GetSysClockFreq+0x1a>
 8003834:	e07b      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x112>
 8003836:	2b04      	cmp	r3, #4
 8003838:	d002      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x24>
 800383a:	2b08      	cmp	r3, #8
 800383c:	d00b      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0x3a>
 800383e:	e076      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003840:	4b44      	ldr	r3, [pc, #272]	; (8003954 <HAL_RCC_GetSysClockFreq+0x138>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2210      	movs	r2, #16
 8003846:	4013      	ands	r3, r2
 8003848:	d002      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800384a:	4b43      	ldr	r3, [pc, #268]	; (8003958 <HAL_RCC_GetSysClockFreq+0x13c>)
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800384e:	e07c      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003850:	4b42      	ldr	r3, [pc, #264]	; (800395c <HAL_RCC_GetSysClockFreq+0x140>)
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003854:	e079      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003856:	4b42      	ldr	r3, [pc, #264]	; (8003960 <HAL_RCC_GetSysClockFreq+0x144>)
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800385a:	e076      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	0c9a      	lsrs	r2, r3, #18
 8003860:	230f      	movs	r3, #15
 8003862:	401a      	ands	r2, r3
 8003864:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <HAL_RCC_GetSysClockFreq+0x148>)
 8003866:	5c9b      	ldrb	r3, [r3, r2]
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	0d9a      	lsrs	r2, r3, #22
 800386e:	2303      	movs	r3, #3
 8003870:	4013      	ands	r3, r2
 8003872:	3301      	adds	r3, #1
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003876:	4b37      	ldr	r3, [pc, #220]	; (8003954 <HAL_RCC_GetSysClockFreq+0x138>)
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	025b      	lsls	r3, r3, #9
 800387e:	4013      	ands	r3, r2
 8003880:	d01a      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	4a35      	ldr	r2, [pc, #212]	; (8003960 <HAL_RCC_GetSysClockFreq+0x144>)
 800388c:	2300      	movs	r3, #0
 800388e:	69b8      	ldr	r0, [r7, #24]
 8003890:	69f9      	ldr	r1, [r7, #28]
 8003892:	f7fc fce5 	bl	8000260 <__aeabi_lmul>
 8003896:	0002      	movs	r2, r0
 8003898:	000b      	movs	r3, r1
 800389a:	0010      	movs	r0, r2
 800389c:	0019      	movs	r1, r3
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f7fc fcb9 	bl	8000220 <__aeabi_uldivmod>
 80038ae:	0002      	movs	r2, r0
 80038b0:	000b      	movs	r3, r1
 80038b2:	0013      	movs	r3, r2
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
 80038b6:	e037      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80038b8:	4b26      	ldr	r3, [pc, #152]	; (8003954 <HAL_RCC_GetSysClockFreq+0x138>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2210      	movs	r2, #16
 80038be:	4013      	ands	r3, r2
 80038c0:	d01a      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4a23      	ldr	r2, [pc, #140]	; (8003958 <HAL_RCC_GetSysClockFreq+0x13c>)
 80038cc:	2300      	movs	r3, #0
 80038ce:	68b8      	ldr	r0, [r7, #8]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	f7fc fcc5 	bl	8000260 <__aeabi_lmul>
 80038d6:	0002      	movs	r2, r0
 80038d8:	000b      	movs	r3, r1
 80038da:	0010      	movs	r0, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f7fc fc99 	bl	8000220 <__aeabi_uldivmod>
 80038ee:	0002      	movs	r2, r0
 80038f0:	000b      	movs	r3, r1
 80038f2:	0013      	movs	r3, r2
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
 80038f6:	e017      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	0018      	movs	r0, r3
 80038fc:	2300      	movs	r3, #0
 80038fe:	0019      	movs	r1, r3
 8003900:	4a16      	ldr	r2, [pc, #88]	; (800395c <HAL_RCC_GetSysClockFreq+0x140>)
 8003902:	2300      	movs	r3, #0
 8003904:	f7fc fcac 	bl	8000260 <__aeabi_lmul>
 8003908:	0002      	movs	r2, r0
 800390a:	000b      	movs	r3, r1
 800390c:	0010      	movs	r0, r2
 800390e:	0019      	movs	r1, r3
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	001c      	movs	r4, r3
 8003914:	2300      	movs	r3, #0
 8003916:	001d      	movs	r5, r3
 8003918:	0022      	movs	r2, r4
 800391a:	002b      	movs	r3, r5
 800391c:	f7fc fc80 	bl	8000220 <__aeabi_uldivmod>
 8003920:	0002      	movs	r2, r0
 8003922:	000b      	movs	r3, r1
 8003924:	0013      	movs	r3, r2
 8003926:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800392c:	e00d      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_GetSysClockFreq+0x138>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0b5b      	lsrs	r3, r3, #13
 8003934:	2207      	movs	r2, #7
 8003936:	4013      	ands	r3, r2
 8003938:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	3301      	adds	r3, #1
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	0212      	lsls	r2, r2, #8
 8003942:	409a      	lsls	r2, r3
 8003944:	0013      	movs	r3, r2
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003948:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b00e      	add	sp, #56	; 0x38
 8003952:	bdb0      	pop	{r4, r5, r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	003d0900 	.word	0x003d0900
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200
 8003964:	08005d50 	.word	0x08005d50

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b02      	ldr	r3, [pc, #8]	; (8003978 <HAL_RCC_GetHCLKFreq+0x10>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	2000001c 	.word	0x2000001c

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003980:	f7ff fff2 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8003984:	0001      	movs	r1, r0
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	2207      	movs	r2, #7
 800398e:	4013      	ands	r3, r2
 8003990:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003992:	5cd3      	ldrb	r3, [r2, r3]
 8003994:	40d9      	lsrs	r1, r3
 8003996:	000b      	movs	r3, r1
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	40021000 	.word	0x40021000
 80039a4:	08005d48 	.word	0x08005d48

080039a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039ac:	f7ff ffdc 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80039b0:	0001      	movs	r1, r0
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	0adb      	lsrs	r3, r3, #11
 80039b8:	2207      	movs	r2, #7
 80039ba:	4013      	ands	r3, r2
 80039bc:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	40d9      	lsrs	r1, r3
 80039c2:	000b      	movs	r3, r1
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	40021000 	.word	0x40021000
 80039d0:	08005d48 	.word	0x08005d48

080039d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80039dc:	2317      	movs	r3, #23
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2220      	movs	r2, #32
 80039ea:	4013      	ands	r3, r2
 80039ec:	d106      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4013      	ands	r3, r2
 80039f8:	d100      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80039fa:	e0d9      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fc:	4b9c      	ldr	r3, [pc, #624]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80039fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	055b      	lsls	r3, r3, #21
 8003a04:	4013      	ands	r3, r2
 8003a06:	d10a      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a08:	4b99      	ldr	r3, [pc, #612]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0c:	4b98      	ldr	r3, [pc, #608]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003a0e:	2180      	movs	r1, #128	; 0x80
 8003a10:	0549      	lsls	r1, r1, #21
 8003a12:	430a      	orrs	r2, r1
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003a16:	2317      	movs	r3, #23
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	4b95      	ldr	r3, [pc, #596]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4013      	ands	r3, r2
 8003a28:	d11a      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2a:	4b92      	ldr	r3, [pc, #584]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b91      	ldr	r3, [pc, #580]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	0049      	lsls	r1, r1, #1
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a38:	f7fe fe40 	bl	80026bc <HAL_GetTick>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fe fe3b 	bl	80026bc <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	; 0x64
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e108      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	4b87      	ldr	r3, [pc, #540]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003a60:	4b83      	ldr	r3, [pc, #524]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	23c0      	movs	r3, #192	; 0xc0
 8003a66:	039b      	lsls	r3, r3, #14
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	23c0      	movs	r3, #192	; 0xc0
 8003a72:	039b      	lsls	r3, r3, #14
 8003a74:	4013      	ands	r3, r2
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	23c0      	movs	r3, #192	; 0xc0
 8003a82:	039b      	lsls	r3, r3, #14
 8003a84:	4013      	ands	r3, r2
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	23c0      	movs	r3, #192	; 0xc0
 8003a92:	029b      	lsls	r3, r3, #10
 8003a94:	401a      	ands	r2, r3
 8003a96:	23c0      	movs	r3, #192	; 0xc0
 8003a98:	029b      	lsls	r3, r3, #10
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a9e:	4b74      	ldr	r3, [pc, #464]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	029b      	lsls	r3, r3, #10
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	029b      	lsls	r3, r3, #10
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0d8      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003ab4:	4b6e      	ldr	r3, [pc, #440]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ab8:	23c0      	movs	r3, #192	; 0xc0
 8003aba:	029b      	lsls	r3, r3, #10
 8003abc:	4013      	ands	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d049      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	23c0      	movs	r3, #192	; 0xc0
 8003acc:	029b      	lsls	r3, r3, #10
 8003ace:	4013      	ands	r3, r2
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d004      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2220      	movs	r2, #32
 8003adc:	4013      	ands	r3, r2
 8003ade:	d10d      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	23c0      	movs	r3, #192	; 0xc0
 8003ae6:	029b      	lsls	r3, r3, #10
 8003ae8:	4013      	ands	r3, r2
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d034      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	4013      	ands	r3, r2
 8003afa:	d02e      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003afc:	4b5c      	ldr	r3, [pc, #368]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b00:	4a5d      	ldr	r2, [pc, #372]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b06:	4b5a      	ldr	r3, [pc, #360]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b0a:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	0309      	lsls	r1, r1, #12
 8003b10:	430a      	orrs	r2, r1
 8003b12:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b14:	4b56      	ldr	r3, [pc, #344]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b18:	4b55      	ldr	r3, [pc, #340]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b1a:	4958      	ldr	r1, [pc, #352]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d014      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fe fdc4 	bl	80026bc <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b38:	e009      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fe fdbf 	bl	80026bc <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	4a4e      	ldr	r2, [pc, #312]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e08b      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b4e:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4013      	ands	r3, r2
 8003b58:	d0ef      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	23c0      	movs	r3, #192	; 0xc0
 8003b60:	029b      	lsls	r3, r3, #10
 8003b62:	401a      	ands	r2, r3
 8003b64:	23c0      	movs	r3, #192	; 0xc0
 8003b66:	029b      	lsls	r3, r3, #10
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003b6c:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a44      	ldr	r2, [pc, #272]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	0019      	movs	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	23c0      	movs	r3, #192	; 0xc0
 8003b7c:	039b      	lsls	r3, r3, #14
 8003b7e:	401a      	ands	r2, r3
 8003b80:	4b3b      	ldr	r3, [pc, #236]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	23c0      	movs	r3, #192	; 0xc0
 8003b90:	029b      	lsls	r3, r3, #10
 8003b92:	401a      	ands	r2, r3
 8003b94:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b96:	430a      	orrs	r2, r1
 8003b98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b9a:	2317      	movs	r3, #23
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba4:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba8:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003baa:	4937      	ldr	r1, [pc, #220]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003bac:	400a      	ands	r2, r1
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d009      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bba:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d009      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	220c      	movs	r2, #12
 8003bde:	4393      	bics	r3, r2
 8003be0:	0019      	movs	r1, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003be8:	430a      	orrs	r2, r1
 8003bea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfa:	4a24      	ldr	r2, [pc, #144]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c06:	430a      	orrs	r2, r1
 8003c08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2208      	movs	r2, #8
 8003c10:	4013      	ands	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c14:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c18:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c24:	430a      	orrs	r2, r1
 8003c26:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2240      	movs	r2, #64	; 0x40
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d009      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c32:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	4a17      	ldr	r2, [pc, #92]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1a      	ldr	r2, [r3, #32]
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c42:	430a      	orrs	r2, r1
 8003c44:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c54:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c60:	430a      	orrs	r2, r1
 8003c62:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b006      	add	sp, #24
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40007000 	.word	0x40007000
 8003c78:	fffcffff 	.word	0xfffcffff
 8003c7c:	fff7ffff 	.word	0xfff7ffff
 8003c80:	00001388 	.word	0x00001388
 8003c84:	ffcfffff 	.word	0xffcfffff
 8003c88:	efffffff 	.word	0xefffffff
 8003c8c:	fffff3ff 	.word	0xfffff3ff
 8003c90:	ffffcfff 	.word	0xffffcfff
 8003c94:	fbffffff 	.word	0xfbffffff
 8003c98:	fff3ffff 	.word	0xfff3ffff

08003c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e083      	b.n	8003db6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	2382      	movs	r3, #130	; 0x82
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d009      	beq.n	8003cd6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	61da      	str	r2, [r3, #28]
 8003cc8:	e005      	b.n	8003cd6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2251      	movs	r2, #81	; 0x51
 8003ce0:	5c9b      	ldrb	r3, [r3, r2]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d107      	bne.n	8003cf8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2250      	movs	r2, #80	; 0x50
 8003cec:	2100      	movs	r1, #0
 8003cee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7fe f982 	bl	8001ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2251      	movs	r2, #81	; 0x51
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2140      	movs	r1, #64	; 0x40
 8003d0c:	438a      	bics	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	2382      	movs	r3, #130	; 0x82
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	401a      	ands	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6899      	ldr	r1, [r3, #8]
 8003d1e:	2384      	movs	r3, #132	; 0x84
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	400b      	ands	r3, r1
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68d9      	ldr	r1, [r3, #12]
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	400b      	ands	r3, r1
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2102      	movs	r1, #2
 8003d38:	400b      	ands	r3, r1
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	2101      	movs	r1, #1
 8003d42:	400b      	ands	r3, r1
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6999      	ldr	r1, [r3, #24]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	400b      	ands	r3, r1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	2138      	movs	r1, #56	; 0x38
 8003d58:	400b      	ands	r3, r1
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	400b      	ands	r3, r1
 8003d64:	431a      	orrs	r2, r3
 8003d66:	0011      	movs	r1, r2
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	019b      	lsls	r3, r3, #6
 8003d70:	401a      	ands	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	2204      	movs	r2, #4
 8003d82:	4013      	ands	r3, r2
 8003d84:	0019      	movs	r1, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	401a      	ands	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4907      	ldr	r1, [pc, #28]	; (8003dc0 <HAL_SPI_Init+0x124>)
 8003da2:	400a      	ands	r2, r1
 8003da4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2251      	movs	r2, #81	; 0x51
 8003db0:	2101      	movs	r1, #1
 8003db2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b002      	add	sp, #8
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	fffff7ff 	.word	0xfffff7ff

08003dc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	1dbb      	adds	r3, r7, #6
 8003dd2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dd4:	231f      	movs	r3, #31
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2250      	movs	r2, #80	; 0x50
 8003de0:	5c9b      	ldrb	r3, [r3, r2]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_SPI_Transmit+0x26>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e13e      	b.n	8004068 <HAL_SPI_Transmit+0x2a4>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2250      	movs	r2, #80	; 0x50
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df2:	f7fe fc63 	bl	80026bc <HAL_GetTick>
 8003df6:	0003      	movs	r3, r0
 8003df8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003dfa:	2316      	movs	r3, #22
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	1dba      	adds	r2, r7, #6
 8003e00:	8812      	ldrh	r2, [r2, #0]
 8003e02:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2251      	movs	r2, #81	; 0x51
 8003e08:	5c9b      	ldrb	r3, [r3, r2]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d004      	beq.n	8003e1a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003e10:	231f      	movs	r3, #31
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	2202      	movs	r2, #2
 8003e16:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e18:	e11b      	b.n	8004052 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_SPI_Transmit+0x64>
 8003e20:	1dbb      	adds	r3, r7, #6
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003e28:	231f      	movs	r3, #31
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e30:	e10f      	b.n	8004052 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2251      	movs	r2, #81	; 0x51
 8003e36:	2103      	movs	r1, #3
 8003e38:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1dba      	adds	r2, r7, #6
 8003e4a:	8812      	ldrh	r2, [r2, #0]
 8003e4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1dba      	adds	r2, r7, #6
 8003e52:	8812      	ldrh	r2, [r2, #0]
 8003e54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d110      	bne.n	8003ea2 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2140      	movs	r1, #64	; 0x40
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2180      	movs	r1, #128	; 0x80
 8003e9c:	01c9      	lsls	r1, r1, #7
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2240      	movs	r2, #64	; 0x40
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d007      	beq.n	8003ec0 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2140      	movs	r1, #64	; 0x40
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d14e      	bne.n	8003f6a <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <HAL_SPI_Transmit+0x11a>
 8003ed4:	2316      	movs	r3, #22
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d13f      	bne.n	8003f5e <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	881a      	ldrh	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	1c9a      	adds	r2, r3, #2
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f02:	e02c      	b.n	8003f5e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d112      	bne.n	8003f38 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	881a      	ldrh	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f36:	e012      	b.n	8003f5e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f38:	f7fe fbc0 	bl	80026bc <HAL_GetTick>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d802      	bhi.n	8003f4e <HAL_SPI_Transmit+0x18a>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	d102      	bne.n	8003f54 <HAL_SPI_Transmit+0x190>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8003f54:	231f      	movs	r3, #31
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	2203      	movs	r2, #3
 8003f5a:	701a      	strb	r2, [r3, #0]
          goto error;
 8003f5c:	e079      	b.n	8004052 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1cd      	bne.n	8003f04 <HAL_SPI_Transmit+0x140>
 8003f68:	e04f      	b.n	800400a <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d004      	beq.n	8003f7c <HAL_SPI_Transmit+0x1b8>
 8003f72:	2316      	movs	r3, #22
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d141      	bne.n	8004000 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	7812      	ldrb	r2, [r2, #0]
 8003f88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fa2:	e02d      	b.n	8004000 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d113      	bne.n	8003fda <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	7812      	ldrb	r2, [r2, #0]
 8003fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fd8:	e012      	b.n	8004000 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fda:	f7fe fb6f 	bl	80026bc <HAL_GetTick>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d802      	bhi.n	8003ff0 <HAL_SPI_Transmit+0x22c>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	d102      	bne.n	8003ff6 <HAL_SPI_Transmit+0x232>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003ff6:	231f      	movs	r3, #31
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	701a      	strb	r2, [r3, #0]
          goto error;
 8003ffe:	e028      	b.n	8004052 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1cc      	bne.n	8003fa4 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	6839      	ldr	r1, [r7, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	0018      	movs	r0, r3
 8004012:	f000 fc07 	bl	8004824 <SPI_EndRxTxTransaction>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d002      	beq.n	8004020 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8004046:	231f      	movs	r3, #31
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	2201      	movs	r2, #1
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	e000      	b.n	8004052 <HAL_SPI_Transmit+0x28e>
  }

error:
 8004050:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2251      	movs	r2, #81	; 0x51
 8004056:	2101      	movs	r1, #1
 8004058:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2250      	movs	r2, #80	; 0x50
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004062:	231f      	movs	r3, #31
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	781b      	ldrb	r3, [r3, #0]
}
 8004068:	0018      	movs	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	b008      	add	sp, #32
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b089      	sub	sp, #36	; 0x24
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	1dbb      	adds	r3, r7, #6
 800407e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004080:	2317      	movs	r3, #23
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	2382      	movs	r3, #130	; 0x82
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	429a      	cmp	r2, r3
 8004092:	d113      	bne.n	80040bc <HAL_SPI_Receive+0x4c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10f      	bne.n	80040bc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2251      	movs	r2, #81	; 0x51
 80040a0:	2104      	movs	r1, #4
 80040a2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040a4:	1dbb      	adds	r3, r7, #6
 80040a6:	881c      	ldrh	r4, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	0023      	movs	r3, r4
 80040b4:	f000 f902 	bl	80042bc <HAL_SPI_TransmitReceive>
 80040b8:	0003      	movs	r3, r0
 80040ba:	e0f9      	b.n	80042b0 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2250      	movs	r2, #80	; 0x50
 80040c0:	5c9b      	ldrb	r3, [r3, r2]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_SPI_Receive+0x5a>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e0f2      	b.n	80042b0 <HAL_SPI_Receive+0x240>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2250      	movs	r2, #80	; 0x50
 80040ce:	2101      	movs	r1, #1
 80040d0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040d2:	f7fe faf3 	bl	80026bc <HAL_GetTick>
 80040d6:	0003      	movs	r3, r0
 80040d8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2251      	movs	r2, #81	; 0x51
 80040de:	5c9b      	ldrb	r3, [r3, r2]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d004      	beq.n	80040f0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80040e6:	2317      	movs	r3, #23
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	2202      	movs	r2, #2
 80040ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80040ee:	e0d4      	b.n	800429a <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_SPI_Receive+0x8e>
 80040f6:	1dbb      	adds	r3, r7, #6
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80040fe:	2317      	movs	r3, #23
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
    goto error;
 8004106:	e0c8      	b.n	800429a <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2251      	movs	r2, #81	; 0x51
 800410c:	2104      	movs	r1, #4
 800410e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1dba      	adds	r2, r7, #6
 8004120:	8812      	ldrh	r2, [r2, #0]
 8004122:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1dba      	adds	r2, r7, #6
 8004128:	8812      	ldrh	r2, [r2, #0]
 800412a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	429a      	cmp	r2, r3
 8004154:	d10f      	bne.n	8004176 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2140      	movs	r1, #64	; 0x40
 8004162:	438a      	bics	r2, r1
 8004164:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4951      	ldr	r1, [pc, #324]	; (80042b8 <HAL_SPI_Receive+0x248>)
 8004172:	400a      	ands	r2, r1
 8004174:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2240      	movs	r2, #64	; 0x40
 800417e:	4013      	ands	r3, r2
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d007      	beq.n	8004194 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2140      	movs	r1, #64	; 0x40
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d164      	bne.n	8004266 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800419c:	e02f      	b.n	80041fe <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2201      	movs	r2, #1
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d115      	bne.n	80041d8 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	001a      	movs	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	7812      	ldrb	r2, [r2, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041d6:	e012      	b.n	80041fe <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d8:	f7fe fa70 	bl	80026bc <HAL_GetTick>
 80041dc:	0002      	movs	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d802      	bhi.n	80041ee <HAL_SPI_Receive+0x17e>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	3301      	adds	r3, #1
 80041ec:	d102      	bne.n	80041f4 <HAL_SPI_Receive+0x184>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80041f4:	2317      	movs	r3, #23
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2203      	movs	r2, #3
 80041fa:	701a      	strb	r2, [r3, #0]
          goto error;
 80041fc:	e04d      	b.n	800429a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ca      	bne.n	800419e <HAL_SPI_Receive+0x12e>
 8004208:	e032      	b.n	8004270 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2201      	movs	r2, #1
 8004212:	4013      	ands	r3, r2
 8004214:	2b01      	cmp	r3, #1
 8004216:	d113      	bne.n	8004240 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	b292      	uxth	r2, r2
 8004224:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800423e:	e012      	b.n	8004266 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004240:	f7fe fa3c 	bl	80026bc <HAL_GetTick>
 8004244:	0002      	movs	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d802      	bhi.n	8004256 <HAL_SPI_Receive+0x1e6>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	3301      	adds	r3, #1
 8004254:	d102      	bne.n	800425c <HAL_SPI_Receive+0x1ec>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d104      	bne.n	8004266 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 800425c:	2317      	movs	r3, #23
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2203      	movs	r2, #3
 8004262:	701a      	strb	r2, [r3, #0]
          goto error;
 8004264:	e019      	b.n	800429a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1cc      	bne.n	800420a <HAL_SPI_Receive+0x19a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	6839      	ldr	r1, [r7, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	0018      	movs	r0, r3
 8004278:	f000 fa6a 	bl	8004750 <SPI_EndRxTransaction>
 800427c:	1e03      	subs	r3, r0, #0
 800427e:	d002      	beq.n	8004286 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 800428e:	2317      	movs	r3, #23
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	2201      	movs	r2, #1
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e000      	b.n	800429a <HAL_SPI_Receive+0x22a>
  }

error :
 8004298:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2251      	movs	r2, #81	; 0x51
 800429e:	2101      	movs	r1, #1
 80042a0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2250      	movs	r2, #80	; 0x50
 80042a6:	2100      	movs	r1, #0
 80042a8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80042aa:	2317      	movs	r3, #23
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	781b      	ldrb	r3, [r3, #0]
}
 80042b0:	0018      	movs	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b007      	add	sp, #28
 80042b6:	bd90      	pop	{r4, r7, pc}
 80042b8:	ffffbfff 	.word	0xffffbfff

080042bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	001a      	movs	r2, r3
 80042ca:	1cbb      	adds	r3, r7, #2
 80042cc:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042ce:	2301      	movs	r3, #1
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042d2:	232b      	movs	r3, #43	; 0x2b
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2250      	movs	r2, #80	; 0x50
 80042de:	5c9b      	ldrb	r3, [r3, r2]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x2c>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e1a0      	b.n	800462a <HAL_SPI_TransmitReceive+0x36e>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2250      	movs	r2, #80	; 0x50
 80042ec:	2101      	movs	r1, #1
 80042ee:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f0:	f7fe f9e4 	bl	80026bc <HAL_GetTick>
 80042f4:	0003      	movs	r3, r0
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042f8:	2023      	movs	r0, #35	; 0x23
 80042fa:	183b      	adds	r3, r7, r0
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	2151      	movs	r1, #81	; 0x51
 8004300:	5c52      	ldrb	r2, [r2, r1]
 8004302:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800430a:	231a      	movs	r3, #26
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	1cba      	adds	r2, r7, #2
 8004310:	8812      	ldrh	r2, [r2, #0]
 8004312:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004314:	183b      	adds	r3, r7, r0
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d011      	beq.n	8004340 <HAL_SPI_TransmitReceive+0x84>
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	2382      	movs	r3, #130	; 0x82
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	429a      	cmp	r2, r3
 8004324:	d107      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x7a>
 800432e:	183b      	adds	r3, r7, r0
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b04      	cmp	r3, #4
 8004334:	d004      	beq.n	8004340 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004336:	232b      	movs	r3, #43	; 0x2b
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	2202      	movs	r2, #2
 800433c:	701a      	strb	r2, [r3, #0]
    goto error;
 800433e:	e169      	b.n	8004614 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d006      	beq.n	8004354 <HAL_SPI_TransmitReceive+0x98>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_SPI_TransmitReceive+0x98>
 800434c:	1cbb      	adds	r3, r7, #2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d104      	bne.n	800435e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004354:	232b      	movs	r3, #43	; 0x2b
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2201      	movs	r2, #1
 800435a:	701a      	strb	r2, [r3, #0]
    goto error;
 800435c:	e15a      	b.n	8004614 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2251      	movs	r2, #81	; 0x51
 8004362:	5c9b      	ldrb	r3, [r3, r2]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b04      	cmp	r3, #4
 8004368:	d003      	beq.n	8004372 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2251      	movs	r2, #81	; 0x51
 800436e:	2105      	movs	r1, #5
 8004370:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1cba      	adds	r2, r7, #2
 8004382:	8812      	ldrh	r2, [r2, #0]
 8004384:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1cba      	adds	r2, r7, #2
 800438a:	8812      	ldrh	r2, [r2, #0]
 800438c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1cba      	adds	r2, r7, #2
 8004398:	8812      	ldrh	r2, [r2, #0]
 800439a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1cba      	adds	r2, r7, #2
 80043a0:	8812      	ldrh	r2, [r2, #0]
 80043a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2240      	movs	r2, #64	; 0x40
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d007      	beq.n	80043ce <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2140      	movs	r1, #64	; 0x40
 80043ca:	430a      	orrs	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d000      	beq.n	80043dc <HAL_SPI_TransmitReceive+0x120>
 80043da:	e07a      	b.n	80044d2 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_SPI_TransmitReceive+0x132>
 80043e4:	231a      	movs	r3, #26
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d166      	bne.n	80044bc <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	881a      	ldrh	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	1c9a      	adds	r2, r3, #2
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004412:	e053      	b.n	80044bc <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2202      	movs	r2, #2
 800441c:	4013      	ands	r3, r2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d11b      	bne.n	800445a <HAL_SPI_TransmitReceive+0x19e>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d016      	beq.n	800445a <HAL_SPI_TransmitReceive+0x19e>
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d113      	bne.n	800445a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	881a      	ldrh	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	1c9a      	adds	r2, r3, #2
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2201      	movs	r2, #1
 8004462:	4013      	ands	r3, r2
 8004464:	2b01      	cmp	r3, #1
 8004466:	d119      	bne.n	800449c <HAL_SPI_TransmitReceive+0x1e0>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d014      	beq.n	800449c <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	b292      	uxth	r2, r2
 800447e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004498:	2301      	movs	r3, #1
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800449c:	f7fe f90e 	bl	80026bc <HAL_GetTick>
 80044a0:	0002      	movs	r2, r0
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d807      	bhi.n	80044bc <HAL_SPI_TransmitReceive+0x200>
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	3301      	adds	r3, #1
 80044b0:	d004      	beq.n	80044bc <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80044b2:	232b      	movs	r3, #43	; 0x2b
 80044b4:	18fb      	adds	r3, r7, r3
 80044b6:	2203      	movs	r2, #3
 80044b8:	701a      	strb	r2, [r3, #0]
        goto error;
 80044ba:	e0ab      	b.n	8004614 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1a6      	bne.n	8004414 <HAL_SPI_TransmitReceive+0x158>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1a1      	bne.n	8004414 <HAL_SPI_TransmitReceive+0x158>
 80044d0:	e07f      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0x22a>
 80044da:	231a      	movs	r3, #26
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d000      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0x22a>
 80044e4:	e06b      	b.n	80045be <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800450c:	e057      	b.n	80045be <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2202      	movs	r2, #2
 8004516:	4013      	ands	r3, r2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d11c      	bne.n	8004556 <HAL_SPI_TransmitReceive+0x29a>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d017      	beq.n	8004556 <HAL_SPI_TransmitReceive+0x29a>
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d114      	bne.n	8004556 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	7812      	ldrb	r2, [r2, #0]
 8004538:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2201      	movs	r2, #1
 800455e:	4013      	ands	r3, r2
 8004560:	2b01      	cmp	r3, #1
 8004562:	d119      	bne.n	8004598 <HAL_SPI_TransmitReceive+0x2dc>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d014      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004594:	2301      	movs	r3, #1
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004598:	f7fe f890 	bl	80026bc <HAL_GetTick>
 800459c:	0002      	movs	r2, r0
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d802      	bhi.n	80045ae <HAL_SPI_TransmitReceive+0x2f2>
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	3301      	adds	r3, #1
 80045ac:	d102      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x2f8>
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80045b4:	232b      	movs	r3, #43	; 0x2b
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	2203      	movs	r2, #3
 80045ba:	701a      	strb	r2, [r3, #0]
        goto error;
 80045bc:	e02a      	b.n	8004614 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1a2      	bne.n	800450e <HAL_SPI_TransmitReceive+0x252>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d19d      	bne.n	800450e <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 f923 	bl	8004824 <SPI_EndRxTxTransaction>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d007      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 80045e2:	232b      	movs	r3, #43	; 0x2b
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	2201      	movs	r2, #1
 80045e8:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045f0:	e010      	b.n	8004614 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10b      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	e000      	b.n	8004614 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8004612:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2251      	movs	r2, #81	; 0x51
 8004618:	2101      	movs	r1, #1
 800461a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2250      	movs	r2, #80	; 0x50
 8004620:	2100      	movs	r1, #0
 8004622:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004624:	232b      	movs	r3, #43	; 0x2b
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	781b      	ldrb	r3, [r3, #0]
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b00c      	add	sp, #48	; 0x30
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	1dfb      	adds	r3, r7, #7
 8004642:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004644:	f7fe f83a 	bl	80026bc <HAL_GetTick>
 8004648:	0002      	movs	r2, r0
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	18d3      	adds	r3, r2, r3
 8004652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004654:	f7fe f832 	bl	80026bc <HAL_GetTick>
 8004658:	0003      	movs	r3, r0
 800465a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800465c:	4b3a      	ldr	r3, [pc, #232]	; (8004748 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	015b      	lsls	r3, r3, #5
 8004662:	0d1b      	lsrs	r3, r3, #20
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	4353      	muls	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800466a:	e058      	b.n	800471e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	d055      	beq.n	800471e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004672:	f7fe f823 	bl	80026bc <HAL_GetTick>
 8004676:	0002      	movs	r2, r0
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	429a      	cmp	r2, r3
 8004680:	d902      	bls.n	8004688 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d142      	bne.n	800470e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	21e0      	movs	r1, #224	; 0xe0
 8004694:	438a      	bics	r2, r1
 8004696:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	2382      	movs	r3, #130	; 0x82
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d113      	bne.n	80046cc <SPI_WaitFlagStateUntilTimeout+0x98>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d005      	beq.n	80046bc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d107      	bne.n	80046cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2140      	movs	r1, #64	; 0x40
 80046c8:	438a      	bics	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	019b      	lsls	r3, r3, #6
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d110      	bne.n	80046fa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	491a      	ldr	r1, [pc, #104]	; (800474c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80046e4:	400a      	ands	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2180      	movs	r1, #128	; 0x80
 80046f4:	0189      	lsls	r1, r1, #6
 80046f6:	430a      	orrs	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2251      	movs	r2, #81	; 0x51
 80046fe:	2101      	movs	r1, #1
 8004700:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2250      	movs	r2, #80	; 0x50
 8004706:	2100      	movs	r1, #0
 8004708:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e017      	b.n	800473e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	3b01      	subs	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	4013      	ands	r3, r2
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	425a      	negs	r2, r3
 800472e:	4153      	adcs	r3, r2
 8004730:	b2db      	uxtb	r3, r3
 8004732:	001a      	movs	r2, r3
 8004734:	1dfb      	adds	r3, r7, #7
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d197      	bne.n	800466c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b008      	add	sp, #32
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	2000001c 	.word	0x2000001c
 800474c:	ffffdfff 	.word	0xffffdfff

08004750 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	2382      	movs	r3, #130	; 0x82
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	429a      	cmp	r2, r3
 8004766:	d113      	bne.n	8004790 <SPI_EndRxTransaction+0x40>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	429a      	cmp	r2, r3
 8004772:	d005      	beq.n	8004780 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	429a      	cmp	r2, r3
 800477e:	d107      	bne.n	8004790 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2140      	movs	r1, #64	; 0x40
 800478c:	438a      	bics	r2, r1
 800478e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	2382      	movs	r3, #130	; 0x82
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	429a      	cmp	r2, r3
 800479a:	d12b      	bne.n	80047f4 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d012      	beq.n	80047ce <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	0013      	movs	r3, r2
 80047b2:	2200      	movs	r2, #0
 80047b4:	2180      	movs	r1, #128	; 0x80
 80047b6:	f7ff ff3d 	bl	8004634 <SPI_WaitFlagStateUntilTimeout>
 80047ba:	1e03      	subs	r3, r0, #0
 80047bc:	d02d      	beq.n	800481a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	2220      	movs	r2, #32
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e026      	b.n	800481c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	0013      	movs	r3, r2
 80047d8:	2200      	movs	r2, #0
 80047da:	2101      	movs	r1, #1
 80047dc:	f7ff ff2a 	bl	8004634 <SPI_WaitFlagStateUntilTimeout>
 80047e0:	1e03      	subs	r3, r0, #0
 80047e2:	d01a      	beq.n	800481a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	2220      	movs	r2, #32
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e013      	b.n	800481c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	0013      	movs	r3, r2
 80047fe:	2200      	movs	r2, #0
 8004800:	2101      	movs	r1, #1
 8004802:	f7ff ff17 	bl	8004634 <SPI_WaitFlagStateUntilTimeout>
 8004806:	1e03      	subs	r3, r0, #0
 8004808:	d007      	beq.n	800481a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	2220      	movs	r2, #32
 8004810:	431a      	orrs	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e000      	b.n	800481c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b004      	add	sp, #16
 8004822:	bd80      	pop	{r7, pc}

08004824 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004830:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <SPI_EndRxTxTransaction+0x84>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	491d      	ldr	r1, [pc, #116]	; (80048ac <SPI_EndRxTxTransaction+0x88>)
 8004836:	0018      	movs	r0, r3
 8004838:	f7fb fc66 	bl	8000108 <__udivsi3>
 800483c:	0003      	movs	r3, r0
 800483e:	001a      	movs	r2, r3
 8004840:	0013      	movs	r3, r2
 8004842:	015b      	lsls	r3, r3, #5
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	189b      	adds	r3, r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	2382      	movs	r3, #130	; 0x82
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	429a      	cmp	r2, r3
 8004858:	d112      	bne.n	8004880 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	0013      	movs	r3, r2
 8004864:	2200      	movs	r2, #0
 8004866:	2180      	movs	r1, #128	; 0x80
 8004868:	f7ff fee4 	bl	8004634 <SPI_WaitFlagStateUntilTimeout>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d016      	beq.n	800489e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	2220      	movs	r2, #32
 8004876:	431a      	orrs	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e00f      	b.n	80048a0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	3b01      	subs	r3, #1
 800488a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	4013      	ands	r3, r2
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	d0f2      	beq.n	8004880 <SPI_EndRxTxTransaction+0x5c>
 800489a:	e000      	b.n	800489e <SPI_EndRxTxTransaction+0x7a>
        break;
 800489c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	0018      	movs	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b006      	add	sp, #24
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	2000001c 	.word	0x2000001c
 80048ac:	016e3600 	.word	0x016e3600

080048b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e044      	b.n	800494c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2274      	movs	r2, #116	; 0x74
 80048ce:	2100      	movs	r1, #0
 80048d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7fd fe1d 	bl	8002514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2224      	movs	r2, #36	; 0x24
 80048de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2101      	movs	r1, #1
 80048ec:	438a      	bics	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	0018      	movs	r0, r3
 80048f4:	f000 f8d8 	bl	8004aa8 <UART_SetConfig>
 80048f8:	0003      	movs	r3, r0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e024      	b.n	800494c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	0018      	movs	r0, r3
 800490e:	f000 fb6b 	bl	8004fe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	490d      	ldr	r1, [pc, #52]	; (8004954 <HAL_UART_Init+0xa4>)
 800491e:	400a      	ands	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	212a      	movs	r1, #42	; 0x2a
 800492e:	438a      	bics	r2, r1
 8004930:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	430a      	orrs	r2, r1
 8004940:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f000 fc03 	bl	8005150 <UART_CheckIdleState>
 800494a:	0003      	movs	r3, r0
}
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	b002      	add	sp, #8
 8004952:	bd80      	pop	{r7, pc}
 8004954:	ffffb7ff 	.word	0xffffb7ff

08004958 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08a      	sub	sp, #40	; 0x28
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	1dbb      	adds	r3, r7, #6
 8004966:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496c:	2b20      	cmp	r3, #32
 800496e:	d000      	beq.n	8004972 <HAL_UART_Transmit+0x1a>
 8004970:	e095      	b.n	8004a9e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_UART_Transmit+0x28>
 8004978:	1dbb      	adds	r3, r7, #6
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e08d      	b.n	8004aa0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	015b      	lsls	r3, r3, #5
 800498c:	429a      	cmp	r2, r3
 800498e:	d109      	bne.n	80049a4 <HAL_UART_Transmit+0x4c>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d105      	bne.n	80049a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2201      	movs	r2, #1
 800499c:	4013      	ands	r3, r2
 800499e:	d001      	beq.n	80049a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e07d      	b.n	8004aa0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2274      	movs	r2, #116	; 0x74
 80049a8:	5c9b      	ldrb	r3, [r3, r2]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Transmit+0x5a>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e076      	b.n	8004aa0 <HAL_UART_Transmit+0x148>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2274      	movs	r2, #116	; 0x74
 80049b6:	2101      	movs	r1, #1
 80049b8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2280      	movs	r2, #128	; 0x80
 80049be:	2100      	movs	r1, #0
 80049c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2221      	movs	r2, #33	; 0x21
 80049c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c8:	f7fd fe78 	bl	80026bc <HAL_GetTick>
 80049cc:	0003      	movs	r3, r0
 80049ce:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1dba      	adds	r2, r7, #6
 80049d4:	2150      	movs	r1, #80	; 0x50
 80049d6:	8812      	ldrh	r2, [r2, #0]
 80049d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1dba      	adds	r2, r7, #6
 80049de:	2152      	movs	r1, #82	; 0x52
 80049e0:	8812      	ldrh	r2, [r2, #0]
 80049e2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	015b      	lsls	r3, r3, #5
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d108      	bne.n	8004a02 <HAL_UART_Transmit+0xaa>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	e003      	b.n	8004a0a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2274      	movs	r2, #116	; 0x74
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004a12:	e02c      	b.n	8004a6e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	0013      	movs	r3, r2
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2180      	movs	r1, #128	; 0x80
 8004a22:	f000 fbdd 	bl	80051e0 <UART_WaitOnFlagUntilTimeout>
 8004a26:	1e03      	subs	r3, r0, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e038      	b.n	8004aa0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	001a      	movs	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	05d2      	lsls	r2, r2, #23
 8004a40:	0dd2      	lsrs	r2, r2, #23
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	3302      	adds	r3, #2
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	e007      	b.n	8004a5c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	781a      	ldrb	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2252      	movs	r2, #82	; 0x52
 8004a60:	5a9b      	ldrh	r3, [r3, r2]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b299      	uxth	r1, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2252      	movs	r2, #82	; 0x52
 8004a6c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2252      	movs	r2, #82	; 0x52
 8004a72:	5a9b      	ldrh	r3, [r3, r2]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1cc      	bne.n	8004a14 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	0013      	movs	r3, r2
 8004a84:	2200      	movs	r2, #0
 8004a86:	2140      	movs	r1, #64	; 0x40
 8004a88:	f000 fbaa 	bl	80051e0 <UART_WaitOnFlagUntilTimeout>
 8004a8c:	1e03      	subs	r3, r0, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e005      	b.n	8004aa0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e000      	b.n	8004aa0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
  }
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b008      	add	sp, #32
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	b5b0      	push	{r4, r5, r7, lr}
 8004aaa:	b08e      	sub	sp, #56	; 0x38
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab0:	231a      	movs	r3, #26
 8004ab2:	2218      	movs	r2, #24
 8004ab4:	4694      	mov	ip, r2
 8004ab6:	44bc      	add	ip, r7
 8004ab8:	4463      	add	r3, ip
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4ac1      	ldr	r2, [pc, #772]	; (8004de4 <UART_SetConfig+0x33c>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4abd      	ldr	r2, [pc, #756]	; (8004de8 <UART_SetConfig+0x340>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	0019      	movs	r1, r3
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4ab7      	ldr	r2, [pc, #732]	; (8004dec <UART_SetConfig+0x344>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4ab2      	ldr	r2, [pc, #712]	; (8004df0 <UART_SetConfig+0x348>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	0019      	movs	r1, r3
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b30:	430a      	orrs	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4aae      	ldr	r2, [pc, #696]	; (8004df4 <UART_SetConfig+0x34c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d136      	bne.n	8004bac <UART_SetConfig+0x104>
 8004b3e:	4bae      	ldr	r3, [pc, #696]	; (8004df8 <UART_SetConfig+0x350>)
 8004b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b42:	2203      	movs	r2, #3
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d020      	beq.n	8004b8c <UART_SetConfig+0xe4>
 8004b4a:	d827      	bhi.n	8004b9c <UART_SetConfig+0xf4>
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d00d      	beq.n	8004b6c <UART_SetConfig+0xc4>
 8004b50:	d824      	bhi.n	8004b9c <UART_SetConfig+0xf4>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <UART_SetConfig+0xb4>
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d010      	beq.n	8004b7c <UART_SetConfig+0xd4>
 8004b5a:	e01f      	b.n	8004b9c <UART_SetConfig+0xf4>
 8004b5c:	231b      	movs	r3, #27
 8004b5e:	2218      	movs	r2, #24
 8004b60:	4694      	mov	ip, r2
 8004b62:	44bc      	add	ip, r7
 8004b64:	4463      	add	r3, ip
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e0ab      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004b6c:	231b      	movs	r3, #27
 8004b6e:	2218      	movs	r2, #24
 8004b70:	4694      	mov	ip, r2
 8004b72:	44bc      	add	ip, r7
 8004b74:	4463      	add	r3, ip
 8004b76:	2202      	movs	r2, #2
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e0a3      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004b7c:	231b      	movs	r3, #27
 8004b7e:	2218      	movs	r2, #24
 8004b80:	4694      	mov	ip, r2
 8004b82:	44bc      	add	ip, r7
 8004b84:	4463      	add	r3, ip
 8004b86:	2204      	movs	r2, #4
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e09b      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004b8c:	231b      	movs	r3, #27
 8004b8e:	2218      	movs	r2, #24
 8004b90:	4694      	mov	ip, r2
 8004b92:	44bc      	add	ip, r7
 8004b94:	4463      	add	r3, ip
 8004b96:	2208      	movs	r2, #8
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	e093      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004b9c:	231b      	movs	r3, #27
 8004b9e:	2218      	movs	r2, #24
 8004ba0:	4694      	mov	ip, r2
 8004ba2:	44bc      	add	ip, r7
 8004ba4:	4463      	add	r3, ip
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e08b      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a92      	ldr	r2, [pc, #584]	; (8004dfc <UART_SetConfig+0x354>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d136      	bne.n	8004c24 <UART_SetConfig+0x17c>
 8004bb6:	4b90      	ldr	r3, [pc, #576]	; (8004df8 <UART_SetConfig+0x350>)
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bba:	220c      	movs	r2, #12
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d020      	beq.n	8004c04 <UART_SetConfig+0x15c>
 8004bc2:	d827      	bhi.n	8004c14 <UART_SetConfig+0x16c>
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d00d      	beq.n	8004be4 <UART_SetConfig+0x13c>
 8004bc8:	d824      	bhi.n	8004c14 <UART_SetConfig+0x16c>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <UART_SetConfig+0x12c>
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d010      	beq.n	8004bf4 <UART_SetConfig+0x14c>
 8004bd2:	e01f      	b.n	8004c14 <UART_SetConfig+0x16c>
 8004bd4:	231b      	movs	r3, #27
 8004bd6:	2218      	movs	r2, #24
 8004bd8:	4694      	mov	ip, r2
 8004bda:	44bc      	add	ip, r7
 8004bdc:	4463      	add	r3, ip
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e06f      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004be4:	231b      	movs	r3, #27
 8004be6:	2218      	movs	r2, #24
 8004be8:	4694      	mov	ip, r2
 8004bea:	44bc      	add	ip, r7
 8004bec:	4463      	add	r3, ip
 8004bee:	2202      	movs	r2, #2
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e067      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004bf4:	231b      	movs	r3, #27
 8004bf6:	2218      	movs	r2, #24
 8004bf8:	4694      	mov	ip, r2
 8004bfa:	44bc      	add	ip, r7
 8004bfc:	4463      	add	r3, ip
 8004bfe:	2204      	movs	r2, #4
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	e05f      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004c04:	231b      	movs	r3, #27
 8004c06:	2218      	movs	r2, #24
 8004c08:	4694      	mov	ip, r2
 8004c0a:	44bc      	add	ip, r7
 8004c0c:	4463      	add	r3, ip
 8004c0e:	2208      	movs	r2, #8
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	e057      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004c14:	231b      	movs	r3, #27
 8004c16:	2218      	movs	r2, #24
 8004c18:	4694      	mov	ip, r2
 8004c1a:	44bc      	add	ip, r7
 8004c1c:	4463      	add	r3, ip
 8004c1e:	2210      	movs	r2, #16
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	e04f      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a70      	ldr	r2, [pc, #448]	; (8004dec <UART_SetConfig+0x344>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d143      	bne.n	8004cb6 <UART_SetConfig+0x20e>
 8004c2e:	4b72      	ldr	r3, [pc, #456]	; (8004df8 <UART_SetConfig+0x350>)
 8004c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c32:	23c0      	movs	r3, #192	; 0xc0
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	4013      	ands	r3, r2
 8004c38:	22c0      	movs	r2, #192	; 0xc0
 8004c3a:	0112      	lsls	r2, r2, #4
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d02a      	beq.n	8004c96 <UART_SetConfig+0x1ee>
 8004c40:	22c0      	movs	r2, #192	; 0xc0
 8004c42:	0112      	lsls	r2, r2, #4
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d82e      	bhi.n	8004ca6 <UART_SetConfig+0x1fe>
 8004c48:	2280      	movs	r2, #128	; 0x80
 8004c4a:	0112      	lsls	r2, r2, #4
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d012      	beq.n	8004c76 <UART_SetConfig+0x1ce>
 8004c50:	2280      	movs	r2, #128	; 0x80
 8004c52:	0112      	lsls	r2, r2, #4
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d826      	bhi.n	8004ca6 <UART_SetConfig+0x1fe>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d004      	beq.n	8004c66 <UART_SetConfig+0x1be>
 8004c5c:	2280      	movs	r2, #128	; 0x80
 8004c5e:	00d2      	lsls	r2, r2, #3
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d010      	beq.n	8004c86 <UART_SetConfig+0x1de>
 8004c64:	e01f      	b.n	8004ca6 <UART_SetConfig+0x1fe>
 8004c66:	231b      	movs	r3, #27
 8004c68:	2218      	movs	r2, #24
 8004c6a:	4694      	mov	ip, r2
 8004c6c:	44bc      	add	ip, r7
 8004c6e:	4463      	add	r3, ip
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e026      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004c76:	231b      	movs	r3, #27
 8004c78:	2218      	movs	r2, #24
 8004c7a:	4694      	mov	ip, r2
 8004c7c:	44bc      	add	ip, r7
 8004c7e:	4463      	add	r3, ip
 8004c80:	2202      	movs	r2, #2
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e01e      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004c86:	231b      	movs	r3, #27
 8004c88:	2218      	movs	r2, #24
 8004c8a:	4694      	mov	ip, r2
 8004c8c:	44bc      	add	ip, r7
 8004c8e:	4463      	add	r3, ip
 8004c90:	2204      	movs	r2, #4
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e016      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004c96:	231b      	movs	r3, #27
 8004c98:	2218      	movs	r2, #24
 8004c9a:	4694      	mov	ip, r2
 8004c9c:	44bc      	add	ip, r7
 8004c9e:	4463      	add	r3, ip
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e00e      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004ca6:	231b      	movs	r3, #27
 8004ca8:	2218      	movs	r2, #24
 8004caa:	4694      	mov	ip, r2
 8004cac:	44bc      	add	ip, r7
 8004cae:	4463      	add	r3, ip
 8004cb0:	2210      	movs	r2, #16
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	e006      	b.n	8004cc4 <UART_SetConfig+0x21c>
 8004cb6:	231b      	movs	r3, #27
 8004cb8:	2218      	movs	r2, #24
 8004cba:	4694      	mov	ip, r2
 8004cbc:	44bc      	add	ip, r7
 8004cbe:	4463      	add	r3, ip
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a48      	ldr	r2, [pc, #288]	; (8004dec <UART_SetConfig+0x344>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d000      	beq.n	8004cd0 <UART_SetConfig+0x228>
 8004cce:	e09b      	b.n	8004e08 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cd0:	231b      	movs	r3, #27
 8004cd2:	2218      	movs	r2, #24
 8004cd4:	4694      	mov	ip, r2
 8004cd6:	44bc      	add	ip, r7
 8004cd8:	4463      	add	r3, ip
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d01d      	beq.n	8004d1c <UART_SetConfig+0x274>
 8004ce0:	dc20      	bgt.n	8004d24 <UART_SetConfig+0x27c>
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d015      	beq.n	8004d12 <UART_SetConfig+0x26a>
 8004ce6:	dc1d      	bgt.n	8004d24 <UART_SetConfig+0x27c>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <UART_SetConfig+0x24a>
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d005      	beq.n	8004cfc <UART_SetConfig+0x254>
 8004cf0:	e018      	b.n	8004d24 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf2:	f7fe fe43 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cfa:	e01d      	b.n	8004d38 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cfc:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <UART_SetConfig+0x350>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2210      	movs	r2, #16
 8004d02:	4013      	ands	r3, r2
 8004d04:	d002      	beq.n	8004d0c <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <UART_SetConfig+0x358>)
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d0a:	e015      	b.n	8004d38 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8004d0c:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <UART_SetConfig+0x35c>)
 8004d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d10:	e012      	b.n	8004d38 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d12:	f7fe fd83 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8004d16:	0003      	movs	r3, r0
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d1a:	e00d      	b.n	8004d38 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d22:	e009      	b.n	8004d38 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d28:	231a      	movs	r3, #26
 8004d2a:	2218      	movs	r2, #24
 8004d2c:	4694      	mov	ip, r2
 8004d2e:	44bc      	add	ip, r7
 8004d30:	4463      	add	r3, ip
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
        break;
 8004d36:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d100      	bne.n	8004d40 <UART_SetConfig+0x298>
 8004d3e:	e139      	b.n	8004fb4 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	0013      	movs	r3, r2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	189b      	adds	r3, r3, r2
 8004d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d305      	bcc.n	8004d5c <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d907      	bls.n	8004d6c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004d5c:	231a      	movs	r3, #26
 8004d5e:	2218      	movs	r2, #24
 8004d60:	4694      	mov	ip, r2
 8004d62:	44bc      	add	ip, r7
 8004d64:	4463      	add	r3, ip
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e123      	b.n	8004fb4 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	6939      	ldr	r1, [r7, #16]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	000b      	movs	r3, r1
 8004d7a:	0e1b      	lsrs	r3, r3, #24
 8004d7c:	0010      	movs	r0, r2
 8004d7e:	0205      	lsls	r5, r0, #8
 8004d80:	431d      	orrs	r5, r3
 8004d82:	000b      	movs	r3, r1
 8004d84:	021c      	lsls	r4, r3, #8
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68b8      	ldr	r0, [r7, #8]
 8004d94:	68f9      	ldr	r1, [r7, #12]
 8004d96:	1900      	adds	r0, r0, r4
 8004d98:	4169      	adcs	r1, r5
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	2300      	movs	r3, #0
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f7fb fa3a 	bl	8000220 <__aeabi_uldivmod>
 8004dac:	0002      	movs	r2, r0
 8004dae:	000b      	movs	r3, r1
 8004db0:	0013      	movs	r3, r2
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db6:	23c0      	movs	r3, #192	; 0xc0
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d309      	bcc.n	8004dd2 <UART_SetConfig+0x32a>
 8004dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	035b      	lsls	r3, r3, #13
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d204      	bcs.n	8004dd2 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	e0f0      	b.n	8004fb4 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004dd2:	231a      	movs	r3, #26
 8004dd4:	2218      	movs	r2, #24
 8004dd6:	4694      	mov	ip, r2
 8004dd8:	44bc      	add	ip, r7
 8004dda:	4463      	add	r3, ip
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e0e8      	b.n	8004fb4 <UART_SetConfig+0x50c>
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	efff69f3 	.word	0xefff69f3
 8004de8:	ffffcfff 	.word	0xffffcfff
 8004dec:	40004800 	.word	0x40004800
 8004df0:	fffff4ff 	.word	0xfffff4ff
 8004df4:	40013800 	.word	0x40013800
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40004400 	.word	0x40004400
 8004e00:	003d0900 	.word	0x003d0900
 8004e04:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d000      	beq.n	8004e16 <UART_SetConfig+0x36e>
 8004e14:	e074      	b.n	8004f00 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004e16:	231b      	movs	r3, #27
 8004e18:	2218      	movs	r2, #24
 8004e1a:	4694      	mov	ip, r2
 8004e1c:	44bc      	add	ip, r7
 8004e1e:	4463      	add	r3, ip
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d822      	bhi.n	8004e6c <UART_SetConfig+0x3c4>
 8004e26:	009a      	lsls	r2, r3, #2
 8004e28:	4b6a      	ldr	r3, [pc, #424]	; (8004fd4 <UART_SetConfig+0x52c>)
 8004e2a:	18d3      	adds	r3, r2, r3
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e30:	f7fe fda4 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8004e34:	0003      	movs	r3, r0
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e38:	e022      	b.n	8004e80 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e3a:	f7fe fdb5 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e42:	e01d      	b.n	8004e80 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e44:	4b64      	ldr	r3, [pc, #400]	; (8004fd8 <UART_SetConfig+0x530>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2210      	movs	r2, #16
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d002      	beq.n	8004e54 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004e4e:	4b63      	ldr	r3, [pc, #396]	; (8004fdc <UART_SetConfig+0x534>)
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e52:	e015      	b.n	8004e80 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8004e54:	4b62      	ldr	r3, [pc, #392]	; (8004fe0 <UART_SetConfig+0x538>)
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e58:	e012      	b.n	8004e80 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5a:	f7fe fcdf 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e62:	e00d      	b.n	8004e80 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e6a:	e009      	b.n	8004e80 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e70:	231a      	movs	r3, #26
 8004e72:	2218      	movs	r2, #24
 8004e74:	4694      	mov	ip, r2
 8004e76:	44bc      	add	ip, r7
 8004e78:	4463      	add	r3, ip
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
        break;
 8004e7e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d100      	bne.n	8004e88 <UART_SetConfig+0x3e0>
 8004e86:	e095      	b.n	8004fb4 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	005a      	lsls	r2, r3, #1
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	18d2      	adds	r2, r2, r3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	0019      	movs	r1, r3
 8004e9a:	0010      	movs	r0, r2
 8004e9c:	f7fb f934 	bl	8000108 <__udivsi3>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	2b0f      	cmp	r3, #15
 8004eaa:	d921      	bls.n	8004ef0 <UART_SetConfig+0x448>
 8004eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	025b      	lsls	r3, r3, #9
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d21c      	bcs.n	8004ef0 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	200e      	movs	r0, #14
 8004ebc:	2418      	movs	r4, #24
 8004ebe:	193b      	adds	r3, r7, r4
 8004ec0:	181b      	adds	r3, r3, r0
 8004ec2:	210f      	movs	r1, #15
 8004ec4:	438a      	bics	r2, r1
 8004ec6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2207      	movs	r2, #7
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	b299      	uxth	r1, r3
 8004ed4:	193b      	adds	r3, r7, r4
 8004ed6:	181b      	adds	r3, r3, r0
 8004ed8:	193a      	adds	r2, r7, r4
 8004eda:	1812      	adds	r2, r2, r0
 8004edc:	8812      	ldrh	r2, [r2, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	193a      	adds	r2, r7, r4
 8004ee8:	1812      	adds	r2, r2, r0
 8004eea:	8812      	ldrh	r2, [r2, #0]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	e061      	b.n	8004fb4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef0:	231a      	movs	r3, #26
 8004ef2:	2218      	movs	r2, #24
 8004ef4:	4694      	mov	ip, r2
 8004ef6:	44bc      	add	ip, r7
 8004ef8:	4463      	add	r3, ip
 8004efa:	2201      	movs	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	e059      	b.n	8004fb4 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f00:	231b      	movs	r3, #27
 8004f02:	2218      	movs	r2, #24
 8004f04:	4694      	mov	ip, r2
 8004f06:	44bc      	add	ip, r7
 8004f08:	4463      	add	r3, ip
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d822      	bhi.n	8004f56 <UART_SetConfig+0x4ae>
 8004f10:	009a      	lsls	r2, r3, #2
 8004f12:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <UART_SetConfig+0x53c>)
 8004f14:	18d3      	adds	r3, r2, r3
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f1a:	f7fe fd2f 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f22:	e022      	b.n	8004f6a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f24:	f7fe fd40 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f2c:	e01d      	b.n	8004f6a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f2e:	4b2a      	ldr	r3, [pc, #168]	; (8004fd8 <UART_SetConfig+0x530>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2210      	movs	r2, #16
 8004f34:	4013      	ands	r3, r2
 8004f36:	d002      	beq.n	8004f3e <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f38:	4b28      	ldr	r3, [pc, #160]	; (8004fdc <UART_SetConfig+0x534>)
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f3c:	e015      	b.n	8004f6a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004f3e:	4b28      	ldr	r3, [pc, #160]	; (8004fe0 <UART_SetConfig+0x538>)
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f42:	e012      	b.n	8004f6a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f44:	f7fe fc6a 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f4c:	e00d      	b.n	8004f6a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f54:	e009      	b.n	8004f6a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f5a:	231a      	movs	r3, #26
 8004f5c:	2218      	movs	r2, #24
 8004f5e:	4694      	mov	ip, r2
 8004f60:	44bc      	add	ip, r7
 8004f62:	4463      	add	r3, ip
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
        break;
 8004f68:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d021      	beq.n	8004fb4 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	085a      	lsrs	r2, r3, #1
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	18d2      	adds	r2, r2, r3
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	0019      	movs	r1, r3
 8004f80:	0010      	movs	r0, r2
 8004f82:	f7fb f8c1 	bl	8000108 <__udivsi3>
 8004f86:	0003      	movs	r3, r0
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	2b0f      	cmp	r3, #15
 8004f90:	d909      	bls.n	8004fa6 <UART_SetConfig+0x4fe>
 8004f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	025b      	lsls	r3, r3, #9
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d204      	bcs.n	8004fa6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	e006      	b.n	8004fb4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa6:	231a      	movs	r3, #26
 8004fa8:	2218      	movs	r2, #24
 8004faa:	4694      	mov	ip, r2
 8004fac:	44bc      	add	ip, r7
 8004fae:	4463      	add	r3, ip
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fc0:	231a      	movs	r3, #26
 8004fc2:	2218      	movs	r2, #24
 8004fc4:	4694      	mov	ip, r2
 8004fc6:	44bc      	add	ip, r7
 8004fc8:	4463      	add	r3, ip
 8004fca:	781b      	ldrb	r3, [r3, #0]
}
 8004fcc:	0018      	movs	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b00e      	add	sp, #56	; 0x38
 8004fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd4:	08005d5c 	.word	0x08005d5c
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	003d0900 	.word	0x003d0900
 8004fe0:	00f42400 	.word	0x00f42400
 8004fe4:	08005d80 	.word	0x08005d80

08004fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d00b      	beq.n	8005012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4a4a      	ldr	r2, [pc, #296]	; (800512c <UART_AdvFeatureConfig+0x144>)
 8005002:	4013      	ands	r3, r2
 8005004:	0019      	movs	r1, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2202      	movs	r2, #2
 8005018:	4013      	ands	r3, r2
 800501a:	d00b      	beq.n	8005034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4a43      	ldr	r2, [pc, #268]	; (8005130 <UART_AdvFeatureConfig+0x148>)
 8005024:	4013      	ands	r3, r2
 8005026:	0019      	movs	r1, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2204      	movs	r2, #4
 800503a:	4013      	ands	r3, r2
 800503c:	d00b      	beq.n	8005056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a3b      	ldr	r2, [pc, #236]	; (8005134 <UART_AdvFeatureConfig+0x14c>)
 8005046:	4013      	ands	r3, r2
 8005048:	0019      	movs	r1, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	2208      	movs	r2, #8
 800505c:	4013      	ands	r3, r2
 800505e:	d00b      	beq.n	8005078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4a34      	ldr	r2, [pc, #208]	; (8005138 <UART_AdvFeatureConfig+0x150>)
 8005068:	4013      	ands	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	2210      	movs	r2, #16
 800507e:	4013      	ands	r3, r2
 8005080:	d00b      	beq.n	800509a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4a2c      	ldr	r2, [pc, #176]	; (800513c <UART_AdvFeatureConfig+0x154>)
 800508a:	4013      	ands	r3, r2
 800508c:	0019      	movs	r1, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2220      	movs	r2, #32
 80050a0:	4013      	ands	r3, r2
 80050a2:	d00b      	beq.n	80050bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	4a25      	ldr	r2, [pc, #148]	; (8005140 <UART_AdvFeatureConfig+0x158>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	0019      	movs	r1, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2240      	movs	r2, #64	; 0x40
 80050c2:	4013      	ands	r3, r2
 80050c4:	d01d      	beq.n	8005102 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <UART_AdvFeatureConfig+0x15c>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	0019      	movs	r1, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	035b      	lsls	r3, r3, #13
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d10b      	bne.n	8005102 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4a15      	ldr	r2, [pc, #84]	; (8005148 <UART_AdvFeatureConfig+0x160>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2280      	movs	r2, #128	; 0x80
 8005108:	4013      	ands	r3, r2
 800510a:	d00b      	beq.n	8005124 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4a0e      	ldr	r2, [pc, #56]	; (800514c <UART_AdvFeatureConfig+0x164>)
 8005114:	4013      	ands	r3, r2
 8005116:	0019      	movs	r1, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
  }
}
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}
 800512c:	fffdffff 	.word	0xfffdffff
 8005130:	fffeffff 	.word	0xfffeffff
 8005134:	fffbffff 	.word	0xfffbffff
 8005138:	ffff7fff 	.word	0xffff7fff
 800513c:	ffffefff 	.word	0xffffefff
 8005140:	ffffdfff 	.word	0xffffdfff
 8005144:	ffefffff 	.word	0xffefffff
 8005148:	ff9fffff 	.word	0xff9fffff
 800514c:	fff7ffff 	.word	0xfff7ffff

08005150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af02      	add	r7, sp, #8
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2280      	movs	r2, #128	; 0x80
 800515c:	2100      	movs	r1, #0
 800515e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005160:	f7fd faac 	bl	80026bc <HAL_GetTick>
 8005164:	0003      	movs	r3, r0
 8005166:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2208      	movs	r2, #8
 8005170:	4013      	ands	r3, r2
 8005172:	2b08      	cmp	r3, #8
 8005174:	d10c      	bne.n	8005190 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2280      	movs	r2, #128	; 0x80
 800517a:	0391      	lsls	r1, r2, #14
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4a17      	ldr	r2, [pc, #92]	; (80051dc <UART_CheckIdleState+0x8c>)
 8005180:	9200      	str	r2, [sp, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	f000 f82c 	bl	80051e0 <UART_WaitOnFlagUntilTimeout>
 8005188:	1e03      	subs	r3, r0, #0
 800518a:	d001      	beq.n	8005190 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e021      	b.n	80051d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2204      	movs	r2, #4
 8005198:	4013      	ands	r3, r2
 800519a:	2b04      	cmp	r3, #4
 800519c:	d10c      	bne.n	80051b8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	03d1      	lsls	r1, r2, #15
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <UART_CheckIdleState+0x8c>)
 80051a8:	9200      	str	r2, [sp, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f000 f818 	bl	80051e0 <UART_WaitOnFlagUntilTimeout>
 80051b0:	1e03      	subs	r3, r0, #0
 80051b2:	d001      	beq.n	80051b8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e00d      	b.n	80051d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2274      	movs	r2, #116	; 0x74
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	0018      	movs	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b004      	add	sp, #16
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	01ffffff 	.word	0x01ffffff

080051e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	1dfb      	adds	r3, r7, #7
 80051ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f0:	e05e      	b.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	3301      	adds	r3, #1
 80051f6:	d05b      	beq.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f8:	f7fd fa60 	bl	80026bc <HAL_GetTick>
 80051fc:	0002      	movs	r2, r0
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d11b      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	492f      	ldr	r1, [pc, #188]	; (80052d8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800521a:	400a      	ands	r2, r1
 800521c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2101      	movs	r1, #1
 800522a:	438a      	bics	r2, r1
 800522c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2274      	movs	r2, #116	; 0x74
 800523e:	2100      	movs	r1, #0
 8005240:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e044      	b.n	80052d0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2204      	movs	r2, #4
 800524e:	4013      	ands	r3, r2
 8005250:	d02e      	beq.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	401a      	ands	r2, r3
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	429a      	cmp	r2, r3
 8005264:	d124      	bne.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2280      	movs	r2, #128	; 0x80
 800526c:	0112      	lsls	r2, r2, #4
 800526e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4917      	ldr	r1, [pc, #92]	; (80052d8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800527c:	400a      	ands	r2, r1
 800527e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2101      	movs	r1, #1
 800528c:	438a      	bics	r2, r1
 800528e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2280      	movs	r2, #128	; 0x80
 80052a0:	2120      	movs	r1, #32
 80052a2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2274      	movs	r2, #116	; 0x74
 80052a8:	2100      	movs	r1, #0
 80052aa:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e00f      	b.n	80052d0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	425a      	negs	r2, r3
 80052c0:	4153      	adcs	r3, r2
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	001a      	movs	r2, r3
 80052c6:	1dfb      	adds	r3, r7, #7
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d091      	beq.n	80051f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b004      	add	sp, #16
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	fffffe5f 	.word	0xfffffe5f

080052dc <__errno>:
 80052dc:	4b01      	ldr	r3, [pc, #4]	; (80052e4 <__errno+0x8>)
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	4770      	bx	lr
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	20000028 	.word	0x20000028

080052e8 <__libc_init_array>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	2600      	movs	r6, #0
 80052ec:	4d0c      	ldr	r5, [pc, #48]	; (8005320 <__libc_init_array+0x38>)
 80052ee:	4c0d      	ldr	r4, [pc, #52]	; (8005324 <__libc_init_array+0x3c>)
 80052f0:	1b64      	subs	r4, r4, r5
 80052f2:	10a4      	asrs	r4, r4, #2
 80052f4:	42a6      	cmp	r6, r4
 80052f6:	d109      	bne.n	800530c <__libc_init_array+0x24>
 80052f8:	2600      	movs	r6, #0
 80052fa:	f000 f8ad 	bl	8005458 <_init>
 80052fe:	4d0a      	ldr	r5, [pc, #40]	; (8005328 <__libc_init_array+0x40>)
 8005300:	4c0a      	ldr	r4, [pc, #40]	; (800532c <__libc_init_array+0x44>)
 8005302:	1b64      	subs	r4, r4, r5
 8005304:	10a4      	asrs	r4, r4, #2
 8005306:	42a6      	cmp	r6, r4
 8005308:	d105      	bne.n	8005316 <__libc_init_array+0x2e>
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	00b3      	lsls	r3, r6, #2
 800530e:	58eb      	ldr	r3, [r5, r3]
 8005310:	4798      	blx	r3
 8005312:	3601      	adds	r6, #1
 8005314:	e7ee      	b.n	80052f4 <__libc_init_array+0xc>
 8005316:	00b3      	lsls	r3, r6, #2
 8005318:	58eb      	ldr	r3, [r5, r3]
 800531a:	4798      	blx	r3
 800531c:	3601      	adds	r6, #1
 800531e:	e7f2      	b.n	8005306 <__libc_init_array+0x1e>
 8005320:	08005dac 	.word	0x08005dac
 8005324:	08005dac 	.word	0x08005dac
 8005328:	08005dac 	.word	0x08005dac
 800532c:	08005db0 	.word	0x08005db0

08005330 <malloc>:
 8005330:	b510      	push	{r4, lr}
 8005332:	4b03      	ldr	r3, [pc, #12]	; (8005340 <malloc+0x10>)
 8005334:	0001      	movs	r1, r0
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	f000 f80c 	bl	8005354 <_malloc_r>
 800533c:	bd10      	pop	{r4, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	20000028 	.word	0x20000028

08005344 <memset>:
 8005344:	0003      	movs	r3, r0
 8005346:	1882      	adds	r2, r0, r2
 8005348:	4293      	cmp	r3, r2
 800534a:	d100      	bne.n	800534e <memset+0xa>
 800534c:	4770      	bx	lr
 800534e:	7019      	strb	r1, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	e7f9      	b.n	8005348 <memset+0x4>

08005354 <_malloc_r>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	2303      	movs	r3, #3
 8005358:	1ccd      	adds	r5, r1, #3
 800535a:	439d      	bics	r5, r3
 800535c:	3508      	adds	r5, #8
 800535e:	0006      	movs	r6, r0
 8005360:	2d0c      	cmp	r5, #12
 8005362:	d21f      	bcs.n	80053a4 <_malloc_r+0x50>
 8005364:	250c      	movs	r5, #12
 8005366:	42a9      	cmp	r1, r5
 8005368:	d81e      	bhi.n	80053a8 <_malloc_r+0x54>
 800536a:	0030      	movs	r0, r6
 800536c:	f000 f862 	bl	8005434 <__malloc_lock>
 8005370:	4925      	ldr	r1, [pc, #148]	; (8005408 <_malloc_r+0xb4>)
 8005372:	680a      	ldr	r2, [r1, #0]
 8005374:	0014      	movs	r4, r2
 8005376:	2c00      	cmp	r4, #0
 8005378:	d11a      	bne.n	80053b0 <_malloc_r+0x5c>
 800537a:	4f24      	ldr	r7, [pc, #144]	; (800540c <_malloc_r+0xb8>)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <_malloc_r+0x38>
 8005382:	0021      	movs	r1, r4
 8005384:	0030      	movs	r0, r6
 8005386:	f000 f843 	bl	8005410 <_sbrk_r>
 800538a:	6038      	str	r0, [r7, #0]
 800538c:	0029      	movs	r1, r5
 800538e:	0030      	movs	r0, r6
 8005390:	f000 f83e 	bl	8005410 <_sbrk_r>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d12b      	bne.n	80053f0 <_malloc_r+0x9c>
 8005398:	230c      	movs	r3, #12
 800539a:	0030      	movs	r0, r6
 800539c:	6033      	str	r3, [r6, #0]
 800539e:	f000 f851 	bl	8005444 <__malloc_unlock>
 80053a2:	e003      	b.n	80053ac <_malloc_r+0x58>
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	dade      	bge.n	8005366 <_malloc_r+0x12>
 80053a8:	230c      	movs	r3, #12
 80053aa:	6033      	str	r3, [r6, #0]
 80053ac:	2000      	movs	r0, #0
 80053ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	1b5b      	subs	r3, r3, r5
 80053b4:	d419      	bmi.n	80053ea <_malloc_r+0x96>
 80053b6:	2b0b      	cmp	r3, #11
 80053b8:	d903      	bls.n	80053c2 <_malloc_r+0x6e>
 80053ba:	6023      	str	r3, [r4, #0]
 80053bc:	18e4      	adds	r4, r4, r3
 80053be:	6025      	str	r5, [r4, #0]
 80053c0:	e003      	b.n	80053ca <_malloc_r+0x76>
 80053c2:	6863      	ldr	r3, [r4, #4]
 80053c4:	42a2      	cmp	r2, r4
 80053c6:	d10e      	bne.n	80053e6 <_malloc_r+0x92>
 80053c8:	600b      	str	r3, [r1, #0]
 80053ca:	0030      	movs	r0, r6
 80053cc:	f000 f83a 	bl	8005444 <__malloc_unlock>
 80053d0:	0020      	movs	r0, r4
 80053d2:	2207      	movs	r2, #7
 80053d4:	300b      	adds	r0, #11
 80053d6:	1d23      	adds	r3, r4, #4
 80053d8:	4390      	bics	r0, r2
 80053da:	1ac2      	subs	r2, r0, r3
 80053dc:	4298      	cmp	r0, r3
 80053de:	d0e6      	beq.n	80053ae <_malloc_r+0x5a>
 80053e0:	1a1b      	subs	r3, r3, r0
 80053e2:	50a3      	str	r3, [r4, r2]
 80053e4:	e7e3      	b.n	80053ae <_malloc_r+0x5a>
 80053e6:	6053      	str	r3, [r2, #4]
 80053e8:	e7ef      	b.n	80053ca <_malloc_r+0x76>
 80053ea:	0022      	movs	r2, r4
 80053ec:	6864      	ldr	r4, [r4, #4]
 80053ee:	e7c2      	b.n	8005376 <_malloc_r+0x22>
 80053f0:	2303      	movs	r3, #3
 80053f2:	1cc4      	adds	r4, r0, #3
 80053f4:	439c      	bics	r4, r3
 80053f6:	42a0      	cmp	r0, r4
 80053f8:	d0e1      	beq.n	80053be <_malloc_r+0x6a>
 80053fa:	1a21      	subs	r1, r4, r0
 80053fc:	0030      	movs	r0, r6
 80053fe:	f000 f807 	bl	8005410 <_sbrk_r>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	d1db      	bne.n	80053be <_malloc_r+0x6a>
 8005406:	e7c7      	b.n	8005398 <_malloc_r+0x44>
 8005408:	200000f8 	.word	0x200000f8
 800540c:	200000fc 	.word	0x200000fc

08005410 <_sbrk_r>:
 8005410:	2300      	movs	r3, #0
 8005412:	b570      	push	{r4, r5, r6, lr}
 8005414:	4d06      	ldr	r5, [pc, #24]	; (8005430 <_sbrk_r+0x20>)
 8005416:	0004      	movs	r4, r0
 8005418:	0008      	movs	r0, r1
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	f7fd f80e 	bl	800243c <_sbrk>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d103      	bne.n	800542c <_sbrk_r+0x1c>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d000      	beq.n	800542c <_sbrk_r+0x1c>
 800542a:	6023      	str	r3, [r4, #0]
 800542c:	bd70      	pop	{r4, r5, r6, pc}
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	2000024c 	.word	0x2000024c

08005434 <__malloc_lock>:
 8005434:	b510      	push	{r4, lr}
 8005436:	4802      	ldr	r0, [pc, #8]	; (8005440 <__malloc_lock+0xc>)
 8005438:	f000 f80c 	bl	8005454 <__retarget_lock_acquire_recursive>
 800543c:	bd10      	pop	{r4, pc}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	20000254 	.word	0x20000254

08005444 <__malloc_unlock>:
 8005444:	b510      	push	{r4, lr}
 8005446:	4802      	ldr	r0, [pc, #8]	; (8005450 <__malloc_unlock+0xc>)
 8005448:	f000 f805 	bl	8005456 <__retarget_lock_release_recursive>
 800544c:	bd10      	pop	{r4, pc}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	20000254 	.word	0x20000254

08005454 <__retarget_lock_acquire_recursive>:
 8005454:	4770      	bx	lr

08005456 <__retarget_lock_release_recursive>:
 8005456:	4770      	bx	lr

08005458 <_init>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545e:	bc08      	pop	{r3}
 8005460:	469e      	mov	lr, r3
 8005462:	4770      	bx	lr

08005464 <_fini>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546a:	bc08      	pop	{r3}
 800546c:	469e      	mov	lr, r3
 800546e:	4770      	bx	lr
