
ece477-epd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000554c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000203c  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007648  08007648  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08007648  08007648  00017648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007650  08007650  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000008c  080076e4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080076e4  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001029a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a7b  00000000  00000000  0003034e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00032dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00033c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014737  00000000  00000000  00034968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011efc  00000000  00000000  0004909f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a6c3  00000000  00000000  0005af9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d565e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f8  00000000  00000000  000d56b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080055f4 	.word	0x080055f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	080055f4 	.word	0x080055f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8d8 	bl	8000484 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8d3 	bl	8000484 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzsi2>:
 8000448:	211c      	movs	r1, #28
 800044a:	2301      	movs	r3, #1
 800044c:	041b      	lsls	r3, r3, #16
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0xe>
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	3910      	subs	r1, #16
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	4298      	cmp	r0, r3
 800045a:	d301      	bcc.n	8000460 <__clzsi2+0x18>
 800045c:	0a00      	lsrs	r0, r0, #8
 800045e:	3908      	subs	r1, #8
 8000460:	091b      	lsrs	r3, r3, #4
 8000462:	4298      	cmp	r0, r3
 8000464:	d301      	bcc.n	800046a <__clzsi2+0x22>
 8000466:	0900      	lsrs	r0, r0, #4
 8000468:	3904      	subs	r1, #4
 800046a:	a202      	add	r2, pc, #8	; (adr r2, 8000474 <__clzsi2+0x2c>)
 800046c:	5c10      	ldrb	r0, [r2, r0]
 800046e:	1840      	adds	r0, r0, r1
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	02020304 	.word	0x02020304
 8000478:	01010101 	.word	0x01010101
	...

08000484 <__clzdi2>:
 8000484:	b510      	push	{r4, lr}
 8000486:	2900      	cmp	r1, #0
 8000488:	d103      	bne.n	8000492 <__clzdi2+0xe>
 800048a:	f7ff ffdd 	bl	8000448 <__clzsi2>
 800048e:	3020      	adds	r0, #32
 8000490:	e002      	b.n	8000498 <__clzdi2+0x14>
 8000492:	1c08      	adds	r0, r1, #0
 8000494:	f7ff ffd8 	bl	8000448 <__clzsi2>
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <epd_command>:
    @brief This function sends an EPD command with no data
    @param c    The command to send
    @param end  If true, the CS pin will be pulled high following the transaction. Pass true for Adafruit functions that don't define it during call!
    @return     A byte of data read back from the EPD.
*/
uint8_t epd_command(uint8_t c, bool end) {
 800049c:	b5b0      	push	{r4, r5, r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	0002      	movs	r2, r0
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	1dbb      	adds	r3, r7, #6
 80004aa:	1c0a      	adds	r2, r1, #0
 80004ac:	701a      	strb	r2, [r3, #0]
    EPD_CS_HIGH;    // Ensure the CS pin is high before starting the transaction
 80004ae:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <epd_command+0xc8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	2140      	movs	r1, #64	; 0x40
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 fc27 	bl	8002d08 <HAL_GPIO_WritePin>
    EPD_DC_LOW;     // Set DC low to indicate that a command is being sent
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <epd_command+0xcc>)
 80004bc:	2200      	movs	r2, #0
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 fc21 	bl	8002d08 <HAL_GPIO_WritePin>
    EPD_CS_LOW;     // Set CS low to indicate the start of the transaction
 80004c6:	4b27      	ldr	r3, [pc, #156]	; (8000564 <epd_command+0xc8>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	2140      	movs	r1, #64	; 0x40
 80004cc:	0018      	movs	r0, r3
 80004ce:	f002 fc1b 	bl	8002d08 <HAL_GPIO_WritePin>

    uint8_t rxData;
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&EPD_SPI, &c, &rxData, 1, HAL_MAX_DELAY);
 80004d2:	2517      	movs	r5, #23
 80004d4:	197c      	adds	r4, r7, r5
 80004d6:	230f      	movs	r3, #15
 80004d8:	18fa      	adds	r2, r7, r3
 80004da:	1df9      	adds	r1, r7, #7
 80004dc:	4823      	ldr	r0, [pc, #140]	; (800056c <epd_command+0xd0>)
 80004de:	2301      	movs	r3, #1
 80004e0:	425b      	negs	r3, r3
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2301      	movs	r3, #1
 80004e6:	f003 ffb7 	bl	8004458 <HAL_SPI_TransmitReceive>
 80004ea:	0003      	movs	r3, r0
 80004ec:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) {
 80004ee:	197b      	adds	r3, r7, r5
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d024      	beq.n	8000540 <epd_command+0xa4>
        char *err;
        switch (status) {
 80004f6:	197b      	adds	r3, r7, r5
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d00b      	beq.n	8000516 <epd_command+0x7a>
 80004fe:	dc18      	bgt.n	8000532 <epd_command+0x96>
 8000500:	2b01      	cmp	r3, #1
 8000502:	d00f      	beq.n	8000524 <epd_command+0x88>
 8000504:	2b02      	cmp	r3, #2
 8000506:	d114      	bne.n	8000532 <epd_command+0x96>
            case HAL_BUSY:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_BUSY";
 8000508:	4b19      	ldr	r3, [pc, #100]	; (8000570 <epd_command+0xd4>)
 800050a:	613b      	str	r3, [r7, #16]
                serial_println(err);
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fd38 	bl	8001f84 <serial_println>
                break;
 8000514:	e015      	b.n	8000542 <epd_command+0xa6>
            case HAL_TIMEOUT:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_TIMEOUT";
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <epd_command+0xd8>)
 8000518:	613b      	str	r3, [r7, #16]
                serial_println(err);
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fd31 	bl	8001f84 <serial_println>
                break;
 8000522:	e00e      	b.n	8000542 <epd_command+0xa6>
            case HAL_ERROR:
                err = "EPD_COMMAND: FAILED TO TX/RX - HAL_ERROR";
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <epd_command+0xdc>)
 8000526:	613b      	str	r3, [r7, #16]
                serial_println(err);
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	0018      	movs	r0, r3
 800052c:	f001 fd2a 	bl	8001f84 <serial_println>
                break;
 8000530:	e007      	b.n	8000542 <epd_command+0xa6>
            default:
                err = "EPD_COMMAND: FAILED TO TX/RX - UNKNOWN ERROR";
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <epd_command+0xe0>)
 8000534:	613b      	str	r3, [r7, #16]
                serial_println(err);
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fd23 	bl	8001f84 <serial_println>
                break;
 800053e:	e000      	b.n	8000542 <epd_command+0xa6>
        }
    }
 8000540:	46c0      	nop			; (mov r8, r8)

    if (end) {
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <epd_command+0xba>
        EPD_CS_HIGH;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <epd_command+0xc8>)
 800054c:	2201      	movs	r2, #1
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	0018      	movs	r0, r3
 8000552:	f002 fbd9 	bl	8002d08 <HAL_GPIO_WritePin>
    }

    return rxData;
 8000556:	230f      	movs	r3, #15
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	781b      	ldrb	r3, [r3, #0]
}
 800055c:	0018      	movs	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	b006      	add	sp, #24
 8000562:	bdb0      	pop	{r4, r5, r7, pc}
 8000564:	50000400 	.word	0x50000400
 8000568:	50000800 	.word	0x50000800
 800056c:	2000016c 	.word	0x2000016c
 8000570:	0800560c 	.word	0x0800560c
 8000574:	08005634 	.word	0x08005634
 8000578:	08005660 	.word	0x08005660
 800057c:	0800568c 	.word	0x0800568c

08000580 <epd_data>:
/*!
    @brief This function sends data to the EPD for an ONGOING transaction
    @param buf the buffer of data to send
    @param len the length of the data buffer
*/
void epd_data(const uint8_t *buf, uint16_t len) {
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	000a      	movs	r2, r1
 800058a:	1cbb      	adds	r3, r7, #2
 800058c:	801a      	strh	r2, [r3, #0]
    EPD_DC_HIGH;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <epd_data+0x40>)
 8000590:	2201      	movs	r2, #1
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	0018      	movs	r0, r3
 8000596:	f002 fbb7 	bl	8002d08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&EPD_SPI, buf, len, HAL_MAX_DELAY);
 800059a:	2301      	movs	r3, #1
 800059c:	425c      	negs	r4, r3
 800059e:	1cbb      	adds	r3, r7, #2
 80005a0:	881a      	ldrh	r2, [r3, #0]
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <epd_data+0x44>)
 80005a6:	0023      	movs	r3, r4
 80005a8:	f003 fcda 	bl	8003f60 <HAL_SPI_Transmit>
    EPD_CS_HIGH;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <epd_data+0x48>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	2140      	movs	r1, #64	; 0x40
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 fba8 	bl	8002d08 <HAL_GPIO_WritePin>
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b003      	add	sp, #12
 80005be:	bd90      	pop	{r4, r7, pc}
 80005c0:	50000800 	.word	0x50000800
 80005c4:	2000016c 	.word	0x2000016c
 80005c8:	50000400 	.word	0x50000400

080005cc <epd_pCommand>:
    @brief This function sends an EPD command with data
    @param c the command to send
    @param buf the buffer of data to send
    @param len the length of the data buffer
*/
void epd_pCommand(uint8_t c, const uint8_t *buf, uint16_t len) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6039      	str	r1, [r7, #0]
 80005d4:	0011      	movs	r1, r2
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	1c02      	adds	r2, r0, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	1c0a      	adds	r2, r1, #0
 80005e0:	801a      	strh	r2, [r3, #0]
    epd_command(c, false);
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2100      	movs	r1, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff ff57 	bl	800049c <epd_command>
    epd_data(buf, len);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	881a      	ldrh	r2, [r3, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	0011      	movs	r1, r2
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff ffc2 	bl	8000580 <epd_data>
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}

08000604 <epd_commandList>:

/*!
 * @brief This function is used by epd_powerUp() to send over the display initialization code
 * @param init_code
 */
void epd_commandList(const uint8_t *init_code) {
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b095      	sub	sp, #84	; 0x54
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    uint8_t buf[64];

    while (*init_code != 0xFE) {
 800060c:	e03d      	b.n	800068a <epd_commandList+0x86>
        uint8_t cmd = *init_code;
 800060e:	214b      	movs	r1, #75	; 0x4b
 8000610:	187b      	adds	r3, r7, r1
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7812      	ldrb	r2, [r2, #0]
 8000616:	701a      	strb	r2, [r3, #0]
        init_code++;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
        uint8_t num_args = *init_code;
 800061e:	244a      	movs	r4, #74	; 0x4a
 8000620:	193b      	adds	r3, r7, r4
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	701a      	strb	r2, [r3, #0]
        init_code++;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
        if (cmd == 0xFF) {
 800062e:	187b      	adds	r3, r7, r1
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2bff      	cmp	r3, #255	; 0xff
 8000634:	d107      	bne.n	8000646 <epd_commandList+0x42>
            epd_busy();
 8000636:	f000 f836 	bl	80006a6 <epd_busy>
            HAL_Delay(num_args);
 800063a:	193b      	adds	r3, r7, r4
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	0018      	movs	r0, r3
 8000640:	f002 f914 	bl	800286c <HAL_Delay>
            continue;
 8000644:	e021      	b.n	800068a <epd_commandList+0x86>
//            while (1) {
//                HAL_Delay(HAL_MAX_DELAY);
//            }
//        }

        for (int i = 0; i < num_args; i++) {
 8000646:	2300      	movs	r3, #0
 8000648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800064a:	e00d      	b.n	8000668 <epd_commandList+0x64>
            buf[i] = *init_code;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	7819      	ldrb	r1, [r3, #0]
 8000650:	2308      	movs	r3, #8
 8000652:	18fa      	adds	r2, r7, r3
 8000654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000656:	18d3      	adds	r3, r2, r3
 8000658:	1c0a      	adds	r2, r1, #0
 800065a:	701a      	strb	r2, [r3, #0]
            init_code++;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
        for (int i = 0; i < num_args; i++) {
 8000662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000664:	3301      	adds	r3, #1
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000668:	214a      	movs	r1, #74	; 0x4a
 800066a:	187b      	adds	r3, r7, r1
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000670:	429a      	cmp	r2, r3
 8000672:	dbeb      	blt.n	800064c <epd_commandList+0x48>
        }

        epd_pCommand(cmd, buf, num_args);
 8000674:	187b      	adds	r3, r7, r1
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b29a      	uxth	r2, r3
 800067a:	2308      	movs	r3, #8
 800067c:	18f9      	adds	r1, r7, r3
 800067e:	234b      	movs	r3, #75	; 0x4b
 8000680:	18fb      	adds	r3, r7, r3
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff ffa1 	bl	80005cc <epd_pCommand>
    while (*init_code != 0xFE) {
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2bfe      	cmp	r3, #254	; 0xfe
 8000690:	d1bd      	bne.n	800060e <epd_commandList+0xa>
    }
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b015      	add	sp, #84	; 0x54
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <epd_reset>:

/*!
 * @brief This function performs a hardware reset on the display if EPD_NRST_PIN is defined
 */
void epd_reset() {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
        HAL_Delay(10);
        HAL_GPIO_WritePin(EPD_NRST_GPIO_Port, EPD_NRST_Pin, GPIO_PIN_SET);
        HAL_Delay(10);
    }
#endif
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <epd_busy>:

/*!
 * @brief If EPD_BUSY_Pin is defined, this function blocks execution while the EPD is busy. Else, it simply waits.
 */
void epd_busy() {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
        }
    } else {
        HAL_Delay(BUSY_WAIT);
    }
#else
    HAL_Delay(BUSY_WAIT);
 80006aa:	23fa      	movs	r3, #250	; 0xfa
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	0018      	movs	r0, r3
 80006b0:	f002 f8dc 	bl	800286c <HAL_Delay>
#endif
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <epd_update>:

/*!
 * @brief This function sends the display refresh command to the EPD
 */
void epd_update() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    epd_command(IL91874_DISPLAY_REFRESH, true);
 80006c0:	2101      	movs	r1, #1
 80006c2:	2012      	movs	r0, #18
 80006c4:	f7ff feea 	bl	800049c <epd_command>
    HAL_Delay(100);
 80006c8:	2064      	movs	r0, #100	; 0x64
 80006ca:	f002 f8cf 	bl	800286c <HAL_Delay>
    epd_busy();
 80006ce:	f7ff ffea 	bl	80006a6 <epd_busy>
    if (!use_busy) {
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <epd_update+0x34>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4053      	eors	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <epd_update+0x2c>
        HAL_Delay(REFRESH_WAIT);
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <epd_update+0x38>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f002 f8c2 	bl	800286c <HAL_Delay>
    }
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	200000a9 	.word	0x200000a9
 80006f4:	000032c8 	.word	0x000032c8

080006f8 <epd_powerUp>:

/*!
 * @brief This function performs the EPD power on sequence.
 */
void epd_powerUp() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
    uint8_t buf[5];

    epd_reset();  // TODO: Implement this later for future use. Would be helpful to have.
 80006fe:	f7ff ffcd 	bl	800069c <epd_reset>
    HAL_Delay(200);
 8000702:	20c8      	movs	r0, #200	; 0xc8
 8000704:	f002 f8b2 	bl	800286c <HAL_Delay>
    const uint8_t *init_code = epd_init_code;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <epd_powerUp+0x5c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	60fb      	str	r3, [r7, #12]

    epd_commandList(init_code);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff ff77 	bl	8000604 <epd_commandList>

    buf[0] = (EPD_HEIGHT >> 8) & 0xFF;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
    buf[1] = EPD_HEIGHT & 0xFF;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	22b0      	movs	r2, #176	; 0xb0
 8000720:	705a      	strb	r2, [r3, #1]
    buf[2] = (EPD_WIDTH >> 8) & 0xFF;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2201      	movs	r2, #1
 8000726:	709a      	strb	r2, [r3, #2]
    buf[3] = EPD_WIDTH & 0xFF;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2208      	movs	r2, #8
 800072c:	70da      	strb	r2, [r3, #3]
    epd_pCommand(IL91874_RESOLUTION, buf, 4);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2204      	movs	r2, #4
 8000732:	0019      	movs	r1, r3
 8000734:	2061      	movs	r0, #97	; 0x61
 8000736:	f7ff ff49 	bl	80005cc <epd_pCommand>

    buf[0] = 0x00;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
    epd_pCommand(IL91874_PDRF, buf, 1);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2201      	movs	r2, #1
 8000744:	0019      	movs	r1, r3
 8000746:	2016      	movs	r0, #22
 8000748:	f7ff ff40 	bl	80005cc <epd_pCommand>
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b004      	add	sp, #16
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000b0 	.word	0x200000b0

08000758 <epd_powerDown>:

/*!
 * @brief This function performs the EPD power down sequence.
 *          If EPD_NRST_Pin is defined, the EPD will be put in a deep sleep mode to further conserve power.
 */
void epd_powerDown() {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
    uint8_t buf[1];

    buf[0] = 0xF7;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	22f7      	movs	r2, #247	; 0xf7
 8000762:	701a      	strb	r2, [r3, #0]
    epd_pCommand(IL91874_CDI, buf, 1);
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2201      	movs	r2, #1
 8000768:	0019      	movs	r1, r3
 800076a:	2050      	movs	r0, #80	; 0x50
 800076c:	f7ff ff2e 	bl	80005cc <epd_pCommand>

    // power off
    epd_command(IL91874_POWER_OFF, true);
 8000770:	2101      	movs	r1, #1
 8000772:	2002      	movs	r0, #2
 8000774:	f7ff fe92 	bl	800049c <epd_command>
    epd_busy();
 8000778:	f7ff ff95 	bl	80006a6 <epd_busy>

    // Only deep sleep if we can get out of it
    if (use_nrst) {
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <epd_powerDown+0x48>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d008      	beq.n	8000796 <epd_powerDown+0x3e>
        buf[0] = 0xA5;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	22a5      	movs	r2, #165	; 0xa5
 8000788:	701a      	strb	r2, [r3, #0]
        epd_pCommand(IL91874_DEEP_SLEEP, buf, 1);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2201      	movs	r2, #1
 800078e:	0019      	movs	r1, r3
 8000790:	2007      	movs	r0, #7
 8000792:	f7ff ff1b 	bl	80005cc <epd_pCommand>
    }
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	200000a8 	.word	0x200000a8

080007a4 <epd_writeRAMcommand>:
/*!
 * @brief This function sends the relevant display draw command to either draw in B/W or Color
 * @param index     Set to 0 for black and white drawing. Set to 1 for color drawing.
 * @return          A byte of data from the EPD.
 */
uint8_t epd_writeRAMcommand(uint8_t index) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	701a      	strb	r2, [r3, #0]
    if (index == 0) {
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d105      	bne.n	80007c4 <epd_writeRAMcommand+0x20>
        return epd_command(EPD_RAM_BW, false);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2010      	movs	r0, #16
 80007bc:	f7ff fe6e 	bl	800049c <epd_command>
 80007c0:	0003      	movs	r3, r0
 80007c2:	e00a      	b.n	80007da <epd_writeRAMcommand+0x36>
    }
    if (index == 1) {
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d105      	bne.n	80007d8 <epd_writeRAMcommand+0x34>
        return epd_command(EPD_RAM_RED, false);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2013      	movs	r0, #19
 80007d0:	f7ff fe64 	bl	800049c <epd_command>
 80007d4:	0003      	movs	r3, r0
 80007d6:	e000      	b.n	80007da <epd_writeRAMcommand+0x36>
    }

    return 0;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	0018      	movs	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <set_black_buffer>:
 * @brief This function sets the global variables for black buffer. Can be used to swap buffers b/t colors.
 *          NOTE: Ability to swap buffers requires that EPD_USE_COLOR be defined.
 * @param index     The buffer to select for black.
 * @param inverted  Whether or not to treat the colors in the buffer as inverted.
 */
void set_black_buffer(int8_t index, bool inverted) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	1c0a      	adds	r2, r1, #0
 80007f4:	701a      	strb	r2, [r3, #0]
    if (index == 0) {
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10c      	bne.n	800081a <set_black_buffer+0x36>
        if (use_sram) {
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <set_black_buffer+0x48>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d004      	beq.n	8000812 <set_black_buffer+0x2e>
            black_buffer_addr = buffer1_addr;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <set_black_buffer+0x4c>)
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <set_black_buffer+0x50>)
 800080e:	801a      	strh	r2, [r3, #0]
 8000810:	e003      	b.n	800081a <set_black_buffer+0x36>
        } else {
            black_buffer = buffer1;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <set_black_buffer+0x54>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <set_black_buffer+0x58>)
 8000818:	601a      	str	r2, [r3, #0]
        } else {
            black_buffer = buffer2;
        }
    }
#endif
    black_buffer_inverted = inverted;
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <set_black_buffer+0x5c>)
 800081c:	1dba      	adds	r2, r7, #6
 800081e:	7812      	ldrb	r2, [r2, #0]
 8000820:	701a      	strb	r2, [r3, #0]
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	20000000 	.word	0x20000000
 8000830:	20000104 	.word	0x20000104
 8000834:	20000102 	.word	0x20000102
 8000838:	2000010c 	.word	0x2000010c
 800083c:	20000110 	.word	0x20000110
 8000840:	200000ab 	.word	0x200000ab

08000844 <epd_init>:

/*!
 * @brief This function performs the initialization sequence for the EPD.
 * @param sram_enabled  A boolean that indicates whether or not the use the EPD's external SRAM module.
 */
void epd_init(bool sram_enabled) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	0002      	movs	r2, r0
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	701a      	strb	r2, [r3, #0]
    buffer1_size = ((uint32_t) EPD_WIDTH * (uint32_t) EPD_HEIGHT) / 8;  // Calculate the (first) buffer's size
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <epd_init+0xbc>)
 8000852:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <epd_init+0xc0>)
 8000854:	601a      	str	r2, [r3, #0]
    use_sram = sram_enabled;                                            // Set the SRAM usage flag
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <epd_init+0xc4>)
 8000858:	1dfa      	adds	r2, r7, #7
 800085a:	7812      	ldrb	r2, [r2, #0]
 800085c:	701a      	strb	r2, [r3, #0]
    } else {                                        // Set up buffers for MCU RAM usage
        buffer1 = (uint8_t *) malloc(buffer1_size); // First buffer's address
        buffer2 = (uint8_t *) malloc(buffer2_size); // Second buffer's address
    }
#else
    if (use_sram) {         // Set up the buffer for SRAM usage
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <epd_init+0xc4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d006      	beq.n	8000874 <epd_init+0x30>
        buffer1_addr = 0;   // The buffer's address
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <epd_init+0xc8>)
 8000868:	2200      	movs	r2, #0
 800086a:	801a      	strh	r2, [r3, #0]
        buffer1 = NULL;     // Set MCU RAM buffer pointer to NULL
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <epd_init+0xcc>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	e008      	b.n	8000886 <epd_init+0x42>
    } else {                                        // Set up buffer for MCU RAM usage
        buffer1 = (uint8_t *) malloc(buffer1_size); // The buffer's address
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <epd_init+0xbc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	0018      	movs	r0, r3
 800087a:	f004 fe27 	bl	80054cc <malloc>
 800087e:	0003      	movs	r3, r0
 8000880:	001a      	movs	r2, r3
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <epd_init+0xcc>)
 8000884:	601a      	str	r2, [r3, #0]
    }
#endif

    single_byte_tx = true;  // Seems like this EPD requires CS to go high b/t each byte, ergo single byte transactions
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <epd_init+0xd0>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]

    if (use_sram) { // If using SRAM, set the SRAM module to run in sequential mode
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <epd_init+0xc4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <epd_init+0x5a>
        sram_write8(0, K640_SEQUENTIAL_MODE, MCPSRAM_WRSR);
 8000894:	2201      	movs	r2, #1
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	2000      	movs	r0, #0
 800089a:	f001 fdf4 	bl	8002486 <sram_write8>
    }

    EPD_CS_HIGH;                                // Make sure CS starts high.
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <epd_init+0xd4>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 fa2f 	bl	8002d08 <HAL_GPIO_WritePin>
    epd_reset();                                // reset the display, if at all possible.
 80008aa:	f7ff fef7 	bl	800069c <epd_reset>
    epd_powerDown();                            // Turn off the display.
 80008ae:	f7ff ff53 	bl	8000758 <epd_powerDown>
    epd_init_code = ti_270c44_tri_init_code;    // Set the pointer to the correct initialization code.
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <epd_init+0xd8>)
 80008b4:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <epd_init+0xdc>)
 80008b6:	601a      	str	r2, [r3, #0]

    // Setup the black and color buffers to buffer1 and buffer2 respectively
    set_black_buffer(0, false);
 80008b8:	2100      	movs	r1, #0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ff92 	bl	80007e4 <set_black_buffer>
#ifdef EPD_USE_COLOR
    set_color_buffer(1, false);
#endif

    // Initialize layer_colors[] LUT
    layer_colors[EPD_WHITE] = 0b00;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <epd_init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
    layer_colors[EPD_BLACK] = 0b01;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <epd_init+0xe0>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	705a      	strb	r2, [r3, #1]
    layer_colors[EPD_RED] = 0b10;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <epd_init+0xe0>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	709a      	strb	r2, [r3, #2]
    layer_colors[EPD_GRAY] = 0b10;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <epd_init+0xe0>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	70da      	strb	r2, [r3, #3]
    layer_colors[EPD_LIGHT] = 0b00;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <epd_init+0xe0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	715a      	strb	r2, [r3, #5]
    layer_colors[EPD_DARK] = 0b01;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <epd_init+0xe0>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	711a      	strb	r2, [r3, #4]

    // Set the display width, height, and rotation to their default values.
    width = EPD_WIDTH;
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <epd_init+0xe4>)
 80008e6:	2284      	movs	r2, #132	; 0x84
 80008e8:	0052      	lsls	r2, r2, #1
 80008ea:	801a      	strh	r2, [r3, #0]
    height = EPD_HEIGHT;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <epd_init+0xe8>)
 80008ee:	22b0      	movs	r2, #176	; 0xb0
 80008f0:	801a      	strh	r2, [r3, #0]
    rotation = 2;           // Set rotation to 2 since it matches the push-buttons on the shield
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <epd_init+0xec>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	701a      	strb	r2, [r3, #0]
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b002      	add	sp, #8
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000108 	.word	0x20000108
 8000904:	000016b0 	.word	0x000016b0
 8000908:	20000000 	.word	0x20000000
 800090c:	20000104 	.word	0x20000104
 8000910:	2000010c 	.word	0x2000010c
 8000914:	200000aa 	.word	0x200000aa
 8000918:	50000400 	.word	0x50000400
 800091c:	200000b0 	.word	0x200000b0
 8000920:	080059b8 	.word	0x080059b8
 8000924:	20000114 	.word	0x20000114
 8000928:	2000011c 	.word	0x2000011c
 800092c:	2000011a 	.word	0x2000011a
 8000930:	20000100 	.word	0x20000100

08000934 <clear_buffer>:

/*!
 * @brief This function clears the display buffer(s)
 */
void clear_buffer() {
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    if (use_sram) {
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <clear_buffer+0x74>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d017      	beq.n	8000970 <clear_buffer+0x3c>
        if (black_buffer_inverted) {
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <clear_buffer+0x78>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d009      	beq.n	800095c <clear_buffer+0x28>
            sram_erase(black_buffer_addr, buffer1_size, 0xFF);
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <clear_buffer+0x7c>)
 800094a:	8818      	ldrh	r0, [r3, #0]
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <clear_buffer+0x80>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	b29b      	uxth	r3, r3
 8000952:	22ff      	movs	r2, #255	; 0xff
 8000954:	0019      	movs	r1, r3
 8000956:	f001 fdb3 	bl	80024c0 <sram_erase>
                memset(color_buffer, 0x00, buffer2_size);
            }
        }
#endif
    }
}
 800095a:	e022      	b.n	80009a2 <clear_buffer+0x6e>
            sram_erase(black_buffer_addr, buffer1_size, 0x00);
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <clear_buffer+0x7c>)
 800095e:	8818      	ldrh	r0, [r3, #0]
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <clear_buffer+0x80>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	b29b      	uxth	r3, r3
 8000966:	2200      	movs	r2, #0
 8000968:	0019      	movs	r1, r3
 800096a:	f001 fda9 	bl	80024c0 <sram_erase>
}
 800096e:	e018      	b.n	80009a2 <clear_buffer+0x6e>
        if (black_buffer) {
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <clear_buffer+0x84>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d014      	beq.n	80009a2 <clear_buffer+0x6e>
            if (black_buffer_inverted) {
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <clear_buffer+0x78>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d008      	beq.n	8000992 <clear_buffer+0x5e>
                memset(black_buffer, 0xFF, buffer1_size);
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <clear_buffer+0x84>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <clear_buffer+0x80>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	001a      	movs	r2, r3
 800098a:	21ff      	movs	r1, #255	; 0xff
 800098c:	f004 fda8 	bl	80054e0 <memset>
}
 8000990:	e007      	b.n	80009a2 <clear_buffer+0x6e>
                memset(black_buffer, 0x00, buffer1_size);
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <clear_buffer+0x84>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <clear_buffer+0x80>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	001a      	movs	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	f004 fd9f 	bl	80054e0 <memset>
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	200000ab 	.word	0x200000ab
 80009b0:	20000102 	.word	0x20000102
 80009b4:	20000108 	.word	0x20000108
 80009b8:	20000110 	.word	0x20000110

080009bc <spi_transfer>:
 * @brief This is a helper function for write_SRAM_to_epd().
 *          It transfers a byte to the EPD and reads a byte from the external SRAM
 * @param d     The byte to send to the EPD.
 * @return      The next byte to send to the EPD.
 */
uint8_t spi_transfer(uint8_t d) {
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b087      	sub	sp, #28
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	0002      	movs	r2, r0
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	701a      	strb	r2, [r3, #0]
    uint8_t b[1] = {0x00};
 80009c8:	240c      	movs	r4, #12
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <spi_transfer+0x70>)
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	701a      	strb	r2, [r3, #0]
    if (single_byte_tx) {
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <spi_transfer+0x74>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d017      	beq.n	8000a0a <spi_transfer+0x4e>
        EPD_CS_LOW;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <spi_transfer+0x78>)
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	0018      	movs	r0, r3
 80009e2:	f002 f991 	bl	8002d08 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&EPD_SPI, &d, b, 1, HAL_MAX_DELAY);
 80009e6:	193a      	adds	r2, r7, r4
 80009e8:	1df9      	adds	r1, r7, #7
 80009ea:	4813      	ldr	r0, [pc, #76]	; (8000a38 <spi_transfer+0x7c>)
 80009ec:	2301      	movs	r3, #1
 80009ee:	425b      	negs	r3, r3
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2301      	movs	r3, #1
 80009f4:	f003 fd30 	bl	8004458 <HAL_SPI_TransmitReceive>
        EPD_CS_HIGH;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <spi_transfer+0x78>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 f982 	bl	8002d08 <HAL_GPIO_WritePin>
        return b[0];
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	e00b      	b.n	8000a22 <spi_transfer+0x66>
    } else {
        HAL_SPI_TransmitReceive(&EPD_SPI, &d, b, 1, HAL_MAX_DELAY);
 8000a0a:	240c      	movs	r4, #12
 8000a0c:	193a      	adds	r2, r7, r4
 8000a0e:	1df9      	adds	r1, r7, #7
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <spi_transfer+0x7c>)
 8000a12:	2301      	movs	r3, #1
 8000a14:	425b      	negs	r3, r3
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f003 fd1d 	bl	8004458 <HAL_SPI_TransmitReceive>
        return b[0];
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	781b      	ldrb	r3, [r3, #0]
    }
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b005      	add	sp, #20
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	080056bc 	.word	0x080056bc
 8000a30:	200000aa 	.word	0x200000aa
 8000a34:	50000400 	.word	0x50000400
 8000a38:	2000016c 	.word	0x2000016c

08000a3c <write_SRAM_to_epd>:
 * @param sram_addr     The starting address of the buffer in SRAM.
 * @param buffer_size   The size of the buffer.
 * @param epd_location  The EPD location to write to. 0 writes to black, 1 writes to color.
 * @param invert        Whether or not to invert the image.
 */
void write_SRAM_to_epd(uint16_t sram_addr, uint32_t buffer_size, uint8_t epd_location, bool invert) {
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0004      	movs	r4, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	0010      	movs	r0, r2
 8000a48:	0019      	movs	r1, r3
 8000a4a:	1dbb      	adds	r3, r7, #6
 8000a4c:	1c22      	adds	r2, r4, #0
 8000a4e:	801a      	strh	r2, [r3, #0]
 8000a50:	1d7b      	adds	r3, r7, #5
 8000a52:	1c02      	adds	r2, r0, #0
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	1c0a      	adds	r2, r1, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    sram_csLow();
 8000a5c:	f001 fbed 	bl	800223a <sram_csLow>
    // send read command
    spi_transfer(MCPSRAM_READ);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f7ff ffab 	bl	80009bc <spi_transfer>
    // send address
    spi_transfer(sram_addr >> 8);
 8000a66:	1dbb      	adds	r3, r7, #6
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff ffa3 	bl	80009bc <spi_transfer>
    spi_transfer(sram_addr & 0xFF);
 8000a76:	1dbb      	adds	r3, r7, #6
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff9d 	bl	80009bc <spi_transfer>

    // first data byte from SRAM will be transferred in at the same time as the EPD command is transferred out
    // note: calling epd_writeRAMcommand will start an SPI tx with the EPD
    c = epd_writeRAMcommand(epd_location);
 8000a82:	230f      	movs	r3, #15
 8000a84:	18fc      	adds	r4, r7, r3
 8000a86:	1d7b      	adds	r3, r7, #5
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f7ff fe8a 	bl	80007a4 <epd_writeRAMcommand>
 8000a90:	0003      	movs	r3, r0
 8000a92:	7023      	strb	r3, [r4, #0]

    EPD_DC_HIGH;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <write_SRAM_to_epd+0xe4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 f934 	bl	8002d08 <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < buffer_size; i++) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	e02c      	b.n	8000b00 <write_SRAM_to_epd+0xc4>
        c = (invert) ? ~c : c;  // Invert the data if need be
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d005      	beq.n	8000aba <write_SRAM_to_epd+0x7e>
 8000aae:	230f      	movs	r3, #15
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	e002      	b.n	8000ac0 <write_SRAM_to_epd+0x84>
 8000aba:	230f      	movs	r3, #15
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	250f      	movs	r5, #15
 8000ac2:	197a      	adds	r2, r7, r5
 8000ac4:	7013      	strb	r3, [r2, #0]
        c = spi_transfer(c);    // Tx the current byte and Rx the next
 8000ac6:	197c      	adds	r4, r7, r5
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff ff75 	bl	80009bc <spi_transfer>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	7023      	strb	r3, [r4, #0]

        serial_printf("0x%x, ", c);
 8000ad6:	197b      	adds	r3, r7, r5
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <write_SRAM_to_epd+0xe8>)
 8000adc:	0011      	movs	r1, r2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 fa8a 	bl	8001ff8 <serial_printf>
        if (i % 32 == 31) {
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	221f      	movs	r2, #31
 8000ae8:	4013      	ands	r3, r2
 8000aea:	2b1f      	cmp	r3, #31
 8000aec:	d105      	bne.n	8000afa <write_SRAM_to_epd+0xbe>
            serial_printf("\n$%x: ", i);
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <write_SRAM_to_epd+0xec>)
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 fa7f 	bl	8001ff8 <serial_printf>
    for (uint32_t i = 0; i < buffer_size; i++) {
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	3301      	adds	r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d3ce      	bcc.n	8000aa6 <write_SRAM_to_epd+0x6a>
        }
    }
    EPD_CS_HIGH;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <write_SRAM_to_epd+0xf0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f002 f8fa 	bl	8002d08 <HAL_GPIO_WritePin>
    sram_csHigh();
 8000b14:	f001 fb84 	bl	8002220 <sram_csHigh>
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b004      	add	sp, #16
 8000b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b20:	50000800 	.word	0x50000800
 8000b24:	080056c0 	.word	0x080056c0
 8000b28:	080056c8 	.word	0x080056c8
 8000b2c:	50000400 	.word	0x50000400

08000b30 <write_RAM_to_epd>:
 * @param frame_buffer  The display buffer to transfer to the EPD.
 * @param buffer_size   The size of the display buffer.
 * @param epd_location  The EPD location to write to. 0 writes to black, 1 writes to color.
 * @param invert        Whether or not to invert the image.
 */
void write_RAM_to_epd(uint8_t *frame_buffer, uint32_t buffer_size, uint8_t epd_location, bool invert) {
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	1dbb      	adds	r3, r7, #6
 8000b42:	1c0a      	adds	r2, r1, #0
 8000b44:	701a      	strb	r2, [r3, #0]
    epd_writeRAMcommand(epd_location);
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fe2a 	bl	80007a4 <epd_writeRAMcommand>
//    serial_printf("Writing from RAM[0x%x]: \n", &frame_buffer);
//    HAL_Delay(10);
    EPD_DC_HIGH;
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <write_RAM_to_epd+0xb0>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 f8d6 	bl	8002d08 <HAL_GPIO_WritePin>
//    HAL_Delay(10);
    for (uint32_t i = 0; i < buffer_size; i++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e02d      	b.n	8000bbe <write_RAM_to_epd+0x8e>
        uint8_t d = invert ? ~frame_buffer[i] : frame_buffer[i];
 8000b62:	1dbb      	adds	r3, r7, #6
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <write_RAM_to_epd+0x48>
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	18d3      	adds	r3, r2, r3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	e003      	b.n	8000b80 <write_RAM_to_epd+0x50>
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	18d3      	adds	r3, r2, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2413      	movs	r4, #19
 8000b82:	193a      	adds	r2, r7, r4
 8000b84:	7013      	strb	r3, [r2, #0]
        EPD_CS_LOW;
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <write_RAM_to_epd+0xb4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2140      	movs	r1, #64	; 0x40
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f002 f8bb 	bl	8002d08 <HAL_GPIO_WritePin>
        HAL_Delay(5);
 8000b92:	2005      	movs	r0, #5
 8000b94:	f001 fe6a 	bl	800286c <HAL_Delay>
        HAL_SPI_Transmit(&EPD_SPI, &d, 1, HAL_MAX_DELAY);
 8000b98:	2301      	movs	r3, #1
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	1939      	adds	r1, r7, r4
 8000b9e:	4812      	ldr	r0, [pc, #72]	; (8000be8 <write_RAM_to_epd+0xb8>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f003 f9dd 	bl	8003f60 <HAL_SPI_Transmit>
        EPD_CS_HIGH;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <write_RAM_to_epd+0xb4>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2140      	movs	r1, #64	; 0x40
 8000bac:	0018      	movs	r0, r3
 8000bae:	f002 f8ab 	bl	8002d08 <HAL_GPIO_WritePin>
        HAL_Delay(5);
 8000bb2:	2005      	movs	r0, #5
 8000bb4:	f001 fe5a 	bl	800286c <HAL_Delay>
    for (uint32_t i = 0; i < buffer_size; i++) {
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d3cd      	bcc.n	8000b62 <write_RAM_to_epd+0x32>
//        serial_printf("%x ", d);
//        if ((i + 1) % (width / 8) == 0) {
//            serial_printf("\n");
//        }
    }
    EPD_CS_HIGH;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <write_RAM_to_epd+0xb4>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2140      	movs	r1, #64	; 0x40
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f002 f89b 	bl	8002d08 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f001 fe4a 	bl	800286c <HAL_Delay>
    return;
 8000bd8:	46c0      	nop			; (mov r8, r8)
}
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b007      	add	sp, #28
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	50000800 	.word	0x50000800
 8000be4:	50000400 	.word	0x50000400
 8000be8:	2000016c 	.word	0x2000016c

08000bec <display>:

/*!
 * @brief This function writes the current display buffer(s) to the EPD and draws an image.
 * @param sleep     Set to true if the EPD should go to sleep after drawing.
 */
void display(bool sleep) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	701a      	strb	r2, [r3, #0]
    epd_powerUp();
 8000bf8:	f7ff fd7e 	bl	80006f8 <epd_powerUp>
    if (use_sram) {
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <display+0x58>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <display+0x2a>
        write_SRAM_to_epd(buffer1_addr, buffer1_size, 0, false);
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <display+0x5c>)
 8000c06:	8818      	ldrh	r0, [r3, #0]
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <display+0x60>)
 8000c0a:	6819      	ldr	r1, [r3, #0]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f7ff ff14 	bl	8000a3c <write_SRAM_to_epd>
 8000c14:	e007      	b.n	8000c26 <display+0x3a>
    } else {
        write_RAM_to_epd(buffer1, buffer1_size, 0, false);
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <display+0x64>)
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <display+0x60>)
 8000c1c:	6819      	ldr	r1, [r3, #0]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2200      	movs	r2, #0
 8000c22:	f7ff ff85 	bl	8000b30 <write_RAM_to_epd>
            write_RAM_to_epd(buffer2, buffer2_size, 1, false);
        }
    }
#endif

    epd_update();
 8000c26:	f7ff fd49 	bl	80006bc <epd_update>
    partials_since_last_full_update = 0;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <display+0x68>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]

    if (sleep) {
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <display+0x50>
        epd_powerDown();
 8000c38:	f7ff fd8e 	bl	8000758 <epd_powerDown>
    }
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000104 	.word	0x20000104
 8000c4c:	20000108 	.word	0x20000108
 8000c50:	2000010c 	.word	0x2000010c
 8000c54:	200000ac 	.word	0x200000ac

08000c58 <draw_pixel>:
 * @brief This function draws a pixel in the display buffer.
 * @param x     The x-coordinate of the pixel
 * @param y     The y-coordinate of the pixel
 * @param color The color of the pixel
 */
void draw_pixel(int16_t x, int16_t y, uint16_t color) {
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	0004      	movs	r4, r0
 8000c60:	0008      	movs	r0, r1
 8000c62:	0011      	movs	r1, r2
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	1c22      	adds	r2, r4, #0
 8000c68:	801a      	strh	r2, [r3, #0]
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	1c02      	adds	r2, r0, #0
 8000c6e:	801a      	strh	r2, [r3, #0]
 8000c70:	1cbb      	adds	r3, r7, #2
 8000c72:	1c0a      	adds	r2, r1, #0
 8000c74:	801a      	strh	r2, [r3, #0]
    if ((x < 0) || (x >= width) || (y < 0) || (y >= height)) {
 8000c76:	1dbb      	adds	r3, r7, #6
 8000c78:	2200      	movs	r2, #0
 8000c7a:	5e9b      	ldrsh	r3, [r3, r2]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db12      	blt.n	8000ca6 <draw_pixel+0x4e>
 8000c80:	1dbb      	adds	r3, r7, #6
 8000c82:	2200      	movs	r2, #0
 8000c84:	5e9b      	ldrsh	r3, [r3, r2]
 8000c86:	4a84      	ldr	r2, [pc, #528]	; (8000e98 <draw_pixel+0x240>)
 8000c88:	8812      	ldrh	r2, [r2, #0]
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	da0b      	bge.n	8000ca6 <draw_pixel+0x4e>
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	5e9b      	ldrsh	r3, [r3, r2]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db06      	blt.n	8000ca6 <draw_pixel+0x4e>
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	5e9b      	ldrsh	r3, [r3, r2]
 8000c9e:	4a7f      	ldr	r2, [pc, #508]	; (8000e9c <draw_pixel+0x244>)
 8000ca0:	8812      	ldrh	r2, [r2, #0]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	db0a      	blt.n	8000cbc <draw_pixel+0x64>
        serial_printf("Pixel off screen! (%d, %d)", x, y);
 8000ca6:	1dbb      	adds	r3, r7, #6
 8000ca8:	2100      	movs	r1, #0
 8000caa:	5e59      	ldrsh	r1, [r3, r1]
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	5e9a      	ldrsh	r2, [r3, r2]
 8000cb2:	4b7b      	ldr	r3, [pc, #492]	; (8000ea0 <draw_pixel+0x248>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 f99f 	bl	8001ff8 <serial_printf>
 8000cba:	e0e9      	b.n	8000e90 <draw_pixel+0x238>
    uint8_t *black_pBuf;
#ifdef EPD_USE_COLOR
    uint8_t *color_pBuf;
#endif

    switch (rotation) {
 8000cbc:	4b79      	ldr	r3, [pc, #484]	; (8000ea4 <draw_pixel+0x24c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d035      	beq.n	8000d30 <draw_pixel+0xd8>
 8000cc4:	dc49      	bgt.n	8000d5a <draw_pixel+0x102>
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d022      	beq.n	8000d10 <draw_pixel+0xb8>
 8000cca:	dc46      	bgt.n	8000d5a <draw_pixel+0x102>
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <draw_pixel+0x7e>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d007      	beq.n	8000ce4 <draw_pixel+0x8c>
 8000cd4:	e041      	b.n	8000d5a <draw_pixel+0x102>
    	case 0:
    		y = y + 8;
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	801a      	strh	r2, [r3, #0]
    		break;
 8000ce2:	e03a      	b.n	8000d5a <draw_pixel+0x102>
        case 1: EPD_swap(x, y);
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	1dba      	adds	r2, r7, #6
 8000cea:	8812      	ldrh	r2, [r2, #0]
 8000cec:	801a      	strh	r2, [r3, #0]
 8000cee:	1dbb      	adds	r3, r7, #6
 8000cf0:	1d3a      	adds	r2, r7, #4
 8000cf2:	8812      	ldrh	r2, [r2, #0]
 8000cf4:	801a      	strh	r2, [r3, #0]
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	187a      	adds	r2, r7, r1
 8000cfa:	8812      	ldrh	r2, [r2, #0]
 8000cfc:	801a      	strh	r2, [r3, #0]
            x = EPD_WIDTH - x - 1;
 8000cfe:	1dbb      	adds	r3, r7, #6
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	2208      	movs	r2, #8
 8000d04:	32ff      	adds	r2, #255	; 0xff
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	801a      	strh	r2, [r3, #0]
            break;
 8000d0e:	e024      	b.n	8000d5a <draw_pixel+0x102>
        case 2:
            x = EPD_WIDTH - x - 1;
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	2208      	movs	r2, #8
 8000d16:	32ff      	adds	r2, #255	; 0xff
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	801a      	strh	r2, [r3, #0]
//            y = EPD_HEIGHT - y - 1;
            y = EPD_HEIGHT - y - 1 + 8;
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	22b7      	movs	r2, #183	; 0xb7
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	801a      	strh	r2, [r3, #0]
            break;
 8000d2e:	e014      	b.n	8000d5a <draw_pixel+0x102>
        case 3: EPD_swap(x, y);
 8000d30:	2112      	movs	r1, #18
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	1dba      	adds	r2, r7, #6
 8000d36:	8812      	ldrh	r2, [r2, #0]
 8000d38:	801a      	strh	r2, [r3, #0]
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	1d3a      	adds	r2, r7, #4
 8000d3e:	8812      	ldrh	r2, [r2, #0]
 8000d40:	801a      	strh	r2, [r3, #0]
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	187a      	adds	r2, r7, r1
 8000d46:	8812      	ldrh	r2, [r2, #0]
 8000d48:	801a      	strh	r2, [r3, #0]
            y = EPD_HEIGHT - y - 1;
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	22af      	movs	r2, #175	; 0xaf
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	801a      	strh	r2, [r3, #0]
            break;
 8000d58:	46c0      	nop			; (mov r8, r8)
    }

    uint16_t addr = ((uint32_t) (EPD_WIDTH - 1 - x) * (uint32_t) EPD_HEIGHT + y) / 8;
 8000d5a:	1dbb      	adds	r3, r7, #6
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	5e9b      	ldrsh	r3, [r3, r2]
 8000d60:	2208      	movs	r2, #8
 8000d62:	32ff      	adds	r2, #255	; 0xff
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	001a      	movs	r2, r3
 8000d68:	23b0      	movs	r3, #176	; 0xb0
 8000d6a:	435a      	muls	r2, r3
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2100      	movs	r1, #0
 8000d70:	5e5b      	ldrsh	r3, [r3, r1]
 8000d72:	18d3      	adds	r3, r2, r3
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	210e      	movs	r1, #14
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	801a      	strh	r2, [r3, #0]
    uint8_t black_c;
#ifdef EPD_USE_COLOR
    uint8_t color_c;
#endif

    if (use_sram) {
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <draw_pixel+0x250>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d011      	beq.n	8000da8 <draw_pixel+0x150>
        black_c = sram_read8(black_buffer_addr + addr, MCPSRAM_READ);
 8000d84:	4b49      	ldr	r3, [pc, #292]	; (8000eac <draw_pixel+0x254>)
 8000d86:	881a      	ldrh	r2, [r3, #0]
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	2103      	movs	r1, #3
 8000d92:	0018      	movs	r0, r3
 8000d94:	f001 fb5e 	bl	8002454 <sram_read8>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	210c      	movs	r1, #12
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	701a      	strb	r2, [r3, #0]
        black_pBuf = &black_c;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e006      	b.n	8000db6 <draw_pixel+0x15e>
#ifdef EPD_USE_COLOR
        color_c = sram_read8(color_buffer_addr + addr, MCPSRAM_READ);
        color_pBuf = &color_c;
#endif
    } else {
        black_pBuf = black_buffer + addr;
 8000da8:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <draw_pixel+0x258>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	230e      	movs	r3, #14
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	18d3      	adds	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
        *color_pBuf |= (1 << (7 - y % 8));
    }
#endif

    bool black_bit;
    black_bit = layer_colors[color] & 0x1;
 8000db6:	1cbb      	adds	r3, r7, #2
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	4a3e      	ldr	r2, [pc, #248]	; (8000eb4 <draw_pixel+0x25c>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	200d      	movs	r0, #13
 8000dc6:	183b      	adds	r3, r7, r0
 8000dc8:	1e51      	subs	r1, r2, #1
 8000dca:	418a      	sbcs	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
    if ((black_bit && black_buffer_inverted) || (!black_bit && !black_buffer_inverted)) {
 8000dce:	183b      	adds	r3, r7, r0
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <draw_pixel+0x186>
 8000dd6:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <draw_pixel+0x260>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10e      	bne.n	8000dfc <draw_pixel+0x1a4>
 8000dde:	230d      	movs	r3, #13
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4053      	eors	r3, r2
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d024      	beq.n	8000e38 <draw_pixel+0x1e0>
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <draw_pixel+0x260>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4053      	eors	r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d01d      	beq.n	8000e38 <draw_pixel+0x1e0>
        *black_pBuf &= ~(1 << (7 - y % 8));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2100      	movs	r1, #0
 8000e06:	5e5b      	ldrsh	r3, [r3, r1]
 8000e08:	492c      	ldr	r1, [pc, #176]	; (8000ebc <draw_pixel+0x264>)
 8000e0a:	400b      	ands	r3, r1
 8000e0c:	d504      	bpl.n	8000e18 <draw_pixel+0x1c0>
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	2108      	movs	r1, #8
 8000e12:	4249      	negs	r1, r1
 8000e14:	430b      	orrs	r3, r1
 8000e16:	3301      	adds	r3, #1
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	1a5b      	subs	r3, r3, r1
 8000e20:	2101      	movs	r1, #1
 8000e22:	4099      	lsls	r1, r3
 8000e24:	000b      	movs	r3, r1
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e01a      	b.n	8000e6e <draw_pixel+0x216>
    } else {
        *black_pBuf |= (1 << (7 - y % 8));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b25a      	sxtb	r2, r3
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2100      	movs	r1, #0
 8000e42:	5e5b      	ldrsh	r3, [r3, r1]
 8000e44:	491d      	ldr	r1, [pc, #116]	; (8000ebc <draw_pixel+0x264>)
 8000e46:	400b      	ands	r3, r1
 8000e48:	d504      	bpl.n	8000e54 <draw_pixel+0x1fc>
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	4249      	negs	r1, r1
 8000e50:	430b      	orrs	r3, r1
 8000e52:	3301      	adds	r3, #1
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	0019      	movs	r1, r3
 8000e58:	2307      	movs	r3, #7
 8000e5a:	1a5b      	subs	r3, r3, r1
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4099      	lsls	r1, r3
 8000e60:	000b      	movs	r3, r1
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	701a      	strb	r2, [r3, #0]
    }

    if (use_sram) {
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <draw_pixel+0x250>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00c      	beq.n	8000e90 <draw_pixel+0x238>
#ifdef EPD_USE_COLOR
        sram_write8(color_buffer_addr + addr, *color_pBuf, MCPSRAM_WRITE);
#endif
        sram_write8(black_buffer_addr + addr, *black_pBuf, MCPSRAM_WRITE);
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <draw_pixel+0x254>)
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	230e      	movs	r3, #14
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	18d3      	adds	r3, r2, r3
 8000e82:	b298      	uxth	r0, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	f001 fafb 	bl	8002486 <sram_write8>
    }
}
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b007      	add	sp, #28
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	2000011c 	.word	0x2000011c
 8000e9c:	2000011a 	.word	0x2000011a
 8000ea0:	080056d0 	.word	0x080056d0
 8000ea4:	20000100 	.word	0x20000100
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000102 	.word	0x20000102
 8000eb0:	20000110 	.word	0x20000110
 8000eb4:	20000114 	.word	0x20000114
 8000eb8:	200000ab 	.word	0x200000ab
 8000ebc:	80000007 	.word	0x80000007

08000ec0 <set_rotation>:

/*!
 * @brief Sets the rotation for the display.
 * @param x   0 thru 3 corresponding to 4 cardinal rotations.
 */
void set_rotation(uint8_t x) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	701a      	strb	r2, [r3, #0]
    rotation = (x & 3);
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <set_rotation+0x5c>)
 8000ed8:	701a      	strb	r2, [r3, #0]
    switch (rotation) {
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <set_rotation+0x5c>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d010      	beq.n	8000f04 <set_rotation+0x44>
 8000ee2:	dc17      	bgt.n	8000f14 <set_rotation+0x54>
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d005      	beq.n	8000ef4 <set_rotation+0x34>
 8000ee8:	dc14      	bgt.n	8000f14 <set_rotation+0x54>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <set_rotation+0x34>
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d008      	beq.n	8000f04 <set_rotation+0x44>
        case 3:
            width = EPD_HEIGHT;
            height = EPD_WIDTH;
            break;
    }
}
 8000ef2:	e00f      	b.n	8000f14 <set_rotation+0x54>
            width = EPD_WIDTH;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <set_rotation+0x60>)
 8000ef6:	2284      	movs	r2, #132	; 0x84
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	801a      	strh	r2, [r3, #0]
            height = EPD_HEIGHT;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <set_rotation+0x64>)
 8000efe:	22b0      	movs	r2, #176	; 0xb0
 8000f00:	801a      	strh	r2, [r3, #0]
            break;
 8000f02:	e007      	b.n	8000f14 <set_rotation+0x54>
            width = EPD_HEIGHT;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <set_rotation+0x60>)
 8000f06:	22b0      	movs	r2, #176	; 0xb0
 8000f08:	801a      	strh	r2, [r3, #0]
            height = EPD_WIDTH;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <set_rotation+0x64>)
 8000f0c:	2284      	movs	r2, #132	; 0x84
 8000f0e:	0052      	lsls	r2, r2, #1
 8000f10:	801a      	strh	r2, [r3, #0]
            break;
 8000f12:	46c0      	nop			; (mov r8, r8)
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000100 	.word	0x20000100
 8000f20:	2000011c 	.word	0x2000011c
 8000f24:	2000011a 	.word	0x2000011a

08000f28 <set_text_size>:
/*!
 * @brief       Sets the scaling factors for the x and y axis of text.
 * @param   x   The desired scaling factor for the x-axis of a character.
 * @param   y   The desired scaling factor for the y-axis of a character.
 */
void set_text_size(uint8_t x, uint8_t y) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	0002      	movs	r2, r0
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	1dbb      	adds	r3, r7, #6
 8000f36:	1c0a      	adds	r2, r1, #0
 8000f38:	701a      	strb	r2, [r3, #0]
    textsize_x = (x > 0) ? x : 1;
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <set_text_size+0x20>
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	e000      	b.n	8000f4a <set_text_size+0x22>
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <set_text_size+0x44>)
 8000f4c:	701a      	strb	r2, [r3, #0]
    textsize_y = (y > 0) ? y : 1;
 8000f4e:	1dbb      	adds	r3, r7, #6
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <set_text_size+0x34>
 8000f56:	1dbb      	adds	r3, r7, #6
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	e000      	b.n	8000f5e <set_text_size+0x36>
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <set_text_size+0x48>)
 8000f60:	701a      	strb	r2, [r3, #0]
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	20000001 	.word	0x20000001
 8000f70:	20000002 	.word	0x20000002

08000f74 <set_text_scale>:

/*!
 * @brief      Sets the scaling factors for the x and y axis to be the same value.
 * @param   s  The desired scaling factor for the x and y axis of a character.
 */
void set_text_scale(uint8_t s) { set_text_size(s, s); }
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff ffcc 	bl	8000f28 <set_text_size>
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <set_cursor>:
/*!
 * @brief       Sets the cursor to a new location on the display.
 * @param   x   The x coordinate of the new location
 * @param   y   The y coordinate of the new location
 */
void set_cursor(uint16_t x, uint16_t y) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	1dbb      	adds	r3, r7, #6
 8000fa2:	801a      	strh	r2, [r3, #0]
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	1c0a      	adds	r2, r1, #0
 8000fa8:	801a      	strh	r2, [r3, #0]
    cursor_x = x;
 8000faa:	1dbb      	adds	r3, r7, #6
 8000fac:	2200      	movs	r2, #0
 8000fae:	5e9a      	ldrsh	r2, [r3, r2]
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <set_cursor+0x30>)
 8000fb2:	801a      	strh	r2, [r3, #0]
    cursor_y = y;
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	5e9a      	ldrsh	r2, [r3, r2]
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <set_cursor+0x34>)
 8000fbc:	801a      	strh	r2, [r3, #0]
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	200000b4 	.word	0x200000b4
 8000fcc:	200000b6 	.word	0x200000b6

08000fd0 <set_x_margin>:

/*!
 * @brief       Sets a horizontal offset from the left of the display for all lines of text.
 * @param   m   The number of pixels to offset by
 */
void set_x_margin(uint8_t m) { margin_x = m; }
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	1dfb      	adds	r3, r7, #7
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <set_x_margin+0x1c>)
 8000fde:	1dfa      	adds	r2, r7, #7
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000b8 	.word	0x200000b8

08000ff0 <set_y_margin>:

/*!
 * @brief       Sets a vertical offset from the top of the display for all text.
 * @param   m   The number of pixels to offset by
 */
void set_y_margin(uint8_t m) { margin_y = m; }
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <set_y_margin+0x1c>)
 8000ffe:	1dfa      	adds	r2, r7, #7
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000b9 	.word	0x200000b9

08001010 <write_line>:
    @param    y0  Start point y coordinate
    @param    x1  End point x coordinate
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
void write_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	0005      	movs	r5, r0
 8001018:	000c      	movs	r4, r1
 800101a:	0010      	movs	r0, r2
 800101c:	0019      	movs	r1, r3
 800101e:	1dbb      	adds	r3, r7, #6
 8001020:	1c2a      	adds	r2, r5, #0
 8001022:	801a      	strh	r2, [r3, #0]
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	1c22      	adds	r2, r4, #0
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	1cbb      	adds	r3, r7, #2
 800102c:	1c02      	adds	r2, r0, #0
 800102e:	801a      	strh	r2, [r3, #0]
 8001030:	003b      	movs	r3, r7
 8001032:	1c0a      	adds	r2, r1, #0
 8001034:	801a      	strh	r2, [r3, #0]
    int16_t steep = _abs(y1 - y0) > _abs(x1 - x0);
 8001036:	003b      	movs	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	5e9a      	ldrsh	r2, [r3, r2]
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2100      	movs	r1, #0
 8001040:	5e5b      	ldrsh	r3, [r3, r1]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	17d9      	asrs	r1, r3, #31
 8001046:	185a      	adds	r2, r3, r1
 8001048:	404a      	eors	r2, r1
 800104a:	1cbb      	adds	r3, r7, #2
 800104c:	2100      	movs	r1, #0
 800104e:	5e59      	ldrsh	r1, [r3, r1]
 8001050:	1dbb      	adds	r3, r7, #6
 8001052:	2000      	movs	r0, #0
 8001054:	5e1b      	ldrsh	r3, [r3, r0]
 8001056:	1acb      	subs	r3, r1, r3
 8001058:	17d9      	asrs	r1, r3, #31
 800105a:	185b      	adds	r3, r3, r1
 800105c:	404b      	eors	r3, r1
 800105e:	2101      	movs	r1, #1
 8001060:	429a      	cmp	r2, r3
 8001062:	dc01      	bgt.n	8001068 <write_line+0x58>
 8001064:	2300      	movs	r3, #0
 8001066:	1c19      	adds	r1, r3, #0
 8001068:	b2ca      	uxtb	r2, r1
 800106a:	211a      	movs	r1, #26
 800106c:	187b      	adds	r3, r7, r1
 800106e:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2200      	movs	r2, #0
 8001074:	5e9b      	ldrsh	r3, [r3, r2]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d019      	beq.n	80010ae <write_line+0x9e>
        _swap_int16_t(x0, y0);
 800107a:	2118      	movs	r1, #24
 800107c:	187b      	adds	r3, r7, r1
 800107e:	1dba      	adds	r2, r7, #6
 8001080:	8812      	ldrh	r2, [r2, #0]
 8001082:	801a      	strh	r2, [r3, #0]
 8001084:	1dbb      	adds	r3, r7, #6
 8001086:	1d3a      	adds	r2, r7, #4
 8001088:	8812      	ldrh	r2, [r2, #0]
 800108a:	801a      	strh	r2, [r3, #0]
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	187a      	adds	r2, r7, r1
 8001090:	8812      	ldrh	r2, [r2, #0]
 8001092:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8001094:	2116      	movs	r1, #22
 8001096:	187b      	adds	r3, r7, r1
 8001098:	1cba      	adds	r2, r7, #2
 800109a:	8812      	ldrh	r2, [r2, #0]
 800109c:	801a      	strh	r2, [r3, #0]
 800109e:	1cbb      	adds	r3, r7, #2
 80010a0:	003a      	movs	r2, r7
 80010a2:	8812      	ldrh	r2, [r2, #0]
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	003b      	movs	r3, r7
 80010a8:	187a      	adds	r2, r7, r1
 80010aa:	8812      	ldrh	r2, [r2, #0]
 80010ac:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 80010ae:	1dba      	adds	r2, r7, #6
 80010b0:	1cbb      	adds	r3, r7, #2
 80010b2:	2100      	movs	r1, #0
 80010b4:	5e52      	ldrsh	r2, [r2, r1]
 80010b6:	2100      	movs	r1, #0
 80010b8:	5e5b      	ldrsh	r3, [r3, r1]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dd19      	ble.n	80010f2 <write_line+0xe2>
        _swap_int16_t(x0, x1);
 80010be:	2114      	movs	r1, #20
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	1dba      	adds	r2, r7, #6
 80010c4:	8812      	ldrh	r2, [r2, #0]
 80010c6:	801a      	strh	r2, [r3, #0]
 80010c8:	1dbb      	adds	r3, r7, #6
 80010ca:	1cba      	adds	r2, r7, #2
 80010cc:	8812      	ldrh	r2, [r2, #0]
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	1cbb      	adds	r3, r7, #2
 80010d2:	187a      	adds	r2, r7, r1
 80010d4:	8812      	ldrh	r2, [r2, #0]
 80010d6:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 80010d8:	2112      	movs	r1, #18
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	1d3a      	adds	r2, r7, #4
 80010de:	8812      	ldrh	r2, [r2, #0]
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	003a      	movs	r2, r7
 80010e6:	8812      	ldrh	r2, [r2, #0]
 80010e8:	801a      	strh	r2, [r3, #0]
 80010ea:	003b      	movs	r3, r7
 80010ec:	187a      	adds	r2, r7, r1
 80010ee:	8812      	ldrh	r2, [r2, #0]
 80010f0:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80010f2:	1cbb      	adds	r3, r7, #2
 80010f4:	881a      	ldrh	r2, [r3, #0]
 80010f6:	1dbb      	adds	r3, r7, #6
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	2110      	movs	r1, #16
 8001100:	187b      	adds	r3, r7, r1
 8001102:	801a      	strh	r2, [r3, #0]
    dy = _abs(y1 - y0);
 8001104:	003b      	movs	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	5e9a      	ldrsh	r2, [r3, r2]
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2000      	movs	r0, #0
 800110e:	5e1b      	ldrsh	r3, [r3, r0]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	17d8      	asrs	r0, r3, #31
 8001114:	181a      	adds	r2, r3, r0
 8001116:	4042      	eors	r2, r0
 8001118:	230e      	movs	r3, #14
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 800111e:	231e      	movs	r3, #30
 8001120:	18fa      	adds	r2, r7, r3
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2100      	movs	r1, #0
 8001126:	5e5b      	ldrsh	r3, [r3, r1]
 8001128:	2b00      	cmp	r3, #0
 800112a:	da00      	bge.n	800112e <write_line+0x11e>
 800112c:	3301      	adds	r3, #1
 800112e:	105b      	asrs	r3, r3, #1
 8001130:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8001132:	1d3a      	adds	r2, r7, #4
 8001134:	003b      	movs	r3, r7
 8001136:	2100      	movs	r1, #0
 8001138:	5e52      	ldrsh	r2, [r2, r1]
 800113a:	2100      	movs	r1, #0
 800113c:	5e5b      	ldrsh	r3, [r3, r1]
 800113e:	429a      	cmp	r2, r3
 8001140:	da04      	bge.n	800114c <write_line+0x13c>
        ystep = 1;
 8001142:	231c      	movs	r3, #28
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	2201      	movs	r2, #1
 8001148:	801a      	strh	r2, [r3, #0]
 800114a:	e04d      	b.n	80011e8 <write_line+0x1d8>
    } else {
        ystep = -1;
 800114c:	231c      	movs	r3, #28
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2201      	movs	r2, #1
 8001152:	4252      	negs	r2, r2
 8001154:	801a      	strh	r2, [r3, #0]
    }

    for (; x0 <= x1; x0++) {
 8001156:	e047      	b.n	80011e8 <write_line+0x1d8>
        if (steep) {
 8001158:	231a      	movs	r3, #26
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2200      	movs	r2, #0
 800115e:	5e9b      	ldrsh	r3, [r3, r2]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00c      	beq.n	800117e <write_line+0x16e>
            draw_pixel(y0, x0, color);
 8001164:	2330      	movs	r3, #48	; 0x30
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	881a      	ldrh	r2, [r3, #0]
 800116a:	1dbb      	adds	r3, r7, #6
 800116c:	2100      	movs	r1, #0
 800116e:	5e59      	ldrsh	r1, [r3, r1]
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2000      	movs	r0, #0
 8001174:	5e1b      	ldrsh	r3, [r3, r0]
 8001176:	0018      	movs	r0, r3
 8001178:	f7ff fd6e 	bl	8000c58 <draw_pixel>
 800117c:	e00b      	b.n	8001196 <write_line+0x186>
        } else {
            draw_pixel(x0, y0, color);
 800117e:	2330      	movs	r3, #48	; 0x30
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	881a      	ldrh	r2, [r3, #0]
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2100      	movs	r1, #0
 8001188:	5e59      	ldrsh	r1, [r3, r1]
 800118a:	1dbb      	adds	r3, r7, #6
 800118c:	2000      	movs	r0, #0
 800118e:	5e1b      	ldrsh	r3, [r3, r0]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff fd61 	bl	8000c58 <draw_pixel>
        }
        err -= dy;
 8001196:	211e      	movs	r1, #30
 8001198:	187b      	adds	r3, r7, r1
 800119a:	881a      	ldrh	r2, [r3, #0]
 800119c:	230e      	movs	r3, #14
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2200      	movs	r2, #0
 80011ae:	5e9b      	ldrsh	r3, [r3, r2]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da11      	bge.n	80011d8 <write_line+0x1c8>
            y0 += ystep;
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	881a      	ldrh	r2, [r3, #0]
 80011b8:	231c      	movs	r3, #28
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	18d3      	adds	r3, r2, r3
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	801a      	strh	r2, [r3, #0]
            err += dx;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	881a      	ldrh	r2, [r3, #0]
 80011ca:	2310      	movs	r3, #16
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	18d3      	adds	r3, r2, r3
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	801a      	strh	r2, [r3, #0]
    for (; x0 <= x1; x0++) {
 80011d8:	1dbb      	adds	r3, r7, #6
 80011da:	2200      	movs	r2, #0
 80011dc:	5e9b      	ldrsh	r3, [r3, r2]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	3301      	adds	r3, #1
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	1dbb      	adds	r3, r7, #6
 80011e6:	801a      	strh	r2, [r3, #0]
 80011e8:	1dba      	adds	r2, r7, #6
 80011ea:	1cbb      	adds	r3, r7, #2
 80011ec:	2100      	movs	r1, #0
 80011ee:	5e52      	ldrsh	r2, [r2, r1]
 80011f0:	2100      	movs	r1, #0
 80011f2:	5e5b      	ldrsh	r3, [r3, r1]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	ddaf      	ble.n	8001158 <write_line+0x148>
        }
    }
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b008      	add	sp, #32
 8001200:	bdb0      	pop	{r4, r5, r7, pc}

08001202 <write_fast_vLine>:
 * @param x     The top-most x coordinate
 * @param y     The top-most y coordinate
 * @param h     The height in pixels
 * @param color The 16-bit 5-6-5 color to use
 */
void write_fast_vLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001202:	b5b0      	push	{r4, r5, r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af02      	add	r7, sp, #8
 8001208:	0005      	movs	r5, r0
 800120a:	000c      	movs	r4, r1
 800120c:	0010      	movs	r0, r2
 800120e:	0019      	movs	r1, r3
 8001210:	1dbb      	adds	r3, r7, #6
 8001212:	1c2a      	adds	r2, r5, #0
 8001214:	801a      	strh	r2, [r3, #0]
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	1c22      	adds	r2, r4, #0
 800121a:	801a      	strh	r2, [r3, #0]
 800121c:	1cbb      	adds	r3, r7, #2
 800121e:	1c02      	adds	r2, r0, #0
 8001220:	801a      	strh	r2, [r3, #0]
 8001222:	003b      	movs	r3, r7
 8001224:	1c0a      	adds	r2, r1, #0
 8001226:	801a      	strh	r2, [r3, #0]
    write_line(x, y, x, y + h - 1, color);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	881a      	ldrh	r2, [r3, #0]
 800122c:	1cbb      	adds	r3, r7, #2
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	b29b      	uxth	r3, r3
 8001234:	3b01      	subs	r3, #1
 8001236:	b29b      	uxth	r3, r3
 8001238:	b21c      	sxth	r4, r3
 800123a:	1dbb      	adds	r3, r7, #6
 800123c:	2200      	movs	r2, #0
 800123e:	5e9a      	ldrsh	r2, [r3, r2]
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2100      	movs	r1, #0
 8001244:	5e59      	ldrsh	r1, [r3, r1]
 8001246:	1dbb      	adds	r3, r7, #6
 8001248:	2000      	movs	r0, #0
 800124a:	5e18      	ldrsh	r0, [r3, r0]
 800124c:	003b      	movs	r3, r7
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	0023      	movs	r3, r4
 8001254:	f7ff fedc 	bl	8001010 <write_line>
//    fill_rect(x, y, 1, h, color);
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bdb0      	pop	{r4, r5, r7, pc}

08001260 <fill_rect>:
 * @param y     The top-left corner y coordinate
 * @param w     The width in pixels
 * @param h     The height in pixels
 * @param color The 16-bit 5-6-5 color to use
 */
void fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	0005      	movs	r5, r0
 8001268:	000c      	movs	r4, r1
 800126a:	0010      	movs	r0, r2
 800126c:	0019      	movs	r1, r3
 800126e:	1dbb      	adds	r3, r7, #6
 8001270:	1c2a      	adds	r2, r5, #0
 8001272:	801a      	strh	r2, [r3, #0]
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	1c22      	adds	r2, r4, #0
 8001278:	801a      	strh	r2, [r3, #0]
 800127a:	1cbb      	adds	r3, r7, #2
 800127c:	1c02      	adds	r2, r0, #0
 800127e:	801a      	strh	r2, [r3, #0]
 8001280:	003b      	movs	r3, r7
 8001282:	1c0a      	adds	r2, r1, #0
 8001284:	801a      	strh	r2, [r3, #0]
    for (int16_t i = x; i < (x + w); i++) {
 8001286:	230e      	movs	r3, #14
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	1dba      	adds	r2, r7, #6
 800128c:	8812      	ldrh	r2, [r2, #0]
 800128e:	801a      	strh	r2, [r3, #0]
 8001290:	e018      	b.n	80012c4 <fill_rect+0x64>
        write_fast_vLine(i, y, h, color);
 8001292:	2320      	movs	r3, #32
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	881c      	ldrh	r4, [r3, #0]
 8001298:	003b      	movs	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	5e9a      	ldrsh	r2, [r3, r2]
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2100      	movs	r1, #0
 80012a2:	5e59      	ldrsh	r1, [r3, r1]
 80012a4:	250e      	movs	r5, #14
 80012a6:	197b      	adds	r3, r7, r5
 80012a8:	2000      	movs	r0, #0
 80012aa:	5e18      	ldrsh	r0, [r3, r0]
 80012ac:	0023      	movs	r3, r4
 80012ae:	f7ff ffa8 	bl	8001202 <write_fast_vLine>
    for (int16_t i = x; i < (x + w); i++) {
 80012b2:	0029      	movs	r1, r5
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2200      	movs	r2, #0
 80012b8:	5e9b      	ldrsh	r3, [r3, r2]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	801a      	strh	r2, [r3, #0]
 80012c4:	230e      	movs	r3, #14
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	2200      	movs	r2, #0
 80012ca:	5e9a      	ldrsh	r2, [r3, r2]
 80012cc:	1dbb      	adds	r3, r7, #6
 80012ce:	2100      	movs	r1, #0
 80012d0:	5e59      	ldrsh	r1, [r3, r1]
 80012d2:	1cbb      	adds	r3, r7, #2
 80012d4:	2000      	movs	r0, #0
 80012d6:	5e1b      	ldrsh	r3, [r3, r0]
 80012d8:	18cb      	adds	r3, r1, r3
 80012da:	429a      	cmp	r2, r3
 80012dc:	dbd9      	blt.n	8001292 <fill_rect+0x32>
    }
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b004      	add	sp, #16
 80012e6:	bdb0      	pop	{r4, r5, r7, pc}

080012e8 <draw_char>:
 * @param color     The color of the char
 * @param bg        The background color of the char
 * @param size_x    The width of the char
 * @param size_y    The height of the char
 */
void draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	0005      	movs	r5, r0
 80012f0:	000c      	movs	r4, r1
 80012f2:	0010      	movs	r0, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	1dbb      	adds	r3, r7, #6
 80012f8:	1c2a      	adds	r2, r5, #0
 80012fa:	801a      	strh	r2, [r3, #0]
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	1c22      	adds	r2, r4, #0
 8001300:	801a      	strh	r2, [r3, #0]
 8001302:	1cfb      	adds	r3, r7, #3
 8001304:	1c02      	adds	r2, r0, #0
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	003b      	movs	r3, r7
 800130a:	1c0a      	adds	r2, r1, #0
 800130c:	801a      	strh	r2, [r3, #0]
    // TODO: add handling for non-classic fonts (if possible)
    if ((x >= width) ||                 // Clip right
 800130e:	1dbb      	adds	r3, r7, #6
 8001310:	2200      	movs	r2, #0
 8001312:	5e9b      	ldrsh	r3, [r3, r2]
 8001314:	4aac      	ldr	r2, [pc, #688]	; (80015c8 <draw_char+0x2e0>)
 8001316:	8812      	ldrh	r2, [r2, #0]
 8001318:	4293      	cmp	r3, r2
 800131a:	da1d      	bge.n	8001358 <draw_char+0x70>
        (y >= height) ||                // Clip bottom
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	5e9b      	ldrsh	r3, [r3, r2]
 8001322:	4aaa      	ldr	r2, [pc, #680]	; (80015cc <draw_char+0x2e4>)
 8001324:	8812      	ldrh	r2, [r2, #0]
    if ((x >= width) ||                 // Clip right
 8001326:	4293      	cmp	r3, r2
 8001328:	da16      	bge.n	8001358 <draw_char+0x70>
        ((x + 6 * size_x - 1) < 0) ||   // Clip left
 800132a:	1dbb      	adds	r3, r7, #6
 800132c:	2100      	movs	r1, #0
 800132e:	5e59      	ldrsh	r1, [r3, r1]
 8001330:	2324      	movs	r3, #36	; 0x24
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	0013      	movs	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	189b      	adds	r3, r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	18cb      	adds	r3, r1, r3
        (y >= height) ||                // Clip bottom
 8001340:	2b00      	cmp	r3, #0
 8001342:	dd09      	ble.n	8001358 <draw_char+0x70>
        ((y + 8 * size_y - 1) < 0)) {   // Clip top
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	5e9a      	ldrsh	r2, [r3, r2]
 800134a:	2328      	movs	r3, #40	; 0x28
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	18d3      	adds	r3, r2, r3
        ((x + 6 * size_x - 1) < 0) ||   // Clip left
 8001354:	2b00      	cmp	r3, #0
 8001356:	dc04      	bgt.n	8001362 <draw_char+0x7a>
        serial_println("CLIPPING TEXT");
 8001358:	4b9d      	ldr	r3, [pc, #628]	; (80015d0 <draw_char+0x2e8>)
 800135a:	0018      	movs	r0, r3
 800135c:	f000 fe12 	bl	8001f84 <serial_println>
        return;
 8001360:	e12e      	b.n	80015c0 <draw_char+0x2d8>
    // There was an inline patch from Adafruit for an older version of glcdfont.c that was missing a character
    // This version of drawChar relies on the newer version of glcdfont.c, so the fix isn't implemented here
    // The fix in question goes something like this:
    // if (old_glcdfont && (c >= 176)) c++;

    for (int8_t i = 0; i < 5; i++) {
 8001362:	230f      	movs	r3, #15
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	e0e1      	b.n	8001530 <draw_char+0x248>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 800136c:	1cfb      	adds	r3, r7, #3
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	0013      	movs	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	189a      	adds	r2, r3, r2
 8001376:	230f      	movs	r3, #15
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	18d2      	adds	r2, r2, r3
 8001380:	230e      	movs	r3, #14
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	4993      	ldr	r1, [pc, #588]	; (80015d4 <draw_char+0x2ec>)
 8001386:	5c8a      	ldrb	r2, [r1, r2]
 8001388:	701a      	strb	r2, [r3, #0]

        for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800138a:	230d      	movs	r3, #13
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e0bd      	b.n	8001510 <draw_char+0x228>
            if (line & 1) {
 8001394:	230e      	movs	r3, #14
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2201      	movs	r2, #1
 800139c:	4013      	ands	r3, r2
 800139e:	d050      	beq.n	8001442 <draw_char+0x15a>
                if (size_x == 1 && size_y == 1) {
 80013a0:	2324      	movs	r3, #36	; 0x24
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d11e      	bne.n	80013e8 <draw_char+0x100>
 80013aa:	2328      	movs	r3, #40	; 0x28
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d119      	bne.n	80013e8 <draw_char+0x100>
                    draw_pixel(x + i, y + j, color);
 80013b4:	230f      	movs	r3, #15
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	b29a      	uxth	r2, r3
 80013be:	1dbb      	adds	r3, r7, #6
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	18d3      	adds	r3, r2, r3
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b218      	sxth	r0, r3
 80013c8:	230d      	movs	r3, #13
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	18d3      	adds	r3, r2, r3
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b219      	sxth	r1, r3
 80013dc:	003b      	movs	r3, r7
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	001a      	movs	r2, r3
 80013e2:	f7ff fc39 	bl	8000c58 <draw_pixel>
 80013e6:	e084      	b.n	80014f2 <draw_char+0x20a>
                } else {
                    fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2424      	movs	r4, #36	; 0x24
 80013f4:	193a      	adds	r2, r7, r4
 80013f6:	7812      	ldrb	r2, [r2, #0]
 80013f8:	b292      	uxth	r2, r2
 80013fa:	4353      	muls	r3, r2
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	1dbb      	adds	r3, r7, #6
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	18d3      	adds	r3, r2, r3
 8001404:	b29b      	uxth	r3, r3
 8001406:	b218      	sxth	r0, r3
 8001408:	230d      	movs	r3, #13
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	b29b      	uxth	r3, r3
 8001412:	2528      	movs	r5, #40	; 0x28
 8001414:	197a      	adds	r2, r7, r5
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	b292      	uxth	r2, r2
 800141a:	4353      	muls	r3, r2
 800141c:	b29a      	uxth	r2, r3
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	18d3      	adds	r3, r2, r3
 8001424:	b29b      	uxth	r3, r3
 8001426:	b219      	sxth	r1, r3
 8001428:	193b      	adds	r3, r7, r4
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b21a      	sxth	r2, r3
 800142e:	197b      	adds	r3, r7, r5
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b21c      	sxth	r4, r3
 8001434:	003b      	movs	r3, r7
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	0023      	movs	r3, r4
 800143c:	f7ff ff10 	bl	8001260 <fill_rect>
 8001440:	e057      	b.n	80014f2 <draw_char+0x20a>
                }
            } else if (bg != color) {
 8001442:	2420      	movs	r4, #32
 8001444:	193b      	adds	r3, r7, r4
 8001446:	0039      	movs	r1, r7
 8001448:	881a      	ldrh	r2, [r3, #0]
 800144a:	880b      	ldrh	r3, [r1, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d050      	beq.n	80014f2 <draw_char+0x20a>
                if (size_x == 1 && size_y == 1) {
 8001450:	2324      	movs	r3, #36	; 0x24
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d11e      	bne.n	8001498 <draw_char+0x1b0>
 800145a:	2328      	movs	r3, #40	; 0x28
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d119      	bne.n	8001498 <draw_char+0x1b0>
                    draw_pixel(x + i, y + j, bg);
 8001464:	230f      	movs	r3, #15
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	b29a      	uxth	r2, r3
 800146e:	1dbb      	adds	r3, r7, #6
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	18d3      	adds	r3, r2, r3
 8001474:	b29b      	uxth	r3, r3
 8001476:	b218      	sxth	r0, r3
 8001478:	230d      	movs	r3, #13
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b25b      	sxtb	r3, r3
 8001480:	b29a      	uxth	r2, r3
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	18d3      	adds	r3, r2, r3
 8001488:	b29b      	uxth	r3, r3
 800148a:	b219      	sxth	r1, r3
 800148c:	193b      	adds	r3, r7, r4
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	001a      	movs	r2, r3
 8001492:	f7ff fbe1 	bl	8000c58 <draw_pixel>
 8001496:	e02c      	b.n	80014f2 <draw_char+0x20a>
                } else {
                    fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8001498:	230f      	movs	r3, #15
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2424      	movs	r4, #36	; 0x24
 80014a4:	193a      	adds	r2, r7, r4
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	b292      	uxth	r2, r2
 80014aa:	4353      	muls	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	1dbb      	adds	r3, r7, #6
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	18d3      	adds	r3, r2, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b218      	sxth	r0, r3
 80014b8:	230d      	movs	r3, #13
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2528      	movs	r5, #40	; 0x28
 80014c4:	197a      	adds	r2, r7, r5
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	b292      	uxth	r2, r2
 80014ca:	4353      	muls	r3, r2
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	18d3      	adds	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b219      	sxth	r1, r3
 80014d8:	193b      	adds	r3, r7, r4
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b21a      	sxth	r2, r3
 80014de:	197b      	adds	r3, r7, r5
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b21c      	sxth	r4, r3
 80014e4:	2320      	movs	r3, #32
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	0023      	movs	r3, r4
 80014ee:	f7ff feb7 	bl	8001260 <fill_rect>
        for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80014f2:	210d      	movs	r1, #13
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	187b      	adds	r3, r7, r1
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	220e      	movs	r2, #14
 8001506:	18bb      	adds	r3, r7, r2
 8001508:	18ba      	adds	r2, r7, r2
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	0852      	lsrs	r2, r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	230d      	movs	r3, #13
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b25b      	sxtb	r3, r3
 8001518:	2b07      	cmp	r3, #7
 800151a:	dc00      	bgt.n	800151e <draw_char+0x236>
 800151c:	e73a      	b.n	8001394 <draw_char+0xac>
    for (int8_t i = 0; i < 5; i++) {
 800151e:	210f      	movs	r1, #15
 8001520:	187b      	adds	r3, r7, r1
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b25b      	sxtb	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	3301      	adds	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	187b      	adds	r3, r7, r1
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	230f      	movs	r3, #15
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	2b04      	cmp	r3, #4
 800153a:	dc00      	bgt.n	800153e <draw_char+0x256>
 800153c:	e716      	b.n	800136c <draw_char+0x84>
                }
            }
        } // End inner for loop
    } // End outer for loop

    if (bg != color) {
 800153e:	2420      	movs	r4, #32
 8001540:	193b      	adds	r3, r7, r4
 8001542:	0039      	movs	r1, r7
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	880b      	ldrh	r3, [r1, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d039      	beq.n	80015c0 <draw_char+0x2d8>
        if (size_x == 1 && size_y == 1) {
 800154c:	2324      	movs	r3, #36	; 0x24
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d113      	bne.n	800157e <draw_char+0x296>
 8001556:	2328      	movs	r3, #40	; 0x28
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d10e      	bne.n	800157e <draw_char+0x296>
            write_fast_vLine(x + 5, y, 8, bg);
 8001560:	1dbb      	adds	r3, r7, #6
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	3305      	adds	r3, #5
 8001566:	b29b      	uxth	r3, r3
 8001568:	b218      	sxth	r0, r3
 800156a:	193b      	adds	r3, r7, r4
 800156c:	881a      	ldrh	r2, [r3, #0]
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2100      	movs	r1, #0
 8001572:	5e59      	ldrsh	r1, [r3, r1]
 8001574:	0013      	movs	r3, r2
 8001576:	2208      	movs	r2, #8
 8001578:	f7ff fe43 	bl	8001202 <write_fast_vLine>
 800157c:	e020      	b.n	80015c0 <draw_char+0x2d8>
        } else {
            fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800157e:	2124      	movs	r1, #36	; 0x24
 8001580:	187b      	adds	r3, r7, r1
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b29b      	uxth	r3, r3
 8001586:	1c1a      	adds	r2, r3, #0
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	18d3      	adds	r3, r2, r3
 800158c:	b29a      	uxth	r2, r3
 800158e:	1dbb      	adds	r3, r7, #6
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	18d3      	adds	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	b218      	sxth	r0, r3
 8001598:	187b      	adds	r3, r7, r1
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b21a      	sxth	r2, r3
 800159e:	2328      	movs	r3, #40	; 0x28
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b21c      	sxth	r4, r3
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2100      	movs	r1, #0
 80015b0:	5e59      	ldrsh	r1, [r3, r1]
 80015b2:	2320      	movs	r3, #32
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	0023      	movs	r3, r4
 80015bc:	f7ff fe50 	bl	8001260 <fill_rect>
        }
    }
}
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b004      	add	sp, #16
 80015c4:	bdb0      	pop	{r4, r5, r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	2000011c 	.word	0x2000011c
 80015cc:	2000011a 	.word	0x2000011a
 80015d0:	080056ec 	.word	0x080056ec
 80015d4:	080059d4 	.word	0x080059d4

080015d8 <write>:

/*!
 * @brief This function draws a character to the display at the current location of the cursor.
 * @param c
 */
void write(uint8_t c) {
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b087      	sub	sp, #28
 80015dc:	af04      	add	r7, sp, #16
 80015de:	0002      	movs	r2, r0
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	701a      	strb	r2, [r3, #0]
    // TODO: add handling for non-classic fonts (if possible)

    if (c == '\n') {                // Newline?
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b0a      	cmp	r3, #10
 80015ea:	d113      	bne.n	8001614 <write+0x3c>
        cursor_x = margin_x;        // Reset x to the margin
 80015ec:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <write+0x114>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <write+0x118>)
 80015f4:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize_y * 8; // Advance y by one line
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <write+0x11c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <write+0x120>)
 8001602:	2100      	movs	r1, #0
 8001604:	5e5b      	ldrsh	r3, [r3, r1]
 8001606:	b29b      	uxth	r3, r3
 8001608:	18d3      	adds	r3, r2, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	b21a      	sxth	r2, r3
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <write+0x120>)
 8001610:	801a      	strh	r2, [r3, #0]
        }

        draw_char(cursor_x, cursor_y, c, text_color, text_bg_color, textsize_x, textsize_y);
        cursor_x += textsize_x * 6; // Advance x by one character
    }
}
 8001612:	e066      	b.n	80016e2 <write+0x10a>
    } else if (c != '\r') {         // Ignore carriage returns
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b0d      	cmp	r3, #13
 800161a:	d062      	beq.n	80016e2 <write+0x10a>
        if (wrap && ((cursor_x + textsize_x * 6) > width)) {    // Off right?
 800161c:	4b37      	ldr	r3, [pc, #220]	; (80016fc <write+0x124>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d022      	beq.n	800166a <write+0x92>
 8001624:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <write+0x118>)
 8001626:	2200      	movs	r2, #0
 8001628:	5e9b      	ldrsh	r3, [r3, r2]
 800162a:	0019      	movs	r1, r3
 800162c:	4b34      	ldr	r3, [pc, #208]	; (8001700 <write+0x128>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	001a      	movs	r2, r3
 8001632:	0013      	movs	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	189b      	adds	r3, r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	18cb      	adds	r3, r1, r3
 800163c:	4a31      	ldr	r2, [pc, #196]	; (8001704 <write+0x12c>)
 800163e:	8812      	ldrh	r2, [r2, #0]
 8001640:	4293      	cmp	r3, r2
 8001642:	dd12      	ble.n	800166a <write+0x92>
            cursor_x = margin_x;        // Reset x to the margin
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <write+0x114>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b21a      	sxth	r2, r3
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <write+0x118>)
 800164c:	801a      	strh	r2, [r3, #0]
            cursor_y += textsize_y * 8; // Advance y one line
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <write+0x11c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <write+0x120>)
 800165a:	2100      	movs	r1, #0
 800165c:	5e5b      	ldrsh	r3, [r3, r1]
 800165e:	b29b      	uxth	r3, r3
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	b29b      	uxth	r3, r3
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <write+0x120>)
 8001668:	801a      	strh	r2, [r3, #0]
        if ((cursor_y + textsize_y * 8) > height) { // Off bottom?
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <write+0x120>)
 800166c:	2200      	movs	r2, #0
 800166e:	5e9b      	ldrsh	r3, [r3, r2]
 8001670:	001a      	movs	r2, r3
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <write+0x11c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	18d3      	adds	r3, r2, r3
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <write+0x130>)
 800167c:	8812      	ldrh	r2, [r2, #0]
 800167e:	4293      	cmp	r3, r2
 8001680:	dd04      	ble.n	800168c <write+0xb4>
            cursor_y = margin_y;                    // Reset y to the margin
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <write+0x134>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <write+0x120>)
 800168a:	801a      	strh	r2, [r3, #0]
        draw_char(cursor_x, cursor_y, c, text_color, text_bg_color, textsize_x, textsize_y);
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <write+0x118>)
 800168e:	2400      	movs	r4, #0
 8001690:	5f1c      	ldrsh	r4, [r3, r4]
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <write+0x120>)
 8001694:	2500      	movs	r5, #0
 8001696:	5f5d      	ldrsh	r5, [r3, r5]
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <write+0x138>)
 800169a:	881e      	ldrh	r6, [r3, #0]
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <write+0x13c>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	4a17      	ldr	r2, [pc, #92]	; (8001700 <write+0x128>)
 80016a2:	7812      	ldrb	r2, [r2, #0]
 80016a4:	4913      	ldr	r1, [pc, #76]	; (80016f4 <write+0x11c>)
 80016a6:	7809      	ldrb	r1, [r1, #0]
 80016a8:	1df8      	adds	r0, r7, #7
 80016aa:	7800      	ldrb	r0, [r0, #0]
 80016ac:	9102      	str	r1, [sp, #8]
 80016ae:	9201      	str	r2, [sp, #4]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	0033      	movs	r3, r6
 80016b4:	0002      	movs	r2, r0
 80016b6:	0029      	movs	r1, r5
 80016b8:	0020      	movs	r0, r4
 80016ba:	f7ff fe15 	bl	80012e8 <draw_char>
        cursor_x += textsize_x * 6; // Advance x by one character
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <write+0x128>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	1c1a      	adds	r2, r3, #0
 80016c6:	1c13      	adds	r3, r2, #0
 80016c8:	18db      	adds	r3, r3, r3
 80016ca:	189b      	adds	r3, r3, r2
 80016cc:	18db      	adds	r3, r3, r3
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <write+0x118>)
 80016d2:	2100      	movs	r1, #0
 80016d4:	5e5b      	ldrsh	r3, [r3, r1]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	18d3      	adds	r3, r2, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <write+0x118>)
 80016e0:	801a      	strh	r2, [r3, #0]
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b003      	add	sp, #12
 80016e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	200000b8 	.word	0x200000b8
 80016f0:	200000b4 	.word	0x200000b4
 80016f4:	20000002 	.word	0x20000002
 80016f8:	200000b6 	.word	0x200000b6
 80016fc:	200000bc 	.word	0x200000bc
 8001700:	20000001 	.word	0x20000001
 8001704:	2000011c 	.word	0x2000011c
 8001708:	2000011a 	.word	0x2000011a
 800170c:	200000b9 	.word	0x200000b9
 8001710:	20000004 	.word	0x20000004
 8001714:	200000ba 	.word	0x200000ba

08001718 <draw_bitmap>:

void draw_bitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	0004      	movs	r4, r0
 8001720:	0008      	movs	r0, r1
 8001722:	60ba      	str	r2, [r7, #8]
 8001724:	0019      	movs	r1, r3
 8001726:	230e      	movs	r3, #14
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	1c22      	adds	r2, r4, #0
 800172c:	801a      	strh	r2, [r3, #0]
 800172e:	230c      	movs	r3, #12
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	1c02      	adds	r2, r0, #0
 8001734:	801a      	strh	r2, [r3, #0]
 8001736:	1dbb      	adds	r3, r7, #6
 8001738:	1c0a      	adds	r2, r1, #0
 800173a:	801a      	strh	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800173c:	1dbb      	adds	r3, r7, #6
 800173e:	2200      	movs	r2, #0
 8001740:	5e9b      	ldrsh	r3, [r3, r2]
 8001742:	3307      	adds	r3, #7
 8001744:	2b00      	cmp	r3, #0
 8001746:	da00      	bge.n	800174a <draw_bitmap+0x32>
 8001748:	3307      	adds	r3, #7
 800174a:	10db      	asrs	r3, r3, #3
 800174c:	001a      	movs	r2, r3
 800174e:	2310      	movs	r3, #16
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8001754:	2317      	movs	r3, #23
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]

//    startWrite();
    for (int16_t j = 0; j < h; j++, y++) {
 800175c:	2314      	movs	r3, #20
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	2200      	movs	r2, #0
 8001762:	801a      	strh	r2, [r3, #0]
 8001764:	e069      	b.n	800183a <draw_bitmap+0x122>
        for (int16_t i = 0; i < w; i++) {
 8001766:	2312      	movs	r3, #18
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]
 800176e:	e049      	b.n	8001804 <draw_bitmap+0xec>
            if (i & 7)
 8001770:	2312      	movs	r3, #18
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	001a      	movs	r2, r3
 8001778:	2307      	movs	r3, #7
 800177a:	4013      	ands	r3, r2
 800177c:	d006      	beq.n	800178c <draw_bitmap+0x74>
                byte <<= 1;
 800177e:	2317      	movs	r3, #23
 8001780:	18fa      	adds	r2, r7, r3
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	18db      	adds	r3, r3, r3
 8001788:	7013      	strb	r3, [r2, #0]
 800178a:	e019      	b.n	80017c0 <draw_bitmap+0xa8>
            else
                byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 800178c:	2314      	movs	r3, #20
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	2200      	movs	r2, #0
 8001792:	5e9b      	ldrsh	r3, [r3, r2]
 8001794:	2210      	movs	r2, #16
 8001796:	18ba      	adds	r2, r7, r2
 8001798:	2100      	movs	r1, #0
 800179a:	5e52      	ldrsh	r2, [r2, r1]
 800179c:	435a      	muls	r2, r3
 800179e:	2312      	movs	r3, #18
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	2100      	movs	r1, #0
 80017a4:	5e5b      	ldrsh	r3, [r3, r1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da00      	bge.n	80017ac <draw_bitmap+0x94>
 80017aa:	3307      	adds	r3, #7
 80017ac:	10db      	asrs	r3, r3, #3
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	18d3      	adds	r3, r2, r3
 80017b2:	001a      	movs	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	189a      	adds	r2, r3, r2
 80017b8:	2317      	movs	r3, #23
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	7812      	ldrb	r2, [r2, #0]
 80017be:	701a      	strb	r2, [r3, #0]
            if (byte & 0x80)
 80017c0:	2317      	movs	r3, #23
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da12      	bge.n	80017f2 <draw_bitmap+0xda>
                draw_pixel(x + i, y, color); // writePixel(x + i, y, color);
 80017cc:	230e      	movs	r3, #14
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	881a      	ldrh	r2, [r3, #0]
 80017d2:	2312      	movs	r3, #18
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	18d3      	adds	r3, r2, r3
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b218      	sxth	r0, r3
 80017de:	232c      	movs	r3, #44	; 0x2c
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	881a      	ldrh	r2, [r3, #0]
 80017e4:	230c      	movs	r3, #12
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	2100      	movs	r1, #0
 80017ea:	5e5b      	ldrsh	r3, [r3, r1]
 80017ec:	0019      	movs	r1, r3
 80017ee:	f7ff fa33 	bl	8000c58 <draw_pixel>
        for (int16_t i = 0; i < w; i++) {
 80017f2:	2112      	movs	r1, #18
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	2200      	movs	r2, #0
 80017f8:	5e9b      	ldrsh	r3, [r3, r2]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3301      	adds	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	187b      	adds	r3, r7, r1
 8001802:	801a      	strh	r2, [r3, #0]
 8001804:	2312      	movs	r3, #18
 8001806:	18fa      	adds	r2, r7, r3
 8001808:	1dbb      	adds	r3, r7, #6
 800180a:	2100      	movs	r1, #0
 800180c:	5e52      	ldrsh	r2, [r2, r1]
 800180e:	2100      	movs	r1, #0
 8001810:	5e5b      	ldrsh	r3, [r3, r1]
 8001812:	429a      	cmp	r2, r3
 8001814:	dbac      	blt.n	8001770 <draw_bitmap+0x58>
    for (int16_t j = 0; j < h; j++, y++) {
 8001816:	2114      	movs	r1, #20
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2200      	movs	r2, #0
 800181c:	5e9b      	ldrsh	r3, [r3, r2]
 800181e:	b29b      	uxth	r3, r3
 8001820:	3301      	adds	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	187b      	adds	r3, r7, r1
 8001826:	801a      	strh	r2, [r3, #0]
 8001828:	210c      	movs	r1, #12
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2200      	movs	r2, #0
 800182e:	5e9b      	ldrsh	r3, [r3, r2]
 8001830:	b29b      	uxth	r3, r3
 8001832:	3301      	adds	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	187b      	adds	r3, r7, r1
 8001838:	801a      	strh	r2, [r3, #0]
 800183a:	2314      	movs	r3, #20
 800183c:	18fa      	adds	r2, r7, r3
 800183e:	2328      	movs	r3, #40	; 0x28
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	2100      	movs	r1, #0
 8001844:	5e52      	ldrsh	r2, [r2, r1]
 8001846:	2100      	movs	r1, #0
 8001848:	5e5b      	ldrsh	r3, [r3, r1]
 800184a:	429a      	cmp	r2, r3
 800184c:	db8b      	blt.n	8001766 <draw_bitmap+0x4e>
        }
    }
//    endWrite();
}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b007      	add	sp, #28
 8001856:	bd90      	pop	{r4, r7, pc}

08001858 <printWrite>:

/*!
 * @brief Print a *char string to the display
 * @param str   The string to print
 */
void printWrite (const char *str) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8001860:	e006      	b.n	8001870 <printWrite+0x18>
		write(*str++);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	0018      	movs	r0, r3
 800186c:	f7ff feb4 	bl	80015d8 <write>
	while (*str) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f4      	bne.n	8001862 <printWrite+0xa>
	}
}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}

08001882 <printString>:

/*!
 * @brief Print a char[] string to the display
 * @param str   The string to primt
 */
void printString(const char str[]) {
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	printWrite(str);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff ffe3 	bl	8001858 <printWrite>
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b08b      	sub	sp, #44	; 0x2c
 80018a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	2414      	movs	r4, #20
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	0018      	movs	r0, r3
 80018a8:	2314      	movs	r3, #20
 80018aa:	001a      	movs	r2, r3
 80018ac:	2100      	movs	r1, #0
 80018ae:	f003 fe17 	bl	80054e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <MX_GPIO_Init+0x13c>)
 80018b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b6:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <MX_GPIO_Init+0x13c>)
 80018b8:	2104      	movs	r1, #4
 80018ba:	430a      	orrs	r2, r1
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80018be:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <MX_GPIO_Init+0x13c>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	2204      	movs	r2, #4
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ca:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <MX_GPIO_Init+0x13c>)
 80018cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ce:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <MX_GPIO_Init+0x13c>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	430a      	orrs	r2, r1
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <MX_GPIO_Init+0x13c>)
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <MX_GPIO_Init+0x13c>)
 80018e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <MX_GPIO_Init+0x13c>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	430a      	orrs	r2, r1
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ee:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <MX_GPIO_Init+0x13c>)
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	2201      	movs	r2, #1
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <MX_GPIO_Init+0x13c>)
 80018fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <MX_GPIO_Init+0x13c>)
 8001900:	2102      	movs	r1, #2
 8001902:	430a      	orrs	r2, r1
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
 8001906:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <MX_GPIO_Init+0x13c>)
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 8001912:	4b32      	ldr	r3, [pc, #200]	; (80019dc <MX_GPIO_Init+0x140>)
 8001914:	2201      	movs	r2, #1
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	0018      	movs	r0, r3
 800191a:	f001 f9f5 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_SET);
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	0099      	lsls	r1, r3, #2
 8001922:	23a0      	movs	r3, #160	; 0xa0
 8001924:	05db      	lsls	r3, r3, #23
 8001926:	2201      	movs	r2, #1
 8001928:	0018      	movs	r0, r3
 800192a:	f001 f9ed 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EPD_CS_Pin, GPIO_PIN_SET);
 800192e:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <MX_GPIO_Init+0x144>)
 8001930:	2201      	movs	r2, #1
 8001932:	2150      	movs	r1, #80	; 0x50
 8001934:	0018      	movs	r0, r3
 8001936:	f001 f9e7 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800193a:	193b      	adds	r3, r7, r4
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	0192      	lsls	r2, r2, #6
 8001940:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001942:	193b      	adds	r3, r7, r4
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <MX_GPIO_Init+0x148>)
 8001946:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	193b      	adds	r3, r7, r4
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800194e:	193b      	adds	r3, r7, r4
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <MX_GPIO_Init+0x140>)
 8001952:	0019      	movs	r1, r3
 8001954:	0010      	movs	r0, r2
 8001956:	f001 f861 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_DC_Pin;
 800195a:	193b      	adds	r3, r7, r4
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	193b      	adds	r3, r7, r4
 8001962:	2201      	movs	r2, #1
 8001964:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	193b      	adds	r3, r7, r4
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	193b      	adds	r3, r7, r4
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_DC_GPIO_Port, &GPIO_InitStruct);
 8001972:	193b      	adds	r3, r7, r4
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <MX_GPIO_Init+0x140>)
 8001976:	0019      	movs	r1, r3
 8001978:	0010      	movs	r0, r2
 800197a:	f001 f84f 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SRAM_CS_Pin;
 800197e:	0021      	movs	r1, r4
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	000c      	movs	r4, r1
 800198a:	193b      	adds	r3, r7, r4
 800198c:	2201      	movs	r2, #1
 800198e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	193b      	adds	r3, r7, r4
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001996:	193b      	adds	r3, r7, r4
 8001998:	2201      	movs	r2, #1
 800199a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SRAM_CS_GPIO_Port, &GPIO_InitStruct);
 800199c:	193a      	adds	r2, r7, r4
 800199e:	23a0      	movs	r3, #160	; 0xa0
 80019a0:	05db      	lsls	r3, r3, #23
 80019a2:	0011      	movs	r1, r2
 80019a4:	0018      	movs	r0, r3
 80019a6:	f001 f839 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|EPD_CS_Pin;
 80019aa:	0021      	movs	r1, r4
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	2250      	movs	r2, #80	; 0x50
 80019b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	2201      	movs	r2, #1
 80019b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <MX_GPIO_Init+0x144>)
 80019c8:	0019      	movs	r1, r3
 80019ca:	0010      	movs	r0, r2
 80019cc:	f001 f826 	bl	8002a1c <HAL_GPIO_Init>

}
 80019d0:	46c0      	nop			; (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b00b      	add	sp, #44	; 0x2c
 80019d6:	bd90      	pop	{r4, r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	50000800 	.word	0x50000800
 80019e0:	50000400 	.word	0x50000400
 80019e4:	10210000 	.word	0x10210000

080019e8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_I2C2_Init+0x74>)
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <MX_I2C2_Init+0x78>)
 80019f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_I2C2_Init+0x74>)
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <MX_I2C2_Init+0x7c>)
 80019f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_I2C2_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a24:	0018      	movs	r0, r3
 8001a26:	f001 f98d 	bl	8002d44 <HAL_I2C_Init>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a2e:	f000 fa2f 	bl	8001e90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a34:	2100      	movs	r1, #0
 8001a36:	0018      	movs	r0, r3
 8001a38:	f001 fa1a 	bl	8002e70 <HAL_I2CEx_ConfigAnalogFilter>
 8001a3c:	1e03      	subs	r3, r0, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a40:	f000 fa26 	bl	8001e90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a46:	2100      	movs	r1, #0
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f001 fa5d 	bl	8002f08 <HAL_I2CEx_ConfigDigitalFilter>
 8001a4e:	1e03      	subs	r3, r0, #0
 8001a50:	d001      	beq.n	8001a56 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a52:	f000 fa1d 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000120 	.word	0x20000120
 8001a60:	40005800 	.word	0x40005800
 8001a64:	00707cbb 	.word	0x00707cbb

08001a68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	240c      	movs	r4, #12
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	0018      	movs	r0, r3
 8001a76:	2314      	movs	r3, #20
 8001a78:	001a      	movs	r2, r3
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	f003 fd30 	bl	80054e0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <HAL_I2C_MspInit+0x80>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d129      	bne.n	8001ade <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_I2C_MspInit+0x84>)
 8001a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_I2C_MspInit+0x84>)
 8001a90:	2102      	movs	r1, #2
 8001a92:	430a      	orrs	r2, r1
 8001a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_I2C_MspInit+0x84>)
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001aa2:	193b      	adds	r3, r7, r4
 8001aa4:	22c0      	movs	r2, #192	; 0xc0
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aaa:	0021      	movs	r1, r4
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	2212      	movs	r2, #18
 8001ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	2203      	movs	r2, #3
 8001abc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001abe:	187b      	adds	r3, r7, r1
 8001ac0:	2206      	movs	r2, #6
 8001ac2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_I2C_MspInit+0x88>)
 8001ac8:	0019      	movs	r1, r3
 8001aca:	0010      	movs	r0, r2
 8001acc:	f000 ffa6 	bl	8002a1c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_I2C_MspInit+0x84>)
 8001ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_I2C_MspInit+0x84>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	03c9      	lsls	r1, r1, #15
 8001ada:	430a      	orrs	r2, r1
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b009      	add	sp, #36	; 0x24
 8001ae4:	bd90      	pop	{r4, r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40005800 	.word	0x40005800
 8001aec:	40021000 	.word	0x40021000
 8001af0:	50000400 	.word	0x50000400

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001afa:	f000 fe47 	bl	800278c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afe:	f000 f955 	bl	8001dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b02:	f7ff fecb 	bl	800189c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b06:	f000 fda3 	bl	8002650 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001b0a:	f000 fb0d 	bl	8002128 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001b0e:	f7ff ff6b 	bl	80019e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

    serial_clear();
 8001b12:	f000 fa07 	bl	8001f24 <serial_clear>
    serial_println("NOTE: Not all GFX and SRAM functions are tested here\n");
 8001b16:	4b88      	ldr	r3, [pc, #544]	; (8001d38 <main+0x244>)
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f000 fa33 	bl	8001f84 <serial_println>

    /***** SRAM TESTING CODE *****/

    serial_printf("Initializing display SRAM... ");
 8001b1e:	4b87      	ldr	r3, [pc, #540]	; (8001d3c <main+0x248>)
 8001b20:	0018      	movs	r0, r3
 8001b22:	f000 fa69 	bl	8001ff8 <serial_printf>
    sram_init();
 8001b26:	f000 fb95 	bl	8002254 <sram_init>
    serial_println("Done!");
 8001b2a:	4b85      	ldr	r3, [pc, #532]	; (8001d40 <main+0x24c>)
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 fa29 	bl	8001f84 <serial_println>

    uint8_t write_value = 0x42;
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	2242      	movs	r2, #66	; 0x42
 8001b36:	701a      	strb	r2, [r3, #0]
    serial_printf("Testing SRAM write... ");
 8001b38:	4b82      	ldr	r3, [pc, #520]	; (8001d44 <main+0x250>)
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fa5c 	bl	8001ff8 <serial_printf>
    sram_erase(0x0008, 2, write_value);
 8001b40:	1dfb      	adds	r3, r7, #7
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	001a      	movs	r2, r3
 8001b46:	2102      	movs	r1, #2
 8001b48:	2008      	movs	r0, #8
 8001b4a:	f000 fcb9 	bl	80024c0 <sram_erase>
    serial_println("Done!");
 8001b4e:	4b7c      	ldr	r3, [pc, #496]	; (8001d40 <main+0x24c>)
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 fa17 	bl	8001f84 <serial_println>
    serial_printf("[0x0008] <== 0x%x\n", write_value);
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <main+0x254>)
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 fa4a 	bl	8001ff8 <serial_printf>

    serial_printf("Testing SRAM read... ");
 8001b64:	4b79      	ldr	r3, [pc, #484]	; (8001d4c <main+0x258>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f000 fa46 	bl	8001ff8 <serial_printf>
    uint16_t read_val = sram_read8(0x0008, MCPSRAM_READ);
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	2008      	movs	r0, #8
 8001b70:	f000 fc70 	bl	8002454 <sram_read8>
 8001b74:	0003      	movs	r3, r0
 8001b76:	001a      	movs	r2, r3
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	801a      	strh	r2, [r3, #0]
    serial_println("Done!");
 8001b7c:	4b70      	ldr	r3, [pc, #448]	; (8001d40 <main+0x24c>)
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 fa00 	bl	8001f84 <serial_println>
    serial_printf("[0x0008] ==> 0x%x\n\n", read_val);
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <main+0x25c>)
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fa33 	bl	8001ff8 <serial_printf>


    /***** DISPLAY TESTING CODE *****/
    /*** INITIALIZATION ***/
    serial_printf("Initializing display... ");
 8001b92:	4b70      	ldr	r3, [pc, #448]	; (8001d54 <main+0x260>)
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 fa2f 	bl	8001ff8 <serial_printf>
    epd_init(false);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7fe fe52 	bl	8000844 <epd_init>
    serial_println("Done!");
 8001ba0:	4b67      	ldr	r3, [pc, #412]	; (8001d40 <main+0x24c>)
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 f9ee 	bl	8001f84 <serial_println>

    serial_printf("Setting display rotation... ");
 8001ba8:	4b6b      	ldr	r3, [pc, #428]	; (8001d58 <main+0x264>)
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 fa24 	bl	8001ff8 <serial_printf>
    set_rotation(2);
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f7ff f985 	bl	8000ec0 <set_rotation>
    serial_println("Done!");
 8001bb6:	4b62      	ldr	r3, [pc, #392]	; (8001d40 <main+0x24c>)
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f000 f9e3 	bl	8001f84 <serial_println>

    serial_printf("Clearing display buffers... ");
 8001bbe:	4b67      	ldr	r3, [pc, #412]	; (8001d5c <main+0x268>)
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 fa19 	bl	8001ff8 <serial_printf>
    clear_buffer();
 8001bc6:	f7fe feb5 	bl	8000934 <clear_buffer>
    epd_powerUp();
 8001bca:	f7fe fd95 	bl	80006f8 <epd_powerUp>
    write_RAM_to_epd(buffer1, buffer1_size, 1, false);
 8001bce:	4b64      	ldr	r3, [pc, #400]	; (8001d60 <main+0x26c>)
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <main+0x270>)
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f7fe ffa9 	bl	8000b30 <write_RAM_to_epd>
    serial_println("Done!\n");
 8001bde:	4b62      	ldr	r3, [pc, #392]	; (8001d68 <main+0x274>)
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 f9cf 	bl	8001f84 <serial_println>

    /*** BITMAP ***/
    serial_printf("Drawing bitmap to buffer... ");
 8001be6:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <main+0x278>)
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 fa05 	bl	8001ff8 <serial_printf>
    draw_bitmap(0, 0, apple, EPD_WIDTH, EPD_HEIGHT, EPD_BLACK);
 8001bee:	2384      	movs	r3, #132	; 0x84
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4a5f      	ldr	r2, [pc, #380]	; (8001d70 <main+0x27c>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	9101      	str	r1, [sp, #4]
 8001bf8:	21b0      	movs	r1, #176	; 0xb0
 8001bfa:	9100      	str	r1, [sp, #0]
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff fd8a 	bl	8001718 <draw_bitmap>
    serial_println("Done!");
 8001c04:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <main+0x24c>)
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 f9bc 	bl	8001f84 <serial_println>

    serial_printf("Manually writing buffer to the display (for color)... ");
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <main+0x280>)
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f000 f9f2 	bl	8001ff8 <serial_printf>
    epd_powerUp();
 8001c14:	f7fe fd70 	bl	80006f8 <epd_powerUp>
    write_RAM_to_epd(buffer1, buffer1_size, 1, false);
 8001c18:	4b51      	ldr	r3, [pc, #324]	; (8001d60 <main+0x26c>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	4b51      	ldr	r3, [pc, #324]	; (8001d64 <main+0x270>)
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	2300      	movs	r3, #0
 8001c22:	2201      	movs	r2, #1
 8001c24:	f7fe ff84 	bl	8000b30 <write_RAM_to_epd>
    display(false);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7fe ffdf 	bl	8000bec <display>
    serial_println("Done!");
 8001c2e:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <main+0x24c>)
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 f9a7 	bl	8001f84 <serial_println>

    serial_printf("Clearing display buffers... ");
 8001c36:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <main+0x268>)
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f000 f9dd 	bl	8001ff8 <serial_printf>
    clear_buffer();
 8001c3e:	f7fe fe79 	bl	8000934 <clear_buffer>
    serial_println("Done!\n");
 8001c42:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <main+0x274>)
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 f99d 	bl	8001f84 <serial_println>

    /*** TEXT ***/
    serial_printf("Setting text scaling... ");
 8001c4a:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <main+0x284>)
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 f9d3 	bl	8001ff8 <serial_printf>
    set_text_scale(2);
 8001c52:	2002      	movs	r0, #2
 8001c54:	f7ff f98e 	bl	8000f74 <set_text_scale>
    serial_println("Done!");
 8001c58:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <main+0x24c>)
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 f992 	bl	8001f84 <serial_println>

    serial_printf("Setting x-margin... ");
 8001c60:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <main+0x288>)
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 f9c8 	bl	8001ff8 <serial_printf>
    set_x_margin(2);
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f7ff f9b1 	bl	8000fd0 <set_x_margin>
    serial_println("Done!");
 8001c6e:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <main+0x24c>)
 8001c70:	0018      	movs	r0, r3
 8001c72:	f000 f987 	bl	8001f84 <serial_println>

    serial_printf("Setting cursor... ");
 8001c76:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <main+0x28c>)
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 f9bd 	bl	8001ff8 <serial_printf>
    set_cursor(2,2);
 8001c7e:	2102      	movs	r1, #2
 8001c80:	2002      	movs	r0, #2
 8001c82:	f7ff f989 	bl	8000f98 <set_cursor>
    serial_println("Done!");
 8001c86:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <main+0x24c>)
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f000 f97b 	bl	8001f84 <serial_println>
//
//	serial_printf("Writing buffer to the display... ");
//	display(false);
//    serial_println("Done!\n");

    serial_printf("Initial testing sequence done!\n\n");
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <main+0x290>)
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 f9b1 	bl	8001ff8 <serial_printf>

    serial_printf("Clearing display buffers... ");
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <main+0x268>)
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f000 f9ad 	bl	8001ff8 <serial_printf>
    clear_buffer();
 8001c9e:	f7fe fe49 	bl	8000934 <clear_buffer>
    epd_powerUp();
 8001ca2:	f7fe fd29 	bl	80006f8 <epd_powerUp>
    write_RAM_to_epd(buffer1, buffer1_size, 0, false);
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <main+0x26c>)
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <main+0x270>)
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f7fe ff3d 	bl	8000b30 <write_RAM_to_epd>
    write_RAM_to_epd(buffer1, buffer1_size, 1, false);
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <main+0x26c>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <main+0x270>)
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f7fe ff35 	bl	8000b30 <write_RAM_to_epd>
    serial_println("Done!\n");
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <main+0x274>)
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f000 f95b 	bl	8001f84 <serial_println>

    serial_println("Printing random information to display\n");
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <main+0x294>)
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f000 f957 	bl	8001f84 <serial_println>
    set_text_scale(2);
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	f7ff f94c 	bl	8000f74 <set_text_scale>
    set_x_margin(2);
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7ff f977 	bl	8000fd0 <set_x_margin>
	set_y_margin(2);
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f7ff f984 	bl	8000ff0 <set_y_margin>
	set_cursor(2,2);
 8001ce8:	2102      	movs	r1, #2
 8001cea:	2002      	movs	r0, #2
 8001cec:	f7ff f954 	bl	8000f98 <set_cursor>

	printString("4/10/2021, 12:00 PM\n");
 8001cf0:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <main+0x298>)
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff fdc5 	bl	8001882 <printString>
	printString("Battery: 90%\n");
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <main+0x29c>)
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f7ff fdc1 	bl	8001882 <printString>
	printString("Temperature: 72 F\n");
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <main+0x2a0>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff fdbd 	bl	8001882 <printString>
	printString("Rel. Humidity: 35%\n");
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <main+0x2a4>)
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7ff fdb9 	bl	8001882 <printString>
	printString("Methane: 115 ppm\n\n");
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <main+0x2a8>)
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7ff fdb5 	bl	8001882 <printString>
	printString("Food: Banana\n");
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <main+0x2ac>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7ff fdb1 	bl	8001882 <printString>
	printString("Time Elapsed: 2 days\n");
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <main+0x2b0>)
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff fdad 	bl	8001882 <printString>
	printString("Est. Days Left: 7 days\n");
 8001d28:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <main+0x2b4>)
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7ff fda9 	bl	8001882 <printString>

	display(false);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7fe ff5b 	bl	8000bec <display>
//    uint16_t temp;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8001d36:	e7fe      	b.n	8001d36 <main+0x242>
 8001d38:	080056fc 	.word	0x080056fc
 8001d3c:	08005734 	.word	0x08005734
 8001d40:	08005754 	.word	0x08005754
 8001d44:	0800575c 	.word	0x0800575c
 8001d48:	08005774 	.word	0x08005774
 8001d4c:	08005788 	.word	0x08005788
 8001d50:	080057a0 	.word	0x080057a0
 8001d54:	080057b4 	.word	0x080057b4
 8001d58:	080057d0 	.word	0x080057d0
 8001d5c:	080057f0 	.word	0x080057f0
 8001d60:	2000010c 	.word	0x2000010c
 8001d64:	20000108 	.word	0x20000108
 8001d68:	08005810 	.word	0x08005810
 8001d6c:	08005818 	.word	0x08005818
 8001d70:	08005ed4 	.word	0x08005ed4
 8001d74:	08005838 	.word	0x08005838
 8001d78:	08005870 	.word	0x08005870
 8001d7c:	0800588c 	.word	0x0800588c
 8001d80:	080058a4 	.word	0x080058a4
 8001d84:	080058b8 	.word	0x080058b8
 8001d88:	080058dc 	.word	0x080058dc
 8001d8c:	08005904 	.word	0x08005904
 8001d90:	0800591c 	.word	0x0800591c
 8001d94:	0800592c 	.word	0x0800592c
 8001d98:	08005940 	.word	0x08005940
 8001d9c:	08005954 	.word	0x08005954
 8001da0:	08005968 	.word	0x08005968
 8001da4:	08005978 	.word	0x08005978
 8001da8:	08005990 	.word	0x08005990

08001dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b09d      	sub	sp, #116	; 0x74
 8001db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db2:	2438      	movs	r4, #56	; 0x38
 8001db4:	193b      	adds	r3, r7, r4
 8001db6:	0018      	movs	r0, r3
 8001db8:	2338      	movs	r3, #56	; 0x38
 8001dba:	001a      	movs	r2, r3
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f003 fb8f 	bl	80054e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc2:	2324      	movs	r3, #36	; 0x24
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	2314      	movs	r3, #20
 8001dca:	001a      	movs	r2, r3
 8001dcc:	2100      	movs	r1, #0
 8001dce:	f003 fb87 	bl	80054e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd2:	003b      	movs	r3, r7
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	2324      	movs	r3, #36	; 0x24
 8001dd8:	001a      	movs	r2, r3
 8001dda:	2100      	movs	r1, #0
 8001ddc:	f003 fb80 	bl	80054e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <SystemClock_Config+0xdc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a29      	ldr	r2, [pc, #164]	; (8001e8c <SystemClock_Config+0xe0>)
 8001de6:	401a      	ands	r2, r3
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <SystemClock_Config+0xdc>)
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	0109      	lsls	r1, r1, #4
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df2:	0021      	movs	r1, r4
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	2202      	movs	r2, #2
 8001df8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	2210      	movs	r2, #16
 8001e04:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	2202      	movs	r2, #2
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	2200      	movs	r2, #0
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	02d2      	lsls	r2, r2, #11
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	03d2      	lsls	r2, r2, #15
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e22:	187b      	adds	r3, r7, r1
 8001e24:	0018      	movs	r0, r3
 8001e26:	f001 f8bb 	bl	8002fa0 <HAL_RCC_OscConfig>
 8001e2a:	1e03      	subs	r3, r0, #0
 8001e2c:	d001      	beq.n	8001e32 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001e2e:	f000 f82f 	bl	8001e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e32:	2124      	movs	r1, #36	; 0x24
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	220f      	movs	r2, #15
 8001e38:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e52:	187b      	adds	r3, r7, r1
 8001e54:	2101      	movs	r1, #1
 8001e56:	0018      	movs	r0, r3
 8001e58:	f001 fc66 	bl	8003728 <HAL_RCC_ClockConfig>
 8001e5c:	1e03      	subs	r3, r0, #0
 8001e5e:	d001      	beq.n	8001e64 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001e60:	f000 f816 	bl	8001e90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e64:	003b      	movs	r3, r7
 8001e66:	2202      	movs	r2, #2
 8001e68:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e6a:	003b      	movs	r3, r7
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e70:	003b      	movs	r3, r7
 8001e72:	0018      	movs	r0, r3
 8001e74:	f001 fe7c 	bl	8003b70 <HAL_RCCEx_PeriphCLKConfig>
 8001e78:	1e03      	subs	r3, r0, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001e7c:	f000 f808 	bl	8001e90 <Error_Handler>
  }
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b01d      	add	sp, #116	; 0x74
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	ffffe7ff 	.word	0xffffe7ff

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001e98:	e7fe      	b.n	8001e98 <Error_Handler+0x8>
	...

08001e9c <convert>:

// Internal functions to serial_print
char *convert(unsigned int num, int base);
size_t strlen(const char *str);

char *convert(unsigned int num, int base) { 
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	static char Representation[]= "0123456789ABCDEF";
	static char buffer[50]; 
	char *ptr; 
	
	ptr = &buffer[49]; 
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <convert+0x50>)
 8001ea8:	60fb      	str	r3, [r7, #12]
	*ptr = '\0'; 
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
	
	do { 
		*--ptr = Representation[num%base]; 
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0011      	movs	r1, r2
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7fe f9ac 	bl	8000214 <__aeabi_uidivmod>
 8001ebc:	000b      	movs	r3, r1
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <convert+0x54>)
 8001ec8:	5c9a      	ldrb	r2, [r3, r2]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	701a      	strb	r2, [r3, #0]
		num /= base; 
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe f918 	bl	8000108 <__udivsi3>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	607b      	str	r3, [r7, #4]
	} while(num != 0); 
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1e6      	bne.n	8001eb0 <convert+0x14>
	
	return(ptr); 
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b004      	add	sp, #16
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200000f1 	.word	0x200000f1
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <strlen>:

/*!
    @brief https://stackoverflow.com/questions/22520413/c-strlen-implementation-in-one-line-of-code
*/
size_t strlen (const char *str) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    return (*str) ? strlen(++str) + 1 : 0;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d009      	beq.n	8001f18 <strlen+0x24>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3301      	adds	r3, #1
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff fff1 	bl	8001ef4 <strlen>
 8001f12:	0003      	movs	r3, r0
 8001f14:	3301      	adds	r3, #1
 8001f16:	e000      	b.n	8001f1a <strlen+0x26>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b002      	add	sp, #8
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <serial_clear>:
// End of internal functions for serial_print

void serial_clear() {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
  char clear_sequence[] = {0x1b, 0x5B, 0x32, 0x4A, 0x1b, 0x5B, 0x48};
 8001f2a:	003b      	movs	r3, r7
 8001f2c:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <serial_clear+0x2c>)
 8001f2e:	6811      	ldr	r1, [r2, #0]
 8001f30:	6019      	str	r1, [r3, #0]
 8001f32:	8891      	ldrh	r1, [r2, #4]
 8001f34:	8099      	strh	r1, [r3, #4]
 8001f36:	7992      	ldrb	r2, [r2, #6]
 8001f38:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&SERAL_UART, (unsigned char*) clear_sequence, sizeof clear_sequence, HAL_MAX_DELAY);
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	425b      	negs	r3, r3
 8001f3e:	0039      	movs	r1, r7
 8001f40:	4804      	ldr	r0, [pc, #16]	; (8001f54 <serial_clear+0x30>)
 8001f42:	2207      	movs	r2, #7
 8001f44:	f002 fdd6 	bl	8004af4 <HAL_UART_Transmit>
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	080059a8 	.word	0x080059a8
 8001f54:	200001c4 	.word	0x200001c4

08001f58 <serial_print>:

void serial_print(char string[]) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&SERAL_UART, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff ffc6 	bl	8001ef4 <strlen>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	425b      	negs	r3, r3
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4803      	ldr	r0, [pc, #12]	; (8001f80 <serial_print+0x28>)
 8001f74:	f002 fdbe 	bl	8004af4 <HAL_UART_Transmit>
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200001c4 	.word	0x200001c4

08001f84 <serial_println>:

void serial_println(char *string) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&SERAL_UART, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7ff ffb0 	bl	8001ef4 <strlen>
 8001f94:	0003      	movs	r3, r0
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	2301      	movs	r3, #1
 8001f9a:	425b      	negs	r3, r3
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <serial_println+0x44>)
 8001fa0:	f002 fda8 	bl	8004af4 <HAL_UART_Transmit>
  char newline[] = "\r\f";
 8001fa4:	200c      	movs	r0, #12
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <serial_println+0x48>)
 8001faa:	8811      	ldrh	r1, [r2, #0]
 8001fac:	8019      	strh	r1, [r3, #0]
 8001fae:	7892      	ldrb	r2, [r2, #2]
 8001fb0:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&SERAL_UART, (unsigned char*) newline, 2, HAL_MAX_DELAY);
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	425b      	negs	r3, r3
 8001fb6:	1839      	adds	r1, r7, r0
 8001fb8:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <serial_println+0x44>)
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f002 fd9a 	bl	8004af4 <HAL_UART_Transmit>
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b004      	add	sp, #16
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200001c4 	.word	0x200001c4
 8001fcc:	080059b0 	.word	0x080059b0

08001fd0 <serial_putc>:

void serial_putc(char c) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&SERAL_UART, (unsigned char*) &c, 1, HAL_MAX_DELAY);
 8001fdc:	2301      	movs	r3, #1
 8001fde:	425b      	negs	r3, r3
 8001fe0:	1df9      	adds	r1, r7, #7
 8001fe2:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <serial_putc+0x24>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f002 fd85 	bl	8004af4 <HAL_UART_Transmit>
}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	200001c4 	.word	0x200001c4

08001ff8 <serial_printf>:

/*!
    @brief a version of printf implmented from http://www.firmcodes.com/write-printf-function-c/
*/
void serial_printf(char format[], ...) { 
 8001ff8:	b40f      	push	{r0, r1, r2, r3}
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
    char c;
	char *s; 
	
	//Module 1: Initializing Myprintf's arguments 
	va_list arg; 
	va_start(arg, format); 
 8002000:	2324      	movs	r3, #36	; 0x24
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	603b      	str	r3, [r7, #0]
	
	for(traverse = format; *traverse != '\0'; traverse++) { 
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e079      	b.n	8002100 <serial_printf+0x108>
		while( (*traverse != '%') && (*traverse != '\0')) {
            if (*traverse == '\n') {
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b0a      	cmp	r3, #10
 8002012:	d104      	bne.n	800201e <serial_printf+0x26>
            	serial_print("\r\f");
 8002014:	4b41      	ldr	r3, [pc, #260]	; (800211c <serial_printf+0x124>)
 8002016:	0018      	movs	r0, r3
 8002018:	f7ff ff9e 	bl	8001f58 <serial_print>
 800201c:	e004      	b.n	8002028 <serial_printf+0x30>
            }
            else {
            	serial_putc(*traverse);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	0018      	movs	r0, r3
 8002024:	f7ff ffd4 	bl	8001fd0 <serial_putc>
            }
			traverse++; 
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
		while( (*traverse != '%') && (*traverse != '\0')) {
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b25      	cmp	r3, #37	; 0x25
 8002034:	d003      	beq.n	800203e <serial_printf+0x46>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1e6      	bne.n	800200c <serial_printf+0x14>
		} 

		if (*traverse == '\0') break;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d061      	beq.n	800210a <serial_printf+0x112>
		traverse++; 
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
		
		//Module 2: Fetching and executing arguments
		switch(*traverse) { 
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	3b63      	subs	r3, #99	; 0x63
 8002052:	2b15      	cmp	r3, #21
 8002054:	d851      	bhi.n	80020fa <serial_printf+0x102>
 8002056:	009a      	lsls	r2, r3, #2
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <serial_printf+0x128>)
 800205a:	18d3      	adds	r3, r2, r3
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	469f      	mov	pc, r3
			case 'c' : 
                c = va_arg(arg,int);		//Fetch char argument
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	1d1a      	adds	r2, r3, #4
 8002064:	603a      	str	r2, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	1dfb      	adds	r3, r7, #7
 800206a:	701a      	strb	r2, [r3, #0]
				serial_putc(c);
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	0018      	movs	r0, r3
 8002072:	f7ff ffad 	bl	8001fd0 <serial_putc>
				break; 	
 8002076:	e040      	b.n	80020fa <serial_printf+0x102>
			case 'd' : 
                signed_i = va_arg(arg,int); 		//Fetch Decimal/Integer argument
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	1d1a      	adds	r2, r3, #4
 800207c:	603a      	str	r2, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	613b      	str	r3, [r7, #16]
				if (signed_i < 0) {
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da06      	bge.n	8002096 <serial_printf+0x9e>
                    signed_i = -signed_i;
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	425b      	negs	r3, r3
 800208c:	613b      	str	r3, [r7, #16]
                    serial_print("-");
 800208e:	4b25      	ldr	r3, [pc, #148]	; (8002124 <serial_printf+0x12c>)
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff ff61 	bl	8001f58 <serial_print>
                } 
                serial_print(convert(signed_i, 10));
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	210a      	movs	r1, #10
 800209a:	0018      	movs	r0, r3
 800209c:	f7ff fefe 	bl	8001e9c <convert>
 80020a0:	0003      	movs	r3, r0
 80020a2:	0018      	movs	r0, r3
 80020a4:	f7ff ff58 	bl	8001f58 <serial_print>
                break; 	
 80020a8:	e027      	b.n	80020fa <serial_printf+0x102>
			case 'o':
                i = va_arg(arg,unsigned int); //Fetch Octal representation
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	1d1a      	adds	r2, r3, #4
 80020ae:	603a      	str	r2, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 8));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2108      	movs	r1, #8
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7ff feef 	bl	8001e9c <convert>
 80020be:	0003      	movs	r3, r0
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7ff ff49 	bl	8001f58 <serial_print>
                break; 
 80020c6:	e018      	b.n	80020fa <serial_printf+0x102>
			case 's': 
                s = va_arg(arg,char *); 		//Fetch string
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	1d1a      	adds	r2, r3, #4
 80020cc:	603a      	str	r2, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60bb      	str	r3, [r7, #8]
                serial_print(s);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff ff3f 	bl	8001f58 <serial_print>
                break; 
 80020da:	e00e      	b.n	80020fa <serial_printf+0x102>
			case 'x': 
                i = va_arg(arg,unsigned int); //Fetch Hexadecimal representation
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	603a      	str	r2, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 16));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2110      	movs	r1, #16
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7ff fed6 	bl	8001e9c <convert>
 80020f0:	0003      	movs	r3, r0
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7ff ff30 	bl	8001f58 <serial_print>
                break; 
 80020f8:	46c0      	nop			; (mov r8, r8)
	for(traverse = format; *traverse != '\0'; traverse++) { 
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d192      	bne.n	800202e <serial_printf+0x36>
		}	
	} 

	//Module 3: Closing argument list to necessary clean-up
	va_end(arg); 
} 
 8002108:	e000      	b.n	800210c <serial_printf+0x114>
		if (*traverse == '\0') break;
 800210a:	46c0      	nop			; (mov r8, r8)
} 
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b006      	add	sp, #24
 8002112:	bc80      	pop	{r7}
 8002114:	bc08      	pop	{r3}
 8002116:	b004      	add	sp, #16
 8002118:	4718      	bx	r3
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	080059b0 	.word	0x080059b0
 8002120:	08007584 	.word	0x08007584
 8002124:	080059b4 	.word	0x080059b4

08002128 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <MX_SPI1_Init+0x68>)
 800212e:	4a19      	ldr	r2, [pc, #100]	; (8002194 <MX_SPI1_Init+0x6c>)
 8002130:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002132:	4b17      	ldr	r3, [pc, #92]	; (8002190 <MX_SPI1_Init+0x68>)
 8002134:	2282      	movs	r2, #130	; 0x82
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <MX_SPI1_Init+0x68>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <MX_SPI1_Init+0x68>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <MX_SPI1_Init+0x68>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <MX_SPI1_Init+0x68>)
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <MX_SPI1_Init+0x68>)
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <MX_SPI1_Init+0x68>)
 800215c:	2200      	movs	r2, #0
 800215e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MX_SPI1_Init+0x68>)
 8002162:	2200      	movs	r2, #0
 8002164:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <MX_SPI1_Init+0x68>)
 8002168:	2200      	movs	r2, #0
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_SPI1_Init+0x68>)
 800216e:	2200      	movs	r2, #0
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <MX_SPI1_Init+0x68>)
 8002174:	2207      	movs	r2, #7
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <MX_SPI1_Init+0x68>)
 800217a:	0018      	movs	r0, r3
 800217c:	f001 fe5c 	bl	8003e38 <HAL_SPI_Init>
 8002180:	1e03      	subs	r3, r0, #0
 8002182:	d001      	beq.n	8002188 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002184:	f7ff fe84 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	2000016c 	.word	0x2000016c
 8002194:	40013000 	.word	0x40013000

08002198 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	240c      	movs	r4, #12
 80021a2:	193b      	adds	r3, r7, r4
 80021a4:	0018      	movs	r0, r3
 80021a6:	2314      	movs	r3, #20
 80021a8:	001a      	movs	r2, r3
 80021aa:	2100      	movs	r1, #0
 80021ac:	f003 f998 	bl	80054e0 <memset>
  if(spiHandle->Instance==SPI1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a18      	ldr	r2, [pc, #96]	; (8002218 <HAL_SPI_MspInit+0x80>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d129      	bne.n	800220e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_SPI_MspInit+0x84>)
 80021bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_SPI_MspInit+0x84>)
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	0149      	lsls	r1, r1, #5
 80021c4:	430a      	orrs	r2, r1
 80021c6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_SPI_MspInit+0x84>)
 80021ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_SPI_MspInit+0x84>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	430a      	orrs	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_SPI_MspInit+0x84>)
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	2201      	movs	r2, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021e0:	0021      	movs	r1, r4
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	22e0      	movs	r2, #224	; 0xe0
 80021e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	2202      	movs	r2, #2
 80021ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	2201      	movs	r2, #1
 80021f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	187a      	adds	r2, r7, r1
 8002202:	23a0      	movs	r3, #160	; 0xa0
 8002204:	05db      	lsls	r3, r3, #23
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fc07 	bl	8002a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b009      	add	sp, #36	; 0x24
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	40013000 	.word	0x40013000
 800221c:	40021000 	.word	0x40021000

08002220 <sram_csHigh>:

#define SRAM_SPI hspi1


// Function Code
void sram_csHigh() {
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_SET);
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	0099      	lsls	r1, r3, #2
 8002228:	23a0      	movs	r3, #160	; 0xa0
 800222a:	05db      	lsls	r3, r3, #23
 800222c:	2201      	movs	r2, #1
 800222e:	0018      	movs	r0, r3
 8002230:	f000 fd6a 	bl	8002d08 <HAL_GPIO_WritePin>
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <sram_csLow>:

void sram_csLow() {
 800223a:	b580      	push	{r7, lr}
 800223c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SRAM_CS_GPIO_Port, SRAM_CS_Pin, GPIO_PIN_RESET);
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	0099      	lsls	r1, r3, #2
 8002242:	23a0      	movs	r3, #160	; 0xa0
 8002244:	05db      	lsls	r3, r3, #23
 8002246:	2200      	movs	r2, #0
 8002248:	0018      	movs	r0, r3
 800224a:	f000 fd5d 	bl	8002d08 <HAL_GPIO_WritePin>
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <sram_init>:

/*!
    @brief initializes the sram module
*/
void sram_init() {
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
    sram_csHigh();
 800225a:	f7ff ffe1 	bl	8002220 <sram_csHigh>
    HAL_Delay(100);
 800225e:	2064      	movs	r0, #100	; 0x64
 8002260:	f000 fb04 	bl	800286c <HAL_Delay>
    sram_csLow();
 8002264:	f7ff ffe9 	bl	800223a <sram_csLow>
    uint8_t magic_value = 0xFF;
 8002268:	1cbb      	adds	r3, r7, #2
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	e00c      	b.n	800228e <sram_init+0x3a>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &magic_value, 1, HAL_MAX_DELAY);
 8002274:	1cfc      	adds	r4, r7, #3
 8002276:	2301      	movs	r3, #1
 8002278:	425b      	negs	r3, r3
 800227a:	1cb9      	adds	r1, r7, #2
 800227c:	4808      	ldr	r0, [pc, #32]	; (80022a0 <sram_init+0x4c>)
 800227e:	2201      	movs	r2, #1
 8002280:	f001 fe6e 	bl	8003f60 <HAL_SPI_Transmit>
 8002284:	0003      	movs	r3, r0
 8002286:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 3; i++) {
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3301      	adds	r3, #1
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b02      	cmp	r3, #2
 8002292:	ddef      	ble.n	8002274 <sram_init+0x20>
//        if (status != HAL_OK) {
//            char error[] = "SRAM_INIT: FAILED INIT MAGIC\r\f";
//            serial_println(error);
//        }
    }
    sram_csHigh();
 8002294:	f7ff ffc4 	bl	8002220 <sram_csHigh>
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b003      	add	sp, #12
 800229e:	bd90      	pop	{r4, r7, pc}
 80022a0:	2000016c 	.word	0x2000016c

080022a4 <sram_write>:
    @param addr the addres to write to
    @param buf the data buffer to write
    @param num the nubmer of bytes to write (from the buffer)
    @param reg pass MCPSRAM_WRSR if you're writing the status register, MCPSRAM_WRITE if you are writing data. Use MCPSRAM_WRITE in Adafruit functions that don't specify reg (default value).
*/
void sram_write(uint16_t addr, uint8_t* buf, uint16_t num, uint8_t reg) {
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	0004      	movs	r4, r0
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	0010      	movs	r0, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	250e      	movs	r5, #14
 80022b4:	197b      	adds	r3, r7, r5
 80022b6:	1c22      	adds	r2, r4, #0
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	230c      	movs	r3, #12
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	1c02      	adds	r2, r0, #0
 80022c0:	801a      	strh	r2, [r3, #0]
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	1c0a      	adds	r2, r1, #0
 80022c6:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 80022c8:	f7ff ffb7 	bl	800223a <sram_csLow>

    // write command and address
    uint8_t cmdbuf[3] = {
 80022cc:	2118      	movs	r1, #24
 80022ce:	187b      	adds	r3, r7, r1
 80022d0:	1dfa      	adds	r2, r7, #7
 80022d2:	7812      	ldrb	r2, [r2, #0]
 80022d4:	701a      	strb	r2, [r3, #0]
        reg,
        (uint8_t) (addr >> 8),
 80022d6:	197b      	adds	r3, r7, r5
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 80022e4:	197b      	adds	r3, r7, r5
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 80022ea:	187b      	adds	r3, r7, r1
 80022ec:	709a      	strb	r2, [r3, #2]
    };
    
    for (int i = 0; i < 3; i++) {
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	e019      	b.n	8002328 <sram_write+0x84>
        uint8_t d = cmdbuf[i];
 80022f4:	2318      	movs	r3, #24
 80022f6:	18fa      	adds	r2, r7, r3
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	18d3      	adds	r3, r2, r3
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	2117      	movs	r1, #23
 8002300:	187b      	adds	r3, r7, r1
 8002302:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8002304:	231f      	movs	r3, #31
 8002306:	18fc      	adds	r4, r7, r3
 8002308:	2301      	movs	r3, #1
 800230a:	425b      	negs	r3, r3
 800230c:	1879      	adds	r1, r7, r1
 800230e:	481c      	ldr	r0, [pc, #112]	; (8002380 <sram_write+0xdc>)
 8002310:	2201      	movs	r2, #1
 8002312:	f001 fe25 	bl	8003f60 <HAL_SPI_Transmit>
 8002316:	0003      	movs	r3, r0
 8002318:	7023      	strb	r3, [r4, #0]
//        if (status != HAL_OK) {
//            char error[] = "SRAM_WRITE: FAILED TO SEND CMD/ADDR\r\f";
//            serial_println(error);
//        }
        if (reg != MCPSRAM_WRITE) {
 800231a:	1dfb      	adds	r3, r7, #7
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d106      	bne.n	8002330 <sram_write+0x8c>
    for (int i = 0; i < 3; i++) {
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	3301      	adds	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	2b02      	cmp	r3, #2
 800232c:	dde2      	ble.n	80022f4 <sram_write+0x50>
 800232e:	e000      	b.n	8002332 <sram_write+0x8e>
            break;
 8002330:	46c0      	nop			; (mov r8, r8)
        }
    }

    for (int i = 0; i < num; i++) {
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
 8002336:	e014      	b.n	8002362 <sram_write+0xbe>
        uint8_t d = buf[i];
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	18d3      	adds	r3, r2, r3
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	2116      	movs	r1, #22
 8002342:	187b      	adds	r3, r7, r1
 8002344:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8002346:	231e      	movs	r3, #30
 8002348:	18fc      	adds	r4, r7, r3
 800234a:	2301      	movs	r3, #1
 800234c:	425b      	negs	r3, r3
 800234e:	1879      	adds	r1, r7, r1
 8002350:	480b      	ldr	r0, [pc, #44]	; (8002380 <sram_write+0xdc>)
 8002352:	2201      	movs	r2, #1
 8002354:	f001 fe04 	bl	8003f60 <HAL_SPI_Transmit>
 8002358:	0003      	movs	r3, r0
 800235a:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num; i++) {
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	3301      	adds	r3, #1
 8002360:	623b      	str	r3, [r7, #32]
 8002362:	230c      	movs	r3, #12
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	6a3a      	ldr	r2, [r7, #32]
 800236a:	429a      	cmp	r2, r3
 800236c:	dbe4      	blt.n	8002338 <sram_write+0x94>
//            char error[] = "SRAM_WRITE: FAILED TO SEND\r\f";
//            serial_println(error);
//        }
    }

    sram_csHigh();
 800236e:	f7ff ff57 	bl	8002220 <sram_csHigh>
    HAL_Delay(100);
 8002372:	2064      	movs	r0, #100	; 0x64
 8002374:	f000 fa7a 	bl	800286c <HAL_Delay>
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b00a      	add	sp, #40	; 0x28
 800237e:	bdb0      	pop	{r4, r5, r7, pc}
 8002380:	2000016c 	.word	0x2000016c

08002384 <sram_read>:
    @param addr the address to read from
    @param buf the data buffer to read into
    @param num the number of bytes to read
    @param reg pass MCPSRAM_RDSR if you're reading the status register, MCPSRAM_READ if you are reading data. Use MCPSRAM_READ in Adafruit functions that don't specify reg (default value).
*/
void sram_read(uint16_t addr, uint8_t *buf, uint16_t num, uint8_t reg) {
 8002384:	b5b0      	push	{r4, r5, r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	0004      	movs	r4, r0
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	0010      	movs	r0, r2
 8002390:	0019      	movs	r1, r3
 8002392:	250e      	movs	r5, #14
 8002394:	197b      	adds	r3, r7, r5
 8002396:	1c22      	adds	r2, r4, #0
 8002398:	801a      	strh	r2, [r3, #0]
 800239a:	230c      	movs	r3, #12
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	1c02      	adds	r2, r0, #0
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	1c0a      	adds	r2, r1, #0
 80023a6:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 80023a8:	f7ff ff47 	bl	800223a <sram_csLow>

    // read command and address
    uint8_t cmdbuf[3] = {
 80023ac:	2118      	movs	r1, #24
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	1dfa      	adds	r2, r7, #7
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	701a      	strb	r2, [r3, #0]
        reg,
        (uint8_t) (addr >> 8),
 80023b6:	197b      	adds	r3, r7, r5
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 80023c4:	197b      	adds	r3, r7, r5
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	709a      	strb	r2, [r3, #2]
    };

    for (int i = 0; i < 3; i++) {
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
 80023d2:	e019      	b.n	8002408 <sram_read+0x84>
        uint8_t d = cmdbuf[i];
 80023d4:	2318      	movs	r3, #24
 80023d6:	18fa      	adds	r2, r7, r3
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	18d3      	adds	r3, r2, r3
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	2117      	movs	r1, #23
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 80023e4:	231f      	movs	r3, #31
 80023e6:	18fc      	adds	r4, r7, r3
 80023e8:	2301      	movs	r3, #1
 80023ea:	425b      	negs	r3, r3
 80023ec:	1879      	adds	r1, r7, r1
 80023ee:	4818      	ldr	r0, [pc, #96]	; (8002450 <sram_read+0xcc>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	f001 fdb5 	bl	8003f60 <HAL_SPI_Transmit>
 80023f6:	0003      	movs	r3, r0
 80023f8:	7023      	strb	r3, [r4, #0]
//        if (status != HAL_OK) {
//            char error[] = "SRAM_READ: FAILED TO SEND";
//            serial_println(error);
//        }
        if (reg != MCPSRAM_READ) {
 80023fa:	1dfb      	adds	r3, r7, #7
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d106      	bne.n	8002410 <sram_read+0x8c>
    for (int i = 0; i < 3; i++) {
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	3301      	adds	r3, #1
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	2b02      	cmp	r3, #2
 800240c:	dde2      	ble.n	80023d4 <sram_read+0x50>
 800240e:	e000      	b.n	8002412 <sram_read+0x8e>
            break;
 8002410:	46c0      	nop			; (mov r8, r8)
        }
    }

    for (int i = 0; i < num; i++) {
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	e00f      	b.n	8002438 <sram_read+0xb4>
        HAL_StatusTypeDef status = HAL_SPI_Receive(&SRAM_SPI, buf++, 1, HAL_MAX_DELAY);
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	1c4b      	adds	r3, r1, #1
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	231e      	movs	r3, #30
 8002420:	18fc      	adds	r4, r7, r3
 8002422:	2301      	movs	r3, #1
 8002424:	425b      	negs	r3, r3
 8002426:	480a      	ldr	r0, [pc, #40]	; (8002450 <sram_read+0xcc>)
 8002428:	2201      	movs	r2, #1
 800242a:	f001 feef 	bl	800420c <HAL_SPI_Receive>
 800242e:	0003      	movs	r3, r0
 8002430:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num; i++) {
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	3301      	adds	r3, #1
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	230c      	movs	r3, #12
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	6a3a      	ldr	r2, [r7, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	dbe9      	blt.n	8002418 <sram_read+0x94>
//                    serial_println(msg);
//                    break;
//            }
//        }
    }
    sram_csHigh();
 8002444:	f7ff feec 	bl	8002220 <sram_csHigh>
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b00a      	add	sp, #40	; 0x28
 800244e:	bdb0      	pop	{r4, r5, r7, pc}
 8002450:	2000016c 	.word	0x2000016c

08002454 <sram_read8>:
/*! @brief read 1 byte of data at the specified address
    @param addr the address to read data at
    @param reg pass MCPSRAM_RDSR if you're reading the status register, MCPSRAM_READ if you are reading data. Use MCPSRAM_READ in Adafruit functions that don't specify reg (default value).
    @returns the read data byte
*/
uint8_t sram_read8(uint16_t addr, uint8_t reg) {
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	0002      	movs	r2, r0
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	801a      	strh	r2, [r3, #0]
 8002460:	1d7b      	adds	r3, r7, #5
 8002462:	1c0a      	adds	r2, r1, #0
 8002464:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    sram_read(addr, &c, 1, reg);
 8002466:	1d7b      	adds	r3, r7, #5
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	240f      	movs	r4, #15
 800246c:	1939      	adds	r1, r7, r4
 800246e:	1dbb      	adds	r3, r7, #6
 8002470:	8818      	ldrh	r0, [r3, #0]
 8002472:	0013      	movs	r3, r2
 8002474:	2201      	movs	r2, #1
 8002476:	f7ff ff85 	bl	8002384 <sram_read>
    return c;
 800247a:	193b      	adds	r3, r7, r4
 800247c:	781b      	ldrb	r3, [r3, #0]
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b005      	add	sp, #20
 8002484:	bd90      	pop	{r4, r7, pc}

08002486 <sram_write8>:
/*!
    @param addr the address to write to
    @param val the value to write
    @param reg MCPSRAM_WRITE if writing data, MCPSRAM_WRSR if writing a status register. Use MCPSRAM_WRITE in Adafruit functions that don't specify reg (default value).
*/
void sram_write8(uint16_t addr, uint8_t val, uint8_t reg) {
 8002486:	b590      	push	{r4, r7, lr}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	0004      	movs	r4, r0
 800248e:	0008      	movs	r0, r1
 8002490:	0011      	movs	r1, r2
 8002492:	1dbb      	adds	r3, r7, #6
 8002494:	1c22      	adds	r2, r4, #0
 8002496:	801a      	strh	r2, [r3, #0]
 8002498:	1d7b      	adds	r3, r7, #5
 800249a:	1c02      	adds	r2, r0, #0
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	1c0a      	adds	r2, r1, #0
 80024a2:	701a      	strb	r2, [r3, #0]
    sram_write(addr, &val, 1, reg);
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	1d79      	adds	r1, r7, #5
 80024aa:	1dbb      	adds	r3, r7, #6
 80024ac:	8818      	ldrh	r0, [r3, #0]
 80024ae:	0013      	movs	r3, r2
 80024b0:	2201      	movs	r2, #1
 80024b2:	f7ff fef7 	bl	80022a4 <sram_write>
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b003      	add	sp, #12
 80024bc:	bd90      	pop	{r4, r7, pc}
	...

080024c0 <sram_erase>:
/*!
    @param addr the address to start the erase at
    @param length the number of byts to fill
    @param val the value to set the data to
*/
void sram_erase(uint16_t addr, uint16_t length, uint8_t val) {
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	0004      	movs	r4, r0
 80024c8:	0008      	movs	r0, r1
 80024ca:	0011      	movs	r1, r2
 80024cc:	1dbb      	adds	r3, r7, #6
 80024ce:	1c22      	adds	r2, r4, #0
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	1c02      	adds	r2, r0, #0
 80024d6:	801a      	strh	r2, [r3, #0]
 80024d8:	1cfb      	adds	r3, r7, #3
 80024da:	1c0a      	adds	r2, r1, #0
 80024dc:	701a      	strb	r2, [r3, #0]
    sram_csLow();
 80024de:	f7ff feac 	bl	800223a <sram_csLow>

    // write command and addrress
    uint8_t cmdbuf[3] = {
 80024e2:	2110      	movs	r1, #16
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2202      	movs	r2, #2
 80024e8:	701a      	strb	r2, [r3, #0]
        MCPSRAM_WRITE,
        (uint8_t) (addr >> 8),
 80024ea:	1dbb      	adds	r3, r7, #6
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	705a      	strb	r2, [r3, #1]
        (uint8_t) (addr & 0xFF)
 80024f8:	1dbb      	adds	r3, r7, #6
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b2da      	uxtb	r2, r3
    uint8_t cmdbuf[3] = {
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	709a      	strb	r2, [r3, #2]
    };

    for (int i = 0; i < 3; i++) {
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e015      	b.n	8002534 <sram_erase+0x74>
        uint8_t d = cmdbuf[i];
 8002508:	2310      	movs	r3, #16
 800250a:	18fa      	adds	r2, r7, r3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	18d3      	adds	r3, r2, r3
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	210f      	movs	r1, #15
 8002514:	187b      	adds	r3, r7, r1
 8002516:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 8002518:	2316      	movs	r3, #22
 800251a:	18fc      	adds	r4, r7, r3
 800251c:	2301      	movs	r3, #1
 800251e:	425b      	negs	r3, r3
 8002520:	1879      	adds	r1, r7, r1
 8002522:	4816      	ldr	r0, [pc, #88]	; (800257c <sram_erase+0xbc>)
 8002524:	2201      	movs	r2, #1
 8002526:	f001 fd1b 	bl	8003f60 <HAL_SPI_Transmit>
 800252a:	0003      	movs	r3, r0
 800252c:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 3; i++) {
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b02      	cmp	r3, #2
 8002538:	dde6      	ble.n	8002508 <sram_erase+0x48>
//            serial_println(error);
//        }
    }

    // write buffer of data
    for (int i = 0; i < length; i++) {
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e012      	b.n	8002566 <sram_erase+0xa6>
        uint8_t d = val;
 8002540:	210e      	movs	r1, #14
 8002542:	187b      	adds	r3, r7, r1
 8002544:	1cfa      	adds	r2, r7, #3
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_SPI_Transmit(&SRAM_SPI, &d, 1, HAL_MAX_DELAY);
 800254a:	2317      	movs	r3, #23
 800254c:	18fc      	adds	r4, r7, r3
 800254e:	2301      	movs	r3, #1
 8002550:	425b      	negs	r3, r3
 8002552:	1879      	adds	r1, r7, r1
 8002554:	4809      	ldr	r0, [pc, #36]	; (800257c <sram_erase+0xbc>)
 8002556:	2201      	movs	r2, #1
 8002558:	f001 fd02 	bl	8003f60 <HAL_SPI_Transmit>
 800255c:	0003      	movs	r3, r0
 800255e:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < length; i++) {
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	3301      	adds	r3, #1
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	429a      	cmp	r2, r3
 800256e:	dbe7      	blt.n	8002540 <sram_erase+0x80>
//            char error[] = "SRAM_ERASE: TX ERR\r\f";
//            serial_println(error);
//        }
    }

    sram_csHigh();
 8002570:	f7ff fe56 	bl	8002220 <sram_csHigh>
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b009      	add	sp, #36	; 0x24
 800257a:	bd90      	pop	{r4, r7, pc}
 800257c:	2000016c 	.word	0x2000016c

08002580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_MspInit+0x24>)
 8002586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_MspInit+0x24>)
 800258a:	2101      	movs	r1, #1
 800258c:	430a      	orrs	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_MspInit+0x24>)
 8002592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <HAL_MspInit+0x24>)
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	0549      	lsls	r1, r1, #21
 800259a:	430a      	orrs	r2, r1
 800259c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000

080025a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <NMI_Handler+0x4>

080025ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <HardFault_Handler+0x4>

080025b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025cc:	f000 f932 	bl	8002834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <_sbrk>:
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <_sbrk+0x5c>)
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <_sbrk+0x60>)
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <_sbrk+0x22>
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <_sbrk+0x64>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <_sbrk+0x68>)
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	18d3      	adds	r3, r2, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	429a      	cmp	r2, r3
 8002606:	d207      	bcs.n	8002618 <_sbrk+0x40>
 8002608:	f002 ff36 	bl	8005478 <__errno>
 800260c:	0003      	movs	r3, r0
 800260e:	220c      	movs	r2, #12
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	425b      	negs	r3, r3
 8002616:	e009      	b.n	800262c <_sbrk+0x54>
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <_sbrk+0x64>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	18d2      	adds	r2, r2, r3
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <_sbrk+0x64>)
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b006      	add	sp, #24
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20002000 	.word	0x20002000
 8002638:	00000400 	.word	0x00000400
 800263c:	200000f4 	.word	0x200000f4
 8002640:	20000260 	.word	0x20000260

08002644 <SystemInit>:
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <MX_USART2_UART_Init>:
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 8002656:	4a15      	ldr	r2, [pc, #84]	; (80026ac <MX_USART2_UART_Init+0x5c>)
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 800265c:	2296      	movs	r2, #150	; 0x96
 800265e:	0192      	lsls	r2, r2, #6
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 8002676:	220c      	movs	r2, #12
 8002678:	615a      	str	r2, [r3, #20]
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <MX_USART2_UART_Init+0x58>)
 8002694:	0018      	movs	r0, r3
 8002696:	f002 f9d9 	bl	8004a4c <HAL_UART_Init>
 800269a:	1e03      	subs	r3, r0, #0
 800269c:	d001      	beq.n	80026a2 <MX_USART2_UART_Init+0x52>
 800269e:	f7ff fbf7 	bl	8001e90 <Error_Handler>
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	200001c4 	.word	0x200001c4
 80026ac:	40004400 	.word	0x40004400

080026b0 <HAL_UART_MspInit>:
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	240c      	movs	r4, #12
 80026ba:	193b      	adds	r3, r7, r4
 80026bc:	0018      	movs	r0, r3
 80026be:	2314      	movs	r3, #20
 80026c0:	001a      	movs	r2, r3
 80026c2:	2100      	movs	r1, #0
 80026c4:	f002 ff0c 	bl	80054e0 <memset>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_UART_MspInit+0x80>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d129      	bne.n	8002726 <HAL_UART_MspInit+0x76>
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_UART_MspInit+0x84>)
 80026d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <HAL_UART_MspInit+0x84>)
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	0289      	lsls	r1, r1, #10
 80026dc:	430a      	orrs	r2, r1
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
 80026e0:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_UART_MspInit+0x84>)
 80026e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_UART_MspInit+0x84>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_UART_MspInit+0x84>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	2201      	movs	r2, #1
 80026f2:	4013      	ands	r3, r2
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	0021      	movs	r1, r4
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	220c      	movs	r2, #12
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2202      	movs	r2, #2
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2203      	movs	r2, #3
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2204      	movs	r2, #4
 8002716:	611a      	str	r2, [r3, #16]
 8002718:	187a      	adds	r2, r7, r1
 800271a:	23a0      	movs	r3, #160	; 0xa0
 800271c:	05db      	lsls	r3, r3, #23
 800271e:	0011      	movs	r1, r2
 8002720:	0018      	movs	r0, r3
 8002722:	f000 f97b 	bl	8002a1c <HAL_GPIO_Init>
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	b009      	add	sp, #36	; 0x24
 800272c:	bd90      	pop	{r4, r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	40004400 	.word	0x40004400
 8002734:	40021000 	.word	0x40021000

08002738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002738:	480d      	ldr	r0, [pc, #52]	; (8002770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800273a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800273c:	480d      	ldr	r0, [pc, #52]	; (8002774 <LoopForever+0x6>)
  ldr r1, =_edata
 800273e:	490e      	ldr	r1, [pc, #56]	; (8002778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002740:	4a0e      	ldr	r2, [pc, #56]	; (800277c <LoopForever+0xe>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002744:	e002      	b.n	800274c <LoopCopyDataInit>

08002746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274a:	3304      	adds	r3, #4

0800274c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800274c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002750:	d3f9      	bcc.n	8002746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002752:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002754:	4c0b      	ldr	r4, [pc, #44]	; (8002784 <LoopForever+0x16>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002758:	e001      	b.n	800275e <LoopFillZerobss>

0800275a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800275c:	3204      	adds	r2, #4

0800275e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002760:	d3fb      	bcc.n	800275a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002762:	f7ff ff6f 	bl	8002644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002766:	f002 fe8d 	bl	8005484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276a:	f7ff f9c3 	bl	8001af4 <main>

0800276e <LoopForever>:

LoopForever:
    b LoopForever
 800276e:	e7fe      	b.n	800276e <LoopForever>
  ldr   r0, =_estack
 8002770:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002778:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800277c:	08007658 	.word	0x08007658
  ldr r2, =_sbss
 8002780:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002784:	2000025c 	.word	0x2000025c

08002788 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002788:	e7fe      	b.n	8002788 <ADC1_COMP_IRQHandler>
	...

0800278c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002792:	1dfb      	adds	r3, r7, #7
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_Init+0x3c>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_Init+0x3c>)
 800279e:	2140      	movs	r1, #64	; 0x40
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027a4:	2000      	movs	r0, #0
 80027a6:	f000 f811 	bl	80027cc <HAL_InitTick>
 80027aa:	1e03      	subs	r3, r0, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e001      	b.n	80027ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027b6:	f7ff fee3 	bl	8002580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	781b      	ldrb	r3, [r3, #0]
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b002      	add	sp, #8
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	40022000 	.word	0x40022000

080027cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_InitTick+0x5c>)
 80027d6:	681c      	ldr	r4, [r3, #0]
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <HAL_InitTick+0x60>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	0019      	movs	r1, r3
 80027de:	23fa      	movs	r3, #250	; 0xfa
 80027e0:	0098      	lsls	r0, r3, #2
 80027e2:	f7fd fc91 	bl	8000108 <__udivsi3>
 80027e6:	0003      	movs	r3, r0
 80027e8:	0019      	movs	r1, r3
 80027ea:	0020      	movs	r0, r4
 80027ec:	f7fd fc8c 	bl	8000108 <__udivsi3>
 80027f0:	0003      	movs	r3, r0
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f905 	bl	8002a02 <HAL_SYSTICK_Config>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d001      	beq.n	8002800 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e00f      	b.n	8002820 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d80b      	bhi.n	800281e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	2301      	movs	r3, #1
 800280a:	425b      	negs	r3, r3
 800280c:	2200      	movs	r2, #0
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f8e2 	bl	80029d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_InitTick+0x64>)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b003      	add	sp, #12
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	2000001c 	.word	0x2000001c
 800282c:	20000024 	.word	0x20000024
 8002830:	20000020 	.word	0x20000020

08002834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_IncTick+0x1c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	001a      	movs	r2, r3
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_IncTick+0x20>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	18d2      	adds	r2, r2, r3
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_IncTick+0x20>)
 8002846:	601a      	str	r2, [r3, #0]
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	20000024 	.word	0x20000024
 8002854:	20000248 	.word	0x20000248

08002858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b02      	ldr	r3, [pc, #8]	; (8002868 <HAL_GetTick+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	20000248 	.word	0x20000248

0800286c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff fff0 	bl	8002858 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3301      	adds	r3, #1
 8002884:	d005      	beq.n	8002892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_Delay+0x44>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	001a      	movs	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	189b      	adds	r3, r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	f7ff ffe0 	bl	8002858 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d8f7      	bhi.n	8002894 <HAL_Delay+0x28>
  {
  }
}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b004      	add	sp, #16
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	20000024 	.word	0x20000024

080028b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	0002      	movs	r2, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b7f      	cmp	r3, #127	; 0x7f
 80028c8:	d828      	bhi.n	800291c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ca:	4a2f      	ldr	r2, [pc, #188]	; (8002988 <__NVIC_SetPriority+0xd4>)
 80028cc:	1dfb      	adds	r3, r7, #7
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	33c0      	adds	r3, #192	; 0xc0
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	589b      	ldr	r3, [r3, r2]
 80028da:	1dfa      	adds	r2, r7, #7
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	0011      	movs	r1, r2
 80028e0:	2203      	movs	r2, #3
 80028e2:	400a      	ands	r2, r1
 80028e4:	00d2      	lsls	r2, r2, #3
 80028e6:	21ff      	movs	r1, #255	; 0xff
 80028e8:	4091      	lsls	r1, r2
 80028ea:	000a      	movs	r2, r1
 80028ec:	43d2      	mvns	r2, r2
 80028ee:	401a      	ands	r2, r3
 80028f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	019b      	lsls	r3, r3, #6
 80028f6:	22ff      	movs	r2, #255	; 0xff
 80028f8:	401a      	ands	r2, r3
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	0018      	movs	r0, r3
 8002900:	2303      	movs	r3, #3
 8002902:	4003      	ands	r3, r0
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002908:	481f      	ldr	r0, [pc, #124]	; (8002988 <__NVIC_SetPriority+0xd4>)
 800290a:	1dfb      	adds	r3, r7, #7
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b25b      	sxtb	r3, r3
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	430a      	orrs	r2, r1
 8002914:	33c0      	adds	r3, #192	; 0xc0
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800291a:	e031      	b.n	8002980 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <__NVIC_SetPriority+0xd8>)
 800291e:	1dfb      	adds	r3, r7, #7
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	0019      	movs	r1, r3
 8002924:	230f      	movs	r3, #15
 8002926:	400b      	ands	r3, r1
 8002928:	3b08      	subs	r3, #8
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3306      	adds	r3, #6
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	18d3      	adds	r3, r2, r3
 8002932:	3304      	adds	r3, #4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	1dfa      	adds	r2, r7, #7
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	0011      	movs	r1, r2
 800293c:	2203      	movs	r2, #3
 800293e:	400a      	ands	r2, r1
 8002940:	00d2      	lsls	r2, r2, #3
 8002942:	21ff      	movs	r1, #255	; 0xff
 8002944:	4091      	lsls	r1, r2
 8002946:	000a      	movs	r2, r1
 8002948:	43d2      	mvns	r2, r2
 800294a:	401a      	ands	r2, r3
 800294c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	019b      	lsls	r3, r3, #6
 8002952:	22ff      	movs	r2, #255	; 0xff
 8002954:	401a      	ands	r2, r3
 8002956:	1dfb      	adds	r3, r7, #7
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	0018      	movs	r0, r3
 800295c:	2303      	movs	r3, #3
 800295e:	4003      	ands	r3, r0
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002964:	4809      	ldr	r0, [pc, #36]	; (800298c <__NVIC_SetPriority+0xd8>)
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	001c      	movs	r4, r3
 800296c:	230f      	movs	r3, #15
 800296e:	4023      	ands	r3, r4
 8002970:	3b08      	subs	r3, #8
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	430a      	orrs	r2, r1
 8002976:	3306      	adds	r3, #6
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	18c3      	adds	r3, r0, r3
 800297c:	3304      	adds	r3, #4
 800297e:	601a      	str	r2, [r3, #0]
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b003      	add	sp, #12
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	e000e100 	.word	0xe000e100
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	1e5a      	subs	r2, r3, #1
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	045b      	lsls	r3, r3, #17
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d301      	bcc.n	80029a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a4:	2301      	movs	r3, #1
 80029a6:	e010      	b.n	80029ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <SysTick_Config+0x44>)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	3a01      	subs	r2, #1
 80029ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b0:	2301      	movs	r3, #1
 80029b2:	425b      	negs	r3, r3
 80029b4:	2103      	movs	r1, #3
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff ff7c 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <SysTick_Config+0x44>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <SysTick_Config+0x44>)
 80029c4:	2207      	movs	r2, #7
 80029c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b002      	add	sp, #8
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	e000e010 	.word	0xe000e010

080029d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	210f      	movs	r1, #15
 80029e4:	187b      	adds	r3, r7, r1
 80029e6:	1c02      	adds	r2, r0, #0
 80029e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b25b      	sxtb	r3, r3
 80029f2:	0011      	movs	r1, r2
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7ff ff5d 	bl	80028b4 <__NVIC_SetPriority>
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7ff ffbf 	bl	8002990 <SysTick_Config>
 8002a12:	0003      	movs	r3, r0
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b002      	add	sp, #8
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a32:	e14f      	b.n	8002cd4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4091      	lsls	r1, r2
 8002a3e:	000a      	movs	r2, r1
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d100      	bne.n	8002a4c <HAL_GPIO_Init+0x30>
 8002a4a:	e140      	b.n	8002cce <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d00b      	beq.n	8002a6c <HAL_GPIO_Init+0x50>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d007      	beq.n	8002a6c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a60:	2b11      	cmp	r3, #17
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b12      	cmp	r3, #18
 8002a6a:	d130      	bne.n	8002ace <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	0013      	movs	r3, r2
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	091b      	lsrs	r3, r3, #4
 8002ab8:	2201      	movs	r2, #1
 8002aba:	401a      	ands	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	409a      	lsls	r2, r3
 8002adc:	0013      	movs	r3, r2
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0xf2>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d123      	bne.n	8002b56 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	0092      	lsls	r2, r2, #2
 8002b18:	58d3      	ldr	r3, [r2, r3]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2207      	movs	r2, #7
 8002b20:	4013      	ands	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	220f      	movs	r2, #15
 8002b26:	409a      	lsls	r2, r3
 8002b28:	0013      	movs	r3, r2
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2107      	movs	r1, #7
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	0013      	movs	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3208      	adds	r2, #8
 8002b50:	0092      	lsls	r2, r2, #2
 8002b52:	6939      	ldr	r1, [r7, #16]
 8002b54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	409a      	lsls	r2, r3
 8002b64:	0013      	movs	r3, r2
 8002b66:	43da      	mvns	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2203      	movs	r2, #3
 8002b74:	401a      	ands	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	055b      	lsls	r3, r3, #21
 8002b92:	4013      	ands	r3, r2
 8002b94:	d100      	bne.n	8002b98 <HAL_GPIO_Init+0x17c>
 8002b96:	e09a      	b.n	8002cce <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b98:	4b54      	ldr	r3, [pc, #336]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9c:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_GPIO_Init+0x2d0>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba4:	4a52      	ldr	r2, [pc, #328]	; (8002cf0 <HAL_GPIO_Init+0x2d4>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	589b      	ldr	r3, [r3, r2]
 8002bb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	0013      	movs	r3, r2
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	23a0      	movs	r3, #160	; 0xa0
 8002bcc:	05db      	lsls	r3, r3, #23
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0x1ea>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a47      	ldr	r2, [pc, #284]	; (8002cf4 <HAL_GPIO_Init+0x2d8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0x1e6>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a46      	ldr	r2, [pc, #280]	; (8002cf8 <HAL_GPIO_Init+0x2dc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00d      	beq.n	8002bfe <HAL_GPIO_Init+0x1e2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a45      	ldr	r2, [pc, #276]	; (8002cfc <HAL_GPIO_Init+0x2e0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <HAL_GPIO_Init+0x1de>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a44      	ldr	r2, [pc, #272]	; (8002d00 <HAL_GPIO_Init+0x2e4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_GPIO_Init+0x1da>
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	e008      	b.n	8002c08 <HAL_GPIO_Init+0x1ec>
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x1ec>
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e004      	b.n	8002c08 <HAL_GPIO_Init+0x1ec>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e002      	b.n	8002c08 <HAL_GPIO_Init+0x1ec>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x1ec>
 8002c06:	2300      	movs	r3, #0
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	2103      	movs	r1, #3
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	4093      	lsls	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c18:	4935      	ldr	r1, [pc, #212]	; (8002cf0 <HAL_GPIO_Init+0x2d4>)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c26:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	025b      	lsls	r3, r3, #9
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c50:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43da      	mvns	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	029b      	lsls	r3, r3, #10
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c74:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43da      	mvns	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	035b      	lsls	r3, r3, #13
 8002c92:	4013      	ands	r3, r2
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	43da      	mvns	r2, r3
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	039b      	lsls	r3, r3, #14
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	40da      	lsrs	r2, r3
 8002cdc:	1e13      	subs	r3, r2, #0
 8002cde:	d000      	beq.n	8002ce2 <HAL_GPIO_Init+0x2c6>
 8002ce0:	e6a8      	b.n	8002a34 <HAL_GPIO_Init+0x18>
  }
}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b006      	add	sp, #24
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	50000400 	.word	0x50000400
 8002cf8:	50000800 	.word	0x50000800
 8002cfc:	50000c00 	.word	0x50000c00
 8002d00:	50001c00 	.word	0x50001c00
 8002d04:	40010400 	.word	0x40010400

08002d08 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	0008      	movs	r0, r1
 8002d12:	0011      	movs	r1, r2
 8002d14:	1cbb      	adds	r3, r7, #2
 8002d16:	1c02      	adds	r2, r0, #0
 8002d18:	801a      	strh	r2, [r3, #0]
 8002d1a:	1c7b      	adds	r3, r7, #1
 8002d1c:	1c0a      	adds	r2, r1, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d20:	1c7b      	adds	r3, r7, #1
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d28:	1cbb      	adds	r3, r7, #2
 8002d2a:	881a      	ldrh	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002d30:	e003      	b.n	8002d3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002d32:	1cbb      	adds	r3, r7, #2
 8002d34:	881a      	ldrh	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e082      	b.n	8002e5c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2241      	movs	r2, #65	; 0x41
 8002d5a:	5c9b      	ldrb	r3, [r3, r2]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d107      	bne.n	8002d72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2240      	movs	r2, #64	; 0x40
 8002d66:	2100      	movs	r1, #0
 8002d68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7fe fe7b 	bl	8001a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2241      	movs	r2, #65	; 0x41
 8002d76:	2124      	movs	r1, #36	; 0x24
 8002d78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	438a      	bics	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4934      	ldr	r1, [pc, #208]	; (8002e64 <HAL_I2C_Init+0x120>)
 8002d94:	400a      	ands	r2, r1
 8002d96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4931      	ldr	r1, [pc, #196]	; (8002e68 <HAL_I2C_Init+0x124>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d108      	bne.n	8002dc2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	0209      	lsls	r1, r1, #8
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	e007      	b.n	8002dd2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2184      	movs	r1, #132	; 0x84
 8002dcc:	0209      	lsls	r1, r1, #8
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d104      	bne.n	8002de4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	491f      	ldr	r1, [pc, #124]	; (8002e6c <HAL_I2C_Init+0x128>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	491a      	ldr	r1, [pc, #104]	; (8002e68 <HAL_I2C_Init+0x124>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	0011      	movs	r1, r2
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69d9      	ldr	r1, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2101      	movs	r1, #1
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2241      	movs	r2, #65	; 0x41
 8002e48:	2120      	movs	r1, #32
 8002e4a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2242      	movs	r2, #66	; 0x42
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	f0ffffff 	.word	0xf0ffffff
 8002e68:	ffff7fff 	.word	0xffff7fff
 8002e6c:	02008000 	.word	0x02008000

08002e70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2241      	movs	r2, #65	; 0x41
 8002e7e:	5c9b      	ldrb	r3, [r3, r2]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d138      	bne.n	8002ef8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2240      	movs	r2, #64	; 0x40
 8002e8a:	5c9b      	ldrb	r3, [r3, r2]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e032      	b.n	8002efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2240      	movs	r2, #64	; 0x40
 8002e98:	2101      	movs	r1, #1
 8002e9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2241      	movs	r2, #65	; 0x41
 8002ea0:	2124      	movs	r1, #36	; 0x24
 8002ea2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4911      	ldr	r1, [pc, #68]	; (8002f04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6819      	ldr	r1, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2101      	movs	r1, #1
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2241      	movs	r2, #65	; 0x41
 8002ee8:	2120      	movs	r1, #32
 8002eea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	0018      	movs	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	ffffefff 	.word	0xffffefff

08002f08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2241      	movs	r2, #65	; 0x41
 8002f16:	5c9b      	ldrb	r3, [r3, r2]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d139      	bne.n	8002f92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2240      	movs	r2, #64	; 0x40
 8002f22:	5c9b      	ldrb	r3, [r3, r2]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e033      	b.n	8002f94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	2101      	movs	r1, #1
 8002f32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2241      	movs	r2, #65	; 0x41
 8002f38:	2124      	movs	r1, #36	; 0x24
 8002f3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	438a      	bics	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2241      	movs	r2, #65	; 0x41
 8002f82:	2120      	movs	r1, #32
 8002f84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b004      	add	sp, #16
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	fffff0ff 	.word	0xfffff0ff

08002fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f000 fbaf 	bl	8003712 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb4:	4bcf      	ldr	r3, [pc, #828]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	220c      	movs	r2, #12
 8002fba:	4013      	ands	r3, r2
 8002fbc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fbe:	4bcd      	ldr	r3, [pc, #820]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	025b      	lsls	r3, r3, #9
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x36>
 8002fd4:	e07e      	b.n	80030d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d007      	beq.n	8002fec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d112      	bne.n	8003008 <HAL_RCC_OscConfig+0x68>
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	025b      	lsls	r3, r3, #9
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d10d      	bne.n	8003008 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	4bc1      	ldr	r3, [pc, #772]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <HAL_RCC_OscConfig+0x5a>
 8002ff8:	e06b      	b.n	80030d2 <HAL_RCC_OscConfig+0x132>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d167      	bne.n	80030d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f000 fb85 	bl	8003712 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	025b      	lsls	r3, r3, #9
 8003010:	429a      	cmp	r2, r3
 8003012:	d107      	bne.n	8003024 <HAL_RCC_OscConfig+0x84>
 8003014:	4bb7      	ldr	r3, [pc, #732]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4bb6      	ldr	r3, [pc, #728]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	0249      	lsls	r1, r1, #9
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e027      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	23a0      	movs	r3, #160	; 0xa0
 800302a:	02db      	lsls	r3, r3, #11
 800302c:	429a      	cmp	r2, r3
 800302e:	d10e      	bne.n	800304e <HAL_RCC_OscConfig+0xae>
 8003030:	4bb0      	ldr	r3, [pc, #704]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4baf      	ldr	r3, [pc, #700]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	02c9      	lsls	r1, r1, #11
 800303a:	430a      	orrs	r2, r1
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	4bad      	ldr	r3, [pc, #692]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4bac      	ldr	r3, [pc, #688]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003044:	2180      	movs	r1, #128	; 0x80
 8003046:	0249      	lsls	r1, r1, #9
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	e012      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 800304e:	4ba9      	ldr	r3, [pc, #676]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4ba8      	ldr	r3, [pc, #672]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003054:	49a8      	ldr	r1, [pc, #672]	; (80032f8 <HAL_RCC_OscConfig+0x358>)
 8003056:	400a      	ands	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	4ba6      	ldr	r3, [pc, #664]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	025b      	lsls	r3, r3, #9
 8003062:	4013      	ands	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4ba2      	ldr	r3, [pc, #648]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4ba1      	ldr	r3, [pc, #644]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800306e:	49a3      	ldr	r1, [pc, #652]	; (80032fc <HAL_RCC_OscConfig+0x35c>)
 8003070:	400a      	ands	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d015      	beq.n	80030a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7ff fbec 	bl	8002858 <HAL_GetTick>
 8003080:	0003      	movs	r3, r0
 8003082:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003084:	e009      	b.n	800309a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003086:	f7ff fbe7 	bl	8002858 <HAL_GetTick>
 800308a:	0002      	movs	r2, r0
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b64      	cmp	r3, #100	; 0x64
 8003092:	d902      	bls.n	800309a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	f000 fb3c 	bl	8003712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800309a:	4b96      	ldr	r3, [pc, #600]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	029b      	lsls	r3, r3, #10
 80030a2:	4013      	ands	r3, r2
 80030a4:	d0ef      	beq.n	8003086 <HAL_RCC_OscConfig+0xe6>
 80030a6:	e015      	b.n	80030d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7ff fbd6 	bl	8002858 <HAL_GetTick>
 80030ac:	0003      	movs	r3, r0
 80030ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b2:	f7ff fbd1 	bl	8002858 <HAL_GetTick>
 80030b6:	0002      	movs	r2, r0
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b64      	cmp	r3, #100	; 0x64
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e326      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030c4:	4b8b      	ldr	r3, [pc, #556]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	029b      	lsls	r3, r3, #10
 80030cc:	4013      	ands	r3, r2
 80030ce:	d1f0      	bne.n	80030b2 <HAL_RCC_OscConfig+0x112>
 80030d0:	e000      	b.n	80030d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d100      	bne.n	80030e0 <HAL_RCC_OscConfig+0x140>
 80030de:	e08b      	b.n	80031f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	2b0c      	cmp	r3, #12
 80030f0:	d13e      	bne.n	8003170 <HAL_RCC_OscConfig+0x1d0>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d13b      	bne.n	8003170 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80030f8:	4b7e      	ldr	r3, [pc, #504]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2204      	movs	r2, #4
 80030fe:	4013      	ands	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_RCC_OscConfig+0x16c>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e302      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b79      	ldr	r3, [pc, #484]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a7b      	ldr	r2, [pc, #492]	; (8003300 <HAL_RCC_OscConfig+0x360>)
 8003112:	4013      	ands	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	021a      	lsls	r2, r3, #8
 800311c:	4b75      	ldr	r3, [pc, #468]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003122:	4b74      	ldr	r3, [pc, #464]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2209      	movs	r2, #9
 8003128:	4393      	bics	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	4b71      	ldr	r3, [pc, #452]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003134:	f000 fc40 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003138:	0001      	movs	r1, r0
 800313a:	4b6e      	ldr	r3, [pc, #440]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	220f      	movs	r2, #15
 8003142:	4013      	ands	r3, r2
 8003144:	4a6f      	ldr	r2, [pc, #444]	; (8003304 <HAL_RCC_OscConfig+0x364>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	000a      	movs	r2, r1
 800314a:	40da      	lsrs	r2, r3
 800314c:	4b6e      	ldr	r3, [pc, #440]	; (8003308 <HAL_RCC_OscConfig+0x368>)
 800314e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003150:	4b6e      	ldr	r3, [pc, #440]	; (800330c <HAL_RCC_OscConfig+0x36c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2513      	movs	r5, #19
 8003156:	197c      	adds	r4, r7, r5
 8003158:	0018      	movs	r0, r3
 800315a:	f7ff fb37 	bl	80027cc <HAL_InitTick>
 800315e:	0003      	movs	r3, r0
 8003160:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003162:	197b      	adds	r3, r7, r5
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d046      	beq.n	80031f8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800316a:	197b      	adds	r3, r7, r5
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	e2d0      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d027      	beq.n	80031c6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2209      	movs	r2, #9
 800317c:	4393      	bics	r3, r2
 800317e:	0019      	movs	r1, r3
 8003180:	4b5c      	ldr	r3, [pc, #368]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7ff fb66 	bl	8002858 <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003192:	f7ff fb61 	bl	8002858 <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e2b6      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2204      	movs	r2, #4
 80031aa:	4013      	ands	r3, r2
 80031ac:	d0f1      	beq.n	8003192 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a53      	ldr	r2, [pc, #332]	; (8003300 <HAL_RCC_OscConfig+0x360>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	021a      	lsls	r2, r3, #8
 80031be:	4b4d      	ldr	r3, [pc, #308]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	e018      	b.n	80031f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c6:	4b4b      	ldr	r3, [pc, #300]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	438a      	bics	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7ff fb41 	bl	8002858 <HAL_GetTick>
 80031d6:	0003      	movs	r3, r0
 80031d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031dc:	f7ff fb3c 	bl	8002858 <HAL_GetTick>
 80031e0:	0002      	movs	r2, r0
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e291      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2204      	movs	r2, #4
 80031f4:	4013      	ands	r3, r2
 80031f6:	d1f1      	bne.n	80031dc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2210      	movs	r2, #16
 80031fe:	4013      	ands	r3, r2
 8003200:	d100      	bne.n	8003204 <HAL_RCC_OscConfig+0x264>
 8003202:	e0a1      	b.n	8003348 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d140      	bne.n	800328c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800320a:	4b3a      	ldr	r3, [pc, #232]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4013      	ands	r3, r2
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x282>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e277      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003222:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <HAL_RCC_OscConfig+0x370>)
 8003228:	4013      	ands	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003230:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003236:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	0a19      	lsrs	r1, r3, #8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	061a      	lsls	r2, r3, #24
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	0b5b      	lsrs	r3, r3, #13
 8003250:	3301      	adds	r3, #1
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	0212      	lsls	r2, r2, #8
 8003256:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003258:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	210f      	movs	r1, #15
 8003260:	400b      	ands	r3, r1
 8003262:	4928      	ldr	r1, [pc, #160]	; (8003304 <HAL_RCC_OscConfig+0x364>)
 8003264:	5ccb      	ldrb	r3, [r1, r3]
 8003266:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <HAL_RCC_OscConfig+0x368>)
 800326a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800326c:	4b27      	ldr	r3, [pc, #156]	; (800330c <HAL_RCC_OscConfig+0x36c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2513      	movs	r5, #19
 8003272:	197c      	adds	r4, r7, r5
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff faa9 	bl	80027cc <HAL_InitTick>
 800327a:	0003      	movs	r3, r0
 800327c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800327e:	197b      	adds	r3, r7, r5
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d060      	beq.n	8003348 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003286:	197b      	adds	r3, r7, r5
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	e242      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d03f      	beq.n	8003314 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003294:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 800329a:	2180      	movs	r1, #128	; 0x80
 800329c:	0049      	lsls	r1, r1, #1
 800329e:	430a      	orrs	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7ff fad9 	bl	8002858 <HAL_GetTick>
 80032a6:	0003      	movs	r3, r0
 80032a8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ac:	f7ff fad4 	bl	8002858 <HAL_GetTick>
 80032b0:	0002      	movs	r2, r0
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e229      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4013      	ands	r3, r2
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4a10      	ldr	r2, [pc, #64]	; (8003310 <HAL_RCC_OscConfig+0x370>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	0019      	movs	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	0a19      	lsrs	r1, r3, #8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	061a      	lsls	r2, r3, #24
 80032ec:	4b01      	ldr	r3, [pc, #4]	; (80032f4 <HAL_RCC_OscConfig+0x354>)
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	e029      	b.n	8003348 <HAL_RCC_OscConfig+0x3a8>
 80032f4:	40021000 	.word	0x40021000
 80032f8:	fffeffff 	.word	0xfffeffff
 80032fc:	fffbffff 	.word	0xfffbffff
 8003300:	ffffe0ff 	.word	0xffffe0ff
 8003304:	080075dc 	.word	0x080075dc
 8003308:	2000001c 	.word	0x2000001c
 800330c:	20000020 	.word	0x20000020
 8003310:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003314:	4bbd      	ldr	r3, [pc, #756]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4bbc      	ldr	r3, [pc, #752]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 800331a:	49bd      	ldr	r1, [pc, #756]	; (8003610 <HAL_RCC_OscConfig+0x670>)
 800331c:	400a      	ands	r2, r1
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7ff fa9a 	bl	8002858 <HAL_GetTick>
 8003324:	0003      	movs	r3, r0
 8003326:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800332a:	f7ff fa95 	bl	8002858 <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e1ea      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800333c:	4bb3      	ldr	r3, [pc, #716]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4013      	ands	r3, r2
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2208      	movs	r2, #8
 800334e:	4013      	ands	r3, r2
 8003350:	d036      	beq.n	80033c0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d019      	beq.n	800338e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800335a:	4bac      	ldr	r3, [pc, #688]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 800335c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800335e:	4bab      	ldr	r3, [pc, #684]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003360:	2101      	movs	r1, #1
 8003362:	430a      	orrs	r2, r1
 8003364:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7ff fa77 	bl	8002858 <HAL_GetTick>
 800336a:	0003      	movs	r3, r0
 800336c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003370:	f7ff fa72 	bl	8002858 <HAL_GetTick>
 8003374:	0002      	movs	r2, r0
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1c7      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003382:	4ba2      	ldr	r3, [pc, #648]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003386:	2202      	movs	r2, #2
 8003388:	4013      	ands	r3, r2
 800338a:	d0f1      	beq.n	8003370 <HAL_RCC_OscConfig+0x3d0>
 800338c:	e018      	b.n	80033c0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338e:	4b9f      	ldr	r3, [pc, #636]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003392:	4b9e      	ldr	r3, [pc, #632]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003394:	2101      	movs	r1, #1
 8003396:	438a      	bics	r2, r1
 8003398:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7ff fa5d 	bl	8002858 <HAL_GetTick>
 800339e:	0003      	movs	r3, r0
 80033a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a4:	f7ff fa58 	bl	8002858 <HAL_GetTick>
 80033a8:	0002      	movs	r2, r0
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e1ad      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033b6:	4b95      	ldr	r3, [pc, #596]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80033b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ba:	2202      	movs	r2, #2
 80033bc:	4013      	ands	r3, r2
 80033be:	d1f1      	bne.n	80033a4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2204      	movs	r2, #4
 80033c6:	4013      	ands	r3, r2
 80033c8:	d100      	bne.n	80033cc <HAL_RCC_OscConfig+0x42c>
 80033ca:	e0ae      	b.n	800352a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033cc:	2027      	movs	r0, #39	; 0x27
 80033ce:	183b      	adds	r3, r7, r0
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d4:	4b8d      	ldr	r3, [pc, #564]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80033d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	055b      	lsls	r3, r3, #21
 80033dc:	4013      	ands	r3, r2
 80033de:	d109      	bne.n	80033f4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e0:	4b8a      	ldr	r3, [pc, #552]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80033e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e4:	4b89      	ldr	r3, [pc, #548]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	0549      	lsls	r1, r1, #21
 80033ea:	430a      	orrs	r2, r1
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80033ee:	183b      	adds	r3, r7, r0
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	4b87      	ldr	r3, [pc, #540]	; (8003614 <HAL_RCC_OscConfig+0x674>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	d11a      	bne.n	8003436 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003400:	4b84      	ldr	r3, [pc, #528]	; (8003614 <HAL_RCC_OscConfig+0x674>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b83      	ldr	r3, [pc, #524]	; (8003614 <HAL_RCC_OscConfig+0x674>)
 8003406:	2180      	movs	r1, #128	; 0x80
 8003408:	0049      	lsls	r1, r1, #1
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340e:	f7ff fa23 	bl	8002858 <HAL_GetTick>
 8003412:	0003      	movs	r3, r0
 8003414:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003418:	f7ff fa1e 	bl	8002858 <HAL_GetTick>
 800341c:	0002      	movs	r2, r0
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e173      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	4b7a      	ldr	r3, [pc, #488]	; (8003614 <HAL_RCC_OscConfig+0x674>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4013      	ands	r3, r2
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	429a      	cmp	r2, r3
 8003440:	d107      	bne.n	8003452 <HAL_RCC_OscConfig+0x4b2>
 8003442:	4b72      	ldr	r3, [pc, #456]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003446:	4b71      	ldr	r3, [pc, #452]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	0049      	lsls	r1, r1, #1
 800344c:	430a      	orrs	r2, r1
 800344e:	651a      	str	r2, [r3, #80]	; 0x50
 8003450:	e031      	b.n	80034b6 <HAL_RCC_OscConfig+0x516>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0x4d4>
 800345a:	4b6c      	ldr	r3, [pc, #432]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 800345c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800345e:	4b6b      	ldr	r3, [pc, #428]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003460:	496b      	ldr	r1, [pc, #428]	; (8003610 <HAL_RCC_OscConfig+0x670>)
 8003462:	400a      	ands	r2, r1
 8003464:	651a      	str	r2, [r3, #80]	; 0x50
 8003466:	4b69      	ldr	r3, [pc, #420]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800346a:	4b68      	ldr	r3, [pc, #416]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 800346c:	496a      	ldr	r1, [pc, #424]	; (8003618 <HAL_RCC_OscConfig+0x678>)
 800346e:	400a      	ands	r2, r1
 8003470:	651a      	str	r2, [r3, #80]	; 0x50
 8003472:	e020      	b.n	80034b6 <HAL_RCC_OscConfig+0x516>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	23a0      	movs	r3, #160	; 0xa0
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	429a      	cmp	r2, r3
 800347e:	d10e      	bne.n	800349e <HAL_RCC_OscConfig+0x4fe>
 8003480:	4b62      	ldr	r3, [pc, #392]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003486:	2180      	movs	r1, #128	; 0x80
 8003488:	00c9      	lsls	r1, r1, #3
 800348a:	430a      	orrs	r2, r1
 800348c:	651a      	str	r2, [r3, #80]	; 0x50
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003492:	4b5e      	ldr	r3, [pc, #376]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	0049      	lsls	r1, r1, #1
 8003498:	430a      	orrs	r2, r1
 800349a:	651a      	str	r2, [r3, #80]	; 0x50
 800349c:	e00b      	b.n	80034b6 <HAL_RCC_OscConfig+0x516>
 800349e:	4b5b      	ldr	r3, [pc, #364]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80034a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034a2:	4b5a      	ldr	r3, [pc, #360]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80034a4:	495a      	ldr	r1, [pc, #360]	; (8003610 <HAL_RCC_OscConfig+0x670>)
 80034a6:	400a      	ands	r2, r1
 80034a8:	651a      	str	r2, [r3, #80]	; 0x50
 80034aa:	4b58      	ldr	r3, [pc, #352]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80034ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034ae:	4b57      	ldr	r3, [pc, #348]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80034b0:	4959      	ldr	r1, [pc, #356]	; (8003618 <HAL_RCC_OscConfig+0x678>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d015      	beq.n	80034ea <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034be:	f7ff f9cb 	bl	8002858 <HAL_GetTick>
 80034c2:	0003      	movs	r3, r0
 80034c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034c6:	e009      	b.n	80034dc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7ff f9c6 	bl	8002858 <HAL_GetTick>
 80034cc:	0002      	movs	r2, r0
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	4a52      	ldr	r2, [pc, #328]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e11a      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034dc:	4b4b      	ldr	r3, [pc, #300]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80034de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4013      	ands	r3, r2
 80034e6:	d0ef      	beq.n	80034c8 <HAL_RCC_OscConfig+0x528>
 80034e8:	e014      	b.n	8003514 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ea:	f7ff f9b5 	bl	8002858 <HAL_GetTick>
 80034ee:	0003      	movs	r3, r0
 80034f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034f2:	e009      	b.n	8003508 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7ff f9b0 	bl	8002858 <HAL_GetTick>
 80034f8:	0002      	movs	r2, r0
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	4a47      	ldr	r2, [pc, #284]	; (800361c <HAL_RCC_OscConfig+0x67c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e104      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003508:	4b40      	ldr	r3, [pc, #256]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 800350a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4013      	ands	r3, r2
 8003512:	d1ef      	bne.n	80034f4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003514:	2327      	movs	r3, #39	; 0x27
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351e:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003522:	4b3a      	ldr	r3, [pc, #232]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003524:	493e      	ldr	r1, [pc, #248]	; (8003620 <HAL_RCC_OscConfig+0x680>)
 8003526:	400a      	ands	r2, r1
 8003528:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2220      	movs	r2, #32
 8003530:	4013      	ands	r3, r2
 8003532:	d049      	beq.n	80035c8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d026      	beq.n	800358a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800353c:	4b33      	ldr	r3, [pc, #204]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003542:	2101      	movs	r1, #1
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 800354a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354c:	4b2f      	ldr	r3, [pc, #188]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 800354e:	2101      	movs	r1, #1
 8003550:	430a      	orrs	r2, r1
 8003552:	635a      	str	r2, [r3, #52]	; 0x34
 8003554:	4b33      	ldr	r3, [pc, #204]	; (8003624 <HAL_RCC_OscConfig+0x684>)
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	4b32      	ldr	r3, [pc, #200]	; (8003624 <HAL_RCC_OscConfig+0x684>)
 800355a:	2180      	movs	r1, #128	; 0x80
 800355c:	0189      	lsls	r1, r1, #6
 800355e:	430a      	orrs	r2, r1
 8003560:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7ff f979 	bl	8002858 <HAL_GetTick>
 8003566:	0003      	movs	r3, r0
 8003568:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800356c:	f7ff f974 	bl	8002858 <HAL_GetTick>
 8003570:	0002      	movs	r2, r0
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e0c9      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800357e:	4b23      	ldr	r3, [pc, #140]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2202      	movs	r2, #2
 8003584:	4013      	ands	r3, r2
 8003586:	d0f1      	beq.n	800356c <HAL_RCC_OscConfig+0x5cc>
 8003588:	e01e      	b.n	80035c8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	4b1f      	ldr	r3, [pc, #124]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 8003590:	2101      	movs	r1, #1
 8003592:	438a      	bics	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <HAL_RCC_OscConfig+0x684>)
 8003598:	6a1a      	ldr	r2, [r3, #32]
 800359a:	4b22      	ldr	r3, [pc, #136]	; (8003624 <HAL_RCC_OscConfig+0x684>)
 800359c:	4922      	ldr	r1, [pc, #136]	; (8003628 <HAL_RCC_OscConfig+0x688>)
 800359e:	400a      	ands	r2, r1
 80035a0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7ff f959 	bl	8002858 <HAL_GetTick>
 80035a6:	0003      	movs	r3, r0
 80035a8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ac:	f7ff f954 	bl	8002858 <HAL_GetTick>
 80035b0:	0002      	movs	r2, r0
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0a9      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2202      	movs	r2, #2
 80035c4:	4013      	ands	r3, r2
 80035c6:	d1f1      	bne.n	80035ac <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d100      	bne.n	80035d2 <HAL_RCC_OscConfig+0x632>
 80035d0:	e09e      	b.n	8003710 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d100      	bne.n	80035da <HAL_RCC_OscConfig+0x63a>
 80035d8:	e077      	b.n	80036ca <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d158      	bne.n	8003694 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_OscConfig+0x66c>)
 80035e8:	4910      	ldr	r1, [pc, #64]	; (800362c <HAL_RCC_OscConfig+0x68c>)
 80035ea:	400a      	ands	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7ff f933 	bl	8002858 <HAL_GetTick>
 80035f2:	0003      	movs	r3, r0
 80035f4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035f6:	e01b      	b.n	8003630 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f8:	f7ff f92e 	bl	8002858 <HAL_GetTick>
 80035fc:	0002      	movs	r2, r0
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d914      	bls.n	8003630 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e083      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	40021000 	.word	0x40021000
 8003610:	fffffeff 	.word	0xfffffeff
 8003614:	40007000 	.word	0x40007000
 8003618:	fffffbff 	.word	0xfffffbff
 800361c:	00001388 	.word	0x00001388
 8003620:	efffffff 	.word	0xefffffff
 8003624:	40010000 	.word	0x40010000
 8003628:	ffffdfff 	.word	0xffffdfff
 800362c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003630:	4b3a      	ldr	r3, [pc, #232]	; (800371c <HAL_RCC_OscConfig+0x77c>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	049b      	lsls	r3, r3, #18
 8003638:	4013      	ands	r3, r2
 800363a:	d1dd      	bne.n	80035f8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800363c:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x77c>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a37      	ldr	r2, [pc, #220]	; (8003720 <HAL_RCC_OscConfig+0x780>)
 8003642:	4013      	ands	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	431a      	orrs	r2, r3
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_RCC_OscConfig+0x77c>)
 8003658:	430a      	orrs	r2, r1
 800365a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800365c:	4b2f      	ldr	r3, [pc, #188]	; (800371c <HAL_RCC_OscConfig+0x77c>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b2e      	ldr	r3, [pc, #184]	; (800371c <HAL_RCC_OscConfig+0x77c>)
 8003662:	2180      	movs	r1, #128	; 0x80
 8003664:	0449      	lsls	r1, r1, #17
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7ff f8f5 	bl	8002858 <HAL_GetTick>
 800366e:	0003      	movs	r3, r0
 8003670:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003674:	f7ff f8f0 	bl	8002858 <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e045      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x77c>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	049b      	lsls	r3, r3, #18
 800368e:	4013      	ands	r3, r2
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x6d4>
 8003692:	e03d      	b.n	8003710 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003694:	4b21      	ldr	r3, [pc, #132]	; (800371c <HAL_RCC_OscConfig+0x77c>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCC_OscConfig+0x77c>)
 800369a:	4922      	ldr	r1, [pc, #136]	; (8003724 <HAL_RCC_OscConfig+0x784>)
 800369c:	400a      	ands	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7ff f8da 	bl	8002858 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036aa:	f7ff f8d5 	bl	8002858 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e02a      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <HAL_RCC_OscConfig+0x77c>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	049b      	lsls	r3, r3, #18
 80036c4:	4013      	ands	r3, r2
 80036c6:	d1f0      	bne.n	80036aa <HAL_RCC_OscConfig+0x70a>
 80036c8:	e022      	b.n	8003710 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e01d      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_OscConfig+0x77c>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	025b      	lsls	r3, r3, #9
 80036e2:	401a      	ands	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d10f      	bne.n	800370c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	23f0      	movs	r3, #240	; 0xf0
 80036f0:	039b      	lsls	r3, r3, #14
 80036f2:	401a      	ands	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d107      	bne.n	800370c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	23c0      	movs	r3, #192	; 0xc0
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	401a      	ands	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	0018      	movs	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	b00a      	add	sp, #40	; 0x28
 8003718:	bdb0      	pop	{r4, r5, r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	40021000 	.word	0x40021000
 8003720:	ff02ffff 	.word	0xff02ffff
 8003724:	feffffff 	.word	0xfeffffff

08003728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003728:	b5b0      	push	{r4, r5, r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e128      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b96      	ldr	r3, [pc, #600]	; (8003998 <HAL_RCC_ClockConfig+0x270>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2201      	movs	r2, #1
 8003742:	4013      	ands	r3, r2
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d91e      	bls.n	8003788 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b93      	ldr	r3, [pc, #588]	; (8003998 <HAL_RCC_ClockConfig+0x270>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2201      	movs	r2, #1
 8003750:	4393      	bics	r3, r2
 8003752:	0019      	movs	r1, r3
 8003754:	4b90      	ldr	r3, [pc, #576]	; (8003998 <HAL_RCC_ClockConfig+0x270>)
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800375c:	f7ff f87c 	bl	8002858 <HAL_GetTick>
 8003760:	0003      	movs	r3, r0
 8003762:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003764:	e009      	b.n	800377a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003766:	f7ff f877 	bl	8002858 <HAL_GetTick>
 800376a:	0002      	movs	r2, r0
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	4a8a      	ldr	r2, [pc, #552]	; (800399c <HAL_RCC_ClockConfig+0x274>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e109      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	4b87      	ldr	r3, [pc, #540]	; (8003998 <HAL_RCC_ClockConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2201      	movs	r2, #1
 8003780:	4013      	ands	r3, r2
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d1ee      	bne.n	8003766 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2202      	movs	r2, #2
 800378e:	4013      	ands	r3, r2
 8003790:	d009      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003792:	4b83      	ldr	r3, [pc, #524]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	22f0      	movs	r2, #240	; 0xf0
 8003798:	4393      	bics	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	4b7f      	ldr	r3, [pc, #508]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	d100      	bne.n	80037b2 <HAL_RCC_ClockConfig+0x8a>
 80037b0:	e089      	b.n	80038c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ba:	4b79      	ldr	r3, [pc, #484]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	029b      	lsls	r3, r3, #10
 80037c2:	4013      	ands	r3, r2
 80037c4:	d120      	bne.n	8003808 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0e1      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037d2:	4b73      	ldr	r3, [pc, #460]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	049b      	lsls	r3, r3, #18
 80037da:	4013      	ands	r3, r2
 80037dc:	d114      	bne.n	8003808 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0d5      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d106      	bne.n	80037f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ea:	4b6d      	ldr	r3, [pc, #436]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2204      	movs	r2, #4
 80037f0:	4013      	ands	r3, r2
 80037f2:	d109      	bne.n	8003808 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0ca      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037f8:	4b69      	ldr	r3, [pc, #420]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4013      	ands	r3, r2
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0c2      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003808:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2203      	movs	r2, #3
 800380e:	4393      	bics	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	4b62      	ldr	r3, [pc, #392]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 8003818:	430a      	orrs	r2, r1
 800381a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800381c:	f7ff f81c 	bl	8002858 <HAL_GetTick>
 8003820:	0003      	movs	r3, r0
 8003822:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d111      	bne.n	8003850 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800382c:	e009      	b.n	8003842 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382e:	f7ff f813 	bl	8002858 <HAL_GetTick>
 8003832:	0002      	movs	r2, r0
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	4a58      	ldr	r2, [pc, #352]	; (800399c <HAL_RCC_ClockConfig+0x274>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0a5      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003842:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	220c      	movs	r2, #12
 8003848:	4013      	ands	r3, r2
 800384a:	2b08      	cmp	r3, #8
 800384c:	d1ef      	bne.n	800382e <HAL_RCC_ClockConfig+0x106>
 800384e:	e03a      	b.n	80038c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d111      	bne.n	800387c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003858:	e009      	b.n	800386e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385a:	f7fe fffd 	bl	8002858 <HAL_GetTick>
 800385e:	0002      	movs	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	4a4d      	ldr	r2, [pc, #308]	; (800399c <HAL_RCC_ClockConfig+0x274>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e08f      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386e:	4b4c      	ldr	r3, [pc, #304]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	220c      	movs	r2, #12
 8003874:	4013      	ands	r3, r2
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d1ef      	bne.n	800385a <HAL_RCC_ClockConfig+0x132>
 800387a:	e024      	b.n	80038c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d11b      	bne.n	80038bc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003884:	e009      	b.n	800389a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003886:	f7fe ffe7 	bl	8002858 <HAL_GetTick>
 800388a:	0002      	movs	r2, r0
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	4a42      	ldr	r2, [pc, #264]	; (800399c <HAL_RCC_ClockConfig+0x274>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e079      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	220c      	movs	r2, #12
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d1ef      	bne.n	8003886 <HAL_RCC_ClockConfig+0x15e>
 80038a6:	e00e      	b.n	80038c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fe ffd6 	bl	8002858 <HAL_GetTick>
 80038ac:	0002      	movs	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	4a3a      	ldr	r2, [pc, #232]	; (800399c <HAL_RCC_ClockConfig+0x274>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e068      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038bc:	4b38      	ldr	r3, [pc, #224]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	220c      	movs	r2, #12
 80038c2:	4013      	ands	r3, r2
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c6:	4b34      	ldr	r3, [pc, #208]	; (8003998 <HAL_RCC_ClockConfig+0x270>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2201      	movs	r2, #1
 80038cc:	4013      	ands	r3, r2
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d21e      	bcs.n	8003912 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d4:	4b30      	ldr	r3, [pc, #192]	; (8003998 <HAL_RCC_ClockConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2201      	movs	r2, #1
 80038da:	4393      	bics	r3, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	4b2e      	ldr	r3, [pc, #184]	; (8003998 <HAL_RCC_ClockConfig+0x270>)
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038e6:	f7fe ffb7 	bl	8002858 <HAL_GetTick>
 80038ea:	0003      	movs	r3, r0
 80038ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	e009      	b.n	8003904 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fe ffb2 	bl	8002858 <HAL_GetTick>
 80038f4:	0002      	movs	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	4a28      	ldr	r2, [pc, #160]	; (800399c <HAL_RCC_ClockConfig+0x274>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e044      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCC_ClockConfig+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	4013      	ands	r3, r2
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d1ee      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2204      	movs	r2, #4
 8003918:	4013      	ands	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391c:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a20      	ldr	r2, [pc, #128]	; (80039a4 <HAL_RCC_ClockConfig+0x27c>)
 8003922:	4013      	ands	r3, r2
 8003924:	0019      	movs	r1, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 800392c:	430a      	orrs	r2, r1
 800392e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2208      	movs	r2, #8
 8003936:	4013      	ands	r3, r2
 8003938:	d00a      	beq.n	8003950 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800393a:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <HAL_RCC_ClockConfig+0x280>)
 8003940:	4013      	ands	r3, r2
 8003942:	0019      	movs	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	00da      	lsls	r2, r3, #3
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 800394c:	430a      	orrs	r2, r1
 800394e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003950:	f000 f832 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003954:	0001      	movs	r1, r0
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_RCC_ClockConfig+0x278>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	220f      	movs	r2, #15
 800395e:	4013      	ands	r3, r2
 8003960:	4a12      	ldr	r2, [pc, #72]	; (80039ac <HAL_RCC_ClockConfig+0x284>)
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	000a      	movs	r2, r1
 8003966:	40da      	lsrs	r2, r3
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <HAL_RCC_ClockConfig+0x288>)
 800396a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_RCC_ClockConfig+0x28c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	250b      	movs	r5, #11
 8003972:	197c      	adds	r4, r7, r5
 8003974:	0018      	movs	r0, r3
 8003976:	f7fe ff29 	bl	80027cc <HAL_InitTick>
 800397a:	0003      	movs	r3, r0
 800397c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800397e:	197b      	adds	r3, r7, r5
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003986:	197b      	adds	r3, r7, r5
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	e000      	b.n	800398e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	0018      	movs	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	b004      	add	sp, #16
 8003994:	bdb0      	pop	{r4, r5, r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	40022000 	.word	0x40022000
 800399c:	00001388 	.word	0x00001388
 80039a0:	40021000 	.word	0x40021000
 80039a4:	fffff8ff 	.word	0xfffff8ff
 80039a8:	ffffc7ff 	.word	0xffffc7ff
 80039ac:	080075dc 	.word	0x080075dc
 80039b0:	2000001c 	.word	0x2000001c
 80039b4:	20000020 	.word	0x20000020

080039b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	b5b0      	push	{r4, r5, r7, lr}
 80039ba:	b08e      	sub	sp, #56	; 0x38
 80039bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80039be:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x138>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c6:	230c      	movs	r3, #12
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d014      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x40>
 80039ce:	d900      	bls.n	80039d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80039d0:	e07b      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x112>
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d002      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x24>
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d00b      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039da:	e076      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039dc:	4b44      	ldr	r3, [pc, #272]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x138>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2210      	movs	r2, #16
 80039e2:	4013      	ands	r3, r2
 80039e4:	d002      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80039e6:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80039ea:	e07c      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80039ec:	4b42      	ldr	r3, [pc, #264]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x140>)
 80039ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039f0:	e079      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039f2:	4b42      	ldr	r3, [pc, #264]	; (8003afc <HAL_RCC_GetSysClockFreq+0x144>)
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039f6:	e076      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fa:	0c9a      	lsrs	r2, r3, #18
 80039fc:	230f      	movs	r3, #15
 80039fe:	401a      	ands	r2, r3
 8003a00:	4b3f      	ldr	r3, [pc, #252]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x148>)
 8003a02:	5c9b      	ldrb	r3, [r3, r2]
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	0d9a      	lsrs	r2, r3, #22
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	3301      	adds	r3, #1
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a12:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	025b      	lsls	r3, r3, #9
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d01a      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	4a35      	ldr	r2, [pc, #212]	; (8003afc <HAL_RCC_GetSysClockFreq+0x144>)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	69b8      	ldr	r0, [r7, #24]
 8003a2c:	69f9      	ldr	r1, [r7, #28]
 8003a2e:	f7fc fc17 	bl	8000260 <__aeabi_lmul>
 8003a32:	0002      	movs	r2, r0
 8003a34:	000b      	movs	r3, r1
 8003a36:	0010      	movs	r0, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f7fc fbeb 	bl	8000220 <__aeabi_uldivmod>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	000b      	movs	r3, r1
 8003a4e:	0013      	movs	r3, r2
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
 8003a52:	e037      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2210      	movs	r2, #16
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d01a      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4a23      	ldr	r2, [pc, #140]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	68b8      	ldr	r0, [r7, #8]
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	f7fc fbf7 	bl	8000260 <__aeabi_lmul>
 8003a72:	0002      	movs	r2, r0
 8003a74:	000b      	movs	r3, r1
 8003a76:	0010      	movs	r0, r2
 8003a78:	0019      	movs	r1, r3
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f7fc fbcb 	bl	8000220 <__aeabi_uldivmod>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	000b      	movs	r3, r1
 8003a8e:	0013      	movs	r3, r2
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
 8003a92:	e017      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	0018      	movs	r0, r3
 8003a98:	2300      	movs	r3, #0
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	4a16      	ldr	r2, [pc, #88]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x140>)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f7fc fbde 	bl	8000260 <__aeabi_lmul>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	000b      	movs	r3, r1
 8003aa8:	0010      	movs	r0, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	001c      	movs	r4, r3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	001d      	movs	r5, r3
 8003ab4:	0022      	movs	r2, r4
 8003ab6:	002b      	movs	r3, r5
 8003ab8:	f7fc fbb2 	bl	8000220 <__aeabi_uldivmod>
 8003abc:	0002      	movs	r2, r0
 8003abe:	000b      	movs	r3, r1
 8003ac0:	0013      	movs	r3, r2
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ac8:	e00d      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003aca:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	0b5b      	lsrs	r3, r3, #13
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	0212      	lsls	r2, r2, #8
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	0013      	movs	r3, r2
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ae4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b00e      	add	sp, #56	; 0x38
 8003aee:	bdb0      	pop	{r4, r5, r7, pc}
 8003af0:	40021000 	.word	0x40021000
 8003af4:	003d0900 	.word	0x003d0900
 8003af8:	00f42400 	.word	0x00f42400
 8003afc:	007a1200 	.word	0x007a1200
 8003b00:	080075f4 	.word	0x080075f4

08003b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b08:	4b02      	ldr	r3, [pc, #8]	; (8003b14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	2000001c 	.word	0x2000001c

08003b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b1c:	f7ff fff2 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b20:	0001      	movs	r1, r0
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	2207      	movs	r2, #7
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	40d9      	lsrs	r1, r3
 8003b32:	000b      	movs	r3, r1
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	080075ec 	.word	0x080075ec

08003b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b48:	f7ff ffdc 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b4c:	0001      	movs	r1, r0
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	0adb      	lsrs	r3, r3, #11
 8003b54:	2207      	movs	r2, #7
 8003b56:	4013      	ands	r3, r2
 8003b58:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b5a:	5cd3      	ldrb	r3, [r2, r3]
 8003b5c:	40d9      	lsrs	r1, r3
 8003b5e:	000b      	movs	r3, r1
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	080075ec 	.word	0x080075ec

08003b70 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003b78:	2317      	movs	r3, #23
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2220      	movs	r2, #32
 8003b86:	4013      	ands	r3, r2
 8003b88:	d106      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	4013      	ands	r3, r2
 8003b94:	d100      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003b96:	e0d9      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b98:	4b9c      	ldr	r3, [pc, #624]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	055b      	lsls	r3, r3, #21
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d10a      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba4:	4b99      	ldr	r3, [pc, #612]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba8:	4b98      	ldr	r3, [pc, #608]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	0549      	lsls	r1, r1, #21
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003bb2:	2317      	movs	r3, #23
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bba:	4b95      	ldr	r3, [pc, #596]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d11a      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc6:	4b92      	ldr	r3, [pc, #584]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b91      	ldr	r3, [pc, #580]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	0049      	lsls	r1, r1, #1
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd4:	f7fe fe40 	bl	8002858 <HAL_GetTick>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bde:	f7fe fe3b 	bl	8002858 <HAL_GetTick>
 8003be2:	0002      	movs	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b64      	cmp	r3, #100	; 0x64
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e108      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	4b87      	ldr	r3, [pc, #540]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003bfc:	4b83      	ldr	r3, [pc, #524]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	23c0      	movs	r3, #192	; 0xc0
 8003c02:	039b      	lsls	r3, r3, #14
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	23c0      	movs	r3, #192	; 0xc0
 8003c0e:	039b      	lsls	r3, r3, #14
 8003c10:	4013      	ands	r3, r2
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d107      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	23c0      	movs	r3, #192	; 0xc0
 8003c1e:	039b      	lsls	r3, r3, #14
 8003c20:	4013      	ands	r3, r2
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d013      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	23c0      	movs	r3, #192	; 0xc0
 8003c2e:	029b      	lsls	r3, r3, #10
 8003c30:	401a      	ands	r2, r3
 8003c32:	23c0      	movs	r3, #192	; 0xc0
 8003c34:	029b      	lsls	r3, r3, #10
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d10a      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c3a:	4b74      	ldr	r3, [pc, #464]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	029b      	lsls	r3, r3, #10
 8003c42:	401a      	ands	r2, r3
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	029b      	lsls	r3, r3, #10
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0d8      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003c50:	4b6e      	ldr	r3, [pc, #440]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c54:	23c0      	movs	r3, #192	; 0xc0
 8003c56:	029b      	lsls	r3, r3, #10
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d049      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	23c0      	movs	r3, #192	; 0xc0
 8003c68:	029b      	lsls	r3, r3, #10
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d004      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2220      	movs	r2, #32
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d10d      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	23c0      	movs	r3, #192	; 0xc0
 8003c82:	029b      	lsls	r3, r3, #10
 8003c84:	4013      	ands	r3, r2
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d034      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	4013      	ands	r3, r2
 8003c96:	d02e      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c98:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9c:	4a5d      	ldr	r2, [pc, #372]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca2:	4b5a      	ldr	r3, [pc, #360]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ca6:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	0309      	lsls	r1, r1, #12
 8003cac:	430a      	orrs	r2, r1
 8003cae:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb0:	4b56      	ldr	r3, [pc, #344]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cb4:	4b55      	ldr	r3, [pc, #340]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cb6:	4958      	ldr	r1, [pc, #352]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003cb8:	400a      	ands	r2, r1
 8003cba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003cbc:	4b53      	ldr	r3, [pc, #332]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d014      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fdc4 	bl	8002858 <HAL_GetTick>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd4:	e009      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fe fdbf 	bl	8002858 <HAL_GetTick>
 8003cda:	0002      	movs	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	4a4e      	ldr	r2, [pc, #312]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e08b      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cea:	4b48      	ldr	r3, [pc, #288]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d0ef      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	23c0      	movs	r3, #192	; 0xc0
 8003cfc:	029b      	lsls	r3, r3, #10
 8003cfe:	401a      	ands	r2, r3
 8003d00:	23c0      	movs	r3, #192	; 0xc0
 8003d02:	029b      	lsls	r3, r3, #10
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d10c      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003d08:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a44      	ldr	r2, [pc, #272]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	23c0      	movs	r3, #192	; 0xc0
 8003d18:	039b      	lsls	r3, r3, #14
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	4b3a      	ldr	r3, [pc, #232]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	23c0      	movs	r3, #192	; 0xc0
 8003d2c:	029b      	lsls	r3, r3, #10
 8003d2e:	401a      	ands	r2, r3
 8003d30:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d32:	430a      	orrs	r2, r1
 8003d34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d36:	2317      	movs	r3, #23
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d40:	4b32      	ldr	r3, [pc, #200]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d44:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d46:	4937      	ldr	r1, [pc, #220]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003d48:	400a      	ands	r2, r1
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2201      	movs	r2, #1
 8003d52:	4013      	ands	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d56:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	4393      	bics	r3, r2
 8003d5e:	0019      	movs	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d66:	430a      	orrs	r2, r1
 8003d68:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	4013      	ands	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d74:	4b25      	ldr	r3, [pc, #148]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d78:	220c      	movs	r2, #12
 8003d7a:	4393      	bics	r3, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d84:	430a      	orrs	r2, r1
 8003d86:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003da2:	430a      	orrs	r2, r1
 8003da4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2208      	movs	r2, #8
 8003dac:	4013      	ands	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db0:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2240      	movs	r2, #64	; 0x40
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003dde:	430a      	orrs	r2, r1
 8003de0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	4013      	ands	r3, r2
 8003dea:	d009      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003dec:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	4a10      	ldr	r2, [pc, #64]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b006      	add	sp, #24
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40007000 	.word	0x40007000
 8003e14:	fffcffff 	.word	0xfffcffff
 8003e18:	fff7ffff 	.word	0xfff7ffff
 8003e1c:	00001388 	.word	0x00001388
 8003e20:	ffcfffff 	.word	0xffcfffff
 8003e24:	efffffff 	.word	0xefffffff
 8003e28:	fffff3ff 	.word	0xfffff3ff
 8003e2c:	ffffcfff 	.word	0xffffcfff
 8003e30:	fbffffff 	.word	0xfbffffff
 8003e34:	fff3ffff 	.word	0xfff3ffff

08003e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e083      	b.n	8003f52 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	2382      	movs	r3, #130	; 0x82
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d009      	beq.n	8003e72 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	61da      	str	r2, [r3, #28]
 8003e64:	e005      	b.n	8003e72 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2251      	movs	r2, #81	; 0x51
 8003e7c:	5c9b      	ldrb	r3, [r3, r2]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2250      	movs	r2, #80	; 0x50
 8003e88:	2100      	movs	r1, #0
 8003e8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7fe f982 	bl	8002198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2251      	movs	r2, #81	; 0x51
 8003e98:	2102      	movs	r1, #2
 8003e9a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2140      	movs	r1, #64	; 0x40
 8003ea8:	438a      	bics	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	2382      	movs	r3, #130	; 0x82
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	401a      	ands	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6899      	ldr	r1, [r3, #8]
 8003eba:	2384      	movs	r3, #132	; 0x84
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	400b      	ands	r3, r1
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68d9      	ldr	r1, [r3, #12]
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	400b      	ands	r3, r1
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	400b      	ands	r3, r1
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	2101      	movs	r1, #1
 8003ede:	400b      	ands	r3, r1
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6999      	ldr	r1, [r3, #24]
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	400b      	ands	r3, r1
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	2138      	movs	r1, #56	; 0x38
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	400b      	ands	r3, r1
 8003f00:	431a      	orrs	r2, r3
 8003f02:	0011      	movs	r1, r2
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	019b      	lsls	r3, r3, #6
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	0c1b      	lsrs	r3, r3, #16
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	4013      	ands	r3, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	2210      	movs	r2, #16
 8003f28:	401a      	ands	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4907      	ldr	r1, [pc, #28]	; (8003f5c <HAL_SPI_Init+0x124>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2251      	movs	r2, #81	; 0x51
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b002      	add	sp, #8
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	fffff7ff 	.word	0xfffff7ff

08003f60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	1dbb      	adds	r3, r7, #6
 8003f6e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f70:	231f      	movs	r3, #31
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2250      	movs	r2, #80	; 0x50
 8003f7c:	5c9b      	ldrb	r3, [r3, r2]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_SPI_Transmit+0x26>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e13e      	b.n	8004204 <HAL_SPI_Transmit+0x2a4>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2250      	movs	r2, #80	; 0x50
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8e:	f7fe fc63 	bl	8002858 <HAL_GetTick>
 8003f92:	0003      	movs	r3, r0
 8003f94:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003f96:	2316      	movs	r3, #22
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	1dba      	adds	r2, r7, #6
 8003f9c:	8812      	ldrh	r2, [r2, #0]
 8003f9e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2251      	movs	r2, #81	; 0x51
 8003fa4:	5c9b      	ldrb	r3, [r3, r2]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d004      	beq.n	8003fb6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003fac:	231f      	movs	r3, #31
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003fb4:	e11b      	b.n	80041ee <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_SPI_Transmit+0x64>
 8003fbc:	1dbb      	adds	r3, r7, #6
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d104      	bne.n	8003fce <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003fc4:	231f      	movs	r3, #31
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
    goto error;
 8003fcc:	e10f      	b.n	80041ee <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2251      	movs	r2, #81	; 0x51
 8003fd2:	2103      	movs	r1, #3
 8003fd4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1dba      	adds	r2, r7, #6
 8003fe6:	8812      	ldrh	r2, [r2, #0]
 8003fe8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1dba      	adds	r2, r7, #6
 8003fee:	8812      	ldrh	r2, [r2, #0]
 8003ff0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	429a      	cmp	r2, r3
 800401a:	d110      	bne.n	800403e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2140      	movs	r1, #64	; 0x40
 8004028:	438a      	bics	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	01c9      	lsls	r1, r1, #7
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2240      	movs	r2, #64	; 0x40
 8004046:	4013      	ands	r3, r2
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d007      	beq.n	800405c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2140      	movs	r1, #64	; 0x40
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	429a      	cmp	r2, r3
 8004066:	d14e      	bne.n	8004106 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d004      	beq.n	800407a <HAL_SPI_Transmit+0x11a>
 8004070:	2316      	movs	r3, #22
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d13f      	bne.n	80040fa <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	1c9a      	adds	r2, r3, #2
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800409e:	e02c      	b.n	80040fa <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2202      	movs	r2, #2
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d112      	bne.n	80040d4 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	881a      	ldrh	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80040d2:	e012      	b.n	80040fa <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040d4:	f7fe fbc0 	bl	8002858 <HAL_GetTick>
 80040d8:	0002      	movs	r2, r0
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d802      	bhi.n	80040ea <HAL_SPI_Transmit+0x18a>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	3301      	adds	r3, #1
 80040e8:	d102      	bne.n	80040f0 <HAL_SPI_Transmit+0x190>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80040f0:	231f      	movs	r3, #31
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	2203      	movs	r2, #3
 80040f6:	701a      	strb	r2, [r3, #0]
          goto error;
 80040f8:	e079      	b.n	80041ee <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1cd      	bne.n	80040a0 <HAL_SPI_Transmit+0x140>
 8004104:	e04f      	b.n	80041a6 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d004      	beq.n	8004118 <HAL_SPI_Transmit+0x1b8>
 800410e:	2316      	movs	r3, #22
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d141      	bne.n	800419c <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800413e:	e02d      	b.n	800419c <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2202      	movs	r2, #2
 8004148:	4013      	ands	r3, r2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d113      	bne.n	8004176 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	7812      	ldrb	r2, [r2, #0]
 800415a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	86da      	strh	r2, [r3, #54]	; 0x36
 8004174:	e012      	b.n	800419c <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004176:	f7fe fb6f 	bl	8002858 <HAL_GetTick>
 800417a:	0002      	movs	r2, r0
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d802      	bhi.n	800418c <HAL_SPI_Transmit+0x22c>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	3301      	adds	r3, #1
 800418a:	d102      	bne.n	8004192 <HAL_SPI_Transmit+0x232>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8004192:	231f      	movs	r3, #31
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	2203      	movs	r2, #3
 8004198:	701a      	strb	r2, [r3, #0]
          goto error;
 800419a:	e028      	b.n	80041ee <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1cc      	bne.n	8004140 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 fc07 	bl	80049c0 <SPI_EndRxTxTransaction>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d002      	beq.n	80041bc <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d004      	beq.n	80041ec <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80041e2:	231f      	movs	r3, #31
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e000      	b.n	80041ee <HAL_SPI_Transmit+0x28e>
  }

error:
 80041ec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2251      	movs	r2, #81	; 0x51
 80041f2:	2101      	movs	r1, #1
 80041f4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2250      	movs	r2, #80	; 0x50
 80041fa:	2100      	movs	r1, #0
 80041fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80041fe:	231f      	movs	r3, #31
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	781b      	ldrb	r3, [r3, #0]
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	b008      	add	sp, #32
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	1dbb      	adds	r3, r7, #6
 800421a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800421c:	2317      	movs	r3, #23
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	2382      	movs	r3, #130	; 0x82
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	429a      	cmp	r2, r3
 800422e:	d113      	bne.n	8004258 <HAL_SPI_Receive+0x4c>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10f      	bne.n	8004258 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2251      	movs	r2, #81	; 0x51
 800423c:	2104      	movs	r1, #4
 800423e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004240:	1dbb      	adds	r3, r7, #6
 8004242:	881c      	ldrh	r4, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	0023      	movs	r3, r4
 8004250:	f000 f902 	bl	8004458 <HAL_SPI_TransmitReceive>
 8004254:	0003      	movs	r3, r0
 8004256:	e0f9      	b.n	800444c <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2250      	movs	r2, #80	; 0x50
 800425c:	5c9b      	ldrb	r3, [r3, r2]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_SPI_Receive+0x5a>
 8004262:	2302      	movs	r3, #2
 8004264:	e0f2      	b.n	800444c <HAL_SPI_Receive+0x240>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2250      	movs	r2, #80	; 0x50
 800426a:	2101      	movs	r1, #1
 800426c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800426e:	f7fe faf3 	bl	8002858 <HAL_GetTick>
 8004272:	0003      	movs	r3, r0
 8004274:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2251      	movs	r2, #81	; 0x51
 800427a:	5c9b      	ldrb	r3, [r3, r2]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d004      	beq.n	800428c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004282:	2317      	movs	r3, #23
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	2202      	movs	r2, #2
 8004288:	701a      	strb	r2, [r3, #0]
    goto error;
 800428a:	e0d4      	b.n	8004436 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_SPI_Receive+0x8e>
 8004292:	1dbb      	adds	r3, r7, #6
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800429a:	2317      	movs	r3, #23
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	2201      	movs	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80042a2:	e0c8      	b.n	8004436 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2251      	movs	r2, #81	; 0x51
 80042a8:	2104      	movs	r1, #4
 80042aa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1dba      	adds	r2, r7, #6
 80042bc:	8812      	ldrh	r2, [r2, #0]
 80042be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1dba      	adds	r2, r7, #6
 80042c4:	8812      	ldrh	r2, [r2, #0]
 80042c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d10f      	bne.n	8004312 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2140      	movs	r1, #64	; 0x40
 80042fe:	438a      	bics	r2, r1
 8004300:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4951      	ldr	r1, [pc, #324]	; (8004454 <HAL_SPI_Receive+0x248>)
 800430e:	400a      	ands	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2240      	movs	r2, #64	; 0x40
 800431a:	4013      	ands	r3, r2
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d007      	beq.n	8004330 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2140      	movs	r1, #64	; 0x40
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d164      	bne.n	8004402 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004338:	e02f      	b.n	800439a <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2201      	movs	r2, #1
 8004342:	4013      	ands	r3, r2
 8004344:	2b01      	cmp	r3, #1
 8004346:	d115      	bne.n	8004374 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	001a      	movs	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004372:	e012      	b.n	800439a <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004374:	f7fe fa70 	bl	8002858 <HAL_GetTick>
 8004378:	0002      	movs	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d802      	bhi.n	800438a <HAL_SPI_Receive+0x17e>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	3301      	adds	r3, #1
 8004388:	d102      	bne.n	8004390 <HAL_SPI_Receive+0x184>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d104      	bne.n	800439a <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8004390:	2317      	movs	r3, #23
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	2203      	movs	r2, #3
 8004396:	701a      	strb	r2, [r3, #0]
          goto error;
 8004398:	e04d      	b.n	8004436 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1ca      	bne.n	800433a <HAL_SPI_Receive+0x12e>
 80043a4:	e032      	b.n	800440c <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2201      	movs	r2, #1
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d113      	bne.n	80043dc <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	b292      	uxth	r2, r2
 80043c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	1c9a      	adds	r2, r3, #2
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043da:	e012      	b.n	8004402 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043dc:	f7fe fa3c 	bl	8002858 <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d802      	bhi.n	80043f2 <HAL_SPI_Receive+0x1e6>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	d102      	bne.n	80043f8 <HAL_SPI_Receive+0x1ec>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d104      	bne.n	8004402 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 80043f8:	2317      	movs	r3, #23
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	2203      	movs	r2, #3
 80043fe:	701a      	strb	r2, [r3, #0]
          goto error;
 8004400:	e019      	b.n	8004436 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1cc      	bne.n	80043a6 <HAL_SPI_Receive+0x19a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	0018      	movs	r0, r3
 8004414:	f000 fa6a 	bl	80048ec <SPI_EndRxTransaction>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d002      	beq.n	8004422 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 800442a:	2317      	movs	r3, #23
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	e000      	b.n	8004436 <HAL_SPI_Receive+0x22a>
  }

error :
 8004434:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2251      	movs	r2, #81	; 0x51
 800443a:	2101      	movs	r1, #1
 800443c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2250      	movs	r2, #80	; 0x50
 8004442:	2100      	movs	r1, #0
 8004444:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004446:	2317      	movs	r3, #23
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	781b      	ldrb	r3, [r3, #0]
}
 800444c:	0018      	movs	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	b007      	add	sp, #28
 8004452:	bd90      	pop	{r4, r7, pc}
 8004454:	ffffbfff 	.word	0xffffbfff

08004458 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08c      	sub	sp, #48	; 0x30
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	001a      	movs	r2, r3
 8004466:	1cbb      	adds	r3, r7, #2
 8004468:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800446a:	2301      	movs	r3, #1
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800446e:	232b      	movs	r3, #43	; 0x2b
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2250      	movs	r2, #80	; 0x50
 800447a:	5c9b      	ldrb	r3, [r3, r2]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x2c>
 8004480:	2302      	movs	r3, #2
 8004482:	e1a0      	b.n	80047c6 <HAL_SPI_TransmitReceive+0x36e>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2250      	movs	r2, #80	; 0x50
 8004488:	2101      	movs	r1, #1
 800448a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800448c:	f7fe f9e4 	bl	8002858 <HAL_GetTick>
 8004490:	0003      	movs	r3, r0
 8004492:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004494:	2023      	movs	r0, #35	; 0x23
 8004496:	183b      	adds	r3, r7, r0
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	2151      	movs	r1, #81	; 0x51
 800449c:	5c52      	ldrb	r2, [r2, r1]
 800449e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044a6:	231a      	movs	r3, #26
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	1cba      	adds	r2, r7, #2
 80044ac:	8812      	ldrh	r2, [r2, #0]
 80044ae:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044b0:	183b      	adds	r3, r7, r0
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d011      	beq.n	80044dc <HAL_SPI_TransmitReceive+0x84>
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	2382      	movs	r3, #130	; 0x82
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	429a      	cmp	r2, r3
 80044c0:	d107      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x7a>
 80044ca:	183b      	adds	r3, r7, r0
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d004      	beq.n	80044dc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80044d2:	232b      	movs	r3, #43	; 0x2b
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	2202      	movs	r2, #2
 80044d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80044da:	e169      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d006      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x98>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x98>
 80044e8:	1cbb      	adds	r3, r7, #2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80044f0:	232b      	movs	r3, #43	; 0x2b
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80044f8:	e15a      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2251      	movs	r2, #81	; 0x51
 80044fe:	5c9b      	ldrb	r3, [r3, r2]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b04      	cmp	r3, #4
 8004504:	d003      	beq.n	800450e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2251      	movs	r2, #81	; 0x51
 800450a:	2105      	movs	r1, #5
 800450c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1cba      	adds	r2, r7, #2
 800451e:	8812      	ldrh	r2, [r2, #0]
 8004520:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1cba      	adds	r2, r7, #2
 8004526:	8812      	ldrh	r2, [r2, #0]
 8004528:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1cba      	adds	r2, r7, #2
 8004534:	8812      	ldrh	r2, [r2, #0]
 8004536:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1cba      	adds	r2, r7, #2
 800453c:	8812      	ldrh	r2, [r2, #0]
 800453e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2240      	movs	r2, #64	; 0x40
 8004554:	4013      	ands	r3, r2
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d007      	beq.n	800456a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2140      	movs	r1, #64	; 0x40
 8004566:	430a      	orrs	r2, r1
 8004568:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	429a      	cmp	r2, r3
 8004574:	d000      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x120>
 8004576:	e07a      	b.n	800466e <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <HAL_SPI_TransmitReceive+0x132>
 8004580:	231a      	movs	r3, #26
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d166      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	881a      	ldrh	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	1c9a      	adds	r2, r3, #2
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ae:	e053      	b.n	8004658 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2202      	movs	r2, #2
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d11b      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x19e>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d016      	beq.n	80045f6 <HAL_SPI_TransmitReceive+0x19e>
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d113      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	1c9a      	adds	r2, r3, #2
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2201      	movs	r2, #1
 80045fe:	4013      	ands	r3, r2
 8004600:	2b01      	cmp	r3, #1
 8004602:	d119      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x1e0>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d014      	beq.n	8004638 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	b292      	uxth	r2, r2
 800461a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	1c9a      	adds	r2, r3, #2
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004634:	2301      	movs	r3, #1
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004638:	f7fe f90e 	bl	8002858 <HAL_GetTick>
 800463c:	0002      	movs	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004644:	429a      	cmp	r2, r3
 8004646:	d807      	bhi.n	8004658 <HAL_SPI_TransmitReceive+0x200>
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	3301      	adds	r3, #1
 800464c:	d004      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800464e:	232b      	movs	r3, #43	; 0x2b
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	2203      	movs	r2, #3
 8004654:	701a      	strb	r2, [r3, #0]
        goto error;
 8004656:	e0ab      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1a6      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x158>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1a1      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x158>
 800466c:	e07f      	b.n	800476e <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_SPI_TransmitReceive+0x22a>
 8004676:	231a      	movs	r3, #26
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d000      	beq.n	8004682 <HAL_SPI_TransmitReceive+0x22a>
 8004680:	e06b      	b.n	800475a <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a8:	e057      	b.n	800475a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2202      	movs	r2, #2
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d11c      	bne.n	80046f2 <HAL_SPI_TransmitReceive+0x29a>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d017      	beq.n	80046f2 <HAL_SPI_TransmitReceive+0x29a>
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d114      	bne.n	80046f2 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	7812      	ldrb	r2, [r2, #0]
 80046d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2201      	movs	r2, #1
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d119      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x2dc>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d014      	beq.n	8004734 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004730:	2301      	movs	r3, #1
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004734:	f7fe f890 	bl	8002858 <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004740:	429a      	cmp	r2, r3
 8004742:	d802      	bhi.n	800474a <HAL_SPI_TransmitReceive+0x2f2>
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	3301      	adds	r3, #1
 8004748:	d102      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x2f8>
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8004750:	232b      	movs	r3, #43	; 0x2b
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	2203      	movs	r2, #3
 8004756:	701a      	strb	r2, [r3, #0]
        goto error;
 8004758:	e02a      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1a2      	bne.n	80046aa <HAL_SPI_TransmitReceive+0x252>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d19d      	bne.n	80046aa <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004770:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	0018      	movs	r0, r3
 8004776:	f000 f923 	bl	80049c0 <SPI_EndRxTxTransaction>
 800477a:	1e03      	subs	r3, r0, #0
 800477c:	d007      	beq.n	800478e <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800477e:	232b      	movs	r3, #43	; 0x2b
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800478c:	e010      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	e000      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80047ae:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2251      	movs	r2, #81	; 0x51
 80047b4:	2101      	movs	r1, #1
 80047b6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2250      	movs	r2, #80	; 0x50
 80047bc:	2100      	movs	r1, #0
 80047be:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80047c0:	232b      	movs	r3, #43	; 0x2b
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	781b      	ldrb	r3, [r3, #0]
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b00c      	add	sp, #48	; 0x30
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	1dfb      	adds	r3, r7, #7
 80047de:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047e0:	f7fe f83a 	bl	8002858 <HAL_GetTick>
 80047e4:	0002      	movs	r2, r0
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	18d3      	adds	r3, r2, r3
 80047ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047f0:	f7fe f832 	bl	8002858 <HAL_GetTick>
 80047f4:	0003      	movs	r3, r0
 80047f6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047f8:	4b3a      	ldr	r3, [pc, #232]	; (80048e4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	015b      	lsls	r3, r3, #5
 80047fe:	0d1b      	lsrs	r3, r3, #20
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	4353      	muls	r3, r2
 8004804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004806:	e058      	b.n	80048ba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	d055      	beq.n	80048ba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800480e:	f7fe f823 	bl	8002858 <HAL_GetTick>
 8004812:	0002      	movs	r2, r0
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	429a      	cmp	r2, r3
 800481c:	d902      	bls.n	8004824 <SPI_WaitFlagStateUntilTimeout+0x54>
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d142      	bne.n	80048aa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	21e0      	movs	r1, #224	; 0xe0
 8004830:	438a      	bics	r2, r1
 8004832:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	2382      	movs	r3, #130	; 0x82
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	429a      	cmp	r2, r3
 800483e:	d113      	bne.n	8004868 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	429a      	cmp	r2, r3
 800484a:	d005      	beq.n	8004858 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	429a      	cmp	r2, r3
 8004856:	d107      	bne.n	8004868 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2140      	movs	r1, #64	; 0x40
 8004864:	438a      	bics	r2, r1
 8004866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	019b      	lsls	r3, r3, #6
 8004870:	429a      	cmp	r2, r3
 8004872:	d110      	bne.n	8004896 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	491a      	ldr	r1, [pc, #104]	; (80048e8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004880:	400a      	ands	r2, r1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2180      	movs	r1, #128	; 0x80
 8004890:	0189      	lsls	r1, r1, #6
 8004892:	430a      	orrs	r2, r1
 8004894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2251      	movs	r2, #81	; 0x51
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2250      	movs	r2, #80	; 0x50
 80048a2:	2100      	movs	r1, #0
 80048a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e017      	b.n	80048da <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	425a      	negs	r2, r3
 80048ca:	4153      	adcs	r3, r2
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	001a      	movs	r2, r3
 80048d0:	1dfb      	adds	r3, r7, #7
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d197      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	0018      	movs	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	b008      	add	sp, #32
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	2000001c 	.word	0x2000001c
 80048e8:	ffffdfff 	.word	0xffffdfff

080048ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	2382      	movs	r3, #130	; 0x82
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	429a      	cmp	r2, r3
 8004902:	d113      	bne.n	800492c <SPI_EndRxTransaction+0x40>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	429a      	cmp	r2, r3
 800490e:	d005      	beq.n	800491c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	429a      	cmp	r2, r3
 800491a:	d107      	bne.n	800492c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2140      	movs	r1, #64	; 0x40
 8004928:	438a      	bics	r2, r1
 800492a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	2382      	movs	r3, #130	; 0x82
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	429a      	cmp	r2, r3
 8004936:	d12b      	bne.n	8004990 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	429a      	cmp	r2, r3
 8004942:	d012      	beq.n	800496a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	0013      	movs	r3, r2
 800494e:	2200      	movs	r2, #0
 8004950:	2180      	movs	r1, #128	; 0x80
 8004952:	f7ff ff3d 	bl	80047d0 <SPI_WaitFlagStateUntilTimeout>
 8004956:	1e03      	subs	r3, r0, #0
 8004958:	d02d      	beq.n	80049b6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	2220      	movs	r2, #32
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e026      	b.n	80049b8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	0013      	movs	r3, r2
 8004974:	2200      	movs	r2, #0
 8004976:	2101      	movs	r1, #1
 8004978:	f7ff ff2a 	bl	80047d0 <SPI_WaitFlagStateUntilTimeout>
 800497c:	1e03      	subs	r3, r0, #0
 800497e:	d01a      	beq.n	80049b6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	2220      	movs	r2, #32
 8004986:	431a      	orrs	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e013      	b.n	80049b8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	0013      	movs	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	2101      	movs	r1, #1
 800499e:	f7ff ff17 	bl	80047d0 <SPI_WaitFlagStateUntilTimeout>
 80049a2:	1e03      	subs	r3, r0, #0
 80049a4:	d007      	beq.n	80049b6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	2220      	movs	r2, #32
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e000      	b.n	80049b8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b004      	add	sp, #16
 80049be:	bd80      	pop	{r7, pc}

080049c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <SPI_EndRxTxTransaction+0x84>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	491d      	ldr	r1, [pc, #116]	; (8004a48 <SPI_EndRxTxTransaction+0x88>)
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7fb fb98 	bl	8000108 <__udivsi3>
 80049d8:	0003      	movs	r3, r0
 80049da:	001a      	movs	r2, r3
 80049dc:	0013      	movs	r3, r2
 80049de:	015b      	lsls	r3, r3, #5
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	189b      	adds	r3, r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	2382      	movs	r3, #130	; 0x82
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d112      	bne.n	8004a1c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	0013      	movs	r3, r2
 8004a00:	2200      	movs	r2, #0
 8004a02:	2180      	movs	r1, #128	; 0x80
 8004a04:	f7ff fee4 	bl	80047d0 <SPI_WaitFlagStateUntilTimeout>
 8004a08:	1e03      	subs	r3, r0, #0
 8004a0a:	d016      	beq.n	8004a3a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	2220      	movs	r2, #32
 8004a12:	431a      	orrs	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e00f      	b.n	8004a3c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2280      	movs	r2, #128	; 0x80
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d0f2      	beq.n	8004a1c <SPI_EndRxTxTransaction+0x5c>
 8004a36:	e000      	b.n	8004a3a <SPI_EndRxTxTransaction+0x7a>
        break;
 8004a38:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b006      	add	sp, #24
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	2000001c 	.word	0x2000001c
 8004a48:	016e3600 	.word	0x016e3600

08004a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e044      	b.n	8004ae8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d107      	bne.n	8004a76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2274      	movs	r2, #116	; 0x74
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7fd fe1d 	bl	80026b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2224      	movs	r2, #36	; 0x24
 8004a7a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2101      	movs	r1, #1
 8004a88:	438a      	bics	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 f8d8 	bl	8004c44 <UART_SetConfig>
 8004a94:	0003      	movs	r3, r0
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e024      	b.n	8004ae8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f000 fb6b 	bl	8005184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	490d      	ldr	r1, [pc, #52]	; (8004af0 <HAL_UART_Init+0xa4>)
 8004aba:	400a      	ands	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	212a      	movs	r1, #42	; 0x2a
 8004aca:	438a      	bics	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2101      	movs	r1, #1
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f000 fc03 	bl	80052ec <UART_CheckIdleState>
 8004ae6:	0003      	movs	r3, r0
}
 8004ae8:	0018      	movs	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b002      	add	sp, #8
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	ffffb7ff 	.word	0xffffb7ff

08004af4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	1dbb      	adds	r3, r7, #6
 8004b02:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d000      	beq.n	8004b0e <HAL_UART_Transmit+0x1a>
 8004b0c:	e095      	b.n	8004c3a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_UART_Transmit+0x28>
 8004b14:	1dbb      	adds	r3, r7, #6
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e08d      	b.n	8004c3c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	015b      	lsls	r3, r3, #5
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d109      	bne.n	8004b40 <HAL_UART_Transmit+0x4c>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2201      	movs	r2, #1
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d001      	beq.n	8004b40 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e07d      	b.n	8004c3c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2274      	movs	r2, #116	; 0x74
 8004b44:	5c9b      	ldrb	r3, [r3, r2]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Transmit+0x5a>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e076      	b.n	8004c3c <HAL_UART_Transmit+0x148>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2274      	movs	r2, #116	; 0x74
 8004b52:	2101      	movs	r1, #1
 8004b54:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2280      	movs	r2, #128	; 0x80
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2221      	movs	r2, #33	; 0x21
 8004b62:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b64:	f7fd fe78 	bl	8002858 <HAL_GetTick>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1dba      	adds	r2, r7, #6
 8004b70:	2150      	movs	r1, #80	; 0x50
 8004b72:	8812      	ldrh	r2, [r2, #0]
 8004b74:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1dba      	adds	r2, r7, #6
 8004b7a:	2152      	movs	r1, #82	; 0x52
 8004b7c:	8812      	ldrh	r2, [r2, #0]
 8004b7e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	015b      	lsls	r3, r3, #5
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d108      	bne.n	8004b9e <HAL_UART_Transmit+0xaa>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d104      	bne.n	8004b9e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	61bb      	str	r3, [r7, #24]
 8004b9c:	e003      	b.n	8004ba6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2274      	movs	r2, #116	; 0x74
 8004baa:	2100      	movs	r1, #0
 8004bac:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004bae:	e02c      	b.n	8004c0a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	0013      	movs	r3, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	f000 fbdd 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8004bc2:	1e03      	subs	r3, r0, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e038      	b.n	8004c3c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10b      	bne.n	8004be8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	05d2      	lsls	r2, r2, #23
 8004bdc:	0dd2      	lsrs	r2, r2, #23
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	3302      	adds	r3, #2
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	e007      	b.n	8004bf8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	781a      	ldrb	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2252      	movs	r2, #82	; 0x52
 8004bfc:	5a9b      	ldrh	r3, [r3, r2]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b299      	uxth	r1, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2252      	movs	r2, #82	; 0x52
 8004c08:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2252      	movs	r2, #82	; 0x52
 8004c0e:	5a9b      	ldrh	r3, [r3, r2]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1cc      	bne.n	8004bb0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	0013      	movs	r3, r2
 8004c20:	2200      	movs	r2, #0
 8004c22:	2140      	movs	r1, #64	; 0x40
 8004c24:	f000 fbaa 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8004c28:	1e03      	subs	r3, r0, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e005      	b.n	8004c3c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b008      	add	sp, #32
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c44:	b5b0      	push	{r4, r5, r7, lr}
 8004c46:	b08e      	sub	sp, #56	; 0x38
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c4c:	231a      	movs	r3, #26
 8004c4e:	2218      	movs	r2, #24
 8004c50:	4694      	mov	ip, r2
 8004c52:	44bc      	add	ip, r7
 8004c54:	4463      	add	r3, ip
 8004c56:	2200      	movs	r2, #0
 8004c58:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4ac1      	ldr	r2, [pc, #772]	; (8004f80 <UART_SetConfig+0x33c>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c84:	430a      	orrs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4abd      	ldr	r2, [pc, #756]	; (8004f84 <UART_SetConfig+0x340>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	0019      	movs	r1, r3
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4ab7      	ldr	r2, [pc, #732]	; (8004f88 <UART_SetConfig+0x344>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d004      	beq.n	8004cba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4ab2      	ldr	r2, [pc, #712]	; (8004f8c <UART_SetConfig+0x348>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4aae      	ldr	r2, [pc, #696]	; (8004f90 <UART_SetConfig+0x34c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d136      	bne.n	8004d48 <UART_SetConfig+0x104>
 8004cda:	4bae      	ldr	r3, [pc, #696]	; (8004f94 <UART_SetConfig+0x350>)
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	2203      	movs	r2, #3
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d020      	beq.n	8004d28 <UART_SetConfig+0xe4>
 8004ce6:	d827      	bhi.n	8004d38 <UART_SetConfig+0xf4>
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d00d      	beq.n	8004d08 <UART_SetConfig+0xc4>
 8004cec:	d824      	bhi.n	8004d38 <UART_SetConfig+0xf4>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <UART_SetConfig+0xb4>
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d010      	beq.n	8004d18 <UART_SetConfig+0xd4>
 8004cf6:	e01f      	b.n	8004d38 <UART_SetConfig+0xf4>
 8004cf8:	231b      	movs	r3, #27
 8004cfa:	2218      	movs	r2, #24
 8004cfc:	4694      	mov	ip, r2
 8004cfe:	44bc      	add	ip, r7
 8004d00:	4463      	add	r3, ip
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	e0ab      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004d08:	231b      	movs	r3, #27
 8004d0a:	2218      	movs	r2, #24
 8004d0c:	4694      	mov	ip, r2
 8004d0e:	44bc      	add	ip, r7
 8004d10:	4463      	add	r3, ip
 8004d12:	2202      	movs	r2, #2
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e0a3      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004d18:	231b      	movs	r3, #27
 8004d1a:	2218      	movs	r2, #24
 8004d1c:	4694      	mov	ip, r2
 8004d1e:	44bc      	add	ip, r7
 8004d20:	4463      	add	r3, ip
 8004d22:	2204      	movs	r2, #4
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	e09b      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004d28:	231b      	movs	r3, #27
 8004d2a:	2218      	movs	r2, #24
 8004d2c:	4694      	mov	ip, r2
 8004d2e:	44bc      	add	ip, r7
 8004d30:	4463      	add	r3, ip
 8004d32:	2208      	movs	r2, #8
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e093      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004d38:	231b      	movs	r3, #27
 8004d3a:	2218      	movs	r2, #24
 8004d3c:	4694      	mov	ip, r2
 8004d3e:	44bc      	add	ip, r7
 8004d40:	4463      	add	r3, ip
 8004d42:	2210      	movs	r2, #16
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e08b      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a92      	ldr	r2, [pc, #584]	; (8004f98 <UART_SetConfig+0x354>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d136      	bne.n	8004dc0 <UART_SetConfig+0x17c>
 8004d52:	4b90      	ldr	r3, [pc, #576]	; (8004f94 <UART_SetConfig+0x350>)
 8004d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d56:	220c      	movs	r2, #12
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b0c      	cmp	r3, #12
 8004d5c:	d020      	beq.n	8004da0 <UART_SetConfig+0x15c>
 8004d5e:	d827      	bhi.n	8004db0 <UART_SetConfig+0x16c>
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d00d      	beq.n	8004d80 <UART_SetConfig+0x13c>
 8004d64:	d824      	bhi.n	8004db0 <UART_SetConfig+0x16c>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <UART_SetConfig+0x12c>
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d010      	beq.n	8004d90 <UART_SetConfig+0x14c>
 8004d6e:	e01f      	b.n	8004db0 <UART_SetConfig+0x16c>
 8004d70:	231b      	movs	r3, #27
 8004d72:	2218      	movs	r2, #24
 8004d74:	4694      	mov	ip, r2
 8004d76:	44bc      	add	ip, r7
 8004d78:	4463      	add	r3, ip
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e06f      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004d80:	231b      	movs	r3, #27
 8004d82:	2218      	movs	r2, #24
 8004d84:	4694      	mov	ip, r2
 8004d86:	44bc      	add	ip, r7
 8004d88:	4463      	add	r3, ip
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e067      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004d90:	231b      	movs	r3, #27
 8004d92:	2218      	movs	r2, #24
 8004d94:	4694      	mov	ip, r2
 8004d96:	44bc      	add	ip, r7
 8004d98:	4463      	add	r3, ip
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e05f      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004da0:	231b      	movs	r3, #27
 8004da2:	2218      	movs	r2, #24
 8004da4:	4694      	mov	ip, r2
 8004da6:	44bc      	add	ip, r7
 8004da8:	4463      	add	r3, ip
 8004daa:	2208      	movs	r2, #8
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e057      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004db0:	231b      	movs	r3, #27
 8004db2:	2218      	movs	r2, #24
 8004db4:	4694      	mov	ip, r2
 8004db6:	44bc      	add	ip, r7
 8004db8:	4463      	add	r3, ip
 8004dba:	2210      	movs	r2, #16
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e04f      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a70      	ldr	r2, [pc, #448]	; (8004f88 <UART_SetConfig+0x344>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d143      	bne.n	8004e52 <UART_SetConfig+0x20e>
 8004dca:	4b72      	ldr	r3, [pc, #456]	; (8004f94 <UART_SetConfig+0x350>)
 8004dcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dce:	23c0      	movs	r3, #192	; 0xc0
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	22c0      	movs	r2, #192	; 0xc0
 8004dd6:	0112      	lsls	r2, r2, #4
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d02a      	beq.n	8004e32 <UART_SetConfig+0x1ee>
 8004ddc:	22c0      	movs	r2, #192	; 0xc0
 8004dde:	0112      	lsls	r2, r2, #4
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d82e      	bhi.n	8004e42 <UART_SetConfig+0x1fe>
 8004de4:	2280      	movs	r2, #128	; 0x80
 8004de6:	0112      	lsls	r2, r2, #4
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d012      	beq.n	8004e12 <UART_SetConfig+0x1ce>
 8004dec:	2280      	movs	r2, #128	; 0x80
 8004dee:	0112      	lsls	r2, r2, #4
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d826      	bhi.n	8004e42 <UART_SetConfig+0x1fe>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <UART_SetConfig+0x1be>
 8004df8:	2280      	movs	r2, #128	; 0x80
 8004dfa:	00d2      	lsls	r2, r2, #3
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d010      	beq.n	8004e22 <UART_SetConfig+0x1de>
 8004e00:	e01f      	b.n	8004e42 <UART_SetConfig+0x1fe>
 8004e02:	231b      	movs	r3, #27
 8004e04:	2218      	movs	r2, #24
 8004e06:	4694      	mov	ip, r2
 8004e08:	44bc      	add	ip, r7
 8004e0a:	4463      	add	r3, ip
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e026      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004e12:	231b      	movs	r3, #27
 8004e14:	2218      	movs	r2, #24
 8004e16:	4694      	mov	ip, r2
 8004e18:	44bc      	add	ip, r7
 8004e1a:	4463      	add	r3, ip
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	701a      	strb	r2, [r3, #0]
 8004e20:	e01e      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004e22:	231b      	movs	r3, #27
 8004e24:	2218      	movs	r2, #24
 8004e26:	4694      	mov	ip, r2
 8004e28:	44bc      	add	ip, r7
 8004e2a:	4463      	add	r3, ip
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	e016      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004e32:	231b      	movs	r3, #27
 8004e34:	2218      	movs	r2, #24
 8004e36:	4694      	mov	ip, r2
 8004e38:	44bc      	add	ip, r7
 8004e3a:	4463      	add	r3, ip
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e00e      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004e42:	231b      	movs	r3, #27
 8004e44:	2218      	movs	r2, #24
 8004e46:	4694      	mov	ip, r2
 8004e48:	44bc      	add	ip, r7
 8004e4a:	4463      	add	r3, ip
 8004e4c:	2210      	movs	r2, #16
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e006      	b.n	8004e60 <UART_SetConfig+0x21c>
 8004e52:	231b      	movs	r3, #27
 8004e54:	2218      	movs	r2, #24
 8004e56:	4694      	mov	ip, r2
 8004e58:	44bc      	add	ip, r7
 8004e5a:	4463      	add	r3, ip
 8004e5c:	2210      	movs	r2, #16
 8004e5e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a48      	ldr	r2, [pc, #288]	; (8004f88 <UART_SetConfig+0x344>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d000      	beq.n	8004e6c <UART_SetConfig+0x228>
 8004e6a:	e09b      	b.n	8004fa4 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e6c:	231b      	movs	r3, #27
 8004e6e:	2218      	movs	r2, #24
 8004e70:	4694      	mov	ip, r2
 8004e72:	44bc      	add	ip, r7
 8004e74:	4463      	add	r3, ip
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d01d      	beq.n	8004eb8 <UART_SetConfig+0x274>
 8004e7c:	dc20      	bgt.n	8004ec0 <UART_SetConfig+0x27c>
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d015      	beq.n	8004eae <UART_SetConfig+0x26a>
 8004e82:	dc1d      	bgt.n	8004ec0 <UART_SetConfig+0x27c>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <UART_SetConfig+0x24a>
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d005      	beq.n	8004e98 <UART_SetConfig+0x254>
 8004e8c:	e018      	b.n	8004ec0 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e8e:	f7fe fe43 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 8004e92:	0003      	movs	r3, r0
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e96:	e01d      	b.n	8004ed4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e98:	4b3e      	ldr	r3, [pc, #248]	; (8004f94 <UART_SetConfig+0x350>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d002      	beq.n	8004ea8 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ea2:	4b3e      	ldr	r3, [pc, #248]	; (8004f9c <UART_SetConfig+0x358>)
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ea6:	e015      	b.n	8004ed4 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8004ea8:	4b3d      	ldr	r3, [pc, #244]	; (8004fa0 <UART_SetConfig+0x35c>)
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eac:	e012      	b.n	8004ed4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eae:	f7fe fd83 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eb6:	e00d      	b.n	8004ed4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ebe:	e009      	b.n	8004ed4 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004ec4:	231a      	movs	r3, #26
 8004ec6:	2218      	movs	r2, #24
 8004ec8:	4694      	mov	ip, r2
 8004eca:	44bc      	add	ip, r7
 8004ecc:	4463      	add	r3, ip
 8004ece:	2201      	movs	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
        break;
 8004ed2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d100      	bne.n	8004edc <UART_SetConfig+0x298>
 8004eda:	e139      	b.n	8005150 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	0013      	movs	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d305      	bcc.n	8004ef8 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d907      	bls.n	8004f08 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004ef8:	231a      	movs	r3, #26
 8004efa:	2218      	movs	r2, #24
 8004efc:	4694      	mov	ip, r2
 8004efe:	44bc      	add	ip, r7
 8004f00:	4463      	add	r3, ip
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e123      	b.n	8005150 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	6939      	ldr	r1, [r7, #16]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	000b      	movs	r3, r1
 8004f16:	0e1b      	lsrs	r3, r3, #24
 8004f18:	0010      	movs	r0, r2
 8004f1a:	0205      	lsls	r5, r0, #8
 8004f1c:	431d      	orrs	r5, r3
 8004f1e:	000b      	movs	r3, r1
 8004f20:	021c      	lsls	r4, r3, #8
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	68b8      	ldr	r0, [r7, #8]
 8004f30:	68f9      	ldr	r1, [r7, #12]
 8004f32:	1900      	adds	r0, r0, r4
 8004f34:	4169      	adcs	r1, r5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f7fb f96c 	bl	8000220 <__aeabi_uldivmod>
 8004f48:	0002      	movs	r2, r0
 8004f4a:	000b      	movs	r3, r1
 8004f4c:	0013      	movs	r3, r2
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f52:	23c0      	movs	r3, #192	; 0xc0
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d309      	bcc.n	8004f6e <UART_SetConfig+0x32a>
 8004f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	035b      	lsls	r3, r3, #13
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d204      	bcs.n	8004f6e <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6a:	60da      	str	r2, [r3, #12]
 8004f6c:	e0f0      	b.n	8005150 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f6e:	231a      	movs	r3, #26
 8004f70:	2218      	movs	r2, #24
 8004f72:	4694      	mov	ip, r2
 8004f74:	44bc      	add	ip, r7
 8004f76:	4463      	add	r3, ip
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	e0e8      	b.n	8005150 <UART_SetConfig+0x50c>
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	efff69f3 	.word	0xefff69f3
 8004f84:	ffffcfff 	.word	0xffffcfff
 8004f88:	40004800 	.word	0x40004800
 8004f8c:	fffff4ff 	.word	0xfffff4ff
 8004f90:	40013800 	.word	0x40013800
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40004400 	.word	0x40004400
 8004f9c:	003d0900 	.word	0x003d0900
 8004fa0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d000      	beq.n	8004fb2 <UART_SetConfig+0x36e>
 8004fb0:	e074      	b.n	800509c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004fb2:	231b      	movs	r3, #27
 8004fb4:	2218      	movs	r2, #24
 8004fb6:	4694      	mov	ip, r2
 8004fb8:	44bc      	add	ip, r7
 8004fba:	4463      	add	r3, ip
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d822      	bhi.n	8005008 <UART_SetConfig+0x3c4>
 8004fc2:	009a      	lsls	r2, r3, #2
 8004fc4:	4b6a      	ldr	r3, [pc, #424]	; (8005170 <UART_SetConfig+0x52c>)
 8004fc6:	18d3      	adds	r3, r2, r3
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fcc:	f7fe fda4 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fd4:	e022      	b.n	800501c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd6:	f7fe fdb5 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fde:	e01d      	b.n	800501c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe0:	4b64      	ldr	r3, [pc, #400]	; (8005174 <UART_SetConfig+0x530>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2210      	movs	r2, #16
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d002      	beq.n	8004ff0 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004fea:	4b63      	ldr	r3, [pc, #396]	; (8005178 <UART_SetConfig+0x534>)
 8004fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fee:	e015      	b.n	800501c <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8004ff0:	4b62      	ldr	r3, [pc, #392]	; (800517c <UART_SetConfig+0x538>)
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ff4:	e012      	b.n	800501c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff6:	f7fe fcdf 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ffe:	e00d      	b.n	800501c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005006:	e009      	b.n	800501c <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800500c:	231a      	movs	r3, #26
 800500e:	2218      	movs	r2, #24
 8005010:	4694      	mov	ip, r2
 8005012:	44bc      	add	ip, r7
 8005014:	4463      	add	r3, ip
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
        break;
 800501a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d100      	bne.n	8005024 <UART_SetConfig+0x3e0>
 8005022:	e095      	b.n	8005150 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	005a      	lsls	r2, r3, #1
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	18d2      	adds	r2, r2, r3
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	0019      	movs	r1, r3
 8005036:	0010      	movs	r0, r2
 8005038:	f7fb f866 	bl	8000108 <__udivsi3>
 800503c:	0003      	movs	r3, r0
 800503e:	b29b      	uxth	r3, r3
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	2b0f      	cmp	r3, #15
 8005046:	d921      	bls.n	800508c <UART_SetConfig+0x448>
 8005048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800504a:	2380      	movs	r3, #128	; 0x80
 800504c:	025b      	lsls	r3, r3, #9
 800504e:	429a      	cmp	r2, r3
 8005050:	d21c      	bcs.n	800508c <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	b29a      	uxth	r2, r3
 8005056:	200e      	movs	r0, #14
 8005058:	2418      	movs	r4, #24
 800505a:	193b      	adds	r3, r7, r4
 800505c:	181b      	adds	r3, r3, r0
 800505e:	210f      	movs	r1, #15
 8005060:	438a      	bics	r2, r1
 8005062:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	b29b      	uxth	r3, r3
 800506a:	2207      	movs	r2, #7
 800506c:	4013      	ands	r3, r2
 800506e:	b299      	uxth	r1, r3
 8005070:	193b      	adds	r3, r7, r4
 8005072:	181b      	adds	r3, r3, r0
 8005074:	193a      	adds	r2, r7, r4
 8005076:	1812      	adds	r2, r2, r0
 8005078:	8812      	ldrh	r2, [r2, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	193a      	adds	r2, r7, r4
 8005084:	1812      	adds	r2, r2, r0
 8005086:	8812      	ldrh	r2, [r2, #0]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	e061      	b.n	8005150 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800508c:	231a      	movs	r3, #26
 800508e:	2218      	movs	r2, #24
 8005090:	4694      	mov	ip, r2
 8005092:	44bc      	add	ip, r7
 8005094:	4463      	add	r3, ip
 8005096:	2201      	movs	r2, #1
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e059      	b.n	8005150 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800509c:	231b      	movs	r3, #27
 800509e:	2218      	movs	r2, #24
 80050a0:	4694      	mov	ip, r2
 80050a2:	44bc      	add	ip, r7
 80050a4:	4463      	add	r3, ip
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d822      	bhi.n	80050f2 <UART_SetConfig+0x4ae>
 80050ac:	009a      	lsls	r2, r3, #2
 80050ae:	4b34      	ldr	r3, [pc, #208]	; (8005180 <UART_SetConfig+0x53c>)
 80050b0:	18d3      	adds	r3, r2, r3
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b6:	f7fe fd2f 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 80050ba:	0003      	movs	r3, r0
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050be:	e022      	b.n	8005106 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c0:	f7fe fd40 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 80050c4:	0003      	movs	r3, r0
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050c8:	e01d      	b.n	8005106 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050ca:	4b2a      	ldr	r3, [pc, #168]	; (8005174 <UART_SetConfig+0x530>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2210      	movs	r2, #16
 80050d0:	4013      	ands	r3, r2
 80050d2:	d002      	beq.n	80050da <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80050d4:	4b28      	ldr	r3, [pc, #160]	; (8005178 <UART_SetConfig+0x534>)
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050d8:	e015      	b.n	8005106 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80050da:	4b28      	ldr	r3, [pc, #160]	; (800517c <UART_SetConfig+0x538>)
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050de:	e012      	b.n	8005106 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050e0:	f7fe fc6a 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 80050e4:	0003      	movs	r3, r0
 80050e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050e8:	e00d      	b.n	8005106 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050f0:	e009      	b.n	8005106 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050f6:	231a      	movs	r3, #26
 80050f8:	2218      	movs	r2, #24
 80050fa:	4694      	mov	ip, r2
 80050fc:	44bc      	add	ip, r7
 80050fe:	4463      	add	r3, ip
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
        break;
 8005104:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d021      	beq.n	8005150 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	085a      	lsrs	r2, r3, #1
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	18d2      	adds	r2, r2, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	0019      	movs	r1, r3
 800511c:	0010      	movs	r0, r2
 800511e:	f7fa fff3 	bl	8000108 <__udivsi3>
 8005122:	0003      	movs	r3, r0
 8005124:	b29b      	uxth	r3, r3
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	2b0f      	cmp	r3, #15
 800512c:	d909      	bls.n	8005142 <UART_SetConfig+0x4fe>
 800512e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	025b      	lsls	r3, r3, #9
 8005134:	429a      	cmp	r2, r3
 8005136:	d204      	bcs.n	8005142 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	e006      	b.n	8005150 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005142:	231a      	movs	r3, #26
 8005144:	2218      	movs	r2, #24
 8005146:	4694      	mov	ip, r2
 8005148:	44bc      	add	ip, r7
 800514a:	4463      	add	r3, ip
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2200      	movs	r2, #0
 8005154:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2200      	movs	r2, #0
 800515a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800515c:	231a      	movs	r3, #26
 800515e:	2218      	movs	r2, #24
 8005160:	4694      	mov	ip, r2
 8005162:	44bc      	add	ip, r7
 8005164:	4463      	add	r3, ip
 8005166:	781b      	ldrb	r3, [r3, #0]
}
 8005168:	0018      	movs	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	b00e      	add	sp, #56	; 0x38
 800516e:	bdb0      	pop	{r4, r5, r7, pc}
 8005170:	08007600 	.word	0x08007600
 8005174:	40021000 	.word	0x40021000
 8005178:	003d0900 	.word	0x003d0900
 800517c:	00f42400 	.word	0x00f42400
 8005180:	08007624 	.word	0x08007624

08005184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2201      	movs	r2, #1
 8005192:	4013      	ands	r3, r2
 8005194:	d00b      	beq.n	80051ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4a4a      	ldr	r2, [pc, #296]	; (80052c8 <UART_AdvFeatureConfig+0x144>)
 800519e:	4013      	ands	r3, r2
 80051a0:	0019      	movs	r1, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2202      	movs	r2, #2
 80051b4:	4013      	ands	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4a43      	ldr	r2, [pc, #268]	; (80052cc <UART_AdvFeatureConfig+0x148>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	0019      	movs	r1, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	2204      	movs	r2, #4
 80051d6:	4013      	ands	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a3b      	ldr	r2, [pc, #236]	; (80052d0 <UART_AdvFeatureConfig+0x14c>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	0019      	movs	r1, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	2208      	movs	r2, #8
 80051f8:	4013      	ands	r3, r2
 80051fa:	d00b      	beq.n	8005214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4a34      	ldr	r2, [pc, #208]	; (80052d4 <UART_AdvFeatureConfig+0x150>)
 8005204:	4013      	ands	r3, r2
 8005206:	0019      	movs	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	2210      	movs	r2, #16
 800521a:	4013      	ands	r3, r2
 800521c:	d00b      	beq.n	8005236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4a2c      	ldr	r2, [pc, #176]	; (80052d8 <UART_AdvFeatureConfig+0x154>)
 8005226:	4013      	ands	r3, r2
 8005228:	0019      	movs	r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2220      	movs	r2, #32
 800523c:	4013      	ands	r3, r2
 800523e:	d00b      	beq.n	8005258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	4a25      	ldr	r2, [pc, #148]	; (80052dc <UART_AdvFeatureConfig+0x158>)
 8005248:	4013      	ands	r3, r2
 800524a:	0019      	movs	r1, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	2240      	movs	r2, #64	; 0x40
 800525e:	4013      	ands	r3, r2
 8005260:	d01d      	beq.n	800529e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a1d      	ldr	r2, [pc, #116]	; (80052e0 <UART_AdvFeatureConfig+0x15c>)
 800526a:	4013      	ands	r3, r2
 800526c:	0019      	movs	r1, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	035b      	lsls	r3, r3, #13
 8005282:	429a      	cmp	r2, r3
 8005284:	d10b      	bne.n	800529e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <UART_AdvFeatureConfig+0x160>)
 800528e:	4013      	ands	r3, r2
 8005290:	0019      	movs	r1, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	4013      	ands	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	4a0e      	ldr	r2, [pc, #56]	; (80052e8 <UART_AdvFeatureConfig+0x164>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	0019      	movs	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b002      	add	sp, #8
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	fffdffff 	.word	0xfffdffff
 80052cc:	fffeffff 	.word	0xfffeffff
 80052d0:	fffbffff 	.word	0xfffbffff
 80052d4:	ffff7fff 	.word	0xffff7fff
 80052d8:	ffffefff 	.word	0xffffefff
 80052dc:	ffffdfff 	.word	0xffffdfff
 80052e0:	ffefffff 	.word	0xffefffff
 80052e4:	ff9fffff 	.word	0xff9fffff
 80052e8:	fff7ffff 	.word	0xfff7ffff

080052ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2280      	movs	r2, #128	; 0x80
 80052f8:	2100      	movs	r1, #0
 80052fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052fc:	f7fd faac 	bl	8002858 <HAL_GetTick>
 8005300:	0003      	movs	r3, r0
 8005302:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2208      	movs	r2, #8
 800530c:	4013      	ands	r3, r2
 800530e:	2b08      	cmp	r3, #8
 8005310:	d10c      	bne.n	800532c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2280      	movs	r2, #128	; 0x80
 8005316:	0391      	lsls	r1, r2, #14
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <UART_CheckIdleState+0x8c>)
 800531c:	9200      	str	r2, [sp, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	f000 f82c 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8005324:	1e03      	subs	r3, r0, #0
 8005326:	d001      	beq.n	800532c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e021      	b.n	8005370 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2204      	movs	r2, #4
 8005334:	4013      	ands	r3, r2
 8005336:	2b04      	cmp	r3, #4
 8005338:	d10c      	bne.n	8005354 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2280      	movs	r2, #128	; 0x80
 800533e:	03d1      	lsls	r1, r2, #15
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4a0d      	ldr	r2, [pc, #52]	; (8005378 <UART_CheckIdleState+0x8c>)
 8005344:	9200      	str	r2, [sp, #0]
 8005346:	2200      	movs	r2, #0
 8005348:	f000 f818 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 800534c:	1e03      	subs	r3, r0, #0
 800534e:	d001      	beq.n	8005354 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e00d      	b.n	8005370 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2274      	movs	r2, #116	; 0x74
 800536a:	2100      	movs	r1, #0
 800536c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	0018      	movs	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	b004      	add	sp, #16
 8005376:	bd80      	pop	{r7, pc}
 8005378:	01ffffff 	.word	0x01ffffff

0800537c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	1dfb      	adds	r3, r7, #7
 800538a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538c:	e05e      	b.n	800544c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	3301      	adds	r3, #1
 8005392:	d05b      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005394:	f7fd fa60 	bl	8002858 <HAL_GetTick>
 8005398:	0002      	movs	r2, r0
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d302      	bcc.n	80053aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d11b      	bne.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	492f      	ldr	r1, [pc, #188]	; (8005474 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80053b6:	400a      	ands	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2101      	movs	r1, #1
 80053c6:	438a      	bics	r2, r1
 80053c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2274      	movs	r2, #116	; 0x74
 80053da:	2100      	movs	r1, #0
 80053dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e044      	b.n	800546c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2204      	movs	r2, #4
 80053ea:	4013      	ands	r3, r2
 80053ec:	d02e      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	401a      	ands	r2, r3
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	429a      	cmp	r2, r3
 8005400:	d124      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2280      	movs	r2, #128	; 0x80
 8005408:	0112      	lsls	r2, r2, #4
 800540a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4917      	ldr	r1, [pc, #92]	; (8005474 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005418:	400a      	ands	r2, r1
 800541a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2101      	movs	r1, #1
 8005428:	438a      	bics	r2, r1
 800542a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	2120      	movs	r1, #32
 800543e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2274      	movs	r2, #116	; 0x74
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e00f      	b.n	800546c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	425a      	negs	r2, r3
 800545c:	4153      	adcs	r3, r2
 800545e:	b2db      	uxtb	r3, r3
 8005460:	001a      	movs	r2, r3
 8005462:	1dfb      	adds	r3, r7, #7
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d091      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b004      	add	sp, #16
 8005472:	bd80      	pop	{r7, pc}
 8005474:	fffffe5f 	.word	0xfffffe5f

08005478 <__errno>:
 8005478:	4b01      	ldr	r3, [pc, #4]	; (8005480 <__errno+0x8>)
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	4770      	bx	lr
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	20000028 	.word	0x20000028

08005484 <__libc_init_array>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	2600      	movs	r6, #0
 8005488:	4d0c      	ldr	r5, [pc, #48]	; (80054bc <__libc_init_array+0x38>)
 800548a:	4c0d      	ldr	r4, [pc, #52]	; (80054c0 <__libc_init_array+0x3c>)
 800548c:	1b64      	subs	r4, r4, r5
 800548e:	10a4      	asrs	r4, r4, #2
 8005490:	42a6      	cmp	r6, r4
 8005492:	d109      	bne.n	80054a8 <__libc_init_array+0x24>
 8005494:	2600      	movs	r6, #0
 8005496:	f000 f8ad 	bl	80055f4 <_init>
 800549a:	4d0a      	ldr	r5, [pc, #40]	; (80054c4 <__libc_init_array+0x40>)
 800549c:	4c0a      	ldr	r4, [pc, #40]	; (80054c8 <__libc_init_array+0x44>)
 800549e:	1b64      	subs	r4, r4, r5
 80054a0:	10a4      	asrs	r4, r4, #2
 80054a2:	42a6      	cmp	r6, r4
 80054a4:	d105      	bne.n	80054b2 <__libc_init_array+0x2e>
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	00b3      	lsls	r3, r6, #2
 80054aa:	58eb      	ldr	r3, [r5, r3]
 80054ac:	4798      	blx	r3
 80054ae:	3601      	adds	r6, #1
 80054b0:	e7ee      	b.n	8005490 <__libc_init_array+0xc>
 80054b2:	00b3      	lsls	r3, r6, #2
 80054b4:	58eb      	ldr	r3, [r5, r3]
 80054b6:	4798      	blx	r3
 80054b8:	3601      	adds	r6, #1
 80054ba:	e7f2      	b.n	80054a2 <__libc_init_array+0x1e>
 80054bc:	08007650 	.word	0x08007650
 80054c0:	08007650 	.word	0x08007650
 80054c4:	08007650 	.word	0x08007650
 80054c8:	08007654 	.word	0x08007654

080054cc <malloc>:
 80054cc:	b510      	push	{r4, lr}
 80054ce:	4b03      	ldr	r3, [pc, #12]	; (80054dc <malloc+0x10>)
 80054d0:	0001      	movs	r1, r0
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	f000 f80c 	bl	80054f0 <_malloc_r>
 80054d8:	bd10      	pop	{r4, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	20000028 	.word	0x20000028

080054e0 <memset>:
 80054e0:	0003      	movs	r3, r0
 80054e2:	1882      	adds	r2, r0, r2
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d100      	bne.n	80054ea <memset+0xa>
 80054e8:	4770      	bx	lr
 80054ea:	7019      	strb	r1, [r3, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	e7f9      	b.n	80054e4 <memset+0x4>

080054f0 <_malloc_r>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	2303      	movs	r3, #3
 80054f4:	1ccd      	adds	r5, r1, #3
 80054f6:	439d      	bics	r5, r3
 80054f8:	3508      	adds	r5, #8
 80054fa:	0006      	movs	r6, r0
 80054fc:	2d0c      	cmp	r5, #12
 80054fe:	d21f      	bcs.n	8005540 <_malloc_r+0x50>
 8005500:	250c      	movs	r5, #12
 8005502:	42a9      	cmp	r1, r5
 8005504:	d81e      	bhi.n	8005544 <_malloc_r+0x54>
 8005506:	0030      	movs	r0, r6
 8005508:	f000 f862 	bl	80055d0 <__malloc_lock>
 800550c:	4925      	ldr	r1, [pc, #148]	; (80055a4 <_malloc_r+0xb4>)
 800550e:	680a      	ldr	r2, [r1, #0]
 8005510:	0014      	movs	r4, r2
 8005512:	2c00      	cmp	r4, #0
 8005514:	d11a      	bne.n	800554c <_malloc_r+0x5c>
 8005516:	4f24      	ldr	r7, [pc, #144]	; (80055a8 <_malloc_r+0xb8>)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <_malloc_r+0x38>
 800551e:	0021      	movs	r1, r4
 8005520:	0030      	movs	r0, r6
 8005522:	f000 f843 	bl	80055ac <_sbrk_r>
 8005526:	6038      	str	r0, [r7, #0]
 8005528:	0029      	movs	r1, r5
 800552a:	0030      	movs	r0, r6
 800552c:	f000 f83e 	bl	80055ac <_sbrk_r>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d12b      	bne.n	800558c <_malloc_r+0x9c>
 8005534:	230c      	movs	r3, #12
 8005536:	0030      	movs	r0, r6
 8005538:	6033      	str	r3, [r6, #0]
 800553a:	f000 f851 	bl	80055e0 <__malloc_unlock>
 800553e:	e003      	b.n	8005548 <_malloc_r+0x58>
 8005540:	2d00      	cmp	r5, #0
 8005542:	dade      	bge.n	8005502 <_malloc_r+0x12>
 8005544:	230c      	movs	r3, #12
 8005546:	6033      	str	r3, [r6, #0]
 8005548:	2000      	movs	r0, #0
 800554a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	1b5b      	subs	r3, r3, r5
 8005550:	d419      	bmi.n	8005586 <_malloc_r+0x96>
 8005552:	2b0b      	cmp	r3, #11
 8005554:	d903      	bls.n	800555e <_malloc_r+0x6e>
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	18e4      	adds	r4, r4, r3
 800555a:	6025      	str	r5, [r4, #0]
 800555c:	e003      	b.n	8005566 <_malloc_r+0x76>
 800555e:	6863      	ldr	r3, [r4, #4]
 8005560:	42a2      	cmp	r2, r4
 8005562:	d10e      	bne.n	8005582 <_malloc_r+0x92>
 8005564:	600b      	str	r3, [r1, #0]
 8005566:	0030      	movs	r0, r6
 8005568:	f000 f83a 	bl	80055e0 <__malloc_unlock>
 800556c:	0020      	movs	r0, r4
 800556e:	2207      	movs	r2, #7
 8005570:	300b      	adds	r0, #11
 8005572:	1d23      	adds	r3, r4, #4
 8005574:	4390      	bics	r0, r2
 8005576:	1ac2      	subs	r2, r0, r3
 8005578:	4298      	cmp	r0, r3
 800557a:	d0e6      	beq.n	800554a <_malloc_r+0x5a>
 800557c:	1a1b      	subs	r3, r3, r0
 800557e:	50a3      	str	r3, [r4, r2]
 8005580:	e7e3      	b.n	800554a <_malloc_r+0x5a>
 8005582:	6053      	str	r3, [r2, #4]
 8005584:	e7ef      	b.n	8005566 <_malloc_r+0x76>
 8005586:	0022      	movs	r2, r4
 8005588:	6864      	ldr	r4, [r4, #4]
 800558a:	e7c2      	b.n	8005512 <_malloc_r+0x22>
 800558c:	2303      	movs	r3, #3
 800558e:	1cc4      	adds	r4, r0, #3
 8005590:	439c      	bics	r4, r3
 8005592:	42a0      	cmp	r0, r4
 8005594:	d0e1      	beq.n	800555a <_malloc_r+0x6a>
 8005596:	1a21      	subs	r1, r4, r0
 8005598:	0030      	movs	r0, r6
 800559a:	f000 f807 	bl	80055ac <_sbrk_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	d1db      	bne.n	800555a <_malloc_r+0x6a>
 80055a2:	e7c7      	b.n	8005534 <_malloc_r+0x44>
 80055a4:	200000f8 	.word	0x200000f8
 80055a8:	200000fc 	.word	0x200000fc

080055ac <_sbrk_r>:
 80055ac:	2300      	movs	r3, #0
 80055ae:	b570      	push	{r4, r5, r6, lr}
 80055b0:	4d06      	ldr	r5, [pc, #24]	; (80055cc <_sbrk_r+0x20>)
 80055b2:	0004      	movs	r4, r0
 80055b4:	0008      	movs	r0, r1
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fd f80e 	bl	80025d8 <_sbrk>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d103      	bne.n	80055c8 <_sbrk_r+0x1c>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d000      	beq.n	80055c8 <_sbrk_r+0x1c>
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	2000024c 	.word	0x2000024c

080055d0 <__malloc_lock>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4802      	ldr	r0, [pc, #8]	; (80055dc <__malloc_lock+0xc>)
 80055d4:	f000 f80c 	bl	80055f0 <__retarget_lock_acquire_recursive>
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	20000254 	.word	0x20000254

080055e0 <__malloc_unlock>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	4802      	ldr	r0, [pc, #8]	; (80055ec <__malloc_unlock+0xc>)
 80055e4:	f000 f805 	bl	80055f2 <__retarget_lock_release_recursive>
 80055e8:	bd10      	pop	{r4, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	20000254 	.word	0x20000254

080055f0 <__retarget_lock_acquire_recursive>:
 80055f0:	4770      	bx	lr

080055f2 <__retarget_lock_release_recursive>:
 80055f2:	4770      	bx	lr

080055f4 <_init>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr

08005600 <_fini>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr
