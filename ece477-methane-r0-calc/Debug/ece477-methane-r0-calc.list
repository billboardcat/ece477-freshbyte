
ece477-methane-r0-calc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005650  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005710  08005710  00015710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005870  08005870  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005878  08005878  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000074  080058f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080058f4  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059df  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c3  00000000  00000000  00025a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f0  00000000  00000000  00026e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000438  00000000  00000000  00027330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b5c  00000000  00000000  00027768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d39  00000000  00000000  0003b2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007740c  00000000  00000000  00041ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001488  00000000  00000000  000b945c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080056f8 	.word	0x080056f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080056f8 	.word	0x080056f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 f953 	bl	80014dc <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f89d 	bl	8001380 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 f945 	bl	80014dc <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 f93b 	bl	80014dc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f8bf 	bl	80013f8 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f8b5 	bl	80013f8 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_uldivmod>:
 800029c:	2b00      	cmp	r3, #0
 800029e:	d111      	bne.n	80002c4 <__aeabi_uldivmod+0x28>
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	d10f      	bne.n	80002c4 <__aeabi_uldivmod+0x28>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	d100      	bne.n	80002aa <__aeabi_uldivmod+0xe>
 80002a8:	2800      	cmp	r0, #0
 80002aa:	d002      	beq.n	80002b2 <__aeabi_uldivmod+0x16>
 80002ac:	2100      	movs	r1, #0
 80002ae:	43c9      	mvns	r1, r1
 80002b0:	1c08      	adds	r0, r1, #0
 80002b2:	b407      	push	{r0, r1, r2}
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <__aeabi_uldivmod+0x24>)
 80002b6:	a102      	add	r1, pc, #8	; (adr r1, 80002c0 <__aeabi_uldivmod+0x24>)
 80002b8:	1840      	adds	r0, r0, r1
 80002ba:	9002      	str	r0, [sp, #8]
 80002bc:	bd03      	pop	{r0, r1, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	ffffff5d 	.word	0xffffff5d
 80002c4:	b403      	push	{r0, r1}
 80002c6:	4668      	mov	r0, sp
 80002c8:	b501      	push	{r0, lr}
 80002ca:	9802      	ldr	r0, [sp, #8]
 80002cc:	f000 f82e 	bl	800032c <__udivmoddi4>
 80002d0:	9b01      	ldr	r3, [sp, #4]
 80002d2:	469e      	mov	lr, r3
 80002d4:	b002      	add	sp, #8
 80002d6:	bc0c      	pop	{r2, r3}
 80002d8:	4770      	bx	lr
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__aeabi_lmul>:
 80002dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002de:	0415      	lsls	r5, r2, #16
 80002e0:	0c2d      	lsrs	r5, r5, #16
 80002e2:	000f      	movs	r7, r1
 80002e4:	0001      	movs	r1, r0
 80002e6:	002e      	movs	r6, r5
 80002e8:	46c6      	mov	lr, r8
 80002ea:	4684      	mov	ip, r0
 80002ec:	0400      	lsls	r0, r0, #16
 80002ee:	0c14      	lsrs	r4, r2, #16
 80002f0:	0c00      	lsrs	r0, r0, #16
 80002f2:	0c09      	lsrs	r1, r1, #16
 80002f4:	4346      	muls	r6, r0
 80002f6:	434d      	muls	r5, r1
 80002f8:	4360      	muls	r0, r4
 80002fa:	4361      	muls	r1, r4
 80002fc:	1940      	adds	r0, r0, r5
 80002fe:	0c34      	lsrs	r4, r6, #16
 8000300:	1824      	adds	r4, r4, r0
 8000302:	b500      	push	{lr}
 8000304:	42a5      	cmp	r5, r4
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x34>
 8000308:	2080      	movs	r0, #128	; 0x80
 800030a:	0240      	lsls	r0, r0, #9
 800030c:	4680      	mov	r8, r0
 800030e:	4441      	add	r1, r8
 8000310:	0c25      	lsrs	r5, r4, #16
 8000312:	186d      	adds	r5, r5, r1
 8000314:	4661      	mov	r1, ip
 8000316:	4359      	muls	r1, r3
 8000318:	437a      	muls	r2, r7
 800031a:	0430      	lsls	r0, r6, #16
 800031c:	1949      	adds	r1, r1, r5
 800031e:	0424      	lsls	r4, r4, #16
 8000320:	0c00      	lsrs	r0, r0, #16
 8000322:	1820      	adds	r0, r4, r0
 8000324:	1889      	adds	r1, r1, r2
 8000326:	bc80      	pop	{r7}
 8000328:	46b8      	mov	r8, r7
 800032a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800032c <__udivmoddi4>:
 800032c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800032e:	4657      	mov	r7, sl
 8000330:	464e      	mov	r6, r9
 8000332:	4645      	mov	r5, r8
 8000334:	46de      	mov	lr, fp
 8000336:	b5e0      	push	{r5, r6, r7, lr}
 8000338:	0004      	movs	r4, r0
 800033a:	000d      	movs	r5, r1
 800033c:	4692      	mov	sl, r2
 800033e:	4699      	mov	r9, r3
 8000340:	b083      	sub	sp, #12
 8000342:	428b      	cmp	r3, r1
 8000344:	d830      	bhi.n	80003a8 <__udivmoddi4+0x7c>
 8000346:	d02d      	beq.n	80003a4 <__udivmoddi4+0x78>
 8000348:	4649      	mov	r1, r9
 800034a:	4650      	mov	r0, sl
 800034c:	f002 f870 	bl	8002430 <__clzdi2>
 8000350:	0029      	movs	r1, r5
 8000352:	0006      	movs	r6, r0
 8000354:	0020      	movs	r0, r4
 8000356:	f002 f86b 	bl	8002430 <__clzdi2>
 800035a:	1a33      	subs	r3, r6, r0
 800035c:	4698      	mov	r8, r3
 800035e:	3b20      	subs	r3, #32
 8000360:	469b      	mov	fp, r3
 8000362:	d433      	bmi.n	80003cc <__udivmoddi4+0xa0>
 8000364:	465a      	mov	r2, fp
 8000366:	4653      	mov	r3, sl
 8000368:	4093      	lsls	r3, r2
 800036a:	4642      	mov	r2, r8
 800036c:	001f      	movs	r7, r3
 800036e:	4653      	mov	r3, sl
 8000370:	4093      	lsls	r3, r2
 8000372:	001e      	movs	r6, r3
 8000374:	42af      	cmp	r7, r5
 8000376:	d83a      	bhi.n	80003ee <__udivmoddi4+0xc2>
 8000378:	42af      	cmp	r7, r5
 800037a:	d100      	bne.n	800037e <__udivmoddi4+0x52>
 800037c:	e078      	b.n	8000470 <__udivmoddi4+0x144>
 800037e:	465b      	mov	r3, fp
 8000380:	1ba4      	subs	r4, r4, r6
 8000382:	41bd      	sbcs	r5, r7
 8000384:	2b00      	cmp	r3, #0
 8000386:	da00      	bge.n	800038a <__udivmoddi4+0x5e>
 8000388:	e075      	b.n	8000476 <__udivmoddi4+0x14a>
 800038a:	2200      	movs	r2, #0
 800038c:	2300      	movs	r3, #0
 800038e:	9200      	str	r2, [sp, #0]
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	2301      	movs	r3, #1
 8000394:	465a      	mov	r2, fp
 8000396:	4093      	lsls	r3, r2
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	2301      	movs	r3, #1
 800039c:	4642      	mov	r2, r8
 800039e:	4093      	lsls	r3, r2
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	e028      	b.n	80003f6 <__udivmoddi4+0xca>
 80003a4:	4282      	cmp	r2, r0
 80003a6:	d9cf      	bls.n	8000348 <__udivmoddi4+0x1c>
 80003a8:	2200      	movs	r2, #0
 80003aa:	2300      	movs	r3, #0
 80003ac:	9200      	str	r2, [sp, #0]
 80003ae:	9301      	str	r3, [sp, #4]
 80003b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <__udivmoddi4+0x8e>
 80003b6:	601c      	str	r4, [r3, #0]
 80003b8:	605d      	str	r5, [r3, #4]
 80003ba:	9800      	ldr	r0, [sp, #0]
 80003bc:	9901      	ldr	r1, [sp, #4]
 80003be:	b003      	add	sp, #12
 80003c0:	bcf0      	pop	{r4, r5, r6, r7}
 80003c2:	46bb      	mov	fp, r7
 80003c4:	46b2      	mov	sl, r6
 80003c6:	46a9      	mov	r9, r5
 80003c8:	46a0      	mov	r8, r4
 80003ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003cc:	4642      	mov	r2, r8
 80003ce:	2320      	movs	r3, #32
 80003d0:	1a9b      	subs	r3, r3, r2
 80003d2:	4652      	mov	r2, sl
 80003d4:	40da      	lsrs	r2, r3
 80003d6:	4641      	mov	r1, r8
 80003d8:	0013      	movs	r3, r2
 80003da:	464a      	mov	r2, r9
 80003dc:	408a      	lsls	r2, r1
 80003de:	0017      	movs	r7, r2
 80003e0:	4642      	mov	r2, r8
 80003e2:	431f      	orrs	r7, r3
 80003e4:	4653      	mov	r3, sl
 80003e6:	4093      	lsls	r3, r2
 80003e8:	001e      	movs	r6, r3
 80003ea:	42af      	cmp	r7, r5
 80003ec:	d9c4      	bls.n	8000378 <__udivmoddi4+0x4c>
 80003ee:	2200      	movs	r2, #0
 80003f0:	2300      	movs	r3, #0
 80003f2:	9200      	str	r2, [sp, #0]
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	4643      	mov	r3, r8
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0d9      	beq.n	80003b0 <__udivmoddi4+0x84>
 80003fc:	07fb      	lsls	r3, r7, #31
 80003fe:	0872      	lsrs	r2, r6, #1
 8000400:	431a      	orrs	r2, r3
 8000402:	4646      	mov	r6, r8
 8000404:	087b      	lsrs	r3, r7, #1
 8000406:	e00e      	b.n	8000426 <__udivmoddi4+0xfa>
 8000408:	42ab      	cmp	r3, r5
 800040a:	d101      	bne.n	8000410 <__udivmoddi4+0xe4>
 800040c:	42a2      	cmp	r2, r4
 800040e:	d80c      	bhi.n	800042a <__udivmoddi4+0xfe>
 8000410:	1aa4      	subs	r4, r4, r2
 8000412:	419d      	sbcs	r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	1924      	adds	r4, r4, r4
 8000418:	416d      	adcs	r5, r5
 800041a:	2100      	movs	r1, #0
 800041c:	3e01      	subs	r6, #1
 800041e:	1824      	adds	r4, r4, r0
 8000420:	414d      	adcs	r5, r1
 8000422:	2e00      	cmp	r6, #0
 8000424:	d006      	beq.n	8000434 <__udivmoddi4+0x108>
 8000426:	42ab      	cmp	r3, r5
 8000428:	d9ee      	bls.n	8000408 <__udivmoddi4+0xdc>
 800042a:	3e01      	subs	r6, #1
 800042c:	1924      	adds	r4, r4, r4
 800042e:	416d      	adcs	r5, r5
 8000430:	2e00      	cmp	r6, #0
 8000432:	d1f8      	bne.n	8000426 <__udivmoddi4+0xfa>
 8000434:	9800      	ldr	r0, [sp, #0]
 8000436:	9901      	ldr	r1, [sp, #4]
 8000438:	465b      	mov	r3, fp
 800043a:	1900      	adds	r0, r0, r4
 800043c:	4169      	adcs	r1, r5
 800043e:	2b00      	cmp	r3, #0
 8000440:	db24      	blt.n	800048c <__udivmoddi4+0x160>
 8000442:	002b      	movs	r3, r5
 8000444:	465a      	mov	r2, fp
 8000446:	4644      	mov	r4, r8
 8000448:	40d3      	lsrs	r3, r2
 800044a:	002a      	movs	r2, r5
 800044c:	40e2      	lsrs	r2, r4
 800044e:	001c      	movs	r4, r3
 8000450:	465b      	mov	r3, fp
 8000452:	0015      	movs	r5, r2
 8000454:	2b00      	cmp	r3, #0
 8000456:	db2a      	blt.n	80004ae <__udivmoddi4+0x182>
 8000458:	0026      	movs	r6, r4
 800045a:	409e      	lsls	r6, r3
 800045c:	0033      	movs	r3, r6
 800045e:	0026      	movs	r6, r4
 8000460:	4647      	mov	r7, r8
 8000462:	40be      	lsls	r6, r7
 8000464:	0032      	movs	r2, r6
 8000466:	1a80      	subs	r0, r0, r2
 8000468:	4199      	sbcs	r1, r3
 800046a:	9000      	str	r0, [sp, #0]
 800046c:	9101      	str	r1, [sp, #4]
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x84>
 8000470:	42a3      	cmp	r3, r4
 8000472:	d8bc      	bhi.n	80003ee <__udivmoddi4+0xc2>
 8000474:	e783      	b.n	800037e <__udivmoddi4+0x52>
 8000476:	4642      	mov	r2, r8
 8000478:	2320      	movs	r3, #32
 800047a:	2100      	movs	r1, #0
 800047c:	1a9b      	subs	r3, r3, r2
 800047e:	2200      	movs	r2, #0
 8000480:	9100      	str	r1, [sp, #0]
 8000482:	9201      	str	r2, [sp, #4]
 8000484:	2201      	movs	r2, #1
 8000486:	40da      	lsrs	r2, r3
 8000488:	9201      	str	r2, [sp, #4]
 800048a:	e786      	b.n	800039a <__udivmoddi4+0x6e>
 800048c:	4642      	mov	r2, r8
 800048e:	2320      	movs	r3, #32
 8000490:	1a9b      	subs	r3, r3, r2
 8000492:	002a      	movs	r2, r5
 8000494:	4646      	mov	r6, r8
 8000496:	409a      	lsls	r2, r3
 8000498:	0023      	movs	r3, r4
 800049a:	40f3      	lsrs	r3, r6
 800049c:	4644      	mov	r4, r8
 800049e:	4313      	orrs	r3, r2
 80004a0:	002a      	movs	r2, r5
 80004a2:	40e2      	lsrs	r2, r4
 80004a4:	001c      	movs	r4, r3
 80004a6:	465b      	mov	r3, fp
 80004a8:	0015      	movs	r5, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	dad4      	bge.n	8000458 <__udivmoddi4+0x12c>
 80004ae:	4642      	mov	r2, r8
 80004b0:	002f      	movs	r7, r5
 80004b2:	2320      	movs	r3, #32
 80004b4:	0026      	movs	r6, r4
 80004b6:	4097      	lsls	r7, r2
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	40de      	lsrs	r6, r3
 80004bc:	003b      	movs	r3, r7
 80004be:	4333      	orrs	r3, r6
 80004c0:	e7cd      	b.n	800045e <__udivmoddi4+0x132>
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_fdiv>:
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	464f      	mov	r7, r9
 80004c8:	4646      	mov	r6, r8
 80004ca:	46d6      	mov	lr, sl
 80004cc:	0245      	lsls	r5, r0, #9
 80004ce:	b5c0      	push	{r6, r7, lr}
 80004d0:	0047      	lsls	r7, r0, #1
 80004d2:	1c0c      	adds	r4, r1, #0
 80004d4:	0a6d      	lsrs	r5, r5, #9
 80004d6:	0e3f      	lsrs	r7, r7, #24
 80004d8:	0fc6      	lsrs	r6, r0, #31
 80004da:	2f00      	cmp	r7, #0
 80004dc:	d066      	beq.n	80005ac <__aeabi_fdiv+0xe8>
 80004de:	2fff      	cmp	r7, #255	; 0xff
 80004e0:	d06c      	beq.n	80005bc <__aeabi_fdiv+0xf8>
 80004e2:	2300      	movs	r3, #0
 80004e4:	00ea      	lsls	r2, r5, #3
 80004e6:	2580      	movs	r5, #128	; 0x80
 80004e8:	4699      	mov	r9, r3
 80004ea:	469a      	mov	sl, r3
 80004ec:	04ed      	lsls	r5, r5, #19
 80004ee:	4315      	orrs	r5, r2
 80004f0:	3f7f      	subs	r7, #127	; 0x7f
 80004f2:	0260      	lsls	r0, r4, #9
 80004f4:	0061      	lsls	r1, r4, #1
 80004f6:	0a43      	lsrs	r3, r0, #9
 80004f8:	4698      	mov	r8, r3
 80004fa:	0e09      	lsrs	r1, r1, #24
 80004fc:	0fe4      	lsrs	r4, r4, #31
 80004fe:	2900      	cmp	r1, #0
 8000500:	d048      	beq.n	8000594 <__aeabi_fdiv+0xd0>
 8000502:	29ff      	cmp	r1, #255	; 0xff
 8000504:	d010      	beq.n	8000528 <__aeabi_fdiv+0x64>
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	00d8      	lsls	r0, r3, #3
 800050a:	04d2      	lsls	r2, r2, #19
 800050c:	4302      	orrs	r2, r0
 800050e:	4690      	mov	r8, r2
 8000510:	2000      	movs	r0, #0
 8000512:	397f      	subs	r1, #127	; 0x7f
 8000514:	464a      	mov	r2, r9
 8000516:	0033      	movs	r3, r6
 8000518:	1a7f      	subs	r7, r7, r1
 800051a:	4302      	orrs	r2, r0
 800051c:	496c      	ldr	r1, [pc, #432]	; (80006d0 <__aeabi_fdiv+0x20c>)
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	588a      	ldr	r2, [r1, r2]
 8000522:	4063      	eors	r3, r4
 8000524:	b2db      	uxtb	r3, r3
 8000526:	4697      	mov	pc, r2
 8000528:	2b00      	cmp	r3, #0
 800052a:	d16d      	bne.n	8000608 <__aeabi_fdiv+0x144>
 800052c:	2002      	movs	r0, #2
 800052e:	3fff      	subs	r7, #255	; 0xff
 8000530:	e033      	b.n	800059a <__aeabi_fdiv+0xd6>
 8000532:	2300      	movs	r3, #0
 8000534:	4698      	mov	r8, r3
 8000536:	0026      	movs	r6, r4
 8000538:	4645      	mov	r5, r8
 800053a:	4682      	mov	sl, r0
 800053c:	4653      	mov	r3, sl
 800053e:	2b02      	cmp	r3, #2
 8000540:	d100      	bne.n	8000544 <__aeabi_fdiv+0x80>
 8000542:	e07f      	b.n	8000644 <__aeabi_fdiv+0x180>
 8000544:	2b03      	cmp	r3, #3
 8000546:	d100      	bne.n	800054a <__aeabi_fdiv+0x86>
 8000548:	e094      	b.n	8000674 <__aeabi_fdiv+0x1b0>
 800054a:	2b01      	cmp	r3, #1
 800054c:	d017      	beq.n	800057e <__aeabi_fdiv+0xba>
 800054e:	0038      	movs	r0, r7
 8000550:	307f      	adds	r0, #127	; 0x7f
 8000552:	2800      	cmp	r0, #0
 8000554:	dd5f      	ble.n	8000616 <__aeabi_fdiv+0x152>
 8000556:	076b      	lsls	r3, r5, #29
 8000558:	d004      	beq.n	8000564 <__aeabi_fdiv+0xa0>
 800055a:	230f      	movs	r3, #15
 800055c:	402b      	ands	r3, r5
 800055e:	2b04      	cmp	r3, #4
 8000560:	d000      	beq.n	8000564 <__aeabi_fdiv+0xa0>
 8000562:	3504      	adds	r5, #4
 8000564:	012b      	lsls	r3, r5, #4
 8000566:	d503      	bpl.n	8000570 <__aeabi_fdiv+0xac>
 8000568:	0038      	movs	r0, r7
 800056a:	4b5a      	ldr	r3, [pc, #360]	; (80006d4 <__aeabi_fdiv+0x210>)
 800056c:	3080      	adds	r0, #128	; 0x80
 800056e:	401d      	ands	r5, r3
 8000570:	28fe      	cmp	r0, #254	; 0xfe
 8000572:	dc67      	bgt.n	8000644 <__aeabi_fdiv+0x180>
 8000574:	01ad      	lsls	r5, r5, #6
 8000576:	0a6d      	lsrs	r5, r5, #9
 8000578:	b2c0      	uxtb	r0, r0
 800057a:	e002      	b.n	8000582 <__aeabi_fdiv+0xbe>
 800057c:	001e      	movs	r6, r3
 800057e:	2000      	movs	r0, #0
 8000580:	2500      	movs	r5, #0
 8000582:	05c0      	lsls	r0, r0, #23
 8000584:	4328      	orrs	r0, r5
 8000586:	07f6      	lsls	r6, r6, #31
 8000588:	4330      	orrs	r0, r6
 800058a:	bce0      	pop	{r5, r6, r7}
 800058c:	46ba      	mov	sl, r7
 800058e:	46b1      	mov	r9, r6
 8000590:	46a8      	mov	r8, r5
 8000592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000594:	2b00      	cmp	r3, #0
 8000596:	d12b      	bne.n	80005f0 <__aeabi_fdiv+0x12c>
 8000598:	2001      	movs	r0, #1
 800059a:	464a      	mov	r2, r9
 800059c:	0033      	movs	r3, r6
 800059e:	494e      	ldr	r1, [pc, #312]	; (80006d8 <__aeabi_fdiv+0x214>)
 80005a0:	4302      	orrs	r2, r0
 80005a2:	0092      	lsls	r2, r2, #2
 80005a4:	588a      	ldr	r2, [r1, r2]
 80005a6:	4063      	eors	r3, r4
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4697      	mov	pc, r2
 80005ac:	2d00      	cmp	r5, #0
 80005ae:	d113      	bne.n	80005d8 <__aeabi_fdiv+0x114>
 80005b0:	2304      	movs	r3, #4
 80005b2:	4699      	mov	r9, r3
 80005b4:	3b03      	subs	r3, #3
 80005b6:	2700      	movs	r7, #0
 80005b8:	469a      	mov	sl, r3
 80005ba:	e79a      	b.n	80004f2 <__aeabi_fdiv+0x2e>
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d105      	bne.n	80005cc <__aeabi_fdiv+0x108>
 80005c0:	2308      	movs	r3, #8
 80005c2:	4699      	mov	r9, r3
 80005c4:	3b06      	subs	r3, #6
 80005c6:	27ff      	movs	r7, #255	; 0xff
 80005c8:	469a      	mov	sl, r3
 80005ca:	e792      	b.n	80004f2 <__aeabi_fdiv+0x2e>
 80005cc:	230c      	movs	r3, #12
 80005ce:	4699      	mov	r9, r3
 80005d0:	3b09      	subs	r3, #9
 80005d2:	27ff      	movs	r7, #255	; 0xff
 80005d4:	469a      	mov	sl, r3
 80005d6:	e78c      	b.n	80004f2 <__aeabi_fdiv+0x2e>
 80005d8:	0028      	movs	r0, r5
 80005da:	f001 ff0b 	bl	80023f4 <__clzsi2>
 80005de:	2776      	movs	r7, #118	; 0x76
 80005e0:	1f43      	subs	r3, r0, #5
 80005e2:	409d      	lsls	r5, r3
 80005e4:	2300      	movs	r3, #0
 80005e6:	427f      	negs	r7, r7
 80005e8:	4699      	mov	r9, r3
 80005ea:	469a      	mov	sl, r3
 80005ec:	1a3f      	subs	r7, r7, r0
 80005ee:	e780      	b.n	80004f2 <__aeabi_fdiv+0x2e>
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 feff 	bl	80023f4 <__clzsi2>
 80005f6:	4642      	mov	r2, r8
 80005f8:	1f43      	subs	r3, r0, #5
 80005fa:	2176      	movs	r1, #118	; 0x76
 80005fc:	409a      	lsls	r2, r3
 80005fe:	4249      	negs	r1, r1
 8000600:	1a09      	subs	r1, r1, r0
 8000602:	4690      	mov	r8, r2
 8000604:	2000      	movs	r0, #0
 8000606:	e785      	b.n	8000514 <__aeabi_fdiv+0x50>
 8000608:	21ff      	movs	r1, #255	; 0xff
 800060a:	2003      	movs	r0, #3
 800060c:	e782      	b.n	8000514 <__aeabi_fdiv+0x50>
 800060e:	001e      	movs	r6, r3
 8000610:	20ff      	movs	r0, #255	; 0xff
 8000612:	2500      	movs	r5, #0
 8000614:	e7b5      	b.n	8000582 <__aeabi_fdiv+0xbe>
 8000616:	2301      	movs	r3, #1
 8000618:	1a1b      	subs	r3, r3, r0
 800061a:	2b1b      	cmp	r3, #27
 800061c:	dcaf      	bgt.n	800057e <__aeabi_fdiv+0xba>
 800061e:	379e      	adds	r7, #158	; 0x9e
 8000620:	0029      	movs	r1, r5
 8000622:	40bd      	lsls	r5, r7
 8000624:	40d9      	lsrs	r1, r3
 8000626:	1e6a      	subs	r2, r5, #1
 8000628:	4195      	sbcs	r5, r2
 800062a:	430d      	orrs	r5, r1
 800062c:	076b      	lsls	r3, r5, #29
 800062e:	d004      	beq.n	800063a <__aeabi_fdiv+0x176>
 8000630:	230f      	movs	r3, #15
 8000632:	402b      	ands	r3, r5
 8000634:	2b04      	cmp	r3, #4
 8000636:	d000      	beq.n	800063a <__aeabi_fdiv+0x176>
 8000638:	3504      	adds	r5, #4
 800063a:	016b      	lsls	r3, r5, #5
 800063c:	d544      	bpl.n	80006c8 <__aeabi_fdiv+0x204>
 800063e:	2001      	movs	r0, #1
 8000640:	2500      	movs	r5, #0
 8000642:	e79e      	b.n	8000582 <__aeabi_fdiv+0xbe>
 8000644:	20ff      	movs	r0, #255	; 0xff
 8000646:	2500      	movs	r5, #0
 8000648:	e79b      	b.n	8000582 <__aeabi_fdiv+0xbe>
 800064a:	2580      	movs	r5, #128	; 0x80
 800064c:	2600      	movs	r6, #0
 800064e:	20ff      	movs	r0, #255	; 0xff
 8000650:	03ed      	lsls	r5, r5, #15
 8000652:	e796      	b.n	8000582 <__aeabi_fdiv+0xbe>
 8000654:	2300      	movs	r3, #0
 8000656:	4698      	mov	r8, r3
 8000658:	2080      	movs	r0, #128	; 0x80
 800065a:	03c0      	lsls	r0, r0, #15
 800065c:	4205      	tst	r5, r0
 800065e:	d009      	beq.n	8000674 <__aeabi_fdiv+0x1b0>
 8000660:	4643      	mov	r3, r8
 8000662:	4203      	tst	r3, r0
 8000664:	d106      	bne.n	8000674 <__aeabi_fdiv+0x1b0>
 8000666:	4645      	mov	r5, r8
 8000668:	4305      	orrs	r5, r0
 800066a:	026d      	lsls	r5, r5, #9
 800066c:	0026      	movs	r6, r4
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	0a6d      	lsrs	r5, r5, #9
 8000672:	e786      	b.n	8000582 <__aeabi_fdiv+0xbe>
 8000674:	2080      	movs	r0, #128	; 0x80
 8000676:	03c0      	lsls	r0, r0, #15
 8000678:	4305      	orrs	r5, r0
 800067a:	026d      	lsls	r5, r5, #9
 800067c:	20ff      	movs	r0, #255	; 0xff
 800067e:	0a6d      	lsrs	r5, r5, #9
 8000680:	e77f      	b.n	8000582 <__aeabi_fdiv+0xbe>
 8000682:	4641      	mov	r1, r8
 8000684:	016a      	lsls	r2, r5, #5
 8000686:	0148      	lsls	r0, r1, #5
 8000688:	4282      	cmp	r2, r0
 800068a:	d219      	bcs.n	80006c0 <__aeabi_fdiv+0x1fc>
 800068c:	211b      	movs	r1, #27
 800068e:	2500      	movs	r5, #0
 8000690:	3f01      	subs	r7, #1
 8000692:	2601      	movs	r6, #1
 8000694:	0014      	movs	r4, r2
 8000696:	006d      	lsls	r5, r5, #1
 8000698:	0052      	lsls	r2, r2, #1
 800069a:	2c00      	cmp	r4, #0
 800069c:	db01      	blt.n	80006a2 <__aeabi_fdiv+0x1de>
 800069e:	4290      	cmp	r0, r2
 80006a0:	d801      	bhi.n	80006a6 <__aeabi_fdiv+0x1e2>
 80006a2:	1a12      	subs	r2, r2, r0
 80006a4:	4335      	orrs	r5, r6
 80006a6:	3901      	subs	r1, #1
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d1f3      	bne.n	8000694 <__aeabi_fdiv+0x1d0>
 80006ac:	1e50      	subs	r0, r2, #1
 80006ae:	4182      	sbcs	r2, r0
 80006b0:	0038      	movs	r0, r7
 80006b2:	307f      	adds	r0, #127	; 0x7f
 80006b4:	001e      	movs	r6, r3
 80006b6:	4315      	orrs	r5, r2
 80006b8:	2800      	cmp	r0, #0
 80006ba:	dd00      	ble.n	80006be <__aeabi_fdiv+0x1fa>
 80006bc:	e74b      	b.n	8000556 <__aeabi_fdiv+0x92>
 80006be:	e7aa      	b.n	8000616 <__aeabi_fdiv+0x152>
 80006c0:	211a      	movs	r1, #26
 80006c2:	2501      	movs	r5, #1
 80006c4:	1a12      	subs	r2, r2, r0
 80006c6:	e7e4      	b.n	8000692 <__aeabi_fdiv+0x1ce>
 80006c8:	01ad      	lsls	r5, r5, #6
 80006ca:	2000      	movs	r0, #0
 80006cc:	0a6d      	lsrs	r5, r5, #9
 80006ce:	e758      	b.n	8000582 <__aeabi_fdiv+0xbe>
 80006d0:	08005710 	.word	0x08005710
 80006d4:	f7ffffff 	.word	0xf7ffffff
 80006d8:	08005750 	.word	0x08005750

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	46d6      	mov	lr, sl
 80006e2:	4646      	mov	r6, r8
 80006e4:	000d      	movs	r5, r1
 80006e6:	0001      	movs	r1, r0
 80006e8:	0018      	movs	r0, r3
 80006ea:	b5c0      	push	{r6, r7, lr}
 80006ec:	0017      	movs	r7, r2
 80006ee:	032b      	lsls	r3, r5, #12
 80006f0:	0a5a      	lsrs	r2, r3, #9
 80006f2:	0f4b      	lsrs	r3, r1, #29
 80006f4:	4313      	orrs	r3, r2
 80006f6:	00ca      	lsls	r2, r1, #3
 80006f8:	4691      	mov	r9, r2
 80006fa:	0302      	lsls	r2, r0, #12
 80006fc:	006e      	lsls	r6, r5, #1
 80006fe:	0041      	lsls	r1, r0, #1
 8000700:	0a52      	lsrs	r2, r2, #9
 8000702:	0fec      	lsrs	r4, r5, #31
 8000704:	0f7d      	lsrs	r5, r7, #29
 8000706:	4315      	orrs	r5, r2
 8000708:	0d76      	lsrs	r6, r6, #21
 800070a:	0d49      	lsrs	r1, r1, #21
 800070c:	0fc0      	lsrs	r0, r0, #31
 800070e:	4682      	mov	sl, r0
 8000710:	46ac      	mov	ip, r5
 8000712:	00ff      	lsls	r7, r7, #3
 8000714:	1a72      	subs	r2, r6, r1
 8000716:	4284      	cmp	r4, r0
 8000718:	d100      	bne.n	800071c <__aeabi_dadd+0x40>
 800071a:	e098      	b.n	800084e <__aeabi_dadd+0x172>
 800071c:	2a00      	cmp	r2, #0
 800071e:	dc00      	bgt.n	8000722 <__aeabi_dadd+0x46>
 8000720:	e081      	b.n	8000826 <__aeabi_dadd+0x14a>
 8000722:	2900      	cmp	r1, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x4c>
 8000726:	e0b6      	b.n	8000896 <__aeabi_dadd+0x1ba>
 8000728:	49c9      	ldr	r1, [pc, #804]	; (8000a50 <__aeabi_dadd+0x374>)
 800072a:	428e      	cmp	r6, r1
 800072c:	d100      	bne.n	8000730 <__aeabi_dadd+0x54>
 800072e:	e172      	b.n	8000a16 <__aeabi_dadd+0x33a>
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0028      	movs	r0, r5
 8000734:	0409      	lsls	r1, r1, #16
 8000736:	4308      	orrs	r0, r1
 8000738:	4684      	mov	ip, r0
 800073a:	2a38      	cmp	r2, #56	; 0x38
 800073c:	dd00      	ble.n	8000740 <__aeabi_dadd+0x64>
 800073e:	e15e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000740:	2a1f      	cmp	r2, #31
 8000742:	dd00      	ble.n	8000746 <__aeabi_dadd+0x6a>
 8000744:	e1ee      	b.n	8000b24 <__aeabi_dadd+0x448>
 8000746:	2020      	movs	r0, #32
 8000748:	0039      	movs	r1, r7
 800074a:	4665      	mov	r5, ip
 800074c:	1a80      	subs	r0, r0, r2
 800074e:	4087      	lsls	r7, r0
 8000750:	40d1      	lsrs	r1, r2
 8000752:	4085      	lsls	r5, r0
 8000754:	430d      	orrs	r5, r1
 8000756:	0039      	movs	r1, r7
 8000758:	1e4f      	subs	r7, r1, #1
 800075a:	41b9      	sbcs	r1, r7
 800075c:	4667      	mov	r7, ip
 800075e:	40d7      	lsrs	r7, r2
 8000760:	4329      	orrs	r1, r5
 8000762:	1bdb      	subs	r3, r3, r7
 8000764:	464a      	mov	r2, r9
 8000766:	1a55      	subs	r5, r2, r1
 8000768:	45a9      	cmp	r9, r5
 800076a:	4189      	sbcs	r1, r1
 800076c:	4249      	negs	r1, r1
 800076e:	1a5b      	subs	r3, r3, r1
 8000770:	4698      	mov	r8, r3
 8000772:	4643      	mov	r3, r8
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	d400      	bmi.n	800077a <__aeabi_dadd+0x9e>
 8000778:	e0cc      	b.n	8000914 <__aeabi_dadd+0x238>
 800077a:	4643      	mov	r3, r8
 800077c:	025b      	lsls	r3, r3, #9
 800077e:	0a5b      	lsrs	r3, r3, #9
 8000780:	4698      	mov	r8, r3
 8000782:	4643      	mov	r3, r8
 8000784:	2b00      	cmp	r3, #0
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0xae>
 8000788:	e12c      	b.n	80009e4 <__aeabi_dadd+0x308>
 800078a:	4640      	mov	r0, r8
 800078c:	f001 fe32 	bl	80023f4 <__clzsi2>
 8000790:	0001      	movs	r1, r0
 8000792:	3908      	subs	r1, #8
 8000794:	2220      	movs	r2, #32
 8000796:	0028      	movs	r0, r5
 8000798:	4643      	mov	r3, r8
 800079a:	1a52      	subs	r2, r2, r1
 800079c:	408b      	lsls	r3, r1
 800079e:	40d0      	lsrs	r0, r2
 80007a0:	408d      	lsls	r5, r1
 80007a2:	4303      	orrs	r3, r0
 80007a4:	428e      	cmp	r6, r1
 80007a6:	dd00      	ble.n	80007aa <__aeabi_dadd+0xce>
 80007a8:	e117      	b.n	80009da <__aeabi_dadd+0x2fe>
 80007aa:	1b8e      	subs	r6, r1, r6
 80007ac:	1c72      	adds	r2, r6, #1
 80007ae:	2a1f      	cmp	r2, #31
 80007b0:	dd00      	ble.n	80007b4 <__aeabi_dadd+0xd8>
 80007b2:	e1a7      	b.n	8000b04 <__aeabi_dadd+0x428>
 80007b4:	2120      	movs	r1, #32
 80007b6:	0018      	movs	r0, r3
 80007b8:	002e      	movs	r6, r5
 80007ba:	1a89      	subs	r1, r1, r2
 80007bc:	408d      	lsls	r5, r1
 80007be:	4088      	lsls	r0, r1
 80007c0:	40d6      	lsrs	r6, r2
 80007c2:	40d3      	lsrs	r3, r2
 80007c4:	1e69      	subs	r1, r5, #1
 80007c6:	418d      	sbcs	r5, r1
 80007c8:	4330      	orrs	r0, r6
 80007ca:	4698      	mov	r8, r3
 80007cc:	2600      	movs	r6, #0
 80007ce:	4305      	orrs	r5, r0
 80007d0:	076b      	lsls	r3, r5, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	402b      	ands	r3, r5
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d2b      	adds	r3, r5, #4
 80007de:	42ab      	cmp	r3, r5
 80007e0:	41ad      	sbcs	r5, r5
 80007e2:	426d      	negs	r5, r5
 80007e4:	44a8      	add	r8, r5
 80007e6:	001d      	movs	r5, r3
 80007e8:	4643      	mov	r3, r8
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	d400      	bmi.n	80007f0 <__aeabi_dadd+0x114>
 80007ee:	e094      	b.n	800091a <__aeabi_dadd+0x23e>
 80007f0:	4b97      	ldr	r3, [pc, #604]	; (8000a50 <__aeabi_dadd+0x374>)
 80007f2:	1c72      	adds	r2, r6, #1
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x11e>
 80007f8:	e09d      	b.n	8000936 <__aeabi_dadd+0x25a>
 80007fa:	4641      	mov	r1, r8
 80007fc:	4b95      	ldr	r3, [pc, #596]	; (8000a54 <__aeabi_dadd+0x378>)
 80007fe:	08ed      	lsrs	r5, r5, #3
 8000800:	4019      	ands	r1, r3
 8000802:	000b      	movs	r3, r1
 8000804:	0552      	lsls	r2, r2, #21
 8000806:	0749      	lsls	r1, r1, #29
 8000808:	025b      	lsls	r3, r3, #9
 800080a:	4329      	orrs	r1, r5
 800080c:	0b1b      	lsrs	r3, r3, #12
 800080e:	0d52      	lsrs	r2, r2, #21
 8000810:	0512      	lsls	r2, r2, #20
 8000812:	4313      	orrs	r3, r2
 8000814:	07e4      	lsls	r4, r4, #31
 8000816:	4323      	orrs	r3, r4
 8000818:	0008      	movs	r0, r1
 800081a:	0019      	movs	r1, r3
 800081c:	bce0      	pop	{r5, r6, r7}
 800081e:	46ba      	mov	sl, r7
 8000820:	46b1      	mov	r9, r6
 8000822:	46a8      	mov	r8, r5
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000826:	2a00      	cmp	r2, #0
 8000828:	d043      	beq.n	80008b2 <__aeabi_dadd+0x1d6>
 800082a:	1b8a      	subs	r2, r1, r6
 800082c:	2e00      	cmp	r6, #0
 800082e:	d000      	beq.n	8000832 <__aeabi_dadd+0x156>
 8000830:	e12a      	b.n	8000a88 <__aeabi_dadd+0x3ac>
 8000832:	464c      	mov	r4, r9
 8000834:	431c      	orrs	r4, r3
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x15e>
 8000838:	e1d1      	b.n	8000bde <__aeabi_dadd+0x502>
 800083a:	1e54      	subs	r4, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x166>
 8000840:	e21f      	b.n	8000c82 <__aeabi_dadd+0x5a6>
 8000842:	4d83      	ldr	r5, [pc, #524]	; (8000a50 <__aeabi_dadd+0x374>)
 8000844:	42aa      	cmp	r2, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x16e>
 8000848:	e272      	b.n	8000d30 <__aeabi_dadd+0x654>
 800084a:	0022      	movs	r2, r4
 800084c:	e123      	b.n	8000a96 <__aeabi_dadd+0x3ba>
 800084e:	2a00      	cmp	r2, #0
 8000850:	dc00      	bgt.n	8000854 <__aeabi_dadd+0x178>
 8000852:	e098      	b.n	8000986 <__aeabi_dadd+0x2aa>
 8000854:	2900      	cmp	r1, #0
 8000856:	d042      	beq.n	80008de <__aeabi_dadd+0x202>
 8000858:	497d      	ldr	r1, [pc, #500]	; (8000a50 <__aeabi_dadd+0x374>)
 800085a:	428e      	cmp	r6, r1
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x184>
 800085e:	e0da      	b.n	8000a16 <__aeabi_dadd+0x33a>
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	0028      	movs	r0, r5
 8000864:	0409      	lsls	r1, r1, #16
 8000866:	4308      	orrs	r0, r1
 8000868:	4684      	mov	ip, r0
 800086a:	2a38      	cmp	r2, #56	; 0x38
 800086c:	dd00      	ble.n	8000870 <__aeabi_dadd+0x194>
 800086e:	e129      	b.n	8000ac4 <__aeabi_dadd+0x3e8>
 8000870:	2a1f      	cmp	r2, #31
 8000872:	dc00      	bgt.n	8000876 <__aeabi_dadd+0x19a>
 8000874:	e187      	b.n	8000b86 <__aeabi_dadd+0x4aa>
 8000876:	0011      	movs	r1, r2
 8000878:	4665      	mov	r5, ip
 800087a:	3920      	subs	r1, #32
 800087c:	40cd      	lsrs	r5, r1
 800087e:	2a20      	cmp	r2, #32
 8000880:	d004      	beq.n	800088c <__aeabi_dadd+0x1b0>
 8000882:	2040      	movs	r0, #64	; 0x40
 8000884:	4661      	mov	r1, ip
 8000886:	1a82      	subs	r2, r0, r2
 8000888:	4091      	lsls	r1, r2
 800088a:	430f      	orrs	r7, r1
 800088c:	0039      	movs	r1, r7
 800088e:	1e4f      	subs	r7, r1, #1
 8000890:	41b9      	sbcs	r1, r7
 8000892:	430d      	orrs	r5, r1
 8000894:	e11b      	b.n	8000ace <__aeabi_dadd+0x3f2>
 8000896:	0029      	movs	r1, r5
 8000898:	4339      	orrs	r1, r7
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x1c2>
 800089c:	e0b5      	b.n	8000a0a <__aeabi_dadd+0x32e>
 800089e:	1e51      	subs	r1, r2, #1
 80008a0:	2a01      	cmp	r2, #1
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dadd+0x1ca>
 80008a4:	e1ab      	b.n	8000bfe <__aeabi_dadd+0x522>
 80008a6:	486a      	ldr	r0, [pc, #424]	; (8000a50 <__aeabi_dadd+0x374>)
 80008a8:	4282      	cmp	r2, r0
 80008aa:	d100      	bne.n	80008ae <__aeabi_dadd+0x1d2>
 80008ac:	e1b2      	b.n	8000c14 <__aeabi_dadd+0x538>
 80008ae:	000a      	movs	r2, r1
 80008b0:	e743      	b.n	800073a <__aeabi_dadd+0x5e>
 80008b2:	4969      	ldr	r1, [pc, #420]	; (8000a58 <__aeabi_dadd+0x37c>)
 80008b4:	1c75      	adds	r5, r6, #1
 80008b6:	420d      	tst	r5, r1
 80008b8:	d000      	beq.n	80008bc <__aeabi_dadd+0x1e0>
 80008ba:	e0cf      	b.n	8000a5c <__aeabi_dadd+0x380>
 80008bc:	2e00      	cmp	r6, #0
 80008be:	d000      	beq.n	80008c2 <__aeabi_dadd+0x1e6>
 80008c0:	e193      	b.n	8000bea <__aeabi_dadd+0x50e>
 80008c2:	4649      	mov	r1, r9
 80008c4:	4319      	orrs	r1, r3
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x1ee>
 80008c8:	e1d1      	b.n	8000c6e <__aeabi_dadd+0x592>
 80008ca:	4661      	mov	r1, ip
 80008cc:	4339      	orrs	r1, r7
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x1f6>
 80008d0:	e1e3      	b.n	8000c9a <__aeabi_dadd+0x5be>
 80008d2:	4649      	mov	r1, r9
 80008d4:	0758      	lsls	r0, r3, #29
 80008d6:	08c9      	lsrs	r1, r1, #3
 80008d8:	4301      	orrs	r1, r0
 80008da:	08db      	lsrs	r3, r3, #3
 80008dc:	e026      	b.n	800092c <__aeabi_dadd+0x250>
 80008de:	0029      	movs	r1, r5
 80008e0:	4339      	orrs	r1, r7
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x20a>
 80008e4:	e091      	b.n	8000a0a <__aeabi_dadd+0x32e>
 80008e6:	1e51      	subs	r1, r2, #1
 80008e8:	2a01      	cmp	r2, #1
 80008ea:	d005      	beq.n	80008f8 <__aeabi_dadd+0x21c>
 80008ec:	4858      	ldr	r0, [pc, #352]	; (8000a50 <__aeabi_dadd+0x374>)
 80008ee:	4282      	cmp	r2, r0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x218>
 80008f2:	e18f      	b.n	8000c14 <__aeabi_dadd+0x538>
 80008f4:	000a      	movs	r2, r1
 80008f6:	e7b8      	b.n	800086a <__aeabi_dadd+0x18e>
 80008f8:	003d      	movs	r5, r7
 80008fa:	444d      	add	r5, r9
 80008fc:	454d      	cmp	r5, r9
 80008fe:	4189      	sbcs	r1, r1
 8000900:	4463      	add	r3, ip
 8000902:	4698      	mov	r8, r3
 8000904:	4249      	negs	r1, r1
 8000906:	4488      	add	r8, r1
 8000908:	4643      	mov	r3, r8
 800090a:	2602      	movs	r6, #2
 800090c:	021b      	lsls	r3, r3, #8
 800090e:	d500      	bpl.n	8000912 <__aeabi_dadd+0x236>
 8000910:	e0eb      	b.n	8000aea <__aeabi_dadd+0x40e>
 8000912:	3e01      	subs	r6, #1
 8000914:	076b      	lsls	r3, r5, #29
 8000916:	d000      	beq.n	800091a <__aeabi_dadd+0x23e>
 8000918:	e75c      	b.n	80007d4 <__aeabi_dadd+0xf8>
 800091a:	4643      	mov	r3, r8
 800091c:	08e9      	lsrs	r1, r5, #3
 800091e:	075a      	lsls	r2, r3, #29
 8000920:	4311      	orrs	r1, r2
 8000922:	0032      	movs	r2, r6
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <__aeabi_dadd+0x374>)
 8000928:	4282      	cmp	r2, r0
 800092a:	d021      	beq.n	8000970 <__aeabi_dadd+0x294>
 800092c:	031b      	lsls	r3, r3, #12
 800092e:	0552      	lsls	r2, r2, #21
 8000930:	0b1b      	lsrs	r3, r3, #12
 8000932:	0d52      	lsrs	r2, r2, #21
 8000934:	e76c      	b.n	8000810 <__aeabi_dadd+0x134>
 8000936:	2300      	movs	r3, #0
 8000938:	2100      	movs	r1, #0
 800093a:	e769      	b.n	8000810 <__aeabi_dadd+0x134>
 800093c:	002a      	movs	r2, r5
 800093e:	433a      	orrs	r2, r7
 8000940:	d069      	beq.n	8000a16 <__aeabi_dadd+0x33a>
 8000942:	464a      	mov	r2, r9
 8000944:	0758      	lsls	r0, r3, #29
 8000946:	08d1      	lsrs	r1, r2, #3
 8000948:	08da      	lsrs	r2, r3, #3
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	031b      	lsls	r3, r3, #12
 800094e:	4308      	orrs	r0, r1
 8000950:	421a      	tst	r2, r3
 8000952:	d007      	beq.n	8000964 <__aeabi_dadd+0x288>
 8000954:	0029      	movs	r1, r5
 8000956:	08ed      	lsrs	r5, r5, #3
 8000958:	421d      	tst	r5, r3
 800095a:	d103      	bne.n	8000964 <__aeabi_dadd+0x288>
 800095c:	002a      	movs	r2, r5
 800095e:	08ff      	lsrs	r7, r7, #3
 8000960:	0748      	lsls	r0, r1, #29
 8000962:	4338      	orrs	r0, r7
 8000964:	0f43      	lsrs	r3, r0, #29
 8000966:	00c1      	lsls	r1, r0, #3
 8000968:	075b      	lsls	r3, r3, #29
 800096a:	08c9      	lsrs	r1, r1, #3
 800096c:	4319      	orrs	r1, r3
 800096e:	0013      	movs	r3, r2
 8000970:	000a      	movs	r2, r1
 8000972:	431a      	orrs	r2, r3
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x29c>
 8000976:	e213      	b.n	8000da0 <__aeabi_dadd+0x6c4>
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	0312      	lsls	r2, r2, #12
 800097c:	4313      	orrs	r3, r2
 800097e:	031b      	lsls	r3, r3, #12
 8000980:	4a33      	ldr	r2, [pc, #204]	; (8000a50 <__aeabi_dadd+0x374>)
 8000982:	0b1b      	lsrs	r3, r3, #12
 8000984:	e744      	b.n	8000810 <__aeabi_dadd+0x134>
 8000986:	2a00      	cmp	r2, #0
 8000988:	d04b      	beq.n	8000a22 <__aeabi_dadd+0x346>
 800098a:	1b8a      	subs	r2, r1, r6
 800098c:	2e00      	cmp	r6, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_dadd+0x2b6>
 8000990:	e0e7      	b.n	8000b62 <__aeabi_dadd+0x486>
 8000992:	482f      	ldr	r0, [pc, #188]	; (8000a50 <__aeabi_dadd+0x374>)
 8000994:	4281      	cmp	r1, r0
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x2be>
 8000998:	e195      	b.n	8000cc6 <__aeabi_dadd+0x5ea>
 800099a:	2080      	movs	r0, #128	; 0x80
 800099c:	0400      	lsls	r0, r0, #16
 800099e:	4303      	orrs	r3, r0
 80009a0:	2a38      	cmp	r2, #56	; 0x38
 80009a2:	dd00      	ble.n	80009a6 <__aeabi_dadd+0x2ca>
 80009a4:	e143      	b.n	8000c2e <__aeabi_dadd+0x552>
 80009a6:	2a1f      	cmp	r2, #31
 80009a8:	dd00      	ble.n	80009ac <__aeabi_dadd+0x2d0>
 80009aa:	e1db      	b.n	8000d64 <__aeabi_dadd+0x688>
 80009ac:	2020      	movs	r0, #32
 80009ae:	001d      	movs	r5, r3
 80009b0:	464e      	mov	r6, r9
 80009b2:	1a80      	subs	r0, r0, r2
 80009b4:	4085      	lsls	r5, r0
 80009b6:	40d6      	lsrs	r6, r2
 80009b8:	4335      	orrs	r5, r6
 80009ba:	464e      	mov	r6, r9
 80009bc:	4086      	lsls	r6, r0
 80009be:	0030      	movs	r0, r6
 80009c0:	40d3      	lsrs	r3, r2
 80009c2:	1e46      	subs	r6, r0, #1
 80009c4:	41b0      	sbcs	r0, r6
 80009c6:	449c      	add	ip, r3
 80009c8:	4305      	orrs	r5, r0
 80009ca:	19ed      	adds	r5, r5, r7
 80009cc:	42bd      	cmp	r5, r7
 80009ce:	419b      	sbcs	r3, r3
 80009d0:	425b      	negs	r3, r3
 80009d2:	4463      	add	r3, ip
 80009d4:	4698      	mov	r8, r3
 80009d6:	000e      	movs	r6, r1
 80009d8:	e07f      	b.n	8000ada <__aeabi_dadd+0x3fe>
 80009da:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <__aeabi_dadd+0x378>)
 80009dc:	1a76      	subs	r6, r6, r1
 80009de:	4013      	ands	r3, r2
 80009e0:	4698      	mov	r8, r3
 80009e2:	e6f5      	b.n	80007d0 <__aeabi_dadd+0xf4>
 80009e4:	0028      	movs	r0, r5
 80009e6:	f001 fd05 	bl	80023f4 <__clzsi2>
 80009ea:	0001      	movs	r1, r0
 80009ec:	3118      	adds	r1, #24
 80009ee:	291f      	cmp	r1, #31
 80009f0:	dc00      	bgt.n	80009f4 <__aeabi_dadd+0x318>
 80009f2:	e6cf      	b.n	8000794 <__aeabi_dadd+0xb8>
 80009f4:	002b      	movs	r3, r5
 80009f6:	3808      	subs	r0, #8
 80009f8:	4083      	lsls	r3, r0
 80009fa:	2500      	movs	r5, #0
 80009fc:	e6d2      	b.n	80007a4 <__aeabi_dadd+0xc8>
 80009fe:	4662      	mov	r2, ip
 8000a00:	433a      	orrs	r2, r7
 8000a02:	0011      	movs	r1, r2
 8000a04:	1e4f      	subs	r7, r1, #1
 8000a06:	41b9      	sbcs	r1, r7
 8000a08:	e6ac      	b.n	8000764 <__aeabi_dadd+0x88>
 8000a0a:	4649      	mov	r1, r9
 8000a0c:	0758      	lsls	r0, r3, #29
 8000a0e:	08c9      	lsrs	r1, r1, #3
 8000a10:	4301      	orrs	r1, r0
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	e787      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000a16:	4649      	mov	r1, r9
 8000a18:	075a      	lsls	r2, r3, #29
 8000a1a:	08c9      	lsrs	r1, r1, #3
 8000a1c:	4311      	orrs	r1, r2
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	e7a6      	b.n	8000970 <__aeabi_dadd+0x294>
 8000a22:	490d      	ldr	r1, [pc, #52]	; (8000a58 <__aeabi_dadd+0x37c>)
 8000a24:	1c70      	adds	r0, r6, #1
 8000a26:	4208      	tst	r0, r1
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e0bb      	b.n	8000ba4 <__aeabi_dadd+0x4c8>
 8000a2c:	2e00      	cmp	r6, #0
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_dadd+0x356>
 8000a30:	e114      	b.n	8000c5c <__aeabi_dadd+0x580>
 8000a32:	4649      	mov	r1, r9
 8000a34:	4319      	orrs	r1, r3
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dadd+0x35e>
 8000a38:	e175      	b.n	8000d26 <__aeabi_dadd+0x64a>
 8000a3a:	0029      	movs	r1, r5
 8000a3c:	4339      	orrs	r1, r7
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_dadd+0x366>
 8000a40:	e17e      	b.n	8000d40 <__aeabi_dadd+0x664>
 8000a42:	4649      	mov	r1, r9
 8000a44:	0758      	lsls	r0, r3, #29
 8000a46:	08c9      	lsrs	r1, r1, #3
 8000a48:	4301      	orrs	r1, r0
 8000a4a:	08db      	lsrs	r3, r3, #3
 8000a4c:	e76e      	b.n	800092c <__aeabi_dadd+0x250>
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	000007ff 	.word	0x000007ff
 8000a54:	ff7fffff 	.word	0xff7fffff
 8000a58:	000007fe 	.word	0x000007fe
 8000a5c:	4649      	mov	r1, r9
 8000a5e:	1bcd      	subs	r5, r1, r7
 8000a60:	4661      	mov	r1, ip
 8000a62:	1a58      	subs	r0, r3, r1
 8000a64:	45a9      	cmp	r9, r5
 8000a66:	4189      	sbcs	r1, r1
 8000a68:	4249      	negs	r1, r1
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	0001      	movs	r1, r0
 8000a6e:	4640      	mov	r0, r8
 8000a70:	1a09      	subs	r1, r1, r0
 8000a72:	4688      	mov	r8, r1
 8000a74:	0209      	lsls	r1, r1, #8
 8000a76:	d500      	bpl.n	8000a7a <__aeabi_dadd+0x39e>
 8000a78:	e0a6      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000a7a:	4641      	mov	r1, r8
 8000a7c:	4329      	orrs	r1, r5
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dadd+0x3a6>
 8000a80:	e67f      	b.n	8000782 <__aeabi_dadd+0xa6>
 8000a82:	2300      	movs	r3, #0
 8000a84:	2400      	movs	r4, #0
 8000a86:	e751      	b.n	800092c <__aeabi_dadd+0x250>
 8000a88:	4cc7      	ldr	r4, [pc, #796]	; (8000da8 <__aeabi_dadd+0x6cc>)
 8000a8a:	42a1      	cmp	r1, r4
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x3b4>
 8000a8e:	e0c7      	b.n	8000c20 <__aeabi_dadd+0x544>
 8000a90:	2480      	movs	r4, #128	; 0x80
 8000a92:	0424      	lsls	r4, r4, #16
 8000a94:	4323      	orrs	r3, r4
 8000a96:	2a38      	cmp	r2, #56	; 0x38
 8000a98:	dc54      	bgt.n	8000b44 <__aeabi_dadd+0x468>
 8000a9a:	2a1f      	cmp	r2, #31
 8000a9c:	dd00      	ble.n	8000aa0 <__aeabi_dadd+0x3c4>
 8000a9e:	e0cc      	b.n	8000c3a <__aeabi_dadd+0x55e>
 8000aa0:	2420      	movs	r4, #32
 8000aa2:	4648      	mov	r0, r9
 8000aa4:	1aa4      	subs	r4, r4, r2
 8000aa6:	001d      	movs	r5, r3
 8000aa8:	464e      	mov	r6, r9
 8000aaa:	40a0      	lsls	r0, r4
 8000aac:	40d6      	lsrs	r6, r2
 8000aae:	40a5      	lsls	r5, r4
 8000ab0:	0004      	movs	r4, r0
 8000ab2:	40d3      	lsrs	r3, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	4335      	orrs	r5, r6
 8000ab8:	1e66      	subs	r6, r4, #1
 8000aba:	41b4      	sbcs	r4, r6
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	469c      	mov	ip, r3
 8000ac0:	4325      	orrs	r5, r4
 8000ac2:	e044      	b.n	8000b4e <__aeabi_dadd+0x472>
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	433a      	orrs	r2, r7
 8000ac8:	0015      	movs	r5, r2
 8000aca:	1e6f      	subs	r7, r5, #1
 8000acc:	41bd      	sbcs	r5, r7
 8000ace:	444d      	add	r5, r9
 8000ad0:	454d      	cmp	r5, r9
 8000ad2:	4189      	sbcs	r1, r1
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	4688      	mov	r8, r1
 8000ad8:	4498      	add	r8, r3
 8000ada:	4643      	mov	r3, r8
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	d400      	bmi.n	8000ae2 <__aeabi_dadd+0x406>
 8000ae0:	e718      	b.n	8000914 <__aeabi_dadd+0x238>
 8000ae2:	4bb1      	ldr	r3, [pc, #708]	; (8000da8 <__aeabi_dadd+0x6cc>)
 8000ae4:	3601      	adds	r6, #1
 8000ae6:	429e      	cmp	r6, r3
 8000ae8:	d049      	beq.n	8000b7e <__aeabi_dadd+0x4a2>
 8000aea:	4642      	mov	r2, r8
 8000aec:	4baf      	ldr	r3, [pc, #700]	; (8000dac <__aeabi_dadd+0x6d0>)
 8000aee:	2101      	movs	r1, #1
 8000af0:	401a      	ands	r2, r3
 8000af2:	0013      	movs	r3, r2
 8000af4:	086a      	lsrs	r2, r5, #1
 8000af6:	400d      	ands	r5, r1
 8000af8:	4315      	orrs	r5, r2
 8000afa:	07d9      	lsls	r1, r3, #31
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4698      	mov	r8, r3
 8000b00:	430d      	orrs	r5, r1
 8000b02:	e665      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000b04:	0018      	movs	r0, r3
 8000b06:	3e1f      	subs	r6, #31
 8000b08:	40f0      	lsrs	r0, r6
 8000b0a:	2a20      	cmp	r2, #32
 8000b0c:	d003      	beq.n	8000b16 <__aeabi_dadd+0x43a>
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	1a8a      	subs	r2, r1, r2
 8000b12:	4093      	lsls	r3, r2
 8000b14:	431d      	orrs	r5, r3
 8000b16:	1e69      	subs	r1, r5, #1
 8000b18:	418d      	sbcs	r5, r1
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	4698      	mov	r8, r3
 8000b20:	4305      	orrs	r5, r0
 8000b22:	e6f7      	b.n	8000914 <__aeabi_dadd+0x238>
 8000b24:	0011      	movs	r1, r2
 8000b26:	4665      	mov	r5, ip
 8000b28:	3920      	subs	r1, #32
 8000b2a:	40cd      	lsrs	r5, r1
 8000b2c:	2a20      	cmp	r2, #32
 8000b2e:	d004      	beq.n	8000b3a <__aeabi_dadd+0x45e>
 8000b30:	2040      	movs	r0, #64	; 0x40
 8000b32:	4661      	mov	r1, ip
 8000b34:	1a82      	subs	r2, r0, r2
 8000b36:	4091      	lsls	r1, r2
 8000b38:	430f      	orrs	r7, r1
 8000b3a:	0039      	movs	r1, r7
 8000b3c:	1e4f      	subs	r7, r1, #1
 8000b3e:	41b9      	sbcs	r1, r7
 8000b40:	4329      	orrs	r1, r5
 8000b42:	e60f      	b.n	8000764 <__aeabi_dadd+0x88>
 8000b44:	464a      	mov	r2, r9
 8000b46:	4313      	orrs	r3, r2
 8000b48:	001d      	movs	r5, r3
 8000b4a:	1e6b      	subs	r3, r5, #1
 8000b4c:	419d      	sbcs	r5, r3
 8000b4e:	1b7d      	subs	r5, r7, r5
 8000b50:	42af      	cmp	r7, r5
 8000b52:	419b      	sbcs	r3, r3
 8000b54:	4662      	mov	r2, ip
 8000b56:	425b      	negs	r3, r3
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	4654      	mov	r4, sl
 8000b5e:	000e      	movs	r6, r1
 8000b60:	e607      	b.n	8000772 <__aeabi_dadd+0x96>
 8000b62:	4648      	mov	r0, r9
 8000b64:	4318      	orrs	r0, r3
 8000b66:	d100      	bne.n	8000b6a <__aeabi_dadd+0x48e>
 8000b68:	e0b3      	b.n	8000cd2 <__aeabi_dadd+0x5f6>
 8000b6a:	1e50      	subs	r0, r2, #1
 8000b6c:	2a01      	cmp	r2, #1
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x496>
 8000b70:	e10d      	b.n	8000d8e <__aeabi_dadd+0x6b2>
 8000b72:	4d8d      	ldr	r5, [pc, #564]	; (8000da8 <__aeabi_dadd+0x6cc>)
 8000b74:	42aa      	cmp	r2, r5
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dadd+0x49e>
 8000b78:	e0a5      	b.n	8000cc6 <__aeabi_dadd+0x5ea>
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	e710      	b.n	80009a0 <__aeabi_dadd+0x2c4>
 8000b7e:	0032      	movs	r2, r6
 8000b80:	2300      	movs	r3, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	e644      	b.n	8000810 <__aeabi_dadd+0x134>
 8000b86:	2120      	movs	r1, #32
 8000b88:	0038      	movs	r0, r7
 8000b8a:	1a89      	subs	r1, r1, r2
 8000b8c:	4665      	mov	r5, ip
 8000b8e:	408f      	lsls	r7, r1
 8000b90:	408d      	lsls	r5, r1
 8000b92:	40d0      	lsrs	r0, r2
 8000b94:	1e79      	subs	r1, r7, #1
 8000b96:	418f      	sbcs	r7, r1
 8000b98:	4305      	orrs	r5, r0
 8000b9a:	433d      	orrs	r5, r7
 8000b9c:	4667      	mov	r7, ip
 8000b9e:	40d7      	lsrs	r7, r2
 8000ba0:	19db      	adds	r3, r3, r7
 8000ba2:	e794      	b.n	8000ace <__aeabi_dadd+0x3f2>
 8000ba4:	4a80      	ldr	r2, [pc, #512]	; (8000da8 <__aeabi_dadd+0x6cc>)
 8000ba6:	4290      	cmp	r0, r2
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x4d0>
 8000baa:	e0ec      	b.n	8000d86 <__aeabi_dadd+0x6aa>
 8000bac:	0039      	movs	r1, r7
 8000bae:	4449      	add	r1, r9
 8000bb0:	4549      	cmp	r1, r9
 8000bb2:	4192      	sbcs	r2, r2
 8000bb4:	4463      	add	r3, ip
 8000bb6:	4252      	negs	r2, r2
 8000bb8:	189b      	adds	r3, r3, r2
 8000bba:	07dd      	lsls	r5, r3, #31
 8000bbc:	0849      	lsrs	r1, r1, #1
 8000bbe:	085b      	lsrs	r3, r3, #1
 8000bc0:	4698      	mov	r8, r3
 8000bc2:	0006      	movs	r6, r0
 8000bc4:	430d      	orrs	r5, r1
 8000bc6:	e6a5      	b.n	8000914 <__aeabi_dadd+0x238>
 8000bc8:	464a      	mov	r2, r9
 8000bca:	1abd      	subs	r5, r7, r2
 8000bcc:	42af      	cmp	r7, r5
 8000bce:	4189      	sbcs	r1, r1
 8000bd0:	4662      	mov	r2, ip
 8000bd2:	4249      	negs	r1, r1
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	1a5b      	subs	r3, r3, r1
 8000bd8:	4698      	mov	r8, r3
 8000bda:	4654      	mov	r4, sl
 8000bdc:	e5d1      	b.n	8000782 <__aeabi_dadd+0xa6>
 8000bde:	076c      	lsls	r4, r5, #29
 8000be0:	08f9      	lsrs	r1, r7, #3
 8000be2:	4321      	orrs	r1, r4
 8000be4:	08eb      	lsrs	r3, r5, #3
 8000be6:	0004      	movs	r4, r0
 8000be8:	e69d      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000bea:	464a      	mov	r2, r9
 8000bec:	431a      	orrs	r2, r3
 8000bee:	d175      	bne.n	8000cdc <__aeabi_dadd+0x600>
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	4339      	orrs	r1, r7
 8000bf4:	d114      	bne.n	8000c20 <__aeabi_dadd+0x544>
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	031b      	lsls	r3, r3, #12
 8000bfc:	e6bc      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bfe:	464a      	mov	r2, r9
 8000c00:	1bd5      	subs	r5, r2, r7
 8000c02:	45a9      	cmp	r9, r5
 8000c04:	4189      	sbcs	r1, r1
 8000c06:	4662      	mov	r2, ip
 8000c08:	4249      	negs	r1, r1
 8000c0a:	1a9b      	subs	r3, r3, r2
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	4698      	mov	r8, r3
 8000c10:	2601      	movs	r6, #1
 8000c12:	e5ae      	b.n	8000772 <__aeabi_dadd+0x96>
 8000c14:	464a      	mov	r2, r9
 8000c16:	08d1      	lsrs	r1, r2, #3
 8000c18:	075a      	lsls	r2, r3, #29
 8000c1a:	4311      	orrs	r1, r2
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	e6a7      	b.n	8000970 <__aeabi_dadd+0x294>
 8000c20:	4663      	mov	r3, ip
 8000c22:	08f9      	lsrs	r1, r7, #3
 8000c24:	075a      	lsls	r2, r3, #29
 8000c26:	4654      	mov	r4, sl
 8000c28:	4311      	orrs	r1, r2
 8000c2a:	08db      	lsrs	r3, r3, #3
 8000c2c:	e6a0      	b.n	8000970 <__aeabi_dadd+0x294>
 8000c2e:	464a      	mov	r2, r9
 8000c30:	4313      	orrs	r3, r2
 8000c32:	001d      	movs	r5, r3
 8000c34:	1e6b      	subs	r3, r5, #1
 8000c36:	419d      	sbcs	r5, r3
 8000c38:	e6c7      	b.n	80009ca <__aeabi_dadd+0x2ee>
 8000c3a:	0014      	movs	r4, r2
 8000c3c:	001e      	movs	r6, r3
 8000c3e:	3c20      	subs	r4, #32
 8000c40:	40e6      	lsrs	r6, r4
 8000c42:	2a20      	cmp	r2, #32
 8000c44:	d005      	beq.n	8000c52 <__aeabi_dadd+0x576>
 8000c46:	2440      	movs	r4, #64	; 0x40
 8000c48:	1aa2      	subs	r2, r4, r2
 8000c4a:	4093      	lsls	r3, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	4691      	mov	r9, r2
 8000c52:	464d      	mov	r5, r9
 8000c54:	1e6b      	subs	r3, r5, #1
 8000c56:	419d      	sbcs	r5, r3
 8000c58:	4335      	orrs	r5, r6
 8000c5a:	e778      	b.n	8000b4e <__aeabi_dadd+0x472>
 8000c5c:	464a      	mov	r2, r9
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	d000      	beq.n	8000c64 <__aeabi_dadd+0x588>
 8000c62:	e66b      	b.n	800093c <__aeabi_dadd+0x260>
 8000c64:	076b      	lsls	r3, r5, #29
 8000c66:	08f9      	lsrs	r1, r7, #3
 8000c68:	4319      	orrs	r1, r3
 8000c6a:	08eb      	lsrs	r3, r5, #3
 8000c6c:	e680      	b.n	8000970 <__aeabi_dadd+0x294>
 8000c6e:	4661      	mov	r1, ip
 8000c70:	4339      	orrs	r1, r7
 8000c72:	d054      	beq.n	8000d1e <__aeabi_dadd+0x642>
 8000c74:	4663      	mov	r3, ip
 8000c76:	08f9      	lsrs	r1, r7, #3
 8000c78:	075c      	lsls	r4, r3, #29
 8000c7a:	4321      	orrs	r1, r4
 8000c7c:	08db      	lsrs	r3, r3, #3
 8000c7e:	0004      	movs	r4, r0
 8000c80:	e654      	b.n	800092c <__aeabi_dadd+0x250>
 8000c82:	464a      	mov	r2, r9
 8000c84:	1abd      	subs	r5, r7, r2
 8000c86:	42af      	cmp	r7, r5
 8000c88:	4189      	sbcs	r1, r1
 8000c8a:	4662      	mov	r2, ip
 8000c8c:	4249      	negs	r1, r1
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	4698      	mov	r8, r3
 8000c94:	0004      	movs	r4, r0
 8000c96:	2601      	movs	r6, #1
 8000c98:	e56b      	b.n	8000772 <__aeabi_dadd+0x96>
 8000c9a:	464a      	mov	r2, r9
 8000c9c:	1bd5      	subs	r5, r2, r7
 8000c9e:	45a9      	cmp	r9, r5
 8000ca0:	4189      	sbcs	r1, r1
 8000ca2:	4662      	mov	r2, ip
 8000ca4:	4249      	negs	r1, r1
 8000ca6:	1a9a      	subs	r2, r3, r2
 8000ca8:	1a52      	subs	r2, r2, r1
 8000caa:	4690      	mov	r8, r2
 8000cac:	0212      	lsls	r2, r2, #8
 8000cae:	d532      	bpl.n	8000d16 <__aeabi_dadd+0x63a>
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	1abd      	subs	r5, r7, r2
 8000cb4:	42af      	cmp	r7, r5
 8000cb6:	4189      	sbcs	r1, r1
 8000cb8:	4662      	mov	r2, ip
 8000cba:	4249      	negs	r1, r1
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	1a5b      	subs	r3, r3, r1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	0004      	movs	r4, r0
 8000cc4:	e584      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000cc6:	4663      	mov	r3, ip
 8000cc8:	08f9      	lsrs	r1, r7, #3
 8000cca:	075a      	lsls	r2, r3, #29
 8000ccc:	4311      	orrs	r1, r2
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	e64e      	b.n	8000970 <__aeabi_dadd+0x294>
 8000cd2:	08f9      	lsrs	r1, r7, #3
 8000cd4:	0768      	lsls	r0, r5, #29
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	08eb      	lsrs	r3, r5, #3
 8000cda:	e624      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000cdc:	4662      	mov	r2, ip
 8000cde:	433a      	orrs	r2, r7
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x608>
 8000ce2:	e698      	b.n	8000a16 <__aeabi_dadd+0x33a>
 8000ce4:	464a      	mov	r2, r9
 8000ce6:	08d1      	lsrs	r1, r2, #3
 8000ce8:	075a      	lsls	r2, r3, #29
 8000cea:	4311      	orrs	r1, r2
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	031b      	lsls	r3, r3, #12
 8000cf2:	421a      	tst	r2, r3
 8000cf4:	d008      	beq.n	8000d08 <__aeabi_dadd+0x62c>
 8000cf6:	4660      	mov	r0, ip
 8000cf8:	08c5      	lsrs	r5, r0, #3
 8000cfa:	421d      	tst	r5, r3
 8000cfc:	d104      	bne.n	8000d08 <__aeabi_dadd+0x62c>
 8000cfe:	4654      	mov	r4, sl
 8000d00:	002a      	movs	r2, r5
 8000d02:	08f9      	lsrs	r1, r7, #3
 8000d04:	0743      	lsls	r3, r0, #29
 8000d06:	4319      	orrs	r1, r3
 8000d08:	0f4b      	lsrs	r3, r1, #29
 8000d0a:	00c9      	lsls	r1, r1, #3
 8000d0c:	075b      	lsls	r3, r3, #29
 8000d0e:	08c9      	lsrs	r1, r1, #3
 8000d10:	4319      	orrs	r1, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	e62c      	b.n	8000970 <__aeabi_dadd+0x294>
 8000d16:	4641      	mov	r1, r8
 8000d18:	4329      	orrs	r1, r5
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x642>
 8000d1c:	e5fa      	b.n	8000914 <__aeabi_dadd+0x238>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	000a      	movs	r2, r1
 8000d22:	2400      	movs	r4, #0
 8000d24:	e602      	b.n	800092c <__aeabi_dadd+0x250>
 8000d26:	076b      	lsls	r3, r5, #29
 8000d28:	08f9      	lsrs	r1, r7, #3
 8000d2a:	4319      	orrs	r1, r3
 8000d2c:	08eb      	lsrs	r3, r5, #3
 8000d2e:	e5fd      	b.n	800092c <__aeabi_dadd+0x250>
 8000d30:	4663      	mov	r3, ip
 8000d32:	08f9      	lsrs	r1, r7, #3
 8000d34:	075b      	lsls	r3, r3, #29
 8000d36:	4319      	orrs	r1, r3
 8000d38:	4663      	mov	r3, ip
 8000d3a:	0004      	movs	r4, r0
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	e617      	b.n	8000970 <__aeabi_dadd+0x294>
 8000d40:	003d      	movs	r5, r7
 8000d42:	444d      	add	r5, r9
 8000d44:	4463      	add	r3, ip
 8000d46:	454d      	cmp	r5, r9
 8000d48:	4189      	sbcs	r1, r1
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	4249      	negs	r1, r1
 8000d4e:	4488      	add	r8, r1
 8000d50:	4643      	mov	r3, r8
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	d400      	bmi.n	8000d58 <__aeabi_dadd+0x67c>
 8000d56:	e5dd      	b.n	8000914 <__aeabi_dadd+0x238>
 8000d58:	4642      	mov	r2, r8
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <__aeabi_dadd+0x6d0>)
 8000d5c:	2601      	movs	r6, #1
 8000d5e:	401a      	ands	r2, r3
 8000d60:	4690      	mov	r8, r2
 8000d62:	e5d7      	b.n	8000914 <__aeabi_dadd+0x238>
 8000d64:	0010      	movs	r0, r2
 8000d66:	001e      	movs	r6, r3
 8000d68:	3820      	subs	r0, #32
 8000d6a:	40c6      	lsrs	r6, r0
 8000d6c:	2a20      	cmp	r2, #32
 8000d6e:	d005      	beq.n	8000d7c <__aeabi_dadd+0x6a0>
 8000d70:	2040      	movs	r0, #64	; 0x40
 8000d72:	1a82      	subs	r2, r0, r2
 8000d74:	4093      	lsls	r3, r2
 8000d76:	464a      	mov	r2, r9
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	4691      	mov	r9, r2
 8000d7c:	464d      	mov	r5, r9
 8000d7e:	1e6b      	subs	r3, r5, #1
 8000d80:	419d      	sbcs	r5, r3
 8000d82:	4335      	orrs	r5, r6
 8000d84:	e621      	b.n	80009ca <__aeabi_dadd+0x2ee>
 8000d86:	0002      	movs	r2, r0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e540      	b.n	8000810 <__aeabi_dadd+0x134>
 8000d8e:	464a      	mov	r2, r9
 8000d90:	19d5      	adds	r5, r2, r7
 8000d92:	42bd      	cmp	r5, r7
 8000d94:	4189      	sbcs	r1, r1
 8000d96:	4463      	add	r3, ip
 8000d98:	4698      	mov	r8, r3
 8000d9a:	4249      	negs	r1, r1
 8000d9c:	4488      	add	r8, r1
 8000d9e:	e5b3      	b.n	8000908 <__aeabi_dadd+0x22c>
 8000da0:	2100      	movs	r1, #0
 8000da2:	4a01      	ldr	r2, [pc, #4]	; (8000da8 <__aeabi_dadd+0x6cc>)
 8000da4:	000b      	movs	r3, r1
 8000da6:	e533      	b.n	8000810 <__aeabi_dadd+0x134>
 8000da8:	000007ff 	.word	0x000007ff
 8000dac:	ff7fffff 	.word	0xff7fffff

08000db0 <__aeabi_ddiv>:
 8000db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db2:	4657      	mov	r7, sl
 8000db4:	464e      	mov	r6, r9
 8000db6:	4645      	mov	r5, r8
 8000db8:	46de      	mov	lr, fp
 8000dba:	b5e0      	push	{r5, r6, r7, lr}
 8000dbc:	4681      	mov	r9, r0
 8000dbe:	0005      	movs	r5, r0
 8000dc0:	030c      	lsls	r4, r1, #12
 8000dc2:	0048      	lsls	r0, r1, #1
 8000dc4:	4692      	mov	sl, r2
 8000dc6:	001f      	movs	r7, r3
 8000dc8:	b085      	sub	sp, #20
 8000dca:	0b24      	lsrs	r4, r4, #12
 8000dcc:	0d40      	lsrs	r0, r0, #21
 8000dce:	0fce      	lsrs	r6, r1, #31
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	d059      	beq.n	8000e88 <__aeabi_ddiv+0xd8>
 8000dd4:	4b87      	ldr	r3, [pc, #540]	; (8000ff4 <__aeabi_ddiv+0x244>)
 8000dd6:	4298      	cmp	r0, r3
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_ddiv+0x2c>
 8000dda:	e098      	b.n	8000f0e <__aeabi_ddiv+0x15e>
 8000ddc:	0f6b      	lsrs	r3, r5, #29
 8000dde:	00e4      	lsls	r4, r4, #3
 8000de0:	431c      	orrs	r4, r3
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	041b      	lsls	r3, r3, #16
 8000de6:	4323      	orrs	r3, r4
 8000de8:	4698      	mov	r8, r3
 8000dea:	4b83      	ldr	r3, [pc, #524]	; (8000ff8 <__aeabi_ddiv+0x248>)
 8000dec:	00ed      	lsls	r5, r5, #3
 8000dee:	469b      	mov	fp, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	4699      	mov	r9, r3
 8000df4:	4483      	add	fp, r0
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	033c      	lsls	r4, r7, #12
 8000dfa:	007b      	lsls	r3, r7, #1
 8000dfc:	4650      	mov	r0, sl
 8000dfe:	0b24      	lsrs	r4, r4, #12
 8000e00:	0d5b      	lsrs	r3, r3, #21
 8000e02:	0fff      	lsrs	r7, r7, #31
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d067      	beq.n	8000ed8 <__aeabi_ddiv+0x128>
 8000e08:	4a7a      	ldr	r2, [pc, #488]	; (8000ff4 <__aeabi_ddiv+0x244>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d018      	beq.n	8000e40 <__aeabi_ddiv+0x90>
 8000e0e:	497a      	ldr	r1, [pc, #488]	; (8000ff8 <__aeabi_ddiv+0x248>)
 8000e10:	0f42      	lsrs	r2, r0, #29
 8000e12:	468c      	mov	ip, r1
 8000e14:	00e4      	lsls	r4, r4, #3
 8000e16:	4659      	mov	r1, fp
 8000e18:	4314      	orrs	r4, r2
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	4463      	add	r3, ip
 8000e1e:	0412      	lsls	r2, r2, #16
 8000e20:	1acb      	subs	r3, r1, r3
 8000e22:	4314      	orrs	r4, r2
 8000e24:	469b      	mov	fp, r3
 8000e26:	00c2      	lsls	r2, r0, #3
 8000e28:	2000      	movs	r0, #0
 8000e2a:	0033      	movs	r3, r6
 8000e2c:	407b      	eors	r3, r7
 8000e2e:	469a      	mov	sl, r3
 8000e30:	464b      	mov	r3, r9
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	d900      	bls.n	8000e38 <__aeabi_ddiv+0x88>
 8000e36:	e0ef      	b.n	8001018 <__aeabi_ddiv+0x268>
 8000e38:	4970      	ldr	r1, [pc, #448]	; (8000ffc <__aeabi_ddiv+0x24c>)
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	58cb      	ldr	r3, [r1, r3]
 8000e3e:	469f      	mov	pc, r3
 8000e40:	4b6f      	ldr	r3, [pc, #444]	; (8001000 <__aeabi_ddiv+0x250>)
 8000e42:	4652      	mov	r2, sl
 8000e44:	469c      	mov	ip, r3
 8000e46:	4322      	orrs	r2, r4
 8000e48:	44e3      	add	fp, ip
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_ddiv+0xa0>
 8000e4e:	e095      	b.n	8000f7c <__aeabi_ddiv+0x1cc>
 8000e50:	4649      	mov	r1, r9
 8000e52:	2302      	movs	r3, #2
 8000e54:	4319      	orrs	r1, r3
 8000e56:	4689      	mov	r9, r1
 8000e58:	2400      	movs	r4, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	e7e5      	b.n	8000e2a <__aeabi_ddiv+0x7a>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2400      	movs	r4, #0
 8000e62:	2500      	movs	r5, #0
 8000e64:	4652      	mov	r2, sl
 8000e66:	051b      	lsls	r3, r3, #20
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	07d2      	lsls	r2, r2, #31
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	0028      	movs	r0, r5
 8000e70:	0019      	movs	r1, r3
 8000e72:	b005      	add	sp, #20
 8000e74:	bcf0      	pop	{r4, r5, r6, r7}
 8000e76:	46bb      	mov	fp, r7
 8000e78:	46b2      	mov	sl, r6
 8000e7a:	46a9      	mov	r9, r5
 8000e7c:	46a0      	mov	r8, r4
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	2400      	movs	r4, #0
 8000e82:	2500      	movs	r5, #0
 8000e84:	4b5b      	ldr	r3, [pc, #364]	; (8000ff4 <__aeabi_ddiv+0x244>)
 8000e86:	e7ed      	b.n	8000e64 <__aeabi_ddiv+0xb4>
 8000e88:	464b      	mov	r3, r9
 8000e8a:	4323      	orrs	r3, r4
 8000e8c:	4698      	mov	r8, r3
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_ddiv+0xe2>
 8000e90:	e089      	b.n	8000fa6 <__aeabi_ddiv+0x1f6>
 8000e92:	2c00      	cmp	r4, #0
 8000e94:	d100      	bne.n	8000e98 <__aeabi_ddiv+0xe8>
 8000e96:	e1e0      	b.n	800125a <__aeabi_ddiv+0x4aa>
 8000e98:	0020      	movs	r0, r4
 8000e9a:	f001 faab 	bl	80023f4 <__clzsi2>
 8000e9e:	0001      	movs	r1, r0
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	390b      	subs	r1, #11
 8000ea4:	231d      	movs	r3, #29
 8000ea6:	1a5b      	subs	r3, r3, r1
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	0010      	movs	r0, r2
 8000eac:	40d9      	lsrs	r1, r3
 8000eae:	3808      	subs	r0, #8
 8000eb0:	4084      	lsls	r4, r0
 8000eb2:	000b      	movs	r3, r1
 8000eb4:	464d      	mov	r5, r9
 8000eb6:	4323      	orrs	r3, r4
 8000eb8:	4698      	mov	r8, r3
 8000eba:	4085      	lsls	r5, r0
 8000ebc:	4851      	ldr	r0, [pc, #324]	; (8001004 <__aeabi_ddiv+0x254>)
 8000ebe:	033c      	lsls	r4, r7, #12
 8000ec0:	1a83      	subs	r3, r0, r2
 8000ec2:	469b      	mov	fp, r3
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	4699      	mov	r9, r3
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	007b      	lsls	r3, r7, #1
 8000ecc:	4650      	mov	r0, sl
 8000ece:	0b24      	lsrs	r4, r4, #12
 8000ed0:	0d5b      	lsrs	r3, r3, #21
 8000ed2:	0fff      	lsrs	r7, r7, #31
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d197      	bne.n	8000e08 <__aeabi_ddiv+0x58>
 8000ed8:	4652      	mov	r2, sl
 8000eda:	4322      	orrs	r2, r4
 8000edc:	d055      	beq.n	8000f8a <__aeabi_ddiv+0x1da>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_ddiv+0x134>
 8000ee2:	e1ca      	b.n	800127a <__aeabi_ddiv+0x4ca>
 8000ee4:	0020      	movs	r0, r4
 8000ee6:	f001 fa85 	bl	80023f4 <__clzsi2>
 8000eea:	0002      	movs	r2, r0
 8000eec:	3a0b      	subs	r2, #11
 8000eee:	231d      	movs	r3, #29
 8000ef0:	0001      	movs	r1, r0
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	4652      	mov	r2, sl
 8000ef6:	3908      	subs	r1, #8
 8000ef8:	40da      	lsrs	r2, r3
 8000efa:	408c      	lsls	r4, r1
 8000efc:	4314      	orrs	r4, r2
 8000efe:	4652      	mov	r2, sl
 8000f00:	408a      	lsls	r2, r1
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <__aeabi_ddiv+0x258>)
 8000f04:	4458      	add	r0, fp
 8000f06:	469b      	mov	fp, r3
 8000f08:	4483      	add	fp, r0
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	e78d      	b.n	8000e2a <__aeabi_ddiv+0x7a>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	4323      	orrs	r3, r4
 8000f12:	4698      	mov	r8, r3
 8000f14:	d140      	bne.n	8000f98 <__aeabi_ddiv+0x1e8>
 8000f16:	2308      	movs	r3, #8
 8000f18:	4699      	mov	r9, r3
 8000f1a:	3b06      	subs	r3, #6
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	4683      	mov	fp, r0
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	e769      	b.n	8000df8 <__aeabi_ddiv+0x48>
 8000f24:	46b2      	mov	sl, r6
 8000f26:	9b00      	ldr	r3, [sp, #0]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d0a9      	beq.n	8000e80 <__aeabi_ddiv+0xd0>
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_ddiv+0x182>
 8000f30:	e211      	b.n	8001356 <__aeabi_ddiv+0x5a6>
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d093      	beq.n	8000e5e <__aeabi_ddiv+0xae>
 8000f36:	4a35      	ldr	r2, [pc, #212]	; (800100c <__aeabi_ddiv+0x25c>)
 8000f38:	445a      	add	r2, fp
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	dc00      	bgt.n	8000f40 <__aeabi_ddiv+0x190>
 8000f3e:	e13c      	b.n	80011ba <__aeabi_ddiv+0x40a>
 8000f40:	076b      	lsls	r3, r5, #29
 8000f42:	d000      	beq.n	8000f46 <__aeabi_ddiv+0x196>
 8000f44:	e1a7      	b.n	8001296 <__aeabi_ddiv+0x4e6>
 8000f46:	08ed      	lsrs	r5, r5, #3
 8000f48:	4643      	mov	r3, r8
 8000f4a:	01db      	lsls	r3, r3, #7
 8000f4c:	d506      	bpl.n	8000f5c <__aeabi_ddiv+0x1ac>
 8000f4e:	4642      	mov	r2, r8
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <__aeabi_ddiv+0x260>)
 8000f52:	401a      	ands	r2, r3
 8000f54:	4690      	mov	r8, r2
 8000f56:	2280      	movs	r2, #128	; 0x80
 8000f58:	00d2      	lsls	r2, r2, #3
 8000f5a:	445a      	add	r2, fp
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <__aeabi_ddiv+0x264>)
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dc8e      	bgt.n	8000e80 <__aeabi_ddiv+0xd0>
 8000f62:	4643      	mov	r3, r8
 8000f64:	0552      	lsls	r2, r2, #21
 8000f66:	0758      	lsls	r0, r3, #29
 8000f68:	025c      	lsls	r4, r3, #9
 8000f6a:	4305      	orrs	r5, r0
 8000f6c:	0b24      	lsrs	r4, r4, #12
 8000f6e:	0d53      	lsrs	r3, r2, #21
 8000f70:	e778      	b.n	8000e64 <__aeabi_ddiv+0xb4>
 8000f72:	46ba      	mov	sl, r7
 8000f74:	46a0      	mov	r8, r4
 8000f76:	0015      	movs	r5, r2
 8000f78:	9000      	str	r0, [sp, #0]
 8000f7a:	e7d4      	b.n	8000f26 <__aeabi_ddiv+0x176>
 8000f7c:	464a      	mov	r2, r9
 8000f7e:	2303      	movs	r3, #3
 8000f80:	431a      	orrs	r2, r3
 8000f82:	4691      	mov	r9, r2
 8000f84:	2003      	movs	r0, #3
 8000f86:	4652      	mov	r2, sl
 8000f88:	e74f      	b.n	8000e2a <__aeabi_ddiv+0x7a>
 8000f8a:	4649      	mov	r1, r9
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	4319      	orrs	r1, r3
 8000f90:	4689      	mov	r9, r1
 8000f92:	2400      	movs	r4, #0
 8000f94:	2001      	movs	r0, #1
 8000f96:	e748      	b.n	8000e2a <__aeabi_ddiv+0x7a>
 8000f98:	230c      	movs	r3, #12
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	3b09      	subs	r3, #9
 8000f9e:	46a0      	mov	r8, r4
 8000fa0:	4683      	mov	fp, r0
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	e728      	b.n	8000df8 <__aeabi_ddiv+0x48>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	4699      	mov	r9, r3
 8000faa:	2300      	movs	r3, #0
 8000fac:	469b      	mov	fp, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	e720      	b.n	8000df8 <__aeabi_ddiv+0x48>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	2480      	movs	r4, #128	; 0x80
 8000fba:	469a      	mov	sl, r3
 8000fbc:	2500      	movs	r5, #0
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <__aeabi_ddiv+0x244>)
 8000fc0:	0324      	lsls	r4, r4, #12
 8000fc2:	e74f      	b.n	8000e64 <__aeabi_ddiv+0xb4>
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	4641      	mov	r1, r8
 8000fc8:	031b      	lsls	r3, r3, #12
 8000fca:	4219      	tst	r1, r3
 8000fcc:	d008      	beq.n	8000fe0 <__aeabi_ddiv+0x230>
 8000fce:	421c      	tst	r4, r3
 8000fd0:	d106      	bne.n	8000fe0 <__aeabi_ddiv+0x230>
 8000fd2:	431c      	orrs	r4, r3
 8000fd4:	0324      	lsls	r4, r4, #12
 8000fd6:	46ba      	mov	sl, r7
 8000fd8:	0015      	movs	r5, r2
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <__aeabi_ddiv+0x244>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e741      	b.n	8000e64 <__aeabi_ddiv+0xb4>
 8000fe0:	2480      	movs	r4, #128	; 0x80
 8000fe2:	4643      	mov	r3, r8
 8000fe4:	0324      	lsls	r4, r4, #12
 8000fe6:	431c      	orrs	r4, r3
 8000fe8:	0324      	lsls	r4, r4, #12
 8000fea:	46b2      	mov	sl, r6
 8000fec:	4b01      	ldr	r3, [pc, #4]	; (8000ff4 <__aeabi_ddiv+0x244>)
 8000fee:	0b24      	lsrs	r4, r4, #12
 8000ff0:	e738      	b.n	8000e64 <__aeabi_ddiv+0xb4>
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	000007ff 	.word	0x000007ff
 8000ff8:	fffffc01 	.word	0xfffffc01
 8000ffc:	08005790 	.word	0x08005790
 8001000:	fffff801 	.word	0xfffff801
 8001004:	fffffc0d 	.word	0xfffffc0d
 8001008:	000003f3 	.word	0x000003f3
 800100c:	000003ff 	.word	0x000003ff
 8001010:	feffffff 	.word	0xfeffffff
 8001014:	000007fe 	.word	0x000007fe
 8001018:	4544      	cmp	r4, r8
 800101a:	d200      	bcs.n	800101e <__aeabi_ddiv+0x26e>
 800101c:	e116      	b.n	800124c <__aeabi_ddiv+0x49c>
 800101e:	d100      	bne.n	8001022 <__aeabi_ddiv+0x272>
 8001020:	e111      	b.n	8001246 <__aeabi_ddiv+0x496>
 8001022:	2301      	movs	r3, #1
 8001024:	425b      	negs	r3, r3
 8001026:	469c      	mov	ip, r3
 8001028:	002e      	movs	r6, r5
 800102a:	4640      	mov	r0, r8
 800102c:	2500      	movs	r5, #0
 800102e:	44e3      	add	fp, ip
 8001030:	0223      	lsls	r3, r4, #8
 8001032:	0e14      	lsrs	r4, r2, #24
 8001034:	431c      	orrs	r4, r3
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	4699      	mov	r9, r3
 800103a:	0423      	lsls	r3, r4, #16
 800103c:	0c1f      	lsrs	r7, r3, #16
 800103e:	0212      	lsls	r2, r2, #8
 8001040:	4649      	mov	r1, r9
 8001042:	9200      	str	r2, [sp, #0]
 8001044:	9701      	str	r7, [sp, #4]
 8001046:	f7ff f8e5 	bl	8000214 <__aeabi_uidivmod>
 800104a:	0002      	movs	r2, r0
 800104c:	437a      	muls	r2, r7
 800104e:	040b      	lsls	r3, r1, #16
 8001050:	0c31      	lsrs	r1, r6, #16
 8001052:	4680      	mov	r8, r0
 8001054:	4319      	orrs	r1, r3
 8001056:	428a      	cmp	r2, r1
 8001058:	d90b      	bls.n	8001072 <__aeabi_ddiv+0x2c2>
 800105a:	2301      	movs	r3, #1
 800105c:	425b      	negs	r3, r3
 800105e:	469c      	mov	ip, r3
 8001060:	1909      	adds	r1, r1, r4
 8001062:	44e0      	add	r8, ip
 8001064:	428c      	cmp	r4, r1
 8001066:	d804      	bhi.n	8001072 <__aeabi_ddiv+0x2c2>
 8001068:	428a      	cmp	r2, r1
 800106a:	d902      	bls.n	8001072 <__aeabi_ddiv+0x2c2>
 800106c:	1e83      	subs	r3, r0, #2
 800106e:	4698      	mov	r8, r3
 8001070:	1909      	adds	r1, r1, r4
 8001072:	1a88      	subs	r0, r1, r2
 8001074:	4649      	mov	r1, r9
 8001076:	f7ff f8cd 	bl	8000214 <__aeabi_uidivmod>
 800107a:	0409      	lsls	r1, r1, #16
 800107c:	468c      	mov	ip, r1
 800107e:	0431      	lsls	r1, r6, #16
 8001080:	4666      	mov	r6, ip
 8001082:	9a01      	ldr	r2, [sp, #4]
 8001084:	0c09      	lsrs	r1, r1, #16
 8001086:	4342      	muls	r2, r0
 8001088:	0003      	movs	r3, r0
 800108a:	4331      	orrs	r1, r6
 800108c:	428a      	cmp	r2, r1
 800108e:	d904      	bls.n	800109a <__aeabi_ddiv+0x2ea>
 8001090:	1909      	adds	r1, r1, r4
 8001092:	3b01      	subs	r3, #1
 8001094:	428c      	cmp	r4, r1
 8001096:	d800      	bhi.n	800109a <__aeabi_ddiv+0x2ea>
 8001098:	e111      	b.n	80012be <__aeabi_ddiv+0x50e>
 800109a:	1a89      	subs	r1, r1, r2
 800109c:	4642      	mov	r2, r8
 800109e:	9e00      	ldr	r6, [sp, #0]
 80010a0:	0412      	lsls	r2, r2, #16
 80010a2:	431a      	orrs	r2, r3
 80010a4:	0c33      	lsrs	r3, r6, #16
 80010a6:	001f      	movs	r7, r3
 80010a8:	0c10      	lsrs	r0, r2, #16
 80010aa:	4690      	mov	r8, r2
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	0413      	lsls	r3, r2, #16
 80010b0:	0432      	lsls	r2, r6, #16
 80010b2:	0c16      	lsrs	r6, r2, #16
 80010b4:	0032      	movs	r2, r6
 80010b6:	0c1b      	lsrs	r3, r3, #16
 80010b8:	435a      	muls	r2, r3
 80010ba:	9603      	str	r6, [sp, #12]
 80010bc:	437b      	muls	r3, r7
 80010be:	4346      	muls	r6, r0
 80010c0:	4378      	muls	r0, r7
 80010c2:	0c17      	lsrs	r7, r2, #16
 80010c4:	46bc      	mov	ip, r7
 80010c6:	199b      	adds	r3, r3, r6
 80010c8:	4463      	add	r3, ip
 80010ca:	429e      	cmp	r6, r3
 80010cc:	d903      	bls.n	80010d6 <__aeabi_ddiv+0x326>
 80010ce:	2680      	movs	r6, #128	; 0x80
 80010d0:	0276      	lsls	r6, r6, #9
 80010d2:	46b4      	mov	ip, r6
 80010d4:	4460      	add	r0, ip
 80010d6:	0c1e      	lsrs	r6, r3, #16
 80010d8:	1830      	adds	r0, r6, r0
 80010da:	0416      	lsls	r6, r2, #16
 80010dc:	041b      	lsls	r3, r3, #16
 80010de:	0c36      	lsrs	r6, r6, #16
 80010e0:	199e      	adds	r6, r3, r6
 80010e2:	4281      	cmp	r1, r0
 80010e4:	d200      	bcs.n	80010e8 <__aeabi_ddiv+0x338>
 80010e6:	e09c      	b.n	8001222 <__aeabi_ddiv+0x472>
 80010e8:	d100      	bne.n	80010ec <__aeabi_ddiv+0x33c>
 80010ea:	e097      	b.n	800121c <__aeabi_ddiv+0x46c>
 80010ec:	1bae      	subs	r6, r5, r6
 80010ee:	1a09      	subs	r1, r1, r0
 80010f0:	42b5      	cmp	r5, r6
 80010f2:	4180      	sbcs	r0, r0
 80010f4:	4240      	negs	r0, r0
 80010f6:	1a08      	subs	r0, r1, r0
 80010f8:	4284      	cmp	r4, r0
 80010fa:	d100      	bne.n	80010fe <__aeabi_ddiv+0x34e>
 80010fc:	e111      	b.n	8001322 <__aeabi_ddiv+0x572>
 80010fe:	4649      	mov	r1, r9
 8001100:	f7ff f888 	bl	8000214 <__aeabi_uidivmod>
 8001104:	9a01      	ldr	r2, [sp, #4]
 8001106:	040b      	lsls	r3, r1, #16
 8001108:	4342      	muls	r2, r0
 800110a:	0c31      	lsrs	r1, r6, #16
 800110c:	0005      	movs	r5, r0
 800110e:	4319      	orrs	r1, r3
 8001110:	428a      	cmp	r2, r1
 8001112:	d907      	bls.n	8001124 <__aeabi_ddiv+0x374>
 8001114:	1909      	adds	r1, r1, r4
 8001116:	3d01      	subs	r5, #1
 8001118:	428c      	cmp	r4, r1
 800111a:	d803      	bhi.n	8001124 <__aeabi_ddiv+0x374>
 800111c:	428a      	cmp	r2, r1
 800111e:	d901      	bls.n	8001124 <__aeabi_ddiv+0x374>
 8001120:	1e85      	subs	r5, r0, #2
 8001122:	1909      	adds	r1, r1, r4
 8001124:	1a88      	subs	r0, r1, r2
 8001126:	4649      	mov	r1, r9
 8001128:	f7ff f874 	bl	8000214 <__aeabi_uidivmod>
 800112c:	0409      	lsls	r1, r1, #16
 800112e:	468c      	mov	ip, r1
 8001130:	0431      	lsls	r1, r6, #16
 8001132:	4666      	mov	r6, ip
 8001134:	9a01      	ldr	r2, [sp, #4]
 8001136:	0c09      	lsrs	r1, r1, #16
 8001138:	4342      	muls	r2, r0
 800113a:	0003      	movs	r3, r0
 800113c:	4331      	orrs	r1, r6
 800113e:	428a      	cmp	r2, r1
 8001140:	d907      	bls.n	8001152 <__aeabi_ddiv+0x3a2>
 8001142:	1909      	adds	r1, r1, r4
 8001144:	3b01      	subs	r3, #1
 8001146:	428c      	cmp	r4, r1
 8001148:	d803      	bhi.n	8001152 <__aeabi_ddiv+0x3a2>
 800114a:	428a      	cmp	r2, r1
 800114c:	d901      	bls.n	8001152 <__aeabi_ddiv+0x3a2>
 800114e:	1e83      	subs	r3, r0, #2
 8001150:	1909      	adds	r1, r1, r4
 8001152:	9e03      	ldr	r6, [sp, #12]
 8001154:	1a89      	subs	r1, r1, r2
 8001156:	0032      	movs	r2, r6
 8001158:	042d      	lsls	r5, r5, #16
 800115a:	431d      	orrs	r5, r3
 800115c:	9f02      	ldr	r7, [sp, #8]
 800115e:	042b      	lsls	r3, r5, #16
 8001160:	0c1b      	lsrs	r3, r3, #16
 8001162:	435a      	muls	r2, r3
 8001164:	437b      	muls	r3, r7
 8001166:	469c      	mov	ip, r3
 8001168:	0c28      	lsrs	r0, r5, #16
 800116a:	4346      	muls	r6, r0
 800116c:	0c13      	lsrs	r3, r2, #16
 800116e:	44b4      	add	ip, r6
 8001170:	4463      	add	r3, ip
 8001172:	4378      	muls	r0, r7
 8001174:	429e      	cmp	r6, r3
 8001176:	d903      	bls.n	8001180 <__aeabi_ddiv+0x3d0>
 8001178:	2680      	movs	r6, #128	; 0x80
 800117a:	0276      	lsls	r6, r6, #9
 800117c:	46b4      	mov	ip, r6
 800117e:	4460      	add	r0, ip
 8001180:	0c1e      	lsrs	r6, r3, #16
 8001182:	0412      	lsls	r2, r2, #16
 8001184:	041b      	lsls	r3, r3, #16
 8001186:	0c12      	lsrs	r2, r2, #16
 8001188:	1830      	adds	r0, r6, r0
 800118a:	189b      	adds	r3, r3, r2
 800118c:	4281      	cmp	r1, r0
 800118e:	d306      	bcc.n	800119e <__aeabi_ddiv+0x3ee>
 8001190:	d002      	beq.n	8001198 <__aeabi_ddiv+0x3e8>
 8001192:	2301      	movs	r3, #1
 8001194:	431d      	orrs	r5, r3
 8001196:	e6ce      	b.n	8000f36 <__aeabi_ddiv+0x186>
 8001198:	2b00      	cmp	r3, #0
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x3ee>
 800119c:	e6cb      	b.n	8000f36 <__aeabi_ddiv+0x186>
 800119e:	1861      	adds	r1, r4, r1
 80011a0:	1e6e      	subs	r6, r5, #1
 80011a2:	42a1      	cmp	r1, r4
 80011a4:	d200      	bcs.n	80011a8 <__aeabi_ddiv+0x3f8>
 80011a6:	e0a4      	b.n	80012f2 <__aeabi_ddiv+0x542>
 80011a8:	4281      	cmp	r1, r0
 80011aa:	d200      	bcs.n	80011ae <__aeabi_ddiv+0x3fe>
 80011ac:	e0c9      	b.n	8001342 <__aeabi_ddiv+0x592>
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0x402>
 80011b0:	e0d9      	b.n	8001366 <__aeabi_ddiv+0x5b6>
 80011b2:	0035      	movs	r5, r6
 80011b4:	e7ed      	b.n	8001192 <__aeabi_ddiv+0x3e2>
 80011b6:	2501      	movs	r5, #1
 80011b8:	426d      	negs	r5, r5
 80011ba:	2101      	movs	r1, #1
 80011bc:	1a89      	subs	r1, r1, r2
 80011be:	2938      	cmp	r1, #56	; 0x38
 80011c0:	dd00      	ble.n	80011c4 <__aeabi_ddiv+0x414>
 80011c2:	e64c      	b.n	8000e5e <__aeabi_ddiv+0xae>
 80011c4:	291f      	cmp	r1, #31
 80011c6:	dc00      	bgt.n	80011ca <__aeabi_ddiv+0x41a>
 80011c8:	e07f      	b.n	80012ca <__aeabi_ddiv+0x51a>
 80011ca:	231f      	movs	r3, #31
 80011cc:	425b      	negs	r3, r3
 80011ce:	1a9a      	subs	r2, r3, r2
 80011d0:	4643      	mov	r3, r8
 80011d2:	40d3      	lsrs	r3, r2
 80011d4:	2920      	cmp	r1, #32
 80011d6:	d004      	beq.n	80011e2 <__aeabi_ddiv+0x432>
 80011d8:	4644      	mov	r4, r8
 80011da:	4a65      	ldr	r2, [pc, #404]	; (8001370 <__aeabi_ddiv+0x5c0>)
 80011dc:	445a      	add	r2, fp
 80011de:	4094      	lsls	r4, r2
 80011e0:	4325      	orrs	r5, r4
 80011e2:	1e6a      	subs	r2, r5, #1
 80011e4:	4195      	sbcs	r5, r2
 80011e6:	2207      	movs	r2, #7
 80011e8:	432b      	orrs	r3, r5
 80011ea:	0015      	movs	r5, r2
 80011ec:	2400      	movs	r4, #0
 80011ee:	401d      	ands	r5, r3
 80011f0:	421a      	tst	r2, r3
 80011f2:	d100      	bne.n	80011f6 <__aeabi_ddiv+0x446>
 80011f4:	e0a1      	b.n	800133a <__aeabi_ddiv+0x58a>
 80011f6:	220f      	movs	r2, #15
 80011f8:	2400      	movs	r4, #0
 80011fa:	401a      	ands	r2, r3
 80011fc:	2a04      	cmp	r2, #4
 80011fe:	d100      	bne.n	8001202 <__aeabi_ddiv+0x452>
 8001200:	e098      	b.n	8001334 <__aeabi_ddiv+0x584>
 8001202:	1d1a      	adds	r2, r3, #4
 8001204:	429a      	cmp	r2, r3
 8001206:	419b      	sbcs	r3, r3
 8001208:	425b      	negs	r3, r3
 800120a:	18e4      	adds	r4, r4, r3
 800120c:	0013      	movs	r3, r2
 800120e:	0222      	lsls	r2, r4, #8
 8001210:	d400      	bmi.n	8001214 <__aeabi_ddiv+0x464>
 8001212:	e08f      	b.n	8001334 <__aeabi_ddiv+0x584>
 8001214:	2301      	movs	r3, #1
 8001216:	2400      	movs	r4, #0
 8001218:	2500      	movs	r5, #0
 800121a:	e623      	b.n	8000e64 <__aeabi_ddiv+0xb4>
 800121c:	42b5      	cmp	r5, r6
 800121e:	d300      	bcc.n	8001222 <__aeabi_ddiv+0x472>
 8001220:	e764      	b.n	80010ec <__aeabi_ddiv+0x33c>
 8001222:	4643      	mov	r3, r8
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	9b00      	ldr	r3, [sp, #0]
 8001228:	469c      	mov	ip, r3
 800122a:	4465      	add	r5, ip
 800122c:	001f      	movs	r7, r3
 800122e:	429d      	cmp	r5, r3
 8001230:	419b      	sbcs	r3, r3
 8001232:	425b      	negs	r3, r3
 8001234:	191b      	adds	r3, r3, r4
 8001236:	18c9      	adds	r1, r1, r3
 8001238:	428c      	cmp	r4, r1
 800123a:	d23a      	bcs.n	80012b2 <__aeabi_ddiv+0x502>
 800123c:	4288      	cmp	r0, r1
 800123e:	d863      	bhi.n	8001308 <__aeabi_ddiv+0x558>
 8001240:	d060      	beq.n	8001304 <__aeabi_ddiv+0x554>
 8001242:	4690      	mov	r8, r2
 8001244:	e752      	b.n	80010ec <__aeabi_ddiv+0x33c>
 8001246:	42aa      	cmp	r2, r5
 8001248:	d900      	bls.n	800124c <__aeabi_ddiv+0x49c>
 800124a:	e6ea      	b.n	8001022 <__aeabi_ddiv+0x272>
 800124c:	4643      	mov	r3, r8
 800124e:	07de      	lsls	r6, r3, #31
 8001250:	0858      	lsrs	r0, r3, #1
 8001252:	086b      	lsrs	r3, r5, #1
 8001254:	431e      	orrs	r6, r3
 8001256:	07ed      	lsls	r5, r5, #31
 8001258:	e6ea      	b.n	8001030 <__aeabi_ddiv+0x280>
 800125a:	4648      	mov	r0, r9
 800125c:	f001 f8ca 	bl	80023f4 <__clzsi2>
 8001260:	0001      	movs	r1, r0
 8001262:	0002      	movs	r2, r0
 8001264:	3115      	adds	r1, #21
 8001266:	3220      	adds	r2, #32
 8001268:	291c      	cmp	r1, #28
 800126a:	dc00      	bgt.n	800126e <__aeabi_ddiv+0x4be>
 800126c:	e61a      	b.n	8000ea4 <__aeabi_ddiv+0xf4>
 800126e:	464b      	mov	r3, r9
 8001270:	3808      	subs	r0, #8
 8001272:	4083      	lsls	r3, r0
 8001274:	2500      	movs	r5, #0
 8001276:	4698      	mov	r8, r3
 8001278:	e620      	b.n	8000ebc <__aeabi_ddiv+0x10c>
 800127a:	f001 f8bb 	bl	80023f4 <__clzsi2>
 800127e:	0003      	movs	r3, r0
 8001280:	001a      	movs	r2, r3
 8001282:	3215      	adds	r2, #21
 8001284:	3020      	adds	r0, #32
 8001286:	2a1c      	cmp	r2, #28
 8001288:	dc00      	bgt.n	800128c <__aeabi_ddiv+0x4dc>
 800128a:	e630      	b.n	8000eee <__aeabi_ddiv+0x13e>
 800128c:	4654      	mov	r4, sl
 800128e:	3b08      	subs	r3, #8
 8001290:	2200      	movs	r2, #0
 8001292:	409c      	lsls	r4, r3
 8001294:	e635      	b.n	8000f02 <__aeabi_ddiv+0x152>
 8001296:	230f      	movs	r3, #15
 8001298:	402b      	ands	r3, r5
 800129a:	2b04      	cmp	r3, #4
 800129c:	d100      	bne.n	80012a0 <__aeabi_ddiv+0x4f0>
 800129e:	e652      	b.n	8000f46 <__aeabi_ddiv+0x196>
 80012a0:	2305      	movs	r3, #5
 80012a2:	425b      	negs	r3, r3
 80012a4:	42ab      	cmp	r3, r5
 80012a6:	419b      	sbcs	r3, r3
 80012a8:	3504      	adds	r5, #4
 80012aa:	425b      	negs	r3, r3
 80012ac:	08ed      	lsrs	r5, r5, #3
 80012ae:	4498      	add	r8, r3
 80012b0:	e64a      	b.n	8000f48 <__aeabi_ddiv+0x198>
 80012b2:	428c      	cmp	r4, r1
 80012b4:	d1c5      	bne.n	8001242 <__aeabi_ddiv+0x492>
 80012b6:	42af      	cmp	r7, r5
 80012b8:	d9c0      	bls.n	800123c <__aeabi_ddiv+0x48c>
 80012ba:	4690      	mov	r8, r2
 80012bc:	e716      	b.n	80010ec <__aeabi_ddiv+0x33c>
 80012be:	428a      	cmp	r2, r1
 80012c0:	d800      	bhi.n	80012c4 <__aeabi_ddiv+0x514>
 80012c2:	e6ea      	b.n	800109a <__aeabi_ddiv+0x2ea>
 80012c4:	1e83      	subs	r3, r0, #2
 80012c6:	1909      	adds	r1, r1, r4
 80012c8:	e6e7      	b.n	800109a <__aeabi_ddiv+0x2ea>
 80012ca:	4a2a      	ldr	r2, [pc, #168]	; (8001374 <__aeabi_ddiv+0x5c4>)
 80012cc:	0028      	movs	r0, r5
 80012ce:	445a      	add	r2, fp
 80012d0:	4643      	mov	r3, r8
 80012d2:	4095      	lsls	r5, r2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	40c8      	lsrs	r0, r1
 80012d8:	1e6a      	subs	r2, r5, #1
 80012da:	4195      	sbcs	r5, r2
 80012dc:	4644      	mov	r4, r8
 80012de:	4303      	orrs	r3, r0
 80012e0:	432b      	orrs	r3, r5
 80012e2:	40cc      	lsrs	r4, r1
 80012e4:	075a      	lsls	r2, r3, #29
 80012e6:	d092      	beq.n	800120e <__aeabi_ddiv+0x45e>
 80012e8:	220f      	movs	r2, #15
 80012ea:	401a      	ands	r2, r3
 80012ec:	2a04      	cmp	r2, #4
 80012ee:	d188      	bne.n	8001202 <__aeabi_ddiv+0x452>
 80012f0:	e78d      	b.n	800120e <__aeabi_ddiv+0x45e>
 80012f2:	0035      	movs	r5, r6
 80012f4:	4281      	cmp	r1, r0
 80012f6:	d000      	beq.n	80012fa <__aeabi_ddiv+0x54a>
 80012f8:	e74b      	b.n	8001192 <__aeabi_ddiv+0x3e2>
 80012fa:	9a00      	ldr	r2, [sp, #0]
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d000      	beq.n	8001302 <__aeabi_ddiv+0x552>
 8001300:	e747      	b.n	8001192 <__aeabi_ddiv+0x3e2>
 8001302:	e618      	b.n	8000f36 <__aeabi_ddiv+0x186>
 8001304:	42ae      	cmp	r6, r5
 8001306:	d99c      	bls.n	8001242 <__aeabi_ddiv+0x492>
 8001308:	2302      	movs	r3, #2
 800130a:	425b      	negs	r3, r3
 800130c:	469c      	mov	ip, r3
 800130e:	9b00      	ldr	r3, [sp, #0]
 8001310:	44e0      	add	r8, ip
 8001312:	469c      	mov	ip, r3
 8001314:	4465      	add	r5, ip
 8001316:	429d      	cmp	r5, r3
 8001318:	419b      	sbcs	r3, r3
 800131a:	425b      	negs	r3, r3
 800131c:	191b      	adds	r3, r3, r4
 800131e:	18c9      	adds	r1, r1, r3
 8001320:	e6e4      	b.n	80010ec <__aeabi_ddiv+0x33c>
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <__aeabi_ddiv+0x5c8>)
 8001324:	445a      	add	r2, fp
 8001326:	2a00      	cmp	r2, #0
 8001328:	dc00      	bgt.n	800132c <__aeabi_ddiv+0x57c>
 800132a:	e744      	b.n	80011b6 <__aeabi_ddiv+0x406>
 800132c:	2301      	movs	r3, #1
 800132e:	2500      	movs	r5, #0
 8001330:	4498      	add	r8, r3
 8001332:	e609      	b.n	8000f48 <__aeabi_ddiv+0x198>
 8001334:	0765      	lsls	r5, r4, #29
 8001336:	0264      	lsls	r4, r4, #9
 8001338:	0b24      	lsrs	r4, r4, #12
 800133a:	08db      	lsrs	r3, r3, #3
 800133c:	431d      	orrs	r5, r3
 800133e:	2300      	movs	r3, #0
 8001340:	e590      	b.n	8000e64 <__aeabi_ddiv+0xb4>
 8001342:	9e00      	ldr	r6, [sp, #0]
 8001344:	3d02      	subs	r5, #2
 8001346:	0072      	lsls	r2, r6, #1
 8001348:	42b2      	cmp	r2, r6
 800134a:	41bf      	sbcs	r7, r7
 800134c:	427f      	negs	r7, r7
 800134e:	193c      	adds	r4, r7, r4
 8001350:	1909      	adds	r1, r1, r4
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	e7ce      	b.n	80012f4 <__aeabi_ddiv+0x544>
 8001356:	2480      	movs	r4, #128	; 0x80
 8001358:	4643      	mov	r3, r8
 800135a:	0324      	lsls	r4, r4, #12
 800135c:	431c      	orrs	r4, r3
 800135e:	0324      	lsls	r4, r4, #12
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <__aeabi_ddiv+0x5cc>)
 8001362:	0b24      	lsrs	r4, r4, #12
 8001364:	e57e      	b.n	8000e64 <__aeabi_ddiv+0xb4>
 8001366:	9a00      	ldr	r2, [sp, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3ea      	bcc.n	8001342 <__aeabi_ddiv+0x592>
 800136c:	0035      	movs	r5, r6
 800136e:	e7c4      	b.n	80012fa <__aeabi_ddiv+0x54a>
 8001370:	0000043e 	.word	0x0000043e
 8001374:	0000041e 	.word	0x0000041e
 8001378:	000003ff 	.word	0x000003ff
 800137c:	000007ff 	.word	0x000007ff

08001380 <__eqdf2>:
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	464f      	mov	r7, r9
 8001384:	4646      	mov	r6, r8
 8001386:	46d6      	mov	lr, sl
 8001388:	4694      	mov	ip, r2
 800138a:	4691      	mov	r9, r2
 800138c:	031a      	lsls	r2, r3, #12
 800138e:	0b12      	lsrs	r2, r2, #12
 8001390:	4d18      	ldr	r5, [pc, #96]	; (80013f4 <__eqdf2+0x74>)
 8001392:	b5c0      	push	{r6, r7, lr}
 8001394:	004c      	lsls	r4, r1, #1
 8001396:	030f      	lsls	r7, r1, #12
 8001398:	4692      	mov	sl, r2
 800139a:	005a      	lsls	r2, r3, #1
 800139c:	0006      	movs	r6, r0
 800139e:	4680      	mov	r8, r0
 80013a0:	0b3f      	lsrs	r7, r7, #12
 80013a2:	2001      	movs	r0, #1
 80013a4:	0d64      	lsrs	r4, r4, #21
 80013a6:	0fc9      	lsrs	r1, r1, #31
 80013a8:	0d52      	lsrs	r2, r2, #21
 80013aa:	0fdb      	lsrs	r3, r3, #31
 80013ac:	42ac      	cmp	r4, r5
 80013ae:	d00a      	beq.n	80013c6 <__eqdf2+0x46>
 80013b0:	42aa      	cmp	r2, r5
 80013b2:	d003      	beq.n	80013bc <__eqdf2+0x3c>
 80013b4:	4294      	cmp	r4, r2
 80013b6:	d101      	bne.n	80013bc <__eqdf2+0x3c>
 80013b8:	4557      	cmp	r7, sl
 80013ba:	d00d      	beq.n	80013d8 <__eqdf2+0x58>
 80013bc:	bce0      	pop	{r5, r6, r7}
 80013be:	46ba      	mov	sl, r7
 80013c0:	46b1      	mov	r9, r6
 80013c2:	46a8      	mov	r8, r5
 80013c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c6:	003d      	movs	r5, r7
 80013c8:	4335      	orrs	r5, r6
 80013ca:	d1f7      	bne.n	80013bc <__eqdf2+0x3c>
 80013cc:	42a2      	cmp	r2, r4
 80013ce:	d1f5      	bne.n	80013bc <__eqdf2+0x3c>
 80013d0:	4652      	mov	r2, sl
 80013d2:	4665      	mov	r5, ip
 80013d4:	432a      	orrs	r2, r5
 80013d6:	d1f1      	bne.n	80013bc <__eqdf2+0x3c>
 80013d8:	2001      	movs	r0, #1
 80013da:	45c8      	cmp	r8, r9
 80013dc:	d1ee      	bne.n	80013bc <__eqdf2+0x3c>
 80013de:	4299      	cmp	r1, r3
 80013e0:	d006      	beq.n	80013f0 <__eqdf2+0x70>
 80013e2:	2c00      	cmp	r4, #0
 80013e4:	d1ea      	bne.n	80013bc <__eqdf2+0x3c>
 80013e6:	433e      	orrs	r6, r7
 80013e8:	0030      	movs	r0, r6
 80013ea:	1e46      	subs	r6, r0, #1
 80013ec:	41b0      	sbcs	r0, r6
 80013ee:	e7e5      	b.n	80013bc <__eqdf2+0x3c>
 80013f0:	2000      	movs	r0, #0
 80013f2:	e7e3      	b.n	80013bc <__eqdf2+0x3c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__gedf2>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	4657      	mov	r7, sl
 8001400:	46de      	mov	lr, fp
 8001402:	0004      	movs	r4, r0
 8001404:	0018      	movs	r0, r3
 8001406:	b5e0      	push	{r5, r6, r7, lr}
 8001408:	0016      	movs	r6, r2
 800140a:	031b      	lsls	r3, r3, #12
 800140c:	0b1b      	lsrs	r3, r3, #12
 800140e:	4d32      	ldr	r5, [pc, #200]	; (80014d8 <__gedf2+0xe0>)
 8001410:	030f      	lsls	r7, r1, #12
 8001412:	004a      	lsls	r2, r1, #1
 8001414:	4699      	mov	r9, r3
 8001416:	0043      	lsls	r3, r0, #1
 8001418:	46a4      	mov	ip, r4
 800141a:	46b0      	mov	r8, r6
 800141c:	0b3f      	lsrs	r7, r7, #12
 800141e:	0d52      	lsrs	r2, r2, #21
 8001420:	0fc9      	lsrs	r1, r1, #31
 8001422:	0d5b      	lsrs	r3, r3, #21
 8001424:	0fc0      	lsrs	r0, r0, #31
 8001426:	42aa      	cmp	r2, r5
 8001428:	d029      	beq.n	800147e <__gedf2+0x86>
 800142a:	42ab      	cmp	r3, r5
 800142c:	d018      	beq.n	8001460 <__gedf2+0x68>
 800142e:	2a00      	cmp	r2, #0
 8001430:	d12a      	bne.n	8001488 <__gedf2+0x90>
 8001432:	433c      	orrs	r4, r7
 8001434:	46a3      	mov	fp, r4
 8001436:	4265      	negs	r5, r4
 8001438:	4165      	adcs	r5, r4
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <__gedf2+0x4c>
 800143e:	464c      	mov	r4, r9
 8001440:	4326      	orrs	r6, r4
 8001442:	d027      	beq.n	8001494 <__gedf2+0x9c>
 8001444:	2d00      	cmp	r5, #0
 8001446:	d115      	bne.n	8001474 <__gedf2+0x7c>
 8001448:	4281      	cmp	r1, r0
 800144a:	d028      	beq.n	800149e <__gedf2+0xa6>
 800144c:	2002      	movs	r0, #2
 800144e:	3901      	subs	r1, #1
 8001450:	4008      	ands	r0, r1
 8001452:	3801      	subs	r0, #1
 8001454:	bcf0      	pop	{r4, r5, r6, r7}
 8001456:	46bb      	mov	fp, r7
 8001458:	46b2      	mov	sl, r6
 800145a:	46a9      	mov	r9, r5
 800145c:	46a0      	mov	r8, r4
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001460:	464d      	mov	r5, r9
 8001462:	432e      	orrs	r6, r5
 8001464:	d12f      	bne.n	80014c6 <__gedf2+0xce>
 8001466:	2a00      	cmp	r2, #0
 8001468:	d1ee      	bne.n	8001448 <__gedf2+0x50>
 800146a:	433c      	orrs	r4, r7
 800146c:	4265      	negs	r5, r4
 800146e:	4165      	adcs	r5, r4
 8001470:	2d00      	cmp	r5, #0
 8001472:	d0e9      	beq.n	8001448 <__gedf2+0x50>
 8001474:	2800      	cmp	r0, #0
 8001476:	d1ed      	bne.n	8001454 <__gedf2+0x5c>
 8001478:	2001      	movs	r0, #1
 800147a:	4240      	negs	r0, r0
 800147c:	e7ea      	b.n	8001454 <__gedf2+0x5c>
 800147e:	003d      	movs	r5, r7
 8001480:	4325      	orrs	r5, r4
 8001482:	d120      	bne.n	80014c6 <__gedf2+0xce>
 8001484:	4293      	cmp	r3, r2
 8001486:	d0eb      	beq.n	8001460 <__gedf2+0x68>
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1dd      	bne.n	8001448 <__gedf2+0x50>
 800148c:	464c      	mov	r4, r9
 800148e:	4326      	orrs	r6, r4
 8001490:	d1da      	bne.n	8001448 <__gedf2+0x50>
 8001492:	e7db      	b.n	800144c <__gedf2+0x54>
 8001494:	465b      	mov	r3, fp
 8001496:	2000      	movs	r0, #0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0db      	beq.n	8001454 <__gedf2+0x5c>
 800149c:	e7d6      	b.n	800144c <__gedf2+0x54>
 800149e:	429a      	cmp	r2, r3
 80014a0:	dc0a      	bgt.n	80014b8 <__gedf2+0xc0>
 80014a2:	dbe7      	blt.n	8001474 <__gedf2+0x7c>
 80014a4:	454f      	cmp	r7, r9
 80014a6:	d8d1      	bhi.n	800144c <__gedf2+0x54>
 80014a8:	d010      	beq.n	80014cc <__gedf2+0xd4>
 80014aa:	2000      	movs	r0, #0
 80014ac:	454f      	cmp	r7, r9
 80014ae:	d2d1      	bcs.n	8001454 <__gedf2+0x5c>
 80014b0:	2900      	cmp	r1, #0
 80014b2:	d0e1      	beq.n	8001478 <__gedf2+0x80>
 80014b4:	0008      	movs	r0, r1
 80014b6:	e7cd      	b.n	8001454 <__gedf2+0x5c>
 80014b8:	4243      	negs	r3, r0
 80014ba:	4158      	adcs	r0, r3
 80014bc:	2302      	movs	r3, #2
 80014be:	4240      	negs	r0, r0
 80014c0:	4018      	ands	r0, r3
 80014c2:	3801      	subs	r0, #1
 80014c4:	e7c6      	b.n	8001454 <__gedf2+0x5c>
 80014c6:	2002      	movs	r0, #2
 80014c8:	4240      	negs	r0, r0
 80014ca:	e7c3      	b.n	8001454 <__gedf2+0x5c>
 80014cc:	45c4      	cmp	ip, r8
 80014ce:	d8bd      	bhi.n	800144c <__gedf2+0x54>
 80014d0:	2000      	movs	r0, #0
 80014d2:	45c4      	cmp	ip, r8
 80014d4:	d2be      	bcs.n	8001454 <__gedf2+0x5c>
 80014d6:	e7eb      	b.n	80014b0 <__gedf2+0xb8>
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__ledf2>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	464e      	mov	r6, r9
 80014e0:	4645      	mov	r5, r8
 80014e2:	4657      	mov	r7, sl
 80014e4:	46de      	mov	lr, fp
 80014e6:	0004      	movs	r4, r0
 80014e8:	0018      	movs	r0, r3
 80014ea:	b5e0      	push	{r5, r6, r7, lr}
 80014ec:	0016      	movs	r6, r2
 80014ee:	031b      	lsls	r3, r3, #12
 80014f0:	0b1b      	lsrs	r3, r3, #12
 80014f2:	4d31      	ldr	r5, [pc, #196]	; (80015b8 <__ledf2+0xdc>)
 80014f4:	030f      	lsls	r7, r1, #12
 80014f6:	004a      	lsls	r2, r1, #1
 80014f8:	4699      	mov	r9, r3
 80014fa:	0043      	lsls	r3, r0, #1
 80014fc:	46a4      	mov	ip, r4
 80014fe:	46b0      	mov	r8, r6
 8001500:	0b3f      	lsrs	r7, r7, #12
 8001502:	0d52      	lsrs	r2, r2, #21
 8001504:	0fc9      	lsrs	r1, r1, #31
 8001506:	0d5b      	lsrs	r3, r3, #21
 8001508:	0fc0      	lsrs	r0, r0, #31
 800150a:	42aa      	cmp	r2, r5
 800150c:	d011      	beq.n	8001532 <__ledf2+0x56>
 800150e:	42ab      	cmp	r3, r5
 8001510:	d014      	beq.n	800153c <__ledf2+0x60>
 8001512:	2a00      	cmp	r2, #0
 8001514:	d12f      	bne.n	8001576 <__ledf2+0x9a>
 8001516:	433c      	orrs	r4, r7
 8001518:	46a3      	mov	fp, r4
 800151a:	4265      	negs	r5, r4
 800151c:	4165      	adcs	r5, r4
 800151e:	2b00      	cmp	r3, #0
 8001520:	d114      	bne.n	800154c <__ledf2+0x70>
 8001522:	464c      	mov	r4, r9
 8001524:	4326      	orrs	r6, r4
 8001526:	d111      	bne.n	800154c <__ledf2+0x70>
 8001528:	465b      	mov	r3, fp
 800152a:	2000      	movs	r0, #0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d017      	beq.n	8001560 <__ledf2+0x84>
 8001530:	e010      	b.n	8001554 <__ledf2+0x78>
 8001532:	003d      	movs	r5, r7
 8001534:	4325      	orrs	r5, r4
 8001536:	d112      	bne.n	800155e <__ledf2+0x82>
 8001538:	4293      	cmp	r3, r2
 800153a:	d11c      	bne.n	8001576 <__ledf2+0x9a>
 800153c:	464d      	mov	r5, r9
 800153e:	432e      	orrs	r6, r5
 8001540:	d10d      	bne.n	800155e <__ledf2+0x82>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d104      	bne.n	8001550 <__ledf2+0x74>
 8001546:	433c      	orrs	r4, r7
 8001548:	4265      	negs	r5, r4
 800154a:	4165      	adcs	r5, r4
 800154c:	2d00      	cmp	r5, #0
 800154e:	d10d      	bne.n	800156c <__ledf2+0x90>
 8001550:	4281      	cmp	r1, r0
 8001552:	d016      	beq.n	8001582 <__ledf2+0xa6>
 8001554:	2002      	movs	r0, #2
 8001556:	3901      	subs	r1, #1
 8001558:	4008      	ands	r0, r1
 800155a:	3801      	subs	r0, #1
 800155c:	e000      	b.n	8001560 <__ledf2+0x84>
 800155e:	2002      	movs	r0, #2
 8001560:	bcf0      	pop	{r4, r5, r6, r7}
 8001562:	46bb      	mov	fp, r7
 8001564:	46b2      	mov	sl, r6
 8001566:	46a9      	mov	r9, r5
 8001568:	46a0      	mov	r8, r4
 800156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156c:	2800      	cmp	r0, #0
 800156e:	d1f7      	bne.n	8001560 <__ledf2+0x84>
 8001570:	2001      	movs	r0, #1
 8001572:	4240      	negs	r0, r0
 8001574:	e7f4      	b.n	8001560 <__ledf2+0x84>
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ea      	bne.n	8001550 <__ledf2+0x74>
 800157a:	464c      	mov	r4, r9
 800157c:	4326      	orrs	r6, r4
 800157e:	d1e7      	bne.n	8001550 <__ledf2+0x74>
 8001580:	e7e8      	b.n	8001554 <__ledf2+0x78>
 8001582:	429a      	cmp	r2, r3
 8001584:	dd06      	ble.n	8001594 <__ledf2+0xb8>
 8001586:	4243      	negs	r3, r0
 8001588:	4158      	adcs	r0, r3
 800158a:	2302      	movs	r3, #2
 800158c:	4240      	negs	r0, r0
 800158e:	4018      	ands	r0, r3
 8001590:	3801      	subs	r0, #1
 8001592:	e7e5      	b.n	8001560 <__ledf2+0x84>
 8001594:	429a      	cmp	r2, r3
 8001596:	dbe9      	blt.n	800156c <__ledf2+0x90>
 8001598:	454f      	cmp	r7, r9
 800159a:	d8db      	bhi.n	8001554 <__ledf2+0x78>
 800159c:	d006      	beq.n	80015ac <__ledf2+0xd0>
 800159e:	2000      	movs	r0, #0
 80015a0:	454f      	cmp	r7, r9
 80015a2:	d2dd      	bcs.n	8001560 <__ledf2+0x84>
 80015a4:	2900      	cmp	r1, #0
 80015a6:	d0e3      	beq.n	8001570 <__ledf2+0x94>
 80015a8:	0008      	movs	r0, r1
 80015aa:	e7d9      	b.n	8001560 <__ledf2+0x84>
 80015ac:	45c4      	cmp	ip, r8
 80015ae:	d8d1      	bhi.n	8001554 <__ledf2+0x78>
 80015b0:	2000      	movs	r0, #0
 80015b2:	45c4      	cmp	ip, r8
 80015b4:	d2d4      	bcs.n	8001560 <__ledf2+0x84>
 80015b6:	e7f5      	b.n	80015a4 <__ledf2+0xc8>
 80015b8:	000007ff 	.word	0x000007ff

080015bc <__aeabi_dmul>:
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	4657      	mov	r7, sl
 80015c0:	464e      	mov	r6, r9
 80015c2:	4645      	mov	r5, r8
 80015c4:	46de      	mov	lr, fp
 80015c6:	b5e0      	push	{r5, r6, r7, lr}
 80015c8:	4698      	mov	r8, r3
 80015ca:	030c      	lsls	r4, r1, #12
 80015cc:	004b      	lsls	r3, r1, #1
 80015ce:	0006      	movs	r6, r0
 80015d0:	4692      	mov	sl, r2
 80015d2:	b087      	sub	sp, #28
 80015d4:	0b24      	lsrs	r4, r4, #12
 80015d6:	0d5b      	lsrs	r3, r3, #21
 80015d8:	0fcf      	lsrs	r7, r1, #31
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d06c      	beq.n	80016b8 <__aeabi_dmul+0xfc>
 80015de:	4add      	ldr	r2, [pc, #884]	; (8001954 <__aeabi_dmul+0x398>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0x2a>
 80015e4:	e086      	b.n	80016f4 <__aeabi_dmul+0x138>
 80015e6:	0f42      	lsrs	r2, r0, #29
 80015e8:	00e4      	lsls	r4, r4, #3
 80015ea:	4314      	orrs	r4, r2
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	0412      	lsls	r2, r2, #16
 80015f0:	4314      	orrs	r4, r2
 80015f2:	4ad9      	ldr	r2, [pc, #868]	; (8001958 <__aeabi_dmul+0x39c>)
 80015f4:	00c5      	lsls	r5, r0, #3
 80015f6:	4694      	mov	ip, r2
 80015f8:	4463      	add	r3, ip
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	4699      	mov	r9, r3
 8001600:	469b      	mov	fp, r3
 8001602:	4643      	mov	r3, r8
 8001604:	4642      	mov	r2, r8
 8001606:	031e      	lsls	r6, r3, #12
 8001608:	0fd2      	lsrs	r2, r2, #31
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4650      	mov	r0, sl
 800160e:	4690      	mov	r8, r2
 8001610:	0b36      	lsrs	r6, r6, #12
 8001612:	0d5b      	lsrs	r3, r3, #21
 8001614:	d100      	bne.n	8001618 <__aeabi_dmul+0x5c>
 8001616:	e078      	b.n	800170a <__aeabi_dmul+0x14e>
 8001618:	4ace      	ldr	r2, [pc, #824]	; (8001954 <__aeabi_dmul+0x398>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d01d      	beq.n	800165a <__aeabi_dmul+0x9e>
 800161e:	49ce      	ldr	r1, [pc, #824]	; (8001958 <__aeabi_dmul+0x39c>)
 8001620:	0f42      	lsrs	r2, r0, #29
 8001622:	468c      	mov	ip, r1
 8001624:	9900      	ldr	r1, [sp, #0]
 8001626:	4463      	add	r3, ip
 8001628:	00f6      	lsls	r6, r6, #3
 800162a:	468c      	mov	ip, r1
 800162c:	4316      	orrs	r6, r2
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	449c      	add	ip, r3
 8001632:	0412      	lsls	r2, r2, #16
 8001634:	4663      	mov	r3, ip
 8001636:	4316      	orrs	r6, r2
 8001638:	00c2      	lsls	r2, r0, #3
 800163a:	2000      	movs	r0, #0
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	9900      	ldr	r1, [sp, #0]
 8001640:	4643      	mov	r3, r8
 8001642:	3101      	adds	r1, #1
 8001644:	468c      	mov	ip, r1
 8001646:	4649      	mov	r1, r9
 8001648:	407b      	eors	r3, r7
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	290f      	cmp	r1, #15
 800164e:	d900      	bls.n	8001652 <__aeabi_dmul+0x96>
 8001650:	e07e      	b.n	8001750 <__aeabi_dmul+0x194>
 8001652:	4bc2      	ldr	r3, [pc, #776]	; (800195c <__aeabi_dmul+0x3a0>)
 8001654:	0089      	lsls	r1, r1, #2
 8001656:	5859      	ldr	r1, [r3, r1]
 8001658:	468f      	mov	pc, r1
 800165a:	4652      	mov	r2, sl
 800165c:	9b00      	ldr	r3, [sp, #0]
 800165e:	4332      	orrs	r2, r6
 8001660:	d000      	beq.n	8001664 <__aeabi_dmul+0xa8>
 8001662:	e156      	b.n	8001912 <__aeabi_dmul+0x356>
 8001664:	49bb      	ldr	r1, [pc, #748]	; (8001954 <__aeabi_dmul+0x398>)
 8001666:	2600      	movs	r6, #0
 8001668:	468c      	mov	ip, r1
 800166a:	4463      	add	r3, ip
 800166c:	4649      	mov	r1, r9
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2302      	movs	r3, #2
 8001672:	4319      	orrs	r1, r3
 8001674:	4689      	mov	r9, r1
 8001676:	2002      	movs	r0, #2
 8001678:	e7e1      	b.n	800163e <__aeabi_dmul+0x82>
 800167a:	4643      	mov	r3, r8
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	0034      	movs	r4, r6
 8001680:	0015      	movs	r5, r2
 8001682:	4683      	mov	fp, r0
 8001684:	465b      	mov	r3, fp
 8001686:	2b02      	cmp	r3, #2
 8001688:	d05e      	beq.n	8001748 <__aeabi_dmul+0x18c>
 800168a:	2b03      	cmp	r3, #3
 800168c:	d100      	bne.n	8001690 <__aeabi_dmul+0xd4>
 800168e:	e1f3      	b.n	8001a78 <__aeabi_dmul+0x4bc>
 8001690:	2b01      	cmp	r3, #1
 8001692:	d000      	beq.n	8001696 <__aeabi_dmul+0xda>
 8001694:	e118      	b.n	80018c8 <__aeabi_dmul+0x30c>
 8001696:	2200      	movs	r2, #0
 8001698:	2400      	movs	r4, #0
 800169a:	2500      	movs	r5, #0
 800169c:	9b01      	ldr	r3, [sp, #4]
 800169e:	0512      	lsls	r2, r2, #20
 80016a0:	4322      	orrs	r2, r4
 80016a2:	07db      	lsls	r3, r3, #31
 80016a4:	431a      	orrs	r2, r3
 80016a6:	0028      	movs	r0, r5
 80016a8:	0011      	movs	r1, r2
 80016aa:	b007      	add	sp, #28
 80016ac:	bcf0      	pop	{r4, r5, r6, r7}
 80016ae:	46bb      	mov	fp, r7
 80016b0:	46b2      	mov	sl, r6
 80016b2:	46a9      	mov	r9, r5
 80016b4:	46a0      	mov	r8, r4
 80016b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b8:	0025      	movs	r5, r4
 80016ba:	4305      	orrs	r5, r0
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dmul+0x104>
 80016be:	e141      	b.n	8001944 <__aeabi_dmul+0x388>
 80016c0:	2c00      	cmp	r4, #0
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dmul+0x10a>
 80016c4:	e1ad      	b.n	8001a22 <__aeabi_dmul+0x466>
 80016c6:	0020      	movs	r0, r4
 80016c8:	f000 fe94 	bl	80023f4 <__clzsi2>
 80016cc:	0001      	movs	r1, r0
 80016ce:	0002      	movs	r2, r0
 80016d0:	390b      	subs	r1, #11
 80016d2:	231d      	movs	r3, #29
 80016d4:	0010      	movs	r0, r2
 80016d6:	1a5b      	subs	r3, r3, r1
 80016d8:	0031      	movs	r1, r6
 80016da:	0035      	movs	r5, r6
 80016dc:	3808      	subs	r0, #8
 80016de:	4084      	lsls	r4, r0
 80016e0:	40d9      	lsrs	r1, r3
 80016e2:	4085      	lsls	r5, r0
 80016e4:	430c      	orrs	r4, r1
 80016e6:	489e      	ldr	r0, [pc, #632]	; (8001960 <__aeabi_dmul+0x3a4>)
 80016e8:	1a83      	subs	r3, r0, r2
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2300      	movs	r3, #0
 80016ee:	4699      	mov	r9, r3
 80016f0:	469b      	mov	fp, r3
 80016f2:	e786      	b.n	8001602 <__aeabi_dmul+0x46>
 80016f4:	0005      	movs	r5, r0
 80016f6:	4325      	orrs	r5, r4
 80016f8:	d000      	beq.n	80016fc <__aeabi_dmul+0x140>
 80016fa:	e11c      	b.n	8001936 <__aeabi_dmul+0x37a>
 80016fc:	2208      	movs	r2, #8
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2302      	movs	r3, #2
 8001702:	2400      	movs	r4, #0
 8001704:	4691      	mov	r9, r2
 8001706:	469b      	mov	fp, r3
 8001708:	e77b      	b.n	8001602 <__aeabi_dmul+0x46>
 800170a:	4652      	mov	r2, sl
 800170c:	4332      	orrs	r2, r6
 800170e:	d100      	bne.n	8001712 <__aeabi_dmul+0x156>
 8001710:	e10a      	b.n	8001928 <__aeabi_dmul+0x36c>
 8001712:	2e00      	cmp	r6, #0
 8001714:	d100      	bne.n	8001718 <__aeabi_dmul+0x15c>
 8001716:	e176      	b.n	8001a06 <__aeabi_dmul+0x44a>
 8001718:	0030      	movs	r0, r6
 800171a:	f000 fe6b 	bl	80023f4 <__clzsi2>
 800171e:	0002      	movs	r2, r0
 8001720:	3a0b      	subs	r2, #11
 8001722:	231d      	movs	r3, #29
 8001724:	0001      	movs	r1, r0
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	4652      	mov	r2, sl
 800172a:	3908      	subs	r1, #8
 800172c:	40da      	lsrs	r2, r3
 800172e:	408e      	lsls	r6, r1
 8001730:	4316      	orrs	r6, r2
 8001732:	4652      	mov	r2, sl
 8001734:	408a      	lsls	r2, r1
 8001736:	9b00      	ldr	r3, [sp, #0]
 8001738:	4989      	ldr	r1, [pc, #548]	; (8001960 <__aeabi_dmul+0x3a4>)
 800173a:	1a18      	subs	r0, r3, r0
 800173c:	0003      	movs	r3, r0
 800173e:	468c      	mov	ip, r1
 8001740:	4463      	add	r3, ip
 8001742:	2000      	movs	r0, #0
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	e77a      	b.n	800163e <__aeabi_dmul+0x82>
 8001748:	2400      	movs	r4, #0
 800174a:	2500      	movs	r5, #0
 800174c:	4a81      	ldr	r2, [pc, #516]	; (8001954 <__aeabi_dmul+0x398>)
 800174e:	e7a5      	b.n	800169c <__aeabi_dmul+0xe0>
 8001750:	0c2f      	lsrs	r7, r5, #16
 8001752:	042d      	lsls	r5, r5, #16
 8001754:	0c2d      	lsrs	r5, r5, #16
 8001756:	002b      	movs	r3, r5
 8001758:	0c11      	lsrs	r1, r2, #16
 800175a:	0412      	lsls	r2, r2, #16
 800175c:	0c12      	lsrs	r2, r2, #16
 800175e:	4353      	muls	r3, r2
 8001760:	4698      	mov	r8, r3
 8001762:	0013      	movs	r3, r2
 8001764:	0028      	movs	r0, r5
 8001766:	437b      	muls	r3, r7
 8001768:	4699      	mov	r9, r3
 800176a:	4348      	muls	r0, r1
 800176c:	4448      	add	r0, r9
 800176e:	4683      	mov	fp, r0
 8001770:	4640      	mov	r0, r8
 8001772:	000b      	movs	r3, r1
 8001774:	0c00      	lsrs	r0, r0, #16
 8001776:	4682      	mov	sl, r0
 8001778:	4658      	mov	r0, fp
 800177a:	437b      	muls	r3, r7
 800177c:	4450      	add	r0, sl
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	4581      	cmp	r9, r0
 8001782:	d906      	bls.n	8001792 <__aeabi_dmul+0x1d6>
 8001784:	469a      	mov	sl, r3
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	025b      	lsls	r3, r3, #9
 800178a:	4699      	mov	r9, r3
 800178c:	44ca      	add	sl, r9
 800178e:	4653      	mov	r3, sl
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	0c03      	lsrs	r3, r0, #16
 8001794:	469b      	mov	fp, r3
 8001796:	4643      	mov	r3, r8
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	0400      	lsls	r0, r0, #16
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	4698      	mov	r8, r3
 80017a0:	0003      	movs	r3, r0
 80017a2:	4443      	add	r3, r8
 80017a4:	9304      	str	r3, [sp, #16]
 80017a6:	0c33      	lsrs	r3, r6, #16
 80017a8:	4699      	mov	r9, r3
 80017aa:	002b      	movs	r3, r5
 80017ac:	0436      	lsls	r6, r6, #16
 80017ae:	0c36      	lsrs	r6, r6, #16
 80017b0:	4373      	muls	r3, r6
 80017b2:	4698      	mov	r8, r3
 80017b4:	0033      	movs	r3, r6
 80017b6:	437b      	muls	r3, r7
 80017b8:	469a      	mov	sl, r3
 80017ba:	464b      	mov	r3, r9
 80017bc:	435d      	muls	r5, r3
 80017be:	435f      	muls	r7, r3
 80017c0:	4643      	mov	r3, r8
 80017c2:	4455      	add	r5, sl
 80017c4:	0c18      	lsrs	r0, r3, #16
 80017c6:	1940      	adds	r0, r0, r5
 80017c8:	4582      	cmp	sl, r0
 80017ca:	d903      	bls.n	80017d4 <__aeabi_dmul+0x218>
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	025b      	lsls	r3, r3, #9
 80017d0:	469a      	mov	sl, r3
 80017d2:	4457      	add	r7, sl
 80017d4:	0c05      	lsrs	r5, r0, #16
 80017d6:	19eb      	adds	r3, r5, r7
 80017d8:	9305      	str	r3, [sp, #20]
 80017da:	4643      	mov	r3, r8
 80017dc:	041d      	lsls	r5, r3, #16
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	0400      	lsls	r0, r0, #16
 80017e2:	1940      	adds	r0, r0, r5
 80017e4:	0c25      	lsrs	r5, r4, #16
 80017e6:	0424      	lsls	r4, r4, #16
 80017e8:	0c24      	lsrs	r4, r4, #16
 80017ea:	0027      	movs	r7, r4
 80017ec:	4357      	muls	r7, r2
 80017ee:	436a      	muls	r2, r5
 80017f0:	4690      	mov	r8, r2
 80017f2:	002a      	movs	r2, r5
 80017f4:	0c3b      	lsrs	r3, r7, #16
 80017f6:	469a      	mov	sl, r3
 80017f8:	434a      	muls	r2, r1
 80017fa:	4361      	muls	r1, r4
 80017fc:	4441      	add	r1, r8
 80017fe:	4451      	add	r1, sl
 8001800:	4483      	add	fp, r0
 8001802:	4588      	cmp	r8, r1
 8001804:	d903      	bls.n	800180e <__aeabi_dmul+0x252>
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	025b      	lsls	r3, r3, #9
 800180a:	4698      	mov	r8, r3
 800180c:	4442      	add	r2, r8
 800180e:	043f      	lsls	r7, r7, #16
 8001810:	0c0b      	lsrs	r3, r1, #16
 8001812:	0c3f      	lsrs	r7, r7, #16
 8001814:	0409      	lsls	r1, r1, #16
 8001816:	19c9      	adds	r1, r1, r7
 8001818:	0027      	movs	r7, r4
 800181a:	4698      	mov	r8, r3
 800181c:	464b      	mov	r3, r9
 800181e:	4377      	muls	r7, r6
 8001820:	435c      	muls	r4, r3
 8001822:	436e      	muls	r6, r5
 8001824:	435d      	muls	r5, r3
 8001826:	0c3b      	lsrs	r3, r7, #16
 8001828:	4699      	mov	r9, r3
 800182a:	19a4      	adds	r4, r4, r6
 800182c:	444c      	add	r4, r9
 800182e:	4442      	add	r2, r8
 8001830:	9503      	str	r5, [sp, #12]
 8001832:	42a6      	cmp	r6, r4
 8001834:	d904      	bls.n	8001840 <__aeabi_dmul+0x284>
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	4698      	mov	r8, r3
 800183c:	4445      	add	r5, r8
 800183e:	9503      	str	r5, [sp, #12]
 8001840:	9b02      	ldr	r3, [sp, #8]
 8001842:	043f      	lsls	r7, r7, #16
 8001844:	445b      	add	r3, fp
 8001846:	001e      	movs	r6, r3
 8001848:	4283      	cmp	r3, r0
 800184a:	4180      	sbcs	r0, r0
 800184c:	0423      	lsls	r3, r4, #16
 800184e:	4698      	mov	r8, r3
 8001850:	9b05      	ldr	r3, [sp, #20]
 8001852:	0c3f      	lsrs	r7, r7, #16
 8001854:	4447      	add	r7, r8
 8001856:	4698      	mov	r8, r3
 8001858:	1876      	adds	r6, r6, r1
 800185a:	428e      	cmp	r6, r1
 800185c:	4189      	sbcs	r1, r1
 800185e:	4447      	add	r7, r8
 8001860:	4240      	negs	r0, r0
 8001862:	183d      	adds	r5, r7, r0
 8001864:	46a8      	mov	r8, r5
 8001866:	4693      	mov	fp, r2
 8001868:	4249      	negs	r1, r1
 800186a:	468a      	mov	sl, r1
 800186c:	44c3      	add	fp, r8
 800186e:	429f      	cmp	r7, r3
 8001870:	41bf      	sbcs	r7, r7
 8001872:	4580      	cmp	r8, r0
 8001874:	4180      	sbcs	r0, r0
 8001876:	9b03      	ldr	r3, [sp, #12]
 8001878:	44da      	add	sl, fp
 800187a:	4698      	mov	r8, r3
 800187c:	4653      	mov	r3, sl
 800187e:	4240      	negs	r0, r0
 8001880:	427f      	negs	r7, r7
 8001882:	4307      	orrs	r7, r0
 8001884:	0c24      	lsrs	r4, r4, #16
 8001886:	4593      	cmp	fp, r2
 8001888:	4192      	sbcs	r2, r2
 800188a:	458a      	cmp	sl, r1
 800188c:	4189      	sbcs	r1, r1
 800188e:	193f      	adds	r7, r7, r4
 8001890:	0ddc      	lsrs	r4, r3, #23
 8001892:	9b04      	ldr	r3, [sp, #16]
 8001894:	0275      	lsls	r5, r6, #9
 8001896:	431d      	orrs	r5, r3
 8001898:	1e68      	subs	r0, r5, #1
 800189a:	4185      	sbcs	r5, r0
 800189c:	4653      	mov	r3, sl
 800189e:	4252      	negs	r2, r2
 80018a0:	4249      	negs	r1, r1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	18bf      	adds	r7, r7, r2
 80018a6:	4447      	add	r7, r8
 80018a8:	0df6      	lsrs	r6, r6, #23
 80018aa:	027f      	lsls	r7, r7, #9
 80018ac:	4335      	orrs	r5, r6
 80018ae:	025a      	lsls	r2, r3, #9
 80018b0:	433c      	orrs	r4, r7
 80018b2:	4315      	orrs	r5, r2
 80018b4:	01fb      	lsls	r3, r7, #7
 80018b6:	d400      	bmi.n	80018ba <__aeabi_dmul+0x2fe>
 80018b8:	e0c1      	b.n	8001a3e <__aeabi_dmul+0x482>
 80018ba:	2101      	movs	r1, #1
 80018bc:	086a      	lsrs	r2, r5, #1
 80018be:	400d      	ands	r5, r1
 80018c0:	4315      	orrs	r5, r2
 80018c2:	07e2      	lsls	r2, r4, #31
 80018c4:	4315      	orrs	r5, r2
 80018c6:	0864      	lsrs	r4, r4, #1
 80018c8:	4926      	ldr	r1, [pc, #152]	; (8001964 <__aeabi_dmul+0x3a8>)
 80018ca:	4461      	add	r1, ip
 80018cc:	2900      	cmp	r1, #0
 80018ce:	dd56      	ble.n	800197e <__aeabi_dmul+0x3c2>
 80018d0:	076b      	lsls	r3, r5, #29
 80018d2:	d009      	beq.n	80018e8 <__aeabi_dmul+0x32c>
 80018d4:	220f      	movs	r2, #15
 80018d6:	402a      	ands	r2, r5
 80018d8:	2a04      	cmp	r2, #4
 80018da:	d005      	beq.n	80018e8 <__aeabi_dmul+0x32c>
 80018dc:	1d2a      	adds	r2, r5, #4
 80018de:	42aa      	cmp	r2, r5
 80018e0:	41ad      	sbcs	r5, r5
 80018e2:	426d      	negs	r5, r5
 80018e4:	1964      	adds	r4, r4, r5
 80018e6:	0015      	movs	r5, r2
 80018e8:	01e3      	lsls	r3, r4, #7
 80018ea:	d504      	bpl.n	80018f6 <__aeabi_dmul+0x33a>
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <__aeabi_dmul+0x3ac>)
 80018f0:	00c9      	lsls	r1, r1, #3
 80018f2:	4014      	ands	r4, r2
 80018f4:	4461      	add	r1, ip
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <__aeabi_dmul+0x3b0>)
 80018f8:	4291      	cmp	r1, r2
 80018fa:	dd00      	ble.n	80018fe <__aeabi_dmul+0x342>
 80018fc:	e724      	b.n	8001748 <__aeabi_dmul+0x18c>
 80018fe:	0762      	lsls	r2, r4, #29
 8001900:	08ed      	lsrs	r5, r5, #3
 8001902:	0264      	lsls	r4, r4, #9
 8001904:	0549      	lsls	r1, r1, #21
 8001906:	4315      	orrs	r5, r2
 8001908:	0b24      	lsrs	r4, r4, #12
 800190a:	0d4a      	lsrs	r2, r1, #21
 800190c:	e6c6      	b.n	800169c <__aeabi_dmul+0xe0>
 800190e:	9701      	str	r7, [sp, #4]
 8001910:	e6b8      	b.n	8001684 <__aeabi_dmul+0xc8>
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <__aeabi_dmul+0x398>)
 8001914:	2003      	movs	r0, #3
 8001916:	4694      	mov	ip, r2
 8001918:	4463      	add	r3, ip
 800191a:	464a      	mov	r2, r9
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2303      	movs	r3, #3
 8001920:	431a      	orrs	r2, r3
 8001922:	4691      	mov	r9, r2
 8001924:	4652      	mov	r2, sl
 8001926:	e68a      	b.n	800163e <__aeabi_dmul+0x82>
 8001928:	4649      	mov	r1, r9
 800192a:	2301      	movs	r3, #1
 800192c:	4319      	orrs	r1, r3
 800192e:	4689      	mov	r9, r1
 8001930:	2600      	movs	r6, #0
 8001932:	2001      	movs	r0, #1
 8001934:	e683      	b.n	800163e <__aeabi_dmul+0x82>
 8001936:	220c      	movs	r2, #12
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2303      	movs	r3, #3
 800193c:	0005      	movs	r5, r0
 800193e:	4691      	mov	r9, r2
 8001940:	469b      	mov	fp, r3
 8001942:	e65e      	b.n	8001602 <__aeabi_dmul+0x46>
 8001944:	2304      	movs	r3, #4
 8001946:	4699      	mov	r9, r3
 8001948:	2300      	movs	r3, #0
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	2400      	movs	r4, #0
 8001950:	469b      	mov	fp, r3
 8001952:	e656      	b.n	8001602 <__aeabi_dmul+0x46>
 8001954:	000007ff 	.word	0x000007ff
 8001958:	fffffc01 	.word	0xfffffc01
 800195c:	080057d0 	.word	0x080057d0
 8001960:	fffffc0d 	.word	0xfffffc0d
 8001964:	000003ff 	.word	0x000003ff
 8001968:	feffffff 	.word	0xfeffffff
 800196c:	000007fe 	.word	0x000007fe
 8001970:	2300      	movs	r3, #0
 8001972:	2480      	movs	r4, #128	; 0x80
 8001974:	2500      	movs	r5, #0
 8001976:	4a44      	ldr	r2, [pc, #272]	; (8001a88 <__aeabi_dmul+0x4cc>)
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	0324      	lsls	r4, r4, #12
 800197c:	e68e      	b.n	800169c <__aeabi_dmul+0xe0>
 800197e:	2001      	movs	r0, #1
 8001980:	1a40      	subs	r0, r0, r1
 8001982:	2838      	cmp	r0, #56	; 0x38
 8001984:	dd00      	ble.n	8001988 <__aeabi_dmul+0x3cc>
 8001986:	e686      	b.n	8001696 <__aeabi_dmul+0xda>
 8001988:	281f      	cmp	r0, #31
 800198a:	dd5b      	ble.n	8001a44 <__aeabi_dmul+0x488>
 800198c:	221f      	movs	r2, #31
 800198e:	0023      	movs	r3, r4
 8001990:	4252      	negs	r2, r2
 8001992:	1a51      	subs	r1, r2, r1
 8001994:	40cb      	lsrs	r3, r1
 8001996:	0019      	movs	r1, r3
 8001998:	2820      	cmp	r0, #32
 800199a:	d003      	beq.n	80019a4 <__aeabi_dmul+0x3e8>
 800199c:	4a3b      	ldr	r2, [pc, #236]	; (8001a8c <__aeabi_dmul+0x4d0>)
 800199e:	4462      	add	r2, ip
 80019a0:	4094      	lsls	r4, r2
 80019a2:	4325      	orrs	r5, r4
 80019a4:	1e6a      	subs	r2, r5, #1
 80019a6:	4195      	sbcs	r5, r2
 80019a8:	002a      	movs	r2, r5
 80019aa:	430a      	orrs	r2, r1
 80019ac:	2107      	movs	r1, #7
 80019ae:	000d      	movs	r5, r1
 80019b0:	2400      	movs	r4, #0
 80019b2:	4015      	ands	r5, r2
 80019b4:	4211      	tst	r1, r2
 80019b6:	d05b      	beq.n	8001a70 <__aeabi_dmul+0x4b4>
 80019b8:	210f      	movs	r1, #15
 80019ba:	2400      	movs	r4, #0
 80019bc:	4011      	ands	r1, r2
 80019be:	2904      	cmp	r1, #4
 80019c0:	d053      	beq.n	8001a6a <__aeabi_dmul+0x4ae>
 80019c2:	1d11      	adds	r1, r2, #4
 80019c4:	4291      	cmp	r1, r2
 80019c6:	4192      	sbcs	r2, r2
 80019c8:	4252      	negs	r2, r2
 80019ca:	18a4      	adds	r4, r4, r2
 80019cc:	000a      	movs	r2, r1
 80019ce:	0223      	lsls	r3, r4, #8
 80019d0:	d54b      	bpl.n	8001a6a <__aeabi_dmul+0x4ae>
 80019d2:	2201      	movs	r2, #1
 80019d4:	2400      	movs	r4, #0
 80019d6:	2500      	movs	r5, #0
 80019d8:	e660      	b.n	800169c <__aeabi_dmul+0xe0>
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	031b      	lsls	r3, r3, #12
 80019de:	421c      	tst	r4, r3
 80019e0:	d009      	beq.n	80019f6 <__aeabi_dmul+0x43a>
 80019e2:	421e      	tst	r6, r3
 80019e4:	d107      	bne.n	80019f6 <__aeabi_dmul+0x43a>
 80019e6:	4333      	orrs	r3, r6
 80019e8:	031c      	lsls	r4, r3, #12
 80019ea:	4643      	mov	r3, r8
 80019ec:	0015      	movs	r5, r2
 80019ee:	0b24      	lsrs	r4, r4, #12
 80019f0:	4a25      	ldr	r2, [pc, #148]	; (8001a88 <__aeabi_dmul+0x4cc>)
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	e652      	b.n	800169c <__aeabi_dmul+0xe0>
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	0312      	lsls	r2, r2, #12
 80019fa:	4314      	orrs	r4, r2
 80019fc:	0324      	lsls	r4, r4, #12
 80019fe:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <__aeabi_dmul+0x4cc>)
 8001a00:	0b24      	lsrs	r4, r4, #12
 8001a02:	9701      	str	r7, [sp, #4]
 8001a04:	e64a      	b.n	800169c <__aeabi_dmul+0xe0>
 8001a06:	f000 fcf5 	bl	80023f4 <__clzsi2>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	001a      	movs	r2, r3
 8001a0e:	3215      	adds	r2, #21
 8001a10:	3020      	adds	r0, #32
 8001a12:	2a1c      	cmp	r2, #28
 8001a14:	dc00      	bgt.n	8001a18 <__aeabi_dmul+0x45c>
 8001a16:	e684      	b.n	8001722 <__aeabi_dmul+0x166>
 8001a18:	4656      	mov	r6, sl
 8001a1a:	3b08      	subs	r3, #8
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	409e      	lsls	r6, r3
 8001a20:	e689      	b.n	8001736 <__aeabi_dmul+0x17a>
 8001a22:	f000 fce7 	bl	80023f4 <__clzsi2>
 8001a26:	0001      	movs	r1, r0
 8001a28:	0002      	movs	r2, r0
 8001a2a:	3115      	adds	r1, #21
 8001a2c:	3220      	adds	r2, #32
 8001a2e:	291c      	cmp	r1, #28
 8001a30:	dc00      	bgt.n	8001a34 <__aeabi_dmul+0x478>
 8001a32:	e64e      	b.n	80016d2 <__aeabi_dmul+0x116>
 8001a34:	0034      	movs	r4, r6
 8001a36:	3808      	subs	r0, #8
 8001a38:	2500      	movs	r5, #0
 8001a3a:	4084      	lsls	r4, r0
 8001a3c:	e653      	b.n	80016e6 <__aeabi_dmul+0x12a>
 8001a3e:	9b00      	ldr	r3, [sp, #0]
 8001a40:	469c      	mov	ip, r3
 8001a42:	e741      	b.n	80018c8 <__aeabi_dmul+0x30c>
 8001a44:	4912      	ldr	r1, [pc, #72]	; (8001a90 <__aeabi_dmul+0x4d4>)
 8001a46:	0022      	movs	r2, r4
 8001a48:	4461      	add	r1, ip
 8001a4a:	002e      	movs	r6, r5
 8001a4c:	408d      	lsls	r5, r1
 8001a4e:	408a      	lsls	r2, r1
 8001a50:	40c6      	lsrs	r6, r0
 8001a52:	1e69      	subs	r1, r5, #1
 8001a54:	418d      	sbcs	r5, r1
 8001a56:	4332      	orrs	r2, r6
 8001a58:	432a      	orrs	r2, r5
 8001a5a:	40c4      	lsrs	r4, r0
 8001a5c:	0753      	lsls	r3, r2, #29
 8001a5e:	d0b6      	beq.n	80019ce <__aeabi_dmul+0x412>
 8001a60:	210f      	movs	r1, #15
 8001a62:	4011      	ands	r1, r2
 8001a64:	2904      	cmp	r1, #4
 8001a66:	d1ac      	bne.n	80019c2 <__aeabi_dmul+0x406>
 8001a68:	e7b1      	b.n	80019ce <__aeabi_dmul+0x412>
 8001a6a:	0765      	lsls	r5, r4, #29
 8001a6c:	0264      	lsls	r4, r4, #9
 8001a6e:	0b24      	lsrs	r4, r4, #12
 8001a70:	08d2      	lsrs	r2, r2, #3
 8001a72:	4315      	orrs	r5, r2
 8001a74:	2200      	movs	r2, #0
 8001a76:	e611      	b.n	800169c <__aeabi_dmul+0xe0>
 8001a78:	2280      	movs	r2, #128	; 0x80
 8001a7a:	0312      	lsls	r2, r2, #12
 8001a7c:	4314      	orrs	r4, r2
 8001a7e:	0324      	lsls	r4, r4, #12
 8001a80:	4a01      	ldr	r2, [pc, #4]	; (8001a88 <__aeabi_dmul+0x4cc>)
 8001a82:	0b24      	lsrs	r4, r4, #12
 8001a84:	e60a      	b.n	800169c <__aeabi_dmul+0xe0>
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	000007ff 	.word	0x000007ff
 8001a8c:	0000043e 	.word	0x0000043e
 8001a90:	0000041e 	.word	0x0000041e

08001a94 <__aeabi_dsub>:
 8001a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a96:	4657      	mov	r7, sl
 8001a98:	464e      	mov	r6, r9
 8001a9a:	4645      	mov	r5, r8
 8001a9c:	46de      	mov	lr, fp
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	b5e0      	push	{r5, r6, r7, lr}
 8001aa2:	001f      	movs	r7, r3
 8001aa4:	0010      	movs	r0, r2
 8001aa6:	030b      	lsls	r3, r1, #12
 8001aa8:	0f62      	lsrs	r2, r4, #29
 8001aaa:	004e      	lsls	r6, r1, #1
 8001aac:	0fcd      	lsrs	r5, r1, #31
 8001aae:	0a5b      	lsrs	r3, r3, #9
 8001ab0:	0339      	lsls	r1, r7, #12
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	0a49      	lsrs	r1, r1, #9
 8001ab6:	00e2      	lsls	r2, r4, #3
 8001ab8:	0f44      	lsrs	r4, r0, #29
 8001aba:	4321      	orrs	r1, r4
 8001abc:	4cc2      	ldr	r4, [pc, #776]	; (8001dc8 <__aeabi_dsub+0x334>)
 8001abe:	4691      	mov	r9, r2
 8001ac0:	4692      	mov	sl, r2
 8001ac2:	00c0      	lsls	r0, r0, #3
 8001ac4:	007a      	lsls	r2, r7, #1
 8001ac6:	4680      	mov	r8, r0
 8001ac8:	0d76      	lsrs	r6, r6, #21
 8001aca:	0d52      	lsrs	r2, r2, #21
 8001acc:	0fff      	lsrs	r7, r7, #31
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x40>
 8001ad2:	e0b4      	b.n	8001c3e <__aeabi_dsub+0x1aa>
 8001ad4:	2401      	movs	r4, #1
 8001ad6:	4067      	eors	r7, r4
 8001ad8:	46bb      	mov	fp, r7
 8001ada:	42bd      	cmp	r5, r7
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_dsub+0x4c>
 8001ade:	e088      	b.n	8001bf2 <__aeabi_dsub+0x15e>
 8001ae0:	1ab4      	subs	r4, r6, r2
 8001ae2:	46a4      	mov	ip, r4
 8001ae4:	2c00      	cmp	r4, #0
 8001ae6:	dc00      	bgt.n	8001aea <__aeabi_dsub+0x56>
 8001ae8:	e0b2      	b.n	8001c50 <__aeabi_dsub+0x1bc>
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x5c>
 8001aee:	e0c5      	b.n	8001c7c <__aeabi_dsub+0x1e8>
 8001af0:	4ab5      	ldr	r2, [pc, #724]	; (8001dc8 <__aeabi_dsub+0x334>)
 8001af2:	4296      	cmp	r6, r2
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x64>
 8001af6:	e28b      	b.n	8002010 <__aeabi_dsub+0x57c>
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	0412      	lsls	r2, r2, #16
 8001afc:	4311      	orrs	r1, r2
 8001afe:	4662      	mov	r2, ip
 8001b00:	2a38      	cmp	r2, #56	; 0x38
 8001b02:	dd00      	ble.n	8001b06 <__aeabi_dsub+0x72>
 8001b04:	e1a1      	b.n	8001e4a <__aeabi_dsub+0x3b6>
 8001b06:	2a1f      	cmp	r2, #31
 8001b08:	dd00      	ble.n	8001b0c <__aeabi_dsub+0x78>
 8001b0a:	e216      	b.n	8001f3a <__aeabi_dsub+0x4a6>
 8001b0c:	2720      	movs	r7, #32
 8001b0e:	000c      	movs	r4, r1
 8001b10:	1abf      	subs	r7, r7, r2
 8001b12:	40bc      	lsls	r4, r7
 8001b14:	0002      	movs	r2, r0
 8001b16:	46a0      	mov	r8, r4
 8001b18:	4664      	mov	r4, ip
 8001b1a:	40b8      	lsls	r0, r7
 8001b1c:	40e2      	lsrs	r2, r4
 8001b1e:	4644      	mov	r4, r8
 8001b20:	4314      	orrs	r4, r2
 8001b22:	0002      	movs	r2, r0
 8001b24:	1e50      	subs	r0, r2, #1
 8001b26:	4182      	sbcs	r2, r0
 8001b28:	4660      	mov	r0, ip
 8001b2a:	40c1      	lsrs	r1, r0
 8001b2c:	4322      	orrs	r2, r4
 8001b2e:	1a5b      	subs	r3, r3, r1
 8001b30:	4649      	mov	r1, r9
 8001b32:	1a8c      	subs	r4, r1, r2
 8001b34:	45a1      	cmp	r9, r4
 8001b36:	4192      	sbcs	r2, r2
 8001b38:	4252      	negs	r2, r2
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	4698      	mov	r8, r3
 8001b3e:	4643      	mov	r3, r8
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	d400      	bmi.n	8001b46 <__aeabi_dsub+0xb2>
 8001b44:	e117      	b.n	8001d76 <__aeabi_dsub+0x2e2>
 8001b46:	4643      	mov	r3, r8
 8001b48:	025b      	lsls	r3, r3, #9
 8001b4a:	0a5b      	lsrs	r3, r3, #9
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	4643      	mov	r3, r8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0xc2>
 8001b54:	e16c      	b.n	8001e30 <__aeabi_dsub+0x39c>
 8001b56:	4640      	mov	r0, r8
 8001b58:	f000 fc4c 	bl	80023f4 <__clzsi2>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	3a08      	subs	r2, #8
 8001b60:	2120      	movs	r1, #32
 8001b62:	0020      	movs	r0, r4
 8001b64:	4643      	mov	r3, r8
 8001b66:	1a89      	subs	r1, r1, r2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	40c8      	lsrs	r0, r1
 8001b6c:	4094      	lsls	r4, r2
 8001b6e:	4303      	orrs	r3, r0
 8001b70:	4296      	cmp	r6, r2
 8001b72:	dd00      	ble.n	8001b76 <__aeabi_dsub+0xe2>
 8001b74:	e157      	b.n	8001e26 <__aeabi_dsub+0x392>
 8001b76:	1b96      	subs	r6, r2, r6
 8001b78:	1c71      	adds	r1, r6, #1
 8001b7a:	291f      	cmp	r1, #31
 8001b7c:	dd00      	ble.n	8001b80 <__aeabi_dsub+0xec>
 8001b7e:	e1cb      	b.n	8001f18 <__aeabi_dsub+0x484>
 8001b80:	2220      	movs	r2, #32
 8001b82:	0018      	movs	r0, r3
 8001b84:	0026      	movs	r6, r4
 8001b86:	1a52      	subs	r2, r2, r1
 8001b88:	4094      	lsls	r4, r2
 8001b8a:	4090      	lsls	r0, r2
 8001b8c:	40ce      	lsrs	r6, r1
 8001b8e:	40cb      	lsrs	r3, r1
 8001b90:	1e62      	subs	r2, r4, #1
 8001b92:	4194      	sbcs	r4, r2
 8001b94:	4330      	orrs	r0, r6
 8001b96:	4698      	mov	r8, r3
 8001b98:	2600      	movs	r6, #0
 8001b9a:	4304      	orrs	r4, r0
 8001b9c:	0763      	lsls	r3, r4, #29
 8001b9e:	d009      	beq.n	8001bb4 <__aeabi_dsub+0x120>
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	4023      	ands	r3, r4
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d005      	beq.n	8001bb4 <__aeabi_dsub+0x120>
 8001ba8:	1d23      	adds	r3, r4, #4
 8001baa:	42a3      	cmp	r3, r4
 8001bac:	41a4      	sbcs	r4, r4
 8001bae:	4264      	negs	r4, r4
 8001bb0:	44a0      	add	r8, r4
 8001bb2:	001c      	movs	r4, r3
 8001bb4:	4643      	mov	r3, r8
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	d400      	bmi.n	8001bbc <__aeabi_dsub+0x128>
 8001bba:	e0df      	b.n	8001d7c <__aeabi_dsub+0x2e8>
 8001bbc:	4b82      	ldr	r3, [pc, #520]	; (8001dc8 <__aeabi_dsub+0x334>)
 8001bbe:	3601      	adds	r6, #1
 8001bc0:	429e      	cmp	r6, r3
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x132>
 8001bc4:	e0fb      	b.n	8001dbe <__aeabi_dsub+0x32a>
 8001bc6:	4642      	mov	r2, r8
 8001bc8:	4b80      	ldr	r3, [pc, #512]	; (8001dcc <__aeabi_dsub+0x338>)
 8001bca:	08e4      	lsrs	r4, r4, #3
 8001bcc:	401a      	ands	r2, r3
 8001bce:	0013      	movs	r3, r2
 8001bd0:	0571      	lsls	r1, r6, #21
 8001bd2:	0752      	lsls	r2, r2, #29
 8001bd4:	025b      	lsls	r3, r3, #9
 8001bd6:	4322      	orrs	r2, r4
 8001bd8:	0b1b      	lsrs	r3, r3, #12
 8001bda:	0d49      	lsrs	r1, r1, #21
 8001bdc:	0509      	lsls	r1, r1, #20
 8001bde:	07ed      	lsls	r5, r5, #31
 8001be0:	4319      	orrs	r1, r3
 8001be2:	4329      	orrs	r1, r5
 8001be4:	0010      	movs	r0, r2
 8001be6:	bcf0      	pop	{r4, r5, r6, r7}
 8001be8:	46bb      	mov	fp, r7
 8001bea:	46b2      	mov	sl, r6
 8001bec:	46a9      	mov	r9, r5
 8001bee:	46a0      	mov	r8, r4
 8001bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf2:	1ab4      	subs	r4, r6, r2
 8001bf4:	46a4      	mov	ip, r4
 8001bf6:	2c00      	cmp	r4, #0
 8001bf8:	dd58      	ble.n	8001cac <__aeabi_dsub+0x218>
 8001bfa:	2a00      	cmp	r2, #0
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x16c>
 8001bfe:	e09e      	b.n	8001d3e <__aeabi_dsub+0x2aa>
 8001c00:	4a71      	ldr	r2, [pc, #452]	; (8001dc8 <__aeabi_dsub+0x334>)
 8001c02:	4296      	cmp	r6, r2
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x174>
 8001c06:	e13b      	b.n	8001e80 <__aeabi_dsub+0x3ec>
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	0412      	lsls	r2, r2, #16
 8001c0c:	4311      	orrs	r1, r2
 8001c0e:	4662      	mov	r2, ip
 8001c10:	2a38      	cmp	r2, #56	; 0x38
 8001c12:	dd00      	ble.n	8001c16 <__aeabi_dsub+0x182>
 8001c14:	e0c1      	b.n	8001d9a <__aeabi_dsub+0x306>
 8001c16:	2a1f      	cmp	r2, #31
 8001c18:	dc00      	bgt.n	8001c1c <__aeabi_dsub+0x188>
 8001c1a:	e1bb      	b.n	8001f94 <__aeabi_dsub+0x500>
 8001c1c:	000c      	movs	r4, r1
 8001c1e:	3a20      	subs	r2, #32
 8001c20:	40d4      	lsrs	r4, r2
 8001c22:	0022      	movs	r2, r4
 8001c24:	4664      	mov	r4, ip
 8001c26:	2c20      	cmp	r4, #32
 8001c28:	d004      	beq.n	8001c34 <__aeabi_dsub+0x1a0>
 8001c2a:	2740      	movs	r7, #64	; 0x40
 8001c2c:	1b3f      	subs	r7, r7, r4
 8001c2e:	40b9      	lsls	r1, r7
 8001c30:	4308      	orrs	r0, r1
 8001c32:	4680      	mov	r8, r0
 8001c34:	4644      	mov	r4, r8
 8001c36:	1e61      	subs	r1, r4, #1
 8001c38:	418c      	sbcs	r4, r1
 8001c3a:	4314      	orrs	r4, r2
 8001c3c:	e0b1      	b.n	8001da2 <__aeabi_dsub+0x30e>
 8001c3e:	000c      	movs	r4, r1
 8001c40:	4304      	orrs	r4, r0
 8001c42:	d02a      	beq.n	8001c9a <__aeabi_dsub+0x206>
 8001c44:	46bb      	mov	fp, r7
 8001c46:	42bd      	cmp	r5, r7
 8001c48:	d02d      	beq.n	8001ca6 <__aeabi_dsub+0x212>
 8001c4a:	4c61      	ldr	r4, [pc, #388]	; (8001dd0 <__aeabi_dsub+0x33c>)
 8001c4c:	46a4      	mov	ip, r4
 8001c4e:	44b4      	add	ip, r6
 8001c50:	4664      	mov	r4, ip
 8001c52:	2c00      	cmp	r4, #0
 8001c54:	d05c      	beq.n	8001d10 <__aeabi_dsub+0x27c>
 8001c56:	1b94      	subs	r4, r2, r6
 8001c58:	46a4      	mov	ip, r4
 8001c5a:	2e00      	cmp	r6, #0
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_dsub+0x1cc>
 8001c5e:	e115      	b.n	8001e8c <__aeabi_dsub+0x3f8>
 8001c60:	464d      	mov	r5, r9
 8001c62:	431d      	orrs	r5, r3
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x1d4>
 8001c66:	e1c3      	b.n	8001ff0 <__aeabi_dsub+0x55c>
 8001c68:	1e65      	subs	r5, r4, #1
 8001c6a:	2c01      	cmp	r4, #1
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x1dc>
 8001c6e:	e20c      	b.n	800208a <__aeabi_dsub+0x5f6>
 8001c70:	4e55      	ldr	r6, [pc, #340]	; (8001dc8 <__aeabi_dsub+0x334>)
 8001c72:	42b4      	cmp	r4, r6
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x1e4>
 8001c76:	e1f8      	b.n	800206a <__aeabi_dsub+0x5d6>
 8001c78:	46ac      	mov	ip, r5
 8001c7a:	e10e      	b.n	8001e9a <__aeabi_dsub+0x406>
 8001c7c:	000a      	movs	r2, r1
 8001c7e:	4302      	orrs	r2, r0
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x1f0>
 8001c82:	e136      	b.n	8001ef2 <__aeabi_dsub+0x45e>
 8001c84:	0022      	movs	r2, r4
 8001c86:	3a01      	subs	r2, #1
 8001c88:	2c01      	cmp	r4, #1
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x1fa>
 8001c8c:	e1c6      	b.n	800201c <__aeabi_dsub+0x588>
 8001c8e:	4c4e      	ldr	r4, [pc, #312]	; (8001dc8 <__aeabi_dsub+0x334>)
 8001c90:	45a4      	cmp	ip, r4
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dsub+0x202>
 8001c94:	e0f4      	b.n	8001e80 <__aeabi_dsub+0x3ec>
 8001c96:	4694      	mov	ip, r2
 8001c98:	e731      	b.n	8001afe <__aeabi_dsub+0x6a>
 8001c9a:	2401      	movs	r4, #1
 8001c9c:	4067      	eors	r7, r4
 8001c9e:	46bb      	mov	fp, r7
 8001ca0:	42bd      	cmp	r5, r7
 8001ca2:	d000      	beq.n	8001ca6 <__aeabi_dsub+0x212>
 8001ca4:	e71c      	b.n	8001ae0 <__aeabi_dsub+0x4c>
 8001ca6:	4c4a      	ldr	r4, [pc, #296]	; (8001dd0 <__aeabi_dsub+0x33c>)
 8001ca8:	46a4      	mov	ip, r4
 8001caa:	44b4      	add	ip, r6
 8001cac:	4664      	mov	r4, ip
 8001cae:	2c00      	cmp	r4, #0
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x220>
 8001cb2:	e0cf      	b.n	8001e54 <__aeabi_dsub+0x3c0>
 8001cb4:	1b94      	subs	r4, r2, r6
 8001cb6:	46a4      	mov	ip, r4
 8001cb8:	2e00      	cmp	r6, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x22a>
 8001cbc:	e15c      	b.n	8001f78 <__aeabi_dsub+0x4e4>
 8001cbe:	4e42      	ldr	r6, [pc, #264]	; (8001dc8 <__aeabi_dsub+0x334>)
 8001cc0:	42b2      	cmp	r2, r6
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x232>
 8001cc4:	e1ec      	b.n	80020a0 <__aeabi_dsub+0x60c>
 8001cc6:	2680      	movs	r6, #128	; 0x80
 8001cc8:	0436      	lsls	r6, r6, #16
 8001cca:	4333      	orrs	r3, r6
 8001ccc:	4664      	mov	r4, ip
 8001cce:	2c38      	cmp	r4, #56	; 0x38
 8001cd0:	dd00      	ble.n	8001cd4 <__aeabi_dsub+0x240>
 8001cd2:	e1b3      	b.n	800203c <__aeabi_dsub+0x5a8>
 8001cd4:	2c1f      	cmp	r4, #31
 8001cd6:	dd00      	ble.n	8001cda <__aeabi_dsub+0x246>
 8001cd8:	e238      	b.n	800214c <__aeabi_dsub+0x6b8>
 8001cda:	2620      	movs	r6, #32
 8001cdc:	1b36      	subs	r6, r6, r4
 8001cde:	001c      	movs	r4, r3
 8001ce0:	40b4      	lsls	r4, r6
 8001ce2:	464f      	mov	r7, r9
 8001ce4:	46a0      	mov	r8, r4
 8001ce6:	4664      	mov	r4, ip
 8001ce8:	40e7      	lsrs	r7, r4
 8001cea:	4644      	mov	r4, r8
 8001cec:	433c      	orrs	r4, r7
 8001cee:	464f      	mov	r7, r9
 8001cf0:	40b7      	lsls	r7, r6
 8001cf2:	003e      	movs	r6, r7
 8001cf4:	1e77      	subs	r7, r6, #1
 8001cf6:	41be      	sbcs	r6, r7
 8001cf8:	4334      	orrs	r4, r6
 8001cfa:	4666      	mov	r6, ip
 8001cfc:	40f3      	lsrs	r3, r6
 8001cfe:	18c9      	adds	r1, r1, r3
 8001d00:	1824      	adds	r4, r4, r0
 8001d02:	4284      	cmp	r4, r0
 8001d04:	419b      	sbcs	r3, r3
 8001d06:	425b      	negs	r3, r3
 8001d08:	4698      	mov	r8, r3
 8001d0a:	0016      	movs	r6, r2
 8001d0c:	4488      	add	r8, r1
 8001d0e:	e04e      	b.n	8001dae <__aeabi_dsub+0x31a>
 8001d10:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <__aeabi_dsub+0x340>)
 8001d12:	1c74      	adds	r4, r6, #1
 8001d14:	4214      	tst	r4, r2
 8001d16:	d000      	beq.n	8001d1a <__aeabi_dsub+0x286>
 8001d18:	e0d6      	b.n	8001ec8 <__aeabi_dsub+0x434>
 8001d1a:	464a      	mov	r2, r9
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	2e00      	cmp	r6, #0
 8001d20:	d000      	beq.n	8001d24 <__aeabi_dsub+0x290>
 8001d22:	e15b      	b.n	8001fdc <__aeabi_dsub+0x548>
 8001d24:	2a00      	cmp	r2, #0
 8001d26:	d100      	bne.n	8001d2a <__aeabi_dsub+0x296>
 8001d28:	e1a5      	b.n	8002076 <__aeabi_dsub+0x5e2>
 8001d2a:	000a      	movs	r2, r1
 8001d2c:	4302      	orrs	r2, r0
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_dsub+0x29e>
 8001d30:	e1bb      	b.n	80020aa <__aeabi_dsub+0x616>
 8001d32:	464a      	mov	r2, r9
 8001d34:	0759      	lsls	r1, r3, #29
 8001d36:	08d2      	lsrs	r2, r2, #3
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	08db      	lsrs	r3, r3, #3
 8001d3c:	e027      	b.n	8001d8e <__aeabi_dsub+0x2fa>
 8001d3e:	000a      	movs	r2, r1
 8001d40:	4302      	orrs	r2, r0
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dsub+0x2b2>
 8001d44:	e174      	b.n	8002030 <__aeabi_dsub+0x59c>
 8001d46:	0022      	movs	r2, r4
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	2c01      	cmp	r4, #1
 8001d4c:	d005      	beq.n	8001d5a <__aeabi_dsub+0x2c6>
 8001d4e:	4c1e      	ldr	r4, [pc, #120]	; (8001dc8 <__aeabi_dsub+0x334>)
 8001d50:	45a4      	cmp	ip, r4
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0x2c2>
 8001d54:	e094      	b.n	8001e80 <__aeabi_dsub+0x3ec>
 8001d56:	4694      	mov	ip, r2
 8001d58:	e759      	b.n	8001c0e <__aeabi_dsub+0x17a>
 8001d5a:	4448      	add	r0, r9
 8001d5c:	4548      	cmp	r0, r9
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	185b      	adds	r3, r3, r1
 8001d62:	4698      	mov	r8, r3
 8001d64:	0004      	movs	r4, r0
 8001d66:	4252      	negs	r2, r2
 8001d68:	4490      	add	r8, r2
 8001d6a:	4643      	mov	r3, r8
 8001d6c:	2602      	movs	r6, #2
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	d500      	bpl.n	8001d74 <__aeabi_dsub+0x2e0>
 8001d72:	e0c4      	b.n	8001efe <__aeabi_dsub+0x46a>
 8001d74:	3e01      	subs	r6, #1
 8001d76:	0763      	lsls	r3, r4, #29
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dsub+0x2e8>
 8001d7a:	e711      	b.n	8001ba0 <__aeabi_dsub+0x10c>
 8001d7c:	4643      	mov	r3, r8
 8001d7e:	46b4      	mov	ip, r6
 8001d80:	0759      	lsls	r1, r3, #29
 8001d82:	08e2      	lsrs	r2, r4, #3
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08db      	lsrs	r3, r3, #3
 8001d88:	490f      	ldr	r1, [pc, #60]	; (8001dc8 <__aeabi_dsub+0x334>)
 8001d8a:	458c      	cmp	ip, r1
 8001d8c:	d040      	beq.n	8001e10 <__aeabi_dsub+0x37c>
 8001d8e:	4661      	mov	r1, ip
 8001d90:	031b      	lsls	r3, r3, #12
 8001d92:	0549      	lsls	r1, r1, #21
 8001d94:	0b1b      	lsrs	r3, r3, #12
 8001d96:	0d49      	lsrs	r1, r1, #21
 8001d98:	e720      	b.n	8001bdc <__aeabi_dsub+0x148>
 8001d9a:	4301      	orrs	r1, r0
 8001d9c:	000c      	movs	r4, r1
 8001d9e:	1e61      	subs	r1, r4, #1
 8001da0:	418c      	sbcs	r4, r1
 8001da2:	444c      	add	r4, r9
 8001da4:	454c      	cmp	r4, r9
 8001da6:	4192      	sbcs	r2, r2
 8001da8:	4252      	negs	r2, r2
 8001daa:	4690      	mov	r8, r2
 8001dac:	4498      	add	r8, r3
 8001dae:	4643      	mov	r3, r8
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	d5e0      	bpl.n	8001d76 <__aeabi_dsub+0x2e2>
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <__aeabi_dsub+0x334>)
 8001db6:	3601      	adds	r6, #1
 8001db8:	429e      	cmp	r6, r3
 8001dba:	d000      	beq.n	8001dbe <__aeabi_dsub+0x32a>
 8001dbc:	e09f      	b.n	8001efe <__aeabi_dsub+0x46a>
 8001dbe:	0031      	movs	r1, r6
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	e70a      	b.n	8001bdc <__aeabi_dsub+0x148>
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	000007ff 	.word	0x000007ff
 8001dcc:	ff7fffff 	.word	0xff7fffff
 8001dd0:	fffff801 	.word	0xfffff801
 8001dd4:	000007fe 	.word	0x000007fe
 8001dd8:	2a00      	cmp	r2, #0
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x34a>
 8001ddc:	e160      	b.n	80020a0 <__aeabi_dsub+0x60c>
 8001dde:	000a      	movs	r2, r1
 8001de0:	4302      	orrs	r2, r0
 8001de2:	d04d      	beq.n	8001e80 <__aeabi_dsub+0x3ec>
 8001de4:	464a      	mov	r2, r9
 8001de6:	075c      	lsls	r4, r3, #29
 8001de8:	08d2      	lsrs	r2, r2, #3
 8001dea:	4322      	orrs	r2, r4
 8001dec:	2480      	movs	r4, #128	; 0x80
 8001dee:	08db      	lsrs	r3, r3, #3
 8001df0:	0324      	lsls	r4, r4, #12
 8001df2:	4223      	tst	r3, r4
 8001df4:	d007      	beq.n	8001e06 <__aeabi_dsub+0x372>
 8001df6:	08ce      	lsrs	r6, r1, #3
 8001df8:	4226      	tst	r6, r4
 8001dfa:	d104      	bne.n	8001e06 <__aeabi_dsub+0x372>
 8001dfc:	465d      	mov	r5, fp
 8001dfe:	0033      	movs	r3, r6
 8001e00:	08c2      	lsrs	r2, r0, #3
 8001e02:	0749      	lsls	r1, r1, #29
 8001e04:	430a      	orrs	r2, r1
 8001e06:	0f51      	lsrs	r1, r2, #29
 8001e08:	00d2      	lsls	r2, r2, #3
 8001e0a:	08d2      	lsrs	r2, r2, #3
 8001e0c:	0749      	lsls	r1, r1, #29
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	0011      	movs	r1, r2
 8001e12:	4319      	orrs	r1, r3
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x384>
 8001e16:	e1c8      	b.n	80021aa <__aeabi_dsub+0x716>
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	0309      	lsls	r1, r1, #12
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	031b      	lsls	r3, r3, #12
 8001e20:	49d5      	ldr	r1, [pc, #852]	; (8002178 <__aeabi_dsub+0x6e4>)
 8001e22:	0b1b      	lsrs	r3, r3, #12
 8001e24:	e6da      	b.n	8001bdc <__aeabi_dsub+0x148>
 8001e26:	49d5      	ldr	r1, [pc, #852]	; (800217c <__aeabi_dsub+0x6e8>)
 8001e28:	1ab6      	subs	r6, r6, r2
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	4698      	mov	r8, r3
 8001e2e:	e6b5      	b.n	8001b9c <__aeabi_dsub+0x108>
 8001e30:	0020      	movs	r0, r4
 8001e32:	f000 fadf 	bl	80023f4 <__clzsi2>
 8001e36:	0002      	movs	r2, r0
 8001e38:	3218      	adds	r2, #24
 8001e3a:	2a1f      	cmp	r2, #31
 8001e3c:	dc00      	bgt.n	8001e40 <__aeabi_dsub+0x3ac>
 8001e3e:	e68f      	b.n	8001b60 <__aeabi_dsub+0xcc>
 8001e40:	0023      	movs	r3, r4
 8001e42:	3808      	subs	r0, #8
 8001e44:	4083      	lsls	r3, r0
 8001e46:	2400      	movs	r4, #0
 8001e48:	e692      	b.n	8001b70 <__aeabi_dsub+0xdc>
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	1e50      	subs	r0, r2, #1
 8001e50:	4182      	sbcs	r2, r0
 8001e52:	e66d      	b.n	8001b30 <__aeabi_dsub+0x9c>
 8001e54:	4cca      	ldr	r4, [pc, #808]	; (8002180 <__aeabi_dsub+0x6ec>)
 8001e56:	1c72      	adds	r2, r6, #1
 8001e58:	4222      	tst	r2, r4
 8001e5a:	d000      	beq.n	8001e5e <__aeabi_dsub+0x3ca>
 8001e5c:	e0ad      	b.n	8001fba <__aeabi_dsub+0x526>
 8001e5e:	464a      	mov	r2, r9
 8001e60:	431a      	orrs	r2, r3
 8001e62:	2e00      	cmp	r6, #0
 8001e64:	d1b8      	bne.n	8001dd8 <__aeabi_dsub+0x344>
 8001e66:	2a00      	cmp	r2, #0
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x3d8>
 8001e6a:	e158      	b.n	800211e <__aeabi_dsub+0x68a>
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	4302      	orrs	r2, r0
 8001e70:	d000      	beq.n	8001e74 <__aeabi_dsub+0x3e0>
 8001e72:	e159      	b.n	8002128 <__aeabi_dsub+0x694>
 8001e74:	464a      	mov	r2, r9
 8001e76:	0759      	lsls	r1, r3, #29
 8001e78:	08d2      	lsrs	r2, r2, #3
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	e786      	b.n	8001d8e <__aeabi_dsub+0x2fa>
 8001e80:	464a      	mov	r2, r9
 8001e82:	0759      	lsls	r1, r3, #29
 8001e84:	08d2      	lsrs	r2, r2, #3
 8001e86:	430a      	orrs	r2, r1
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	e7c1      	b.n	8001e10 <__aeabi_dsub+0x37c>
 8001e8c:	4dba      	ldr	r5, [pc, #744]	; (8002178 <__aeabi_dsub+0x6e4>)
 8001e8e:	42aa      	cmp	r2, r5
 8001e90:	d100      	bne.n	8001e94 <__aeabi_dsub+0x400>
 8001e92:	e11e      	b.n	80020d2 <__aeabi_dsub+0x63e>
 8001e94:	2580      	movs	r5, #128	; 0x80
 8001e96:	042d      	lsls	r5, r5, #16
 8001e98:	432b      	orrs	r3, r5
 8001e9a:	4664      	mov	r4, ip
 8001e9c:	2c38      	cmp	r4, #56	; 0x38
 8001e9e:	dc5d      	bgt.n	8001f5c <__aeabi_dsub+0x4c8>
 8001ea0:	2c1f      	cmp	r4, #31
 8001ea2:	dd00      	ble.n	8001ea6 <__aeabi_dsub+0x412>
 8001ea4:	e0d0      	b.n	8002048 <__aeabi_dsub+0x5b4>
 8001ea6:	2520      	movs	r5, #32
 8001ea8:	4667      	mov	r7, ip
 8001eaa:	1b2d      	subs	r5, r5, r4
 8001eac:	464e      	mov	r6, r9
 8001eae:	001c      	movs	r4, r3
 8001eb0:	40fe      	lsrs	r6, r7
 8001eb2:	40ac      	lsls	r4, r5
 8001eb4:	4334      	orrs	r4, r6
 8001eb6:	464e      	mov	r6, r9
 8001eb8:	40ae      	lsls	r6, r5
 8001eba:	0035      	movs	r5, r6
 8001ebc:	40fb      	lsrs	r3, r7
 8001ebe:	1e6e      	subs	r6, r5, #1
 8001ec0:	41b5      	sbcs	r5, r6
 8001ec2:	1ac9      	subs	r1, r1, r3
 8001ec4:	432c      	orrs	r4, r5
 8001ec6:	e04e      	b.n	8001f66 <__aeabi_dsub+0x4d2>
 8001ec8:	464a      	mov	r2, r9
 8001eca:	1a14      	subs	r4, r2, r0
 8001ecc:	45a1      	cmp	r9, r4
 8001ece:	4192      	sbcs	r2, r2
 8001ed0:	4252      	negs	r2, r2
 8001ed2:	4690      	mov	r8, r2
 8001ed4:	1a5f      	subs	r7, r3, r1
 8001ed6:	003a      	movs	r2, r7
 8001ed8:	4647      	mov	r7, r8
 8001eda:	1bd2      	subs	r2, r2, r7
 8001edc:	4690      	mov	r8, r2
 8001ede:	0212      	lsls	r2, r2, #8
 8001ee0:	d500      	bpl.n	8001ee4 <__aeabi_dsub+0x450>
 8001ee2:	e08b      	b.n	8001ffc <__aeabi_dsub+0x568>
 8001ee4:	4642      	mov	r2, r8
 8001ee6:	4322      	orrs	r2, r4
 8001ee8:	d000      	beq.n	8001eec <__aeabi_dsub+0x458>
 8001eea:	e630      	b.n	8001b4e <__aeabi_dsub+0xba>
 8001eec:	2300      	movs	r3, #0
 8001eee:	2500      	movs	r5, #0
 8001ef0:	e74d      	b.n	8001d8e <__aeabi_dsub+0x2fa>
 8001ef2:	464a      	mov	r2, r9
 8001ef4:	0759      	lsls	r1, r3, #29
 8001ef6:	08d2      	lsrs	r2, r2, #3
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	08db      	lsrs	r3, r3, #3
 8001efc:	e744      	b.n	8001d88 <__aeabi_dsub+0x2f4>
 8001efe:	4642      	mov	r2, r8
 8001f00:	4b9e      	ldr	r3, [pc, #632]	; (800217c <__aeabi_dsub+0x6e8>)
 8001f02:	0861      	lsrs	r1, r4, #1
 8001f04:	401a      	ands	r2, r3
 8001f06:	0013      	movs	r3, r2
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4014      	ands	r4, r2
 8001f0c:	430c      	orrs	r4, r1
 8001f0e:	07da      	lsls	r2, r3, #31
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	4698      	mov	r8, r3
 8001f14:	4314      	orrs	r4, r2
 8001f16:	e641      	b.n	8001b9c <__aeabi_dsub+0x108>
 8001f18:	001a      	movs	r2, r3
 8001f1a:	3e1f      	subs	r6, #31
 8001f1c:	40f2      	lsrs	r2, r6
 8001f1e:	0016      	movs	r6, r2
 8001f20:	2920      	cmp	r1, #32
 8001f22:	d003      	beq.n	8001f2c <__aeabi_dsub+0x498>
 8001f24:	2240      	movs	r2, #64	; 0x40
 8001f26:	1a51      	subs	r1, r2, r1
 8001f28:	408b      	lsls	r3, r1
 8001f2a:	431c      	orrs	r4, r3
 8001f2c:	1e62      	subs	r2, r4, #1
 8001f2e:	4194      	sbcs	r4, r2
 8001f30:	2300      	movs	r3, #0
 8001f32:	4334      	orrs	r4, r6
 8001f34:	4698      	mov	r8, r3
 8001f36:	2600      	movs	r6, #0
 8001f38:	e71d      	b.n	8001d76 <__aeabi_dsub+0x2e2>
 8001f3a:	000c      	movs	r4, r1
 8001f3c:	3a20      	subs	r2, #32
 8001f3e:	40d4      	lsrs	r4, r2
 8001f40:	0022      	movs	r2, r4
 8001f42:	4664      	mov	r4, ip
 8001f44:	2c20      	cmp	r4, #32
 8001f46:	d004      	beq.n	8001f52 <__aeabi_dsub+0x4be>
 8001f48:	2740      	movs	r7, #64	; 0x40
 8001f4a:	1b3f      	subs	r7, r7, r4
 8001f4c:	40b9      	lsls	r1, r7
 8001f4e:	4308      	orrs	r0, r1
 8001f50:	4680      	mov	r8, r0
 8001f52:	4644      	mov	r4, r8
 8001f54:	1e61      	subs	r1, r4, #1
 8001f56:	418c      	sbcs	r4, r1
 8001f58:	4322      	orrs	r2, r4
 8001f5a:	e5e9      	b.n	8001b30 <__aeabi_dsub+0x9c>
 8001f5c:	464c      	mov	r4, r9
 8001f5e:	4323      	orrs	r3, r4
 8001f60:	001c      	movs	r4, r3
 8001f62:	1e63      	subs	r3, r4, #1
 8001f64:	419c      	sbcs	r4, r3
 8001f66:	1b04      	subs	r4, r0, r4
 8001f68:	42a0      	cmp	r0, r4
 8001f6a:	419b      	sbcs	r3, r3
 8001f6c:	425b      	negs	r3, r3
 8001f6e:	1acb      	subs	r3, r1, r3
 8001f70:	4698      	mov	r8, r3
 8001f72:	465d      	mov	r5, fp
 8001f74:	0016      	movs	r6, r2
 8001f76:	e5e2      	b.n	8001b3e <__aeabi_dsub+0xaa>
 8001f78:	464e      	mov	r6, r9
 8001f7a:	431e      	orrs	r6, r3
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x4ec>
 8001f7e:	e0ae      	b.n	80020de <__aeabi_dsub+0x64a>
 8001f80:	1e66      	subs	r6, r4, #1
 8001f82:	2c01      	cmp	r4, #1
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x4f4>
 8001f86:	e0fd      	b.n	8002184 <__aeabi_dsub+0x6f0>
 8001f88:	4f7b      	ldr	r7, [pc, #492]	; (8002178 <__aeabi_dsub+0x6e4>)
 8001f8a:	42bc      	cmp	r4, r7
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x4fc>
 8001f8e:	e107      	b.n	80021a0 <__aeabi_dsub+0x70c>
 8001f90:	46b4      	mov	ip, r6
 8001f92:	e69b      	b.n	8001ccc <__aeabi_dsub+0x238>
 8001f94:	4664      	mov	r4, ip
 8001f96:	2220      	movs	r2, #32
 8001f98:	1b12      	subs	r2, r2, r4
 8001f9a:	000c      	movs	r4, r1
 8001f9c:	4094      	lsls	r4, r2
 8001f9e:	0007      	movs	r7, r0
 8001fa0:	4090      	lsls	r0, r2
 8001fa2:	46a0      	mov	r8, r4
 8001fa4:	4664      	mov	r4, ip
 8001fa6:	1e42      	subs	r2, r0, #1
 8001fa8:	4190      	sbcs	r0, r2
 8001faa:	4662      	mov	r2, ip
 8001fac:	40e7      	lsrs	r7, r4
 8001fae:	4644      	mov	r4, r8
 8001fb0:	40d1      	lsrs	r1, r2
 8001fb2:	433c      	orrs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	185b      	adds	r3, r3, r1
 8001fb8:	e6f3      	b.n	8001da2 <__aeabi_dsub+0x30e>
 8001fba:	4c6f      	ldr	r4, [pc, #444]	; (8002178 <__aeabi_dsub+0x6e4>)
 8001fbc:	42a2      	cmp	r2, r4
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x52e>
 8001fc0:	e0d5      	b.n	800216e <__aeabi_dsub+0x6da>
 8001fc2:	4448      	add	r0, r9
 8001fc4:	185b      	adds	r3, r3, r1
 8001fc6:	4548      	cmp	r0, r9
 8001fc8:	4189      	sbcs	r1, r1
 8001fca:	4249      	negs	r1, r1
 8001fcc:	185b      	adds	r3, r3, r1
 8001fce:	07dc      	lsls	r4, r3, #31
 8001fd0:	0840      	lsrs	r0, r0, #1
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	4698      	mov	r8, r3
 8001fd6:	0016      	movs	r6, r2
 8001fd8:	4304      	orrs	r4, r0
 8001fda:	e6cc      	b.n	8001d76 <__aeabi_dsub+0x2e2>
 8001fdc:	2a00      	cmp	r2, #0
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_dsub+0x54e>
 8001fe0:	e082      	b.n	80020e8 <__aeabi_dsub+0x654>
 8001fe2:	000a      	movs	r2, r1
 8001fe4:	4302      	orrs	r2, r0
 8001fe6:	d140      	bne.n	800206a <__aeabi_dsub+0x5d6>
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	2500      	movs	r5, #0
 8001fec:	031b      	lsls	r3, r3, #12
 8001fee:	e713      	b.n	8001e18 <__aeabi_dsub+0x384>
 8001ff0:	074b      	lsls	r3, r1, #29
 8001ff2:	08c2      	lsrs	r2, r0, #3
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	465d      	mov	r5, fp
 8001ff8:	08cb      	lsrs	r3, r1, #3
 8001ffa:	e6c5      	b.n	8001d88 <__aeabi_dsub+0x2f4>
 8001ffc:	464a      	mov	r2, r9
 8001ffe:	1a84      	subs	r4, r0, r2
 8002000:	42a0      	cmp	r0, r4
 8002002:	4192      	sbcs	r2, r2
 8002004:	1acb      	subs	r3, r1, r3
 8002006:	4252      	negs	r2, r2
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	4698      	mov	r8, r3
 800200c:	465d      	mov	r5, fp
 800200e:	e59e      	b.n	8001b4e <__aeabi_dsub+0xba>
 8002010:	464a      	mov	r2, r9
 8002012:	0759      	lsls	r1, r3, #29
 8002014:	08d2      	lsrs	r2, r2, #3
 8002016:	430a      	orrs	r2, r1
 8002018:	08db      	lsrs	r3, r3, #3
 800201a:	e6f9      	b.n	8001e10 <__aeabi_dsub+0x37c>
 800201c:	464a      	mov	r2, r9
 800201e:	1a14      	subs	r4, r2, r0
 8002020:	45a1      	cmp	r9, r4
 8002022:	4192      	sbcs	r2, r2
 8002024:	1a5b      	subs	r3, r3, r1
 8002026:	4252      	negs	r2, r2
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	4698      	mov	r8, r3
 800202c:	2601      	movs	r6, #1
 800202e:	e586      	b.n	8001b3e <__aeabi_dsub+0xaa>
 8002030:	464a      	mov	r2, r9
 8002032:	0759      	lsls	r1, r3, #29
 8002034:	08d2      	lsrs	r2, r2, #3
 8002036:	430a      	orrs	r2, r1
 8002038:	08db      	lsrs	r3, r3, #3
 800203a:	e6a5      	b.n	8001d88 <__aeabi_dsub+0x2f4>
 800203c:	464c      	mov	r4, r9
 800203e:	4323      	orrs	r3, r4
 8002040:	001c      	movs	r4, r3
 8002042:	1e63      	subs	r3, r4, #1
 8002044:	419c      	sbcs	r4, r3
 8002046:	e65b      	b.n	8001d00 <__aeabi_dsub+0x26c>
 8002048:	4665      	mov	r5, ip
 800204a:	001e      	movs	r6, r3
 800204c:	3d20      	subs	r5, #32
 800204e:	40ee      	lsrs	r6, r5
 8002050:	2c20      	cmp	r4, #32
 8002052:	d005      	beq.n	8002060 <__aeabi_dsub+0x5cc>
 8002054:	2540      	movs	r5, #64	; 0x40
 8002056:	1b2d      	subs	r5, r5, r4
 8002058:	40ab      	lsls	r3, r5
 800205a:	464c      	mov	r4, r9
 800205c:	431c      	orrs	r4, r3
 800205e:	46a2      	mov	sl, r4
 8002060:	4654      	mov	r4, sl
 8002062:	1e63      	subs	r3, r4, #1
 8002064:	419c      	sbcs	r4, r3
 8002066:	4334      	orrs	r4, r6
 8002068:	e77d      	b.n	8001f66 <__aeabi_dsub+0x4d2>
 800206a:	074b      	lsls	r3, r1, #29
 800206c:	08c2      	lsrs	r2, r0, #3
 800206e:	431a      	orrs	r2, r3
 8002070:	465d      	mov	r5, fp
 8002072:	08cb      	lsrs	r3, r1, #3
 8002074:	e6cc      	b.n	8001e10 <__aeabi_dsub+0x37c>
 8002076:	000a      	movs	r2, r1
 8002078:	4302      	orrs	r2, r0
 800207a:	d100      	bne.n	800207e <__aeabi_dsub+0x5ea>
 800207c:	e736      	b.n	8001eec <__aeabi_dsub+0x458>
 800207e:	074b      	lsls	r3, r1, #29
 8002080:	08c2      	lsrs	r2, r0, #3
 8002082:	431a      	orrs	r2, r3
 8002084:	465d      	mov	r5, fp
 8002086:	08cb      	lsrs	r3, r1, #3
 8002088:	e681      	b.n	8001d8e <__aeabi_dsub+0x2fa>
 800208a:	464a      	mov	r2, r9
 800208c:	1a84      	subs	r4, r0, r2
 800208e:	42a0      	cmp	r0, r4
 8002090:	4192      	sbcs	r2, r2
 8002092:	1acb      	subs	r3, r1, r3
 8002094:	4252      	negs	r2, r2
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	4698      	mov	r8, r3
 800209a:	465d      	mov	r5, fp
 800209c:	2601      	movs	r6, #1
 800209e:	e54e      	b.n	8001b3e <__aeabi_dsub+0xaa>
 80020a0:	074b      	lsls	r3, r1, #29
 80020a2:	08c2      	lsrs	r2, r0, #3
 80020a4:	431a      	orrs	r2, r3
 80020a6:	08cb      	lsrs	r3, r1, #3
 80020a8:	e6b2      	b.n	8001e10 <__aeabi_dsub+0x37c>
 80020aa:	464a      	mov	r2, r9
 80020ac:	1a14      	subs	r4, r2, r0
 80020ae:	45a1      	cmp	r9, r4
 80020b0:	4192      	sbcs	r2, r2
 80020b2:	1a5f      	subs	r7, r3, r1
 80020b4:	4252      	negs	r2, r2
 80020b6:	1aba      	subs	r2, r7, r2
 80020b8:	4690      	mov	r8, r2
 80020ba:	0212      	lsls	r2, r2, #8
 80020bc:	d56b      	bpl.n	8002196 <__aeabi_dsub+0x702>
 80020be:	464a      	mov	r2, r9
 80020c0:	1a84      	subs	r4, r0, r2
 80020c2:	42a0      	cmp	r0, r4
 80020c4:	4192      	sbcs	r2, r2
 80020c6:	1acb      	subs	r3, r1, r3
 80020c8:	4252      	negs	r2, r2
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	4698      	mov	r8, r3
 80020ce:	465d      	mov	r5, fp
 80020d0:	e564      	b.n	8001b9c <__aeabi_dsub+0x108>
 80020d2:	074b      	lsls	r3, r1, #29
 80020d4:	08c2      	lsrs	r2, r0, #3
 80020d6:	431a      	orrs	r2, r3
 80020d8:	465d      	mov	r5, fp
 80020da:	08cb      	lsrs	r3, r1, #3
 80020dc:	e698      	b.n	8001e10 <__aeabi_dsub+0x37c>
 80020de:	074b      	lsls	r3, r1, #29
 80020e0:	08c2      	lsrs	r2, r0, #3
 80020e2:	431a      	orrs	r2, r3
 80020e4:	08cb      	lsrs	r3, r1, #3
 80020e6:	e64f      	b.n	8001d88 <__aeabi_dsub+0x2f4>
 80020e8:	000a      	movs	r2, r1
 80020ea:	4302      	orrs	r2, r0
 80020ec:	d090      	beq.n	8002010 <__aeabi_dsub+0x57c>
 80020ee:	464a      	mov	r2, r9
 80020f0:	075c      	lsls	r4, r3, #29
 80020f2:	08d2      	lsrs	r2, r2, #3
 80020f4:	4314      	orrs	r4, r2
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	08db      	lsrs	r3, r3, #3
 80020fa:	0312      	lsls	r2, r2, #12
 80020fc:	4213      	tst	r3, r2
 80020fe:	d008      	beq.n	8002112 <__aeabi_dsub+0x67e>
 8002100:	08ce      	lsrs	r6, r1, #3
 8002102:	4216      	tst	r6, r2
 8002104:	d105      	bne.n	8002112 <__aeabi_dsub+0x67e>
 8002106:	08c0      	lsrs	r0, r0, #3
 8002108:	0749      	lsls	r1, r1, #29
 800210a:	4308      	orrs	r0, r1
 800210c:	0004      	movs	r4, r0
 800210e:	465d      	mov	r5, fp
 8002110:	0033      	movs	r3, r6
 8002112:	0f61      	lsrs	r1, r4, #29
 8002114:	00e2      	lsls	r2, r4, #3
 8002116:	0749      	lsls	r1, r1, #29
 8002118:	08d2      	lsrs	r2, r2, #3
 800211a:	430a      	orrs	r2, r1
 800211c:	e678      	b.n	8001e10 <__aeabi_dsub+0x37c>
 800211e:	074b      	lsls	r3, r1, #29
 8002120:	08c2      	lsrs	r2, r0, #3
 8002122:	431a      	orrs	r2, r3
 8002124:	08cb      	lsrs	r3, r1, #3
 8002126:	e632      	b.n	8001d8e <__aeabi_dsub+0x2fa>
 8002128:	4448      	add	r0, r9
 800212a:	185b      	adds	r3, r3, r1
 800212c:	4548      	cmp	r0, r9
 800212e:	4192      	sbcs	r2, r2
 8002130:	4698      	mov	r8, r3
 8002132:	4252      	negs	r2, r2
 8002134:	4490      	add	r8, r2
 8002136:	4643      	mov	r3, r8
 8002138:	0004      	movs	r4, r0
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	d400      	bmi.n	8002140 <__aeabi_dsub+0x6ac>
 800213e:	e61a      	b.n	8001d76 <__aeabi_dsub+0x2e2>
 8002140:	4642      	mov	r2, r8
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <__aeabi_dsub+0x6e8>)
 8002144:	2601      	movs	r6, #1
 8002146:	401a      	ands	r2, r3
 8002148:	4690      	mov	r8, r2
 800214a:	e614      	b.n	8001d76 <__aeabi_dsub+0x2e2>
 800214c:	4666      	mov	r6, ip
 800214e:	001f      	movs	r7, r3
 8002150:	3e20      	subs	r6, #32
 8002152:	40f7      	lsrs	r7, r6
 8002154:	2c20      	cmp	r4, #32
 8002156:	d005      	beq.n	8002164 <__aeabi_dsub+0x6d0>
 8002158:	2640      	movs	r6, #64	; 0x40
 800215a:	1b36      	subs	r6, r6, r4
 800215c:	40b3      	lsls	r3, r6
 800215e:	464c      	mov	r4, r9
 8002160:	431c      	orrs	r4, r3
 8002162:	46a2      	mov	sl, r4
 8002164:	4654      	mov	r4, sl
 8002166:	1e63      	subs	r3, r4, #1
 8002168:	419c      	sbcs	r4, r3
 800216a:	433c      	orrs	r4, r7
 800216c:	e5c8      	b.n	8001d00 <__aeabi_dsub+0x26c>
 800216e:	0011      	movs	r1, r2
 8002170:	2300      	movs	r3, #0
 8002172:	2200      	movs	r2, #0
 8002174:	e532      	b.n	8001bdc <__aeabi_dsub+0x148>
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	000007ff 	.word	0x000007ff
 800217c:	ff7fffff 	.word	0xff7fffff
 8002180:	000007fe 	.word	0x000007fe
 8002184:	464a      	mov	r2, r9
 8002186:	1814      	adds	r4, r2, r0
 8002188:	4284      	cmp	r4, r0
 800218a:	4192      	sbcs	r2, r2
 800218c:	185b      	adds	r3, r3, r1
 800218e:	4698      	mov	r8, r3
 8002190:	4252      	negs	r2, r2
 8002192:	4490      	add	r8, r2
 8002194:	e5e9      	b.n	8001d6a <__aeabi_dsub+0x2d6>
 8002196:	4642      	mov	r2, r8
 8002198:	4322      	orrs	r2, r4
 800219a:	d100      	bne.n	800219e <__aeabi_dsub+0x70a>
 800219c:	e6a6      	b.n	8001eec <__aeabi_dsub+0x458>
 800219e:	e5ea      	b.n	8001d76 <__aeabi_dsub+0x2e2>
 80021a0:	074b      	lsls	r3, r1, #29
 80021a2:	08c2      	lsrs	r2, r0, #3
 80021a4:	431a      	orrs	r2, r3
 80021a6:	08cb      	lsrs	r3, r1, #3
 80021a8:	e632      	b.n	8001e10 <__aeabi_dsub+0x37c>
 80021aa:	2200      	movs	r2, #0
 80021ac:	4901      	ldr	r1, [pc, #4]	; (80021b4 <__aeabi_dsub+0x720>)
 80021ae:	0013      	movs	r3, r2
 80021b0:	e514      	b.n	8001bdc <__aeabi_dsub+0x148>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__aeabi_dcmpun>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0005      	movs	r5, r0
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021be:	030c      	lsls	r4, r1, #12
 80021c0:	0016      	movs	r6, r2
 80021c2:	0049      	lsls	r1, r1, #1
 80021c4:	031a      	lsls	r2, r3, #12
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	0b24      	lsrs	r4, r4, #12
 80021ca:	0d49      	lsrs	r1, r1, #21
 80021cc:	0b12      	lsrs	r2, r2, #12
 80021ce:	0d5b      	lsrs	r3, r3, #21
 80021d0:	4281      	cmp	r1, r0
 80021d2:	d008      	beq.n	80021e6 <__aeabi_dcmpun+0x2e>
 80021d4:	4906      	ldr	r1, [pc, #24]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021d6:	2000      	movs	r0, #0
 80021d8:	428b      	cmp	r3, r1
 80021da:	d103      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021dc:	4332      	orrs	r2, r6
 80021de:	0010      	movs	r0, r2
 80021e0:	1e42      	subs	r2, r0, #1
 80021e2:	4190      	sbcs	r0, r2
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	2001      	movs	r0, #1
 80021e8:	432c      	orrs	r4, r5
 80021ea:	d1fb      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021ec:	e7f2      	b.n	80021d4 <__aeabi_dcmpun+0x1c>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__aeabi_i2d>:
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d016      	beq.n	8002228 <__aeabi_i2d+0x34>
 80021fa:	17c3      	asrs	r3, r0, #31
 80021fc:	18c5      	adds	r5, r0, r3
 80021fe:	405d      	eors	r5, r3
 8002200:	0fc4      	lsrs	r4, r0, #31
 8002202:	0028      	movs	r0, r5
 8002204:	f000 f8f6 	bl	80023f4 <__clzsi2>
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <__aeabi_i2d+0x5c>)
 800220a:	1a12      	subs	r2, r2, r0
 800220c:	280a      	cmp	r0, #10
 800220e:	dc16      	bgt.n	800223e <__aeabi_i2d+0x4a>
 8002210:	0003      	movs	r3, r0
 8002212:	002e      	movs	r6, r5
 8002214:	3315      	adds	r3, #21
 8002216:	409e      	lsls	r6, r3
 8002218:	230b      	movs	r3, #11
 800221a:	1a18      	subs	r0, r3, r0
 800221c:	40c5      	lsrs	r5, r0
 800221e:	0553      	lsls	r3, r2, #21
 8002220:	032d      	lsls	r5, r5, #12
 8002222:	0b2d      	lsrs	r5, r5, #12
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	e003      	b.n	8002230 <__aeabi_i2d+0x3c>
 8002228:	2400      	movs	r4, #0
 800222a:	2300      	movs	r3, #0
 800222c:	2500      	movs	r5, #0
 800222e:	2600      	movs	r6, #0
 8002230:	051b      	lsls	r3, r3, #20
 8002232:	432b      	orrs	r3, r5
 8002234:	07e4      	lsls	r4, r4, #31
 8002236:	4323      	orrs	r3, r4
 8002238:	0030      	movs	r0, r6
 800223a:	0019      	movs	r1, r3
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	380b      	subs	r0, #11
 8002240:	4085      	lsls	r5, r0
 8002242:	0553      	lsls	r3, r2, #21
 8002244:	032d      	lsls	r5, r5, #12
 8002246:	2600      	movs	r6, #0
 8002248:	0b2d      	lsrs	r5, r5, #12
 800224a:	0d5b      	lsrs	r3, r3, #21
 800224c:	e7f0      	b.n	8002230 <__aeabi_i2d+0x3c>
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	0000041e 	.word	0x0000041e

08002254 <__aeabi_f2d>:
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	0043      	lsls	r3, r0, #1
 8002258:	0246      	lsls	r6, r0, #9
 800225a:	0fc4      	lsrs	r4, r0, #31
 800225c:	20fe      	movs	r0, #254	; 0xfe
 800225e:	0e1b      	lsrs	r3, r3, #24
 8002260:	1c59      	adds	r1, r3, #1
 8002262:	0a75      	lsrs	r5, r6, #9
 8002264:	4208      	tst	r0, r1
 8002266:	d00c      	beq.n	8002282 <__aeabi_f2d+0x2e>
 8002268:	22e0      	movs	r2, #224	; 0xe0
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	4694      	mov	ip, r2
 800226e:	076d      	lsls	r5, r5, #29
 8002270:	0b36      	lsrs	r6, r6, #12
 8002272:	4463      	add	r3, ip
 8002274:	051b      	lsls	r3, r3, #20
 8002276:	4333      	orrs	r3, r6
 8002278:	07e4      	lsls	r4, r4, #31
 800227a:	4323      	orrs	r3, r4
 800227c:	0028      	movs	r0, r5
 800227e:	0019      	movs	r1, r3
 8002280:	bd70      	pop	{r4, r5, r6, pc}
 8002282:	2b00      	cmp	r3, #0
 8002284:	d114      	bne.n	80022b0 <__aeabi_f2d+0x5c>
 8002286:	2d00      	cmp	r5, #0
 8002288:	d01b      	beq.n	80022c2 <__aeabi_f2d+0x6e>
 800228a:	0028      	movs	r0, r5
 800228c:	f000 f8b2 	bl	80023f4 <__clzsi2>
 8002290:	280a      	cmp	r0, #10
 8002292:	dc1c      	bgt.n	80022ce <__aeabi_f2d+0x7a>
 8002294:	230b      	movs	r3, #11
 8002296:	002a      	movs	r2, r5
 8002298:	1a1b      	subs	r3, r3, r0
 800229a:	40da      	lsrs	r2, r3
 800229c:	0003      	movs	r3, r0
 800229e:	3315      	adds	r3, #21
 80022a0:	409d      	lsls	r5, r3
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <__aeabi_f2d+0x88>)
 80022a4:	0312      	lsls	r2, r2, #12
 80022a6:	1a1b      	subs	r3, r3, r0
 80022a8:	055b      	lsls	r3, r3, #21
 80022aa:	0b16      	lsrs	r6, r2, #12
 80022ac:	0d5b      	lsrs	r3, r3, #21
 80022ae:	e7e1      	b.n	8002274 <__aeabi_f2d+0x20>
 80022b0:	2d00      	cmp	r5, #0
 80022b2:	d009      	beq.n	80022c8 <__aeabi_f2d+0x74>
 80022b4:	0b32      	lsrs	r2, r6, #12
 80022b6:	2680      	movs	r6, #128	; 0x80
 80022b8:	0336      	lsls	r6, r6, #12
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <__aeabi_f2d+0x8c>)
 80022bc:	076d      	lsls	r5, r5, #29
 80022be:	4316      	orrs	r6, r2
 80022c0:	e7d8      	b.n	8002274 <__aeabi_f2d+0x20>
 80022c2:	2300      	movs	r3, #0
 80022c4:	2600      	movs	r6, #0
 80022c6:	e7d5      	b.n	8002274 <__aeabi_f2d+0x20>
 80022c8:	2600      	movs	r6, #0
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <__aeabi_f2d+0x8c>)
 80022cc:	e7d2      	b.n	8002274 <__aeabi_f2d+0x20>
 80022ce:	0003      	movs	r3, r0
 80022d0:	002a      	movs	r2, r5
 80022d2:	3b0b      	subs	r3, #11
 80022d4:	409a      	lsls	r2, r3
 80022d6:	2500      	movs	r5, #0
 80022d8:	e7e3      	b.n	80022a2 <__aeabi_f2d+0x4e>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	00000389 	.word	0x00000389
 80022e0:	000007ff 	.word	0x000007ff

080022e4 <__aeabi_d2f>:
 80022e4:	0002      	movs	r2, r0
 80022e6:	004b      	lsls	r3, r1, #1
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	0308      	lsls	r0, r1, #12
 80022ec:	0d5b      	lsrs	r3, r3, #21
 80022ee:	4e3d      	ldr	r6, [pc, #244]	; (80023e4 <__aeabi_d2f+0x100>)
 80022f0:	0fcc      	lsrs	r4, r1, #31
 80022f2:	0a40      	lsrs	r0, r0, #9
 80022f4:	0f51      	lsrs	r1, r2, #29
 80022f6:	1c5f      	adds	r7, r3, #1
 80022f8:	4308      	orrs	r0, r1
 80022fa:	00d5      	lsls	r5, r2, #3
 80022fc:	4237      	tst	r7, r6
 80022fe:	d00a      	beq.n	8002316 <__aeabi_d2f+0x32>
 8002300:	4939      	ldr	r1, [pc, #228]	; (80023e8 <__aeabi_d2f+0x104>)
 8002302:	185e      	adds	r6, r3, r1
 8002304:	2efe      	cmp	r6, #254	; 0xfe
 8002306:	dd16      	ble.n	8002336 <__aeabi_d2f+0x52>
 8002308:	23ff      	movs	r3, #255	; 0xff
 800230a:	2100      	movs	r1, #0
 800230c:	05db      	lsls	r3, r3, #23
 800230e:	430b      	orrs	r3, r1
 8002310:	07e0      	lsls	r0, r4, #31
 8002312:	4318      	orrs	r0, r3
 8002314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <__aeabi_d2f+0x44>
 800231a:	4328      	orrs	r0, r5
 800231c:	d027      	beq.n	800236e <__aeabi_d2f+0x8a>
 800231e:	2105      	movs	r1, #5
 8002320:	0189      	lsls	r1, r1, #6
 8002322:	0a49      	lsrs	r1, r1, #9
 8002324:	b2db      	uxtb	r3, r3
 8002326:	e7f1      	b.n	800230c <__aeabi_d2f+0x28>
 8002328:	4305      	orrs	r5, r0
 800232a:	d0ed      	beq.n	8002308 <__aeabi_d2f+0x24>
 800232c:	2180      	movs	r1, #128	; 0x80
 800232e:	03c9      	lsls	r1, r1, #15
 8002330:	23ff      	movs	r3, #255	; 0xff
 8002332:	4301      	orrs	r1, r0
 8002334:	e7ea      	b.n	800230c <__aeabi_d2f+0x28>
 8002336:	2e00      	cmp	r6, #0
 8002338:	dd1c      	ble.n	8002374 <__aeabi_d2f+0x90>
 800233a:	0192      	lsls	r2, r2, #6
 800233c:	0011      	movs	r1, r2
 800233e:	1e4a      	subs	r2, r1, #1
 8002340:	4191      	sbcs	r1, r2
 8002342:	00c0      	lsls	r0, r0, #3
 8002344:	0f6d      	lsrs	r5, r5, #29
 8002346:	4301      	orrs	r1, r0
 8002348:	4329      	orrs	r1, r5
 800234a:	074b      	lsls	r3, r1, #29
 800234c:	d048      	beq.n	80023e0 <__aeabi_d2f+0xfc>
 800234e:	230f      	movs	r3, #15
 8002350:	400b      	ands	r3, r1
 8002352:	2b04      	cmp	r3, #4
 8002354:	d000      	beq.n	8002358 <__aeabi_d2f+0x74>
 8002356:	3104      	adds	r1, #4
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	04db      	lsls	r3, r3, #19
 800235c:	400b      	ands	r3, r1
 800235e:	d03f      	beq.n	80023e0 <__aeabi_d2f+0xfc>
 8002360:	1c72      	adds	r2, r6, #1
 8002362:	2efe      	cmp	r6, #254	; 0xfe
 8002364:	d0d0      	beq.n	8002308 <__aeabi_d2f+0x24>
 8002366:	0189      	lsls	r1, r1, #6
 8002368:	0a49      	lsrs	r1, r1, #9
 800236a:	b2d3      	uxtb	r3, r2
 800236c:	e7ce      	b.n	800230c <__aeabi_d2f+0x28>
 800236e:	2300      	movs	r3, #0
 8002370:	2100      	movs	r1, #0
 8002372:	e7cb      	b.n	800230c <__aeabi_d2f+0x28>
 8002374:	0032      	movs	r2, r6
 8002376:	3217      	adds	r2, #23
 8002378:	db22      	blt.n	80023c0 <__aeabi_d2f+0xdc>
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	221e      	movs	r2, #30
 800237e:	0409      	lsls	r1, r1, #16
 8002380:	4308      	orrs	r0, r1
 8002382:	1b92      	subs	r2, r2, r6
 8002384:	2a1f      	cmp	r2, #31
 8002386:	dd1d      	ble.n	80023c4 <__aeabi_d2f+0xe0>
 8002388:	2102      	movs	r1, #2
 800238a:	4249      	negs	r1, r1
 800238c:	1b8e      	subs	r6, r1, r6
 800238e:	0001      	movs	r1, r0
 8002390:	40f1      	lsrs	r1, r6
 8002392:	000e      	movs	r6, r1
 8002394:	2a20      	cmp	r2, #32
 8002396:	d004      	beq.n	80023a2 <__aeabi_d2f+0xbe>
 8002398:	4a14      	ldr	r2, [pc, #80]	; (80023ec <__aeabi_d2f+0x108>)
 800239a:	4694      	mov	ip, r2
 800239c:	4463      	add	r3, ip
 800239e:	4098      	lsls	r0, r3
 80023a0:	4305      	orrs	r5, r0
 80023a2:	0029      	movs	r1, r5
 80023a4:	1e4d      	subs	r5, r1, #1
 80023a6:	41a9      	sbcs	r1, r5
 80023a8:	4331      	orrs	r1, r6
 80023aa:	2600      	movs	r6, #0
 80023ac:	074b      	lsls	r3, r1, #29
 80023ae:	d1ce      	bne.n	800234e <__aeabi_d2f+0x6a>
 80023b0:	2080      	movs	r0, #128	; 0x80
 80023b2:	000b      	movs	r3, r1
 80023b4:	04c0      	lsls	r0, r0, #19
 80023b6:	2201      	movs	r2, #1
 80023b8:	4003      	ands	r3, r0
 80023ba:	4201      	tst	r1, r0
 80023bc:	d1d3      	bne.n	8002366 <__aeabi_d2f+0x82>
 80023be:	e7af      	b.n	8002320 <__aeabi_d2f+0x3c>
 80023c0:	2300      	movs	r3, #0
 80023c2:	e7ac      	b.n	800231e <__aeabi_d2f+0x3a>
 80023c4:	490a      	ldr	r1, [pc, #40]	; (80023f0 <__aeabi_d2f+0x10c>)
 80023c6:	468c      	mov	ip, r1
 80023c8:	0029      	movs	r1, r5
 80023ca:	4463      	add	r3, ip
 80023cc:	40d1      	lsrs	r1, r2
 80023ce:	409d      	lsls	r5, r3
 80023d0:	000a      	movs	r2, r1
 80023d2:	0029      	movs	r1, r5
 80023d4:	4098      	lsls	r0, r3
 80023d6:	1e4d      	subs	r5, r1, #1
 80023d8:	41a9      	sbcs	r1, r5
 80023da:	4301      	orrs	r1, r0
 80023dc:	4311      	orrs	r1, r2
 80023de:	e7e4      	b.n	80023aa <__aeabi_d2f+0xc6>
 80023e0:	0033      	movs	r3, r6
 80023e2:	e79d      	b.n	8002320 <__aeabi_d2f+0x3c>
 80023e4:	000007fe 	.word	0x000007fe
 80023e8:	fffffc80 	.word	0xfffffc80
 80023ec:	fffffca2 	.word	0xfffffca2
 80023f0:	fffffc82 	.word	0xfffffc82

080023f4 <__clzsi2>:
 80023f4:	211c      	movs	r1, #28
 80023f6:	2301      	movs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	4298      	cmp	r0, r3
 80023fc:	d301      	bcc.n	8002402 <__clzsi2+0xe>
 80023fe:	0c00      	lsrs	r0, r0, #16
 8002400:	3910      	subs	r1, #16
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	4298      	cmp	r0, r3
 8002406:	d301      	bcc.n	800240c <__clzsi2+0x18>
 8002408:	0a00      	lsrs	r0, r0, #8
 800240a:	3908      	subs	r1, #8
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	4298      	cmp	r0, r3
 8002410:	d301      	bcc.n	8002416 <__clzsi2+0x22>
 8002412:	0900      	lsrs	r0, r0, #4
 8002414:	3904      	subs	r1, #4
 8002416:	a202      	add	r2, pc, #8	; (adr r2, 8002420 <__clzsi2+0x2c>)
 8002418:	5c10      	ldrb	r0, [r2, r0]
 800241a:	1840      	adds	r0, r0, r1
 800241c:	4770      	bx	lr
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	02020304 	.word	0x02020304
 8002424:	01010101 	.word	0x01010101
	...

08002430 <__clzdi2>:
 8002430:	b510      	push	{r4, lr}
 8002432:	2900      	cmp	r1, #0
 8002434:	d103      	bne.n	800243e <__clzdi2+0xe>
 8002436:	f7ff ffdd 	bl	80023f4 <__clzsi2>
 800243a:	3020      	adds	r0, #32
 800243c:	e002      	b.n	8002444 <__clzdi2+0x14>
 800243e:	1c08      	adds	r0, r1, #0
 8002440:	f7ff ffd8 	bl	80023f4 <__clzsi2>
 8002444:	bd10      	pop	{r4, pc}
 8002446:	46c0      	nop			; (mov r8, r8)

08002448 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800244e:	003b      	movs	r3, r7
 8002450:	0018      	movs	r0, r3
 8002452:	2308      	movs	r3, #8
 8002454:	001a      	movs	r2, r3
 8002456:	2100      	movs	r1, #0
 8002458:	f001 ff5c 	bl	8004314 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800245c:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <MX_ADC_Init+0xc0>)
 800245e:	4a2b      	ldr	r2, [pc, #172]	; (800250c <MX_ADC_Init+0xc4>)
 8002460:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002462:	4b29      	ldr	r3, [pc, #164]	; (8002508 <MX_ADC_Init+0xc0>)
 8002464:	2200      	movs	r2, #0
 8002466:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <MX_ADC_Init+0xc0>)
 800246a:	22c0      	movs	r2, #192	; 0xc0
 800246c:	0612      	lsls	r2, r2, #24
 800246e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <MX_ADC_Init+0xc0>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <MX_ADC_Init+0xc0>)
 8002478:	2200      	movs	r2, #0
 800247a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <MX_ADC_Init+0xc0>)
 800247e:	2201      	movs	r2, #1
 8002480:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <MX_ADC_Init+0xc0>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <MX_ADC_Init+0xc0>)
 800248a:	2220      	movs	r2, #32
 800248c:	2100      	movs	r1, #0
 800248e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_ADC_Init+0xc0>)
 8002492:	2221      	movs	r2, #33	; 0x21
 8002494:	2100      	movs	r1, #0
 8002496:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <MX_ADC_Init+0xc0>)
 800249a:	2200      	movs	r2, #0
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <MX_ADC_Init+0xc0>)
 80024a0:	22c2      	movs	r2, #194	; 0xc2
 80024a2:	32ff      	adds	r2, #255	; 0xff
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <MX_ADC_Init+0xc0>)
 80024a8:	222c      	movs	r2, #44	; 0x2c
 80024aa:	2100      	movs	r1, #0
 80024ac:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <MX_ADC_Init+0xc0>)
 80024b0:	2204      	movs	r2, #4
 80024b2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <MX_ADC_Init+0xc0>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <MX_ADC_Init+0xc0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <MX_ADC_Init+0xc0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <MX_ADC_Init+0xc0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <MX_ADC_Init+0xc0>)
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 faaa 	bl	8002a28 <HAL_ADC_Init>
 80024d4:	1e03      	subs	r3, r0, #0
 80024d6:	d001      	beq.n	80024dc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80024d8:	f000 f9d6 	bl	8002888 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024dc:	003b      	movs	r3, r7
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80024e2:	003b      	movs	r3, r7
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	0152      	lsls	r2, r2, #5
 80024e8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024ea:	003a      	movs	r2, r7
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <MX_ADC_Init+0xc0>)
 80024ee:	0011      	movs	r1, r2
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 fd43 	bl	8002f7c <HAL_ADC_ConfigChannel>
 80024f6:	1e03      	subs	r3, r0, #0
 80024f8:	d001      	beq.n	80024fe <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80024fa:	f000 f9c5 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	20000090 	.word	0x20000090
 800250c:	40012400 	.word	0x40012400

08002510 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	240c      	movs	r4, #12
 800251a:	193b      	adds	r3, r7, r4
 800251c:	0018      	movs	r0, r3
 800251e:	2314      	movs	r3, #20
 8002520:	001a      	movs	r2, r3
 8002522:	2100      	movs	r1, #0
 8002524:	f001 fef6 	bl	8004314 <memset>
  if(adcHandle->Instance==ADC1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <HAL_ADC_MspInit+0x70>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d122      	bne.n	8002578 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_ADC_MspInit+0x74>)
 8002534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_ADC_MspInit+0x74>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0089      	lsls	r1, r1, #2
 800253c:	430a      	orrs	r2, r1
 800253e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_ADC_MspInit+0x74>)
 8002542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_ADC_MspInit+0x74>)
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_ADC_MspInit+0x74>)
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002558:	193b      	adds	r3, r7, r4
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255e:	193b      	adds	r3, r7, r4
 8002560:	2203      	movs	r2, #3
 8002562:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	193b      	adds	r3, r7, r4
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	193a      	adds	r2, r7, r4
 800256c:	23a0      	movs	r3, #160	; 0xa0
 800256e:	05db      	lsls	r3, r3, #23
 8002570:	0011      	movs	r1, r2
 8002572:	0018      	movs	r0, r3
 8002574:	f000 ff7c 	bl	8003470 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b009      	add	sp, #36	; 0x24
 800257e:	bd90      	pop	{r4, r7, pc}
 8002580:	40012400 	.word	0x40012400
 8002584:	40021000 	.word	0x40021000

08002588 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <MX_GPIO_Init+0x28>)
 8002590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <MX_GPIO_Init+0x28>)
 8002594:	2101      	movs	r1, #1
 8002596:	430a      	orrs	r2, r1
 8002598:	62da      	str	r2, [r3, #44]	; 0x2c
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <MX_GPIO_Init+0x28>)
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	2201      	movs	r2, #1
 80025a0:	4013      	ands	r3, r2
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]

}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b002      	add	sp, #8
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	40021000 	.word	0x40021000

080025b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b090      	sub	sp, #64	; 0x40
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ba:	f000 f9c5 	bl	8002948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025be:	f000 f909 	bl	80027d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c2:	f7ff ffe1 	bl	8002588 <MX_GPIO_Init>
  MX_ADC_Init();
 80025c6:	f7ff ff3f 	bl	8002448 <MX_ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // code source: https://thestempedia.com/tutorials/interfacing-mq-4-gas-sensor-evive/
  uint16_t methane;
  int total = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  float average;
  float voltage;
  float rs_air, rs_gas;
  float r0;
  float ratio;
  float m = -0.318;
 80025ce:	4b77      	ldr	r3, [pc, #476]	; (80027ac <main+0x1f8>)
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
  float b = 1.133;
 80025d2:	4b77      	ldr	r3, [pc, #476]	; (80027b0 <main+0x1fc>)
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
  int i;

  for(i = 0; i < 500; i++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025da:	e021      	b.n	8002620 <main+0x6c>
  {
	  HAL_ADC_Start(&hadc);
 80025dc:	4b75      	ldr	r3, [pc, #468]	; (80027b4 <main+0x200>)
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 fb96 	bl	8002d10 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY)){};
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	2301      	movs	r3, #1
 80025e8:	425a      	negs	r2, r3
 80025ea:	4b72      	ldr	r3, [pc, #456]	; (80027b4 <main+0x200>)
 80025ec:	0011      	movs	r1, r2
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 fc22 	bl	8002e38 <HAL_ADC_PollForConversion>
 80025f4:	1e03      	subs	r3, r0, #0
 80025f6:	d1f6      	bne.n	80025e6 <main+0x32>
	  methane = HAL_ADC_GetValue(&hadc);
 80025f8:	4b6e      	ldr	r3, [pc, #440]	; (80027b4 <main+0x200>)
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fcb2 	bl	8002f64 <HAL_ADC_GetValue>
 8002600:	0002      	movs	r2, r0
 8002602:	211e      	movs	r1, #30
 8002604:	187b      	adds	r3, r7, r1
 8002606:	801a      	strh	r2, [r3, #0]
	  total += methane;
 8002608:	187b      	adds	r3, r7, r1
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800260e:	18d3      	adds	r3, r2, r3
 8002610:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_ADC_Stop(&hadc);
 8002612:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <main+0x200>)
 8002614:	0018      	movs	r0, r3
 8002616:	f000 fbcf 	bl	8002db8 <HAL_ADC_Stop>
  for(i = 0; i < 500; i++)
 800261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261c:	3301      	adds	r3, #1
 800261e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002622:	23fa      	movs	r3, #250	; 0xfa
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	429a      	cmp	r2, r3
 8002628:	dbd8      	blt.n	80025dc <main+0x28>
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  }


  average = total / 500.0;
 800262a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800262c:	f7ff fde2 	bl	80021f4 <__aeabi_i2d>
 8002630:	2200      	movs	r2, #0
 8002632:	4b61      	ldr	r3, [pc, #388]	; (80027b8 <main+0x204>)
 8002634:	f7fe fbbc 	bl	8000db0 <__aeabi_ddiv>
 8002638:	0002      	movs	r2, r0
 800263a:	000b      	movs	r3, r1
 800263c:	0010      	movs	r0, r2
 800263e:	0019      	movs	r1, r3
 8002640:	f7ff fe50 	bl	80022e4 <__aeabi_d2f>
 8002644:	1c03      	adds	r3, r0, #0
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
  voltage = average * (5.0 / 1023.0);
 8002648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800264a:	f7ff fe03 	bl	8002254 <__aeabi_f2d>
 800264e:	4a5b      	ldr	r2, [pc, #364]	; (80027bc <main+0x208>)
 8002650:	4b5b      	ldr	r3, [pc, #364]	; (80027c0 <main+0x20c>)
 8002652:	f7fe ffb3 	bl	80015bc <__aeabi_dmul>
 8002656:	0002      	movs	r2, r0
 8002658:	000b      	movs	r3, r1
 800265a:	0010      	movs	r0, r2
 800265c:	0019      	movs	r1, r3
 800265e:	f7ff fe41 	bl	80022e4 <__aeabi_d2f>
 8002662:	1c03      	adds	r3, r0, #0
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
  rs_air = ((5.0 * 10.0) / voltage) - 10.0;
 8002666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002668:	f7ff fdf4 	bl	8002254 <__aeabi_f2d>
 800266c:	0002      	movs	r2, r0
 800266e:	000b      	movs	r3, r1
 8002670:	2000      	movs	r0, #0
 8002672:	4954      	ldr	r1, [pc, #336]	; (80027c4 <main+0x210>)
 8002674:	f7fe fb9c 	bl	8000db0 <__aeabi_ddiv>
 8002678:	0002      	movs	r2, r0
 800267a:	000b      	movs	r3, r1
 800267c:	0010      	movs	r0, r2
 800267e:	0019      	movs	r1, r3
 8002680:	2200      	movs	r2, #0
 8002682:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <main+0x214>)
 8002684:	f7ff fa06 	bl	8001a94 <__aeabi_dsub>
 8002688:	0002      	movs	r2, r0
 800268a:	000b      	movs	r3, r1
 800268c:	0010      	movs	r0, r2
 800268e:	0019      	movs	r1, r3
 8002690:	f7ff fe28 	bl	80022e4 <__aeabi_d2f>
 8002694:	1c03      	adds	r3, r0, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
  r0 = rs_air / 4.4;
 8002698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800269a:	f7ff fddb 	bl	8002254 <__aeabi_f2d>
 800269e:	4a4b      	ldr	r2, [pc, #300]	; (80027cc <main+0x218>)
 80026a0:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <main+0x21c>)
 80026a2:	f7fe fb85 	bl	8000db0 <__aeabi_ddiv>
 80026a6:	0002      	movs	r2, r0
 80026a8:	000b      	movs	r3, r1
 80026aa:	0010      	movs	r0, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	f7ff fe19 	bl	80022e4 <__aeabi_d2f>
 80026b2:	1c03      	adds	r3, r0, #0
 80026b4:	623b      	str	r3, [r7, #32]
  //serial_println("r0: %d", (int)r0);

  HAL_ADC_Start(&hadc);
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <main+0x200>)
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 fb29 	bl	8002d10 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80026be:	2301      	movs	r3, #1
 80026c0:	425a      	negs	r2, r3
 80026c2:	4b3c      	ldr	r3, [pc, #240]	; (80027b4 <main+0x200>)
 80026c4:	0011      	movs	r1, r2
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fbb6 	bl	8002e38 <HAL_ADC_PollForConversion>
  methane = HAL_ADC_GetValue(&hadc);    //Read analog values of sensor
 80026cc:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <main+0x200>)
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 fc48 	bl	8002f64 <HAL_ADC_GetValue>
 80026d4:	0002      	movs	r2, r0
 80026d6:	241e      	movs	r4, #30
 80026d8:	193b      	adds	r3, r7, r4
 80026da:	801a      	strh	r2, [r3, #0]
  HAL_ADC_Stop(&hadc);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <main+0x200>)
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 fb6a 	bl	8002db8 <HAL_ADC_Stop>

  voltage = methane * (5.0 / 1023.0);       //Convert analog values to voltage
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7ff fd83 	bl	80021f4 <__aeabi_i2d>
 80026ee:	4a33      	ldr	r2, [pc, #204]	; (80027bc <main+0x208>)
 80026f0:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <main+0x20c>)
 80026f2:	f7fe ff63 	bl	80015bc <__aeabi_dmul>
 80026f6:	0002      	movs	r2, r0
 80026f8:	000b      	movs	r3, r1
 80026fa:	0010      	movs	r0, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	f7ff fdf1 	bl	80022e4 <__aeabi_d2f>
 8002702:	1c03      	adds	r3, r0, #0
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
  rs_gas = ((5.0 * 10.0) / voltage) - 10.0;      //Get value of RS in a gas
 8002706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002708:	f7ff fda4 	bl	8002254 <__aeabi_f2d>
 800270c:	0002      	movs	r2, r0
 800270e:	000b      	movs	r3, r1
 8002710:	2000      	movs	r0, #0
 8002712:	492c      	ldr	r1, [pc, #176]	; (80027c4 <main+0x210>)
 8002714:	f7fe fb4c 	bl	8000db0 <__aeabi_ddiv>
 8002718:	0002      	movs	r2, r0
 800271a:	000b      	movs	r3, r1
 800271c:	0010      	movs	r0, r2
 800271e:	0019      	movs	r1, r3
 8002720:	2200      	movs	r2, #0
 8002722:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <main+0x214>)
 8002724:	f7ff f9b6 	bl	8001a94 <__aeabi_dsub>
 8002728:	0002      	movs	r2, r0
 800272a:	000b      	movs	r3, r1
 800272c:	0010      	movs	r0, r2
 800272e:	0019      	movs	r1, r3
 8002730:	f7ff fdd8 	bl	80022e4 <__aeabi_d2f>
 8002734:	1c03      	adds	r3, r0, #0
 8002736:	61bb      	str	r3, [r7, #24]
  ratio = rs_gas / r0;                          // Get ratio RS_gas/RS_air
 8002738:	6a39      	ldr	r1, [r7, #32]
 800273a:	69b8      	ldr	r0, [r7, #24]
 800273c:	f7fd fec2 	bl	80004c4 <__aeabi_fdiv>
 8002740:	1c03      	adds	r3, r0, #0
 8002742:	617b      	str	r3, [r7, #20]

  double ppm_log = (log10(ratio) - b) / m;     //Get ppm value in linear scale according to the the ratio value
 8002744:	6978      	ldr	r0, [r7, #20]
 8002746:	f7ff fd85 	bl	8002254 <__aeabi_f2d>
 800274a:	0002      	movs	r2, r0
 800274c:	000b      	movs	r3, r1
 800274e:	0010      	movs	r0, r2
 8002750:	0019      	movs	r1, r3
 8002752:	f001 fde7 	bl	8004324 <log10>
 8002756:	0004      	movs	r4, r0
 8002758:	000d      	movs	r5, r1
 800275a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800275c:	f7ff fd7a 	bl	8002254 <__aeabi_f2d>
 8002760:	0002      	movs	r2, r0
 8002762:	000b      	movs	r3, r1
 8002764:	0020      	movs	r0, r4
 8002766:	0029      	movs	r1, r5
 8002768:	f7ff f994 	bl	8001a94 <__aeabi_dsub>
 800276c:	0002      	movs	r2, r0
 800276e:	000b      	movs	r3, r1
 8002770:	0014      	movs	r4, r2
 8002772:	001d      	movs	r5, r3
 8002774:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002776:	f7ff fd6d 	bl	8002254 <__aeabi_f2d>
 800277a:	0002      	movs	r2, r0
 800277c:	000b      	movs	r3, r1
 800277e:	0020      	movs	r0, r4
 8002780:	0029      	movs	r1, r5
 8002782:	f7fe fb15 	bl	8000db0 <__aeabi_ddiv>
 8002786:	0002      	movs	r2, r0
 8002788:	000b      	movs	r3, r1
 800278a:	60ba      	str	r2, [r7, #8]
 800278c:	60fb      	str	r3, [r7, #12]
  double ppm = pow(10, ppm_log);
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2000      	movs	r0, #0
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <main+0x214>)
 8002796:	f001 fe03 	bl	80043a0 <pow>
 800279a:	0002      	movs	r2, r0
 800279c:	000b      	movs	r3, r1
 800279e:	603a      	str	r2, [r7, #0]
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	2300      	movs	r3, #0
  //serial_println("ppm: %d", (int)ppm);

  /* USER CODE END 3 */
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b010      	add	sp, #64	; 0x40
 80027aa:	bdb0      	pop	{r4, r5, r7, pc}
 80027ac:	bea2d0e5 	.word	0xbea2d0e5
 80027b0:	3f910625 	.word	0x3f910625
 80027b4:	20000090 	.word	0x20000090
 80027b8:	407f4000 	.word	0x407f4000
 80027bc:	40501405 	.word	0x40501405
 80027c0:	3f740501 	.word	0x3f740501
 80027c4:	40490000 	.word	0x40490000
 80027c8:	40240000 	.word	0x40240000
 80027cc:	9999999a 	.word	0x9999999a
 80027d0:	40119999 	.word	0x40119999

080027d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b095      	sub	sp, #84	; 0x54
 80027d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027da:	2418      	movs	r4, #24
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	0018      	movs	r0, r3
 80027e0:	2338      	movs	r3, #56	; 0x38
 80027e2:	001a      	movs	r2, r3
 80027e4:	2100      	movs	r1, #0
 80027e6:	f001 fd95 	bl	8004314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	0018      	movs	r0, r3
 80027ee:	2314      	movs	r3, #20
 80027f0:	001a      	movs	r2, r3
 80027f2:	2100      	movs	r1, #0
 80027f4:	f001 fd8e 	bl	8004314 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f8:	4b21      	ldr	r3, [pc, #132]	; (8002880 <SystemClock_Config+0xac>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a21      	ldr	r2, [pc, #132]	; (8002884 <SystemClock_Config+0xb0>)
 80027fe:	401a      	ands	r2, r3
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <SystemClock_Config+0xac>)
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	0109      	lsls	r1, r1, #4
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800280a:	0021      	movs	r1, r4
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2202      	movs	r2, #2
 8002810:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2201      	movs	r2, #1
 8002816:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2210      	movs	r2, #16
 800281c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2202      	movs	r2, #2
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002824:	187b      	adds	r3, r7, r1
 8002826:	2200      	movs	r2, #0
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800282a:	187b      	adds	r3, r7, r1
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002830:	187b      	adds	r3, r7, r1
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	0412      	lsls	r2, r2, #16
 8002836:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002838:	187b      	adds	r3, r7, r1
 800283a:	0018      	movs	r0, r3
 800283c:	f000 ff8e 	bl	800375c <HAL_RCC_OscConfig>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d001      	beq.n	8002848 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002844:	f000 f820 	bl	8002888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	220f      	movs	r2, #15
 800284c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	2203      	movs	r2, #3
 8002852:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	2200      	movs	r2, #0
 800285e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	2100      	movs	r1, #0
 800286a:	0018      	movs	r0, r3
 800286c:	f001 fb3a 	bl	8003ee4 <HAL_RCC_ClockConfig>
 8002870:	1e03      	subs	r3, r0, #0
 8002872:	d001      	beq.n	8002878 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002874:	f000 f808 	bl	8002888 <Error_Handler>
  }
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b015      	add	sp, #84	; 0x54
 800287e:	bd90      	pop	{r4, r7, pc}
 8002880:	40007000 	.word	0x40007000
 8002884:	ffffe7ff 	.word	0xffffe7ff

08002888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800288c:	b672      	cpsid	i
}
 800288e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002890:	e7fe      	b.n	8002890 <Error_Handler+0x8>
	...

08002894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_MspInit+0x24>)
 800289a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_MspInit+0x24>)
 800289e:	2101      	movs	r1, #1
 80028a0:	430a      	orrs	r2, r1
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <HAL_MspInit+0x24>)
 80028a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_MspInit+0x24>)
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	0549      	lsls	r1, r1, #21
 80028ae:	430a      	orrs	r2, r1
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <NMI_Handler+0x4>

080028c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <HardFault_Handler+0x4>

080028c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e0:	f000 f886 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80028f4:	480d      	ldr	r0, [pc, #52]	; (800292c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028f8:	480d      	ldr	r0, [pc, #52]	; (8002930 <LoopForever+0x6>)
  ldr r1, =_edata
 80028fa:	490e      	ldr	r1, [pc, #56]	; (8002934 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028fc:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <LoopForever+0xe>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002900:	e002      	b.n	8002908 <LoopCopyDataInit>

08002902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002906:	3304      	adds	r3, #4

08002908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800290a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800290c:	d3f9      	bcc.n	8002902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002910:	4c0b      	ldr	r4, [pc, #44]	; (8002940 <LoopForever+0x16>)
  movs r3, #0
 8002912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002914:	e001      	b.n	800291a <LoopFillZerobss>

08002916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002918:	3204      	adds	r2, #4

0800291a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800291a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800291c:	d3fb      	bcc.n	8002916 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800291e:	f7ff ffe4 	bl	80028ea <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002922:	f001 fcd3 	bl	80042cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002926:	f7ff fe45 	bl	80025b4 <main>

0800292a <LoopForever>:

LoopForever:
    b LoopForever
 800292a:	e7fe      	b.n	800292a <LoopForever>
  ldr   r0, =_estack
 800292c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002934:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002938:	08005880 	.word	0x08005880
  ldr r2, =_sbss
 800293c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002940:	200000f0 	.word	0x200000f0

08002944 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002944:	e7fe      	b.n	8002944 <ADC1_COMP_IRQHandler>
	...

08002948 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_Init+0x3c>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_Init+0x3c>)
 800295a:	2140      	movs	r1, #64	; 0x40
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002960:	2000      	movs	r0, #0
 8002962:	f000 f811 	bl	8002988 <HAL_InitTick>
 8002966:	1e03      	subs	r3, r0, #0
 8002968:	d003      	beq.n	8002972 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800296a:	1dfb      	adds	r3, r7, #7
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e001      	b.n	8002976 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002972:	f7ff ff8f 	bl	8002894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	781b      	ldrb	r3, [r3, #0]
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b002      	add	sp, #8
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	40022000 	.word	0x40022000

08002988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_InitTick+0x5c>)
 8002992:	681c      	ldr	r4, [r3, #0]
 8002994:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <HAL_InitTick+0x60>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	0019      	movs	r1, r3
 800299a:	23fa      	movs	r3, #250	; 0xfa
 800299c:	0098      	lsls	r0, r3, #2
 800299e:	f7fd fbb3 	bl	8000108 <__udivsi3>
 80029a2:	0003      	movs	r3, r0
 80029a4:	0019      	movs	r1, r3
 80029a6:	0020      	movs	r0, r4
 80029a8:	f7fd fbae 	bl	8000108 <__udivsi3>
 80029ac:	0003      	movs	r3, r0
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 fd51 	bl	8003456 <HAL_SYSTICK_Config>
 80029b4:	1e03      	subs	r3, r0, #0
 80029b6:	d001      	beq.n	80029bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e00f      	b.n	80029dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d80b      	bhi.n	80029da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	2301      	movs	r3, #1
 80029c6:	425b      	negs	r3, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fd2e 	bl	800342c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_InitTick+0x64>)
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b003      	add	sp, #12
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000008 	.word	0x20000008
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_IncTick+0x1c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	001a      	movs	r2, r3
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_IncTick+0x20>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	18d2      	adds	r2, r2, r3
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_IncTick+0x20>)
 8002a02:	601a      	str	r2, [r3, #0]
}
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	200000ec 	.word	0x200000ec

08002a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  return uwTick;
 8002a18:	4b02      	ldr	r3, [pc, #8]	; (8002a24 <HAL_GetTick+0x10>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	200000ec 	.word	0x200000ec

08002a28 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e159      	b.n	8002cee <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2250      	movs	r2, #80	; 0x50
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7ff fd5c 	bl	8002510 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d005      	beq.n	8002a70 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002a6e:	d00b      	beq.n	8002a88 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	2210      	movs	r2, #16
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2250      	movs	r2, #80	; 0x50
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e132      	b.n	8002cee <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	4a9a      	ldr	r2, [pc, #616]	; (8002cf8 <HAL_ADC_Init+0x2d0>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2202      	movs	r2, #2
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d108      	bne.n	8002ab8 <HAL_ADC_Init+0x90>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2201      	movs	r2, #1
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_ADC_Init+0x90>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_ADC_Init+0x92>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d149      	bne.n	8002b52 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	23c0      	movs	r3, #192	; 0xc0
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_ADC_Init+0xba>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d005      	beq.n	8002ae2 <HAL_ADC_Init+0xba>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d111      	bne.n	8002b06 <HAL_ADC_Init+0xde>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	0892      	lsrs	r2, r2, #2
 8002af0:	611a      	str	r2, [r3, #16]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6919      	ldr	r1, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	611a      	str	r2, [r3, #16]
 8002b04:	e014      	b.n	8002b30 <HAL_ADC_Init+0x108>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0092      	lsls	r2, r2, #2
 8002b12:	0892      	lsrs	r2, r2, #2
 8002b14:	611a      	str	r2, [r3, #16]
 8002b16:	4b79      	ldr	r3, [pc, #484]	; (8002cfc <HAL_ADC_Init+0x2d4>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b78      	ldr	r3, [pc, #480]	; (8002cfc <HAL_ADC_Init+0x2d4>)
 8002b1c:	4978      	ldr	r1, [pc, #480]	; (8002d00 <HAL_ADC_Init+0x2d8>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	4b76      	ldr	r3, [pc, #472]	; (8002cfc <HAL_ADC_Init+0x2d4>)
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <HAL_ADC_Init+0x2d4>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2118      	movs	r1, #24
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68d9      	ldr	r1, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002b52:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <HAL_ADC_Init+0x2d4>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b69      	ldr	r3, [pc, #420]	; (8002cfc <HAL_ADC_Init+0x2d4>)
 8002b58:	496a      	ldr	r1, [pc, #424]	; (8002d04 <HAL_ADC_Init+0x2dc>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002b5e:	4b67      	ldr	r3, [pc, #412]	; (8002cfc <HAL_ADC_Init+0x2d4>)
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	065a      	lsls	r2, r3, #25
 8002b68:	4b64      	ldr	r3, [pc, #400]	; (8002cfc <HAL_ADC_Init+0x2d4>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	055b      	lsls	r3, r3, #21
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d108      	bne.n	8002b8e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2180      	movs	r1, #128	; 0x80
 8002b88:	0549      	lsls	r1, r1, #21
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	495b      	ldr	r1, [pc, #364]	; (8002d08 <HAL_ADC_Init+0x2e0>)
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68d9      	ldr	r1, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_Init+0x18c>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	e000      	b.n	8002bb6 <HAL_ADC_Init+0x18e>
 8002bb4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002bb6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2020      	movs	r0, #32
 8002bbc:	5c1b      	ldrb	r3, [r3, r0]
 8002bbe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002bc0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	202c      	movs	r0, #44	; 0x2c
 8002bc6:	5c1b      	ldrb	r3, [r3, r0]
 8002bc8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bca:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002bd0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002bd8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002be0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bee:	23c2      	movs	r3, #194	; 0xc2
 8002bf0:	33ff      	adds	r3, #255	; 0xff
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d00b      	beq.n	8002c0e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68d9      	ldr	r1, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2221      	movs	r2, #33	; 0x21
 8002c12:	5c9b      	ldrb	r3, [r3, r2]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d11a      	bne.n	8002c4e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	5c9b      	ldrb	r3, [r3, r2]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2180      	movs	r1, #128	; 0x80
 8002c2e:	0249      	lsls	r1, r1, #9
 8002c30:	430a      	orrs	r2, r1
 8002c32:	60da      	str	r2, [r3, #12]
 8002c34:	e00b      	b.n	8002c4e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	2201      	movs	r2, #1
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d11f      	bne.n	8002c96 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	492a      	ldr	r1, [pc, #168]	; (8002d0c <HAL_ADC_Init+0x2e4>)
 8002c62:	400a      	ands	r2, r1
 8002c64:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6919      	ldr	r1, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002c74:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002c7a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	430a      	orrs	r2, r1
 8002c92:	611a      	str	r2, [r3, #16]
 8002c94:	e00e      	b.n	8002cb4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d107      	bne.n	8002cb4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2101      	movs	r1, #1
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2107      	movs	r1, #7
 8002cc0:	438a      	bics	r2, r1
 8002cc2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6959      	ldr	r1, [r3, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	4393      	bics	r3, r2
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b002      	add	sp, #8
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	fffffefd 	.word	0xfffffefd
 8002cfc:	40012708 	.word	0x40012708
 8002d00:	ffc3ffff 	.word	0xffc3ffff
 8002d04:	fdffffff 	.word	0xfdffffff
 8002d08:	fffe0219 	.word	0xfffe0219
 8002d0c:	fffffc03 	.word	0xfffffc03

08002d10 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d18:	230f      	movs	r3, #15
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2204      	movs	r2, #4
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d138      	bne.n	8002d9e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2250      	movs	r2, #80	; 0x50
 8002d30:	5c9b      	ldrb	r3, [r3, r2]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_Start+0x2a>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e038      	b.n	8002dac <HAL_ADC_Start+0x9c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2250      	movs	r2, #80	; 0x50
 8002d3e:	2101      	movs	r1, #1
 8002d40:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d007      	beq.n	8002d5a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002d4a:	230f      	movs	r3, #15
 8002d4c:	18fc      	adds	r4, r7, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 f9b3 	bl	80030bc <ADC_Enable>
 8002d56:	0003      	movs	r3, r0
 8002d58:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d5a:	230f      	movs	r3, #15
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d120      	bne.n	8002da6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_ADC_Start+0xa4>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	0052      	lsls	r2, r2, #1
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2250      	movs	r2, #80	; 0x50
 8002d80:	2100      	movs	r1, #0
 8002d82:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	221c      	movs	r2, #28
 8002d8a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2104      	movs	r1, #4
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	e003      	b.n	8002da6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d9e:	230f      	movs	r3, #15
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2202      	movs	r2, #2
 8002da4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002da6:	230f      	movs	r3, #15
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	781b      	ldrb	r3, [r3, #0]
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b005      	add	sp, #20
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	fffff0fe 	.word	0xfffff0fe

08002db8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc0:	230f      	movs	r3, #15
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2250      	movs	r2, #80	; 0x50
 8002dcc:	5c9b      	ldrb	r3, [r3, r2]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_Stop+0x1e>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e029      	b.n	8002e2a <HAL_ADC_Stop+0x72>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2250      	movs	r2, #80	; 0x50
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002dde:	250f      	movs	r5, #15
 8002de0:	197c      	adds	r4, r7, r5
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 fa29 	bl	800323c <ADC_ConversionStop>
 8002dea:	0003      	movs	r3, r0
 8002dec:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002dee:	197b      	adds	r3, r7, r5
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d112      	bne.n	8002e1c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002df6:	197c      	adds	r4, r7, r5
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 f9be 	bl	800317c <ADC_Disable>
 8002e00:	0003      	movs	r3, r0
 8002e02:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e04:	197b      	adds	r3, r7, r5
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <HAL_ADC_Stop+0x7c>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	2201      	movs	r2, #1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2250      	movs	r2, #80	; 0x50
 8002e20:	2100      	movs	r1, #0
 8002e22:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002e24:	230f      	movs	r3, #15
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	781b      	ldrb	r3, [r3, #0]
}
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bdb0      	pop	{r4, r5, r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	fffffefe 	.word	0xfffffefe

08002e38 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d102      	bne.n	8002e58 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002e52:	2308      	movs	r3, #8
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e014      	b.n	8002e82 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10b      	bne.n	8002e7e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2250      	movs	r2, #80	; 0x50
 8002e76:	2100      	movs	r1, #0
 8002e78:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06c      	b.n	8002f58 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002e7e:	230c      	movs	r3, #12
 8002e80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e82:	f7ff fdc7 	bl	8002a14 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002e8a:	e019      	b.n	8002ec0 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	d016      	beq.n	8002ec0 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <HAL_ADC_PollForConversion+0x70>
 8002e98:	f7ff fdbc 	bl	8002a14 <HAL_GetTick>
 8002e9c:	0002      	movs	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d20b      	bcs.n	8002ec0 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	2204      	movs	r2, #4
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2250      	movs	r2, #80	; 0x50
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e04b      	b.n	8002f58 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d0df      	beq.n	8002e8c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	2280      	movs	r2, #128	; 0x80
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	23c0      	movs	r3, #192	; 0xc0
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d12e      	bne.n	8002f46 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d129      	bne.n	8002f46 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d122      	bne.n	8002f46 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2204      	movs	r2, #4
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d110      	bne.n	8002f2e <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	210c      	movs	r1, #12
 8002f18:	438a      	bics	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	4a0f      	ldr	r2, [pc, #60]	; (8002f60 <HAL_ADC_PollForConversion+0x128>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	2201      	movs	r2, #1
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
 8002f2c:	e00b      	b.n	8002f46 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	2220      	movs	r2, #32
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	2201      	movs	r2, #1
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	220c      	movs	r2, #12
 8002f54:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b004      	add	sp, #16
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	fffffefe 	.word	0xfffffefe

08002f64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b002      	add	sp, #8
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2250      	movs	r2, #80	; 0x50
 8002f8a:	5c9b      	ldrb	r3, [r3, r2]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x18>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e085      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x124>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2250      	movs	r2, #80	; 0x50
 8002f98:	2101      	movs	r1, #1
 8002f9a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	2220      	movs	r2, #32
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2250      	movs	r2, #80	; 0x50
 8002fb8:	2100      	movs	r1, #0
 8002fba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e06f      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a38      	ldr	r2, [pc, #224]	; (80030a8 <HAL_ADC_ConfigChannel+0x12c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d035      	beq.n	8003036 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	035b      	lsls	r3, r3, #13
 8002fd6:	0b5a      	lsrs	r2, r3, #13
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	02db      	lsls	r3, r3, #11
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002fec:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	0409      	lsls	r1, r1, #16
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002ffa:	200a      	movs	r0, #10
 8002ffc:	f000 f964 	bl	80032c8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	029b      	lsls	r3, r3, #10
 8003008:	4013      	ands	r3, r2
 800300a:	d006      	beq.n	800301a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800300c:	4b27      	ldr	r3, [pc, #156]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b26      	ldr	r3, [pc, #152]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	03c9      	lsls	r1, r1, #15
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	025b      	lsls	r3, r3, #9
 8003022:	4013      	ands	r3, r2
 8003024:	d037      	beq.n	8003096 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8003026:	4b21      	ldr	r3, [pc, #132]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	0449      	lsls	r1, r1, #17
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e02f      	b.n	8003096 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	035b      	lsls	r3, r3, #13
 8003042:	0b5b      	lsrs	r3, r3, #13
 8003044:	43d9      	mvns	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	400a      	ands	r2, r1
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	02db      	lsls	r3, r3, #11
 8003056:	4013      	ands	r3, r2
 8003058:	d005      	beq.n	8003066 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 8003060:	4913      	ldr	r1, [pc, #76]	; (80030b0 <HAL_ADC_ConfigChannel+0x134>)
 8003062:	400a      	ands	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	029b      	lsls	r3, r3, #10
 800306e:	4013      	ands	r3, r2
 8003070:	d005      	beq.n	800307e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 8003078:	490e      	ldr	r1, [pc, #56]	; (80030b4 <HAL_ADC_ConfigChannel+0x138>)
 800307a:	400a      	ands	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	025b      	lsls	r3, r3, #9
 8003086:	4013      	ands	r3, r2
 8003088:	d005      	beq.n	8003096 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_ADC_ConfigChannel+0x130>)
 8003090:	4909      	ldr	r1, [pc, #36]	; (80030b8 <HAL_ADC_ConfigChannel+0x13c>)
 8003092:	400a      	ands	r2, r1
 8003094:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2250      	movs	r2, #80	; 0x50
 800309a:	2100      	movs	r1, #0
 800309c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	00001001 	.word	0x00001001
 80030ac:	40012708 	.word	0x40012708
 80030b0:	ff7fffff 	.word	0xff7fffff
 80030b4:	ffbfffff 	.word	0xffbfffff
 80030b8:	feffffff 	.word	0xfeffffff

080030bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2203      	movs	r2, #3
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d108      	bne.n	80030e8 <ADC_Enable+0x2c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2201      	movs	r2, #1
 80030de:	4013      	ands	r3, r2
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <ADC_Enable+0x2c>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <ADC_Enable+0x2e>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d13f      	bne.n	800316e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a20      	ldr	r2, [pc, #128]	; (8003178 <ADC_Enable+0xbc>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	d00d      	beq.n	8003116 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	2210      	movs	r2, #16
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	2201      	movs	r2, #1
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e02c      	b.n	8003170 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003126:	2001      	movs	r0, #1
 8003128:	f000 f8ce 	bl	80032c8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800312c:	f7ff fc72 	bl	8002a14 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003134:	e014      	b.n	8003160 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003136:	f7ff fc6d 	bl	8002a14 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b0a      	cmp	r3, #10
 8003142:	d90d      	bls.n	8003160 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	2210      	movs	r2, #16
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	2201      	movs	r2, #1
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e007      	b.n	8003170 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2201      	movs	r2, #1
 8003168:	4013      	ands	r3, r2
 800316a:	2b01      	cmp	r3, #1
 800316c:	d1e3      	bne.n	8003136 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}
 8003178:	80000017 	.word	0x80000017

0800317c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2203      	movs	r2, #3
 8003190:	4013      	ands	r3, r2
 8003192:	2b01      	cmp	r3, #1
 8003194:	d108      	bne.n	80031a8 <ADC_Disable+0x2c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	4013      	ands	r3, r2
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <ADC_Disable+0x2c>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <ADC_Disable+0x2e>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d041      	beq.n	8003232 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2205      	movs	r2, #5
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d110      	bne.n	80031de <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2102      	movs	r1, #2
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2203      	movs	r2, #3
 80031d2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031d4:	f7ff fc1e 	bl	8002a14 <HAL_GetTick>
 80031d8:	0003      	movs	r3, r0
 80031da:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031dc:	e022      	b.n	8003224 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	2210      	movs	r2, #16
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	2201      	movs	r2, #1
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e01c      	b.n	8003234 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031fa:	f7ff fc0b 	bl	8002a14 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b0a      	cmp	r3, #10
 8003206:	d90d      	bls.n	8003224 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	2210      	movs	r2, #16
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	2201      	movs	r2, #1
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2201      	movs	r2, #1
 800322c:	4013      	ands	r3, r2
 800322e:	2b01      	cmp	r3, #1
 8003230:	d0e3      	beq.n	80031fa <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bd80      	pop	{r7, pc}

0800323c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2204      	movs	r2, #4
 8003250:	4013      	ands	r3, r2
 8003252:	d034      	beq.n	80032be <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2204      	movs	r2, #4
 800325c:	4013      	ands	r3, r2
 800325e:	2b04      	cmp	r3, #4
 8003260:	d10d      	bne.n	800327e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2202      	movs	r2, #2
 800326a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800326c:	d107      	bne.n	800327e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2110      	movs	r1, #16
 800327a:	430a      	orrs	r2, r1
 800327c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800327e:	f7ff fbc9 	bl	8002a14 <HAL_GetTick>
 8003282:	0003      	movs	r3, r0
 8003284:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003286:	e014      	b.n	80032b2 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003288:	f7ff fbc4 	bl	8002a14 <HAL_GetTick>
 800328c:	0002      	movs	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b0a      	cmp	r3, #10
 8003294:	d90d      	bls.n	80032b2 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	2210      	movs	r2, #16
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	2201      	movs	r2, #1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e006      	b.n	80032c0 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2204      	movs	r2, #4
 80032ba:	4013      	ands	r3, r2
 80032bc:	d1e4      	bne.n	8003288 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b004      	add	sp, #16
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <ADC_DelayMicroSecond+0x38>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	490b      	ldr	r1, [pc, #44]	; (8003304 <ADC_DelayMicroSecond+0x3c>)
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7fc ff16 	bl	8000108 <__udivsi3>
 80032dc:	0003      	movs	r3, r0
 80032de:	001a      	movs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4353      	muls	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80032e6:	e002      	b.n	80032ee <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b004      	add	sp, #16
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	20000000 	.word	0x20000000
 8003304:	000f4240 	.word	0x000f4240

08003308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	0002      	movs	r2, r0
 8003310:	6039      	str	r1, [r7, #0]
 8003312:	1dfb      	adds	r3, r7, #7
 8003314:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003316:	1dfb      	adds	r3, r7, #7
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b7f      	cmp	r3, #127	; 0x7f
 800331c:	d828      	bhi.n	8003370 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800331e:	4a2f      	ldr	r2, [pc, #188]	; (80033dc <__NVIC_SetPriority+0xd4>)
 8003320:	1dfb      	adds	r3, r7, #7
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	b25b      	sxtb	r3, r3
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	33c0      	adds	r3, #192	; 0xc0
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	589b      	ldr	r3, [r3, r2]
 800332e:	1dfa      	adds	r2, r7, #7
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	0011      	movs	r1, r2
 8003334:	2203      	movs	r2, #3
 8003336:	400a      	ands	r2, r1
 8003338:	00d2      	lsls	r2, r2, #3
 800333a:	21ff      	movs	r1, #255	; 0xff
 800333c:	4091      	lsls	r1, r2
 800333e:	000a      	movs	r2, r1
 8003340:	43d2      	mvns	r2, r2
 8003342:	401a      	ands	r2, r3
 8003344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	019b      	lsls	r3, r3, #6
 800334a:	22ff      	movs	r2, #255	; 0xff
 800334c:	401a      	ands	r2, r3
 800334e:	1dfb      	adds	r3, r7, #7
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	0018      	movs	r0, r3
 8003354:	2303      	movs	r3, #3
 8003356:	4003      	ands	r3, r0
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800335c:	481f      	ldr	r0, [pc, #124]	; (80033dc <__NVIC_SetPriority+0xd4>)
 800335e:	1dfb      	adds	r3, r7, #7
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b25b      	sxtb	r3, r3
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	430a      	orrs	r2, r1
 8003368:	33c0      	adds	r3, #192	; 0xc0
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800336e:	e031      	b.n	80033d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003370:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <__NVIC_SetPriority+0xd8>)
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	0019      	movs	r1, r3
 8003378:	230f      	movs	r3, #15
 800337a:	400b      	ands	r3, r1
 800337c:	3b08      	subs	r3, #8
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	3306      	adds	r3, #6
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	3304      	adds	r3, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1dfa      	adds	r2, r7, #7
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	0011      	movs	r1, r2
 8003390:	2203      	movs	r2, #3
 8003392:	400a      	ands	r2, r1
 8003394:	00d2      	lsls	r2, r2, #3
 8003396:	21ff      	movs	r1, #255	; 0xff
 8003398:	4091      	lsls	r1, r2
 800339a:	000a      	movs	r2, r1
 800339c:	43d2      	mvns	r2, r2
 800339e:	401a      	ands	r2, r3
 80033a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	019b      	lsls	r3, r3, #6
 80033a6:	22ff      	movs	r2, #255	; 0xff
 80033a8:	401a      	ands	r2, r3
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	0018      	movs	r0, r3
 80033b0:	2303      	movs	r3, #3
 80033b2:	4003      	ands	r3, r0
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b8:	4809      	ldr	r0, [pc, #36]	; (80033e0 <__NVIC_SetPriority+0xd8>)
 80033ba:	1dfb      	adds	r3, r7, #7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	001c      	movs	r4, r3
 80033c0:	230f      	movs	r3, #15
 80033c2:	4023      	ands	r3, r4
 80033c4:	3b08      	subs	r3, #8
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	430a      	orrs	r2, r1
 80033ca:	3306      	adds	r3, #6
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	18c3      	adds	r3, r0, r3
 80033d0:	3304      	adds	r3, #4
 80033d2:	601a      	str	r2, [r3, #0]
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b003      	add	sp, #12
 80033da:	bd90      	pop	{r4, r7, pc}
 80033dc:	e000e100 	.word	0xe000e100
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1e5a      	subs	r2, r3, #1
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	045b      	lsls	r3, r3, #17
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d301      	bcc.n	80033fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033f8:	2301      	movs	r3, #1
 80033fa:	e010      	b.n	800341e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <SysTick_Config+0x44>)
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	3a01      	subs	r2, #1
 8003402:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003404:	2301      	movs	r3, #1
 8003406:	425b      	negs	r3, r3
 8003408:	2103      	movs	r1, #3
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff ff7c 	bl	8003308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <SysTick_Config+0x44>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003416:	4b04      	ldr	r3, [pc, #16]	; (8003428 <SysTick_Config+0x44>)
 8003418:	2207      	movs	r2, #7
 800341a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800341c:	2300      	movs	r3, #0
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	e000e010 	.word	0xe000e010

0800342c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	210f      	movs	r1, #15
 8003438:	187b      	adds	r3, r7, r1
 800343a:	1c02      	adds	r2, r0, #0
 800343c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	187b      	adds	r3, r7, r1
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	b25b      	sxtb	r3, r3
 8003446:	0011      	movs	r1, r2
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff ff5d 	bl	8003308 <__NVIC_SetPriority>
}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b004      	add	sp, #16
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff ffbf 	bl	80033e4 <SysTick_Config>
 8003466:	0003      	movs	r3, r0
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b002      	add	sp, #8
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003486:	e14f      	b.n	8003728 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2101      	movs	r1, #1
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4091      	lsls	r1, r2
 8003492:	000a      	movs	r2, r1
 8003494:	4013      	ands	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d100      	bne.n	80034a0 <HAL_GPIO_Init+0x30>
 800349e:	e140      	b.n	8003722 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d00b      	beq.n	80034c0 <HAL_GPIO_Init+0x50>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d007      	beq.n	80034c0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034b4:	2b11      	cmp	r3, #17
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b12      	cmp	r3, #18
 80034be:	d130      	bne.n	8003522 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	409a      	lsls	r2, r3
 80034ce:	0013      	movs	r3, r2
 80034d0:	43da      	mvns	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	409a      	lsls	r2, r3
 80034e2:	0013      	movs	r3, r2
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f6:	2201      	movs	r2, #1
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
 80034fc:	0013      	movs	r3, r2
 80034fe:	43da      	mvns	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	2201      	movs	r2, #1
 800350e:	401a      	ands	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	409a      	lsls	r2, r3
 8003514:	0013      	movs	r3, r2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	2203      	movs	r2, #3
 800352e:	409a      	lsls	r2, r3
 8003530:	0013      	movs	r3, r2
 8003532:	43da      	mvns	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	0013      	movs	r3, r2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0xf2>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b12      	cmp	r3, #18
 8003560:	d123      	bne.n	80035aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	08da      	lsrs	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3208      	adds	r2, #8
 800356a:	0092      	lsls	r2, r2, #2
 800356c:	58d3      	ldr	r3, [r2, r3]
 800356e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2207      	movs	r2, #7
 8003574:	4013      	ands	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	220f      	movs	r2, #15
 800357a:	409a      	lsls	r2, r3
 800357c:	0013      	movs	r3, r2
 800357e:	43da      	mvns	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4013      	ands	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2107      	movs	r1, #7
 800358e:	400b      	ands	r3, r1
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	409a      	lsls	r2, r3
 8003594:	0013      	movs	r3, r2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3208      	adds	r2, #8
 80035a4:	0092      	lsls	r2, r2, #2
 80035a6:	6939      	ldr	r1, [r7, #16]
 80035a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	2203      	movs	r2, #3
 80035b6:	409a      	lsls	r2, r3
 80035b8:	0013      	movs	r3, r2
 80035ba:	43da      	mvns	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2203      	movs	r2, #3
 80035c8:	401a      	ands	r2, r3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	055b      	lsls	r3, r3, #21
 80035e6:	4013      	ands	r3, r2
 80035e8:	d100      	bne.n	80035ec <HAL_GPIO_Init+0x17c>
 80035ea:	e09a      	b.n	8003722 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ec:	4b54      	ldr	r3, [pc, #336]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80035ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f0:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80035f2:	2101      	movs	r1, #1
 80035f4:	430a      	orrs	r2, r1
 80035f6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_GPIO_Init+0x2d4>)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	589b      	ldr	r3, [r3, r2]
 8003604:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2203      	movs	r2, #3
 800360a:	4013      	ands	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	220f      	movs	r2, #15
 8003610:	409a      	lsls	r2, r3
 8003612:	0013      	movs	r3, r2
 8003614:	43da      	mvns	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	23a0      	movs	r3, #160	; 0xa0
 8003620:	05db      	lsls	r3, r3, #23
 8003622:	429a      	cmp	r2, r3
 8003624:	d019      	beq.n	800365a <HAL_GPIO_Init+0x1ea>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a47      	ldr	r2, [pc, #284]	; (8003748 <HAL_GPIO_Init+0x2d8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_GPIO_Init+0x1e6>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a46      	ldr	r2, [pc, #280]	; (800374c <HAL_GPIO_Init+0x2dc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00d      	beq.n	8003652 <HAL_GPIO_Init+0x1e2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a45      	ldr	r2, [pc, #276]	; (8003750 <HAL_GPIO_Init+0x2e0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <HAL_GPIO_Init+0x1de>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a44      	ldr	r2, [pc, #272]	; (8003754 <HAL_GPIO_Init+0x2e4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_GPIO_Init+0x1da>
 8003646:	2305      	movs	r3, #5
 8003648:	e008      	b.n	800365c <HAL_GPIO_Init+0x1ec>
 800364a:	2306      	movs	r3, #6
 800364c:	e006      	b.n	800365c <HAL_GPIO_Init+0x1ec>
 800364e:	2303      	movs	r3, #3
 8003650:	e004      	b.n	800365c <HAL_GPIO_Init+0x1ec>
 8003652:	2302      	movs	r3, #2
 8003654:	e002      	b.n	800365c <HAL_GPIO_Init+0x1ec>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <HAL_GPIO_Init+0x1ec>
 800365a:	2300      	movs	r3, #0
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	2103      	movs	r1, #3
 8003660:	400a      	ands	r2, r1
 8003662:	0092      	lsls	r2, r2, #2
 8003664:	4093      	lsls	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800366c:	4935      	ldr	r1, [pc, #212]	; (8003744 <HAL_GPIO_Init+0x2d4>)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	3302      	adds	r3, #2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	43da      	mvns	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	025b      	lsls	r3, r3, #9
 8003692:	4013      	ands	r3, r2
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80036a4:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	4013      	ands	r3, r2
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ce:	4b22      	ldr	r3, [pc, #136]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	43da      	mvns	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	035b      	lsls	r3, r3, #13
 80036e6:	4013      	ands	r3, r2
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036f2:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	43da      	mvns	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	039b      	lsls	r3, r3, #14
 8003710:	4013      	ands	r3, r2
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	3301      	adds	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	40da      	lsrs	r2, r3
 8003730:	1e13      	subs	r3, r2, #0
 8003732:	d000      	beq.n	8003736 <HAL_GPIO_Init+0x2c6>
 8003734:	e6a8      	b.n	8003488 <HAL_GPIO_Init+0x18>
  }
}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b006      	add	sp, #24
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	40010000 	.word	0x40010000
 8003748:	50000400 	.word	0x50000400
 800374c:	50000800 	.word	0x50000800
 8003750:	50000c00 	.word	0x50000c00
 8003754:	50001c00 	.word	0x50001c00
 8003758:	40010400 	.word	0x40010400

0800375c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f000 fbaf 	bl	8003ece <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003770:	4bcf      	ldr	r3, [pc, #828]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	220c      	movs	r2, #12
 8003776:	4013      	ands	r3, r2
 8003778:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800377a:	4bcd      	ldr	r3, [pc, #820]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	025b      	lsls	r3, r3, #9
 8003782:	4013      	ands	r3, r2
 8003784:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	4013      	ands	r3, r2
 800378e:	d100      	bne.n	8003792 <HAL_RCC_OscConfig+0x36>
 8003790:	e07e      	b.n	8003890 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d007      	beq.n	80037a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d112      	bne.n	80037c4 <HAL_RCC_OscConfig+0x68>
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	025b      	lsls	r3, r3, #9
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d10d      	bne.n	80037c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	4bc1      	ldr	r3, [pc, #772]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	029b      	lsls	r3, r3, #10
 80037b0:	4013      	ands	r3, r2
 80037b2:	d100      	bne.n	80037b6 <HAL_RCC_OscConfig+0x5a>
 80037b4:	e06b      	b.n	800388e <HAL_RCC_OscConfig+0x132>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d167      	bne.n	800388e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f000 fb85 	bl	8003ece <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	025b      	lsls	r3, r3, #9
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_OscConfig+0x84>
 80037d0:	4bb7      	ldr	r3, [pc, #732]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4bb6      	ldr	r3, [pc, #728]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80037d6:	2180      	movs	r1, #128	; 0x80
 80037d8:	0249      	lsls	r1, r1, #9
 80037da:	430a      	orrs	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e027      	b.n	8003830 <HAL_RCC_OscConfig+0xd4>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	23a0      	movs	r3, #160	; 0xa0
 80037e6:	02db      	lsls	r3, r3, #11
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d10e      	bne.n	800380a <HAL_RCC_OscConfig+0xae>
 80037ec:	4bb0      	ldr	r3, [pc, #704]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4baf      	ldr	r3, [pc, #700]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80037f2:	2180      	movs	r1, #128	; 0x80
 80037f4:	02c9      	lsls	r1, r1, #11
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	4bad      	ldr	r3, [pc, #692]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4bac      	ldr	r3, [pc, #688]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003800:	2180      	movs	r1, #128	; 0x80
 8003802:	0249      	lsls	r1, r1, #9
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e012      	b.n	8003830 <HAL_RCC_OscConfig+0xd4>
 800380a:	4ba9      	ldr	r3, [pc, #676]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4ba8      	ldr	r3, [pc, #672]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003810:	49a8      	ldr	r1, [pc, #672]	; (8003ab4 <HAL_RCC_OscConfig+0x358>)
 8003812:	400a      	ands	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	4ba6      	ldr	r3, [pc, #664]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	025b      	lsls	r3, r3, #9
 800381e:	4013      	ands	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4ba2      	ldr	r3, [pc, #648]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4ba1      	ldr	r3, [pc, #644]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 800382a:	49a3      	ldr	r1, [pc, #652]	; (8003ab8 <HAL_RCC_OscConfig+0x35c>)
 800382c:	400a      	ands	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d015      	beq.n	8003864 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7ff f8ec 	bl	8002a14 <HAL_GetTick>
 800383c:	0003      	movs	r3, r0
 800383e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003840:	e009      	b.n	8003856 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003842:	f7ff f8e7 	bl	8002a14 <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b64      	cmp	r3, #100	; 0x64
 800384e:	d902      	bls.n	8003856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	f000 fb3c 	bl	8003ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003856:	4b96      	ldr	r3, [pc, #600]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	029b      	lsls	r3, r3, #10
 800385e:	4013      	ands	r3, r2
 8003860:	d0ef      	beq.n	8003842 <HAL_RCC_OscConfig+0xe6>
 8003862:	e015      	b.n	8003890 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7ff f8d6 	bl	8002a14 <HAL_GetTick>
 8003868:	0003      	movs	r3, r0
 800386a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386e:	f7ff f8d1 	bl	8002a14 <HAL_GetTick>
 8003872:	0002      	movs	r2, r0
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b64      	cmp	r3, #100	; 0x64
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e326      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003880:	4b8b      	ldr	r3, [pc, #556]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	029b      	lsls	r3, r3, #10
 8003888:	4013      	ands	r3, r2
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x112>
 800388c:	e000      	b.n	8003890 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2202      	movs	r2, #2
 8003896:	4013      	ands	r3, r2
 8003898:	d100      	bne.n	800389c <HAL_RCC_OscConfig+0x140>
 800389a:	e08b      	b.n	80039b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d13e      	bne.n	800392c <HAL_RCC_OscConfig+0x1d0>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d13b      	bne.n	800392c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80038b4:	4b7e      	ldr	r3, [pc, #504]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2204      	movs	r2, #4
 80038ba:	4013      	ands	r3, r2
 80038bc:	d004      	beq.n	80038c8 <HAL_RCC_OscConfig+0x16c>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e302      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b79      	ldr	r3, [pc, #484]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4a7b      	ldr	r2, [pc, #492]	; (8003abc <HAL_RCC_OscConfig+0x360>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	0019      	movs	r1, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	021a      	lsls	r2, r3, #8
 80038d8:	4b75      	ldr	r3, [pc, #468]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80038de:	4b74      	ldr	r3, [pc, #464]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2209      	movs	r2, #9
 80038e4:	4393      	bics	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	4b71      	ldr	r3, [pc, #452]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038f0:	f000 fc40 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 80038f4:	0001      	movs	r1, r0
 80038f6:	4b6e      	ldr	r3, [pc, #440]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	220f      	movs	r2, #15
 80038fe:	4013      	ands	r3, r2
 8003900:	4a6f      	ldr	r2, [pc, #444]	; (8003ac0 <HAL_RCC_OscConfig+0x364>)
 8003902:	5cd3      	ldrb	r3, [r2, r3]
 8003904:	000a      	movs	r2, r1
 8003906:	40da      	lsrs	r2, r3
 8003908:	4b6e      	ldr	r3, [pc, #440]	; (8003ac4 <HAL_RCC_OscConfig+0x368>)
 800390a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800390c:	4b6e      	ldr	r3, [pc, #440]	; (8003ac8 <HAL_RCC_OscConfig+0x36c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2513      	movs	r5, #19
 8003912:	197c      	adds	r4, r7, r5
 8003914:	0018      	movs	r0, r3
 8003916:	f7ff f837 	bl	8002988 <HAL_InitTick>
 800391a:	0003      	movs	r3, r0
 800391c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800391e:	197b      	adds	r3, r7, r5
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d046      	beq.n	80039b4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003926:	197b      	adds	r3, r7, r5
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	e2d0      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d027      	beq.n	8003982 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003932:	4b5f      	ldr	r3, [pc, #380]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2209      	movs	r2, #9
 8003938:	4393      	bics	r3, r2
 800393a:	0019      	movs	r1, r3
 800393c:	4b5c      	ldr	r3, [pc, #368]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7ff f866 	bl	8002a14 <HAL_GetTick>
 8003948:	0003      	movs	r3, r0
 800394a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394e:	f7ff f861 	bl	8002a14 <HAL_GetTick>
 8003952:	0002      	movs	r2, r0
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e2b6      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2204      	movs	r2, #4
 8003966:	4013      	ands	r3, r2
 8003968:	d0f1      	beq.n	800394e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396a:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a53      	ldr	r2, [pc, #332]	; (8003abc <HAL_RCC_OscConfig+0x360>)
 8003970:	4013      	ands	r3, r2
 8003972:	0019      	movs	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	021a      	lsls	r2, r3, #8
 800397a:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	e018      	b.n	80039b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003982:	4b4b      	ldr	r3, [pc, #300]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003988:	2101      	movs	r1, #1
 800398a:	438a      	bics	r2, r1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7ff f841 	bl	8002a14 <HAL_GetTick>
 8003992:	0003      	movs	r3, r0
 8003994:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003998:	f7ff f83c 	bl	8002a14 <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e291      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039aa:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2204      	movs	r2, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	d1f1      	bne.n	8003998 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2210      	movs	r2, #16
 80039ba:	4013      	ands	r3, r2
 80039bc:	d100      	bne.n	80039c0 <HAL_RCC_OscConfig+0x264>
 80039be:	e0a1      	b.n	8003b04 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d140      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039c6:	4b3a      	ldr	r3, [pc, #232]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4013      	ands	r3, r2
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x282>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e277      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039de:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a3a      	ldr	r2, [pc, #232]	; (8003acc <HAL_RCC_OscConfig+0x370>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ec:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039f2:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	0a19      	lsrs	r1, r3, #8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	061a      	lsls	r2, r3, #24
 8003a00:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	0b5b      	lsrs	r3, r3, #13
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	0212      	lsls	r2, r2, #8
 8003a12:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003a14:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	210f      	movs	r1, #15
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	4928      	ldr	r1, [pc, #160]	; (8003ac0 <HAL_RCC_OscConfig+0x364>)
 8003a20:	5ccb      	ldrb	r3, [r1, r3]
 8003a22:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_OscConfig+0x368>)
 8003a26:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <HAL_RCC_OscConfig+0x36c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2513      	movs	r5, #19
 8003a2e:	197c      	adds	r4, r7, r5
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7fe ffa9 	bl	8002988 <HAL_InitTick>
 8003a36:	0003      	movs	r3, r0
 8003a38:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003a3a:	197b      	adds	r3, r7, r5
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d060      	beq.n	8003b04 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003a42:	197b      	adds	r3, r7, r5
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	e242      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d03f      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a50:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	0049      	lsls	r1, r1, #1
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5e:	f7fe ffd9 	bl	8002a14 <HAL_GetTick>
 8003a62:	0003      	movs	r3, r0
 8003a64:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a68:	f7fe ffd4 	bl	8002a14 <HAL_GetTick>
 8003a6c:	0002      	movs	r2, r0
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e229      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4013      	ands	r3, r2
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a10      	ldr	r2, [pc, #64]	; (8003acc <HAL_RCC_OscConfig+0x370>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	0a19      	lsrs	r1, r3, #8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	061a      	lsls	r2, r3, #24
 8003aa8:	4b01      	ldr	r3, [pc, #4]	; (8003ab0 <HAL_RCC_OscConfig+0x354>)
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	e029      	b.n	8003b04 <HAL_RCC_OscConfig+0x3a8>
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	fffeffff 	.word	0xfffeffff
 8003ab8:	fffbffff 	.word	0xfffbffff
 8003abc:	ffffe0ff 	.word	0xffffe0ff
 8003ac0:	08005810 	.word	0x08005810
 8003ac4:	20000000 	.word	0x20000000
 8003ac8:	20000004 	.word	0x20000004
 8003acc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ad0:	4bbd      	ldr	r3, [pc, #756]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4bbc      	ldr	r3, [pc, #752]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003ad6:	49bd      	ldr	r1, [pc, #756]	; (8003dcc <HAL_RCC_OscConfig+0x670>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fe ff9a 	bl	8002a14 <HAL_GetTick>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ae6:	f7fe ff95 	bl	8002a14 <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1ea      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003af8:	4bb3      	ldr	r3, [pc, #716]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4013      	ands	r3, r2
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2208      	movs	r2, #8
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d036      	beq.n	8003b7c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d019      	beq.n	8003b4a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b16:	4bac      	ldr	r3, [pc, #688]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b1a:	4bab      	ldr	r3, [pc, #684]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b22:	f7fe ff77 	bl	8002a14 <HAL_GetTick>
 8003b26:	0003      	movs	r3, r0
 8003b28:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fe ff72 	bl	8002a14 <HAL_GetTick>
 8003b30:	0002      	movs	r2, r0
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1c7      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b3e:	4ba2      	ldr	r3, [pc, #648]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b42:	2202      	movs	r2, #2
 8003b44:	4013      	ands	r3, r2
 8003b46:	d0f1      	beq.n	8003b2c <HAL_RCC_OscConfig+0x3d0>
 8003b48:	e018      	b.n	8003b7c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4a:	4b9f      	ldr	r3, [pc, #636]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b4e:	4b9e      	ldr	r3, [pc, #632]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003b50:	2101      	movs	r1, #1
 8003b52:	438a      	bics	r2, r1
 8003b54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b56:	f7fe ff5d 	bl	8002a14 <HAL_GetTick>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fe ff58 	bl	8002a14 <HAL_GetTick>
 8003b64:	0002      	movs	r2, r0
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e1ad      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b72:	4b95      	ldr	r3, [pc, #596]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	2202      	movs	r2, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d1f1      	bne.n	8003b60 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2204      	movs	r2, #4
 8003b82:	4013      	ands	r3, r2
 8003b84:	d100      	bne.n	8003b88 <HAL_RCC_OscConfig+0x42c>
 8003b86:	e0ae      	b.n	8003ce6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b88:	2027      	movs	r0, #39	; 0x27
 8003b8a:	183b      	adds	r3, r7, r0
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b90:	4b8d      	ldr	r3, [pc, #564]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	055b      	lsls	r3, r3, #21
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d109      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9c:	4b8a      	ldr	r3, [pc, #552]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba0:	4b89      	ldr	r3, [pc, #548]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	0549      	lsls	r1, r1, #21
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003baa:	183b      	adds	r3, r7, r0
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	4b87      	ldr	r3, [pc, #540]	; (8003dd0 <HAL_RCC_OscConfig+0x674>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d11a      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbc:	4b84      	ldr	r3, [pc, #528]	; (8003dd0 <HAL_RCC_OscConfig+0x674>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b83      	ldr	r3, [pc, #524]	; (8003dd0 <HAL_RCC_OscConfig+0x674>)
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	0049      	lsls	r1, r1, #1
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7fe ff23 	bl	8002a14 <HAL_GetTick>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fe ff1e 	bl	8002a14 <HAL_GetTick>
 8003bd8:	0002      	movs	r2, r0
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e173      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b7a      	ldr	r3, [pc, #488]	; (8003dd0 <HAL_RCC_OscConfig+0x674>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_OscConfig+0x4b2>
 8003bfe:	4b72      	ldr	r3, [pc, #456]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c02:	4b71      	ldr	r3, [pc, #452]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0049      	lsls	r1, r1, #1
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	651a      	str	r2, [r3, #80]	; 0x50
 8003c0c:	e031      	b.n	8003c72 <HAL_RCC_OscConfig+0x516>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x4d4>
 8003c16:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c1a:	4b6b      	ldr	r3, [pc, #428]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c1c:	496b      	ldr	r1, [pc, #428]	; (8003dcc <HAL_RCC_OscConfig+0x670>)
 8003c1e:	400a      	ands	r2, r1
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50
 8003c22:	4b69      	ldr	r3, [pc, #420]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c26:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c28:	496a      	ldr	r1, [pc, #424]	; (8003dd4 <HAL_RCC_OscConfig+0x678>)
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	651a      	str	r2, [r3, #80]	; 0x50
 8003c2e:	e020      	b.n	8003c72 <HAL_RCC_OscConfig+0x516>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	23a0      	movs	r3, #160	; 0xa0
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d10e      	bne.n	8003c5a <HAL_RCC_OscConfig+0x4fe>
 8003c3c:	4b62      	ldr	r3, [pc, #392]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c40:	4b61      	ldr	r3, [pc, #388]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	00c9      	lsls	r1, r1, #3
 8003c46:	430a      	orrs	r2, r1
 8003c48:	651a      	str	r2, [r3, #80]	; 0x50
 8003c4a:	4b5f      	ldr	r3, [pc, #380]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c4e:	4b5e      	ldr	r3, [pc, #376]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c50:	2180      	movs	r1, #128	; 0x80
 8003c52:	0049      	lsls	r1, r1, #1
 8003c54:	430a      	orrs	r2, r1
 8003c56:	651a      	str	r2, [r3, #80]	; 0x50
 8003c58:	e00b      	b.n	8003c72 <HAL_RCC_OscConfig+0x516>
 8003c5a:	4b5b      	ldr	r3, [pc, #364]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c5e:	4b5a      	ldr	r3, [pc, #360]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c60:	495a      	ldr	r1, [pc, #360]	; (8003dcc <HAL_RCC_OscConfig+0x670>)
 8003c62:	400a      	ands	r2, r1
 8003c64:	651a      	str	r2, [r3, #80]	; 0x50
 8003c66:	4b58      	ldr	r3, [pc, #352]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c6a:	4b57      	ldr	r3, [pc, #348]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c6c:	4959      	ldr	r1, [pc, #356]	; (8003dd4 <HAL_RCC_OscConfig+0x678>)
 8003c6e:	400a      	ands	r2, r1
 8003c70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d015      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7a:	f7fe fecb 	bl	8002a14 <HAL_GetTick>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c82:	e009      	b.n	8003c98 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c84:	f7fe fec6 	bl	8002a14 <HAL_GetTick>
 8003c88:	0002      	movs	r2, r0
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	4a52      	ldr	r2, [pc, #328]	; (8003dd8 <HAL_RCC_OscConfig+0x67c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e11a      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c98:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d0ef      	beq.n	8003c84 <HAL_RCC_OscConfig+0x528>
 8003ca4:	e014      	b.n	8003cd0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7fe feb5 	bl	8002a14 <HAL_GetTick>
 8003caa:	0003      	movs	r3, r0
 8003cac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cae:	e009      	b.n	8003cc4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fe feb0 	bl	8002a14 <HAL_GetTick>
 8003cb4:	0002      	movs	r2, r0
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	4a47      	ldr	r2, [pc, #284]	; (8003dd8 <HAL_RCC_OscConfig+0x67c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e104      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cc4:	4b40      	ldr	r3, [pc, #256]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d1ef      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cd0:	2327      	movs	r3, #39	; 0x27
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cde:	4b3a      	ldr	r3, [pc, #232]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003ce0:	493e      	ldr	r1, [pc, #248]	; (8003ddc <HAL_RCC_OscConfig+0x680>)
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2220      	movs	r2, #32
 8003cec:	4013      	ands	r3, r2
 8003cee:	d049      	beq.n	8003d84 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d026      	beq.n	8003d46 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003cf8:	4b33      	ldr	r3, [pc, #204]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	4b32      	ldr	r3, [pc, #200]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003cfe:	2101      	movs	r1, #1
 8003d00:	430a      	orrs	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d08:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	635a      	str	r2, [r3, #52]	; 0x34
 8003d10:	4b33      	ldr	r3, [pc, #204]	; (8003de0 <HAL_RCC_OscConfig+0x684>)
 8003d12:	6a1a      	ldr	r2, [r3, #32]
 8003d14:	4b32      	ldr	r3, [pc, #200]	; (8003de0 <HAL_RCC_OscConfig+0x684>)
 8003d16:	2180      	movs	r1, #128	; 0x80
 8003d18:	0189      	lsls	r1, r1, #6
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fe fe79 	bl	8002a14 <HAL_GetTick>
 8003d22:	0003      	movs	r3, r0
 8003d24:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d28:	f7fe fe74 	bl	8002a14 <HAL_GetTick>
 8003d2c:	0002      	movs	r2, r0
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e0c9      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	4013      	ands	r3, r2
 8003d42:	d0f1      	beq.n	8003d28 <HAL_RCC_OscConfig+0x5cc>
 8003d44:	e01e      	b.n	8003d84 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003d46:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	438a      	bics	r2, r1
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <HAL_RCC_OscConfig+0x684>)
 8003d54:	6a1a      	ldr	r2, [r3, #32]
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <HAL_RCC_OscConfig+0x684>)
 8003d58:	4922      	ldr	r1, [pc, #136]	; (8003de4 <HAL_RCC_OscConfig+0x688>)
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fe fe59 	bl	8002a14 <HAL_GetTick>
 8003d62:	0003      	movs	r3, r0
 8003d64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d68:	f7fe fe54 	bl	8002a14 <HAL_GetTick>
 8003d6c:	0002      	movs	r2, r0
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e0a9      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	d1f1      	bne.n	8003d68 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d100      	bne.n	8003d8e <HAL_RCC_OscConfig+0x632>
 8003d8c:	e09e      	b.n	8003ecc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	2b0c      	cmp	r3, #12
 8003d92:	d100      	bne.n	8003d96 <HAL_RCC_OscConfig+0x63a>
 8003d94:	e077      	b.n	8003e86 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d158      	bne.n	8003e50 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_RCC_OscConfig+0x66c>)
 8003da4:	4910      	ldr	r1, [pc, #64]	; (8003de8 <HAL_RCC_OscConfig+0x68c>)
 8003da6:	400a      	ands	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fe fe33 	bl	8002a14 <HAL_GetTick>
 8003dae:	0003      	movs	r3, r0
 8003db0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003db2:	e01b      	b.n	8003dec <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fe fe2e 	bl	8002a14 <HAL_GetTick>
 8003db8:	0002      	movs	r2, r0
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d914      	bls.n	8003dec <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e083      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	fffffeff 	.word	0xfffffeff
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	fffffbff 	.word	0xfffffbff
 8003dd8:	00001388 	.word	0x00001388
 8003ddc:	efffffff 	.word	0xefffffff
 8003de0:	40010000 	.word	0x40010000
 8003de4:	ffffdfff 	.word	0xffffdfff
 8003de8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003dec:	4b3a      	ldr	r3, [pc, #232]	; (8003ed8 <HAL_RCC_OscConfig+0x77c>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	049b      	lsls	r3, r3, #18
 8003df4:	4013      	ands	r3, r2
 8003df6:	d1dd      	bne.n	8003db4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df8:	4b37      	ldr	r3, [pc, #220]	; (8003ed8 <HAL_RCC_OscConfig+0x77c>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a37      	ldr	r2, [pc, #220]	; (8003edc <HAL_RCC_OscConfig+0x780>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e10:	431a      	orrs	r2, r3
 8003e12:	4b31      	ldr	r3, [pc, #196]	; (8003ed8 <HAL_RCC_OscConfig+0x77c>)
 8003e14:	430a      	orrs	r2, r1
 8003e16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <HAL_RCC_OscConfig+0x77c>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b2e      	ldr	r3, [pc, #184]	; (8003ed8 <HAL_RCC_OscConfig+0x77c>)
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	0449      	lsls	r1, r1, #17
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fe fdf5 	bl	8002a14 <HAL_GetTick>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fe fdf0 	bl	8002a14 <HAL_GetTick>
 8003e34:	0002      	movs	r2, r0
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e045      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003e42:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <HAL_RCC_OscConfig+0x77c>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	049b      	lsls	r3, r3, #18
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x6d4>
 8003e4e:	e03d      	b.n	8003ecc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e50:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <HAL_RCC_OscConfig+0x77c>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCC_OscConfig+0x77c>)
 8003e56:	4922      	ldr	r1, [pc, #136]	; (8003ee0 <HAL_RCC_OscConfig+0x784>)
 8003e58:	400a      	ands	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fdda 	bl	8002a14 <HAL_GetTick>
 8003e60:	0003      	movs	r3, r0
 8003e62:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e66:	f7fe fdd5 	bl	8002a14 <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e02a      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e78:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <HAL_RCC_OscConfig+0x77c>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	049b      	lsls	r3, r3, #18
 8003e80:	4013      	ands	r3, r2
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x70a>
 8003e84:	e022      	b.n	8003ecc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e01d      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e92:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_RCC_OscConfig+0x77c>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	025b      	lsls	r3, r3, #9
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d10f      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	23f0      	movs	r3, #240	; 0xf0
 8003eac:	039b      	lsls	r3, r3, #14
 8003eae:	401a      	ands	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	23c0      	movs	r3, #192	; 0xc0
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b00a      	add	sp, #40	; 0x28
 8003ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	ff02ffff 	.word	0xff02ffff
 8003ee0:	feffffff 	.word	0xfeffffff

08003ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee4:	b5b0      	push	{r4, r5, r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e128      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef8:	4b96      	ldr	r3, [pc, #600]	; (8004154 <HAL_RCC_ClockConfig+0x270>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2201      	movs	r2, #1
 8003efe:	4013      	ands	r3, r2
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d91e      	bls.n	8003f44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	4b93      	ldr	r3, [pc, #588]	; (8004154 <HAL_RCC_ClockConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4393      	bics	r3, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	4b90      	ldr	r3, [pc, #576]	; (8004154 <HAL_RCC_ClockConfig+0x270>)
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f18:	f7fe fd7c 	bl	8002a14 <HAL_GetTick>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f20:	e009      	b.n	8003f36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f22:	f7fe fd77 	bl	8002a14 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	4a8a      	ldr	r2, [pc, #552]	; (8004158 <HAL_RCC_ClockConfig+0x274>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e109      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b87      	ldr	r3, [pc, #540]	; (8004154 <HAL_RCC_ClockConfig+0x270>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1ee      	bne.n	8003f22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4e:	4b83      	ldr	r3, [pc, #524]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	22f0      	movs	r2, #240	; 0xf0
 8003f54:	4393      	bics	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	4b7f      	ldr	r3, [pc, #508]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2201      	movs	r2, #1
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <HAL_RCC_ClockConfig+0x8a>
 8003f6c:	e089      	b.n	8004082 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f76:	4b79      	ldr	r3, [pc, #484]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	029b      	lsls	r3, r3, #10
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d120      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0e1      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f8e:	4b73      	ldr	r3, [pc, #460]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	049b      	lsls	r3, r3, #18
 8003f96:	4013      	ands	r3, r2
 8003f98:	d114      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0d5      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa6:	4b6d      	ldr	r3, [pc, #436]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2204      	movs	r2, #4
 8003fac:	4013      	ands	r3, r2
 8003fae:	d109      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0ca      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003fb4:	4b69      	ldr	r3, [pc, #420]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0c2      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc4:	4b65      	ldr	r3, [pc, #404]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2203      	movs	r2, #3
 8003fca:	4393      	bics	r3, r2
 8003fcc:	0019      	movs	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	4b62      	ldr	r3, [pc, #392]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fd8:	f7fe fd1c 	bl	8002a14 <HAL_GetTick>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d111      	bne.n	800400c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe8:	e009      	b.n	8003ffe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fea:	f7fe fd13 	bl	8002a14 <HAL_GetTick>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	4a58      	ldr	r2, [pc, #352]	; (8004158 <HAL_RCC_ClockConfig+0x274>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0a5      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ffe:	4b57      	ldr	r3, [pc, #348]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	220c      	movs	r2, #12
 8004004:	4013      	ands	r3, r2
 8004006:	2b08      	cmp	r3, #8
 8004008:	d1ef      	bne.n	8003fea <HAL_RCC_ClockConfig+0x106>
 800400a:	e03a      	b.n	8004082 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b03      	cmp	r3, #3
 8004012:	d111      	bne.n	8004038 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004014:	e009      	b.n	800402a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004016:	f7fe fcfd 	bl	8002a14 <HAL_GetTick>
 800401a:	0002      	movs	r2, r0
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	4a4d      	ldr	r2, [pc, #308]	; (8004158 <HAL_RCC_ClockConfig+0x274>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e08f      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800402a:	4b4c      	ldr	r3, [pc, #304]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	220c      	movs	r2, #12
 8004030:	4013      	ands	r3, r2
 8004032:	2b0c      	cmp	r3, #12
 8004034:	d1ef      	bne.n	8004016 <HAL_RCC_ClockConfig+0x132>
 8004036:	e024      	b.n	8004082 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d11b      	bne.n	8004078 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004040:	e009      	b.n	8004056 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004042:	f7fe fce7 	bl	8002a14 <HAL_GetTick>
 8004046:	0002      	movs	r2, r0
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	4a42      	ldr	r2, [pc, #264]	; (8004158 <HAL_RCC_ClockConfig+0x274>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e079      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004056:	4b41      	ldr	r3, [pc, #260]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	220c      	movs	r2, #12
 800405c:	4013      	ands	r3, r2
 800405e:	2b04      	cmp	r3, #4
 8004060:	d1ef      	bne.n	8004042 <HAL_RCC_ClockConfig+0x15e>
 8004062:	e00e      	b.n	8004082 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004064:	f7fe fcd6 	bl	8002a14 <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	4a3a      	ldr	r2, [pc, #232]	; (8004158 <HAL_RCC_ClockConfig+0x274>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e068      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004078:	4b38      	ldr	r3, [pc, #224]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	220c      	movs	r2, #12
 800407e:	4013      	ands	r3, r2
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004082:	4b34      	ldr	r3, [pc, #208]	; (8004154 <HAL_RCC_ClockConfig+0x270>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2201      	movs	r2, #1
 8004088:	4013      	ands	r3, r2
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d21e      	bcs.n	80040ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004090:	4b30      	ldr	r3, [pc, #192]	; (8004154 <HAL_RCC_ClockConfig+0x270>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2201      	movs	r2, #1
 8004096:	4393      	bics	r3, r2
 8004098:	0019      	movs	r1, r3
 800409a:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <HAL_RCC_ClockConfig+0x270>)
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040a2:	f7fe fcb7 	bl	8002a14 <HAL_GetTick>
 80040a6:	0003      	movs	r3, r0
 80040a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	e009      	b.n	80040c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fe fcb2 	bl	8002a14 <HAL_GetTick>
 80040b0:	0002      	movs	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	4a28      	ldr	r2, [pc, #160]	; (8004158 <HAL_RCC_ClockConfig+0x274>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e044      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c0:	4b24      	ldr	r3, [pc, #144]	; (8004154 <HAL_RCC_ClockConfig+0x270>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	4013      	ands	r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d1ee      	bne.n	80040ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2204      	movs	r2, #4
 80040d4:	4013      	ands	r3, r2
 80040d6:	d009      	beq.n	80040ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b20      	ldr	r3, [pc, #128]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a20      	ldr	r2, [pc, #128]	; (8004160 <HAL_RCC_ClockConfig+0x27c>)
 80040de:	4013      	ands	r3, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 80040e8:	430a      	orrs	r2, r1
 80040ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2208      	movs	r2, #8
 80040f2:	4013      	ands	r3, r2
 80040f4:	d00a      	beq.n	800410c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040f6:	4b19      	ldr	r3, [pc, #100]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4a1a      	ldr	r2, [pc, #104]	; (8004164 <HAL_RCC_ClockConfig+0x280>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	00da      	lsls	r2, r3, #3
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8004108:	430a      	orrs	r2, r1
 800410a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800410c:	f000 f832 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8004110:	0001      	movs	r1, r0
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_RCC_ClockConfig+0x278>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	220f      	movs	r2, #15
 800411a:	4013      	ands	r3, r2
 800411c:	4a12      	ldr	r2, [pc, #72]	; (8004168 <HAL_RCC_ClockConfig+0x284>)
 800411e:	5cd3      	ldrb	r3, [r2, r3]
 8004120:	000a      	movs	r2, r1
 8004122:	40da      	lsrs	r2, r3
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_RCC_ClockConfig+0x288>)
 8004126:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <HAL_RCC_ClockConfig+0x28c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	250b      	movs	r5, #11
 800412e:	197c      	adds	r4, r7, r5
 8004130:	0018      	movs	r0, r3
 8004132:	f7fe fc29 	bl	8002988 <HAL_InitTick>
 8004136:	0003      	movs	r3, r0
 8004138:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800413a:	197b      	adds	r3, r7, r5
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004142:	197b      	adds	r3, r7, r5
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	e000      	b.n	800414a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	b004      	add	sp, #16
 8004150:	bdb0      	pop	{r4, r5, r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	40022000 	.word	0x40022000
 8004158:	00001388 	.word	0x00001388
 800415c:	40021000 	.word	0x40021000
 8004160:	fffff8ff 	.word	0xfffff8ff
 8004164:	ffffc7ff 	.word	0xffffc7ff
 8004168:	08005810 	.word	0x08005810
 800416c:	20000000 	.word	0x20000000
 8004170:	20000004 	.word	0x20000004

08004174 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004174:	b5b0      	push	{r4, r5, r7, lr}
 8004176:	b08e      	sub	sp, #56	; 0x38
 8004178:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800417a:	4b4c      	ldr	r3, [pc, #304]	; (80042ac <HAL_RCC_GetSysClockFreq+0x138>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004182:	230c      	movs	r3, #12
 8004184:	4013      	ands	r3, r2
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d014      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x40>
 800418a:	d900      	bls.n	800418e <HAL_RCC_GetSysClockFreq+0x1a>
 800418c:	e07b      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x112>
 800418e:	2b04      	cmp	r3, #4
 8004190:	d002      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x24>
 8004192:	2b08      	cmp	r3, #8
 8004194:	d00b      	beq.n	80041ae <HAL_RCC_GetSysClockFreq+0x3a>
 8004196:	e076      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004198:	4b44      	ldr	r3, [pc, #272]	; (80042ac <HAL_RCC_GetSysClockFreq+0x138>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2210      	movs	r2, #16
 800419e:	4013      	ands	r3, r2
 80041a0:	d002      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80041a2:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80041a6:	e07c      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80041a8:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x140>)
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041ac:	e079      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041ae:	4b42      	ldr	r3, [pc, #264]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x144>)
 80041b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041b2:	e076      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	0c9a      	lsrs	r2, r3, #18
 80041b8:	230f      	movs	r3, #15
 80041ba:	401a      	ands	r2, r3
 80041bc:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCC_GetSysClockFreq+0x148>)
 80041be:	5c9b      	ldrb	r3, [r3, r2]
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	0d9a      	lsrs	r2, r3, #22
 80041c6:	2303      	movs	r3, #3
 80041c8:	4013      	ands	r3, r2
 80041ca:	3301      	adds	r3, #1
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <HAL_RCC_GetSysClockFreq+0x138>)
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	2380      	movs	r3, #128	; 0x80
 80041d4:	025b      	lsls	r3, r3, #9
 80041d6:	4013      	ands	r3, r2
 80041d8:	d01a      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	4a35      	ldr	r2, [pc, #212]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x144>)
 80041e4:	2300      	movs	r3, #0
 80041e6:	69b8      	ldr	r0, [r7, #24]
 80041e8:	69f9      	ldr	r1, [r7, #28]
 80041ea:	f7fc f877 	bl	80002dc <__aeabi_lmul>
 80041ee:	0002      	movs	r2, r0
 80041f0:	000b      	movs	r3, r1
 80041f2:	0010      	movs	r0, r2
 80041f4:	0019      	movs	r1, r3
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f7fc f84b 	bl	800029c <__aeabi_uldivmod>
 8004206:	0002      	movs	r2, r0
 8004208:	000b      	movs	r3, r1
 800420a:	0013      	movs	r3, r2
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
 800420e:	e037      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004210:	4b26      	ldr	r3, [pc, #152]	; (80042ac <HAL_RCC_GetSysClockFreq+0x138>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2210      	movs	r2, #16
 8004216:	4013      	ands	r3, r2
 8004218:	d01a      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4a23      	ldr	r2, [pc, #140]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004224:	2300      	movs	r3, #0
 8004226:	68b8      	ldr	r0, [r7, #8]
 8004228:	68f9      	ldr	r1, [r7, #12]
 800422a:	f7fc f857 	bl	80002dc <__aeabi_lmul>
 800422e:	0002      	movs	r2, r0
 8004230:	000b      	movs	r3, r1
 8004232:	0010      	movs	r0, r2
 8004234:	0019      	movs	r1, r3
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	2300      	movs	r3, #0
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f7fc f82b 	bl	800029c <__aeabi_uldivmod>
 8004246:	0002      	movs	r2, r0
 8004248:	000b      	movs	r3, r1
 800424a:	0013      	movs	r3, r2
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
 800424e:	e017      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	0018      	movs	r0, r3
 8004254:	2300      	movs	r3, #0
 8004256:	0019      	movs	r1, r3
 8004258:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x140>)
 800425a:	2300      	movs	r3, #0
 800425c:	f7fc f83e 	bl	80002dc <__aeabi_lmul>
 8004260:	0002      	movs	r2, r0
 8004262:	000b      	movs	r3, r1
 8004264:	0010      	movs	r0, r2
 8004266:	0019      	movs	r1, r3
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	001c      	movs	r4, r3
 800426c:	2300      	movs	r3, #0
 800426e:	001d      	movs	r5, r3
 8004270:	0022      	movs	r2, r4
 8004272:	002b      	movs	r3, r5
 8004274:	f7fc f812 	bl	800029c <__aeabi_uldivmod>
 8004278:	0002      	movs	r2, r0
 800427a:	000b      	movs	r3, r1
 800427c:	0013      	movs	r3, r2
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004282:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004284:	e00d      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004286:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_GetSysClockFreq+0x138>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0b5b      	lsrs	r3, r3, #13
 800428c:	2207      	movs	r2, #7
 800428e:	4013      	ands	r3, r2
 8004290:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	3301      	adds	r3, #1
 8004296:	2280      	movs	r2, #128	; 0x80
 8004298:	0212      	lsls	r2, r2, #8
 800429a:	409a      	lsls	r2, r3
 800429c:	0013      	movs	r3, r2
 800429e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042a0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b00e      	add	sp, #56	; 0x38
 80042aa:	bdb0      	pop	{r4, r5, r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	003d0900 	.word	0x003d0900
 80042b4:	00f42400 	.word	0x00f42400
 80042b8:	007a1200 	.word	0x007a1200
 80042bc:	08005820 	.word	0x08005820

080042c0 <__errno>:
 80042c0:	4b01      	ldr	r3, [pc, #4]	; (80042c8 <__errno+0x8>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	4770      	bx	lr
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	2000000c 	.word	0x2000000c

080042cc <__libc_init_array>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	2600      	movs	r6, #0
 80042d0:	4d0c      	ldr	r5, [pc, #48]	; (8004304 <__libc_init_array+0x38>)
 80042d2:	4c0d      	ldr	r4, [pc, #52]	; (8004308 <__libc_init_array+0x3c>)
 80042d4:	1b64      	subs	r4, r4, r5
 80042d6:	10a4      	asrs	r4, r4, #2
 80042d8:	42a6      	cmp	r6, r4
 80042da:	d109      	bne.n	80042f0 <__libc_init_array+0x24>
 80042dc:	2600      	movs	r6, #0
 80042de:	f001 fa0b 	bl	80056f8 <_init>
 80042e2:	4d0a      	ldr	r5, [pc, #40]	; (800430c <__libc_init_array+0x40>)
 80042e4:	4c0a      	ldr	r4, [pc, #40]	; (8004310 <__libc_init_array+0x44>)
 80042e6:	1b64      	subs	r4, r4, r5
 80042e8:	10a4      	asrs	r4, r4, #2
 80042ea:	42a6      	cmp	r6, r4
 80042ec:	d105      	bne.n	80042fa <__libc_init_array+0x2e>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	00b3      	lsls	r3, r6, #2
 80042f2:	58eb      	ldr	r3, [r5, r3]
 80042f4:	4798      	blx	r3
 80042f6:	3601      	adds	r6, #1
 80042f8:	e7ee      	b.n	80042d8 <__libc_init_array+0xc>
 80042fa:	00b3      	lsls	r3, r6, #2
 80042fc:	58eb      	ldr	r3, [r5, r3]
 80042fe:	4798      	blx	r3
 8004300:	3601      	adds	r6, #1
 8004302:	e7f2      	b.n	80042ea <__libc_init_array+0x1e>
 8004304:	08005878 	.word	0x08005878
 8004308:	08005878 	.word	0x08005878
 800430c:	08005878 	.word	0x08005878
 8004310:	0800587c 	.word	0x0800587c

08004314 <memset>:
 8004314:	0003      	movs	r3, r0
 8004316:	1882      	adds	r2, r0, r2
 8004318:	4293      	cmp	r3, r2
 800431a:	d100      	bne.n	800431e <memset+0xa>
 800431c:	4770      	bx	lr
 800431e:	7019      	strb	r1, [r3, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	e7f9      	b.n	8004318 <memset+0x4>

08004324 <log10>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	0004      	movs	r4, r0
 8004328:	000d      	movs	r5, r1
 800432a:	f000 f8f1 	bl	8004510 <__ieee754_log10>
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <log10+0x70>)
 8004330:	0006      	movs	r6, r0
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	000f      	movs	r7, r1
 8004336:	b25b      	sxtb	r3, r3
 8004338:	3301      	adds	r3, #1
 800433a:	d01d      	beq.n	8004378 <log10+0x54>
 800433c:	0022      	movs	r2, r4
 800433e:	002b      	movs	r3, r5
 8004340:	0020      	movs	r0, r4
 8004342:	0029      	movs	r1, r5
 8004344:	f7fd ff38 	bl	80021b8 <__aeabi_dcmpun>
 8004348:	2800      	cmp	r0, #0
 800434a:	d115      	bne.n	8004378 <log10+0x54>
 800434c:	2200      	movs	r2, #0
 800434e:	2300      	movs	r3, #0
 8004350:	0020      	movs	r0, r4
 8004352:	0029      	movs	r1, r5
 8004354:	f7fb ff84 	bl	8000260 <__aeabi_dcmple>
 8004358:	2800      	cmp	r0, #0
 800435a:	d00d      	beq.n	8004378 <log10+0x54>
 800435c:	2200      	movs	r2, #0
 800435e:	2300      	movs	r3, #0
 8004360:	0020      	movs	r0, r4
 8004362:	0029      	movs	r1, r5
 8004364:	f7fb ff6c 	bl	8000240 <__aeabi_dcmpeq>
 8004368:	2800      	cmp	r0, #0
 800436a:	d008      	beq.n	800437e <log10+0x5a>
 800436c:	f7ff ffa8 	bl	80042c0 <__errno>
 8004370:	2322      	movs	r3, #34	; 0x22
 8004372:	2600      	movs	r6, #0
 8004374:	4f08      	ldr	r7, [pc, #32]	; (8004398 <log10+0x74>)
 8004376:	6003      	str	r3, [r0, #0]
 8004378:	0030      	movs	r0, r6
 800437a:	0039      	movs	r1, r7
 800437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437e:	f7ff ff9f 	bl	80042c0 <__errno>
 8004382:	2321      	movs	r3, #33	; 0x21
 8004384:	6003      	str	r3, [r0, #0]
 8004386:	4805      	ldr	r0, [pc, #20]	; (800439c <log10+0x78>)
 8004388:	f000 ff04 	bl	8005194 <nan>
 800438c:	0006      	movs	r6, r0
 800438e:	000f      	movs	r7, r1
 8004390:	e7f2      	b.n	8004378 <log10+0x54>
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	20000070 	.word	0x20000070
 8004398:	fff00000 	.word	0xfff00000
 800439c:	08005829 	.word	0x08005829

080043a0 <pow>:
 80043a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043a2:	001d      	movs	r5, r3
 80043a4:	0014      	movs	r4, r2
 80043a6:	9000      	str	r0, [sp, #0]
 80043a8:	9101      	str	r1, [sp, #4]
 80043aa:	f000 f933 	bl	8004614 <__ieee754_pow>
 80043ae:	4b54      	ldr	r3, [pc, #336]	; (8004500 <pow+0x160>)
 80043b0:	0006      	movs	r6, r0
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	000f      	movs	r7, r1
 80043b6:	b25b      	sxtb	r3, r3
 80043b8:	3301      	adds	r3, #1
 80043ba:	d018      	beq.n	80043ee <pow+0x4e>
 80043bc:	0022      	movs	r2, r4
 80043be:	002b      	movs	r3, r5
 80043c0:	0020      	movs	r0, r4
 80043c2:	0029      	movs	r1, r5
 80043c4:	f7fd fef8 	bl	80021b8 <__aeabi_dcmpun>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d110      	bne.n	80043ee <pow+0x4e>
 80043cc:	9a00      	ldr	r2, [sp, #0]
 80043ce:	9b01      	ldr	r3, [sp, #4]
 80043d0:	0010      	movs	r0, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	f7fd fef0 	bl	80021b8 <__aeabi_dcmpun>
 80043d8:	2200      	movs	r2, #0
 80043da:	2300      	movs	r3, #0
 80043dc:	2800      	cmp	r0, #0
 80043de:	d00a      	beq.n	80043f6 <pow+0x56>
 80043e0:	0020      	movs	r0, r4
 80043e2:	0029      	movs	r1, r5
 80043e4:	f7fb ff2c 	bl	8000240 <__aeabi_dcmpeq>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d000      	beq.n	80043ee <pow+0x4e>
 80043ec:	e084      	b.n	80044f8 <pow+0x158>
 80043ee:	0030      	movs	r0, r6
 80043f0:	0039      	movs	r1, r7
 80043f2:	b003      	add	sp, #12
 80043f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f6:	9800      	ldr	r0, [sp, #0]
 80043f8:	9901      	ldr	r1, [sp, #4]
 80043fa:	f7fb ff21 	bl	8000240 <__aeabi_dcmpeq>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d01c      	beq.n	800443c <pow+0x9c>
 8004402:	2200      	movs	r2, #0
 8004404:	2300      	movs	r3, #0
 8004406:	0020      	movs	r0, r4
 8004408:	0029      	movs	r1, r5
 800440a:	f7fb ff19 	bl	8000240 <__aeabi_dcmpeq>
 800440e:	2800      	cmp	r0, #0
 8004410:	d172      	bne.n	80044f8 <pow+0x158>
 8004412:	0020      	movs	r0, r4
 8004414:	0029      	movs	r1, r5
 8004416:	f000 feb5 	bl	8005184 <finite>
 800441a:	2800      	cmp	r0, #0
 800441c:	d0e7      	beq.n	80043ee <pow+0x4e>
 800441e:	2200      	movs	r2, #0
 8004420:	2300      	movs	r3, #0
 8004422:	0020      	movs	r0, r4
 8004424:	0029      	movs	r1, r5
 8004426:	f7fb ff11 	bl	800024c <__aeabi_dcmplt>
 800442a:	2800      	cmp	r0, #0
 800442c:	d0df      	beq.n	80043ee <pow+0x4e>
 800442e:	f7ff ff47 	bl	80042c0 <__errno>
 8004432:	2321      	movs	r3, #33	; 0x21
 8004434:	2600      	movs	r6, #0
 8004436:	6003      	str	r3, [r0, #0]
 8004438:	4f32      	ldr	r7, [pc, #200]	; (8004504 <pow+0x164>)
 800443a:	e7d8      	b.n	80043ee <pow+0x4e>
 800443c:	0030      	movs	r0, r6
 800443e:	0039      	movs	r1, r7
 8004440:	f000 fea0 	bl	8005184 <finite>
 8004444:	2800      	cmp	r0, #0
 8004446:	d139      	bne.n	80044bc <pow+0x11c>
 8004448:	9800      	ldr	r0, [sp, #0]
 800444a:	9901      	ldr	r1, [sp, #4]
 800444c:	f000 fe9a 	bl	8005184 <finite>
 8004450:	2800      	cmp	r0, #0
 8004452:	d033      	beq.n	80044bc <pow+0x11c>
 8004454:	0020      	movs	r0, r4
 8004456:	0029      	movs	r1, r5
 8004458:	f000 fe94 	bl	8005184 <finite>
 800445c:	2800      	cmp	r0, #0
 800445e:	d02d      	beq.n	80044bc <pow+0x11c>
 8004460:	0032      	movs	r2, r6
 8004462:	003b      	movs	r3, r7
 8004464:	0030      	movs	r0, r6
 8004466:	0039      	movs	r1, r7
 8004468:	f7fd fea6 	bl	80021b8 <__aeabi_dcmpun>
 800446c:	2800      	cmp	r0, #0
 800446e:	d00c      	beq.n	800448a <pow+0xea>
 8004470:	f7ff ff26 	bl	80042c0 <__errno>
 8004474:	2321      	movs	r3, #33	; 0x21
 8004476:	2200      	movs	r2, #0
 8004478:	6003      	str	r3, [r0, #0]
 800447a:	2300      	movs	r3, #0
 800447c:	0010      	movs	r0, r2
 800447e:	0019      	movs	r1, r3
 8004480:	f7fc fc96 	bl	8000db0 <__aeabi_ddiv>
 8004484:	0006      	movs	r6, r0
 8004486:	000f      	movs	r7, r1
 8004488:	e7b1      	b.n	80043ee <pow+0x4e>
 800448a:	f7ff ff19 	bl	80042c0 <__errno>
 800448e:	2322      	movs	r3, #34	; 0x22
 8004490:	2200      	movs	r2, #0
 8004492:	6003      	str	r3, [r0, #0]
 8004494:	2300      	movs	r3, #0
 8004496:	9800      	ldr	r0, [sp, #0]
 8004498:	9901      	ldr	r1, [sp, #4]
 800449a:	f7fb fed7 	bl	800024c <__aeabi_dcmplt>
 800449e:	2600      	movs	r6, #0
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d009      	beq.n	80044b8 <pow+0x118>
 80044a4:	0020      	movs	r0, r4
 80044a6:	0029      	movs	r1, r5
 80044a8:	f000 fe7a 	bl	80051a0 <rint>
 80044ac:	0022      	movs	r2, r4
 80044ae:	002b      	movs	r3, r5
 80044b0:	f7fb fec6 	bl	8000240 <__aeabi_dcmpeq>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d0bf      	beq.n	8004438 <pow+0x98>
 80044b8:	4f13      	ldr	r7, [pc, #76]	; (8004508 <pow+0x168>)
 80044ba:	e798      	b.n	80043ee <pow+0x4e>
 80044bc:	2200      	movs	r2, #0
 80044be:	2300      	movs	r3, #0
 80044c0:	0030      	movs	r0, r6
 80044c2:	0039      	movs	r1, r7
 80044c4:	f7fb febc 	bl	8000240 <__aeabi_dcmpeq>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d100      	bne.n	80044ce <pow+0x12e>
 80044cc:	e78f      	b.n	80043ee <pow+0x4e>
 80044ce:	9800      	ldr	r0, [sp, #0]
 80044d0:	9901      	ldr	r1, [sp, #4]
 80044d2:	f000 fe57 	bl	8005184 <finite>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d100      	bne.n	80044dc <pow+0x13c>
 80044da:	e788      	b.n	80043ee <pow+0x4e>
 80044dc:	0020      	movs	r0, r4
 80044de:	0029      	movs	r1, r5
 80044e0:	f000 fe50 	bl	8005184 <finite>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	d100      	bne.n	80044ea <pow+0x14a>
 80044e8:	e781      	b.n	80043ee <pow+0x4e>
 80044ea:	f7ff fee9 	bl	80042c0 <__errno>
 80044ee:	2322      	movs	r3, #34	; 0x22
 80044f0:	2600      	movs	r6, #0
 80044f2:	2700      	movs	r7, #0
 80044f4:	6003      	str	r3, [r0, #0]
 80044f6:	e77a      	b.n	80043ee <pow+0x4e>
 80044f8:	2600      	movs	r6, #0
 80044fa:	4f04      	ldr	r7, [pc, #16]	; (800450c <pow+0x16c>)
 80044fc:	e777      	b.n	80043ee <pow+0x4e>
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	20000070 	.word	0x20000070
 8004504:	fff00000 	.word	0xfff00000
 8004508:	7ff00000 	.word	0x7ff00000
 800450c:	3ff00000 	.word	0x3ff00000

08004510 <__ieee754_log10>:
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004514:	000b      	movs	r3, r1
 8004516:	0004      	movs	r4, r0
 8004518:	000d      	movs	r5, r1
 800451a:	b085      	sub	sp, #20
 800451c:	0352      	lsls	r2, r2, #13
 800451e:	4291      	cmp	r1, r2
 8004520:	da26      	bge.n	8004570 <__ieee754_log10+0x60>
 8004522:	004a      	lsls	r2, r1, #1
 8004524:	0852      	lsrs	r2, r2, #1
 8004526:	4302      	orrs	r2, r0
 8004528:	d107      	bne.n	800453a <__ieee754_log10+0x2a>
 800452a:	2200      	movs	r2, #0
 800452c:	2300      	movs	r3, #0
 800452e:	2000      	movs	r0, #0
 8004530:	492d      	ldr	r1, [pc, #180]	; (80045e8 <__ieee754_log10+0xd8>)
 8004532:	f7fc fc3d 	bl	8000db0 <__aeabi_ddiv>
 8004536:	b005      	add	sp, #20
 8004538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800453a:	2900      	cmp	r1, #0
 800453c:	da05      	bge.n	800454a <__ieee754_log10+0x3a>
 800453e:	0002      	movs	r2, r0
 8004540:	f7fd faa8 	bl	8001a94 <__aeabi_dsub>
 8004544:	2200      	movs	r2, #0
 8004546:	2300      	movs	r3, #0
 8004548:	e7f3      	b.n	8004532 <__ieee754_log10+0x22>
 800454a:	2200      	movs	r2, #0
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <__ieee754_log10+0xdc>)
 800454e:	f7fd f835 	bl	80015bc <__aeabi_dmul>
 8004552:	2236      	movs	r2, #54	; 0x36
 8004554:	0004      	movs	r4, r0
 8004556:	000d      	movs	r5, r1
 8004558:	000b      	movs	r3, r1
 800455a:	4252      	negs	r2, r2
 800455c:	4924      	ldr	r1, [pc, #144]	; (80045f0 <__ieee754_log10+0xe0>)
 800455e:	428b      	cmp	r3, r1
 8004560:	dd08      	ble.n	8004574 <__ieee754_log10+0x64>
 8004562:	0022      	movs	r2, r4
 8004564:	002b      	movs	r3, r5
 8004566:	0020      	movs	r0, r4
 8004568:	0029      	movs	r1, r5
 800456a:	f7fc f8b7 	bl	80006dc <__aeabi_dadd>
 800456e:	e7e2      	b.n	8004536 <__ieee754_log10+0x26>
 8004570:	2200      	movs	r2, #0
 8004572:	e7f3      	b.n	800455c <__ieee754_log10+0x4c>
 8004574:	491f      	ldr	r1, [pc, #124]	; (80045f4 <__ieee754_log10+0xe4>)
 8004576:	1518      	asrs	r0, r3, #20
 8004578:	1840      	adds	r0, r0, r1
 800457a:	1880      	adds	r0, r0, r2
 800457c:	0fc2      	lsrs	r2, r0, #31
 800457e:	031b      	lsls	r3, r3, #12
 8004580:	0b1b      	lsrs	r3, r3, #12
 8004582:	1880      	adds	r0, r0, r2
 8004584:	9203      	str	r2, [sp, #12]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	f7fd fe34 	bl	80021f4 <__aeabi_i2d>
 800458c:	9a03      	ldr	r2, [sp, #12]
 800458e:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <__ieee754_log10+0xe8>)
 8004590:	0006      	movs	r6, r0
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	9a00      	ldr	r2, [sp, #0]
 8004596:	051b      	lsls	r3, r3, #20
 8004598:	431a      	orrs	r2, r3
 800459a:	000f      	movs	r7, r1
 800459c:	0020      	movs	r0, r4
 800459e:	0011      	movs	r1, r2
 80045a0:	f000 fefa 	bl	8005398 <__ieee754_log>
 80045a4:	4a15      	ldr	r2, [pc, #84]	; (80045fc <__ieee754_log10+0xec>)
 80045a6:	0004      	movs	r4, r0
 80045a8:	000d      	movs	r5, r1
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <__ieee754_log10+0xf0>)
 80045ac:	0030      	movs	r0, r6
 80045ae:	0039      	movs	r1, r7
 80045b0:	f7fd f804 	bl	80015bc <__aeabi_dmul>
 80045b4:	4a13      	ldr	r2, [pc, #76]	; (8004604 <__ieee754_log10+0xf4>)
 80045b6:	9000      	str	r0, [sp, #0]
 80045b8:	9101      	str	r1, [sp, #4]
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <__ieee754_log10+0xf8>)
 80045bc:	0020      	movs	r0, r4
 80045be:	0029      	movs	r1, r5
 80045c0:	f7fc fffc 	bl	80015bc <__aeabi_dmul>
 80045c4:	0002      	movs	r2, r0
 80045c6:	000b      	movs	r3, r1
 80045c8:	9800      	ldr	r0, [sp, #0]
 80045ca:	9901      	ldr	r1, [sp, #4]
 80045cc:	f7fc f886 	bl	80006dc <__aeabi_dadd>
 80045d0:	4a0e      	ldr	r2, [pc, #56]	; (800460c <__ieee754_log10+0xfc>)
 80045d2:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <__ieee754_log10+0x100>)
 80045d4:	0004      	movs	r4, r0
 80045d6:	000d      	movs	r5, r1
 80045d8:	0030      	movs	r0, r6
 80045da:	0039      	movs	r1, r7
 80045dc:	f7fc ffee 	bl	80015bc <__aeabi_dmul>
 80045e0:	0002      	movs	r2, r0
 80045e2:	000b      	movs	r3, r1
 80045e4:	e7bf      	b.n	8004566 <__ieee754_log10+0x56>
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	c3500000 	.word	0xc3500000
 80045ec:	43500000 	.word	0x43500000
 80045f0:	7fefffff 	.word	0x7fefffff
 80045f4:	fffffc01 	.word	0xfffffc01
 80045f8:	000003ff 	.word	0x000003ff
 80045fc:	11f12b36 	.word	0x11f12b36
 8004600:	3d59fef3 	.word	0x3d59fef3
 8004604:	1526e50e 	.word	0x1526e50e
 8004608:	3fdbcb7b 	.word	0x3fdbcb7b
 800460c:	509f6000 	.word	0x509f6000
 8004610:	3fd34413 	.word	0x3fd34413

08004614 <__ieee754_pow>:
 8004614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004616:	b095      	sub	sp, #84	; 0x54
 8004618:	9202      	str	r2, [sp, #8]
 800461a:	9303      	str	r3, [sp, #12]
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	9a03      	ldr	r2, [sp, #12]
 8004620:	9304      	str	r3, [sp, #16]
 8004622:	9b02      	ldr	r3, [sp, #8]
 8004624:	0055      	lsls	r5, r2, #1
 8004626:	001a      	movs	r2, r3
 8004628:	086d      	lsrs	r5, r5, #1
 800462a:	0007      	movs	r7, r0
 800462c:	000e      	movs	r6, r1
 800462e:	432a      	orrs	r2, r5
 8004630:	d101      	bne.n	8004636 <__ieee754_pow+0x22>
 8004632:	f000 fcb6 	bl	8004fa2 <__ieee754_pow+0x98e>
 8004636:	4a82      	ldr	r2, [pc, #520]	; (8004840 <__ieee754_pow+0x22c>)
 8004638:	004c      	lsls	r4, r1, #1
 800463a:	9108      	str	r1, [sp, #32]
 800463c:	9000      	str	r0, [sp, #0]
 800463e:	0864      	lsrs	r4, r4, #1
 8004640:	4294      	cmp	r4, r2
 8004642:	dc0d      	bgt.n	8004660 <__ieee754_pow+0x4c>
 8004644:	d104      	bne.n	8004650 <__ieee754_pow+0x3c>
 8004646:	2800      	cmp	r0, #0
 8004648:	d110      	bne.n	800466c <__ieee754_pow+0x58>
 800464a:	42a5      	cmp	r5, r4
 800464c:	dd03      	ble.n	8004656 <__ieee754_pow+0x42>
 800464e:	e00d      	b.n	800466c <__ieee754_pow+0x58>
 8004650:	4a7b      	ldr	r2, [pc, #492]	; (8004840 <__ieee754_pow+0x22c>)
 8004652:	4295      	cmp	r5, r2
 8004654:	dc04      	bgt.n	8004660 <__ieee754_pow+0x4c>
 8004656:	4a7a      	ldr	r2, [pc, #488]	; (8004840 <__ieee754_pow+0x22c>)
 8004658:	4295      	cmp	r5, r2
 800465a:	d10d      	bne.n	8004678 <__ieee754_pow+0x64>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00b      	beq.n	8004678 <__ieee754_pow+0x64>
 8004660:	4b78      	ldr	r3, [pc, #480]	; (8004844 <__ieee754_pow+0x230>)
 8004662:	18e4      	adds	r4, r4, r3
 8004664:	4327      	orrs	r7, r4
 8004666:	d101      	bne.n	800466c <__ieee754_pow+0x58>
 8004668:	f000 fc9b 	bl	8004fa2 <__ieee754_pow+0x98e>
 800466c:	4876      	ldr	r0, [pc, #472]	; (8004848 <__ieee754_pow+0x234>)
 800466e:	f000 fd91 	bl	8005194 <nan>
 8004672:	9000      	str	r0, [sp, #0]
 8004674:	9101      	str	r1, [sp, #4]
 8004676:	e092      	b.n	800479e <__ieee754_pow+0x18a>
 8004678:	2200      	movs	r2, #0
 800467a:	9206      	str	r2, [sp, #24]
 800467c:	2e00      	cmp	r6, #0
 800467e:	da69      	bge.n	8004754 <__ieee754_pow+0x140>
 8004680:	4a72      	ldr	r2, [pc, #456]	; (800484c <__ieee754_pow+0x238>)
 8004682:	4295      	cmp	r5, r2
 8004684:	dc64      	bgt.n	8004750 <__ieee754_pow+0x13c>
 8004686:	4a72      	ldr	r2, [pc, #456]	; (8004850 <__ieee754_pow+0x23c>)
 8004688:	4295      	cmp	r5, r2
 800468a:	dd11      	ble.n	80046b0 <__ieee754_pow+0x9c>
 800468c:	4971      	ldr	r1, [pc, #452]	; (8004854 <__ieee754_pow+0x240>)
 800468e:	152a      	asrs	r2, r5, #20
 8004690:	1852      	adds	r2, r2, r1
 8004692:	2a14      	cmp	r2, #20
 8004694:	dd3c      	ble.n	8004710 <__ieee754_pow+0xfc>
 8004696:	2134      	movs	r1, #52	; 0x34
 8004698:	1a8a      	subs	r2, r1, r2
 800469a:	9902      	ldr	r1, [sp, #8]
 800469c:	40d1      	lsrs	r1, r2
 800469e:	0008      	movs	r0, r1
 80046a0:	4090      	lsls	r0, r2
 80046a2:	4298      	cmp	r0, r3
 80046a4:	d104      	bne.n	80046b0 <__ieee754_pow+0x9c>
 80046a6:	2201      	movs	r2, #1
 80046a8:	4011      	ands	r1, r2
 80046aa:	1892      	adds	r2, r2, r2
 80046ac:	1a52      	subs	r2, r2, r1
 80046ae:	9206      	str	r2, [sp, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d03c      	beq.n	800472e <__ieee754_pow+0x11a>
 80046b4:	0038      	movs	r0, r7
 80046b6:	0031      	movs	r1, r6
 80046b8:	f000 fd60 	bl	800517c <fabs>
 80046bc:	9000      	str	r0, [sp, #0]
 80046be:	9101      	str	r1, [sp, #4]
 80046c0:	2f00      	cmp	r7, #0
 80046c2:	d000      	beq.n	80046c6 <__ieee754_pow+0xb2>
 80046c4:	e094      	b.n	80047f0 <__ieee754_pow+0x1dc>
 80046c6:	2c00      	cmp	r4, #0
 80046c8:	d005      	beq.n	80046d6 <__ieee754_pow+0xc2>
 80046ca:	4a63      	ldr	r2, [pc, #396]	; (8004858 <__ieee754_pow+0x244>)
 80046cc:	00b3      	lsls	r3, r6, #2
 80046ce:	089b      	lsrs	r3, r3, #2
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d000      	beq.n	80046d6 <__ieee754_pow+0xc2>
 80046d4:	e08c      	b.n	80047f0 <__ieee754_pow+0x1dc>
 80046d6:	9b04      	ldr	r3, [sp, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	da07      	bge.n	80046ec <__ieee754_pow+0xd8>
 80046dc:	9a00      	ldr	r2, [sp, #0]
 80046de:	9b01      	ldr	r3, [sp, #4]
 80046e0:	2000      	movs	r0, #0
 80046e2:	495d      	ldr	r1, [pc, #372]	; (8004858 <__ieee754_pow+0x244>)
 80046e4:	f7fc fb64 	bl	8000db0 <__aeabi_ddiv>
 80046e8:	9000      	str	r0, [sp, #0]
 80046ea:	9101      	str	r1, [sp, #4]
 80046ec:	9b08      	ldr	r3, [sp, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	da55      	bge.n	800479e <__ieee754_pow+0x18a>
 80046f2:	4b54      	ldr	r3, [pc, #336]	; (8004844 <__ieee754_pow+0x230>)
 80046f4:	18e4      	adds	r4, r4, r3
 80046f6:	9b06      	ldr	r3, [sp, #24]
 80046f8:	431c      	orrs	r4, r3
 80046fa:	d000      	beq.n	80046fe <__ieee754_pow+0xea>
 80046fc:	e06c      	b.n	80047d8 <__ieee754_pow+0x1c4>
 80046fe:	9a00      	ldr	r2, [sp, #0]
 8004700:	9b01      	ldr	r3, [sp, #4]
 8004702:	0010      	movs	r0, r2
 8004704:	0019      	movs	r1, r3
 8004706:	f7fd f9c5 	bl	8001a94 <__aeabi_dsub>
 800470a:	0002      	movs	r2, r0
 800470c:	000b      	movs	r3, r1
 800470e:	e01c      	b.n	800474a <__ieee754_pow+0x136>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1cf      	bne.n	80046b4 <__ieee754_pow+0xa0>
 8004714:	3314      	adds	r3, #20
 8004716:	1a9a      	subs	r2, r3, r2
 8004718:	002b      	movs	r3, r5
 800471a:	4113      	asrs	r3, r2
 800471c:	0019      	movs	r1, r3
 800471e:	4091      	lsls	r1, r2
 8004720:	42a9      	cmp	r1, r5
 8004722:	d104      	bne.n	800472e <__ieee754_pow+0x11a>
 8004724:	2201      	movs	r2, #1
 8004726:	4013      	ands	r3, r2
 8004728:	1892      	adds	r2, r2, r2
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	9306      	str	r3, [sp, #24]
 800472e:	4b4a      	ldr	r3, [pc, #296]	; (8004858 <__ieee754_pow+0x244>)
 8004730:	429d      	cmp	r5, r3
 8004732:	d138      	bne.n	80047a6 <__ieee754_pow+0x192>
 8004734:	0038      	movs	r0, r7
 8004736:	0031      	movs	r1, r6
 8004738:	9b04      	ldr	r3, [sp, #16]
 800473a:	9000      	str	r0, [sp, #0]
 800473c:	9101      	str	r1, [sp, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	da2d      	bge.n	800479e <__ieee754_pow+0x18a>
 8004742:	003a      	movs	r2, r7
 8004744:	0033      	movs	r3, r6
 8004746:	2000      	movs	r0, #0
 8004748:	4943      	ldr	r1, [pc, #268]	; (8004858 <__ieee754_pow+0x244>)
 800474a:	f7fc fb31 	bl	8000db0 <__aeabi_ddiv>
 800474e:	e790      	b.n	8004672 <__ieee754_pow+0x5e>
 8004750:	2202      	movs	r2, #2
 8004752:	9206      	str	r2, [sp, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ad      	bne.n	80046b4 <__ieee754_pow+0xa0>
 8004758:	4b39      	ldr	r3, [pc, #228]	; (8004840 <__ieee754_pow+0x22c>)
 800475a:	429d      	cmp	r5, r3
 800475c:	d1e7      	bne.n	800472e <__ieee754_pow+0x11a>
 800475e:	4b39      	ldr	r3, [pc, #228]	; (8004844 <__ieee754_pow+0x230>)
 8004760:	18e3      	adds	r3, r4, r3
 8004762:	431f      	orrs	r7, r3
 8004764:	d101      	bne.n	800476a <__ieee754_pow+0x156>
 8004766:	f000 fc1c 	bl	8004fa2 <__ieee754_pow+0x98e>
 800476a:	4b39      	ldr	r3, [pc, #228]	; (8004850 <__ieee754_pow+0x23c>)
 800476c:	429c      	cmp	r4, r3
 800476e:	dd0b      	ble.n	8004788 <__ieee754_pow+0x174>
 8004770:	9b02      	ldr	r3, [sp, #8]
 8004772:	9c03      	ldr	r4, [sp, #12]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	9401      	str	r4, [sp, #4]
 8004778:	9b04      	ldr	r3, [sp, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	da0f      	bge.n	800479e <__ieee754_pow+0x18a>
 800477e:	2300      	movs	r3, #0
 8004780:	2400      	movs	r4, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	9401      	str	r4, [sp, #4]
 8004786:	e00a      	b.n	800479e <__ieee754_pow+0x18a>
 8004788:	9b04      	ldr	r3, [sp, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	daf7      	bge.n	800477e <__ieee754_pow+0x16a>
 800478e:	2280      	movs	r2, #128	; 0x80
 8004790:	0612      	lsls	r2, r2, #24
 8004792:	4694      	mov	ip, r2
 8004794:	9b02      	ldr	r3, [sp, #8]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	4463      	add	r3, ip
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	9800      	ldr	r0, [sp, #0]
 80047a0:	9901      	ldr	r1, [sp, #4]
 80047a2:	b015      	add	sp, #84	; 0x54
 80047a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	9a04      	ldr	r2, [sp, #16]
 80047aa:	05db      	lsls	r3, r3, #23
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d106      	bne.n	80047be <__ieee754_pow+0x1aa>
 80047b0:	003a      	movs	r2, r7
 80047b2:	0033      	movs	r3, r6
 80047b4:	0038      	movs	r0, r7
 80047b6:	0031      	movs	r1, r6
 80047b8:	f7fc ff00 	bl	80015bc <__aeabi_dmul>
 80047bc:	e759      	b.n	8004672 <__ieee754_pow+0x5e>
 80047be:	4b27      	ldr	r3, [pc, #156]	; (800485c <__ieee754_pow+0x248>)
 80047c0:	9a04      	ldr	r2, [sp, #16]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d000      	beq.n	80047c8 <__ieee754_pow+0x1b4>
 80047c6:	e775      	b.n	80046b4 <__ieee754_pow+0xa0>
 80047c8:	2e00      	cmp	r6, #0
 80047ca:	da00      	bge.n	80047ce <__ieee754_pow+0x1ba>
 80047cc:	e772      	b.n	80046b4 <__ieee754_pow+0xa0>
 80047ce:	0038      	movs	r0, r7
 80047d0:	0031      	movs	r1, r6
 80047d2:	f000 fc1f 	bl	8005014 <__ieee754_sqrt>
 80047d6:	e74c      	b.n	8004672 <__ieee754_pow+0x5e>
 80047d8:	9b06      	ldr	r3, [sp, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d1df      	bne.n	800479e <__ieee754_pow+0x18a>
 80047de:	9800      	ldr	r0, [sp, #0]
 80047e0:	2180      	movs	r1, #128	; 0x80
 80047e2:	0002      	movs	r2, r0
 80047e4:	9801      	ldr	r0, [sp, #4]
 80047e6:	0609      	lsls	r1, r1, #24
 80047e8:	1843      	adds	r3, r0, r1
 80047ea:	9200      	str	r2, [sp, #0]
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	e7d6      	b.n	800479e <__ieee754_pow+0x18a>
 80047f0:	0ff3      	lsrs	r3, r6, #31
 80047f2:	3b01      	subs	r3, #1
 80047f4:	9310      	str	r3, [sp, #64]	; 0x40
 80047f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047f8:	9b06      	ldr	r3, [sp, #24]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	d104      	bne.n	8004808 <__ieee754_pow+0x1f4>
 80047fe:	003a      	movs	r2, r7
 8004800:	0033      	movs	r3, r6
 8004802:	0038      	movs	r0, r7
 8004804:	0031      	movs	r1, r6
 8004806:	e77e      	b.n	8004706 <__ieee754_pow+0xf2>
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <__ieee754_pow+0x24c>)
 800480a:	429d      	cmp	r5, r3
 800480c:	dc00      	bgt.n	8004810 <__ieee754_pow+0x1fc>
 800480e:	e0f5      	b.n	80049fc <__ieee754_pow+0x3e8>
 8004810:	4b14      	ldr	r3, [pc, #80]	; (8004864 <__ieee754_pow+0x250>)
 8004812:	429d      	cmp	r5, r3
 8004814:	dd0a      	ble.n	800482c <__ieee754_pow+0x218>
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <__ieee754_pow+0x23c>)
 8004818:	429c      	cmp	r4, r3
 800481a:	dc0d      	bgt.n	8004838 <__ieee754_pow+0x224>
 800481c:	9b04      	ldr	r3, [sp, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	daad      	bge.n	800477e <__ieee754_pow+0x16a>
 8004822:	4a11      	ldr	r2, [pc, #68]	; (8004868 <__ieee754_pow+0x254>)
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <__ieee754_pow+0x258>)
 8004826:	0010      	movs	r0, r2
 8004828:	0019      	movs	r1, r3
 800482a:	e7c5      	b.n	80047b8 <__ieee754_pow+0x1a4>
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <__ieee754_pow+0x25c>)
 800482e:	429c      	cmp	r4, r3
 8004830:	ddf4      	ble.n	800481c <__ieee754_pow+0x208>
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <__ieee754_pow+0x244>)
 8004834:	429c      	cmp	r4, r3
 8004836:	dd1d      	ble.n	8004874 <__ieee754_pow+0x260>
 8004838:	9b04      	ldr	r3, [sp, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	dcf1      	bgt.n	8004822 <__ieee754_pow+0x20e>
 800483e:	e79e      	b.n	800477e <__ieee754_pow+0x16a>
 8004840:	7ff00000 	.word	0x7ff00000
 8004844:	c0100000 	.word	0xc0100000
 8004848:	08005829 	.word	0x08005829
 800484c:	433fffff 	.word	0x433fffff
 8004850:	3fefffff 	.word	0x3fefffff
 8004854:	fffffc01 	.word	0xfffffc01
 8004858:	3ff00000 	.word	0x3ff00000
 800485c:	3fe00000 	.word	0x3fe00000
 8004860:	41e00000 	.word	0x41e00000
 8004864:	43f00000 	.word	0x43f00000
 8004868:	8800759c 	.word	0x8800759c
 800486c:	7e37e43c 	.word	0x7e37e43c
 8004870:	3feffffe 	.word	0x3feffffe
 8004874:	2200      	movs	r2, #0
 8004876:	9800      	ldr	r0, [sp, #0]
 8004878:	9901      	ldr	r1, [sp, #4]
 800487a:	4b52      	ldr	r3, [pc, #328]	; (80049c4 <__ieee754_pow+0x3b0>)
 800487c:	f7fd f90a 	bl	8001a94 <__aeabi_dsub>
 8004880:	22c0      	movs	r2, #192	; 0xc0
 8004882:	4b51      	ldr	r3, [pc, #324]	; (80049c8 <__ieee754_pow+0x3b4>)
 8004884:	05d2      	lsls	r2, r2, #23
 8004886:	0004      	movs	r4, r0
 8004888:	000d      	movs	r5, r1
 800488a:	f7fc fe97 	bl	80015bc <__aeabi_dmul>
 800488e:	4a4f      	ldr	r2, [pc, #316]	; (80049cc <__ieee754_pow+0x3b8>)
 8004890:	9000      	str	r0, [sp, #0]
 8004892:	9101      	str	r1, [sp, #4]
 8004894:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <__ieee754_pow+0x3bc>)
 8004896:	0020      	movs	r0, r4
 8004898:	0029      	movs	r1, r5
 800489a:	f7fc fe8f 	bl	80015bc <__aeabi_dmul>
 800489e:	2200      	movs	r2, #0
 80048a0:	9004      	str	r0, [sp, #16]
 80048a2:	9105      	str	r1, [sp, #20]
 80048a4:	4b4b      	ldr	r3, [pc, #300]	; (80049d4 <__ieee754_pow+0x3c0>)
 80048a6:	0020      	movs	r0, r4
 80048a8:	0029      	movs	r1, r5
 80048aa:	f7fc fe87 	bl	80015bc <__aeabi_dmul>
 80048ae:	0002      	movs	r2, r0
 80048b0:	000b      	movs	r3, r1
 80048b2:	4849      	ldr	r0, [pc, #292]	; (80049d8 <__ieee754_pow+0x3c4>)
 80048b4:	4949      	ldr	r1, [pc, #292]	; (80049dc <__ieee754_pow+0x3c8>)
 80048b6:	f7fd f8ed 	bl	8001a94 <__aeabi_dsub>
 80048ba:	0022      	movs	r2, r4
 80048bc:	002b      	movs	r3, r5
 80048be:	f7fc fe7d 	bl	80015bc <__aeabi_dmul>
 80048c2:	0002      	movs	r2, r0
 80048c4:	000b      	movs	r3, r1
 80048c6:	2000      	movs	r0, #0
 80048c8:	4945      	ldr	r1, [pc, #276]	; (80049e0 <__ieee754_pow+0x3cc>)
 80048ca:	f7fd f8e3 	bl	8001a94 <__aeabi_dsub>
 80048ce:	0022      	movs	r2, r4
 80048d0:	0006      	movs	r6, r0
 80048d2:	000f      	movs	r7, r1
 80048d4:	002b      	movs	r3, r5
 80048d6:	0020      	movs	r0, r4
 80048d8:	0029      	movs	r1, r5
 80048da:	f7fc fe6f 	bl	80015bc <__aeabi_dmul>
 80048de:	0002      	movs	r2, r0
 80048e0:	000b      	movs	r3, r1
 80048e2:	0030      	movs	r0, r6
 80048e4:	0039      	movs	r1, r7
 80048e6:	f7fc fe69 	bl	80015bc <__aeabi_dmul>
 80048ea:	4a3e      	ldr	r2, [pc, #248]	; (80049e4 <__ieee754_pow+0x3d0>)
 80048ec:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <__ieee754_pow+0x3b4>)
 80048ee:	f7fc fe65 	bl	80015bc <__aeabi_dmul>
 80048f2:	0002      	movs	r2, r0
 80048f4:	000b      	movs	r3, r1
 80048f6:	9804      	ldr	r0, [sp, #16]
 80048f8:	9905      	ldr	r1, [sp, #20]
 80048fa:	f7fd f8cb 	bl	8001a94 <__aeabi_dsub>
 80048fe:	0002      	movs	r2, r0
 8004900:	000b      	movs	r3, r1
 8004902:	0004      	movs	r4, r0
 8004904:	000d      	movs	r5, r1
 8004906:	9800      	ldr	r0, [sp, #0]
 8004908:	9901      	ldr	r1, [sp, #4]
 800490a:	f7fb fee7 	bl	80006dc <__aeabi_dadd>
 800490e:	9a00      	ldr	r2, [sp, #0]
 8004910:	9b01      	ldr	r3, [sp, #4]
 8004912:	2000      	movs	r0, #0
 8004914:	000f      	movs	r7, r1
 8004916:	0006      	movs	r6, r0
 8004918:	f7fd f8bc 	bl	8001a94 <__aeabi_dsub>
 800491c:	0002      	movs	r2, r0
 800491e:	000b      	movs	r3, r1
 8004920:	0020      	movs	r0, r4
 8004922:	0029      	movs	r1, r5
 8004924:	f7fd f8b6 	bl	8001a94 <__aeabi_dsub>
 8004928:	9b06      	ldr	r3, [sp, #24]
 800492a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800492c:	3b01      	subs	r3, #1
 800492e:	9004      	str	r0, [sp, #16]
 8004930:	9105      	str	r1, [sp, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	d000      	beq.n	8004938 <__ieee754_pow+0x324>
 8004936:	e1e0      	b.n	8004cfa <__ieee754_pow+0x6e6>
 8004938:	2300      	movs	r3, #0
 800493a:	4c2b      	ldr	r4, [pc, #172]	; (80049e8 <__ieee754_pow+0x3d4>)
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	9401      	str	r4, [sp, #4]
 8004940:	9c02      	ldr	r4, [sp, #8]
 8004942:	9d03      	ldr	r5, [sp, #12]
 8004944:	9802      	ldr	r0, [sp, #8]
 8004946:	9903      	ldr	r1, [sp, #12]
 8004948:	2400      	movs	r4, #0
 800494a:	002b      	movs	r3, r5
 800494c:	0022      	movs	r2, r4
 800494e:	f7fd f8a1 	bl	8001a94 <__aeabi_dsub>
 8004952:	0032      	movs	r2, r6
 8004954:	003b      	movs	r3, r7
 8004956:	f7fc fe31 	bl	80015bc <__aeabi_dmul>
 800495a:	9a02      	ldr	r2, [sp, #8]
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	9006      	str	r0, [sp, #24]
 8004960:	9107      	str	r1, [sp, #28]
 8004962:	9804      	ldr	r0, [sp, #16]
 8004964:	9905      	ldr	r1, [sp, #20]
 8004966:	f7fc fe29 	bl	80015bc <__aeabi_dmul>
 800496a:	0002      	movs	r2, r0
 800496c:	000b      	movs	r3, r1
 800496e:	9806      	ldr	r0, [sp, #24]
 8004970:	9907      	ldr	r1, [sp, #28]
 8004972:	f7fb feb3 	bl	80006dc <__aeabi_dadd>
 8004976:	0022      	movs	r2, r4
 8004978:	002b      	movs	r3, r5
 800497a:	9004      	str	r0, [sp, #16]
 800497c:	9105      	str	r1, [sp, #20]
 800497e:	0030      	movs	r0, r6
 8004980:	0039      	movs	r1, r7
 8004982:	f7fc fe1b 	bl	80015bc <__aeabi_dmul>
 8004986:	0006      	movs	r6, r0
 8004988:	000f      	movs	r7, r1
 800498a:	000b      	movs	r3, r1
 800498c:	0002      	movs	r2, r0
 800498e:	9804      	ldr	r0, [sp, #16]
 8004990:	9905      	ldr	r1, [sp, #20]
 8004992:	9606      	str	r6, [sp, #24]
 8004994:	9707      	str	r7, [sp, #28]
 8004996:	f7fb fea1 	bl	80006dc <__aeabi_dadd>
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <__ieee754_pow+0x3d8>)
 800499c:	0005      	movs	r5, r0
 800499e:	000c      	movs	r4, r1
 80049a0:	9108      	str	r1, [sp, #32]
 80049a2:	4299      	cmp	r1, r3
 80049a4:	dc00      	bgt.n	80049a8 <__ieee754_pow+0x394>
 80049a6:	e2da      	b.n	8004f5e <__ieee754_pow+0x94a>
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <__ieee754_pow+0x3dc>)
 80049aa:	18cb      	adds	r3, r1, r3
 80049ac:	4303      	orrs	r3, r0
 80049ae:	d100      	bne.n	80049b2 <__ieee754_pow+0x39e>
 80049b0:	e1dc      	b.n	8004d6c <__ieee754_pow+0x758>
 80049b2:	9800      	ldr	r0, [sp, #0]
 80049b4:	9901      	ldr	r1, [sp, #4]
 80049b6:	4a0f      	ldr	r2, [pc, #60]	; (80049f4 <__ieee754_pow+0x3e0>)
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <__ieee754_pow+0x3e4>)
 80049ba:	f7fc fdff 	bl	80015bc <__aeabi_dmul>
 80049be:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <__ieee754_pow+0x3e0>)
 80049c0:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <__ieee754_pow+0x3e4>)
 80049c2:	e6f9      	b.n	80047b8 <__ieee754_pow+0x1a4>
 80049c4:	3ff00000 	.word	0x3ff00000
 80049c8:	3ff71547 	.word	0x3ff71547
 80049cc:	f85ddf44 	.word	0xf85ddf44
 80049d0:	3e54ae0b 	.word	0x3e54ae0b
 80049d4:	3fd00000 	.word	0x3fd00000
 80049d8:	55555555 	.word	0x55555555
 80049dc:	3fd55555 	.word	0x3fd55555
 80049e0:	3fe00000 	.word	0x3fe00000
 80049e4:	652b82fe 	.word	0x652b82fe
 80049e8:	bff00000 	.word	0xbff00000
 80049ec:	408fffff 	.word	0x408fffff
 80049f0:	bf700000 	.word	0xbf700000
 80049f4:	8800759c 	.word	0x8800759c
 80049f8:	7e37e43c 	.word	0x7e37e43c
 80049fc:	4bc0      	ldr	r3, [pc, #768]	; (8004d00 <__ieee754_pow+0x6ec>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	4233      	tst	r3, r6
 8004a02:	d10a      	bne.n	8004a1a <__ieee754_pow+0x406>
 8004a04:	9800      	ldr	r0, [sp, #0]
 8004a06:	9901      	ldr	r1, [sp, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4bbe      	ldr	r3, [pc, #760]	; (8004d04 <__ieee754_pow+0x6f0>)
 8004a0c:	f7fc fdd6 	bl	80015bc <__aeabi_dmul>
 8004a10:	2235      	movs	r2, #53	; 0x35
 8004a12:	9000      	str	r0, [sp, #0]
 8004a14:	9101      	str	r1, [sp, #4]
 8004a16:	9c01      	ldr	r4, [sp, #4]
 8004a18:	4252      	negs	r2, r2
 8004a1a:	49bb      	ldr	r1, [pc, #748]	; (8004d08 <__ieee754_pow+0x6f4>)
 8004a1c:	1523      	asrs	r3, r4, #20
 8004a1e:	185b      	adds	r3, r3, r1
 8004a20:	189b      	adds	r3, r3, r2
 8004a22:	0324      	lsls	r4, r4, #12
 8004a24:	4db9      	ldr	r5, [pc, #740]	; (8004d0c <__ieee754_pow+0x6f8>)
 8004a26:	930d      	str	r3, [sp, #52]	; 0x34
 8004a28:	4bb9      	ldr	r3, [pc, #740]	; (8004d10 <__ieee754_pow+0x6fc>)
 8004a2a:	0b22      	lsrs	r2, r4, #12
 8004a2c:	4315      	orrs	r5, r2
 8004a2e:	2400      	movs	r4, #0
 8004a30:	429a      	cmp	r2, r3
 8004a32:	dd09      	ble.n	8004a48 <__ieee754_pow+0x434>
 8004a34:	4bb7      	ldr	r3, [pc, #732]	; (8004d14 <__ieee754_pow+0x700>)
 8004a36:	3401      	adds	r4, #1
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	dd05      	ble.n	8004a48 <__ieee754_pow+0x434>
 8004a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a3e:	191b      	adds	r3, r3, r4
 8004a40:	2400      	movs	r4, #0
 8004a42:	930d      	str	r3, [sp, #52]	; 0x34
 8004a44:	4bb4      	ldr	r3, [pc, #720]	; (8004d18 <__ieee754_pow+0x704>)
 8004a46:	18ed      	adds	r5, r5, r3
 8004a48:	9800      	ldr	r0, [sp, #0]
 8004a4a:	9901      	ldr	r1, [sp, #4]
 8004a4c:	0029      	movs	r1, r5
 8004a4e:	00e3      	lsls	r3, r4, #3
 8004a50:	9311      	str	r3, [sp, #68]	; 0x44
 8004a52:	4bb2      	ldr	r3, [pc, #712]	; (8004d1c <__ieee754_pow+0x708>)
 8004a54:	00e2      	lsls	r2, r4, #3
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	900e      	str	r0, [sp, #56]	; 0x38
 8004a5e:	910f      	str	r1, [sp, #60]	; 0x3c
 8004a60:	920a      	str	r2, [sp, #40]	; 0x28
 8004a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a64:	f7fd f816 	bl	8001a94 <__aeabi_dsub>
 8004a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a6c:	0006      	movs	r6, r0
 8004a6e:	000f      	movs	r7, r1
 8004a70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a74:	f7fb fe32 	bl	80006dc <__aeabi_dadd>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	000b      	movs	r3, r1
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	49a3      	ldr	r1, [pc, #652]	; (8004d0c <__ieee754_pow+0x6f8>)
 8004a80:	f7fc f996 	bl	8000db0 <__aeabi_ddiv>
 8004a84:	0002      	movs	r2, r0
 8004a86:	000b      	movs	r3, r1
 8004a88:	9012      	str	r0, [sp, #72]	; 0x48
 8004a8a:	9113      	str	r1, [sp, #76]	; 0x4c
 8004a8c:	0030      	movs	r0, r6
 8004a8e:	0039      	movs	r1, r7
 8004a90:	f7fc fd94 	bl	80015bc <__aeabi_dmul>
 8004a94:	9008      	str	r0, [sp, #32]
 8004a96:	9109      	str	r1, [sp, #36]	; 0x24
 8004a98:	9a08      	ldr	r2, [sp, #32]
 8004a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9c:	2180      	movs	r1, #128	; 0x80
 8004a9e:	9204      	str	r2, [sp, #16]
 8004aa0:	9305      	str	r3, [sp, #20]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	0589      	lsls	r1, r1, #22
 8004aa6:	106d      	asrs	r5, r5, #1
 8004aa8:	430d      	orrs	r5, r1
 8004aaa:	2180      	movs	r1, #128	; 0x80
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	9a04      	ldr	r2, [sp, #16]
 8004ab0:	9b05      	ldr	r3, [sp, #20]
 8004ab2:	9200      	str	r2, [sp, #0]
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	0309      	lsls	r1, r1, #12
 8004aba:	186d      	adds	r5, r5, r1
 8004abc:	04a1      	lsls	r1, r4, #18
 8004abe:	186b      	adds	r3, r5, r1
 8004ac0:	9800      	ldr	r0, [sp, #0]
 8004ac2:	9901      	ldr	r1, [sp, #4]
 8004ac4:	0014      	movs	r4, r2
 8004ac6:	001d      	movs	r5, r3
 8004ac8:	f7fc fd78 	bl	80015bc <__aeabi_dmul>
 8004acc:	0002      	movs	r2, r0
 8004ace:	000b      	movs	r3, r1
 8004ad0:	0030      	movs	r0, r6
 8004ad2:	0039      	movs	r1, r7
 8004ad4:	f7fc ffde 	bl	8001a94 <__aeabi_dsub>
 8004ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004adc:	0006      	movs	r6, r0
 8004ade:	000f      	movs	r7, r1
 8004ae0:	0020      	movs	r0, r4
 8004ae2:	0029      	movs	r1, r5
 8004ae4:	f7fc ffd6 	bl	8001a94 <__aeabi_dsub>
 8004ae8:	0002      	movs	r2, r0
 8004aea:	000b      	movs	r3, r1
 8004aec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004aee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004af0:	f7fc ffd0 	bl	8001a94 <__aeabi_dsub>
 8004af4:	9a00      	ldr	r2, [sp, #0]
 8004af6:	9b01      	ldr	r3, [sp, #4]
 8004af8:	f7fc fd60 	bl	80015bc <__aeabi_dmul>
 8004afc:	0002      	movs	r2, r0
 8004afe:	000b      	movs	r3, r1
 8004b00:	0030      	movs	r0, r6
 8004b02:	0039      	movs	r1, r7
 8004b04:	f7fc ffc6 	bl	8001a94 <__aeabi_dsub>
 8004b08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b0c:	f7fc fd56 	bl	80015bc <__aeabi_dmul>
 8004b10:	9a08      	ldr	r2, [sp, #32]
 8004b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b14:	900a      	str	r0, [sp, #40]	; 0x28
 8004b16:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b18:	0010      	movs	r0, r2
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	f7fc fd4e 	bl	80015bc <__aeabi_dmul>
 8004b20:	0006      	movs	r6, r0
 8004b22:	000f      	movs	r7, r1
 8004b24:	4a7e      	ldr	r2, [pc, #504]	; (8004d20 <__ieee754_pow+0x70c>)
 8004b26:	4b7f      	ldr	r3, [pc, #508]	; (8004d24 <__ieee754_pow+0x710>)
 8004b28:	f7fc fd48 	bl	80015bc <__aeabi_dmul>
 8004b2c:	4a7e      	ldr	r2, [pc, #504]	; (8004d28 <__ieee754_pow+0x714>)
 8004b2e:	4b7f      	ldr	r3, [pc, #508]	; (8004d2c <__ieee754_pow+0x718>)
 8004b30:	f7fb fdd4 	bl	80006dc <__aeabi_dadd>
 8004b34:	0032      	movs	r2, r6
 8004b36:	003b      	movs	r3, r7
 8004b38:	f7fc fd40 	bl	80015bc <__aeabi_dmul>
 8004b3c:	4a7c      	ldr	r2, [pc, #496]	; (8004d30 <__ieee754_pow+0x71c>)
 8004b3e:	4b7d      	ldr	r3, [pc, #500]	; (8004d34 <__ieee754_pow+0x720>)
 8004b40:	f7fb fdcc 	bl	80006dc <__aeabi_dadd>
 8004b44:	0032      	movs	r2, r6
 8004b46:	003b      	movs	r3, r7
 8004b48:	f7fc fd38 	bl	80015bc <__aeabi_dmul>
 8004b4c:	4a7a      	ldr	r2, [pc, #488]	; (8004d38 <__ieee754_pow+0x724>)
 8004b4e:	4b7b      	ldr	r3, [pc, #492]	; (8004d3c <__ieee754_pow+0x728>)
 8004b50:	f7fb fdc4 	bl	80006dc <__aeabi_dadd>
 8004b54:	0032      	movs	r2, r6
 8004b56:	003b      	movs	r3, r7
 8004b58:	f7fc fd30 	bl	80015bc <__aeabi_dmul>
 8004b5c:	4a78      	ldr	r2, [pc, #480]	; (8004d40 <__ieee754_pow+0x72c>)
 8004b5e:	4b79      	ldr	r3, [pc, #484]	; (8004d44 <__ieee754_pow+0x730>)
 8004b60:	f7fb fdbc 	bl	80006dc <__aeabi_dadd>
 8004b64:	0032      	movs	r2, r6
 8004b66:	003b      	movs	r3, r7
 8004b68:	f7fc fd28 	bl	80015bc <__aeabi_dmul>
 8004b6c:	4a76      	ldr	r2, [pc, #472]	; (8004d48 <__ieee754_pow+0x734>)
 8004b6e:	4b77      	ldr	r3, [pc, #476]	; (8004d4c <__ieee754_pow+0x738>)
 8004b70:	f7fb fdb4 	bl	80006dc <__aeabi_dadd>
 8004b74:	0032      	movs	r2, r6
 8004b76:	0004      	movs	r4, r0
 8004b78:	000d      	movs	r5, r1
 8004b7a:	003b      	movs	r3, r7
 8004b7c:	0030      	movs	r0, r6
 8004b7e:	0039      	movs	r1, r7
 8004b80:	f7fc fd1c 	bl	80015bc <__aeabi_dmul>
 8004b84:	0002      	movs	r2, r0
 8004b86:	000b      	movs	r3, r1
 8004b88:	0020      	movs	r0, r4
 8004b8a:	0029      	movs	r1, r5
 8004b8c:	f7fc fd16 	bl	80015bc <__aeabi_dmul>
 8004b90:	9a00      	ldr	r2, [sp, #0]
 8004b92:	9b01      	ldr	r3, [sp, #4]
 8004b94:	0004      	movs	r4, r0
 8004b96:	000d      	movs	r5, r1
 8004b98:	9808      	ldr	r0, [sp, #32]
 8004b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b9c:	f7fb fd9e 	bl	80006dc <__aeabi_dadd>
 8004ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ba4:	f7fc fd0a 	bl	80015bc <__aeabi_dmul>
 8004ba8:	0022      	movs	r2, r4
 8004baa:	002b      	movs	r3, r5
 8004bac:	f7fb fd96 	bl	80006dc <__aeabi_dadd>
 8004bb0:	9a00      	ldr	r2, [sp, #0]
 8004bb2:	9b01      	ldr	r3, [sp, #4]
 8004bb4:	900e      	str	r0, [sp, #56]	; 0x38
 8004bb6:	910f      	str	r1, [sp, #60]	; 0x3c
 8004bb8:	0010      	movs	r0, r2
 8004bba:	0019      	movs	r1, r3
 8004bbc:	f7fc fcfe 	bl	80015bc <__aeabi_dmul>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4b63      	ldr	r3, [pc, #396]	; (8004d50 <__ieee754_pow+0x73c>)
 8004bc4:	0004      	movs	r4, r0
 8004bc6:	000d      	movs	r5, r1
 8004bc8:	f7fb fd88 	bl	80006dc <__aeabi_dadd>
 8004bcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bd0:	f7fb fd84 	bl	80006dc <__aeabi_dadd>
 8004bd4:	9e04      	ldr	r6, [sp, #16]
 8004bd6:	000f      	movs	r7, r1
 8004bd8:	0032      	movs	r2, r6
 8004bda:	000b      	movs	r3, r1
 8004bdc:	9800      	ldr	r0, [sp, #0]
 8004bde:	9901      	ldr	r1, [sp, #4]
 8004be0:	f7fc fcec 	bl	80015bc <__aeabi_dmul>
 8004be4:	2200      	movs	r2, #0
 8004be6:	9000      	str	r0, [sp, #0]
 8004be8:	9101      	str	r1, [sp, #4]
 8004bea:	4b59      	ldr	r3, [pc, #356]	; (8004d50 <__ieee754_pow+0x73c>)
 8004bec:	0030      	movs	r0, r6
 8004bee:	0039      	movs	r1, r7
 8004bf0:	f7fc ff50 	bl	8001a94 <__aeabi_dsub>
 8004bf4:	0022      	movs	r2, r4
 8004bf6:	002b      	movs	r3, r5
 8004bf8:	f7fc ff4c 	bl	8001a94 <__aeabi_dsub>
 8004bfc:	0002      	movs	r2, r0
 8004bfe:	000b      	movs	r3, r1
 8004c00:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004c02:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c04:	f7fc ff46 	bl	8001a94 <__aeabi_dsub>
 8004c08:	9a08      	ldr	r2, [sp, #32]
 8004c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c0c:	f7fc fcd6 	bl	80015bc <__aeabi_dmul>
 8004c10:	0032      	movs	r2, r6
 8004c12:	0004      	movs	r4, r0
 8004c14:	000d      	movs	r5, r1
 8004c16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c1a:	003b      	movs	r3, r7
 8004c1c:	f7fc fcce 	bl	80015bc <__aeabi_dmul>
 8004c20:	0002      	movs	r2, r0
 8004c22:	000b      	movs	r3, r1
 8004c24:	0020      	movs	r0, r4
 8004c26:	0029      	movs	r1, r5
 8004c28:	f7fb fd58 	bl	80006dc <__aeabi_dadd>
 8004c2c:	0004      	movs	r4, r0
 8004c2e:	000d      	movs	r5, r1
 8004c30:	0002      	movs	r2, r0
 8004c32:	000b      	movs	r3, r1
 8004c34:	9800      	ldr	r0, [sp, #0]
 8004c36:	9901      	ldr	r1, [sp, #4]
 8004c38:	f7fb fd50 	bl	80006dc <__aeabi_dadd>
 8004c3c:	22e0      	movs	r2, #224	; 0xe0
 8004c3e:	9e04      	ldr	r6, [sp, #16]
 8004c40:	4b44      	ldr	r3, [pc, #272]	; (8004d54 <__ieee754_pow+0x740>)
 8004c42:	0030      	movs	r0, r6
 8004c44:	0612      	lsls	r2, r2, #24
 8004c46:	000f      	movs	r7, r1
 8004c48:	f7fc fcb8 	bl	80015bc <__aeabi_dmul>
 8004c4c:	9008      	str	r0, [sp, #32]
 8004c4e:	9109      	str	r1, [sp, #36]	; 0x24
 8004c50:	9a00      	ldr	r2, [sp, #0]
 8004c52:	9b01      	ldr	r3, [sp, #4]
 8004c54:	0030      	movs	r0, r6
 8004c56:	0039      	movs	r1, r7
 8004c58:	f7fc ff1c 	bl	8001a94 <__aeabi_dsub>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	000b      	movs	r3, r1
 8004c60:	0020      	movs	r0, r4
 8004c62:	0029      	movs	r1, r5
 8004c64:	f7fc ff16 	bl	8001a94 <__aeabi_dsub>
 8004c68:	4a3b      	ldr	r2, [pc, #236]	; (8004d58 <__ieee754_pow+0x744>)
 8004c6a:	4b3a      	ldr	r3, [pc, #232]	; (8004d54 <__ieee754_pow+0x740>)
 8004c6c:	f7fc fca6 	bl	80015bc <__aeabi_dmul>
 8004c70:	4a3a      	ldr	r2, [pc, #232]	; (8004d5c <__ieee754_pow+0x748>)
 8004c72:	0004      	movs	r4, r0
 8004c74:	000d      	movs	r5, r1
 8004c76:	0030      	movs	r0, r6
 8004c78:	0039      	movs	r1, r7
 8004c7a:	4b39      	ldr	r3, [pc, #228]	; (8004d60 <__ieee754_pow+0x74c>)
 8004c7c:	f7fc fc9e 	bl	80015bc <__aeabi_dmul>
 8004c80:	0002      	movs	r2, r0
 8004c82:	000b      	movs	r3, r1
 8004c84:	0020      	movs	r0, r4
 8004c86:	0029      	movs	r1, r5
 8004c88:	f7fb fd28 	bl	80006dc <__aeabi_dadd>
 8004c8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c8e:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <__ieee754_pow+0x750>)
 8004c90:	189b      	adds	r3, r3, r2
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f7fb fd21 	bl	80006dc <__aeabi_dadd>
 8004c9a:	900a      	str	r0, [sp, #40]	; 0x28
 8004c9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8004c9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ca0:	f7fd faa8 	bl	80021f4 <__aeabi_i2d>
 8004ca4:	0004      	movs	r4, r0
 8004ca6:	000d      	movs	r5, r1
 8004ca8:	9808      	ldr	r0, [sp, #32]
 8004caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004cae:	4b2e      	ldr	r3, [pc, #184]	; (8004d68 <__ieee754_pow+0x754>)
 8004cb0:	189b      	adds	r3, r3, r2
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	9200      	str	r2, [sp, #0]
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cbe:	f7fb fd0d 	bl	80006dc <__aeabi_dadd>
 8004cc2:	9a00      	ldr	r2, [sp, #0]
 8004cc4:	9b01      	ldr	r3, [sp, #4]
 8004cc6:	f7fb fd09 	bl	80006dc <__aeabi_dadd>
 8004cca:	0022      	movs	r2, r4
 8004ccc:	002b      	movs	r3, r5
 8004cce:	f7fb fd05 	bl	80006dc <__aeabi_dadd>
 8004cd2:	9804      	ldr	r0, [sp, #16]
 8004cd4:	0022      	movs	r2, r4
 8004cd6:	002b      	movs	r3, r5
 8004cd8:	0006      	movs	r6, r0
 8004cda:	000f      	movs	r7, r1
 8004cdc:	f7fc feda 	bl	8001a94 <__aeabi_dsub>
 8004ce0:	9a00      	ldr	r2, [sp, #0]
 8004ce2:	9b01      	ldr	r3, [sp, #4]
 8004ce4:	f7fc fed6 	bl	8001a94 <__aeabi_dsub>
 8004ce8:	9a08      	ldr	r2, [sp, #32]
 8004cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cec:	f7fc fed2 	bl	8001a94 <__aeabi_dsub>
 8004cf0:	0002      	movs	r2, r0
 8004cf2:	000b      	movs	r3, r1
 8004cf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004cf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cf8:	e614      	b.n	8004924 <__ieee754_pow+0x310>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	4c03      	ldr	r4, [pc, #12]	; (8004d0c <__ieee754_pow+0x6f8>)
 8004cfe:	e61d      	b.n	800493c <__ieee754_pow+0x328>
 8004d00:	7ff00000 	.word	0x7ff00000
 8004d04:	43400000 	.word	0x43400000
 8004d08:	fffffc01 	.word	0xfffffc01
 8004d0c:	3ff00000 	.word	0x3ff00000
 8004d10:	0003988e 	.word	0x0003988e
 8004d14:	000bb679 	.word	0x000bb679
 8004d18:	fff00000 	.word	0xfff00000
 8004d1c:	08005830 	.word	0x08005830
 8004d20:	4a454eef 	.word	0x4a454eef
 8004d24:	3fca7e28 	.word	0x3fca7e28
 8004d28:	93c9db65 	.word	0x93c9db65
 8004d2c:	3fcd864a 	.word	0x3fcd864a
 8004d30:	a91d4101 	.word	0xa91d4101
 8004d34:	3fd17460 	.word	0x3fd17460
 8004d38:	518f264d 	.word	0x518f264d
 8004d3c:	3fd55555 	.word	0x3fd55555
 8004d40:	db6fabff 	.word	0xdb6fabff
 8004d44:	3fdb6db6 	.word	0x3fdb6db6
 8004d48:	33333303 	.word	0x33333303
 8004d4c:	3fe33333 	.word	0x3fe33333
 8004d50:	40080000 	.word	0x40080000
 8004d54:	3feec709 	.word	0x3feec709
 8004d58:	dc3a03fd 	.word	0xdc3a03fd
 8004d5c:	145b01f5 	.word	0x145b01f5
 8004d60:	be3e2fe0 	.word	0xbe3e2fe0
 8004d64:	08005850 	.word	0x08005850
 8004d68:	08005840 	.word	0x08005840
 8004d6c:	4a8f      	ldr	r2, [pc, #572]	; (8004fac <__ieee754_pow+0x998>)
 8004d6e:	4b90      	ldr	r3, [pc, #576]	; (8004fb0 <__ieee754_pow+0x99c>)
 8004d70:	9804      	ldr	r0, [sp, #16]
 8004d72:	9905      	ldr	r1, [sp, #20]
 8004d74:	f7fb fcb2 	bl	80006dc <__aeabi_dadd>
 8004d78:	0032      	movs	r2, r6
 8004d7a:	9002      	str	r0, [sp, #8]
 8004d7c:	9103      	str	r1, [sp, #12]
 8004d7e:	003b      	movs	r3, r7
 8004d80:	0028      	movs	r0, r5
 8004d82:	0021      	movs	r1, r4
 8004d84:	f7fc fe86 	bl	8001a94 <__aeabi_dsub>
 8004d88:	0002      	movs	r2, r0
 8004d8a:	000b      	movs	r3, r1
 8004d8c:	9802      	ldr	r0, [sp, #8]
 8004d8e:	9903      	ldr	r1, [sp, #12]
 8004d90:	f7fb fa70 	bl	8000274 <__aeabi_dcmpgt>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d000      	beq.n	8004d9a <__ieee754_pow+0x786>
 8004d98:	e60b      	b.n	80049b2 <__ieee754_pow+0x39e>
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4a85      	ldr	r2, [pc, #532]	; (8004fb4 <__ieee754_pow+0x9a0>)
 8004d9e:	0063      	lsls	r3, r4, #1
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	9102      	str	r1, [sp, #8]
 8004da4:	4293      	cmp	r3, r2
 8004da6:	dd25      	ble.n	8004df4 <__ieee754_pow+0x7e0>
 8004da8:	4a83      	ldr	r2, [pc, #524]	; (8004fb8 <__ieee754_pow+0x9a4>)
 8004daa:	151b      	asrs	r3, r3, #20
 8004dac:	189b      	adds	r3, r3, r2
 8004dae:	2280      	movs	r2, #128	; 0x80
 8004db0:	0352      	lsls	r2, r2, #13
 8004db2:	4694      	mov	ip, r2
 8004db4:	411a      	asrs	r2, r3
 8004db6:	1914      	adds	r4, r2, r4
 8004db8:	4b80      	ldr	r3, [pc, #512]	; (8004fbc <__ieee754_pow+0x9a8>)
 8004dba:	0060      	lsls	r0, r4, #1
 8004dbc:	4d80      	ldr	r5, [pc, #512]	; (8004fc0 <__ieee754_pow+0x9ac>)
 8004dbe:	0d40      	lsrs	r0, r0, #21
 8004dc0:	18c0      	adds	r0, r0, r3
 8004dc2:	4105      	asrs	r5, r0
 8004dc4:	0021      	movs	r1, r4
 8004dc6:	43a9      	bics	r1, r5
 8004dc8:	000b      	movs	r3, r1
 8004dca:	4661      	mov	r1, ip
 8004dcc:	0324      	lsls	r4, r4, #12
 8004dce:	0b24      	lsrs	r4, r4, #12
 8004dd0:	4321      	orrs	r1, r4
 8004dd2:	2414      	movs	r4, #20
 8004dd4:	1a20      	subs	r0, r4, r0
 8004dd6:	4101      	asrs	r1, r0
 8004dd8:	9102      	str	r1, [sp, #8]
 8004dda:	9908      	ldr	r1, [sp, #32]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2900      	cmp	r1, #0
 8004de0:	da02      	bge.n	8004de8 <__ieee754_pow+0x7d4>
 8004de2:	9902      	ldr	r1, [sp, #8]
 8004de4:	4249      	negs	r1, r1
 8004de6:	9102      	str	r1, [sp, #8]
 8004de8:	0030      	movs	r0, r6
 8004dea:	0039      	movs	r1, r7
 8004dec:	f7fc fe52 	bl	8001a94 <__aeabi_dsub>
 8004df0:	9006      	str	r0, [sp, #24]
 8004df2:	9107      	str	r1, [sp, #28]
 8004df4:	9a04      	ldr	r2, [sp, #16]
 8004df6:	9b05      	ldr	r3, [sp, #20]
 8004df8:	9806      	ldr	r0, [sp, #24]
 8004dfa:	9907      	ldr	r1, [sp, #28]
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	f7fb fc6d 	bl	80006dc <__aeabi_dadd>
 8004e02:	2200      	movs	r2, #0
 8004e04:	0030      	movs	r0, r6
 8004e06:	4b6f      	ldr	r3, [pc, #444]	; (8004fc4 <__ieee754_pow+0x9b0>)
 8004e08:	000f      	movs	r7, r1
 8004e0a:	f7fc fbd7 	bl	80015bc <__aeabi_dmul>
 8004e0e:	9a06      	ldr	r2, [sp, #24]
 8004e10:	9b07      	ldr	r3, [sp, #28]
 8004e12:	9008      	str	r0, [sp, #32]
 8004e14:	9109      	str	r1, [sp, #36]	; 0x24
 8004e16:	0030      	movs	r0, r6
 8004e18:	0039      	movs	r1, r7
 8004e1a:	f7fc fe3b 	bl	8001a94 <__aeabi_dsub>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	000b      	movs	r3, r1
 8004e22:	9804      	ldr	r0, [sp, #16]
 8004e24:	9905      	ldr	r1, [sp, #20]
 8004e26:	f7fc fe35 	bl	8001a94 <__aeabi_dsub>
 8004e2a:	4a67      	ldr	r2, [pc, #412]	; (8004fc8 <__ieee754_pow+0x9b4>)
 8004e2c:	4b67      	ldr	r3, [pc, #412]	; (8004fcc <__ieee754_pow+0x9b8>)
 8004e2e:	f7fc fbc5 	bl	80015bc <__aeabi_dmul>
 8004e32:	4a67      	ldr	r2, [pc, #412]	; (8004fd0 <__ieee754_pow+0x9bc>)
 8004e34:	0004      	movs	r4, r0
 8004e36:	000d      	movs	r5, r1
 8004e38:	0030      	movs	r0, r6
 8004e3a:	0039      	movs	r1, r7
 8004e3c:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <__ieee754_pow+0x9c0>)
 8004e3e:	f7fc fbbd 	bl	80015bc <__aeabi_dmul>
 8004e42:	0002      	movs	r2, r0
 8004e44:	000b      	movs	r3, r1
 8004e46:	0020      	movs	r0, r4
 8004e48:	0029      	movs	r1, r5
 8004e4a:	f7fb fc47 	bl	80006dc <__aeabi_dadd>
 8004e4e:	0004      	movs	r4, r0
 8004e50:	000d      	movs	r5, r1
 8004e52:	0002      	movs	r2, r0
 8004e54:	000b      	movs	r3, r1
 8004e56:	9808      	ldr	r0, [sp, #32]
 8004e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e5a:	f7fb fc3f 	bl	80006dc <__aeabi_dadd>
 8004e5e:	9a08      	ldr	r2, [sp, #32]
 8004e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e62:	0006      	movs	r6, r0
 8004e64:	000f      	movs	r7, r1
 8004e66:	f7fc fe15 	bl	8001a94 <__aeabi_dsub>
 8004e6a:	0002      	movs	r2, r0
 8004e6c:	000b      	movs	r3, r1
 8004e6e:	0020      	movs	r0, r4
 8004e70:	0029      	movs	r1, r5
 8004e72:	f7fc fe0f 	bl	8001a94 <__aeabi_dsub>
 8004e76:	0032      	movs	r2, r6
 8004e78:	9004      	str	r0, [sp, #16]
 8004e7a:	9105      	str	r1, [sp, #20]
 8004e7c:	003b      	movs	r3, r7
 8004e7e:	0030      	movs	r0, r6
 8004e80:	0039      	movs	r1, r7
 8004e82:	f7fc fb9b 	bl	80015bc <__aeabi_dmul>
 8004e86:	0004      	movs	r4, r0
 8004e88:	000d      	movs	r5, r1
 8004e8a:	4a53      	ldr	r2, [pc, #332]	; (8004fd8 <__ieee754_pow+0x9c4>)
 8004e8c:	4b53      	ldr	r3, [pc, #332]	; (8004fdc <__ieee754_pow+0x9c8>)
 8004e8e:	f7fc fb95 	bl	80015bc <__aeabi_dmul>
 8004e92:	4a53      	ldr	r2, [pc, #332]	; (8004fe0 <__ieee754_pow+0x9cc>)
 8004e94:	4b53      	ldr	r3, [pc, #332]	; (8004fe4 <__ieee754_pow+0x9d0>)
 8004e96:	f7fc fdfd 	bl	8001a94 <__aeabi_dsub>
 8004e9a:	0022      	movs	r2, r4
 8004e9c:	002b      	movs	r3, r5
 8004e9e:	f7fc fb8d 	bl	80015bc <__aeabi_dmul>
 8004ea2:	4a51      	ldr	r2, [pc, #324]	; (8004fe8 <__ieee754_pow+0x9d4>)
 8004ea4:	4b51      	ldr	r3, [pc, #324]	; (8004fec <__ieee754_pow+0x9d8>)
 8004ea6:	f7fb fc19 	bl	80006dc <__aeabi_dadd>
 8004eaa:	0022      	movs	r2, r4
 8004eac:	002b      	movs	r3, r5
 8004eae:	f7fc fb85 	bl	80015bc <__aeabi_dmul>
 8004eb2:	4a4f      	ldr	r2, [pc, #316]	; (8004ff0 <__ieee754_pow+0x9dc>)
 8004eb4:	4b4f      	ldr	r3, [pc, #316]	; (8004ff4 <__ieee754_pow+0x9e0>)
 8004eb6:	f7fc fded 	bl	8001a94 <__aeabi_dsub>
 8004eba:	0022      	movs	r2, r4
 8004ebc:	002b      	movs	r3, r5
 8004ebe:	f7fc fb7d 	bl	80015bc <__aeabi_dmul>
 8004ec2:	4a4d      	ldr	r2, [pc, #308]	; (8004ff8 <__ieee754_pow+0x9e4>)
 8004ec4:	4b4d      	ldr	r3, [pc, #308]	; (8004ffc <__ieee754_pow+0x9e8>)
 8004ec6:	f7fb fc09 	bl	80006dc <__aeabi_dadd>
 8004eca:	0022      	movs	r2, r4
 8004ecc:	002b      	movs	r3, r5
 8004ece:	f7fc fb75 	bl	80015bc <__aeabi_dmul>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	000b      	movs	r3, r1
 8004ed6:	0030      	movs	r0, r6
 8004ed8:	0039      	movs	r1, r7
 8004eda:	f7fc fddb 	bl	8001a94 <__aeabi_dsub>
 8004ede:	0004      	movs	r4, r0
 8004ee0:	000d      	movs	r5, r1
 8004ee2:	0002      	movs	r2, r0
 8004ee4:	000b      	movs	r3, r1
 8004ee6:	0030      	movs	r0, r6
 8004ee8:	0039      	movs	r1, r7
 8004eea:	f7fc fb67 	bl	80015bc <__aeabi_dmul>
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	9006      	str	r0, [sp, #24]
 8004ef2:	9107      	str	r1, [sp, #28]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	0020      	movs	r0, r4
 8004ef8:	0029      	movs	r1, r5
 8004efa:	05db      	lsls	r3, r3, #23
 8004efc:	f7fc fdca 	bl	8001a94 <__aeabi_dsub>
 8004f00:	0002      	movs	r2, r0
 8004f02:	000b      	movs	r3, r1
 8004f04:	9806      	ldr	r0, [sp, #24]
 8004f06:	9907      	ldr	r1, [sp, #28]
 8004f08:	f7fb ff52 	bl	8000db0 <__aeabi_ddiv>
 8004f0c:	9a04      	ldr	r2, [sp, #16]
 8004f0e:	9b05      	ldr	r3, [sp, #20]
 8004f10:	0004      	movs	r4, r0
 8004f12:	000d      	movs	r5, r1
 8004f14:	0030      	movs	r0, r6
 8004f16:	0039      	movs	r1, r7
 8004f18:	f7fc fb50 	bl	80015bc <__aeabi_dmul>
 8004f1c:	9a04      	ldr	r2, [sp, #16]
 8004f1e:	9b05      	ldr	r3, [sp, #20]
 8004f20:	f7fb fbdc 	bl	80006dc <__aeabi_dadd>
 8004f24:	0002      	movs	r2, r0
 8004f26:	000b      	movs	r3, r1
 8004f28:	0020      	movs	r0, r4
 8004f2a:	0029      	movs	r1, r5
 8004f2c:	f7fc fdb2 	bl	8001a94 <__aeabi_dsub>
 8004f30:	0032      	movs	r2, r6
 8004f32:	003b      	movs	r3, r7
 8004f34:	f7fc fdae 	bl	8001a94 <__aeabi_dsub>
 8004f38:	0002      	movs	r2, r0
 8004f3a:	000b      	movs	r3, r1
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	4930      	ldr	r1, [pc, #192]	; (8005000 <__ieee754_pow+0x9ec>)
 8004f40:	f7fc fda8 	bl	8001a94 <__aeabi_dsub>
 8004f44:	9b02      	ldr	r3, [sp, #8]
 8004f46:	051b      	lsls	r3, r3, #20
 8004f48:	185b      	adds	r3, r3, r1
 8004f4a:	151a      	asrs	r2, r3, #20
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	dc26      	bgt.n	8004f9e <__ieee754_pow+0x98a>
 8004f50:	9a02      	ldr	r2, [sp, #8]
 8004f52:	f000 f9ad 	bl	80052b0 <scalbn>
 8004f56:	9a00      	ldr	r2, [sp, #0]
 8004f58:	9b01      	ldr	r3, [sp, #4]
 8004f5a:	f7ff fc2d 	bl	80047b8 <__ieee754_pow+0x1a4>
 8004f5e:	4a29      	ldr	r2, [pc, #164]	; (8005004 <__ieee754_pow+0x9f0>)
 8004f60:	004b      	lsls	r3, r1, #1
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	4293      	cmp	r3, r2
 8004f66:	dc00      	bgt.n	8004f6a <__ieee754_pow+0x956>
 8004f68:	e717      	b.n	8004d9a <__ieee754_pow+0x786>
 8004f6a:	4b27      	ldr	r3, [pc, #156]	; (8005008 <__ieee754_pow+0x9f4>)
 8004f6c:	18cb      	adds	r3, r1, r3
 8004f6e:	4303      	orrs	r3, r0
 8004f70:	d009      	beq.n	8004f86 <__ieee754_pow+0x972>
 8004f72:	9800      	ldr	r0, [sp, #0]
 8004f74:	9901      	ldr	r1, [sp, #4]
 8004f76:	4a25      	ldr	r2, [pc, #148]	; (800500c <__ieee754_pow+0x9f8>)
 8004f78:	4b25      	ldr	r3, [pc, #148]	; (8005010 <__ieee754_pow+0x9fc>)
 8004f7a:	f7fc fb1f 	bl	80015bc <__aeabi_dmul>
 8004f7e:	4a23      	ldr	r2, [pc, #140]	; (800500c <__ieee754_pow+0x9f8>)
 8004f80:	4b23      	ldr	r3, [pc, #140]	; (8005010 <__ieee754_pow+0x9fc>)
 8004f82:	f7ff fc19 	bl	80047b8 <__ieee754_pow+0x1a4>
 8004f86:	0032      	movs	r2, r6
 8004f88:	003b      	movs	r3, r7
 8004f8a:	f7fc fd83 	bl	8001a94 <__aeabi_dsub>
 8004f8e:	9a04      	ldr	r2, [sp, #16]
 8004f90:	9b05      	ldr	r3, [sp, #20]
 8004f92:	f7fb f979 	bl	8000288 <__aeabi_dcmpge>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d100      	bne.n	8004f9c <__ieee754_pow+0x988>
 8004f9a:	e6fe      	b.n	8004d9a <__ieee754_pow+0x786>
 8004f9c:	e7e9      	b.n	8004f72 <__ieee754_pow+0x95e>
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	e7d9      	b.n	8004f56 <__ieee754_pow+0x942>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	4c16      	ldr	r4, [pc, #88]	; (8005000 <__ieee754_pow+0x9ec>)
 8004fa6:	f7ff fbec 	bl	8004782 <__ieee754_pow+0x16e>
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	652b82fe 	.word	0x652b82fe
 8004fb0:	3c971547 	.word	0x3c971547
 8004fb4:	3fe00000 	.word	0x3fe00000
 8004fb8:	fffffc02 	.word	0xfffffc02
 8004fbc:	fffffc01 	.word	0xfffffc01
 8004fc0:	000fffff 	.word	0x000fffff
 8004fc4:	3fe62e43 	.word	0x3fe62e43
 8004fc8:	fefa39ef 	.word	0xfefa39ef
 8004fcc:	3fe62e42 	.word	0x3fe62e42
 8004fd0:	0ca86c39 	.word	0x0ca86c39
 8004fd4:	be205c61 	.word	0xbe205c61
 8004fd8:	72bea4d0 	.word	0x72bea4d0
 8004fdc:	3e663769 	.word	0x3e663769
 8004fe0:	c5d26bf1 	.word	0xc5d26bf1
 8004fe4:	3ebbbd41 	.word	0x3ebbbd41
 8004fe8:	af25de2c 	.word	0xaf25de2c
 8004fec:	3f11566a 	.word	0x3f11566a
 8004ff0:	16bebd93 	.word	0x16bebd93
 8004ff4:	3f66c16c 	.word	0x3f66c16c
 8004ff8:	5555553e 	.word	0x5555553e
 8004ffc:	3fc55555 	.word	0x3fc55555
 8005000:	3ff00000 	.word	0x3ff00000
 8005004:	4090cbff 	.word	0x4090cbff
 8005008:	3f6f3400 	.word	0x3f6f3400
 800500c:	c2f8f359 	.word	0xc2f8f359
 8005010:	01a56e1f 	.word	0x01a56e1f

08005014 <__ieee754_sqrt>:
 8005014:	4b56      	ldr	r3, [pc, #344]	; (8005170 <__ieee754_sqrt+0x15c>)
 8005016:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005018:	0002      	movs	r2, r0
 800501a:	0005      	movs	r5, r0
 800501c:	0018      	movs	r0, r3
 800501e:	000c      	movs	r4, r1
 8005020:	b085      	sub	sp, #20
 8005022:	4008      	ands	r0, r1
 8005024:	4298      	cmp	r0, r3
 8005026:	d10f      	bne.n	8005048 <__ieee754_sqrt+0x34>
 8005028:	000b      	movs	r3, r1
 800502a:	0028      	movs	r0, r5
 800502c:	f7fc fac6 	bl	80015bc <__aeabi_dmul>
 8005030:	0002      	movs	r2, r0
 8005032:	000b      	movs	r3, r1
 8005034:	0028      	movs	r0, r5
 8005036:	0021      	movs	r1, r4
 8005038:	f7fb fb50 	bl	80006dc <__aeabi_dadd>
 800503c:	0005      	movs	r5, r0
 800503e:	000c      	movs	r4, r1
 8005040:	0028      	movs	r0, r5
 8005042:	0021      	movs	r1, r4
 8005044:	b005      	add	sp, #20
 8005046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005048:	2900      	cmp	r1, #0
 800504a:	dc10      	bgt.n	800506e <__ieee754_sqrt+0x5a>
 800504c:	004b      	lsls	r3, r1, #1
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	432b      	orrs	r3, r5
 8005052:	d0f5      	beq.n	8005040 <__ieee754_sqrt+0x2c>
 8005054:	2000      	movs	r0, #0
 8005056:	4281      	cmp	r1, r0
 8005058:	d100      	bne.n	800505c <__ieee754_sqrt+0x48>
 800505a:	e080      	b.n	800515e <__ieee754_sqrt+0x14a>
 800505c:	000b      	movs	r3, r1
 800505e:	0028      	movs	r0, r5
 8005060:	f7fc fd18 	bl	8001a94 <__aeabi_dsub>
 8005064:	0002      	movs	r2, r0
 8005066:	000b      	movs	r3, r1
 8005068:	f7fb fea2 	bl	8000db0 <__aeabi_ddiv>
 800506c:	e7e6      	b.n	800503c <__ieee754_sqrt+0x28>
 800506e:	1508      	asrs	r0, r1, #20
 8005070:	d075      	beq.n	800515e <__ieee754_sqrt+0x14a>
 8005072:	4b40      	ldr	r3, [pc, #256]	; (8005174 <__ieee754_sqrt+0x160>)
 8005074:	0309      	lsls	r1, r1, #12
 8005076:	18c4      	adds	r4, r0, r3
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	0b09      	lsrs	r1, r1, #12
 800507c:	035b      	lsls	r3, r3, #13
 800507e:	4319      	orrs	r1, r3
 8005080:	07c3      	lsls	r3, r0, #31
 8005082:	d403      	bmi.n	800508c <__ieee754_sqrt+0x78>
 8005084:	0fd3      	lsrs	r3, r2, #31
 8005086:	0049      	lsls	r1, r1, #1
 8005088:	18c9      	adds	r1, r1, r3
 800508a:	0052      	lsls	r2, r2, #1
 800508c:	1063      	asrs	r3, r4, #1
 800508e:	2400      	movs	r4, #0
 8005090:	0049      	lsls	r1, r1, #1
 8005092:	9303      	str	r3, [sp, #12]
 8005094:	0fd3      	lsrs	r3, r2, #31
 8005096:	18cb      	adds	r3, r1, r3
 8005098:	2180      	movs	r1, #128	; 0x80
 800509a:	2516      	movs	r5, #22
 800509c:	0020      	movs	r0, r4
 800509e:	0052      	lsls	r2, r2, #1
 80050a0:	0389      	lsls	r1, r1, #14
 80050a2:	1846      	adds	r6, r0, r1
 80050a4:	429e      	cmp	r6, r3
 80050a6:	dc02      	bgt.n	80050ae <__ieee754_sqrt+0x9a>
 80050a8:	1870      	adds	r0, r6, r1
 80050aa:	1b9b      	subs	r3, r3, r6
 80050ac:	1864      	adds	r4, r4, r1
 80050ae:	0fd6      	lsrs	r6, r2, #31
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	3d01      	subs	r5, #1
 80050b4:	18f3      	adds	r3, r6, r3
 80050b6:	0052      	lsls	r2, r2, #1
 80050b8:	0849      	lsrs	r1, r1, #1
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	d1f1      	bne.n	80050a2 <__ieee754_sqrt+0x8e>
 80050be:	2620      	movs	r6, #32
 80050c0:	2780      	movs	r7, #128	; 0x80
 80050c2:	0029      	movs	r1, r5
 80050c4:	9601      	str	r6, [sp, #4]
 80050c6:	063f      	lsls	r7, r7, #24
 80050c8:	197e      	adds	r6, r7, r5
 80050ca:	46b4      	mov	ip, r6
 80050cc:	4283      	cmp	r3, r0
 80050ce:	dc02      	bgt.n	80050d6 <__ieee754_sqrt+0xc2>
 80050d0:	d114      	bne.n	80050fc <__ieee754_sqrt+0xe8>
 80050d2:	4296      	cmp	r6, r2
 80050d4:	d812      	bhi.n	80050fc <__ieee754_sqrt+0xe8>
 80050d6:	4665      	mov	r5, ip
 80050d8:	4666      	mov	r6, ip
 80050da:	19ed      	adds	r5, r5, r7
 80050dc:	9002      	str	r0, [sp, #8]
 80050de:	2e00      	cmp	r6, #0
 80050e0:	da03      	bge.n	80050ea <__ieee754_sqrt+0xd6>
 80050e2:	43ee      	mvns	r6, r5
 80050e4:	0ff6      	lsrs	r6, r6, #31
 80050e6:	1986      	adds	r6, r0, r6
 80050e8:	9602      	str	r6, [sp, #8]
 80050ea:	1a1b      	subs	r3, r3, r0
 80050ec:	4562      	cmp	r2, ip
 80050ee:	4180      	sbcs	r0, r0
 80050f0:	4240      	negs	r0, r0
 80050f2:	1a1b      	subs	r3, r3, r0
 80050f4:	4660      	mov	r0, ip
 80050f6:	1a12      	subs	r2, r2, r0
 80050f8:	9802      	ldr	r0, [sp, #8]
 80050fa:	19c9      	adds	r1, r1, r7
 80050fc:	0fd6      	lsrs	r6, r2, #31
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	18f3      	adds	r3, r6, r3
 8005102:	9e01      	ldr	r6, [sp, #4]
 8005104:	0052      	lsls	r2, r2, #1
 8005106:	3e01      	subs	r6, #1
 8005108:	087f      	lsrs	r7, r7, #1
 800510a:	9601      	str	r6, [sp, #4]
 800510c:	2e00      	cmp	r6, #0
 800510e:	d1db      	bne.n	80050c8 <__ieee754_sqrt+0xb4>
 8005110:	4313      	orrs	r3, r2
 8005112:	d003      	beq.n	800511c <__ieee754_sqrt+0x108>
 8005114:	1c4b      	adds	r3, r1, #1
 8005116:	d127      	bne.n	8005168 <__ieee754_sqrt+0x154>
 8005118:	0031      	movs	r1, r6
 800511a:	3401      	adds	r4, #1
 800511c:	4b16      	ldr	r3, [pc, #88]	; (8005178 <__ieee754_sqrt+0x164>)
 800511e:	1060      	asrs	r0, r4, #1
 8005120:	18c0      	adds	r0, r0, r3
 8005122:	0849      	lsrs	r1, r1, #1
 8005124:	07e3      	lsls	r3, r4, #31
 8005126:	d502      	bpl.n	800512e <__ieee754_sqrt+0x11a>
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	061b      	lsls	r3, r3, #24
 800512c:	4319      	orrs	r1, r3
 800512e:	9b03      	ldr	r3, [sp, #12]
 8005130:	000d      	movs	r5, r1
 8005132:	051c      	lsls	r4, r3, #20
 8005134:	1823      	adds	r3, r4, r0
 8005136:	001c      	movs	r4, r3
 8005138:	e782      	b.n	8005040 <__ieee754_sqrt+0x2c>
 800513a:	0ad1      	lsrs	r1, r2, #11
 800513c:	3b15      	subs	r3, #21
 800513e:	0552      	lsls	r2, r2, #21
 8005140:	2900      	cmp	r1, #0
 8005142:	d0fa      	beq.n	800513a <__ieee754_sqrt+0x126>
 8005144:	2480      	movs	r4, #128	; 0x80
 8005146:	0364      	lsls	r4, r4, #13
 8005148:	4221      	tst	r1, r4
 800514a:	d00a      	beq.n	8005162 <__ieee754_sqrt+0x14e>
 800514c:	2420      	movs	r4, #32
 800514e:	0016      	movs	r6, r2
 8005150:	1a24      	subs	r4, r4, r0
 8005152:	40e6      	lsrs	r6, r4
 8005154:	1e45      	subs	r5, r0, #1
 8005156:	4082      	lsls	r2, r0
 8005158:	4331      	orrs	r1, r6
 800515a:	1b58      	subs	r0, r3, r5
 800515c:	e789      	b.n	8005072 <__ieee754_sqrt+0x5e>
 800515e:	2300      	movs	r3, #0
 8005160:	e7ee      	b.n	8005140 <__ieee754_sqrt+0x12c>
 8005162:	0049      	lsls	r1, r1, #1
 8005164:	3001      	adds	r0, #1
 8005166:	e7ef      	b.n	8005148 <__ieee754_sqrt+0x134>
 8005168:	2301      	movs	r3, #1
 800516a:	3101      	adds	r1, #1
 800516c:	4399      	bics	r1, r3
 800516e:	e7d5      	b.n	800511c <__ieee754_sqrt+0x108>
 8005170:	7ff00000 	.word	0x7ff00000
 8005174:	fffffc01 	.word	0xfffffc01
 8005178:	3fe00000 	.word	0x3fe00000

0800517c <fabs>:
 800517c:	004b      	lsls	r3, r1, #1
 800517e:	0859      	lsrs	r1, r3, #1
 8005180:	4770      	bx	lr
	...

08005184 <finite>:
 8005184:	4b02      	ldr	r3, [pc, #8]	; (8005190 <finite+0xc>)
 8005186:	0048      	lsls	r0, r1, #1
 8005188:	0840      	lsrs	r0, r0, #1
 800518a:	18c0      	adds	r0, r0, r3
 800518c:	0fc0      	lsrs	r0, r0, #31
 800518e:	4770      	bx	lr
 8005190:	80100000 	.word	0x80100000

08005194 <nan>:
 8005194:	2000      	movs	r0, #0
 8005196:	4901      	ldr	r1, [pc, #4]	; (800519c <nan+0x8>)
 8005198:	4770      	bx	lr
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	7ff80000 	.word	0x7ff80000

080051a0 <rint>:
 80051a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a2:	004a      	lsls	r2, r1, #1
 80051a4:	4e3e      	ldr	r6, [pc, #248]	; (80052a0 <rint+0x100>)
 80051a6:	0d52      	lsrs	r2, r2, #21
 80051a8:	b085      	sub	sp, #20
 80051aa:	1996      	adds	r6, r2, r6
 80051ac:	000d      	movs	r5, r1
 80051ae:	0003      	movs	r3, r0
 80051b0:	9101      	str	r1, [sp, #4]
 80051b2:	0fcc      	lsrs	r4, r1, #31
 80051b4:	2e13      	cmp	r6, #19
 80051b6:	dc57      	bgt.n	8005268 <rint+0xc8>
 80051b8:	2e00      	cmp	r6, #0
 80051ba:	da2a      	bge.n	8005212 <rint+0x72>
 80051bc:	004a      	lsls	r2, r1, #1
 80051be:	0852      	lsrs	r2, r2, #1
 80051c0:	4302      	orrs	r2, r0
 80051c2:	d024      	beq.n	800520e <rint+0x6e>
 80051c4:	030a      	lsls	r2, r1, #12
 80051c6:	0b12      	lsrs	r2, r2, #12
 80051c8:	4302      	orrs	r2, r0
 80051ca:	4253      	negs	r3, r2
 80051cc:	4313      	orrs	r3, r2
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	0c4d      	lsrs	r5, r1, #17
 80051d2:	0312      	lsls	r2, r2, #12
 80051d4:	0b1b      	lsrs	r3, r3, #12
 80051d6:	4013      	ands	r3, r2
 80051d8:	046d      	lsls	r5, r5, #17
 80051da:	432b      	orrs	r3, r5
 80051dc:	0019      	movs	r1, r3
 80051de:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <rint+0x104>)
 80051e0:	00e2      	lsls	r2, r4, #3
 80051e2:	189b      	adds	r3, r3, r2
 80051e4:	681e      	ldr	r6, [r3, #0]
 80051e6:	685f      	ldr	r7, [r3, #4]
 80051e8:	0002      	movs	r2, r0
 80051ea:	000b      	movs	r3, r1
 80051ec:	0030      	movs	r0, r6
 80051ee:	0039      	movs	r1, r7
 80051f0:	f7fb fa74 	bl	80006dc <__aeabi_dadd>
 80051f4:	9002      	str	r0, [sp, #8]
 80051f6:	9103      	str	r1, [sp, #12]
 80051f8:	9802      	ldr	r0, [sp, #8]
 80051fa:	9903      	ldr	r1, [sp, #12]
 80051fc:	003b      	movs	r3, r7
 80051fe:	0032      	movs	r2, r6
 8005200:	f7fc fc48 	bl	8001a94 <__aeabi_dsub>
 8005204:	004b      	lsls	r3, r1, #1
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	07e4      	lsls	r4, r4, #31
 800520a:	4323      	orrs	r3, r4
 800520c:	0019      	movs	r1, r3
 800520e:	b005      	add	sp, #20
 8005210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005212:	4a25      	ldr	r2, [pc, #148]	; (80052a8 <rint+0x108>)
 8005214:	4132      	asrs	r2, r6
 8005216:	0017      	movs	r7, r2
 8005218:	400f      	ands	r7, r1
 800521a:	4307      	orrs	r7, r0
 800521c:	d0f7      	beq.n	800520e <rint+0x6e>
 800521e:	0852      	lsrs	r2, r2, #1
 8005220:	0011      	movs	r1, r2
 8005222:	4029      	ands	r1, r5
 8005224:	430b      	orrs	r3, r1
 8005226:	d00a      	beq.n	800523e <rint+0x9e>
 8005228:	2300      	movs	r3, #0
 800522a:	2e13      	cmp	r6, #19
 800522c:	d101      	bne.n	8005232 <rint+0x92>
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	2780      	movs	r7, #128	; 0x80
 8005234:	02ff      	lsls	r7, r7, #11
 8005236:	4137      	asrs	r7, r6
 8005238:	4395      	bics	r5, r2
 800523a:	432f      	orrs	r7, r5
 800523c:	9701      	str	r7, [sp, #4]
 800523e:	9901      	ldr	r1, [sp, #4]
 8005240:	001a      	movs	r2, r3
 8005242:	000b      	movs	r3, r1
 8005244:	4917      	ldr	r1, [pc, #92]	; (80052a4 <rint+0x104>)
 8005246:	00e4      	lsls	r4, r4, #3
 8005248:	190c      	adds	r4, r1, r4
 800524a:	6865      	ldr	r5, [r4, #4]
 800524c:	6824      	ldr	r4, [r4, #0]
 800524e:	0020      	movs	r0, r4
 8005250:	0029      	movs	r1, r5
 8005252:	f7fb fa43 	bl	80006dc <__aeabi_dadd>
 8005256:	9002      	str	r0, [sp, #8]
 8005258:	9103      	str	r1, [sp, #12]
 800525a:	9802      	ldr	r0, [sp, #8]
 800525c:	9903      	ldr	r1, [sp, #12]
 800525e:	0022      	movs	r2, r4
 8005260:	002b      	movs	r3, r5
 8005262:	f7fc fc17 	bl	8001a94 <__aeabi_dsub>
 8005266:	e7d2      	b.n	800520e <rint+0x6e>
 8005268:	2e33      	cmp	r6, #51	; 0x33
 800526a:	dd08      	ble.n	800527e <rint+0xde>
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	429e      	cmp	r6, r3
 8005272:	d1cc      	bne.n	800520e <rint+0x6e>
 8005274:	0002      	movs	r2, r0
 8005276:	000b      	movs	r3, r1
 8005278:	f7fb fa30 	bl	80006dc <__aeabi_dadd>
 800527c:	e7c7      	b.n	800520e <rint+0x6e>
 800527e:	2601      	movs	r6, #1
 8005280:	4d0a      	ldr	r5, [pc, #40]	; (80052ac <rint+0x10c>)
 8005282:	4276      	negs	r6, r6
 8005284:	1952      	adds	r2, r2, r5
 8005286:	40d6      	lsrs	r6, r2
 8005288:	4206      	tst	r6, r0
 800528a:	d0c0      	beq.n	800520e <rint+0x6e>
 800528c:	0876      	lsrs	r6, r6, #1
 800528e:	4206      	tst	r6, r0
 8005290:	d0d5      	beq.n	800523e <rint+0x9e>
 8005292:	2180      	movs	r1, #128	; 0x80
 8005294:	05c9      	lsls	r1, r1, #23
 8005296:	4111      	asrs	r1, r2
 8005298:	43b3      	bics	r3, r6
 800529a:	430b      	orrs	r3, r1
 800529c:	e7cf      	b.n	800523e <rint+0x9e>
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	fffffc01 	.word	0xfffffc01
 80052a4:	08005860 	.word	0x08005860
 80052a8:	000fffff 	.word	0x000fffff
 80052ac:	fffffbed 	.word	0xfffffbed

080052b0 <scalbn>:
 80052b0:	004b      	lsls	r3, r1, #1
 80052b2:	b570      	push	{r4, r5, r6, lr}
 80052b4:	0d5b      	lsrs	r3, r3, #21
 80052b6:	0014      	movs	r4, r2
 80052b8:	000a      	movs	r2, r1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10d      	bne.n	80052da <scalbn+0x2a>
 80052be:	004b      	lsls	r3, r1, #1
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	4303      	orrs	r3, r0
 80052c4:	d010      	beq.n	80052e8 <scalbn+0x38>
 80052c6:	4b27      	ldr	r3, [pc, #156]	; (8005364 <scalbn+0xb4>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	f7fc f977 	bl	80015bc <__aeabi_dmul>
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <scalbn+0xb8>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	da0a      	bge.n	80052ea <scalbn+0x3a>
 80052d4:	4a25      	ldr	r2, [pc, #148]	; (800536c <scalbn+0xbc>)
 80052d6:	4b26      	ldr	r3, [pc, #152]	; (8005370 <scalbn+0xc0>)
 80052d8:	e019      	b.n	800530e <scalbn+0x5e>
 80052da:	4d26      	ldr	r5, [pc, #152]	; (8005374 <scalbn+0xc4>)
 80052dc:	42ab      	cmp	r3, r5
 80052de:	d108      	bne.n	80052f2 <scalbn+0x42>
 80052e0:	0002      	movs	r2, r0
 80052e2:	000b      	movs	r3, r1
 80052e4:	f7fb f9fa 	bl	80006dc <__aeabi_dadd>
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
 80052ea:	000a      	movs	r2, r1
 80052ec:	004b      	lsls	r3, r1, #1
 80052ee:	0d5b      	lsrs	r3, r3, #21
 80052f0:	3b36      	subs	r3, #54	; 0x36
 80052f2:	4d21      	ldr	r5, [pc, #132]	; (8005378 <scalbn+0xc8>)
 80052f4:	18e3      	adds	r3, r4, r3
 80052f6:	42ab      	cmp	r3, r5
 80052f8:	dd0c      	ble.n	8005314 <scalbn+0x64>
 80052fa:	4c20      	ldr	r4, [pc, #128]	; (800537c <scalbn+0xcc>)
 80052fc:	4d20      	ldr	r5, [pc, #128]	; (8005380 <scalbn+0xd0>)
 80052fe:	2900      	cmp	r1, #0
 8005300:	da01      	bge.n	8005306 <scalbn+0x56>
 8005302:	4c1e      	ldr	r4, [pc, #120]	; (800537c <scalbn+0xcc>)
 8005304:	4d1f      	ldr	r5, [pc, #124]	; (8005384 <scalbn+0xd4>)
 8005306:	0020      	movs	r0, r4
 8005308:	0029      	movs	r1, r5
 800530a:	4a1c      	ldr	r2, [pc, #112]	; (800537c <scalbn+0xcc>)
 800530c:	4b1c      	ldr	r3, [pc, #112]	; (8005380 <scalbn+0xd0>)
 800530e:	f7fc f955 	bl	80015bc <__aeabi_dmul>
 8005312:	e7e9      	b.n	80052e8 <scalbn+0x38>
 8005314:	2b00      	cmp	r3, #0
 8005316:	dd05      	ble.n	8005324 <scalbn+0x74>
 8005318:	4c1b      	ldr	r4, [pc, #108]	; (8005388 <scalbn+0xd8>)
 800531a:	051b      	lsls	r3, r3, #20
 800531c:	4022      	ands	r2, r4
 800531e:	431a      	orrs	r2, r3
 8005320:	0011      	movs	r1, r2
 8005322:	e7e1      	b.n	80052e8 <scalbn+0x38>
 8005324:	001d      	movs	r5, r3
 8005326:	3535      	adds	r5, #53	; 0x35
 8005328:	da13      	bge.n	8005352 <scalbn+0xa2>
 800532a:	4a18      	ldr	r2, [pc, #96]	; (800538c <scalbn+0xdc>)
 800532c:	0fcb      	lsrs	r3, r1, #31
 800532e:	4294      	cmp	r4, r2
 8005330:	dd08      	ble.n	8005344 <scalbn+0x94>
 8005332:	4812      	ldr	r0, [pc, #72]	; (800537c <scalbn+0xcc>)
 8005334:	4912      	ldr	r1, [pc, #72]	; (8005380 <scalbn+0xd0>)
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <scalbn+0x8e>
 800533a:	4810      	ldr	r0, [pc, #64]	; (800537c <scalbn+0xcc>)
 800533c:	4911      	ldr	r1, [pc, #68]	; (8005384 <scalbn+0xd4>)
 800533e:	4a0f      	ldr	r2, [pc, #60]	; (800537c <scalbn+0xcc>)
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <scalbn+0xd0>)
 8005342:	e7e4      	b.n	800530e <scalbn+0x5e>
 8005344:	4809      	ldr	r0, [pc, #36]	; (800536c <scalbn+0xbc>)
 8005346:	490a      	ldr	r1, [pc, #40]	; (8005370 <scalbn+0xc0>)
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0c3      	beq.n	80052d4 <scalbn+0x24>
 800534c:	4807      	ldr	r0, [pc, #28]	; (800536c <scalbn+0xbc>)
 800534e:	4910      	ldr	r1, [pc, #64]	; (8005390 <scalbn+0xe0>)
 8005350:	e7c0      	b.n	80052d4 <scalbn+0x24>
 8005352:	4c0d      	ldr	r4, [pc, #52]	; (8005388 <scalbn+0xd8>)
 8005354:	3336      	adds	r3, #54	; 0x36
 8005356:	4022      	ands	r2, r4
 8005358:	051b      	lsls	r3, r3, #20
 800535a:	4313      	orrs	r3, r2
 800535c:	0019      	movs	r1, r3
 800535e:	2200      	movs	r2, #0
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <scalbn+0xe4>)
 8005362:	e7d4      	b.n	800530e <scalbn+0x5e>
 8005364:	43500000 	.word	0x43500000
 8005368:	ffff3cb0 	.word	0xffff3cb0
 800536c:	c2f8f359 	.word	0xc2f8f359
 8005370:	01a56e1f 	.word	0x01a56e1f
 8005374:	000007ff 	.word	0x000007ff
 8005378:	000007fe 	.word	0x000007fe
 800537c:	8800759c 	.word	0x8800759c
 8005380:	7e37e43c 	.word	0x7e37e43c
 8005384:	fe37e43c 	.word	0xfe37e43c
 8005388:	800fffff 	.word	0x800fffff
 800538c:	0000c350 	.word	0x0000c350
 8005390:	81a56e1f 	.word	0x81a56e1f
 8005394:	3c900000 	.word	0x3c900000

08005398 <__ieee754_log>:
 8005398:	2280      	movs	r2, #128	; 0x80
 800539a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539c:	000b      	movs	r3, r1
 800539e:	b08d      	sub	sp, #52	; 0x34
 80053a0:	0352      	lsls	r2, r2, #13
 80053a2:	4291      	cmp	r1, r2
 80053a4:	da22      	bge.n	80053ec <__ieee754_log+0x54>
 80053a6:	004a      	lsls	r2, r1, #1
 80053a8:	0852      	lsrs	r2, r2, #1
 80053aa:	4302      	orrs	r2, r0
 80053ac:	d107      	bne.n	80053be <__ieee754_log+0x26>
 80053ae:	2200      	movs	r2, #0
 80053b0:	2300      	movs	r3, #0
 80053b2:	2000      	movs	r0, #0
 80053b4:	49b3      	ldr	r1, [pc, #716]	; (8005684 <__ieee754_log+0x2ec>)
 80053b6:	f7fb fcfb 	bl	8000db0 <__aeabi_ddiv>
 80053ba:	b00d      	add	sp, #52	; 0x34
 80053bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053be:	2900      	cmp	r1, #0
 80053c0:	da05      	bge.n	80053ce <__ieee754_log+0x36>
 80053c2:	0002      	movs	r2, r0
 80053c4:	f7fc fb66 	bl	8001a94 <__aeabi_dsub>
 80053c8:	2200      	movs	r2, #0
 80053ca:	2300      	movs	r3, #0
 80053cc:	e7f3      	b.n	80053b6 <__ieee754_log+0x1e>
 80053ce:	4bae      	ldr	r3, [pc, #696]	; (8005688 <__ieee754_log+0x2f0>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	f7fc f8f3 	bl	80015bc <__aeabi_dmul>
 80053d6:	2436      	movs	r4, #54	; 0x36
 80053d8:	000b      	movs	r3, r1
 80053da:	4264      	negs	r4, r4
 80053dc:	4aab      	ldr	r2, [pc, #684]	; (800568c <__ieee754_log+0x2f4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	dd06      	ble.n	80053f0 <__ieee754_log+0x58>
 80053e2:	0002      	movs	r2, r0
 80053e4:	000b      	movs	r3, r1
 80053e6:	f7fb f979 	bl	80006dc <__aeabi_dadd>
 80053ea:	e7e6      	b.n	80053ba <__ieee754_log+0x22>
 80053ec:	2400      	movs	r4, #0
 80053ee:	e7f5      	b.n	80053dc <__ieee754_log+0x44>
 80053f0:	4da7      	ldr	r5, [pc, #668]	; (8005690 <__ieee754_log+0x2f8>)
 80053f2:	151a      	asrs	r2, r3, #20
 80053f4:	1952      	adds	r2, r2, r5
 80053f6:	1912      	adds	r2, r2, r4
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	4ca6      	ldr	r4, [pc, #664]	; (8005694 <__ieee754_log+0x2fc>)
 80053fc:	0b1b      	lsrs	r3, r3, #12
 80053fe:	9302      	str	r3, [sp, #8]
 8005400:	191c      	adds	r4, r3, r4
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	035b      	lsls	r3, r3, #13
 8005406:	4023      	ands	r3, r4
 8005408:	4ca3      	ldr	r4, [pc, #652]	; (8005698 <__ieee754_log+0x300>)
 800540a:	9d02      	ldr	r5, [sp, #8]
 800540c:	405c      	eors	r4, r3
 800540e:	151b      	asrs	r3, r3, #20
 8005410:	189b      	adds	r3, r3, r2
 8005412:	4325      	orrs	r5, r4
 8005414:	2200      	movs	r2, #0
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	0029      	movs	r1, r5
 800541a:	4b9f      	ldr	r3, [pc, #636]	; (8005698 <__ieee754_log+0x300>)
 800541c:	f7fc fb3a 	bl	8001a94 <__aeabi_dsub>
 8005420:	9b02      	ldr	r3, [sp, #8]
 8005422:	0006      	movs	r6, r0
 8005424:	3302      	adds	r3, #2
 8005426:	031b      	lsls	r3, r3, #12
 8005428:	000f      	movs	r7, r1
 800542a:	2200      	movs	r2, #0
 800542c:	0b1b      	lsrs	r3, r3, #12
 800542e:	2b02      	cmp	r3, #2
 8005430:	dc64      	bgt.n	80054fc <__ieee754_log+0x164>
 8005432:	2300      	movs	r3, #0
 8005434:	f7fa ff04 	bl	8000240 <__aeabi_dcmpeq>
 8005438:	2800      	cmp	r0, #0
 800543a:	d019      	beq.n	8005470 <__ieee754_log+0xd8>
 800543c:	9b00      	ldr	r3, [sp, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d100      	bne.n	8005444 <__ieee754_log+0xac>
 8005442:	e11c      	b.n	800567e <__ieee754_log+0x2e6>
 8005444:	0018      	movs	r0, r3
 8005446:	f7fc fed5 	bl	80021f4 <__aeabi_i2d>
 800544a:	4a94      	ldr	r2, [pc, #592]	; (800569c <__ieee754_log+0x304>)
 800544c:	4b94      	ldr	r3, [pc, #592]	; (80056a0 <__ieee754_log+0x308>)
 800544e:	0004      	movs	r4, r0
 8005450:	000d      	movs	r5, r1
 8005452:	f7fc f8b3 	bl	80015bc <__aeabi_dmul>
 8005456:	4a93      	ldr	r2, [pc, #588]	; (80056a4 <__ieee754_log+0x30c>)
 8005458:	0006      	movs	r6, r0
 800545a:	000f      	movs	r7, r1
 800545c:	4b92      	ldr	r3, [pc, #584]	; (80056a8 <__ieee754_log+0x310>)
 800545e:	0020      	movs	r0, r4
 8005460:	0029      	movs	r1, r5
 8005462:	f7fc f8ab 	bl	80015bc <__aeabi_dmul>
 8005466:	0002      	movs	r2, r0
 8005468:	000b      	movs	r3, r1
 800546a:	0030      	movs	r0, r6
 800546c:	0039      	movs	r1, r7
 800546e:	e7ba      	b.n	80053e6 <__ieee754_log+0x4e>
 8005470:	4a8e      	ldr	r2, [pc, #568]	; (80056ac <__ieee754_log+0x314>)
 8005472:	4b8f      	ldr	r3, [pc, #572]	; (80056b0 <__ieee754_log+0x318>)
 8005474:	0030      	movs	r0, r6
 8005476:	0039      	movs	r1, r7
 8005478:	f7fc f8a0 	bl	80015bc <__aeabi_dmul>
 800547c:	0002      	movs	r2, r0
 800547e:	000b      	movs	r3, r1
 8005480:	2000      	movs	r0, #0
 8005482:	498c      	ldr	r1, [pc, #560]	; (80056b4 <__ieee754_log+0x31c>)
 8005484:	f7fc fb06 	bl	8001a94 <__aeabi_dsub>
 8005488:	0032      	movs	r2, r6
 800548a:	0004      	movs	r4, r0
 800548c:	000d      	movs	r5, r1
 800548e:	003b      	movs	r3, r7
 8005490:	0030      	movs	r0, r6
 8005492:	0039      	movs	r1, r7
 8005494:	f7fc f892 	bl	80015bc <__aeabi_dmul>
 8005498:	000b      	movs	r3, r1
 800549a:	0002      	movs	r2, r0
 800549c:	0029      	movs	r1, r5
 800549e:	0020      	movs	r0, r4
 80054a0:	f7fc f88c 	bl	80015bc <__aeabi_dmul>
 80054a4:	9b00      	ldr	r3, [sp, #0]
 80054a6:	9002      	str	r0, [sp, #8]
 80054a8:	9103      	str	r1, [sp, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <__ieee754_log+0x124>
 80054ae:	0002      	movs	r2, r0
 80054b0:	000b      	movs	r3, r1
 80054b2:	0030      	movs	r0, r6
 80054b4:	0039      	movs	r1, r7
 80054b6:	f7fc faed 	bl	8001a94 <__aeabi_dsub>
 80054ba:	e77e      	b.n	80053ba <__ieee754_log+0x22>
 80054bc:	9800      	ldr	r0, [sp, #0]
 80054be:	f7fc fe99 	bl	80021f4 <__aeabi_i2d>
 80054c2:	4a76      	ldr	r2, [pc, #472]	; (800569c <__ieee754_log+0x304>)
 80054c4:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <__ieee754_log+0x308>)
 80054c6:	0004      	movs	r4, r0
 80054c8:	000d      	movs	r5, r1
 80054ca:	f7fc f877 	bl	80015bc <__aeabi_dmul>
 80054ce:	4a75      	ldr	r2, [pc, #468]	; (80056a4 <__ieee754_log+0x30c>)
 80054d0:	9000      	str	r0, [sp, #0]
 80054d2:	9101      	str	r1, [sp, #4]
 80054d4:	4b74      	ldr	r3, [pc, #464]	; (80056a8 <__ieee754_log+0x310>)
 80054d6:	0020      	movs	r0, r4
 80054d8:	0029      	movs	r1, r5
 80054da:	f7fc f86f 	bl	80015bc <__aeabi_dmul>
 80054de:	0002      	movs	r2, r0
 80054e0:	000b      	movs	r3, r1
 80054e2:	9802      	ldr	r0, [sp, #8]
 80054e4:	9903      	ldr	r1, [sp, #12]
 80054e6:	f7fc fad5 	bl	8001a94 <__aeabi_dsub>
 80054ea:	0032      	movs	r2, r6
 80054ec:	003b      	movs	r3, r7
 80054ee:	f7fc fad1 	bl	8001a94 <__aeabi_dsub>
 80054f2:	0002      	movs	r2, r0
 80054f4:	000b      	movs	r3, r1
 80054f6:	9800      	ldr	r0, [sp, #0]
 80054f8:	9901      	ldr	r1, [sp, #4]
 80054fa:	e7dc      	b.n	80054b6 <__ieee754_log+0x11e>
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	05db      	lsls	r3, r3, #23
 8005500:	f7fb f8ec 	bl	80006dc <__aeabi_dadd>
 8005504:	0002      	movs	r2, r0
 8005506:	000b      	movs	r3, r1
 8005508:	0030      	movs	r0, r6
 800550a:	0039      	movs	r1, r7
 800550c:	f7fb fc50 	bl	8000db0 <__aeabi_ddiv>
 8005510:	9004      	str	r0, [sp, #16]
 8005512:	9105      	str	r1, [sp, #20]
 8005514:	9800      	ldr	r0, [sp, #0]
 8005516:	f7fc fe6d 	bl	80021f4 <__aeabi_i2d>
 800551a:	9a04      	ldr	r2, [sp, #16]
 800551c:	9b05      	ldr	r3, [sp, #20]
 800551e:	9006      	str	r0, [sp, #24]
 8005520:	9107      	str	r1, [sp, #28]
 8005522:	0010      	movs	r0, r2
 8005524:	0019      	movs	r1, r3
 8005526:	f7fc f849 	bl	80015bc <__aeabi_dmul>
 800552a:	4a63      	ldr	r2, [pc, #396]	; (80056b8 <__ieee754_log+0x320>)
 800552c:	9b02      	ldr	r3, [sp, #8]
 800552e:	4694      	mov	ip, r2
 8005530:	4463      	add	r3, ip
 8005532:	0002      	movs	r2, r0
 8005534:	930b      	str	r3, [sp, #44]	; 0x2c
 8005536:	000b      	movs	r3, r1
 8005538:	9008      	str	r0, [sp, #32]
 800553a:	9109      	str	r1, [sp, #36]	; 0x24
 800553c:	f7fc f83e 	bl	80015bc <__aeabi_dmul>
 8005540:	0004      	movs	r4, r0
 8005542:	000d      	movs	r5, r1
 8005544:	4a5d      	ldr	r2, [pc, #372]	; (80056bc <__ieee754_log+0x324>)
 8005546:	4b5e      	ldr	r3, [pc, #376]	; (80056c0 <__ieee754_log+0x328>)
 8005548:	f7fc f838 	bl	80015bc <__aeabi_dmul>
 800554c:	4a5d      	ldr	r2, [pc, #372]	; (80056c4 <__ieee754_log+0x32c>)
 800554e:	4b5e      	ldr	r3, [pc, #376]	; (80056c8 <__ieee754_log+0x330>)
 8005550:	f7fb f8c4 	bl	80006dc <__aeabi_dadd>
 8005554:	0022      	movs	r2, r4
 8005556:	002b      	movs	r3, r5
 8005558:	f7fc f830 	bl	80015bc <__aeabi_dmul>
 800555c:	4a5b      	ldr	r2, [pc, #364]	; (80056cc <__ieee754_log+0x334>)
 800555e:	4b5c      	ldr	r3, [pc, #368]	; (80056d0 <__ieee754_log+0x338>)
 8005560:	f7fb f8bc 	bl	80006dc <__aeabi_dadd>
 8005564:	0022      	movs	r2, r4
 8005566:	002b      	movs	r3, r5
 8005568:	f7fc f828 	bl	80015bc <__aeabi_dmul>
 800556c:	4a59      	ldr	r2, [pc, #356]	; (80056d4 <__ieee754_log+0x33c>)
 800556e:	4b5a      	ldr	r3, [pc, #360]	; (80056d8 <__ieee754_log+0x340>)
 8005570:	f7fb f8b4 	bl	80006dc <__aeabi_dadd>
 8005574:	9a08      	ldr	r2, [sp, #32]
 8005576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005578:	f7fc f820 	bl	80015bc <__aeabi_dmul>
 800557c:	4a57      	ldr	r2, [pc, #348]	; (80056dc <__ieee754_log+0x344>)
 800557e:	9008      	str	r0, [sp, #32]
 8005580:	9109      	str	r1, [sp, #36]	; 0x24
 8005582:	4b57      	ldr	r3, [pc, #348]	; (80056e0 <__ieee754_log+0x348>)
 8005584:	0020      	movs	r0, r4
 8005586:	0029      	movs	r1, r5
 8005588:	f7fc f818 	bl	80015bc <__aeabi_dmul>
 800558c:	4a55      	ldr	r2, [pc, #340]	; (80056e4 <__ieee754_log+0x34c>)
 800558e:	4b56      	ldr	r3, [pc, #344]	; (80056e8 <__ieee754_log+0x350>)
 8005590:	f7fb f8a4 	bl	80006dc <__aeabi_dadd>
 8005594:	0022      	movs	r2, r4
 8005596:	002b      	movs	r3, r5
 8005598:	f7fc f810 	bl	80015bc <__aeabi_dmul>
 800559c:	4a53      	ldr	r2, [pc, #332]	; (80056ec <__ieee754_log+0x354>)
 800559e:	4b54      	ldr	r3, [pc, #336]	; (80056f0 <__ieee754_log+0x358>)
 80055a0:	f7fb f89c 	bl	80006dc <__aeabi_dadd>
 80055a4:	0022      	movs	r2, r4
 80055a6:	002b      	movs	r3, r5
 80055a8:	f7fc f808 	bl	80015bc <__aeabi_dmul>
 80055ac:	0002      	movs	r2, r0
 80055ae:	000b      	movs	r3, r1
 80055b0:	9808      	ldr	r0, [sp, #32]
 80055b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055b4:	f7fb f892 	bl	80006dc <__aeabi_dadd>
 80055b8:	9a02      	ldr	r2, [sp, #8]
 80055ba:	4b4e      	ldr	r3, [pc, #312]	; (80056f4 <__ieee754_log+0x35c>)
 80055bc:	0004      	movs	r4, r0
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055c2:	000d      	movs	r5, r1
 80055c4:	4313      	orrs	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	dd34      	ble.n	8005634 <__ieee754_log+0x29c>
 80055ca:	2200      	movs	r2, #0
 80055cc:	4b39      	ldr	r3, [pc, #228]	; (80056b4 <__ieee754_log+0x31c>)
 80055ce:	0030      	movs	r0, r6
 80055d0:	0039      	movs	r1, r7
 80055d2:	f7fb fff3 	bl	80015bc <__aeabi_dmul>
 80055d6:	0032      	movs	r2, r6
 80055d8:	003b      	movs	r3, r7
 80055da:	f7fb ffef 	bl	80015bc <__aeabi_dmul>
 80055de:	0002      	movs	r2, r0
 80055e0:	000b      	movs	r3, r1
 80055e2:	9002      	str	r0, [sp, #8]
 80055e4:	9103      	str	r1, [sp, #12]
 80055e6:	0020      	movs	r0, r4
 80055e8:	0029      	movs	r1, r5
 80055ea:	f7fb f877 	bl	80006dc <__aeabi_dadd>
 80055ee:	9a04      	ldr	r2, [sp, #16]
 80055f0:	9b05      	ldr	r3, [sp, #20]
 80055f2:	f7fb ffe3 	bl	80015bc <__aeabi_dmul>
 80055f6:	9b00      	ldr	r3, [sp, #0]
 80055f8:	0004      	movs	r4, r0
 80055fa:	000d      	movs	r5, r1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <__ieee754_log+0x276>
 8005600:	0002      	movs	r2, r0
 8005602:	000b      	movs	r3, r1
 8005604:	9802      	ldr	r0, [sp, #8]
 8005606:	9903      	ldr	r1, [sp, #12]
 8005608:	f7fc fa44 	bl	8001a94 <__aeabi_dsub>
 800560c:	e74f      	b.n	80054ae <__ieee754_log+0x116>
 800560e:	4a23      	ldr	r2, [pc, #140]	; (800569c <__ieee754_log+0x304>)
 8005610:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <__ieee754_log+0x308>)
 8005612:	9806      	ldr	r0, [sp, #24]
 8005614:	9907      	ldr	r1, [sp, #28]
 8005616:	f7fb ffd1 	bl	80015bc <__aeabi_dmul>
 800561a:	4a22      	ldr	r2, [pc, #136]	; (80056a4 <__ieee754_log+0x30c>)
 800561c:	9000      	str	r0, [sp, #0]
 800561e:	9101      	str	r1, [sp, #4]
 8005620:	9806      	ldr	r0, [sp, #24]
 8005622:	9907      	ldr	r1, [sp, #28]
 8005624:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <__ieee754_log+0x310>)
 8005626:	f7fb ffc9 	bl	80015bc <__aeabi_dmul>
 800562a:	0022      	movs	r2, r4
 800562c:	002b      	movs	r3, r5
 800562e:	f7fb f855 	bl	80006dc <__aeabi_dadd>
 8005632:	e754      	b.n	80054de <__ieee754_log+0x146>
 8005634:	0002      	movs	r2, r0
 8005636:	000b      	movs	r3, r1
 8005638:	0030      	movs	r0, r6
 800563a:	0039      	movs	r1, r7
 800563c:	f7fc fa2a 	bl	8001a94 <__aeabi_dsub>
 8005640:	9a04      	ldr	r2, [sp, #16]
 8005642:	9b05      	ldr	r3, [sp, #20]
 8005644:	f7fb ffba 	bl	80015bc <__aeabi_dmul>
 8005648:	9b00      	ldr	r3, [sp, #0]
 800564a:	0004      	movs	r4, r0
 800564c:	000d      	movs	r5, r1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <__ieee754_log+0x2c0>
 8005652:	0002      	movs	r2, r0
 8005654:	000b      	movs	r3, r1
 8005656:	e72c      	b.n	80054b2 <__ieee754_log+0x11a>
 8005658:	4a10      	ldr	r2, [pc, #64]	; (800569c <__ieee754_log+0x304>)
 800565a:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <__ieee754_log+0x308>)
 800565c:	9806      	ldr	r0, [sp, #24]
 800565e:	9907      	ldr	r1, [sp, #28]
 8005660:	f7fb ffac 	bl	80015bc <__aeabi_dmul>
 8005664:	4a0f      	ldr	r2, [pc, #60]	; (80056a4 <__ieee754_log+0x30c>)
 8005666:	9000      	str	r0, [sp, #0]
 8005668:	9101      	str	r1, [sp, #4]
 800566a:	9806      	ldr	r0, [sp, #24]
 800566c:	9907      	ldr	r1, [sp, #28]
 800566e:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <__ieee754_log+0x310>)
 8005670:	f7fb ffa4 	bl	80015bc <__aeabi_dmul>
 8005674:	0002      	movs	r2, r0
 8005676:	000b      	movs	r3, r1
 8005678:	0020      	movs	r0, r4
 800567a:	0029      	movs	r1, r5
 800567c:	e733      	b.n	80054e6 <__ieee754_log+0x14e>
 800567e:	2000      	movs	r0, #0
 8005680:	2100      	movs	r1, #0
 8005682:	e69a      	b.n	80053ba <__ieee754_log+0x22>
 8005684:	c3500000 	.word	0xc3500000
 8005688:	43500000 	.word	0x43500000
 800568c:	7fefffff 	.word	0x7fefffff
 8005690:	fffffc01 	.word	0xfffffc01
 8005694:	00095f64 	.word	0x00095f64
 8005698:	3ff00000 	.word	0x3ff00000
 800569c:	fee00000 	.word	0xfee00000
 80056a0:	3fe62e42 	.word	0x3fe62e42
 80056a4:	35793c76 	.word	0x35793c76
 80056a8:	3dea39ef 	.word	0x3dea39ef
 80056ac:	55555555 	.word	0x55555555
 80056b0:	3fd55555 	.word	0x3fd55555
 80056b4:	3fe00000 	.word	0x3fe00000
 80056b8:	fff9eb86 	.word	0xfff9eb86
 80056bc:	df3e5244 	.word	0xdf3e5244
 80056c0:	3fc2f112 	.word	0x3fc2f112
 80056c4:	96cb03de 	.word	0x96cb03de
 80056c8:	3fc74664 	.word	0x3fc74664
 80056cc:	94229359 	.word	0x94229359
 80056d0:	3fd24924 	.word	0x3fd24924
 80056d4:	55555593 	.word	0x55555593
 80056d8:	3fe55555 	.word	0x3fe55555
 80056dc:	d078c69f 	.word	0xd078c69f
 80056e0:	3fc39a09 	.word	0x3fc39a09
 80056e4:	1d8e78af 	.word	0x1d8e78af
 80056e8:	3fcc71c5 	.word	0x3fcc71c5
 80056ec:	9997fa04 	.word	0x9997fa04
 80056f0:	3fd99999 	.word	0x3fd99999
 80056f4:	0006b851 	.word	0x0006b851

080056f8 <_init>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fe:	bc08      	pop	{r3}
 8005700:	469e      	mov	lr, r3
 8005702:	4770      	bx	lr

08005704 <_fini>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570a:	bc08      	pop	{r3}
 800570c:	469e      	mov	lr, r3
 800570e:	4770      	bx	lr
