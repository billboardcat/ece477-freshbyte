
spi_display_hx8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d08  08002d08  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002d08  08002d08  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d08  08002d08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000074  08002d84  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08002d84  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d1c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019c8  00000000  00000000  00028db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c8  00000000  00000000  0002a780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002b048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b4e5  00000000  00000000  0002b848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f6f  00000000  00000000  00046d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a16d2  00000000  00000000  0004fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f136e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001da4  00000000  00000000  000f13ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002cb8 	.word	0x08002cb8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08002cb8 	.word	0x08002cb8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b089      	sub	sp, #36	; 0x24
 8000220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	240c      	movs	r4, #12
 8000224:	193b      	adds	r3, r7, r4
 8000226:	0018      	movs	r0, r3
 8000228:	2314      	movs	r3, #20
 800022a:	001a      	movs	r2, r3
 800022c:	2100      	movs	r1, #0
 800022e:	f002 fd3b 	bl	8002ca8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000232:	4b29      	ldr	r3, [pc, #164]	; (80002d8 <MX_GPIO_Init+0xbc>)
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	4b28      	ldr	r3, [pc, #160]	; (80002d8 <MX_GPIO_Init+0xbc>)
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	0289      	lsls	r1, r1, #10
 800023c:	430a      	orrs	r2, r1
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	4b25      	ldr	r3, [pc, #148]	; (80002d8 <MX_GPIO_Init+0xbc>)
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	029b      	lsls	r3, r3, #10
 8000248:	4013      	ands	r3, r2
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800024e:	4b22      	ldr	r3, [pc, #136]	; (80002d8 <MX_GPIO_Init+0xbc>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <MX_GPIO_Init+0xbc>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	0349      	lsls	r1, r1, #13
 8000258:	430a      	orrs	r2, r1
 800025a:	615a      	str	r2, [r3, #20]
 800025c:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <MX_GPIO_Init+0xbc>)
 800025e:	695a      	ldr	r2, [r3, #20]
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	035b      	lsls	r3, r3, #13
 8000264:	4013      	ands	r3, r2
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_RST_Pin|SPI_DC_Pin, GPIO_PIN_SET);
 800026a:	2390      	movs	r3, #144	; 0x90
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	2201      	movs	r2, #1
 8000270:	210c      	movs	r1, #12
 8000272:	0018      	movs	r0, r3
 8000274:	f000 ff8c 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_GPIO_Init+0xc0>)
 800027a:	2201      	movs	r2, #1
 800027c:	2104      	movs	r1, #4
 800027e:	0018      	movs	r0, r3
 8000280:	f000 ff86 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_DC_Pin;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	220c      	movs	r2, #12
 8000288:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2201      	movs	r2, #1
 800028e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2203      	movs	r2, #3
 800029a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029c:	193a      	adds	r2, r7, r4
 800029e:	2390      	movs	r3, #144	; 0x90
 80002a0:	05db      	lsls	r3, r3, #23
 80002a2:	0011      	movs	r1, r2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fdfb 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80002aa:	0021      	movs	r1, r4
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2204      	movs	r2, #4
 80002b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2201      	movs	r2, #1
 80002b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2200      	movs	r2, #0
 80002c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	4a05      	ldr	r2, [pc, #20]	; (80002dc <MX_GPIO_Init+0xc0>)
 80002c8:	0019      	movs	r1, r3
 80002ca:	0010      	movs	r0, r2
 80002cc:	f000 fde8 	bl	8000ea0 <HAL_GPIO_Init>

}
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b009      	add	sp, #36	; 0x24
 80002d6:	bd90      	pop	{r4, r7, pc}
 80002d8:	40021000 	.word	0x40021000
 80002dc:	48000c00 	.word	0x48000c00

080002e0 <hx8357_disp_init>:
	HX8357_DISPON,
	0x80 + 50 / 5, // Main screen turn on, delay 50 ms
	0,             // END OF COMMAND LIST
};

void hx8357_disp_init() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	// Hard reset the display first
	hx8357_disp_reset();
 80002e6:	f000 f849 	bl	800037c <hx8357_disp_reset>

	uint8_t *init_prog = initd;
 80002ea:	4b22      	ldr	r3, [pc, #136]	; (8000374 <hx8357_disp_init+0x94>)
 80002ec:	607b      	str	r3, [r7, #4]
	uint8_t x, cmd, numArgs;

	while ((cmd = pgm_read_byte(init_prog++)) > 0) {
 80002ee:	e032      	b.n	8000356 <hx8357_disp_init+0x76>
		if (cmd != 0xFF) {
 80002f0:	1cbb      	adds	r3, r7, #2
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2bff      	cmp	r3, #255	; 0xff
 80002f6:	d004      	beq.n	8000302 <hx8357_disp_init+0x22>
			// writeCommand(cmd);
			hx8357_writeCommand(cmd);
 80002f8:	1cbb      	adds	r3, r7, #2
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 f85d 	bl	80003bc <hx8357_writeCommand>
		}

		x = pgm_read_byte(init_prog++);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	1c5a      	adds	r2, r3, #1
 8000306:	607a      	str	r2, [r7, #4]
 8000308:	1c7a      	adds	r2, r7, #1
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	7013      	strb	r3, [r2, #0]
		numArgs	= x & 0x7F;
 800030e:	1cfb      	adds	r3, r7, #3
 8000310:	1c7a      	adds	r2, r7, #1
 8000312:	7812      	ldrb	r2, [r2, #0]
 8000314:	217f      	movs	r1, #127	; 0x7f
 8000316:	400a      	ands	r2, r1
 8000318:	701a      	strb	r2, [r3, #0]

		if (x & 0x80) {				// If the highest bit is set...
 800031a:	1c7b      	adds	r3, r7, #1
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b25b      	sxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	da11      	bge.n	8000348 <hx8357_disp_init+0x68>
			HAL_Delay(numArgs * 5);	// numArgs is actually a delay time (5ms units)
 8000324:	1cfb      	adds	r3, r7, #3
 8000326:	781a      	ldrb	r2, [r3, #0]
 8000328:	0013      	movs	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	189b      	adds	r3, r3, r2
 800032e:	0018      	movs	r0, r3
 8000330:	f000 fce0 	bl	8000cf4 <HAL_Delay>
 8000334:	e00f      	b.n	8000356 <hx8357_disp_init+0x76>
		} else {					// Otherwise, issue args to command...
			while (numArgs--) {
				// spiWrite(pgm_read_bytes(init_prog++));
				HAL_SPI_Transmit(&DISP_SPI, init_prog++, 1, HAL_MAX_DELAY);
 8000336:	6879      	ldr	r1, [r7, #4]
 8000338:	1c4b      	adds	r3, r1, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	2301      	movs	r3, #1
 800033e:	425b      	negs	r3, r3
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <hx8357_disp_init+0x98>)
 8000342:	2201      	movs	r2, #1
 8000344:	f001 fe14 	bl	8001f70 <HAL_SPI_Transmit>
			while (numArgs--) {
 8000348:	1cfb      	adds	r3, r7, #3
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	1cfa      	adds	r2, r7, #3
 800034e:	1e59      	subs	r1, r3, #1
 8000350:	7011      	strb	r1, [r2, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d1ef      	bne.n	8000336 <hx8357_disp_init+0x56>
	while ((cmd = pgm_read_byte(init_prog++)) > 0) {
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	1c5a      	adds	r2, r3, #1
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	1cba      	adds	r2, r7, #2
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	7013      	strb	r3, [r2, #0]
 8000362:	1cbb      	adds	r3, r7, #2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1c2      	bne.n	80002f0 <hx8357_disp_init+0x10>
			}
		}
	}
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b002      	add	sp, #8
 8000370:	bd80      	pop	{r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	20000000 	.word	0x20000000
 8000378:	20000110 	.word	0x20000110

0800037c <hx8357_disp_reset>:

void hx8357_disp_reset() {
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_GPIO, RST_PIN, GPIO_PIN_SET);
 8000380:	2390      	movs	r3, #144	; 0x90
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	2201      	movs	r2, #1
 8000386:	2104      	movs	r1, #4
 8000388:	0018      	movs	r0, r3
 800038a:	f000 ff01 	bl	8001190 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800038e:	2096      	movs	r0, #150	; 0x96
 8000390:	f000 fcb0 	bl	8000cf4 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO, RST_PIN, GPIO_PIN_RESET);
 8000394:	2390      	movs	r3, #144	; 0x90
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	0018      	movs	r0, r3
 800039e:	f000 fef7 	bl	8001190 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80003a2:	2096      	movs	r0, #150	; 0x96
 80003a4:	f000 fca6 	bl	8000cf4 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO, RST_PIN, GPIO_PIN_SET);
 80003a8:	2390      	movs	r3, #144	; 0x90
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	2201      	movs	r2, #1
 80003ae:	2104      	movs	r1, #4
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 feed 	bl	8001190 <HAL_GPIO_WritePin>
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <hx8357_writeCommand>:

void hx8357_writeCommand(uint8_t cmd) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	0002      	movs	r2, r0
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);
 80003c8:	2390      	movs	r3, #144	; 0x90
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	2200      	movs	r2, #0
 80003ce:	2108      	movs	r1, #8
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fedd 	bl	8001190 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&DISP_SPI, &cmd, 1, HAL_MAX_DELAY);
 80003d6:	2301      	movs	r3, #1
 80003d8:	425b      	negs	r3, r3
 80003da:	1df9      	adds	r1, r7, #7
 80003dc:	4807      	ldr	r0, [pc, #28]	; (80003fc <hx8357_writeCommand+0x40>)
 80003de:	2201      	movs	r2, #1
 80003e0:	f001 fdc6 	bl	8001f70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);
 80003e4:	2390      	movs	r3, #144	; 0x90
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	2201      	movs	r2, #1
 80003ea:	2108      	movs	r1, #8
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fecf 	bl	8001190 <HAL_GPIO_WritePin>
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	20000110 	.word	0x20000110

08000400 <hx8357_disp_invert>:

void hx8357_disp_invert(unsigned char invert) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	0002      	movs	r2, r0
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	701a      	strb	r2, [r3, #0]
	uint8_t inv_cmd = (invert == 0x00) ? HX8357_INVOFF : HX8357_INVON;
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d101      	bne.n	8000418 <hx8357_disp_invert+0x18>
 8000414:	2220      	movs	r2, #32
 8000416:	e000      	b.n	800041a <hx8357_disp_invert+0x1a>
 8000418:	2221      	movs	r2, #33	; 0x21
 800041a:	210f      	movs	r1, #15
 800041c:	187b      	adds	r3, r7, r1
 800041e:	701a      	strb	r2, [r3, #0]
	hx8357_writeCommand(inv_cmd);
 8000420:	187b      	adds	r3, r7, r1
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff ffc9 	bl	80003bc <hx8357_writeCommand>
}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b004      	add	sp, #16
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <hx8357_disp_setAddrWindow>:

void hx8357_disp_setAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h) {
 8000434:	b5b0      	push	{r4, r5, r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	0005      	movs	r5, r0
 800043c:	000c      	movs	r4, r1
 800043e:	0010      	movs	r0, r2
 8000440:	0019      	movs	r1, r3
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	1c2a      	adds	r2, r5, #0
 8000446:	801a      	strh	r2, [r3, #0]
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	1c22      	adds	r2, r4, #0
 800044c:	801a      	strh	r2, [r3, #0]
 800044e:	1cbb      	adds	r3, r7, #2
 8000450:	1c02      	adds	r2, r0, #0
 8000452:	801a      	strh	r2, [r3, #0]
 8000454:	003b      	movs	r3, r7
 8000456:	1c0a      	adds	r2, r1, #0
 8000458:	801a      	strh	r2, [r3, #0]
	uint16_t x2 = (x1 + w - 1);
 800045a:	1dba      	adds	r2, r7, #6
 800045c:	1cbb      	adds	r3, r7, #2
 800045e:	8812      	ldrh	r2, [r2, #0]
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	18d3      	adds	r3, r2, r3
 8000464:	b29a      	uxth	r2, r3
 8000466:	2116      	movs	r1, #22
 8000468:	187b      	adds	r3, r7, r1
 800046a:	3a01      	subs	r2, #1
 800046c:	801a      	strh	r2, [r3, #0]
	uint16_t y2 = (y1 + h - 1);
 800046e:	1d3a      	adds	r2, r7, #4
 8000470:	003b      	movs	r3, r7
 8000472:	8812      	ldrh	r2, [r2, #0]
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	18d3      	adds	r3, r2, r3
 8000478:	b29a      	uxth	r2, r3
 800047a:	2014      	movs	r0, #20
 800047c:	183b      	adds	r3, r7, r0
 800047e:	3a01      	subs	r2, #1
 8000480:	801a      	strh	r2, [r3, #0]
	uint8_t xStream[] = {
		(uint8_t) ((x1 & ((uint16_t) 0xFF00)) >> 8), 
 8000482:	1dbb      	adds	r3, r7, #6
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	b29b      	uxth	r3, r3
 800048a:	b2da      	uxtb	r2, r3
	uint8_t xStream[] = {
 800048c:	2410      	movs	r4, #16
 800048e:	193b      	adds	r3, r7, r4
 8000490:	701a      	strb	r2, [r3, #0]
		(uint8_t) (x1 & 0xFF),
 8000492:	1dbb      	adds	r3, r7, #6
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	b2da      	uxtb	r2, r3
	uint8_t xStream[] = {
 8000498:	193b      	adds	r3, r7, r4
 800049a:	705a      	strb	r2, [r3, #1]
		(uint8_t) ((x2 & ((uint16_t) 0xFF00)) >> 8),
 800049c:	187b      	adds	r3, r7, r1
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	0a1b      	lsrs	r3, r3, #8
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	b2da      	uxtb	r2, r3
	uint8_t xStream[] = {
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	709a      	strb	r2, [r3, #2]
		(uint8_t) (x2 & 0xFF)
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	b2da      	uxtb	r2, r3
	uint8_t xStream[] = {
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	70da      	strb	r2, [r3, #3]
	};

	uint8_t yStream[] = {
		(uint8_t) ((y1 & ((uint16_t) 0xFF00)) >> 8), 
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	0a1b      	lsrs	r3, r3, #8
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	b2da      	uxtb	r2, r3
	uint8_t yStream[] = {
 80004be:	250c      	movs	r5, #12
 80004c0:	197b      	adds	r3, r7, r5
 80004c2:	701a      	strb	r2, [r3, #0]
		(uint8_t) (y1 & 0xFF),
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	b2da      	uxtb	r2, r3
	uint8_t yStream[] = {
 80004ca:	197b      	adds	r3, r7, r5
 80004cc:	705a      	strb	r2, [r3, #1]
		(uint8_t) ((y2 & ((uint16_t) 0xFF00)) >> 8),
 80004ce:	183b      	adds	r3, r7, r0
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	0a1b      	lsrs	r3, r3, #8
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	b2da      	uxtb	r2, r3
	uint8_t yStream[] = {
 80004d8:	197b      	adds	r3, r7, r5
 80004da:	709a      	strb	r2, [r3, #2]
		(uint8_t) (y2 & 0xFF)
 80004dc:	183b      	adds	r3, r7, r0
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	b2da      	uxtb	r2, r3
	uint8_t yStream[] = {
 80004e2:	197b      	adds	r3, r7, r5
 80004e4:	70da      	strb	r2, [r3, #3]
	};

	hx8357_writeCommand(HX8357_CASET);	// Column address set
 80004e6:	202a      	movs	r0, #42	; 0x2a
 80004e8:	f7ff ff68 	bl	80003bc <hx8357_writeCommand>
	HAL_SPI_Transmit(&DISP_SPI, xStream, 4, HAL_MAX_DELAY);
 80004ec:	2301      	movs	r3, #1
 80004ee:	425b      	negs	r3, r3
 80004f0:	1939      	adds	r1, r7, r4
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <hx8357_disp_setAddrWindow+0xe8>)
 80004f4:	2204      	movs	r2, #4
 80004f6:	f001 fd3b 	bl	8001f70 <HAL_SPI_Transmit>
	hx8357_writeCommand(HX8357_PASET);	// Row address set
 80004fa:	202b      	movs	r0, #43	; 0x2b
 80004fc:	f7ff ff5e 	bl	80003bc <hx8357_writeCommand>
	HAL_SPI_Transmit(&DISP_SPI, yStream, 4, HAL_MAX_DELAY);
 8000500:	2301      	movs	r3, #1
 8000502:	425b      	negs	r3, r3
 8000504:	1979      	adds	r1, r7, r5
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <hx8357_disp_setAddrWindow+0xe8>)
 8000508:	2204      	movs	r2, #4
 800050a:	f001 fd31 	bl	8001f70 <HAL_SPI_Transmit>
	hx8357_writeCommand(HX8357_RAMWR);	// Write to RAM
 800050e:	202c      	movs	r0, #44	; 0x2c
 8000510:	f7ff ff54 	bl	80003bc <hx8357_writeCommand>
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b006      	add	sp, #24
 800051a:	bdb0      	pop	{r4, r5, r7, pc}
 800051c:	20000110 	.word	0x20000110

08000520 <hx8357_writeColor>:
/* 
	@brief	Writes a 2-byte color many times
	@param	color	The 16-bit 5-6-5 color to draw
	@param	len		The number of pixels to draw
*/
void hx8357_writeColor(uint16_t color, uint32_t len) {
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	0002      	movs	r2, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	1dbb      	adds	r3, r7, #6
 800052c:	801a      	strh	r2, [r3, #0]
	if (!len) return;	// Avoid 0-byte transfers
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d05c      	beq.n	80005ee <hx8357_writeColor+0xce>

	DISP_SPI.Init.DataSize = SPI_DATASIZE_16BIT;
 8000534:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <hx8357_writeColor+0xd8>)
 8000536:	22f0      	movs	r2, #240	; 0xf0
 8000538:	0112      	lsls	r2, r2, #4
 800053a:	60da      	str	r2, [r3, #12]

	static uint32_t temp[32];
	color = ((color & 0xFF) << 8) | ((color & 0xFF00) >> 8);
 800053c:	1dbb      	adds	r3, r7, #6
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	b21a      	sxth	r2, r3
 8000544:	1dbb      	adds	r3, r7, #6
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b29b      	uxth	r3, r3
 800054c:	b21b      	sxth	r3, r3
 800054e:	4313      	orrs	r3, r2
 8000550:	b21a      	sxth	r2, r3
 8000552:	1dbb      	adds	r3, r7, #6
 8000554:	801a      	strh	r2, [r3, #0]
	uint32_t 		c32 = color * 0x00010001;
 8000556:	1dbb      	adds	r3, r7, #6
 8000558:	881a      	ldrh	r2, [r3, #0]
 800055a:	0013      	movs	r3, r2
 800055c:	041b      	lsls	r3, r3, #16
 800055e:	189b      	adds	r3, r3, r2
 8000560:	613b      	str	r3, [r7, #16]
	uint16_t		bufLen = (len < 32) ? len : 32;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b20      	cmp	r3, #32
 8000566:	d900      	bls.n	800056a <hx8357_writeColor+0x4a>
 8000568:	2320      	movs	r3, #32
 800056a:	210e      	movs	r1, #14
 800056c:	187a      	adds	r2, r7, r1
 800056e:	8013      	strh	r3, [r2, #0]
	uint16_t		xferLen, fillLen;

	fillLen = (bufLen + 1) / 2;		// Round up to nearest 32-bit boundry
 8000570:	187b      	adds	r3, r7, r1
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	2b00      	cmp	r3, #0
 8000578:	da00      	bge.n	800057c <hx8357_writeColor+0x5c>
 800057a:	3301      	adds	r3, #1
 800057c:	105b      	asrs	r3, r3, #1
 800057e:	001a      	movs	r2, r3
 8000580:	230c      	movs	r3, #12
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < fillLen; i++) {	// Fill temp[] with c32
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	e007      	b.n	800059c <hx8357_writeColor+0x7c>
		temp[i] = c32;
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <hx8357_writeColor+0xdc>)
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	0092      	lsls	r2, r2, #2
 8000592:	6939      	ldr	r1, [r7, #16]
 8000594:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < fillLen; i++) {	// Fill temp[] with c32
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	230c      	movs	r3, #12
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	697a      	ldr	r2, [r7, #20]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf1      	blt.n	800058c <hx8357_writeColor+0x6c>
	}

	while (len) {
 80005a8:	e019      	b.n	80005de <hx8357_writeColor+0xbe>
		xferLen = (bufLen < len) ? bufLen : len;	// How many pixels to pass
 80005aa:	230e      	movs	r3, #14
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	881a      	ldrh	r2, [r3, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d900      	bls.n	80005b8 <hx8357_writeColor+0x98>
 80005b6:	0013      	movs	r3, r2
 80005b8:	210a      	movs	r1, #10
 80005ba:	187a      	adds	r2, r7, r1
 80005bc:	8013      	strh	r3, [r2, #0]
		HAL_SPI_Transmit(&DISP_SPI, (void*) temp, xferLen, HAL_MAX_DELAY);
 80005be:	2301      	movs	r3, #1
 80005c0:	425c      	negs	r4, r3
 80005c2:	000d      	movs	r5, r1
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	881a      	ldrh	r2, [r3, #0]
 80005c8:	490c      	ldr	r1, [pc, #48]	; (80005fc <hx8357_writeColor+0xdc>)
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <hx8357_writeColor+0xd8>)
 80005cc:	0023      	movs	r3, r4
 80005ce:	f001 fccf 	bl	8001f70 <HAL_SPI_Transmit>
		len -= xferLen;
 80005d2:	0029      	movs	r1, r5
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	603b      	str	r3, [r7, #0]
	while (len) {
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1e2      	bne.n	80005aa <hx8357_writeColor+0x8a>
	}

	DISP_SPI.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <hx8357_writeColor+0xd8>)
 80005e6:	22e0      	movs	r2, #224	; 0xe0
 80005e8:	00d2      	lsls	r2, r2, #3
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	e000      	b.n	80005f0 <hx8357_writeColor+0xd0>
	if (!len) return;	// Avoid 0-byte transfers
 80005ee:	46c0      	nop			; (mov r8, r8)
}
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b006      	add	sp, #24
 80005f4:	bdb0      	pop	{r4, r5, r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	20000110 	.word	0x20000110
 80005fc:	20000090 	.word	0x20000090

08000600 <hx8357_writeFillRect>:

void hx8357_writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	0005      	movs	r5, r0
 8000608:	000c      	movs	r4, r1
 800060a:	0010      	movs	r0, r2
 800060c:	0019      	movs	r1, r3
 800060e:	1dbb      	adds	r3, r7, #6
 8000610:	1c2a      	adds	r2, r5, #0
 8000612:	801a      	strh	r2, [r3, #0]
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	1c22      	adds	r2, r4, #0
 8000618:	801a      	strh	r2, [r3, #0]
 800061a:	1cbb      	adds	r3, r7, #2
 800061c:	1c02      	adds	r2, r0, #0
 800061e:	801a      	strh	r2, [r3, #0]
 8000620:	003b      	movs	r3, r7
 8000622:	1c0a      	adds	r2, r1, #0
 8000624:	801a      	strh	r2, [r3, #0]
	if ((x >= HX8357_TFTWIDTH) || (y >= HX8357_TFTHEIGHT)) return;
 8000626:	1dbb      	adds	r3, r7, #6
 8000628:	2200      	movs	r2, #0
 800062a:	5e9a      	ldrsh	r2, [r3, r2]
 800062c:	2340      	movs	r3, #64	; 0x40
 800062e:	33ff      	adds	r3, #255	; 0xff
 8000630:	429a      	cmp	r2, r3
 8000632:	dd00      	ble.n	8000636 <hx8357_writeFillRect+0x36>
 8000634:	e080      	b.n	8000738 <hx8357_writeFillRect+0x138>
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	5e9a      	ldrsh	r2, [r3, r2]
 800063c:	23e0      	movs	r3, #224	; 0xe0
 800063e:	33ff      	adds	r3, #255	; 0xff
 8000640:	429a      	cmp	r2, r3
 8000642:	dd00      	ble.n	8000646 <hx8357_writeFillRect+0x46>
 8000644:	e078      	b.n	8000738 <hx8357_writeFillRect+0x138>

	int16_t x2 = x + w - 1;
 8000646:	1dbb      	adds	r3, r7, #6
 8000648:	881a      	ldrh	r2, [r3, #0]
 800064a:	1cbb      	adds	r3, r7, #2
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	18d3      	adds	r3, r2, r3
 8000650:	b29b      	uxth	r3, r3
 8000652:	3b01      	subs	r3, #1
 8000654:	b29a      	uxth	r2, r3
 8000656:	210e      	movs	r1, #14
 8000658:	187b      	adds	r3, r7, r1
 800065a:	801a      	strh	r2, [r3, #0]
	int16_t y2 = y + h - 1;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	881a      	ldrh	r2, [r3, #0]
 8000660:	003b      	movs	r3, r7
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	18d3      	adds	r3, r2, r3
 8000666:	b29b      	uxth	r3, r3
 8000668:	3b01      	subs	r3, #1
 800066a:	b29a      	uxth	r2, r3
 800066c:	230c      	movs	r3, #12
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	801a      	strh	r2, [r3, #0]

	if ((x2 < 0) || (y2 < 0)) return;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	5e9b      	ldrsh	r3, [r3, r2]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db5f      	blt.n	800073c <hx8357_writeFillRect+0x13c>
 800067c:	230c      	movs	r3, #12
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	2200      	movs	r2, #0
 8000682:	5e9b      	ldrsh	r3, [r3, r2]
 8000684:	2b00      	cmp	r3, #0
 8000686:	db59      	blt.n	800073c <hx8357_writeFillRect+0x13c>

	// Clip left/top
	if(x < 0) {
 8000688:	1dbb      	adds	r3, r7, #6
 800068a:	2200      	movs	r2, #0
 800068c:	5e9b      	ldrsh	r3, [r3, r2]
 800068e:	2b00      	cmp	r3, #0
 8000690:	da09      	bge.n	80006a6 <hx8357_writeFillRect+0xa6>
		x = 0;
 8000692:	1dbb      	adds	r3, r7, #6
 8000694:	2200      	movs	r2, #0
 8000696:	801a      	strh	r2, [r3, #0]
		w = x2 + 1;
 8000698:	230e      	movs	r3, #14
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	1cbb      	adds	r3, r7, #2
 80006a4:	801a      	strh	r2, [r3, #0]
	}
	if(y < 0) {
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	5e9b      	ldrsh	r3, [r3, r2]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da09      	bge.n	80006c4 <hx8357_writeFillRect+0xc4>
		y = 0;
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	801a      	strh	r2, [r3, #0]
		h = y2 + 1;
 80006b6:	230c      	movs	r3, #12
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	b29a      	uxth	r2, r3
 80006c0:	003b      	movs	r3, r7
 80006c2:	801a      	strh	r2, [r3, #0]
	}

	// Clip right/bottom
    if(x2 >= HX8357_TFTWIDTH)  w = HX8357_TFTWIDTH  - x;
 80006c4:	230e      	movs	r3, #14
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	5e9a      	ldrsh	r2, [r3, r2]
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	33ff      	adds	r3, #255	; 0xff
 80006d0:	429a      	cmp	r2, r3
 80006d2:	dd07      	ble.n	80006e4 <hx8357_writeFillRect+0xe4>
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	22a0      	movs	r2, #160	; 0xa0
 80006da:	0052      	lsls	r2, r2, #1
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	b29a      	uxth	r2, r3
 80006e0:	1cbb      	adds	r3, r7, #2
 80006e2:	801a      	strh	r2, [r3, #0]
    if(y2 >= HX8357_TFTHEIGHT) h = HX8357_TFTHEIGHT - y;
 80006e4:	230c      	movs	r3, #12
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	2200      	movs	r2, #0
 80006ea:	5e9a      	ldrsh	r2, [r3, r2]
 80006ec:	23e0      	movs	r3, #224	; 0xe0
 80006ee:	33ff      	adds	r3, #255	; 0xff
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dd07      	ble.n	8000704 <hx8357_writeFillRect+0x104>
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	22f0      	movs	r2, #240	; 0xf0
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	b29a      	uxth	r2, r3
 8000700:	003b      	movs	r3, r7
 8000702:	801a      	strh	r2, [r3, #0]
    hx8357_disp_setAddrWindow(x, y, w, h);
 8000704:	1dbb      	adds	r3, r7, #6
 8000706:	8818      	ldrh	r0, [r3, #0]
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	8819      	ldrh	r1, [r3, #0]
 800070c:	1cbb      	adds	r3, r7, #2
 800070e:	881a      	ldrh	r2, [r3, #0]
 8000710:	003b      	movs	r3, r7
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	f7ff fe8e 	bl	8000434 <hx8357_disp_setAddrWindow>
    hx8357_writeColor(color, (int32_t)w * h);
 8000718:	1cbb      	adds	r3, r7, #2
 800071a:	2200      	movs	r2, #0
 800071c:	5e9b      	ldrsh	r3, [r3, r2]
 800071e:	003a      	movs	r2, r7
 8000720:	2100      	movs	r1, #0
 8000722:	5e52      	ldrsh	r2, [r2, r1]
 8000724:	4353      	muls	r3, r2
 8000726:	001a      	movs	r2, r3
 8000728:	2320      	movs	r3, #32
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f7ff fef5 	bl	8000520 <hx8357_writeColor>
 8000736:	e002      	b.n	800073e <hx8357_writeFillRect+0x13e>
	if ((x >= HX8357_TFTWIDTH) || (y >= HX8357_TFTHEIGHT)) return;
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	e000      	b.n	800073e <hx8357_writeFillRect+0x13e>
	if ((x2 < 0) || (y2 < 0)) return;
 800073c:	46c0      	nop			; (mov r8, r8)
}
 800073e:	46bd      	mov	sp, r7
 8000740:	b004      	add	sp, #16
 8000742:	bdb0      	pop	{r4, r5, r7, pc}

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fa70 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f818 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f7ff fd64 	bl	800021c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000754:	f000 f8f8 	bl	8000948 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000758:	f000 f9c0 	bl	8000adc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  hx8357_disp_reset();
 800075c:	f7ff fe0e 	bl	800037c <hx8357_disp_reset>
  hx8357_disp_init();
 8000760:	f7ff fdbe 	bl	80002e0 <hx8357_disp_init>
  hx8357_disp_invert(0);
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff fe4b 	bl	8000400 <hx8357_disp_invert>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <main+0x38>)
 800076c:	2104      	movs	r1, #4
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fd2b 	bl	80011ca <HAL_GPIO_TogglePin>
	rectanglesDemo();
 8000774:	f000 f864 	bl	8000840 <rectanglesDemo>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000778:	e7f7      	b.n	800076a <main+0x26>
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	48000c00 	.word	0x48000c00

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b099      	sub	sp, #100	; 0x64
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	242c      	movs	r4, #44	; 0x2c
 8000788:	193b      	adds	r3, r7, r4
 800078a:	0018      	movs	r0, r3
 800078c:	2334      	movs	r3, #52	; 0x34
 800078e:	001a      	movs	r2, r3
 8000790:	2100      	movs	r1, #0
 8000792:	f002 fa89 	bl	8002ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000796:	231c      	movs	r3, #28
 8000798:	18fb      	adds	r3, r7, r3
 800079a:	0018      	movs	r0, r3
 800079c:	2310      	movs	r3, #16
 800079e:	001a      	movs	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	f002 fa81 	bl	8002ca8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a6:	003b      	movs	r3, r7
 80007a8:	0018      	movs	r0, r3
 80007aa:	231c      	movs	r3, #28
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f002 fa7a 	bl	8002ca8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80007b4:	0021      	movs	r1, r4
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2220      	movs	r2, #32
 80007ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2201      	movs	r2, #1
 80007c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2202      	movs	r2, #2
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	22c0      	movs	r2, #192	; 0xc0
 80007cc:	0252      	lsls	r2, r2, #9
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	02d2      	lsls	r2, r2, #11
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV4;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2203      	movs	r2, #3
 80007dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fd0d 	bl	8001200 <HAL_RCC_OscConfig>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ea:	f000 f8a9 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	211c      	movs	r1, #28
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2207      	movs	r2, #7
 80007f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2202      	movs	r2, #2
 80007fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2101      	movs	r1, #1
 800080c:	0018      	movs	r0, r3
 800080e:	f001 f87d 	bl	800190c <HAL_RCC_ClockConfig>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000816:	f000 f893 	bl	8000940 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800081a:	003b      	movs	r3, r7
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000820:	003b      	movs	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000826:	003b      	movs	r3, r7
 8000828:	0018      	movs	r0, r3
 800082a:	f001 f9e7 	bl	8001bfc <HAL_RCCEx_PeriphCLKConfig>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000832:	f000 f885 	bl	8000940 <Error_Handler>
  }
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b019      	add	sp, #100	; 0x64
 800083c:	bd90      	pop	{r4, r7, pc}
	...

08000840 <rectanglesDemo>:

/* USER CODE BEGIN 4 */

void rectanglesDemo(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af02      	add	r7, sp, #8
	hx8357_writeFillRect(0, 0, HX8357_TFTWIDTH,     HX8357_TFTHEIGHT, HX8357_BLACK);
 8000846:	23f0      	movs	r3, #240	; 0xf0
 8000848:	0059      	lsls	r1, r3, #1
 800084a:	23a0      	movs	r3, #160	; 0xa0
 800084c:	005a      	lsls	r2, r3, #1
 800084e:	2300      	movs	r3, #0
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	000b      	movs	r3, r1
 8000854:	2100      	movs	r1, #0
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fed2 	bl	8000600 <hx8357_writeFillRect>
	HAL_Delay(1000);
 800085c:	23fa      	movs	r3, #250	; 0xfa
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fa47 	bl	8000cf4 <HAL_Delay>
	hx8357_writeFillRect(0, 0, HX8357_TFTWIDTH/2,   HX8357_TFTHEIGHT/2, HX8357_RED);
 8000866:	23f8      	movs	r3, #248	; 0xf8
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	23f0      	movs	r3, #240	; 0xf0
 800086e:	22a0      	movs	r2, #160	; 0xa0
 8000870:	2100      	movs	r1, #0
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fec4 	bl	8000600 <hx8357_writeFillRect>
	HAL_Delay(1000);
 8000878:	23fa      	movs	r3, #250	; 0xfa
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fa39 	bl	8000cf4 <HAL_Delay>
	hx8357_writeFillRect(0, HX8357_TFTHEIGHT/2, HX8357_TFTWIDTH/2,   HX8357_TFTHEIGHT/2, HX8357_BLUE);
 8000882:	231f      	movs	r3, #31
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	23f0      	movs	r3, #240	; 0xf0
 8000888:	22a0      	movs	r2, #160	; 0xa0
 800088a:	21f0      	movs	r1, #240	; 0xf0
 800088c:	2000      	movs	r0, #0
 800088e:	f7ff feb7 	bl	8000600 <hx8357_writeFillRect>
	HAL_Delay(1000);
 8000892:	23fa      	movs	r3, #250	; 0xfa
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fa2c 	bl	8000cf4 <HAL_Delay>
	hx8357_writeFillRect(HX8357_TFTWIDTH/2, 0, HX8357_TFTWIDTH/2,   HX8357_TFTHEIGHT/2, HX8357_GREEN);
 800089c:	23fc      	movs	r3, #252	; 0xfc
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	23f0      	movs	r3, #240	; 0xf0
 80008a4:	22a0      	movs	r2, #160	; 0xa0
 80008a6:	2100      	movs	r1, #0
 80008a8:	20a0      	movs	r0, #160	; 0xa0
 80008aa:	f7ff fea9 	bl	8000600 <hx8357_writeFillRect>
	HAL_Delay(1000);
 80008ae:	23fa      	movs	r3, #250	; 0xfa
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fa1e 	bl	8000cf4 <HAL_Delay>
	hx8357_writeFillRect(HX8357_TFTWIDTH/2, HX8357_TFTHEIGHT/2, HX8357_TFTWIDTH/2,   HX8357_TFTHEIGHT/2, HX8357_YELLOW);
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <rectanglesDemo+0xf8>)
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	23f0      	movs	r3, #240	; 0xf0
 80008be:	22a0      	movs	r2, #160	; 0xa0
 80008c0:	21f0      	movs	r1, #240	; 0xf0
 80008c2:	20a0      	movs	r0, #160	; 0xa0
 80008c4:	f7ff fe9c 	bl	8000600 <hx8357_writeFillRect>
	HAL_Delay(1000);
 80008c8:	23fa      	movs	r3, #250	; 0xfa
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 fa11 	bl	8000cf4 <HAL_Delay>
	hx8357_disp_invert(1);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff fd94 	bl	8000400 <hx8357_disp_invert>
	HAL_Delay(150);
 80008d8:	2096      	movs	r0, #150	; 0x96
 80008da:	f000 fa0b 	bl	8000cf4 <HAL_Delay>
	hx8357_disp_invert(0);
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fd8e 	bl	8000400 <hx8357_disp_invert>
	HAL_Delay(150);
 80008e4:	2096      	movs	r0, #150	; 0x96
 80008e6:	f000 fa05 	bl	8000cf4 <HAL_Delay>
	hx8357_disp_invert(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fd88 	bl	8000400 <hx8357_disp_invert>
	HAL_Delay(150);
 80008f0:	2096      	movs	r0, #150	; 0x96
 80008f2:	f000 f9ff 	bl	8000cf4 <HAL_Delay>
	hx8357_disp_invert(0);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff fd82 	bl	8000400 <hx8357_disp_invert>
	HAL_Delay(150);
 80008fc:	2096      	movs	r0, #150	; 0x96
 80008fe:	f000 f9f9 	bl	8000cf4 <HAL_Delay>
	hx8357_disp_invert(1);
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff fd7c 	bl	8000400 <hx8357_disp_invert>
	HAL_Delay(150);
 8000908:	2096      	movs	r0, #150	; 0x96
 800090a:	f000 f9f3 	bl	8000cf4 <HAL_Delay>
	hx8357_disp_invert(0);
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fd76 	bl	8000400 <hx8357_disp_invert>
	HAL_Delay(150);
 8000914:	2096      	movs	r0, #150	; 0x96
 8000916:	f000 f9ed 	bl	8000cf4 <HAL_Delay>
	hx8357_writeFillRect(0, 0, HX8357_TFTWIDTH,     HX8357_TFTHEIGHT, HX8357_WHITE);
 800091a:	23f0      	movs	r3, #240	; 0xf0
 800091c:	0059      	lsls	r1, r3, #1
 800091e:	23a0      	movs	r3, #160	; 0xa0
 8000920:	005a      	lsls	r2, r3, #1
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <rectanglesDemo+0xfc>)
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	000b      	movs	r3, r1
 8000928:	2100      	movs	r1, #0
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fe68 	bl	8000600 <hx8357_writeFillRect>
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	0000ffe0 	.word	0x0000ffe0
 800093c:	0000ffff 	.word	0x0000ffff

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000946:	e7fe      	b.n	8000946 <Error_Handler+0x6>

08000948 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_SPI1_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <MX_SPI1_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_SPI1_Init+0x74>)
 8000954:	2282      	movs	r2, #130	; 0x82
 8000956:	0052      	lsls	r2, r2, #1
 8000958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_SPI1_Init+0x74>)
 8000962:	22e0      	movs	r2, #224	; 0xe0
 8000964:	00d2      	lsls	r2, r2, #3
 8000966:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_SPI1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI1_Init+0x74>)
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	02d2      	lsls	r2, r2, #11
 800097a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_SPI1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_SPI1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI1_Init+0x74>)
 8000996:	2207      	movs	r2, #7
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_SPI1_Init+0x74>)
 80009a2:	2208      	movs	r2, #8
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <MX_SPI1_Init+0x74>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f001 fa29 	bl	8001e00 <HAL_SPI_Init>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f7ff ffc5 	bl	8000940 <Error_Handler>
  }

}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000110 	.word	0x20000110
 80009c0:	40013000 	.word	0x40013000

080009c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	2314      	movs	r3, #20
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	0018      	movs	r0, r3
 80009d2:	2314      	movs	r3, #20
 80009d4:	001a      	movs	r2, r3
 80009d6:	2100      	movs	r1, #0
 80009d8:	f002 f966 	bl	8002ca8 <memset>
  if(spiHandle->Instance==SPI1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <HAL_SPI_MspInit+0x90>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d132      	bne.n	8000a4c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <HAL_SPI_MspInit+0x94>)
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_SPI_MspInit+0x94>)
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	0149      	lsls	r1, r1, #5
 80009f0:	430a      	orrs	r2, r1
 80009f2:	619a      	str	r2, [r3, #24]
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_SPI_MspInit+0x94>)
 80009f6:	699a      	ldr	r2, [r3, #24]
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	015b      	lsls	r3, r3, #5
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_SPI_MspInit+0x94>)
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_SPI_MspInit+0x94>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	0289      	lsls	r1, r1, #10
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_SPI_MspInit+0x94>)
 8000a12:	695a      	ldr	r2, [r3, #20]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	029b      	lsls	r3, r3, #10
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a1e:	2114      	movs	r1, #20
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	22f0      	movs	r2, #240	; 0xf0
 8000a24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2202      	movs	r2, #2
 8000a2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2203      	movs	r2, #3
 8000a36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	187a      	adds	r2, r7, r1
 8000a40:	2390      	movs	r3, #144	; 0x90
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	0011      	movs	r1, r2
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 fa2a 	bl	8000ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b00a      	add	sp, #40	; 0x28
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40013000 	.word	0x40013000
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	699a      	ldr	r2, [r3, #24]
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	619a      	str	r2, [r3, #24]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	2201      	movs	r2, #1
 8000a74:	4013      	ands	r3, r2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	69da      	ldr	r2, [r3, #28]
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0549      	lsls	r1, r1, #21
 8000a84:	430a      	orrs	r2, r1
 8000a86:	61da      	str	r2, [r3, #28]
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a8a:	69da      	ldr	r2, [r3, #28]
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	055b      	lsls	r3, r3, #21
 8000a90:	4013      	ands	r3, r2
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f8f8 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <MX_USART1_UART_Init+0x5c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000ae8:	22e1      	movs	r2, #225	; 0xe1
 8000aea:	0252      	lsls	r2, r2, #9
 8000aec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <MX_USART1_UART_Init+0x58>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f001 fce7 	bl	80024f4 <HAL_UART_Init>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f7ff ff09 	bl	8000940 <Error_Handler>
  }

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000174 	.word	0x20000174
 8000b38:	40013800 	.word	0x40013800

08000b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	2314      	movs	r3, #20
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	0018      	movs	r0, r3
 8000b4a:	2314      	movs	r3, #20
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f002 f8aa 	bl	8002ca8 <memset>
  if(uartHandle->Instance==USART1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HAL_UART_MspInit+0x94>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d133      	bne.n	8000bc6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b60:	699a      	ldr	r2, [r3, #24]
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	01c9      	lsls	r1, r1, #7
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	619a      	str	r2, [r3, #24]
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b6e:	699a      	ldr	r2, [r3, #24]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	01db      	lsls	r3, r3, #7
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	0289      	lsls	r1, r1, #10
 8000b84:	430a      	orrs	r2, r1
 8000b86:	615a      	str	r2, [r3, #20]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b8a:	695a      	ldr	r2, [r3, #20]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	029b      	lsls	r3, r3, #10
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b96:	2114      	movs	r1, #20
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	22c0      	movs	r2, #192	; 0xc0
 8000b9c:	00d2      	lsls	r2, r2, #3
 8000b9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	187a      	adds	r2, r7, r1
 8000bba:	2390      	movs	r3, #144	; 0x90
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f000 f96d 	bl	8000ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b00a      	add	sp, #40	; 0x28
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	40013800 	.word	0x40013800
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf4:	4c0b      	ldr	r4, [pc, #44]	; (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c02:	f7ff ff66 	bl	8000ad2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c06:	f002 f82b 	bl	8002c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0a:	f7ff fd9b 	bl	8000744 <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   r0, =_estack
 8000c10:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c1c:	08002d10 	.word	0x08002d10
  ldr r2, =_sbss
 8000c20:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c24:	200001fc 	.word	0x200001fc

08000c28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_COMP_IRQHandler>
	...

08000c2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <HAL_Init+0x24>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_Init+0x24>)
 8000c36:	2110      	movs	r1, #16
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 f809 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c42:	f7ff ff0b 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c5e:	681c      	ldr	r4, [r3, #0]
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_InitTick+0x60>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	0019      	movs	r1, r3
 8000c66:	23fa      	movs	r3, #250	; 0xfa
 8000c68:	0098      	lsls	r0, r3, #2
 8000c6a:	f7ff fa4b 	bl	8000104 <__udivsi3>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	0019      	movs	r1, r3
 8000c72:	0020      	movs	r0, r4
 8000c74:	f7ff fa46 	bl	8000104 <__udivsi3>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 f903 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e00f      	b.n	8000ca8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d80b      	bhi.n	8000ca6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f8e0 	bl	8000e5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_InitTick+0x64>)
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b003      	add	sp, #12
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	20000068 	.word	0x20000068
 8000cb4:	20000070 	.word	0x20000070
 8000cb8:	2000006c 	.word	0x2000006c

08000cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x1c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	18d2      	adds	r2, r2, r3
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_IncTick+0x20>)
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000070 	.word	0x20000070
 8000cdc:	200001f8 	.word	0x200001f8

08000ce0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <HAL_GetTick+0x10>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	200001f8 	.word	0x200001f8

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff fff0 	bl	8000ce0 <HAL_GetTick>
 8000d00:	0003      	movs	r3, r0
 8000d02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_Delay+0x40>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	001a      	movs	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	189b      	adds	r3, r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	f7ff ffe0 	bl	8000ce0 <HAL_GetTick>
 8000d20:	0002      	movs	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b004      	add	sp, #16
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000070 	.word	0x20000070

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4c:	d828      	bhi.n	8000da0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4e:	4a2f      	ldr	r2, [pc, #188]	; (8000e0c <__NVIC_SetPriority+0xd4>)
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	33c0      	adds	r3, #192	; 0xc0
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	589b      	ldr	r3, [r3, r2]
 8000d5e:	1dfa      	adds	r2, r7, #7
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	0011      	movs	r1, r2
 8000d64:	2203      	movs	r2, #3
 8000d66:	400a      	ands	r2, r1
 8000d68:	00d2      	lsls	r2, r2, #3
 8000d6a:	21ff      	movs	r1, #255	; 0xff
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	000a      	movs	r2, r1
 8000d70:	43d2      	mvns	r2, r2
 8000d72:	401a      	ands	r2, r3
 8000d74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	019b      	lsls	r3, r3, #6
 8000d7a:	22ff      	movs	r2, #255	; 0xff
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0018      	movs	r0, r3
 8000d84:	2303      	movs	r3, #3
 8000d86:	4003      	ands	r3, r0
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8c:	481f      	ldr	r0, [pc, #124]	; (8000e0c <__NVIC_SetPriority+0xd4>)
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	430a      	orrs	r2, r1
 8000d98:	33c0      	adds	r3, #192	; 0xc0
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d9e:	e031      	b.n	8000e04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <__NVIC_SetPriority+0xd8>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	0019      	movs	r1, r3
 8000da8:	230f      	movs	r3, #15
 8000daa:	400b      	ands	r3, r1
 8000dac:	3b08      	subs	r3, #8
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3306      	adds	r3, #6
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	3304      	adds	r3, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	1dfa      	adds	r2, r7, #7
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	00d2      	lsls	r2, r2, #3
 8000dc6:	21ff      	movs	r1, #255	; 0xff
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	43d2      	mvns	r2, r2
 8000dce:	401a      	ands	r2, r3
 8000dd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	019b      	lsls	r3, r3, #6
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	401a      	ands	r2, r3
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	0018      	movs	r0, r3
 8000de0:	2303      	movs	r3, #3
 8000de2:	4003      	ands	r3, r0
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <__NVIC_SetPriority+0xd8>)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	001c      	movs	r4, r3
 8000df0:	230f      	movs	r3, #15
 8000df2:	4023      	ands	r3, r4
 8000df4:	3b08      	subs	r3, #8
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	3306      	adds	r3, #6
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	18c3      	adds	r3, r0, r3
 8000e00:	3304      	adds	r3, #4
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b003      	add	sp, #12
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <SysTick_Config+0x40>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d901      	bls.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e010      	b.n	8000e4c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <SysTick_Config+0x44>)
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	3a01      	subs	r2, #1
 8000e30:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	2301      	movs	r3, #1
 8000e34:	425b      	negs	r3, r3
 8000e36:	2103      	movs	r1, #3
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff7d 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SysTick_Config+0x44>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x44>)
 8000e46:	2207      	movs	r2, #7
 8000e48:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b002      	add	sp, #8
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	00ffffff 	.word	0x00ffffff
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	210f      	movs	r1, #15
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	1c02      	adds	r2, r0, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ffbf 	bl	8000e14 <SysTick_Config>
 8000e96:	0003      	movs	r3, r0
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eae:	e155      	b.n	800115c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4091      	lsls	r1, r2
 8000eba:	000a      	movs	r2, r1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d100      	bne.n	8000ec8 <HAL_GPIO_Init+0x28>
 8000ec6:	e146      	b.n	8001156 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d00b      	beq.n	8000ee8 <HAL_GPIO_Init+0x48>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d007      	beq.n	8000ee8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000edc:	2b11      	cmp	r3, #17
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b12      	cmp	r3, #18
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	2201      	movs	r2, #1
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0xea>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b12      	cmp	r3, #18
 8000f88:	d123      	bne.n	8000fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	58d3      	ldr	r3, [r2, r3]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	691a      	ldr	r2, [r3, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	0092      	lsls	r2, r2, #2
 8000fce:	6939      	ldr	r1, [r7, #16]
 8000fd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2203      	movs	r2, #3
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	055b      	lsls	r3, r3, #21
 800100e:	4013      	ands	r3, r2
 8001010:	d100      	bne.n	8001014 <HAL_GPIO_Init+0x174>
 8001012:	e0a0      	b.n	8001156 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001014:	4b57      	ldr	r3, [pc, #348]	; (8001174 <HAL_GPIO_Init+0x2d4>)
 8001016:	699a      	ldr	r2, [r3, #24]
 8001018:	4b56      	ldr	r3, [pc, #344]	; (8001174 <HAL_GPIO_Init+0x2d4>)
 800101a:	2101      	movs	r1, #1
 800101c:	430a      	orrs	r2, r1
 800101e:	619a      	str	r2, [r3, #24]
 8001020:	4b54      	ldr	r3, [pc, #336]	; (8001174 <HAL_GPIO_Init+0x2d4>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	2201      	movs	r2, #1
 8001026:	4013      	ands	r3, r2
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800102c:	4a52      	ldr	r2, [pc, #328]	; (8001178 <HAL_GPIO_Init+0x2d8>)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	589b      	ldr	r3, [r3, r2]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	2203      	movs	r2, #3
 800103e:	4013      	ands	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	409a      	lsls	r2, r3
 8001046:	0013      	movs	r3, r2
 8001048:	43da      	mvns	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	2390      	movs	r3, #144	; 0x90
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	429a      	cmp	r2, r3
 8001058:	d019      	beq.n	800108e <HAL_GPIO_Init+0x1ee>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a47      	ldr	r2, [pc, #284]	; (800117c <HAL_GPIO_Init+0x2dc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x1ea>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a46      	ldr	r2, [pc, #280]	; (8001180 <HAL_GPIO_Init+0x2e0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x1e6>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a45      	ldr	r2, [pc, #276]	; (8001184 <HAL_GPIO_Init+0x2e4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x1e2>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a44      	ldr	r2, [pc, #272]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x1de>
 800107a:	2304      	movs	r3, #4
 800107c:	e008      	b.n	8001090 <HAL_GPIO_Init+0x1f0>
 800107e:	2305      	movs	r3, #5
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x1f0>
 8001082:	2303      	movs	r3, #3
 8001084:	e004      	b.n	8001090 <HAL_GPIO_Init+0x1f0>
 8001086:	2302      	movs	r3, #2
 8001088:	e002      	b.n	8001090 <HAL_GPIO_Init+0x1f0>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x1f0>
 800108e:	2300      	movs	r3, #0
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	2103      	movs	r1, #3
 8001094:	400a      	ands	r2, r1
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	4093      	lsls	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a0:	4935      	ldr	r1, [pc, #212]	; (8001178 <HAL_GPIO_Init+0x2d8>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ae:	4b37      	ldr	r3, [pc, #220]	; (800118c <HAL_GPIO_Init+0x2ec>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43da      	mvns	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	4013      	ands	r3, r2
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_GPIO_Init+0x2ec>)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <HAL_GPIO_Init+0x2ec>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43da      	mvns	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	4013      	ands	r3, r2
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <HAL_GPIO_Init+0x2ec>)
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <HAL_GPIO_Init+0x2ec>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	035b      	lsls	r3, r3, #13
 800111a:	4013      	ands	r3, r2
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_GPIO_Init+0x2ec>)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_GPIO_Init+0x2ec>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43da      	mvns	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	039b      	lsls	r3, r3, #14
 8001144:	4013      	ands	r3, r2
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_GPIO_Init+0x2ec>)
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	40da      	lsrs	r2, r3
 8001164:	1e13      	subs	r3, r2, #0
 8001166:	d000      	beq.n	800116a <HAL_GPIO_Init+0x2ca>
 8001168:	e6a2      	b.n	8000eb0 <HAL_GPIO_Init+0x10>
  } 
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b006      	add	sp, #24
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000
 800117c:	48000400 	.word	0x48000400
 8001180:	48000800 	.word	0x48000800
 8001184:	48000c00 	.word	0x48000c00
 8001188:	48001000 	.word	0x48001000
 800118c:	40010400 	.word	0x40010400

08001190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	0008      	movs	r0, r1
 800119a:	0011      	movs	r1, r2
 800119c:	1cbb      	adds	r3, r7, #2
 800119e:	1c02      	adds	r2, r0, #0
 80011a0:	801a      	strh	r2, [r3, #0]
 80011a2:	1c7b      	adds	r3, r7, #1
 80011a4:	1c0a      	adds	r2, r1, #0
 80011a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a8:	1c7b      	adds	r3, r7, #1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b0:	1cbb      	adds	r3, r7, #2
 80011b2:	881a      	ldrh	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ba:	1cbb      	adds	r3, r7, #2
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	000a      	movs	r2, r1
 80011d4:	1cbb      	adds	r3, r7, #2
 80011d6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011de:	1cbb      	adds	r3, r7, #2
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	041a      	lsls	r2, r3, #16
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	1cb9      	adds	r1, r7, #2
 80011ee:	8809      	ldrh	r1, [r1, #0]
 80011f0:	400b      	ands	r3, r1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b004      	add	sp, #16
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	f000 fb76 	bl	8001900 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2201      	movs	r2, #1
 800121a:	4013      	ands	r3, r2
 800121c:	d100      	bne.n	8001220 <HAL_RCC_OscConfig+0x20>
 800121e:	e08e      	b.n	800133e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001220:	4bc5      	ldr	r3, [pc, #788]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	220c      	movs	r2, #12
 8001226:	4013      	ands	r3, r2
 8001228:	2b04      	cmp	r3, #4
 800122a:	d00e      	beq.n	800124a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800122c:	4bc2      	ldr	r3, [pc, #776]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	220c      	movs	r2, #12
 8001232:	4013      	ands	r3, r2
 8001234:	2b08      	cmp	r3, #8
 8001236:	d117      	bne.n	8001268 <HAL_RCC_OscConfig+0x68>
 8001238:	4bbf      	ldr	r3, [pc, #764]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	23c0      	movs	r3, #192	; 0xc0
 800123e:	025b      	lsls	r3, r3, #9
 8001240:	401a      	ands	r2, r3
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	025b      	lsls	r3, r3, #9
 8001246:	429a      	cmp	r2, r3
 8001248:	d10e      	bne.n	8001268 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124a:	4bbb      	ldr	r3, [pc, #748]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	029b      	lsls	r3, r3, #10
 8001252:	4013      	ands	r3, r2
 8001254:	d100      	bne.n	8001258 <HAL_RCC_OscConfig+0x58>
 8001256:	e071      	b.n	800133c <HAL_RCC_OscConfig+0x13c>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d000      	beq.n	8001262 <HAL_RCC_OscConfig+0x62>
 8001260:	e06c      	b.n	800133c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	f000 fb4c 	bl	8001900 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d107      	bne.n	8001280 <HAL_RCC_OscConfig+0x80>
 8001270:	4bb1      	ldr	r3, [pc, #708]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4bb0      	ldr	r3, [pc, #704]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0249      	lsls	r1, r1, #9
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	e02f      	b.n	80012e0 <HAL_RCC_OscConfig+0xe0>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10c      	bne.n	80012a2 <HAL_RCC_OscConfig+0xa2>
 8001288:	4bab      	ldr	r3, [pc, #684]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4baa      	ldr	r3, [pc, #680]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800128e:	49ab      	ldr	r1, [pc, #684]	; (800153c <HAL_RCC_OscConfig+0x33c>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	4ba8      	ldr	r3, [pc, #672]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4ba7      	ldr	r3, [pc, #668]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800129a:	49a9      	ldr	r1, [pc, #676]	; (8001540 <HAL_RCC_OscConfig+0x340>)
 800129c:	400a      	ands	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e01e      	b.n	80012e0 <HAL_RCC_OscConfig+0xe0>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b05      	cmp	r3, #5
 80012a8:	d10e      	bne.n	80012c8 <HAL_RCC_OscConfig+0xc8>
 80012aa:	4ba3      	ldr	r3, [pc, #652]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4ba2      	ldr	r3, [pc, #648]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	02c9      	lsls	r1, r1, #11
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	4b9f      	ldr	r3, [pc, #636]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b9e      	ldr	r3, [pc, #632]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	0249      	lsls	r1, r1, #9
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xe0>
 80012c8:	4b9b      	ldr	r3, [pc, #620]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b9a      	ldr	r3, [pc, #616]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012ce:	499b      	ldr	r1, [pc, #620]	; (800153c <HAL_RCC_OscConfig+0x33c>)
 80012d0:	400a      	ands	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	4b98      	ldr	r3, [pc, #608]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b97      	ldr	r3, [pc, #604]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012da:	4999      	ldr	r1, [pc, #612]	; (8001540 <HAL_RCC_OscConfig+0x340>)
 80012dc:	400a      	ands	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d014      	beq.n	8001312 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fcfa 	bl	8000ce0 <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f2:	f7ff fcf5 	bl	8000ce0 <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	; 0x64
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e2fd      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	4b8c      	ldr	r3, [pc, #560]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	029b      	lsls	r3, r3, #10
 800130c:	4013      	ands	r3, r2
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0xf2>
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fce5 	bl	8000ce0 <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fce0 	bl	8000ce0 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e2e8      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b82      	ldr	r3, [pc, #520]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	029b      	lsls	r3, r3, #10
 8001336:	4013      	ands	r3, r2
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x11c>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d100      	bne.n	800134a <HAL_RCC_OscConfig+0x14a>
 8001348:	e06c      	b.n	8001424 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800134a:	4b7b      	ldr	r3, [pc, #492]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	220c      	movs	r2, #12
 8001350:	4013      	ands	r3, r2
 8001352:	d00e      	beq.n	8001372 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001354:	4b78      	ldr	r3, [pc, #480]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	220c      	movs	r2, #12
 800135a:	4013      	ands	r3, r2
 800135c:	2b08      	cmp	r3, #8
 800135e:	d11f      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1a0>
 8001360:	4b75      	ldr	r3, [pc, #468]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	23c0      	movs	r3, #192	; 0xc0
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	401a      	ands	r2, r3
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	429a      	cmp	r2, r3
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b71      	ldr	r3, [pc, #452]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d005      	beq.n	8001388 <HAL_RCC_OscConfig+0x188>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e2bb      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001388:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	22f8      	movs	r2, #248	; 0xf8
 800138e:	4393      	bics	r3, r2
 8001390:	0019      	movs	r1, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00da      	lsls	r2, r3, #3
 8001398:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e041      	b.n	8001424 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d024      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b62      	ldr	r3, [pc, #392]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013ae:	2101      	movs	r1, #1
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc94 	bl	8000ce0 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fc8f 	bl	8000ce0 <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e297      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	4b59      	ldr	r3, [pc, #356]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2202      	movs	r2, #2
 80013d6:	4013      	ands	r3, r2
 80013d8:	d0f1      	beq.n	80013be <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b57      	ldr	r3, [pc, #348]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	22f8      	movs	r2, #248	; 0xf8
 80013e0:	4393      	bics	r3, r2
 80013e2:	0019      	movs	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	00da      	lsls	r2, r3, #3
 80013ea:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013ec:	430a      	orrs	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e018      	b.n	8001424 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f2:	4b51      	ldr	r3, [pc, #324]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013f8:	2101      	movs	r1, #1
 80013fa:	438a      	bics	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fc6f 	bl	8000ce0 <HAL_GetTick>
 8001402:	0003      	movs	r3, r0
 8001404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fc6a 	bl	8000ce0 <HAL_GetTick>
 800140c:	0002      	movs	r2, r0
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e272      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2202      	movs	r2, #2
 8001420:	4013      	ands	r3, r2
 8001422:	d1f1      	bne.n	8001408 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2208      	movs	r2, #8
 800142a:	4013      	ands	r3, r2
 800142c:	d036      	beq.n	800149c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d019      	beq.n	800146a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b40      	ldr	r3, [pc, #256]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143a:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800143c:	2101      	movs	r1, #1
 800143e:	430a      	orrs	r2, r1
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fc4d 	bl	8000ce0 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fc48 	bl	8000ce0 <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e250      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	2202      	movs	r2, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d0f1      	beq.n	800144c <HAL_RCC_OscConfig+0x24c>
 8001468:	e018      	b.n	800149c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800146c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146e:	4b32      	ldr	r3, [pc, #200]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001470:	2101      	movs	r1, #1
 8001472:	438a      	bics	r2, r1
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fc33 	bl	8000ce0 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fc2e 	bl	8000ce0 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e236      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	d1f1      	bne.n	8001480 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2204      	movs	r2, #4
 80014a2:	4013      	ands	r3, r2
 80014a4:	d100      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2a8>
 80014a6:	e0b5      	b.n	8001614 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a8:	231f      	movs	r3, #31
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014b2:	69da      	ldr	r2, [r3, #28]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	055b      	lsls	r3, r3, #21
 80014b8:	4013      	ands	r3, r2
 80014ba:	d111      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014be:	69da      	ldr	r2, [r3, #28]
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	0549      	lsls	r1, r1, #21
 80014c6:	430a      	orrs	r2, r1
 80014c8:	61da      	str	r2, [r3, #28]
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	055b      	lsls	r3, r3, #21
 80014d2:	4013      	ands	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014d8:	231f      	movs	r3, #31
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_RCC_OscConfig+0x344>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4013      	ands	r3, r2
 80014ea:	d11a      	bne.n	8001522 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_RCC_OscConfig+0x344>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_RCC_OscConfig+0x344>)
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	0049      	lsls	r1, r1, #1
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fbf1 	bl	8000ce0 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001504:	f7ff fbec 	bl	8000ce0 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1f4      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x344>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4013      	ands	r3, r2
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d10e      	bne.n	8001548 <HAL_RCC_OscConfig+0x348>
 800152a:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800152c:	6a1a      	ldr	r2, [r3, #32]
 800152e:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001530:	2101      	movs	r1, #1
 8001532:	430a      	orrs	r2, r1
 8001534:	621a      	str	r2, [r3, #32]
 8001536:	e035      	b.n	80015a4 <HAL_RCC_OscConfig+0x3a4>
 8001538:	40021000 	.word	0x40021000
 800153c:	fffeffff 	.word	0xfffeffff
 8001540:	fffbffff 	.word	0xfffbffff
 8001544:	40007000 	.word	0x40007000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x36a>
 8001550:	4bca      	ldr	r3, [pc, #808]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001552:	6a1a      	ldr	r2, [r3, #32]
 8001554:	4bc9      	ldr	r3, [pc, #804]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001556:	2101      	movs	r1, #1
 8001558:	438a      	bics	r2, r1
 800155a:	621a      	str	r2, [r3, #32]
 800155c:	4bc7      	ldr	r3, [pc, #796]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	4bc6      	ldr	r3, [pc, #792]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001562:	2104      	movs	r1, #4
 8001564:	438a      	bics	r2, r1
 8001566:	621a      	str	r2, [r3, #32]
 8001568:	e01c      	b.n	80015a4 <HAL_RCC_OscConfig+0x3a4>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0x38c>
 8001572:	4bc2      	ldr	r3, [pc, #776]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001574:	6a1a      	ldr	r2, [r3, #32]
 8001576:	4bc1      	ldr	r3, [pc, #772]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001578:	2104      	movs	r1, #4
 800157a:	430a      	orrs	r2, r1
 800157c:	621a      	str	r2, [r3, #32]
 800157e:	4bbf      	ldr	r3, [pc, #764]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001580:	6a1a      	ldr	r2, [r3, #32]
 8001582:	4bbe      	ldr	r3, [pc, #760]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001584:	2101      	movs	r1, #1
 8001586:	430a      	orrs	r2, r1
 8001588:	621a      	str	r2, [r3, #32]
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0x3a4>
 800158c:	4bbb      	ldr	r3, [pc, #748]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	4bba      	ldr	r3, [pc, #744]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001592:	2101      	movs	r1, #1
 8001594:	438a      	bics	r2, r1
 8001596:	621a      	str	r2, [r3, #32]
 8001598:	4bb8      	ldr	r3, [pc, #736]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800159a:	6a1a      	ldr	r2, [r3, #32]
 800159c:	4bb7      	ldr	r3, [pc, #732]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800159e:	2104      	movs	r1, #4
 80015a0:	438a      	bics	r2, r1
 80015a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d014      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb98 	bl	8000ce0 <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b4:	e009      	b.n	80015ca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff fb93 	bl	8000ce0 <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	4aaf      	ldr	r2, [pc, #700]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e19a      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ca:	4bac      	ldr	r3, [pc, #688]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	2202      	movs	r2, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3b6>
 80015d4:	e013      	b.n	80015fe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fb83 	bl	8000ce0 <HAL_GetTick>
 80015da:	0003      	movs	r3, r0
 80015dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015de:	e009      	b.n	80015f4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fb7e 	bl	8000ce0 <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	4aa5      	ldr	r2, [pc, #660]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e185      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	4ba1      	ldr	r3, [pc, #644]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015fe:	231f      	movs	r3, #31
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001608:	4b9c      	ldr	r3, [pc, #624]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800160a:	69da      	ldr	r2, [r3, #28]
 800160c:	4b9b      	ldr	r3, [pc, #620]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800160e:	499d      	ldr	r1, [pc, #628]	; (8001884 <HAL_RCC_OscConfig+0x684>)
 8001610:	400a      	ands	r2, r1
 8001612:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2210      	movs	r2, #16
 800161a:	4013      	ands	r3, r2
 800161c:	d063      	beq.n	80016e6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d12a      	bne.n	800167c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001626:	4b95      	ldr	r3, [pc, #596]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162a:	4b94      	ldr	r3, [pc, #592]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800162c:	2104      	movs	r1, #4
 800162e:	430a      	orrs	r2, r1
 8001630:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001632:	4b92      	ldr	r3, [pc, #584]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001636:	4b91      	ldr	r3, [pc, #580]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001638:	2101      	movs	r1, #1
 800163a:	430a      	orrs	r2, r1
 800163c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fb4f 	bl	8000ce0 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001648:	f7ff fb4a 	bl	8000ce0 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e152      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800165a:	4b88      	ldr	r3, [pc, #544]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165e:	2202      	movs	r2, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d0f1      	beq.n	8001648 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001664:	4b85      	ldr	r3, [pc, #532]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001668:	22f8      	movs	r2, #248	; 0xf8
 800166a:	4393      	bics	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	00da      	lsls	r2, r3, #3
 8001674:	4b81      	ldr	r3, [pc, #516]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001676:	430a      	orrs	r2, r1
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
 800167a:	e034      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	3305      	adds	r3, #5
 8001682:	d111      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001684:	4b7d      	ldr	r3, [pc, #500]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001688:	4b7c      	ldr	r3, [pc, #496]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800168a:	2104      	movs	r1, #4
 800168c:	438a      	bics	r2, r1
 800168e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001690:	4b7a      	ldr	r3, [pc, #488]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001694:	22f8      	movs	r2, #248	; 0xf8
 8001696:	4393      	bics	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	00da      	lsls	r2, r3, #3
 80016a0:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
 80016a6:	e01e      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016a8:	4b74      	ldr	r3, [pc, #464]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80016aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ac:	4b73      	ldr	r3, [pc, #460]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80016ae:	2104      	movs	r1, #4
 80016b0:	430a      	orrs	r2, r1
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016b4:	4b71      	ldr	r3, [pc, #452]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80016b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b8:	4b70      	ldr	r3, [pc, #448]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	438a      	bics	r2, r1
 80016be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fb0e 	bl	8000ce0 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016ca:	f7ff fb09 	bl	8000ce0 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e111      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016dc:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80016de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d1f1      	bne.n	80016ca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2220      	movs	r2, #32
 80016ec:	4013      	ands	r3, r2
 80016ee:	d05c      	beq.n	80017aa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016f0:	4b62      	ldr	r3, [pc, #392]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	220c      	movs	r2, #12
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d00e      	beq.n	800171a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016fc:	4b5f      	ldr	r3, [pc, #380]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	220c      	movs	r2, #12
 8001702:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001704:	2b08      	cmp	r3, #8
 8001706:	d114      	bne.n	8001732 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001708:	4b5c      	ldr	r3, [pc, #368]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	23c0      	movs	r3, #192	; 0xc0
 800170e:	025b      	lsls	r3, r3, #9
 8001710:	401a      	ands	r2, r3
 8001712:	23c0      	movs	r3, #192	; 0xc0
 8001714:	025b      	lsls	r3, r3, #9
 8001716:	429a      	cmp	r2, r3
 8001718:	d10b      	bne.n	8001732 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800171a:	4b58      	ldr	r3, [pc, #352]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800171c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	025b      	lsls	r3, r3, #9
 8001722:	4013      	ands	r3, r2
 8001724:	d040      	beq.n	80017a8 <HAL_RCC_OscConfig+0x5a8>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d03c      	beq.n	80017a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0e6      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01b      	beq.n	8001772 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800173c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173e:	4b4f      	ldr	r3, [pc, #316]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	0249      	lsls	r1, r1, #9
 8001744:	430a      	orrs	r2, r1
 8001746:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff faca 	bl	8000ce0 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001752:	f7ff fac5 	bl	8000ce0 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e0cd      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001764:	4b45      	ldr	r3, [pc, #276]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	025b      	lsls	r3, r3, #9
 800176c:	4013      	ands	r3, r2
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x552>
 8001770:	e01b      	b.n	80017aa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001772:	4b42      	ldr	r3, [pc, #264]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001778:	4943      	ldr	r1, [pc, #268]	; (8001888 <HAL_RCC_OscConfig+0x688>)
 800177a:	400a      	ands	r2, r1
 800177c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff faaf 	bl	8000ce0 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001788:	f7ff faaa 	bl	8000ce0 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0b2      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800179a:	4b38      	ldr	r3, [pc, #224]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800179c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	4013      	ands	r3, r2
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x588>
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017a8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d100      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5b4>
 80017b2:	e0a4      	b.n	80018fe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b4:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	220c      	movs	r2, #12
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d100      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5c2>
 80017c0:	e078      	b.n	80018b4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d14c      	bne.n	8001864 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b2c      	ldr	r3, [pc, #176]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80017d0:	492e      	ldr	r1, [pc, #184]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 80017d2:	400a      	ands	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff fa83 	bl	8000ce0 <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fa7e 	bl	8000ce0 <HAL_GetTick>
 80017e4:	0002      	movs	r2, r0
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e086      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	049b      	lsls	r3, r3, #18
 80017fa:	4013      	ands	r3, r2
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	220f      	movs	r2, #15
 8001804:	4393      	bics	r3, r2
 8001806:	0019      	movs	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800180e:	430a      	orrs	r2, r1
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_RCC_OscConfig+0x690>)
 8001818:	4013      	ands	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	431a      	orrs	r2, r3
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	0449      	lsls	r1, r1, #17
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fa51 	bl	8000ce0 <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fa4c 	bl	8000ce0 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e054      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	049b      	lsls	r3, r3, #18
 800185e:	4013      	ands	r3, r2
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x644>
 8001862:	e04c      	b.n	80018fe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 800186c:	400a      	ands	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fa36 	bl	8000ce0 <HAL_GetTick>
 8001874:	0003      	movs	r3, r0
 8001876:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001878:	e015      	b.n	80018a6 <HAL_RCC_OscConfig+0x6a6>
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	40021000 	.word	0x40021000
 8001880:	00001388 	.word	0x00001388
 8001884:	efffffff 	.word	0xefffffff
 8001888:	fffeffff 	.word	0xfffeffff
 800188c:	feffffff 	.word	0xfeffffff
 8001890:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff fa24 	bl	8000ce0 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e02c      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_RCC_OscConfig+0x708>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	049b      	lsls	r3, r3, #18
 80018ae:	4013      	ands	r3, r2
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x694>
 80018b2:	e024      	b.n	80018fe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e01f      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_RCC_OscConfig+0x708>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_RCC_OscConfig+0x708>)
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	23c0      	movs	r3, #192	; 0xc0
 80018d0:	025b      	lsls	r3, r3, #9
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	429a      	cmp	r2, r3
 80018da:	d10e      	bne.n	80018fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	220f      	movs	r2, #15
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	23f0      	movs	r3, #240	; 0xf0
 80018ee:	039b      	lsls	r3, r3, #14
 80018f0:	401a      	ands	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b008      	add	sp, #32
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000

0800190c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0bf      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_RCC_ClockConfig+0x19c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2201      	movs	r2, #1
 8001926:	4013      	ands	r3, r2
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d911      	bls.n	8001952 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <HAL_RCC_ClockConfig+0x19c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2201      	movs	r2, #1
 8001934:	4393      	bics	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_ClockConfig+0x19c>)
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001940:	4b59      	ldr	r3, [pc, #356]	; (8001aa8 <HAL_RCC_ClockConfig+0x19c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	4013      	ands	r3, r2
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d001      	beq.n	8001952 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0a6      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
 800195a:	d015      	beq.n	8001988 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2204      	movs	r2, #4
 8001962:	4013      	ands	r3, r2
 8001964:	d006      	beq.n	8001974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001966:	4b51      	ldr	r3, [pc, #324]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	4b50      	ldr	r3, [pc, #320]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 800196c:	21e0      	movs	r1, #224	; 0xe0
 800196e:	00c9      	lsls	r1, r1, #3
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b4d      	ldr	r3, [pc, #308]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	22f0      	movs	r2, #240	; 0xf0
 800197a:	4393      	bics	r3, r2
 800197c:	0019      	movs	r1, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 8001984:	430a      	orrs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	d04c      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b44      	ldr	r3, [pc, #272]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	029b      	lsls	r3, r3, #10
 80019a2:	4013      	ands	r3, r2
 80019a4:	d120      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07a      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	049b      	lsls	r3, r3, #18
 80019ba:	4013      	ands	r3, r2
 80019bc:	d114      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06e      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 80019cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	025b      	lsls	r3, r3, #9
 80019d2:	4013      	ands	r3, r2
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e062      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e05b      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e8:	4b30      	ldr	r3, [pc, #192]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	4393      	bics	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 80019f8:	430a      	orrs	r2, r1
 80019fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7ff f970 	bl	8000ce0 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a06:	f7ff f96b 	bl	8000ce0 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_RCC_ClockConfig+0x1a4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e042      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	220c      	movs	r2, #12
 8001a20:	401a      	ands	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1ec      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_RCC_ClockConfig+0x19c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d211      	bcs.n	8001a5e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_RCC_ClockConfig+0x19c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4393      	bics	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_RCC_ClockConfig+0x19c>)
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_RCC_ClockConfig+0x19c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e020      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2204      	movs	r2, #4
 8001a64:	4013      	ands	r3, r2
 8001a66:	d009      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <HAL_RCC_ClockConfig+0x1a8>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a7c:	f000 f820 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001a80:	0001      	movs	r1, r0
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x1a0>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	220f      	movs	r2, #15
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_RCC_ClockConfig+0x1ac>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	000a      	movs	r2, r1
 8001a92:	40da      	lsrs	r2, r3
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_ClockConfig+0x1b0>)
 8001a96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff f8db 	bl	8000c54 <HAL_InitTick>
  
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b004      	add	sp, #16
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	00001388 	.word	0x00001388
 8001ab4:	fffff8ff 	.word	0xfffff8ff
 8001ab8:	08002cf0 	.word	0x08002cf0
 8001abc:	20000068 	.word	0x20000068

08001ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b08f      	sub	sp, #60	; 0x3c
 8001ac4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ac6:	2314      	movs	r3, #20
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001acc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ace:	c313      	stmia	r3!, {r0, r1, r4}
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	4a35      	ldr	r2, [pc, #212]	; (8001bac <HAL_RCC_GetSysClockFreq+0xec>)
 8001ad8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ada:	c313      	stmia	r3!, {r0, r1, r4}
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	220c      	movs	r2, #12
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d006      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x52>
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d043      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0xd0>
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d144      	bne.n	8001b96 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b10:	e044      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	220f      	movs	r2, #15
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2214      	movs	r2, #20
 8001b1c:	18ba      	adds	r2, r7, r2
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	220f      	movs	r2, #15
 8001b28:	4013      	ands	r3, r2
 8001b2a:	1d3a      	adds	r2, r7, #4
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b32:	23c0      	movs	r3, #192	; 0xc0
 8001b34:	025b      	lsls	r3, r3, #9
 8001b36:	401a      	ands	r2, r3
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	025b      	lsls	r3, r3, #9
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d109      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b42:	481c      	ldr	r0, [pc, #112]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b44:	f7fe fade 	bl	8000104 <__udivsi3>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	4353      	muls	r3, r2
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
 8001b52:	e01a      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b56:	23c0      	movs	r3, #192	; 0xc0
 8001b58:	025b      	lsls	r3, r3, #9
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d109      	bne.n	8001b78 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b68:	f7fe facc 	bl	8000104 <__udivsi3>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	001a      	movs	r2, r3
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	4353      	muls	r3, r2
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b7a:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b7c:	f7fe fac2 	bl	8000104 <__udivsi3>
 8001b80:	0003      	movs	r3, r0
 8001b82:	001a      	movs	r2, r3
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	4353      	muls	r3, r2
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b8e:	e005      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b94:	e002      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b00f      	add	sp, #60	; 0x3c
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	08002cd0 	.word	0x08002cd0
 8001bac:	08002ce0 	.word	0x08002ce0
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	007a1200 	.word	0x007a1200
 8001bb8:	02dc6c00 	.word	0x02dc6c00

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	20000068 	.word	0x20000068

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bd4:	f7ff fff2 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bd8:	0001      	movs	r1, r0
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	2207      	movs	r2, #7
 8001be2:	4013      	ands	r3, r2
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	40d9      	lsrs	r1, r3
 8001bea:	000b      	movs	r3, r1
}    
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08002d00 	.word	0x08002d00

08001bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	4013      	ands	r3, r2
 8001c16:	d100      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c18:	e08f      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2317      	movs	r3, #23
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c22:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	055b      	lsls	r3, r3, #21
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d111      	bne.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b6c      	ldr	r3, [pc, #432]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	4b6b      	ldr	r3, [pc, #428]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	0549      	lsls	r1, r1, #21
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	61da      	str	r2, [r3, #28]
 8001c3c:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	055b      	lsls	r3, r3, #21
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4a:	2317      	movs	r3, #23
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d11a      	bne.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5e:	4b61      	ldr	r3, [pc, #388]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b60      	ldr	r3, [pc, #384]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0049      	lsls	r1, r1, #1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f838 	bl	8000ce0 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff f833 	bl	8000ce0 <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d901      	bls.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0a6      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c94:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c96:	6a1a      	ldr	r2, [r3, #32]
 8001c98:	23c0      	movs	r3, #192	; 0xc0
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d034      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	23c0      	movs	r3, #192	; 0xc0
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d02c      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cb6:	4b4a      	ldr	r3, [pc, #296]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a4b      	ldr	r2, [pc, #300]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cc0:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cc2:	6a1a      	ldr	r2, [r3, #32]
 8001cc4:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	0249      	lsls	r1, r1, #9
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cce:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cd0:	6a1a      	ldr	r2, [r3, #32]
 8001cd2:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cd4:	4945      	ldr	r1, [pc, #276]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7fe fffa 	bl	8000ce0 <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	e009      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7fe fff5 	bl	8000ce0 <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e067      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d06:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d24:	2317      	movs	r3, #23
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d105      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d34:	492f      	ldr	r1, [pc, #188]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d009      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	2203      	movs	r2, #3
 8001d4a:	4393      	bics	r3, r2
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d54:	430a      	orrs	r2, r1
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d009      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d72:	430a      	orrs	r2, r1
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	02db      	lsls	r3, r3, #11
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d009      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d009      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	2210      	movs	r2, #16
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d009      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	2240      	movs	r2, #64	; 0x40
 8001dc6:	4393      	bics	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b006      	add	sp, #24
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40007000 	.word	0x40007000
 8001de8:	fffffcff 	.word	0xfffffcff
 8001dec:	fffeffff 	.word	0xfffeffff
 8001df0:	00001388 	.word	0x00001388
 8001df4:	efffffff 	.word	0xefffffff
 8001df8:	fffcffff 	.word	0xfffcffff
 8001dfc:	fff3ffff 	.word	0xfff3ffff

08001e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0a8      	b.n	8001f64 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	2382      	movs	r3, #130	; 0x82
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d009      	beq.n	8001e3a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	61da      	str	r2, [r3, #28]
 8001e2c:	e005      	b.n	8001e3a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	225d      	movs	r2, #93	; 0x5d
 8001e44:	5c9b      	ldrb	r3, [r3, r2]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d107      	bne.n	8001e5c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	225c      	movs	r2, #92	; 0x5c
 8001e50:	2100      	movs	r1, #0
 8001e52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f7fe fdb4 	bl	80009c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	225d      	movs	r2, #93	; 0x5d
 8001e60:	2102      	movs	r1, #2
 8001e62:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2140      	movs	r1, #64	; 0x40
 8001e70:	438a      	bics	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	23e0      	movs	r3, #224	; 0xe0
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d902      	bls.n	8001e86 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e002      	b.n	8001e8c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	015b      	lsls	r3, r3, #5
 8001e8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	23f0      	movs	r3, #240	; 0xf0
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d008      	beq.n	8001eaa <HAL_SPI_Init+0xaa>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	23e0      	movs	r3, #224	; 0xe0
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d002      	beq.n	8001eaa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	2382      	movs	r3, #130	; 0x82
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6899      	ldr	r1, [r3, #8]
 8001eb8:	2384      	movs	r3, #132	; 0x84
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	400b      	ands	r3, r1
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6999      	ldr	r1, [r3, #24]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	400b      	ands	r3, r1
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2138      	movs	r1, #56	; 0x38
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	0011      	movs	r1, r2
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	019b      	lsls	r3, r3, #6
 8001efe:	401a      	ands	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	2204      	movs	r2, #4
 8001f10:	401a      	ands	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	2110      	movs	r1, #16
 8001f18:	400b      	ands	r3, r1
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f20:	2108      	movs	r1, #8
 8001f22:	400b      	ands	r3, r1
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68d9      	ldr	r1, [r3, #12]
 8001f2a:	23f0      	movs	r3, #240	; 0xf0
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	400b      	ands	r3, r1
 8001f30:	431a      	orrs	r2, r3
 8001f32:	0011      	movs	r1, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	015b      	lsls	r3, r3, #5
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4907      	ldr	r1, [pc, #28]	; (8001f6c <HAL_SPI_Init+0x16c>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	225d      	movs	r2, #93	; 0x5d
 8001f5e:	2101      	movs	r1, #1
 8001f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b004      	add	sp, #16
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	fffff7ff 	.word	0xfffff7ff

08001f70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	1dbb      	adds	r3, r7, #6
 8001f7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f80:	231f      	movs	r3, #31
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	225c      	movs	r2, #92	; 0x5c
 8001f8c:	5c9b      	ldrb	r3, [r3, r2]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_SPI_Transmit+0x26>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e140      	b.n	8002218 <HAL_SPI_Transmit+0x2a8>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	225c      	movs	r2, #92	; 0x5c
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f9e:	f7fe fe9f 	bl	8000ce0 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001fa6:	2316      	movs	r3, #22
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	1dba      	adds	r2, r7, #6
 8001fac:	8812      	ldrh	r2, [r2, #0]
 8001fae:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	225d      	movs	r2, #93	; 0x5d
 8001fb4:	5c9b      	ldrb	r3, [r3, r2]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d004      	beq.n	8001fc6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001fbc:	231f      	movs	r3, #31
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fc4:	e11d      	b.n	8002202 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_SPI_Transmit+0x64>
 8001fcc:	1dbb      	adds	r3, r7, #6
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d104      	bne.n	8001fde <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001fd4:	231f      	movs	r3, #31
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fdc:	e111      	b.n	8002202 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	225d      	movs	r2, #93	; 0x5d
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1dba      	adds	r2, r7, #6
 8001ff6:	8812      	ldrh	r2, [r2, #0]
 8001ff8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1dba      	adds	r2, r7, #6
 8001ffe:	8812      	ldrh	r2, [r2, #0]
 8002000:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2244      	movs	r2, #68	; 0x44
 800200c:	2100      	movs	r1, #0
 800200e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2246      	movs	r2, #70	; 0x46
 8002014:	2100      	movs	r1, #0
 8002016:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	429a      	cmp	r2, r3
 800202e:	d110      	bne.n	8002052 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	438a      	bics	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	01c9      	lsls	r1, r1, #7
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2240      	movs	r2, #64	; 0x40
 800205a:	4013      	ands	r3, r2
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d007      	beq.n	8002070 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	23e0      	movs	r3, #224	; 0xe0
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	429a      	cmp	r2, r3
 800207a:	d94e      	bls.n	800211a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <HAL_SPI_Transmit+0x11e>
 8002084:	2316      	movs	r3, #22
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d13f      	bne.n	800210e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	881a      	ldrh	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	1c9a      	adds	r2, r3, #2
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020b2:	e02c      	b.n	800210e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2202      	movs	r2, #2
 80020bc:	4013      	ands	r3, r2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d112      	bne.n	80020e8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	881a      	ldrh	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	1c9a      	adds	r2, r3, #2
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020e6:	e012      	b.n	800210e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020e8:	f7fe fdfa 	bl	8000ce0 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d802      	bhi.n	80020fe <HAL_SPI_Transmit+0x18e>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	d102      	bne.n	8002104 <HAL_SPI_Transmit+0x194>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d104      	bne.n	800210e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002104:	231f      	movs	r3, #31
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2203      	movs	r2, #3
 800210a:	701a      	strb	r2, [r3, #0]
          goto error;
 800210c:	e079      	b.n	8002202 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1cd      	bne.n	80020b4 <HAL_SPI_Transmit+0x144>
 8002118:	e04f      	b.n	80021ba <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_SPI_Transmit+0x1bc>
 8002122:	2316      	movs	r3, #22
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d141      	bne.n	80021b0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002152:	e02d      	b.n	80021b0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2202      	movs	r2, #2
 800215c:	4013      	ands	r3, r2
 800215e:	2b02      	cmp	r3, #2
 8002160:	d113      	bne.n	800218a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	330c      	adds	r3, #12
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002188:	e012      	b.n	80021b0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800218a:	f7fe fda9 	bl	8000ce0 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d802      	bhi.n	80021a0 <HAL_SPI_Transmit+0x230>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	d102      	bne.n	80021a6 <HAL_SPI_Transmit+0x236>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d104      	bne.n	80021b0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80021a6:	231f      	movs	r3, #31
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2203      	movs	r2, #3
 80021ac:	701a      	strb	r2, [r3, #0]
          goto error;
 80021ae:	e028      	b.n	8002202 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1cc      	bne.n	8002154 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 f951 	bl	8002468 <SPI_EndRxTxTransaction>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10a      	bne.n	80021ee <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80021f6:	231f      	movs	r3, #31
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e000      	b.n	8002202 <HAL_SPI_Transmit+0x292>
  }

error:
 8002200:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	225d      	movs	r2, #93	; 0x5d
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	225c      	movs	r2, #92	; 0x5c
 800220e:	2100      	movs	r1, #0
 8002210:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002212:	231f      	movs	r3, #31
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	781b      	ldrb	r3, [r3, #0]
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b008      	add	sp, #32
 800221e:	bd80      	pop	{r7, pc}

08002220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002230:	f7fe fd56 	bl	8000ce0 <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	18d3      	adds	r3, r2, r3
 800223e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002240:	f7fe fd4e 	bl	8000ce0 <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002248:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	015b      	lsls	r3, r3, #5
 800224e:	0d1b      	lsrs	r3, r3, #20
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	4353      	muls	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002256:	e058      	b.n	800230a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	d055      	beq.n	800230a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800225e:	f7fe fd3f 	bl	8000ce0 <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	429a      	cmp	r2, r3
 800226c:	d902      	bls.n	8002274 <SPI_WaitFlagStateUntilTimeout+0x54>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d142      	bne.n	80022fa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	21e0      	movs	r1, #224	; 0xe0
 8002280:	438a      	bics	r2, r1
 8002282:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	2382      	movs	r3, #130	; 0x82
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	429a      	cmp	r2, r3
 800228e:	d113      	bne.n	80022b8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	429a      	cmp	r2, r3
 800229a:	d005      	beq.n	80022a8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d107      	bne.n	80022b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2140      	movs	r1, #64	; 0x40
 80022b4:	438a      	bics	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	019b      	lsls	r3, r3, #6
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d110      	bne.n	80022e6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	491a      	ldr	r1, [pc, #104]	; (8002338 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80022d0:	400a      	ands	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	0189      	lsls	r1, r1, #6
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	225d      	movs	r2, #93	; 0x5d
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	225c      	movs	r2, #92	; 0x5c
 80022f2:	2100      	movs	r1, #0
 80022f4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e017      	b.n	800232a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3b01      	subs	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	4013      	ands	r3, r2
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	425a      	negs	r2, r3
 800231a:	4153      	adcs	r3, r2
 800231c:	b2db      	uxtb	r3, r3
 800231e:	001a      	movs	r2, r3
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d197      	bne.n	8002258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b008      	add	sp, #32
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	20000068 	.word	0x20000068
 8002338:	ffffdfff 	.word	0xffffdfff

0800233c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800234a:	f7fe fcc9 	bl	8000ce0 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	18d3      	adds	r3, r2, r3
 8002358:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800235a:	f7fe fcc1 	bl	8000ce0 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	0013      	movs	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	189b      	adds	r3, r3, r2
 800236c:	00da      	lsls	r2, r3, #3
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	0d1b      	lsrs	r3, r3, #20
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	4353      	muls	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002378:	e064      	b.n	8002444 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	23c0      	movs	r3, #192	; 0xc0
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	429a      	cmp	r2, r3
 8002382:	d106      	bne.n	8002392 <SPI_WaitFifoStateUntilTimeout+0x56>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	d055      	beq.n	8002444 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002398:	f7fe fca2 	bl	8000ce0 <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d902      	bls.n	80023ae <SPI_WaitFifoStateUntilTimeout+0x72>
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d142      	bne.n	8002434 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	21e0      	movs	r1, #224	; 0xe0
 80023ba:	438a      	bics	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	2382      	movs	r3, #130	; 0x82
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d113      	bne.n	80023f2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d005      	beq.n	80023e2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	429a      	cmp	r2, r3
 80023e0:	d107      	bne.n	80023f2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2140      	movs	r1, #64	; 0x40
 80023ee:	438a      	bics	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d110      	bne.n	8002420 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4916      	ldr	r1, [pc, #88]	; (8002464 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800240a:	400a      	ands	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	0189      	lsls	r1, r1, #6
 800241c:	430a      	orrs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	225d      	movs	r2, #93	; 0x5d
 8002424:	2101      	movs	r1, #1
 8002426:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	225c      	movs	r2, #92	; 0x5c
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e010      	b.n	8002456 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3b01      	subs	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	429a      	cmp	r2, r3
 8002452:	d192      	bne.n	800237a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b008      	add	sp, #32
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	20000068 	.word	0x20000068
 8002464:	ffffdfff 	.word	0xffffdfff

08002468 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	23c0      	movs	r3, #192	; 0xc0
 8002478:	0159      	lsls	r1, r3, #5
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	0013      	movs	r3, r2
 8002482:	2200      	movs	r2, #0
 8002484:	f7ff ff5a 	bl	800233c <SPI_WaitFifoStateUntilTimeout>
 8002488:	1e03      	subs	r3, r0, #0
 800248a:	d007      	beq.n	800249c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002490:	2220      	movs	r2, #32
 8002492:	431a      	orrs	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e027      	b.n	80024ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	0013      	movs	r3, r2
 80024a6:	2200      	movs	r2, #0
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	f7ff feb9 	bl	8002220 <SPI_WaitFlagStateUntilTimeout>
 80024ae:	1e03      	subs	r3, r0, #0
 80024b0:	d007      	beq.n	80024c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	2220      	movs	r2, #32
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e014      	b.n	80024ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	23c0      	movs	r3, #192	; 0xc0
 80024c6:	00d9      	lsls	r1, r3, #3
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	0013      	movs	r3, r2
 80024d0:	2200      	movs	r2, #0
 80024d2:	f7ff ff33 	bl	800233c <SPI_WaitFifoStateUntilTimeout>
 80024d6:	1e03      	subs	r3, r0, #0
 80024d8:	d007      	beq.n	80024ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	2220      	movs	r2, #32
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e000      	b.n	80024ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e044      	b.n	8002590 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2274      	movs	r2, #116	; 0x74
 8002512:	2100      	movs	r1, #0
 8002514:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f7fe fb0f 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2224      	movs	r2, #36	; 0x24
 8002522:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2101      	movs	r1, #1
 8002530:	438a      	bics	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	0018      	movs	r0, r3
 8002538:	f000 f830 	bl	800259c <UART_SetConfig>
 800253c:	0003      	movs	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e024      	b.n	8002590 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	0018      	movs	r0, r3
 8002552:	f000 fa09 	bl	8002968 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	490d      	ldr	r1, [pc, #52]	; (8002598 <HAL_UART_Init+0xa4>)
 8002562:	400a      	ands	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	212a      	movs	r1, #42	; 0x2a
 8002572:	438a      	bics	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	0018      	movs	r0, r3
 800258a:	f000 faa1 	bl	8002ad0 <UART_CheckIdleState>
 800258e:	0003      	movs	r3, r0
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}
 8002598:	ffffb7ff 	.word	0xffffb7ff

0800259c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025a4:	231e      	movs	r3, #30
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4abd      	ldr	r2, [pc, #756]	; (80028c0 <UART_SetConfig+0x324>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4ab8      	ldr	r2, [pc, #736]	; (80028c4 <UART_SetConfig+0x328>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4aaf      	ldr	r2, [pc, #700]	; (80028c8 <UART_SetConfig+0x32c>)
 800260a:	4013      	ands	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	430a      	orrs	r2, r1
 8002616:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4aab      	ldr	r2, [pc, #684]	; (80028cc <UART_SetConfig+0x330>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d125      	bne.n	800266e <UART_SetConfig+0xd2>
 8002622:	4bab      	ldr	r3, [pc, #684]	; (80028d0 <UART_SetConfig+0x334>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	2203      	movs	r2, #3
 8002628:	4013      	ands	r3, r2
 800262a:	2b01      	cmp	r3, #1
 800262c:	d00f      	beq.n	800264e <UART_SetConfig+0xb2>
 800262e:	d304      	bcc.n	800263a <UART_SetConfig+0x9e>
 8002630:	2b02      	cmp	r3, #2
 8002632:	d011      	beq.n	8002658 <UART_SetConfig+0xbc>
 8002634:	2b03      	cmp	r3, #3
 8002636:	d005      	beq.n	8002644 <UART_SetConfig+0xa8>
 8002638:	e013      	b.n	8002662 <UART_SetConfig+0xc6>
 800263a:	231f      	movs	r3, #31
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e0ba      	b.n	80027ba <UART_SetConfig+0x21e>
 8002644:	231f      	movs	r3, #31
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2202      	movs	r2, #2
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e0b5      	b.n	80027ba <UART_SetConfig+0x21e>
 800264e:	231f      	movs	r3, #31
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	2204      	movs	r2, #4
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e0b0      	b.n	80027ba <UART_SetConfig+0x21e>
 8002658:	231f      	movs	r3, #31
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2208      	movs	r2, #8
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e0ab      	b.n	80027ba <UART_SetConfig+0x21e>
 8002662:	231f      	movs	r3, #31
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2210      	movs	r2, #16
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	e0a5      	b.n	80027ba <UART_SetConfig+0x21e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a98      	ldr	r2, [pc, #608]	; (80028d4 <UART_SetConfig+0x338>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d132      	bne.n	80026de <UART_SetConfig+0x142>
 8002678:	4b95      	ldr	r3, [pc, #596]	; (80028d0 <UART_SetConfig+0x334>)
 800267a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267c:	23c0      	movs	r3, #192	; 0xc0
 800267e:	029b      	lsls	r3, r3, #10
 8002680:	4013      	ands	r3, r2
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	0252      	lsls	r2, r2, #9
 8002686:	4293      	cmp	r3, r2
 8002688:	d019      	beq.n	80026be <UART_SetConfig+0x122>
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	0252      	lsls	r2, r2, #9
 800268e:	4293      	cmp	r3, r2
 8002690:	d802      	bhi.n	8002698 <UART_SetConfig+0xfc>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <UART_SetConfig+0x10e>
 8002696:	e01c      	b.n	80026d2 <UART_SetConfig+0x136>
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	0292      	lsls	r2, r2, #10
 800269c:	4293      	cmp	r3, r2
 800269e:	d013      	beq.n	80026c8 <UART_SetConfig+0x12c>
 80026a0:	22c0      	movs	r2, #192	; 0xc0
 80026a2:	0292      	lsls	r2, r2, #10
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d005      	beq.n	80026b4 <UART_SetConfig+0x118>
 80026a8:	e013      	b.n	80026d2 <UART_SetConfig+0x136>
 80026aa:	231f      	movs	r3, #31
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e082      	b.n	80027ba <UART_SetConfig+0x21e>
 80026b4:	231f      	movs	r3, #31
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	2202      	movs	r2, #2
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e07d      	b.n	80027ba <UART_SetConfig+0x21e>
 80026be:	231f      	movs	r3, #31
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2204      	movs	r2, #4
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e078      	b.n	80027ba <UART_SetConfig+0x21e>
 80026c8:	231f      	movs	r3, #31
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2208      	movs	r2, #8
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e073      	b.n	80027ba <UART_SetConfig+0x21e>
 80026d2:	231f      	movs	r3, #31
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2210      	movs	r2, #16
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	e06d      	b.n	80027ba <UART_SetConfig+0x21e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7d      	ldr	r2, [pc, #500]	; (80028d8 <UART_SetConfig+0x33c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d132      	bne.n	800274e <UART_SetConfig+0x1b2>
 80026e8:	4b79      	ldr	r3, [pc, #484]	; (80028d0 <UART_SetConfig+0x334>)
 80026ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ec:	23c0      	movs	r3, #192	; 0xc0
 80026ee:	031b      	lsls	r3, r3, #12
 80026f0:	4013      	ands	r3, r2
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	02d2      	lsls	r2, r2, #11
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d019      	beq.n	800272e <UART_SetConfig+0x192>
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	02d2      	lsls	r2, r2, #11
 80026fe:	4293      	cmp	r3, r2
 8002700:	d802      	bhi.n	8002708 <UART_SetConfig+0x16c>
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <UART_SetConfig+0x17e>
 8002706:	e01c      	b.n	8002742 <UART_SetConfig+0x1a6>
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	0312      	lsls	r2, r2, #12
 800270c:	4293      	cmp	r3, r2
 800270e:	d013      	beq.n	8002738 <UART_SetConfig+0x19c>
 8002710:	22c0      	movs	r2, #192	; 0xc0
 8002712:	0312      	lsls	r2, r2, #12
 8002714:	4293      	cmp	r3, r2
 8002716:	d005      	beq.n	8002724 <UART_SetConfig+0x188>
 8002718:	e013      	b.n	8002742 <UART_SetConfig+0x1a6>
 800271a:	231f      	movs	r3, #31
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e04a      	b.n	80027ba <UART_SetConfig+0x21e>
 8002724:	231f      	movs	r3, #31
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2202      	movs	r2, #2
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e045      	b.n	80027ba <UART_SetConfig+0x21e>
 800272e:	231f      	movs	r3, #31
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	2204      	movs	r2, #4
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	e040      	b.n	80027ba <UART_SetConfig+0x21e>
 8002738:	231f      	movs	r3, #31
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2208      	movs	r2, #8
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e03b      	b.n	80027ba <UART_SetConfig+0x21e>
 8002742:	231f      	movs	r3, #31
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2210      	movs	r2, #16
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	e035      	b.n	80027ba <UART_SetConfig+0x21e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a62      	ldr	r2, [pc, #392]	; (80028dc <UART_SetConfig+0x340>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d104      	bne.n	8002762 <UART_SetConfig+0x1c6>
 8002758:	231f      	movs	r3, #31
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e02b      	b.n	80027ba <UART_SetConfig+0x21e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5e      	ldr	r2, [pc, #376]	; (80028e0 <UART_SetConfig+0x344>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d104      	bne.n	8002776 <UART_SetConfig+0x1da>
 800276c:	231f      	movs	r3, #31
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e021      	b.n	80027ba <UART_SetConfig+0x21e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5a      	ldr	r2, [pc, #360]	; (80028e4 <UART_SetConfig+0x348>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d104      	bne.n	800278a <UART_SetConfig+0x1ee>
 8002780:	231f      	movs	r3, #31
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e017      	b.n	80027ba <UART_SetConfig+0x21e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a56      	ldr	r2, [pc, #344]	; (80028e8 <UART_SetConfig+0x34c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d104      	bne.n	800279e <UART_SetConfig+0x202>
 8002794:	231f      	movs	r3, #31
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e00d      	b.n	80027ba <UART_SetConfig+0x21e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a52      	ldr	r2, [pc, #328]	; (80028ec <UART_SetConfig+0x350>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d104      	bne.n	80027b2 <UART_SetConfig+0x216>
 80027a8:	231f      	movs	r3, #31
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e003      	b.n	80027ba <UART_SetConfig+0x21e>
 80027b2:	231f      	movs	r3, #31
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2210      	movs	r2, #16
 80027b8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d15c      	bne.n	8002880 <UART_SetConfig+0x2e4>
  {
    switch (clocksource)
 80027c6:	231f      	movs	r3, #31
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d00d      	beq.n	80027ec <UART_SetConfig+0x250>
 80027d0:	dc02      	bgt.n	80027d8 <UART_SetConfig+0x23c>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <UART_SetConfig+0x246>
 80027d6:	e015      	b.n	8002804 <UART_SetConfig+0x268>
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d00a      	beq.n	80027f2 <UART_SetConfig+0x256>
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d00d      	beq.n	80027fc <UART_SetConfig+0x260>
 80027e0:	e010      	b.n	8002804 <UART_SetConfig+0x268>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e2:	f7ff f9f5 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 80027e6:	0003      	movs	r3, r0
 80027e8:	61bb      	str	r3, [r7, #24]
        break;
 80027ea:	e012      	b.n	8002812 <UART_SetConfig+0x276>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027ec:	4b40      	ldr	r3, [pc, #256]	; (80028f0 <UART_SetConfig+0x354>)
 80027ee:	61bb      	str	r3, [r7, #24]
        break;
 80027f0:	e00f      	b.n	8002812 <UART_SetConfig+0x276>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027f2:	f7ff f965 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 80027f6:	0003      	movs	r3, r0
 80027f8:	61bb      	str	r3, [r7, #24]
        break;
 80027fa:	e00a      	b.n	8002812 <UART_SetConfig+0x276>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	61bb      	str	r3, [r7, #24]
        break;
 8002802:	e006      	b.n	8002812 <UART_SetConfig+0x276>
      default:
        pclk = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002808:	231e      	movs	r3, #30
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
        break;
 8002810:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d100      	bne.n	800281a <UART_SetConfig+0x27e>
 8002818:	e096      	b.n	8002948 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	005a      	lsls	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	085b      	lsrs	r3, r3, #1
 8002824:	18d2      	adds	r2, r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	0019      	movs	r1, r3
 800282c:	0010      	movs	r0, r2
 800282e:	f7fd fc69 	bl	8000104 <__udivsi3>
 8002832:	0003      	movs	r3, r0
 8002834:	b29b      	uxth	r3, r3
 8002836:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b0f      	cmp	r3, #15
 800283c:	d91b      	bls.n	8002876 <UART_SetConfig+0x2da>
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4a2c      	ldr	r2, [pc, #176]	; (80028f4 <UART_SetConfig+0x358>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d817      	bhi.n	8002876 <UART_SetConfig+0x2da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	b29a      	uxth	r2, r3
 800284a:	200e      	movs	r0, #14
 800284c:	183b      	adds	r3, r7, r0
 800284e:	210f      	movs	r1, #15
 8002850:	438a      	bics	r2, r1
 8002852:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	2207      	movs	r2, #7
 800285c:	4013      	ands	r3, r2
 800285e:	b299      	uxth	r1, r3
 8002860:	183b      	adds	r3, r7, r0
 8002862:	183a      	adds	r2, r7, r0
 8002864:	8812      	ldrh	r2, [r2, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	183a      	adds	r2, r7, r0
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	e068      	b.n	8002948 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8002876:	231e      	movs	r3, #30
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e063      	b.n	8002948 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002880:	231f      	movs	r3, #31
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d00d      	beq.n	80028a6 <UART_SetConfig+0x30a>
 800288a:	dc02      	bgt.n	8002892 <UART_SetConfig+0x2f6>
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <UART_SetConfig+0x300>
 8002890:	e032      	b.n	80028f8 <UART_SetConfig+0x35c>
 8002892:	2b04      	cmp	r3, #4
 8002894:	d00a      	beq.n	80028ac <UART_SetConfig+0x310>
 8002896:	2b08      	cmp	r3, #8
 8002898:	d00d      	beq.n	80028b6 <UART_SetConfig+0x31a>
 800289a:	e02d      	b.n	80028f8 <UART_SetConfig+0x35c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800289c:	f7ff f998 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 80028a0:	0003      	movs	r3, r0
 80028a2:	61bb      	str	r3, [r7, #24]
        break;
 80028a4:	e02f      	b.n	8002906 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <UART_SetConfig+0x354>)
 80028a8:	61bb      	str	r3, [r7, #24]
        break;
 80028aa:	e02c      	b.n	8002906 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028ac:	f7ff f908 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 80028b0:	0003      	movs	r3, r0
 80028b2:	61bb      	str	r3, [r7, #24]
        break;
 80028b4:	e027      	b.n	8002906 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	61bb      	str	r3, [r7, #24]
        break;
 80028bc:	e023      	b.n	8002906 <UART_SetConfig+0x36a>
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	efff69f3 	.word	0xefff69f3
 80028c4:	ffffcfff 	.word	0xffffcfff
 80028c8:	fffff4ff 	.word	0xfffff4ff
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40004400 	.word	0x40004400
 80028d8:	40004800 	.word	0x40004800
 80028dc:	40004c00 	.word	0x40004c00
 80028e0:	40005000 	.word	0x40005000
 80028e4:	40011400 	.word	0x40011400
 80028e8:	40011800 	.word	0x40011800
 80028ec:	40011c00 	.word	0x40011c00
 80028f0:	007a1200 	.word	0x007a1200
 80028f4:	0000ffff 	.word	0x0000ffff
      default:
        pclk = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028fc:	231e      	movs	r3, #30
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
        break;
 8002904:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01d      	beq.n	8002948 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	085a      	lsrs	r2, r3, #1
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	18d2      	adds	r2, r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	0019      	movs	r1, r3
 800291c:	0010      	movs	r0, r2
 800291e:	f7fd fbf1 	bl	8000104 <__udivsi3>
 8002922:	0003      	movs	r3, r0
 8002924:	b29b      	uxth	r3, r3
 8002926:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b0f      	cmp	r3, #15
 800292c:	d908      	bls.n	8002940 <UART_SetConfig+0x3a4>
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <UART_SetConfig+0x3c8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d804      	bhi.n	8002940 <UART_SetConfig+0x3a4>
      {
        huart->Instance->BRR = usartdiv;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	e003      	b.n	8002948 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8002940:	231e      	movs	r3, #30
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002954:	231e      	movs	r3, #30
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	781b      	ldrb	r3, [r3, #0]
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b008      	add	sp, #32
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	0000ffff 	.word	0x0000ffff

08002968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2201      	movs	r2, #1
 8002976:	4013      	ands	r3, r2
 8002978:	d00b      	beq.n	8002992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a4a      	ldr	r2, [pc, #296]	; (8002aac <UART_AdvFeatureConfig+0x144>)
 8002982:	4013      	ands	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	d00b      	beq.n	80029b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a43      	ldr	r2, [pc, #268]	; (8002ab0 <UART_AdvFeatureConfig+0x148>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2204      	movs	r2, #4
 80029ba:	4013      	ands	r3, r2
 80029bc:	d00b      	beq.n	80029d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a3b      	ldr	r2, [pc, #236]	; (8002ab4 <UART_AdvFeatureConfig+0x14c>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	2208      	movs	r2, #8
 80029dc:	4013      	ands	r3, r2
 80029de:	d00b      	beq.n	80029f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <UART_AdvFeatureConfig+0x150>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	0019      	movs	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2210      	movs	r2, #16
 80029fe:	4013      	ands	r3, r2
 8002a00:	d00b      	beq.n	8002a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a2c      	ldr	r2, [pc, #176]	; (8002abc <UART_AdvFeatureConfig+0x154>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2220      	movs	r2, #32
 8002a20:	4013      	ands	r3, r2
 8002a22:	d00b      	beq.n	8002a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <UART_AdvFeatureConfig+0x158>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	2240      	movs	r2, #64	; 0x40
 8002a42:	4013      	ands	r3, r2
 8002a44:	d01d      	beq.n	8002a82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <UART_AdvFeatureConfig+0x15c>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	035b      	lsls	r3, r3, #13
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d10b      	bne.n	8002a82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <UART_AdvFeatureConfig+0x160>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d00b      	beq.n	8002aa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <UART_AdvFeatureConfig+0x164>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]
  }
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	fffdffff 	.word	0xfffdffff
 8002ab0:	fffeffff 	.word	0xfffeffff
 8002ab4:	fffbffff 	.word	0xfffbffff
 8002ab8:	ffff7fff 	.word	0xffff7fff
 8002abc:	ffffefff 	.word	0xffffefff
 8002ac0:	ffffdfff 	.word	0xffffdfff
 8002ac4:	ffefffff 	.word	0xffefffff
 8002ac8:	ff9fffff 	.word	0xff9fffff
 8002acc:	fff7ffff 	.word	0xfff7ffff

08002ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	2100      	movs	r1, #0
 8002ade:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ae0:	f7fe f8fe 	bl	8000ce0 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2208      	movs	r2, #8
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d10d      	bne.n	8002b12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	0399      	lsls	r1, r3, #14
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <UART_CheckIdleState+0x90>)
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	0013      	movs	r3, r2
 8002b04:	2200      	movs	r2, #0
 8002b06:	f000 f82d 	bl	8002b64 <UART_WaitOnFlagUntilTimeout>
 8002b0a:	1e03      	subs	r3, r0, #0
 8002b0c:	d001      	beq.n	8002b12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e022      	b.n	8002b58 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d10d      	bne.n	8002b3c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	03d9      	lsls	r1, r3, #15
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <UART_CheckIdleState+0x90>)
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f000 f818 	bl	8002b64 <UART_WaitOnFlagUntilTimeout>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e00d      	b.n	8002b58 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2274      	movs	r2, #116	; 0x74
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b004      	add	sp, #16
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	01ffffff 	.word	0x01ffffff

08002b64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	1dfb      	adds	r3, r7, #7
 8002b72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b74:	e05e      	b.n	8002c34 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	d05b      	beq.n	8002c34 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7c:	f7fe f8b0 	bl	8000ce0 <HAL_GetTick>
 8002b80:	0002      	movs	r2, r0
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d302      	bcc.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11b      	bne.n	8002bca <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	492f      	ldr	r1, [pc, #188]	; (8002c5c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002b9e:	400a      	ands	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2101      	movs	r1, #1
 8002bae:	438a      	bics	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2274      	movs	r2, #116	; 0x74
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e044      	b.n	8002c54 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d02e      	beq.n	8002c34 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	401a      	ands	r2, r3
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d124      	bne.n	8002c34 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2280      	movs	r2, #128	; 0x80
 8002bf0:	0112      	lsls	r2, r2, #4
 8002bf2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4917      	ldr	r1, [pc, #92]	; (8002c5c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2101      	movs	r1, #1
 8002c10:	438a      	bics	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	2120      	movs	r1, #32
 8002c26:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2274      	movs	r2, #116	; 0x74
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e00f      	b.n	8002c54 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	425a      	negs	r2, r3
 8002c44:	4153      	adcs	r3, r2
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	001a      	movs	r2, r3
 8002c4a:	1dfb      	adds	r3, r7, #7
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d091      	beq.n	8002b76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b004      	add	sp, #16
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	fffffe5f 	.word	0xfffffe5f

08002c60 <__libc_init_array>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	2600      	movs	r6, #0
 8002c64:	4d0c      	ldr	r5, [pc, #48]	; (8002c98 <__libc_init_array+0x38>)
 8002c66:	4c0d      	ldr	r4, [pc, #52]	; (8002c9c <__libc_init_array+0x3c>)
 8002c68:	1b64      	subs	r4, r4, r5
 8002c6a:	10a4      	asrs	r4, r4, #2
 8002c6c:	42a6      	cmp	r6, r4
 8002c6e:	d109      	bne.n	8002c84 <__libc_init_array+0x24>
 8002c70:	2600      	movs	r6, #0
 8002c72:	f000 f821 	bl	8002cb8 <_init>
 8002c76:	4d0a      	ldr	r5, [pc, #40]	; (8002ca0 <__libc_init_array+0x40>)
 8002c78:	4c0a      	ldr	r4, [pc, #40]	; (8002ca4 <__libc_init_array+0x44>)
 8002c7a:	1b64      	subs	r4, r4, r5
 8002c7c:	10a4      	asrs	r4, r4, #2
 8002c7e:	42a6      	cmp	r6, r4
 8002c80:	d105      	bne.n	8002c8e <__libc_init_array+0x2e>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	00b3      	lsls	r3, r6, #2
 8002c86:	58eb      	ldr	r3, [r5, r3]
 8002c88:	4798      	blx	r3
 8002c8a:	3601      	adds	r6, #1
 8002c8c:	e7ee      	b.n	8002c6c <__libc_init_array+0xc>
 8002c8e:	00b3      	lsls	r3, r6, #2
 8002c90:	58eb      	ldr	r3, [r5, r3]
 8002c92:	4798      	blx	r3
 8002c94:	3601      	adds	r6, #1
 8002c96:	e7f2      	b.n	8002c7e <__libc_init_array+0x1e>
 8002c98:	08002d08 	.word	0x08002d08
 8002c9c:	08002d08 	.word	0x08002d08
 8002ca0:	08002d08 	.word	0x08002d08
 8002ca4:	08002d0c 	.word	0x08002d0c

08002ca8 <memset>:
 8002ca8:	0003      	movs	r3, r0
 8002caa:	1812      	adds	r2, r2, r0
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <memset+0xa>
 8002cb0:	4770      	bx	lr
 8002cb2:	7019      	strb	r1, [r3, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	e7f9      	b.n	8002cac <memset+0x4>

08002cb8 <_init>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr

08002cc4 <_fini>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr
