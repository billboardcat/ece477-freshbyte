
ece477-i2c-integrated-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c8  080064c8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d0  080064d0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080064d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000020  080064f8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080064f8  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121b6  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bea  00000000  00000000  000321fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00034de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00035dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c95  00000000  00000000  00036c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136c7  00000000  00000000  0004c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000810f4  00000000  00000000  0005ffbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e10b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f0  00000000  00000000  000e1104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006154 	.word	0x08006154

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08006154 	.word	0x08006154

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f001 fd18 	bl	8001d04 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f001 fd13 	bl	8001d04 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_fadd>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	4646      	mov	r6, r8
 800044c:	46d6      	mov	lr, sl
 800044e:	464f      	mov	r7, r9
 8000450:	024d      	lsls	r5, r1, #9
 8000452:	0242      	lsls	r2, r0, #9
 8000454:	b5c0      	push	{r6, r7, lr}
 8000456:	0a52      	lsrs	r2, r2, #9
 8000458:	0a6e      	lsrs	r6, r5, #9
 800045a:	0047      	lsls	r7, r0, #1
 800045c:	46b0      	mov	r8, r6
 800045e:	0e3f      	lsrs	r7, r7, #24
 8000460:	004e      	lsls	r6, r1, #1
 8000462:	0fc4      	lsrs	r4, r0, #31
 8000464:	00d0      	lsls	r0, r2, #3
 8000466:	4694      	mov	ip, r2
 8000468:	003b      	movs	r3, r7
 800046a:	4682      	mov	sl, r0
 800046c:	0e36      	lsrs	r6, r6, #24
 800046e:	0fc9      	lsrs	r1, r1, #31
 8000470:	09ad      	lsrs	r5, r5, #6
 8000472:	428c      	cmp	r4, r1
 8000474:	d06d      	beq.n	8000552 <__aeabi_fadd+0x10a>
 8000476:	1bb8      	subs	r0, r7, r6
 8000478:	4681      	mov	r9, r0
 800047a:	2800      	cmp	r0, #0
 800047c:	dd4d      	ble.n	800051a <__aeabi_fadd+0xd2>
 800047e:	2e00      	cmp	r6, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_fadd+0x3c>
 8000482:	e088      	b.n	8000596 <__aeabi_fadd+0x14e>
 8000484:	2fff      	cmp	r7, #255	; 0xff
 8000486:	d05a      	beq.n	800053e <__aeabi_fadd+0xf6>
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	04db      	lsls	r3, r3, #19
 800048c:	431d      	orrs	r5, r3
 800048e:	464b      	mov	r3, r9
 8000490:	2201      	movs	r2, #1
 8000492:	2b1b      	cmp	r3, #27
 8000494:	dc0a      	bgt.n	80004ac <__aeabi_fadd+0x64>
 8000496:	002b      	movs	r3, r5
 8000498:	464a      	mov	r2, r9
 800049a:	4649      	mov	r1, r9
 800049c:	40d3      	lsrs	r3, r2
 800049e:	2220      	movs	r2, #32
 80004a0:	1a52      	subs	r2, r2, r1
 80004a2:	4095      	lsls	r5, r2
 80004a4:	002a      	movs	r2, r5
 80004a6:	1e55      	subs	r5, r2, #1
 80004a8:	41aa      	sbcs	r2, r5
 80004aa:	431a      	orrs	r2, r3
 80004ac:	4653      	mov	r3, sl
 80004ae:	1a9a      	subs	r2, r3, r2
 80004b0:	0153      	lsls	r3, r2, #5
 80004b2:	d400      	bmi.n	80004b6 <__aeabi_fadd+0x6e>
 80004b4:	e0b9      	b.n	800062a <__aeabi_fadd+0x1e2>
 80004b6:	0192      	lsls	r2, r2, #6
 80004b8:	0996      	lsrs	r6, r2, #6
 80004ba:	0030      	movs	r0, r6
 80004bc:	f001 fc04 	bl	8001cc8 <__clzsi2>
 80004c0:	3805      	subs	r0, #5
 80004c2:	4086      	lsls	r6, r0
 80004c4:	4287      	cmp	r7, r0
 80004c6:	dd00      	ble.n	80004ca <__aeabi_fadd+0x82>
 80004c8:	e0d4      	b.n	8000674 <__aeabi_fadd+0x22c>
 80004ca:	0033      	movs	r3, r6
 80004cc:	1bc7      	subs	r7, r0, r7
 80004ce:	2020      	movs	r0, #32
 80004d0:	3701      	adds	r7, #1
 80004d2:	40fb      	lsrs	r3, r7
 80004d4:	1bc7      	subs	r7, r0, r7
 80004d6:	40be      	lsls	r6, r7
 80004d8:	0032      	movs	r2, r6
 80004da:	1e56      	subs	r6, r2, #1
 80004dc:	41b2      	sbcs	r2, r6
 80004de:	2700      	movs	r7, #0
 80004e0:	431a      	orrs	r2, r3
 80004e2:	0753      	lsls	r3, r2, #29
 80004e4:	d004      	beq.n	80004f0 <__aeabi_fadd+0xa8>
 80004e6:	230f      	movs	r3, #15
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d000      	beq.n	80004f0 <__aeabi_fadd+0xa8>
 80004ee:	3204      	adds	r2, #4
 80004f0:	0153      	lsls	r3, r2, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0xae>
 80004f4:	e09c      	b.n	8000630 <__aeabi_fadd+0x1e8>
 80004f6:	1c7b      	adds	r3, r7, #1
 80004f8:	2ffe      	cmp	r7, #254	; 0xfe
 80004fa:	d100      	bne.n	80004fe <__aeabi_fadd+0xb6>
 80004fc:	e09a      	b.n	8000634 <__aeabi_fadd+0x1ec>
 80004fe:	0192      	lsls	r2, r2, #6
 8000500:	0a52      	lsrs	r2, r2, #9
 8000502:	4694      	mov	ip, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	05d8      	lsls	r0, r3, #23
 8000508:	4663      	mov	r3, ip
 800050a:	07e4      	lsls	r4, r4, #31
 800050c:	4318      	orrs	r0, r3
 800050e:	4320      	orrs	r0, r4
 8000510:	bce0      	pop	{r5, r6, r7}
 8000512:	46ba      	mov	sl, r7
 8000514:	46b1      	mov	r9, r6
 8000516:	46a8      	mov	r8, r5
 8000518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051a:	2800      	cmp	r0, #0
 800051c:	d049      	beq.n	80005b2 <__aeabi_fadd+0x16a>
 800051e:	1bf3      	subs	r3, r6, r7
 8000520:	2f00      	cmp	r7, #0
 8000522:	d000      	beq.n	8000526 <__aeabi_fadd+0xde>
 8000524:	e0b6      	b.n	8000694 <__aeabi_fadd+0x24c>
 8000526:	4652      	mov	r2, sl
 8000528:	2a00      	cmp	r2, #0
 800052a:	d060      	beq.n	80005ee <__aeabi_fadd+0x1a6>
 800052c:	3b01      	subs	r3, #1
 800052e:	2b00      	cmp	r3, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0xec>
 8000532:	e0fc      	b.n	800072e <__aeabi_fadd+0x2e6>
 8000534:	2eff      	cmp	r6, #255	; 0xff
 8000536:	d000      	beq.n	800053a <__aeabi_fadd+0xf2>
 8000538:	e0b4      	b.n	80006a4 <__aeabi_fadd+0x25c>
 800053a:	000c      	movs	r4, r1
 800053c:	4642      	mov	r2, r8
 800053e:	2a00      	cmp	r2, #0
 8000540:	d078      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 8000542:	2080      	movs	r0, #128	; 0x80
 8000544:	03c0      	lsls	r0, r0, #15
 8000546:	4310      	orrs	r0, r2
 8000548:	0242      	lsls	r2, r0, #9
 800054a:	0a53      	lsrs	r3, r2, #9
 800054c:	469c      	mov	ip, r3
 800054e:	23ff      	movs	r3, #255	; 0xff
 8000550:	e7d9      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000552:	1bb9      	subs	r1, r7, r6
 8000554:	2900      	cmp	r1, #0
 8000556:	dd71      	ble.n	800063c <__aeabi_fadd+0x1f4>
 8000558:	2e00      	cmp	r6, #0
 800055a:	d03f      	beq.n	80005dc <__aeabi_fadd+0x194>
 800055c:	2fff      	cmp	r7, #255	; 0xff
 800055e:	d0ee      	beq.n	800053e <__aeabi_fadd+0xf6>
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	04db      	lsls	r3, r3, #19
 8000564:	431d      	orrs	r5, r3
 8000566:	2201      	movs	r2, #1
 8000568:	291b      	cmp	r1, #27
 800056a:	dc07      	bgt.n	800057c <__aeabi_fadd+0x134>
 800056c:	002a      	movs	r2, r5
 800056e:	2320      	movs	r3, #32
 8000570:	40ca      	lsrs	r2, r1
 8000572:	1a59      	subs	r1, r3, r1
 8000574:	408d      	lsls	r5, r1
 8000576:	1e6b      	subs	r3, r5, #1
 8000578:	419d      	sbcs	r5, r3
 800057a:	432a      	orrs	r2, r5
 800057c:	4452      	add	r2, sl
 800057e:	0153      	lsls	r3, r2, #5
 8000580:	d553      	bpl.n	800062a <__aeabi_fadd+0x1e2>
 8000582:	3701      	adds	r7, #1
 8000584:	2fff      	cmp	r7, #255	; 0xff
 8000586:	d055      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 8000588:	2301      	movs	r3, #1
 800058a:	497b      	ldr	r1, [pc, #492]	; (8000778 <__aeabi_fadd+0x330>)
 800058c:	4013      	ands	r3, r2
 800058e:	0852      	lsrs	r2, r2, #1
 8000590:	400a      	ands	r2, r1
 8000592:	431a      	orrs	r2, r3
 8000594:	e7a5      	b.n	80004e2 <__aeabi_fadd+0x9a>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d02c      	beq.n	80005f4 <__aeabi_fadd+0x1ac>
 800059a:	2301      	movs	r3, #1
 800059c:	425b      	negs	r3, r3
 800059e:	469c      	mov	ip, r3
 80005a0:	44e1      	add	r9, ip
 80005a2:	464b      	mov	r3, r9
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x162>
 80005a8:	e0ad      	b.n	8000706 <__aeabi_fadd+0x2be>
 80005aa:	2fff      	cmp	r7, #255	; 0xff
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fadd+0x168>
 80005ae:	e76e      	b.n	800048e <__aeabi_fadd+0x46>
 80005b0:	e7c5      	b.n	800053e <__aeabi_fadd+0xf6>
 80005b2:	20fe      	movs	r0, #254	; 0xfe
 80005b4:	1c7e      	adds	r6, r7, #1
 80005b6:	4230      	tst	r0, r6
 80005b8:	d160      	bne.n	800067c <__aeabi_fadd+0x234>
 80005ba:	2f00      	cmp	r7, #0
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fadd+0x178>
 80005be:	e093      	b.n	80006e8 <__aeabi_fadd+0x2a0>
 80005c0:	4652      	mov	r2, sl
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x180>
 80005c6:	e0b6      	b.n	8000736 <__aeabi_fadd+0x2ee>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d09c      	beq.n	8000506 <__aeabi_fadd+0xbe>
 80005cc:	1b52      	subs	r2, r2, r5
 80005ce:	0150      	lsls	r0, r2, #5
 80005d0:	d400      	bmi.n	80005d4 <__aeabi_fadd+0x18c>
 80005d2:	e0c3      	b.n	800075c <__aeabi_fadd+0x314>
 80005d4:	4653      	mov	r3, sl
 80005d6:	000c      	movs	r4, r1
 80005d8:	1aea      	subs	r2, r5, r3
 80005da:	e782      	b.n	80004e2 <__aeabi_fadd+0x9a>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d009      	beq.n	80005f4 <__aeabi_fadd+0x1ac>
 80005e0:	3901      	subs	r1, #1
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x1a0>
 80005e6:	e08b      	b.n	8000700 <__aeabi_fadd+0x2b8>
 80005e8:	2fff      	cmp	r7, #255	; 0xff
 80005ea:	d1bc      	bne.n	8000566 <__aeabi_fadd+0x11e>
 80005ec:	e7a7      	b.n	800053e <__aeabi_fadd+0xf6>
 80005ee:	000c      	movs	r4, r1
 80005f0:	4642      	mov	r2, r8
 80005f2:	0037      	movs	r7, r6
 80005f4:	2fff      	cmp	r7, #255	; 0xff
 80005f6:	d0a2      	beq.n	800053e <__aeabi_fadd+0xf6>
 80005f8:	0252      	lsls	r2, r2, #9
 80005fa:	0a53      	lsrs	r3, r2, #9
 80005fc:	469c      	mov	ip, r3
 80005fe:	b2fb      	uxtb	r3, r7
 8000600:	e781      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000602:	21fe      	movs	r1, #254	; 0xfe
 8000604:	3701      	adds	r7, #1
 8000606:	4239      	tst	r1, r7
 8000608:	d165      	bne.n	80006d6 <__aeabi_fadd+0x28e>
 800060a:	2b00      	cmp	r3, #0
 800060c:	d17e      	bne.n	800070c <__aeabi_fadd+0x2c4>
 800060e:	2800      	cmp	r0, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_fadd+0x1cc>
 8000612:	e0aa      	b.n	800076a <__aeabi_fadd+0x322>
 8000614:	2d00      	cmp	r5, #0
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x1d2>
 8000618:	e775      	b.n	8000506 <__aeabi_fadd+0xbe>
 800061a:	002a      	movs	r2, r5
 800061c:	4452      	add	r2, sl
 800061e:	2700      	movs	r7, #0
 8000620:	0153      	lsls	r3, r2, #5
 8000622:	d502      	bpl.n	800062a <__aeabi_fadd+0x1e2>
 8000624:	4b55      	ldr	r3, [pc, #340]	; (800077c <__aeabi_fadd+0x334>)
 8000626:	3701      	adds	r7, #1
 8000628:	401a      	ands	r2, r3
 800062a:	0753      	lsls	r3, r2, #29
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x1e8>
 800062e:	e75a      	b.n	80004e6 <__aeabi_fadd+0x9e>
 8000630:	08d2      	lsrs	r2, r2, #3
 8000632:	e7df      	b.n	80005f4 <__aeabi_fadd+0x1ac>
 8000634:	2200      	movs	r2, #0
 8000636:	23ff      	movs	r3, #255	; 0xff
 8000638:	4694      	mov	ip, r2
 800063a:	e764      	b.n	8000506 <__aeabi_fadd+0xbe>
 800063c:	2900      	cmp	r1, #0
 800063e:	d0e0      	beq.n	8000602 <__aeabi_fadd+0x1ba>
 8000640:	1bf3      	subs	r3, r6, r7
 8000642:	2f00      	cmp	r7, #0
 8000644:	d03e      	beq.n	80006c4 <__aeabi_fadd+0x27c>
 8000646:	2eff      	cmp	r6, #255	; 0xff
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x204>
 800064a:	e777      	b.n	800053c <__aeabi_fadd+0xf4>
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0001      	movs	r1, r0
 8000650:	04d2      	lsls	r2, r2, #19
 8000652:	4311      	orrs	r1, r2
 8000654:	468a      	mov	sl, r1
 8000656:	2201      	movs	r2, #1
 8000658:	2b1b      	cmp	r3, #27
 800065a:	dc08      	bgt.n	800066e <__aeabi_fadd+0x226>
 800065c:	4652      	mov	r2, sl
 800065e:	2120      	movs	r1, #32
 8000660:	4650      	mov	r0, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	1acb      	subs	r3, r1, r3
 8000666:	4098      	lsls	r0, r3
 8000668:	1e43      	subs	r3, r0, #1
 800066a:	4198      	sbcs	r0, r3
 800066c:	4302      	orrs	r2, r0
 800066e:	0037      	movs	r7, r6
 8000670:	1952      	adds	r2, r2, r5
 8000672:	e784      	b.n	800057e <__aeabi_fadd+0x136>
 8000674:	4a41      	ldr	r2, [pc, #260]	; (800077c <__aeabi_fadd+0x334>)
 8000676:	1a3f      	subs	r7, r7, r0
 8000678:	4032      	ands	r2, r6
 800067a:	e732      	b.n	80004e2 <__aeabi_fadd+0x9a>
 800067c:	4653      	mov	r3, sl
 800067e:	1b5e      	subs	r6, r3, r5
 8000680:	0173      	lsls	r3, r6, #5
 8000682:	d42d      	bmi.n	80006e0 <__aeabi_fadd+0x298>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d000      	beq.n	800068a <__aeabi_fadd+0x242>
 8000688:	e717      	b.n	80004ba <__aeabi_fadd+0x72>
 800068a:	2200      	movs	r2, #0
 800068c:	2400      	movs	r4, #0
 800068e:	2300      	movs	r3, #0
 8000690:	4694      	mov	ip, r2
 8000692:	e738      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000694:	2eff      	cmp	r6, #255	; 0xff
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x252>
 8000698:	e74f      	b.n	800053a <__aeabi_fadd+0xf2>
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	4650      	mov	r0, sl
 800069e:	04d2      	lsls	r2, r2, #19
 80006a0:	4310      	orrs	r0, r2
 80006a2:	4682      	mov	sl, r0
 80006a4:	2201      	movs	r2, #1
 80006a6:	2b1b      	cmp	r3, #27
 80006a8:	dc08      	bgt.n	80006bc <__aeabi_fadd+0x274>
 80006aa:	4652      	mov	r2, sl
 80006ac:	2420      	movs	r4, #32
 80006ae:	4650      	mov	r0, sl
 80006b0:	40da      	lsrs	r2, r3
 80006b2:	1ae3      	subs	r3, r4, r3
 80006b4:	4098      	lsls	r0, r3
 80006b6:	1e43      	subs	r3, r0, #1
 80006b8:	4198      	sbcs	r0, r3
 80006ba:	4302      	orrs	r2, r0
 80006bc:	000c      	movs	r4, r1
 80006be:	0037      	movs	r7, r6
 80006c0:	1aaa      	subs	r2, r5, r2
 80006c2:	e6f5      	b.n	80004b0 <__aeabi_fadd+0x68>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d093      	beq.n	80005f0 <__aeabi_fadd+0x1a8>
 80006c8:	3b01      	subs	r3, #1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d04f      	beq.n	800076e <__aeabi_fadd+0x326>
 80006ce:	2eff      	cmp	r6, #255	; 0xff
 80006d0:	d1c1      	bne.n	8000656 <__aeabi_fadd+0x20e>
 80006d2:	4642      	mov	r2, r8
 80006d4:	e733      	b.n	800053e <__aeabi_fadd+0xf6>
 80006d6:	2fff      	cmp	r7, #255	; 0xff
 80006d8:	d0ac      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 80006da:	4455      	add	r5, sl
 80006dc:	086a      	lsrs	r2, r5, #1
 80006de:	e7a4      	b.n	800062a <__aeabi_fadd+0x1e2>
 80006e0:	4653      	mov	r3, sl
 80006e2:	000c      	movs	r4, r1
 80006e4:	1aee      	subs	r6, r5, r3
 80006e6:	e6e8      	b.n	80004ba <__aeabi_fadd+0x72>
 80006e8:	4653      	mov	r3, sl
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d128      	bne.n	8000740 <__aeabi_fadd+0x2f8>
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d000      	beq.n	80006f4 <__aeabi_fadd+0x2ac>
 80006f2:	e722      	b.n	800053a <__aeabi_fadd+0xf2>
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	03db      	lsls	r3, r3, #15
 80006f8:	469c      	mov	ip, r3
 80006fa:	2400      	movs	r4, #0
 80006fc:	23ff      	movs	r3, #255	; 0xff
 80006fe:	e702      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000700:	002a      	movs	r2, r5
 8000702:	4452      	add	r2, sl
 8000704:	e73b      	b.n	800057e <__aeabi_fadd+0x136>
 8000706:	4653      	mov	r3, sl
 8000708:	1b5a      	subs	r2, r3, r5
 800070a:	e6d1      	b.n	80004b0 <__aeabi_fadd+0x68>
 800070c:	2800      	cmp	r0, #0
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x2ca>
 8000710:	e714      	b.n	800053c <__aeabi_fadd+0xf4>
 8000712:	2d00      	cmp	r5, #0
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x2d0>
 8000716:	e712      	b.n	800053e <__aeabi_fadd+0xf6>
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	03db      	lsls	r3, r3, #15
 800071c:	421a      	tst	r2, r3
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x2da>
 8000720:	e70d      	b.n	800053e <__aeabi_fadd+0xf6>
 8000722:	4641      	mov	r1, r8
 8000724:	4219      	tst	r1, r3
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x2e2>
 8000728:	e709      	b.n	800053e <__aeabi_fadd+0xf6>
 800072a:	4642      	mov	r2, r8
 800072c:	e707      	b.n	800053e <__aeabi_fadd+0xf6>
 800072e:	000c      	movs	r4, r1
 8000730:	0037      	movs	r7, r6
 8000732:	1aaa      	subs	r2, r5, r2
 8000734:	e6bc      	b.n	80004b0 <__aeabi_fadd+0x68>
 8000736:	2d00      	cmp	r5, #0
 8000738:	d013      	beq.n	8000762 <__aeabi_fadd+0x31a>
 800073a:	000c      	movs	r4, r1
 800073c:	46c4      	mov	ip, r8
 800073e:	e6e2      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x2fe>
 8000744:	e6fb      	b.n	800053e <__aeabi_fadd+0xf6>
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	03db      	lsls	r3, r3, #15
 800074a:	421a      	tst	r2, r3
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x308>
 800074e:	e6f6      	b.n	800053e <__aeabi_fadd+0xf6>
 8000750:	4640      	mov	r0, r8
 8000752:	4218      	tst	r0, r3
 8000754:	d000      	beq.n	8000758 <__aeabi_fadd+0x310>
 8000756:	e6f2      	b.n	800053e <__aeabi_fadd+0xf6>
 8000758:	000c      	movs	r4, r1
 800075a:	e6ef      	b.n	800053c <__aeabi_fadd+0xf4>
 800075c:	2a00      	cmp	r2, #0
 800075e:	d000      	beq.n	8000762 <__aeabi_fadd+0x31a>
 8000760:	e763      	b.n	800062a <__aeabi_fadd+0x1e2>
 8000762:	2200      	movs	r2, #0
 8000764:	2400      	movs	r4, #0
 8000766:	4694      	mov	ip, r2
 8000768:	e6cd      	b.n	8000506 <__aeabi_fadd+0xbe>
 800076a:	46c4      	mov	ip, r8
 800076c:	e6cb      	b.n	8000506 <__aeabi_fadd+0xbe>
 800076e:	002a      	movs	r2, r5
 8000770:	0037      	movs	r7, r6
 8000772:	4452      	add	r2, sl
 8000774:	e703      	b.n	800057e <__aeabi_fadd+0x136>
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	7dffffff 	.word	0x7dffffff
 800077c:	fbffffff 	.word	0xfbffffff

08000780 <__aeabi_fmul>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	4657      	mov	r7, sl
 8000784:	464e      	mov	r6, r9
 8000786:	4645      	mov	r5, r8
 8000788:	46de      	mov	lr, fp
 800078a:	0244      	lsls	r4, r0, #9
 800078c:	b5e0      	push	{r5, r6, r7, lr}
 800078e:	0045      	lsls	r5, r0, #1
 8000790:	1c0f      	adds	r7, r1, #0
 8000792:	0a64      	lsrs	r4, r4, #9
 8000794:	0e2d      	lsrs	r5, r5, #24
 8000796:	0fc6      	lsrs	r6, r0, #31
 8000798:	2d00      	cmp	r5, #0
 800079a:	d047      	beq.n	800082c <__aeabi_fmul+0xac>
 800079c:	2dff      	cmp	r5, #255	; 0xff
 800079e:	d04d      	beq.n	800083c <__aeabi_fmul+0xbc>
 80007a0:	2300      	movs	r3, #0
 80007a2:	2080      	movs	r0, #128	; 0x80
 80007a4:	469a      	mov	sl, r3
 80007a6:	469b      	mov	fp, r3
 80007a8:	00e4      	lsls	r4, r4, #3
 80007aa:	04c0      	lsls	r0, r0, #19
 80007ac:	4304      	orrs	r4, r0
 80007ae:	3d7f      	subs	r5, #127	; 0x7f
 80007b0:	0278      	lsls	r0, r7, #9
 80007b2:	0a43      	lsrs	r3, r0, #9
 80007b4:	4699      	mov	r9, r3
 80007b6:	007a      	lsls	r2, r7, #1
 80007b8:	0ffb      	lsrs	r3, r7, #31
 80007ba:	4698      	mov	r8, r3
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	464b      	mov	r3, r9
 80007c0:	d044      	beq.n	800084c <__aeabi_fmul+0xcc>
 80007c2:	2aff      	cmp	r2, #255	; 0xff
 80007c4:	d011      	beq.n	80007ea <__aeabi_fmul+0x6a>
 80007c6:	00d8      	lsls	r0, r3, #3
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	04db      	lsls	r3, r3, #19
 80007cc:	4303      	orrs	r3, r0
 80007ce:	4699      	mov	r9, r3
 80007d0:	2000      	movs	r0, #0
 80007d2:	3a7f      	subs	r2, #127	; 0x7f
 80007d4:	18ad      	adds	r5, r5, r2
 80007d6:	4647      	mov	r7, r8
 80007d8:	4653      	mov	r3, sl
 80007da:	4077      	eors	r7, r6
 80007dc:	1c69      	adds	r1, r5, #1
 80007de:	2b0f      	cmp	r3, #15
 80007e0:	d83f      	bhi.n	8000862 <__aeabi_fmul+0xe2>
 80007e2:	4a72      	ldr	r2, [pc, #456]	; (80009ac <__aeabi_fmul+0x22c>)
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	58d3      	ldr	r3, [r2, r3]
 80007e8:	469f      	mov	pc, r3
 80007ea:	35ff      	adds	r5, #255	; 0xff
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fmul+0x72>
 80007f0:	e079      	b.n	80008e6 <__aeabi_fmul+0x166>
 80007f2:	4652      	mov	r2, sl
 80007f4:	2302      	movs	r3, #2
 80007f6:	431a      	orrs	r2, r3
 80007f8:	4692      	mov	sl, r2
 80007fa:	2002      	movs	r0, #2
 80007fc:	e7eb      	b.n	80007d6 <__aeabi_fmul+0x56>
 80007fe:	4647      	mov	r7, r8
 8000800:	464c      	mov	r4, r9
 8000802:	4683      	mov	fp, r0
 8000804:	465b      	mov	r3, fp
 8000806:	2b02      	cmp	r3, #2
 8000808:	d028      	beq.n	800085c <__aeabi_fmul+0xdc>
 800080a:	2b03      	cmp	r3, #3
 800080c:	d100      	bne.n	8000810 <__aeabi_fmul+0x90>
 800080e:	e0c6      	b.n	800099e <__aeabi_fmul+0x21e>
 8000810:	2b01      	cmp	r3, #1
 8000812:	d14f      	bne.n	80008b4 <__aeabi_fmul+0x134>
 8000814:	2000      	movs	r0, #0
 8000816:	2400      	movs	r4, #0
 8000818:	05c0      	lsls	r0, r0, #23
 800081a:	07ff      	lsls	r7, r7, #31
 800081c:	4320      	orrs	r0, r4
 800081e:	4338      	orrs	r0, r7
 8000820:	bcf0      	pop	{r4, r5, r6, r7}
 8000822:	46bb      	mov	fp, r7
 8000824:	46b2      	mov	sl, r6
 8000826:	46a9      	mov	r9, r5
 8000828:	46a0      	mov	r8, r4
 800082a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082c:	2c00      	cmp	r4, #0
 800082e:	d171      	bne.n	8000914 <__aeabi_fmul+0x194>
 8000830:	2304      	movs	r3, #4
 8000832:	469a      	mov	sl, r3
 8000834:	3b03      	subs	r3, #3
 8000836:	2500      	movs	r5, #0
 8000838:	469b      	mov	fp, r3
 800083a:	e7b9      	b.n	80007b0 <__aeabi_fmul+0x30>
 800083c:	2c00      	cmp	r4, #0
 800083e:	d163      	bne.n	8000908 <__aeabi_fmul+0x188>
 8000840:	2308      	movs	r3, #8
 8000842:	469a      	mov	sl, r3
 8000844:	3b06      	subs	r3, #6
 8000846:	25ff      	movs	r5, #255	; 0xff
 8000848:	469b      	mov	fp, r3
 800084a:	e7b1      	b.n	80007b0 <__aeabi_fmul+0x30>
 800084c:	2b00      	cmp	r3, #0
 800084e:	d150      	bne.n	80008f2 <__aeabi_fmul+0x172>
 8000850:	4652      	mov	r2, sl
 8000852:	3301      	adds	r3, #1
 8000854:	431a      	orrs	r2, r3
 8000856:	4692      	mov	sl, r2
 8000858:	2001      	movs	r0, #1
 800085a:	e7bc      	b.n	80007d6 <__aeabi_fmul+0x56>
 800085c:	20ff      	movs	r0, #255	; 0xff
 800085e:	2400      	movs	r4, #0
 8000860:	e7da      	b.n	8000818 <__aeabi_fmul+0x98>
 8000862:	4648      	mov	r0, r9
 8000864:	0c26      	lsrs	r6, r4, #16
 8000866:	0424      	lsls	r4, r4, #16
 8000868:	0c22      	lsrs	r2, r4, #16
 800086a:	0404      	lsls	r4, r0, #16
 800086c:	0c24      	lsrs	r4, r4, #16
 800086e:	464b      	mov	r3, r9
 8000870:	0020      	movs	r0, r4
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	4350      	muls	r0, r2
 8000876:	4374      	muls	r4, r6
 8000878:	435a      	muls	r2, r3
 800087a:	435e      	muls	r6, r3
 800087c:	1912      	adds	r2, r2, r4
 800087e:	0c03      	lsrs	r3, r0, #16
 8000880:	189b      	adds	r3, r3, r2
 8000882:	429c      	cmp	r4, r3
 8000884:	d903      	bls.n	800088e <__aeabi_fmul+0x10e>
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	0252      	lsls	r2, r2, #9
 800088a:	4694      	mov	ip, r2
 800088c:	4466      	add	r6, ip
 800088e:	0400      	lsls	r0, r0, #16
 8000890:	041a      	lsls	r2, r3, #16
 8000892:	0c00      	lsrs	r0, r0, #16
 8000894:	1812      	adds	r2, r2, r0
 8000896:	0194      	lsls	r4, r2, #6
 8000898:	1e60      	subs	r0, r4, #1
 800089a:	4184      	sbcs	r4, r0
 800089c:	0c1b      	lsrs	r3, r3, #16
 800089e:	0e92      	lsrs	r2, r2, #26
 80008a0:	199b      	adds	r3, r3, r6
 80008a2:	4314      	orrs	r4, r2
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	431c      	orrs	r4, r3
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	d572      	bpl.n	8000992 <__aeabi_fmul+0x212>
 80008ac:	2001      	movs	r0, #1
 80008ae:	0863      	lsrs	r3, r4, #1
 80008b0:	4004      	ands	r4, r0
 80008b2:	431c      	orrs	r4, r3
 80008b4:	0008      	movs	r0, r1
 80008b6:	307f      	adds	r0, #127	; 0x7f
 80008b8:	2800      	cmp	r0, #0
 80008ba:	dd3c      	ble.n	8000936 <__aeabi_fmul+0x1b6>
 80008bc:	0763      	lsls	r3, r4, #29
 80008be:	d004      	beq.n	80008ca <__aeabi_fmul+0x14a>
 80008c0:	230f      	movs	r3, #15
 80008c2:	4023      	ands	r3, r4
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fmul+0x14a>
 80008c8:	3404      	adds	r4, #4
 80008ca:	0123      	lsls	r3, r4, #4
 80008cc:	d503      	bpl.n	80008d6 <__aeabi_fmul+0x156>
 80008ce:	3180      	adds	r1, #128	; 0x80
 80008d0:	0008      	movs	r0, r1
 80008d2:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <__aeabi_fmul+0x230>)
 80008d4:	401c      	ands	r4, r3
 80008d6:	28fe      	cmp	r0, #254	; 0xfe
 80008d8:	dcc0      	bgt.n	800085c <__aeabi_fmul+0xdc>
 80008da:	01a4      	lsls	r4, r4, #6
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	b2c0      	uxtb	r0, r0
 80008e0:	e79a      	b.n	8000818 <__aeabi_fmul+0x98>
 80008e2:	0037      	movs	r7, r6
 80008e4:	e78e      	b.n	8000804 <__aeabi_fmul+0x84>
 80008e6:	4652      	mov	r2, sl
 80008e8:	2303      	movs	r3, #3
 80008ea:	431a      	orrs	r2, r3
 80008ec:	4692      	mov	sl, r2
 80008ee:	2003      	movs	r0, #3
 80008f0:	e771      	b.n	80007d6 <__aeabi_fmul+0x56>
 80008f2:	4648      	mov	r0, r9
 80008f4:	f001 f9e8 	bl	8001cc8 <__clzsi2>
 80008f8:	464a      	mov	r2, r9
 80008fa:	1f43      	subs	r3, r0, #5
 80008fc:	409a      	lsls	r2, r3
 80008fe:	1a2d      	subs	r5, r5, r0
 8000900:	4691      	mov	r9, r2
 8000902:	2000      	movs	r0, #0
 8000904:	3d76      	subs	r5, #118	; 0x76
 8000906:	e766      	b.n	80007d6 <__aeabi_fmul+0x56>
 8000908:	230c      	movs	r3, #12
 800090a:	469a      	mov	sl, r3
 800090c:	3b09      	subs	r3, #9
 800090e:	25ff      	movs	r5, #255	; 0xff
 8000910:	469b      	mov	fp, r3
 8000912:	e74d      	b.n	80007b0 <__aeabi_fmul+0x30>
 8000914:	0020      	movs	r0, r4
 8000916:	f001 f9d7 	bl	8001cc8 <__clzsi2>
 800091a:	2576      	movs	r5, #118	; 0x76
 800091c:	1f43      	subs	r3, r0, #5
 800091e:	409c      	lsls	r4, r3
 8000920:	2300      	movs	r3, #0
 8000922:	426d      	negs	r5, r5
 8000924:	469a      	mov	sl, r3
 8000926:	469b      	mov	fp, r3
 8000928:	1a2d      	subs	r5, r5, r0
 800092a:	e741      	b.n	80007b0 <__aeabi_fmul+0x30>
 800092c:	2480      	movs	r4, #128	; 0x80
 800092e:	2700      	movs	r7, #0
 8000930:	20ff      	movs	r0, #255	; 0xff
 8000932:	03e4      	lsls	r4, r4, #15
 8000934:	e770      	b.n	8000818 <__aeabi_fmul+0x98>
 8000936:	2301      	movs	r3, #1
 8000938:	1a1b      	subs	r3, r3, r0
 800093a:	2b1b      	cmp	r3, #27
 800093c:	dd00      	ble.n	8000940 <__aeabi_fmul+0x1c0>
 800093e:	e769      	b.n	8000814 <__aeabi_fmul+0x94>
 8000940:	319e      	adds	r1, #158	; 0x9e
 8000942:	0020      	movs	r0, r4
 8000944:	408c      	lsls	r4, r1
 8000946:	40d8      	lsrs	r0, r3
 8000948:	1e63      	subs	r3, r4, #1
 800094a:	419c      	sbcs	r4, r3
 800094c:	4304      	orrs	r4, r0
 800094e:	0763      	lsls	r3, r4, #29
 8000950:	d004      	beq.n	800095c <__aeabi_fmul+0x1dc>
 8000952:	230f      	movs	r3, #15
 8000954:	4023      	ands	r3, r4
 8000956:	2b04      	cmp	r3, #4
 8000958:	d000      	beq.n	800095c <__aeabi_fmul+0x1dc>
 800095a:	3404      	adds	r4, #4
 800095c:	0163      	lsls	r3, r4, #5
 800095e:	d51a      	bpl.n	8000996 <__aeabi_fmul+0x216>
 8000960:	2001      	movs	r0, #1
 8000962:	2400      	movs	r4, #0
 8000964:	e758      	b.n	8000818 <__aeabi_fmul+0x98>
 8000966:	2080      	movs	r0, #128	; 0x80
 8000968:	03c0      	lsls	r0, r0, #15
 800096a:	4204      	tst	r4, r0
 800096c:	d009      	beq.n	8000982 <__aeabi_fmul+0x202>
 800096e:	464b      	mov	r3, r9
 8000970:	4203      	tst	r3, r0
 8000972:	d106      	bne.n	8000982 <__aeabi_fmul+0x202>
 8000974:	464c      	mov	r4, r9
 8000976:	4304      	orrs	r4, r0
 8000978:	0264      	lsls	r4, r4, #9
 800097a:	4647      	mov	r7, r8
 800097c:	20ff      	movs	r0, #255	; 0xff
 800097e:	0a64      	lsrs	r4, r4, #9
 8000980:	e74a      	b.n	8000818 <__aeabi_fmul+0x98>
 8000982:	2080      	movs	r0, #128	; 0x80
 8000984:	03c0      	lsls	r0, r0, #15
 8000986:	4304      	orrs	r4, r0
 8000988:	0264      	lsls	r4, r4, #9
 800098a:	0037      	movs	r7, r6
 800098c:	20ff      	movs	r0, #255	; 0xff
 800098e:	0a64      	lsrs	r4, r4, #9
 8000990:	e742      	b.n	8000818 <__aeabi_fmul+0x98>
 8000992:	0029      	movs	r1, r5
 8000994:	e78e      	b.n	80008b4 <__aeabi_fmul+0x134>
 8000996:	01a4      	lsls	r4, r4, #6
 8000998:	2000      	movs	r0, #0
 800099a:	0a64      	lsrs	r4, r4, #9
 800099c:	e73c      	b.n	8000818 <__aeabi_fmul+0x98>
 800099e:	2080      	movs	r0, #128	; 0x80
 80009a0:	03c0      	lsls	r0, r0, #15
 80009a2:	4304      	orrs	r4, r0
 80009a4:	0264      	lsls	r4, r4, #9
 80009a6:	20ff      	movs	r0, #255	; 0xff
 80009a8:	0a64      	lsrs	r4, r4, #9
 80009aa:	e735      	b.n	8000818 <__aeabi_fmul+0x98>
 80009ac:	08006320 	.word	0x08006320
 80009b0:	f7ffffff 	.word	0xf7ffffff

080009b4 <__aeabi_f2iz>:
 80009b4:	0241      	lsls	r1, r0, #9
 80009b6:	0042      	lsls	r2, r0, #1
 80009b8:	0fc3      	lsrs	r3, r0, #31
 80009ba:	0a49      	lsrs	r1, r1, #9
 80009bc:	2000      	movs	r0, #0
 80009be:	0e12      	lsrs	r2, r2, #24
 80009c0:	2a7e      	cmp	r2, #126	; 0x7e
 80009c2:	d903      	bls.n	80009cc <__aeabi_f2iz+0x18>
 80009c4:	2a9d      	cmp	r2, #157	; 0x9d
 80009c6:	d902      	bls.n	80009ce <__aeabi_f2iz+0x1a>
 80009c8:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <__aeabi_f2iz+0x3c>)
 80009ca:	1898      	adds	r0, r3, r2
 80009cc:	4770      	bx	lr
 80009ce:	2080      	movs	r0, #128	; 0x80
 80009d0:	0400      	lsls	r0, r0, #16
 80009d2:	4301      	orrs	r1, r0
 80009d4:	2a95      	cmp	r2, #149	; 0x95
 80009d6:	dc07      	bgt.n	80009e8 <__aeabi_f2iz+0x34>
 80009d8:	2096      	movs	r0, #150	; 0x96
 80009da:	1a82      	subs	r2, r0, r2
 80009dc:	40d1      	lsrs	r1, r2
 80009de:	4248      	negs	r0, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1f3      	bne.n	80009cc <__aeabi_f2iz+0x18>
 80009e4:	0008      	movs	r0, r1
 80009e6:	e7f1      	b.n	80009cc <__aeabi_f2iz+0x18>
 80009e8:	3a96      	subs	r2, #150	; 0x96
 80009ea:	4091      	lsls	r1, r2
 80009ec:	e7f7      	b.n	80009de <__aeabi_f2iz+0x2a>
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	7fffffff 	.word	0x7fffffff

080009f4 <__aeabi_i2f>:
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	2800      	cmp	r0, #0
 80009f8:	d013      	beq.n	8000a22 <__aeabi_i2f+0x2e>
 80009fa:	17c3      	asrs	r3, r0, #31
 80009fc:	18c5      	adds	r5, r0, r3
 80009fe:	405d      	eors	r5, r3
 8000a00:	0fc4      	lsrs	r4, r0, #31
 8000a02:	0028      	movs	r0, r5
 8000a04:	f001 f960 	bl	8001cc8 <__clzsi2>
 8000a08:	239e      	movs	r3, #158	; 0x9e
 8000a0a:	0001      	movs	r1, r0
 8000a0c:	1a1b      	subs	r3, r3, r0
 8000a0e:	2b96      	cmp	r3, #150	; 0x96
 8000a10:	dc0f      	bgt.n	8000a32 <__aeabi_i2f+0x3e>
 8000a12:	2808      	cmp	r0, #8
 8000a14:	dd01      	ble.n	8000a1a <__aeabi_i2f+0x26>
 8000a16:	3908      	subs	r1, #8
 8000a18:	408d      	lsls	r5, r1
 8000a1a:	026d      	lsls	r5, r5, #9
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	b2d8      	uxtb	r0, r3
 8000a20:	e002      	b.n	8000a28 <__aeabi_i2f+0x34>
 8000a22:	2400      	movs	r4, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	2500      	movs	r5, #0
 8000a28:	05c0      	lsls	r0, r0, #23
 8000a2a:	4328      	orrs	r0, r5
 8000a2c:	07e4      	lsls	r4, r4, #31
 8000a2e:	4320      	orrs	r0, r4
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
 8000a32:	2b99      	cmp	r3, #153	; 0x99
 8000a34:	dd0b      	ble.n	8000a4e <__aeabi_i2f+0x5a>
 8000a36:	2205      	movs	r2, #5
 8000a38:	002e      	movs	r6, r5
 8000a3a:	1a12      	subs	r2, r2, r0
 8000a3c:	40d6      	lsrs	r6, r2
 8000a3e:	0002      	movs	r2, r0
 8000a40:	321b      	adds	r2, #27
 8000a42:	4095      	lsls	r5, r2
 8000a44:	0028      	movs	r0, r5
 8000a46:	1e45      	subs	r5, r0, #1
 8000a48:	41a8      	sbcs	r0, r5
 8000a4a:	0035      	movs	r5, r6
 8000a4c:	4305      	orrs	r5, r0
 8000a4e:	2905      	cmp	r1, #5
 8000a50:	dd01      	ble.n	8000a56 <__aeabi_i2f+0x62>
 8000a52:	1f4a      	subs	r2, r1, #5
 8000a54:	4095      	lsls	r5, r2
 8000a56:	002a      	movs	r2, r5
 8000a58:	4e08      	ldr	r6, [pc, #32]	; (8000a7c <__aeabi_i2f+0x88>)
 8000a5a:	4032      	ands	r2, r6
 8000a5c:	0768      	lsls	r0, r5, #29
 8000a5e:	d009      	beq.n	8000a74 <__aeabi_i2f+0x80>
 8000a60:	200f      	movs	r0, #15
 8000a62:	4028      	ands	r0, r5
 8000a64:	2804      	cmp	r0, #4
 8000a66:	d005      	beq.n	8000a74 <__aeabi_i2f+0x80>
 8000a68:	3204      	adds	r2, #4
 8000a6a:	0150      	lsls	r0, r2, #5
 8000a6c:	d502      	bpl.n	8000a74 <__aeabi_i2f+0x80>
 8000a6e:	239f      	movs	r3, #159	; 0x9f
 8000a70:	4032      	ands	r2, r6
 8000a72:	1a5b      	subs	r3, r3, r1
 8000a74:	0192      	lsls	r2, r2, #6
 8000a76:	0a55      	lsrs	r5, r2, #9
 8000a78:	b2d8      	uxtb	r0, r3
 8000a7a:	e7d5      	b.n	8000a28 <__aeabi_i2f+0x34>
 8000a7c:	fbffffff 	.word	0xfbffffff

08000a80 <__aeabi_dadd>:
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	464f      	mov	r7, r9
 8000a84:	46d6      	mov	lr, sl
 8000a86:	4646      	mov	r6, r8
 8000a88:	000d      	movs	r5, r1
 8000a8a:	0001      	movs	r1, r0
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	b5c0      	push	{r6, r7, lr}
 8000a90:	0017      	movs	r7, r2
 8000a92:	032b      	lsls	r3, r5, #12
 8000a94:	0a5a      	lsrs	r2, r3, #9
 8000a96:	0f4b      	lsrs	r3, r1, #29
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	00ca      	lsls	r2, r1, #3
 8000a9c:	4691      	mov	r9, r2
 8000a9e:	0302      	lsls	r2, r0, #12
 8000aa0:	006e      	lsls	r6, r5, #1
 8000aa2:	0041      	lsls	r1, r0, #1
 8000aa4:	0a52      	lsrs	r2, r2, #9
 8000aa6:	0fec      	lsrs	r4, r5, #31
 8000aa8:	0f7d      	lsrs	r5, r7, #29
 8000aaa:	4315      	orrs	r5, r2
 8000aac:	0d76      	lsrs	r6, r6, #21
 8000aae:	0d49      	lsrs	r1, r1, #21
 8000ab0:	0fc0      	lsrs	r0, r0, #31
 8000ab2:	4682      	mov	sl, r0
 8000ab4:	46ac      	mov	ip, r5
 8000ab6:	00ff      	lsls	r7, r7, #3
 8000ab8:	1a72      	subs	r2, r6, r1
 8000aba:	4284      	cmp	r4, r0
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x40>
 8000abe:	e098      	b.n	8000bf2 <__aeabi_dadd+0x172>
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	dc00      	bgt.n	8000ac6 <__aeabi_dadd+0x46>
 8000ac4:	e081      	b.n	8000bca <__aeabi_dadd+0x14a>
 8000ac6:	2900      	cmp	r1, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dadd+0x4c>
 8000aca:	e0b6      	b.n	8000c3a <__aeabi_dadd+0x1ba>
 8000acc:	49c9      	ldr	r1, [pc, #804]	; (8000df4 <__aeabi_dadd+0x374>)
 8000ace:	428e      	cmp	r6, r1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x54>
 8000ad2:	e172      	b.n	8000dba <__aeabi_dadd+0x33a>
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	0028      	movs	r0, r5
 8000ad8:	0409      	lsls	r1, r1, #16
 8000ada:	4308      	orrs	r0, r1
 8000adc:	4684      	mov	ip, r0
 8000ade:	2a38      	cmp	r2, #56	; 0x38
 8000ae0:	dd00      	ble.n	8000ae4 <__aeabi_dadd+0x64>
 8000ae2:	e15e      	b.n	8000da2 <__aeabi_dadd+0x322>
 8000ae4:	2a1f      	cmp	r2, #31
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dadd+0x6a>
 8000ae8:	e1ee      	b.n	8000ec8 <__aeabi_dadd+0x448>
 8000aea:	2020      	movs	r0, #32
 8000aec:	0039      	movs	r1, r7
 8000aee:	4665      	mov	r5, ip
 8000af0:	1a80      	subs	r0, r0, r2
 8000af2:	4087      	lsls	r7, r0
 8000af4:	40d1      	lsrs	r1, r2
 8000af6:	4085      	lsls	r5, r0
 8000af8:	430d      	orrs	r5, r1
 8000afa:	0039      	movs	r1, r7
 8000afc:	1e4f      	subs	r7, r1, #1
 8000afe:	41b9      	sbcs	r1, r7
 8000b00:	4667      	mov	r7, ip
 8000b02:	40d7      	lsrs	r7, r2
 8000b04:	4329      	orrs	r1, r5
 8000b06:	1bdb      	subs	r3, r3, r7
 8000b08:	464a      	mov	r2, r9
 8000b0a:	1a55      	subs	r5, r2, r1
 8000b0c:	45a9      	cmp	r9, r5
 8000b0e:	4189      	sbcs	r1, r1
 8000b10:	4249      	negs	r1, r1
 8000b12:	1a5b      	subs	r3, r3, r1
 8000b14:	4698      	mov	r8, r3
 8000b16:	4643      	mov	r3, r8
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	d400      	bmi.n	8000b1e <__aeabi_dadd+0x9e>
 8000b1c:	e0cc      	b.n	8000cb8 <__aeabi_dadd+0x238>
 8000b1e:	4643      	mov	r3, r8
 8000b20:	025b      	lsls	r3, r3, #9
 8000b22:	0a5b      	lsrs	r3, r3, #9
 8000b24:	4698      	mov	r8, r3
 8000b26:	4643      	mov	r3, r8
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0xae>
 8000b2c:	e12c      	b.n	8000d88 <__aeabi_dadd+0x308>
 8000b2e:	4640      	mov	r0, r8
 8000b30:	f001 f8ca 	bl	8001cc8 <__clzsi2>
 8000b34:	0001      	movs	r1, r0
 8000b36:	3908      	subs	r1, #8
 8000b38:	2220      	movs	r2, #32
 8000b3a:	0028      	movs	r0, r5
 8000b3c:	4643      	mov	r3, r8
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	408b      	lsls	r3, r1
 8000b42:	40d0      	lsrs	r0, r2
 8000b44:	408d      	lsls	r5, r1
 8000b46:	4303      	orrs	r3, r0
 8000b48:	428e      	cmp	r6, r1
 8000b4a:	dd00      	ble.n	8000b4e <__aeabi_dadd+0xce>
 8000b4c:	e117      	b.n	8000d7e <__aeabi_dadd+0x2fe>
 8000b4e:	1b8e      	subs	r6, r1, r6
 8000b50:	1c72      	adds	r2, r6, #1
 8000b52:	2a1f      	cmp	r2, #31
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_dadd+0xd8>
 8000b56:	e1a7      	b.n	8000ea8 <__aeabi_dadd+0x428>
 8000b58:	2120      	movs	r1, #32
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	002e      	movs	r6, r5
 8000b5e:	1a89      	subs	r1, r1, r2
 8000b60:	408d      	lsls	r5, r1
 8000b62:	4088      	lsls	r0, r1
 8000b64:	40d6      	lsrs	r6, r2
 8000b66:	40d3      	lsrs	r3, r2
 8000b68:	1e69      	subs	r1, r5, #1
 8000b6a:	418d      	sbcs	r5, r1
 8000b6c:	4330      	orrs	r0, r6
 8000b6e:	4698      	mov	r8, r3
 8000b70:	2600      	movs	r6, #0
 8000b72:	4305      	orrs	r5, r0
 8000b74:	076b      	lsls	r3, r5, #29
 8000b76:	d009      	beq.n	8000b8c <__aeabi_dadd+0x10c>
 8000b78:	230f      	movs	r3, #15
 8000b7a:	402b      	ands	r3, r5
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d005      	beq.n	8000b8c <__aeabi_dadd+0x10c>
 8000b80:	1d2b      	adds	r3, r5, #4
 8000b82:	42ab      	cmp	r3, r5
 8000b84:	41ad      	sbcs	r5, r5
 8000b86:	426d      	negs	r5, r5
 8000b88:	44a8      	add	r8, r5
 8000b8a:	001d      	movs	r5, r3
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_dadd+0x114>
 8000b92:	e094      	b.n	8000cbe <__aeabi_dadd+0x23e>
 8000b94:	4b97      	ldr	r3, [pc, #604]	; (8000df4 <__aeabi_dadd+0x374>)
 8000b96:	1c72      	adds	r2, r6, #1
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_dadd+0x11e>
 8000b9c:	e09d      	b.n	8000cda <__aeabi_dadd+0x25a>
 8000b9e:	4641      	mov	r1, r8
 8000ba0:	4b95      	ldr	r3, [pc, #596]	; (8000df8 <__aeabi_dadd+0x378>)
 8000ba2:	08ed      	lsrs	r5, r5, #3
 8000ba4:	4019      	ands	r1, r3
 8000ba6:	000b      	movs	r3, r1
 8000ba8:	0552      	lsls	r2, r2, #21
 8000baa:	0749      	lsls	r1, r1, #29
 8000bac:	025b      	lsls	r3, r3, #9
 8000bae:	4329      	orrs	r1, r5
 8000bb0:	0b1b      	lsrs	r3, r3, #12
 8000bb2:	0d52      	lsrs	r2, r2, #21
 8000bb4:	0512      	lsls	r2, r2, #20
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	07e4      	lsls	r4, r4, #31
 8000bba:	4323      	orrs	r3, r4
 8000bbc:	0008      	movs	r0, r1
 8000bbe:	0019      	movs	r1, r3
 8000bc0:	bce0      	pop	{r5, r6, r7}
 8000bc2:	46ba      	mov	sl, r7
 8000bc4:	46b1      	mov	r9, r6
 8000bc6:	46a8      	mov	r8, r5
 8000bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d043      	beq.n	8000c56 <__aeabi_dadd+0x1d6>
 8000bce:	1b8a      	subs	r2, r1, r6
 8000bd0:	2e00      	cmp	r6, #0
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_dadd+0x156>
 8000bd4:	e12a      	b.n	8000e2c <__aeabi_dadd+0x3ac>
 8000bd6:	464c      	mov	r4, r9
 8000bd8:	431c      	orrs	r4, r3
 8000bda:	d100      	bne.n	8000bde <__aeabi_dadd+0x15e>
 8000bdc:	e1d1      	b.n	8000f82 <__aeabi_dadd+0x502>
 8000bde:	1e54      	subs	r4, r2, #1
 8000be0:	2a01      	cmp	r2, #1
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dadd+0x166>
 8000be4:	e21f      	b.n	8001026 <__aeabi_dadd+0x5a6>
 8000be6:	4d83      	ldr	r5, [pc, #524]	; (8000df4 <__aeabi_dadd+0x374>)
 8000be8:	42aa      	cmp	r2, r5
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x16e>
 8000bec:	e272      	b.n	80010d4 <__aeabi_dadd+0x654>
 8000bee:	0022      	movs	r2, r4
 8000bf0:	e123      	b.n	8000e3a <__aeabi_dadd+0x3ba>
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	dc00      	bgt.n	8000bf8 <__aeabi_dadd+0x178>
 8000bf6:	e098      	b.n	8000d2a <__aeabi_dadd+0x2aa>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	d042      	beq.n	8000c82 <__aeabi_dadd+0x202>
 8000bfc:	497d      	ldr	r1, [pc, #500]	; (8000df4 <__aeabi_dadd+0x374>)
 8000bfe:	428e      	cmp	r6, r1
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dadd+0x184>
 8000c02:	e0da      	b.n	8000dba <__aeabi_dadd+0x33a>
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	0028      	movs	r0, r5
 8000c08:	0409      	lsls	r1, r1, #16
 8000c0a:	4308      	orrs	r0, r1
 8000c0c:	4684      	mov	ip, r0
 8000c0e:	2a38      	cmp	r2, #56	; 0x38
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_dadd+0x194>
 8000c12:	e129      	b.n	8000e68 <__aeabi_dadd+0x3e8>
 8000c14:	2a1f      	cmp	r2, #31
 8000c16:	dc00      	bgt.n	8000c1a <__aeabi_dadd+0x19a>
 8000c18:	e187      	b.n	8000f2a <__aeabi_dadd+0x4aa>
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	4665      	mov	r5, ip
 8000c1e:	3920      	subs	r1, #32
 8000c20:	40cd      	lsrs	r5, r1
 8000c22:	2a20      	cmp	r2, #32
 8000c24:	d004      	beq.n	8000c30 <__aeabi_dadd+0x1b0>
 8000c26:	2040      	movs	r0, #64	; 0x40
 8000c28:	4661      	mov	r1, ip
 8000c2a:	1a82      	subs	r2, r0, r2
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	430f      	orrs	r7, r1
 8000c30:	0039      	movs	r1, r7
 8000c32:	1e4f      	subs	r7, r1, #1
 8000c34:	41b9      	sbcs	r1, r7
 8000c36:	430d      	orrs	r5, r1
 8000c38:	e11b      	b.n	8000e72 <__aeabi_dadd+0x3f2>
 8000c3a:	0029      	movs	r1, r5
 8000c3c:	4339      	orrs	r1, r7
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dadd+0x1c2>
 8000c40:	e0b5      	b.n	8000dae <__aeabi_dadd+0x32e>
 8000c42:	1e51      	subs	r1, r2, #1
 8000c44:	2a01      	cmp	r2, #1
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dadd+0x1ca>
 8000c48:	e1ab      	b.n	8000fa2 <__aeabi_dadd+0x522>
 8000c4a:	486a      	ldr	r0, [pc, #424]	; (8000df4 <__aeabi_dadd+0x374>)
 8000c4c:	4282      	cmp	r2, r0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x1d2>
 8000c50:	e1b2      	b.n	8000fb8 <__aeabi_dadd+0x538>
 8000c52:	000a      	movs	r2, r1
 8000c54:	e743      	b.n	8000ade <__aeabi_dadd+0x5e>
 8000c56:	4969      	ldr	r1, [pc, #420]	; (8000dfc <__aeabi_dadd+0x37c>)
 8000c58:	1c75      	adds	r5, r6, #1
 8000c5a:	420d      	tst	r5, r1
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_dadd+0x1e0>
 8000c5e:	e0cf      	b.n	8000e00 <__aeabi_dadd+0x380>
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d000      	beq.n	8000c66 <__aeabi_dadd+0x1e6>
 8000c64:	e193      	b.n	8000f8e <__aeabi_dadd+0x50e>
 8000c66:	4649      	mov	r1, r9
 8000c68:	4319      	orrs	r1, r3
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x1ee>
 8000c6c:	e1d1      	b.n	8001012 <__aeabi_dadd+0x592>
 8000c6e:	4661      	mov	r1, ip
 8000c70:	4339      	orrs	r1, r7
 8000c72:	d000      	beq.n	8000c76 <__aeabi_dadd+0x1f6>
 8000c74:	e1e3      	b.n	800103e <__aeabi_dadd+0x5be>
 8000c76:	4649      	mov	r1, r9
 8000c78:	0758      	lsls	r0, r3, #29
 8000c7a:	08c9      	lsrs	r1, r1, #3
 8000c7c:	4301      	orrs	r1, r0
 8000c7e:	08db      	lsrs	r3, r3, #3
 8000c80:	e026      	b.n	8000cd0 <__aeabi_dadd+0x250>
 8000c82:	0029      	movs	r1, r5
 8000c84:	4339      	orrs	r1, r7
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dadd+0x20a>
 8000c88:	e091      	b.n	8000dae <__aeabi_dadd+0x32e>
 8000c8a:	1e51      	subs	r1, r2, #1
 8000c8c:	2a01      	cmp	r2, #1
 8000c8e:	d005      	beq.n	8000c9c <__aeabi_dadd+0x21c>
 8000c90:	4858      	ldr	r0, [pc, #352]	; (8000df4 <__aeabi_dadd+0x374>)
 8000c92:	4282      	cmp	r2, r0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x218>
 8000c96:	e18f      	b.n	8000fb8 <__aeabi_dadd+0x538>
 8000c98:	000a      	movs	r2, r1
 8000c9a:	e7b8      	b.n	8000c0e <__aeabi_dadd+0x18e>
 8000c9c:	003d      	movs	r5, r7
 8000c9e:	444d      	add	r5, r9
 8000ca0:	454d      	cmp	r5, r9
 8000ca2:	4189      	sbcs	r1, r1
 8000ca4:	4463      	add	r3, ip
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	4249      	negs	r1, r1
 8000caa:	4488      	add	r8, r1
 8000cac:	4643      	mov	r3, r8
 8000cae:	2602      	movs	r6, #2
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	d500      	bpl.n	8000cb6 <__aeabi_dadd+0x236>
 8000cb4:	e0eb      	b.n	8000e8e <__aeabi_dadd+0x40e>
 8000cb6:	3e01      	subs	r6, #1
 8000cb8:	076b      	lsls	r3, r5, #29
 8000cba:	d000      	beq.n	8000cbe <__aeabi_dadd+0x23e>
 8000cbc:	e75c      	b.n	8000b78 <__aeabi_dadd+0xf8>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	08e9      	lsrs	r1, r5, #3
 8000cc2:	075a      	lsls	r2, r3, #29
 8000cc4:	4311      	orrs	r1, r2
 8000cc6:	0032      	movs	r2, r6
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	484a      	ldr	r0, [pc, #296]	; (8000df4 <__aeabi_dadd+0x374>)
 8000ccc:	4282      	cmp	r2, r0
 8000cce:	d021      	beq.n	8000d14 <__aeabi_dadd+0x294>
 8000cd0:	031b      	lsls	r3, r3, #12
 8000cd2:	0552      	lsls	r2, r2, #21
 8000cd4:	0b1b      	lsrs	r3, r3, #12
 8000cd6:	0d52      	lsrs	r2, r2, #21
 8000cd8:	e76c      	b.n	8000bb4 <__aeabi_dadd+0x134>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e769      	b.n	8000bb4 <__aeabi_dadd+0x134>
 8000ce0:	002a      	movs	r2, r5
 8000ce2:	433a      	orrs	r2, r7
 8000ce4:	d069      	beq.n	8000dba <__aeabi_dadd+0x33a>
 8000ce6:	464a      	mov	r2, r9
 8000ce8:	0758      	lsls	r0, r3, #29
 8000cea:	08d1      	lsrs	r1, r2, #3
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	031b      	lsls	r3, r3, #12
 8000cf2:	4308      	orrs	r0, r1
 8000cf4:	421a      	tst	r2, r3
 8000cf6:	d007      	beq.n	8000d08 <__aeabi_dadd+0x288>
 8000cf8:	0029      	movs	r1, r5
 8000cfa:	08ed      	lsrs	r5, r5, #3
 8000cfc:	421d      	tst	r5, r3
 8000cfe:	d103      	bne.n	8000d08 <__aeabi_dadd+0x288>
 8000d00:	002a      	movs	r2, r5
 8000d02:	08ff      	lsrs	r7, r7, #3
 8000d04:	0748      	lsls	r0, r1, #29
 8000d06:	4338      	orrs	r0, r7
 8000d08:	0f43      	lsrs	r3, r0, #29
 8000d0a:	00c1      	lsls	r1, r0, #3
 8000d0c:	075b      	lsls	r3, r3, #29
 8000d0e:	08c9      	lsrs	r1, r1, #3
 8000d10:	4319      	orrs	r1, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	000a      	movs	r2, r1
 8000d16:	431a      	orrs	r2, r3
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x29c>
 8000d1a:	e213      	b.n	8001144 <__aeabi_dadd+0x6c4>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	0312      	lsls	r2, r2, #12
 8000d20:	4313      	orrs	r3, r2
 8000d22:	031b      	lsls	r3, r3, #12
 8000d24:	4a33      	ldr	r2, [pc, #204]	; (8000df4 <__aeabi_dadd+0x374>)
 8000d26:	0b1b      	lsrs	r3, r3, #12
 8000d28:	e744      	b.n	8000bb4 <__aeabi_dadd+0x134>
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d04b      	beq.n	8000dc6 <__aeabi_dadd+0x346>
 8000d2e:	1b8a      	subs	r2, r1, r6
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x2b6>
 8000d34:	e0e7      	b.n	8000f06 <__aeabi_dadd+0x486>
 8000d36:	482f      	ldr	r0, [pc, #188]	; (8000df4 <__aeabi_dadd+0x374>)
 8000d38:	4281      	cmp	r1, r0
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dadd+0x2be>
 8000d3c:	e195      	b.n	800106a <__aeabi_dadd+0x5ea>
 8000d3e:	2080      	movs	r0, #128	; 0x80
 8000d40:	0400      	lsls	r0, r0, #16
 8000d42:	4303      	orrs	r3, r0
 8000d44:	2a38      	cmp	r2, #56	; 0x38
 8000d46:	dd00      	ble.n	8000d4a <__aeabi_dadd+0x2ca>
 8000d48:	e143      	b.n	8000fd2 <__aeabi_dadd+0x552>
 8000d4a:	2a1f      	cmp	r2, #31
 8000d4c:	dd00      	ble.n	8000d50 <__aeabi_dadd+0x2d0>
 8000d4e:	e1db      	b.n	8001108 <__aeabi_dadd+0x688>
 8000d50:	2020      	movs	r0, #32
 8000d52:	001d      	movs	r5, r3
 8000d54:	464e      	mov	r6, r9
 8000d56:	1a80      	subs	r0, r0, r2
 8000d58:	4085      	lsls	r5, r0
 8000d5a:	40d6      	lsrs	r6, r2
 8000d5c:	4335      	orrs	r5, r6
 8000d5e:	464e      	mov	r6, r9
 8000d60:	4086      	lsls	r6, r0
 8000d62:	0030      	movs	r0, r6
 8000d64:	40d3      	lsrs	r3, r2
 8000d66:	1e46      	subs	r6, r0, #1
 8000d68:	41b0      	sbcs	r0, r6
 8000d6a:	449c      	add	ip, r3
 8000d6c:	4305      	orrs	r5, r0
 8000d6e:	19ed      	adds	r5, r5, r7
 8000d70:	42bd      	cmp	r5, r7
 8000d72:	419b      	sbcs	r3, r3
 8000d74:	425b      	negs	r3, r3
 8000d76:	4463      	add	r3, ip
 8000d78:	4698      	mov	r8, r3
 8000d7a:	000e      	movs	r6, r1
 8000d7c:	e07f      	b.n	8000e7e <__aeabi_dadd+0x3fe>
 8000d7e:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <__aeabi_dadd+0x378>)
 8000d80:	1a76      	subs	r6, r6, r1
 8000d82:	4013      	ands	r3, r2
 8000d84:	4698      	mov	r8, r3
 8000d86:	e6f5      	b.n	8000b74 <__aeabi_dadd+0xf4>
 8000d88:	0028      	movs	r0, r5
 8000d8a:	f000 ff9d 	bl	8001cc8 <__clzsi2>
 8000d8e:	0001      	movs	r1, r0
 8000d90:	3118      	adds	r1, #24
 8000d92:	291f      	cmp	r1, #31
 8000d94:	dc00      	bgt.n	8000d98 <__aeabi_dadd+0x318>
 8000d96:	e6cf      	b.n	8000b38 <__aeabi_dadd+0xb8>
 8000d98:	002b      	movs	r3, r5
 8000d9a:	3808      	subs	r0, #8
 8000d9c:	4083      	lsls	r3, r0
 8000d9e:	2500      	movs	r5, #0
 8000da0:	e6d2      	b.n	8000b48 <__aeabi_dadd+0xc8>
 8000da2:	4662      	mov	r2, ip
 8000da4:	433a      	orrs	r2, r7
 8000da6:	0011      	movs	r1, r2
 8000da8:	1e4f      	subs	r7, r1, #1
 8000daa:	41b9      	sbcs	r1, r7
 8000dac:	e6ac      	b.n	8000b08 <__aeabi_dadd+0x88>
 8000dae:	4649      	mov	r1, r9
 8000db0:	0758      	lsls	r0, r3, #29
 8000db2:	08c9      	lsrs	r1, r1, #3
 8000db4:	4301      	orrs	r1, r0
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	e787      	b.n	8000cca <__aeabi_dadd+0x24a>
 8000dba:	4649      	mov	r1, r9
 8000dbc:	075a      	lsls	r2, r3, #29
 8000dbe:	08c9      	lsrs	r1, r1, #3
 8000dc0:	4311      	orrs	r1, r2
 8000dc2:	08db      	lsrs	r3, r3, #3
 8000dc4:	e7a6      	b.n	8000d14 <__aeabi_dadd+0x294>
 8000dc6:	490d      	ldr	r1, [pc, #52]	; (8000dfc <__aeabi_dadd+0x37c>)
 8000dc8:	1c70      	adds	r0, r6, #1
 8000dca:	4208      	tst	r0, r1
 8000dcc:	d000      	beq.n	8000dd0 <__aeabi_dadd+0x350>
 8000dce:	e0bb      	b.n	8000f48 <__aeabi_dadd+0x4c8>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x356>
 8000dd4:	e114      	b.n	8001000 <__aeabi_dadd+0x580>
 8000dd6:	4649      	mov	r1, r9
 8000dd8:	4319      	orrs	r1, r3
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x35e>
 8000ddc:	e175      	b.n	80010ca <__aeabi_dadd+0x64a>
 8000dde:	0029      	movs	r1, r5
 8000de0:	4339      	orrs	r1, r7
 8000de2:	d000      	beq.n	8000de6 <__aeabi_dadd+0x366>
 8000de4:	e17e      	b.n	80010e4 <__aeabi_dadd+0x664>
 8000de6:	4649      	mov	r1, r9
 8000de8:	0758      	lsls	r0, r3, #29
 8000dea:	08c9      	lsrs	r1, r1, #3
 8000dec:	4301      	orrs	r1, r0
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	e76e      	b.n	8000cd0 <__aeabi_dadd+0x250>
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	000007ff 	.word	0x000007ff
 8000df8:	ff7fffff 	.word	0xff7fffff
 8000dfc:	000007fe 	.word	0x000007fe
 8000e00:	4649      	mov	r1, r9
 8000e02:	1bcd      	subs	r5, r1, r7
 8000e04:	4661      	mov	r1, ip
 8000e06:	1a58      	subs	r0, r3, r1
 8000e08:	45a9      	cmp	r9, r5
 8000e0a:	4189      	sbcs	r1, r1
 8000e0c:	4249      	negs	r1, r1
 8000e0e:	4688      	mov	r8, r1
 8000e10:	0001      	movs	r1, r0
 8000e12:	4640      	mov	r0, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	4688      	mov	r8, r1
 8000e18:	0209      	lsls	r1, r1, #8
 8000e1a:	d500      	bpl.n	8000e1e <__aeabi_dadd+0x39e>
 8000e1c:	e0a6      	b.n	8000f6c <__aeabi_dadd+0x4ec>
 8000e1e:	4641      	mov	r1, r8
 8000e20:	4329      	orrs	r1, r5
 8000e22:	d000      	beq.n	8000e26 <__aeabi_dadd+0x3a6>
 8000e24:	e67f      	b.n	8000b26 <__aeabi_dadd+0xa6>
 8000e26:	2300      	movs	r3, #0
 8000e28:	2400      	movs	r4, #0
 8000e2a:	e751      	b.n	8000cd0 <__aeabi_dadd+0x250>
 8000e2c:	4cc7      	ldr	r4, [pc, #796]	; (800114c <__aeabi_dadd+0x6cc>)
 8000e2e:	42a1      	cmp	r1, r4
 8000e30:	d100      	bne.n	8000e34 <__aeabi_dadd+0x3b4>
 8000e32:	e0c7      	b.n	8000fc4 <__aeabi_dadd+0x544>
 8000e34:	2480      	movs	r4, #128	; 0x80
 8000e36:	0424      	lsls	r4, r4, #16
 8000e38:	4323      	orrs	r3, r4
 8000e3a:	2a38      	cmp	r2, #56	; 0x38
 8000e3c:	dc54      	bgt.n	8000ee8 <__aeabi_dadd+0x468>
 8000e3e:	2a1f      	cmp	r2, #31
 8000e40:	dd00      	ble.n	8000e44 <__aeabi_dadd+0x3c4>
 8000e42:	e0cc      	b.n	8000fde <__aeabi_dadd+0x55e>
 8000e44:	2420      	movs	r4, #32
 8000e46:	4648      	mov	r0, r9
 8000e48:	1aa4      	subs	r4, r4, r2
 8000e4a:	001d      	movs	r5, r3
 8000e4c:	464e      	mov	r6, r9
 8000e4e:	40a0      	lsls	r0, r4
 8000e50:	40d6      	lsrs	r6, r2
 8000e52:	40a5      	lsls	r5, r4
 8000e54:	0004      	movs	r4, r0
 8000e56:	40d3      	lsrs	r3, r2
 8000e58:	4662      	mov	r2, ip
 8000e5a:	4335      	orrs	r5, r6
 8000e5c:	1e66      	subs	r6, r4, #1
 8000e5e:	41b4      	sbcs	r4, r6
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	469c      	mov	ip, r3
 8000e64:	4325      	orrs	r5, r4
 8000e66:	e044      	b.n	8000ef2 <__aeabi_dadd+0x472>
 8000e68:	4662      	mov	r2, ip
 8000e6a:	433a      	orrs	r2, r7
 8000e6c:	0015      	movs	r5, r2
 8000e6e:	1e6f      	subs	r7, r5, #1
 8000e70:	41bd      	sbcs	r5, r7
 8000e72:	444d      	add	r5, r9
 8000e74:	454d      	cmp	r5, r9
 8000e76:	4189      	sbcs	r1, r1
 8000e78:	4249      	negs	r1, r1
 8000e7a:	4688      	mov	r8, r1
 8000e7c:	4498      	add	r8, r3
 8000e7e:	4643      	mov	r3, r8
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	d400      	bmi.n	8000e86 <__aeabi_dadd+0x406>
 8000e84:	e718      	b.n	8000cb8 <__aeabi_dadd+0x238>
 8000e86:	4bb1      	ldr	r3, [pc, #708]	; (800114c <__aeabi_dadd+0x6cc>)
 8000e88:	3601      	adds	r6, #1
 8000e8a:	429e      	cmp	r6, r3
 8000e8c:	d049      	beq.n	8000f22 <__aeabi_dadd+0x4a2>
 8000e8e:	4642      	mov	r2, r8
 8000e90:	4baf      	ldr	r3, [pc, #700]	; (8001150 <__aeabi_dadd+0x6d0>)
 8000e92:	2101      	movs	r1, #1
 8000e94:	401a      	ands	r2, r3
 8000e96:	0013      	movs	r3, r2
 8000e98:	086a      	lsrs	r2, r5, #1
 8000e9a:	400d      	ands	r5, r1
 8000e9c:	4315      	orrs	r5, r2
 8000e9e:	07d9      	lsls	r1, r3, #31
 8000ea0:	085b      	lsrs	r3, r3, #1
 8000ea2:	4698      	mov	r8, r3
 8000ea4:	430d      	orrs	r5, r1
 8000ea6:	e665      	b.n	8000b74 <__aeabi_dadd+0xf4>
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	3e1f      	subs	r6, #31
 8000eac:	40f0      	lsrs	r0, r6
 8000eae:	2a20      	cmp	r2, #32
 8000eb0:	d003      	beq.n	8000eba <__aeabi_dadd+0x43a>
 8000eb2:	2140      	movs	r1, #64	; 0x40
 8000eb4:	1a8a      	subs	r2, r1, r2
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	431d      	orrs	r5, r3
 8000eba:	1e69      	subs	r1, r5, #1
 8000ebc:	418d      	sbcs	r5, r1
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	4698      	mov	r8, r3
 8000ec4:	4305      	orrs	r5, r0
 8000ec6:	e6f7      	b.n	8000cb8 <__aeabi_dadd+0x238>
 8000ec8:	0011      	movs	r1, r2
 8000eca:	4665      	mov	r5, ip
 8000ecc:	3920      	subs	r1, #32
 8000ece:	40cd      	lsrs	r5, r1
 8000ed0:	2a20      	cmp	r2, #32
 8000ed2:	d004      	beq.n	8000ede <__aeabi_dadd+0x45e>
 8000ed4:	2040      	movs	r0, #64	; 0x40
 8000ed6:	4661      	mov	r1, ip
 8000ed8:	1a82      	subs	r2, r0, r2
 8000eda:	4091      	lsls	r1, r2
 8000edc:	430f      	orrs	r7, r1
 8000ede:	0039      	movs	r1, r7
 8000ee0:	1e4f      	subs	r7, r1, #1
 8000ee2:	41b9      	sbcs	r1, r7
 8000ee4:	4329      	orrs	r1, r5
 8000ee6:	e60f      	b.n	8000b08 <__aeabi_dadd+0x88>
 8000ee8:	464a      	mov	r2, r9
 8000eea:	4313      	orrs	r3, r2
 8000eec:	001d      	movs	r5, r3
 8000eee:	1e6b      	subs	r3, r5, #1
 8000ef0:	419d      	sbcs	r5, r3
 8000ef2:	1b7d      	subs	r5, r7, r5
 8000ef4:	42af      	cmp	r7, r5
 8000ef6:	419b      	sbcs	r3, r3
 8000ef8:	4662      	mov	r2, ip
 8000efa:	425b      	negs	r3, r3
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	4698      	mov	r8, r3
 8000f00:	4654      	mov	r4, sl
 8000f02:	000e      	movs	r6, r1
 8000f04:	e607      	b.n	8000b16 <__aeabi_dadd+0x96>
 8000f06:	4648      	mov	r0, r9
 8000f08:	4318      	orrs	r0, r3
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_dadd+0x48e>
 8000f0c:	e0b3      	b.n	8001076 <__aeabi_dadd+0x5f6>
 8000f0e:	1e50      	subs	r0, r2, #1
 8000f10:	2a01      	cmp	r2, #1
 8000f12:	d100      	bne.n	8000f16 <__aeabi_dadd+0x496>
 8000f14:	e10d      	b.n	8001132 <__aeabi_dadd+0x6b2>
 8000f16:	4d8d      	ldr	r5, [pc, #564]	; (800114c <__aeabi_dadd+0x6cc>)
 8000f18:	42aa      	cmp	r2, r5
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_dadd+0x49e>
 8000f1c:	e0a5      	b.n	800106a <__aeabi_dadd+0x5ea>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	e710      	b.n	8000d44 <__aeabi_dadd+0x2c4>
 8000f22:	0032      	movs	r2, r6
 8000f24:	2300      	movs	r3, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	e644      	b.n	8000bb4 <__aeabi_dadd+0x134>
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	0038      	movs	r0, r7
 8000f2e:	1a89      	subs	r1, r1, r2
 8000f30:	4665      	mov	r5, ip
 8000f32:	408f      	lsls	r7, r1
 8000f34:	408d      	lsls	r5, r1
 8000f36:	40d0      	lsrs	r0, r2
 8000f38:	1e79      	subs	r1, r7, #1
 8000f3a:	418f      	sbcs	r7, r1
 8000f3c:	4305      	orrs	r5, r0
 8000f3e:	433d      	orrs	r5, r7
 8000f40:	4667      	mov	r7, ip
 8000f42:	40d7      	lsrs	r7, r2
 8000f44:	19db      	adds	r3, r3, r7
 8000f46:	e794      	b.n	8000e72 <__aeabi_dadd+0x3f2>
 8000f48:	4a80      	ldr	r2, [pc, #512]	; (800114c <__aeabi_dadd+0x6cc>)
 8000f4a:	4290      	cmp	r0, r2
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dadd+0x4d0>
 8000f4e:	e0ec      	b.n	800112a <__aeabi_dadd+0x6aa>
 8000f50:	0039      	movs	r1, r7
 8000f52:	4449      	add	r1, r9
 8000f54:	4549      	cmp	r1, r9
 8000f56:	4192      	sbcs	r2, r2
 8000f58:	4463      	add	r3, ip
 8000f5a:	4252      	negs	r2, r2
 8000f5c:	189b      	adds	r3, r3, r2
 8000f5e:	07dd      	lsls	r5, r3, #31
 8000f60:	0849      	lsrs	r1, r1, #1
 8000f62:	085b      	lsrs	r3, r3, #1
 8000f64:	4698      	mov	r8, r3
 8000f66:	0006      	movs	r6, r0
 8000f68:	430d      	orrs	r5, r1
 8000f6a:	e6a5      	b.n	8000cb8 <__aeabi_dadd+0x238>
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	1abd      	subs	r5, r7, r2
 8000f70:	42af      	cmp	r7, r5
 8000f72:	4189      	sbcs	r1, r1
 8000f74:	4662      	mov	r2, ip
 8000f76:	4249      	negs	r1, r1
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	1a5b      	subs	r3, r3, r1
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	4654      	mov	r4, sl
 8000f80:	e5d1      	b.n	8000b26 <__aeabi_dadd+0xa6>
 8000f82:	076c      	lsls	r4, r5, #29
 8000f84:	08f9      	lsrs	r1, r7, #3
 8000f86:	4321      	orrs	r1, r4
 8000f88:	08eb      	lsrs	r3, r5, #3
 8000f8a:	0004      	movs	r4, r0
 8000f8c:	e69d      	b.n	8000cca <__aeabi_dadd+0x24a>
 8000f8e:	464a      	mov	r2, r9
 8000f90:	431a      	orrs	r2, r3
 8000f92:	d175      	bne.n	8001080 <__aeabi_dadd+0x600>
 8000f94:	4661      	mov	r1, ip
 8000f96:	4339      	orrs	r1, r7
 8000f98:	d114      	bne.n	8000fc4 <__aeabi_dadd+0x544>
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	2400      	movs	r4, #0
 8000f9e:	031b      	lsls	r3, r3, #12
 8000fa0:	e6bc      	b.n	8000d1c <__aeabi_dadd+0x29c>
 8000fa2:	464a      	mov	r2, r9
 8000fa4:	1bd5      	subs	r5, r2, r7
 8000fa6:	45a9      	cmp	r9, r5
 8000fa8:	4189      	sbcs	r1, r1
 8000faa:	4662      	mov	r2, ip
 8000fac:	4249      	negs	r1, r1
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	4698      	mov	r8, r3
 8000fb4:	2601      	movs	r6, #1
 8000fb6:	e5ae      	b.n	8000b16 <__aeabi_dadd+0x96>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	08d1      	lsrs	r1, r2, #3
 8000fbc:	075a      	lsls	r2, r3, #29
 8000fbe:	4311      	orrs	r1, r2
 8000fc0:	08db      	lsrs	r3, r3, #3
 8000fc2:	e6a7      	b.n	8000d14 <__aeabi_dadd+0x294>
 8000fc4:	4663      	mov	r3, ip
 8000fc6:	08f9      	lsrs	r1, r7, #3
 8000fc8:	075a      	lsls	r2, r3, #29
 8000fca:	4654      	mov	r4, sl
 8000fcc:	4311      	orrs	r1, r2
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	e6a0      	b.n	8000d14 <__aeabi_dadd+0x294>
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	001d      	movs	r5, r3
 8000fd8:	1e6b      	subs	r3, r5, #1
 8000fda:	419d      	sbcs	r5, r3
 8000fdc:	e6c7      	b.n	8000d6e <__aeabi_dadd+0x2ee>
 8000fde:	0014      	movs	r4, r2
 8000fe0:	001e      	movs	r6, r3
 8000fe2:	3c20      	subs	r4, #32
 8000fe4:	40e6      	lsrs	r6, r4
 8000fe6:	2a20      	cmp	r2, #32
 8000fe8:	d005      	beq.n	8000ff6 <__aeabi_dadd+0x576>
 8000fea:	2440      	movs	r4, #64	; 0x40
 8000fec:	1aa2      	subs	r2, r4, r2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	464a      	mov	r2, r9
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	4691      	mov	r9, r2
 8000ff6:	464d      	mov	r5, r9
 8000ff8:	1e6b      	subs	r3, r5, #1
 8000ffa:	419d      	sbcs	r5, r3
 8000ffc:	4335      	orrs	r5, r6
 8000ffe:	e778      	b.n	8000ef2 <__aeabi_dadd+0x472>
 8001000:	464a      	mov	r2, r9
 8001002:	431a      	orrs	r2, r3
 8001004:	d000      	beq.n	8001008 <__aeabi_dadd+0x588>
 8001006:	e66b      	b.n	8000ce0 <__aeabi_dadd+0x260>
 8001008:	076b      	lsls	r3, r5, #29
 800100a:	08f9      	lsrs	r1, r7, #3
 800100c:	4319      	orrs	r1, r3
 800100e:	08eb      	lsrs	r3, r5, #3
 8001010:	e680      	b.n	8000d14 <__aeabi_dadd+0x294>
 8001012:	4661      	mov	r1, ip
 8001014:	4339      	orrs	r1, r7
 8001016:	d054      	beq.n	80010c2 <__aeabi_dadd+0x642>
 8001018:	4663      	mov	r3, ip
 800101a:	08f9      	lsrs	r1, r7, #3
 800101c:	075c      	lsls	r4, r3, #29
 800101e:	4321      	orrs	r1, r4
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	0004      	movs	r4, r0
 8001024:	e654      	b.n	8000cd0 <__aeabi_dadd+0x250>
 8001026:	464a      	mov	r2, r9
 8001028:	1abd      	subs	r5, r7, r2
 800102a:	42af      	cmp	r7, r5
 800102c:	4189      	sbcs	r1, r1
 800102e:	4662      	mov	r2, ip
 8001030:	4249      	negs	r1, r1
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	1a5b      	subs	r3, r3, r1
 8001036:	4698      	mov	r8, r3
 8001038:	0004      	movs	r4, r0
 800103a:	2601      	movs	r6, #1
 800103c:	e56b      	b.n	8000b16 <__aeabi_dadd+0x96>
 800103e:	464a      	mov	r2, r9
 8001040:	1bd5      	subs	r5, r2, r7
 8001042:	45a9      	cmp	r9, r5
 8001044:	4189      	sbcs	r1, r1
 8001046:	4662      	mov	r2, ip
 8001048:	4249      	negs	r1, r1
 800104a:	1a9a      	subs	r2, r3, r2
 800104c:	1a52      	subs	r2, r2, r1
 800104e:	4690      	mov	r8, r2
 8001050:	0212      	lsls	r2, r2, #8
 8001052:	d532      	bpl.n	80010ba <__aeabi_dadd+0x63a>
 8001054:	464a      	mov	r2, r9
 8001056:	1abd      	subs	r5, r7, r2
 8001058:	42af      	cmp	r7, r5
 800105a:	4189      	sbcs	r1, r1
 800105c:	4662      	mov	r2, ip
 800105e:	4249      	negs	r1, r1
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	1a5b      	subs	r3, r3, r1
 8001064:	4698      	mov	r8, r3
 8001066:	0004      	movs	r4, r0
 8001068:	e584      	b.n	8000b74 <__aeabi_dadd+0xf4>
 800106a:	4663      	mov	r3, ip
 800106c:	08f9      	lsrs	r1, r7, #3
 800106e:	075a      	lsls	r2, r3, #29
 8001070:	4311      	orrs	r1, r2
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	e64e      	b.n	8000d14 <__aeabi_dadd+0x294>
 8001076:	08f9      	lsrs	r1, r7, #3
 8001078:	0768      	lsls	r0, r5, #29
 800107a:	4301      	orrs	r1, r0
 800107c:	08eb      	lsrs	r3, r5, #3
 800107e:	e624      	b.n	8000cca <__aeabi_dadd+0x24a>
 8001080:	4662      	mov	r2, ip
 8001082:	433a      	orrs	r2, r7
 8001084:	d100      	bne.n	8001088 <__aeabi_dadd+0x608>
 8001086:	e698      	b.n	8000dba <__aeabi_dadd+0x33a>
 8001088:	464a      	mov	r2, r9
 800108a:	08d1      	lsrs	r1, r2, #3
 800108c:	075a      	lsls	r2, r3, #29
 800108e:	4311      	orrs	r1, r2
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	031b      	lsls	r3, r3, #12
 8001096:	421a      	tst	r2, r3
 8001098:	d008      	beq.n	80010ac <__aeabi_dadd+0x62c>
 800109a:	4660      	mov	r0, ip
 800109c:	08c5      	lsrs	r5, r0, #3
 800109e:	421d      	tst	r5, r3
 80010a0:	d104      	bne.n	80010ac <__aeabi_dadd+0x62c>
 80010a2:	4654      	mov	r4, sl
 80010a4:	002a      	movs	r2, r5
 80010a6:	08f9      	lsrs	r1, r7, #3
 80010a8:	0743      	lsls	r3, r0, #29
 80010aa:	4319      	orrs	r1, r3
 80010ac:	0f4b      	lsrs	r3, r1, #29
 80010ae:	00c9      	lsls	r1, r1, #3
 80010b0:	075b      	lsls	r3, r3, #29
 80010b2:	08c9      	lsrs	r1, r1, #3
 80010b4:	4319      	orrs	r1, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	e62c      	b.n	8000d14 <__aeabi_dadd+0x294>
 80010ba:	4641      	mov	r1, r8
 80010bc:	4329      	orrs	r1, r5
 80010be:	d000      	beq.n	80010c2 <__aeabi_dadd+0x642>
 80010c0:	e5fa      	b.n	8000cb8 <__aeabi_dadd+0x238>
 80010c2:	2300      	movs	r3, #0
 80010c4:	000a      	movs	r2, r1
 80010c6:	2400      	movs	r4, #0
 80010c8:	e602      	b.n	8000cd0 <__aeabi_dadd+0x250>
 80010ca:	076b      	lsls	r3, r5, #29
 80010cc:	08f9      	lsrs	r1, r7, #3
 80010ce:	4319      	orrs	r1, r3
 80010d0:	08eb      	lsrs	r3, r5, #3
 80010d2:	e5fd      	b.n	8000cd0 <__aeabi_dadd+0x250>
 80010d4:	4663      	mov	r3, ip
 80010d6:	08f9      	lsrs	r1, r7, #3
 80010d8:	075b      	lsls	r3, r3, #29
 80010da:	4319      	orrs	r1, r3
 80010dc:	4663      	mov	r3, ip
 80010de:	0004      	movs	r4, r0
 80010e0:	08db      	lsrs	r3, r3, #3
 80010e2:	e617      	b.n	8000d14 <__aeabi_dadd+0x294>
 80010e4:	003d      	movs	r5, r7
 80010e6:	444d      	add	r5, r9
 80010e8:	4463      	add	r3, ip
 80010ea:	454d      	cmp	r5, r9
 80010ec:	4189      	sbcs	r1, r1
 80010ee:	4698      	mov	r8, r3
 80010f0:	4249      	negs	r1, r1
 80010f2:	4488      	add	r8, r1
 80010f4:	4643      	mov	r3, r8
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	d400      	bmi.n	80010fc <__aeabi_dadd+0x67c>
 80010fa:	e5dd      	b.n	8000cb8 <__aeabi_dadd+0x238>
 80010fc:	4642      	mov	r2, r8
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <__aeabi_dadd+0x6d0>)
 8001100:	2601      	movs	r6, #1
 8001102:	401a      	ands	r2, r3
 8001104:	4690      	mov	r8, r2
 8001106:	e5d7      	b.n	8000cb8 <__aeabi_dadd+0x238>
 8001108:	0010      	movs	r0, r2
 800110a:	001e      	movs	r6, r3
 800110c:	3820      	subs	r0, #32
 800110e:	40c6      	lsrs	r6, r0
 8001110:	2a20      	cmp	r2, #32
 8001112:	d005      	beq.n	8001120 <__aeabi_dadd+0x6a0>
 8001114:	2040      	movs	r0, #64	; 0x40
 8001116:	1a82      	subs	r2, r0, r2
 8001118:	4093      	lsls	r3, r2
 800111a:	464a      	mov	r2, r9
 800111c:	431a      	orrs	r2, r3
 800111e:	4691      	mov	r9, r2
 8001120:	464d      	mov	r5, r9
 8001122:	1e6b      	subs	r3, r5, #1
 8001124:	419d      	sbcs	r5, r3
 8001126:	4335      	orrs	r5, r6
 8001128:	e621      	b.n	8000d6e <__aeabi_dadd+0x2ee>
 800112a:	0002      	movs	r2, r0
 800112c:	2300      	movs	r3, #0
 800112e:	2100      	movs	r1, #0
 8001130:	e540      	b.n	8000bb4 <__aeabi_dadd+0x134>
 8001132:	464a      	mov	r2, r9
 8001134:	19d5      	adds	r5, r2, r7
 8001136:	42bd      	cmp	r5, r7
 8001138:	4189      	sbcs	r1, r1
 800113a:	4463      	add	r3, ip
 800113c:	4698      	mov	r8, r3
 800113e:	4249      	negs	r1, r1
 8001140:	4488      	add	r8, r1
 8001142:	e5b3      	b.n	8000cac <__aeabi_dadd+0x22c>
 8001144:	2100      	movs	r1, #0
 8001146:	4a01      	ldr	r2, [pc, #4]	; (800114c <__aeabi_dadd+0x6cc>)
 8001148:	000b      	movs	r3, r1
 800114a:	e533      	b.n	8000bb4 <__aeabi_dadd+0x134>
 800114c:	000007ff 	.word	0x000007ff
 8001150:	ff7fffff 	.word	0xff7fffff

08001154 <__aeabi_ddiv>:
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001156:	4657      	mov	r7, sl
 8001158:	464e      	mov	r6, r9
 800115a:	4645      	mov	r5, r8
 800115c:	46de      	mov	lr, fp
 800115e:	b5e0      	push	{r5, r6, r7, lr}
 8001160:	4681      	mov	r9, r0
 8001162:	0005      	movs	r5, r0
 8001164:	030c      	lsls	r4, r1, #12
 8001166:	0048      	lsls	r0, r1, #1
 8001168:	4692      	mov	sl, r2
 800116a:	001f      	movs	r7, r3
 800116c:	b085      	sub	sp, #20
 800116e:	0b24      	lsrs	r4, r4, #12
 8001170:	0d40      	lsrs	r0, r0, #21
 8001172:	0fce      	lsrs	r6, r1, #31
 8001174:	2800      	cmp	r0, #0
 8001176:	d059      	beq.n	800122c <__aeabi_ddiv+0xd8>
 8001178:	4b87      	ldr	r3, [pc, #540]	; (8001398 <__aeabi_ddiv+0x244>)
 800117a:	4298      	cmp	r0, r3
 800117c:	d100      	bne.n	8001180 <__aeabi_ddiv+0x2c>
 800117e:	e098      	b.n	80012b2 <__aeabi_ddiv+0x15e>
 8001180:	0f6b      	lsrs	r3, r5, #29
 8001182:	00e4      	lsls	r4, r4, #3
 8001184:	431c      	orrs	r4, r3
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	041b      	lsls	r3, r3, #16
 800118a:	4323      	orrs	r3, r4
 800118c:	4698      	mov	r8, r3
 800118e:	4b83      	ldr	r3, [pc, #524]	; (800139c <__aeabi_ddiv+0x248>)
 8001190:	00ed      	lsls	r5, r5, #3
 8001192:	469b      	mov	fp, r3
 8001194:	2300      	movs	r3, #0
 8001196:	4699      	mov	r9, r3
 8001198:	4483      	add	fp, r0
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	033c      	lsls	r4, r7, #12
 800119e:	007b      	lsls	r3, r7, #1
 80011a0:	4650      	mov	r0, sl
 80011a2:	0b24      	lsrs	r4, r4, #12
 80011a4:	0d5b      	lsrs	r3, r3, #21
 80011a6:	0fff      	lsrs	r7, r7, #31
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d067      	beq.n	800127c <__aeabi_ddiv+0x128>
 80011ac:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <__aeabi_ddiv+0x244>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d018      	beq.n	80011e4 <__aeabi_ddiv+0x90>
 80011b2:	497a      	ldr	r1, [pc, #488]	; (800139c <__aeabi_ddiv+0x248>)
 80011b4:	0f42      	lsrs	r2, r0, #29
 80011b6:	468c      	mov	ip, r1
 80011b8:	00e4      	lsls	r4, r4, #3
 80011ba:	4659      	mov	r1, fp
 80011bc:	4314      	orrs	r4, r2
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	4463      	add	r3, ip
 80011c2:	0412      	lsls	r2, r2, #16
 80011c4:	1acb      	subs	r3, r1, r3
 80011c6:	4314      	orrs	r4, r2
 80011c8:	469b      	mov	fp, r3
 80011ca:	00c2      	lsls	r2, r0, #3
 80011cc:	2000      	movs	r0, #0
 80011ce:	0033      	movs	r3, r6
 80011d0:	407b      	eors	r3, r7
 80011d2:	469a      	mov	sl, r3
 80011d4:	464b      	mov	r3, r9
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	d900      	bls.n	80011dc <__aeabi_ddiv+0x88>
 80011da:	e0ef      	b.n	80013bc <__aeabi_ddiv+0x268>
 80011dc:	4970      	ldr	r1, [pc, #448]	; (80013a0 <__aeabi_ddiv+0x24c>)
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	58cb      	ldr	r3, [r1, r3]
 80011e2:	469f      	mov	pc, r3
 80011e4:	4b6f      	ldr	r3, [pc, #444]	; (80013a4 <__aeabi_ddiv+0x250>)
 80011e6:	4652      	mov	r2, sl
 80011e8:	469c      	mov	ip, r3
 80011ea:	4322      	orrs	r2, r4
 80011ec:	44e3      	add	fp, ip
 80011ee:	2a00      	cmp	r2, #0
 80011f0:	d000      	beq.n	80011f4 <__aeabi_ddiv+0xa0>
 80011f2:	e095      	b.n	8001320 <__aeabi_ddiv+0x1cc>
 80011f4:	4649      	mov	r1, r9
 80011f6:	2302      	movs	r3, #2
 80011f8:	4319      	orrs	r1, r3
 80011fa:	4689      	mov	r9, r1
 80011fc:	2400      	movs	r4, #0
 80011fe:	2002      	movs	r0, #2
 8001200:	e7e5      	b.n	80011ce <__aeabi_ddiv+0x7a>
 8001202:	2300      	movs	r3, #0
 8001204:	2400      	movs	r4, #0
 8001206:	2500      	movs	r5, #0
 8001208:	4652      	mov	r2, sl
 800120a:	051b      	lsls	r3, r3, #20
 800120c:	4323      	orrs	r3, r4
 800120e:	07d2      	lsls	r2, r2, #31
 8001210:	4313      	orrs	r3, r2
 8001212:	0028      	movs	r0, r5
 8001214:	0019      	movs	r1, r3
 8001216:	b005      	add	sp, #20
 8001218:	bcf0      	pop	{r4, r5, r6, r7}
 800121a:	46bb      	mov	fp, r7
 800121c:	46b2      	mov	sl, r6
 800121e:	46a9      	mov	r9, r5
 8001220:	46a0      	mov	r8, r4
 8001222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001224:	2400      	movs	r4, #0
 8001226:	2500      	movs	r5, #0
 8001228:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <__aeabi_ddiv+0x244>)
 800122a:	e7ed      	b.n	8001208 <__aeabi_ddiv+0xb4>
 800122c:	464b      	mov	r3, r9
 800122e:	4323      	orrs	r3, r4
 8001230:	4698      	mov	r8, r3
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0xe2>
 8001234:	e089      	b.n	800134a <__aeabi_ddiv+0x1f6>
 8001236:	2c00      	cmp	r4, #0
 8001238:	d100      	bne.n	800123c <__aeabi_ddiv+0xe8>
 800123a:	e1e0      	b.n	80015fe <__aeabi_ddiv+0x4aa>
 800123c:	0020      	movs	r0, r4
 800123e:	f000 fd43 	bl	8001cc8 <__clzsi2>
 8001242:	0001      	movs	r1, r0
 8001244:	0002      	movs	r2, r0
 8001246:	390b      	subs	r1, #11
 8001248:	231d      	movs	r3, #29
 800124a:	1a5b      	subs	r3, r3, r1
 800124c:	4649      	mov	r1, r9
 800124e:	0010      	movs	r0, r2
 8001250:	40d9      	lsrs	r1, r3
 8001252:	3808      	subs	r0, #8
 8001254:	4084      	lsls	r4, r0
 8001256:	000b      	movs	r3, r1
 8001258:	464d      	mov	r5, r9
 800125a:	4323      	orrs	r3, r4
 800125c:	4698      	mov	r8, r3
 800125e:	4085      	lsls	r5, r0
 8001260:	4851      	ldr	r0, [pc, #324]	; (80013a8 <__aeabi_ddiv+0x254>)
 8001262:	033c      	lsls	r4, r7, #12
 8001264:	1a83      	subs	r3, r0, r2
 8001266:	469b      	mov	fp, r3
 8001268:	2300      	movs	r3, #0
 800126a:	4699      	mov	r9, r3
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	007b      	lsls	r3, r7, #1
 8001270:	4650      	mov	r0, sl
 8001272:	0b24      	lsrs	r4, r4, #12
 8001274:	0d5b      	lsrs	r3, r3, #21
 8001276:	0fff      	lsrs	r7, r7, #31
 8001278:	2b00      	cmp	r3, #0
 800127a:	d197      	bne.n	80011ac <__aeabi_ddiv+0x58>
 800127c:	4652      	mov	r2, sl
 800127e:	4322      	orrs	r2, r4
 8001280:	d055      	beq.n	800132e <__aeabi_ddiv+0x1da>
 8001282:	2c00      	cmp	r4, #0
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x134>
 8001286:	e1ca      	b.n	800161e <__aeabi_ddiv+0x4ca>
 8001288:	0020      	movs	r0, r4
 800128a:	f000 fd1d 	bl	8001cc8 <__clzsi2>
 800128e:	0002      	movs	r2, r0
 8001290:	3a0b      	subs	r2, #11
 8001292:	231d      	movs	r3, #29
 8001294:	0001      	movs	r1, r0
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	4652      	mov	r2, sl
 800129a:	3908      	subs	r1, #8
 800129c:	40da      	lsrs	r2, r3
 800129e:	408c      	lsls	r4, r1
 80012a0:	4314      	orrs	r4, r2
 80012a2:	4652      	mov	r2, sl
 80012a4:	408a      	lsls	r2, r1
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <__aeabi_ddiv+0x258>)
 80012a8:	4458      	add	r0, fp
 80012aa:	469b      	mov	fp, r3
 80012ac:	4483      	add	fp, r0
 80012ae:	2000      	movs	r0, #0
 80012b0:	e78d      	b.n	80011ce <__aeabi_ddiv+0x7a>
 80012b2:	464b      	mov	r3, r9
 80012b4:	4323      	orrs	r3, r4
 80012b6:	4698      	mov	r8, r3
 80012b8:	d140      	bne.n	800133c <__aeabi_ddiv+0x1e8>
 80012ba:	2308      	movs	r3, #8
 80012bc:	4699      	mov	r9, r3
 80012be:	3b06      	subs	r3, #6
 80012c0:	2500      	movs	r5, #0
 80012c2:	4683      	mov	fp, r0
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	e769      	b.n	800119c <__aeabi_ddiv+0x48>
 80012c8:	46b2      	mov	sl, r6
 80012ca:	9b00      	ldr	r3, [sp, #0]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d0a9      	beq.n	8001224 <__aeabi_ddiv+0xd0>
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d100      	bne.n	80012d6 <__aeabi_ddiv+0x182>
 80012d4:	e211      	b.n	80016fa <__aeabi_ddiv+0x5a6>
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d093      	beq.n	8001202 <__aeabi_ddiv+0xae>
 80012da:	4a35      	ldr	r2, [pc, #212]	; (80013b0 <__aeabi_ddiv+0x25c>)
 80012dc:	445a      	add	r2, fp
 80012de:	2a00      	cmp	r2, #0
 80012e0:	dc00      	bgt.n	80012e4 <__aeabi_ddiv+0x190>
 80012e2:	e13c      	b.n	800155e <__aeabi_ddiv+0x40a>
 80012e4:	076b      	lsls	r3, r5, #29
 80012e6:	d000      	beq.n	80012ea <__aeabi_ddiv+0x196>
 80012e8:	e1a7      	b.n	800163a <__aeabi_ddiv+0x4e6>
 80012ea:	08ed      	lsrs	r5, r5, #3
 80012ec:	4643      	mov	r3, r8
 80012ee:	01db      	lsls	r3, r3, #7
 80012f0:	d506      	bpl.n	8001300 <__aeabi_ddiv+0x1ac>
 80012f2:	4642      	mov	r2, r8
 80012f4:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <__aeabi_ddiv+0x260>)
 80012f6:	401a      	ands	r2, r3
 80012f8:	4690      	mov	r8, r2
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	00d2      	lsls	r2, r2, #3
 80012fe:	445a      	add	r2, fp
 8001300:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <__aeabi_ddiv+0x264>)
 8001302:	429a      	cmp	r2, r3
 8001304:	dc8e      	bgt.n	8001224 <__aeabi_ddiv+0xd0>
 8001306:	4643      	mov	r3, r8
 8001308:	0552      	lsls	r2, r2, #21
 800130a:	0758      	lsls	r0, r3, #29
 800130c:	025c      	lsls	r4, r3, #9
 800130e:	4305      	orrs	r5, r0
 8001310:	0b24      	lsrs	r4, r4, #12
 8001312:	0d53      	lsrs	r3, r2, #21
 8001314:	e778      	b.n	8001208 <__aeabi_ddiv+0xb4>
 8001316:	46ba      	mov	sl, r7
 8001318:	46a0      	mov	r8, r4
 800131a:	0015      	movs	r5, r2
 800131c:	9000      	str	r0, [sp, #0]
 800131e:	e7d4      	b.n	80012ca <__aeabi_ddiv+0x176>
 8001320:	464a      	mov	r2, r9
 8001322:	2303      	movs	r3, #3
 8001324:	431a      	orrs	r2, r3
 8001326:	4691      	mov	r9, r2
 8001328:	2003      	movs	r0, #3
 800132a:	4652      	mov	r2, sl
 800132c:	e74f      	b.n	80011ce <__aeabi_ddiv+0x7a>
 800132e:	4649      	mov	r1, r9
 8001330:	2301      	movs	r3, #1
 8001332:	4319      	orrs	r1, r3
 8001334:	4689      	mov	r9, r1
 8001336:	2400      	movs	r4, #0
 8001338:	2001      	movs	r0, #1
 800133a:	e748      	b.n	80011ce <__aeabi_ddiv+0x7a>
 800133c:	230c      	movs	r3, #12
 800133e:	4699      	mov	r9, r3
 8001340:	3b09      	subs	r3, #9
 8001342:	46a0      	mov	r8, r4
 8001344:	4683      	mov	fp, r0
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	e728      	b.n	800119c <__aeabi_ddiv+0x48>
 800134a:	2304      	movs	r3, #4
 800134c:	4699      	mov	r9, r3
 800134e:	2300      	movs	r3, #0
 8001350:	469b      	mov	fp, r3
 8001352:	3301      	adds	r3, #1
 8001354:	2500      	movs	r5, #0
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	e720      	b.n	800119c <__aeabi_ddiv+0x48>
 800135a:	2300      	movs	r3, #0
 800135c:	2480      	movs	r4, #128	; 0x80
 800135e:	469a      	mov	sl, r3
 8001360:	2500      	movs	r5, #0
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <__aeabi_ddiv+0x244>)
 8001364:	0324      	lsls	r4, r4, #12
 8001366:	e74f      	b.n	8001208 <__aeabi_ddiv+0xb4>
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	4641      	mov	r1, r8
 800136c:	031b      	lsls	r3, r3, #12
 800136e:	4219      	tst	r1, r3
 8001370:	d008      	beq.n	8001384 <__aeabi_ddiv+0x230>
 8001372:	421c      	tst	r4, r3
 8001374:	d106      	bne.n	8001384 <__aeabi_ddiv+0x230>
 8001376:	431c      	orrs	r4, r3
 8001378:	0324      	lsls	r4, r4, #12
 800137a:	46ba      	mov	sl, r7
 800137c:	0015      	movs	r5, r2
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <__aeabi_ddiv+0x244>)
 8001380:	0b24      	lsrs	r4, r4, #12
 8001382:	e741      	b.n	8001208 <__aeabi_ddiv+0xb4>
 8001384:	2480      	movs	r4, #128	; 0x80
 8001386:	4643      	mov	r3, r8
 8001388:	0324      	lsls	r4, r4, #12
 800138a:	431c      	orrs	r4, r3
 800138c:	0324      	lsls	r4, r4, #12
 800138e:	46b2      	mov	sl, r6
 8001390:	4b01      	ldr	r3, [pc, #4]	; (8001398 <__aeabi_ddiv+0x244>)
 8001392:	0b24      	lsrs	r4, r4, #12
 8001394:	e738      	b.n	8001208 <__aeabi_ddiv+0xb4>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	000007ff 	.word	0x000007ff
 800139c:	fffffc01 	.word	0xfffffc01
 80013a0:	08006360 	.word	0x08006360
 80013a4:	fffff801 	.word	0xfffff801
 80013a8:	fffffc0d 	.word	0xfffffc0d
 80013ac:	000003f3 	.word	0x000003f3
 80013b0:	000003ff 	.word	0x000003ff
 80013b4:	feffffff 	.word	0xfeffffff
 80013b8:	000007fe 	.word	0x000007fe
 80013bc:	4544      	cmp	r4, r8
 80013be:	d200      	bcs.n	80013c2 <__aeabi_ddiv+0x26e>
 80013c0:	e116      	b.n	80015f0 <__aeabi_ddiv+0x49c>
 80013c2:	d100      	bne.n	80013c6 <__aeabi_ddiv+0x272>
 80013c4:	e111      	b.n	80015ea <__aeabi_ddiv+0x496>
 80013c6:	2301      	movs	r3, #1
 80013c8:	425b      	negs	r3, r3
 80013ca:	469c      	mov	ip, r3
 80013cc:	002e      	movs	r6, r5
 80013ce:	4640      	mov	r0, r8
 80013d0:	2500      	movs	r5, #0
 80013d2:	44e3      	add	fp, ip
 80013d4:	0223      	lsls	r3, r4, #8
 80013d6:	0e14      	lsrs	r4, r2, #24
 80013d8:	431c      	orrs	r4, r3
 80013da:	0c1b      	lsrs	r3, r3, #16
 80013dc:	4699      	mov	r9, r3
 80013de:	0423      	lsls	r3, r4, #16
 80013e0:	0c1f      	lsrs	r7, r3, #16
 80013e2:	0212      	lsls	r2, r2, #8
 80013e4:	4649      	mov	r1, r9
 80013e6:	9200      	str	r2, [sp, #0]
 80013e8:	9701      	str	r7, [sp, #4]
 80013ea:	f7fe ff13 	bl	8000214 <__aeabi_uidivmod>
 80013ee:	0002      	movs	r2, r0
 80013f0:	437a      	muls	r2, r7
 80013f2:	040b      	lsls	r3, r1, #16
 80013f4:	0c31      	lsrs	r1, r6, #16
 80013f6:	4680      	mov	r8, r0
 80013f8:	4319      	orrs	r1, r3
 80013fa:	428a      	cmp	r2, r1
 80013fc:	d90b      	bls.n	8001416 <__aeabi_ddiv+0x2c2>
 80013fe:	2301      	movs	r3, #1
 8001400:	425b      	negs	r3, r3
 8001402:	469c      	mov	ip, r3
 8001404:	1909      	adds	r1, r1, r4
 8001406:	44e0      	add	r8, ip
 8001408:	428c      	cmp	r4, r1
 800140a:	d804      	bhi.n	8001416 <__aeabi_ddiv+0x2c2>
 800140c:	428a      	cmp	r2, r1
 800140e:	d902      	bls.n	8001416 <__aeabi_ddiv+0x2c2>
 8001410:	1e83      	subs	r3, r0, #2
 8001412:	4698      	mov	r8, r3
 8001414:	1909      	adds	r1, r1, r4
 8001416:	1a88      	subs	r0, r1, r2
 8001418:	4649      	mov	r1, r9
 800141a:	f7fe fefb 	bl	8000214 <__aeabi_uidivmod>
 800141e:	0409      	lsls	r1, r1, #16
 8001420:	468c      	mov	ip, r1
 8001422:	0431      	lsls	r1, r6, #16
 8001424:	4666      	mov	r6, ip
 8001426:	9a01      	ldr	r2, [sp, #4]
 8001428:	0c09      	lsrs	r1, r1, #16
 800142a:	4342      	muls	r2, r0
 800142c:	0003      	movs	r3, r0
 800142e:	4331      	orrs	r1, r6
 8001430:	428a      	cmp	r2, r1
 8001432:	d904      	bls.n	800143e <__aeabi_ddiv+0x2ea>
 8001434:	1909      	adds	r1, r1, r4
 8001436:	3b01      	subs	r3, #1
 8001438:	428c      	cmp	r4, r1
 800143a:	d800      	bhi.n	800143e <__aeabi_ddiv+0x2ea>
 800143c:	e111      	b.n	8001662 <__aeabi_ddiv+0x50e>
 800143e:	1a89      	subs	r1, r1, r2
 8001440:	4642      	mov	r2, r8
 8001442:	9e00      	ldr	r6, [sp, #0]
 8001444:	0412      	lsls	r2, r2, #16
 8001446:	431a      	orrs	r2, r3
 8001448:	0c33      	lsrs	r3, r6, #16
 800144a:	001f      	movs	r7, r3
 800144c:	0c10      	lsrs	r0, r2, #16
 800144e:	4690      	mov	r8, r2
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	0413      	lsls	r3, r2, #16
 8001454:	0432      	lsls	r2, r6, #16
 8001456:	0c16      	lsrs	r6, r2, #16
 8001458:	0032      	movs	r2, r6
 800145a:	0c1b      	lsrs	r3, r3, #16
 800145c:	435a      	muls	r2, r3
 800145e:	9603      	str	r6, [sp, #12]
 8001460:	437b      	muls	r3, r7
 8001462:	4346      	muls	r6, r0
 8001464:	4378      	muls	r0, r7
 8001466:	0c17      	lsrs	r7, r2, #16
 8001468:	46bc      	mov	ip, r7
 800146a:	199b      	adds	r3, r3, r6
 800146c:	4463      	add	r3, ip
 800146e:	429e      	cmp	r6, r3
 8001470:	d903      	bls.n	800147a <__aeabi_ddiv+0x326>
 8001472:	2680      	movs	r6, #128	; 0x80
 8001474:	0276      	lsls	r6, r6, #9
 8001476:	46b4      	mov	ip, r6
 8001478:	4460      	add	r0, ip
 800147a:	0c1e      	lsrs	r6, r3, #16
 800147c:	1830      	adds	r0, r6, r0
 800147e:	0416      	lsls	r6, r2, #16
 8001480:	041b      	lsls	r3, r3, #16
 8001482:	0c36      	lsrs	r6, r6, #16
 8001484:	199e      	adds	r6, r3, r6
 8001486:	4281      	cmp	r1, r0
 8001488:	d200      	bcs.n	800148c <__aeabi_ddiv+0x338>
 800148a:	e09c      	b.n	80015c6 <__aeabi_ddiv+0x472>
 800148c:	d100      	bne.n	8001490 <__aeabi_ddiv+0x33c>
 800148e:	e097      	b.n	80015c0 <__aeabi_ddiv+0x46c>
 8001490:	1bae      	subs	r6, r5, r6
 8001492:	1a09      	subs	r1, r1, r0
 8001494:	42b5      	cmp	r5, r6
 8001496:	4180      	sbcs	r0, r0
 8001498:	4240      	negs	r0, r0
 800149a:	1a08      	subs	r0, r1, r0
 800149c:	4284      	cmp	r4, r0
 800149e:	d100      	bne.n	80014a2 <__aeabi_ddiv+0x34e>
 80014a0:	e111      	b.n	80016c6 <__aeabi_ddiv+0x572>
 80014a2:	4649      	mov	r1, r9
 80014a4:	f7fe feb6 	bl	8000214 <__aeabi_uidivmod>
 80014a8:	9a01      	ldr	r2, [sp, #4]
 80014aa:	040b      	lsls	r3, r1, #16
 80014ac:	4342      	muls	r2, r0
 80014ae:	0c31      	lsrs	r1, r6, #16
 80014b0:	0005      	movs	r5, r0
 80014b2:	4319      	orrs	r1, r3
 80014b4:	428a      	cmp	r2, r1
 80014b6:	d907      	bls.n	80014c8 <__aeabi_ddiv+0x374>
 80014b8:	1909      	adds	r1, r1, r4
 80014ba:	3d01      	subs	r5, #1
 80014bc:	428c      	cmp	r4, r1
 80014be:	d803      	bhi.n	80014c8 <__aeabi_ddiv+0x374>
 80014c0:	428a      	cmp	r2, r1
 80014c2:	d901      	bls.n	80014c8 <__aeabi_ddiv+0x374>
 80014c4:	1e85      	subs	r5, r0, #2
 80014c6:	1909      	adds	r1, r1, r4
 80014c8:	1a88      	subs	r0, r1, r2
 80014ca:	4649      	mov	r1, r9
 80014cc:	f7fe fea2 	bl	8000214 <__aeabi_uidivmod>
 80014d0:	0409      	lsls	r1, r1, #16
 80014d2:	468c      	mov	ip, r1
 80014d4:	0431      	lsls	r1, r6, #16
 80014d6:	4666      	mov	r6, ip
 80014d8:	9a01      	ldr	r2, [sp, #4]
 80014da:	0c09      	lsrs	r1, r1, #16
 80014dc:	4342      	muls	r2, r0
 80014de:	0003      	movs	r3, r0
 80014e0:	4331      	orrs	r1, r6
 80014e2:	428a      	cmp	r2, r1
 80014e4:	d907      	bls.n	80014f6 <__aeabi_ddiv+0x3a2>
 80014e6:	1909      	adds	r1, r1, r4
 80014e8:	3b01      	subs	r3, #1
 80014ea:	428c      	cmp	r4, r1
 80014ec:	d803      	bhi.n	80014f6 <__aeabi_ddiv+0x3a2>
 80014ee:	428a      	cmp	r2, r1
 80014f0:	d901      	bls.n	80014f6 <__aeabi_ddiv+0x3a2>
 80014f2:	1e83      	subs	r3, r0, #2
 80014f4:	1909      	adds	r1, r1, r4
 80014f6:	9e03      	ldr	r6, [sp, #12]
 80014f8:	1a89      	subs	r1, r1, r2
 80014fa:	0032      	movs	r2, r6
 80014fc:	042d      	lsls	r5, r5, #16
 80014fe:	431d      	orrs	r5, r3
 8001500:	9f02      	ldr	r7, [sp, #8]
 8001502:	042b      	lsls	r3, r5, #16
 8001504:	0c1b      	lsrs	r3, r3, #16
 8001506:	435a      	muls	r2, r3
 8001508:	437b      	muls	r3, r7
 800150a:	469c      	mov	ip, r3
 800150c:	0c28      	lsrs	r0, r5, #16
 800150e:	4346      	muls	r6, r0
 8001510:	0c13      	lsrs	r3, r2, #16
 8001512:	44b4      	add	ip, r6
 8001514:	4463      	add	r3, ip
 8001516:	4378      	muls	r0, r7
 8001518:	429e      	cmp	r6, r3
 800151a:	d903      	bls.n	8001524 <__aeabi_ddiv+0x3d0>
 800151c:	2680      	movs	r6, #128	; 0x80
 800151e:	0276      	lsls	r6, r6, #9
 8001520:	46b4      	mov	ip, r6
 8001522:	4460      	add	r0, ip
 8001524:	0c1e      	lsrs	r6, r3, #16
 8001526:	0412      	lsls	r2, r2, #16
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	0c12      	lsrs	r2, r2, #16
 800152c:	1830      	adds	r0, r6, r0
 800152e:	189b      	adds	r3, r3, r2
 8001530:	4281      	cmp	r1, r0
 8001532:	d306      	bcc.n	8001542 <__aeabi_ddiv+0x3ee>
 8001534:	d002      	beq.n	800153c <__aeabi_ddiv+0x3e8>
 8001536:	2301      	movs	r3, #1
 8001538:	431d      	orrs	r5, r3
 800153a:	e6ce      	b.n	80012da <__aeabi_ddiv+0x186>
 800153c:	2b00      	cmp	r3, #0
 800153e:	d100      	bne.n	8001542 <__aeabi_ddiv+0x3ee>
 8001540:	e6cb      	b.n	80012da <__aeabi_ddiv+0x186>
 8001542:	1861      	adds	r1, r4, r1
 8001544:	1e6e      	subs	r6, r5, #1
 8001546:	42a1      	cmp	r1, r4
 8001548:	d200      	bcs.n	800154c <__aeabi_ddiv+0x3f8>
 800154a:	e0a4      	b.n	8001696 <__aeabi_ddiv+0x542>
 800154c:	4281      	cmp	r1, r0
 800154e:	d200      	bcs.n	8001552 <__aeabi_ddiv+0x3fe>
 8001550:	e0c9      	b.n	80016e6 <__aeabi_ddiv+0x592>
 8001552:	d100      	bne.n	8001556 <__aeabi_ddiv+0x402>
 8001554:	e0d9      	b.n	800170a <__aeabi_ddiv+0x5b6>
 8001556:	0035      	movs	r5, r6
 8001558:	e7ed      	b.n	8001536 <__aeabi_ddiv+0x3e2>
 800155a:	2501      	movs	r5, #1
 800155c:	426d      	negs	r5, r5
 800155e:	2101      	movs	r1, #1
 8001560:	1a89      	subs	r1, r1, r2
 8001562:	2938      	cmp	r1, #56	; 0x38
 8001564:	dd00      	ble.n	8001568 <__aeabi_ddiv+0x414>
 8001566:	e64c      	b.n	8001202 <__aeabi_ddiv+0xae>
 8001568:	291f      	cmp	r1, #31
 800156a:	dc00      	bgt.n	800156e <__aeabi_ddiv+0x41a>
 800156c:	e07f      	b.n	800166e <__aeabi_ddiv+0x51a>
 800156e:	231f      	movs	r3, #31
 8001570:	425b      	negs	r3, r3
 8001572:	1a9a      	subs	r2, r3, r2
 8001574:	4643      	mov	r3, r8
 8001576:	40d3      	lsrs	r3, r2
 8001578:	2920      	cmp	r1, #32
 800157a:	d004      	beq.n	8001586 <__aeabi_ddiv+0x432>
 800157c:	4644      	mov	r4, r8
 800157e:	4a65      	ldr	r2, [pc, #404]	; (8001714 <__aeabi_ddiv+0x5c0>)
 8001580:	445a      	add	r2, fp
 8001582:	4094      	lsls	r4, r2
 8001584:	4325      	orrs	r5, r4
 8001586:	1e6a      	subs	r2, r5, #1
 8001588:	4195      	sbcs	r5, r2
 800158a:	2207      	movs	r2, #7
 800158c:	432b      	orrs	r3, r5
 800158e:	0015      	movs	r5, r2
 8001590:	2400      	movs	r4, #0
 8001592:	401d      	ands	r5, r3
 8001594:	421a      	tst	r2, r3
 8001596:	d100      	bne.n	800159a <__aeabi_ddiv+0x446>
 8001598:	e0a1      	b.n	80016de <__aeabi_ddiv+0x58a>
 800159a:	220f      	movs	r2, #15
 800159c:	2400      	movs	r4, #0
 800159e:	401a      	ands	r2, r3
 80015a0:	2a04      	cmp	r2, #4
 80015a2:	d100      	bne.n	80015a6 <__aeabi_ddiv+0x452>
 80015a4:	e098      	b.n	80016d8 <__aeabi_ddiv+0x584>
 80015a6:	1d1a      	adds	r2, r3, #4
 80015a8:	429a      	cmp	r2, r3
 80015aa:	419b      	sbcs	r3, r3
 80015ac:	425b      	negs	r3, r3
 80015ae:	18e4      	adds	r4, r4, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	0222      	lsls	r2, r4, #8
 80015b4:	d400      	bmi.n	80015b8 <__aeabi_ddiv+0x464>
 80015b6:	e08f      	b.n	80016d8 <__aeabi_ddiv+0x584>
 80015b8:	2301      	movs	r3, #1
 80015ba:	2400      	movs	r4, #0
 80015bc:	2500      	movs	r5, #0
 80015be:	e623      	b.n	8001208 <__aeabi_ddiv+0xb4>
 80015c0:	42b5      	cmp	r5, r6
 80015c2:	d300      	bcc.n	80015c6 <__aeabi_ddiv+0x472>
 80015c4:	e764      	b.n	8001490 <__aeabi_ddiv+0x33c>
 80015c6:	4643      	mov	r3, r8
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	9b00      	ldr	r3, [sp, #0]
 80015cc:	469c      	mov	ip, r3
 80015ce:	4465      	add	r5, ip
 80015d0:	001f      	movs	r7, r3
 80015d2:	429d      	cmp	r5, r3
 80015d4:	419b      	sbcs	r3, r3
 80015d6:	425b      	negs	r3, r3
 80015d8:	191b      	adds	r3, r3, r4
 80015da:	18c9      	adds	r1, r1, r3
 80015dc:	428c      	cmp	r4, r1
 80015de:	d23a      	bcs.n	8001656 <__aeabi_ddiv+0x502>
 80015e0:	4288      	cmp	r0, r1
 80015e2:	d863      	bhi.n	80016ac <__aeabi_ddiv+0x558>
 80015e4:	d060      	beq.n	80016a8 <__aeabi_ddiv+0x554>
 80015e6:	4690      	mov	r8, r2
 80015e8:	e752      	b.n	8001490 <__aeabi_ddiv+0x33c>
 80015ea:	42aa      	cmp	r2, r5
 80015ec:	d900      	bls.n	80015f0 <__aeabi_ddiv+0x49c>
 80015ee:	e6ea      	b.n	80013c6 <__aeabi_ddiv+0x272>
 80015f0:	4643      	mov	r3, r8
 80015f2:	07de      	lsls	r6, r3, #31
 80015f4:	0858      	lsrs	r0, r3, #1
 80015f6:	086b      	lsrs	r3, r5, #1
 80015f8:	431e      	orrs	r6, r3
 80015fa:	07ed      	lsls	r5, r5, #31
 80015fc:	e6ea      	b.n	80013d4 <__aeabi_ddiv+0x280>
 80015fe:	4648      	mov	r0, r9
 8001600:	f000 fb62 	bl	8001cc8 <__clzsi2>
 8001604:	0001      	movs	r1, r0
 8001606:	0002      	movs	r2, r0
 8001608:	3115      	adds	r1, #21
 800160a:	3220      	adds	r2, #32
 800160c:	291c      	cmp	r1, #28
 800160e:	dc00      	bgt.n	8001612 <__aeabi_ddiv+0x4be>
 8001610:	e61a      	b.n	8001248 <__aeabi_ddiv+0xf4>
 8001612:	464b      	mov	r3, r9
 8001614:	3808      	subs	r0, #8
 8001616:	4083      	lsls	r3, r0
 8001618:	2500      	movs	r5, #0
 800161a:	4698      	mov	r8, r3
 800161c:	e620      	b.n	8001260 <__aeabi_ddiv+0x10c>
 800161e:	f000 fb53 	bl	8001cc8 <__clzsi2>
 8001622:	0003      	movs	r3, r0
 8001624:	001a      	movs	r2, r3
 8001626:	3215      	adds	r2, #21
 8001628:	3020      	adds	r0, #32
 800162a:	2a1c      	cmp	r2, #28
 800162c:	dc00      	bgt.n	8001630 <__aeabi_ddiv+0x4dc>
 800162e:	e630      	b.n	8001292 <__aeabi_ddiv+0x13e>
 8001630:	4654      	mov	r4, sl
 8001632:	3b08      	subs	r3, #8
 8001634:	2200      	movs	r2, #0
 8001636:	409c      	lsls	r4, r3
 8001638:	e635      	b.n	80012a6 <__aeabi_ddiv+0x152>
 800163a:	230f      	movs	r3, #15
 800163c:	402b      	ands	r3, r5
 800163e:	2b04      	cmp	r3, #4
 8001640:	d100      	bne.n	8001644 <__aeabi_ddiv+0x4f0>
 8001642:	e652      	b.n	80012ea <__aeabi_ddiv+0x196>
 8001644:	2305      	movs	r3, #5
 8001646:	425b      	negs	r3, r3
 8001648:	42ab      	cmp	r3, r5
 800164a:	419b      	sbcs	r3, r3
 800164c:	3504      	adds	r5, #4
 800164e:	425b      	negs	r3, r3
 8001650:	08ed      	lsrs	r5, r5, #3
 8001652:	4498      	add	r8, r3
 8001654:	e64a      	b.n	80012ec <__aeabi_ddiv+0x198>
 8001656:	428c      	cmp	r4, r1
 8001658:	d1c5      	bne.n	80015e6 <__aeabi_ddiv+0x492>
 800165a:	42af      	cmp	r7, r5
 800165c:	d9c0      	bls.n	80015e0 <__aeabi_ddiv+0x48c>
 800165e:	4690      	mov	r8, r2
 8001660:	e716      	b.n	8001490 <__aeabi_ddiv+0x33c>
 8001662:	428a      	cmp	r2, r1
 8001664:	d800      	bhi.n	8001668 <__aeabi_ddiv+0x514>
 8001666:	e6ea      	b.n	800143e <__aeabi_ddiv+0x2ea>
 8001668:	1e83      	subs	r3, r0, #2
 800166a:	1909      	adds	r1, r1, r4
 800166c:	e6e7      	b.n	800143e <__aeabi_ddiv+0x2ea>
 800166e:	4a2a      	ldr	r2, [pc, #168]	; (8001718 <__aeabi_ddiv+0x5c4>)
 8001670:	0028      	movs	r0, r5
 8001672:	445a      	add	r2, fp
 8001674:	4643      	mov	r3, r8
 8001676:	4095      	lsls	r5, r2
 8001678:	4093      	lsls	r3, r2
 800167a:	40c8      	lsrs	r0, r1
 800167c:	1e6a      	subs	r2, r5, #1
 800167e:	4195      	sbcs	r5, r2
 8001680:	4644      	mov	r4, r8
 8001682:	4303      	orrs	r3, r0
 8001684:	432b      	orrs	r3, r5
 8001686:	40cc      	lsrs	r4, r1
 8001688:	075a      	lsls	r2, r3, #29
 800168a:	d092      	beq.n	80015b2 <__aeabi_ddiv+0x45e>
 800168c:	220f      	movs	r2, #15
 800168e:	401a      	ands	r2, r3
 8001690:	2a04      	cmp	r2, #4
 8001692:	d188      	bne.n	80015a6 <__aeabi_ddiv+0x452>
 8001694:	e78d      	b.n	80015b2 <__aeabi_ddiv+0x45e>
 8001696:	0035      	movs	r5, r6
 8001698:	4281      	cmp	r1, r0
 800169a:	d000      	beq.n	800169e <__aeabi_ddiv+0x54a>
 800169c:	e74b      	b.n	8001536 <__aeabi_ddiv+0x3e2>
 800169e:	9a00      	ldr	r2, [sp, #0]
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d000      	beq.n	80016a6 <__aeabi_ddiv+0x552>
 80016a4:	e747      	b.n	8001536 <__aeabi_ddiv+0x3e2>
 80016a6:	e618      	b.n	80012da <__aeabi_ddiv+0x186>
 80016a8:	42ae      	cmp	r6, r5
 80016aa:	d99c      	bls.n	80015e6 <__aeabi_ddiv+0x492>
 80016ac:	2302      	movs	r3, #2
 80016ae:	425b      	negs	r3, r3
 80016b0:	469c      	mov	ip, r3
 80016b2:	9b00      	ldr	r3, [sp, #0]
 80016b4:	44e0      	add	r8, ip
 80016b6:	469c      	mov	ip, r3
 80016b8:	4465      	add	r5, ip
 80016ba:	429d      	cmp	r5, r3
 80016bc:	419b      	sbcs	r3, r3
 80016be:	425b      	negs	r3, r3
 80016c0:	191b      	adds	r3, r3, r4
 80016c2:	18c9      	adds	r1, r1, r3
 80016c4:	e6e4      	b.n	8001490 <__aeabi_ddiv+0x33c>
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <__aeabi_ddiv+0x5c8>)
 80016c8:	445a      	add	r2, fp
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	dc00      	bgt.n	80016d0 <__aeabi_ddiv+0x57c>
 80016ce:	e744      	b.n	800155a <__aeabi_ddiv+0x406>
 80016d0:	2301      	movs	r3, #1
 80016d2:	2500      	movs	r5, #0
 80016d4:	4498      	add	r8, r3
 80016d6:	e609      	b.n	80012ec <__aeabi_ddiv+0x198>
 80016d8:	0765      	lsls	r5, r4, #29
 80016da:	0264      	lsls	r4, r4, #9
 80016dc:	0b24      	lsrs	r4, r4, #12
 80016de:	08db      	lsrs	r3, r3, #3
 80016e0:	431d      	orrs	r5, r3
 80016e2:	2300      	movs	r3, #0
 80016e4:	e590      	b.n	8001208 <__aeabi_ddiv+0xb4>
 80016e6:	9e00      	ldr	r6, [sp, #0]
 80016e8:	3d02      	subs	r5, #2
 80016ea:	0072      	lsls	r2, r6, #1
 80016ec:	42b2      	cmp	r2, r6
 80016ee:	41bf      	sbcs	r7, r7
 80016f0:	427f      	negs	r7, r7
 80016f2:	193c      	adds	r4, r7, r4
 80016f4:	1909      	adds	r1, r1, r4
 80016f6:	9200      	str	r2, [sp, #0]
 80016f8:	e7ce      	b.n	8001698 <__aeabi_ddiv+0x544>
 80016fa:	2480      	movs	r4, #128	; 0x80
 80016fc:	4643      	mov	r3, r8
 80016fe:	0324      	lsls	r4, r4, #12
 8001700:	431c      	orrs	r4, r3
 8001702:	0324      	lsls	r4, r4, #12
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <__aeabi_ddiv+0x5cc>)
 8001706:	0b24      	lsrs	r4, r4, #12
 8001708:	e57e      	b.n	8001208 <__aeabi_ddiv+0xb4>
 800170a:	9a00      	ldr	r2, [sp, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d3ea      	bcc.n	80016e6 <__aeabi_ddiv+0x592>
 8001710:	0035      	movs	r5, r6
 8001712:	e7c4      	b.n	800169e <__aeabi_ddiv+0x54a>
 8001714:	0000043e 	.word	0x0000043e
 8001718:	0000041e 	.word	0x0000041e
 800171c:	000003ff 	.word	0x000003ff
 8001720:	000007ff 	.word	0x000007ff

08001724 <__aeabi_dmul>:
 8001724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001726:	4657      	mov	r7, sl
 8001728:	464e      	mov	r6, r9
 800172a:	4645      	mov	r5, r8
 800172c:	46de      	mov	lr, fp
 800172e:	b5e0      	push	{r5, r6, r7, lr}
 8001730:	4698      	mov	r8, r3
 8001732:	030c      	lsls	r4, r1, #12
 8001734:	004b      	lsls	r3, r1, #1
 8001736:	0006      	movs	r6, r0
 8001738:	4692      	mov	sl, r2
 800173a:	b087      	sub	sp, #28
 800173c:	0b24      	lsrs	r4, r4, #12
 800173e:	0d5b      	lsrs	r3, r3, #21
 8001740:	0fcf      	lsrs	r7, r1, #31
 8001742:	2b00      	cmp	r3, #0
 8001744:	d06c      	beq.n	8001820 <__aeabi_dmul+0xfc>
 8001746:	4add      	ldr	r2, [pc, #884]	; (8001abc <__aeabi_dmul+0x398>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d100      	bne.n	800174e <__aeabi_dmul+0x2a>
 800174c:	e086      	b.n	800185c <__aeabi_dmul+0x138>
 800174e:	0f42      	lsrs	r2, r0, #29
 8001750:	00e4      	lsls	r4, r4, #3
 8001752:	4314      	orrs	r4, r2
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	0412      	lsls	r2, r2, #16
 8001758:	4314      	orrs	r4, r2
 800175a:	4ad9      	ldr	r2, [pc, #868]	; (8001ac0 <__aeabi_dmul+0x39c>)
 800175c:	00c5      	lsls	r5, r0, #3
 800175e:	4694      	mov	ip, r2
 8001760:	4463      	add	r3, ip
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2300      	movs	r3, #0
 8001766:	4699      	mov	r9, r3
 8001768:	469b      	mov	fp, r3
 800176a:	4643      	mov	r3, r8
 800176c:	4642      	mov	r2, r8
 800176e:	031e      	lsls	r6, r3, #12
 8001770:	0fd2      	lsrs	r2, r2, #31
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4650      	mov	r0, sl
 8001776:	4690      	mov	r8, r2
 8001778:	0b36      	lsrs	r6, r6, #12
 800177a:	0d5b      	lsrs	r3, r3, #21
 800177c:	d100      	bne.n	8001780 <__aeabi_dmul+0x5c>
 800177e:	e078      	b.n	8001872 <__aeabi_dmul+0x14e>
 8001780:	4ace      	ldr	r2, [pc, #824]	; (8001abc <__aeabi_dmul+0x398>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d01d      	beq.n	80017c2 <__aeabi_dmul+0x9e>
 8001786:	49ce      	ldr	r1, [pc, #824]	; (8001ac0 <__aeabi_dmul+0x39c>)
 8001788:	0f42      	lsrs	r2, r0, #29
 800178a:	468c      	mov	ip, r1
 800178c:	9900      	ldr	r1, [sp, #0]
 800178e:	4463      	add	r3, ip
 8001790:	00f6      	lsls	r6, r6, #3
 8001792:	468c      	mov	ip, r1
 8001794:	4316      	orrs	r6, r2
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	449c      	add	ip, r3
 800179a:	0412      	lsls	r2, r2, #16
 800179c:	4663      	mov	r3, ip
 800179e:	4316      	orrs	r6, r2
 80017a0:	00c2      	lsls	r2, r0, #3
 80017a2:	2000      	movs	r0, #0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	9900      	ldr	r1, [sp, #0]
 80017a8:	4643      	mov	r3, r8
 80017aa:	3101      	adds	r1, #1
 80017ac:	468c      	mov	ip, r1
 80017ae:	4649      	mov	r1, r9
 80017b0:	407b      	eors	r3, r7
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	290f      	cmp	r1, #15
 80017b6:	d900      	bls.n	80017ba <__aeabi_dmul+0x96>
 80017b8:	e07e      	b.n	80018b8 <__aeabi_dmul+0x194>
 80017ba:	4bc2      	ldr	r3, [pc, #776]	; (8001ac4 <__aeabi_dmul+0x3a0>)
 80017bc:	0089      	lsls	r1, r1, #2
 80017be:	5859      	ldr	r1, [r3, r1]
 80017c0:	468f      	mov	pc, r1
 80017c2:	4652      	mov	r2, sl
 80017c4:	9b00      	ldr	r3, [sp, #0]
 80017c6:	4332      	orrs	r2, r6
 80017c8:	d000      	beq.n	80017cc <__aeabi_dmul+0xa8>
 80017ca:	e156      	b.n	8001a7a <__aeabi_dmul+0x356>
 80017cc:	49bb      	ldr	r1, [pc, #748]	; (8001abc <__aeabi_dmul+0x398>)
 80017ce:	2600      	movs	r6, #0
 80017d0:	468c      	mov	ip, r1
 80017d2:	4463      	add	r3, ip
 80017d4:	4649      	mov	r1, r9
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2302      	movs	r3, #2
 80017da:	4319      	orrs	r1, r3
 80017dc:	4689      	mov	r9, r1
 80017de:	2002      	movs	r0, #2
 80017e0:	e7e1      	b.n	80017a6 <__aeabi_dmul+0x82>
 80017e2:	4643      	mov	r3, r8
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	0034      	movs	r4, r6
 80017e8:	0015      	movs	r5, r2
 80017ea:	4683      	mov	fp, r0
 80017ec:	465b      	mov	r3, fp
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d05e      	beq.n	80018b0 <__aeabi_dmul+0x18c>
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d100      	bne.n	80017f8 <__aeabi_dmul+0xd4>
 80017f6:	e1f3      	b.n	8001be0 <__aeabi_dmul+0x4bc>
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d000      	beq.n	80017fe <__aeabi_dmul+0xda>
 80017fc:	e118      	b.n	8001a30 <__aeabi_dmul+0x30c>
 80017fe:	2200      	movs	r2, #0
 8001800:	2400      	movs	r4, #0
 8001802:	2500      	movs	r5, #0
 8001804:	9b01      	ldr	r3, [sp, #4]
 8001806:	0512      	lsls	r2, r2, #20
 8001808:	4322      	orrs	r2, r4
 800180a:	07db      	lsls	r3, r3, #31
 800180c:	431a      	orrs	r2, r3
 800180e:	0028      	movs	r0, r5
 8001810:	0011      	movs	r1, r2
 8001812:	b007      	add	sp, #28
 8001814:	bcf0      	pop	{r4, r5, r6, r7}
 8001816:	46bb      	mov	fp, r7
 8001818:	46b2      	mov	sl, r6
 800181a:	46a9      	mov	r9, r5
 800181c:	46a0      	mov	r8, r4
 800181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001820:	0025      	movs	r5, r4
 8001822:	4305      	orrs	r5, r0
 8001824:	d100      	bne.n	8001828 <__aeabi_dmul+0x104>
 8001826:	e141      	b.n	8001aac <__aeabi_dmul+0x388>
 8001828:	2c00      	cmp	r4, #0
 800182a:	d100      	bne.n	800182e <__aeabi_dmul+0x10a>
 800182c:	e1ad      	b.n	8001b8a <__aeabi_dmul+0x466>
 800182e:	0020      	movs	r0, r4
 8001830:	f000 fa4a 	bl	8001cc8 <__clzsi2>
 8001834:	0001      	movs	r1, r0
 8001836:	0002      	movs	r2, r0
 8001838:	390b      	subs	r1, #11
 800183a:	231d      	movs	r3, #29
 800183c:	0010      	movs	r0, r2
 800183e:	1a5b      	subs	r3, r3, r1
 8001840:	0031      	movs	r1, r6
 8001842:	0035      	movs	r5, r6
 8001844:	3808      	subs	r0, #8
 8001846:	4084      	lsls	r4, r0
 8001848:	40d9      	lsrs	r1, r3
 800184a:	4085      	lsls	r5, r0
 800184c:	430c      	orrs	r4, r1
 800184e:	489e      	ldr	r0, [pc, #632]	; (8001ac8 <__aeabi_dmul+0x3a4>)
 8001850:	1a83      	subs	r3, r0, r2
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2300      	movs	r3, #0
 8001856:	4699      	mov	r9, r3
 8001858:	469b      	mov	fp, r3
 800185a:	e786      	b.n	800176a <__aeabi_dmul+0x46>
 800185c:	0005      	movs	r5, r0
 800185e:	4325      	orrs	r5, r4
 8001860:	d000      	beq.n	8001864 <__aeabi_dmul+0x140>
 8001862:	e11c      	b.n	8001a9e <__aeabi_dmul+0x37a>
 8001864:	2208      	movs	r2, #8
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2302      	movs	r3, #2
 800186a:	2400      	movs	r4, #0
 800186c:	4691      	mov	r9, r2
 800186e:	469b      	mov	fp, r3
 8001870:	e77b      	b.n	800176a <__aeabi_dmul+0x46>
 8001872:	4652      	mov	r2, sl
 8001874:	4332      	orrs	r2, r6
 8001876:	d100      	bne.n	800187a <__aeabi_dmul+0x156>
 8001878:	e10a      	b.n	8001a90 <__aeabi_dmul+0x36c>
 800187a:	2e00      	cmp	r6, #0
 800187c:	d100      	bne.n	8001880 <__aeabi_dmul+0x15c>
 800187e:	e176      	b.n	8001b6e <__aeabi_dmul+0x44a>
 8001880:	0030      	movs	r0, r6
 8001882:	f000 fa21 	bl	8001cc8 <__clzsi2>
 8001886:	0002      	movs	r2, r0
 8001888:	3a0b      	subs	r2, #11
 800188a:	231d      	movs	r3, #29
 800188c:	0001      	movs	r1, r0
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	4652      	mov	r2, sl
 8001892:	3908      	subs	r1, #8
 8001894:	40da      	lsrs	r2, r3
 8001896:	408e      	lsls	r6, r1
 8001898:	4316      	orrs	r6, r2
 800189a:	4652      	mov	r2, sl
 800189c:	408a      	lsls	r2, r1
 800189e:	9b00      	ldr	r3, [sp, #0]
 80018a0:	4989      	ldr	r1, [pc, #548]	; (8001ac8 <__aeabi_dmul+0x3a4>)
 80018a2:	1a18      	subs	r0, r3, r0
 80018a4:	0003      	movs	r3, r0
 80018a6:	468c      	mov	ip, r1
 80018a8:	4463      	add	r3, ip
 80018aa:	2000      	movs	r0, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	e77a      	b.n	80017a6 <__aeabi_dmul+0x82>
 80018b0:	2400      	movs	r4, #0
 80018b2:	2500      	movs	r5, #0
 80018b4:	4a81      	ldr	r2, [pc, #516]	; (8001abc <__aeabi_dmul+0x398>)
 80018b6:	e7a5      	b.n	8001804 <__aeabi_dmul+0xe0>
 80018b8:	0c2f      	lsrs	r7, r5, #16
 80018ba:	042d      	lsls	r5, r5, #16
 80018bc:	0c2d      	lsrs	r5, r5, #16
 80018be:	002b      	movs	r3, r5
 80018c0:	0c11      	lsrs	r1, r2, #16
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	0c12      	lsrs	r2, r2, #16
 80018c6:	4353      	muls	r3, r2
 80018c8:	4698      	mov	r8, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	0028      	movs	r0, r5
 80018ce:	437b      	muls	r3, r7
 80018d0:	4699      	mov	r9, r3
 80018d2:	4348      	muls	r0, r1
 80018d4:	4448      	add	r0, r9
 80018d6:	4683      	mov	fp, r0
 80018d8:	4640      	mov	r0, r8
 80018da:	000b      	movs	r3, r1
 80018dc:	0c00      	lsrs	r0, r0, #16
 80018de:	4682      	mov	sl, r0
 80018e0:	4658      	mov	r0, fp
 80018e2:	437b      	muls	r3, r7
 80018e4:	4450      	add	r0, sl
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	4581      	cmp	r9, r0
 80018ea:	d906      	bls.n	80018fa <__aeabi_dmul+0x1d6>
 80018ec:	469a      	mov	sl, r3
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	025b      	lsls	r3, r3, #9
 80018f2:	4699      	mov	r9, r3
 80018f4:	44ca      	add	sl, r9
 80018f6:	4653      	mov	r3, sl
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	0c03      	lsrs	r3, r0, #16
 80018fc:	469b      	mov	fp, r3
 80018fe:	4643      	mov	r3, r8
 8001900:	041b      	lsls	r3, r3, #16
 8001902:	0400      	lsls	r0, r0, #16
 8001904:	0c1b      	lsrs	r3, r3, #16
 8001906:	4698      	mov	r8, r3
 8001908:	0003      	movs	r3, r0
 800190a:	4443      	add	r3, r8
 800190c:	9304      	str	r3, [sp, #16]
 800190e:	0c33      	lsrs	r3, r6, #16
 8001910:	4699      	mov	r9, r3
 8001912:	002b      	movs	r3, r5
 8001914:	0436      	lsls	r6, r6, #16
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	4373      	muls	r3, r6
 800191a:	4698      	mov	r8, r3
 800191c:	0033      	movs	r3, r6
 800191e:	437b      	muls	r3, r7
 8001920:	469a      	mov	sl, r3
 8001922:	464b      	mov	r3, r9
 8001924:	435d      	muls	r5, r3
 8001926:	435f      	muls	r7, r3
 8001928:	4643      	mov	r3, r8
 800192a:	4455      	add	r5, sl
 800192c:	0c18      	lsrs	r0, r3, #16
 800192e:	1940      	adds	r0, r0, r5
 8001930:	4582      	cmp	sl, r0
 8001932:	d903      	bls.n	800193c <__aeabi_dmul+0x218>
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	469a      	mov	sl, r3
 800193a:	4457      	add	r7, sl
 800193c:	0c05      	lsrs	r5, r0, #16
 800193e:	19eb      	adds	r3, r5, r7
 8001940:	9305      	str	r3, [sp, #20]
 8001942:	4643      	mov	r3, r8
 8001944:	041d      	lsls	r5, r3, #16
 8001946:	0c2d      	lsrs	r5, r5, #16
 8001948:	0400      	lsls	r0, r0, #16
 800194a:	1940      	adds	r0, r0, r5
 800194c:	0c25      	lsrs	r5, r4, #16
 800194e:	0424      	lsls	r4, r4, #16
 8001950:	0c24      	lsrs	r4, r4, #16
 8001952:	0027      	movs	r7, r4
 8001954:	4357      	muls	r7, r2
 8001956:	436a      	muls	r2, r5
 8001958:	4690      	mov	r8, r2
 800195a:	002a      	movs	r2, r5
 800195c:	0c3b      	lsrs	r3, r7, #16
 800195e:	469a      	mov	sl, r3
 8001960:	434a      	muls	r2, r1
 8001962:	4361      	muls	r1, r4
 8001964:	4441      	add	r1, r8
 8001966:	4451      	add	r1, sl
 8001968:	4483      	add	fp, r0
 800196a:	4588      	cmp	r8, r1
 800196c:	d903      	bls.n	8001976 <__aeabi_dmul+0x252>
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	4698      	mov	r8, r3
 8001974:	4442      	add	r2, r8
 8001976:	043f      	lsls	r7, r7, #16
 8001978:	0c0b      	lsrs	r3, r1, #16
 800197a:	0c3f      	lsrs	r7, r7, #16
 800197c:	0409      	lsls	r1, r1, #16
 800197e:	19c9      	adds	r1, r1, r7
 8001980:	0027      	movs	r7, r4
 8001982:	4698      	mov	r8, r3
 8001984:	464b      	mov	r3, r9
 8001986:	4377      	muls	r7, r6
 8001988:	435c      	muls	r4, r3
 800198a:	436e      	muls	r6, r5
 800198c:	435d      	muls	r5, r3
 800198e:	0c3b      	lsrs	r3, r7, #16
 8001990:	4699      	mov	r9, r3
 8001992:	19a4      	adds	r4, r4, r6
 8001994:	444c      	add	r4, r9
 8001996:	4442      	add	r2, r8
 8001998:	9503      	str	r5, [sp, #12]
 800199a:	42a6      	cmp	r6, r4
 800199c:	d904      	bls.n	80019a8 <__aeabi_dmul+0x284>
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	4698      	mov	r8, r3
 80019a4:	4445      	add	r5, r8
 80019a6:	9503      	str	r5, [sp, #12]
 80019a8:	9b02      	ldr	r3, [sp, #8]
 80019aa:	043f      	lsls	r7, r7, #16
 80019ac:	445b      	add	r3, fp
 80019ae:	001e      	movs	r6, r3
 80019b0:	4283      	cmp	r3, r0
 80019b2:	4180      	sbcs	r0, r0
 80019b4:	0423      	lsls	r3, r4, #16
 80019b6:	4698      	mov	r8, r3
 80019b8:	9b05      	ldr	r3, [sp, #20]
 80019ba:	0c3f      	lsrs	r7, r7, #16
 80019bc:	4447      	add	r7, r8
 80019be:	4698      	mov	r8, r3
 80019c0:	1876      	adds	r6, r6, r1
 80019c2:	428e      	cmp	r6, r1
 80019c4:	4189      	sbcs	r1, r1
 80019c6:	4447      	add	r7, r8
 80019c8:	4240      	negs	r0, r0
 80019ca:	183d      	adds	r5, r7, r0
 80019cc:	46a8      	mov	r8, r5
 80019ce:	4693      	mov	fp, r2
 80019d0:	4249      	negs	r1, r1
 80019d2:	468a      	mov	sl, r1
 80019d4:	44c3      	add	fp, r8
 80019d6:	429f      	cmp	r7, r3
 80019d8:	41bf      	sbcs	r7, r7
 80019da:	4580      	cmp	r8, r0
 80019dc:	4180      	sbcs	r0, r0
 80019de:	9b03      	ldr	r3, [sp, #12]
 80019e0:	44da      	add	sl, fp
 80019e2:	4698      	mov	r8, r3
 80019e4:	4653      	mov	r3, sl
 80019e6:	4240      	negs	r0, r0
 80019e8:	427f      	negs	r7, r7
 80019ea:	4307      	orrs	r7, r0
 80019ec:	0c24      	lsrs	r4, r4, #16
 80019ee:	4593      	cmp	fp, r2
 80019f0:	4192      	sbcs	r2, r2
 80019f2:	458a      	cmp	sl, r1
 80019f4:	4189      	sbcs	r1, r1
 80019f6:	193f      	adds	r7, r7, r4
 80019f8:	0ddc      	lsrs	r4, r3, #23
 80019fa:	9b04      	ldr	r3, [sp, #16]
 80019fc:	0275      	lsls	r5, r6, #9
 80019fe:	431d      	orrs	r5, r3
 8001a00:	1e68      	subs	r0, r5, #1
 8001a02:	4185      	sbcs	r5, r0
 8001a04:	4653      	mov	r3, sl
 8001a06:	4252      	negs	r2, r2
 8001a08:	4249      	negs	r1, r1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	18bf      	adds	r7, r7, r2
 8001a0e:	4447      	add	r7, r8
 8001a10:	0df6      	lsrs	r6, r6, #23
 8001a12:	027f      	lsls	r7, r7, #9
 8001a14:	4335      	orrs	r5, r6
 8001a16:	025a      	lsls	r2, r3, #9
 8001a18:	433c      	orrs	r4, r7
 8001a1a:	4315      	orrs	r5, r2
 8001a1c:	01fb      	lsls	r3, r7, #7
 8001a1e:	d400      	bmi.n	8001a22 <__aeabi_dmul+0x2fe>
 8001a20:	e0c1      	b.n	8001ba6 <__aeabi_dmul+0x482>
 8001a22:	2101      	movs	r1, #1
 8001a24:	086a      	lsrs	r2, r5, #1
 8001a26:	400d      	ands	r5, r1
 8001a28:	4315      	orrs	r5, r2
 8001a2a:	07e2      	lsls	r2, r4, #31
 8001a2c:	4315      	orrs	r5, r2
 8001a2e:	0864      	lsrs	r4, r4, #1
 8001a30:	4926      	ldr	r1, [pc, #152]	; (8001acc <__aeabi_dmul+0x3a8>)
 8001a32:	4461      	add	r1, ip
 8001a34:	2900      	cmp	r1, #0
 8001a36:	dd56      	ble.n	8001ae6 <__aeabi_dmul+0x3c2>
 8001a38:	076b      	lsls	r3, r5, #29
 8001a3a:	d009      	beq.n	8001a50 <__aeabi_dmul+0x32c>
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	402a      	ands	r2, r5
 8001a40:	2a04      	cmp	r2, #4
 8001a42:	d005      	beq.n	8001a50 <__aeabi_dmul+0x32c>
 8001a44:	1d2a      	adds	r2, r5, #4
 8001a46:	42aa      	cmp	r2, r5
 8001a48:	41ad      	sbcs	r5, r5
 8001a4a:	426d      	negs	r5, r5
 8001a4c:	1964      	adds	r4, r4, r5
 8001a4e:	0015      	movs	r5, r2
 8001a50:	01e3      	lsls	r3, r4, #7
 8001a52:	d504      	bpl.n	8001a5e <__aeabi_dmul+0x33a>
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <__aeabi_dmul+0x3ac>)
 8001a58:	00c9      	lsls	r1, r1, #3
 8001a5a:	4014      	ands	r4, r2
 8001a5c:	4461      	add	r1, ip
 8001a5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <__aeabi_dmul+0x3b0>)
 8001a60:	4291      	cmp	r1, r2
 8001a62:	dd00      	ble.n	8001a66 <__aeabi_dmul+0x342>
 8001a64:	e724      	b.n	80018b0 <__aeabi_dmul+0x18c>
 8001a66:	0762      	lsls	r2, r4, #29
 8001a68:	08ed      	lsrs	r5, r5, #3
 8001a6a:	0264      	lsls	r4, r4, #9
 8001a6c:	0549      	lsls	r1, r1, #21
 8001a6e:	4315      	orrs	r5, r2
 8001a70:	0b24      	lsrs	r4, r4, #12
 8001a72:	0d4a      	lsrs	r2, r1, #21
 8001a74:	e6c6      	b.n	8001804 <__aeabi_dmul+0xe0>
 8001a76:	9701      	str	r7, [sp, #4]
 8001a78:	e6b8      	b.n	80017ec <__aeabi_dmul+0xc8>
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <__aeabi_dmul+0x398>)
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	4694      	mov	ip, r2
 8001a80:	4463      	add	r3, ip
 8001a82:	464a      	mov	r2, r9
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2303      	movs	r3, #3
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	4691      	mov	r9, r2
 8001a8c:	4652      	mov	r2, sl
 8001a8e:	e68a      	b.n	80017a6 <__aeabi_dmul+0x82>
 8001a90:	4649      	mov	r1, r9
 8001a92:	2301      	movs	r3, #1
 8001a94:	4319      	orrs	r1, r3
 8001a96:	4689      	mov	r9, r1
 8001a98:	2600      	movs	r6, #0
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	e683      	b.n	80017a6 <__aeabi_dmul+0x82>
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	0005      	movs	r5, r0
 8001aa6:	4691      	mov	r9, r2
 8001aa8:	469b      	mov	fp, r3
 8001aaa:	e65e      	b.n	800176a <__aeabi_dmul+0x46>
 8001aac:	2304      	movs	r3, #4
 8001aae:	4699      	mov	r9, r3
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	2400      	movs	r4, #0
 8001ab8:	469b      	mov	fp, r3
 8001aba:	e656      	b.n	800176a <__aeabi_dmul+0x46>
 8001abc:	000007ff 	.word	0x000007ff
 8001ac0:	fffffc01 	.word	0xfffffc01
 8001ac4:	080063a0 	.word	0x080063a0
 8001ac8:	fffffc0d 	.word	0xfffffc0d
 8001acc:	000003ff 	.word	0x000003ff
 8001ad0:	feffffff 	.word	0xfeffffff
 8001ad4:	000007fe 	.word	0x000007fe
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2480      	movs	r4, #128	; 0x80
 8001adc:	2500      	movs	r5, #0
 8001ade:	4a44      	ldr	r2, [pc, #272]	; (8001bf0 <__aeabi_dmul+0x4cc>)
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	0324      	lsls	r4, r4, #12
 8001ae4:	e68e      	b.n	8001804 <__aeabi_dmul+0xe0>
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	1a40      	subs	r0, r0, r1
 8001aea:	2838      	cmp	r0, #56	; 0x38
 8001aec:	dd00      	ble.n	8001af0 <__aeabi_dmul+0x3cc>
 8001aee:	e686      	b.n	80017fe <__aeabi_dmul+0xda>
 8001af0:	281f      	cmp	r0, #31
 8001af2:	dd5b      	ble.n	8001bac <__aeabi_dmul+0x488>
 8001af4:	221f      	movs	r2, #31
 8001af6:	0023      	movs	r3, r4
 8001af8:	4252      	negs	r2, r2
 8001afa:	1a51      	subs	r1, r2, r1
 8001afc:	40cb      	lsrs	r3, r1
 8001afe:	0019      	movs	r1, r3
 8001b00:	2820      	cmp	r0, #32
 8001b02:	d003      	beq.n	8001b0c <__aeabi_dmul+0x3e8>
 8001b04:	4a3b      	ldr	r2, [pc, #236]	; (8001bf4 <__aeabi_dmul+0x4d0>)
 8001b06:	4462      	add	r2, ip
 8001b08:	4094      	lsls	r4, r2
 8001b0a:	4325      	orrs	r5, r4
 8001b0c:	1e6a      	subs	r2, r5, #1
 8001b0e:	4195      	sbcs	r5, r2
 8001b10:	002a      	movs	r2, r5
 8001b12:	430a      	orrs	r2, r1
 8001b14:	2107      	movs	r1, #7
 8001b16:	000d      	movs	r5, r1
 8001b18:	2400      	movs	r4, #0
 8001b1a:	4015      	ands	r5, r2
 8001b1c:	4211      	tst	r1, r2
 8001b1e:	d05b      	beq.n	8001bd8 <__aeabi_dmul+0x4b4>
 8001b20:	210f      	movs	r1, #15
 8001b22:	2400      	movs	r4, #0
 8001b24:	4011      	ands	r1, r2
 8001b26:	2904      	cmp	r1, #4
 8001b28:	d053      	beq.n	8001bd2 <__aeabi_dmul+0x4ae>
 8001b2a:	1d11      	adds	r1, r2, #4
 8001b2c:	4291      	cmp	r1, r2
 8001b2e:	4192      	sbcs	r2, r2
 8001b30:	4252      	negs	r2, r2
 8001b32:	18a4      	adds	r4, r4, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	0223      	lsls	r3, r4, #8
 8001b38:	d54b      	bpl.n	8001bd2 <__aeabi_dmul+0x4ae>
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2400      	movs	r4, #0
 8001b3e:	2500      	movs	r5, #0
 8001b40:	e660      	b.n	8001804 <__aeabi_dmul+0xe0>
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	031b      	lsls	r3, r3, #12
 8001b46:	421c      	tst	r4, r3
 8001b48:	d009      	beq.n	8001b5e <__aeabi_dmul+0x43a>
 8001b4a:	421e      	tst	r6, r3
 8001b4c:	d107      	bne.n	8001b5e <__aeabi_dmul+0x43a>
 8001b4e:	4333      	orrs	r3, r6
 8001b50:	031c      	lsls	r4, r3, #12
 8001b52:	4643      	mov	r3, r8
 8001b54:	0015      	movs	r5, r2
 8001b56:	0b24      	lsrs	r4, r4, #12
 8001b58:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <__aeabi_dmul+0x4cc>)
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	e652      	b.n	8001804 <__aeabi_dmul+0xe0>
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	0312      	lsls	r2, r2, #12
 8001b62:	4314      	orrs	r4, r2
 8001b64:	0324      	lsls	r4, r4, #12
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <__aeabi_dmul+0x4cc>)
 8001b68:	0b24      	lsrs	r4, r4, #12
 8001b6a:	9701      	str	r7, [sp, #4]
 8001b6c:	e64a      	b.n	8001804 <__aeabi_dmul+0xe0>
 8001b6e:	f000 f8ab 	bl	8001cc8 <__clzsi2>
 8001b72:	0003      	movs	r3, r0
 8001b74:	001a      	movs	r2, r3
 8001b76:	3215      	adds	r2, #21
 8001b78:	3020      	adds	r0, #32
 8001b7a:	2a1c      	cmp	r2, #28
 8001b7c:	dc00      	bgt.n	8001b80 <__aeabi_dmul+0x45c>
 8001b7e:	e684      	b.n	800188a <__aeabi_dmul+0x166>
 8001b80:	4656      	mov	r6, sl
 8001b82:	3b08      	subs	r3, #8
 8001b84:	2200      	movs	r2, #0
 8001b86:	409e      	lsls	r6, r3
 8001b88:	e689      	b.n	800189e <__aeabi_dmul+0x17a>
 8001b8a:	f000 f89d 	bl	8001cc8 <__clzsi2>
 8001b8e:	0001      	movs	r1, r0
 8001b90:	0002      	movs	r2, r0
 8001b92:	3115      	adds	r1, #21
 8001b94:	3220      	adds	r2, #32
 8001b96:	291c      	cmp	r1, #28
 8001b98:	dc00      	bgt.n	8001b9c <__aeabi_dmul+0x478>
 8001b9a:	e64e      	b.n	800183a <__aeabi_dmul+0x116>
 8001b9c:	0034      	movs	r4, r6
 8001b9e:	3808      	subs	r0, #8
 8001ba0:	2500      	movs	r5, #0
 8001ba2:	4084      	lsls	r4, r0
 8001ba4:	e653      	b.n	800184e <__aeabi_dmul+0x12a>
 8001ba6:	9b00      	ldr	r3, [sp, #0]
 8001ba8:	469c      	mov	ip, r3
 8001baa:	e741      	b.n	8001a30 <__aeabi_dmul+0x30c>
 8001bac:	4912      	ldr	r1, [pc, #72]	; (8001bf8 <__aeabi_dmul+0x4d4>)
 8001bae:	0022      	movs	r2, r4
 8001bb0:	4461      	add	r1, ip
 8001bb2:	002e      	movs	r6, r5
 8001bb4:	408d      	lsls	r5, r1
 8001bb6:	408a      	lsls	r2, r1
 8001bb8:	40c6      	lsrs	r6, r0
 8001bba:	1e69      	subs	r1, r5, #1
 8001bbc:	418d      	sbcs	r5, r1
 8001bbe:	4332      	orrs	r2, r6
 8001bc0:	432a      	orrs	r2, r5
 8001bc2:	40c4      	lsrs	r4, r0
 8001bc4:	0753      	lsls	r3, r2, #29
 8001bc6:	d0b6      	beq.n	8001b36 <__aeabi_dmul+0x412>
 8001bc8:	210f      	movs	r1, #15
 8001bca:	4011      	ands	r1, r2
 8001bcc:	2904      	cmp	r1, #4
 8001bce:	d1ac      	bne.n	8001b2a <__aeabi_dmul+0x406>
 8001bd0:	e7b1      	b.n	8001b36 <__aeabi_dmul+0x412>
 8001bd2:	0765      	lsls	r5, r4, #29
 8001bd4:	0264      	lsls	r4, r4, #9
 8001bd6:	0b24      	lsrs	r4, r4, #12
 8001bd8:	08d2      	lsrs	r2, r2, #3
 8001bda:	4315      	orrs	r5, r2
 8001bdc:	2200      	movs	r2, #0
 8001bde:	e611      	b.n	8001804 <__aeabi_dmul+0xe0>
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	0312      	lsls	r2, r2, #12
 8001be4:	4314      	orrs	r4, r2
 8001be6:	0324      	lsls	r4, r4, #12
 8001be8:	4a01      	ldr	r2, [pc, #4]	; (8001bf0 <__aeabi_dmul+0x4cc>)
 8001bea:	0b24      	lsrs	r4, r4, #12
 8001bec:	e60a      	b.n	8001804 <__aeabi_dmul+0xe0>
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	000007ff 	.word	0x000007ff
 8001bf4:	0000043e 	.word	0x0000043e
 8001bf8:	0000041e 	.word	0x0000041e

08001bfc <__aeabi_d2iz>:
 8001bfc:	000a      	movs	r2, r1
 8001bfe:	b530      	push	{r4, r5, lr}
 8001c00:	4c13      	ldr	r4, [pc, #76]	; (8001c50 <__aeabi_d2iz+0x54>)
 8001c02:	0053      	lsls	r3, r2, #1
 8001c04:	0309      	lsls	r1, r1, #12
 8001c06:	0005      	movs	r5, r0
 8001c08:	0b09      	lsrs	r1, r1, #12
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	0d5b      	lsrs	r3, r3, #21
 8001c0e:	0fd2      	lsrs	r2, r2, #31
 8001c10:	42a3      	cmp	r3, r4
 8001c12:	dd04      	ble.n	8001c1e <__aeabi_d2iz+0x22>
 8001c14:	480f      	ldr	r0, [pc, #60]	; (8001c54 <__aeabi_d2iz+0x58>)
 8001c16:	4283      	cmp	r3, r0
 8001c18:	dd02      	ble.n	8001c20 <__aeabi_d2iz+0x24>
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <__aeabi_d2iz+0x5c>)
 8001c1c:	18d0      	adds	r0, r2, r3
 8001c1e:	bd30      	pop	{r4, r5, pc}
 8001c20:	2080      	movs	r0, #128	; 0x80
 8001c22:	0340      	lsls	r0, r0, #13
 8001c24:	4301      	orrs	r1, r0
 8001c26:	480d      	ldr	r0, [pc, #52]	; (8001c5c <__aeabi_d2iz+0x60>)
 8001c28:	1ac0      	subs	r0, r0, r3
 8001c2a:	281f      	cmp	r0, #31
 8001c2c:	dd08      	ble.n	8001c40 <__aeabi_d2iz+0x44>
 8001c2e:	480c      	ldr	r0, [pc, #48]	; (8001c60 <__aeabi_d2iz+0x64>)
 8001c30:	1ac3      	subs	r3, r0, r3
 8001c32:	40d9      	lsrs	r1, r3
 8001c34:	000b      	movs	r3, r1
 8001c36:	4258      	negs	r0, r3
 8001c38:	2a00      	cmp	r2, #0
 8001c3a:	d1f0      	bne.n	8001c1e <__aeabi_d2iz+0x22>
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	e7ee      	b.n	8001c1e <__aeabi_d2iz+0x22>
 8001c40:	4c08      	ldr	r4, [pc, #32]	; (8001c64 <__aeabi_d2iz+0x68>)
 8001c42:	40c5      	lsrs	r5, r0
 8001c44:	46a4      	mov	ip, r4
 8001c46:	4463      	add	r3, ip
 8001c48:	4099      	lsls	r1, r3
 8001c4a:	000b      	movs	r3, r1
 8001c4c:	432b      	orrs	r3, r5
 8001c4e:	e7f2      	b.n	8001c36 <__aeabi_d2iz+0x3a>
 8001c50:	000003fe 	.word	0x000003fe
 8001c54:	0000041d 	.word	0x0000041d
 8001c58:	7fffffff 	.word	0x7fffffff
 8001c5c:	00000433 	.word	0x00000433
 8001c60:	00000413 	.word	0x00000413
 8001c64:	fffffbed 	.word	0xfffffbed

08001c68 <__aeabi_i2d>:
 8001c68:	b570      	push	{r4, r5, r6, lr}
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	d016      	beq.n	8001c9c <__aeabi_i2d+0x34>
 8001c6e:	17c3      	asrs	r3, r0, #31
 8001c70:	18c5      	adds	r5, r0, r3
 8001c72:	405d      	eors	r5, r3
 8001c74:	0fc4      	lsrs	r4, r0, #31
 8001c76:	0028      	movs	r0, r5
 8001c78:	f000 f826 	bl	8001cc8 <__clzsi2>
 8001c7c:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <__aeabi_i2d+0x5c>)
 8001c7e:	1a12      	subs	r2, r2, r0
 8001c80:	280a      	cmp	r0, #10
 8001c82:	dc16      	bgt.n	8001cb2 <__aeabi_i2d+0x4a>
 8001c84:	0003      	movs	r3, r0
 8001c86:	002e      	movs	r6, r5
 8001c88:	3315      	adds	r3, #21
 8001c8a:	409e      	lsls	r6, r3
 8001c8c:	230b      	movs	r3, #11
 8001c8e:	1a18      	subs	r0, r3, r0
 8001c90:	40c5      	lsrs	r5, r0
 8001c92:	0553      	lsls	r3, r2, #21
 8001c94:	032d      	lsls	r5, r5, #12
 8001c96:	0b2d      	lsrs	r5, r5, #12
 8001c98:	0d5b      	lsrs	r3, r3, #21
 8001c9a:	e003      	b.n	8001ca4 <__aeabi_i2d+0x3c>
 8001c9c:	2400      	movs	r4, #0
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2500      	movs	r5, #0
 8001ca2:	2600      	movs	r6, #0
 8001ca4:	051b      	lsls	r3, r3, #20
 8001ca6:	432b      	orrs	r3, r5
 8001ca8:	07e4      	lsls	r4, r4, #31
 8001caa:	4323      	orrs	r3, r4
 8001cac:	0030      	movs	r0, r6
 8001cae:	0019      	movs	r1, r3
 8001cb0:	bd70      	pop	{r4, r5, r6, pc}
 8001cb2:	380b      	subs	r0, #11
 8001cb4:	4085      	lsls	r5, r0
 8001cb6:	0553      	lsls	r3, r2, #21
 8001cb8:	032d      	lsls	r5, r5, #12
 8001cba:	2600      	movs	r6, #0
 8001cbc:	0b2d      	lsrs	r5, r5, #12
 8001cbe:	0d5b      	lsrs	r3, r3, #21
 8001cc0:	e7f0      	b.n	8001ca4 <__aeabi_i2d+0x3c>
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	0000041e 	.word	0x0000041e

08001cc8 <__clzsi2>:
 8001cc8:	211c      	movs	r1, #28
 8001cca:	2301      	movs	r3, #1
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	4298      	cmp	r0, r3
 8001cd0:	d301      	bcc.n	8001cd6 <__clzsi2+0xe>
 8001cd2:	0c00      	lsrs	r0, r0, #16
 8001cd4:	3910      	subs	r1, #16
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	4298      	cmp	r0, r3
 8001cda:	d301      	bcc.n	8001ce0 <__clzsi2+0x18>
 8001cdc:	0a00      	lsrs	r0, r0, #8
 8001cde:	3908      	subs	r1, #8
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	4298      	cmp	r0, r3
 8001ce4:	d301      	bcc.n	8001cea <__clzsi2+0x22>
 8001ce6:	0900      	lsrs	r0, r0, #4
 8001ce8:	3904      	subs	r1, #4
 8001cea:	a202      	add	r2, pc, #8	; (adr r2, 8001cf4 <__clzsi2+0x2c>)
 8001cec:	5c10      	ldrb	r0, [r2, r0]
 8001cee:	1840      	adds	r0, r0, r1
 8001cf0:	4770      	bx	lr
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	02020304 	.word	0x02020304
 8001cf8:	01010101 	.word	0x01010101
	...

08001d04 <__clzdi2>:
 8001d04:	b510      	push	{r4, lr}
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d103      	bne.n	8001d12 <__clzdi2+0xe>
 8001d0a:	f7ff ffdd 	bl	8001cc8 <__clzsi2>
 8001d0e:	3020      	adds	r0, #32
 8001d10:	e002      	b.n	8001d18 <__clzdi2+0x14>
 8001d12:	1c08      	adds	r0, r1, #0
 8001d14:	f7ff ffd8 	bl	8001cc8 <__clzsi2>
 8001d18:	bd10      	pop	{r4, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)

08001d1c <bq_init>:
#include "stm32l0xx_hal.h"
#include "i2c.h"

#define I2C hi2c1

int bq_init(){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	// return BAT_INIT_FAIL if not able to init (BAT_INIT_SUCCESS for success)

	/* === Set BQ Max Battery Capacity === */
	if (BQ27441_setCapacity(BAT_CAP_MAX) != BAT_INIT_SUCCESS) return BAT_INIT_FAIL;
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <bq_init+0x34>)
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 f818 	bl	8001d58 <BQ27441_setCapacity>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d002      	beq.n	8001d34 <bq_init+0x18>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	425b      	negs	r3, r3
 8001d32:	e00a      	b.n	8001d4a <bq_init+0x2e>
	/* === Set BQ Max Battery Energy === */
	/*
		Design Energy should be set to be Design Capacity × 3.7 if using the bq27441-G1A or Design
		Capacity × 3.8 if using the bq27441-G1B
	*/
	if (BQ27441_setDesignEnergy((uint16_t) ((float) BAT_CAP_MAX * 3.7)) != BAT_INIT_SUCCESS) return BAT_INIT_FAIL;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <bq_init+0x38>)
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 f834 	bl	8001da4 <BQ27441_setDesignEnergy>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d002      	beq.n	8001d48 <bq_init+0x2c>
 8001d42:	2301      	movs	r3, #1
 8001d44:	425b      	negs	r3, r3
 8001d46:	e000      	b.n	8001d4a <bq_init+0x2e>
//	retval = BQ27441_writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
//	if (retval != BAT_INIT_SUCCESS)
//		return BAT_INIT_FAIL;


	return BAT_INIT_SUCCESS;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	00001130 	.word	0x00001130
 8001d54:	00003f98 	.word	0x00003f98

08001d58 <BQ27441_setCapacity>:
 ************************** Initialization Functions *************************
 *****************************************************************************/

// Configures the design capacity of the connected battery.
int BQ27441_setCapacity(uint16_t capacity)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	0002      	movs	r2, r0
 8001d60:	1dbb      	adds	r3, r7, #6
 8001d62:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0A (10)
	// Design capacity is a 2-byte piece of data - MSB first
	// Unit: mAh

	uint8_t capMSB = capacity >> 8;
 8001d64:	1dbb      	adds	r3, r7, #6
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	200f      	movs	r0, #15
 8001d6e:	183b      	adds	r3, r7, r0
 8001d70:	701a      	strb	r2, [r3, #0]
	uint8_t capLSB = capacity & 0x00FF;
 8001d72:	240e      	movs	r4, #14
 8001d74:	193b      	adds	r3, r7, r4
 8001d76:	1dba      	adds	r2, r7, #6
 8001d78:	8812      	ldrh	r2, [r2, #0]
 8001d7a:	701a      	strb	r2, [r3, #0]
	uint8_t capacityData[2] = {capLSB, capMSB};
 8001d7c:	210c      	movs	r1, #12
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	193a      	adds	r2, r7, r4
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	183a      	adds	r2, r7, r0
 8001d8a:	7812      	ldrb	r2, [r2, #0]
 8001d8c:	705a      	strb	r2, [r3, #1]
	return BQ27441_writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
 8001d8e:	187a      	adds	r2, r7, r1
 8001d90:	2302      	movs	r3, #2
 8001d92:	210a      	movs	r1, #10
 8001d94:	2052      	movs	r0, #82	; 0x52
 8001d96:	f000 f94b 	bl	8002030 <BQ27441_writeExtendedData>
 8001d9a:	0003      	movs	r3, r0
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b005      	add	sp, #20
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <BQ27441_setDesignEnergy>:

// Configures the design energy of the connected battery.
int BQ27441_setDesignEnergy(uint16_t energy)
{
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	0002      	movs	r2, r0
 8001dac:	1dbb      	adds	r3, r7, #6
 8001dae:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0C (12)
	// Design energy is a 2-byte piece of data - MSB first
	// Unit: mWh

	uint8_t enMSB = energy >> 8;
 8001db0:	1dbb      	adds	r3, r7, #6
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	200f      	movs	r0, #15
 8001dba:	183b      	adds	r3, r7, r0
 8001dbc:	701a      	strb	r2, [r3, #0]
	uint8_t enLSB = energy & 0x00FF;
 8001dbe:	240e      	movs	r4, #14
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	1dba      	adds	r2, r7, #6
 8001dc4:	8812      	ldrh	r2, [r2, #0]
 8001dc6:	701a      	strb	r2, [r3, #0]
	uint8_t energyData[2] = {enLSB, enMSB};
 8001dc8:	210c      	movs	r1, #12
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	193a      	adds	r2, r7, r4
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	183a      	adds	r2, r7, r0
 8001dd6:	7812      	ldrb	r2, [r2, #0]
 8001dd8:	705a      	strb	r2, [r3, #1]
	return BQ27441_writeExtendedData(BQ27441_ID_STATE, 12, energyData, 2);
 8001dda:	187a      	adds	r2, r7, r1
 8001ddc:	2302      	movs	r3, #2
 8001dde:	210c      	movs	r1, #12
 8001de0:	2052      	movs	r0, #82	; 0x52
 8001de2:	f000 f925 	bl	8002030 <BQ27441_writeExtendedData>
 8001de6:	0003      	movs	r3, r0
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b005      	add	sp, #20
 8001dee:	bd90      	pop	{r4, r7, pc}

08001df0 <BQ27441_voltage>:
/*****************************************************************************
 ********************** Battery Characteristics Functions ********************
 *****************************************************************************/
// Reads and returns the battery voltage
uint16_t BQ27441_voltage(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	return BQ27441_readWord(BQ27441_COMMAND_VOLTAGE);
 8001df4:	2004      	movs	r0, #4
 8001df6:	f000 f983 	bl	8002100 <BQ27441_readWord>
 8001dfa:	0003      	movs	r3, r0
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <BQ27441_current>:

// Reads and returns the specified current measurement
int16_t BQ27441_current(current_measure type)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	0002      	movs	r2, r0
 8001e0a:	1dfb      	adds	r3, r7, #7
 8001e0c:	701a      	strb	r2, [r3, #0]
	int16_t current = 0;
 8001e0e:	230e      	movs	r3, #14
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	2200      	movs	r2, #0
 8001e14:	801a      	strh	r2, [r3, #0]
	switch (type)
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d017      	beq.n	8001e4e <BQ27441_current+0x4c>
 8001e1e:	dc1f      	bgt.n	8001e60 <BQ27441_current+0x5e>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <BQ27441_current+0x28>
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d009      	beq.n	8001e3c <BQ27441_current+0x3a>
 8001e28:	e01a      	b.n	8001e60 <BQ27441_current+0x5e>
	{
	case AVG:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_CURRENT);
 8001e2a:	2010      	movs	r0, #16
 8001e2c:	f000 f968 	bl	8002100 <BQ27441_readWord>
 8001e30:	0003      	movs	r3, r0
 8001e32:	001a      	movs	r2, r3
 8001e34:	230e      	movs	r3, #14
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	801a      	strh	r2, [r3, #0]
		break;
 8001e3a:	e011      	b.n	8001e60 <BQ27441_current+0x5e>
	case STBY:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_STDBY_CURRENT);
 8001e3c:	2012      	movs	r0, #18
 8001e3e:	f000 f95f 	bl	8002100 <BQ27441_readWord>
 8001e42:	0003      	movs	r3, r0
 8001e44:	001a      	movs	r2, r3
 8001e46:	230e      	movs	r3, #14
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	801a      	strh	r2, [r3, #0]
		break;
 8001e4c:	e008      	b.n	8001e60 <BQ27441_current+0x5e>
	case MAX:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_MAX_CURRENT);
 8001e4e:	2014      	movs	r0, #20
 8001e50:	f000 f956 	bl	8002100 <BQ27441_readWord>
 8001e54:	0003      	movs	r3, r0
 8001e56:	001a      	movs	r2, r3
 8001e58:	230e      	movs	r3, #14
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	801a      	strh	r2, [r3, #0]
		break;
 8001e5e:	46c0      	nop			; (mov r8, r8)
	}

	return current;
 8001e60:	230e      	movs	r3, #14
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b004      	add	sp, #16
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <BQ27441_capacity>:

// Reads and returns the specified capacity measurement
uint16_t BQ27441_capacity(capacity_measure type)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	0002      	movs	r2, r0
 8001e78:	1dfb      	adds	r3, r7, #7
 8001e7a:	701a      	strb	r2, [r3, #0]
	uint16_t capacity = 0;
 8001e7c:	230e      	movs	r3, #14
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	801a      	strh	r2, [r3, #0]
	switch (type)
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d845      	bhi.n	8001f18 <BQ27441_capacity+0xa8>
 8001e8c:	009a      	lsls	r2, r3, #2
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <BQ27441_capacity+0xb8>)
 8001e90:	18d3      	adds	r3, r2, r3
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	469f      	mov	pc, r3
	{
	case REMAIN:
		return BQ27441_readWord(BQ27441_COMMAND_REM_CAPACITY);
 8001e96:	200c      	movs	r0, #12
 8001e98:	f000 f932 	bl	8002100 <BQ27441_readWord>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	e03e      	b.n	8001f1e <BQ27441_capacity+0xae>
		break;
	case FULL:
		return BQ27441_readWord(BQ27441_COMMAND_FULL_CAPACITY);
 8001ea0:	200e      	movs	r0, #14
 8001ea2:	f000 f92d 	bl	8002100 <BQ27441_readWord>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	e039      	b.n	8001f1e <BQ27441_capacity+0xae>
		break;
	case AVAIL:
		capacity = BQ27441_readWord(BQ27441_COMMAND_NOM_CAPACITY);
 8001eaa:	230e      	movs	r3, #14
 8001eac:	18fc      	adds	r4, r7, r3
 8001eae:	2008      	movs	r0, #8
 8001eb0:	f000 f926 	bl	8002100 <BQ27441_readWord>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	8023      	strh	r3, [r4, #0]
		break;
 8001eb8:	e02e      	b.n	8001f18 <BQ27441_capacity+0xa8>
	case AVAIL_FULL:
		capacity = BQ27441_readWord(BQ27441_COMMAND_AVAIL_CAPACITY);
 8001eba:	230e      	movs	r3, #14
 8001ebc:	18fc      	adds	r4, r7, r3
 8001ebe:	200a      	movs	r0, #10
 8001ec0:	f000 f91e 	bl	8002100 <BQ27441_readWord>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	8023      	strh	r3, [r4, #0]
		break;
 8001ec8:	e026      	b.n	8001f18 <BQ27441_capacity+0xa8>
	case REMAIN_F:
		capacity = BQ27441_readWord(BQ27441_COMMAND_REM_CAP_FIL);
 8001eca:	230e      	movs	r3, #14
 8001ecc:	18fc      	adds	r4, r7, r3
 8001ece:	202a      	movs	r0, #42	; 0x2a
 8001ed0:	f000 f916 	bl	8002100 <BQ27441_readWord>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	8023      	strh	r3, [r4, #0]
		break;
 8001ed8:	e01e      	b.n	8001f18 <BQ27441_capacity+0xa8>
	case REMAIN_UF:
		capacity = BQ27441_readWord(BQ27441_COMMAND_REM_CAP_UNFL);
 8001eda:	230e      	movs	r3, #14
 8001edc:	18fc      	adds	r4, r7, r3
 8001ede:	2028      	movs	r0, #40	; 0x28
 8001ee0:	f000 f90e 	bl	8002100 <BQ27441_readWord>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	8023      	strh	r3, [r4, #0]
		break;
 8001ee8:	e016      	b.n	8001f18 <BQ27441_capacity+0xa8>
	case FULL_F:
		capacity = BQ27441_readWord(BQ27441_COMMAND_FULL_CAP_FIL);
 8001eea:	230e      	movs	r3, #14
 8001eec:	18fc      	adds	r4, r7, r3
 8001eee:	202e      	movs	r0, #46	; 0x2e
 8001ef0:	f000 f906 	bl	8002100 <BQ27441_readWord>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	8023      	strh	r3, [r4, #0]
		break;
 8001ef8:	e00e      	b.n	8001f18 <BQ27441_capacity+0xa8>
	case FULL_UF:
		capacity = BQ27441_readWord(BQ27441_COMMAND_FULL_CAP_UNFL);
 8001efa:	230e      	movs	r3, #14
 8001efc:	18fc      	adds	r4, r7, r3
 8001efe:	202c      	movs	r0, #44	; 0x2c
 8001f00:	f000 f8fe 	bl	8002100 <BQ27441_readWord>
 8001f04:	0003      	movs	r3, r0
 8001f06:	8023      	strh	r3, [r4, #0]
		break;
 8001f08:	e006      	b.n	8001f18 <BQ27441_capacity+0xa8>
	case DESIGN:
		capacity = BQ27441_readWord(BQ27441_EXTENDED_CAPACITY);
 8001f0a:	230e      	movs	r3, #14
 8001f0c:	18fc      	adds	r4, r7, r3
 8001f0e:	203c      	movs	r0, #60	; 0x3c
 8001f10:	f000 f8f6 	bl	8002100 <BQ27441_readWord>
 8001f14:	0003      	movs	r3, r0
 8001f16:	8023      	strh	r3, [r4, #0]
//		capacity = BQ27441_readWord(0x4A);
	}

	return capacity;
 8001f18:	230e      	movs	r3, #14
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	881b      	ldrh	r3, [r3, #0]
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b005      	add	sp, #20
 8001f24:	bd90      	pop	{r4, r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	080063e0 	.word	0x080063e0

08001f2c <BQ27441_power>:

// Reads and returns measured average power
int16_t BQ27441_power(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
 8001f30:	2018      	movs	r0, #24
 8001f32:	f000 f8e5 	bl	8002100 <BQ27441_readWord>
 8001f36:	0003      	movs	r3, r0
 8001f38:	b21b      	sxth	r3, r3
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <BQ27441_soc>:

// Reads and returns specified state of charge measurement
uint16_t BQ27441_soc(soc_measure type)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	0002      	movs	r2, r0
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	701a      	strb	r2, [r3, #0]
	uint16_t socRet = 0;
 8001f4c:	230e      	movs	r3, #14
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	2200      	movs	r2, #0
 8001f52:	801a      	strh	r2, [r3, #0]
	switch (type)
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <BQ27441_soc+0x22>
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d008      	beq.n	8001f72 <BQ27441_soc+0x32>
 8001f60:	e00f      	b.n	8001f82 <BQ27441_soc+0x42>
	{
	case FILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 8001f62:	230e      	movs	r3, #14
 8001f64:	18fc      	adds	r4, r7, r3
 8001f66:	201c      	movs	r0, #28
 8001f68:	f000 f8ca 	bl	8002100 <BQ27441_readWord>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	8023      	strh	r3, [r4, #0]
		break;
 8001f70:	e007      	b.n	8001f82 <BQ27441_soc+0x42>
	case UNFILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 8001f72:	230e      	movs	r3, #14
 8001f74:	18fc      	adds	r4, r7, r3
 8001f76:	2030      	movs	r0, #48	; 0x30
 8001f78:	f000 f8c2 	bl	8002100 <BQ27441_readWord>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	8023      	strh	r3, [r4, #0]
		break;
 8001f80:	46c0      	nop			; (mov r8, r8)
	}

	return socRet;
 8001f82:	230e      	movs	r3, #14
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	881b      	ldrh	r3, [r3, #0]
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b005      	add	sp, #20
 8001f8e:	bd90      	pop	{r4, r7, pc}

08001f90 <BQ27441_soh>:

// Reads and returns specified state of health measurement
uint8_t BQ27441_soh(soh_measure type)
{
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	0002      	movs	r2, r0
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	701a      	strb	r2, [r3, #0]
	uint16_t sohRaw = BQ27441_readWord(BQ27441_COMMAND_SOH);
 8001f9c:	250e      	movs	r5, #14
 8001f9e:	197c      	adds	r4, r7, r5
 8001fa0:	2020      	movs	r0, #32
 8001fa2:	f000 f8ad 	bl	8002100 <BQ27441_readWord>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	8023      	strh	r3, [r4, #0]
	uint8_t sohStatus = sohRaw >> 8;
 8001faa:	0029      	movs	r1, r5
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	230d      	movs	r3, #13
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	701a      	strb	r2, [r3, #0]
	uint8_t sohPercent = sohRaw & 0x00FF;
 8001fba:	200c      	movs	r0, #12
 8001fbc:	183b      	adds	r3, r7, r0
 8001fbe:	187a      	adds	r2, r7, r1
 8001fc0:	8812      	ldrh	r2, [r2, #0]
 8001fc2:	701a      	strb	r2, [r3, #0]

	if (type == PERCENT)
 8001fc4:	1dfb      	adds	r3, r7, #7
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <BQ27441_soh+0x42>
		return sohPercent;
 8001fcc:	183b      	adds	r3, r7, r0
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	e002      	b.n	8001fd8 <BQ27441_soh+0x48>
	else
		return sohStatus;
 8001fd2:	230d      	movs	r3, #13
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	781b      	ldrb	r3, [r3, #0]
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b004      	add	sp, #16
 8001fde:	bdb0      	pop	{r4, r5, r7, pc}

08001fe0 <BQ27441_temperature>:

// Reads and returns specified temperature measurement
uint16_t BQ27441_temperature(temp_measure type)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	701a      	strb	r2, [r3, #0]
	uint16_t temp = 0;
 8001fec:	230e      	movs	r3, #14
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	801a      	strh	r2, [r3, #0]
	switch (type)
 8001ff4:	1dfb      	adds	r3, r7, #7
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <BQ27441_temperature+0x22>
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d008      	beq.n	8002012 <BQ27441_temperature+0x32>
 8002000:	e00f      	b.n	8002022 <BQ27441_temperature+0x42>
	{
	case BATTERY:
		temp = BQ27441_readWord(BQ27441_COMMAND_TEMP);
 8002002:	230e      	movs	r3, #14
 8002004:	18fc      	adds	r4, r7, r3
 8002006:	2002      	movs	r0, #2
 8002008:	f000 f87a 	bl	8002100 <BQ27441_readWord>
 800200c:	0003      	movs	r3, r0
 800200e:	8023      	strh	r3, [r4, #0]
		break;
 8002010:	e007      	b.n	8002022 <BQ27441_temperature+0x42>
	case INTERNAL_TEMP:
		temp = BQ27441_readWord(BQ27441_COMMAND_INT_TEMP);
 8002012:	230e      	movs	r3, #14
 8002014:	18fc      	adds	r4, r7, r3
 8002016:	201e      	movs	r0, #30
 8002018:	f000 f872 	bl	8002100 <BQ27441_readWord>
 800201c:	0003      	movs	r3, r0
 800201e:	8023      	strh	r3, [r4, #0]
		break;
 8002020:	46c0      	nop			; (mov r8, r8)
	}
	return temp;
 8002022:	230e      	movs	r3, #14
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	881b      	ldrh	r3, [r3, #0]
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b005      	add	sp, #20
 800202e:	bd90      	pop	{r4, r7, pc}

08002030 <BQ27441_writeExtendedData>:
 *****************************************************************************/

// Write a specified number of bytes to extended data specifying a
// class ID, position offset.
int BQ27441_writeExtendedData(uint8_t classID, uint8_t offset, uint8_t * data, uint8_t len)
{
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	0004      	movs	r4, r0
 8002038:	0008      	movs	r0, r1
 800203a:	603a      	str	r2, [r7, #0]
 800203c:	0019      	movs	r1, r3
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	1c22      	adds	r2, r4, #0
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	1dbb      	adds	r3, r7, #6
 8002046:	1c02      	adds	r2, r0, #0
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	1d7b      	adds	r3, r7, #5
 800204c:	1c0a      	adds	r2, r1, #0
 800204e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;	// I2C return status

	if (len > 32)
 8002050:	1d7b      	adds	r3, r7, #5
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b20      	cmp	r3, #32
 8002056:	d902      	bls.n	800205e <BQ27441_writeExtendedData+0x2e>
		return BAT_INIT_FAIL;
 8002058:	2301      	movs	r3, #1
 800205a:	425b      	negs	r3, r3
 800205c:	e04c      	b.n	80020f8 <BQ27441_writeExtendedData+0xc8>

	ret = BQ27441_blockDataControl();
 800205e:	250b      	movs	r5, #11
 8002060:	197c      	adds	r4, r7, r5
 8002062:	f000 f873 	bl	800214c <BQ27441_blockDataControl>
 8002066:	0003      	movs	r3, r0
 8002068:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) // // enable block data memory control
 800206a:	197b      	adds	r3, r7, r5
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <BQ27441_writeExtendedData+0x48>
		return BAT_INIT_FAIL; // Return false if enable fails
 8002072:	2301      	movs	r3, #1
 8002074:	425b      	negs	r3, r3
 8002076:	e03f      	b.n	80020f8 <BQ27441_writeExtendedData+0xc8>
	if (BQ27441_blockDataClass(classID) != HAL_OK) // Write class ID using DataBlockClass()
 8002078:	1dfb      	adds	r3, r7, #7
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	0018      	movs	r0, r3
 800207e:	f000 f87f 	bl	8002180 <BQ27441_blockDataClass>
 8002082:	1e03      	subs	r3, r0, #0
 8002084:	d002      	beq.n	800208c <BQ27441_writeExtendedData+0x5c>
		return BAT_INIT_FAIL;
 8002086:	2301      	movs	r3, #1
 8002088:	425b      	negs	r3, r3
 800208a:	e035      	b.n	80020f8 <BQ27441_writeExtendedData+0xc8>

	BQ27441_blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b2db      	uxtb	r3, r3
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f88d 	bl	80021b4 <BQ27441_blockDataOffset>
	BQ27441_computeBlockChecksum(); // Compute checksum going in
 800209a:	f000 f8bd 	bl	8002218 <BQ27441_computeBlockChecksum>
	uint8_t oldCsum = BQ27441_blockDataChecksum();
 800209e:	230a      	movs	r3, #10
 80020a0:	18fc      	adds	r4, r7, r3
 80020a2:	f000 f8a1 	bl	80021e8 <BQ27441_blockDataChecksum>
 80020a6:	0003      	movs	r3, r0
 80020a8:	7023      	strb	r3, [r4, #0]

	// Write data bytes:
	for (int i = 0; i < len; i++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e012      	b.n	80020d6 <BQ27441_writeExtendedData+0xa6>
	{
		// Write to offset, mod 32 if offset is greater than 32
		// The blockDataOffset above sets the 32-bit block
		BQ27441_writeBlockData((offset % 32) + i, data[i]);
 80020b0:	1dbb      	adds	r3, r7, #6
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	221f      	movs	r2, #31
 80020b6:	4013      	ands	r3, r2
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	18d3      	adds	r3, r2, r3
 80020c0:	b2d8      	uxtb	r0, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	18d3      	adds	r3, r2, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	0019      	movs	r1, r3
 80020cc:	f000 f8f4 	bl	80022b8 <BQ27441_writeBlockData>
	for (int i = 0; i < len; i++)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	1d7b      	adds	r3, r7, #5
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbe7      	blt.n	80020b0 <BQ27441_writeExtendedData+0x80>
	}

	// Write new checksum using BlockDataChecksum (0x60)
	uint8_t newCsum = BQ27441_computeBlockChecksum(); // Compute the new checksum
 80020e0:	2509      	movs	r5, #9
 80020e2:	197c      	adds	r4, r7, r5
 80020e4:	f000 f898 	bl	8002218 <BQ27441_computeBlockChecksum>
 80020e8:	0003      	movs	r3, r0
 80020ea:	7023      	strb	r3, [r4, #0]
	BQ27441_writeBlockChecksum(newCsum);
 80020ec:	197b      	adds	r3, r7, r5
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 f8c7 	bl	8002284 <BQ27441_writeBlockChecksum>


	return BAT_INIT_SUCCESS;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bdb0      	pop	{r4, r5, r7, pc}

08002100 <BQ27441_readWord>:

// Read a 16-bit command word from the BQ27441-G1A
uint16_t BQ27441_readWord(uint16_t subAddress)
{
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af04      	add	r7, sp, #16
 8002106:	0002      	movs	r2, r0
 8002108:	1dbb      	adds	r3, r7, #6
 800210a:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
//	i2cReadBytes(subAddress, data, 2);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), subAddress, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800210c:	1dbb      	adds	r3, r7, #6
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	480d      	ldr	r0, [pc, #52]	; (8002148 <BQ27441_readWord+0x48>)
 8002112:	2301      	movs	r3, #1
 8002114:	425b      	negs	r3, r3
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	2302      	movs	r3, #2
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	240c      	movs	r4, #12
 800211e:	193b      	adds	r3, r7, r4
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2301      	movs	r3, #1
 8002124:	21aa      	movs	r1, #170	; 0xaa
 8002126:	f001 fd35 	bl	8003b94 <HAL_I2C_Mem_Read>
	return ((uint16_t) data[1] << 8) | data[0];
 800212a:	0021      	movs	r1, r4
 800212c:	187b      	adds	r3, r7, r1
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	b21a      	sxth	r2, r3
 8002134:	187b      	adds	r3, r7, r1
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b21b      	sxth	r3, r3
 800213a:	4313      	orrs	r3, r2
 800213c:	b21b      	sxth	r3, r3
 800213e:	b29b      	uxth	r3, r3
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b005      	add	sp, #20
 8002146:	bd90      	pop	{r4, r7, pc}
 8002148:	20000074 	.word	0x20000074

0800214c <BQ27441_blockDataControl>:

// Issue a BlockDataControl() command to enable BlockData access
HAL_StatusTypeDef BQ27441_blockDataControl(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af04      	add	r7, sp, #16
	uint8_t enableByte = 0x00;
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_CONTROL, &enableByte, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CONTROL, I2C_MEMADD_SIZE_8BIT, &enableByte, 1, HAL_MAX_DELAY);
 8002158:	4808      	ldr	r0, [pc, #32]	; (800217c <BQ27441_blockDataControl+0x30>)
 800215a:	2301      	movs	r3, #1
 800215c:	425b      	negs	r3, r3
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	2301      	movs	r3, #1
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2301      	movs	r3, #1
 800216a:	2261      	movs	r2, #97	; 0x61
 800216c:	21aa      	movs	r1, #170	; 0xaa
 800216e:	f001 fbe3 	bl	8003938 <HAL_I2C_Mem_Write>
 8002172:	0003      	movs	r3, r0
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000074 	.word	0x20000074

08002180 <BQ27441_blockDataClass>:

// Issue a DataClass() command to set the data class to be accessed
HAL_StatusTypeDef BQ27441_blockDataClass(uint8_t id)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af04      	add	r7, sp, #16
 8002186:	0002      	movs	r2, r0
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_DATACLASS, &id, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_DATACLASS, I2C_MEMADD_SIZE_8BIT, &id, 1, HAL_MAX_DELAY);
 800218c:	4808      	ldr	r0, [pc, #32]	; (80021b0 <BQ27441_blockDataClass+0x30>)
 800218e:	2301      	movs	r3, #1
 8002190:	425b      	negs	r3, r3
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	2301      	movs	r3, #1
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	1dfb      	adds	r3, r7, #7
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2301      	movs	r3, #1
 800219e:	223e      	movs	r2, #62	; 0x3e
 80021a0:	21aa      	movs	r1, #170	; 0xaa
 80021a2:	f001 fbc9 	bl	8003938 <HAL_I2C_Mem_Write>
 80021a6:	0003      	movs	r3, r0

}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000074 	.word	0x20000074

080021b4 <BQ27441_blockDataOffset>:

// Issue a DataBlock() command to set the data block to be accessed
HAL_StatusTypeDef BQ27441_blockDataOffset(uint8_t offset)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af04      	add	r7, sp, #16
 80021ba:	0002      	movs	r2, r0
 80021bc:	1dfb      	adds	r3, r7, #7
 80021be:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_DATABLOCK, &offset, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_DATABLOCK, I2C_MEMADD_SIZE_8BIT, &offset, 1, HAL_MAX_DELAY);
 80021c0:	4808      	ldr	r0, [pc, #32]	; (80021e4 <BQ27441_blockDataOffset+0x30>)
 80021c2:	2301      	movs	r3, #1
 80021c4:	425b      	negs	r3, r3
 80021c6:	9302      	str	r3, [sp, #8]
 80021c8:	2301      	movs	r3, #1
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	1dfb      	adds	r3, r7, #7
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2301      	movs	r3, #1
 80021d2:	223f      	movs	r2, #63	; 0x3f
 80021d4:	21aa      	movs	r1, #170	; 0xaa
 80021d6:	f001 fbaf 	bl	8003938 <HAL_I2C_Mem_Write>
 80021da:	0003      	movs	r3, r0

}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000074 	.word	0x20000074

080021e8 <BQ27441_blockDataChecksum>:

// Read the current checksum using BlockDataCheckSum()
uint8_t BQ27441_blockDataChecksum(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af04      	add	r7, sp, #16
	uint8_t csum;
//	i2cReadBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, &csum, 1, HAL_MAX_DELAY);
 80021ee:	4809      	ldr	r0, [pc, #36]	; (8002214 <BQ27441_blockDataChecksum+0x2c>)
 80021f0:	2301      	movs	r3, #1
 80021f2:	425b      	negs	r3, r3
 80021f4:	9302      	str	r3, [sp, #8]
 80021f6:	2301      	movs	r3, #1
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	1dfb      	adds	r3, r7, #7
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2301      	movs	r3, #1
 8002200:	2260      	movs	r2, #96	; 0x60
 8002202:	21aa      	movs	r1, #170	; 0xaa
 8002204:	f001 fcc6 	bl	8003b94 <HAL_I2C_Mem_Read>
	return csum;
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	781b      	ldrb	r3, [r3, #0]
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000074 	.word	0x20000074

08002218 <BQ27441_computeBlockChecksum>:

// Read all 32 bytes of the loaded extended data and compute a
// checksum based on the values.
uint8_t BQ27441_computeBlockChecksum(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08e      	sub	sp, #56	; 0x38
 800221c:	af04      	add	r7, sp, #16
	uint8_t data[32];
	// i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, data, 32, HAL_MAX_DELAY);
 800221e:	4818      	ldr	r0, [pc, #96]	; (8002280 <BQ27441_computeBlockChecksum+0x68>)
 8002220:	2301      	movs	r3, #1
 8002222:	425b      	negs	r3, r3
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2320      	movs	r3, #32
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	003b      	movs	r3, r7
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2301      	movs	r3, #1
 8002230:	2260      	movs	r2, #96	; 0x60
 8002232:	21aa      	movs	r1, #170	; 0xaa
 8002234:	f001 fcae 	bl	8003b94 <HAL_I2C_Mem_Read>


	uint8_t csum = 0;
 8002238:	2327      	movs	r3, #39	; 0x27
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
 8002244:	e00c      	b.n	8002260 <BQ27441_computeBlockChecksum+0x48>
	{
		csum += data[i];
 8002246:	003a      	movs	r2, r7
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	18d3      	adds	r3, r2, r3
 800224c:	7819      	ldrb	r1, [r3, #0]
 800224e:	2227      	movs	r2, #39	; 0x27
 8002250:	18bb      	adds	r3, r7, r2
 8002252:	18ba      	adds	r2, r7, r2
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	188a      	adds	r2, r1, r2
 8002258:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	3301      	adds	r3, #1
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	2b1f      	cmp	r3, #31
 8002264:	ddef      	ble.n	8002246 <BQ27441_computeBlockChecksum+0x2e>
	}
	csum = 255 - csum;
 8002266:	2127      	movs	r1, #39	; 0x27
 8002268:	187b      	adds	r3, r7, r1
 800226a:	187a      	adds	r2, r7, r1
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	43d2      	mvns	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

	return csum;
 8002272:	187b      	adds	r3, r7, r1
 8002274:	781b      	ldrb	r3, [r3, #0]
}
 8002276:	0018      	movs	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	b00a      	add	sp, #40	; 0x28
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	20000074 	.word	0x20000074

08002284 <BQ27441_writeBlockChecksum>:

// Use the BlockDataCheckSum() command to write a checksum value
HAL_StatusTypeDef BQ27441_writeBlockChecksum(uint8_t csum)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af04      	add	r7, sp, #16
 800228a:	0002      	movs	r2, r0
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	701a      	strb	r2, [r3, #0]
	//return i2cWriteBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, &csum, 1, HAL_MAX_DELAY);
 8002290:	4808      	ldr	r0, [pc, #32]	; (80022b4 <BQ27441_writeBlockChecksum+0x30>)
 8002292:	2301      	movs	r3, #1
 8002294:	425b      	negs	r3, r3
 8002296:	9302      	str	r3, [sp, #8]
 8002298:	2301      	movs	r3, #1
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2301      	movs	r3, #1
 80022a2:	2260      	movs	r2, #96	; 0x60
 80022a4:	21aa      	movs	r1, #170	; 0xaa
 80022a6:	f001 fb47 	bl	8003938 <HAL_I2C_Mem_Write>
 80022aa:	0003      	movs	r3, r0
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b002      	add	sp, #8
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000074 	.word	0x20000074

080022b8 <BQ27441_writeBlockData>:

// Use BlockData() to write a byte to an offset of the loaded data
HAL_StatusTypeDef BQ27441_writeBlockData(uint8_t offset, uint8_t data)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af04      	add	r7, sp, #16
 80022be:	0002      	movs	r2, r0
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	1dbb      	adds	r3, r7, #6
 80022c6:	1c0a      	adds	r2, r1, #0
 80022c8:	701a      	strb	r2, [r3, #0]
	uint8_t address = offset + BQ27441_EXTENDED_BLOCKDATA;
 80022ca:	210f      	movs	r1, #15
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	1dfa      	adds	r2, r7, #7
 80022d0:	7812      	ldrb	r2, [r2, #0]
 80022d2:	3240      	adds	r2, #64	; 0x40
 80022d4:	701a      	strb	r2, [r3, #0]
	//return i2cWriteBytes(address, &data, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), address, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4808      	ldr	r0, [pc, #32]	; (8002300 <BQ27441_writeBlockData+0x48>)
 80022de:	2301      	movs	r3, #1
 80022e0:	425b      	negs	r3, r3
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	2301      	movs	r3, #1
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	1dbb      	adds	r3, r7, #6
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	21aa      	movs	r1, #170	; 0xaa
 80022f0:	f001 fb22 	bl	8003938 <HAL_I2C_Mem_Write>
 80022f4:	0003      	movs	r3, r0

}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b004      	add	sp, #16
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	20000074 	.word	0x20000074

08002304 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	240c      	movs	r4, #12
 800230c:	193b      	adds	r3, r7, r4
 800230e:	0018      	movs	r0, r3
 8002310:	2314      	movs	r3, #20
 8002312:	001a      	movs	r2, r3
 8002314:	2100      	movs	r1, #0
 8002316:	f003 ff15 	bl	8006144 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <MX_GPIO_Init+0x7c>)
 800231c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <MX_GPIO_Init+0x7c>)
 8002320:	2101      	movs	r1, #1
 8002322:	430a      	orrs	r2, r1
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <MX_GPIO_Init+0x7c>)
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	2201      	movs	r2, #1
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <MX_GPIO_Init+0x7c>)
 8002334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_GPIO_Init+0x7c>)
 8002338:	2102      	movs	r1, #2
 800233a:	430a      	orrs	r2, r1
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <MX_GPIO_Init+0x7c>)
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800234a:	193b      	adds	r3, r7, r4
 800234c:	2204      	movs	r2, #4
 800234e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002350:	193b      	adds	r3, r7, r4
 8002352:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <MX_GPIO_Init+0x80>)
 8002354:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	193b      	adds	r3, r7, r4
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	193b      	adds	r3, r7, r4
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <MX_GPIO_Init+0x84>)
 8002360:	0019      	movs	r1, r3
 8002362:	0010      	movs	r0, r2
 8002364:	f001 f8b6 	bl	80034d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8002368:	2200      	movs	r2, #0
 800236a:	2103      	movs	r1, #3
 800236c:	2006      	movs	r0, #6
 800236e:	f001 f87f 	bl	8003470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002372:	2006      	movs	r0, #6
 8002374:	f001 f891 	bl	800349a <HAL_NVIC_EnableIRQ>

}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b009      	add	sp, #36	; 0x24
 800237e:	bd90      	pop	{r4, r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	10210000 	.word	0x10210000
 8002388:	50000400 	.word	0x50000400

0800238c <hts221_get_temp>:
    }

    return NULL;
}

int hts221_get_temp(char unit, HTS_Cal * hts_cal_data){
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	b08d      	sub	sp, #52	; 0x34
 8002390:	af04      	add	r7, sp, #16
 8002392:	0002      	movs	r2, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	701a      	strb	r2, [r3, #0]
    uint8_t buf[7];			// read buffer
    int16_t T_OUT;			// T_OUT raw temperature reading
    int temp_adj;			// calibrated temperature value

    /* === Start a temperature reading === */
    buf[0] = HTS_CTRL_REG2_ONE_SHOT;
 800239a:	210c      	movs	r1, #12
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80023a2:	231b      	movs	r3, #27
 80023a4:	18fc      	adds	r4, r7, r3
 80023a6:	4849      	ldr	r0, [pc, #292]	; (80024cc <hts221_get_temp+0x140>)
 80023a8:	2301      	movs	r3, #1
 80023aa:	425b      	negs	r3, r3
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	2301      	movs	r3, #1
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	187b      	adds	r3, r7, r1
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2301      	movs	r3, #1
 80023b8:	2221      	movs	r2, #33	; 0x21
 80023ba:	21be      	movs	r1, #190	; 0xbe
 80023bc:	f001 fabc 	bl	8003938 <HAL_I2C_Mem_Write>
 80023c0:	0003      	movs	r3, r0
 80023c2:	7023      	strb	r3, [r4, #0]

    /* === Read in temperature data === */

    //TODO check that this loop is right...
    // Try three times for temp data to be ready
    for (int i = 0; i < 3; ++i) {
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	e01a      	b.n	8002400 <hts221_get_temp+0x74>
        // buf[0] = HTS_STATUS_REG
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80023ca:	231b      	movs	r3, #27
 80023cc:	18fc      	adds	r4, r7, r3
 80023ce:	483f      	ldr	r0, [pc, #252]	; (80024cc <hts221_get_temp+0x140>)
 80023d0:	2301      	movs	r3, #1
 80023d2:	425b      	negs	r3, r3
 80023d4:	9302      	str	r3, [sp, #8]
 80023d6:	2301      	movs	r3, #1
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	250c      	movs	r5, #12
 80023dc:	197b      	adds	r3, r7, r5
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2301      	movs	r3, #1
 80023e2:	2227      	movs	r2, #39	; 0x27
 80023e4:	21be      	movs	r1, #190	; 0xbe
 80023e6:	f001 fbd5 	bl	8003b94 <HAL_I2C_Mem_Read>
 80023ea:	0003      	movs	r3, r0
 80023ec:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
            // TODO: error handling
        }
        if (buf[0] & 1){
 80023ee:	197b      	adds	r3, r7, r5
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	001a      	movs	r2, r3
 80023f4:	2301      	movs	r3, #1
 80023f6:	4013      	ands	r3, r2
 80023f8:	d106      	bne.n	8002408 <hts221_get_temp+0x7c>
    for (int i = 0; i < 3; ++i) {
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3301      	adds	r3, #1
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b02      	cmp	r3, #2
 8002404:	dde1      	ble.n	80023ca <hts221_get_temp+0x3e>
 8002406:	e000      	b.n	800240a <hts221_get_temp+0x7e>
            // new temp. data ready
            break;
 8002408:	46c0      	nop			; (mov r8, r8)
        }
        //TODO - HAL_WAIT?
    }

    // buf[1] = HTS_TEMP_OUT_L
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 800240a:	250c      	movs	r5, #12
 800240c:	197b      	adds	r3, r7, r5
 800240e:	3301      	adds	r3, #1
 8002410:	261b      	movs	r6, #27
 8002412:	19bc      	adds	r4, r7, r6
 8002414:	482d      	ldr	r0, [pc, #180]	; (80024cc <hts221_get_temp+0x140>)
 8002416:	2201      	movs	r2, #1
 8002418:	4252      	negs	r2, r2
 800241a:	9202      	str	r2, [sp, #8]
 800241c:	2201      	movs	r2, #1
 800241e:	9201      	str	r2, [sp, #4]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2301      	movs	r3, #1
 8002424:	222a      	movs	r2, #42	; 0x2a
 8002426:	21be      	movs	r1, #190	; 0xbe
 8002428:	f001 fbb4 	bl	8003b94 <HAL_I2C_Mem_Read>
 800242c:	0003      	movs	r3, r0
 800242e:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
        // TODO: error handling
    }

    // buf[2] = HTS_TEMP_OUT_H
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8002430:	197b      	adds	r3, r7, r5
 8002432:	3302      	adds	r3, #2
 8002434:	19bc      	adds	r4, r7, r6
 8002436:	4825      	ldr	r0, [pc, #148]	; (80024cc <hts221_get_temp+0x140>)
 8002438:	2201      	movs	r2, #1
 800243a:	4252      	negs	r2, r2
 800243c:	9202      	str	r2, [sp, #8]
 800243e:	2201      	movs	r2, #1
 8002440:	9201      	str	r2, [sp, #4]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	222b      	movs	r2, #43	; 0x2b
 8002448:	21be      	movs	r1, #190	; 0xbe
 800244a:	f001 fba3 	bl	8003b94 <HAL_I2C_Mem_Read>
 800244e:	0003      	movs	r3, r0
 8002450:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
        // TODO: error handling
    }

    T_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 8002452:	197b      	adds	r3, r7, r5
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	b219      	sxth	r1, r3
 8002458:	197b      	adds	r3, r7, r5
 800245a:	789b      	ldrb	r3, [r3, #2]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	b21a      	sxth	r2, r3
 8002460:	2018      	movs	r0, #24
 8002462:	183b      	adds	r3, r7, r0
 8002464:	430a      	orrs	r2, r1
 8002466:	801a      	strh	r2, [r3, #0]

    temp_adj = hts221_calc_temp(T_OUT, hts_cal_data);
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	183b      	adds	r3, r7, r0
 800246c:	2100      	movs	r1, #0
 800246e:	5e5b      	ldrsh	r3, [r3, r1]
 8002470:	0011      	movs	r1, r2
 8002472:	0018      	movs	r0, r3
 8002474:	f000 f832 	bl	80024dc <hts221_calc_temp>
 8002478:	0003      	movs	r3, r0
 800247a:	617b      	str	r3, [r7, #20]

    // Return in correct units
    if (unit == 'F'){
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b46      	cmp	r3, #70	; 0x46
 8002482:	d11e      	bne.n	80024c2 <hts221_get_temp+0x136>
        //Fahrenheit
        return (temp_adj * 9.0 / 5.0) + 32;
 8002484:	6978      	ldr	r0, [r7, #20]
 8002486:	f7ff fbef 	bl	8001c68 <__aeabi_i2d>
 800248a:	2200      	movs	r2, #0
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <hts221_get_temp+0x144>)
 800248e:	f7ff f949 	bl	8001724 <__aeabi_dmul>
 8002492:	0002      	movs	r2, r0
 8002494:	000b      	movs	r3, r1
 8002496:	0010      	movs	r0, r2
 8002498:	0019      	movs	r1, r3
 800249a:	2200      	movs	r2, #0
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <hts221_get_temp+0x148>)
 800249e:	f7fe fe59 	bl	8001154 <__aeabi_ddiv>
 80024a2:	0002      	movs	r2, r0
 80024a4:	000b      	movs	r3, r1
 80024a6:	0010      	movs	r0, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	2200      	movs	r2, #0
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <hts221_get_temp+0x14c>)
 80024ae:	f7fe fae7 	bl	8000a80 <__aeabi_dadd>
 80024b2:	0002      	movs	r2, r0
 80024b4:	000b      	movs	r3, r1
 80024b6:	0010      	movs	r0, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	f7ff fb9f 	bl	8001bfc <__aeabi_d2iz>
 80024be:	0003      	movs	r3, r0
 80024c0:	e000      	b.n	80024c4 <hts221_get_temp+0x138>

    }
    else {
        //Celsius
        return temp_adj;
 80024c2:	697b      	ldr	r3, [r7, #20]
    }

}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b009      	add	sp, #36	; 0x24
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024cc:	20000074 	.word	0x20000074
 80024d0:	40220000 	.word	0x40220000
 80024d4:	40140000 	.word	0x40140000
 80024d8:	40400000 	.word	0x40400000

080024dc <hts221_calc_temp>:

int hts221_calc_temp(int16_t T_OUT, HTS_Cal * hts_cal_data) {
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	0002      	movs	r2, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	1dbb      	adds	r3, r7, #6
 80024e8:	801a      	strh	r2, [r3, #0]

    int zeroed_temp = T_OUT - hts_cal_data->T0_OUT;
 80024ea:	1dbb      	adds	r3, r7, #6
 80024ec:	2200      	movs	r2, #0
 80024ee:	5e9a      	ldrsh	r2, [r3, r2]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	60fb      	str	r3, [r7, #12]
    int temp_adj = (zeroed_temp * hts_cal_data->correction_factor) + hts_cal_data->offset;
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7fe fa7b 	bl	80009f4 <__aeabi_i2f>
 80024fe:	1c02      	adds	r2, r0, #0
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	1c19      	adds	r1, r3, #0
 8002506:	1c10      	adds	r0, r2, #0
 8002508:	f7fe f93a 	bl	8000780 <__aeabi_fmul>
 800250c:	1c03      	adds	r3, r0, #0
 800250e:	1c1c      	adds	r4, r3, #0
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	0018      	movs	r0, r3
 8002516:	f7fe fa6d 	bl	80009f4 <__aeabi_i2f>
 800251a:	1c03      	adds	r3, r0, #0
 800251c:	1c19      	adds	r1, r3, #0
 800251e:	1c20      	adds	r0, r4, #0
 8002520:	f7fd ff92 	bl	8000448 <__aeabi_fadd>
 8002524:	1c03      	adds	r3, r0, #0
 8002526:	1c18      	adds	r0, r3, #0
 8002528:	f7fe fa44 	bl	80009b4 <__aeabi_f2iz>
 800252c:	0003      	movs	r3, r0
 800252e:	60bb      	str	r3, [r7, #8]

    return temp_adj;
 8002530:	68bb      	ldr	r3, [r7, #8]
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b005      	add	sp, #20
 8002538:	bd90      	pop	{r4, r7, pc}
	...

0800253c <hts221_get_humid>:

int hts221_get_humid(HTS_Cal * hts_cal_data) {
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af04      	add	r7, sp, #16
 8002542:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];			// read buffer
    int16_t H_OUT;			// H_OUT raw temperature reading
    int humid_adj;			// calibrated temperature value

    /* === Start a humidity reading === */
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002544:	251f      	movs	r5, #31
 8002546:	197c      	adds	r4, r7, r5
 8002548:	4866      	ldr	r0, [pc, #408]	; (80026e4 <hts221_get_humid+0x1a8>)
 800254a:	2301      	movs	r3, #1
 800254c:	425b      	negs	r3, r3
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	2301      	movs	r3, #1
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	230c      	movs	r3, #12
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2301      	movs	r3, #1
 800255c:	2221      	movs	r2, #33	; 0x21
 800255e:	21be      	movs	r1, #190	; 0xbe
 8002560:	f001 fb18 	bl	8003b94 <HAL_I2C_Mem_Read>
 8002564:	0003      	movs	r3, r0
 8002566:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8002568:	197b      	adds	r3, r7, r5
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <hts221_get_humid+0x3a>
        return HUMID_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	425b      	negs	r3, r3
 8002574:	e0b2      	b.n	80026dc <hts221_get_humid+0x1a0>
    }

    buf[0] |= HTS_CTRL_REG2_ONE_SHOT;
 8002576:	210c      	movs	r1, #12
 8002578:	187b      	adds	r3, r7, r1
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	4313      	orrs	r3, r2
 8002580:	b2da      	uxtb	r2, r3
 8002582:	187b      	adds	r3, r7, r1
 8002584:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002586:	251f      	movs	r5, #31
 8002588:	197c      	adds	r4, r7, r5
 800258a:	4856      	ldr	r0, [pc, #344]	; (80026e4 <hts221_get_humid+0x1a8>)
 800258c:	2301      	movs	r3, #1
 800258e:	425b      	negs	r3, r3
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	2301      	movs	r3, #1
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	187b      	adds	r3, r7, r1
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2301      	movs	r3, #1
 800259c:	2221      	movs	r2, #33	; 0x21
 800259e:	21be      	movs	r1, #190	; 0xbe
 80025a0:	f001 f9ca 	bl	8003938 <HAL_I2C_Mem_Write>
 80025a4:	0003      	movs	r3, r0
 80025a6:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 80025a8:	197b      	adds	r3, r7, r5
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <hts221_get_humid+0x7a>
        return HUMID_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	425b      	negs	r3, r3
 80025b4:	e092      	b.n	80026dc <hts221_get_humid+0x1a0>
    }

    // wait for one shot bit to clear by the hts
    do{
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80025b6:	251f      	movs	r5, #31
 80025b8:	197c      	adds	r4, r7, r5
 80025ba:	484a      	ldr	r0, [pc, #296]	; (80026e4 <hts221_get_humid+0x1a8>)
 80025bc:	2301      	movs	r3, #1
 80025be:	425b      	negs	r3, r3
 80025c0:	9302      	str	r3, [sp, #8]
 80025c2:	2301      	movs	r3, #1
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	230c      	movs	r3, #12
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2301      	movs	r3, #1
 80025ce:	2221      	movs	r2, #33	; 0x21
 80025d0:	21be      	movs	r1, #190	; 0xbe
 80025d2:	f001 fadf 	bl	8003b94 <HAL_I2C_Mem_Read>
 80025d6:	0003      	movs	r3, r0
 80025d8:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80025da:	197b      	adds	r3, r7, r5
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <hts221_get_humid+0xac>
            return HUMID_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	425b      	negs	r3, r3
 80025e6:	e079      	b.n	80026dc <hts221_get_humid+0x1a0>
        }
    } while (buf[0] & HTS_CTRL_REG2_ONE_SHOT);
 80025e8:	210c      	movs	r1, #12
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	001a      	movs	r2, r3
 80025f0:	2301      	movs	r3, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1df      	bne.n	80025b6 <hts221_get_humid+0x7a>

    /* === Read in humidity data === */

    //TODO check that this loop is right...
    // Try three times for temp data to be ready
    for (int i = 0; i < 3; ++i) {
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	dc22      	bgt.n	8002646 <hts221_get_humid+0x10a>
        // buf[0] = HTS_STATUS_REG
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002600:	251f      	movs	r5, #31
 8002602:	197c      	adds	r4, r7, r5
 8002604:	4837      	ldr	r0, [pc, #220]	; (80026e4 <hts221_get_humid+0x1a8>)
 8002606:	2301      	movs	r3, #1
 8002608:	425b      	negs	r3, r3
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	2301      	movs	r3, #1
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	187b      	adds	r3, r7, r1
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2301      	movs	r3, #1
 8002616:	2227      	movs	r2, #39	; 0x27
 8002618:	21be      	movs	r1, #190	; 0xbe
 800261a:	f001 fabb 	bl	8003b94 <HAL_I2C_Mem_Read>
 800261e:	0003      	movs	r3, r0
 8002620:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8002622:	197b      	adds	r3, r7, r5
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <hts221_get_humid+0xf4>
            return HUMID_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	425b      	negs	r3, r3
 800262e:	e055      	b.n	80026dc <hts221_get_humid+0x1a0>
        }
        if (buf[0] & 2){
 8002630:	230c      	movs	r3, #12
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	001a      	movs	r2, r3
 8002638:	2302      	movs	r3, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d102      	bne.n	8002644 <hts221_get_humid+0x108>
            // new humid. data ready
            break;
        }
        return HUMID_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	425b      	negs	r3, r3
 8002642:	e04b      	b.n	80026dc <hts221_get_humid+0x1a0>
            break;
 8002644:	46c0      	nop			; (mov r8, r8)
    }

    // buf[1] = HTS_HUMIDITY_OUT_L
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8002646:	230c      	movs	r3, #12
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	3301      	adds	r3, #1
 800264c:	251f      	movs	r5, #31
 800264e:	197c      	adds	r4, r7, r5
 8002650:	4824      	ldr	r0, [pc, #144]	; (80026e4 <hts221_get_humid+0x1a8>)
 8002652:	2201      	movs	r2, #1
 8002654:	4252      	negs	r2, r2
 8002656:	9202      	str	r2, [sp, #8]
 8002658:	2201      	movs	r2, #1
 800265a:	9201      	str	r2, [sp, #4]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2301      	movs	r3, #1
 8002660:	2228      	movs	r2, #40	; 0x28
 8002662:	21be      	movs	r1, #190	; 0xbe
 8002664:	f001 fa96 	bl	8003b94 <HAL_I2C_Mem_Read>
 8002668:	0003      	movs	r3, r0
 800266a:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 800266c:	197b      	adds	r3, r7, r5
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <hts221_get_humid+0x13e>
        return HUMID_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	425b      	negs	r3, r3
 8002678:	e030      	b.n	80026dc <hts221_get_humid+0x1a0>
    }

    // buf[2] = HTS_HUMIDITY_OUT_H
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 800267a:	230c      	movs	r3, #12
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	3302      	adds	r3, #2
 8002680:	251f      	movs	r5, #31
 8002682:	197c      	adds	r4, r7, r5
 8002684:	4817      	ldr	r0, [pc, #92]	; (80026e4 <hts221_get_humid+0x1a8>)
 8002686:	2201      	movs	r2, #1
 8002688:	4252      	negs	r2, r2
 800268a:	9202      	str	r2, [sp, #8]
 800268c:	2201      	movs	r2, #1
 800268e:	9201      	str	r2, [sp, #4]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2301      	movs	r3, #1
 8002694:	2229      	movs	r2, #41	; 0x29
 8002696:	21be      	movs	r1, #190	; 0xbe
 8002698:	f001 fa7c 	bl	8003b94 <HAL_I2C_Mem_Read>
 800269c:	0003      	movs	r3, r0
 800269e:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 80026a0:	197b      	adds	r3, r7, r5
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <hts221_get_humid+0x172>
        return HUMID_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	425b      	negs	r3, r3
 80026ac:	e016      	b.n	80026dc <hts221_get_humid+0x1a0>
    }

    H_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 80026ae:	220c      	movs	r2, #12
 80026b0:	18bb      	adds	r3, r7, r2
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	b219      	sxth	r1, r3
 80026b6:	18bb      	adds	r3, r7, r2
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	b21a      	sxth	r2, r3
 80026be:	2016      	movs	r0, #22
 80026c0:	183b      	adds	r3, r7, r0
 80026c2:	430a      	orrs	r2, r1
 80026c4:	801a      	strh	r2, [r3, #0]

    humid_adj = hts221_calc_humid(H_OUT, hts_cal_data);
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	183b      	adds	r3, r7, r0
 80026ca:	2100      	movs	r1, #0
 80026cc:	5e5b      	ldrsh	r3, [r3, r1]
 80026ce:	0011      	movs	r1, r2
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 f809 	bl	80026e8 <hts221_calc_humid>
 80026d6:	0003      	movs	r3, r0
 80026d8:	613b      	str	r3, [r7, #16]

    return humid_adj;
 80026da:	693b      	ldr	r3, [r7, #16]

}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b008      	add	sp, #32
 80026e2:	bdb0      	pop	{r4, r5, r7, pc}
 80026e4:	20000074 	.word	0x20000074

080026e8 <hts221_calc_humid>:

int hts221_calc_humid(int16_t H_OUT, HTS_Cal * hts_cal_data){
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	0002      	movs	r2, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	1dbb      	adds	r3, r7, #6
 80026f4:	801a      	strh	r2, [r3, #0]

    int zeroed_humid = H_OUT - hts_cal_data->H0_OUT;
 80026f6:	1dbb      	adds	r3, r7, #6
 80026f8:	2200      	movs	r2, #0
 80026fa:	5e9a      	ldrsh	r2, [r3, r2]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	60fb      	str	r3, [r7, #12]
    int humid_adj = (zeroed_humid * hts_cal_data->humid_correction_factor) + hts_cal_data->humid_offset;
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7fe f975 	bl	80009f4 <__aeabi_i2f>
 800270a:	1c02      	adds	r2, r0, #0
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	1c19      	adds	r1, r3, #0
 8002712:	1c10      	adds	r0, r2, #0
 8002714:	f7fe f834 	bl	8000780 <__aeabi_fmul>
 8002718:	1c03      	adds	r3, r0, #0
 800271a:	1c1c      	adds	r4, r3, #0
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	0018      	movs	r0, r3
 8002722:	f7fe f967 	bl	80009f4 <__aeabi_i2f>
 8002726:	1c03      	adds	r3, r0, #0
 8002728:	1c19      	adds	r1, r3, #0
 800272a:	1c20      	adds	r0, r4, #0
 800272c:	f7fd fe8c 	bl	8000448 <__aeabi_fadd>
 8002730:	1c03      	adds	r3, r0, #0
 8002732:	1c18      	adds	r0, r3, #0
 8002734:	f7fe f93e 	bl	80009b4 <__aeabi_f2iz>
 8002738:	0003      	movs	r3, r0
 800273a:	60bb      	str	r3, [r7, #8]

    return humid_adj;
 800273c:	68bb      	ldr	r3, [r7, #8]

 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b005      	add	sp, #20
 8002744:	bd90      	pop	{r4, r7, pc}
	...

08002748 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <MX_I2C1_Init+0x78>)
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <MX_I2C1_Init+0x7c>)
 8002750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <MX_I2C1_Init+0x78>)
 8002754:	22e1      	movs	r2, #225	; 0xe1
 8002756:	00d2      	lsls	r2, r2, #3
 8002758:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <MX_I2C1_Init+0x78>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <MX_I2C1_Init+0x78>)
 8002762:	2201      	movs	r2, #1
 8002764:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <MX_I2C1_Init+0x78>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <MX_I2C1_Init+0x78>)
 800276e:	2200      	movs	r2, #0
 8002770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <MX_I2C1_Init+0x78>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <MX_I2C1_Init+0x78>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <MX_I2C1_Init+0x78>)
 8002780:	2200      	movs	r2, #0
 8002782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <MX_I2C1_Init+0x78>)
 8002786:	0018      	movs	r0, r3
 8002788:	f001 f840 	bl	800380c <HAL_I2C_Init>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d001      	beq.n	8002794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002790:	f000 f903 	bl	800299a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <MX_I2C1_Init+0x78>)
 8002796:	2100      	movs	r1, #0
 8002798:	0018      	movs	r0, r3
 800279a:	f001 fd6d 	bl	8004278 <HAL_I2CEx_ConfigAnalogFilter>
 800279e:	1e03      	subs	r3, r0, #0
 80027a0:	d001      	beq.n	80027a6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80027a2:	f000 f8fa 	bl	800299a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_I2C1_Init+0x78>)
 80027a8:	2100      	movs	r1, #0
 80027aa:	0018      	movs	r0, r3
 80027ac:	f001 fdb0 	bl	8004310 <HAL_I2CEx_ConfigDigitalFilter>
 80027b0:	1e03      	subs	r3, r0, #0
 80027b2:	d001      	beq.n	80027b8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80027b4:	f000 f8f1 	bl	800299a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	20000074 	.word	0x20000074
 80027c4:	40005400 	.word	0x40005400

080027c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	240c      	movs	r4, #12
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	0018      	movs	r0, r3
 80027d6:	2314      	movs	r3, #20
 80027d8:	001a      	movs	r2, r3
 80027da:	2100      	movs	r1, #0
 80027dc:	f003 fcb2 	bl	8006144 <memset>
  if(i2cHandle->Instance==I2C1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_I2C_MspInit+0x80>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d129      	bne.n	800283e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_I2C_MspInit+0x84>)
 80027ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_I2C_MspInit+0x84>)
 80027f0:	2102      	movs	r1, #2
 80027f2:	430a      	orrs	r2, r1
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_I2C_MspInit+0x84>)
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	2202      	movs	r2, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002802:	193b      	adds	r3, r7, r4
 8002804:	22c0      	movs	r2, #192	; 0xc0
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280a:	0021      	movs	r1, r4
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2212      	movs	r2, #18
 8002810:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2201      	movs	r2, #1
 8002816:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2203      	movs	r2, #3
 800281c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2204      	movs	r2, #4
 8002822:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002824:	187b      	adds	r3, r7, r1
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_I2C_MspInit+0x88>)
 8002828:	0019      	movs	r1, r3
 800282a:	0010      	movs	r0, r2
 800282c:	f000 fe52 	bl	80034d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_I2C_MspInit+0x84>)
 8002832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_I2C_MspInit+0x84>)
 8002836:	2180      	movs	r1, #128	; 0x80
 8002838:	0389      	lsls	r1, r1, #14
 800283a:	430a      	orrs	r2, r1
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b009      	add	sp, #36	; 0x24
 8002844:	bd90      	pop	{r4, r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	40005400 	.word	0x40005400
 800284c:	40021000 	.word	0x40021000
 8002850:	50000400 	.word	0x50000400

08002854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002858:	f000 fcee 	bl	8003238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800285c:	f000 f822 	bl	80028a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002860:	f7ff fd50 	bl	8002304 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002864:	f7ff ff70 	bl	8002748 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002868:	f000 fb68 	bl	8002f3c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800286c:	f000 fb12 	bl	8002e94 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002870:	f000 f886 	bl	8002980 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  serial_clear();
 8002874:	f000 f8da 	bl	8002a2c <serial_clear>
  serial_println("Hello world\n\n");
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <main+0x44>)
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f906 	bl	8002a8c <serial_println>
//  serial_printf("state = %d\n", state);


//  hts_cal_data = hts221_init();
  bq_init_ret = bq_init();
 8002880:	f7ff fa4c 	bl	8001d1c <bq_init>
 8002884:	0002      	movs	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <main+0x48>)
 8002888:	601a      	str	r2, [r3, #0]
  VCNL4010_enable_Interrupt();
 800288a:	f000 fbcb 	bl	8003024 <VCNL4010_enable_Interrupt>

  HAL_TIM_Base_Start_IT(&htim6);
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <main+0x4c>)
 8002890:	0018      	movs	r0, r3
 8002892:	f002 fd15 	bl	80052c0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002896:	e7fe      	b.n	8002896 <main+0x42>
 8002898:	0800616c 	.word	0x0800616c
 800289c:	200000c4 	.word	0x200000c4
 80028a0:	200000c8 	.word	0x200000c8

080028a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b09d      	sub	sp, #116	; 0x74
 80028a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028aa:	2438      	movs	r4, #56	; 0x38
 80028ac:	193b      	adds	r3, r7, r4
 80028ae:	0018      	movs	r0, r3
 80028b0:	2338      	movs	r3, #56	; 0x38
 80028b2:	001a      	movs	r2, r3
 80028b4:	2100      	movs	r1, #0
 80028b6:	f003 fc45 	bl	8006144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ba:	2324      	movs	r3, #36	; 0x24
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	0018      	movs	r0, r3
 80028c0:	2314      	movs	r3, #20
 80028c2:	001a      	movs	r2, r3
 80028c4:	2100      	movs	r1, #0
 80028c6:	f003 fc3d 	bl	8006144 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028ca:	003b      	movs	r3, r7
 80028cc:	0018      	movs	r0, r3
 80028ce:	2324      	movs	r3, #36	; 0x24
 80028d0:	001a      	movs	r2, r3
 80028d2:	2100      	movs	r1, #0
 80028d4:	f003 fc36 	bl	8006144 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <SystemClock_Config+0xd4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a27      	ldr	r2, [pc, #156]	; (800297c <SystemClock_Config+0xd8>)
 80028de:	401a      	ands	r2, r3
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <SystemClock_Config+0xd4>)
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	0109      	lsls	r1, r1, #4
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80028ea:	0021      	movs	r1, r4
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	2210      	movs	r2, #16
 80028f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2201      	movs	r2, #1
 80028f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	22a0      	movs	r2, #160	; 0xa0
 8002902:	0212      	lsls	r2, r2, #8
 8002904:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002906:	187b      	adds	r3, r7, r1
 8002908:	2200      	movs	r2, #0
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800290c:	187b      	adds	r3, r7, r1
 800290e:	0018      	movs	r0, r3
 8002910:	f001 fd4a 	bl	80043a8 <HAL_RCC_OscConfig>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d001      	beq.n	800291c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002918:	f000 f83f 	bl	800299a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800291c:	2124      	movs	r1, #36	; 0x24
 800291e:	187b      	adds	r3, r7, r1
 8002920:	220f      	movs	r2, #15
 8002922:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002924:	187b      	adds	r3, r7, r1
 8002926:	2200      	movs	r2, #0
 8002928:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800292a:	187b      	adds	r3, r7, r1
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002930:	187b      	adds	r3, r7, r1
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002936:	187b      	adds	r3, r7, r1
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800293c:	187b      	adds	r3, r7, r1
 800293e:	2100      	movs	r1, #0
 8002940:	0018      	movs	r0, r3
 8002942:	f002 f8f5 	bl	8004b30 <HAL_RCC_ClockConfig>
 8002946:	1e03      	subs	r3, r0, #0
 8002948:	d001      	beq.n	800294e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800294a:	f000 f826 	bl	800299a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800294e:	003b      	movs	r3, r7
 8002950:	220a      	movs	r2, #10
 8002952:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002954:	003b      	movs	r3, r7
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800295a:	003b      	movs	r3, r7
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002960:	003b      	movs	r3, r7
 8002962:	0018      	movs	r0, r3
 8002964:	f002 fb08 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800296c:	f000 f815 	bl	800299a <Error_Handler>
  }
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b01d      	add	sp, #116	; 0x74
 8002976:	bd90      	pop	{r4, r7, pc}
 8002978:	40007000 	.word	0x40007000
 800297c:	ffffe7ff 	.word	0xffffe7ff

08002980 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002984:	2200      	movs	r2, #0
 8002986:	2100      	movs	r1, #0
 8002988:	2011      	movs	r0, #17
 800298a:	f000 fd71 	bl	8003470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800298e:	2011      	movs	r0, #17
 8002990:	f000 fd83 	bl	800349a <HAL_NVIC_EnableIRQ>
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800299e:	b672      	cpsid	i
}
 80029a0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <Error_Handler+0x8>

080029a4 <convert>:

// Internal functions to serial_print
char *convert(unsigned int num, int base);
size_t strlen(const char *str);

char *convert(unsigned int num, int base) { 
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
	static char Representation[]= "0123456789ABCDEF";
	static char buffer[50]; 
	char *ptr; 
	
	ptr = &buffer[49]; 
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <convert+0x50>)
 80029b0:	60fb      	str	r3, [r7, #12]
	*ptr = '\0'; 
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
	
	do { 
		*--ptr = Representation[num%base]; 
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0011      	movs	r1, r2
 80029be:	0018      	movs	r0, r3
 80029c0:	f7fd fc28 	bl	8000214 <__aeabi_uidivmod>
 80029c4:	000b      	movs	r3, r1
 80029c6:	001a      	movs	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <convert+0x54>)
 80029d0:	5c9a      	ldrb	r2, [r3, r2]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	701a      	strb	r2, [r3, #0]
		num /= base; 
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	0019      	movs	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fd fb94 	bl	8000108 <__udivsi3>
 80029e0:	0003      	movs	r3, r0
 80029e2:	607b      	str	r3, [r7, #4]
	} while(num != 0); 
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e6      	bne.n	80029b8 <convert+0x14>
	
	return(ptr); 
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b004      	add	sp, #16
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000071 	.word	0x20000071
 80029f8:	20000000 	.word	0x20000000

080029fc <strlen>:

/*!
    @brief https://stackoverflow.com/questions/22520413/c-strlen-implementation-in-one-line-of-code
*/
size_t strlen (const char *str) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
    return (*str) ? strlen(++str) + 1 : 0;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <strlen+0x24>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7ff fff1 	bl	80029fc <strlen>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	e000      	b.n	8002a22 <strlen+0x26>
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	0018      	movs	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b002      	add	sp, #8
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <serial_clear>:
// End of internal functions for serial_print

void serial_clear() {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
  char clear_sequence[] = {0x1b, 0x5B, 0x32, 0x4A, 0x1b, 0x5B, 0x48};
 8002a32:	003b      	movs	r3, r7
 8002a34:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <serial_clear+0x2c>)
 8002a36:	6811      	ldr	r1, [r2, #0]
 8002a38:	6019      	str	r1, [r3, #0]
 8002a3a:	8891      	ldrh	r1, [r2, #4]
 8002a3c:	8099      	strh	r1, [r3, #4]
 8002a3e:	7992      	ldrb	r2, [r2, #6]
 8002a40:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&SERIAL_UART, (unsigned char*) clear_sequence, sizeof clear_sequence, HAL_MAX_DELAY);
 8002a42:	2301      	movs	r3, #1
 8002a44:	425b      	negs	r3, r3
 8002a46:	0039      	movs	r1, r7
 8002a48:	4804      	ldr	r0, [pc, #16]	; (8002a5c <serial_clear+0x30>)
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	f002 fe94 	bl	8005778 <HAL_UART_Transmit>
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	0800617c 	.word	0x0800617c
 8002a5c:	20000108 	.word	0x20000108

08002a60 <serial_print>:

void serial_print(char string[]) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&SERIAL_UART, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7ff ffc6 	bl	80029fc <strlen>
 8002a70:	0003      	movs	r3, r0
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	2301      	movs	r3, #1
 8002a76:	425b      	negs	r3, r3
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4803      	ldr	r0, [pc, #12]	; (8002a88 <serial_print+0x28>)
 8002a7c:	f002 fe7c 	bl	8005778 <HAL_UART_Transmit>
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000108 	.word	0x20000108

08002a8c <serial_println>:

void serial_println(char *string) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&SERIAL_UART, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff ffb0 	bl	80029fc <strlen>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	425b      	negs	r3, r3
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	480a      	ldr	r0, [pc, #40]	; (8002ad0 <serial_println+0x44>)
 8002aa8:	f002 fe66 	bl	8005778 <HAL_UART_Transmit>
  char newline[] = "\r\f";
 8002aac:	200c      	movs	r0, #12
 8002aae:	183b      	adds	r3, r7, r0
 8002ab0:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <serial_println+0x48>)
 8002ab2:	8811      	ldrh	r1, [r2, #0]
 8002ab4:	8019      	strh	r1, [r3, #0]
 8002ab6:	7892      	ldrb	r2, [r2, #2]
 8002ab8:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&SERIAL_UART, (unsigned char*) newline, 2, HAL_MAX_DELAY);
 8002aba:	2301      	movs	r3, #1
 8002abc:	425b      	negs	r3, r3
 8002abe:	1839      	adds	r1, r7, r0
 8002ac0:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <serial_println+0x44>)
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f002 fe58 	bl	8005778 <HAL_UART_Transmit>
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000108 	.word	0x20000108
 8002ad4:	08006184 	.word	0x08006184

08002ad8 <serial_putc>:

void serial_putc(char c) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	0002      	movs	r2, r0
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&SERIAL_UART, (unsigned char*) &c, 1, HAL_MAX_DELAY);
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	425b      	negs	r3, r3
 8002ae8:	1df9      	adds	r1, r7, #7
 8002aea:	4804      	ldr	r0, [pc, #16]	; (8002afc <serial_putc+0x24>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	f002 fe43 	bl	8005778 <HAL_UART_Transmit>
}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b002      	add	sp, #8
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	20000108 	.word	0x20000108

08002b00 <serial_printf>:

/*!
    @brief a version of printf implmented from http://www.firmcodes.com/write-printf-function-c/
*/
void serial_printf(char format[], ...) { 
 8002b00:	b40f      	push	{r0, r1, r2, r3}
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
    char c;
	char *s; 
	
	//Module 1: Initializing Myprintf's arguments 
	va_list arg; 
	va_start(arg, format); 
 8002b08:	2324      	movs	r3, #36	; 0x24
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	603b      	str	r3, [r7, #0]
	
	for(traverse = format; *traverse != '\0'; traverse++) { 
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	e079      	b.n	8002c08 <serial_printf+0x108>
		while( (*traverse != '%') && (*traverse != '\0')) {
            if (*traverse == '\n') {
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b0a      	cmp	r3, #10
 8002b1a:	d104      	bne.n	8002b26 <serial_printf+0x26>
            	serial_print("\r\f");
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <serial_printf+0x124>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7ff ff9e 	bl	8002a60 <serial_print>
 8002b24:	e004      	b.n	8002b30 <serial_printf+0x30>
            }
            else {
            	serial_putc(*traverse);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7ff ffd4 	bl	8002ad8 <serial_putc>
            }
			traverse++; 
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3301      	adds	r3, #1
 8002b34:	617b      	str	r3, [r7, #20]
		while( (*traverse != '%') && (*traverse != '\0')) {
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b25      	cmp	r3, #37	; 0x25
 8002b3c:	d003      	beq.n	8002b46 <serial_printf+0x46>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1e6      	bne.n	8002b14 <serial_printf+0x14>
		} 

		if (*traverse == '\0') break;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d061      	beq.n	8002c12 <serial_printf+0x112>
		traverse++; 
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3301      	adds	r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
		
		//Module 2: Fetching and executing arguments
		switch(*traverse) { 
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	3b63      	subs	r3, #99	; 0x63
 8002b5a:	2b15      	cmp	r3, #21
 8002b5c:	d851      	bhi.n	8002c02 <serial_printf+0x102>
 8002b5e:	009a      	lsls	r2, r3, #2
 8002b60:	4b31      	ldr	r3, [pc, #196]	; (8002c28 <serial_printf+0x128>)
 8002b62:	18d3      	adds	r3, r2, r3
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	469f      	mov	pc, r3
			case 'c' : 
                c = va_arg(arg,int);		//Fetch char argument
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	1d1a      	adds	r2, r3, #4
 8002b6c:	603a      	str	r2, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	1dfb      	adds	r3, r7, #7
 8002b72:	701a      	strb	r2, [r3, #0]
				serial_putc(c);
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff ffad 	bl	8002ad8 <serial_putc>
				break; 	
 8002b7e:	e040      	b.n	8002c02 <serial_printf+0x102>
			case 'd' : 
                signed_i = va_arg(arg,int); 		//Fetch Decimal/Integer argument
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	603a      	str	r2, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	613b      	str	r3, [r7, #16]
				if (signed_i < 0) {
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	da06      	bge.n	8002b9e <serial_printf+0x9e>
                    signed_i = -signed_i;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	425b      	negs	r3, r3
 8002b94:	613b      	str	r3, [r7, #16]
                    serial_print("-");
 8002b96:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <serial_printf+0x12c>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7ff ff61 	bl	8002a60 <serial_print>
                } 
                serial_print(convert(signed_i, 10));
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	210a      	movs	r1, #10
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7ff fefe 	bl	80029a4 <convert>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7ff ff58 	bl	8002a60 <serial_print>
                break; 	
 8002bb0:	e027      	b.n	8002c02 <serial_printf+0x102>
			case 'o':
                i = va_arg(arg,unsigned int); //Fetch Octal representation
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	1d1a      	adds	r2, r3, #4
 8002bb6:	603a      	str	r2, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 8));
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2108      	movs	r1, #8
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff feef 	bl	80029a4 <convert>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff ff49 	bl	8002a60 <serial_print>
                break; 
 8002bce:	e018      	b.n	8002c02 <serial_printf+0x102>
			case 's': 
                s = va_arg(arg,char *); 		//Fetch string
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	1d1a      	adds	r2, r3, #4
 8002bd4:	603a      	str	r2, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60bb      	str	r3, [r7, #8]
                serial_print(s);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff ff3f 	bl	8002a60 <serial_print>
                break; 
 8002be2:	e00e      	b.n	8002c02 <serial_printf+0x102>
			case 'x': 
                i = va_arg(arg,unsigned int); //Fetch Hexadecimal representation
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	603a      	str	r2, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 16));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2110      	movs	r1, #16
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff fed6 	bl	80029a4 <convert>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7ff ff30 	bl	8002a60 <serial_print>
                break; 
 8002c00:	46c0      	nop			; (mov r8, r8)
	for(traverse = format; *traverse != '\0'; traverse++) { 
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3301      	adds	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d192      	bne.n	8002b36 <serial_printf+0x36>
		}	
	} 

	//Module 3: Closing argument list to necessary clean-up
	va_end(arg); 
} 
 8002c10:	e000      	b.n	8002c14 <serial_printf+0x114>
		if (*traverse == '\0') break;
 8002c12:	46c0      	nop			; (mov r8, r8)
} 
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b006      	add	sp, #24
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	bc08      	pop	{r3}
 8002c1e:	b004      	add	sp, #16
 8002c20:	4718      	bx	r3
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	08006184 	.word	0x08006184
 8002c28:	08006404 	.word	0x08006404
 8002c2c:	08006188 	.word	0x08006188

08002c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c34:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <HAL_MspInit+0x24>)
 8002c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_MspInit+0x24>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_MspInit+0x24>)
 8002c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_MspInit+0x24>)
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	0549      	lsls	r1, r1, #21
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <NMI_Handler+0x4>

08002c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c62:	e7fe      	b.n	8002c62 <HardFault_Handler+0x4>

08002c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c7c:	f000 fb30 	bl	80032e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002c8c:	2004      	movs	r0, #4
 8002c8e:	f000 fd97 	bl	80037c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */
  serial_println("\nEXTI Interrupt\n");
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <EXTI2_3_IRQHandler+0x24>)
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff fef9 	bl	8002a8c <serial_println>
  VCNL4010_ack_ISR();
 8002c9a:	f000 fa09 	bl	80030b0 <VCNL4010_ack_ISR>
  state = 1;
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <EXTI2_3_IRQHandler+0x28>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
//  serial_printf("state = %d\n", state);
  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	0800618c 	.word	0x0800618c
 8002cb0:	2000003c 	.word	0x2000003c

08002cb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cba:	4b63      	ldr	r3, [pc, #396]	; (8002e48 <TIM6_DAC_IRQHandler+0x194>)
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f002 fb4b 	bl	8005358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  if (hts_cal_data != NULL){
 8002cc2:	4b62      	ldr	r3, [pc, #392]	; (8002e4c <TIM6_DAC_IRQHandler+0x198>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d02b      	beq.n	8002d22 <TIM6_DAC_IRQHandler+0x6e>
	  //temp
	  int temp = hts221_get_temp('C', hts_cal_data);
 8002cca:	4b60      	ldr	r3, [pc, #384]	; (8002e4c <TIM6_DAC_IRQHandler+0x198>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0019      	movs	r1, r3
 8002cd0:	2043      	movs	r0, #67	; 0x43
 8002cd2:	f7ff fb5b 	bl	800238c <hts221_get_temp>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	61fb      	str	r3, [r7, #28]
	  if (temp == TEMP_ERROR) serial_printf("Error reading temperature\r\n");
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4a5c      	ldr	r2, [pc, #368]	; (8002e50 <TIM6_DAC_IRQHandler+0x19c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d104      	bne.n	8002cec <TIM6_DAC_IRQHandler+0x38>
 8002ce2:	4b5c      	ldr	r3, [pc, #368]	; (8002e54 <TIM6_DAC_IRQHandler+0x1a0>)
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff ff0b 	bl	8002b00 <serial_printf>
 8002cea:	e005      	b.n	8002cf8 <TIM6_DAC_IRQHandler+0x44>
	  else serial_printf("Current temperature is \t\t\t%d\tC\r\n", temp);
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	4b5a      	ldr	r3, [pc, #360]	; (8002e58 <TIM6_DAC_IRQHandler+0x1a4>)
 8002cf0:	0011      	movs	r1, r2
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7ff ff04 	bl	8002b00 <serial_printf>
	  //humid
	  int humid = hts221_get_humid(hts_cal_data);
 8002cf8:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <TIM6_DAC_IRQHandler+0x198>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7ff fc1d 	bl	800253c <hts221_get_humid>
 8002d02:	0003      	movs	r3, r0
 8002d04:	61bb      	str	r3, [r7, #24]
	  if (humid == HUMID_ERROR) serial_printf("Error reading humidity\r\n");
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	d104      	bne.n	8002d16 <TIM6_DAC_IRQHandler+0x62>
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <TIM6_DAC_IRQHandler+0x1a8>)
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7ff fef6 	bl	8002b00 <serial_printf>
 8002d14:	e005      	b.n	8002d22 <TIM6_DAC_IRQHandler+0x6e>
	  else serial_printf("Current Relative Humidity is \t\t%d\t%c\r\n", humid,37);
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <TIM6_DAC_IRQHandler+0x1ac>)
 8002d1a:	2225      	movs	r2, #37	; 0x25
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7ff feef 	bl	8002b00 <serial_printf>
  	  //Prox.
//  	  uint16_t proximity = VCNL4010_readProximity();
//  	  serial_printf("Proximity Reading is \t\t\t%d\r\n", proximity);

  	  //Battery Baby Sitter
  	  uint16_t voltage = BQ27441_voltage();
 8002d22:	2516      	movs	r5, #22
 8002d24:	197c      	adds	r4, r7, r5
 8002d26:	f7ff f863 	bl	8001df0 <BQ27441_voltage>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	8023      	strh	r3, [r4, #0]
  	  uint16_t soc = BQ27441_soc(FILTERED);
 8002d2e:	2614      	movs	r6, #20
 8002d30:	19bc      	adds	r4, r7, r6
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7ff f904 	bl	8001f40 <BQ27441_soc>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	8023      	strh	r3, [r4, #0]
  	  uint16_t current = BQ27441_current(AVG);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7ff f860 	bl	8001e02 <BQ27441_current>
 8002d42:	0003      	movs	r3, r0
 8002d44:	001a      	movs	r2, r3
 8002d46:	2312      	movs	r3, #18
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	801a      	strh	r2, [r3, #0]
  	  uint16_t cap_remaining = BQ27441_capacity(REMAIN);
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	18bc      	adds	r4, r7, r2
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7ff f88d 	bl	8001e70 <BQ27441_capacity>
 8002d56:	0003      	movs	r3, r0
 8002d58:	8023      	strh	r3, [r4, #0]
  	  uint16_t cap_max = BQ27441_capacity(DESIGN);
 8002d5a:	210e      	movs	r1, #14
 8002d5c:	187c      	adds	r4, r7, r1
 8002d5e:	2008      	movs	r0, #8
 8002d60:	f7ff f886 	bl	8001e70 <BQ27441_capacity>
 8002d64:	0003      	movs	r3, r0
 8002d66:	8023      	strh	r3, [r4, #0]
  	  int16_t power = BQ27441_power(); //average draw
 8002d68:	200c      	movs	r0, #12
 8002d6a:	183c      	adds	r4, r7, r0
 8002d6c:	f7ff f8de 	bl	8001f2c <BQ27441_power>
 8002d70:	0003      	movs	r3, r0
 8002d72:	8023      	strh	r3, [r4, #0]
  	  uint16_t soh = BQ27441_soh(PERCENT);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7ff f90b 	bl	8001f90 <BQ27441_soh>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	240a      	movs	r4, #10
 8002d80:	193b      	adds	r3, r7, r4
 8002d82:	801a      	strh	r2, [r3, #0]
  	  uint16_t temp_bat = BQ27441_temperature(BATTERY) / 10;
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7ff f92b 	bl	8001fe0 <BQ27441_temperature>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	18bc      	adds	r4, r7, r2
 8002d90:	210a      	movs	r1, #10
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7fd f9b8 	bl	8000108 <__udivsi3>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	8023      	strh	r3, [r4, #0]
  	  uint16_t temp_bq_IC = BQ27441_temperature(INTERNAL_TEMP) / 10;
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff f91f 	bl	8001fe0 <BQ27441_temperature>
 8002da2:	0003      	movs	r3, r0
 8002da4:	1dbc      	adds	r4, r7, #6
 8002da6:	210a      	movs	r1, #10
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7fd f9ad 	bl	8000108 <__udivsi3>
 8002dae:	0003      	movs	r3, r0
 8002db0:	8023      	strh	r3, [r4, #0]

  	  serial_printf("State of Charge\t\t\t\t%d\t%%\r\n", soc);
 8002db2:	19bb      	adds	r3, r7, r6
 8002db4:	881a      	ldrh	r2, [r3, #0]
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <TIM6_DAC_IRQHandler+0x1b0>)
 8002db8:	0011      	movs	r1, r2
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7ff fea0 	bl	8002b00 <serial_printf>
  	  serial_printf("Battery Voltage\t\t\t\t%d\tmV\r\n", voltage);
 8002dc0:	197b      	adds	r3, r7, r5
 8002dc2:	881a      	ldrh	r2, [r3, #0]
 8002dc4:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <TIM6_DAC_IRQHandler+0x1b4>)
 8002dc6:	0011      	movs	r1, r2
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff fe99 	bl	8002b00 <serial_printf>
  	  serial_printf("Current\t\t\t\t\t%d\tmA\r\n", current);
 8002dce:	2312      	movs	r3, #18
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	881a      	ldrh	r2, [r3, #0]
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <TIM6_DAC_IRQHandler+0x1b8>)
 8002dd6:	0011      	movs	r1, r2
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7ff fe91 	bl	8002b00 <serial_printf>
  	  serial_printf("Max Capacity\t\t\t\t%d\tmAh\r\n", cap_max);
 8002dde:	210e      	movs	r1, #14
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	881a      	ldrh	r2, [r3, #0]
 8002de4:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <TIM6_DAC_IRQHandler+0x1bc>)
 8002de6:	0011      	movs	r1, r2
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7ff fe89 	bl	8002b00 <serial_printf>
  	  serial_printf("Remaining Capacity\t\t\t%d\tmAh\r\n", cap_remaining);
 8002dee:	2210      	movs	r2, #16
 8002df0:	18bb      	adds	r3, r7, r2
 8002df2:	881a      	ldrh	r2, [r3, #0]
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <TIM6_DAC_IRQHandler+0x1c0>)
 8002df6:	0011      	movs	r1, r2
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff fe81 	bl	8002b00 <serial_printf>
  	  serial_printf("Ave power consumption\t\t\t%d\tmW\r\n", power);
 8002dfe:	200c      	movs	r0, #12
 8002e00:	183b      	adds	r3, r7, r0
 8002e02:	2200      	movs	r2, #0
 8002e04:	5e9a      	ldrsh	r2, [r3, r2]
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <TIM6_DAC_IRQHandler+0x1c4>)
 8002e08:	0011      	movs	r1, r2
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f7ff fe78 	bl	8002b00 <serial_printf>
  	  serial_printf("Health\t\t\t\t\t%d\t%%\r\n", soh);
 8002e10:	240a      	movs	r4, #10
 8002e12:	193b      	adds	r3, r7, r4
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <TIM6_DAC_IRQHandler+0x1c8>)
 8002e18:	0011      	movs	r1, r2
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7ff fe70 	bl	8002b00 <serial_printf>
  	  serial_printf("Battery Pack Temp\t\t\t%d\tK\r\n", temp_bat);
 8002e20:	2208      	movs	r2, #8
 8002e22:	18bb      	adds	r3, r7, r2
 8002e24:	881a      	ldrh	r2, [r3, #0]
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <TIM6_DAC_IRQHandler+0x1cc>)
 8002e28:	0011      	movs	r1, r2
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f7ff fe68 	bl	8002b00 <serial_printf>
  	  serial_printf("Current Bat IC Temp is\t\t\t%d\tK\r\n\n", temp_bq_IC);
 8002e30:	1dbb      	adds	r3, r7, #6
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <TIM6_DAC_IRQHandler+0x1d0>)
 8002e36:	0011      	movs	r1, r2
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff fe61 	bl	8002b00 <serial_printf>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b009      	add	sp, #36	; 0x24
 8002e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	200000c8 	.word	0x200000c8
 8002e4c:	200000c0 	.word	0x200000c0
 8002e50:	fffffe34 	.word	0xfffffe34
 8002e54:	080061a0 	.word	0x080061a0
 8002e58:	080061bc 	.word	0x080061bc
 8002e5c:	080061e0 	.word	0x080061e0
 8002e60:	080061fc 	.word	0x080061fc
 8002e64:	08006224 	.word	0x08006224
 8002e68:	08006240 	.word	0x08006240
 8002e6c:	0800625c 	.word	0x0800625c
 8002e70:	08006270 	.word	0x08006270
 8002e74:	0800628c 	.word	0x0800628c
 8002e78:	080062ac 	.word	0x080062ac
 8002e7c:	080062cc 	.word	0x080062cc
 8002e80:	080062e0 	.word	0x080062e0
 8002e84:	080062fc 	.word	0x080062fc

08002e88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e9a:	003b      	movs	r3, r7
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	f003 f94e 	bl	8006144 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <MX_TIM6_Init+0x6c>)
 8002eaa:	4a16      	ldr	r2, [pc, #88]	; (8002f04 <MX_TIM6_Init+0x70>)
 8002eac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2097-1;
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <MX_TIM6_Init+0x6c>)
 8002eb0:	2283      	movs	r2, #131	; 0x83
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <MX_TIM6_Init+0x6c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002ebc:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <MX_TIM6_Init+0x6c>)
 8002ebe:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <MX_TIM6_Init+0x74>)
 8002ec0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <MX_TIM6_Init+0x6c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <MX_TIM6_Init+0x6c>)
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f002 f9b8 	bl	8005240 <HAL_TIM_Base_Init>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8002ed4:	f7ff fd61 	bl	800299a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed8:	003b      	movs	r3, r7
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ede:	003b      	movs	r3, r7
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ee4:	003a      	movs	r2, r7
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <MX_TIM6_Init+0x6c>)
 8002ee8:	0011      	movs	r1, r2
 8002eea:	0018      	movs	r0, r3
 8002eec:	f002 fb98 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8002ef0:	1e03      	subs	r3, r0, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8002ef4:	f7ff fd51 	bl	800299a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200000c8 	.word	0x200000c8
 8002f04:	40001000 	.word	0x40001000
 8002f08:	000003e7 	.word	0x000003e7

08002f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a06      	ldr	r2, [pc, #24]	; (8002f34 <HAL_TIM_Base_MspInit+0x28>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d105      	bne.n	8002f2a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_TIM_Base_MspInit+0x2c>)
 8002f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_TIM_Base_MspInit+0x2c>)
 8002f24:	2110      	movs	r1, #16
 8002f26:	430a      	orrs	r2, r1
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b002      	add	sp, #8
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	40001000 	.word	0x40001000
 8002f38:	40021000 	.word	0x40021000

08002f3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f42:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <MX_USART2_UART_Init+0x5c>)
 8002f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f46:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f48:	2296      	movs	r2, #150	; 0x96
 8002f4a:	0192      	lsls	r2, r2, #6
 8002f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f62:	220c      	movs	r2, #12
 8002f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f80:	0018      	movs	r0, r3
 8002f82:	f002 fba5 	bl	80056d0 <HAL_UART_Init>
 8002f86:	1e03      	subs	r3, r0, #0
 8002f88:	d001      	beq.n	8002f8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f8a:	f7ff fd06 	bl	800299a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000108 	.word	0x20000108
 8002f98:	40004400 	.word	0x40004400

08002f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	240c      	movs	r4, #12
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	0018      	movs	r0, r3
 8002faa:	2314      	movs	r3, #20
 8002fac:	001a      	movs	r2, r3
 8002fae:	2100      	movs	r1, #0
 8002fb0:	f003 f8c8 	bl	8006144 <memset>
  if(uartHandle->Instance==USART2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	; (800301c <HAL_UART_MspInit+0x80>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d129      	bne.n	8003012 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fbe:	4b18      	ldr	r3, [pc, #96]	; (8003020 <HAL_UART_MspInit+0x84>)
 8002fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc2:	4b17      	ldr	r3, [pc, #92]	; (8003020 <HAL_UART_MspInit+0x84>)
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	0289      	lsls	r1, r1, #10
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fcc:	4b14      	ldr	r3, [pc, #80]	; (8003020 <HAL_UART_MspInit+0x84>)
 8002fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <HAL_UART_MspInit+0x84>)
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_UART_MspInit+0x84>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	2201      	movs	r2, #1
 8002fde:	4013      	ands	r3, r2
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fe4:	0021      	movs	r1, r4
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	220c      	movs	r2, #12
 8002fea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	2202      	movs	r2, #2
 8002ff0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002ffe:	187b      	adds	r3, r7, r1
 8003000:	2204      	movs	r2, #4
 8003002:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	187a      	adds	r2, r7, r1
 8003006:	23a0      	movs	r3, #160	; 0xa0
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	0011      	movs	r1, r2
 800300c:	0018      	movs	r0, r3
 800300e:	f000 fa61 	bl	80034d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b009      	add	sp, #36	; 0x24
 8003018:	bd90      	pop	{r4, r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	40004400 	.word	0x40004400
 8003020:	40021000 	.word	0x40021000

08003024 <VCNL4010_enable_Interrupt>:
/*!
    @brief  Enable threshold interrupt and set the threshold values
*/
/**************************************************************************/

void VCNL4010_enable_Interrupt() {
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
  VCNL4010_setLEDcurrent(20);
 800302a:	2014      	movs	r0, #20
 800302c:	f000 f859 	bl	80030e2 <VCNL4010_setLEDcurrent>
  //Set INT_THRES_EN
  uint8_t temp = VCNL4010_read8(VCNL4010_INTCONTROL);
 8003030:	1dfc      	adds	r4, r7, #7
 8003032:	2089      	movs	r0, #137	; 0x89
 8003034:	f000 f8b8 	bl	80031a8 <VCNL4010_read8>
 8003038:	0003      	movs	r3, r0
 800303a:	7023      	strb	r3, [r4, #0]
  temp &= 0xf0; //clear first 4 bits
 800303c:	1dfb      	adds	r3, r7, #7
 800303e:	1dfa      	adds	r2, r7, #7
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	210f      	movs	r1, #15
 8003044:	438a      	bics	r2, r1
 8003046:	701a      	strb	r2, [r3, #0]
  temp |= VCNL4010_INT_THRES_EN; //set INT_THRES_EN bit
 8003048:	1dfb      	adds	r3, r7, #7
 800304a:	1dfa      	adds	r2, r7, #7
 800304c:	7812      	ldrb	r2, [r2, #0]
 800304e:	2102      	movs	r1, #2
 8003050:	430a      	orrs	r2, r1
 8003052:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTCONTROL, temp);
 8003054:	1dfb      	adds	r3, r7, #7
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	0019      	movs	r1, r3
 800305a:	2089      	movs	r0, #137	; 0x89
 800305c:	f000 f858 	bl	8003110 <VCNL4010_write8>

  //set low threshold - not really using... so set to 0.
  VCNL4010_write16(VCNL4010_LOWTHRESHOLD, 0);
 8003060:	2100      	movs	r1, #0
 8003062:	208a      	movs	r0, #138	; 0x8a
 8003064:	f000 f874 	bl	8003150 <VCNL4010_write16>

  //set high threshold
  VCNL4010_write16(VCNL4010_HITHRESHOLD, 2500);
 8003068:	4b10      	ldr	r3, [pc, #64]	; (80030ac <VCNL4010_enable_Interrupt+0x88>)
 800306a:	0019      	movs	r1, r3
 800306c:	208c      	movs	r0, #140	; 0x8c
 800306e:	f000 f86f 	bl	8003150 <VCNL4010_write16>

  //set proximity reading to be continuous
  temp = VCNL4010_read8(VCNL4010_COMMAND);
 8003072:	1dfc      	adds	r4, r7, #7
 8003074:	2080      	movs	r0, #128	; 0x80
 8003076:	f000 f897 	bl	80031a8 <VCNL4010_read8>
 800307a:	0003      	movs	r3, r0
 800307c:	7023      	strb	r3, [r4, #0]
  temp |= VCNL4010_SELFTIMED_EN;
 800307e:	1dfb      	adds	r3, r7, #7
 8003080:	1dfa      	adds	r2, r7, #7
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	2101      	movs	r1, #1
 8003086:	430a      	orrs	r2, r1
 8003088:	701a      	strb	r2, [r3, #0]
  temp |= VCNL4010_PERIOD_PROX_EN;
 800308a:	1dfb      	adds	r3, r7, #7
 800308c:	1dfa      	adds	r2, r7, #7
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	2102      	movs	r1, #2
 8003092:	430a      	orrs	r2, r1
 8003094:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_COMMAND, temp);
 8003096:	1dfb      	adds	r3, r7, #7
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	0019      	movs	r1, r3
 800309c:	2080      	movs	r0, #128	; 0x80
 800309e:	f000 f837 	bl	8003110 <VCNL4010_write8>

}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b003      	add	sp, #12
 80030a8:	bd90      	pop	{r4, r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	000009c4 	.word	0x000009c4

080030b0 <VCNL4010_ack_ISR>:
/*!
    @brief  Clear Interrupt Status Register
*/
/**************************************************************************/

void VCNL4010_ack_ISR() {
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
  //Set INT_THRES_EN
  uint8_t temp = VCNL4010_read8(VCNL4010_INTSTAT);
 80030b6:	1dfc      	adds	r4, r7, #7
 80030b8:	208e      	movs	r0, #142	; 0x8e
 80030ba:	f000 f875 	bl	80031a8 <VCNL4010_read8>
 80030be:	0003      	movs	r3, r0
 80030c0:	7023      	strb	r3, [r4, #0]
  temp |= 0x0f; //clear 4 interrupt bits by writing 1???
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	1dfa      	adds	r2, r7, #7
 80030c6:	7812      	ldrb	r2, [r2, #0]
 80030c8:	210f      	movs	r1, #15
 80030ca:	430a      	orrs	r2, r1
 80030cc:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTSTAT, temp);
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	0019      	movs	r1, r3
 80030d4:	208e      	movs	r0, #142	; 0x8e
 80030d6:	f000 f81b 	bl	8003110 <VCNL4010_write8>

}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b003      	add	sp, #12
 80030e0:	bd90      	pop	{r4, r7, pc}

080030e2 <VCNL4010_setLEDcurrent>:
   10 mA, so if you set it to 5, its 50mA. Minimum is 0 (0 mA, off), max is 20
   (200mA)
*/
/**************************************************************************/

void VCNL4010_setLEDcurrent(uint8_t current_10mA) {
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	0002      	movs	r2, r0
 80030ea:	1dfb      	adds	r3, r7, #7
 80030ec:	701a      	strb	r2, [r3, #0]
  if (current_10mA > 20)
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b14      	cmp	r3, #20
 80030f4:	d902      	bls.n	80030fc <VCNL4010_setLEDcurrent+0x1a>
    current_10mA = 20;
 80030f6:	1dfb      	adds	r3, r7, #7
 80030f8:	2214      	movs	r2, #20
 80030fa:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_IRLED, current_10mA);
 80030fc:	1dfb      	adds	r3, r7, #7
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	0019      	movs	r1, r3
 8003102:	2083      	movs	r0, #131	; 0x83
 8003104:	f000 f804 	bl	8003110 <VCNL4010_write8>
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}

08003110 <VCNL4010_write8>:
  }
  return VCNL4010_FAIL;
}

HAL_StatusTypeDef VCNL4010_write8(uint8_t subAddress, uint8_t data)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af04      	add	r7, sp, #16
 8003116:	0002      	movs	r2, r0
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	1dbb      	adds	r3, r7, #6
 800311e:	1c0a      	adds	r2, r1, #0
 8003120:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8003122:	1dfb      	adds	r3, r7, #7
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b29a      	uxth	r2, r3
 8003128:	4808      	ldr	r0, [pc, #32]	; (800314c <VCNL4010_write8+0x3c>)
 800312a:	2301      	movs	r3, #1
 800312c:	425b      	negs	r3, r3
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	2301      	movs	r3, #1
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	1dbb      	adds	r3, r7, #6
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2301      	movs	r3, #1
 800313a:	2126      	movs	r1, #38	; 0x26
 800313c:	f000 fbfc 	bl	8003938 <HAL_I2C_Mem_Write>
 8003140:	0003      	movs	r3, r0

}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b002      	add	sp, #8
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	20000074 	.word	0x20000074

08003150 <VCNL4010_write16>:

HAL_StatusTypeDef VCNL4010_write16(uint8_t subAddress, uint16_t data)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af04      	add	r7, sp, #16
 8003156:	0002      	movs	r2, r0
 8003158:	1dfb      	adds	r3, r7, #7
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	1c0a      	adds	r2, r1, #0
 8003160:	801a      	strh	r2, [r3, #0]

  uint8_t temp[2];
  temp[0] = (uint8_t) 0xFF & (data >> 8); //high byte is stored first
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	b29b      	uxth	r3, r3
 800316a:	b2da      	uxtb	r2, r3
 800316c:	210c      	movs	r1, #12
 800316e:	187b      	adds	r3, r7, r1
 8003170:	701a      	strb	r2, [r3, #0]
  temp[1] = (uint8_t) (0xFF & data);      //low byte is stored second
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	187b      	adds	r3, r7, r1
 800317a:	705a      	strb	r2, [r3, #1]

  return HAL_I2C_Mem_Write(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, temp, 2, HAL_MAX_DELAY);
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b29a      	uxth	r2, r3
 8003182:	4808      	ldr	r0, [pc, #32]	; (80031a4 <VCNL4010_write16+0x54>)
 8003184:	2301      	movs	r3, #1
 8003186:	425b      	negs	r3, r3
 8003188:	9302      	str	r3, [sp, #8]
 800318a:	2302      	movs	r3, #2
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	187b      	adds	r3, r7, r1
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2301      	movs	r3, #1
 8003194:	2126      	movs	r1, #38	; 0x26
 8003196:	f000 fbcf 	bl	8003938 <HAL_I2C_Mem_Write>
 800319a:	0003      	movs	r3, r0

}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	b004      	add	sp, #16
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000074 	.word	0x20000074

080031a8 <VCNL4010_read8>:

uint8_t VCNL4010_read8(uint8_t subAddress){
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af04      	add	r7, sp, #16
 80031ae:	0002      	movs	r2, r0
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	701a      	strb	r2, [r3, #0]

	uint8_t data;
	HAL_I2C_Mem_Read(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4809      	ldr	r0, [pc, #36]	; (80031e0 <VCNL4010_read8+0x38>)
 80031bc:	2301      	movs	r3, #1
 80031be:	425b      	negs	r3, r3
 80031c0:	9302      	str	r3, [sp, #8]
 80031c2:	2301      	movs	r3, #1
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	240f      	movs	r4, #15
 80031c8:	193b      	adds	r3, r7, r4
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2301      	movs	r3, #1
 80031ce:	2126      	movs	r1, #38	; 0x26
 80031d0:	f000 fce0 	bl	8003b94 <HAL_I2C_Mem_Read>
	return ((uint8_t) data);
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	781b      	ldrb	r3, [r3, #0]
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b005      	add	sp, #20
 80031de:	bd90      	pop	{r4, r7, pc}
 80031e0:	20000074 	.word	0x20000074

080031e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80031e4:	480d      	ldr	r0, [pc, #52]	; (800321c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031e8:	480d      	ldr	r0, [pc, #52]	; (8003220 <LoopForever+0x6>)
  ldr r1, =_edata
 80031ea:	490e      	ldr	r1, [pc, #56]	; (8003224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031ec:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <LoopForever+0xe>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f0:	e002      	b.n	80031f8 <LoopCopyDataInit>

080031f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031f6:	3304      	adds	r3, #4

080031f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031fc:	d3f9      	bcc.n	80031f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031fe:	4a0b      	ldr	r2, [pc, #44]	; (800322c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003200:	4c0b      	ldr	r4, [pc, #44]	; (8003230 <LoopForever+0x16>)
  movs r3, #0
 8003202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003204:	e001      	b.n	800320a <LoopFillZerobss>

08003206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003208:	3204      	adds	r2, #4

0800320a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800320c:	d3fb      	bcc.n	8003206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800320e:	f7ff fe3b 	bl	8002e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003212:	f002 ff73 	bl	80060fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003216:	f7ff fb1d 	bl	8002854 <main>

0800321a <LoopForever>:

LoopForever:
    b LoopForever
 800321a:	e7fe      	b.n	800321a <LoopForever>
  ldr   r0, =_estack
 800321c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003224:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8003228:	080064d8 	.word	0x080064d8
  ldr r2, =_sbss
 800322c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003230:	20000190 	.word	0x20000190

08003234 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003234:	e7fe      	b.n	8003234 <ADC1_COMP_IRQHandler>
	...

08003238 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800323e:	1dfb      	adds	r3, r7, #7
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_Init+0x3c>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_Init+0x3c>)
 800324a:	2140      	movs	r1, #64	; 0x40
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003250:	2000      	movs	r0, #0
 8003252:	f000 f811 	bl	8003278 <HAL_InitTick>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d003      	beq.n	8003262 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e001      	b.n	8003266 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003262:	f7ff fce5 	bl	8002c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	781b      	ldrb	r3, [r3, #0]
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b002      	add	sp, #8
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	40022000 	.word	0x40022000

08003278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003280:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <HAL_InitTick+0x5c>)
 8003282:	681c      	ldr	r4, [r3, #0]
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <HAL_InitTick+0x60>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	0019      	movs	r1, r3
 800328a:	23fa      	movs	r3, #250	; 0xfa
 800328c:	0098      	lsls	r0, r3, #2
 800328e:	f7fc ff3b 	bl	8000108 <__udivsi3>
 8003292:	0003      	movs	r3, r0
 8003294:	0019      	movs	r1, r3
 8003296:	0020      	movs	r0, r4
 8003298:	f7fc ff36 	bl	8000108 <__udivsi3>
 800329c:	0003      	movs	r3, r0
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 f90b 	bl	80034ba <HAL_SYSTICK_Config>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d001      	beq.n	80032ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e00f      	b.n	80032cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d80b      	bhi.n	80032ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	2301      	movs	r3, #1
 80032b6:	425b      	negs	r3, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 f8d8 	bl	8003470 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_InitTick+0x64>)
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e000      	b.n	80032cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b003      	add	sp, #12
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	20000014 	.word	0x20000014
 80032d8:	2000001c 	.word	0x2000001c
 80032dc:	20000018 	.word	0x20000018

080032e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_IncTick+0x1c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	001a      	movs	r2, r3
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_IncTick+0x20>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	18d2      	adds	r2, r2, r3
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_IncTick+0x20>)
 80032f2:	601a      	str	r2, [r3, #0]
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	2000001c 	.word	0x2000001c
 8003300:	2000018c 	.word	0x2000018c

08003304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  return uwTick;
 8003308:	4b02      	ldr	r3, [pc, #8]	; (8003314 <HAL_GetTick+0x10>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	2000018c 	.word	0x2000018c

08003318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	0002      	movs	r2, r0
 8003320:	1dfb      	adds	r3, r7, #7
 8003322:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b7f      	cmp	r3, #127	; 0x7f
 800332a:	d809      	bhi.n	8003340 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332c:	1dfb      	adds	r3, r7, #7
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	001a      	movs	r2, r3
 8003332:	231f      	movs	r3, #31
 8003334:	401a      	ands	r2, r3
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <__NVIC_EnableIRQ+0x30>)
 8003338:	2101      	movs	r1, #1
 800333a:	4091      	lsls	r1, r2
 800333c:	000a      	movs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
  }
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b002      	add	sp, #8
 8003346:	bd80      	pop	{r7, pc}
 8003348:	e000e100 	.word	0xe000e100

0800334c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	0002      	movs	r2, r0
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	1dfb      	adds	r3, r7, #7
 8003358:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800335a:	1dfb      	adds	r3, r7, #7
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b7f      	cmp	r3, #127	; 0x7f
 8003360:	d828      	bhi.n	80033b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003362:	4a2f      	ldr	r2, [pc, #188]	; (8003420 <__NVIC_SetPriority+0xd4>)
 8003364:	1dfb      	adds	r3, r7, #7
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b25b      	sxtb	r3, r3
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	33c0      	adds	r3, #192	; 0xc0
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	589b      	ldr	r3, [r3, r2]
 8003372:	1dfa      	adds	r2, r7, #7
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	0011      	movs	r1, r2
 8003378:	2203      	movs	r2, #3
 800337a:	400a      	ands	r2, r1
 800337c:	00d2      	lsls	r2, r2, #3
 800337e:	21ff      	movs	r1, #255	; 0xff
 8003380:	4091      	lsls	r1, r2
 8003382:	000a      	movs	r2, r1
 8003384:	43d2      	mvns	r2, r2
 8003386:	401a      	ands	r2, r3
 8003388:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	019b      	lsls	r3, r3, #6
 800338e:	22ff      	movs	r2, #255	; 0xff
 8003390:	401a      	ands	r2, r3
 8003392:	1dfb      	adds	r3, r7, #7
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	0018      	movs	r0, r3
 8003398:	2303      	movs	r3, #3
 800339a:	4003      	ands	r3, r0
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a0:	481f      	ldr	r0, [pc, #124]	; (8003420 <__NVIC_SetPriority+0xd4>)
 80033a2:	1dfb      	adds	r3, r7, #7
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b25b      	sxtb	r3, r3
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	430a      	orrs	r2, r1
 80033ac:	33c0      	adds	r3, #192	; 0xc0
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033b2:	e031      	b.n	8003418 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b4:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <__NVIC_SetPriority+0xd8>)
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	0019      	movs	r1, r3
 80033bc:	230f      	movs	r3, #15
 80033be:	400b      	ands	r3, r1
 80033c0:	3b08      	subs	r3, #8
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3306      	adds	r3, #6
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	18d3      	adds	r3, r2, r3
 80033ca:	3304      	adds	r3, #4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	1dfa      	adds	r2, r7, #7
 80033d0:	7812      	ldrb	r2, [r2, #0]
 80033d2:	0011      	movs	r1, r2
 80033d4:	2203      	movs	r2, #3
 80033d6:	400a      	ands	r2, r1
 80033d8:	00d2      	lsls	r2, r2, #3
 80033da:	21ff      	movs	r1, #255	; 0xff
 80033dc:	4091      	lsls	r1, r2
 80033de:	000a      	movs	r2, r1
 80033e0:	43d2      	mvns	r2, r2
 80033e2:	401a      	ands	r2, r3
 80033e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	019b      	lsls	r3, r3, #6
 80033ea:	22ff      	movs	r2, #255	; 0xff
 80033ec:	401a      	ands	r2, r3
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	0018      	movs	r0, r3
 80033f4:	2303      	movs	r3, #3
 80033f6:	4003      	ands	r3, r0
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033fc:	4809      	ldr	r0, [pc, #36]	; (8003424 <__NVIC_SetPriority+0xd8>)
 80033fe:	1dfb      	adds	r3, r7, #7
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	001c      	movs	r4, r3
 8003404:	230f      	movs	r3, #15
 8003406:	4023      	ands	r3, r4
 8003408:	3b08      	subs	r3, #8
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	430a      	orrs	r2, r1
 800340e:	3306      	adds	r3, #6
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	18c3      	adds	r3, r0, r3
 8003414:	3304      	adds	r3, #4
 8003416:	601a      	str	r2, [r3, #0]
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	b003      	add	sp, #12
 800341e:	bd90      	pop	{r4, r7, pc}
 8003420:	e000e100 	.word	0xe000e100
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1e5a      	subs	r2, r3, #1
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	045b      	lsls	r3, r3, #17
 8003438:	429a      	cmp	r2, r3
 800343a:	d301      	bcc.n	8003440 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343c:	2301      	movs	r3, #1
 800343e:	e010      	b.n	8003462 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <SysTick_Config+0x44>)
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	3a01      	subs	r2, #1
 8003446:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003448:	2301      	movs	r3, #1
 800344a:	425b      	negs	r3, r3
 800344c:	2103      	movs	r1, #3
 800344e:	0018      	movs	r0, r3
 8003450:	f7ff ff7c 	bl	800334c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <SysTick_Config+0x44>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345a:	4b04      	ldr	r3, [pc, #16]	; (800346c <SysTick_Config+0x44>)
 800345c:	2207      	movs	r2, #7
 800345e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003460:	2300      	movs	r3, #0
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b002      	add	sp, #8
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	e000e010 	.word	0xe000e010

08003470 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	210f      	movs	r1, #15
 800347c:	187b      	adds	r3, r7, r1
 800347e:	1c02      	adds	r2, r0, #0
 8003480:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	187b      	adds	r3, r7, r1
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b25b      	sxtb	r3, r3
 800348a:	0011      	movs	r1, r2
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff ff5d 	bl	800334c <__NVIC_SetPriority>
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b004      	add	sp, #16
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	0002      	movs	r2, r0
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b25b      	sxtb	r3, r3
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7ff ff33 	bl	8003318 <__NVIC_EnableIRQ>
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b002      	add	sp, #8
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7ff ffaf 	bl	8003428 <SysTick_Config>
 80034ca:	0003      	movs	r3, r0
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80034ea:	e14f      	b.n	800378c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4091      	lsls	r1, r2
 80034f6:	000a      	movs	r2, r1
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d100      	bne.n	8003504 <HAL_GPIO_Init+0x30>
 8003502:	e140      	b.n	8003786 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d00b      	beq.n	8003524 <HAL_GPIO_Init+0x50>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d007      	beq.n	8003524 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003518:	2b11      	cmp	r3, #17
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b12      	cmp	r3, #18
 8003522:	d130      	bne.n	8003586 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	409a      	lsls	r2, r3
 8003532:	0013      	movs	r3, r2
 8003534:	43da      	mvns	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	409a      	lsls	r2, r3
 8003546:	0013      	movs	r3, r2
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800355a:	2201      	movs	r2, #1
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	409a      	lsls	r2, r3
 8003560:	0013      	movs	r3, r2
 8003562:	43da      	mvns	r2, r3
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	2201      	movs	r2, #1
 8003572:	401a      	ands	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	409a      	lsls	r2, r3
 8003578:	0013      	movs	r3, r2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	2203      	movs	r2, #3
 8003592:	409a      	lsls	r2, r3
 8003594:	0013      	movs	r3, r2
 8003596:	43da      	mvns	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	409a      	lsls	r2, r3
 80035a8:	0013      	movs	r3, r2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0xf2>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b12      	cmp	r3, #18
 80035c4:	d123      	bne.n	800360e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	08da      	lsrs	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3208      	adds	r2, #8
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	58d3      	ldr	r3, [r2, r3]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2207      	movs	r2, #7
 80035d8:	4013      	ands	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	220f      	movs	r2, #15
 80035de:	409a      	lsls	r2, r3
 80035e0:	0013      	movs	r3, r2
 80035e2:	43da      	mvns	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2107      	movs	r1, #7
 80035f2:	400b      	ands	r3, r1
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	409a      	lsls	r2, r3
 80035f8:	0013      	movs	r3, r2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	08da      	lsrs	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3208      	adds	r2, #8
 8003608:	0092      	lsls	r2, r2, #2
 800360a:	6939      	ldr	r1, [r7, #16]
 800360c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	409a      	lsls	r2, r3
 800361c:	0013      	movs	r3, r2
 800361e:	43da      	mvns	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2203      	movs	r2, #3
 800362c:	401a      	ands	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	409a      	lsls	r2, r3
 8003634:	0013      	movs	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	055b      	lsls	r3, r3, #21
 800364a:	4013      	ands	r3, r2
 800364c:	d100      	bne.n	8003650 <HAL_GPIO_Init+0x17c>
 800364e:	e09a      	b.n	8003786 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003650:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003654:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003656:	2101      	movs	r1, #1
 8003658:	430a      	orrs	r2, r1
 800365a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800365c:	4a52      	ldr	r2, [pc, #328]	; (80037a8 <HAL_GPIO_Init+0x2d4>)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	3302      	adds	r3, #2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	589b      	ldr	r3, [r3, r2]
 8003668:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2203      	movs	r2, #3
 800366e:	4013      	ands	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	220f      	movs	r2, #15
 8003674:	409a      	lsls	r2, r3
 8003676:	0013      	movs	r3, r2
 8003678:	43da      	mvns	r2, r3
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	23a0      	movs	r3, #160	; 0xa0
 8003684:	05db      	lsls	r3, r3, #23
 8003686:	429a      	cmp	r2, r3
 8003688:	d019      	beq.n	80036be <HAL_GPIO_Init+0x1ea>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a47      	ldr	r2, [pc, #284]	; (80037ac <HAL_GPIO_Init+0x2d8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <HAL_GPIO_Init+0x1e6>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a46      	ldr	r2, [pc, #280]	; (80037b0 <HAL_GPIO_Init+0x2dc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00d      	beq.n	80036b6 <HAL_GPIO_Init+0x1e2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a45      	ldr	r2, [pc, #276]	; (80037b4 <HAL_GPIO_Init+0x2e0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d007      	beq.n	80036b2 <HAL_GPIO_Init+0x1de>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a44      	ldr	r2, [pc, #272]	; (80037b8 <HAL_GPIO_Init+0x2e4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d101      	bne.n	80036ae <HAL_GPIO_Init+0x1da>
 80036aa:	2305      	movs	r3, #5
 80036ac:	e008      	b.n	80036c0 <HAL_GPIO_Init+0x1ec>
 80036ae:	2306      	movs	r3, #6
 80036b0:	e006      	b.n	80036c0 <HAL_GPIO_Init+0x1ec>
 80036b2:	2303      	movs	r3, #3
 80036b4:	e004      	b.n	80036c0 <HAL_GPIO_Init+0x1ec>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e002      	b.n	80036c0 <HAL_GPIO_Init+0x1ec>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_GPIO_Init+0x1ec>
 80036be:	2300      	movs	r3, #0
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	2103      	movs	r1, #3
 80036c4:	400a      	ands	r2, r1
 80036c6:	0092      	lsls	r2, r2, #2
 80036c8:	4093      	lsls	r3, r2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d0:	4935      	ldr	r1, [pc, #212]	; (80037a8 <HAL_GPIO_Init+0x2d4>)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036de:	4b37      	ldr	r3, [pc, #220]	; (80037bc <HAL_GPIO_Init+0x2e8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43da      	mvns	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	025b      	lsls	r3, r3, #9
 80036f6:	4013      	ands	r3, r2
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003702:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_GPIO_Init+0x2e8>)
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <HAL_GPIO_Init+0x2e8>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43da      	mvns	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	029b      	lsls	r3, r3, #10
 8003720:	4013      	ands	r3, r2
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800372c:	4b23      	ldr	r3, [pc, #140]	; (80037bc <HAL_GPIO_Init+0x2e8>)
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_GPIO_Init+0x2e8>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	43da      	mvns	r2, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	035b      	lsls	r3, r3, #13
 800374a:	4013      	ands	r3, r2
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_GPIO_Init+0x2e8>)
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_GPIO_Init+0x2e8>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	43da      	mvns	r2, r3
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	039b      	lsls	r3, r3, #14
 8003774:	4013      	ands	r3, r2
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_GPIO_Init+0x2e8>)
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	3301      	adds	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	40da      	lsrs	r2, r3
 8003794:	1e13      	subs	r3, r2, #0
 8003796:	d000      	beq.n	800379a <HAL_GPIO_Init+0x2c6>
 8003798:	e6a8      	b.n	80034ec <HAL_GPIO_Init+0x18>
  }
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b006      	add	sp, #24
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40010000 	.word	0x40010000
 80037ac:	50000400 	.word	0x50000400
 80037b0:	50000800 	.word	0x50000800
 80037b4:	50000c00 	.word	0x50000c00
 80037b8:	50001c00 	.word	0x50001c00
 80037bc:	40010400 	.word	0x40010400

080037c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	0002      	movs	r2, r0
 80037c8:	1dbb      	adds	r3, r7, #6
 80037ca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	1dba      	adds	r2, r7, #6
 80037d2:	8812      	ldrh	r2, [r2, #0]
 80037d4:	4013      	ands	r3, r2
 80037d6:	d008      	beq.n	80037ea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037e0:	1dbb      	adds	r3, r7, #6
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 f807 	bl	80037f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b002      	add	sp, #8
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	40010400 	.word	0x40010400

080037f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	0002      	movs	r2, r0
 8003800:	1dbb      	adds	r3, r7, #6
 8003802:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e082      	b.n	8003924 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2241      	movs	r2, #65	; 0x41
 8003822:	5c9b      	ldrb	r3, [r3, r2]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d107      	bne.n	800383a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2240      	movs	r2, #64	; 0x40
 800382e:	2100      	movs	r1, #0
 8003830:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	0018      	movs	r0, r3
 8003836:	f7fe ffc7 	bl	80027c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2241      	movs	r2, #65	; 0x41
 800383e:	2124      	movs	r1, #36	; 0x24
 8003840:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	438a      	bics	r2, r1
 8003850:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4934      	ldr	r1, [pc, #208]	; (800392c <HAL_I2C_Init+0x120>)
 800385c:	400a      	ands	r2, r1
 800385e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4931      	ldr	r1, [pc, #196]	; (8003930 <HAL_I2C_Init+0x124>)
 800386c:	400a      	ands	r2, r1
 800386e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d108      	bne.n	800388a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	0209      	lsls	r1, r1, #8
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	e007      	b.n	800389a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2184      	movs	r1, #132	; 0x84
 8003894:	0209      	lsls	r1, r1, #8
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d104      	bne.n	80038ac <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	491f      	ldr	r1, [pc, #124]	; (8003934 <HAL_I2C_Init+0x128>)
 80038b8:	430a      	orrs	r2, r1
 80038ba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	491a      	ldr	r1, [pc, #104]	; (8003930 <HAL_I2C_Init+0x124>)
 80038c8:	400a      	ands	r2, r1
 80038ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	0011      	movs	r1, r2
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	021a      	lsls	r2, r3, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69d9      	ldr	r1, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1a      	ldr	r2, [r3, #32]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2101      	movs	r1, #1
 8003902:	430a      	orrs	r2, r1
 8003904:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2241      	movs	r2, #65	; 0x41
 8003910:	2120      	movs	r1, #32
 8003912:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2242      	movs	r2, #66	; 0x42
 800391e:	2100      	movs	r1, #0
 8003920:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}
 800392c:	f0ffffff 	.word	0xf0ffffff
 8003930:	ffff7fff 	.word	0xffff7fff
 8003934:	02008000 	.word	0x02008000

08003938 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	000c      	movs	r4, r1
 8003942:	0010      	movs	r0, r2
 8003944:	0019      	movs	r1, r3
 8003946:	230a      	movs	r3, #10
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	1c22      	adds	r2, r4, #0
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	2308      	movs	r3, #8
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	1c02      	adds	r2, r0, #0
 8003954:	801a      	strh	r2, [r3, #0]
 8003956:	1dbb      	adds	r3, r7, #6
 8003958:	1c0a      	adds	r2, r1, #0
 800395a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2241      	movs	r2, #65	; 0x41
 8003960:	5c9b      	ldrb	r3, [r3, r2]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b20      	cmp	r3, #32
 8003966:	d000      	beq.n	800396a <HAL_I2C_Mem_Write+0x32>
 8003968:	e10c      	b.n	8003b84 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	d004      	beq.n	800397a <HAL_I2C_Mem_Write+0x42>
 8003970:	232c      	movs	r3, #44	; 0x2c
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d105      	bne.n	8003986 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2280      	movs	r2, #128	; 0x80
 800397e:	0092      	lsls	r2, r2, #2
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e0ff      	b.n	8003b86 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2240      	movs	r2, #64	; 0x40
 800398a:	5c9b      	ldrb	r3, [r3, r2]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_I2C_Mem_Write+0x5c>
 8003990:	2302      	movs	r3, #2
 8003992:	e0f8      	b.n	8003b86 <HAL_I2C_Mem_Write+0x24e>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2240      	movs	r2, #64	; 0x40
 8003998:	2101      	movs	r1, #1
 800399a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800399c:	f7ff fcb2 	bl	8003304 <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	0219      	lsls	r1, r3, #8
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2319      	movs	r3, #25
 80039b0:	2201      	movs	r2, #1
 80039b2:	f000 fb0b 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 80039b6:	1e03      	subs	r3, r0, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0e3      	b.n	8003b86 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2241      	movs	r2, #65	; 0x41
 80039c2:	2121      	movs	r1, #33	; 0x21
 80039c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2242      	movs	r2, #66	; 0x42
 80039ca:	2140      	movs	r1, #64	; 0x40
 80039cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	222c      	movs	r2, #44	; 0x2c
 80039de:	18ba      	adds	r2, r7, r2
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ea:	1dbb      	adds	r3, r7, #6
 80039ec:	881c      	ldrh	r4, [r3, #0]
 80039ee:	2308      	movs	r3, #8
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	881a      	ldrh	r2, [r3, #0]
 80039f4:	230a      	movs	r3, #10
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	8819      	ldrh	r1, [r3, #0]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	0023      	movs	r3, r4
 8003a06:	f000 f9f9 	bl	8003dfc <I2C_RequestMemoryWrite>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2240      	movs	r2, #64	; 0x40
 8003a12:	2100      	movs	r1, #0
 8003a14:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0b5      	b.n	8003b86 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2bff      	cmp	r3, #255	; 0xff
 8003a22:	d911      	bls.n	8003a48 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	22ff      	movs	r2, #255	; 0xff
 8003a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	045c      	lsls	r4, r3, #17
 8003a34:	230a      	movs	r3, #10
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	8819      	ldrh	r1, [r3, #0]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	0023      	movs	r3, r4
 8003a42:	f000 fbe3 	bl	800420c <I2C_TransferConfig>
 8003a46:	e012      	b.n	8003a6e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	049c      	lsls	r4, r3, #18
 8003a5c:	230a      	movs	r3, #10
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	8819      	ldrh	r1, [r3, #0]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	2300      	movs	r3, #0
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	0023      	movs	r3, r4
 8003a6a:	f000 fbcf 	bl	800420c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	0018      	movs	r0, r3
 8003a76:	f000 fae8 	bl	800404a <I2C_WaitOnTXISFlagUntilTimeout>
 8003a7a:	1e03      	subs	r3, r0, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e081      	b.n	8003b86 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d03a      	beq.n	8003b32 <HAL_I2C_Mem_Write+0x1fa>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d136      	bne.n	8003b32 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	0013      	movs	r3, r2
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2180      	movs	r1, #128	; 0x80
 8003ad2:	f000 fa7b 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	1e03      	subs	r3, r0, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e053      	b.n	8003b86 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2bff      	cmp	r3, #255	; 0xff
 8003ae6:	d911      	bls.n	8003b0c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	22ff      	movs	r2, #255	; 0xff
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	045c      	lsls	r4, r3, #17
 8003af8:	230a      	movs	r3, #10
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	8819      	ldrh	r1, [r3, #0]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	2300      	movs	r3, #0
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	0023      	movs	r3, r4
 8003b06:	f000 fb81 	bl	800420c <I2C_TransferConfig>
 8003b0a:	e012      	b.n	8003b32 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	049c      	lsls	r4, r3, #18
 8003b20:	230a      	movs	r3, #10
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	8819      	ldrh	r1, [r3, #0]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	0023      	movs	r3, r4
 8003b2e:	f000 fb6d 	bl	800420c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d198      	bne.n	8003a6e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 fac0 	bl	80040c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e01a      	b.n	8003b86 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2220      	movs	r2, #32
 8003b56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	490b      	ldr	r1, [pc, #44]	; (8003b90 <HAL_I2C_Mem_Write+0x258>)
 8003b64:	400a      	ands	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2241      	movs	r2, #65	; 0x41
 8003b6c:	2120      	movs	r1, #32
 8003b6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2242      	movs	r2, #66	; 0x42
 8003b74:	2100      	movs	r1, #0
 8003b76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2240      	movs	r2, #64	; 0x40
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b007      	add	sp, #28
 8003b8c:	bd90      	pop	{r4, r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	fe00e800 	.word	0xfe00e800

08003b94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b94:	b590      	push	{r4, r7, lr}
 8003b96:	b089      	sub	sp, #36	; 0x24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	000c      	movs	r4, r1
 8003b9e:	0010      	movs	r0, r2
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	230a      	movs	r3, #10
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	1c22      	adds	r2, r4, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	2308      	movs	r3, #8
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	1c02      	adds	r2, r0, #0
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	1dbb      	adds	r3, r7, #6
 8003bb4:	1c0a      	adds	r2, r1, #0
 8003bb6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2241      	movs	r2, #65	; 0x41
 8003bbc:	5c9b      	ldrb	r3, [r3, r2]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d000      	beq.n	8003bc6 <HAL_I2C_Mem_Read+0x32>
 8003bc4:	e110      	b.n	8003de8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_I2C_Mem_Read+0x42>
 8003bcc:	232c      	movs	r3, #44	; 0x2c
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d105      	bne.n	8003be2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2280      	movs	r2, #128	; 0x80
 8003bda:	0092      	lsls	r2, r2, #2
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e103      	b.n	8003dea <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2240      	movs	r2, #64	; 0x40
 8003be6:	5c9b      	ldrb	r3, [r3, r2]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2C_Mem_Read+0x5c>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e0fc      	b.n	8003dea <HAL_I2C_Mem_Read+0x256>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2240      	movs	r2, #64	; 0x40
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bf8:	f7ff fb84 	bl	8003304 <HAL_GetTick>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	0219      	lsls	r1, r3, #8
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2319      	movs	r3, #25
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f000 f9dd 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003c12:	1e03      	subs	r3, r0, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0e7      	b.n	8003dea <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2241      	movs	r2, #65	; 0x41
 8003c1e:	2122      	movs	r1, #34	; 0x22
 8003c20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2242      	movs	r2, #66	; 0x42
 8003c26:	2140      	movs	r1, #64	; 0x40
 8003c28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	222c      	movs	r2, #44	; 0x2c
 8003c3a:	18ba      	adds	r2, r7, r2
 8003c3c:	8812      	ldrh	r2, [r2, #0]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c46:	1dbb      	adds	r3, r7, #6
 8003c48:	881c      	ldrh	r4, [r3, #0]
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	881a      	ldrh	r2, [r3, #0]
 8003c50:	230a      	movs	r3, #10
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	8819      	ldrh	r1, [r3, #0]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	0023      	movs	r3, r4
 8003c62:	f000 f92f 	bl	8003ec4 <I2C_RequestMemoryRead>
 8003c66:	1e03      	subs	r3, r0, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2240      	movs	r2, #64	; 0x40
 8003c6e:	2100      	movs	r1, #0
 8003c70:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0b9      	b.n	8003dea <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2bff      	cmp	r3, #255	; 0xff
 8003c7e:	d911      	bls.n	8003ca4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	22ff      	movs	r2, #255	; 0xff
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	045c      	lsls	r4, r3, #17
 8003c90:	230a      	movs	r3, #10
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	8819      	ldrh	r1, [r3, #0]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	4b56      	ldr	r3, [pc, #344]	; (8003df4 <HAL_I2C_Mem_Read+0x260>)
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	0023      	movs	r3, r4
 8003c9e:	f000 fab5 	bl	800420c <I2C_TransferConfig>
 8003ca2:	e012      	b.n	8003cca <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	049c      	lsls	r4, r3, #18
 8003cb8:	230a      	movs	r3, #10
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	8819      	ldrh	r1, [r3, #0]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	4b4c      	ldr	r3, [pc, #304]	; (8003df4 <HAL_I2C_Mem_Read+0x260>)
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	0023      	movs	r3, r4
 8003cc6:	f000 faa1 	bl	800420c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	0013      	movs	r3, r2
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	f000 f978 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	1e03      	subs	r3, r0, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e082      	b.n	8003dea <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d03a      	beq.n	8003d96 <HAL_I2C_Mem_Read+0x202>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d136      	bne.n	8003d96 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	0013      	movs	r3, r2
 8003d32:	2200      	movs	r2, #0
 8003d34:	2180      	movs	r1, #128	; 0x80
 8003d36:	f000 f949 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003d3a:	1e03      	subs	r3, r0, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e053      	b.n	8003dea <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2bff      	cmp	r3, #255	; 0xff
 8003d4a:	d911      	bls.n	8003d70 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	22ff      	movs	r2, #255	; 0xff
 8003d50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	045c      	lsls	r4, r3, #17
 8003d5c:	230a      	movs	r3, #10
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	8819      	ldrh	r1, [r3, #0]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	2300      	movs	r3, #0
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	0023      	movs	r3, r4
 8003d6a:	f000 fa4f 	bl	800420c <I2C_TransferConfig>
 8003d6e:	e012      	b.n	8003d96 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	049c      	lsls	r4, r3, #18
 8003d84:	230a      	movs	r3, #10
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	8819      	ldrh	r1, [r3, #0]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	0023      	movs	r3, r4
 8003d92:	f000 fa3b 	bl	800420c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d194      	bne.n	8003cca <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 f98e 	bl	80040c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dac:	1e03      	subs	r3, r0, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e01a      	b.n	8003dea <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2220      	movs	r2, #32
 8003dba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	490c      	ldr	r1, [pc, #48]	; (8003df8 <HAL_I2C_Mem_Read+0x264>)
 8003dc8:	400a      	ands	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2241      	movs	r2, #65	; 0x41
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2242      	movs	r2, #66	; 0x42
 8003dd8:	2100      	movs	r1, #0
 8003dda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2240      	movs	r2, #64	; 0x40
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b007      	add	sp, #28
 8003df0:	bd90      	pop	{r4, r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	80002400 	.word	0x80002400
 8003df8:	fe00e800 	.word	0xfe00e800

08003dfc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b5b0      	push	{r4, r5, r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	000c      	movs	r4, r1
 8003e06:	0010      	movs	r0, r2
 8003e08:	0019      	movs	r1, r3
 8003e0a:	250a      	movs	r5, #10
 8003e0c:	197b      	adds	r3, r7, r5
 8003e0e:	1c22      	adds	r2, r4, #0
 8003e10:	801a      	strh	r2, [r3, #0]
 8003e12:	2308      	movs	r3, #8
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	1c02      	adds	r2, r0, #0
 8003e18:	801a      	strh	r2, [r3, #0]
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	1c0a      	adds	r2, r1, #0
 8003e1e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e20:	1dbb      	adds	r3, r7, #6
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	045c      	lsls	r4, r3, #17
 8003e2a:	197b      	adds	r3, r7, r5
 8003e2c:	8819      	ldrh	r1, [r3, #0]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <I2C_RequestMemoryWrite+0xc4>)
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	0023      	movs	r3, r4
 8003e36:	f000 f9e9 	bl	800420c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3c:	6a39      	ldr	r1, [r7, #32]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f000 f902 	bl	800404a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d001      	beq.n	8003e4e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e033      	b.n	8003eb6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e4e:	1dbb      	adds	r3, r7, #6
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e56:	2308      	movs	r3, #8
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
 8003e64:	e019      	b.n	8003e9a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e66:	2308      	movs	r3, #8
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7a:	6a39      	ldr	r1, [r7, #32]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f000 f8e3 	bl	800404a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e84:	1e03      	subs	r3, r0, #0
 8003e86:	d001      	beq.n	8003e8c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e014      	b.n	8003eb6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e8c:	2308      	movs	r3, #8
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9a:	6a3a      	ldr	r2, [r7, #32]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	0013      	movs	r3, r2
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2180      	movs	r1, #128	; 0x80
 8003ea8:	f000 f890 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d001      	beq.n	8003eb4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b004      	add	sp, #16
 8003ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	80002000 	.word	0x80002000

08003ec4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b5b0      	push	{r4, r5, r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	000c      	movs	r4, r1
 8003ece:	0010      	movs	r0, r2
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	250a      	movs	r5, #10
 8003ed4:	197b      	adds	r3, r7, r5
 8003ed6:	1c22      	adds	r2, r4, #0
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	2308      	movs	r3, #8
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	1c02      	adds	r2, r0, #0
 8003ee0:	801a      	strh	r2, [r3, #0]
 8003ee2:	1dbb      	adds	r3, r7, #6
 8003ee4:	1c0a      	adds	r2, r1, #0
 8003ee6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ee8:	1dbb      	adds	r3, r7, #6
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	197b      	adds	r3, r7, r5
 8003ef0:	8819      	ldrh	r1, [r3, #0]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <I2C_RequestMemoryRead+0xc0>)
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f000 f987 	bl	800420c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f00:	6a39      	ldr	r1, [r7, #32]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f000 f8a0 	bl	800404a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f0a:	1e03      	subs	r3, r0, #0
 8003f0c:	d001      	beq.n	8003f12 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e033      	b.n	8003f7a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f12:	1dbb      	adds	r3, r7, #6
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d107      	bne.n	8003f2a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
 8003f28:	e019      	b.n	8003f5e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3e:	6a39      	ldr	r1, [r7, #32]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f881 	bl	800404a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f48:	1e03      	subs	r3, r0, #0
 8003f4a:	d001      	beq.n	8003f50 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e014      	b.n	8003f7a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f50:	2308      	movs	r3, #8
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	0013      	movs	r3, r2
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2140      	movs	r1, #64	; 0x40
 8003f6c:	f000 f82e 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d001      	beq.n	8003f78 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b004      	add	sp, #16
 8003f80:	bdb0      	pop	{r4, r5, r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	80002000 	.word	0x80002000

08003f88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2202      	movs	r2, #2
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d103      	bne.n	8003fa6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	2201      	movs	r2, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d007      	beq.n	8003fc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	619a      	str	r2, [r3, #24]
  }
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	1dfb      	adds	r3, r7, #7
 8003fda:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fdc:	e021      	b.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	d01e      	beq.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe4:	f7ff f98e 	bl	8003304 <HAL_GetTick>
 8003fe8:	0002      	movs	r2, r0
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d113      	bne.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	2220      	movs	r2, #32
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2241      	movs	r2, #65	; 0x41
 800400a:	2120      	movs	r1, #32
 800400c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2242      	movs	r2, #66	; 0x42
 8004012:	2100      	movs	r1, #0
 8004014:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2240      	movs	r2, #64	; 0x40
 800401a:	2100      	movs	r1, #0
 800401c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e00f      	b.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	425a      	negs	r2, r3
 8004032:	4153      	adcs	r3, r2
 8004034:	b2db      	uxtb	r3, r3
 8004036:	001a      	movs	r2, r3
 8004038:	1dfb      	adds	r3, r7, #7
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d0ce      	beq.n	8003fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	0018      	movs	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	b004      	add	sp, #16
 8004048:	bd80      	pop	{r7, pc}

0800404a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004056:	e02b      	b.n	80040b0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 f86e 	bl	8004140 <I2C_IsAcknowledgeFailed>
 8004064:	1e03      	subs	r3, r0, #0
 8004066:	d001      	beq.n	800406c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e029      	b.n	80040c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3301      	adds	r3, #1
 8004070:	d01e      	beq.n	80040b0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004072:	f7ff f947 	bl	8003304 <HAL_GetTick>
 8004076:	0002      	movs	r2, r0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d113      	bne.n	80040b0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	2220      	movs	r2, #32
 800408e:	431a      	orrs	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2241      	movs	r2, #65	; 0x41
 8004098:	2120      	movs	r1, #32
 800409a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2242      	movs	r2, #66	; 0x42
 80040a0:	2100      	movs	r1, #0
 80040a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2240      	movs	r2, #64	; 0x40
 80040a8:	2100      	movs	r1, #0
 80040aa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e007      	b.n	80040c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2202      	movs	r2, #2
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d1cc      	bne.n	8004058 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b004      	add	sp, #16
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040d4:	e028      	b.n	8004128 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	0018      	movs	r0, r3
 80040de:	f000 f82f 	bl	8004140 <I2C_IsAcknowledgeFailed>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d001      	beq.n	80040ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e026      	b.n	8004138 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ea:	f7ff f90b 	bl	8003304 <HAL_GetTick>
 80040ee:	0002      	movs	r2, r0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d113      	bne.n	8004128 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004104:	2220      	movs	r2, #32
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2241      	movs	r2, #65	; 0x41
 8004110:	2120      	movs	r1, #32
 8004112:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2242      	movs	r2, #66	; 0x42
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2240      	movs	r2, #64	; 0x40
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e007      	b.n	8004138 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2220      	movs	r2, #32
 8004130:	4013      	ands	r3, r2
 8004132:	2b20      	cmp	r3, #32
 8004134:	d1cf      	bne.n	80040d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	0018      	movs	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	b004      	add	sp, #16
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2210      	movs	r2, #16
 8004154:	4013      	ands	r3, r2
 8004156:	2b10      	cmp	r3, #16
 8004158:	d151      	bne.n	80041fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800415a:	e021      	b.n	80041a0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3301      	adds	r3, #1
 8004160:	d01e      	beq.n	80041a0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7ff f8cf 	bl	8003304 <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <I2C_IsAcknowledgeFailed+0x38>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d113      	bne.n	80041a0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	2220      	movs	r2, #32
 800417e:	431a      	orrs	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2241      	movs	r2, #65	; 0x41
 8004188:	2120      	movs	r1, #32
 800418a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2242      	movs	r2, #66	; 0x42
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2240      	movs	r2, #64	; 0x40
 8004198:	2100      	movs	r1, #0
 800419a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e02f      	b.n	8004200 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2220      	movs	r2, #32
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d1d6      	bne.n	800415c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2210      	movs	r2, #16
 80041b4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2220      	movs	r2, #32
 80041bc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7ff fee1 	bl	8003f88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	490d      	ldr	r1, [pc, #52]	; (8004208 <I2C_IsAcknowledgeFailed+0xc8>)
 80041d2:	400a      	ands	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	2204      	movs	r2, #4
 80041dc:	431a      	orrs	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2241      	movs	r2, #65	; 0x41
 80041e6:	2120      	movs	r1, #32
 80041e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2242      	movs	r2, #66	; 0x42
 80041ee:	2100      	movs	r1, #0
 80041f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2240      	movs	r2, #64	; 0x40
 80041f6:	2100      	movs	r1, #0
 80041f8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bd80      	pop	{r7, pc}
 8004208:	fe00e800 	.word	0xfe00e800

0800420c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	0008      	movs	r0, r1
 8004216:	0011      	movs	r1, r2
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	240a      	movs	r4, #10
 800421c:	193b      	adds	r3, r7, r4
 800421e:	1c02      	adds	r2, r0, #0
 8004220:	801a      	strh	r2, [r3, #0]
 8004222:	2009      	movs	r0, #9
 8004224:	183b      	adds	r3, r7, r0
 8004226:	1c0a      	adds	r2, r1, #0
 8004228:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	6a3a      	ldr	r2, [r7, #32]
 8004232:	0d51      	lsrs	r1, r2, #21
 8004234:	2280      	movs	r2, #128	; 0x80
 8004236:	00d2      	lsls	r2, r2, #3
 8004238:	400a      	ands	r2, r1
 800423a:	490e      	ldr	r1, [pc, #56]	; (8004274 <I2C_TransferConfig+0x68>)
 800423c:	430a      	orrs	r2, r1
 800423e:	43d2      	mvns	r2, r2
 8004240:	401a      	ands	r2, r3
 8004242:	0011      	movs	r1, r2
 8004244:	193b      	adds	r3, r7, r4
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	059b      	lsls	r3, r3, #22
 800424a:	0d9a      	lsrs	r2, r3, #22
 800424c:	183b      	adds	r3, r7, r0
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	0418      	lsls	r0, r3, #16
 8004252:	23ff      	movs	r3, #255	; 0xff
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	4003      	ands	r3, r0
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	431a      	orrs	r2, r3
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	431a      	orrs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	b005      	add	sp, #20
 8004270:	bd90      	pop	{r4, r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	03ff63ff 	.word	0x03ff63ff

08004278 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2241      	movs	r2, #65	; 0x41
 8004286:	5c9b      	ldrb	r3, [r3, r2]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b20      	cmp	r3, #32
 800428c:	d138      	bne.n	8004300 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2240      	movs	r2, #64	; 0x40
 8004292:	5c9b      	ldrb	r3, [r3, r2]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004298:	2302      	movs	r3, #2
 800429a:	e032      	b.n	8004302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2240      	movs	r2, #64	; 0x40
 80042a0:	2101      	movs	r1, #1
 80042a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2241      	movs	r2, #65	; 0x41
 80042a8:	2124      	movs	r1, #36	; 0x24
 80042aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2101      	movs	r1, #1
 80042b8:	438a      	bics	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4911      	ldr	r1, [pc, #68]	; (800430c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80042c8:	400a      	ands	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2101      	movs	r1, #1
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2241      	movs	r2, #65	; 0x41
 80042f0:	2120      	movs	r1, #32
 80042f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2240      	movs	r2, #64	; 0x40
 80042f8:	2100      	movs	r1, #0
 80042fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e000      	b.n	8004302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004300:	2302      	movs	r3, #2
  }
}
 8004302:	0018      	movs	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	b002      	add	sp, #8
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	ffffefff 	.word	0xffffefff

08004310 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2241      	movs	r2, #65	; 0x41
 800431e:	5c9b      	ldrb	r3, [r3, r2]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b20      	cmp	r3, #32
 8004324:	d139      	bne.n	800439a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2240      	movs	r2, #64	; 0x40
 800432a:	5c9b      	ldrb	r3, [r3, r2]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004330:	2302      	movs	r3, #2
 8004332:	e033      	b.n	800439c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2240      	movs	r2, #64	; 0x40
 8004338:	2101      	movs	r1, #1
 800433a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2241      	movs	r2, #65	; 0x41
 8004340:	2124      	movs	r1, #36	; 0x24
 8004342:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2101      	movs	r1, #1
 8004350:	438a      	bics	r2, r1
 8004352:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a11      	ldr	r2, [pc, #68]	; (80043a4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2101      	movs	r1, #1
 8004382:	430a      	orrs	r2, r1
 8004384:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2241      	movs	r2, #65	; 0x41
 800438a:	2120      	movs	r1, #32
 800438c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2240      	movs	r2, #64	; 0x40
 8004392:	2100      	movs	r1, #0
 8004394:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
  }
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b004      	add	sp, #16
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	fffff0ff 	.word	0xfffff0ff

080043a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a8:	b5b0      	push	{r4, r5, r7, lr}
 80043aa:	b08a      	sub	sp, #40	; 0x28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f000 fbaf 	bl	8004b1a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043bc:	4bcf      	ldr	r3, [pc, #828]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	220c      	movs	r2, #12
 80043c2:	4013      	ands	r3, r2
 80043c4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043c6:	4bcd      	ldr	r3, [pc, #820]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	025b      	lsls	r3, r3, #9
 80043ce:	4013      	ands	r3, r2
 80043d0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2201      	movs	r2, #1
 80043d8:	4013      	ands	r3, r2
 80043da:	d100      	bne.n	80043de <HAL_RCC_OscConfig+0x36>
 80043dc:	e07e      	b.n	80044dc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d007      	beq.n	80043f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d112      	bne.n	8004410 <HAL_RCC_OscConfig+0x68>
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	025b      	lsls	r3, r3, #9
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d10d      	bne.n	8004410 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	4bc1      	ldr	r3, [pc, #772]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	029b      	lsls	r3, r3, #10
 80043fc:	4013      	ands	r3, r2
 80043fe:	d100      	bne.n	8004402 <HAL_RCC_OscConfig+0x5a>
 8004400:	e06b      	b.n	80044da <HAL_RCC_OscConfig+0x132>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d167      	bne.n	80044da <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f000 fb85 	bl	8004b1a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	025b      	lsls	r3, r3, #9
 8004418:	429a      	cmp	r2, r3
 800441a:	d107      	bne.n	800442c <HAL_RCC_OscConfig+0x84>
 800441c:	4bb7      	ldr	r3, [pc, #732]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4bb6      	ldr	r3, [pc, #728]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	0249      	lsls	r1, r1, #9
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e027      	b.n	800447c <HAL_RCC_OscConfig+0xd4>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	23a0      	movs	r3, #160	; 0xa0
 8004432:	02db      	lsls	r3, r3, #11
 8004434:	429a      	cmp	r2, r3
 8004436:	d10e      	bne.n	8004456 <HAL_RCC_OscConfig+0xae>
 8004438:	4bb0      	ldr	r3, [pc, #704]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4baf      	ldr	r3, [pc, #700]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800443e:	2180      	movs	r1, #128	; 0x80
 8004440:	02c9      	lsls	r1, r1, #11
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	4bad      	ldr	r3, [pc, #692]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4bac      	ldr	r3, [pc, #688]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	0249      	lsls	r1, r1, #9
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e012      	b.n	800447c <HAL_RCC_OscConfig+0xd4>
 8004456:	4ba9      	ldr	r3, [pc, #676]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4ba8      	ldr	r3, [pc, #672]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800445c:	49a8      	ldr	r1, [pc, #672]	; (8004700 <HAL_RCC_OscConfig+0x358>)
 800445e:	400a      	ands	r2, r1
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	4ba6      	ldr	r3, [pc, #664]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	025b      	lsls	r3, r3, #9
 800446a:	4013      	ands	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4ba2      	ldr	r3, [pc, #648]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4ba1      	ldr	r3, [pc, #644]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004476:	49a3      	ldr	r1, [pc, #652]	; (8004704 <HAL_RCC_OscConfig+0x35c>)
 8004478:	400a      	ands	r2, r1
 800447a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fe ff3e 	bl	8003304 <HAL_GetTick>
 8004488:	0003      	movs	r3, r0
 800448a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800448c:	e009      	b.n	80044a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448e:	f7fe ff39 	bl	8003304 <HAL_GetTick>
 8004492:	0002      	movs	r2, r0
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b64      	cmp	r3, #100	; 0x64
 800449a:	d902      	bls.n	80044a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	f000 fb3c 	bl	8004b1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044a2:	4b96      	ldr	r3, [pc, #600]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	029b      	lsls	r3, r3, #10
 80044aa:	4013      	ands	r3, r2
 80044ac:	d0ef      	beq.n	800448e <HAL_RCC_OscConfig+0xe6>
 80044ae:	e015      	b.n	80044dc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fe ff28 	bl	8003304 <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ba:	f7fe ff23 	bl	8003304 <HAL_GetTick>
 80044be:	0002      	movs	r2, r0
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b64      	cmp	r3, #100	; 0x64
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e326      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044cc:	4b8b      	ldr	r3, [pc, #556]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	029b      	lsls	r3, r3, #10
 80044d4:	4013      	ands	r3, r2
 80044d6:	d1f0      	bne.n	80044ba <HAL_RCC_OscConfig+0x112>
 80044d8:	e000      	b.n	80044dc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2202      	movs	r2, #2
 80044e2:	4013      	ands	r3, r2
 80044e4:	d100      	bne.n	80044e8 <HAL_RCC_OscConfig+0x140>
 80044e6:	e08b      	b.n	8004600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	2b0c      	cmp	r3, #12
 80044f8:	d13e      	bne.n	8004578 <HAL_RCC_OscConfig+0x1d0>
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d13b      	bne.n	8004578 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004500:	4b7e      	ldr	r3, [pc, #504]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2204      	movs	r2, #4
 8004506:	4013      	ands	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_RCC_OscConfig+0x16c>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e302      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004514:	4b79      	ldr	r3, [pc, #484]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4a7b      	ldr	r2, [pc, #492]	; (8004708 <HAL_RCC_OscConfig+0x360>)
 800451a:	4013      	ands	r3, r2
 800451c:	0019      	movs	r1, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	021a      	lsls	r2, r3, #8
 8004524:	4b75      	ldr	r3, [pc, #468]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800452a:	4b74      	ldr	r3, [pc, #464]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2209      	movs	r2, #9
 8004530:	4393      	bics	r3, r2
 8004532:	0019      	movs	r1, r3
 8004534:	4b71      	ldr	r3, [pc, #452]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800453c:	f000 fc40 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8004540:	0001      	movs	r1, r0
 8004542:	4b6e      	ldr	r3, [pc, #440]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	220f      	movs	r2, #15
 800454a:	4013      	ands	r3, r2
 800454c:	4a6f      	ldr	r2, [pc, #444]	; (800470c <HAL_RCC_OscConfig+0x364>)
 800454e:	5cd3      	ldrb	r3, [r2, r3]
 8004550:	000a      	movs	r2, r1
 8004552:	40da      	lsrs	r2, r3
 8004554:	4b6e      	ldr	r3, [pc, #440]	; (8004710 <HAL_RCC_OscConfig+0x368>)
 8004556:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004558:	4b6e      	ldr	r3, [pc, #440]	; (8004714 <HAL_RCC_OscConfig+0x36c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2513      	movs	r5, #19
 800455e:	197c      	adds	r4, r7, r5
 8004560:	0018      	movs	r0, r3
 8004562:	f7fe fe89 	bl	8003278 <HAL_InitTick>
 8004566:	0003      	movs	r3, r0
 8004568:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800456a:	197b      	adds	r3, r7, r5
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d046      	beq.n	8004600 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004572:	197b      	adds	r3, r7, r5
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	e2d0      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d027      	beq.n	80045ce <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800457e:	4b5f      	ldr	r3, [pc, #380]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2209      	movs	r2, #9
 8004584:	4393      	bics	r3, r2
 8004586:	0019      	movs	r1, r3
 8004588:	4b5c      	ldr	r3, [pc, #368]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fe feb8 	bl	8003304 <HAL_GetTick>
 8004594:	0003      	movs	r3, r0
 8004596:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459a:	f7fe feb3 	bl	8003304 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e2b6      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ac:	4b53      	ldr	r3, [pc, #332]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2204      	movs	r2, #4
 80045b2:	4013      	ands	r3, r2
 80045b4:	d0f1      	beq.n	800459a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	4b51      	ldr	r3, [pc, #324]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4a53      	ldr	r2, [pc, #332]	; (8004708 <HAL_RCC_OscConfig+0x360>)
 80045bc:	4013      	ands	r3, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	021a      	lsls	r2, r3, #8
 80045c6:	4b4d      	ldr	r3, [pc, #308]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	e018      	b.n	8004600 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ce:	4b4b      	ldr	r3, [pc, #300]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b4a      	ldr	r3, [pc, #296]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80045d4:	2101      	movs	r1, #1
 80045d6:	438a      	bics	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fe fe93 	bl	8003304 <HAL_GetTick>
 80045de:	0003      	movs	r3, r0
 80045e0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045e4:	f7fe fe8e 	bl	8003304 <HAL_GetTick>
 80045e8:	0002      	movs	r2, r0
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e291      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045f6:	4b41      	ldr	r3, [pc, #260]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2204      	movs	r2, #4
 80045fc:	4013      	ands	r3, r2
 80045fe:	d1f1      	bne.n	80045e4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2210      	movs	r2, #16
 8004606:	4013      	ands	r3, r2
 8004608:	d100      	bne.n	800460c <HAL_RCC_OscConfig+0x264>
 800460a:	e0a1      	b.n	8004750 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d140      	bne.n	8004694 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004612:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4013      	ands	r3, r2
 800461c:	d005      	beq.n	800462a <HAL_RCC_OscConfig+0x282>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e277      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800462a:	4b34      	ldr	r3, [pc, #208]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4a3a      	ldr	r2, [pc, #232]	; (8004718 <HAL_RCC_OscConfig+0x370>)
 8004630:	4013      	ands	r3, r2
 8004632:	0019      	movs	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004638:	4b30      	ldr	r3, [pc, #192]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800463e:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	0a19      	lsrs	r1, r3, #8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	061a      	lsls	r2, r3, #24
 800464c:	4b2b      	ldr	r3, [pc, #172]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	0b5b      	lsrs	r3, r3, #13
 8004658:	3301      	adds	r3, #1
 800465a:	2280      	movs	r2, #128	; 0x80
 800465c:	0212      	lsls	r2, r2, #8
 800465e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004660:	4b26      	ldr	r3, [pc, #152]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	210f      	movs	r1, #15
 8004668:	400b      	ands	r3, r1
 800466a:	4928      	ldr	r1, [pc, #160]	; (800470c <HAL_RCC_OscConfig+0x364>)
 800466c:	5ccb      	ldrb	r3, [r1, r3]
 800466e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <HAL_RCC_OscConfig+0x368>)
 8004672:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004674:	4b27      	ldr	r3, [pc, #156]	; (8004714 <HAL_RCC_OscConfig+0x36c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2513      	movs	r5, #19
 800467a:	197c      	adds	r4, r7, r5
 800467c:	0018      	movs	r0, r3
 800467e:	f7fe fdfb 	bl	8003278 <HAL_InitTick>
 8004682:	0003      	movs	r3, r0
 8004684:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004686:	197b      	adds	r3, r7, r5
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d060      	beq.n	8004750 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800468e:	197b      	adds	r3, r7, r5
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	e242      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d03f      	beq.n	800471c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800469c:	4b17      	ldr	r3, [pc, #92]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	0049      	lsls	r1, r1, #1
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fe fe2b 	bl	8003304 <HAL_GetTick>
 80046ae:	0003      	movs	r3, r0
 80046b0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046b4:	f7fe fe26 	bl	8003304 <HAL_GetTick>
 80046b8:	0002      	movs	r2, r0
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e229      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4013      	ands	r3, r2
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4a10      	ldr	r2, [pc, #64]	; (8004718 <HAL_RCC_OscConfig+0x370>)
 80046d8:	4013      	ands	r3, r2
 80046da:	0019      	movs	r1, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	0a19      	lsrs	r1, r3, #8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	061a      	lsls	r2, r3, #24
 80046f4:	4b01      	ldr	r3, [pc, #4]	; (80046fc <HAL_RCC_OscConfig+0x354>)
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	e029      	b.n	8004750 <HAL_RCC_OscConfig+0x3a8>
 80046fc:	40021000 	.word	0x40021000
 8004700:	fffeffff 	.word	0xfffeffff
 8004704:	fffbffff 	.word	0xfffbffff
 8004708:	ffffe0ff 	.word	0xffffe0ff
 800470c:	0800645c 	.word	0x0800645c
 8004710:	20000014 	.word	0x20000014
 8004714:	20000018 	.word	0x20000018
 8004718:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800471c:	4bbd      	ldr	r3, [pc, #756]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4bbc      	ldr	r3, [pc, #752]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004722:	49bd      	ldr	r1, [pc, #756]	; (8004a18 <HAL_RCC_OscConfig+0x670>)
 8004724:	400a      	ands	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fe fdec 	bl	8003304 <HAL_GetTick>
 800472c:	0003      	movs	r3, r0
 800472e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004732:	f7fe fde7 	bl	8003304 <HAL_GetTick>
 8004736:	0002      	movs	r2, r0
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e1ea      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004744:	4bb3      	ldr	r3, [pc, #716]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4013      	ands	r3, r2
 800474e:	d1f0      	bne.n	8004732 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2208      	movs	r2, #8
 8004756:	4013      	ands	r3, r2
 8004758:	d036      	beq.n	80047c8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d019      	beq.n	8004796 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004762:	4bac      	ldr	r3, [pc, #688]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004766:	4bab      	ldr	r3, [pc, #684]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004768:	2101      	movs	r1, #1
 800476a:	430a      	orrs	r2, r1
 800476c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476e:	f7fe fdc9 	bl	8003304 <HAL_GetTick>
 8004772:	0003      	movs	r3, r0
 8004774:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004778:	f7fe fdc4 	bl	8003304 <HAL_GetTick>
 800477c:	0002      	movs	r2, r0
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e1c7      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800478a:	4ba2      	ldr	r3, [pc, #648]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 800478c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478e:	2202      	movs	r2, #2
 8004790:	4013      	ands	r3, r2
 8004792:	d0f1      	beq.n	8004778 <HAL_RCC_OscConfig+0x3d0>
 8004794:	e018      	b.n	80047c8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004796:	4b9f      	ldr	r3, [pc, #636]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800479a:	4b9e      	ldr	r3, [pc, #632]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 800479c:	2101      	movs	r1, #1
 800479e:	438a      	bics	r2, r1
 80047a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a2:	f7fe fdaf 	bl	8003304 <HAL_GetTick>
 80047a6:	0003      	movs	r3, r0
 80047a8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ac:	f7fe fdaa 	bl	8003304 <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1ad      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047be:	4b95      	ldr	r3, [pc, #596]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80047c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c2:	2202      	movs	r2, #2
 80047c4:	4013      	ands	r3, r2
 80047c6:	d1f1      	bne.n	80047ac <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2204      	movs	r2, #4
 80047ce:	4013      	ands	r3, r2
 80047d0:	d100      	bne.n	80047d4 <HAL_RCC_OscConfig+0x42c>
 80047d2:	e0ae      	b.n	8004932 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d4:	2027      	movs	r0, #39	; 0x27
 80047d6:	183b      	adds	r3, r7, r0
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047dc:	4b8d      	ldr	r3, [pc, #564]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80047de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	055b      	lsls	r3, r3, #21
 80047e4:	4013      	ands	r3, r2
 80047e6:	d109      	bne.n	80047fc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e8:	4b8a      	ldr	r3, [pc, #552]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80047ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ec:	4b89      	ldr	r3, [pc, #548]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80047ee:	2180      	movs	r1, #128	; 0x80
 80047f0:	0549      	lsls	r1, r1, #21
 80047f2:	430a      	orrs	r2, r1
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80047f6:	183b      	adds	r3, r7, r0
 80047f8:	2201      	movs	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fc:	4b87      	ldr	r3, [pc, #540]	; (8004a1c <HAL_RCC_OscConfig+0x674>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4013      	ands	r3, r2
 8004806:	d11a      	bne.n	800483e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004808:	4b84      	ldr	r3, [pc, #528]	; (8004a1c <HAL_RCC_OscConfig+0x674>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b83      	ldr	r3, [pc, #524]	; (8004a1c <HAL_RCC_OscConfig+0x674>)
 800480e:	2180      	movs	r1, #128	; 0x80
 8004810:	0049      	lsls	r1, r1, #1
 8004812:	430a      	orrs	r2, r1
 8004814:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004816:	f7fe fd75 	bl	8003304 <HAL_GetTick>
 800481a:	0003      	movs	r3, r0
 800481c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004820:	f7fe fd70 	bl	8003304 <HAL_GetTick>
 8004824:	0002      	movs	r2, r0
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e173      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004832:	4b7a      	ldr	r3, [pc, #488]	; (8004a1c <HAL_RCC_OscConfig+0x674>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4013      	ands	r3, r2
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	429a      	cmp	r2, r3
 8004848:	d107      	bne.n	800485a <HAL_RCC_OscConfig+0x4b2>
 800484a:	4b72      	ldr	r3, [pc, #456]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 800484c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800484e:	4b71      	ldr	r3, [pc, #452]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004850:	2180      	movs	r1, #128	; 0x80
 8004852:	0049      	lsls	r1, r1, #1
 8004854:	430a      	orrs	r2, r1
 8004856:	651a      	str	r2, [r3, #80]	; 0x50
 8004858:	e031      	b.n	80048be <HAL_RCC_OscConfig+0x516>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10c      	bne.n	800487c <HAL_RCC_OscConfig+0x4d4>
 8004862:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004866:	4b6b      	ldr	r3, [pc, #428]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004868:	496b      	ldr	r1, [pc, #428]	; (8004a18 <HAL_RCC_OscConfig+0x670>)
 800486a:	400a      	ands	r2, r1
 800486c:	651a      	str	r2, [r3, #80]	; 0x50
 800486e:	4b69      	ldr	r3, [pc, #420]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004870:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004872:	4b68      	ldr	r3, [pc, #416]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004874:	496a      	ldr	r1, [pc, #424]	; (8004a20 <HAL_RCC_OscConfig+0x678>)
 8004876:	400a      	ands	r2, r1
 8004878:	651a      	str	r2, [r3, #80]	; 0x50
 800487a:	e020      	b.n	80048be <HAL_RCC_OscConfig+0x516>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	23a0      	movs	r3, #160	; 0xa0
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	429a      	cmp	r2, r3
 8004886:	d10e      	bne.n	80048a6 <HAL_RCC_OscConfig+0x4fe>
 8004888:	4b62      	ldr	r3, [pc, #392]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 800488a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800488c:	4b61      	ldr	r3, [pc, #388]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 800488e:	2180      	movs	r1, #128	; 0x80
 8004890:	00c9      	lsls	r1, r1, #3
 8004892:	430a      	orrs	r2, r1
 8004894:	651a      	str	r2, [r3, #80]	; 0x50
 8004896:	4b5f      	ldr	r3, [pc, #380]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800489a:	4b5e      	ldr	r3, [pc, #376]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 800489c:	2180      	movs	r1, #128	; 0x80
 800489e:	0049      	lsls	r1, r1, #1
 80048a0:	430a      	orrs	r2, r1
 80048a2:	651a      	str	r2, [r3, #80]	; 0x50
 80048a4:	e00b      	b.n	80048be <HAL_RCC_OscConfig+0x516>
 80048a6:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80048a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048aa:	4b5a      	ldr	r3, [pc, #360]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80048ac:	495a      	ldr	r1, [pc, #360]	; (8004a18 <HAL_RCC_OscConfig+0x670>)
 80048ae:	400a      	ands	r2, r1
 80048b0:	651a      	str	r2, [r3, #80]	; 0x50
 80048b2:	4b58      	ldr	r3, [pc, #352]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80048b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048b6:	4b57      	ldr	r3, [pc, #348]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80048b8:	4959      	ldr	r1, [pc, #356]	; (8004a20 <HAL_RCC_OscConfig+0x678>)
 80048ba:	400a      	ands	r2, r1
 80048bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d015      	beq.n	80048f2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fe fd1d 	bl	8003304 <HAL_GetTick>
 80048ca:	0003      	movs	r3, r0
 80048cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ce:	e009      	b.n	80048e4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7fe fd18 	bl	8003304 <HAL_GetTick>
 80048d4:	0002      	movs	r2, r0
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	4a52      	ldr	r2, [pc, #328]	; (8004a24 <HAL_RCC_OscConfig+0x67c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e11a      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048e4:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80048e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4013      	ands	r3, r2
 80048ee:	d0ef      	beq.n	80048d0 <HAL_RCC_OscConfig+0x528>
 80048f0:	e014      	b.n	800491c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fe fd07 	bl	8003304 <HAL_GetTick>
 80048f6:	0003      	movs	r3, r0
 80048f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048fa:	e009      	b.n	8004910 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fc:	f7fe fd02 	bl	8003304 <HAL_GetTick>
 8004900:	0002      	movs	r2, r0
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	4a47      	ldr	r2, [pc, #284]	; (8004a24 <HAL_RCC_OscConfig+0x67c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e104      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004910:	4b40      	ldr	r3, [pc, #256]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4013      	ands	r3, r2
 800491a:	d1ef      	bne.n	80048fc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800491c:	2327      	movs	r3, #39	; 0x27
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d105      	bne.n	8004932 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004926:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492a:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 800492c:	493e      	ldr	r1, [pc, #248]	; (8004a28 <HAL_RCC_OscConfig+0x680>)
 800492e:	400a      	ands	r2, r1
 8004930:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2220      	movs	r2, #32
 8004938:	4013      	ands	r3, r2
 800493a:	d049      	beq.n	80049d0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d026      	beq.n	8004992 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004944:	4b33      	ldr	r3, [pc, #204]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	4b32      	ldr	r3, [pc, #200]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 800494a:	2101      	movs	r1, #1
 800494c:	430a      	orrs	r2, r1
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	4b30      	ldr	r3, [pc, #192]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004954:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004956:	2101      	movs	r1, #1
 8004958:	430a      	orrs	r2, r1
 800495a:	635a      	str	r2, [r3, #52]	; 0x34
 800495c:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <HAL_RCC_OscConfig+0x684>)
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <HAL_RCC_OscConfig+0x684>)
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	0189      	lsls	r1, r1, #6
 8004966:	430a      	orrs	r2, r1
 8004968:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7fe fccb 	bl	8003304 <HAL_GetTick>
 800496e:	0003      	movs	r3, r0
 8004970:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004974:	f7fe fcc6 	bl	8003304 <HAL_GetTick>
 8004978:	0002      	movs	r2, r0
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e0c9      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004986:	4b23      	ldr	r3, [pc, #140]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2202      	movs	r2, #2
 800498c:	4013      	ands	r3, r2
 800498e:	d0f1      	beq.n	8004974 <HAL_RCC_OscConfig+0x5cc>
 8004990:	e01e      	b.n	80049d0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 8004998:	2101      	movs	r1, #1
 800499a:	438a      	bics	r2, r1
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <HAL_RCC_OscConfig+0x684>)
 80049a0:	6a1a      	ldr	r2, [r3, #32]
 80049a2:	4b22      	ldr	r3, [pc, #136]	; (8004a2c <HAL_RCC_OscConfig+0x684>)
 80049a4:	4922      	ldr	r1, [pc, #136]	; (8004a30 <HAL_RCC_OscConfig+0x688>)
 80049a6:	400a      	ands	r2, r1
 80049a8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049aa:	f7fe fcab 	bl	8003304 <HAL_GetTick>
 80049ae:	0003      	movs	r3, r0
 80049b0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049b4:	f7fe fca6 	bl	8003304 <HAL_GetTick>
 80049b8:	0002      	movs	r2, r0
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e0a9      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2202      	movs	r2, #2
 80049cc:	4013      	ands	r3, r2
 80049ce:	d1f1      	bne.n	80049b4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d100      	bne.n	80049da <HAL_RCC_OscConfig+0x632>
 80049d8:	e09e      	b.n	8004b18 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	2b0c      	cmp	r3, #12
 80049de:	d100      	bne.n	80049e2 <HAL_RCC_OscConfig+0x63a>
 80049e0:	e077      	b.n	8004ad2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d158      	bne.n	8004a9c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_OscConfig+0x66c>)
 80049f0:	4910      	ldr	r1, [pc, #64]	; (8004a34 <HAL_RCC_OscConfig+0x68c>)
 80049f2:	400a      	ands	r2, r1
 80049f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f6:	f7fe fc85 	bl	8003304 <HAL_GetTick>
 80049fa:	0003      	movs	r3, r0
 80049fc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049fe:	e01b      	b.n	8004a38 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fe fc80 	bl	8003304 <HAL_GetTick>
 8004a04:	0002      	movs	r2, r0
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d914      	bls.n	8004a38 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e083      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	40021000 	.word	0x40021000
 8004a18:	fffffeff 	.word	0xfffffeff
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	fffffbff 	.word	0xfffffbff
 8004a24:	00001388 	.word	0x00001388
 8004a28:	efffffff 	.word	0xefffffff
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	ffffdfff 	.word	0xffffdfff
 8004a34:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a38:	4b3a      	ldr	r3, [pc, #232]	; (8004b24 <HAL_RCC_OscConfig+0x77c>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	049b      	lsls	r3, r3, #18
 8004a40:	4013      	ands	r3, r2
 8004a42:	d1dd      	bne.n	8004a00 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a44:	4b37      	ldr	r3, [pc, #220]	; (8004b24 <HAL_RCC_OscConfig+0x77c>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a37      	ldr	r2, [pc, #220]	; (8004b28 <HAL_RCC_OscConfig+0x780>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <HAL_RCC_OscConfig+0x77c>)
 8004a60:	430a      	orrs	r2, r1
 8004a62:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a64:	4b2f      	ldr	r3, [pc, #188]	; (8004b24 <HAL_RCC_OscConfig+0x77c>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <HAL_RCC_OscConfig+0x77c>)
 8004a6a:	2180      	movs	r1, #128	; 0x80
 8004a6c:	0449      	lsls	r1, r1, #17
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a72:	f7fe fc47 	bl	8003304 <HAL_GetTick>
 8004a76:	0003      	movs	r3, r0
 8004a78:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a7c:	f7fe fc42 	bl	8003304 <HAL_GetTick>
 8004a80:	0002      	movs	r2, r0
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e045      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004a8e:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <HAL_RCC_OscConfig+0x77c>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	049b      	lsls	r3, r3, #18
 8004a96:	4013      	ands	r3, r2
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x6d4>
 8004a9a:	e03d      	b.n	8004b18 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9c:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <HAL_RCC_OscConfig+0x77c>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_RCC_OscConfig+0x77c>)
 8004aa2:	4922      	ldr	r1, [pc, #136]	; (8004b2c <HAL_RCC_OscConfig+0x784>)
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fe fc2c 	bl	8003304 <HAL_GetTick>
 8004aac:	0003      	movs	r3, r0
 8004aae:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7fe fc27 	bl	8003304 <HAL_GetTick>
 8004ab6:	0002      	movs	r2, r0
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e02a      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <HAL_RCC_OscConfig+0x77c>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	049b      	lsls	r3, r3, #18
 8004acc:	4013      	ands	r3, r2
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x70a>
 8004ad0:	e022      	b.n	8004b18 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e01d      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <HAL_RCC_OscConfig+0x77c>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	025b      	lsls	r3, r3, #9
 8004aea:	401a      	ands	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d10f      	bne.n	8004b14 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	23f0      	movs	r3, #240	; 0xf0
 8004af8:	039b      	lsls	r3, r3, #14
 8004afa:	401a      	ands	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d107      	bne.n	8004b14 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	23c0      	movs	r3, #192	; 0xc0
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b00a      	add	sp, #40	; 0x28
 8004b20:	bdb0      	pop	{r4, r5, r7, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	40021000 	.word	0x40021000
 8004b28:	ff02ffff 	.word	0xff02ffff
 8004b2c:	feffffff 	.word	0xfeffffff

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b5b0      	push	{r4, r5, r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e128      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b44:	4b96      	ldr	r3, [pc, #600]	; (8004da0 <HAL_RCC_ClockConfig+0x270>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d91e      	bls.n	8004b90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b93      	ldr	r3, [pc, #588]	; (8004da0 <HAL_RCC_ClockConfig+0x270>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2201      	movs	r2, #1
 8004b58:	4393      	bics	r3, r2
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	4b90      	ldr	r3, [pc, #576]	; (8004da0 <HAL_RCC_ClockConfig+0x270>)
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b64:	f7fe fbce 	bl	8003304 <HAL_GetTick>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6c:	e009      	b.n	8004b82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6e:	f7fe fbc9 	bl	8003304 <HAL_GetTick>
 8004b72:	0002      	movs	r2, r0
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	4a8a      	ldr	r2, [pc, #552]	; (8004da4 <HAL_RCC_ClockConfig+0x274>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e109      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b82:	4b87      	ldr	r3, [pc, #540]	; (8004da0 <HAL_RCC_ClockConfig+0x270>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2201      	movs	r2, #1
 8004b88:	4013      	ands	r3, r2
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d1ee      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2202      	movs	r2, #2
 8004b96:	4013      	ands	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b9a:	4b83      	ldr	r3, [pc, #524]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	22f0      	movs	r2, #240	; 0xf0
 8004ba0:	4393      	bics	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	4b7f      	ldr	r3, [pc, #508]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004baa:	430a      	orrs	r2, r1
 8004bac:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d100      	bne.n	8004bba <HAL_RCC_ClockConfig+0x8a>
 8004bb8:	e089      	b.n	8004cce <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bc2:	4b79      	ldr	r3, [pc, #484]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d120      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e0e1      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bda:	4b73      	ldr	r3, [pc, #460]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	049b      	lsls	r3, r3, #18
 8004be2:	4013      	ands	r3, r2
 8004be4:	d114      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e0d5      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf2:	4b6d      	ldr	r3, [pc, #436]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d109      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0ca      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c00:	4b69      	ldr	r3, [pc, #420]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d101      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0c2      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c10:	4b65      	ldr	r3, [pc, #404]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2203      	movs	r2, #3
 8004c16:	4393      	bics	r3, r2
 8004c18:	0019      	movs	r1, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	4b62      	ldr	r3, [pc, #392]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004c20:	430a      	orrs	r2, r1
 8004c22:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c24:	f7fe fb6e 	bl	8003304 <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d111      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c34:	e009      	b.n	8004c4a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c36:	f7fe fb65 	bl	8003304 <HAL_GetTick>
 8004c3a:	0002      	movs	r2, r0
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	4a58      	ldr	r2, [pc, #352]	; (8004da4 <HAL_RCC_ClockConfig+0x274>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0a5      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c4a:	4b57      	ldr	r3, [pc, #348]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	220c      	movs	r2, #12
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d1ef      	bne.n	8004c36 <HAL_RCC_ClockConfig+0x106>
 8004c56:	e03a      	b.n	8004cce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d111      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c60:	e009      	b.n	8004c76 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c62:	f7fe fb4f 	bl	8003304 <HAL_GetTick>
 8004c66:	0002      	movs	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	4a4d      	ldr	r2, [pc, #308]	; (8004da4 <HAL_RCC_ClockConfig+0x274>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e08f      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c76:	4b4c      	ldr	r3, [pc, #304]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	220c      	movs	r2, #12
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d1ef      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x132>
 8004c82:	e024      	b.n	8004cce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c8c:	e009      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8e:	f7fe fb39 	bl	8003304 <HAL_GetTick>
 8004c92:	0002      	movs	r2, r0
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	4a42      	ldr	r2, [pc, #264]	; (8004da4 <HAL_RCC_ClockConfig+0x274>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e079      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ca2:	4b41      	ldr	r3, [pc, #260]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	220c      	movs	r2, #12
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d1ef      	bne.n	8004c8e <HAL_RCC_ClockConfig+0x15e>
 8004cae:	e00e      	b.n	8004cce <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb0:	f7fe fb28 	bl	8003304 <HAL_GetTick>
 8004cb4:	0002      	movs	r2, r0
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	4a3a      	ldr	r2, [pc, #232]	; (8004da4 <HAL_RCC_ClockConfig+0x274>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e068      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cc4:	4b38      	ldr	r3, [pc, #224]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	220c      	movs	r2, #12
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cce:	4b34      	ldr	r3, [pc, #208]	; (8004da0 <HAL_RCC_ClockConfig+0x270>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d21e      	bcs.n	8004d1a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cdc:	4b30      	ldr	r3, [pc, #192]	; (8004da0 <HAL_RCC_ClockConfig+0x270>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	4393      	bics	r3, r2
 8004ce4:	0019      	movs	r1, r3
 8004ce6:	4b2e      	ldr	r3, [pc, #184]	; (8004da0 <HAL_RCC_ClockConfig+0x270>)
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cee:	f7fe fb09 	bl	8003304 <HAL_GetTick>
 8004cf2:	0003      	movs	r3, r0
 8004cf4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	e009      	b.n	8004d0c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf8:	f7fe fb04 	bl	8003304 <HAL_GetTick>
 8004cfc:	0002      	movs	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <HAL_RCC_ClockConfig+0x274>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e044      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0c:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <HAL_RCC_ClockConfig+0x270>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2201      	movs	r2, #1
 8004d12:	4013      	ands	r3, r2
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d1ee      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2204      	movs	r2, #4
 8004d20:	4013      	ands	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d24:	4b20      	ldr	r3, [pc, #128]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4a20      	ldr	r2, [pc, #128]	; (8004dac <HAL_RCC_ClockConfig+0x27c>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004d34:	430a      	orrs	r2, r1
 8004d36:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d42:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <HAL_RCC_ClockConfig+0x280>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	00da      	lsls	r2, r3, #3
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004d54:	430a      	orrs	r2, r1
 8004d56:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d58:	f000 f832 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8004d5c:	0001      	movs	r1, r0
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <HAL_RCC_ClockConfig+0x278>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	220f      	movs	r2, #15
 8004d66:	4013      	ands	r3, r2
 8004d68:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <HAL_RCC_ClockConfig+0x284>)
 8004d6a:	5cd3      	ldrb	r3, [r2, r3]
 8004d6c:	000a      	movs	r2, r1
 8004d6e:	40da      	lsrs	r2, r3
 8004d70:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_RCC_ClockConfig+0x288>)
 8004d72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <HAL_RCC_ClockConfig+0x28c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	250b      	movs	r5, #11
 8004d7a:	197c      	adds	r4, r7, r5
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f7fe fa7b 	bl	8003278 <HAL_InitTick>
 8004d82:	0003      	movs	r3, r0
 8004d84:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004d86:	197b      	adds	r3, r7, r5
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004d8e:	197b      	adds	r3, r7, r5
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	0018      	movs	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b004      	add	sp, #16
 8004d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	40022000 	.word	0x40022000
 8004da4:	00001388 	.word	0x00001388
 8004da8:	40021000 	.word	0x40021000
 8004dac:	fffff8ff 	.word	0xfffff8ff
 8004db0:	ffffc7ff 	.word	0xffffc7ff
 8004db4:	0800645c 	.word	0x0800645c
 8004db8:	20000014 	.word	0x20000014
 8004dbc:	20000018 	.word	0x20000018

08004dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc0:	b5b0      	push	{r4, r5, r7, lr}
 8004dc2:	b08e      	sub	sp, #56	; 0x38
 8004dc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004dc6:	4b4c      	ldr	r3, [pc, #304]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dce:	230c      	movs	r3, #12
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b0c      	cmp	r3, #12
 8004dd4:	d014      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x40>
 8004dd6:	d900      	bls.n	8004dda <HAL_RCC_GetSysClockFreq+0x1a>
 8004dd8:	e07b      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x112>
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d002      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x24>
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d00b      	beq.n	8004dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8004de2:	e076      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004de4:	4b44      	ldr	r3, [pc, #272]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2210      	movs	r2, #16
 8004dea:	4013      	ands	r3, r2
 8004dec:	d002      	beq.n	8004df4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004dee:	4b43      	ldr	r3, [pc, #268]	; (8004efc <HAL_RCC_GetSysClockFreq+0x13c>)
 8004df0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004df2:	e07c      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004df4:	4b42      	ldr	r3, [pc, #264]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x140>)
 8004df6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004df8:	e079      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dfa:	4b42      	ldr	r3, [pc, #264]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x144>)
 8004dfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dfe:	e076      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	0c9a      	lsrs	r2, r3, #18
 8004e04:	230f      	movs	r3, #15
 8004e06:	401a      	ands	r2, r3
 8004e08:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x148>)
 8004e0a:	5c9b      	ldrb	r3, [r3, r2]
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	0d9a      	lsrs	r2, r3, #22
 8004e12:	2303      	movs	r3, #3
 8004e14:	4013      	ands	r3, r2
 8004e16:	3301      	adds	r3, #1
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1a:	4b37      	ldr	r3, [pc, #220]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	025b      	lsls	r3, r3, #9
 8004e22:	4013      	ands	r3, r2
 8004e24:	d01a      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	4a35      	ldr	r2, [pc, #212]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x144>)
 8004e30:	2300      	movs	r3, #0
 8004e32:	69b8      	ldr	r0, [r7, #24]
 8004e34:	69f9      	ldr	r1, [r7, #28]
 8004e36:	f7fb fa13 	bl	8000260 <__aeabi_lmul>
 8004e3a:	0002      	movs	r2, r0
 8004e3c:	000b      	movs	r3, r1
 8004e3e:	0010      	movs	r0, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f7fb f9e7 	bl	8000220 <__aeabi_uldivmod>
 8004e52:	0002      	movs	r2, r0
 8004e54:	000b      	movs	r3, r1
 8004e56:	0013      	movs	r3, r2
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5a:	e037      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e5c:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2210      	movs	r2, #16
 8004e62:	4013      	ands	r3, r2
 8004e64:	d01a      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4a23      	ldr	r2, [pc, #140]	; (8004efc <HAL_RCC_GetSysClockFreq+0x13c>)
 8004e70:	2300      	movs	r3, #0
 8004e72:	68b8      	ldr	r0, [r7, #8]
 8004e74:	68f9      	ldr	r1, [r7, #12]
 8004e76:	f7fb f9f3 	bl	8000260 <__aeabi_lmul>
 8004e7a:	0002      	movs	r2, r0
 8004e7c:	000b      	movs	r3, r1
 8004e7e:	0010      	movs	r0, r2
 8004e80:	0019      	movs	r1, r3
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f7fb f9c7 	bl	8000220 <__aeabi_uldivmod>
 8004e92:	0002      	movs	r2, r0
 8004e94:	000b      	movs	r3, r1
 8004e96:	0013      	movs	r3, r2
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9a:	e017      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	0019      	movs	r1, r3
 8004ea4:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x140>)
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f7fb f9da 	bl	8000260 <__aeabi_lmul>
 8004eac:	0002      	movs	r2, r0
 8004eae:	000b      	movs	r3, r1
 8004eb0:	0010      	movs	r0, r2
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	001c      	movs	r4, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	001d      	movs	r5, r3
 8004ebc:	0022      	movs	r2, r4
 8004ebe:	002b      	movs	r3, r5
 8004ec0:	f7fb f9ae 	bl	8000220 <__aeabi_uldivmod>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	000b      	movs	r3, r1
 8004ec8:	0013      	movs	r3, r2
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ed0:	e00d      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004ed2:	4b09      	ldr	r3, [pc, #36]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	0b5b      	lsrs	r3, r3, #13
 8004ed8:	2207      	movs	r2, #7
 8004eda:	4013      	ands	r3, r2
 8004edc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	2280      	movs	r2, #128	; 0x80
 8004ee4:	0212      	lsls	r2, r2, #8
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	0013      	movs	r3, r2
 8004eea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004eec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b00e      	add	sp, #56	; 0x38
 8004ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	003d0900 	.word	0x003d0900
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	007a1200 	.word	0x007a1200
 8004f08:	08006474 	.word	0x08006474

08004f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f10:	4b02      	ldr	r3, [pc, #8]	; (8004f1c <HAL_RCC_GetHCLKFreq+0x10>)
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	0018      	movs	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	20000014 	.word	0x20000014

08004f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f24:	f7ff fff2 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f28:	0001      	movs	r1, r0
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	2207      	movs	r2, #7
 8004f32:	4013      	ands	r3, r2
 8004f34:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f36:	5cd3      	ldrb	r3, [r2, r3]
 8004f38:	40d9      	lsrs	r1, r3
 8004f3a:	000b      	movs	r3, r1
}
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	40021000 	.word	0x40021000
 8004f48:	0800646c 	.word	0x0800646c

08004f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f50:	f7ff ffdc 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f54:	0001      	movs	r1, r0
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	0adb      	lsrs	r3, r3, #11
 8004f5c:	2207      	movs	r2, #7
 8004f5e:	4013      	ands	r3, r2
 8004f60:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f62:	5cd3      	ldrb	r3, [r2, r3]
 8004f64:	40d9      	lsrs	r1, r3
 8004f66:	000b      	movs	r3, r1
}
 8004f68:	0018      	movs	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	40021000 	.word	0x40021000
 8004f74:	0800646c 	.word	0x0800646c

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004f80:	2317      	movs	r3, #23
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d106      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	2380      	movs	r3, #128	; 0x80
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d100      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004f9e:	e0d9      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa0:	4b9c      	ldr	r3, [pc, #624]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa4:	2380      	movs	r3, #128	; 0x80
 8004fa6:	055b      	lsls	r3, r3, #21
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d10a      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	4b99      	ldr	r3, [pc, #612]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb0:	4b98      	ldr	r3, [pc, #608]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004fb2:	2180      	movs	r1, #128	; 0x80
 8004fb4:	0549      	lsls	r1, r1, #21
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004fba:	2317      	movs	r3, #23
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc2:	4b95      	ldr	r3, [pc, #596]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d11a      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fce:	4b92      	ldr	r3, [pc, #584]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b91      	ldr	r3, [pc, #580]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004fd4:	2180      	movs	r1, #128	; 0x80
 8004fd6:	0049      	lsls	r1, r1, #1
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fdc:	f7fe f992 	bl	8003304 <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe6:	f7fe f98d 	bl	8003304 <HAL_GetTick>
 8004fea:	0002      	movs	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b64      	cmp	r3, #100	; 0x64
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e108      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff8:	4b87      	ldr	r3, [pc, #540]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	4013      	ands	r3, r2
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005004:	4b83      	ldr	r3, [pc, #524]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	23c0      	movs	r3, #192	; 0xc0
 800500a:	039b      	lsls	r3, r3, #14
 800500c:	4013      	ands	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	23c0      	movs	r3, #192	; 0xc0
 8005016:	039b      	lsls	r3, r3, #14
 8005018:	4013      	ands	r3, r2
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	429a      	cmp	r2, r3
 800501e:	d107      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	23c0      	movs	r3, #192	; 0xc0
 8005026:	039b      	lsls	r3, r3, #14
 8005028:	4013      	ands	r3, r2
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	429a      	cmp	r2, r3
 800502e:	d013      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	23c0      	movs	r3, #192	; 0xc0
 8005036:	029b      	lsls	r3, r3, #10
 8005038:	401a      	ands	r2, r3
 800503a:	23c0      	movs	r3, #192	; 0xc0
 800503c:	029b      	lsls	r3, r3, #10
 800503e:	429a      	cmp	r2, r3
 8005040:	d10a      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005042:	4b74      	ldr	r3, [pc, #464]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	2380      	movs	r3, #128	; 0x80
 8005048:	029b      	lsls	r3, r3, #10
 800504a:	401a      	ands	r2, r3
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	029b      	lsls	r3, r3, #10
 8005050:	429a      	cmp	r2, r3
 8005052:	d101      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0d8      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005058:	4b6e      	ldr	r3, [pc, #440]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800505a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800505c:	23c0      	movs	r3, #192	; 0xc0
 800505e:	029b      	lsls	r3, r3, #10
 8005060:	4013      	ands	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d049      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	23c0      	movs	r3, #192	; 0xc0
 8005070:	029b      	lsls	r3, r3, #10
 8005072:	4013      	ands	r3, r2
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	429a      	cmp	r2, r3
 8005078:	d004      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2220      	movs	r2, #32
 8005080:	4013      	ands	r3, r2
 8005082:	d10d      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	23c0      	movs	r3, #192	; 0xc0
 800508a:	029b      	lsls	r3, r3, #10
 800508c:	4013      	ands	r3, r2
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	429a      	cmp	r2, r3
 8005092:	d034      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	4013      	ands	r3, r2
 800509e:	d02e      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80050a0:	4b5c      	ldr	r3, [pc, #368]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80050a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a4:	4a5d      	ldr	r2, [pc, #372]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050aa:	4b5a      	ldr	r3, [pc, #360]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80050ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050ae:	4b59      	ldr	r3, [pc, #356]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80050b0:	2180      	movs	r1, #128	; 0x80
 80050b2:	0309      	lsls	r1, r1, #12
 80050b4:	430a      	orrs	r2, r1
 80050b6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050b8:	4b56      	ldr	r3, [pc, #344]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80050ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050bc:	4b55      	ldr	r3, [pc, #340]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80050be:	4958      	ldr	r1, [pc, #352]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80050c0:	400a      	ands	r2, r1
 80050c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80050c4:	4b53      	ldr	r3, [pc, #332]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4013      	ands	r3, r2
 80050d2:	d014      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fe f916 	bl	8003304 <HAL_GetTick>
 80050d8:	0003      	movs	r3, r0
 80050da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050dc:	e009      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fe f911 	bl	8003304 <HAL_GetTick>
 80050e2:	0002      	movs	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	4a4e      	ldr	r2, [pc, #312]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e08b      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f2:	4b48      	ldr	r3, [pc, #288]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80050f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4013      	ands	r3, r2
 80050fc:	d0ef      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	23c0      	movs	r3, #192	; 0xc0
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	401a      	ands	r2, r3
 8005108:	23c0      	movs	r3, #192	; 0xc0
 800510a:	029b      	lsls	r3, r3, #10
 800510c:	429a      	cmp	r2, r3
 800510e:	d10c      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005110:	4b40      	ldr	r3, [pc, #256]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a44      	ldr	r2, [pc, #272]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005116:	4013      	ands	r3, r2
 8005118:	0019      	movs	r1, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	23c0      	movs	r3, #192	; 0xc0
 8005120:	039b      	lsls	r3, r3, #14
 8005122:	401a      	ands	r2, r3
 8005124:	4b3b      	ldr	r3, [pc, #236]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	4b3a      	ldr	r3, [pc, #232]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800512c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	23c0      	movs	r3, #192	; 0xc0
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	401a      	ands	r2, r3
 8005138:	4b36      	ldr	r3, [pc, #216]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800513a:	430a      	orrs	r2, r1
 800513c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800513e:	2317      	movs	r3, #23
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005148:	4b32      	ldr	r3, [pc, #200]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800514a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514c:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800514e:	4937      	ldr	r1, [pc, #220]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005150:	400a      	ands	r2, r1
 8005152:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2201      	movs	r2, #1
 800515a:	4013      	ands	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800515e:	4b2d      	ldr	r3, [pc, #180]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	2203      	movs	r2, #3
 8005164:	4393      	bics	r3, r2
 8005166:	0019      	movs	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	4b29      	ldr	r3, [pc, #164]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800516e:	430a      	orrs	r2, r1
 8005170:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2202      	movs	r2, #2
 8005178:	4013      	ands	r3, r2
 800517a:	d009      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800517c:	4b25      	ldr	r3, [pc, #148]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800517e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005180:	220c      	movs	r2, #12
 8005182:	4393      	bics	r3, r2
 8005184:	0019      	movs	r1, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	4b22      	ldr	r3, [pc, #136]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800518c:	430a      	orrs	r2, r1
 800518e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2204      	movs	r2, #4
 8005196:	4013      	ands	r3, r2
 8005198:	d009      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800519a:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800519c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519e:	4a24      	ldr	r2, [pc, #144]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	0019      	movs	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051aa:	430a      	orrs	r2, r1
 80051ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2208      	movs	r2, #8
 80051b4:	4013      	ands	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051b8:	4b16      	ldr	r3, [pc, #88]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80051be:	4013      	ands	r3, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	4b13      	ldr	r3, [pc, #76]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051c8:	430a      	orrs	r2, r1
 80051ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2240      	movs	r2, #64	; 0x40
 80051d2:	4013      	ands	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051da:	4a17      	ldr	r2, [pc, #92]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80051dc:	4013      	ands	r3, r2
 80051de:	0019      	movs	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1a      	ldr	r2, [r3, #32]
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051e6:	430a      	orrs	r2, r1
 80051e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2280      	movs	r2, #128	; 0x80
 80051f0:	4013      	ands	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f8:	4a10      	ldr	r2, [pc, #64]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	0019      	movs	r1, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	4b04      	ldr	r3, [pc, #16]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005204:	430a      	orrs	r2, r1
 8005206:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	0018      	movs	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	b006      	add	sp, #24
 8005210:	bd80      	pop	{r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	40021000 	.word	0x40021000
 8005218:	40007000 	.word	0x40007000
 800521c:	fffcffff 	.word	0xfffcffff
 8005220:	fff7ffff 	.word	0xfff7ffff
 8005224:	00001388 	.word	0x00001388
 8005228:	ffcfffff 	.word	0xffcfffff
 800522c:	efffffff 	.word	0xefffffff
 8005230:	fffff3ff 	.word	0xfffff3ff
 8005234:	ffffcfff 	.word	0xffffcfff
 8005238:	fbffffff 	.word	0xfbffffff
 800523c:	fff3ffff 	.word	0xfff3ffff

08005240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e032      	b.n	80052b8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2239      	movs	r2, #57	; 0x39
 8005256:	5c9b      	ldrb	r3, [r3, r2]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d107      	bne.n	800526e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2238      	movs	r2, #56	; 0x38
 8005262:	2100      	movs	r1, #0
 8005264:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	0018      	movs	r0, r3
 800526a:	f7fd fe4f 	bl	8002f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2239      	movs	r2, #57	; 0x39
 8005272:	2102      	movs	r1, #2
 8005274:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	0019      	movs	r1, r3
 8005280:	0010      	movs	r0, r2
 8005282:	f000 f979 	bl	8005578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	223e      	movs	r2, #62	; 0x3e
 800528a:	2101      	movs	r1, #1
 800528c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	223a      	movs	r2, #58	; 0x3a
 8005292:	2101      	movs	r1, #1
 8005294:	5499      	strb	r1, [r3, r2]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	223b      	movs	r2, #59	; 0x3b
 800529a:	2101      	movs	r1, #1
 800529c:	5499      	strb	r1, [r3, r2]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	223c      	movs	r2, #60	; 0x3c
 80052a2:	2101      	movs	r1, #1
 80052a4:	5499      	strb	r1, [r3, r2]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	223d      	movs	r2, #61	; 0x3d
 80052aa:	2101      	movs	r1, #1
 80052ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2239      	movs	r2, #57	; 0x39
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b002      	add	sp, #8
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2239      	movs	r2, #57	; 0x39
 80052cc:	5c9b      	ldrb	r3, [r3, r2]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d001      	beq.n	80052d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e036      	b.n	8005346 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2239      	movs	r2, #57	; 0x39
 80052dc:	2102      	movs	r1, #2
 80052de:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2101      	movs	r1, #1
 80052ec:	430a      	orrs	r2, r1
 80052ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	05db      	lsls	r3, r3, #23
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d009      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x50>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a13      	ldr	r2, [pc, #76]	; (8005350 <HAL_TIM_Base_Start_IT+0x90>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d004      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x50>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a12      	ldr	r2, [pc, #72]	; (8005354 <HAL_TIM_Base_Start_IT+0x94>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d111      	bne.n	8005334 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2207      	movs	r2, #7
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b06      	cmp	r3, #6
 8005320:	d010      	beq.n	8005344 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2101      	movs	r1, #1
 800532e:	430a      	orrs	r2, r1
 8005330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005332:	e007      	b.n	8005344 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2101      	movs	r1, #1
 8005340:	430a      	orrs	r2, r1
 8005342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	0018      	movs	r0, r3
 8005348:	46bd      	mov	sp, r7
 800534a:	b004      	add	sp, #16
 800534c:	bd80      	pop	{r7, pc}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	40010800 	.word	0x40010800
 8005354:	40011400 	.word	0x40011400

08005358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2202      	movs	r2, #2
 8005368:	4013      	ands	r3, r2
 800536a:	2b02      	cmp	r3, #2
 800536c:	d124      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2202      	movs	r2, #2
 8005376:	4013      	ands	r3, r2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d11d      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2203      	movs	r2, #3
 8005382:	4252      	negs	r2, r2
 8005384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2203      	movs	r2, #3
 8005394:	4013      	ands	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	0018      	movs	r0, r3
 800539c:	f000 f8d4 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e007      	b.n	80053b2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f000 f8c7 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	0018      	movs	r0, r3
 80053ae:	f000 f8d3 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2204      	movs	r2, #4
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d125      	bne.n	8005412 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2204      	movs	r2, #4
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d11e      	bne.n	8005412 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2205      	movs	r2, #5
 80053da:	4252      	negs	r2, r2
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	23c0      	movs	r3, #192	; 0xc0
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4013      	ands	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	0018      	movs	r0, r3
 80053f6:	f000 f8a7 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 80053fa:	e007      	b.n	800540c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 f89a 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	0018      	movs	r0, r3
 8005408:	f000 f8a6 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	2208      	movs	r2, #8
 800541a:	4013      	ands	r3, r2
 800541c:	2b08      	cmp	r3, #8
 800541e:	d124      	bne.n	800546a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	2208      	movs	r2, #8
 8005428:	4013      	ands	r3, r2
 800542a:	2b08      	cmp	r3, #8
 800542c:	d11d      	bne.n	800546a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2209      	movs	r2, #9
 8005434:	4252      	negs	r2, r2
 8005436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2204      	movs	r2, #4
 800543c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	2203      	movs	r2, #3
 8005446:	4013      	ands	r3, r2
 8005448:	d004      	beq.n	8005454 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	0018      	movs	r0, r3
 800544e:	f000 f87b 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 8005452:	e007      	b.n	8005464 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	0018      	movs	r0, r3
 8005458:	f000 f86e 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	0018      	movs	r0, r3
 8005460:	f000 f87a 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2210      	movs	r2, #16
 8005472:	4013      	ands	r3, r2
 8005474:	2b10      	cmp	r3, #16
 8005476:	d125      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2210      	movs	r2, #16
 8005480:	4013      	ands	r3, r2
 8005482:	2b10      	cmp	r3, #16
 8005484:	d11e      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2211      	movs	r2, #17
 800548c:	4252      	negs	r2, r2
 800548e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2208      	movs	r2, #8
 8005494:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	23c0      	movs	r3, #192	; 0xc0
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4013      	ands	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	0018      	movs	r0, r3
 80054a8:	f000 f84e 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 80054ac:	e007      	b.n	80054be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f000 f841 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f000 f84d 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2201      	movs	r2, #1
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d10f      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	4013      	ands	r3, r2
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d108      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2202      	movs	r2, #2
 80054e6:	4252      	negs	r2, r2
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f000 f81b 	bl	8005528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2240      	movs	r2, #64	; 0x40
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d10f      	bne.n	8005520 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2240      	movs	r2, #64	; 0x40
 8005508:	4013      	ands	r3, r2
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d108      	bne.n	8005520 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2241      	movs	r2, #65	; 0x41
 8005514:	4252      	negs	r2, r2
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	0018      	movs	r0, r3
 800551c:	f000 f824 	bl	8005568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005530:	46c0      	nop			; (mov r8, r8)
 8005532:	46bd      	mov	sp, r7
 8005534:	b002      	add	sp, #8
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005540:	46c0      	nop			; (mov r8, r8)
 8005542:	46bd      	mov	sp, r7
 8005544:	b002      	add	sp, #8
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005550:	46c0      	nop			; (mov r8, r8)
 8005552:	46bd      	mov	sp, r7
 8005554:	b002      	add	sp, #8
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	b002      	add	sp, #8
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005570:	46c0      	nop			; (mov r8, r8)
 8005572:	46bd      	mov	sp, r7
 8005574:	b002      	add	sp, #8
 8005576:	bd80      	pop	{r7, pc}

08005578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	05db      	lsls	r3, r3, #23
 800558e:	429a      	cmp	r2, r3
 8005590:	d007      	beq.n	80055a2 <TIM_Base_SetConfig+0x2a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <TIM_Base_SetConfig+0x9c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d003      	beq.n	80055a2 <TIM_Base_SetConfig+0x2a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a1e      	ldr	r2, [pc, #120]	; (8005618 <TIM_Base_SetConfig+0xa0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d108      	bne.n	80055b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2270      	movs	r2, #112	; 0x70
 80055a6:	4393      	bics	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	2380      	movs	r3, #128	; 0x80
 80055b8:	05db      	lsls	r3, r3, #23
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d007      	beq.n	80055ce <TIM_Base_SetConfig+0x56>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a14      	ldr	r2, [pc, #80]	; (8005614 <TIM_Base_SetConfig+0x9c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_Base_SetConfig+0x56>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a13      	ldr	r2, [pc, #76]	; (8005618 <TIM_Base_SetConfig+0xa0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d108      	bne.n	80055e0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4a12      	ldr	r2, [pc, #72]	; (800561c <TIM_Base_SetConfig+0xa4>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2280      	movs	r2, #128	; 0x80
 80055e4:	4393      	bics	r3, r2
 80055e6:	001a      	movs	r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	615a      	str	r2, [r3, #20]
}
 800560c:	46c0      	nop			; (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	b004      	add	sp, #16
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40010800 	.word	0x40010800
 8005618:	40011400 	.word	0x40011400
 800561c:	fffffcff 	.word	0xfffffcff

08005620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2238      	movs	r2, #56	; 0x38
 800562e:	5c9b      	ldrb	r3, [r3, r2]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005634:	2302      	movs	r3, #2
 8005636:	e042      	b.n	80056be <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2238      	movs	r2, #56	; 0x38
 800563c:	2101      	movs	r1, #1
 800563e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2239      	movs	r2, #57	; 0x39
 8005644:	2102      	movs	r1, #2
 8005646:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2270      	movs	r2, #112	; 0x70
 800565c:	4393      	bics	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	2380      	movs	r3, #128	; 0x80
 8005678:	05db      	lsls	r3, r3, #23
 800567a:	429a      	cmp	r2, r3
 800567c:	d009      	beq.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a11      	ldr	r2, [pc, #68]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0f      	ldr	r2, [pc, #60]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d10c      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	4393      	bics	r3, r2
 8005698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2239      	movs	r2, #57	; 0x39
 80056b0:	2101      	movs	r1, #1
 80056b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2238      	movs	r2, #56	; 0x38
 80056b8:	2100      	movs	r1, #0
 80056ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	0018      	movs	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b004      	add	sp, #16
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	40010800 	.word	0x40010800
 80056cc:	40011400 	.word	0x40011400

080056d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e044      	b.n	800576c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2274      	movs	r2, #116	; 0x74
 80056ee:	2100      	movs	r1, #0
 80056f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7fd fc51 	bl	8002f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2224      	movs	r2, #36	; 0x24
 80056fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2101      	movs	r1, #1
 800570c:	438a      	bics	r2, r1
 800570e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	0018      	movs	r0, r3
 8005714:	f000 f8d8 	bl	80058c8 <UART_SetConfig>
 8005718:	0003      	movs	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e024      	b.n	800576c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	0018      	movs	r0, r3
 800572e:	f000 fb6b 	bl	8005e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	490d      	ldr	r1, [pc, #52]	; (8005774 <HAL_UART_Init+0xa4>)
 800573e:	400a      	ands	r2, r1
 8005740:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	212a      	movs	r1, #42	; 0x2a
 800574e:	438a      	bics	r2, r1
 8005750:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2101      	movs	r1, #1
 800575e:	430a      	orrs	r2, r1
 8005760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f000 fc03 	bl	8005f70 <UART_CheckIdleState>
 800576a:	0003      	movs	r3, r0
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b002      	add	sp, #8
 8005772:	bd80      	pop	{r7, pc}
 8005774:	ffffb7ff 	.word	0xffffb7ff

08005778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	1dbb      	adds	r3, r7, #6
 8005786:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800578c:	2b20      	cmp	r3, #32
 800578e:	d000      	beq.n	8005792 <HAL_UART_Transmit+0x1a>
 8005790:	e095      	b.n	80058be <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_UART_Transmit+0x28>
 8005798:	1dbb      	adds	r3, r7, #6
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e08d      	b.n	80058c0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	015b      	lsls	r3, r3, #5
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d109      	bne.n	80057c4 <HAL_UART_Transmit+0x4c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d105      	bne.n	80057c4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2201      	movs	r2, #1
 80057bc:	4013      	ands	r3, r2
 80057be:	d001      	beq.n	80057c4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e07d      	b.n	80058c0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2274      	movs	r2, #116	; 0x74
 80057c8:	5c9b      	ldrb	r3, [r3, r2]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Transmit+0x5a>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e076      	b.n	80058c0 <HAL_UART_Transmit+0x148>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2274      	movs	r2, #116	; 0x74
 80057d6:	2101      	movs	r1, #1
 80057d8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2280      	movs	r2, #128	; 0x80
 80057de:	2100      	movs	r1, #0
 80057e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2221      	movs	r2, #33	; 0x21
 80057e6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057e8:	f7fd fd8c 	bl	8003304 <HAL_GetTick>
 80057ec:	0003      	movs	r3, r0
 80057ee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	1dba      	adds	r2, r7, #6
 80057f4:	2150      	movs	r1, #80	; 0x50
 80057f6:	8812      	ldrh	r2, [r2, #0]
 80057f8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1dba      	adds	r2, r7, #6
 80057fe:	2152      	movs	r1, #82	; 0x52
 8005800:	8812      	ldrh	r2, [r2, #0]
 8005802:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	015b      	lsls	r3, r3, #5
 800580c:	429a      	cmp	r2, r3
 800580e:	d108      	bne.n	8005822 <HAL_UART_Transmit+0xaa>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	61bb      	str	r3, [r7, #24]
 8005820:	e003      	b.n	800582a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2274      	movs	r2, #116	; 0x74
 800582e:	2100      	movs	r1, #0
 8005830:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005832:	e02c      	b.n	800588e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	0013      	movs	r3, r2
 800583e:	2200      	movs	r2, #0
 8005840:	2180      	movs	r1, #128	; 0x80
 8005842:	f000 fbdd 	bl	8006000 <UART_WaitOnFlagUntilTimeout>
 8005846:	1e03      	subs	r3, r0, #0
 8005848:	d001      	beq.n	800584e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e038      	b.n	80058c0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	001a      	movs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	05d2      	lsls	r2, r2, #23
 8005860:	0dd2      	lsrs	r2, r2, #23
 8005862:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	3302      	adds	r3, #2
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	e007      	b.n	800587c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	781a      	ldrb	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3301      	adds	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2252      	movs	r2, #82	; 0x52
 8005880:	5a9b      	ldrh	r3, [r3, r2]
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b299      	uxth	r1, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2252      	movs	r2, #82	; 0x52
 800588c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2252      	movs	r2, #82	; 0x52
 8005892:	5a9b      	ldrh	r3, [r3, r2]
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1cc      	bne.n	8005834 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	0013      	movs	r3, r2
 80058a4:	2200      	movs	r2, #0
 80058a6:	2140      	movs	r1, #64	; 0x40
 80058a8:	f000 fbaa 	bl	8006000 <UART_WaitOnFlagUntilTimeout>
 80058ac:	1e03      	subs	r3, r0, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e005      	b.n	80058c0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	e000      	b.n	80058c0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
  }
}
 80058c0:	0018      	movs	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b008      	add	sp, #32
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c8:	b5b0      	push	{r4, r5, r7, lr}
 80058ca:	b08e      	sub	sp, #56	; 0x38
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058d0:	231a      	movs	r3, #26
 80058d2:	2218      	movs	r2, #24
 80058d4:	4694      	mov	ip, r2
 80058d6:	44bc      	add	ip, r7
 80058d8:	4463      	add	r3, ip
 80058da:	2200      	movs	r2, #0
 80058dc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	431a      	orrs	r2, r3
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4ac1      	ldr	r2, [pc, #772]	; (8005c04 <UART_SetConfig+0x33c>)
 80058fe:	4013      	ands	r3, r2
 8005900:	0019      	movs	r1, r3
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005908:	430a      	orrs	r2, r1
 800590a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4abd      	ldr	r2, [pc, #756]	; (8005c08 <UART_SetConfig+0x340>)
 8005914:	4013      	ands	r3, r2
 8005916:	0019      	movs	r1, r3
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4ab7      	ldr	r2, [pc, #732]	; (8005c0c <UART_SetConfig+0x344>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800593a:	4313      	orrs	r3, r2
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4ab2      	ldr	r2, [pc, #712]	; (8005c10 <UART_SetConfig+0x348>)
 8005946:	4013      	ands	r3, r2
 8005948:	0019      	movs	r1, r3
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005950:	430a      	orrs	r2, r1
 8005952:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4aae      	ldr	r2, [pc, #696]	; (8005c14 <UART_SetConfig+0x34c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d136      	bne.n	80059cc <UART_SetConfig+0x104>
 800595e:	4bae      	ldr	r3, [pc, #696]	; (8005c18 <UART_SetConfig+0x350>)
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	2203      	movs	r2, #3
 8005964:	4013      	ands	r3, r2
 8005966:	2b03      	cmp	r3, #3
 8005968:	d020      	beq.n	80059ac <UART_SetConfig+0xe4>
 800596a:	d827      	bhi.n	80059bc <UART_SetConfig+0xf4>
 800596c:	2b02      	cmp	r3, #2
 800596e:	d00d      	beq.n	800598c <UART_SetConfig+0xc4>
 8005970:	d824      	bhi.n	80059bc <UART_SetConfig+0xf4>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <UART_SetConfig+0xb4>
 8005976:	2b01      	cmp	r3, #1
 8005978:	d010      	beq.n	800599c <UART_SetConfig+0xd4>
 800597a:	e01f      	b.n	80059bc <UART_SetConfig+0xf4>
 800597c:	231b      	movs	r3, #27
 800597e:	2218      	movs	r2, #24
 8005980:	4694      	mov	ip, r2
 8005982:	44bc      	add	ip, r7
 8005984:	4463      	add	r3, ip
 8005986:	2201      	movs	r2, #1
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	e0ab      	b.n	8005ae4 <UART_SetConfig+0x21c>
 800598c:	231b      	movs	r3, #27
 800598e:	2218      	movs	r2, #24
 8005990:	4694      	mov	ip, r2
 8005992:	44bc      	add	ip, r7
 8005994:	4463      	add	r3, ip
 8005996:	2202      	movs	r2, #2
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e0a3      	b.n	8005ae4 <UART_SetConfig+0x21c>
 800599c:	231b      	movs	r3, #27
 800599e:	2218      	movs	r2, #24
 80059a0:	4694      	mov	ip, r2
 80059a2:	44bc      	add	ip, r7
 80059a4:	4463      	add	r3, ip
 80059a6:	2204      	movs	r2, #4
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e09b      	b.n	8005ae4 <UART_SetConfig+0x21c>
 80059ac:	231b      	movs	r3, #27
 80059ae:	2218      	movs	r2, #24
 80059b0:	4694      	mov	ip, r2
 80059b2:	44bc      	add	ip, r7
 80059b4:	4463      	add	r3, ip
 80059b6:	2208      	movs	r2, #8
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	e093      	b.n	8005ae4 <UART_SetConfig+0x21c>
 80059bc:	231b      	movs	r3, #27
 80059be:	2218      	movs	r2, #24
 80059c0:	4694      	mov	ip, r2
 80059c2:	44bc      	add	ip, r7
 80059c4:	4463      	add	r3, ip
 80059c6:	2210      	movs	r2, #16
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e08b      	b.n	8005ae4 <UART_SetConfig+0x21c>
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a92      	ldr	r2, [pc, #584]	; (8005c1c <UART_SetConfig+0x354>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d136      	bne.n	8005a44 <UART_SetConfig+0x17c>
 80059d6:	4b90      	ldr	r3, [pc, #576]	; (8005c18 <UART_SetConfig+0x350>)
 80059d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059da:	220c      	movs	r2, #12
 80059dc:	4013      	ands	r3, r2
 80059de:	2b0c      	cmp	r3, #12
 80059e0:	d020      	beq.n	8005a24 <UART_SetConfig+0x15c>
 80059e2:	d827      	bhi.n	8005a34 <UART_SetConfig+0x16c>
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d00d      	beq.n	8005a04 <UART_SetConfig+0x13c>
 80059e8:	d824      	bhi.n	8005a34 <UART_SetConfig+0x16c>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <UART_SetConfig+0x12c>
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d010      	beq.n	8005a14 <UART_SetConfig+0x14c>
 80059f2:	e01f      	b.n	8005a34 <UART_SetConfig+0x16c>
 80059f4:	231b      	movs	r3, #27
 80059f6:	2218      	movs	r2, #24
 80059f8:	4694      	mov	ip, r2
 80059fa:	44bc      	add	ip, r7
 80059fc:	4463      	add	r3, ip
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e06f      	b.n	8005ae4 <UART_SetConfig+0x21c>
 8005a04:	231b      	movs	r3, #27
 8005a06:	2218      	movs	r2, #24
 8005a08:	4694      	mov	ip, r2
 8005a0a:	44bc      	add	ip, r7
 8005a0c:	4463      	add	r3, ip
 8005a0e:	2202      	movs	r2, #2
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e067      	b.n	8005ae4 <UART_SetConfig+0x21c>
 8005a14:	231b      	movs	r3, #27
 8005a16:	2218      	movs	r2, #24
 8005a18:	4694      	mov	ip, r2
 8005a1a:	44bc      	add	ip, r7
 8005a1c:	4463      	add	r3, ip
 8005a1e:	2204      	movs	r2, #4
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e05f      	b.n	8005ae4 <UART_SetConfig+0x21c>
 8005a24:	231b      	movs	r3, #27
 8005a26:	2218      	movs	r2, #24
 8005a28:	4694      	mov	ip, r2
 8005a2a:	44bc      	add	ip, r7
 8005a2c:	4463      	add	r3, ip
 8005a2e:	2208      	movs	r2, #8
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e057      	b.n	8005ae4 <UART_SetConfig+0x21c>
 8005a34:	231b      	movs	r3, #27
 8005a36:	2218      	movs	r2, #24
 8005a38:	4694      	mov	ip, r2
 8005a3a:	44bc      	add	ip, r7
 8005a3c:	4463      	add	r3, ip
 8005a3e:	2210      	movs	r2, #16
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	e04f      	b.n	8005ae4 <UART_SetConfig+0x21c>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a70      	ldr	r2, [pc, #448]	; (8005c0c <UART_SetConfig+0x344>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d143      	bne.n	8005ad6 <UART_SetConfig+0x20e>
 8005a4e:	4b72      	ldr	r3, [pc, #456]	; (8005c18 <UART_SetConfig+0x350>)
 8005a50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a52:	23c0      	movs	r3, #192	; 0xc0
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	4013      	ands	r3, r2
 8005a58:	22c0      	movs	r2, #192	; 0xc0
 8005a5a:	0112      	lsls	r2, r2, #4
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d02a      	beq.n	8005ab6 <UART_SetConfig+0x1ee>
 8005a60:	22c0      	movs	r2, #192	; 0xc0
 8005a62:	0112      	lsls	r2, r2, #4
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d82e      	bhi.n	8005ac6 <UART_SetConfig+0x1fe>
 8005a68:	2280      	movs	r2, #128	; 0x80
 8005a6a:	0112      	lsls	r2, r2, #4
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d012      	beq.n	8005a96 <UART_SetConfig+0x1ce>
 8005a70:	2280      	movs	r2, #128	; 0x80
 8005a72:	0112      	lsls	r2, r2, #4
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d826      	bhi.n	8005ac6 <UART_SetConfig+0x1fe>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <UART_SetConfig+0x1be>
 8005a7c:	2280      	movs	r2, #128	; 0x80
 8005a7e:	00d2      	lsls	r2, r2, #3
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d010      	beq.n	8005aa6 <UART_SetConfig+0x1de>
 8005a84:	e01f      	b.n	8005ac6 <UART_SetConfig+0x1fe>
 8005a86:	231b      	movs	r3, #27
 8005a88:	2218      	movs	r2, #24
 8005a8a:	4694      	mov	ip, r2
 8005a8c:	44bc      	add	ip, r7
 8005a8e:	4463      	add	r3, ip
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e026      	b.n	8005ae4 <UART_SetConfig+0x21c>
 8005a96:	231b      	movs	r3, #27
 8005a98:	2218      	movs	r2, #24
 8005a9a:	4694      	mov	ip, r2
 8005a9c:	44bc      	add	ip, r7
 8005a9e:	4463      	add	r3, ip
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e01e      	b.n	8005ae4 <UART_SetConfig+0x21c>
 8005aa6:	231b      	movs	r3, #27
 8005aa8:	2218      	movs	r2, #24
 8005aaa:	4694      	mov	ip, r2
 8005aac:	44bc      	add	ip, r7
 8005aae:	4463      	add	r3, ip
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e016      	b.n	8005ae4 <UART_SetConfig+0x21c>
 8005ab6:	231b      	movs	r3, #27
 8005ab8:	2218      	movs	r2, #24
 8005aba:	4694      	mov	ip, r2
 8005abc:	44bc      	add	ip, r7
 8005abe:	4463      	add	r3, ip
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e00e      	b.n	8005ae4 <UART_SetConfig+0x21c>
 8005ac6:	231b      	movs	r3, #27
 8005ac8:	2218      	movs	r2, #24
 8005aca:	4694      	mov	ip, r2
 8005acc:	44bc      	add	ip, r7
 8005ace:	4463      	add	r3, ip
 8005ad0:	2210      	movs	r2, #16
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e006      	b.n	8005ae4 <UART_SetConfig+0x21c>
 8005ad6:	231b      	movs	r3, #27
 8005ad8:	2218      	movs	r2, #24
 8005ada:	4694      	mov	ip, r2
 8005adc:	44bc      	add	ip, r7
 8005ade:	4463      	add	r3, ip
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a48      	ldr	r2, [pc, #288]	; (8005c0c <UART_SetConfig+0x344>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d000      	beq.n	8005af0 <UART_SetConfig+0x228>
 8005aee:	e09b      	b.n	8005c28 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005af0:	231b      	movs	r3, #27
 8005af2:	2218      	movs	r2, #24
 8005af4:	4694      	mov	ip, r2
 8005af6:	44bc      	add	ip, r7
 8005af8:	4463      	add	r3, ip
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d01d      	beq.n	8005b3c <UART_SetConfig+0x274>
 8005b00:	dc20      	bgt.n	8005b44 <UART_SetConfig+0x27c>
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d015      	beq.n	8005b32 <UART_SetConfig+0x26a>
 8005b06:	dc1d      	bgt.n	8005b44 <UART_SetConfig+0x27c>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <UART_SetConfig+0x24a>
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d005      	beq.n	8005b1c <UART_SetConfig+0x254>
 8005b10:	e018      	b.n	8005b44 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b12:	f7ff fa05 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8005b16:	0003      	movs	r3, r0
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b1a:	e01d      	b.n	8005b58 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b1c:	4b3e      	ldr	r3, [pc, #248]	; (8005c18 <UART_SetConfig+0x350>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2210      	movs	r2, #16
 8005b22:	4013      	ands	r3, r2
 8005b24:	d002      	beq.n	8005b2c <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b26:	4b3e      	ldr	r3, [pc, #248]	; (8005c20 <UART_SetConfig+0x358>)
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b2a:	e015      	b.n	8005b58 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8005b2c:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <UART_SetConfig+0x35c>)
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b30:	e012      	b.n	8005b58 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b32:	f7ff f945 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8005b36:	0003      	movs	r3, r0
 8005b38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b3a:	e00d      	b.n	8005b58 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b42:	e009      	b.n	8005b58 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b48:	231a      	movs	r3, #26
 8005b4a:	2218      	movs	r2, #24
 8005b4c:	4694      	mov	ip, r2
 8005b4e:	44bc      	add	ip, r7
 8005b50:	4463      	add	r3, ip
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
        break;
 8005b56:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d100      	bne.n	8005b60 <UART_SetConfig+0x298>
 8005b5e:	e139      	b.n	8005dd4 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	0013      	movs	r3, r2
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	189b      	adds	r3, r3, r2
 8005b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d305      	bcc.n	8005b7c <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d907      	bls.n	8005b8c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005b7c:	231a      	movs	r3, #26
 8005b7e:	2218      	movs	r2, #24
 8005b80:	4694      	mov	ip, r2
 8005b82:	44bc      	add	ip, r7
 8005b84:	4463      	add	r3, ip
 8005b86:	2201      	movs	r2, #1
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	e123      	b.n	8005dd4 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	6939      	ldr	r1, [r7, #16]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	000b      	movs	r3, r1
 8005b9a:	0e1b      	lsrs	r3, r3, #24
 8005b9c:	0010      	movs	r0, r2
 8005b9e:	0205      	lsls	r5, r0, #8
 8005ba0:	431d      	orrs	r5, r3
 8005ba2:	000b      	movs	r3, r1
 8005ba4:	021c      	lsls	r4, r3, #8
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68b8      	ldr	r0, [r7, #8]
 8005bb4:	68f9      	ldr	r1, [r7, #12]
 8005bb6:	1900      	adds	r0, r0, r4
 8005bb8:	4169      	adcs	r1, r5
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	607b      	str	r3, [r7, #4]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f7fa fb2a 	bl	8000220 <__aeabi_uldivmod>
 8005bcc:	0002      	movs	r2, r0
 8005bce:	000b      	movs	r3, r1
 8005bd0:	0013      	movs	r3, r2
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd6:	23c0      	movs	r3, #192	; 0xc0
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d309      	bcc.n	8005bf2 <UART_SetConfig+0x32a>
 8005bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	035b      	lsls	r3, r3, #13
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d204      	bcs.n	8005bf2 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bee:	60da      	str	r2, [r3, #12]
 8005bf0:	e0f0      	b.n	8005dd4 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8005bf2:	231a      	movs	r3, #26
 8005bf4:	2218      	movs	r2, #24
 8005bf6:	4694      	mov	ip, r2
 8005bf8:	44bc      	add	ip, r7
 8005bfa:	4463      	add	r3, ip
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	e0e8      	b.n	8005dd4 <UART_SetConfig+0x50c>
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	efff69f3 	.word	0xefff69f3
 8005c08:	ffffcfff 	.word	0xffffcfff
 8005c0c:	40004800 	.word	0x40004800
 8005c10:	fffff4ff 	.word	0xfffff4ff
 8005c14:	40013800 	.word	0x40013800
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40004400 	.word	0x40004400
 8005c20:	003d0900 	.word	0x003d0900
 8005c24:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d000      	beq.n	8005c36 <UART_SetConfig+0x36e>
 8005c34:	e074      	b.n	8005d20 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005c36:	231b      	movs	r3, #27
 8005c38:	2218      	movs	r2, #24
 8005c3a:	4694      	mov	ip, r2
 8005c3c:	44bc      	add	ip, r7
 8005c3e:	4463      	add	r3, ip
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d822      	bhi.n	8005c8c <UART_SetConfig+0x3c4>
 8005c46:	009a      	lsls	r2, r3, #2
 8005c48:	4b6a      	ldr	r3, [pc, #424]	; (8005df4 <UART_SetConfig+0x52c>)
 8005c4a:	18d3      	adds	r3, r2, r3
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c50:	f7ff f966 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8005c54:	0003      	movs	r3, r0
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c58:	e022      	b.n	8005ca0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c5a:	f7ff f977 	bl	8004f4c <HAL_RCC_GetPCLK2Freq>
 8005c5e:	0003      	movs	r3, r0
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c62:	e01d      	b.n	8005ca0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c64:	4b64      	ldr	r3, [pc, #400]	; (8005df8 <UART_SetConfig+0x530>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d002      	beq.n	8005c74 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005c6e:	4b63      	ldr	r3, [pc, #396]	; (8005dfc <UART_SetConfig+0x534>)
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c72:	e015      	b.n	8005ca0 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8005c74:	4b62      	ldr	r3, [pc, #392]	; (8005e00 <UART_SetConfig+0x538>)
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c78:	e012      	b.n	8005ca0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c7a:	f7ff f8a1 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c82:	e00d      	b.n	8005ca0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c84:	2380      	movs	r3, #128	; 0x80
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c8a:	e009      	b.n	8005ca0 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c90:	231a      	movs	r3, #26
 8005c92:	2218      	movs	r2, #24
 8005c94:	4694      	mov	ip, r2
 8005c96:	44bc      	add	ip, r7
 8005c98:	4463      	add	r3, ip
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	701a      	strb	r2, [r3, #0]
        break;
 8005c9e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d100      	bne.n	8005ca8 <UART_SetConfig+0x3e0>
 8005ca6:	e095      	b.n	8005dd4 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	005a      	lsls	r2, r3, #1
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	18d2      	adds	r2, r2, r3
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	0019      	movs	r1, r3
 8005cba:	0010      	movs	r0, r2
 8005cbc:	f7fa fa24 	bl	8000108 <__udivsi3>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	2b0f      	cmp	r3, #15
 8005cca:	d921      	bls.n	8005d10 <UART_SetConfig+0x448>
 8005ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	025b      	lsls	r3, r3, #9
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d21c      	bcs.n	8005d10 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	200e      	movs	r0, #14
 8005cdc:	2418      	movs	r4, #24
 8005cde:	193b      	adds	r3, r7, r4
 8005ce0:	181b      	adds	r3, r3, r0
 8005ce2:	210f      	movs	r1, #15
 8005ce4:	438a      	bics	r2, r1
 8005ce6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	085b      	lsrs	r3, r3, #1
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2207      	movs	r2, #7
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	b299      	uxth	r1, r3
 8005cf4:	193b      	adds	r3, r7, r4
 8005cf6:	181b      	adds	r3, r3, r0
 8005cf8:	193a      	adds	r2, r7, r4
 8005cfa:	1812      	adds	r2, r2, r0
 8005cfc:	8812      	ldrh	r2, [r2, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	193a      	adds	r2, r7, r4
 8005d08:	1812      	adds	r2, r2, r0
 8005d0a:	8812      	ldrh	r2, [r2, #0]
 8005d0c:	60da      	str	r2, [r3, #12]
 8005d0e:	e061      	b.n	8005dd4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d10:	231a      	movs	r3, #26
 8005d12:	2218      	movs	r2, #24
 8005d14:	4694      	mov	ip, r2
 8005d16:	44bc      	add	ip, r7
 8005d18:	4463      	add	r3, ip
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	e059      	b.n	8005dd4 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d20:	231b      	movs	r3, #27
 8005d22:	2218      	movs	r2, #24
 8005d24:	4694      	mov	ip, r2
 8005d26:	44bc      	add	ip, r7
 8005d28:	4463      	add	r3, ip
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d822      	bhi.n	8005d76 <UART_SetConfig+0x4ae>
 8005d30:	009a      	lsls	r2, r3, #2
 8005d32:	4b34      	ldr	r3, [pc, #208]	; (8005e04 <UART_SetConfig+0x53c>)
 8005d34:	18d3      	adds	r3, r2, r3
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d3a:	f7ff f8f1 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8005d3e:	0003      	movs	r3, r0
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d42:	e022      	b.n	8005d8a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d44:	f7ff f902 	bl	8004f4c <HAL_RCC_GetPCLK2Freq>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d4c:	e01d      	b.n	8005d8a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d4e:	4b2a      	ldr	r3, [pc, #168]	; (8005df8 <UART_SetConfig+0x530>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2210      	movs	r2, #16
 8005d54:	4013      	ands	r3, r2
 8005d56:	d002      	beq.n	8005d5e <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005d58:	4b28      	ldr	r3, [pc, #160]	; (8005dfc <UART_SetConfig+0x534>)
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d5c:	e015      	b.n	8005d8a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005d5e:	4b28      	ldr	r3, [pc, #160]	; (8005e00 <UART_SetConfig+0x538>)
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d62:	e012      	b.n	8005d8a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d64:	f7ff f82c 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8005d68:	0003      	movs	r3, r0
 8005d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d6c:	e00d      	b.n	8005d8a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6e:	2380      	movs	r3, #128	; 0x80
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d74:	e009      	b.n	8005d8a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d7a:	231a      	movs	r3, #26
 8005d7c:	2218      	movs	r2, #24
 8005d7e:	4694      	mov	ip, r2
 8005d80:	44bc      	add	ip, r7
 8005d82:	4463      	add	r3, ip
 8005d84:	2201      	movs	r2, #1
 8005d86:	701a      	strb	r2, [r3, #0]
        break;
 8005d88:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d021      	beq.n	8005dd4 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	085a      	lsrs	r2, r3, #1
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	18d2      	adds	r2, r2, r3
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	0019      	movs	r1, r3
 8005da0:	0010      	movs	r0, r2
 8005da2:	f7fa f9b1 	bl	8000108 <__udivsi3>
 8005da6:	0003      	movs	r3, r0
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	2b0f      	cmp	r3, #15
 8005db0:	d909      	bls.n	8005dc6 <UART_SetConfig+0x4fe>
 8005db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	025b      	lsls	r3, r3, #9
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d204      	bcs.n	8005dc6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e006      	b.n	8005dd4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc6:	231a      	movs	r3, #26
 8005dc8:	2218      	movs	r2, #24
 8005dca:	4694      	mov	ip, r2
 8005dcc:	44bc      	add	ip, r7
 8005dce:	4463      	add	r3, ip
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005de0:	231a      	movs	r3, #26
 8005de2:	2218      	movs	r2, #24
 8005de4:	4694      	mov	ip, r2
 8005de6:	44bc      	add	ip, r7
 8005de8:	4463      	add	r3, ip
 8005dea:	781b      	ldrb	r3, [r3, #0]
}
 8005dec:	0018      	movs	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b00e      	add	sp, #56	; 0x38
 8005df2:	bdb0      	pop	{r4, r5, r7, pc}
 8005df4:	08006480 	.word	0x08006480
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	003d0900 	.word	0x003d0900
 8005e00:	00f42400 	.word	0x00f42400
 8005e04:	080064a4 	.word	0x080064a4

08005e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2201      	movs	r2, #1
 8005e16:	4013      	ands	r3, r2
 8005e18:	d00b      	beq.n	8005e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4a4a      	ldr	r2, [pc, #296]	; (8005f4c <UART_AdvFeatureConfig+0x144>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	0019      	movs	r1, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	2202      	movs	r2, #2
 8005e38:	4013      	ands	r3, r2
 8005e3a:	d00b      	beq.n	8005e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4a43      	ldr	r2, [pc, #268]	; (8005f50 <UART_AdvFeatureConfig+0x148>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	0019      	movs	r1, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2204      	movs	r2, #4
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d00b      	beq.n	8005e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4a3b      	ldr	r2, [pc, #236]	; (8005f54 <UART_AdvFeatureConfig+0x14c>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	0019      	movs	r1, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d00b      	beq.n	8005e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4a34      	ldr	r2, [pc, #208]	; (8005f58 <UART_AdvFeatureConfig+0x150>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	0019      	movs	r1, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	2210      	movs	r2, #16
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	4a2c      	ldr	r2, [pc, #176]	; (8005f5c <UART_AdvFeatureConfig+0x154>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	0019      	movs	r1, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d00b      	beq.n	8005edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	4a25      	ldr	r2, [pc, #148]	; (8005f60 <UART_AdvFeatureConfig+0x158>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	0019      	movs	r1, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	2240      	movs	r2, #64	; 0x40
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d01d      	beq.n	8005f22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <UART_AdvFeatureConfig+0x15c>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f02:	2380      	movs	r3, #128	; 0x80
 8005f04:	035b      	lsls	r3, r3, #13
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d10b      	bne.n	8005f22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a15      	ldr	r2, [pc, #84]	; (8005f68 <UART_AdvFeatureConfig+0x160>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	0019      	movs	r1, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2280      	movs	r2, #128	; 0x80
 8005f28:	4013      	ands	r3, r2
 8005f2a:	d00b      	beq.n	8005f44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4a0e      	ldr	r2, [pc, #56]	; (8005f6c <UART_AdvFeatureConfig+0x164>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	0019      	movs	r1, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	605a      	str	r2, [r3, #4]
  }
}
 8005f44:	46c0      	nop			; (mov r8, r8)
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	fffdffff 	.word	0xfffdffff
 8005f50:	fffeffff 	.word	0xfffeffff
 8005f54:	fffbffff 	.word	0xfffbffff
 8005f58:	ffff7fff 	.word	0xffff7fff
 8005f5c:	ffffefff 	.word	0xffffefff
 8005f60:	ffffdfff 	.word	0xffffdfff
 8005f64:	ffefffff 	.word	0xffefffff
 8005f68:	ff9fffff 	.word	0xff9fffff
 8005f6c:	fff7ffff 	.word	0xfff7ffff

08005f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2280      	movs	r2, #128	; 0x80
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f80:	f7fd f9c0 	bl	8003304 <HAL_GetTick>
 8005f84:	0003      	movs	r3, r0
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2208      	movs	r2, #8
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b08      	cmp	r3, #8
 8005f94:	d10c      	bne.n	8005fb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2280      	movs	r2, #128	; 0x80
 8005f9a:	0391      	lsls	r1, r2, #14
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <UART_CheckIdleState+0x8c>)
 8005fa0:	9200      	str	r2, [sp, #0]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f000 f82c 	bl	8006000 <UART_WaitOnFlagUntilTimeout>
 8005fa8:	1e03      	subs	r3, r0, #0
 8005faa:	d001      	beq.n	8005fb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e021      	b.n	8005ff4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	4013      	ands	r3, r2
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d10c      	bne.n	8005fd8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2280      	movs	r2, #128	; 0x80
 8005fc2:	03d1      	lsls	r1, r2, #15
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4a0d      	ldr	r2, [pc, #52]	; (8005ffc <UART_CheckIdleState+0x8c>)
 8005fc8:	9200      	str	r2, [sp, #0]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f000 f818 	bl	8006000 <UART_WaitOnFlagUntilTimeout>
 8005fd0:	1e03      	subs	r3, r0, #0
 8005fd2:	d001      	beq.n	8005fd8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e00d      	b.n	8005ff4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2274      	movs	r2, #116	; 0x74
 8005fee:	2100      	movs	r1, #0
 8005ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	b004      	add	sp, #16
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	01ffffff 	.word	0x01ffffff

08006000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	1dfb      	adds	r3, r7, #7
 800600e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006010:	e05e      	b.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	3301      	adds	r3, #1
 8006016:	d05b      	beq.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006018:	f7fd f974 	bl	8003304 <HAL_GetTick>
 800601c:	0002      	movs	r2, r0
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	429a      	cmp	r2, r3
 8006026:	d302      	bcc.n	800602e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d11b      	bne.n	8006066 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	492f      	ldr	r1, [pc, #188]	; (80060f8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800603a:	400a      	ands	r2, r1
 800603c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2101      	movs	r1, #1
 800604a:	438a      	bics	r2, r1
 800604c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2220      	movs	r2, #32
 8006052:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2220      	movs	r2, #32
 8006058:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2274      	movs	r2, #116	; 0x74
 800605e:	2100      	movs	r1, #0
 8006060:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e044      	b.n	80060f0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2204      	movs	r2, #4
 800606e:	4013      	ands	r3, r2
 8006070:	d02e      	beq.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	401a      	ands	r2, r3
 800607e:	2380      	movs	r3, #128	; 0x80
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	429a      	cmp	r2, r3
 8006084:	d124      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2280      	movs	r2, #128	; 0x80
 800608c:	0112      	lsls	r2, r2, #4
 800608e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4917      	ldr	r1, [pc, #92]	; (80060f8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800609c:	400a      	ands	r2, r1
 800609e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2101      	movs	r1, #1
 80060ac:	438a      	bics	r2, r1
 80060ae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2280      	movs	r2, #128	; 0x80
 80060c0:	2120      	movs	r1, #32
 80060c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2274      	movs	r2, #116	; 0x74
 80060c8:	2100      	movs	r1, #0
 80060ca:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e00f      	b.n	80060f0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	425a      	negs	r2, r3
 80060e0:	4153      	adcs	r3, r2
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	001a      	movs	r2, r3
 80060e6:	1dfb      	adds	r3, r7, #7
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d091      	beq.n	8006012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	0018      	movs	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b004      	add	sp, #16
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	fffffe5f 	.word	0xfffffe5f

080060fc <__libc_init_array>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	2600      	movs	r6, #0
 8006100:	4d0c      	ldr	r5, [pc, #48]	; (8006134 <__libc_init_array+0x38>)
 8006102:	4c0d      	ldr	r4, [pc, #52]	; (8006138 <__libc_init_array+0x3c>)
 8006104:	1b64      	subs	r4, r4, r5
 8006106:	10a4      	asrs	r4, r4, #2
 8006108:	42a6      	cmp	r6, r4
 800610a:	d109      	bne.n	8006120 <__libc_init_array+0x24>
 800610c:	2600      	movs	r6, #0
 800610e:	f000 f821 	bl	8006154 <_init>
 8006112:	4d0a      	ldr	r5, [pc, #40]	; (800613c <__libc_init_array+0x40>)
 8006114:	4c0a      	ldr	r4, [pc, #40]	; (8006140 <__libc_init_array+0x44>)
 8006116:	1b64      	subs	r4, r4, r5
 8006118:	10a4      	asrs	r4, r4, #2
 800611a:	42a6      	cmp	r6, r4
 800611c:	d105      	bne.n	800612a <__libc_init_array+0x2e>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	00b3      	lsls	r3, r6, #2
 8006122:	58eb      	ldr	r3, [r5, r3]
 8006124:	4798      	blx	r3
 8006126:	3601      	adds	r6, #1
 8006128:	e7ee      	b.n	8006108 <__libc_init_array+0xc>
 800612a:	00b3      	lsls	r3, r6, #2
 800612c:	58eb      	ldr	r3, [r5, r3]
 800612e:	4798      	blx	r3
 8006130:	3601      	adds	r6, #1
 8006132:	e7f2      	b.n	800611a <__libc_init_array+0x1e>
 8006134:	080064d0 	.word	0x080064d0
 8006138:	080064d0 	.word	0x080064d0
 800613c:	080064d0 	.word	0x080064d0
 8006140:	080064d4 	.word	0x080064d4

08006144 <memset>:
 8006144:	0003      	movs	r3, r0
 8006146:	1882      	adds	r2, r0, r2
 8006148:	4293      	cmp	r3, r2
 800614a:	d100      	bne.n	800614e <memset+0xa>
 800614c:	4770      	bx	lr
 800614e:	7019      	strb	r1, [r3, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	e7f9      	b.n	8006148 <memset+0x4>

08006154 <_init>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615a:	bc08      	pop	{r3}
 800615c:	469e      	mov	lr, r3
 800615e:	4770      	bx	lr

08006160 <_fini>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006166:	bc08      	pop	{r3}
 8006168:	469e      	mov	lr, r3
 800616a:	4770      	bx	lr
