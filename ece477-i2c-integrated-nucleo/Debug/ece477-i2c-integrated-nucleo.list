
ece477-i2c-integrated-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006828  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080068e8  080068e8  000168e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd0  08006cd0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cd8  08006cd8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000084  08006d64  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08006d64  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128f2  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d57  00000000  00000000  0003299e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  000356f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  000366d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f8a  00000000  00000000  00037560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b20  00000000  00000000  0004d4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000814bf  00000000  00000000  0006100a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e24c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bcc  00000000  00000000  000e251c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080068d0 	.word	0x080068d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080068d0 	.word	0x080068d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f001 fe24 	bl	8001f1c <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f001 fe1f 	bl	8001f1c <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_fadd>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	4646      	mov	r6, r8
 800044c:	46d6      	mov	lr, sl
 800044e:	464f      	mov	r7, r9
 8000450:	024d      	lsls	r5, r1, #9
 8000452:	0242      	lsls	r2, r0, #9
 8000454:	b5c0      	push	{r6, r7, lr}
 8000456:	0a52      	lsrs	r2, r2, #9
 8000458:	0a6e      	lsrs	r6, r5, #9
 800045a:	0047      	lsls	r7, r0, #1
 800045c:	46b0      	mov	r8, r6
 800045e:	0e3f      	lsrs	r7, r7, #24
 8000460:	004e      	lsls	r6, r1, #1
 8000462:	0fc4      	lsrs	r4, r0, #31
 8000464:	00d0      	lsls	r0, r2, #3
 8000466:	4694      	mov	ip, r2
 8000468:	003b      	movs	r3, r7
 800046a:	4682      	mov	sl, r0
 800046c:	0e36      	lsrs	r6, r6, #24
 800046e:	0fc9      	lsrs	r1, r1, #31
 8000470:	09ad      	lsrs	r5, r5, #6
 8000472:	428c      	cmp	r4, r1
 8000474:	d06d      	beq.n	8000552 <__aeabi_fadd+0x10a>
 8000476:	1bb8      	subs	r0, r7, r6
 8000478:	4681      	mov	r9, r0
 800047a:	2800      	cmp	r0, #0
 800047c:	dd4d      	ble.n	800051a <__aeabi_fadd+0xd2>
 800047e:	2e00      	cmp	r6, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_fadd+0x3c>
 8000482:	e088      	b.n	8000596 <__aeabi_fadd+0x14e>
 8000484:	2fff      	cmp	r7, #255	; 0xff
 8000486:	d05a      	beq.n	800053e <__aeabi_fadd+0xf6>
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	04db      	lsls	r3, r3, #19
 800048c:	431d      	orrs	r5, r3
 800048e:	464b      	mov	r3, r9
 8000490:	2201      	movs	r2, #1
 8000492:	2b1b      	cmp	r3, #27
 8000494:	dc0a      	bgt.n	80004ac <__aeabi_fadd+0x64>
 8000496:	002b      	movs	r3, r5
 8000498:	464a      	mov	r2, r9
 800049a:	4649      	mov	r1, r9
 800049c:	40d3      	lsrs	r3, r2
 800049e:	2220      	movs	r2, #32
 80004a0:	1a52      	subs	r2, r2, r1
 80004a2:	4095      	lsls	r5, r2
 80004a4:	002a      	movs	r2, r5
 80004a6:	1e55      	subs	r5, r2, #1
 80004a8:	41aa      	sbcs	r2, r5
 80004aa:	431a      	orrs	r2, r3
 80004ac:	4653      	mov	r3, sl
 80004ae:	1a9a      	subs	r2, r3, r2
 80004b0:	0153      	lsls	r3, r2, #5
 80004b2:	d400      	bmi.n	80004b6 <__aeabi_fadd+0x6e>
 80004b4:	e0b9      	b.n	800062a <__aeabi_fadd+0x1e2>
 80004b6:	0192      	lsls	r2, r2, #6
 80004b8:	0996      	lsrs	r6, r2, #6
 80004ba:	0030      	movs	r0, r6
 80004bc:	f001 fd10 	bl	8001ee0 <__clzsi2>
 80004c0:	3805      	subs	r0, #5
 80004c2:	4086      	lsls	r6, r0
 80004c4:	4287      	cmp	r7, r0
 80004c6:	dd00      	ble.n	80004ca <__aeabi_fadd+0x82>
 80004c8:	e0d4      	b.n	8000674 <__aeabi_fadd+0x22c>
 80004ca:	0033      	movs	r3, r6
 80004cc:	1bc7      	subs	r7, r0, r7
 80004ce:	2020      	movs	r0, #32
 80004d0:	3701      	adds	r7, #1
 80004d2:	40fb      	lsrs	r3, r7
 80004d4:	1bc7      	subs	r7, r0, r7
 80004d6:	40be      	lsls	r6, r7
 80004d8:	0032      	movs	r2, r6
 80004da:	1e56      	subs	r6, r2, #1
 80004dc:	41b2      	sbcs	r2, r6
 80004de:	2700      	movs	r7, #0
 80004e0:	431a      	orrs	r2, r3
 80004e2:	0753      	lsls	r3, r2, #29
 80004e4:	d004      	beq.n	80004f0 <__aeabi_fadd+0xa8>
 80004e6:	230f      	movs	r3, #15
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d000      	beq.n	80004f0 <__aeabi_fadd+0xa8>
 80004ee:	3204      	adds	r2, #4
 80004f0:	0153      	lsls	r3, r2, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0xae>
 80004f4:	e09c      	b.n	8000630 <__aeabi_fadd+0x1e8>
 80004f6:	1c7b      	adds	r3, r7, #1
 80004f8:	2ffe      	cmp	r7, #254	; 0xfe
 80004fa:	d100      	bne.n	80004fe <__aeabi_fadd+0xb6>
 80004fc:	e09a      	b.n	8000634 <__aeabi_fadd+0x1ec>
 80004fe:	0192      	lsls	r2, r2, #6
 8000500:	0a52      	lsrs	r2, r2, #9
 8000502:	4694      	mov	ip, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	05d8      	lsls	r0, r3, #23
 8000508:	4663      	mov	r3, ip
 800050a:	07e4      	lsls	r4, r4, #31
 800050c:	4318      	orrs	r0, r3
 800050e:	4320      	orrs	r0, r4
 8000510:	bce0      	pop	{r5, r6, r7}
 8000512:	46ba      	mov	sl, r7
 8000514:	46b1      	mov	r9, r6
 8000516:	46a8      	mov	r8, r5
 8000518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051a:	2800      	cmp	r0, #0
 800051c:	d049      	beq.n	80005b2 <__aeabi_fadd+0x16a>
 800051e:	1bf3      	subs	r3, r6, r7
 8000520:	2f00      	cmp	r7, #0
 8000522:	d000      	beq.n	8000526 <__aeabi_fadd+0xde>
 8000524:	e0b6      	b.n	8000694 <__aeabi_fadd+0x24c>
 8000526:	4652      	mov	r2, sl
 8000528:	2a00      	cmp	r2, #0
 800052a:	d060      	beq.n	80005ee <__aeabi_fadd+0x1a6>
 800052c:	3b01      	subs	r3, #1
 800052e:	2b00      	cmp	r3, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0xec>
 8000532:	e0fc      	b.n	800072e <__aeabi_fadd+0x2e6>
 8000534:	2eff      	cmp	r6, #255	; 0xff
 8000536:	d000      	beq.n	800053a <__aeabi_fadd+0xf2>
 8000538:	e0b4      	b.n	80006a4 <__aeabi_fadd+0x25c>
 800053a:	000c      	movs	r4, r1
 800053c:	4642      	mov	r2, r8
 800053e:	2a00      	cmp	r2, #0
 8000540:	d078      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 8000542:	2080      	movs	r0, #128	; 0x80
 8000544:	03c0      	lsls	r0, r0, #15
 8000546:	4310      	orrs	r0, r2
 8000548:	0242      	lsls	r2, r0, #9
 800054a:	0a53      	lsrs	r3, r2, #9
 800054c:	469c      	mov	ip, r3
 800054e:	23ff      	movs	r3, #255	; 0xff
 8000550:	e7d9      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000552:	1bb9      	subs	r1, r7, r6
 8000554:	2900      	cmp	r1, #0
 8000556:	dd71      	ble.n	800063c <__aeabi_fadd+0x1f4>
 8000558:	2e00      	cmp	r6, #0
 800055a:	d03f      	beq.n	80005dc <__aeabi_fadd+0x194>
 800055c:	2fff      	cmp	r7, #255	; 0xff
 800055e:	d0ee      	beq.n	800053e <__aeabi_fadd+0xf6>
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	04db      	lsls	r3, r3, #19
 8000564:	431d      	orrs	r5, r3
 8000566:	2201      	movs	r2, #1
 8000568:	291b      	cmp	r1, #27
 800056a:	dc07      	bgt.n	800057c <__aeabi_fadd+0x134>
 800056c:	002a      	movs	r2, r5
 800056e:	2320      	movs	r3, #32
 8000570:	40ca      	lsrs	r2, r1
 8000572:	1a59      	subs	r1, r3, r1
 8000574:	408d      	lsls	r5, r1
 8000576:	1e6b      	subs	r3, r5, #1
 8000578:	419d      	sbcs	r5, r3
 800057a:	432a      	orrs	r2, r5
 800057c:	4452      	add	r2, sl
 800057e:	0153      	lsls	r3, r2, #5
 8000580:	d553      	bpl.n	800062a <__aeabi_fadd+0x1e2>
 8000582:	3701      	adds	r7, #1
 8000584:	2fff      	cmp	r7, #255	; 0xff
 8000586:	d055      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 8000588:	2301      	movs	r3, #1
 800058a:	497b      	ldr	r1, [pc, #492]	; (8000778 <__aeabi_fadd+0x330>)
 800058c:	4013      	ands	r3, r2
 800058e:	0852      	lsrs	r2, r2, #1
 8000590:	400a      	ands	r2, r1
 8000592:	431a      	orrs	r2, r3
 8000594:	e7a5      	b.n	80004e2 <__aeabi_fadd+0x9a>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d02c      	beq.n	80005f4 <__aeabi_fadd+0x1ac>
 800059a:	2301      	movs	r3, #1
 800059c:	425b      	negs	r3, r3
 800059e:	469c      	mov	ip, r3
 80005a0:	44e1      	add	r9, ip
 80005a2:	464b      	mov	r3, r9
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x162>
 80005a8:	e0ad      	b.n	8000706 <__aeabi_fadd+0x2be>
 80005aa:	2fff      	cmp	r7, #255	; 0xff
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fadd+0x168>
 80005ae:	e76e      	b.n	800048e <__aeabi_fadd+0x46>
 80005b0:	e7c5      	b.n	800053e <__aeabi_fadd+0xf6>
 80005b2:	20fe      	movs	r0, #254	; 0xfe
 80005b4:	1c7e      	adds	r6, r7, #1
 80005b6:	4230      	tst	r0, r6
 80005b8:	d160      	bne.n	800067c <__aeabi_fadd+0x234>
 80005ba:	2f00      	cmp	r7, #0
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fadd+0x178>
 80005be:	e093      	b.n	80006e8 <__aeabi_fadd+0x2a0>
 80005c0:	4652      	mov	r2, sl
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x180>
 80005c6:	e0b6      	b.n	8000736 <__aeabi_fadd+0x2ee>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d09c      	beq.n	8000506 <__aeabi_fadd+0xbe>
 80005cc:	1b52      	subs	r2, r2, r5
 80005ce:	0150      	lsls	r0, r2, #5
 80005d0:	d400      	bmi.n	80005d4 <__aeabi_fadd+0x18c>
 80005d2:	e0c3      	b.n	800075c <__aeabi_fadd+0x314>
 80005d4:	4653      	mov	r3, sl
 80005d6:	000c      	movs	r4, r1
 80005d8:	1aea      	subs	r2, r5, r3
 80005da:	e782      	b.n	80004e2 <__aeabi_fadd+0x9a>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d009      	beq.n	80005f4 <__aeabi_fadd+0x1ac>
 80005e0:	3901      	subs	r1, #1
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x1a0>
 80005e6:	e08b      	b.n	8000700 <__aeabi_fadd+0x2b8>
 80005e8:	2fff      	cmp	r7, #255	; 0xff
 80005ea:	d1bc      	bne.n	8000566 <__aeabi_fadd+0x11e>
 80005ec:	e7a7      	b.n	800053e <__aeabi_fadd+0xf6>
 80005ee:	000c      	movs	r4, r1
 80005f0:	4642      	mov	r2, r8
 80005f2:	0037      	movs	r7, r6
 80005f4:	2fff      	cmp	r7, #255	; 0xff
 80005f6:	d0a2      	beq.n	800053e <__aeabi_fadd+0xf6>
 80005f8:	0252      	lsls	r2, r2, #9
 80005fa:	0a53      	lsrs	r3, r2, #9
 80005fc:	469c      	mov	ip, r3
 80005fe:	b2fb      	uxtb	r3, r7
 8000600:	e781      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000602:	21fe      	movs	r1, #254	; 0xfe
 8000604:	3701      	adds	r7, #1
 8000606:	4239      	tst	r1, r7
 8000608:	d165      	bne.n	80006d6 <__aeabi_fadd+0x28e>
 800060a:	2b00      	cmp	r3, #0
 800060c:	d17e      	bne.n	800070c <__aeabi_fadd+0x2c4>
 800060e:	2800      	cmp	r0, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_fadd+0x1cc>
 8000612:	e0aa      	b.n	800076a <__aeabi_fadd+0x322>
 8000614:	2d00      	cmp	r5, #0
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x1d2>
 8000618:	e775      	b.n	8000506 <__aeabi_fadd+0xbe>
 800061a:	002a      	movs	r2, r5
 800061c:	4452      	add	r2, sl
 800061e:	2700      	movs	r7, #0
 8000620:	0153      	lsls	r3, r2, #5
 8000622:	d502      	bpl.n	800062a <__aeabi_fadd+0x1e2>
 8000624:	4b55      	ldr	r3, [pc, #340]	; (800077c <__aeabi_fadd+0x334>)
 8000626:	3701      	adds	r7, #1
 8000628:	401a      	ands	r2, r3
 800062a:	0753      	lsls	r3, r2, #29
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x1e8>
 800062e:	e75a      	b.n	80004e6 <__aeabi_fadd+0x9e>
 8000630:	08d2      	lsrs	r2, r2, #3
 8000632:	e7df      	b.n	80005f4 <__aeabi_fadd+0x1ac>
 8000634:	2200      	movs	r2, #0
 8000636:	23ff      	movs	r3, #255	; 0xff
 8000638:	4694      	mov	ip, r2
 800063a:	e764      	b.n	8000506 <__aeabi_fadd+0xbe>
 800063c:	2900      	cmp	r1, #0
 800063e:	d0e0      	beq.n	8000602 <__aeabi_fadd+0x1ba>
 8000640:	1bf3      	subs	r3, r6, r7
 8000642:	2f00      	cmp	r7, #0
 8000644:	d03e      	beq.n	80006c4 <__aeabi_fadd+0x27c>
 8000646:	2eff      	cmp	r6, #255	; 0xff
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x204>
 800064a:	e777      	b.n	800053c <__aeabi_fadd+0xf4>
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0001      	movs	r1, r0
 8000650:	04d2      	lsls	r2, r2, #19
 8000652:	4311      	orrs	r1, r2
 8000654:	468a      	mov	sl, r1
 8000656:	2201      	movs	r2, #1
 8000658:	2b1b      	cmp	r3, #27
 800065a:	dc08      	bgt.n	800066e <__aeabi_fadd+0x226>
 800065c:	4652      	mov	r2, sl
 800065e:	2120      	movs	r1, #32
 8000660:	4650      	mov	r0, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	1acb      	subs	r3, r1, r3
 8000666:	4098      	lsls	r0, r3
 8000668:	1e43      	subs	r3, r0, #1
 800066a:	4198      	sbcs	r0, r3
 800066c:	4302      	orrs	r2, r0
 800066e:	0037      	movs	r7, r6
 8000670:	1952      	adds	r2, r2, r5
 8000672:	e784      	b.n	800057e <__aeabi_fadd+0x136>
 8000674:	4a41      	ldr	r2, [pc, #260]	; (800077c <__aeabi_fadd+0x334>)
 8000676:	1a3f      	subs	r7, r7, r0
 8000678:	4032      	ands	r2, r6
 800067a:	e732      	b.n	80004e2 <__aeabi_fadd+0x9a>
 800067c:	4653      	mov	r3, sl
 800067e:	1b5e      	subs	r6, r3, r5
 8000680:	0173      	lsls	r3, r6, #5
 8000682:	d42d      	bmi.n	80006e0 <__aeabi_fadd+0x298>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d000      	beq.n	800068a <__aeabi_fadd+0x242>
 8000688:	e717      	b.n	80004ba <__aeabi_fadd+0x72>
 800068a:	2200      	movs	r2, #0
 800068c:	2400      	movs	r4, #0
 800068e:	2300      	movs	r3, #0
 8000690:	4694      	mov	ip, r2
 8000692:	e738      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000694:	2eff      	cmp	r6, #255	; 0xff
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x252>
 8000698:	e74f      	b.n	800053a <__aeabi_fadd+0xf2>
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	4650      	mov	r0, sl
 800069e:	04d2      	lsls	r2, r2, #19
 80006a0:	4310      	orrs	r0, r2
 80006a2:	4682      	mov	sl, r0
 80006a4:	2201      	movs	r2, #1
 80006a6:	2b1b      	cmp	r3, #27
 80006a8:	dc08      	bgt.n	80006bc <__aeabi_fadd+0x274>
 80006aa:	4652      	mov	r2, sl
 80006ac:	2420      	movs	r4, #32
 80006ae:	4650      	mov	r0, sl
 80006b0:	40da      	lsrs	r2, r3
 80006b2:	1ae3      	subs	r3, r4, r3
 80006b4:	4098      	lsls	r0, r3
 80006b6:	1e43      	subs	r3, r0, #1
 80006b8:	4198      	sbcs	r0, r3
 80006ba:	4302      	orrs	r2, r0
 80006bc:	000c      	movs	r4, r1
 80006be:	0037      	movs	r7, r6
 80006c0:	1aaa      	subs	r2, r5, r2
 80006c2:	e6f5      	b.n	80004b0 <__aeabi_fadd+0x68>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d093      	beq.n	80005f0 <__aeabi_fadd+0x1a8>
 80006c8:	3b01      	subs	r3, #1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d04f      	beq.n	800076e <__aeabi_fadd+0x326>
 80006ce:	2eff      	cmp	r6, #255	; 0xff
 80006d0:	d1c1      	bne.n	8000656 <__aeabi_fadd+0x20e>
 80006d2:	4642      	mov	r2, r8
 80006d4:	e733      	b.n	800053e <__aeabi_fadd+0xf6>
 80006d6:	2fff      	cmp	r7, #255	; 0xff
 80006d8:	d0ac      	beq.n	8000634 <__aeabi_fadd+0x1ec>
 80006da:	4455      	add	r5, sl
 80006dc:	086a      	lsrs	r2, r5, #1
 80006de:	e7a4      	b.n	800062a <__aeabi_fadd+0x1e2>
 80006e0:	4653      	mov	r3, sl
 80006e2:	000c      	movs	r4, r1
 80006e4:	1aee      	subs	r6, r5, r3
 80006e6:	e6e8      	b.n	80004ba <__aeabi_fadd+0x72>
 80006e8:	4653      	mov	r3, sl
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d128      	bne.n	8000740 <__aeabi_fadd+0x2f8>
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d000      	beq.n	80006f4 <__aeabi_fadd+0x2ac>
 80006f2:	e722      	b.n	800053a <__aeabi_fadd+0xf2>
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	03db      	lsls	r3, r3, #15
 80006f8:	469c      	mov	ip, r3
 80006fa:	2400      	movs	r4, #0
 80006fc:	23ff      	movs	r3, #255	; 0xff
 80006fe:	e702      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000700:	002a      	movs	r2, r5
 8000702:	4452      	add	r2, sl
 8000704:	e73b      	b.n	800057e <__aeabi_fadd+0x136>
 8000706:	4653      	mov	r3, sl
 8000708:	1b5a      	subs	r2, r3, r5
 800070a:	e6d1      	b.n	80004b0 <__aeabi_fadd+0x68>
 800070c:	2800      	cmp	r0, #0
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x2ca>
 8000710:	e714      	b.n	800053c <__aeabi_fadd+0xf4>
 8000712:	2d00      	cmp	r5, #0
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x2d0>
 8000716:	e712      	b.n	800053e <__aeabi_fadd+0xf6>
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	03db      	lsls	r3, r3, #15
 800071c:	421a      	tst	r2, r3
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x2da>
 8000720:	e70d      	b.n	800053e <__aeabi_fadd+0xf6>
 8000722:	4641      	mov	r1, r8
 8000724:	4219      	tst	r1, r3
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x2e2>
 8000728:	e709      	b.n	800053e <__aeabi_fadd+0xf6>
 800072a:	4642      	mov	r2, r8
 800072c:	e707      	b.n	800053e <__aeabi_fadd+0xf6>
 800072e:	000c      	movs	r4, r1
 8000730:	0037      	movs	r7, r6
 8000732:	1aaa      	subs	r2, r5, r2
 8000734:	e6bc      	b.n	80004b0 <__aeabi_fadd+0x68>
 8000736:	2d00      	cmp	r5, #0
 8000738:	d013      	beq.n	8000762 <__aeabi_fadd+0x31a>
 800073a:	000c      	movs	r4, r1
 800073c:	46c4      	mov	ip, r8
 800073e:	e6e2      	b.n	8000506 <__aeabi_fadd+0xbe>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x2fe>
 8000744:	e6fb      	b.n	800053e <__aeabi_fadd+0xf6>
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	03db      	lsls	r3, r3, #15
 800074a:	421a      	tst	r2, r3
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x308>
 800074e:	e6f6      	b.n	800053e <__aeabi_fadd+0xf6>
 8000750:	4640      	mov	r0, r8
 8000752:	4218      	tst	r0, r3
 8000754:	d000      	beq.n	8000758 <__aeabi_fadd+0x310>
 8000756:	e6f2      	b.n	800053e <__aeabi_fadd+0xf6>
 8000758:	000c      	movs	r4, r1
 800075a:	e6ef      	b.n	800053c <__aeabi_fadd+0xf4>
 800075c:	2a00      	cmp	r2, #0
 800075e:	d000      	beq.n	8000762 <__aeabi_fadd+0x31a>
 8000760:	e763      	b.n	800062a <__aeabi_fadd+0x1e2>
 8000762:	2200      	movs	r2, #0
 8000764:	2400      	movs	r4, #0
 8000766:	4694      	mov	ip, r2
 8000768:	e6cd      	b.n	8000506 <__aeabi_fadd+0xbe>
 800076a:	46c4      	mov	ip, r8
 800076c:	e6cb      	b.n	8000506 <__aeabi_fadd+0xbe>
 800076e:	002a      	movs	r2, r5
 8000770:	0037      	movs	r7, r6
 8000772:	4452      	add	r2, sl
 8000774:	e703      	b.n	800057e <__aeabi_fadd+0x136>
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	7dffffff 	.word	0x7dffffff
 800077c:	fbffffff 	.word	0xfbffffff

08000780 <__aeabi_fdiv>:
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	464f      	mov	r7, r9
 8000784:	4646      	mov	r6, r8
 8000786:	46d6      	mov	lr, sl
 8000788:	0245      	lsls	r5, r0, #9
 800078a:	b5c0      	push	{r6, r7, lr}
 800078c:	0047      	lsls	r7, r0, #1
 800078e:	1c0c      	adds	r4, r1, #0
 8000790:	0a6d      	lsrs	r5, r5, #9
 8000792:	0e3f      	lsrs	r7, r7, #24
 8000794:	0fc6      	lsrs	r6, r0, #31
 8000796:	2f00      	cmp	r7, #0
 8000798:	d066      	beq.n	8000868 <__aeabi_fdiv+0xe8>
 800079a:	2fff      	cmp	r7, #255	; 0xff
 800079c:	d06c      	beq.n	8000878 <__aeabi_fdiv+0xf8>
 800079e:	2300      	movs	r3, #0
 80007a0:	00ea      	lsls	r2, r5, #3
 80007a2:	2580      	movs	r5, #128	; 0x80
 80007a4:	4699      	mov	r9, r3
 80007a6:	469a      	mov	sl, r3
 80007a8:	04ed      	lsls	r5, r5, #19
 80007aa:	4315      	orrs	r5, r2
 80007ac:	3f7f      	subs	r7, #127	; 0x7f
 80007ae:	0260      	lsls	r0, r4, #9
 80007b0:	0061      	lsls	r1, r4, #1
 80007b2:	0a43      	lsrs	r3, r0, #9
 80007b4:	4698      	mov	r8, r3
 80007b6:	0e09      	lsrs	r1, r1, #24
 80007b8:	0fe4      	lsrs	r4, r4, #31
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d048      	beq.n	8000850 <__aeabi_fdiv+0xd0>
 80007be:	29ff      	cmp	r1, #255	; 0xff
 80007c0:	d010      	beq.n	80007e4 <__aeabi_fdiv+0x64>
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	00d8      	lsls	r0, r3, #3
 80007c6:	04d2      	lsls	r2, r2, #19
 80007c8:	4302      	orrs	r2, r0
 80007ca:	4690      	mov	r8, r2
 80007cc:	2000      	movs	r0, #0
 80007ce:	397f      	subs	r1, #127	; 0x7f
 80007d0:	464a      	mov	r2, r9
 80007d2:	0033      	movs	r3, r6
 80007d4:	1a7f      	subs	r7, r7, r1
 80007d6:	4302      	orrs	r2, r0
 80007d8:	496c      	ldr	r1, [pc, #432]	; (800098c <__aeabi_fdiv+0x20c>)
 80007da:	0092      	lsls	r2, r2, #2
 80007dc:	588a      	ldr	r2, [r1, r2]
 80007de:	4063      	eors	r3, r4
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4697      	mov	pc, r2
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d16d      	bne.n	80008c4 <__aeabi_fdiv+0x144>
 80007e8:	2002      	movs	r0, #2
 80007ea:	3fff      	subs	r7, #255	; 0xff
 80007ec:	e033      	b.n	8000856 <__aeabi_fdiv+0xd6>
 80007ee:	2300      	movs	r3, #0
 80007f0:	4698      	mov	r8, r3
 80007f2:	0026      	movs	r6, r4
 80007f4:	4645      	mov	r5, r8
 80007f6:	4682      	mov	sl, r0
 80007f8:	4653      	mov	r3, sl
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d100      	bne.n	8000800 <__aeabi_fdiv+0x80>
 80007fe:	e07f      	b.n	8000900 <__aeabi_fdiv+0x180>
 8000800:	2b03      	cmp	r3, #3
 8000802:	d100      	bne.n	8000806 <__aeabi_fdiv+0x86>
 8000804:	e094      	b.n	8000930 <__aeabi_fdiv+0x1b0>
 8000806:	2b01      	cmp	r3, #1
 8000808:	d017      	beq.n	800083a <__aeabi_fdiv+0xba>
 800080a:	0038      	movs	r0, r7
 800080c:	307f      	adds	r0, #127	; 0x7f
 800080e:	2800      	cmp	r0, #0
 8000810:	dd5f      	ble.n	80008d2 <__aeabi_fdiv+0x152>
 8000812:	076b      	lsls	r3, r5, #29
 8000814:	d004      	beq.n	8000820 <__aeabi_fdiv+0xa0>
 8000816:	230f      	movs	r3, #15
 8000818:	402b      	ands	r3, r5
 800081a:	2b04      	cmp	r3, #4
 800081c:	d000      	beq.n	8000820 <__aeabi_fdiv+0xa0>
 800081e:	3504      	adds	r5, #4
 8000820:	012b      	lsls	r3, r5, #4
 8000822:	d503      	bpl.n	800082c <__aeabi_fdiv+0xac>
 8000824:	0038      	movs	r0, r7
 8000826:	4b5a      	ldr	r3, [pc, #360]	; (8000990 <__aeabi_fdiv+0x210>)
 8000828:	3080      	adds	r0, #128	; 0x80
 800082a:	401d      	ands	r5, r3
 800082c:	28fe      	cmp	r0, #254	; 0xfe
 800082e:	dc67      	bgt.n	8000900 <__aeabi_fdiv+0x180>
 8000830:	01ad      	lsls	r5, r5, #6
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	b2c0      	uxtb	r0, r0
 8000836:	e002      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000838:	001e      	movs	r6, r3
 800083a:	2000      	movs	r0, #0
 800083c:	2500      	movs	r5, #0
 800083e:	05c0      	lsls	r0, r0, #23
 8000840:	4328      	orrs	r0, r5
 8000842:	07f6      	lsls	r6, r6, #31
 8000844:	4330      	orrs	r0, r6
 8000846:	bce0      	pop	{r5, r6, r7}
 8000848:	46ba      	mov	sl, r7
 800084a:	46b1      	mov	r9, r6
 800084c:	46a8      	mov	r8, r5
 800084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000850:	2b00      	cmp	r3, #0
 8000852:	d12b      	bne.n	80008ac <__aeabi_fdiv+0x12c>
 8000854:	2001      	movs	r0, #1
 8000856:	464a      	mov	r2, r9
 8000858:	0033      	movs	r3, r6
 800085a:	494e      	ldr	r1, [pc, #312]	; (8000994 <__aeabi_fdiv+0x214>)
 800085c:	4302      	orrs	r2, r0
 800085e:	0092      	lsls	r2, r2, #2
 8000860:	588a      	ldr	r2, [r1, r2]
 8000862:	4063      	eors	r3, r4
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4697      	mov	pc, r2
 8000868:	2d00      	cmp	r5, #0
 800086a:	d113      	bne.n	8000894 <__aeabi_fdiv+0x114>
 800086c:	2304      	movs	r3, #4
 800086e:	4699      	mov	r9, r3
 8000870:	3b03      	subs	r3, #3
 8000872:	2700      	movs	r7, #0
 8000874:	469a      	mov	sl, r3
 8000876:	e79a      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000878:	2d00      	cmp	r5, #0
 800087a:	d105      	bne.n	8000888 <__aeabi_fdiv+0x108>
 800087c:	2308      	movs	r3, #8
 800087e:	4699      	mov	r9, r3
 8000880:	3b06      	subs	r3, #6
 8000882:	27ff      	movs	r7, #255	; 0xff
 8000884:	469a      	mov	sl, r3
 8000886:	e792      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000888:	230c      	movs	r3, #12
 800088a:	4699      	mov	r9, r3
 800088c:	3b09      	subs	r3, #9
 800088e:	27ff      	movs	r7, #255	; 0xff
 8000890:	469a      	mov	sl, r3
 8000892:	e78c      	b.n	80007ae <__aeabi_fdiv+0x2e>
 8000894:	0028      	movs	r0, r5
 8000896:	f001 fb23 	bl	8001ee0 <__clzsi2>
 800089a:	2776      	movs	r7, #118	; 0x76
 800089c:	1f43      	subs	r3, r0, #5
 800089e:	409d      	lsls	r5, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	427f      	negs	r7, r7
 80008a4:	4699      	mov	r9, r3
 80008a6:	469a      	mov	sl, r3
 80008a8:	1a3f      	subs	r7, r7, r0
 80008aa:	e780      	b.n	80007ae <__aeabi_fdiv+0x2e>
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fb17 	bl	8001ee0 <__clzsi2>
 80008b2:	4642      	mov	r2, r8
 80008b4:	1f43      	subs	r3, r0, #5
 80008b6:	2176      	movs	r1, #118	; 0x76
 80008b8:	409a      	lsls	r2, r3
 80008ba:	4249      	negs	r1, r1
 80008bc:	1a09      	subs	r1, r1, r0
 80008be:	4690      	mov	r8, r2
 80008c0:	2000      	movs	r0, #0
 80008c2:	e785      	b.n	80007d0 <__aeabi_fdiv+0x50>
 80008c4:	21ff      	movs	r1, #255	; 0xff
 80008c6:	2003      	movs	r0, #3
 80008c8:	e782      	b.n	80007d0 <__aeabi_fdiv+0x50>
 80008ca:	001e      	movs	r6, r3
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	2500      	movs	r5, #0
 80008d0:	e7b5      	b.n	800083e <__aeabi_fdiv+0xbe>
 80008d2:	2301      	movs	r3, #1
 80008d4:	1a1b      	subs	r3, r3, r0
 80008d6:	2b1b      	cmp	r3, #27
 80008d8:	dcaf      	bgt.n	800083a <__aeabi_fdiv+0xba>
 80008da:	379e      	adds	r7, #158	; 0x9e
 80008dc:	0029      	movs	r1, r5
 80008de:	40bd      	lsls	r5, r7
 80008e0:	40d9      	lsrs	r1, r3
 80008e2:	1e6a      	subs	r2, r5, #1
 80008e4:	4195      	sbcs	r5, r2
 80008e6:	430d      	orrs	r5, r1
 80008e8:	076b      	lsls	r3, r5, #29
 80008ea:	d004      	beq.n	80008f6 <__aeabi_fdiv+0x176>
 80008ec:	230f      	movs	r3, #15
 80008ee:	402b      	ands	r3, r5
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fdiv+0x176>
 80008f4:	3504      	adds	r5, #4
 80008f6:	016b      	lsls	r3, r5, #5
 80008f8:	d544      	bpl.n	8000984 <__aeabi_fdiv+0x204>
 80008fa:	2001      	movs	r0, #1
 80008fc:	2500      	movs	r5, #0
 80008fe:	e79e      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	2500      	movs	r5, #0
 8000904:	e79b      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000906:	2580      	movs	r5, #128	; 0x80
 8000908:	2600      	movs	r6, #0
 800090a:	20ff      	movs	r0, #255	; 0xff
 800090c:	03ed      	lsls	r5, r5, #15
 800090e:	e796      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000910:	2300      	movs	r3, #0
 8000912:	4698      	mov	r8, r3
 8000914:	2080      	movs	r0, #128	; 0x80
 8000916:	03c0      	lsls	r0, r0, #15
 8000918:	4205      	tst	r5, r0
 800091a:	d009      	beq.n	8000930 <__aeabi_fdiv+0x1b0>
 800091c:	4643      	mov	r3, r8
 800091e:	4203      	tst	r3, r0
 8000920:	d106      	bne.n	8000930 <__aeabi_fdiv+0x1b0>
 8000922:	4645      	mov	r5, r8
 8000924:	4305      	orrs	r5, r0
 8000926:	026d      	lsls	r5, r5, #9
 8000928:	0026      	movs	r6, r4
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	e786      	b.n	800083e <__aeabi_fdiv+0xbe>
 8000930:	2080      	movs	r0, #128	; 0x80
 8000932:	03c0      	lsls	r0, r0, #15
 8000934:	4305      	orrs	r5, r0
 8000936:	026d      	lsls	r5, r5, #9
 8000938:	20ff      	movs	r0, #255	; 0xff
 800093a:	0a6d      	lsrs	r5, r5, #9
 800093c:	e77f      	b.n	800083e <__aeabi_fdiv+0xbe>
 800093e:	4641      	mov	r1, r8
 8000940:	016a      	lsls	r2, r5, #5
 8000942:	0148      	lsls	r0, r1, #5
 8000944:	4282      	cmp	r2, r0
 8000946:	d219      	bcs.n	800097c <__aeabi_fdiv+0x1fc>
 8000948:	211b      	movs	r1, #27
 800094a:	2500      	movs	r5, #0
 800094c:	3f01      	subs	r7, #1
 800094e:	2601      	movs	r6, #1
 8000950:	0014      	movs	r4, r2
 8000952:	006d      	lsls	r5, r5, #1
 8000954:	0052      	lsls	r2, r2, #1
 8000956:	2c00      	cmp	r4, #0
 8000958:	db01      	blt.n	800095e <__aeabi_fdiv+0x1de>
 800095a:	4290      	cmp	r0, r2
 800095c:	d801      	bhi.n	8000962 <__aeabi_fdiv+0x1e2>
 800095e:	1a12      	subs	r2, r2, r0
 8000960:	4335      	orrs	r5, r6
 8000962:	3901      	subs	r1, #1
 8000964:	2900      	cmp	r1, #0
 8000966:	d1f3      	bne.n	8000950 <__aeabi_fdiv+0x1d0>
 8000968:	1e50      	subs	r0, r2, #1
 800096a:	4182      	sbcs	r2, r0
 800096c:	0038      	movs	r0, r7
 800096e:	307f      	adds	r0, #127	; 0x7f
 8000970:	001e      	movs	r6, r3
 8000972:	4315      	orrs	r5, r2
 8000974:	2800      	cmp	r0, #0
 8000976:	dd00      	ble.n	800097a <__aeabi_fdiv+0x1fa>
 8000978:	e74b      	b.n	8000812 <__aeabi_fdiv+0x92>
 800097a:	e7aa      	b.n	80008d2 <__aeabi_fdiv+0x152>
 800097c:	211a      	movs	r1, #26
 800097e:	2501      	movs	r5, #1
 8000980:	1a12      	subs	r2, r2, r0
 8000982:	e7e4      	b.n	800094e <__aeabi_fdiv+0x1ce>
 8000984:	01ad      	lsls	r5, r5, #6
 8000986:	2000      	movs	r0, #0
 8000988:	0a6d      	lsrs	r5, r5, #9
 800098a:	e758      	b.n	800083e <__aeabi_fdiv+0xbe>
 800098c:	08006aa8 	.word	0x08006aa8
 8000990:	f7ffffff 	.word	0xf7ffffff
 8000994:	08006ae8 	.word	0x08006ae8

08000998 <__aeabi_fmul>:
 8000998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099a:	4657      	mov	r7, sl
 800099c:	464e      	mov	r6, r9
 800099e:	4645      	mov	r5, r8
 80009a0:	46de      	mov	lr, fp
 80009a2:	0244      	lsls	r4, r0, #9
 80009a4:	b5e0      	push	{r5, r6, r7, lr}
 80009a6:	0045      	lsls	r5, r0, #1
 80009a8:	1c0f      	adds	r7, r1, #0
 80009aa:	0a64      	lsrs	r4, r4, #9
 80009ac:	0e2d      	lsrs	r5, r5, #24
 80009ae:	0fc6      	lsrs	r6, r0, #31
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d047      	beq.n	8000a44 <__aeabi_fmul+0xac>
 80009b4:	2dff      	cmp	r5, #255	; 0xff
 80009b6:	d04d      	beq.n	8000a54 <__aeabi_fmul+0xbc>
 80009b8:	2300      	movs	r3, #0
 80009ba:	2080      	movs	r0, #128	; 0x80
 80009bc:	469a      	mov	sl, r3
 80009be:	469b      	mov	fp, r3
 80009c0:	00e4      	lsls	r4, r4, #3
 80009c2:	04c0      	lsls	r0, r0, #19
 80009c4:	4304      	orrs	r4, r0
 80009c6:	3d7f      	subs	r5, #127	; 0x7f
 80009c8:	0278      	lsls	r0, r7, #9
 80009ca:	0a43      	lsrs	r3, r0, #9
 80009cc:	4699      	mov	r9, r3
 80009ce:	007a      	lsls	r2, r7, #1
 80009d0:	0ffb      	lsrs	r3, r7, #31
 80009d2:	4698      	mov	r8, r3
 80009d4:	0e12      	lsrs	r2, r2, #24
 80009d6:	464b      	mov	r3, r9
 80009d8:	d044      	beq.n	8000a64 <__aeabi_fmul+0xcc>
 80009da:	2aff      	cmp	r2, #255	; 0xff
 80009dc:	d011      	beq.n	8000a02 <__aeabi_fmul+0x6a>
 80009de:	00d8      	lsls	r0, r3, #3
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	04db      	lsls	r3, r3, #19
 80009e4:	4303      	orrs	r3, r0
 80009e6:	4699      	mov	r9, r3
 80009e8:	2000      	movs	r0, #0
 80009ea:	3a7f      	subs	r2, #127	; 0x7f
 80009ec:	18ad      	adds	r5, r5, r2
 80009ee:	4647      	mov	r7, r8
 80009f0:	4653      	mov	r3, sl
 80009f2:	4077      	eors	r7, r6
 80009f4:	1c69      	adds	r1, r5, #1
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	d83f      	bhi.n	8000a7a <__aeabi_fmul+0xe2>
 80009fa:	4a72      	ldr	r2, [pc, #456]	; (8000bc4 <__aeabi_fmul+0x22c>)
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	58d3      	ldr	r3, [r2, r3]
 8000a00:	469f      	mov	pc, r3
 8000a02:	35ff      	adds	r5, #255	; 0xff
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fmul+0x72>
 8000a08:	e079      	b.n	8000afe <__aeabi_fmul+0x166>
 8000a0a:	4652      	mov	r2, sl
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	4692      	mov	sl, r2
 8000a12:	2002      	movs	r0, #2
 8000a14:	e7eb      	b.n	80009ee <__aeabi_fmul+0x56>
 8000a16:	4647      	mov	r7, r8
 8000a18:	464c      	mov	r4, r9
 8000a1a:	4683      	mov	fp, r0
 8000a1c:	465b      	mov	r3, fp
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d028      	beq.n	8000a74 <__aeabi_fmul+0xdc>
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fmul+0x90>
 8000a26:	e0c6      	b.n	8000bb6 <__aeabi_fmul+0x21e>
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d14f      	bne.n	8000acc <__aeabi_fmul+0x134>
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	2400      	movs	r4, #0
 8000a30:	05c0      	lsls	r0, r0, #23
 8000a32:	07ff      	lsls	r7, r7, #31
 8000a34:	4320      	orrs	r0, r4
 8000a36:	4338      	orrs	r0, r7
 8000a38:	bcf0      	pop	{r4, r5, r6, r7}
 8000a3a:	46bb      	mov	fp, r7
 8000a3c:	46b2      	mov	sl, r6
 8000a3e:	46a9      	mov	r9, r5
 8000a40:	46a0      	mov	r8, r4
 8000a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d171      	bne.n	8000b2c <__aeabi_fmul+0x194>
 8000a48:	2304      	movs	r3, #4
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	2500      	movs	r5, #0
 8000a50:	469b      	mov	fp, r3
 8000a52:	e7b9      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000a54:	2c00      	cmp	r4, #0
 8000a56:	d163      	bne.n	8000b20 <__aeabi_fmul+0x188>
 8000a58:	2308      	movs	r3, #8
 8000a5a:	469a      	mov	sl, r3
 8000a5c:	3b06      	subs	r3, #6
 8000a5e:	25ff      	movs	r5, #255	; 0xff
 8000a60:	469b      	mov	fp, r3
 8000a62:	e7b1      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d150      	bne.n	8000b0a <__aeabi_fmul+0x172>
 8000a68:	4652      	mov	r2, sl
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	4692      	mov	sl, r2
 8000a70:	2001      	movs	r0, #1
 8000a72:	e7bc      	b.n	80009ee <__aeabi_fmul+0x56>
 8000a74:	20ff      	movs	r0, #255	; 0xff
 8000a76:	2400      	movs	r4, #0
 8000a78:	e7da      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000a7a:	4648      	mov	r0, r9
 8000a7c:	0c26      	lsrs	r6, r4, #16
 8000a7e:	0424      	lsls	r4, r4, #16
 8000a80:	0c22      	lsrs	r2, r4, #16
 8000a82:	0404      	lsls	r4, r0, #16
 8000a84:	0c24      	lsrs	r4, r4, #16
 8000a86:	464b      	mov	r3, r9
 8000a88:	0020      	movs	r0, r4
 8000a8a:	0c1b      	lsrs	r3, r3, #16
 8000a8c:	4350      	muls	r0, r2
 8000a8e:	4374      	muls	r4, r6
 8000a90:	435a      	muls	r2, r3
 8000a92:	435e      	muls	r6, r3
 8000a94:	1912      	adds	r2, r2, r4
 8000a96:	0c03      	lsrs	r3, r0, #16
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	d903      	bls.n	8000aa6 <__aeabi_fmul+0x10e>
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	0252      	lsls	r2, r2, #9
 8000aa2:	4694      	mov	ip, r2
 8000aa4:	4466      	add	r6, ip
 8000aa6:	0400      	lsls	r0, r0, #16
 8000aa8:	041a      	lsls	r2, r3, #16
 8000aaa:	0c00      	lsrs	r0, r0, #16
 8000aac:	1812      	adds	r2, r2, r0
 8000aae:	0194      	lsls	r4, r2, #6
 8000ab0:	1e60      	subs	r0, r4, #1
 8000ab2:	4184      	sbcs	r4, r0
 8000ab4:	0c1b      	lsrs	r3, r3, #16
 8000ab6:	0e92      	lsrs	r2, r2, #26
 8000ab8:	199b      	adds	r3, r3, r6
 8000aba:	4314      	orrs	r4, r2
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	d572      	bpl.n	8000baa <__aeabi_fmul+0x212>
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	0863      	lsrs	r3, r4, #1
 8000ac8:	4004      	ands	r4, r0
 8000aca:	431c      	orrs	r4, r3
 8000acc:	0008      	movs	r0, r1
 8000ace:	307f      	adds	r0, #127	; 0x7f
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	dd3c      	ble.n	8000b4e <__aeabi_fmul+0x1b6>
 8000ad4:	0763      	lsls	r3, r4, #29
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_fmul+0x14a>
 8000ad8:	230f      	movs	r3, #15
 8000ada:	4023      	ands	r3, r4
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fmul+0x14a>
 8000ae0:	3404      	adds	r4, #4
 8000ae2:	0123      	lsls	r3, r4, #4
 8000ae4:	d503      	bpl.n	8000aee <__aeabi_fmul+0x156>
 8000ae6:	3180      	adds	r1, #128	; 0x80
 8000ae8:	0008      	movs	r0, r1
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <__aeabi_fmul+0x230>)
 8000aec:	401c      	ands	r4, r3
 8000aee:	28fe      	cmp	r0, #254	; 0xfe
 8000af0:	dcc0      	bgt.n	8000a74 <__aeabi_fmul+0xdc>
 8000af2:	01a4      	lsls	r4, r4, #6
 8000af4:	0a64      	lsrs	r4, r4, #9
 8000af6:	b2c0      	uxtb	r0, r0
 8000af8:	e79a      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000afa:	0037      	movs	r7, r6
 8000afc:	e78e      	b.n	8000a1c <__aeabi_fmul+0x84>
 8000afe:	4652      	mov	r2, sl
 8000b00:	2303      	movs	r3, #3
 8000b02:	431a      	orrs	r2, r3
 8000b04:	4692      	mov	sl, r2
 8000b06:	2003      	movs	r0, #3
 8000b08:	e771      	b.n	80009ee <__aeabi_fmul+0x56>
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	f001 f9e8 	bl	8001ee0 <__clzsi2>
 8000b10:	464a      	mov	r2, r9
 8000b12:	1f43      	subs	r3, r0, #5
 8000b14:	409a      	lsls	r2, r3
 8000b16:	1a2d      	subs	r5, r5, r0
 8000b18:	4691      	mov	r9, r2
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	3d76      	subs	r5, #118	; 0x76
 8000b1e:	e766      	b.n	80009ee <__aeabi_fmul+0x56>
 8000b20:	230c      	movs	r3, #12
 8000b22:	469a      	mov	sl, r3
 8000b24:	3b09      	subs	r3, #9
 8000b26:	25ff      	movs	r5, #255	; 0xff
 8000b28:	469b      	mov	fp, r3
 8000b2a:	e74d      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000b2c:	0020      	movs	r0, r4
 8000b2e:	f001 f9d7 	bl	8001ee0 <__clzsi2>
 8000b32:	2576      	movs	r5, #118	; 0x76
 8000b34:	1f43      	subs	r3, r0, #5
 8000b36:	409c      	lsls	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	426d      	negs	r5, r5
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	469b      	mov	fp, r3
 8000b40:	1a2d      	subs	r5, r5, r0
 8000b42:	e741      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000b44:	2480      	movs	r4, #128	; 0x80
 8000b46:	2700      	movs	r7, #0
 8000b48:	20ff      	movs	r0, #255	; 0xff
 8000b4a:	03e4      	lsls	r4, r4, #15
 8000b4c:	e770      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	1a1b      	subs	r3, r3, r0
 8000b52:	2b1b      	cmp	r3, #27
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_fmul+0x1c0>
 8000b56:	e769      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000b58:	319e      	adds	r1, #158	; 0x9e
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	408c      	lsls	r4, r1
 8000b5e:	40d8      	lsrs	r0, r3
 8000b60:	1e63      	subs	r3, r4, #1
 8000b62:	419c      	sbcs	r4, r3
 8000b64:	4304      	orrs	r4, r0
 8000b66:	0763      	lsls	r3, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x1dc>
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	4023      	ands	r3, r4
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x1dc>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0163      	lsls	r3, r4, #5
 8000b76:	d51a      	bpl.n	8000bae <__aeabi_fmul+0x216>
 8000b78:	2001      	movs	r0, #1
 8000b7a:	2400      	movs	r4, #0
 8000b7c:	e758      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000b7e:	2080      	movs	r0, #128	; 0x80
 8000b80:	03c0      	lsls	r0, r0, #15
 8000b82:	4204      	tst	r4, r0
 8000b84:	d009      	beq.n	8000b9a <__aeabi_fmul+0x202>
 8000b86:	464b      	mov	r3, r9
 8000b88:	4203      	tst	r3, r0
 8000b8a:	d106      	bne.n	8000b9a <__aeabi_fmul+0x202>
 8000b8c:	464c      	mov	r4, r9
 8000b8e:	4304      	orrs	r4, r0
 8000b90:	0264      	lsls	r4, r4, #9
 8000b92:	4647      	mov	r7, r8
 8000b94:	20ff      	movs	r0, #255	; 0xff
 8000b96:	0a64      	lsrs	r4, r4, #9
 8000b98:	e74a      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000b9a:	2080      	movs	r0, #128	; 0x80
 8000b9c:	03c0      	lsls	r0, r0, #15
 8000b9e:	4304      	orrs	r4, r0
 8000ba0:	0264      	lsls	r4, r4, #9
 8000ba2:	0037      	movs	r7, r6
 8000ba4:	20ff      	movs	r0, #255	; 0xff
 8000ba6:	0a64      	lsrs	r4, r4, #9
 8000ba8:	e742      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000baa:	0029      	movs	r1, r5
 8000bac:	e78e      	b.n	8000acc <__aeabi_fmul+0x134>
 8000bae:	01a4      	lsls	r4, r4, #6
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	e73c      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000bb6:	2080      	movs	r0, #128	; 0x80
 8000bb8:	03c0      	lsls	r0, r0, #15
 8000bba:	4304      	orrs	r4, r0
 8000bbc:	0264      	lsls	r4, r4, #9
 8000bbe:	20ff      	movs	r0, #255	; 0xff
 8000bc0:	0a64      	lsrs	r4, r4, #9
 8000bc2:	e735      	b.n	8000a30 <__aeabi_fmul+0x98>
 8000bc4:	08006b28 	.word	0x08006b28
 8000bc8:	f7ffffff 	.word	0xf7ffffff

08000bcc <__aeabi_f2iz>:
 8000bcc:	0241      	lsls	r1, r0, #9
 8000bce:	0042      	lsls	r2, r0, #1
 8000bd0:	0fc3      	lsrs	r3, r0, #31
 8000bd2:	0a49      	lsrs	r1, r1, #9
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	2a7e      	cmp	r2, #126	; 0x7e
 8000bda:	d903      	bls.n	8000be4 <__aeabi_f2iz+0x18>
 8000bdc:	2a9d      	cmp	r2, #157	; 0x9d
 8000bde:	d902      	bls.n	8000be6 <__aeabi_f2iz+0x1a>
 8000be0:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <__aeabi_f2iz+0x3c>)
 8000be2:	1898      	adds	r0, r3, r2
 8000be4:	4770      	bx	lr
 8000be6:	2080      	movs	r0, #128	; 0x80
 8000be8:	0400      	lsls	r0, r0, #16
 8000bea:	4301      	orrs	r1, r0
 8000bec:	2a95      	cmp	r2, #149	; 0x95
 8000bee:	dc07      	bgt.n	8000c00 <__aeabi_f2iz+0x34>
 8000bf0:	2096      	movs	r0, #150	; 0x96
 8000bf2:	1a82      	subs	r2, r0, r2
 8000bf4:	40d1      	lsrs	r1, r2
 8000bf6:	4248      	negs	r0, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1f3      	bne.n	8000be4 <__aeabi_f2iz+0x18>
 8000bfc:	0008      	movs	r0, r1
 8000bfe:	e7f1      	b.n	8000be4 <__aeabi_f2iz+0x18>
 8000c00:	3a96      	subs	r2, #150	; 0x96
 8000c02:	4091      	lsls	r1, r2
 8000c04:	e7f7      	b.n	8000bf6 <__aeabi_f2iz+0x2a>
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	7fffffff 	.word	0x7fffffff

08000c0c <__aeabi_i2f>:
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d013      	beq.n	8000c3a <__aeabi_i2f+0x2e>
 8000c12:	17c3      	asrs	r3, r0, #31
 8000c14:	18c5      	adds	r5, r0, r3
 8000c16:	405d      	eors	r5, r3
 8000c18:	0fc4      	lsrs	r4, r0, #31
 8000c1a:	0028      	movs	r0, r5
 8000c1c:	f001 f960 	bl	8001ee0 <__clzsi2>
 8000c20:	239e      	movs	r3, #158	; 0x9e
 8000c22:	0001      	movs	r1, r0
 8000c24:	1a1b      	subs	r3, r3, r0
 8000c26:	2b96      	cmp	r3, #150	; 0x96
 8000c28:	dc0f      	bgt.n	8000c4a <__aeabi_i2f+0x3e>
 8000c2a:	2808      	cmp	r0, #8
 8000c2c:	dd01      	ble.n	8000c32 <__aeabi_i2f+0x26>
 8000c2e:	3908      	subs	r1, #8
 8000c30:	408d      	lsls	r5, r1
 8000c32:	026d      	lsls	r5, r5, #9
 8000c34:	0a6d      	lsrs	r5, r5, #9
 8000c36:	b2d8      	uxtb	r0, r3
 8000c38:	e002      	b.n	8000c40 <__aeabi_i2f+0x34>
 8000c3a:	2400      	movs	r4, #0
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	2500      	movs	r5, #0
 8000c40:	05c0      	lsls	r0, r0, #23
 8000c42:	4328      	orrs	r0, r5
 8000c44:	07e4      	lsls	r4, r4, #31
 8000c46:	4320      	orrs	r0, r4
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
 8000c4a:	2b99      	cmp	r3, #153	; 0x99
 8000c4c:	dd0b      	ble.n	8000c66 <__aeabi_i2f+0x5a>
 8000c4e:	2205      	movs	r2, #5
 8000c50:	002e      	movs	r6, r5
 8000c52:	1a12      	subs	r2, r2, r0
 8000c54:	40d6      	lsrs	r6, r2
 8000c56:	0002      	movs	r2, r0
 8000c58:	321b      	adds	r2, #27
 8000c5a:	4095      	lsls	r5, r2
 8000c5c:	0028      	movs	r0, r5
 8000c5e:	1e45      	subs	r5, r0, #1
 8000c60:	41a8      	sbcs	r0, r5
 8000c62:	0035      	movs	r5, r6
 8000c64:	4305      	orrs	r5, r0
 8000c66:	2905      	cmp	r1, #5
 8000c68:	dd01      	ble.n	8000c6e <__aeabi_i2f+0x62>
 8000c6a:	1f4a      	subs	r2, r1, #5
 8000c6c:	4095      	lsls	r5, r2
 8000c6e:	002a      	movs	r2, r5
 8000c70:	4e08      	ldr	r6, [pc, #32]	; (8000c94 <__aeabi_i2f+0x88>)
 8000c72:	4032      	ands	r2, r6
 8000c74:	0768      	lsls	r0, r5, #29
 8000c76:	d009      	beq.n	8000c8c <__aeabi_i2f+0x80>
 8000c78:	200f      	movs	r0, #15
 8000c7a:	4028      	ands	r0, r5
 8000c7c:	2804      	cmp	r0, #4
 8000c7e:	d005      	beq.n	8000c8c <__aeabi_i2f+0x80>
 8000c80:	3204      	adds	r2, #4
 8000c82:	0150      	lsls	r0, r2, #5
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_i2f+0x80>
 8000c86:	239f      	movs	r3, #159	; 0x9f
 8000c88:	4032      	ands	r2, r6
 8000c8a:	1a5b      	subs	r3, r3, r1
 8000c8c:	0192      	lsls	r2, r2, #6
 8000c8e:	0a55      	lsrs	r5, r2, #9
 8000c90:	b2d8      	uxtb	r0, r3
 8000c92:	e7d5      	b.n	8000c40 <__aeabi_i2f+0x34>
 8000c94:	fbffffff 	.word	0xfbffffff

08000c98 <__aeabi_dadd>:
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	464f      	mov	r7, r9
 8000c9c:	46d6      	mov	lr, sl
 8000c9e:	4646      	mov	r6, r8
 8000ca0:	000d      	movs	r5, r1
 8000ca2:	0001      	movs	r1, r0
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	b5c0      	push	{r6, r7, lr}
 8000ca8:	0017      	movs	r7, r2
 8000caa:	032b      	lsls	r3, r5, #12
 8000cac:	0a5a      	lsrs	r2, r3, #9
 8000cae:	0f4b      	lsrs	r3, r1, #29
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	00ca      	lsls	r2, r1, #3
 8000cb4:	4691      	mov	r9, r2
 8000cb6:	0302      	lsls	r2, r0, #12
 8000cb8:	006e      	lsls	r6, r5, #1
 8000cba:	0041      	lsls	r1, r0, #1
 8000cbc:	0a52      	lsrs	r2, r2, #9
 8000cbe:	0fec      	lsrs	r4, r5, #31
 8000cc0:	0f7d      	lsrs	r5, r7, #29
 8000cc2:	4315      	orrs	r5, r2
 8000cc4:	0d76      	lsrs	r6, r6, #21
 8000cc6:	0d49      	lsrs	r1, r1, #21
 8000cc8:	0fc0      	lsrs	r0, r0, #31
 8000cca:	4682      	mov	sl, r0
 8000ccc:	46ac      	mov	ip, r5
 8000cce:	00ff      	lsls	r7, r7, #3
 8000cd0:	1a72      	subs	r2, r6, r1
 8000cd2:	4284      	cmp	r4, r0
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dadd+0x40>
 8000cd6:	e098      	b.n	8000e0a <__aeabi_dadd+0x172>
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	dc00      	bgt.n	8000cde <__aeabi_dadd+0x46>
 8000cdc:	e081      	b.n	8000de2 <__aeabi_dadd+0x14a>
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x4c>
 8000ce2:	e0b6      	b.n	8000e52 <__aeabi_dadd+0x1ba>
 8000ce4:	49c9      	ldr	r1, [pc, #804]	; (800100c <__aeabi_dadd+0x374>)
 8000ce6:	428e      	cmp	r6, r1
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x54>
 8000cea:	e172      	b.n	8000fd2 <__aeabi_dadd+0x33a>
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0028      	movs	r0, r5
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	4308      	orrs	r0, r1
 8000cf4:	4684      	mov	ip, r0
 8000cf6:	2a38      	cmp	r2, #56	; 0x38
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dadd+0x64>
 8000cfa:	e15e      	b.n	8000fba <__aeabi_dadd+0x322>
 8000cfc:	2a1f      	cmp	r2, #31
 8000cfe:	dd00      	ble.n	8000d02 <__aeabi_dadd+0x6a>
 8000d00:	e1ee      	b.n	80010e0 <__aeabi_dadd+0x448>
 8000d02:	2020      	movs	r0, #32
 8000d04:	0039      	movs	r1, r7
 8000d06:	4665      	mov	r5, ip
 8000d08:	1a80      	subs	r0, r0, r2
 8000d0a:	4087      	lsls	r7, r0
 8000d0c:	40d1      	lsrs	r1, r2
 8000d0e:	4085      	lsls	r5, r0
 8000d10:	430d      	orrs	r5, r1
 8000d12:	0039      	movs	r1, r7
 8000d14:	1e4f      	subs	r7, r1, #1
 8000d16:	41b9      	sbcs	r1, r7
 8000d18:	4667      	mov	r7, ip
 8000d1a:	40d7      	lsrs	r7, r2
 8000d1c:	4329      	orrs	r1, r5
 8000d1e:	1bdb      	subs	r3, r3, r7
 8000d20:	464a      	mov	r2, r9
 8000d22:	1a55      	subs	r5, r2, r1
 8000d24:	45a9      	cmp	r9, r5
 8000d26:	4189      	sbcs	r1, r1
 8000d28:	4249      	negs	r1, r1
 8000d2a:	1a5b      	subs	r3, r3, r1
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	4643      	mov	r3, r8
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	d400      	bmi.n	8000d36 <__aeabi_dadd+0x9e>
 8000d34:	e0cc      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8000d36:	4643      	mov	r3, r8
 8000d38:	025b      	lsls	r3, r3, #9
 8000d3a:	0a5b      	lsrs	r3, r3, #9
 8000d3c:	4698      	mov	r8, r3
 8000d3e:	4643      	mov	r3, r8
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d100      	bne.n	8000d46 <__aeabi_dadd+0xae>
 8000d44:	e12c      	b.n	8000fa0 <__aeabi_dadd+0x308>
 8000d46:	4640      	mov	r0, r8
 8000d48:	f001 f8ca 	bl	8001ee0 <__clzsi2>
 8000d4c:	0001      	movs	r1, r0
 8000d4e:	3908      	subs	r1, #8
 8000d50:	2220      	movs	r2, #32
 8000d52:	0028      	movs	r0, r5
 8000d54:	4643      	mov	r3, r8
 8000d56:	1a52      	subs	r2, r2, r1
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	40d0      	lsrs	r0, r2
 8000d5c:	408d      	lsls	r5, r1
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	428e      	cmp	r6, r1
 8000d62:	dd00      	ble.n	8000d66 <__aeabi_dadd+0xce>
 8000d64:	e117      	b.n	8000f96 <__aeabi_dadd+0x2fe>
 8000d66:	1b8e      	subs	r6, r1, r6
 8000d68:	1c72      	adds	r2, r6, #1
 8000d6a:	2a1f      	cmp	r2, #31
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_dadd+0xd8>
 8000d6e:	e1a7      	b.n	80010c0 <__aeabi_dadd+0x428>
 8000d70:	2120      	movs	r1, #32
 8000d72:	0018      	movs	r0, r3
 8000d74:	002e      	movs	r6, r5
 8000d76:	1a89      	subs	r1, r1, r2
 8000d78:	408d      	lsls	r5, r1
 8000d7a:	4088      	lsls	r0, r1
 8000d7c:	40d6      	lsrs	r6, r2
 8000d7e:	40d3      	lsrs	r3, r2
 8000d80:	1e69      	subs	r1, r5, #1
 8000d82:	418d      	sbcs	r5, r1
 8000d84:	4330      	orrs	r0, r6
 8000d86:	4698      	mov	r8, r3
 8000d88:	2600      	movs	r6, #0
 8000d8a:	4305      	orrs	r5, r0
 8000d8c:	076b      	lsls	r3, r5, #29
 8000d8e:	d009      	beq.n	8000da4 <__aeabi_dadd+0x10c>
 8000d90:	230f      	movs	r3, #15
 8000d92:	402b      	ands	r3, r5
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d005      	beq.n	8000da4 <__aeabi_dadd+0x10c>
 8000d98:	1d2b      	adds	r3, r5, #4
 8000d9a:	42ab      	cmp	r3, r5
 8000d9c:	41ad      	sbcs	r5, r5
 8000d9e:	426d      	negs	r5, r5
 8000da0:	44a8      	add	r8, r5
 8000da2:	001d      	movs	r5, r3
 8000da4:	4643      	mov	r3, r8
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	d400      	bmi.n	8000dac <__aeabi_dadd+0x114>
 8000daa:	e094      	b.n	8000ed6 <__aeabi_dadd+0x23e>
 8000dac:	4b97      	ldr	r3, [pc, #604]	; (800100c <__aeabi_dadd+0x374>)
 8000dae:	1c72      	adds	r2, r6, #1
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dadd+0x11e>
 8000db4:	e09d      	b.n	8000ef2 <__aeabi_dadd+0x25a>
 8000db6:	4641      	mov	r1, r8
 8000db8:	4b95      	ldr	r3, [pc, #596]	; (8001010 <__aeabi_dadd+0x378>)
 8000dba:	08ed      	lsrs	r5, r5, #3
 8000dbc:	4019      	ands	r1, r3
 8000dbe:	000b      	movs	r3, r1
 8000dc0:	0552      	lsls	r2, r2, #21
 8000dc2:	0749      	lsls	r1, r1, #29
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	4329      	orrs	r1, r5
 8000dc8:	0b1b      	lsrs	r3, r3, #12
 8000dca:	0d52      	lsrs	r2, r2, #21
 8000dcc:	0512      	lsls	r2, r2, #20
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	07e4      	lsls	r4, r4, #31
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	0008      	movs	r0, r1
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	bce0      	pop	{r5, r6, r7}
 8000dda:	46ba      	mov	sl, r7
 8000ddc:	46b1      	mov	r9, r6
 8000dde:	46a8      	mov	r8, r5
 8000de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d043      	beq.n	8000e6e <__aeabi_dadd+0x1d6>
 8000de6:	1b8a      	subs	r2, r1, r6
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d000      	beq.n	8000dee <__aeabi_dadd+0x156>
 8000dec:	e12a      	b.n	8001044 <__aeabi_dadd+0x3ac>
 8000dee:	464c      	mov	r4, r9
 8000df0:	431c      	orrs	r4, r3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dadd+0x15e>
 8000df4:	e1d1      	b.n	800119a <__aeabi_dadd+0x502>
 8000df6:	1e54      	subs	r4, r2, #1
 8000df8:	2a01      	cmp	r2, #1
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x166>
 8000dfc:	e21f      	b.n	800123e <__aeabi_dadd+0x5a6>
 8000dfe:	4d83      	ldr	r5, [pc, #524]	; (800100c <__aeabi_dadd+0x374>)
 8000e00:	42aa      	cmp	r2, r5
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x16e>
 8000e04:	e272      	b.n	80012ec <__aeabi_dadd+0x654>
 8000e06:	0022      	movs	r2, r4
 8000e08:	e123      	b.n	8001052 <__aeabi_dadd+0x3ba>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	dc00      	bgt.n	8000e10 <__aeabi_dadd+0x178>
 8000e0e:	e098      	b.n	8000f42 <__aeabi_dadd+0x2aa>
 8000e10:	2900      	cmp	r1, #0
 8000e12:	d042      	beq.n	8000e9a <__aeabi_dadd+0x202>
 8000e14:	497d      	ldr	r1, [pc, #500]	; (800100c <__aeabi_dadd+0x374>)
 8000e16:	428e      	cmp	r6, r1
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dadd+0x184>
 8000e1a:	e0da      	b.n	8000fd2 <__aeabi_dadd+0x33a>
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	0028      	movs	r0, r5
 8000e20:	0409      	lsls	r1, r1, #16
 8000e22:	4308      	orrs	r0, r1
 8000e24:	4684      	mov	ip, r0
 8000e26:	2a38      	cmp	r2, #56	; 0x38
 8000e28:	dd00      	ble.n	8000e2c <__aeabi_dadd+0x194>
 8000e2a:	e129      	b.n	8001080 <__aeabi_dadd+0x3e8>
 8000e2c:	2a1f      	cmp	r2, #31
 8000e2e:	dc00      	bgt.n	8000e32 <__aeabi_dadd+0x19a>
 8000e30:	e187      	b.n	8001142 <__aeabi_dadd+0x4aa>
 8000e32:	0011      	movs	r1, r2
 8000e34:	4665      	mov	r5, ip
 8000e36:	3920      	subs	r1, #32
 8000e38:	40cd      	lsrs	r5, r1
 8000e3a:	2a20      	cmp	r2, #32
 8000e3c:	d004      	beq.n	8000e48 <__aeabi_dadd+0x1b0>
 8000e3e:	2040      	movs	r0, #64	; 0x40
 8000e40:	4661      	mov	r1, ip
 8000e42:	1a82      	subs	r2, r0, r2
 8000e44:	4091      	lsls	r1, r2
 8000e46:	430f      	orrs	r7, r1
 8000e48:	0039      	movs	r1, r7
 8000e4a:	1e4f      	subs	r7, r1, #1
 8000e4c:	41b9      	sbcs	r1, r7
 8000e4e:	430d      	orrs	r5, r1
 8000e50:	e11b      	b.n	800108a <__aeabi_dadd+0x3f2>
 8000e52:	0029      	movs	r1, r5
 8000e54:	4339      	orrs	r1, r7
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dadd+0x1c2>
 8000e58:	e0b5      	b.n	8000fc6 <__aeabi_dadd+0x32e>
 8000e5a:	1e51      	subs	r1, r2, #1
 8000e5c:	2a01      	cmp	r2, #1
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x1ca>
 8000e60:	e1ab      	b.n	80011ba <__aeabi_dadd+0x522>
 8000e62:	486a      	ldr	r0, [pc, #424]	; (800100c <__aeabi_dadd+0x374>)
 8000e64:	4282      	cmp	r2, r0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dadd+0x1d2>
 8000e68:	e1b2      	b.n	80011d0 <__aeabi_dadd+0x538>
 8000e6a:	000a      	movs	r2, r1
 8000e6c:	e743      	b.n	8000cf6 <__aeabi_dadd+0x5e>
 8000e6e:	4969      	ldr	r1, [pc, #420]	; (8001014 <__aeabi_dadd+0x37c>)
 8000e70:	1c75      	adds	r5, r6, #1
 8000e72:	420d      	tst	r5, r1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_dadd+0x1e0>
 8000e76:	e0cf      	b.n	8001018 <__aeabi_dadd+0x380>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d000      	beq.n	8000e7e <__aeabi_dadd+0x1e6>
 8000e7c:	e193      	b.n	80011a6 <__aeabi_dadd+0x50e>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	4319      	orrs	r1, r3
 8000e82:	d100      	bne.n	8000e86 <__aeabi_dadd+0x1ee>
 8000e84:	e1d1      	b.n	800122a <__aeabi_dadd+0x592>
 8000e86:	4661      	mov	r1, ip
 8000e88:	4339      	orrs	r1, r7
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_dadd+0x1f6>
 8000e8c:	e1e3      	b.n	8001256 <__aeabi_dadd+0x5be>
 8000e8e:	4649      	mov	r1, r9
 8000e90:	0758      	lsls	r0, r3, #29
 8000e92:	08c9      	lsrs	r1, r1, #3
 8000e94:	4301      	orrs	r1, r0
 8000e96:	08db      	lsrs	r3, r3, #3
 8000e98:	e026      	b.n	8000ee8 <__aeabi_dadd+0x250>
 8000e9a:	0029      	movs	r1, r5
 8000e9c:	4339      	orrs	r1, r7
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dadd+0x20a>
 8000ea0:	e091      	b.n	8000fc6 <__aeabi_dadd+0x32e>
 8000ea2:	1e51      	subs	r1, r2, #1
 8000ea4:	2a01      	cmp	r2, #1
 8000ea6:	d005      	beq.n	8000eb4 <__aeabi_dadd+0x21c>
 8000ea8:	4858      	ldr	r0, [pc, #352]	; (800100c <__aeabi_dadd+0x374>)
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_dadd+0x218>
 8000eae:	e18f      	b.n	80011d0 <__aeabi_dadd+0x538>
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	e7b8      	b.n	8000e26 <__aeabi_dadd+0x18e>
 8000eb4:	003d      	movs	r5, r7
 8000eb6:	444d      	add	r5, r9
 8000eb8:	454d      	cmp	r5, r9
 8000eba:	4189      	sbcs	r1, r1
 8000ebc:	4463      	add	r3, ip
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	4249      	negs	r1, r1
 8000ec2:	4488      	add	r8, r1
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	2602      	movs	r6, #2
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	d500      	bpl.n	8000ece <__aeabi_dadd+0x236>
 8000ecc:	e0eb      	b.n	80010a6 <__aeabi_dadd+0x40e>
 8000ece:	3e01      	subs	r6, #1
 8000ed0:	076b      	lsls	r3, r5, #29
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_dadd+0x23e>
 8000ed4:	e75c      	b.n	8000d90 <__aeabi_dadd+0xf8>
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	08e9      	lsrs	r1, r5, #3
 8000eda:	075a      	lsls	r2, r3, #29
 8000edc:	4311      	orrs	r1, r2
 8000ede:	0032      	movs	r2, r6
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	484a      	ldr	r0, [pc, #296]	; (800100c <__aeabi_dadd+0x374>)
 8000ee4:	4282      	cmp	r2, r0
 8000ee6:	d021      	beq.n	8000f2c <__aeabi_dadd+0x294>
 8000ee8:	031b      	lsls	r3, r3, #12
 8000eea:	0552      	lsls	r2, r2, #21
 8000eec:	0b1b      	lsrs	r3, r3, #12
 8000eee:	0d52      	lsrs	r2, r2, #21
 8000ef0:	e76c      	b.n	8000dcc <__aeabi_dadd+0x134>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	e769      	b.n	8000dcc <__aeabi_dadd+0x134>
 8000ef8:	002a      	movs	r2, r5
 8000efa:	433a      	orrs	r2, r7
 8000efc:	d069      	beq.n	8000fd2 <__aeabi_dadd+0x33a>
 8000efe:	464a      	mov	r2, r9
 8000f00:	0758      	lsls	r0, r3, #29
 8000f02:	08d1      	lsrs	r1, r2, #3
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	031b      	lsls	r3, r3, #12
 8000f0a:	4308      	orrs	r0, r1
 8000f0c:	421a      	tst	r2, r3
 8000f0e:	d007      	beq.n	8000f20 <__aeabi_dadd+0x288>
 8000f10:	0029      	movs	r1, r5
 8000f12:	08ed      	lsrs	r5, r5, #3
 8000f14:	421d      	tst	r5, r3
 8000f16:	d103      	bne.n	8000f20 <__aeabi_dadd+0x288>
 8000f18:	002a      	movs	r2, r5
 8000f1a:	08ff      	lsrs	r7, r7, #3
 8000f1c:	0748      	lsls	r0, r1, #29
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0f43      	lsrs	r3, r0, #29
 8000f22:	00c1      	lsls	r1, r0, #3
 8000f24:	075b      	lsls	r3, r3, #29
 8000f26:	08c9      	lsrs	r1, r1, #3
 8000f28:	4319      	orrs	r1, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dadd+0x29c>
 8000f32:	e213      	b.n	800135c <__aeabi_dadd+0x6c4>
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	0312      	lsls	r2, r2, #12
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	4a33      	ldr	r2, [pc, #204]	; (800100c <__aeabi_dadd+0x374>)
 8000f3e:	0b1b      	lsrs	r3, r3, #12
 8000f40:	e744      	b.n	8000dcc <__aeabi_dadd+0x134>
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d04b      	beq.n	8000fde <__aeabi_dadd+0x346>
 8000f46:	1b8a      	subs	r2, r1, r6
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_dadd+0x2b6>
 8000f4c:	e0e7      	b.n	800111e <__aeabi_dadd+0x486>
 8000f4e:	482f      	ldr	r0, [pc, #188]	; (800100c <__aeabi_dadd+0x374>)
 8000f50:	4281      	cmp	r1, r0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dadd+0x2be>
 8000f54:	e195      	b.n	8001282 <__aeabi_dadd+0x5ea>
 8000f56:	2080      	movs	r0, #128	; 0x80
 8000f58:	0400      	lsls	r0, r0, #16
 8000f5a:	4303      	orrs	r3, r0
 8000f5c:	2a38      	cmp	r2, #56	; 0x38
 8000f5e:	dd00      	ble.n	8000f62 <__aeabi_dadd+0x2ca>
 8000f60:	e143      	b.n	80011ea <__aeabi_dadd+0x552>
 8000f62:	2a1f      	cmp	r2, #31
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_dadd+0x2d0>
 8000f66:	e1db      	b.n	8001320 <__aeabi_dadd+0x688>
 8000f68:	2020      	movs	r0, #32
 8000f6a:	001d      	movs	r5, r3
 8000f6c:	464e      	mov	r6, r9
 8000f6e:	1a80      	subs	r0, r0, r2
 8000f70:	4085      	lsls	r5, r0
 8000f72:	40d6      	lsrs	r6, r2
 8000f74:	4335      	orrs	r5, r6
 8000f76:	464e      	mov	r6, r9
 8000f78:	4086      	lsls	r6, r0
 8000f7a:	0030      	movs	r0, r6
 8000f7c:	40d3      	lsrs	r3, r2
 8000f7e:	1e46      	subs	r6, r0, #1
 8000f80:	41b0      	sbcs	r0, r6
 8000f82:	449c      	add	ip, r3
 8000f84:	4305      	orrs	r5, r0
 8000f86:	19ed      	adds	r5, r5, r7
 8000f88:	42bd      	cmp	r5, r7
 8000f8a:	419b      	sbcs	r3, r3
 8000f8c:	425b      	negs	r3, r3
 8000f8e:	4463      	add	r3, ip
 8000f90:	4698      	mov	r8, r3
 8000f92:	000e      	movs	r6, r1
 8000f94:	e07f      	b.n	8001096 <__aeabi_dadd+0x3fe>
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <__aeabi_dadd+0x378>)
 8000f98:	1a76      	subs	r6, r6, r1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	4698      	mov	r8, r3
 8000f9e:	e6f5      	b.n	8000d8c <__aeabi_dadd+0xf4>
 8000fa0:	0028      	movs	r0, r5
 8000fa2:	f000 ff9d 	bl	8001ee0 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	3118      	adds	r1, #24
 8000faa:	291f      	cmp	r1, #31
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_dadd+0x318>
 8000fae:	e6cf      	b.n	8000d50 <__aeabi_dadd+0xb8>
 8000fb0:	002b      	movs	r3, r5
 8000fb2:	3808      	subs	r0, #8
 8000fb4:	4083      	lsls	r3, r0
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	e6d2      	b.n	8000d60 <__aeabi_dadd+0xc8>
 8000fba:	4662      	mov	r2, ip
 8000fbc:	433a      	orrs	r2, r7
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	1e4f      	subs	r7, r1, #1
 8000fc2:	41b9      	sbcs	r1, r7
 8000fc4:	e6ac      	b.n	8000d20 <__aeabi_dadd+0x88>
 8000fc6:	4649      	mov	r1, r9
 8000fc8:	0758      	lsls	r0, r3, #29
 8000fca:	08c9      	lsrs	r1, r1, #3
 8000fcc:	4301      	orrs	r1, r0
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	e787      	b.n	8000ee2 <__aeabi_dadd+0x24a>
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	075a      	lsls	r2, r3, #29
 8000fd6:	08c9      	lsrs	r1, r1, #3
 8000fd8:	4311      	orrs	r1, r2
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	e7a6      	b.n	8000f2c <__aeabi_dadd+0x294>
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <__aeabi_dadd+0x37c>)
 8000fe0:	1c70      	adds	r0, r6, #1
 8000fe2:	4208      	tst	r0, r1
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_dadd+0x350>
 8000fe6:	e0bb      	b.n	8001160 <__aeabi_dadd+0x4c8>
 8000fe8:	2e00      	cmp	r6, #0
 8000fea:	d000      	beq.n	8000fee <__aeabi_dadd+0x356>
 8000fec:	e114      	b.n	8001218 <__aeabi_dadd+0x580>
 8000fee:	4649      	mov	r1, r9
 8000ff0:	4319      	orrs	r1, r3
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dadd+0x35e>
 8000ff4:	e175      	b.n	80012e2 <__aeabi_dadd+0x64a>
 8000ff6:	0029      	movs	r1, r5
 8000ff8:	4339      	orrs	r1, r7
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_dadd+0x366>
 8000ffc:	e17e      	b.n	80012fc <__aeabi_dadd+0x664>
 8000ffe:	4649      	mov	r1, r9
 8001000:	0758      	lsls	r0, r3, #29
 8001002:	08c9      	lsrs	r1, r1, #3
 8001004:	4301      	orrs	r1, r0
 8001006:	08db      	lsrs	r3, r3, #3
 8001008:	e76e      	b.n	8000ee8 <__aeabi_dadd+0x250>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	000007ff 	.word	0x000007ff
 8001010:	ff7fffff 	.word	0xff7fffff
 8001014:	000007fe 	.word	0x000007fe
 8001018:	4649      	mov	r1, r9
 800101a:	1bcd      	subs	r5, r1, r7
 800101c:	4661      	mov	r1, ip
 800101e:	1a58      	subs	r0, r3, r1
 8001020:	45a9      	cmp	r9, r5
 8001022:	4189      	sbcs	r1, r1
 8001024:	4249      	negs	r1, r1
 8001026:	4688      	mov	r8, r1
 8001028:	0001      	movs	r1, r0
 800102a:	4640      	mov	r0, r8
 800102c:	1a09      	subs	r1, r1, r0
 800102e:	4688      	mov	r8, r1
 8001030:	0209      	lsls	r1, r1, #8
 8001032:	d500      	bpl.n	8001036 <__aeabi_dadd+0x39e>
 8001034:	e0a6      	b.n	8001184 <__aeabi_dadd+0x4ec>
 8001036:	4641      	mov	r1, r8
 8001038:	4329      	orrs	r1, r5
 800103a:	d000      	beq.n	800103e <__aeabi_dadd+0x3a6>
 800103c:	e67f      	b.n	8000d3e <__aeabi_dadd+0xa6>
 800103e:	2300      	movs	r3, #0
 8001040:	2400      	movs	r4, #0
 8001042:	e751      	b.n	8000ee8 <__aeabi_dadd+0x250>
 8001044:	4cc7      	ldr	r4, [pc, #796]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001046:	42a1      	cmp	r1, r4
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x3b4>
 800104a:	e0c7      	b.n	80011dc <__aeabi_dadd+0x544>
 800104c:	2480      	movs	r4, #128	; 0x80
 800104e:	0424      	lsls	r4, r4, #16
 8001050:	4323      	orrs	r3, r4
 8001052:	2a38      	cmp	r2, #56	; 0x38
 8001054:	dc54      	bgt.n	8001100 <__aeabi_dadd+0x468>
 8001056:	2a1f      	cmp	r2, #31
 8001058:	dd00      	ble.n	800105c <__aeabi_dadd+0x3c4>
 800105a:	e0cc      	b.n	80011f6 <__aeabi_dadd+0x55e>
 800105c:	2420      	movs	r4, #32
 800105e:	4648      	mov	r0, r9
 8001060:	1aa4      	subs	r4, r4, r2
 8001062:	001d      	movs	r5, r3
 8001064:	464e      	mov	r6, r9
 8001066:	40a0      	lsls	r0, r4
 8001068:	40d6      	lsrs	r6, r2
 800106a:	40a5      	lsls	r5, r4
 800106c:	0004      	movs	r4, r0
 800106e:	40d3      	lsrs	r3, r2
 8001070:	4662      	mov	r2, ip
 8001072:	4335      	orrs	r5, r6
 8001074:	1e66      	subs	r6, r4, #1
 8001076:	41b4      	sbcs	r4, r6
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	469c      	mov	ip, r3
 800107c:	4325      	orrs	r5, r4
 800107e:	e044      	b.n	800110a <__aeabi_dadd+0x472>
 8001080:	4662      	mov	r2, ip
 8001082:	433a      	orrs	r2, r7
 8001084:	0015      	movs	r5, r2
 8001086:	1e6f      	subs	r7, r5, #1
 8001088:	41bd      	sbcs	r5, r7
 800108a:	444d      	add	r5, r9
 800108c:	454d      	cmp	r5, r9
 800108e:	4189      	sbcs	r1, r1
 8001090:	4249      	negs	r1, r1
 8001092:	4688      	mov	r8, r1
 8001094:	4498      	add	r8, r3
 8001096:	4643      	mov	r3, r8
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	d400      	bmi.n	800109e <__aeabi_dadd+0x406>
 800109c:	e718      	b.n	8000ed0 <__aeabi_dadd+0x238>
 800109e:	4bb1      	ldr	r3, [pc, #708]	; (8001364 <__aeabi_dadd+0x6cc>)
 80010a0:	3601      	adds	r6, #1
 80010a2:	429e      	cmp	r6, r3
 80010a4:	d049      	beq.n	800113a <__aeabi_dadd+0x4a2>
 80010a6:	4642      	mov	r2, r8
 80010a8:	4baf      	ldr	r3, [pc, #700]	; (8001368 <__aeabi_dadd+0x6d0>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	401a      	ands	r2, r3
 80010ae:	0013      	movs	r3, r2
 80010b0:	086a      	lsrs	r2, r5, #1
 80010b2:	400d      	ands	r5, r1
 80010b4:	4315      	orrs	r5, r2
 80010b6:	07d9      	lsls	r1, r3, #31
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	4698      	mov	r8, r3
 80010bc:	430d      	orrs	r5, r1
 80010be:	e665      	b.n	8000d8c <__aeabi_dadd+0xf4>
 80010c0:	0018      	movs	r0, r3
 80010c2:	3e1f      	subs	r6, #31
 80010c4:	40f0      	lsrs	r0, r6
 80010c6:	2a20      	cmp	r2, #32
 80010c8:	d003      	beq.n	80010d2 <__aeabi_dadd+0x43a>
 80010ca:	2140      	movs	r1, #64	; 0x40
 80010cc:	1a8a      	subs	r2, r1, r2
 80010ce:	4093      	lsls	r3, r2
 80010d0:	431d      	orrs	r5, r3
 80010d2:	1e69      	subs	r1, r5, #1
 80010d4:	418d      	sbcs	r5, r1
 80010d6:	2300      	movs	r3, #0
 80010d8:	2600      	movs	r6, #0
 80010da:	4698      	mov	r8, r3
 80010dc:	4305      	orrs	r5, r0
 80010de:	e6f7      	b.n	8000ed0 <__aeabi_dadd+0x238>
 80010e0:	0011      	movs	r1, r2
 80010e2:	4665      	mov	r5, ip
 80010e4:	3920      	subs	r1, #32
 80010e6:	40cd      	lsrs	r5, r1
 80010e8:	2a20      	cmp	r2, #32
 80010ea:	d004      	beq.n	80010f6 <__aeabi_dadd+0x45e>
 80010ec:	2040      	movs	r0, #64	; 0x40
 80010ee:	4661      	mov	r1, ip
 80010f0:	1a82      	subs	r2, r0, r2
 80010f2:	4091      	lsls	r1, r2
 80010f4:	430f      	orrs	r7, r1
 80010f6:	0039      	movs	r1, r7
 80010f8:	1e4f      	subs	r7, r1, #1
 80010fa:	41b9      	sbcs	r1, r7
 80010fc:	4329      	orrs	r1, r5
 80010fe:	e60f      	b.n	8000d20 <__aeabi_dadd+0x88>
 8001100:	464a      	mov	r2, r9
 8001102:	4313      	orrs	r3, r2
 8001104:	001d      	movs	r5, r3
 8001106:	1e6b      	subs	r3, r5, #1
 8001108:	419d      	sbcs	r5, r3
 800110a:	1b7d      	subs	r5, r7, r5
 800110c:	42af      	cmp	r7, r5
 800110e:	419b      	sbcs	r3, r3
 8001110:	4662      	mov	r2, ip
 8001112:	425b      	negs	r3, r3
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	4698      	mov	r8, r3
 8001118:	4654      	mov	r4, sl
 800111a:	000e      	movs	r6, r1
 800111c:	e607      	b.n	8000d2e <__aeabi_dadd+0x96>
 800111e:	4648      	mov	r0, r9
 8001120:	4318      	orrs	r0, r3
 8001122:	d100      	bne.n	8001126 <__aeabi_dadd+0x48e>
 8001124:	e0b3      	b.n	800128e <__aeabi_dadd+0x5f6>
 8001126:	1e50      	subs	r0, r2, #1
 8001128:	2a01      	cmp	r2, #1
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x496>
 800112c:	e10d      	b.n	800134a <__aeabi_dadd+0x6b2>
 800112e:	4d8d      	ldr	r5, [pc, #564]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001130:	42aa      	cmp	r2, r5
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x49e>
 8001134:	e0a5      	b.n	8001282 <__aeabi_dadd+0x5ea>
 8001136:	0002      	movs	r2, r0
 8001138:	e710      	b.n	8000f5c <__aeabi_dadd+0x2c4>
 800113a:	0032      	movs	r2, r6
 800113c:	2300      	movs	r3, #0
 800113e:	2100      	movs	r1, #0
 8001140:	e644      	b.n	8000dcc <__aeabi_dadd+0x134>
 8001142:	2120      	movs	r1, #32
 8001144:	0038      	movs	r0, r7
 8001146:	1a89      	subs	r1, r1, r2
 8001148:	4665      	mov	r5, ip
 800114a:	408f      	lsls	r7, r1
 800114c:	408d      	lsls	r5, r1
 800114e:	40d0      	lsrs	r0, r2
 8001150:	1e79      	subs	r1, r7, #1
 8001152:	418f      	sbcs	r7, r1
 8001154:	4305      	orrs	r5, r0
 8001156:	433d      	orrs	r5, r7
 8001158:	4667      	mov	r7, ip
 800115a:	40d7      	lsrs	r7, r2
 800115c:	19db      	adds	r3, r3, r7
 800115e:	e794      	b.n	800108a <__aeabi_dadd+0x3f2>
 8001160:	4a80      	ldr	r2, [pc, #512]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001162:	4290      	cmp	r0, r2
 8001164:	d100      	bne.n	8001168 <__aeabi_dadd+0x4d0>
 8001166:	e0ec      	b.n	8001342 <__aeabi_dadd+0x6aa>
 8001168:	0039      	movs	r1, r7
 800116a:	4449      	add	r1, r9
 800116c:	4549      	cmp	r1, r9
 800116e:	4192      	sbcs	r2, r2
 8001170:	4463      	add	r3, ip
 8001172:	4252      	negs	r2, r2
 8001174:	189b      	adds	r3, r3, r2
 8001176:	07dd      	lsls	r5, r3, #31
 8001178:	0849      	lsrs	r1, r1, #1
 800117a:	085b      	lsrs	r3, r3, #1
 800117c:	4698      	mov	r8, r3
 800117e:	0006      	movs	r6, r0
 8001180:	430d      	orrs	r5, r1
 8001182:	e6a5      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8001184:	464a      	mov	r2, r9
 8001186:	1abd      	subs	r5, r7, r2
 8001188:	42af      	cmp	r7, r5
 800118a:	4189      	sbcs	r1, r1
 800118c:	4662      	mov	r2, ip
 800118e:	4249      	negs	r1, r1
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	1a5b      	subs	r3, r3, r1
 8001194:	4698      	mov	r8, r3
 8001196:	4654      	mov	r4, sl
 8001198:	e5d1      	b.n	8000d3e <__aeabi_dadd+0xa6>
 800119a:	076c      	lsls	r4, r5, #29
 800119c:	08f9      	lsrs	r1, r7, #3
 800119e:	4321      	orrs	r1, r4
 80011a0:	08eb      	lsrs	r3, r5, #3
 80011a2:	0004      	movs	r4, r0
 80011a4:	e69d      	b.n	8000ee2 <__aeabi_dadd+0x24a>
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	d175      	bne.n	8001298 <__aeabi_dadd+0x600>
 80011ac:	4661      	mov	r1, ip
 80011ae:	4339      	orrs	r1, r7
 80011b0:	d114      	bne.n	80011dc <__aeabi_dadd+0x544>
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	2400      	movs	r4, #0
 80011b6:	031b      	lsls	r3, r3, #12
 80011b8:	e6bc      	b.n	8000f34 <__aeabi_dadd+0x29c>
 80011ba:	464a      	mov	r2, r9
 80011bc:	1bd5      	subs	r5, r2, r7
 80011be:	45a9      	cmp	r9, r5
 80011c0:	4189      	sbcs	r1, r1
 80011c2:	4662      	mov	r2, ip
 80011c4:	4249      	negs	r1, r1
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	1a5b      	subs	r3, r3, r1
 80011ca:	4698      	mov	r8, r3
 80011cc:	2601      	movs	r6, #1
 80011ce:	e5ae      	b.n	8000d2e <__aeabi_dadd+0x96>
 80011d0:	464a      	mov	r2, r9
 80011d2:	08d1      	lsrs	r1, r2, #3
 80011d4:	075a      	lsls	r2, r3, #29
 80011d6:	4311      	orrs	r1, r2
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	e6a7      	b.n	8000f2c <__aeabi_dadd+0x294>
 80011dc:	4663      	mov	r3, ip
 80011de:	08f9      	lsrs	r1, r7, #3
 80011e0:	075a      	lsls	r2, r3, #29
 80011e2:	4654      	mov	r4, sl
 80011e4:	4311      	orrs	r1, r2
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	e6a0      	b.n	8000f2c <__aeabi_dadd+0x294>
 80011ea:	464a      	mov	r2, r9
 80011ec:	4313      	orrs	r3, r2
 80011ee:	001d      	movs	r5, r3
 80011f0:	1e6b      	subs	r3, r5, #1
 80011f2:	419d      	sbcs	r5, r3
 80011f4:	e6c7      	b.n	8000f86 <__aeabi_dadd+0x2ee>
 80011f6:	0014      	movs	r4, r2
 80011f8:	001e      	movs	r6, r3
 80011fa:	3c20      	subs	r4, #32
 80011fc:	40e6      	lsrs	r6, r4
 80011fe:	2a20      	cmp	r2, #32
 8001200:	d005      	beq.n	800120e <__aeabi_dadd+0x576>
 8001202:	2440      	movs	r4, #64	; 0x40
 8001204:	1aa2      	subs	r2, r4, r2
 8001206:	4093      	lsls	r3, r2
 8001208:	464a      	mov	r2, r9
 800120a:	431a      	orrs	r2, r3
 800120c:	4691      	mov	r9, r2
 800120e:	464d      	mov	r5, r9
 8001210:	1e6b      	subs	r3, r5, #1
 8001212:	419d      	sbcs	r5, r3
 8001214:	4335      	orrs	r5, r6
 8001216:	e778      	b.n	800110a <__aeabi_dadd+0x472>
 8001218:	464a      	mov	r2, r9
 800121a:	431a      	orrs	r2, r3
 800121c:	d000      	beq.n	8001220 <__aeabi_dadd+0x588>
 800121e:	e66b      	b.n	8000ef8 <__aeabi_dadd+0x260>
 8001220:	076b      	lsls	r3, r5, #29
 8001222:	08f9      	lsrs	r1, r7, #3
 8001224:	4319      	orrs	r1, r3
 8001226:	08eb      	lsrs	r3, r5, #3
 8001228:	e680      	b.n	8000f2c <__aeabi_dadd+0x294>
 800122a:	4661      	mov	r1, ip
 800122c:	4339      	orrs	r1, r7
 800122e:	d054      	beq.n	80012da <__aeabi_dadd+0x642>
 8001230:	4663      	mov	r3, ip
 8001232:	08f9      	lsrs	r1, r7, #3
 8001234:	075c      	lsls	r4, r3, #29
 8001236:	4321      	orrs	r1, r4
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	0004      	movs	r4, r0
 800123c:	e654      	b.n	8000ee8 <__aeabi_dadd+0x250>
 800123e:	464a      	mov	r2, r9
 8001240:	1abd      	subs	r5, r7, r2
 8001242:	42af      	cmp	r7, r5
 8001244:	4189      	sbcs	r1, r1
 8001246:	4662      	mov	r2, ip
 8001248:	4249      	negs	r1, r1
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	1a5b      	subs	r3, r3, r1
 800124e:	4698      	mov	r8, r3
 8001250:	0004      	movs	r4, r0
 8001252:	2601      	movs	r6, #1
 8001254:	e56b      	b.n	8000d2e <__aeabi_dadd+0x96>
 8001256:	464a      	mov	r2, r9
 8001258:	1bd5      	subs	r5, r2, r7
 800125a:	45a9      	cmp	r9, r5
 800125c:	4189      	sbcs	r1, r1
 800125e:	4662      	mov	r2, ip
 8001260:	4249      	negs	r1, r1
 8001262:	1a9a      	subs	r2, r3, r2
 8001264:	1a52      	subs	r2, r2, r1
 8001266:	4690      	mov	r8, r2
 8001268:	0212      	lsls	r2, r2, #8
 800126a:	d532      	bpl.n	80012d2 <__aeabi_dadd+0x63a>
 800126c:	464a      	mov	r2, r9
 800126e:	1abd      	subs	r5, r7, r2
 8001270:	42af      	cmp	r7, r5
 8001272:	4189      	sbcs	r1, r1
 8001274:	4662      	mov	r2, ip
 8001276:	4249      	negs	r1, r1
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	4698      	mov	r8, r3
 800127e:	0004      	movs	r4, r0
 8001280:	e584      	b.n	8000d8c <__aeabi_dadd+0xf4>
 8001282:	4663      	mov	r3, ip
 8001284:	08f9      	lsrs	r1, r7, #3
 8001286:	075a      	lsls	r2, r3, #29
 8001288:	4311      	orrs	r1, r2
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	e64e      	b.n	8000f2c <__aeabi_dadd+0x294>
 800128e:	08f9      	lsrs	r1, r7, #3
 8001290:	0768      	lsls	r0, r5, #29
 8001292:	4301      	orrs	r1, r0
 8001294:	08eb      	lsrs	r3, r5, #3
 8001296:	e624      	b.n	8000ee2 <__aeabi_dadd+0x24a>
 8001298:	4662      	mov	r2, ip
 800129a:	433a      	orrs	r2, r7
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x608>
 800129e:	e698      	b.n	8000fd2 <__aeabi_dadd+0x33a>
 80012a0:	464a      	mov	r2, r9
 80012a2:	08d1      	lsrs	r1, r2, #3
 80012a4:	075a      	lsls	r2, r3, #29
 80012a6:	4311      	orrs	r1, r2
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	031b      	lsls	r3, r3, #12
 80012ae:	421a      	tst	r2, r3
 80012b0:	d008      	beq.n	80012c4 <__aeabi_dadd+0x62c>
 80012b2:	4660      	mov	r0, ip
 80012b4:	08c5      	lsrs	r5, r0, #3
 80012b6:	421d      	tst	r5, r3
 80012b8:	d104      	bne.n	80012c4 <__aeabi_dadd+0x62c>
 80012ba:	4654      	mov	r4, sl
 80012bc:	002a      	movs	r2, r5
 80012be:	08f9      	lsrs	r1, r7, #3
 80012c0:	0743      	lsls	r3, r0, #29
 80012c2:	4319      	orrs	r1, r3
 80012c4:	0f4b      	lsrs	r3, r1, #29
 80012c6:	00c9      	lsls	r1, r1, #3
 80012c8:	075b      	lsls	r3, r3, #29
 80012ca:	08c9      	lsrs	r1, r1, #3
 80012cc:	4319      	orrs	r1, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	e62c      	b.n	8000f2c <__aeabi_dadd+0x294>
 80012d2:	4641      	mov	r1, r8
 80012d4:	4329      	orrs	r1, r5
 80012d6:	d000      	beq.n	80012da <__aeabi_dadd+0x642>
 80012d8:	e5fa      	b.n	8000ed0 <__aeabi_dadd+0x238>
 80012da:	2300      	movs	r3, #0
 80012dc:	000a      	movs	r2, r1
 80012de:	2400      	movs	r4, #0
 80012e0:	e602      	b.n	8000ee8 <__aeabi_dadd+0x250>
 80012e2:	076b      	lsls	r3, r5, #29
 80012e4:	08f9      	lsrs	r1, r7, #3
 80012e6:	4319      	orrs	r1, r3
 80012e8:	08eb      	lsrs	r3, r5, #3
 80012ea:	e5fd      	b.n	8000ee8 <__aeabi_dadd+0x250>
 80012ec:	4663      	mov	r3, ip
 80012ee:	08f9      	lsrs	r1, r7, #3
 80012f0:	075b      	lsls	r3, r3, #29
 80012f2:	4319      	orrs	r1, r3
 80012f4:	4663      	mov	r3, ip
 80012f6:	0004      	movs	r4, r0
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	e617      	b.n	8000f2c <__aeabi_dadd+0x294>
 80012fc:	003d      	movs	r5, r7
 80012fe:	444d      	add	r5, r9
 8001300:	4463      	add	r3, ip
 8001302:	454d      	cmp	r5, r9
 8001304:	4189      	sbcs	r1, r1
 8001306:	4698      	mov	r8, r3
 8001308:	4249      	negs	r1, r1
 800130a:	4488      	add	r8, r1
 800130c:	4643      	mov	r3, r8
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	d400      	bmi.n	8001314 <__aeabi_dadd+0x67c>
 8001312:	e5dd      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8001314:	4642      	mov	r2, r8
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <__aeabi_dadd+0x6d0>)
 8001318:	2601      	movs	r6, #1
 800131a:	401a      	ands	r2, r3
 800131c:	4690      	mov	r8, r2
 800131e:	e5d7      	b.n	8000ed0 <__aeabi_dadd+0x238>
 8001320:	0010      	movs	r0, r2
 8001322:	001e      	movs	r6, r3
 8001324:	3820      	subs	r0, #32
 8001326:	40c6      	lsrs	r6, r0
 8001328:	2a20      	cmp	r2, #32
 800132a:	d005      	beq.n	8001338 <__aeabi_dadd+0x6a0>
 800132c:	2040      	movs	r0, #64	; 0x40
 800132e:	1a82      	subs	r2, r0, r2
 8001330:	4093      	lsls	r3, r2
 8001332:	464a      	mov	r2, r9
 8001334:	431a      	orrs	r2, r3
 8001336:	4691      	mov	r9, r2
 8001338:	464d      	mov	r5, r9
 800133a:	1e6b      	subs	r3, r5, #1
 800133c:	419d      	sbcs	r5, r3
 800133e:	4335      	orrs	r5, r6
 8001340:	e621      	b.n	8000f86 <__aeabi_dadd+0x2ee>
 8001342:	0002      	movs	r2, r0
 8001344:	2300      	movs	r3, #0
 8001346:	2100      	movs	r1, #0
 8001348:	e540      	b.n	8000dcc <__aeabi_dadd+0x134>
 800134a:	464a      	mov	r2, r9
 800134c:	19d5      	adds	r5, r2, r7
 800134e:	42bd      	cmp	r5, r7
 8001350:	4189      	sbcs	r1, r1
 8001352:	4463      	add	r3, ip
 8001354:	4698      	mov	r8, r3
 8001356:	4249      	negs	r1, r1
 8001358:	4488      	add	r8, r1
 800135a:	e5b3      	b.n	8000ec4 <__aeabi_dadd+0x22c>
 800135c:	2100      	movs	r1, #0
 800135e:	4a01      	ldr	r2, [pc, #4]	; (8001364 <__aeabi_dadd+0x6cc>)
 8001360:	000b      	movs	r3, r1
 8001362:	e533      	b.n	8000dcc <__aeabi_dadd+0x134>
 8001364:	000007ff 	.word	0x000007ff
 8001368:	ff7fffff 	.word	0xff7fffff

0800136c <__aeabi_ddiv>:
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	4657      	mov	r7, sl
 8001370:	464e      	mov	r6, r9
 8001372:	4645      	mov	r5, r8
 8001374:	46de      	mov	lr, fp
 8001376:	b5e0      	push	{r5, r6, r7, lr}
 8001378:	4681      	mov	r9, r0
 800137a:	0005      	movs	r5, r0
 800137c:	030c      	lsls	r4, r1, #12
 800137e:	0048      	lsls	r0, r1, #1
 8001380:	4692      	mov	sl, r2
 8001382:	001f      	movs	r7, r3
 8001384:	b085      	sub	sp, #20
 8001386:	0b24      	lsrs	r4, r4, #12
 8001388:	0d40      	lsrs	r0, r0, #21
 800138a:	0fce      	lsrs	r6, r1, #31
 800138c:	2800      	cmp	r0, #0
 800138e:	d059      	beq.n	8001444 <__aeabi_ddiv+0xd8>
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <__aeabi_ddiv+0x244>)
 8001392:	4298      	cmp	r0, r3
 8001394:	d100      	bne.n	8001398 <__aeabi_ddiv+0x2c>
 8001396:	e098      	b.n	80014ca <__aeabi_ddiv+0x15e>
 8001398:	0f6b      	lsrs	r3, r5, #29
 800139a:	00e4      	lsls	r4, r4, #3
 800139c:	431c      	orrs	r4, r3
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	041b      	lsls	r3, r3, #16
 80013a2:	4323      	orrs	r3, r4
 80013a4:	4698      	mov	r8, r3
 80013a6:	4b83      	ldr	r3, [pc, #524]	; (80015b4 <__aeabi_ddiv+0x248>)
 80013a8:	00ed      	lsls	r5, r5, #3
 80013aa:	469b      	mov	fp, r3
 80013ac:	2300      	movs	r3, #0
 80013ae:	4699      	mov	r9, r3
 80013b0:	4483      	add	fp, r0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	033c      	lsls	r4, r7, #12
 80013b6:	007b      	lsls	r3, r7, #1
 80013b8:	4650      	mov	r0, sl
 80013ba:	0b24      	lsrs	r4, r4, #12
 80013bc:	0d5b      	lsrs	r3, r3, #21
 80013be:	0fff      	lsrs	r7, r7, #31
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d067      	beq.n	8001494 <__aeabi_ddiv+0x128>
 80013c4:	4a7a      	ldr	r2, [pc, #488]	; (80015b0 <__aeabi_ddiv+0x244>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d018      	beq.n	80013fc <__aeabi_ddiv+0x90>
 80013ca:	497a      	ldr	r1, [pc, #488]	; (80015b4 <__aeabi_ddiv+0x248>)
 80013cc:	0f42      	lsrs	r2, r0, #29
 80013ce:	468c      	mov	ip, r1
 80013d0:	00e4      	lsls	r4, r4, #3
 80013d2:	4659      	mov	r1, fp
 80013d4:	4314      	orrs	r4, r2
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	4463      	add	r3, ip
 80013da:	0412      	lsls	r2, r2, #16
 80013dc:	1acb      	subs	r3, r1, r3
 80013de:	4314      	orrs	r4, r2
 80013e0:	469b      	mov	fp, r3
 80013e2:	00c2      	lsls	r2, r0, #3
 80013e4:	2000      	movs	r0, #0
 80013e6:	0033      	movs	r3, r6
 80013e8:	407b      	eors	r3, r7
 80013ea:	469a      	mov	sl, r3
 80013ec:	464b      	mov	r3, r9
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	d900      	bls.n	80013f4 <__aeabi_ddiv+0x88>
 80013f2:	e0ef      	b.n	80015d4 <__aeabi_ddiv+0x268>
 80013f4:	4970      	ldr	r1, [pc, #448]	; (80015b8 <__aeabi_ddiv+0x24c>)
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	58cb      	ldr	r3, [r1, r3]
 80013fa:	469f      	mov	pc, r3
 80013fc:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <__aeabi_ddiv+0x250>)
 80013fe:	4652      	mov	r2, sl
 8001400:	469c      	mov	ip, r3
 8001402:	4322      	orrs	r2, r4
 8001404:	44e3      	add	fp, ip
 8001406:	2a00      	cmp	r2, #0
 8001408:	d000      	beq.n	800140c <__aeabi_ddiv+0xa0>
 800140a:	e095      	b.n	8001538 <__aeabi_ddiv+0x1cc>
 800140c:	4649      	mov	r1, r9
 800140e:	2302      	movs	r3, #2
 8001410:	4319      	orrs	r1, r3
 8001412:	4689      	mov	r9, r1
 8001414:	2400      	movs	r4, #0
 8001416:	2002      	movs	r0, #2
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 800141a:	2300      	movs	r3, #0
 800141c:	2400      	movs	r4, #0
 800141e:	2500      	movs	r5, #0
 8001420:	4652      	mov	r2, sl
 8001422:	051b      	lsls	r3, r3, #20
 8001424:	4323      	orrs	r3, r4
 8001426:	07d2      	lsls	r2, r2, #31
 8001428:	4313      	orrs	r3, r2
 800142a:	0028      	movs	r0, r5
 800142c:	0019      	movs	r1, r3
 800142e:	b005      	add	sp, #20
 8001430:	bcf0      	pop	{r4, r5, r6, r7}
 8001432:	46bb      	mov	fp, r7
 8001434:	46b2      	mov	sl, r6
 8001436:	46a9      	mov	r9, r5
 8001438:	46a0      	mov	r8, r4
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143c:	2400      	movs	r4, #0
 800143e:	2500      	movs	r5, #0
 8001440:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <__aeabi_ddiv+0x244>)
 8001442:	e7ed      	b.n	8001420 <__aeabi_ddiv+0xb4>
 8001444:	464b      	mov	r3, r9
 8001446:	4323      	orrs	r3, r4
 8001448:	4698      	mov	r8, r3
 800144a:	d100      	bne.n	800144e <__aeabi_ddiv+0xe2>
 800144c:	e089      	b.n	8001562 <__aeabi_ddiv+0x1f6>
 800144e:	2c00      	cmp	r4, #0
 8001450:	d100      	bne.n	8001454 <__aeabi_ddiv+0xe8>
 8001452:	e1e0      	b.n	8001816 <__aeabi_ddiv+0x4aa>
 8001454:	0020      	movs	r0, r4
 8001456:	f000 fd43 	bl	8001ee0 <__clzsi2>
 800145a:	0001      	movs	r1, r0
 800145c:	0002      	movs	r2, r0
 800145e:	390b      	subs	r1, #11
 8001460:	231d      	movs	r3, #29
 8001462:	1a5b      	subs	r3, r3, r1
 8001464:	4649      	mov	r1, r9
 8001466:	0010      	movs	r0, r2
 8001468:	40d9      	lsrs	r1, r3
 800146a:	3808      	subs	r0, #8
 800146c:	4084      	lsls	r4, r0
 800146e:	000b      	movs	r3, r1
 8001470:	464d      	mov	r5, r9
 8001472:	4323      	orrs	r3, r4
 8001474:	4698      	mov	r8, r3
 8001476:	4085      	lsls	r5, r0
 8001478:	4851      	ldr	r0, [pc, #324]	; (80015c0 <__aeabi_ddiv+0x254>)
 800147a:	033c      	lsls	r4, r7, #12
 800147c:	1a83      	subs	r3, r0, r2
 800147e:	469b      	mov	fp, r3
 8001480:	2300      	movs	r3, #0
 8001482:	4699      	mov	r9, r3
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	007b      	lsls	r3, r7, #1
 8001488:	4650      	mov	r0, sl
 800148a:	0b24      	lsrs	r4, r4, #12
 800148c:	0d5b      	lsrs	r3, r3, #21
 800148e:	0fff      	lsrs	r7, r7, #31
 8001490:	2b00      	cmp	r3, #0
 8001492:	d197      	bne.n	80013c4 <__aeabi_ddiv+0x58>
 8001494:	4652      	mov	r2, sl
 8001496:	4322      	orrs	r2, r4
 8001498:	d055      	beq.n	8001546 <__aeabi_ddiv+0x1da>
 800149a:	2c00      	cmp	r4, #0
 800149c:	d100      	bne.n	80014a0 <__aeabi_ddiv+0x134>
 800149e:	e1ca      	b.n	8001836 <__aeabi_ddiv+0x4ca>
 80014a0:	0020      	movs	r0, r4
 80014a2:	f000 fd1d 	bl	8001ee0 <__clzsi2>
 80014a6:	0002      	movs	r2, r0
 80014a8:	3a0b      	subs	r2, #11
 80014aa:	231d      	movs	r3, #29
 80014ac:	0001      	movs	r1, r0
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	4652      	mov	r2, sl
 80014b2:	3908      	subs	r1, #8
 80014b4:	40da      	lsrs	r2, r3
 80014b6:	408c      	lsls	r4, r1
 80014b8:	4314      	orrs	r4, r2
 80014ba:	4652      	mov	r2, sl
 80014bc:	408a      	lsls	r2, r1
 80014be:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <__aeabi_ddiv+0x258>)
 80014c0:	4458      	add	r0, fp
 80014c2:	469b      	mov	fp, r3
 80014c4:	4483      	add	fp, r0
 80014c6:	2000      	movs	r0, #0
 80014c8:	e78d      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	4323      	orrs	r3, r4
 80014ce:	4698      	mov	r8, r3
 80014d0:	d140      	bne.n	8001554 <__aeabi_ddiv+0x1e8>
 80014d2:	2308      	movs	r3, #8
 80014d4:	4699      	mov	r9, r3
 80014d6:	3b06      	subs	r3, #6
 80014d8:	2500      	movs	r5, #0
 80014da:	4683      	mov	fp, r0
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	e769      	b.n	80013b4 <__aeabi_ddiv+0x48>
 80014e0:	46b2      	mov	sl, r6
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d0a9      	beq.n	800143c <__aeabi_ddiv+0xd0>
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d100      	bne.n	80014ee <__aeabi_ddiv+0x182>
 80014ec:	e211      	b.n	8001912 <__aeabi_ddiv+0x5a6>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d093      	beq.n	800141a <__aeabi_ddiv+0xae>
 80014f2:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <__aeabi_ddiv+0x25c>)
 80014f4:	445a      	add	r2, fp
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	dc00      	bgt.n	80014fc <__aeabi_ddiv+0x190>
 80014fa:	e13c      	b.n	8001776 <__aeabi_ddiv+0x40a>
 80014fc:	076b      	lsls	r3, r5, #29
 80014fe:	d000      	beq.n	8001502 <__aeabi_ddiv+0x196>
 8001500:	e1a7      	b.n	8001852 <__aeabi_ddiv+0x4e6>
 8001502:	08ed      	lsrs	r5, r5, #3
 8001504:	4643      	mov	r3, r8
 8001506:	01db      	lsls	r3, r3, #7
 8001508:	d506      	bpl.n	8001518 <__aeabi_ddiv+0x1ac>
 800150a:	4642      	mov	r2, r8
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <__aeabi_ddiv+0x260>)
 800150e:	401a      	ands	r2, r3
 8001510:	4690      	mov	r8, r2
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	445a      	add	r2, fp
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <__aeabi_ddiv+0x264>)
 800151a:	429a      	cmp	r2, r3
 800151c:	dc8e      	bgt.n	800143c <__aeabi_ddiv+0xd0>
 800151e:	4643      	mov	r3, r8
 8001520:	0552      	lsls	r2, r2, #21
 8001522:	0758      	lsls	r0, r3, #29
 8001524:	025c      	lsls	r4, r3, #9
 8001526:	4305      	orrs	r5, r0
 8001528:	0b24      	lsrs	r4, r4, #12
 800152a:	0d53      	lsrs	r3, r2, #21
 800152c:	e778      	b.n	8001420 <__aeabi_ddiv+0xb4>
 800152e:	46ba      	mov	sl, r7
 8001530:	46a0      	mov	r8, r4
 8001532:	0015      	movs	r5, r2
 8001534:	9000      	str	r0, [sp, #0]
 8001536:	e7d4      	b.n	80014e2 <__aeabi_ddiv+0x176>
 8001538:	464a      	mov	r2, r9
 800153a:	2303      	movs	r3, #3
 800153c:	431a      	orrs	r2, r3
 800153e:	4691      	mov	r9, r2
 8001540:	2003      	movs	r0, #3
 8001542:	4652      	mov	r2, sl
 8001544:	e74f      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 8001546:	4649      	mov	r1, r9
 8001548:	2301      	movs	r3, #1
 800154a:	4319      	orrs	r1, r3
 800154c:	4689      	mov	r9, r1
 800154e:	2400      	movs	r4, #0
 8001550:	2001      	movs	r0, #1
 8001552:	e748      	b.n	80013e6 <__aeabi_ddiv+0x7a>
 8001554:	230c      	movs	r3, #12
 8001556:	4699      	mov	r9, r3
 8001558:	3b09      	subs	r3, #9
 800155a:	46a0      	mov	r8, r4
 800155c:	4683      	mov	fp, r0
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	e728      	b.n	80013b4 <__aeabi_ddiv+0x48>
 8001562:	2304      	movs	r3, #4
 8001564:	4699      	mov	r9, r3
 8001566:	2300      	movs	r3, #0
 8001568:	469b      	mov	fp, r3
 800156a:	3301      	adds	r3, #1
 800156c:	2500      	movs	r5, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	e720      	b.n	80013b4 <__aeabi_ddiv+0x48>
 8001572:	2300      	movs	r3, #0
 8001574:	2480      	movs	r4, #128	; 0x80
 8001576:	469a      	mov	sl, r3
 8001578:	2500      	movs	r5, #0
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <__aeabi_ddiv+0x244>)
 800157c:	0324      	lsls	r4, r4, #12
 800157e:	e74f      	b.n	8001420 <__aeabi_ddiv+0xb4>
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	4641      	mov	r1, r8
 8001584:	031b      	lsls	r3, r3, #12
 8001586:	4219      	tst	r1, r3
 8001588:	d008      	beq.n	800159c <__aeabi_ddiv+0x230>
 800158a:	421c      	tst	r4, r3
 800158c:	d106      	bne.n	800159c <__aeabi_ddiv+0x230>
 800158e:	431c      	orrs	r4, r3
 8001590:	0324      	lsls	r4, r4, #12
 8001592:	46ba      	mov	sl, r7
 8001594:	0015      	movs	r5, r2
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <__aeabi_ddiv+0x244>)
 8001598:	0b24      	lsrs	r4, r4, #12
 800159a:	e741      	b.n	8001420 <__aeabi_ddiv+0xb4>
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	4643      	mov	r3, r8
 80015a0:	0324      	lsls	r4, r4, #12
 80015a2:	431c      	orrs	r4, r3
 80015a4:	0324      	lsls	r4, r4, #12
 80015a6:	46b2      	mov	sl, r6
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <__aeabi_ddiv+0x244>)
 80015aa:	0b24      	lsrs	r4, r4, #12
 80015ac:	e738      	b.n	8001420 <__aeabi_ddiv+0xb4>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	000007ff 	.word	0x000007ff
 80015b4:	fffffc01 	.word	0xfffffc01
 80015b8:	08006b68 	.word	0x08006b68
 80015bc:	fffff801 	.word	0xfffff801
 80015c0:	fffffc0d 	.word	0xfffffc0d
 80015c4:	000003f3 	.word	0x000003f3
 80015c8:	000003ff 	.word	0x000003ff
 80015cc:	feffffff 	.word	0xfeffffff
 80015d0:	000007fe 	.word	0x000007fe
 80015d4:	4544      	cmp	r4, r8
 80015d6:	d200      	bcs.n	80015da <__aeabi_ddiv+0x26e>
 80015d8:	e116      	b.n	8001808 <__aeabi_ddiv+0x49c>
 80015da:	d100      	bne.n	80015de <__aeabi_ddiv+0x272>
 80015dc:	e111      	b.n	8001802 <__aeabi_ddiv+0x496>
 80015de:	2301      	movs	r3, #1
 80015e0:	425b      	negs	r3, r3
 80015e2:	469c      	mov	ip, r3
 80015e4:	002e      	movs	r6, r5
 80015e6:	4640      	mov	r0, r8
 80015e8:	2500      	movs	r5, #0
 80015ea:	44e3      	add	fp, ip
 80015ec:	0223      	lsls	r3, r4, #8
 80015ee:	0e14      	lsrs	r4, r2, #24
 80015f0:	431c      	orrs	r4, r3
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	4699      	mov	r9, r3
 80015f6:	0423      	lsls	r3, r4, #16
 80015f8:	0c1f      	lsrs	r7, r3, #16
 80015fa:	0212      	lsls	r2, r2, #8
 80015fc:	4649      	mov	r1, r9
 80015fe:	9200      	str	r2, [sp, #0]
 8001600:	9701      	str	r7, [sp, #4]
 8001602:	f7fe fe07 	bl	8000214 <__aeabi_uidivmod>
 8001606:	0002      	movs	r2, r0
 8001608:	437a      	muls	r2, r7
 800160a:	040b      	lsls	r3, r1, #16
 800160c:	0c31      	lsrs	r1, r6, #16
 800160e:	4680      	mov	r8, r0
 8001610:	4319      	orrs	r1, r3
 8001612:	428a      	cmp	r2, r1
 8001614:	d90b      	bls.n	800162e <__aeabi_ddiv+0x2c2>
 8001616:	2301      	movs	r3, #1
 8001618:	425b      	negs	r3, r3
 800161a:	469c      	mov	ip, r3
 800161c:	1909      	adds	r1, r1, r4
 800161e:	44e0      	add	r8, ip
 8001620:	428c      	cmp	r4, r1
 8001622:	d804      	bhi.n	800162e <__aeabi_ddiv+0x2c2>
 8001624:	428a      	cmp	r2, r1
 8001626:	d902      	bls.n	800162e <__aeabi_ddiv+0x2c2>
 8001628:	1e83      	subs	r3, r0, #2
 800162a:	4698      	mov	r8, r3
 800162c:	1909      	adds	r1, r1, r4
 800162e:	1a88      	subs	r0, r1, r2
 8001630:	4649      	mov	r1, r9
 8001632:	f7fe fdef 	bl	8000214 <__aeabi_uidivmod>
 8001636:	0409      	lsls	r1, r1, #16
 8001638:	468c      	mov	ip, r1
 800163a:	0431      	lsls	r1, r6, #16
 800163c:	4666      	mov	r6, ip
 800163e:	9a01      	ldr	r2, [sp, #4]
 8001640:	0c09      	lsrs	r1, r1, #16
 8001642:	4342      	muls	r2, r0
 8001644:	0003      	movs	r3, r0
 8001646:	4331      	orrs	r1, r6
 8001648:	428a      	cmp	r2, r1
 800164a:	d904      	bls.n	8001656 <__aeabi_ddiv+0x2ea>
 800164c:	1909      	adds	r1, r1, r4
 800164e:	3b01      	subs	r3, #1
 8001650:	428c      	cmp	r4, r1
 8001652:	d800      	bhi.n	8001656 <__aeabi_ddiv+0x2ea>
 8001654:	e111      	b.n	800187a <__aeabi_ddiv+0x50e>
 8001656:	1a89      	subs	r1, r1, r2
 8001658:	4642      	mov	r2, r8
 800165a:	9e00      	ldr	r6, [sp, #0]
 800165c:	0412      	lsls	r2, r2, #16
 800165e:	431a      	orrs	r2, r3
 8001660:	0c33      	lsrs	r3, r6, #16
 8001662:	001f      	movs	r7, r3
 8001664:	0c10      	lsrs	r0, r2, #16
 8001666:	4690      	mov	r8, r2
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	0413      	lsls	r3, r2, #16
 800166c:	0432      	lsls	r2, r6, #16
 800166e:	0c16      	lsrs	r6, r2, #16
 8001670:	0032      	movs	r2, r6
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	435a      	muls	r2, r3
 8001676:	9603      	str	r6, [sp, #12]
 8001678:	437b      	muls	r3, r7
 800167a:	4346      	muls	r6, r0
 800167c:	4378      	muls	r0, r7
 800167e:	0c17      	lsrs	r7, r2, #16
 8001680:	46bc      	mov	ip, r7
 8001682:	199b      	adds	r3, r3, r6
 8001684:	4463      	add	r3, ip
 8001686:	429e      	cmp	r6, r3
 8001688:	d903      	bls.n	8001692 <__aeabi_ddiv+0x326>
 800168a:	2680      	movs	r6, #128	; 0x80
 800168c:	0276      	lsls	r6, r6, #9
 800168e:	46b4      	mov	ip, r6
 8001690:	4460      	add	r0, ip
 8001692:	0c1e      	lsrs	r6, r3, #16
 8001694:	1830      	adds	r0, r6, r0
 8001696:	0416      	lsls	r6, r2, #16
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	0c36      	lsrs	r6, r6, #16
 800169c:	199e      	adds	r6, r3, r6
 800169e:	4281      	cmp	r1, r0
 80016a0:	d200      	bcs.n	80016a4 <__aeabi_ddiv+0x338>
 80016a2:	e09c      	b.n	80017de <__aeabi_ddiv+0x472>
 80016a4:	d100      	bne.n	80016a8 <__aeabi_ddiv+0x33c>
 80016a6:	e097      	b.n	80017d8 <__aeabi_ddiv+0x46c>
 80016a8:	1bae      	subs	r6, r5, r6
 80016aa:	1a09      	subs	r1, r1, r0
 80016ac:	42b5      	cmp	r5, r6
 80016ae:	4180      	sbcs	r0, r0
 80016b0:	4240      	negs	r0, r0
 80016b2:	1a08      	subs	r0, r1, r0
 80016b4:	4284      	cmp	r4, r0
 80016b6:	d100      	bne.n	80016ba <__aeabi_ddiv+0x34e>
 80016b8:	e111      	b.n	80018de <__aeabi_ddiv+0x572>
 80016ba:	4649      	mov	r1, r9
 80016bc:	f7fe fdaa 	bl	8000214 <__aeabi_uidivmod>
 80016c0:	9a01      	ldr	r2, [sp, #4]
 80016c2:	040b      	lsls	r3, r1, #16
 80016c4:	4342      	muls	r2, r0
 80016c6:	0c31      	lsrs	r1, r6, #16
 80016c8:	0005      	movs	r5, r0
 80016ca:	4319      	orrs	r1, r3
 80016cc:	428a      	cmp	r2, r1
 80016ce:	d907      	bls.n	80016e0 <__aeabi_ddiv+0x374>
 80016d0:	1909      	adds	r1, r1, r4
 80016d2:	3d01      	subs	r5, #1
 80016d4:	428c      	cmp	r4, r1
 80016d6:	d803      	bhi.n	80016e0 <__aeabi_ddiv+0x374>
 80016d8:	428a      	cmp	r2, r1
 80016da:	d901      	bls.n	80016e0 <__aeabi_ddiv+0x374>
 80016dc:	1e85      	subs	r5, r0, #2
 80016de:	1909      	adds	r1, r1, r4
 80016e0:	1a88      	subs	r0, r1, r2
 80016e2:	4649      	mov	r1, r9
 80016e4:	f7fe fd96 	bl	8000214 <__aeabi_uidivmod>
 80016e8:	0409      	lsls	r1, r1, #16
 80016ea:	468c      	mov	ip, r1
 80016ec:	0431      	lsls	r1, r6, #16
 80016ee:	4666      	mov	r6, ip
 80016f0:	9a01      	ldr	r2, [sp, #4]
 80016f2:	0c09      	lsrs	r1, r1, #16
 80016f4:	4342      	muls	r2, r0
 80016f6:	0003      	movs	r3, r0
 80016f8:	4331      	orrs	r1, r6
 80016fa:	428a      	cmp	r2, r1
 80016fc:	d907      	bls.n	800170e <__aeabi_ddiv+0x3a2>
 80016fe:	1909      	adds	r1, r1, r4
 8001700:	3b01      	subs	r3, #1
 8001702:	428c      	cmp	r4, r1
 8001704:	d803      	bhi.n	800170e <__aeabi_ddiv+0x3a2>
 8001706:	428a      	cmp	r2, r1
 8001708:	d901      	bls.n	800170e <__aeabi_ddiv+0x3a2>
 800170a:	1e83      	subs	r3, r0, #2
 800170c:	1909      	adds	r1, r1, r4
 800170e:	9e03      	ldr	r6, [sp, #12]
 8001710:	1a89      	subs	r1, r1, r2
 8001712:	0032      	movs	r2, r6
 8001714:	042d      	lsls	r5, r5, #16
 8001716:	431d      	orrs	r5, r3
 8001718:	9f02      	ldr	r7, [sp, #8]
 800171a:	042b      	lsls	r3, r5, #16
 800171c:	0c1b      	lsrs	r3, r3, #16
 800171e:	435a      	muls	r2, r3
 8001720:	437b      	muls	r3, r7
 8001722:	469c      	mov	ip, r3
 8001724:	0c28      	lsrs	r0, r5, #16
 8001726:	4346      	muls	r6, r0
 8001728:	0c13      	lsrs	r3, r2, #16
 800172a:	44b4      	add	ip, r6
 800172c:	4463      	add	r3, ip
 800172e:	4378      	muls	r0, r7
 8001730:	429e      	cmp	r6, r3
 8001732:	d903      	bls.n	800173c <__aeabi_ddiv+0x3d0>
 8001734:	2680      	movs	r6, #128	; 0x80
 8001736:	0276      	lsls	r6, r6, #9
 8001738:	46b4      	mov	ip, r6
 800173a:	4460      	add	r0, ip
 800173c:	0c1e      	lsrs	r6, r3, #16
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	0c12      	lsrs	r2, r2, #16
 8001744:	1830      	adds	r0, r6, r0
 8001746:	189b      	adds	r3, r3, r2
 8001748:	4281      	cmp	r1, r0
 800174a:	d306      	bcc.n	800175a <__aeabi_ddiv+0x3ee>
 800174c:	d002      	beq.n	8001754 <__aeabi_ddiv+0x3e8>
 800174e:	2301      	movs	r3, #1
 8001750:	431d      	orrs	r5, r3
 8001752:	e6ce      	b.n	80014f2 <__aeabi_ddiv+0x186>
 8001754:	2b00      	cmp	r3, #0
 8001756:	d100      	bne.n	800175a <__aeabi_ddiv+0x3ee>
 8001758:	e6cb      	b.n	80014f2 <__aeabi_ddiv+0x186>
 800175a:	1861      	adds	r1, r4, r1
 800175c:	1e6e      	subs	r6, r5, #1
 800175e:	42a1      	cmp	r1, r4
 8001760:	d200      	bcs.n	8001764 <__aeabi_ddiv+0x3f8>
 8001762:	e0a4      	b.n	80018ae <__aeabi_ddiv+0x542>
 8001764:	4281      	cmp	r1, r0
 8001766:	d200      	bcs.n	800176a <__aeabi_ddiv+0x3fe>
 8001768:	e0c9      	b.n	80018fe <__aeabi_ddiv+0x592>
 800176a:	d100      	bne.n	800176e <__aeabi_ddiv+0x402>
 800176c:	e0d9      	b.n	8001922 <__aeabi_ddiv+0x5b6>
 800176e:	0035      	movs	r5, r6
 8001770:	e7ed      	b.n	800174e <__aeabi_ddiv+0x3e2>
 8001772:	2501      	movs	r5, #1
 8001774:	426d      	negs	r5, r5
 8001776:	2101      	movs	r1, #1
 8001778:	1a89      	subs	r1, r1, r2
 800177a:	2938      	cmp	r1, #56	; 0x38
 800177c:	dd00      	ble.n	8001780 <__aeabi_ddiv+0x414>
 800177e:	e64c      	b.n	800141a <__aeabi_ddiv+0xae>
 8001780:	291f      	cmp	r1, #31
 8001782:	dc00      	bgt.n	8001786 <__aeabi_ddiv+0x41a>
 8001784:	e07f      	b.n	8001886 <__aeabi_ddiv+0x51a>
 8001786:	231f      	movs	r3, #31
 8001788:	425b      	negs	r3, r3
 800178a:	1a9a      	subs	r2, r3, r2
 800178c:	4643      	mov	r3, r8
 800178e:	40d3      	lsrs	r3, r2
 8001790:	2920      	cmp	r1, #32
 8001792:	d004      	beq.n	800179e <__aeabi_ddiv+0x432>
 8001794:	4644      	mov	r4, r8
 8001796:	4a65      	ldr	r2, [pc, #404]	; (800192c <__aeabi_ddiv+0x5c0>)
 8001798:	445a      	add	r2, fp
 800179a:	4094      	lsls	r4, r2
 800179c:	4325      	orrs	r5, r4
 800179e:	1e6a      	subs	r2, r5, #1
 80017a0:	4195      	sbcs	r5, r2
 80017a2:	2207      	movs	r2, #7
 80017a4:	432b      	orrs	r3, r5
 80017a6:	0015      	movs	r5, r2
 80017a8:	2400      	movs	r4, #0
 80017aa:	401d      	ands	r5, r3
 80017ac:	421a      	tst	r2, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_ddiv+0x446>
 80017b0:	e0a1      	b.n	80018f6 <__aeabi_ddiv+0x58a>
 80017b2:	220f      	movs	r2, #15
 80017b4:	2400      	movs	r4, #0
 80017b6:	401a      	ands	r2, r3
 80017b8:	2a04      	cmp	r2, #4
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0x452>
 80017bc:	e098      	b.n	80018f0 <__aeabi_ddiv+0x584>
 80017be:	1d1a      	adds	r2, r3, #4
 80017c0:	429a      	cmp	r2, r3
 80017c2:	419b      	sbcs	r3, r3
 80017c4:	425b      	negs	r3, r3
 80017c6:	18e4      	adds	r4, r4, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	0222      	lsls	r2, r4, #8
 80017cc:	d400      	bmi.n	80017d0 <__aeabi_ddiv+0x464>
 80017ce:	e08f      	b.n	80018f0 <__aeabi_ddiv+0x584>
 80017d0:	2301      	movs	r3, #1
 80017d2:	2400      	movs	r4, #0
 80017d4:	2500      	movs	r5, #0
 80017d6:	e623      	b.n	8001420 <__aeabi_ddiv+0xb4>
 80017d8:	42b5      	cmp	r5, r6
 80017da:	d300      	bcc.n	80017de <__aeabi_ddiv+0x472>
 80017dc:	e764      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 80017de:	4643      	mov	r3, r8
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	9b00      	ldr	r3, [sp, #0]
 80017e4:	469c      	mov	ip, r3
 80017e6:	4465      	add	r5, ip
 80017e8:	001f      	movs	r7, r3
 80017ea:	429d      	cmp	r5, r3
 80017ec:	419b      	sbcs	r3, r3
 80017ee:	425b      	negs	r3, r3
 80017f0:	191b      	adds	r3, r3, r4
 80017f2:	18c9      	adds	r1, r1, r3
 80017f4:	428c      	cmp	r4, r1
 80017f6:	d23a      	bcs.n	800186e <__aeabi_ddiv+0x502>
 80017f8:	4288      	cmp	r0, r1
 80017fa:	d863      	bhi.n	80018c4 <__aeabi_ddiv+0x558>
 80017fc:	d060      	beq.n	80018c0 <__aeabi_ddiv+0x554>
 80017fe:	4690      	mov	r8, r2
 8001800:	e752      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 8001802:	42aa      	cmp	r2, r5
 8001804:	d900      	bls.n	8001808 <__aeabi_ddiv+0x49c>
 8001806:	e6ea      	b.n	80015de <__aeabi_ddiv+0x272>
 8001808:	4643      	mov	r3, r8
 800180a:	07de      	lsls	r6, r3, #31
 800180c:	0858      	lsrs	r0, r3, #1
 800180e:	086b      	lsrs	r3, r5, #1
 8001810:	431e      	orrs	r6, r3
 8001812:	07ed      	lsls	r5, r5, #31
 8001814:	e6ea      	b.n	80015ec <__aeabi_ddiv+0x280>
 8001816:	4648      	mov	r0, r9
 8001818:	f000 fb62 	bl	8001ee0 <__clzsi2>
 800181c:	0001      	movs	r1, r0
 800181e:	0002      	movs	r2, r0
 8001820:	3115      	adds	r1, #21
 8001822:	3220      	adds	r2, #32
 8001824:	291c      	cmp	r1, #28
 8001826:	dc00      	bgt.n	800182a <__aeabi_ddiv+0x4be>
 8001828:	e61a      	b.n	8001460 <__aeabi_ddiv+0xf4>
 800182a:	464b      	mov	r3, r9
 800182c:	3808      	subs	r0, #8
 800182e:	4083      	lsls	r3, r0
 8001830:	2500      	movs	r5, #0
 8001832:	4698      	mov	r8, r3
 8001834:	e620      	b.n	8001478 <__aeabi_ddiv+0x10c>
 8001836:	f000 fb53 	bl	8001ee0 <__clzsi2>
 800183a:	0003      	movs	r3, r0
 800183c:	001a      	movs	r2, r3
 800183e:	3215      	adds	r2, #21
 8001840:	3020      	adds	r0, #32
 8001842:	2a1c      	cmp	r2, #28
 8001844:	dc00      	bgt.n	8001848 <__aeabi_ddiv+0x4dc>
 8001846:	e630      	b.n	80014aa <__aeabi_ddiv+0x13e>
 8001848:	4654      	mov	r4, sl
 800184a:	3b08      	subs	r3, #8
 800184c:	2200      	movs	r2, #0
 800184e:	409c      	lsls	r4, r3
 8001850:	e635      	b.n	80014be <__aeabi_ddiv+0x152>
 8001852:	230f      	movs	r3, #15
 8001854:	402b      	ands	r3, r5
 8001856:	2b04      	cmp	r3, #4
 8001858:	d100      	bne.n	800185c <__aeabi_ddiv+0x4f0>
 800185a:	e652      	b.n	8001502 <__aeabi_ddiv+0x196>
 800185c:	2305      	movs	r3, #5
 800185e:	425b      	negs	r3, r3
 8001860:	42ab      	cmp	r3, r5
 8001862:	419b      	sbcs	r3, r3
 8001864:	3504      	adds	r5, #4
 8001866:	425b      	negs	r3, r3
 8001868:	08ed      	lsrs	r5, r5, #3
 800186a:	4498      	add	r8, r3
 800186c:	e64a      	b.n	8001504 <__aeabi_ddiv+0x198>
 800186e:	428c      	cmp	r4, r1
 8001870:	d1c5      	bne.n	80017fe <__aeabi_ddiv+0x492>
 8001872:	42af      	cmp	r7, r5
 8001874:	d9c0      	bls.n	80017f8 <__aeabi_ddiv+0x48c>
 8001876:	4690      	mov	r8, r2
 8001878:	e716      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 800187a:	428a      	cmp	r2, r1
 800187c:	d800      	bhi.n	8001880 <__aeabi_ddiv+0x514>
 800187e:	e6ea      	b.n	8001656 <__aeabi_ddiv+0x2ea>
 8001880:	1e83      	subs	r3, r0, #2
 8001882:	1909      	adds	r1, r1, r4
 8001884:	e6e7      	b.n	8001656 <__aeabi_ddiv+0x2ea>
 8001886:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <__aeabi_ddiv+0x5c4>)
 8001888:	0028      	movs	r0, r5
 800188a:	445a      	add	r2, fp
 800188c:	4643      	mov	r3, r8
 800188e:	4095      	lsls	r5, r2
 8001890:	4093      	lsls	r3, r2
 8001892:	40c8      	lsrs	r0, r1
 8001894:	1e6a      	subs	r2, r5, #1
 8001896:	4195      	sbcs	r5, r2
 8001898:	4644      	mov	r4, r8
 800189a:	4303      	orrs	r3, r0
 800189c:	432b      	orrs	r3, r5
 800189e:	40cc      	lsrs	r4, r1
 80018a0:	075a      	lsls	r2, r3, #29
 80018a2:	d092      	beq.n	80017ca <__aeabi_ddiv+0x45e>
 80018a4:	220f      	movs	r2, #15
 80018a6:	401a      	ands	r2, r3
 80018a8:	2a04      	cmp	r2, #4
 80018aa:	d188      	bne.n	80017be <__aeabi_ddiv+0x452>
 80018ac:	e78d      	b.n	80017ca <__aeabi_ddiv+0x45e>
 80018ae:	0035      	movs	r5, r6
 80018b0:	4281      	cmp	r1, r0
 80018b2:	d000      	beq.n	80018b6 <__aeabi_ddiv+0x54a>
 80018b4:	e74b      	b.n	800174e <__aeabi_ddiv+0x3e2>
 80018b6:	9a00      	ldr	r2, [sp, #0]
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d000      	beq.n	80018be <__aeabi_ddiv+0x552>
 80018bc:	e747      	b.n	800174e <__aeabi_ddiv+0x3e2>
 80018be:	e618      	b.n	80014f2 <__aeabi_ddiv+0x186>
 80018c0:	42ae      	cmp	r6, r5
 80018c2:	d99c      	bls.n	80017fe <__aeabi_ddiv+0x492>
 80018c4:	2302      	movs	r3, #2
 80018c6:	425b      	negs	r3, r3
 80018c8:	469c      	mov	ip, r3
 80018ca:	9b00      	ldr	r3, [sp, #0]
 80018cc:	44e0      	add	r8, ip
 80018ce:	469c      	mov	ip, r3
 80018d0:	4465      	add	r5, ip
 80018d2:	429d      	cmp	r5, r3
 80018d4:	419b      	sbcs	r3, r3
 80018d6:	425b      	negs	r3, r3
 80018d8:	191b      	adds	r3, r3, r4
 80018da:	18c9      	adds	r1, r1, r3
 80018dc:	e6e4      	b.n	80016a8 <__aeabi_ddiv+0x33c>
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <__aeabi_ddiv+0x5c8>)
 80018e0:	445a      	add	r2, fp
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	dc00      	bgt.n	80018e8 <__aeabi_ddiv+0x57c>
 80018e6:	e744      	b.n	8001772 <__aeabi_ddiv+0x406>
 80018e8:	2301      	movs	r3, #1
 80018ea:	2500      	movs	r5, #0
 80018ec:	4498      	add	r8, r3
 80018ee:	e609      	b.n	8001504 <__aeabi_ddiv+0x198>
 80018f0:	0765      	lsls	r5, r4, #29
 80018f2:	0264      	lsls	r4, r4, #9
 80018f4:	0b24      	lsrs	r4, r4, #12
 80018f6:	08db      	lsrs	r3, r3, #3
 80018f8:	431d      	orrs	r5, r3
 80018fa:	2300      	movs	r3, #0
 80018fc:	e590      	b.n	8001420 <__aeabi_ddiv+0xb4>
 80018fe:	9e00      	ldr	r6, [sp, #0]
 8001900:	3d02      	subs	r5, #2
 8001902:	0072      	lsls	r2, r6, #1
 8001904:	42b2      	cmp	r2, r6
 8001906:	41bf      	sbcs	r7, r7
 8001908:	427f      	negs	r7, r7
 800190a:	193c      	adds	r4, r7, r4
 800190c:	1909      	adds	r1, r1, r4
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	e7ce      	b.n	80018b0 <__aeabi_ddiv+0x544>
 8001912:	2480      	movs	r4, #128	; 0x80
 8001914:	4643      	mov	r3, r8
 8001916:	0324      	lsls	r4, r4, #12
 8001918:	431c      	orrs	r4, r3
 800191a:	0324      	lsls	r4, r4, #12
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <__aeabi_ddiv+0x5cc>)
 800191e:	0b24      	lsrs	r4, r4, #12
 8001920:	e57e      	b.n	8001420 <__aeabi_ddiv+0xb4>
 8001922:	9a00      	ldr	r2, [sp, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d3ea      	bcc.n	80018fe <__aeabi_ddiv+0x592>
 8001928:	0035      	movs	r5, r6
 800192a:	e7c4      	b.n	80018b6 <__aeabi_ddiv+0x54a>
 800192c:	0000043e 	.word	0x0000043e
 8001930:	0000041e 	.word	0x0000041e
 8001934:	000003ff 	.word	0x000003ff
 8001938:	000007ff 	.word	0x000007ff

0800193c <__aeabi_dmul>:
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193e:	4657      	mov	r7, sl
 8001940:	464e      	mov	r6, r9
 8001942:	4645      	mov	r5, r8
 8001944:	46de      	mov	lr, fp
 8001946:	b5e0      	push	{r5, r6, r7, lr}
 8001948:	4698      	mov	r8, r3
 800194a:	030c      	lsls	r4, r1, #12
 800194c:	004b      	lsls	r3, r1, #1
 800194e:	0006      	movs	r6, r0
 8001950:	4692      	mov	sl, r2
 8001952:	b087      	sub	sp, #28
 8001954:	0b24      	lsrs	r4, r4, #12
 8001956:	0d5b      	lsrs	r3, r3, #21
 8001958:	0fcf      	lsrs	r7, r1, #31
 800195a:	2b00      	cmp	r3, #0
 800195c:	d06c      	beq.n	8001a38 <__aeabi_dmul+0xfc>
 800195e:	4add      	ldr	r2, [pc, #884]	; (8001cd4 <__aeabi_dmul+0x398>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d100      	bne.n	8001966 <__aeabi_dmul+0x2a>
 8001964:	e086      	b.n	8001a74 <__aeabi_dmul+0x138>
 8001966:	0f42      	lsrs	r2, r0, #29
 8001968:	00e4      	lsls	r4, r4, #3
 800196a:	4314      	orrs	r4, r2
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	0412      	lsls	r2, r2, #16
 8001970:	4314      	orrs	r4, r2
 8001972:	4ad9      	ldr	r2, [pc, #868]	; (8001cd8 <__aeabi_dmul+0x39c>)
 8001974:	00c5      	lsls	r5, r0, #3
 8001976:	4694      	mov	ip, r2
 8001978:	4463      	add	r3, ip
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2300      	movs	r3, #0
 800197e:	4699      	mov	r9, r3
 8001980:	469b      	mov	fp, r3
 8001982:	4643      	mov	r3, r8
 8001984:	4642      	mov	r2, r8
 8001986:	031e      	lsls	r6, r3, #12
 8001988:	0fd2      	lsrs	r2, r2, #31
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4650      	mov	r0, sl
 800198e:	4690      	mov	r8, r2
 8001990:	0b36      	lsrs	r6, r6, #12
 8001992:	0d5b      	lsrs	r3, r3, #21
 8001994:	d100      	bne.n	8001998 <__aeabi_dmul+0x5c>
 8001996:	e078      	b.n	8001a8a <__aeabi_dmul+0x14e>
 8001998:	4ace      	ldr	r2, [pc, #824]	; (8001cd4 <__aeabi_dmul+0x398>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01d      	beq.n	80019da <__aeabi_dmul+0x9e>
 800199e:	49ce      	ldr	r1, [pc, #824]	; (8001cd8 <__aeabi_dmul+0x39c>)
 80019a0:	0f42      	lsrs	r2, r0, #29
 80019a2:	468c      	mov	ip, r1
 80019a4:	9900      	ldr	r1, [sp, #0]
 80019a6:	4463      	add	r3, ip
 80019a8:	00f6      	lsls	r6, r6, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4316      	orrs	r6, r2
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	449c      	add	ip, r3
 80019b2:	0412      	lsls	r2, r2, #16
 80019b4:	4663      	mov	r3, ip
 80019b6:	4316      	orrs	r6, r2
 80019b8:	00c2      	lsls	r2, r0, #3
 80019ba:	2000      	movs	r0, #0
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	9900      	ldr	r1, [sp, #0]
 80019c0:	4643      	mov	r3, r8
 80019c2:	3101      	adds	r1, #1
 80019c4:	468c      	mov	ip, r1
 80019c6:	4649      	mov	r1, r9
 80019c8:	407b      	eors	r3, r7
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	290f      	cmp	r1, #15
 80019ce:	d900      	bls.n	80019d2 <__aeabi_dmul+0x96>
 80019d0:	e07e      	b.n	8001ad0 <__aeabi_dmul+0x194>
 80019d2:	4bc2      	ldr	r3, [pc, #776]	; (8001cdc <__aeabi_dmul+0x3a0>)
 80019d4:	0089      	lsls	r1, r1, #2
 80019d6:	5859      	ldr	r1, [r3, r1]
 80019d8:	468f      	mov	pc, r1
 80019da:	4652      	mov	r2, sl
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	4332      	orrs	r2, r6
 80019e0:	d000      	beq.n	80019e4 <__aeabi_dmul+0xa8>
 80019e2:	e156      	b.n	8001c92 <__aeabi_dmul+0x356>
 80019e4:	49bb      	ldr	r1, [pc, #748]	; (8001cd4 <__aeabi_dmul+0x398>)
 80019e6:	2600      	movs	r6, #0
 80019e8:	468c      	mov	ip, r1
 80019ea:	4463      	add	r3, ip
 80019ec:	4649      	mov	r1, r9
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2302      	movs	r3, #2
 80019f2:	4319      	orrs	r1, r3
 80019f4:	4689      	mov	r9, r1
 80019f6:	2002      	movs	r0, #2
 80019f8:	e7e1      	b.n	80019be <__aeabi_dmul+0x82>
 80019fa:	4643      	mov	r3, r8
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	0034      	movs	r4, r6
 8001a00:	0015      	movs	r5, r2
 8001a02:	4683      	mov	fp, r0
 8001a04:	465b      	mov	r3, fp
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d05e      	beq.n	8001ac8 <__aeabi_dmul+0x18c>
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dmul+0xd4>
 8001a0e:	e1f3      	b.n	8001df8 <__aeabi_dmul+0x4bc>
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dmul+0xda>
 8001a14:	e118      	b.n	8001c48 <__aeabi_dmul+0x30c>
 8001a16:	2200      	movs	r2, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	9b01      	ldr	r3, [sp, #4]
 8001a1e:	0512      	lsls	r2, r2, #20
 8001a20:	4322      	orrs	r2, r4
 8001a22:	07db      	lsls	r3, r3, #31
 8001a24:	431a      	orrs	r2, r3
 8001a26:	0028      	movs	r0, r5
 8001a28:	0011      	movs	r1, r2
 8001a2a:	b007      	add	sp, #28
 8001a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a2e:	46bb      	mov	fp, r7
 8001a30:	46b2      	mov	sl, r6
 8001a32:	46a9      	mov	r9, r5
 8001a34:	46a0      	mov	r8, r4
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a38:	0025      	movs	r5, r4
 8001a3a:	4305      	orrs	r5, r0
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dmul+0x104>
 8001a3e:	e141      	b.n	8001cc4 <__aeabi_dmul+0x388>
 8001a40:	2c00      	cmp	r4, #0
 8001a42:	d100      	bne.n	8001a46 <__aeabi_dmul+0x10a>
 8001a44:	e1ad      	b.n	8001da2 <__aeabi_dmul+0x466>
 8001a46:	0020      	movs	r0, r4
 8001a48:	f000 fa4a 	bl	8001ee0 <__clzsi2>
 8001a4c:	0001      	movs	r1, r0
 8001a4e:	0002      	movs	r2, r0
 8001a50:	390b      	subs	r1, #11
 8001a52:	231d      	movs	r3, #29
 8001a54:	0010      	movs	r0, r2
 8001a56:	1a5b      	subs	r3, r3, r1
 8001a58:	0031      	movs	r1, r6
 8001a5a:	0035      	movs	r5, r6
 8001a5c:	3808      	subs	r0, #8
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	40d9      	lsrs	r1, r3
 8001a62:	4085      	lsls	r5, r0
 8001a64:	430c      	orrs	r4, r1
 8001a66:	489e      	ldr	r0, [pc, #632]	; (8001ce0 <__aeabi_dmul+0x3a4>)
 8001a68:	1a83      	subs	r3, r0, r2
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	4699      	mov	r9, r3
 8001a70:	469b      	mov	fp, r3
 8001a72:	e786      	b.n	8001982 <__aeabi_dmul+0x46>
 8001a74:	0005      	movs	r5, r0
 8001a76:	4325      	orrs	r5, r4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dmul+0x140>
 8001a7a:	e11c      	b.n	8001cb6 <__aeabi_dmul+0x37a>
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2302      	movs	r3, #2
 8001a82:	2400      	movs	r4, #0
 8001a84:	4691      	mov	r9, r2
 8001a86:	469b      	mov	fp, r3
 8001a88:	e77b      	b.n	8001982 <__aeabi_dmul+0x46>
 8001a8a:	4652      	mov	r2, sl
 8001a8c:	4332      	orrs	r2, r6
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dmul+0x156>
 8001a90:	e10a      	b.n	8001ca8 <__aeabi_dmul+0x36c>
 8001a92:	2e00      	cmp	r6, #0
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dmul+0x15c>
 8001a96:	e176      	b.n	8001d86 <__aeabi_dmul+0x44a>
 8001a98:	0030      	movs	r0, r6
 8001a9a:	f000 fa21 	bl	8001ee0 <__clzsi2>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	3a0b      	subs	r2, #11
 8001aa2:	231d      	movs	r3, #29
 8001aa4:	0001      	movs	r1, r0
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	4652      	mov	r2, sl
 8001aaa:	3908      	subs	r1, #8
 8001aac:	40da      	lsrs	r2, r3
 8001aae:	408e      	lsls	r6, r1
 8001ab0:	4316      	orrs	r6, r2
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	408a      	lsls	r2, r1
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	4989      	ldr	r1, [pc, #548]	; (8001ce0 <__aeabi_dmul+0x3a4>)
 8001aba:	1a18      	subs	r0, r3, r0
 8001abc:	0003      	movs	r3, r0
 8001abe:	468c      	mov	ip, r1
 8001ac0:	4463      	add	r3, ip
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	e77a      	b.n	80019be <__aeabi_dmul+0x82>
 8001ac8:	2400      	movs	r4, #0
 8001aca:	2500      	movs	r5, #0
 8001acc:	4a81      	ldr	r2, [pc, #516]	; (8001cd4 <__aeabi_dmul+0x398>)
 8001ace:	e7a5      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001ad0:	0c2f      	lsrs	r7, r5, #16
 8001ad2:	042d      	lsls	r5, r5, #16
 8001ad4:	0c2d      	lsrs	r5, r5, #16
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	0c11      	lsrs	r1, r2, #16
 8001ada:	0412      	lsls	r2, r2, #16
 8001adc:	0c12      	lsrs	r2, r2, #16
 8001ade:	4353      	muls	r3, r2
 8001ae0:	4698      	mov	r8, r3
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	0028      	movs	r0, r5
 8001ae6:	437b      	muls	r3, r7
 8001ae8:	4699      	mov	r9, r3
 8001aea:	4348      	muls	r0, r1
 8001aec:	4448      	add	r0, r9
 8001aee:	4683      	mov	fp, r0
 8001af0:	4640      	mov	r0, r8
 8001af2:	000b      	movs	r3, r1
 8001af4:	0c00      	lsrs	r0, r0, #16
 8001af6:	4682      	mov	sl, r0
 8001af8:	4658      	mov	r0, fp
 8001afa:	437b      	muls	r3, r7
 8001afc:	4450      	add	r0, sl
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	4581      	cmp	r9, r0
 8001b02:	d906      	bls.n	8001b12 <__aeabi_dmul+0x1d6>
 8001b04:	469a      	mov	sl, r3
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	025b      	lsls	r3, r3, #9
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	44ca      	add	sl, r9
 8001b0e:	4653      	mov	r3, sl
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	0c03      	lsrs	r3, r0, #16
 8001b14:	469b      	mov	fp, r3
 8001b16:	4643      	mov	r3, r8
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	0400      	lsls	r0, r0, #16
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	4698      	mov	r8, r3
 8001b20:	0003      	movs	r3, r0
 8001b22:	4443      	add	r3, r8
 8001b24:	9304      	str	r3, [sp, #16]
 8001b26:	0c33      	lsrs	r3, r6, #16
 8001b28:	4699      	mov	r9, r3
 8001b2a:	002b      	movs	r3, r5
 8001b2c:	0436      	lsls	r6, r6, #16
 8001b2e:	0c36      	lsrs	r6, r6, #16
 8001b30:	4373      	muls	r3, r6
 8001b32:	4698      	mov	r8, r3
 8001b34:	0033      	movs	r3, r6
 8001b36:	437b      	muls	r3, r7
 8001b38:	469a      	mov	sl, r3
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	435d      	muls	r5, r3
 8001b3e:	435f      	muls	r7, r3
 8001b40:	4643      	mov	r3, r8
 8001b42:	4455      	add	r5, sl
 8001b44:	0c18      	lsrs	r0, r3, #16
 8001b46:	1940      	adds	r0, r0, r5
 8001b48:	4582      	cmp	sl, r0
 8001b4a:	d903      	bls.n	8001b54 <__aeabi_dmul+0x218>
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	025b      	lsls	r3, r3, #9
 8001b50:	469a      	mov	sl, r3
 8001b52:	4457      	add	r7, sl
 8001b54:	0c05      	lsrs	r5, r0, #16
 8001b56:	19eb      	adds	r3, r5, r7
 8001b58:	9305      	str	r3, [sp, #20]
 8001b5a:	4643      	mov	r3, r8
 8001b5c:	041d      	lsls	r5, r3, #16
 8001b5e:	0c2d      	lsrs	r5, r5, #16
 8001b60:	0400      	lsls	r0, r0, #16
 8001b62:	1940      	adds	r0, r0, r5
 8001b64:	0c25      	lsrs	r5, r4, #16
 8001b66:	0424      	lsls	r4, r4, #16
 8001b68:	0c24      	lsrs	r4, r4, #16
 8001b6a:	0027      	movs	r7, r4
 8001b6c:	4357      	muls	r7, r2
 8001b6e:	436a      	muls	r2, r5
 8001b70:	4690      	mov	r8, r2
 8001b72:	002a      	movs	r2, r5
 8001b74:	0c3b      	lsrs	r3, r7, #16
 8001b76:	469a      	mov	sl, r3
 8001b78:	434a      	muls	r2, r1
 8001b7a:	4361      	muls	r1, r4
 8001b7c:	4441      	add	r1, r8
 8001b7e:	4451      	add	r1, sl
 8001b80:	4483      	add	fp, r0
 8001b82:	4588      	cmp	r8, r1
 8001b84:	d903      	bls.n	8001b8e <__aeabi_dmul+0x252>
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	025b      	lsls	r3, r3, #9
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	4442      	add	r2, r8
 8001b8e:	043f      	lsls	r7, r7, #16
 8001b90:	0c0b      	lsrs	r3, r1, #16
 8001b92:	0c3f      	lsrs	r7, r7, #16
 8001b94:	0409      	lsls	r1, r1, #16
 8001b96:	19c9      	adds	r1, r1, r7
 8001b98:	0027      	movs	r7, r4
 8001b9a:	4698      	mov	r8, r3
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	4377      	muls	r7, r6
 8001ba0:	435c      	muls	r4, r3
 8001ba2:	436e      	muls	r6, r5
 8001ba4:	435d      	muls	r5, r3
 8001ba6:	0c3b      	lsrs	r3, r7, #16
 8001ba8:	4699      	mov	r9, r3
 8001baa:	19a4      	adds	r4, r4, r6
 8001bac:	444c      	add	r4, r9
 8001bae:	4442      	add	r2, r8
 8001bb0:	9503      	str	r5, [sp, #12]
 8001bb2:	42a6      	cmp	r6, r4
 8001bb4:	d904      	bls.n	8001bc0 <__aeabi_dmul+0x284>
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	025b      	lsls	r3, r3, #9
 8001bba:	4698      	mov	r8, r3
 8001bbc:	4445      	add	r5, r8
 8001bbe:	9503      	str	r5, [sp, #12]
 8001bc0:	9b02      	ldr	r3, [sp, #8]
 8001bc2:	043f      	lsls	r7, r7, #16
 8001bc4:	445b      	add	r3, fp
 8001bc6:	001e      	movs	r6, r3
 8001bc8:	4283      	cmp	r3, r0
 8001bca:	4180      	sbcs	r0, r0
 8001bcc:	0423      	lsls	r3, r4, #16
 8001bce:	4698      	mov	r8, r3
 8001bd0:	9b05      	ldr	r3, [sp, #20]
 8001bd2:	0c3f      	lsrs	r7, r7, #16
 8001bd4:	4447      	add	r7, r8
 8001bd6:	4698      	mov	r8, r3
 8001bd8:	1876      	adds	r6, r6, r1
 8001bda:	428e      	cmp	r6, r1
 8001bdc:	4189      	sbcs	r1, r1
 8001bde:	4447      	add	r7, r8
 8001be0:	4240      	negs	r0, r0
 8001be2:	183d      	adds	r5, r7, r0
 8001be4:	46a8      	mov	r8, r5
 8001be6:	4693      	mov	fp, r2
 8001be8:	4249      	negs	r1, r1
 8001bea:	468a      	mov	sl, r1
 8001bec:	44c3      	add	fp, r8
 8001bee:	429f      	cmp	r7, r3
 8001bf0:	41bf      	sbcs	r7, r7
 8001bf2:	4580      	cmp	r8, r0
 8001bf4:	4180      	sbcs	r0, r0
 8001bf6:	9b03      	ldr	r3, [sp, #12]
 8001bf8:	44da      	add	sl, fp
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	4653      	mov	r3, sl
 8001bfe:	4240      	negs	r0, r0
 8001c00:	427f      	negs	r7, r7
 8001c02:	4307      	orrs	r7, r0
 8001c04:	0c24      	lsrs	r4, r4, #16
 8001c06:	4593      	cmp	fp, r2
 8001c08:	4192      	sbcs	r2, r2
 8001c0a:	458a      	cmp	sl, r1
 8001c0c:	4189      	sbcs	r1, r1
 8001c0e:	193f      	adds	r7, r7, r4
 8001c10:	0ddc      	lsrs	r4, r3, #23
 8001c12:	9b04      	ldr	r3, [sp, #16]
 8001c14:	0275      	lsls	r5, r6, #9
 8001c16:	431d      	orrs	r5, r3
 8001c18:	1e68      	subs	r0, r5, #1
 8001c1a:	4185      	sbcs	r5, r0
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	4252      	negs	r2, r2
 8001c20:	4249      	negs	r1, r1
 8001c22:	430a      	orrs	r2, r1
 8001c24:	18bf      	adds	r7, r7, r2
 8001c26:	4447      	add	r7, r8
 8001c28:	0df6      	lsrs	r6, r6, #23
 8001c2a:	027f      	lsls	r7, r7, #9
 8001c2c:	4335      	orrs	r5, r6
 8001c2e:	025a      	lsls	r2, r3, #9
 8001c30:	433c      	orrs	r4, r7
 8001c32:	4315      	orrs	r5, r2
 8001c34:	01fb      	lsls	r3, r7, #7
 8001c36:	d400      	bmi.n	8001c3a <__aeabi_dmul+0x2fe>
 8001c38:	e0c1      	b.n	8001dbe <__aeabi_dmul+0x482>
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	086a      	lsrs	r2, r5, #1
 8001c3e:	400d      	ands	r5, r1
 8001c40:	4315      	orrs	r5, r2
 8001c42:	07e2      	lsls	r2, r4, #31
 8001c44:	4315      	orrs	r5, r2
 8001c46:	0864      	lsrs	r4, r4, #1
 8001c48:	4926      	ldr	r1, [pc, #152]	; (8001ce4 <__aeabi_dmul+0x3a8>)
 8001c4a:	4461      	add	r1, ip
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	dd56      	ble.n	8001cfe <__aeabi_dmul+0x3c2>
 8001c50:	076b      	lsls	r3, r5, #29
 8001c52:	d009      	beq.n	8001c68 <__aeabi_dmul+0x32c>
 8001c54:	220f      	movs	r2, #15
 8001c56:	402a      	ands	r2, r5
 8001c58:	2a04      	cmp	r2, #4
 8001c5a:	d005      	beq.n	8001c68 <__aeabi_dmul+0x32c>
 8001c5c:	1d2a      	adds	r2, r5, #4
 8001c5e:	42aa      	cmp	r2, r5
 8001c60:	41ad      	sbcs	r5, r5
 8001c62:	426d      	negs	r5, r5
 8001c64:	1964      	adds	r4, r4, r5
 8001c66:	0015      	movs	r5, r2
 8001c68:	01e3      	lsls	r3, r4, #7
 8001c6a:	d504      	bpl.n	8001c76 <__aeabi_dmul+0x33a>
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <__aeabi_dmul+0x3ac>)
 8001c70:	00c9      	lsls	r1, r1, #3
 8001c72:	4014      	ands	r4, r2
 8001c74:	4461      	add	r1, ip
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <__aeabi_dmul+0x3b0>)
 8001c78:	4291      	cmp	r1, r2
 8001c7a:	dd00      	ble.n	8001c7e <__aeabi_dmul+0x342>
 8001c7c:	e724      	b.n	8001ac8 <__aeabi_dmul+0x18c>
 8001c7e:	0762      	lsls	r2, r4, #29
 8001c80:	08ed      	lsrs	r5, r5, #3
 8001c82:	0264      	lsls	r4, r4, #9
 8001c84:	0549      	lsls	r1, r1, #21
 8001c86:	4315      	orrs	r5, r2
 8001c88:	0b24      	lsrs	r4, r4, #12
 8001c8a:	0d4a      	lsrs	r2, r1, #21
 8001c8c:	e6c6      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001c8e:	9701      	str	r7, [sp, #4]
 8001c90:	e6b8      	b.n	8001a04 <__aeabi_dmul+0xc8>
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <__aeabi_dmul+0x398>)
 8001c94:	2003      	movs	r0, #3
 8001c96:	4694      	mov	ip, r2
 8001c98:	4463      	add	r3, ip
 8001c9a:	464a      	mov	r2, r9
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	4691      	mov	r9, r2
 8001ca4:	4652      	mov	r2, sl
 8001ca6:	e68a      	b.n	80019be <__aeabi_dmul+0x82>
 8001ca8:	4649      	mov	r1, r9
 8001caa:	2301      	movs	r3, #1
 8001cac:	4319      	orrs	r1, r3
 8001cae:	4689      	mov	r9, r1
 8001cb0:	2600      	movs	r6, #0
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	e683      	b.n	80019be <__aeabi_dmul+0x82>
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2303      	movs	r3, #3
 8001cbc:	0005      	movs	r5, r0
 8001cbe:	4691      	mov	r9, r2
 8001cc0:	469b      	mov	fp, r3
 8001cc2:	e65e      	b.n	8001982 <__aeabi_dmul+0x46>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	4699      	mov	r9, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	2400      	movs	r4, #0
 8001cd0:	469b      	mov	fp, r3
 8001cd2:	e656      	b.n	8001982 <__aeabi_dmul+0x46>
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	fffffc01 	.word	0xfffffc01
 8001cdc:	08006ba8 	.word	0x08006ba8
 8001ce0:	fffffc0d 	.word	0xfffffc0d
 8001ce4:	000003ff 	.word	0x000003ff
 8001ce8:	feffffff 	.word	0xfeffffff
 8001cec:	000007fe 	.word	0x000007fe
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2480      	movs	r4, #128	; 0x80
 8001cf4:	2500      	movs	r5, #0
 8001cf6:	4a44      	ldr	r2, [pc, #272]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	0324      	lsls	r4, r4, #12
 8001cfc:	e68e      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001cfe:	2001      	movs	r0, #1
 8001d00:	1a40      	subs	r0, r0, r1
 8001d02:	2838      	cmp	r0, #56	; 0x38
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dmul+0x3cc>
 8001d06:	e686      	b.n	8001a16 <__aeabi_dmul+0xda>
 8001d08:	281f      	cmp	r0, #31
 8001d0a:	dd5b      	ble.n	8001dc4 <__aeabi_dmul+0x488>
 8001d0c:	221f      	movs	r2, #31
 8001d0e:	0023      	movs	r3, r4
 8001d10:	4252      	negs	r2, r2
 8001d12:	1a51      	subs	r1, r2, r1
 8001d14:	40cb      	lsrs	r3, r1
 8001d16:	0019      	movs	r1, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d003      	beq.n	8001d24 <__aeabi_dmul+0x3e8>
 8001d1c:	4a3b      	ldr	r2, [pc, #236]	; (8001e0c <__aeabi_dmul+0x4d0>)
 8001d1e:	4462      	add	r2, ip
 8001d20:	4094      	lsls	r4, r2
 8001d22:	4325      	orrs	r5, r4
 8001d24:	1e6a      	subs	r2, r5, #1
 8001d26:	4195      	sbcs	r5, r2
 8001d28:	002a      	movs	r2, r5
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	2107      	movs	r1, #7
 8001d2e:	000d      	movs	r5, r1
 8001d30:	2400      	movs	r4, #0
 8001d32:	4015      	ands	r5, r2
 8001d34:	4211      	tst	r1, r2
 8001d36:	d05b      	beq.n	8001df0 <__aeabi_dmul+0x4b4>
 8001d38:	210f      	movs	r1, #15
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	4011      	ands	r1, r2
 8001d3e:	2904      	cmp	r1, #4
 8001d40:	d053      	beq.n	8001dea <__aeabi_dmul+0x4ae>
 8001d42:	1d11      	adds	r1, r2, #4
 8001d44:	4291      	cmp	r1, r2
 8001d46:	4192      	sbcs	r2, r2
 8001d48:	4252      	negs	r2, r2
 8001d4a:	18a4      	adds	r4, r4, r2
 8001d4c:	000a      	movs	r2, r1
 8001d4e:	0223      	lsls	r3, r4, #8
 8001d50:	d54b      	bpl.n	8001dea <__aeabi_dmul+0x4ae>
 8001d52:	2201      	movs	r2, #1
 8001d54:	2400      	movs	r4, #0
 8001d56:	2500      	movs	r5, #0
 8001d58:	e660      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	031b      	lsls	r3, r3, #12
 8001d5e:	421c      	tst	r4, r3
 8001d60:	d009      	beq.n	8001d76 <__aeabi_dmul+0x43a>
 8001d62:	421e      	tst	r6, r3
 8001d64:	d107      	bne.n	8001d76 <__aeabi_dmul+0x43a>
 8001d66:	4333      	orrs	r3, r6
 8001d68:	031c      	lsls	r4, r3, #12
 8001d6a:	4643      	mov	r3, r8
 8001d6c:	0015      	movs	r5, r2
 8001d6e:	0b24      	lsrs	r4, r4, #12
 8001d70:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	e652      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0312      	lsls	r2, r2, #12
 8001d7a:	4314      	orrs	r4, r2
 8001d7c:	0324      	lsls	r4, r4, #12
 8001d7e:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001d80:	0b24      	lsrs	r4, r4, #12
 8001d82:	9701      	str	r7, [sp, #4]
 8001d84:	e64a      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001d86:	f000 f8ab 	bl	8001ee0 <__clzsi2>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	3215      	adds	r2, #21
 8001d90:	3020      	adds	r0, #32
 8001d92:	2a1c      	cmp	r2, #28
 8001d94:	dc00      	bgt.n	8001d98 <__aeabi_dmul+0x45c>
 8001d96:	e684      	b.n	8001aa2 <__aeabi_dmul+0x166>
 8001d98:	4656      	mov	r6, sl
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	409e      	lsls	r6, r3
 8001da0:	e689      	b.n	8001ab6 <__aeabi_dmul+0x17a>
 8001da2:	f000 f89d 	bl	8001ee0 <__clzsi2>
 8001da6:	0001      	movs	r1, r0
 8001da8:	0002      	movs	r2, r0
 8001daa:	3115      	adds	r1, #21
 8001dac:	3220      	adds	r2, #32
 8001dae:	291c      	cmp	r1, #28
 8001db0:	dc00      	bgt.n	8001db4 <__aeabi_dmul+0x478>
 8001db2:	e64e      	b.n	8001a52 <__aeabi_dmul+0x116>
 8001db4:	0034      	movs	r4, r6
 8001db6:	3808      	subs	r0, #8
 8001db8:	2500      	movs	r5, #0
 8001dba:	4084      	lsls	r4, r0
 8001dbc:	e653      	b.n	8001a66 <__aeabi_dmul+0x12a>
 8001dbe:	9b00      	ldr	r3, [sp, #0]
 8001dc0:	469c      	mov	ip, r3
 8001dc2:	e741      	b.n	8001c48 <__aeabi_dmul+0x30c>
 8001dc4:	4912      	ldr	r1, [pc, #72]	; (8001e10 <__aeabi_dmul+0x4d4>)
 8001dc6:	0022      	movs	r2, r4
 8001dc8:	4461      	add	r1, ip
 8001dca:	002e      	movs	r6, r5
 8001dcc:	408d      	lsls	r5, r1
 8001dce:	408a      	lsls	r2, r1
 8001dd0:	40c6      	lsrs	r6, r0
 8001dd2:	1e69      	subs	r1, r5, #1
 8001dd4:	418d      	sbcs	r5, r1
 8001dd6:	4332      	orrs	r2, r6
 8001dd8:	432a      	orrs	r2, r5
 8001dda:	40c4      	lsrs	r4, r0
 8001ddc:	0753      	lsls	r3, r2, #29
 8001dde:	d0b6      	beq.n	8001d4e <__aeabi_dmul+0x412>
 8001de0:	210f      	movs	r1, #15
 8001de2:	4011      	ands	r1, r2
 8001de4:	2904      	cmp	r1, #4
 8001de6:	d1ac      	bne.n	8001d42 <__aeabi_dmul+0x406>
 8001de8:	e7b1      	b.n	8001d4e <__aeabi_dmul+0x412>
 8001dea:	0765      	lsls	r5, r4, #29
 8001dec:	0264      	lsls	r4, r4, #9
 8001dee:	0b24      	lsrs	r4, r4, #12
 8001df0:	08d2      	lsrs	r2, r2, #3
 8001df2:	4315      	orrs	r5, r2
 8001df4:	2200      	movs	r2, #0
 8001df6:	e611      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	0312      	lsls	r2, r2, #12
 8001dfc:	4314      	orrs	r4, r2
 8001dfe:	0324      	lsls	r4, r4, #12
 8001e00:	4a01      	ldr	r2, [pc, #4]	; (8001e08 <__aeabi_dmul+0x4cc>)
 8001e02:	0b24      	lsrs	r4, r4, #12
 8001e04:	e60a      	b.n	8001a1c <__aeabi_dmul+0xe0>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	0000043e 	.word	0x0000043e
 8001e10:	0000041e 	.word	0x0000041e

08001e14 <__aeabi_d2iz>:
 8001e14:	000a      	movs	r2, r1
 8001e16:	b530      	push	{r4, r5, lr}
 8001e18:	4c13      	ldr	r4, [pc, #76]	; (8001e68 <__aeabi_d2iz+0x54>)
 8001e1a:	0053      	lsls	r3, r2, #1
 8001e1c:	0309      	lsls	r1, r1, #12
 8001e1e:	0005      	movs	r5, r0
 8001e20:	0b09      	lsrs	r1, r1, #12
 8001e22:	2000      	movs	r0, #0
 8001e24:	0d5b      	lsrs	r3, r3, #21
 8001e26:	0fd2      	lsrs	r2, r2, #31
 8001e28:	42a3      	cmp	r3, r4
 8001e2a:	dd04      	ble.n	8001e36 <__aeabi_d2iz+0x22>
 8001e2c:	480f      	ldr	r0, [pc, #60]	; (8001e6c <__aeabi_d2iz+0x58>)
 8001e2e:	4283      	cmp	r3, r0
 8001e30:	dd02      	ble.n	8001e38 <__aeabi_d2iz+0x24>
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <__aeabi_d2iz+0x5c>)
 8001e34:	18d0      	adds	r0, r2, r3
 8001e36:	bd30      	pop	{r4, r5, pc}
 8001e38:	2080      	movs	r0, #128	; 0x80
 8001e3a:	0340      	lsls	r0, r0, #13
 8001e3c:	4301      	orrs	r1, r0
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <__aeabi_d2iz+0x60>)
 8001e40:	1ac0      	subs	r0, r0, r3
 8001e42:	281f      	cmp	r0, #31
 8001e44:	dd08      	ble.n	8001e58 <__aeabi_d2iz+0x44>
 8001e46:	480c      	ldr	r0, [pc, #48]	; (8001e78 <__aeabi_d2iz+0x64>)
 8001e48:	1ac3      	subs	r3, r0, r3
 8001e4a:	40d9      	lsrs	r1, r3
 8001e4c:	000b      	movs	r3, r1
 8001e4e:	4258      	negs	r0, r3
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d1f0      	bne.n	8001e36 <__aeabi_d2iz+0x22>
 8001e54:	0018      	movs	r0, r3
 8001e56:	e7ee      	b.n	8001e36 <__aeabi_d2iz+0x22>
 8001e58:	4c08      	ldr	r4, [pc, #32]	; (8001e7c <__aeabi_d2iz+0x68>)
 8001e5a:	40c5      	lsrs	r5, r0
 8001e5c:	46a4      	mov	ip, r4
 8001e5e:	4463      	add	r3, ip
 8001e60:	4099      	lsls	r1, r3
 8001e62:	000b      	movs	r3, r1
 8001e64:	432b      	orrs	r3, r5
 8001e66:	e7f2      	b.n	8001e4e <__aeabi_d2iz+0x3a>
 8001e68:	000003fe 	.word	0x000003fe
 8001e6c:	0000041d 	.word	0x0000041d
 8001e70:	7fffffff 	.word	0x7fffffff
 8001e74:	00000433 	.word	0x00000433
 8001e78:	00000413 	.word	0x00000413
 8001e7c:	fffffbed 	.word	0xfffffbed

08001e80 <__aeabi_i2d>:
 8001e80:	b570      	push	{r4, r5, r6, lr}
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d016      	beq.n	8001eb4 <__aeabi_i2d+0x34>
 8001e86:	17c3      	asrs	r3, r0, #31
 8001e88:	18c5      	adds	r5, r0, r3
 8001e8a:	405d      	eors	r5, r3
 8001e8c:	0fc4      	lsrs	r4, r0, #31
 8001e8e:	0028      	movs	r0, r5
 8001e90:	f000 f826 	bl	8001ee0 <__clzsi2>
 8001e94:	4a11      	ldr	r2, [pc, #68]	; (8001edc <__aeabi_i2d+0x5c>)
 8001e96:	1a12      	subs	r2, r2, r0
 8001e98:	280a      	cmp	r0, #10
 8001e9a:	dc16      	bgt.n	8001eca <__aeabi_i2d+0x4a>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	002e      	movs	r6, r5
 8001ea0:	3315      	adds	r3, #21
 8001ea2:	409e      	lsls	r6, r3
 8001ea4:	230b      	movs	r3, #11
 8001ea6:	1a18      	subs	r0, r3, r0
 8001ea8:	40c5      	lsrs	r5, r0
 8001eaa:	0553      	lsls	r3, r2, #21
 8001eac:	032d      	lsls	r5, r5, #12
 8001eae:	0b2d      	lsrs	r5, r5, #12
 8001eb0:	0d5b      	lsrs	r3, r3, #21
 8001eb2:	e003      	b.n	8001ebc <__aeabi_i2d+0x3c>
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2500      	movs	r5, #0
 8001eba:	2600      	movs	r6, #0
 8001ebc:	051b      	lsls	r3, r3, #20
 8001ebe:	432b      	orrs	r3, r5
 8001ec0:	07e4      	lsls	r4, r4, #31
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	0030      	movs	r0, r6
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
 8001eca:	380b      	subs	r0, #11
 8001ecc:	4085      	lsls	r5, r0
 8001ece:	0553      	lsls	r3, r2, #21
 8001ed0:	032d      	lsls	r5, r5, #12
 8001ed2:	2600      	movs	r6, #0
 8001ed4:	0b2d      	lsrs	r5, r5, #12
 8001ed6:	0d5b      	lsrs	r3, r3, #21
 8001ed8:	e7f0      	b.n	8001ebc <__aeabi_i2d+0x3c>
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	0000041e 	.word	0x0000041e

08001ee0 <__clzsi2>:
 8001ee0:	211c      	movs	r1, #28
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	4298      	cmp	r0, r3
 8001ee8:	d301      	bcc.n	8001eee <__clzsi2+0xe>
 8001eea:	0c00      	lsrs	r0, r0, #16
 8001eec:	3910      	subs	r1, #16
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	4298      	cmp	r0, r3
 8001ef2:	d301      	bcc.n	8001ef8 <__clzsi2+0x18>
 8001ef4:	0a00      	lsrs	r0, r0, #8
 8001ef6:	3908      	subs	r1, #8
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	4298      	cmp	r0, r3
 8001efc:	d301      	bcc.n	8001f02 <__clzsi2+0x22>
 8001efe:	0900      	lsrs	r0, r0, #4
 8001f00:	3904      	subs	r1, #4
 8001f02:	a202      	add	r2, pc, #8	; (adr r2, 8001f0c <__clzsi2+0x2c>)
 8001f04:	5c10      	ldrb	r0, [r2, r0]
 8001f06:	1840      	adds	r0, r0, r1
 8001f08:	4770      	bx	lr
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	02020304 	.word	0x02020304
 8001f10:	01010101 	.word	0x01010101
	...

08001f1c <__clzdi2>:
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	2900      	cmp	r1, #0
 8001f20:	d103      	bne.n	8001f2a <__clzdi2+0xe>
 8001f22:	f7ff ffdd 	bl	8001ee0 <__clzsi2>
 8001f26:	3020      	adds	r0, #32
 8001f28:	e002      	b.n	8001f30 <__clzdi2+0x14>
 8001f2a:	1c08      	adds	r0, r1, #0
 8001f2c:	f7ff ffd8 	bl	8001ee0 <__clzsi2>
 8001f30:	bd10      	pop	{r4, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)

08001f34 <bq_init>:
#include "stm32l0xx_hal.h"
#include "i2c.h"

#define I2C hi2c1

int bq_init(){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	// return BAT_INIT_FAIL if not able to init (BAT_INIT_SUCCESS for success)

	/* === Set BQ Max Battery Capacity === */
	if (BQ27441_setCapacity(BAT_CAP_MAX) != BAT_INIT_SUCCESS) return BAT_INIT_FAIL;
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <bq_init+0x34>)
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f818 	bl	8001f70 <BQ27441_setCapacity>
 8001f40:	0003      	movs	r3, r0
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d002      	beq.n	8001f4c <bq_init+0x18>
 8001f46:	2301      	movs	r3, #1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	e00a      	b.n	8001f62 <bq_init+0x2e>
	/* === Set BQ Max Battery Energy === */
	/*
		Design Energy should be set to be Design Capacity × 3.7 if using the bq27441-G1A or Design
		Capacity × 3.8 if using the bq27441-G1B
	*/
	if (BQ27441_setDesignEnergy((uint16_t) ((float) BAT_CAP_MAX * 3.7)) != BAT_INIT_SUCCESS) return BAT_INIT_FAIL;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <bq_init+0x38>)
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f834 	bl	8001fbc <BQ27441_setDesignEnergy>
 8001f54:	0003      	movs	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d002      	beq.n	8001f60 <bq_init+0x2c>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	425b      	negs	r3, r3
 8001f5e:	e000      	b.n	8001f62 <bq_init+0x2e>
//	retval = BQ27441_writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
//	if (retval != BAT_INIT_SUCCESS)
//		return BAT_INIT_FAIL;


	return BAT_INIT_SUCCESS;
 8001f60:	2301      	movs	r3, #1
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	00001130 	.word	0x00001130
 8001f6c:	00003f98 	.word	0x00003f98

08001f70 <BQ27441_setCapacity>:
 ************************** Initialization Functions *************************
 *****************************************************************************/

// Configures the design capacity of the connected battery.
int BQ27441_setCapacity(uint16_t capacity)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	0002      	movs	r2, r0
 8001f78:	1dbb      	adds	r3, r7, #6
 8001f7a:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0A (10)
	// Design capacity is a 2-byte piece of data - MSB first
	// Unit: mAh

	uint8_t capMSB = capacity >> 8;
 8001f7c:	1dbb      	adds	r3, r7, #6
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	200f      	movs	r0, #15
 8001f86:	183b      	adds	r3, r7, r0
 8001f88:	701a      	strb	r2, [r3, #0]
	uint8_t capLSB = capacity & 0x00FF;
 8001f8a:	240e      	movs	r4, #14
 8001f8c:	193b      	adds	r3, r7, r4
 8001f8e:	1dba      	adds	r2, r7, #6
 8001f90:	8812      	ldrh	r2, [r2, #0]
 8001f92:	701a      	strb	r2, [r3, #0]
	uint8_t capacityData[2] = {capLSB, capMSB};
 8001f94:	210c      	movs	r1, #12
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	193a      	adds	r2, r7, r4
 8001f9a:	7812      	ldrb	r2, [r2, #0]
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	183a      	adds	r2, r7, r0
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	705a      	strb	r2, [r3, #1]
	return BQ27441_writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
 8001fa6:	187a      	adds	r2, r7, r1
 8001fa8:	2302      	movs	r3, #2
 8001faa:	210a      	movs	r1, #10
 8001fac:	2052      	movs	r0, #82	; 0x52
 8001fae:	f000 f94b 	bl	8002248 <BQ27441_writeExtendedData>
 8001fb2:	0003      	movs	r3, r0
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b005      	add	sp, #20
 8001fba:	bd90      	pop	{r4, r7, pc}

08001fbc <BQ27441_setDesignEnergy>:

// Configures the design energy of the connected battery.
int BQ27441_setDesignEnergy(uint16_t energy)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	1dbb      	adds	r3, r7, #6
 8001fc6:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0C (12)
	// Design energy is a 2-byte piece of data - MSB first
	// Unit: mWh

	uint8_t enMSB = energy >> 8;
 8001fc8:	1dbb      	adds	r3, r7, #6
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	200f      	movs	r0, #15
 8001fd2:	183b      	adds	r3, r7, r0
 8001fd4:	701a      	strb	r2, [r3, #0]
	uint8_t enLSB = energy & 0x00FF;
 8001fd6:	240e      	movs	r4, #14
 8001fd8:	193b      	adds	r3, r7, r4
 8001fda:	1dba      	adds	r2, r7, #6
 8001fdc:	8812      	ldrh	r2, [r2, #0]
 8001fde:	701a      	strb	r2, [r3, #0]
	uint8_t energyData[2] = {enLSB, enMSB};
 8001fe0:	210c      	movs	r1, #12
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	193a      	adds	r2, r7, r4
 8001fe6:	7812      	ldrb	r2, [r2, #0]
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	187b      	adds	r3, r7, r1
 8001fec:	183a      	adds	r2, r7, r0
 8001fee:	7812      	ldrb	r2, [r2, #0]
 8001ff0:	705a      	strb	r2, [r3, #1]
	return BQ27441_writeExtendedData(BQ27441_ID_STATE, 12, energyData, 2);
 8001ff2:	187a      	adds	r2, r7, r1
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	210c      	movs	r1, #12
 8001ff8:	2052      	movs	r0, #82	; 0x52
 8001ffa:	f000 f925 	bl	8002248 <BQ27441_writeExtendedData>
 8001ffe:	0003      	movs	r3, r0
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b005      	add	sp, #20
 8002006:	bd90      	pop	{r4, r7, pc}

08002008 <BQ27441_voltage>:
/*****************************************************************************
 ********************** Battery Characteristics Functions ********************
 *****************************************************************************/
// Reads and returns the battery voltage
uint16_t BQ27441_voltage(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	return BQ27441_readWord(BQ27441_COMMAND_VOLTAGE);
 800200c:	2004      	movs	r0, #4
 800200e:	f000 f983 	bl	8002318 <BQ27441_readWord>
 8002012:	0003      	movs	r3, r0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <BQ27441_current>:

// Reads and returns the specified current measurement
int16_t BQ27441_current(current_measure type)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	0002      	movs	r2, r0
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	701a      	strb	r2, [r3, #0]
	int16_t current = 0;
 8002026:	230e      	movs	r3, #14
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2200      	movs	r2, #0
 800202c:	801a      	strh	r2, [r3, #0]
	switch (type)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d017      	beq.n	8002066 <BQ27441_current+0x4c>
 8002036:	dc1f      	bgt.n	8002078 <BQ27441_current+0x5e>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <BQ27441_current+0x28>
 800203c:	2b01      	cmp	r3, #1
 800203e:	d009      	beq.n	8002054 <BQ27441_current+0x3a>
 8002040:	e01a      	b.n	8002078 <BQ27441_current+0x5e>
	{
	case AVG:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_CURRENT);
 8002042:	2010      	movs	r0, #16
 8002044:	f000 f968 	bl	8002318 <BQ27441_readWord>
 8002048:	0003      	movs	r3, r0
 800204a:	001a      	movs	r2, r3
 800204c:	230e      	movs	r3, #14
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	801a      	strh	r2, [r3, #0]
		break;
 8002052:	e011      	b.n	8002078 <BQ27441_current+0x5e>
	case STBY:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_STDBY_CURRENT);
 8002054:	2012      	movs	r0, #18
 8002056:	f000 f95f 	bl	8002318 <BQ27441_readWord>
 800205a:	0003      	movs	r3, r0
 800205c:	001a      	movs	r2, r3
 800205e:	230e      	movs	r3, #14
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	801a      	strh	r2, [r3, #0]
		break;
 8002064:	e008      	b.n	8002078 <BQ27441_current+0x5e>
	case MAX:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_MAX_CURRENT);
 8002066:	2014      	movs	r0, #20
 8002068:	f000 f956 	bl	8002318 <BQ27441_readWord>
 800206c:	0003      	movs	r3, r0
 800206e:	001a      	movs	r2, r3
 8002070:	230e      	movs	r3, #14
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	801a      	strh	r2, [r3, #0]
		break;
 8002076:	46c0      	nop			; (mov r8, r8)
	}

	return current;
 8002078:	230e      	movs	r3, #14
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	2200      	movs	r2, #0
 800207e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b004      	add	sp, #16
 8002086:	bd80      	pop	{r7, pc}

08002088 <BQ27441_capacity>:

// Reads and returns the specified capacity measurement
uint16_t BQ27441_capacity(capacity_measure type)
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	0002      	movs	r2, r0
 8002090:	1dfb      	adds	r3, r7, #7
 8002092:	701a      	strb	r2, [r3, #0]
	uint16_t capacity = 0;
 8002094:	230e      	movs	r3, #14
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2200      	movs	r2, #0
 800209a:	801a      	strh	r2, [r3, #0]
	switch (type)
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d845      	bhi.n	8002130 <BQ27441_capacity+0xa8>
 80020a4:	009a      	lsls	r2, r3, #2
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <BQ27441_capacity+0xb8>)
 80020a8:	18d3      	adds	r3, r2, r3
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	469f      	mov	pc, r3
	{
	case REMAIN:
		return BQ27441_readWord(BQ27441_COMMAND_REM_CAPACITY);
 80020ae:	200c      	movs	r0, #12
 80020b0:	f000 f932 	bl	8002318 <BQ27441_readWord>
 80020b4:	0003      	movs	r3, r0
 80020b6:	e03e      	b.n	8002136 <BQ27441_capacity+0xae>
		break;
	case FULL:
		return BQ27441_readWord(BQ27441_COMMAND_FULL_CAPACITY);
 80020b8:	200e      	movs	r0, #14
 80020ba:	f000 f92d 	bl	8002318 <BQ27441_readWord>
 80020be:	0003      	movs	r3, r0
 80020c0:	e039      	b.n	8002136 <BQ27441_capacity+0xae>
		break;
	case AVAIL:
		capacity = BQ27441_readWord(BQ27441_COMMAND_NOM_CAPACITY);
 80020c2:	230e      	movs	r3, #14
 80020c4:	18fc      	adds	r4, r7, r3
 80020c6:	2008      	movs	r0, #8
 80020c8:	f000 f926 	bl	8002318 <BQ27441_readWord>
 80020cc:	0003      	movs	r3, r0
 80020ce:	8023      	strh	r3, [r4, #0]
		break;
 80020d0:	e02e      	b.n	8002130 <BQ27441_capacity+0xa8>
	case AVAIL_FULL:
		capacity = BQ27441_readWord(BQ27441_COMMAND_AVAIL_CAPACITY);
 80020d2:	230e      	movs	r3, #14
 80020d4:	18fc      	adds	r4, r7, r3
 80020d6:	200a      	movs	r0, #10
 80020d8:	f000 f91e 	bl	8002318 <BQ27441_readWord>
 80020dc:	0003      	movs	r3, r0
 80020de:	8023      	strh	r3, [r4, #0]
		break;
 80020e0:	e026      	b.n	8002130 <BQ27441_capacity+0xa8>
	case REMAIN_F:
		capacity = BQ27441_readWord(BQ27441_COMMAND_REM_CAP_FIL);
 80020e2:	230e      	movs	r3, #14
 80020e4:	18fc      	adds	r4, r7, r3
 80020e6:	202a      	movs	r0, #42	; 0x2a
 80020e8:	f000 f916 	bl	8002318 <BQ27441_readWord>
 80020ec:	0003      	movs	r3, r0
 80020ee:	8023      	strh	r3, [r4, #0]
		break;
 80020f0:	e01e      	b.n	8002130 <BQ27441_capacity+0xa8>
	case REMAIN_UF:
		capacity = BQ27441_readWord(BQ27441_COMMAND_REM_CAP_UNFL);
 80020f2:	230e      	movs	r3, #14
 80020f4:	18fc      	adds	r4, r7, r3
 80020f6:	2028      	movs	r0, #40	; 0x28
 80020f8:	f000 f90e 	bl	8002318 <BQ27441_readWord>
 80020fc:	0003      	movs	r3, r0
 80020fe:	8023      	strh	r3, [r4, #0]
		break;
 8002100:	e016      	b.n	8002130 <BQ27441_capacity+0xa8>
	case FULL_F:
		capacity = BQ27441_readWord(BQ27441_COMMAND_FULL_CAP_FIL);
 8002102:	230e      	movs	r3, #14
 8002104:	18fc      	adds	r4, r7, r3
 8002106:	202e      	movs	r0, #46	; 0x2e
 8002108:	f000 f906 	bl	8002318 <BQ27441_readWord>
 800210c:	0003      	movs	r3, r0
 800210e:	8023      	strh	r3, [r4, #0]
		break;
 8002110:	e00e      	b.n	8002130 <BQ27441_capacity+0xa8>
	case FULL_UF:
		capacity = BQ27441_readWord(BQ27441_COMMAND_FULL_CAP_UNFL);
 8002112:	230e      	movs	r3, #14
 8002114:	18fc      	adds	r4, r7, r3
 8002116:	202c      	movs	r0, #44	; 0x2c
 8002118:	f000 f8fe 	bl	8002318 <BQ27441_readWord>
 800211c:	0003      	movs	r3, r0
 800211e:	8023      	strh	r3, [r4, #0]
		break;
 8002120:	e006      	b.n	8002130 <BQ27441_capacity+0xa8>
	case DESIGN:
		capacity = BQ27441_readWord(BQ27441_EXTENDED_CAPACITY);
 8002122:	230e      	movs	r3, #14
 8002124:	18fc      	adds	r4, r7, r3
 8002126:	203c      	movs	r0, #60	; 0x3c
 8002128:	f000 f8f6 	bl	8002318 <BQ27441_readWord>
 800212c:	0003      	movs	r3, r0
 800212e:	8023      	strh	r3, [r4, #0]
//		capacity = BQ27441_readWord(0x4A);
	}

	return capacity;
 8002130:	230e      	movs	r3, #14
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	881b      	ldrh	r3, [r3, #0]
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b005      	add	sp, #20
 800213c:	bd90      	pop	{r4, r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	08006be8 	.word	0x08006be8

08002144 <BQ27441_power>:

// Reads and returns measured average power
int16_t BQ27441_power(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
 8002148:	2018      	movs	r0, #24
 800214a:	f000 f8e5 	bl	8002318 <BQ27441_readWord>
 800214e:	0003      	movs	r3, r0
 8002150:	b21b      	sxth	r3, r3
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <BQ27441_soc>:

// Reads and returns specified state of charge measurement
uint16_t BQ27441_soc(soc_measure type)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	0002      	movs	r2, r0
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	701a      	strb	r2, [r3, #0]
	uint16_t socRet = 0;
 8002164:	230e      	movs	r3, #14
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
	switch (type)
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <BQ27441_soc+0x22>
 8002174:	2b01      	cmp	r3, #1
 8002176:	d008      	beq.n	800218a <BQ27441_soc+0x32>
 8002178:	e00f      	b.n	800219a <BQ27441_soc+0x42>
	{
	case FILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 800217a:	230e      	movs	r3, #14
 800217c:	18fc      	adds	r4, r7, r3
 800217e:	201c      	movs	r0, #28
 8002180:	f000 f8ca 	bl	8002318 <BQ27441_readWord>
 8002184:	0003      	movs	r3, r0
 8002186:	8023      	strh	r3, [r4, #0]
		break;
 8002188:	e007      	b.n	800219a <BQ27441_soc+0x42>
	case UNFILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 800218a:	230e      	movs	r3, #14
 800218c:	18fc      	adds	r4, r7, r3
 800218e:	2030      	movs	r0, #48	; 0x30
 8002190:	f000 f8c2 	bl	8002318 <BQ27441_readWord>
 8002194:	0003      	movs	r3, r0
 8002196:	8023      	strh	r3, [r4, #0]
		break;
 8002198:	46c0      	nop			; (mov r8, r8)
	}

	return socRet;
 800219a:	230e      	movs	r3, #14
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	881b      	ldrh	r3, [r3, #0]
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b005      	add	sp, #20
 80021a6:	bd90      	pop	{r4, r7, pc}

080021a8 <BQ27441_soh>:

// Reads and returns specified state of health measurement
uint8_t BQ27441_soh(soh_measure type)
{
 80021a8:	b5b0      	push	{r4, r5, r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	0002      	movs	r2, r0
 80021b0:	1dfb      	adds	r3, r7, #7
 80021b2:	701a      	strb	r2, [r3, #0]
	uint16_t sohRaw = BQ27441_readWord(BQ27441_COMMAND_SOH);
 80021b4:	250e      	movs	r5, #14
 80021b6:	197c      	adds	r4, r7, r5
 80021b8:	2020      	movs	r0, #32
 80021ba:	f000 f8ad 	bl	8002318 <BQ27441_readWord>
 80021be:	0003      	movs	r3, r0
 80021c0:	8023      	strh	r3, [r4, #0]
	uint8_t sohStatus = sohRaw >> 8;
 80021c2:	0029      	movs	r1, r5
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	230d      	movs	r3, #13
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	701a      	strb	r2, [r3, #0]
	uint8_t sohPercent = sohRaw & 0x00FF;
 80021d2:	200c      	movs	r0, #12
 80021d4:	183b      	adds	r3, r7, r0
 80021d6:	187a      	adds	r2, r7, r1
 80021d8:	8812      	ldrh	r2, [r2, #0]
 80021da:	701a      	strb	r2, [r3, #0]

	if (type == PERCENT)
 80021dc:	1dfb      	adds	r3, r7, #7
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <BQ27441_soh+0x42>
		return sohPercent;
 80021e4:	183b      	adds	r3, r7, r0
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	e002      	b.n	80021f0 <BQ27441_soh+0x48>
	else
		return sohStatus;
 80021ea:	230d      	movs	r3, #13
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	781b      	ldrb	r3, [r3, #0]
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b004      	add	sp, #16
 80021f6:	bdb0      	pop	{r4, r5, r7, pc}

080021f8 <BQ27441_temperature>:

// Reads and returns specified temperature measurement
uint16_t BQ27441_temperature(temp_measure type)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	0002      	movs	r2, r0
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	701a      	strb	r2, [r3, #0]
	uint16_t temp = 0;
 8002204:	230e      	movs	r3, #14
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2200      	movs	r2, #0
 800220a:	801a      	strh	r2, [r3, #0]
	switch (type)
 800220c:	1dfb      	adds	r3, r7, #7
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <BQ27441_temperature+0x22>
 8002214:	2b01      	cmp	r3, #1
 8002216:	d008      	beq.n	800222a <BQ27441_temperature+0x32>
 8002218:	e00f      	b.n	800223a <BQ27441_temperature+0x42>
	{
	case BATTERY:
		temp = BQ27441_readWord(BQ27441_COMMAND_TEMP);
 800221a:	230e      	movs	r3, #14
 800221c:	18fc      	adds	r4, r7, r3
 800221e:	2002      	movs	r0, #2
 8002220:	f000 f87a 	bl	8002318 <BQ27441_readWord>
 8002224:	0003      	movs	r3, r0
 8002226:	8023      	strh	r3, [r4, #0]
		break;
 8002228:	e007      	b.n	800223a <BQ27441_temperature+0x42>
	case INTERNAL_TEMP:
		temp = BQ27441_readWord(BQ27441_COMMAND_INT_TEMP);
 800222a:	230e      	movs	r3, #14
 800222c:	18fc      	adds	r4, r7, r3
 800222e:	201e      	movs	r0, #30
 8002230:	f000 f872 	bl	8002318 <BQ27441_readWord>
 8002234:	0003      	movs	r3, r0
 8002236:	8023      	strh	r3, [r4, #0]
		break;
 8002238:	46c0      	nop			; (mov r8, r8)
	}
	return temp;
 800223a:	230e      	movs	r3, #14
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	881b      	ldrh	r3, [r3, #0]
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	b005      	add	sp, #20
 8002246:	bd90      	pop	{r4, r7, pc}

08002248 <BQ27441_writeExtendedData>:
 *****************************************************************************/

// Write a specified number of bytes to extended data specifying a
// class ID, position offset.
int BQ27441_writeExtendedData(uint8_t classID, uint8_t offset, uint8_t * data, uint8_t len)
{
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	0004      	movs	r4, r0
 8002250:	0008      	movs	r0, r1
 8002252:	603a      	str	r2, [r7, #0]
 8002254:	0019      	movs	r1, r3
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	1c22      	adds	r2, r4, #0
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	1dbb      	adds	r3, r7, #6
 800225e:	1c02      	adds	r2, r0, #0
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	1d7b      	adds	r3, r7, #5
 8002264:	1c0a      	adds	r2, r1, #0
 8002266:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;	// I2C return status

	if (len > 32)
 8002268:	1d7b      	adds	r3, r7, #5
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b20      	cmp	r3, #32
 800226e:	d902      	bls.n	8002276 <BQ27441_writeExtendedData+0x2e>
		return BAT_INIT_FAIL;
 8002270:	2301      	movs	r3, #1
 8002272:	425b      	negs	r3, r3
 8002274:	e04c      	b.n	8002310 <BQ27441_writeExtendedData+0xc8>

	ret = BQ27441_blockDataControl();
 8002276:	250b      	movs	r5, #11
 8002278:	197c      	adds	r4, r7, r5
 800227a:	f000 f873 	bl	8002364 <BQ27441_blockDataControl>
 800227e:	0003      	movs	r3, r0
 8002280:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) // // enable block data memory control
 8002282:	197b      	adds	r3, r7, r5
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <BQ27441_writeExtendedData+0x48>
		return BAT_INIT_FAIL; // Return false if enable fails
 800228a:	2301      	movs	r3, #1
 800228c:	425b      	negs	r3, r3
 800228e:	e03f      	b.n	8002310 <BQ27441_writeExtendedData+0xc8>
	if (BQ27441_blockDataClass(classID) != HAL_OK) // Write class ID using DataBlockClass()
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 f87f 	bl	8002398 <BQ27441_blockDataClass>
 800229a:	1e03      	subs	r3, r0, #0
 800229c:	d002      	beq.n	80022a4 <BQ27441_writeExtendedData+0x5c>
		return BAT_INIT_FAIL;
 800229e:	2301      	movs	r3, #1
 80022a0:	425b      	negs	r3, r3
 80022a2:	e035      	b.n	8002310 <BQ27441_writeExtendedData+0xc8>

	BQ27441_blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
 80022a4:	1dbb      	adds	r3, r7, #6
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 f88d 	bl	80023cc <BQ27441_blockDataOffset>
	BQ27441_computeBlockChecksum(); // Compute checksum going in
 80022b2:	f000 f8bd 	bl	8002430 <BQ27441_computeBlockChecksum>
	uint8_t oldCsum = BQ27441_blockDataChecksum();
 80022b6:	230a      	movs	r3, #10
 80022b8:	18fc      	adds	r4, r7, r3
 80022ba:	f000 f8a1 	bl	8002400 <BQ27441_blockDataChecksum>
 80022be:	0003      	movs	r3, r0
 80022c0:	7023      	strb	r3, [r4, #0]

	// Write data bytes:
	for (int i = 0; i < len; i++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e012      	b.n	80022ee <BQ27441_writeExtendedData+0xa6>
	{
		// Write to offset, mod 32 if offset is greater than 32
		// The blockDataOffset above sets the 32-bit block
		BQ27441_writeBlockData((offset % 32) + i, data[i]);
 80022c8:	1dbb      	adds	r3, r7, #6
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	221f      	movs	r2, #31
 80022ce:	4013      	ands	r3, r2
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	18d3      	adds	r3, r2, r3
 80022d8:	b2d8      	uxtb	r0, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	18d3      	adds	r3, r2, r3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	0019      	movs	r1, r3
 80022e4:	f000 f8f4 	bl	80024d0 <BQ27441_writeBlockData>
	for (int i = 0; i < len; i++)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3301      	adds	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	1d7b      	adds	r3, r7, #5
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbe7      	blt.n	80022c8 <BQ27441_writeExtendedData+0x80>
	}

	// Write new checksum using BlockDataChecksum (0x60)
	uint8_t newCsum = BQ27441_computeBlockChecksum(); // Compute the new checksum
 80022f8:	2509      	movs	r5, #9
 80022fa:	197c      	adds	r4, r7, r5
 80022fc:	f000 f898 	bl	8002430 <BQ27441_computeBlockChecksum>
 8002300:	0003      	movs	r3, r0
 8002302:	7023      	strb	r3, [r4, #0]
	BQ27441_writeBlockChecksum(newCsum);
 8002304:	197b      	adds	r3, r7, r5
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 f8c7 	bl	800249c <BQ27441_writeBlockChecksum>


	return BAT_INIT_SUCCESS;
 800230e:	2301      	movs	r3, #1
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b004      	add	sp, #16
 8002316:	bdb0      	pop	{r4, r5, r7, pc}

08002318 <BQ27441_readWord>:

// Read a 16-bit command word from the BQ27441-G1A
uint16_t BQ27441_readWord(uint16_t subAddress)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af04      	add	r7, sp, #16
 800231e:	0002      	movs	r2, r0
 8002320:	1dbb      	adds	r3, r7, #6
 8002322:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
//	i2cReadBytes(subAddress, data, 2);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), subAddress, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8002324:	1dbb      	adds	r3, r7, #6
 8002326:	881a      	ldrh	r2, [r3, #0]
 8002328:	480d      	ldr	r0, [pc, #52]	; (8002360 <BQ27441_readWord+0x48>)
 800232a:	2301      	movs	r3, #1
 800232c:	425b      	negs	r3, r3
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	2302      	movs	r3, #2
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	240c      	movs	r4, #12
 8002336:	193b      	adds	r3, r7, r4
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2301      	movs	r3, #1
 800233c:	21aa      	movs	r1, #170	; 0xaa
 800233e:	f001 ff55 	bl	80041ec <HAL_I2C_Mem_Read>
	return ((uint16_t) data[1] << 8) | data[0];
 8002342:	0021      	movs	r1, r4
 8002344:	187b      	adds	r3, r7, r1
 8002346:	785b      	ldrb	r3, [r3, #1]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	b21a      	sxth	r2, r3
 800234c:	187b      	adds	r3, r7, r1
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b21b      	sxth	r3, r3
 8002352:	4313      	orrs	r3, r2
 8002354:	b21b      	sxth	r3, r3
 8002356:	b29b      	uxth	r3, r3
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b005      	add	sp, #20
 800235e:	bd90      	pop	{r4, r7, pc}
 8002360:	200000e0 	.word	0x200000e0

08002364 <BQ27441_blockDataControl>:

// Issue a BlockDataControl() command to enable BlockData access
HAL_StatusTypeDef BQ27441_blockDataControl(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af04      	add	r7, sp, #16
	uint8_t enableByte = 0x00;
 800236a:	1dfb      	adds	r3, r7, #7
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_CONTROL, &enableByte, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CONTROL, I2C_MEMADD_SIZE_8BIT, &enableByte, 1, HAL_MAX_DELAY);
 8002370:	4808      	ldr	r0, [pc, #32]	; (8002394 <BQ27441_blockDataControl+0x30>)
 8002372:	2301      	movs	r3, #1
 8002374:	425b      	negs	r3, r3
 8002376:	9302      	str	r3, [sp, #8]
 8002378:	2301      	movs	r3, #1
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	2301      	movs	r3, #1
 8002382:	2261      	movs	r2, #97	; 0x61
 8002384:	21aa      	movs	r1, #170	; 0xaa
 8002386:	f001 fe03 	bl	8003f90 <HAL_I2C_Mem_Write>
 800238a:	0003      	movs	r3, r0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200000e0 	.word	0x200000e0

08002398 <BQ27441_blockDataClass>:

// Issue a DataClass() command to set the data class to be accessed
HAL_StatusTypeDef BQ27441_blockDataClass(uint8_t id)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af04      	add	r7, sp, #16
 800239e:	0002      	movs	r2, r0
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_DATACLASS, &id, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_DATACLASS, I2C_MEMADD_SIZE_8BIT, &id, 1, HAL_MAX_DELAY);
 80023a4:	4808      	ldr	r0, [pc, #32]	; (80023c8 <BQ27441_blockDataClass+0x30>)
 80023a6:	2301      	movs	r3, #1
 80023a8:	425b      	negs	r3, r3
 80023aa:	9302      	str	r3, [sp, #8]
 80023ac:	2301      	movs	r3, #1
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	1dfb      	adds	r3, r7, #7
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2301      	movs	r3, #1
 80023b6:	223e      	movs	r2, #62	; 0x3e
 80023b8:	21aa      	movs	r1, #170	; 0xaa
 80023ba:	f001 fde9 	bl	8003f90 <HAL_I2C_Mem_Write>
 80023be:	0003      	movs	r3, r0

}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200000e0 	.word	0x200000e0

080023cc <BQ27441_blockDataOffset>:

// Issue a DataBlock() command to set the data block to be accessed
HAL_StatusTypeDef BQ27441_blockDataOffset(uint8_t offset)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af04      	add	r7, sp, #16
 80023d2:	0002      	movs	r2, r0
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_DATABLOCK, &offset, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_DATABLOCK, I2C_MEMADD_SIZE_8BIT, &offset, 1, HAL_MAX_DELAY);
 80023d8:	4808      	ldr	r0, [pc, #32]	; (80023fc <BQ27441_blockDataOffset+0x30>)
 80023da:	2301      	movs	r3, #1
 80023dc:	425b      	negs	r3, r3
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	2301      	movs	r3, #1
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2301      	movs	r3, #1
 80023ea:	223f      	movs	r2, #63	; 0x3f
 80023ec:	21aa      	movs	r1, #170	; 0xaa
 80023ee:	f001 fdcf 	bl	8003f90 <HAL_I2C_Mem_Write>
 80023f2:	0003      	movs	r3, r0

}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200000e0 	.word	0x200000e0

08002400 <BQ27441_blockDataChecksum>:

// Read the current checksum using BlockDataCheckSum()
uint8_t BQ27441_blockDataChecksum(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af04      	add	r7, sp, #16
	uint8_t csum;
//	i2cReadBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, &csum, 1, HAL_MAX_DELAY);
 8002406:	4809      	ldr	r0, [pc, #36]	; (800242c <BQ27441_blockDataChecksum+0x2c>)
 8002408:	2301      	movs	r3, #1
 800240a:	425b      	negs	r3, r3
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	2301      	movs	r3, #1
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	2260      	movs	r2, #96	; 0x60
 800241a:	21aa      	movs	r1, #170	; 0xaa
 800241c:	f001 fee6 	bl	80041ec <HAL_I2C_Mem_Read>
	return csum;
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	781b      	ldrb	r3, [r3, #0]
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200000e0 	.word	0x200000e0

08002430 <BQ27441_computeBlockChecksum>:

// Read all 32 bytes of the loaded extended data and compute a
// checksum based on the values.
uint8_t BQ27441_computeBlockChecksum(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	; 0x38
 8002434:	af04      	add	r7, sp, #16
	uint8_t data[32];
	// i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, data, 32, HAL_MAX_DELAY);
 8002436:	4818      	ldr	r0, [pc, #96]	; (8002498 <BQ27441_computeBlockChecksum+0x68>)
 8002438:	2301      	movs	r3, #1
 800243a:	425b      	negs	r3, r3
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	2320      	movs	r3, #32
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	003b      	movs	r3, r7
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2301      	movs	r3, #1
 8002448:	2260      	movs	r2, #96	; 0x60
 800244a:	21aa      	movs	r1, #170	; 0xaa
 800244c:	f001 fece 	bl	80041ec <HAL_I2C_Mem_Read>


	uint8_t csum = 0;
 8002450:	2327      	movs	r3, #39	; 0x27
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
 800245c:	e00c      	b.n	8002478 <BQ27441_computeBlockChecksum+0x48>
	{
		csum += data[i];
 800245e:	003a      	movs	r2, r7
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	18d3      	adds	r3, r2, r3
 8002464:	7819      	ldrb	r1, [r3, #0]
 8002466:	2227      	movs	r2, #39	; 0x27
 8002468:	18bb      	adds	r3, r7, r2
 800246a:	18ba      	adds	r2, r7, r2
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	188a      	adds	r2, r1, r2
 8002470:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	3301      	adds	r3, #1
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	2b1f      	cmp	r3, #31
 800247c:	ddef      	ble.n	800245e <BQ27441_computeBlockChecksum+0x2e>
	}
	csum = 255 - csum;
 800247e:	2127      	movs	r1, #39	; 0x27
 8002480:	187b      	adds	r3, r7, r1
 8002482:	187a      	adds	r2, r7, r1
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	43d2      	mvns	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

	return csum;
 800248a:	187b      	adds	r3, r7, r1
 800248c:	781b      	ldrb	r3, [r3, #0]
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b00a      	add	sp, #40	; 0x28
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	200000e0 	.word	0x200000e0

0800249c <BQ27441_writeBlockChecksum>:

// Use the BlockDataCheckSum() command to write a checksum value
HAL_StatusTypeDef BQ27441_writeBlockChecksum(uint8_t csum)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af04      	add	r7, sp, #16
 80024a2:	0002      	movs	r2, r0
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	701a      	strb	r2, [r3, #0]
	//return i2cWriteBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, &csum, 1, HAL_MAX_DELAY);
 80024a8:	4808      	ldr	r0, [pc, #32]	; (80024cc <BQ27441_writeBlockChecksum+0x30>)
 80024aa:	2301      	movs	r3, #1
 80024ac:	425b      	negs	r3, r3
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	2301      	movs	r3, #1
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2301      	movs	r3, #1
 80024ba:	2260      	movs	r2, #96	; 0x60
 80024bc:	21aa      	movs	r1, #170	; 0xaa
 80024be:	f001 fd67 	bl	8003f90 <HAL_I2C_Mem_Write>
 80024c2:	0003      	movs	r3, r0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200000e0 	.word	0x200000e0

080024d0 <BQ27441_writeBlockData>:

// Use BlockData() to write a byte to an offset of the loaded data
HAL_StatusTypeDef BQ27441_writeBlockData(uint8_t offset, uint8_t data)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af04      	add	r7, sp, #16
 80024d6:	0002      	movs	r2, r0
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	1dbb      	adds	r3, r7, #6
 80024de:	1c0a      	adds	r2, r1, #0
 80024e0:	701a      	strb	r2, [r3, #0]
	uint8_t address = offset + BQ27441_EXTENDED_BLOCKDATA;
 80024e2:	210f      	movs	r1, #15
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	1dfa      	adds	r2, r7, #7
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	3240      	adds	r2, #64	; 0x40
 80024ec:	701a      	strb	r2, [r3, #0]
	//return i2cWriteBytes(address, &data, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), address, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4808      	ldr	r0, [pc, #32]	; (8002518 <BQ27441_writeBlockData+0x48>)
 80024f6:	2301      	movs	r3, #1
 80024f8:	425b      	negs	r3, r3
 80024fa:	9302      	str	r3, [sp, #8]
 80024fc:	2301      	movs	r3, #1
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	1dbb      	adds	r3, r7, #6
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2301      	movs	r3, #1
 8002506:	21aa      	movs	r1, #170	; 0xaa
 8002508:	f001 fd42 	bl	8003f90 <HAL_I2C_Mem_Write>
 800250c:	0003      	movs	r3, r0

}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b004      	add	sp, #16
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	200000e0 	.word	0x200000e0

0800251c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_GPIO_Init+0x40>)
 8002524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <MX_GPIO_Init+0x40>)
 8002528:	2101      	movs	r1, #1
 800252a:	430a      	orrs	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_GPIO_Init+0x40>)
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	2201      	movs	r2, #1
 8002534:	4013      	ands	r3, r2
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <MX_GPIO_Init+0x40>)
 800253c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <MX_GPIO_Init+0x40>)
 8002540:	2102      	movs	r1, #2
 8002542:	430a      	orrs	r2, r1
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <MX_GPIO_Init+0x40>)
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	683b      	ldr	r3, [r7, #0]

}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b002      	add	sp, #8
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	40021000 	.word	0x40021000

08002560 <hts221_reboot>:
int hts221_calc_temp(int16_t T_OUT, HTS_Cal * hts_cal_data);
int hts221_calc_humid(int16_t H_OUT, HTS_Cal * hts_cal_data);
int hts221_reboot(void);

// Function code
int hts221_reboot() {
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b087      	sub	sp, #28
 8002564:	af04      	add	r7, sp, #16
    uint8_t buf[1];			// read buffer

    /* === Reboot HTS221 === */

    //read register
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002566:	1dfc      	adds	r4, r7, #7
 8002568:	482a      	ldr	r0, [pc, #168]	; (8002614 <hts221_reboot+0xb4>)
 800256a:	2301      	movs	r3, #1
 800256c:	425b      	negs	r3, r3
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	2301      	movs	r3, #1
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2301      	movs	r3, #1
 800257a:	2221      	movs	r2, #33	; 0x21
 800257c:	21be      	movs	r1, #190	; 0xbe
 800257e:	f001 fe35 	bl	80041ec <HAL_I2C_Mem_Read>
 8002582:	0003      	movs	r3, r0
 8002584:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8002586:	1dfb      	adds	r3, r7, #7
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <hts221_reboot+0x34>
        return HTS_REBOOT_FAIL;
 800258e:	2301      	movs	r3, #1
 8002590:	425b      	negs	r3, r3
 8002592:	e03b      	b.n	800260c <hts221_reboot+0xac>
    }

    //write boot bit
    buf[0] |= HTS_CTRL_REG2_BOOT;
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	4252      	negs	r2, r2
 800259c:	4313      	orrs	r3, r2
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80025a4:	1dfc      	adds	r4, r7, #7
 80025a6:	481b      	ldr	r0, [pc, #108]	; (8002614 <hts221_reboot+0xb4>)
 80025a8:	2301      	movs	r3, #1
 80025aa:	425b      	negs	r3, r3
 80025ac:	9302      	str	r3, [sp, #8]
 80025ae:	2301      	movs	r3, #1
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2301      	movs	r3, #1
 80025b8:	2221      	movs	r2, #33	; 0x21
 80025ba:	21be      	movs	r1, #190	; 0xbe
 80025bc:	f001 fce8 	bl	8003f90 <HAL_I2C_Mem_Write>
 80025c0:	0003      	movs	r3, r0
 80025c2:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 80025c4:	1dfb      	adds	r3, r7, #7
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <hts221_reboot+0x72>
        return HTS_REBOOT_FAIL;
 80025cc:	2301      	movs	r3, #1
 80025ce:	425b      	negs	r3, r3
 80025d0:	e01c      	b.n	800260c <hts221_reboot+0xac>
    }

    //wait for device to restart + clear boot bit
    do{
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80025d2:	1dfc      	adds	r4, r7, #7
 80025d4:	480f      	ldr	r0, [pc, #60]	; (8002614 <hts221_reboot+0xb4>)
 80025d6:	2301      	movs	r3, #1
 80025d8:	425b      	negs	r3, r3
 80025da:	9302      	str	r3, [sp, #8]
 80025dc:	2301      	movs	r3, #1
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2301      	movs	r3, #1
 80025e6:	2221      	movs	r2, #33	; 0x21
 80025e8:	21be      	movs	r1, #190	; 0xbe
 80025ea:	f001 fdff 	bl	80041ec <HAL_I2C_Mem_Read>
 80025ee:	0003      	movs	r3, r0
 80025f0:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <hts221_reboot+0xa0>
            return HTS_REBOOT_FAIL;
 80025fa:	2301      	movs	r3, #1
 80025fc:	425b      	negs	r3, r3
 80025fe:	e005      	b.n	800260c <hts221_reboot+0xac>
        }
    } while (buf[0] & HTS_CTRL_REG2_BOOT);
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b25b      	sxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	dbe3      	blt.n	80025d2 <hts221_reboot+0x72>

//	printf("Rebooted\n");

    return HTS_REBOOT_SUCCESS;
 800260a:	2301      	movs	r3, #1

}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b003      	add	sp, #12
 8002612:	bd90      	pop	{r4, r7, pc}
 8002614:	200000e0 	.word	0x200000e0

08002618 <hts221_init>:

HTS_Cal * hts221_init () {
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	b08d      	sub	sp, #52	; 0x34
 800261c:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;	// I2C return status
    uint8_t buf[7];			// read buffer

    if (hts221_reboot() == -1) {
 800261e:	f7ff ff9f 	bl	8002560 <hts221_reboot>
 8002622:	0003      	movs	r3, r0
 8002624:	3301      	adds	r3, #1
 8002626:	d101      	bne.n	800262c <hts221_init+0x14>
        return NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	e218      	b.n	8002a5e <hts221_init+0x446>
    }

    /* === Set HTS221 to wake mode === */
    buf[0] = HTS_CTRL_REG1_PD | HTS_CTRL_REG1_BUD;
 800262c:	003b      	movs	r3, r7
 800262e:	2284      	movs	r2, #132	; 0x84
 8002630:	701a      	strb	r2, [r3, #0]

    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002632:	251f      	movs	r5, #31
 8002634:	197c      	adds	r4, r7, r5
 8002636:	48e3      	ldr	r0, [pc, #908]	; (80029c4 <hts221_init+0x3ac>)
 8002638:	2301      	movs	r3, #1
 800263a:	425b      	negs	r3, r3
 800263c:	9302      	str	r3, [sp, #8]
 800263e:	2301      	movs	r3, #1
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	003b      	movs	r3, r7
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2301      	movs	r3, #1
 8002648:	2220      	movs	r2, #32
 800264a:	21be      	movs	r1, #190	; 0xbe
 800264c:	f001 fca0 	bl	8003f90 <HAL_I2C_Mem_Write>
 8002650:	0003      	movs	r3, r0
 8002652:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8002654:	197b      	adds	r3, r7, r5
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <hts221_init+0x48>
        return NULL;
 800265c:	2300      	movs	r3, #0
 800265e:	e1fe      	b.n	8002a5e <hts221_init+0x446>
    }
    else  {
        /* === Read in temperature calibration data === */
        // buf[0] = T0_degC_x8
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_degC_x8, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002660:	251f      	movs	r5, #31
 8002662:	197c      	adds	r4, r7, r5
 8002664:	48d7      	ldr	r0, [pc, #860]	; (80029c4 <hts221_init+0x3ac>)
 8002666:	2301      	movs	r3, #1
 8002668:	425b      	negs	r3, r3
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	2301      	movs	r3, #1
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	003b      	movs	r3, r7
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2301      	movs	r3, #1
 8002676:	2232      	movs	r2, #50	; 0x32
 8002678:	21be      	movs	r1, #190	; 0xbe
 800267a:	f001 fdb7 	bl	80041ec <HAL_I2C_Mem_Read>
 800267e:	0003      	movs	r3, r0
 8002680:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8002682:	197b      	adds	r3, r7, r5
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <hts221_init+0x76>
            return NULL;
 800268a:	2300      	movs	r3, #0
 800268c:	e1e7      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[1] = T1_degC_x8
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_degC_x8, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 800268e:	003b      	movs	r3, r7
 8002690:	3301      	adds	r3, #1
 8002692:	251f      	movs	r5, #31
 8002694:	197c      	adds	r4, r7, r5
 8002696:	48cb      	ldr	r0, [pc, #812]	; (80029c4 <hts221_init+0x3ac>)
 8002698:	2201      	movs	r2, #1
 800269a:	4252      	negs	r2, r2
 800269c:	9202      	str	r2, [sp, #8]
 800269e:	2201      	movs	r2, #1
 80026a0:	9201      	str	r2, [sp, #4]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2301      	movs	r3, #1
 80026a6:	2233      	movs	r2, #51	; 0x33
 80026a8:	21be      	movs	r1, #190	; 0xbe
 80026aa:	f001 fd9f 	bl	80041ec <HAL_I2C_Mem_Read>
 80026ae:	0003      	movs	r3, r0
 80026b0:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80026b2:	197b      	adds	r3, r7, r5
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <hts221_init+0xa6>
            return NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e1cf      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[2] = T1_T0_msb
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_T0_msb, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 80026be:	003b      	movs	r3, r7
 80026c0:	3302      	adds	r3, #2
 80026c2:	251f      	movs	r5, #31
 80026c4:	197c      	adds	r4, r7, r5
 80026c6:	48bf      	ldr	r0, [pc, #764]	; (80029c4 <hts221_init+0x3ac>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	4252      	negs	r2, r2
 80026cc:	9202      	str	r2, [sp, #8]
 80026ce:	2201      	movs	r2, #1
 80026d0:	9201      	str	r2, [sp, #4]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2301      	movs	r3, #1
 80026d6:	2235      	movs	r2, #53	; 0x35
 80026d8:	21be      	movs	r1, #190	; 0xbe
 80026da:	f001 fd87 	bl	80041ec <HAL_I2C_Mem_Read>
 80026de:	0003      	movs	r3, r0
 80026e0:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80026e2:	197b      	adds	r3, r7, r5
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <hts221_init+0xd6>
            return NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e1b7      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[3] = HTS_CAL_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 3, 1, HAL_MAX_DELAY);
 80026ee:	003b      	movs	r3, r7
 80026f0:	3303      	adds	r3, #3
 80026f2:	251f      	movs	r5, #31
 80026f4:	197c      	adds	r4, r7, r5
 80026f6:	48b3      	ldr	r0, [pc, #716]	; (80029c4 <hts221_init+0x3ac>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	4252      	negs	r2, r2
 80026fc:	9202      	str	r2, [sp, #8]
 80026fe:	2201      	movs	r2, #1
 8002700:	9201      	str	r2, [sp, #4]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2301      	movs	r3, #1
 8002706:	223c      	movs	r2, #60	; 0x3c
 8002708:	21be      	movs	r1, #190	; 0xbe
 800270a:	f001 fd6f 	bl	80041ec <HAL_I2C_Mem_Read>
 800270e:	0003      	movs	r3, r0
 8002710:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8002712:	197b      	adds	r3, r7, r5
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <hts221_init+0x106>
            return NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	e19f      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[4] = HTS_CAL_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 4, 1, HAL_MAX_DELAY);
 800271e:	003b      	movs	r3, r7
 8002720:	3304      	adds	r3, #4
 8002722:	251f      	movs	r5, #31
 8002724:	197c      	adds	r4, r7, r5
 8002726:	48a7      	ldr	r0, [pc, #668]	; (80029c4 <hts221_init+0x3ac>)
 8002728:	2201      	movs	r2, #1
 800272a:	4252      	negs	r2, r2
 800272c:	9202      	str	r2, [sp, #8]
 800272e:	2201      	movs	r2, #1
 8002730:	9201      	str	r2, [sp, #4]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2301      	movs	r3, #1
 8002736:	223d      	movs	r2, #61	; 0x3d
 8002738:	21be      	movs	r1, #190	; 0xbe
 800273a:	f001 fd57 	bl	80041ec <HAL_I2C_Mem_Read>
 800273e:	0003      	movs	r3, r0
 8002740:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8002742:	197b      	adds	r3, r7, r5
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <hts221_init+0x136>
            return NULL;
 800274a:	2300      	movs	r3, #0
 800274c:	e187      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[5] = HTS_CAL_T1_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 5, 1, HAL_MAX_DELAY);
 800274e:	003b      	movs	r3, r7
 8002750:	3305      	adds	r3, #5
 8002752:	251f      	movs	r5, #31
 8002754:	197c      	adds	r4, r7, r5
 8002756:	489b      	ldr	r0, [pc, #620]	; (80029c4 <hts221_init+0x3ac>)
 8002758:	2201      	movs	r2, #1
 800275a:	4252      	negs	r2, r2
 800275c:	9202      	str	r2, [sp, #8]
 800275e:	2201      	movs	r2, #1
 8002760:	9201      	str	r2, [sp, #4]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2301      	movs	r3, #1
 8002766:	223e      	movs	r2, #62	; 0x3e
 8002768:	21be      	movs	r1, #190	; 0xbe
 800276a:	f001 fd3f 	bl	80041ec <HAL_I2C_Mem_Read>
 800276e:	0003      	movs	r3, r0
 8002770:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8002772:	197b      	adds	r3, r7, r5
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <hts221_init+0x166>
            return NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	e16f      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[6] = HTS_CAL_T1_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_T1_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 6, 1, HAL_MAX_DELAY);
 800277e:	003b      	movs	r3, r7
 8002780:	3306      	adds	r3, #6
 8002782:	251f      	movs	r5, #31
 8002784:	197c      	adds	r4, r7, r5
 8002786:	488f      	ldr	r0, [pc, #572]	; (80029c4 <hts221_init+0x3ac>)
 8002788:	2201      	movs	r2, #1
 800278a:	4252      	negs	r2, r2
 800278c:	9202      	str	r2, [sp, #8]
 800278e:	2201      	movs	r2, #1
 8002790:	9201      	str	r2, [sp, #4]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2301      	movs	r3, #1
 8002796:	223f      	movs	r2, #63	; 0x3f
 8002798:	21be      	movs	r1, #190	; 0xbe
 800279a:	f001 fd27 	bl	80041ec <HAL_I2C_Mem_Read>
 800279e:	0003      	movs	r3, r0
 80027a0:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80027a2:	197b      	adds	r3, r7, r5
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <hts221_init+0x196>
            return NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e157      	b.n	8002a5e <hts221_init+0x446>
        }

        /* === Process temperature calibration data === */

        uint16_t T0_degC_R32 = buf[0];
 80027ae:	003b      	movs	r3, r7
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	201c      	movs	r0, #28
 80027b4:	183b      	adds	r3, r7, r0
 80027b6:	801a      	strh	r2, [r3, #0]
        uint16_t T1_degC_R33 = buf[1];
 80027b8:	003b      	movs	r3, r7
 80027ba:	785a      	ldrb	r2, [r3, #1]
 80027bc:	241a      	movs	r4, #26
 80027be:	193b      	adds	r3, r7, r4
 80027c0:	801a      	strh	r2, [r3, #0]
        uint16_t T1_T0_msb 	= buf[2];
 80027c2:	003b      	movs	r3, r7
 80027c4:	789a      	ldrb	r2, [r3, #2]
 80027c6:	2518      	movs	r5, #24
 80027c8:	197b      	adds	r3, r7, r5
 80027ca:	801a      	strh	r2, [r3, #0]
        int16_t T0_OUT = (buf[3] | (buf[4] << 8)); // This should be signed int
 80027cc:	003b      	movs	r3, r7
 80027ce:	78db      	ldrb	r3, [r3, #3]
 80027d0:	b219      	sxth	r1, r3
 80027d2:	003b      	movs	r3, r7
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	b21a      	sxth	r2, r3
 80027da:	2616      	movs	r6, #22
 80027dc:	19bb      	adds	r3, r7, r6
 80027de:	430a      	orrs	r2, r1
 80027e0:	801a      	strh	r2, [r3, #0]
        int16_t T1_OUT = (buf[5] | (buf[6] << 8)); // This should be signed int
 80027e2:	003b      	movs	r3, r7
 80027e4:	795b      	ldrb	r3, [r3, #5]
 80027e6:	b219      	sxth	r1, r3
 80027e8:	003b      	movs	r3, r7
 80027ea:	799b      	ldrb	r3, [r3, #6]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	2314      	movs	r3, #20
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	430a      	orrs	r2, r1
 80027f6:	801a      	strh	r2, [r3, #0]

        // add msb's for 10 bit values
        T0_degC_R32 |= (T1_T0_msb & 0b0011) << 8;
 80027f8:	197b      	adds	r3, r7, r5
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	b21a      	sxth	r2, r3
 8002800:	23c0      	movs	r3, #192	; 0xc0
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4013      	ands	r3, r2
 8002806:	b21a      	sxth	r2, r3
 8002808:	183b      	adds	r3, r7, r0
 800280a:	2100      	movs	r1, #0
 800280c:	5e5b      	ldrsh	r3, [r3, r1]
 800280e:	4313      	orrs	r3, r2
 8002810:	b21a      	sxth	r2, r3
 8002812:	183b      	adds	r3, r7, r0
 8002814:	801a      	strh	r2, [r3, #0]
        T1_degC_R33 |= (T1_T0_msb & 0b1100) << 6;
 8002816:	197b      	adds	r3, r7, r5
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	019b      	lsls	r3, r3, #6
 800281c:	b21a      	sxth	r2, r3
 800281e:	23c0      	movs	r3, #192	; 0xc0
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4013      	ands	r3, r2
 8002824:	b21a      	sxth	r2, r3
 8002826:	0021      	movs	r1, r4
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2400      	movs	r4, #0
 800282c:	5f1b      	ldrsh	r3, [r3, r4]
 800282e:	4313      	orrs	r3, r2
 8002830:	b21a      	sxth	r2, r3
 8002832:	187b      	adds	r3, r7, r1
 8002834:	801a      	strh	r2, [r3, #0]

        // divide by 8
        T0_degC_R32 >>= 3;
 8002836:	183b      	adds	r3, r7, r0
 8002838:	0004      	movs	r4, r0
 800283a:	183a      	adds	r2, r7, r0
 800283c:	8812      	ldrh	r2, [r2, #0]
 800283e:	08d2      	lsrs	r2, r2, #3
 8002840:	801a      	strh	r2, [r3, #0]
        T1_degC_R33 >>= 3;
 8002842:	187b      	adds	r3, r7, r1
 8002844:	000d      	movs	r5, r1
 8002846:	187a      	adds	r2, r7, r1
 8002848:	8812      	ldrh	r2, [r2, #0]
 800284a:	08d2      	lsrs	r2, r2, #3
 800284c:	801a      	strh	r2, [r3, #0]

        // init struct to store calibration data
        HTS_Cal * hts_cal_data = malloc(sizeof(HTS_Cal));
 800284e:	2018      	movs	r0, #24
 8002850:	f003 ffaa 	bl	80067a8 <malloc>
 8002854:	0003      	movs	r3, r0
 8002856:	613b      	str	r3, [r7, #16]

        hts_cal_data->T0_OUT = T0_OUT;
 8002858:	19bb      	adds	r3, r7, r6
 800285a:	2100      	movs	r1, #0
 800285c:	5e5a      	ldrsh	r2, [r3, r1]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	601a      	str	r2, [r3, #0]
        hts_cal_data->correction_factor = (float) (T1_degC_R33 - T0_degC_R32) / (T1_OUT - T0_OUT);
 8002862:	197b      	adds	r3, r7, r5
 8002864:	881a      	ldrh	r2, [r3, #0]
 8002866:	0025      	movs	r5, r4
 8002868:	193b      	adds	r3, r7, r4
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	0018      	movs	r0, r3
 8002870:	f7fe f9cc 	bl	8000c0c <__aeabi_i2f>
 8002874:	1c04      	adds	r4, r0, #0
 8002876:	2314      	movs	r3, #20
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2200      	movs	r2, #0
 800287c:	5e9a      	ldrsh	r2, [r3, r2]
 800287e:	19bb      	adds	r3, r7, r6
 8002880:	2100      	movs	r1, #0
 8002882:	5e5b      	ldrsh	r3, [r3, r1]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	0018      	movs	r0, r3
 8002888:	f7fe f9c0 	bl	8000c0c <__aeabi_i2f>
 800288c:	1c03      	adds	r3, r0, #0
 800288e:	1c19      	adds	r1, r3, #0
 8002890:	1c20      	adds	r0, r4, #0
 8002892:	f7fd ff75 	bl	8000780 <__aeabi_fdiv>
 8002896:	1c03      	adds	r3, r0, #0
 8002898:	1c1a      	adds	r2, r3, #0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	605a      	str	r2, [r3, #4]
        hts_cal_data->offset = T0_degC_R32;
 800289e:	197b      	adds	r3, r7, r5
 80028a0:	881a      	ldrh	r2, [r3, #0]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]

        /*=== Read in humidity calibration data ===*/
        // buf[0] = HTS_CAL_H0_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80028a6:	251f      	movs	r5, #31
 80028a8:	197c      	adds	r4, r7, r5
 80028aa:	4846      	ldr	r0, [pc, #280]	; (80029c4 <hts221_init+0x3ac>)
 80028ac:	2301      	movs	r3, #1
 80028ae:	425b      	negs	r3, r3
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	2301      	movs	r3, #1
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	003b      	movs	r3, r7
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	2236      	movs	r2, #54	; 0x36
 80028be:	21be      	movs	r1, #190	; 0xbe
 80028c0:	f001 fc94 	bl	80041ec <HAL_I2C_Mem_Read>
 80028c4:	0003      	movs	r3, r0
 80028c6:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80028c8:	197b      	adds	r3, r7, r5
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <hts221_init+0x2bc>
            return NULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e0c4      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[1] = HTS_CAL_H0_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 80028d4:	003b      	movs	r3, r7
 80028d6:	3301      	adds	r3, #1
 80028d8:	251f      	movs	r5, #31
 80028da:	197c      	adds	r4, r7, r5
 80028dc:	4839      	ldr	r0, [pc, #228]	; (80029c4 <hts221_init+0x3ac>)
 80028de:	2201      	movs	r2, #1
 80028e0:	4252      	negs	r2, r2
 80028e2:	9202      	str	r2, [sp, #8]
 80028e4:	2201      	movs	r2, #1
 80028e6:	9201      	str	r2, [sp, #4]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2301      	movs	r3, #1
 80028ec:	2237      	movs	r2, #55	; 0x37
 80028ee:	21be      	movs	r1, #190	; 0xbe
 80028f0:	f001 fc7c 	bl	80041ec <HAL_I2C_Mem_Read>
 80028f4:	0003      	movs	r3, r0
 80028f6:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80028f8:	197b      	adds	r3, r7, r5
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <hts221_init+0x2ec>
            return NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	e0ac      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[2] = HTS_CAL_H1_T0_OUT_L
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8002904:	003b      	movs	r3, r7
 8002906:	3302      	adds	r3, #2
 8002908:	251f      	movs	r5, #31
 800290a:	197c      	adds	r4, r7, r5
 800290c:	482d      	ldr	r0, [pc, #180]	; (80029c4 <hts221_init+0x3ac>)
 800290e:	2201      	movs	r2, #1
 8002910:	4252      	negs	r2, r2
 8002912:	9202      	str	r2, [sp, #8]
 8002914:	2201      	movs	r2, #1
 8002916:	9201      	str	r2, [sp, #4]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2301      	movs	r3, #1
 800291c:	223a      	movs	r2, #58	; 0x3a
 800291e:	21be      	movs	r1, #190	; 0xbe
 8002920:	f001 fc64 	bl	80041ec <HAL_I2C_Mem_Read>
 8002924:	0003      	movs	r3, r0
 8002926:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8002928:	197b      	adds	r3, r7, r5
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <hts221_init+0x31c>
            return NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	e094      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[3] = HTS_CAL_H1_T0_OUT_H
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 3, 1, HAL_MAX_DELAY);
 8002934:	003b      	movs	r3, r7
 8002936:	3303      	adds	r3, #3
 8002938:	251f      	movs	r5, #31
 800293a:	197c      	adds	r4, r7, r5
 800293c:	4821      	ldr	r0, [pc, #132]	; (80029c4 <hts221_init+0x3ac>)
 800293e:	2201      	movs	r2, #1
 8002940:	4252      	negs	r2, r2
 8002942:	9202      	str	r2, [sp, #8]
 8002944:	2201      	movs	r2, #1
 8002946:	9201      	str	r2, [sp, #4]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2301      	movs	r3, #1
 800294c:	223b      	movs	r2, #59	; 0x3b
 800294e:	21be      	movs	r1, #190	; 0xbe
 8002950:	f001 fc4c 	bl	80041ec <HAL_I2C_Mem_Read>
 8002954:	0003      	movs	r3, r0
 8002956:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8002958:	197b      	adds	r3, r7, r5
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <hts221_init+0x34c>
            return NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	e07c      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[4] = HTS_CAL_H0_rH_x2
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H0_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 4, 1, HAL_MAX_DELAY);
 8002964:	003b      	movs	r3, r7
 8002966:	3304      	adds	r3, #4
 8002968:	251f      	movs	r5, #31
 800296a:	197c      	adds	r4, r7, r5
 800296c:	4815      	ldr	r0, [pc, #84]	; (80029c4 <hts221_init+0x3ac>)
 800296e:	2201      	movs	r2, #1
 8002970:	4252      	negs	r2, r2
 8002972:	9202      	str	r2, [sp, #8]
 8002974:	2201      	movs	r2, #1
 8002976:	9201      	str	r2, [sp, #4]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2301      	movs	r3, #1
 800297c:	2230      	movs	r2, #48	; 0x30
 800297e:	21be      	movs	r1, #190	; 0xbe
 8002980:	f001 fc34 	bl	80041ec <HAL_I2C_Mem_Read>
 8002984:	0003      	movs	r3, r0
 8002986:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8002988:	197b      	adds	r3, r7, r5
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <hts221_init+0x37c>
            return NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	e064      	b.n	8002a5e <hts221_init+0x446>
        }

        // buf[5] = HTS_CAL_H1_rH_x2
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CAL_H1_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 5, 1, HAL_MAX_DELAY);
 8002994:	003b      	movs	r3, r7
 8002996:	3305      	adds	r3, #5
 8002998:	251f      	movs	r5, #31
 800299a:	197c      	adds	r4, r7, r5
 800299c:	4809      	ldr	r0, [pc, #36]	; (80029c4 <hts221_init+0x3ac>)
 800299e:	2201      	movs	r2, #1
 80029a0:	4252      	negs	r2, r2
 80029a2:	9202      	str	r2, [sp, #8]
 80029a4:	2201      	movs	r2, #1
 80029a6:	9201      	str	r2, [sp, #4]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2301      	movs	r3, #1
 80029ac:	2231      	movs	r2, #49	; 0x31
 80029ae:	21be      	movs	r1, #190	; 0xbe
 80029b0:	f001 fc1c 	bl	80041ec <HAL_I2C_Mem_Read>
 80029b4:	0003      	movs	r3, r0
 80029b6:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 80029b8:	197b      	adds	r3, r7, r5
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <hts221_init+0x3b0>
            return NULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e04c      	b.n	8002a5e <hts221_init+0x446>
 80029c4:	200000e0 	.word	0x200000e0
        }

        /*=== Process humidity calibration data ===*/
        uint8_t H0_Rh_R30 = buf[4] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 80029c8:	003b      	movs	r3, r7
 80029ca:	791a      	ldrb	r2, [r3, #4]
 80029cc:	200f      	movs	r0, #15
 80029ce:	183b      	adds	r3, r7, r0
 80029d0:	0852      	lsrs	r2, r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
        uint8_t H1_Rh_R31 = buf[5] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 80029d4:	003b      	movs	r3, r7
 80029d6:	795a      	ldrb	r2, [r3, #5]
 80029d8:	250e      	movs	r5, #14
 80029da:	197b      	adds	r3, r7, r5
 80029dc:	0852      	lsrs	r2, r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
        int16_t H0_T0_OUT = (buf[0] | (buf[1] << 8)); // This should be signed int
 80029e0:	003b      	movs	r3, r7
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b219      	sxth	r1, r3
 80029e6:	003b      	movs	r3, r7
 80029e8:	785b      	ldrb	r3, [r3, #1]
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	b21a      	sxth	r2, r3
 80029ee:	240c      	movs	r4, #12
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	430a      	orrs	r2, r1
 80029f4:	801a      	strh	r2, [r3, #0]
        int16_t H1_T0_OUT = (buf[2] | (buf[3] << 8)); // This should be signed int
 80029f6:	003b      	movs	r3, r7
 80029f8:	789b      	ldrb	r3, [r3, #2]
 80029fa:	b219      	sxth	r1, r3
 80029fc:	003b      	movs	r3, r7
 80029fe:	78db      	ldrb	r3, [r3, #3]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	b21a      	sxth	r2, r3
 8002a04:	230a      	movs	r3, #10
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	801a      	strh	r2, [r3, #0]

        //Store Humid.
        hts_cal_data->H0_OUT = H0_T0_OUT;
 8002a0c:	0026      	movs	r6, r4
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2100      	movs	r1, #0
 8002a12:	5e5a      	ldrsh	r2, [r3, r1]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	60da      	str	r2, [r3, #12]
        hts_cal_data->humid_correction_factor = (float) (H1_Rh_R31 - H0_Rh_R30) / (H1_T0_OUT - H0_T0_OUT);
 8002a18:	197b      	adds	r3, r7, r5
 8002a1a:	781a      	ldrb	r2, [r3, #0]
 8002a1c:	0005      	movs	r5, r0
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7fe f8f1 	bl	8000c0c <__aeabi_i2f>
 8002a2a:	1c04      	adds	r4, r0, #0
 8002a2c:	230a      	movs	r3, #10
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2200      	movs	r2, #0
 8002a32:	5e9a      	ldrsh	r2, [r3, r2]
 8002a34:	19bb      	adds	r3, r7, r6
 8002a36:	2100      	movs	r1, #0
 8002a38:	5e5b      	ldrsh	r3, [r3, r1]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7fe f8e5 	bl	8000c0c <__aeabi_i2f>
 8002a42:	1c03      	adds	r3, r0, #0
 8002a44:	1c19      	adds	r1, r3, #0
 8002a46:	1c20      	adds	r0, r4, #0
 8002a48:	f7fd fe9a 	bl	8000780 <__aeabi_fdiv>
 8002a4c:	1c03      	adds	r3, r0, #0
 8002a4e:	1c1a      	adds	r2, r3, #0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	611a      	str	r2, [r3, #16]
        hts_cal_data->humid_offset = H0_Rh_R30;
 8002a54:	197b      	adds	r3, r7, r5
 8002a56:	781a      	ldrb	r2, [r3, #0]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	615a      	str	r2, [r3, #20]

        return hts_cal_data;
 8002a5c:	693b      	ldr	r3, [r7, #16]
    }

    return NULL;
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b009      	add	sp, #36	; 0x24
 8002a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)

08002a68 <hts221_get_temp>:

int hts221_get_temp(char unit, HTS_Cal * hts_cal_data){
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	b08d      	sub	sp, #52	; 0x34
 8002a6c:	af04      	add	r7, sp, #16
 8002a6e:	0002      	movs	r2, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	701a      	strb	r2, [r3, #0]
    uint8_t buf[7];			// read buffer
    int16_t T_OUT;			// T_OUT raw temperature reading
    int temp_adj;			// calibrated temperature value

    /* === Start a temperature reading === */
    buf[0] = HTS_CTRL_REG2_ONE_SHOT;
 8002a76:	210c      	movs	r1, #12
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002a7e:	231b      	movs	r3, #27
 8002a80:	18fc      	adds	r4, r7, r3
 8002a82:	4849      	ldr	r0, [pc, #292]	; (8002ba8 <hts221_get_temp+0x140>)
 8002a84:	2301      	movs	r3, #1
 8002a86:	425b      	negs	r3, r3
 8002a88:	9302      	str	r3, [sp, #8]
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2301      	movs	r3, #1
 8002a94:	2221      	movs	r2, #33	; 0x21
 8002a96:	21be      	movs	r1, #190	; 0xbe
 8002a98:	f001 fa7a 	bl	8003f90 <HAL_I2C_Mem_Write>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	7023      	strb	r3, [r4, #0]

    /* === Read in temperature data === */

    //TODO check that this loop is right...
    // Try three times for temp data to be ready
    for (int i = 0; i < 3; ++i) {
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	e01a      	b.n	8002adc <hts221_get_temp+0x74>
        // buf[0] = HTS_STATUS_REG
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002aa6:	231b      	movs	r3, #27
 8002aa8:	18fc      	adds	r4, r7, r3
 8002aaa:	483f      	ldr	r0, [pc, #252]	; (8002ba8 <hts221_get_temp+0x140>)
 8002aac:	2301      	movs	r3, #1
 8002aae:	425b      	negs	r3, r3
 8002ab0:	9302      	str	r3, [sp, #8]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	250c      	movs	r5, #12
 8002ab8:	197b      	adds	r3, r7, r5
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2301      	movs	r3, #1
 8002abe:	2227      	movs	r2, #39	; 0x27
 8002ac0:	21be      	movs	r1, #190	; 0xbe
 8002ac2:	f001 fb93 	bl	80041ec <HAL_I2C_Mem_Read>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
            // TODO: error handling
        }
        if (buf[0] & 1){
 8002aca:	197b      	adds	r3, r7, r5
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	001a      	movs	r2, r3
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d106      	bne.n	8002ae4 <hts221_get_temp+0x7c>
    for (int i = 0; i < 3; ++i) {
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	dde1      	ble.n	8002aa6 <hts221_get_temp+0x3e>
 8002ae2:	e000      	b.n	8002ae6 <hts221_get_temp+0x7e>
            // new temp. data ready
            break;
 8002ae4:	46c0      	nop			; (mov r8, r8)
        }
        //TODO - HAL_WAIT?
    }

    // buf[1] = HTS_TEMP_OUT_L
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8002ae6:	250c      	movs	r5, #12
 8002ae8:	197b      	adds	r3, r7, r5
 8002aea:	3301      	adds	r3, #1
 8002aec:	261b      	movs	r6, #27
 8002aee:	19bc      	adds	r4, r7, r6
 8002af0:	482d      	ldr	r0, [pc, #180]	; (8002ba8 <hts221_get_temp+0x140>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	4252      	negs	r2, r2
 8002af6:	9202      	str	r2, [sp, #8]
 8002af8:	2201      	movs	r2, #1
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2301      	movs	r3, #1
 8002b00:	222a      	movs	r2, #42	; 0x2a
 8002b02:	21be      	movs	r1, #190	; 0xbe
 8002b04:	f001 fb72 	bl	80041ec <HAL_I2C_Mem_Read>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
        // TODO: error handling
    }

    // buf[2] = HTS_TEMP_OUT_H
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8002b0c:	197b      	adds	r3, r7, r5
 8002b0e:	3302      	adds	r3, #2
 8002b10:	19bc      	adds	r4, r7, r6
 8002b12:	4825      	ldr	r0, [pc, #148]	; (8002ba8 <hts221_get_temp+0x140>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	4252      	negs	r2, r2
 8002b18:	9202      	str	r2, [sp, #8]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	9201      	str	r2, [sp, #4]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2301      	movs	r3, #1
 8002b22:	222b      	movs	r2, #43	; 0x2b
 8002b24:	21be      	movs	r1, #190	; 0xbe
 8002b26:	f001 fb61 	bl	80041ec <HAL_I2C_Mem_Read>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
        // TODO: error handling
    }

    T_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 8002b2e:	197b      	adds	r3, r7, r5
 8002b30:	785b      	ldrb	r3, [r3, #1]
 8002b32:	b219      	sxth	r1, r3
 8002b34:	197b      	adds	r3, r7, r5
 8002b36:	789b      	ldrb	r3, [r3, #2]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	b21a      	sxth	r2, r3
 8002b3c:	2018      	movs	r0, #24
 8002b3e:	183b      	adds	r3, r7, r0
 8002b40:	430a      	orrs	r2, r1
 8002b42:	801a      	strh	r2, [r3, #0]

    temp_adj = hts221_calc_temp(T_OUT, hts_cal_data);
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	183b      	adds	r3, r7, r0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5e5b      	ldrsh	r3, [r3, r1]
 8002b4c:	0011      	movs	r1, r2
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 f832 	bl	8002bb8 <hts221_calc_temp>
 8002b54:	0003      	movs	r3, r0
 8002b56:	617b      	str	r3, [r7, #20]

    // Return in correct units
    if (unit == 'F'){
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b46      	cmp	r3, #70	; 0x46
 8002b5e:	d11e      	bne.n	8002b9e <hts221_get_temp+0x136>
        //Fahrenheit
        return (temp_adj * 9.0 / 5.0) + 32;
 8002b60:	6978      	ldr	r0, [r7, #20]
 8002b62:	f7ff f98d 	bl	8001e80 <__aeabi_i2d>
 8002b66:	2200      	movs	r2, #0
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <hts221_get_temp+0x144>)
 8002b6a:	f7fe fee7 	bl	800193c <__aeabi_dmul>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	000b      	movs	r3, r1
 8002b72:	0010      	movs	r0, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	2200      	movs	r2, #0
 8002b78:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <hts221_get_temp+0x148>)
 8002b7a:	f7fe fbf7 	bl	800136c <__aeabi_ddiv>
 8002b7e:	0002      	movs	r2, r0
 8002b80:	000b      	movs	r3, r1
 8002b82:	0010      	movs	r0, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	2200      	movs	r2, #0
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <hts221_get_temp+0x14c>)
 8002b8a:	f7fe f885 	bl	8000c98 <__aeabi_dadd>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	000b      	movs	r3, r1
 8002b92:	0010      	movs	r0, r2
 8002b94:	0019      	movs	r1, r3
 8002b96:	f7ff f93d 	bl	8001e14 <__aeabi_d2iz>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	e000      	b.n	8002ba0 <hts221_get_temp+0x138>

    }
    else {
        //Celsius
        return temp_adj;
 8002b9e:	697b      	ldr	r3, [r7, #20]
    }

}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b009      	add	sp, #36	; 0x24
 8002ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba8:	200000e0 	.word	0x200000e0
 8002bac:	40220000 	.word	0x40220000
 8002bb0:	40140000 	.word	0x40140000
 8002bb4:	40400000 	.word	0x40400000

08002bb8 <hts221_calc_temp>:

int hts221_calc_temp(int16_t T_OUT, HTS_Cal * hts_cal_data) {
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	1dbb      	adds	r3, r7, #6
 8002bc4:	801a      	strh	r2, [r3, #0]

    int zeroed_temp = T_OUT - hts_cal_data->T0_OUT;
 8002bc6:	1dbb      	adds	r3, r7, #6
 8002bc8:	2200      	movs	r2, #0
 8002bca:	5e9a      	ldrsh	r2, [r3, r2]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	60fb      	str	r3, [r7, #12]
    int temp_adj = (zeroed_temp * hts_cal_data->correction_factor) + hts_cal_data->offset;
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7fe f819 	bl	8000c0c <__aeabi_i2f>
 8002bda:	1c02      	adds	r2, r0, #0
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	1c19      	adds	r1, r3, #0
 8002be2:	1c10      	adds	r0, r2, #0
 8002be4:	f7fd fed8 	bl	8000998 <__aeabi_fmul>
 8002be8:	1c03      	adds	r3, r0, #0
 8002bea:	1c1c      	adds	r4, r3, #0
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7fe f80b 	bl	8000c0c <__aeabi_i2f>
 8002bf6:	1c03      	adds	r3, r0, #0
 8002bf8:	1c19      	adds	r1, r3, #0
 8002bfa:	1c20      	adds	r0, r4, #0
 8002bfc:	f7fd fc24 	bl	8000448 <__aeabi_fadd>
 8002c00:	1c03      	adds	r3, r0, #0
 8002c02:	1c18      	adds	r0, r3, #0
 8002c04:	f7fd ffe2 	bl	8000bcc <__aeabi_f2iz>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	60bb      	str	r3, [r7, #8]

    return temp_adj;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b005      	add	sp, #20
 8002c14:	bd90      	pop	{r4, r7, pc}
	...

08002c18 <hts221_get_humid>:

int hts221_get_humid(HTS_Cal * hts_cal_data) {
 8002c18:	b5b0      	push	{r4, r5, r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af04      	add	r7, sp, #16
 8002c1e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];			// read buffer
    int16_t H_OUT;			// H_OUT raw temperature reading
    int humid_adj;			// calibrated temperature value

    /* === Start a humidity reading === */
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002c20:	251f      	movs	r5, #31
 8002c22:	197c      	adds	r4, r7, r5
 8002c24:	4866      	ldr	r0, [pc, #408]	; (8002dc0 <hts221_get_humid+0x1a8>)
 8002c26:	2301      	movs	r3, #1
 8002c28:	425b      	negs	r3, r3
 8002c2a:	9302      	str	r3, [sp, #8]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	230c      	movs	r3, #12
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	2301      	movs	r3, #1
 8002c38:	2221      	movs	r2, #33	; 0x21
 8002c3a:	21be      	movs	r1, #190	; 0xbe
 8002c3c:	f001 fad6 	bl	80041ec <HAL_I2C_Mem_Read>
 8002c40:	0003      	movs	r3, r0
 8002c42:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8002c44:	197b      	adds	r3, r7, r5
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <hts221_get_humid+0x3a>
        return HUMID_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	425b      	negs	r3, r3
 8002c50:	e0b2      	b.n	8002db8 <hts221_get_humid+0x1a0>
    }

    buf[0] |= HTS_CTRL_REG2_ONE_SHOT;
 8002c52:	210c      	movs	r1, #12
 8002c54:	187b      	adds	r3, r7, r1
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Mem_Write(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002c62:	251f      	movs	r5, #31
 8002c64:	197c      	adds	r4, r7, r5
 8002c66:	4856      	ldr	r0, [pc, #344]	; (8002dc0 <hts221_get_humid+0x1a8>)
 8002c68:	2301      	movs	r3, #1
 8002c6a:	425b      	negs	r3, r3
 8002c6c:	9302      	str	r3, [sp, #8]
 8002c6e:	2301      	movs	r3, #1
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	187b      	adds	r3, r7, r1
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2301      	movs	r3, #1
 8002c78:	2221      	movs	r2, #33	; 0x21
 8002c7a:	21be      	movs	r1, #190	; 0xbe
 8002c7c:	f001 f988 	bl	8003f90 <HAL_I2C_Mem_Write>
 8002c80:	0003      	movs	r3, r0
 8002c82:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8002c84:	197b      	adds	r3, r7, r5
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <hts221_get_humid+0x7a>
        return HUMID_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	425b      	negs	r3, r3
 8002c90:	e092      	b.n	8002db8 <hts221_get_humid+0x1a0>
    }

    // wait for one shot bit to clear by the hts
    do{
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002c92:	251f      	movs	r5, #31
 8002c94:	197c      	adds	r4, r7, r5
 8002c96:	484a      	ldr	r0, [pc, #296]	; (8002dc0 <hts221_get_humid+0x1a8>)
 8002c98:	2301      	movs	r3, #1
 8002c9a:	425b      	negs	r3, r3
 8002c9c:	9302      	str	r3, [sp, #8]
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2301      	movs	r3, #1
 8002caa:	2221      	movs	r2, #33	; 0x21
 8002cac:	21be      	movs	r1, #190	; 0xbe
 8002cae:	f001 fa9d 	bl	80041ec <HAL_I2C_Mem_Read>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8002cb6:	197b      	adds	r3, r7, r5
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <hts221_get_humid+0xac>
            return HUMID_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	425b      	negs	r3, r3
 8002cc2:	e079      	b.n	8002db8 <hts221_get_humid+0x1a0>
        }
    } while (buf[0] & HTS_CTRL_REG2_ONE_SHOT);
 8002cc4:	210c      	movs	r1, #12
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	001a      	movs	r2, r3
 8002ccc:	2301      	movs	r3, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d1df      	bne.n	8002c92 <hts221_get_humid+0x7a>

    /* === Read in humidity data === */

    //TODO check that this loop is right...
    // Try three times for temp data to be ready
    for (int i = 0; i < 3; ++i) {
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	dc22      	bgt.n	8002d22 <hts221_get_humid+0x10a>
        // buf[0] = HTS_STATUS_REG
        ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8002cdc:	251f      	movs	r5, #31
 8002cde:	197c      	adds	r4, r7, r5
 8002ce0:	4837      	ldr	r0, [pc, #220]	; (8002dc0 <hts221_get_humid+0x1a8>)
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	425b      	negs	r3, r3
 8002ce6:	9302      	str	r3, [sp, #8]
 8002ce8:	2301      	movs	r3, #1
 8002cea:	9301      	str	r3, [sp, #4]
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	2227      	movs	r2, #39	; 0x27
 8002cf4:	21be      	movs	r1, #190	; 0xbe
 8002cf6:	f001 fa79 	bl	80041ec <HAL_I2C_Mem_Read>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	7023      	strb	r3, [r4, #0]
        if (ret != HAL_OK) {
 8002cfe:	197b      	adds	r3, r7, r5
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <hts221_get_humid+0xf4>
            return HUMID_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	425b      	negs	r3, r3
 8002d0a:	e055      	b.n	8002db8 <hts221_get_humid+0x1a0>
        }
        if (buf[0] & 2){
 8002d0c:	230c      	movs	r3, #12
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	001a      	movs	r2, r3
 8002d14:	2302      	movs	r3, #2
 8002d16:	4013      	ands	r3, r2
 8002d18:	d102      	bne.n	8002d20 <hts221_get_humid+0x108>
            // new humid. data ready
            break;
        }
        return HUMID_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	425b      	negs	r3, r3
 8002d1e:	e04b      	b.n	8002db8 <hts221_get_humid+0x1a0>
            break;
 8002d20:	46c0      	nop			; (mov r8, r8)
    }

    // buf[1] = HTS_HUMIDITY_OUT_L
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8002d22:	230c      	movs	r3, #12
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	251f      	movs	r5, #31
 8002d2a:	197c      	adds	r4, r7, r5
 8002d2c:	4824      	ldr	r0, [pc, #144]	; (8002dc0 <hts221_get_humid+0x1a8>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4252      	negs	r2, r2
 8002d32:	9202      	str	r2, [sp, #8]
 8002d34:	2201      	movs	r2, #1
 8002d36:	9201      	str	r2, [sp, #4]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	2228      	movs	r2, #40	; 0x28
 8002d3e:	21be      	movs	r1, #190	; 0xbe
 8002d40:	f001 fa54 	bl	80041ec <HAL_I2C_Mem_Read>
 8002d44:	0003      	movs	r3, r0
 8002d46:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8002d48:	197b      	adds	r3, r7, r5
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <hts221_get_humid+0x13e>
        return HUMID_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	425b      	negs	r3, r3
 8002d54:	e030      	b.n	8002db8 <hts221_get_humid+0x1a0>
    }

    // buf[2] = HTS_HUMIDITY_OUT_H
    ret = HAL_I2C_Mem_Read(&I2C_CONTROLLER, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8002d56:	230c      	movs	r3, #12
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	251f      	movs	r5, #31
 8002d5e:	197c      	adds	r4, r7, r5
 8002d60:	4817      	ldr	r0, [pc, #92]	; (8002dc0 <hts221_get_humid+0x1a8>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	4252      	negs	r2, r2
 8002d66:	9202      	str	r2, [sp, #8]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	9201      	str	r2, [sp, #4]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2301      	movs	r3, #1
 8002d70:	2229      	movs	r2, #41	; 0x29
 8002d72:	21be      	movs	r1, #190	; 0xbe
 8002d74:	f001 fa3a 	bl	80041ec <HAL_I2C_Mem_Read>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8002d7c:	197b      	adds	r3, r7, r5
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <hts221_get_humid+0x172>
        return HUMID_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	425b      	negs	r3, r3
 8002d88:	e016      	b.n	8002db8 <hts221_get_humid+0x1a0>
    }

    H_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	18bb      	adds	r3, r7, r2
 8002d8e:	785b      	ldrb	r3, [r3, #1]
 8002d90:	b219      	sxth	r1, r3
 8002d92:	18bb      	adds	r3, r7, r2
 8002d94:	789b      	ldrb	r3, [r3, #2]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	b21a      	sxth	r2, r3
 8002d9a:	2016      	movs	r0, #22
 8002d9c:	183b      	adds	r3, r7, r0
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	801a      	strh	r2, [r3, #0]

    humid_adj = hts221_calc_humid(H_OUT, hts_cal_data);
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	183b      	adds	r3, r7, r0
 8002da6:	2100      	movs	r1, #0
 8002da8:	5e5b      	ldrsh	r3, [r3, r1]
 8002daa:	0011      	movs	r1, r2
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 f809 	bl	8002dc4 <hts221_calc_humid>
 8002db2:	0003      	movs	r3, r0
 8002db4:	613b      	str	r3, [r7, #16]

    return humid_adj;
 8002db6:	693b      	ldr	r3, [r7, #16]

}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b008      	add	sp, #32
 8002dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc0:	200000e0 	.word	0x200000e0

08002dc4 <hts221_calc_humid>:

int hts221_calc_humid(int16_t H_OUT, HTS_Cal * hts_cal_data){
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	0002      	movs	r2, r0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	1dbb      	adds	r3, r7, #6
 8002dd0:	801a      	strh	r2, [r3, #0]

    int zeroed_humid = H_OUT - hts_cal_data->H0_OUT;
 8002dd2:	1dbb      	adds	r3, r7, #6
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	5e9a      	ldrsh	r2, [r3, r2]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	60fb      	str	r3, [r7, #12]
    int humid_adj = (zeroed_humid * hts_cal_data->humid_correction_factor) + hts_cal_data->humid_offset;
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7fd ff13 	bl	8000c0c <__aeabi_i2f>
 8002de6:	1c02      	adds	r2, r0, #0
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	1c19      	adds	r1, r3, #0
 8002dee:	1c10      	adds	r0, r2, #0
 8002df0:	f7fd fdd2 	bl	8000998 <__aeabi_fmul>
 8002df4:	1c03      	adds	r3, r0, #0
 8002df6:	1c1c      	adds	r4, r3, #0
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7fd ff05 	bl	8000c0c <__aeabi_i2f>
 8002e02:	1c03      	adds	r3, r0, #0
 8002e04:	1c19      	adds	r1, r3, #0
 8002e06:	1c20      	adds	r0, r4, #0
 8002e08:	f7fd fb1e 	bl	8000448 <__aeabi_fadd>
 8002e0c:	1c03      	adds	r3, r0, #0
 8002e0e:	1c18      	adds	r0, r3, #0
 8002e10:	f7fd fedc 	bl	8000bcc <__aeabi_f2iz>
 8002e14:	0003      	movs	r3, r0
 8002e16:	60bb      	str	r3, [r7, #8]

    return humid_adj;
 8002e18:	68bb      	ldr	r3, [r7, #8]

 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b005      	add	sp, #20
 8002e20:	bd90      	pop	{r4, r7, pc}
	...

08002e24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <MX_I2C1_Init+0x7c>)
 8002e2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e30:	22e1      	movs	r2, #225	; 0xe1
 8002e32:	00d2      	lsls	r2, r2, #3
 8002e34:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e48:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 fffe 	bl	8003e64 <HAL_I2C_Init>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e6c:	f000 f909 	bl	8003082 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e72:	2100      	movs	r1, #0
 8002e74:	0018      	movs	r0, r3
 8002e76:	f001 fd2b 	bl	80048d0 <HAL_I2CEx_ConfigAnalogFilter>
 8002e7a:	1e03      	subs	r3, r0, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002e7e:	f000 f900 	bl	8003082 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <MX_I2C1_Init+0x78>)
 8002e84:	2100      	movs	r1, #0
 8002e86:	0018      	movs	r0, r3
 8002e88:	f001 fd6e 	bl	8004968 <HAL_I2CEx_ConfigDigitalFilter>
 8002e8c:	1e03      	subs	r3, r0, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002e90:	f000 f8f7 	bl	8003082 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	200000e0 	.word	0x200000e0
 8002ea0:	40005400 	.word	0x40005400

08002ea4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	240c      	movs	r4, #12
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	2314      	movs	r3, #20
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f003 fc80 	bl	80067bc <memset>
  if(i2cHandle->Instance==I2C1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_I2C_MspInit+0x80>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d129      	bne.n	8002f1a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_I2C_MspInit+0x84>)
 8002ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <HAL_I2C_MspInit+0x84>)
 8002ecc:	2102      	movs	r1, #2
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_I2C_MspInit+0x84>)
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ede:	193b      	adds	r3, r7, r4
 8002ee0:	22c0      	movs	r2, #192	; 0xc0
 8002ee2:	0092      	lsls	r2, r2, #2
 8002ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ee6:	0021      	movs	r1, r4
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	2212      	movs	r2, #18
 8002eec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2204      	movs	r2, #4
 8002efe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_I2C_MspInit+0x88>)
 8002f04:	0019      	movs	r1, r3
 8002f06:	0010      	movs	r0, r2
 8002f08:	f000 fe36 	bl	8003b78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_I2C_MspInit+0x84>)
 8002f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_I2C_MspInit+0x84>)
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	0389      	lsls	r1, r1, #14
 8002f16:	430a      	orrs	r2, r1
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b009      	add	sp, #36	; 0x24
 8002f20:	bd90      	pop	{r4, r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	40005400 	.word	0x40005400
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	50000400 	.word	0x50000400

08002f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f34:	f000 fcd2 	bl	80038dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f38:	f000 f828 	bl	8002f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f3c:	f7ff faee 	bl	800251c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f40:	f7ff ff70 	bl	8002e24 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002f44:	f000 fb9a 	bl	800367c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002f48:	f000 fb44 	bl	80035d4 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002f4c:	f000 f88c 	bl	8003068 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  serial_clear();
 8002f50:	f000 f8e0 	bl	8003114 <serial_clear>
  serial_println("Hello world\n\n");
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <main+0x4c>)
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 f90c 	bl	8003174 <serial_println>

  hts_cal_data = hts221_init();
 8002f5c:	f7ff fb5c 	bl	8002618 <hts221_init>
 8002f60:	0002      	movs	r2, r0
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <main+0x50>)
 8002f64:	601a      	str	r2, [r3, #0]
  bq_init_ret = bq_init();
 8002f66:	f7fe ffe5 	bl	8001f34 <bq_init>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <main+0x54>)
 8002f6e:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim6);
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <main+0x58>)
 8002f72:	0018      	movs	r0, r3
 8002f74:	f002 fcd0 	bl	8005918 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <main+0x48>
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	080068e8 	.word	0x080068e8
 8002f80:	2000012c 	.word	0x2000012c
 8002f84:	20000130 	.word	0x20000130
 8002f88:	20000134 	.word	0x20000134

08002f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b09d      	sub	sp, #116	; 0x74
 8002f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f92:	2438      	movs	r4, #56	; 0x38
 8002f94:	193b      	adds	r3, r7, r4
 8002f96:	0018      	movs	r0, r3
 8002f98:	2338      	movs	r3, #56	; 0x38
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	f003 fc0d 	bl	80067bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fa2:	2324      	movs	r3, #36	; 0x24
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	2314      	movs	r3, #20
 8002faa:	001a      	movs	r2, r3
 8002fac:	2100      	movs	r1, #0
 8002fae:	f003 fc05 	bl	80067bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fb2:	003b      	movs	r3, r7
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	2324      	movs	r3, #36	; 0x24
 8002fb8:	001a      	movs	r2, r3
 8002fba:	2100      	movs	r1, #0
 8002fbc:	f003 fbfe 	bl	80067bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc0:	4b27      	ldr	r3, [pc, #156]	; (8003060 <SystemClock_Config+0xd4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a27      	ldr	r2, [pc, #156]	; (8003064 <SystemClock_Config+0xd8>)
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <SystemClock_Config+0xd4>)
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	0109      	lsls	r1, r1, #4
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002fd2:	0021      	movs	r1, r4
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	2201      	movs	r2, #1
 8002fde:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	22a0      	movs	r2, #160	; 0xa0
 8002fea:	0212      	lsls	r2, r2, #8
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f001 fd02 	bl	8004a00 <HAL_RCC_OscConfig>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d001      	beq.n	8003004 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003000:	f000 f83f 	bl	8003082 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003004:	2124      	movs	r1, #36	; 0x24
 8003006:	187b      	adds	r3, r7, r1
 8003008:	220f      	movs	r2, #15
 800300a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800300c:	187b      	adds	r3, r7, r1
 800300e:	2200      	movs	r2, #0
 8003010:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003012:	187b      	adds	r3, r7, r1
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003018:	187b      	adds	r3, r7, r1
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800301e:	187b      	adds	r3, r7, r1
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003024:	187b      	adds	r3, r7, r1
 8003026:	2100      	movs	r1, #0
 8003028:	0018      	movs	r0, r3
 800302a:	f002 f8ad 	bl	8005188 <HAL_RCC_ClockConfig>
 800302e:	1e03      	subs	r3, r0, #0
 8003030:	d001      	beq.n	8003036 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003032:	f000 f826 	bl	8003082 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003036:	003b      	movs	r3, r7
 8003038:	220a      	movs	r2, #10
 800303a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800303c:	003b      	movs	r3, r7
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003042:	003b      	movs	r3, r7
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003048:	003b      	movs	r3, r7
 800304a:	0018      	movs	r0, r3
 800304c:	f002 fac0 	bl	80055d0 <HAL_RCCEx_PeriphCLKConfig>
 8003050:	1e03      	subs	r3, r0, #0
 8003052:	d001      	beq.n	8003058 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003054:	f000 f815 	bl	8003082 <Error_Handler>
  }
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b01d      	add	sp, #116	; 0x74
 800305e:	bd90      	pop	{r4, r7, pc}
 8003060:	40007000 	.word	0x40007000
 8003064:	ffffe7ff 	.word	0xffffe7ff

08003068 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800306c:	2200      	movs	r2, #0
 800306e:	2100      	movs	r1, #0
 8003070:	2011      	movs	r0, #17
 8003072:	f000 fd4f 	bl	8003b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003076:	2011      	movs	r0, #17
 8003078:	f000 fd61 	bl	8003b3e <HAL_NVIC_EnableIRQ>
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003086:	b672      	cpsid	i
}
 8003088:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800308a:	e7fe      	b.n	800308a <Error_Handler+0x8>

0800308c <convert>:

// Internal functions to serial_print
char *convert(unsigned int num, int base);
size_t strlen(const char *str);

char *convert(unsigned int num, int base) { 
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
	static char Representation[]= "0123456789ABCDEF";
	static char buffer[50]; 
	char *ptr; 
	
	ptr = &buffer[49]; 
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <convert+0x50>)
 8003098:	60fb      	str	r3, [r7, #12]
	*ptr = '\0'; 
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
	
	do { 
		*--ptr = Representation[num%base]; 
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	0011      	movs	r1, r2
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7fd f8b4 	bl	8000214 <__aeabi_uidivmod>
 80030ac:	000b      	movs	r3, r1
 80030ae:	001a      	movs	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <convert+0x54>)
 80030b8:	5c9a      	ldrb	r2, [r3, r2]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	701a      	strb	r2, [r3, #0]
		num /= base; 
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	0019      	movs	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd f820 	bl	8000108 <__udivsi3>
 80030c8:	0003      	movs	r3, r0
 80030ca:	607b      	str	r3, [r7, #4]
	} while(num != 0); 
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e6      	bne.n	80030a0 <convert+0x14>
	
	return(ptr); 
 80030d2:	68fb      	ldr	r3, [r7, #12]
}
 80030d4:	0018      	movs	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b004      	add	sp, #16
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	200000d1 	.word	0x200000d1
 80030e0:	20000000 	.word	0x20000000

080030e4 <strlen>:

/*!
    @brief https://stackoverflow.com/questions/22520413/c-strlen-implementation-in-one-line-of-code
*/
size_t strlen (const char *str) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
    return (*str) ? strlen(++str) + 1 : 0;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d009      	beq.n	8003108 <strlen+0x24>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3301      	adds	r3, #1
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7ff fff1 	bl	80030e4 <strlen>
 8003102:	0003      	movs	r3, r0
 8003104:	3301      	adds	r3, #1
 8003106:	e000      	b.n	800310a <strlen+0x26>
 8003108:	2300      	movs	r3, #0
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b002      	add	sp, #8
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <serial_clear>:
// End of internal functions for serial_print

void serial_clear() {
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
  char clear_sequence[] = {0x1b, 0x5B, 0x32, 0x4A, 0x1b, 0x5B, 0x48};
 800311a:	003b      	movs	r3, r7
 800311c:	4a08      	ldr	r2, [pc, #32]	; (8003140 <serial_clear+0x2c>)
 800311e:	6811      	ldr	r1, [r2, #0]
 8003120:	6019      	str	r1, [r3, #0]
 8003122:	8891      	ldrh	r1, [r2, #4]
 8003124:	8099      	strh	r1, [r3, #4]
 8003126:	7992      	ldrb	r2, [r2, #6]
 8003128:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&SERIAL_UART, (unsigned char*) clear_sequence, sizeof clear_sequence, HAL_MAX_DELAY);
 800312a:	2301      	movs	r3, #1
 800312c:	425b      	negs	r3, r3
 800312e:	0039      	movs	r1, r7
 8003130:	4804      	ldr	r0, [pc, #16]	; (8003144 <serial_clear+0x30>)
 8003132:	2207      	movs	r2, #7
 8003134:	f002 fe4c 	bl	8005dd0 <HAL_UART_Transmit>
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}
 8003140:	080068f8 	.word	0x080068f8
 8003144:	20000174 	.word	0x20000174

08003148 <serial_print>:

void serial_print(char string[]) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&SERIAL_UART, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0018      	movs	r0, r3
 8003154:	f7ff ffc6 	bl	80030e4 <strlen>
 8003158:	0003      	movs	r3, r0
 800315a:	b29a      	uxth	r2, r3
 800315c:	2301      	movs	r3, #1
 800315e:	425b      	negs	r3, r3
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4803      	ldr	r0, [pc, #12]	; (8003170 <serial_print+0x28>)
 8003164:	f002 fe34 	bl	8005dd0 <HAL_UART_Transmit>
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000174 	.word	0x20000174

08003174 <serial_println>:

void serial_println(char *string) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&SERIAL_UART, (unsigned char*) string, strlen(string), HAL_MAX_DELAY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0018      	movs	r0, r3
 8003180:	f7ff ffb0 	bl	80030e4 <strlen>
 8003184:	0003      	movs	r3, r0
 8003186:	b29a      	uxth	r2, r3
 8003188:	2301      	movs	r3, #1
 800318a:	425b      	negs	r3, r3
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	480a      	ldr	r0, [pc, #40]	; (80031b8 <serial_println+0x44>)
 8003190:	f002 fe1e 	bl	8005dd0 <HAL_UART_Transmit>
  char newline[] = "\r\f";
 8003194:	200c      	movs	r0, #12
 8003196:	183b      	adds	r3, r7, r0
 8003198:	4a08      	ldr	r2, [pc, #32]	; (80031bc <serial_println+0x48>)
 800319a:	8811      	ldrh	r1, [r2, #0]
 800319c:	8019      	strh	r1, [r3, #0]
 800319e:	7892      	ldrb	r2, [r2, #2]
 80031a0:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&SERIAL_UART, (unsigned char*) newline, 2, HAL_MAX_DELAY);
 80031a2:	2301      	movs	r3, #1
 80031a4:	425b      	negs	r3, r3
 80031a6:	1839      	adds	r1, r7, r0
 80031a8:	4803      	ldr	r0, [pc, #12]	; (80031b8 <serial_println+0x44>)
 80031aa:	2202      	movs	r2, #2
 80031ac:	f002 fe10 	bl	8005dd0 <HAL_UART_Transmit>
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b004      	add	sp, #16
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000174 	.word	0x20000174
 80031bc:	08006900 	.word	0x08006900

080031c0 <serial_putc>:

void serial_putc(char c) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	0002      	movs	r2, r0
 80031c8:	1dfb      	adds	r3, r7, #7
 80031ca:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&SERIAL_UART, (unsigned char*) &c, 1, HAL_MAX_DELAY);
 80031cc:	2301      	movs	r3, #1
 80031ce:	425b      	negs	r3, r3
 80031d0:	1df9      	adds	r1, r7, #7
 80031d2:	4804      	ldr	r0, [pc, #16]	; (80031e4 <serial_putc+0x24>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	f002 fdfb 	bl	8005dd0 <HAL_UART_Transmit>
}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	20000174 	.word	0x20000174

080031e8 <serial_printf>:

/*!
    @brief a version of printf implmented from http://www.firmcodes.com/write-printf-function-c/
*/
void serial_printf(char format[], ...) { 
 80031e8:	b40f      	push	{r0, r1, r2, r3}
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
    char c;
	char *s; 
	
	//Module 1: Initializing Myprintf's arguments 
	va_list arg; 
	va_start(arg, format); 
 80031f0:	2324      	movs	r3, #36	; 0x24
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	603b      	str	r3, [r7, #0]
	
	for(traverse = format; *traverse != '\0'; traverse++) { 
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e079      	b.n	80032f0 <serial_printf+0x108>
		while( (*traverse != '%') && (*traverse != '\0')) {
            if (*traverse == '\n') {
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b0a      	cmp	r3, #10
 8003202:	d104      	bne.n	800320e <serial_printf+0x26>
            	serial_print("\r\f");
 8003204:	4b41      	ldr	r3, [pc, #260]	; (800330c <serial_printf+0x124>)
 8003206:	0018      	movs	r0, r3
 8003208:	f7ff ff9e 	bl	8003148 <serial_print>
 800320c:	e004      	b.n	8003218 <serial_printf+0x30>
            }
            else {
            	serial_putc(*traverse);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	0018      	movs	r0, r3
 8003214:	f7ff ffd4 	bl	80031c0 <serial_putc>
            }
			traverse++; 
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	3301      	adds	r3, #1
 800321c:	617b      	str	r3, [r7, #20]
		while( (*traverse != '%') && (*traverse != '\0')) {
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b25      	cmp	r3, #37	; 0x25
 8003224:	d003      	beq.n	800322e <serial_printf+0x46>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e6      	bne.n	80031fc <serial_printf+0x14>
		} 

		if (*traverse == '\0') break;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d061      	beq.n	80032fa <serial_printf+0x112>
		traverse++; 
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	3301      	adds	r3, #1
 800323a:	617b      	str	r3, [r7, #20]
		
		//Module 2: Fetching and executing arguments
		switch(*traverse) { 
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	3b63      	subs	r3, #99	; 0x63
 8003242:	2b15      	cmp	r3, #21
 8003244:	d851      	bhi.n	80032ea <serial_printf+0x102>
 8003246:	009a      	lsls	r2, r3, #2
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <serial_printf+0x128>)
 800324a:	18d3      	adds	r3, r2, r3
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	469f      	mov	pc, r3
			case 'c' : 
                c = va_arg(arg,int);		//Fetch char argument
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	603a      	str	r2, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	701a      	strb	r2, [r3, #0]
				serial_putc(c);
 800325c:	1dfb      	adds	r3, r7, #7
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	0018      	movs	r0, r3
 8003262:	f7ff ffad 	bl	80031c0 <serial_putc>
				break; 	
 8003266:	e040      	b.n	80032ea <serial_printf+0x102>
			case 'd' : 
                signed_i = va_arg(arg,int); 		//Fetch Decimal/Integer argument
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	1d1a      	adds	r2, r3, #4
 800326c:	603a      	str	r2, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	613b      	str	r3, [r7, #16]
				if (signed_i < 0) {
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	da06      	bge.n	8003286 <serial_printf+0x9e>
                    signed_i = -signed_i;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	425b      	negs	r3, r3
 800327c:	613b      	str	r3, [r7, #16]
                    serial_print("-");
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <serial_printf+0x12c>)
 8003280:	0018      	movs	r0, r3
 8003282:	f7ff ff61 	bl	8003148 <serial_print>
                } 
                serial_print(convert(signed_i, 10));
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	210a      	movs	r1, #10
 800328a:	0018      	movs	r0, r3
 800328c:	f7ff fefe 	bl	800308c <convert>
 8003290:	0003      	movs	r3, r0
 8003292:	0018      	movs	r0, r3
 8003294:	f7ff ff58 	bl	8003148 <serial_print>
                break; 	
 8003298:	e027      	b.n	80032ea <serial_printf+0x102>
			case 'o':
                i = va_arg(arg,unsigned int); //Fetch Octal representation
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	1d1a      	adds	r2, r3, #4
 800329e:	603a      	str	r2, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 8));
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2108      	movs	r1, #8
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff feef 	bl	800308c <convert>
 80032ae:	0003      	movs	r3, r0
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7ff ff49 	bl	8003148 <serial_print>
                break; 
 80032b6:	e018      	b.n	80032ea <serial_printf+0x102>
			case 's': 
                s = va_arg(arg,char *); 		//Fetch string
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	1d1a      	adds	r2, r3, #4
 80032bc:	603a      	str	r2, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60bb      	str	r3, [r7, #8]
                serial_print(s);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff ff3f 	bl	8003148 <serial_print>
                break; 
 80032ca:	e00e      	b.n	80032ea <serial_printf+0x102>
			case 'x': 
                i = va_arg(arg,unsigned int); //Fetch Hexadecimal representation
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	1d1a      	adds	r2, r3, #4
 80032d0:	603a      	str	r2, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
                serial_print(convert(i, 16));
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2110      	movs	r1, #16
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff fed6 	bl	800308c <convert>
 80032e0:	0003      	movs	r3, r0
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7ff ff30 	bl	8003148 <serial_print>
                break; 
 80032e8:	46c0      	nop			; (mov r8, r8)
	for(traverse = format; *traverse != '\0'; traverse++) { 
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d192      	bne.n	800321e <serial_printf+0x36>
		}	
	} 

	//Module 3: Closing argument list to necessary clean-up
	va_end(arg); 
} 
 80032f8:	e000      	b.n	80032fc <serial_printf+0x114>
		if (*traverse == '\0') break;
 80032fa:	46c0      	nop			; (mov r8, r8)
} 
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b006      	add	sp, #24
 8003302:	bc80      	pop	{r7}
 8003304:	bc08      	pop	{r3}
 8003306:	b004      	add	sp, #16
 8003308:	4718      	bx	r3
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	08006900 	.word	0x08006900
 8003310:	08006c0c 	.word	0x08006c0c
 8003314:	08006904 	.word	0x08006904

08003318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_MspInit+0x24>)
 800331e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_MspInit+0x24>)
 8003322:	2101      	movs	r1, #1
 8003324:	430a      	orrs	r2, r1
 8003326:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <HAL_MspInit+0x24>)
 800332a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_MspInit+0x24>)
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	0549      	lsls	r1, r1, #21
 8003332:	430a      	orrs	r2, r1
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000

08003340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <NMI_Handler+0x4>

08003346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800334a:	e7fe      	b.n	800334a <HardFault_Handler+0x4>

0800334c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003364:	f000 fb0e 	bl	8003984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003376:	4b68      	ldr	r3, [pc, #416]	; (8003518 <TIM6_DAC_IRQHandler+0x1a8>)
 8003378:	0018      	movs	r0, r3
 800337a:	f002 fb19 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  if (hts_cal_data != NULL){
 800337e:	4b67      	ldr	r3, [pc, #412]	; (800351c <TIM6_DAC_IRQHandler+0x1ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d100      	bne.n	8003388 <TIM6_DAC_IRQHandler+0x18>
 8003386:	e0c2      	b.n	800350e <TIM6_DAC_IRQHandler+0x19e>
	  uint16_t proximity = VCNL4010_readProximity();
 8003388:	251e      	movs	r5, #30
 800338a:	197c      	adds	r4, r7, r5
 800338c:	f000 f9ea 	bl	8003764 <VCNL4010_readProximity>
 8003390:	0003      	movs	r3, r0
 8003392:	8023      	strh	r3, [r4, #0]
	  serial_printf("Proximity Reading is \t\t\t%d\r\n", proximity);
 8003394:	197b      	adds	r3, r7, r5
 8003396:	881a      	ldrh	r2, [r3, #0]
 8003398:	4b61      	ldr	r3, [pc, #388]	; (8003520 <TIM6_DAC_IRQHandler+0x1b0>)
 800339a:	0011      	movs	r1, r2
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff ff23 	bl	80031e8 <serial_printf>

	  int temp = hts221_get_temp('C', hts_cal_data);
 80033a2:	4b5e      	ldr	r3, [pc, #376]	; (800351c <TIM6_DAC_IRQHandler+0x1ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0019      	movs	r1, r3
 80033a8:	2043      	movs	r0, #67	; 0x43
 80033aa:	f7ff fb5d 	bl	8002a68 <hts221_get_temp>
 80033ae:	0003      	movs	r3, r0
 80033b0:	61bb      	str	r3, [r7, #24]
	  if (temp == TEMP_ERROR) serial_printf("Error reading temperature\r\n");
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <TIM6_DAC_IRQHandler+0x1b4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d104      	bne.n	80033c4 <TIM6_DAC_IRQHandler+0x54>
 80033ba:	4b5b      	ldr	r3, [pc, #364]	; (8003528 <TIM6_DAC_IRQHandler+0x1b8>)
 80033bc:	0018      	movs	r0, r3
 80033be:	f7ff ff13 	bl	80031e8 <serial_printf>
 80033c2:	e005      	b.n	80033d0 <TIM6_DAC_IRQHandler+0x60>
	  else serial_printf("Current temperature is \t\t\t%d\tC\r\n", temp);
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4b59      	ldr	r3, [pc, #356]	; (800352c <TIM6_DAC_IRQHandler+0x1bc>)
 80033c8:	0011      	movs	r1, r2
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7ff ff0c 	bl	80031e8 <serial_printf>

	  int humid = hts221_get_humid(hts_cal_data);
 80033d0:	4b52      	ldr	r3, [pc, #328]	; (800351c <TIM6_DAC_IRQHandler+0x1ac>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff fc1f 	bl	8002c18 <hts221_get_humid>
 80033da:	0003      	movs	r3, r0
 80033dc:	617b      	str	r3, [r7, #20]
	  if (humid == HUMID_ERROR) serial_printf("Error reading humidity\r\n");
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	d104      	bne.n	80033ee <TIM6_DAC_IRQHandler+0x7e>
 80033e4:	4b52      	ldr	r3, [pc, #328]	; (8003530 <TIM6_DAC_IRQHandler+0x1c0>)
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7ff fefe 	bl	80031e8 <serial_printf>
 80033ec:	e005      	b.n	80033fa <TIM6_DAC_IRQHandler+0x8a>
	  else serial_printf("Current Relative Humidity is \t\t%d\t%c\r\n", humid,37);
 80033ee:	6979      	ldr	r1, [r7, #20]
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <TIM6_DAC_IRQHandler+0x1c4>)
 80033f2:	2225      	movs	r2, #37	; 0x25
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7ff fef7 	bl	80031e8 <serial_printf>

	  uint16_t voltage = BQ27441_voltage();
 80033fa:	2512      	movs	r5, #18
 80033fc:	197c      	adds	r4, r7, r5
 80033fe:	f7fe fe03 	bl	8002008 <BQ27441_voltage>
 8003402:	0003      	movs	r3, r0
 8003404:	8023      	strh	r3, [r4, #0]
	  uint16_t soc = BQ27441_soc(FILTERED);
 8003406:	2610      	movs	r6, #16
 8003408:	19bc      	adds	r4, r7, r6
 800340a:	2000      	movs	r0, #0
 800340c:	f7fe fea4 	bl	8002158 <BQ27441_soc>
 8003410:	0003      	movs	r3, r0
 8003412:	8023      	strh	r3, [r4, #0]
	  uint16_t current = BQ27441_current(AVG);
 8003414:	2000      	movs	r0, #0
 8003416:	f7fe fe00 	bl	800201a <BQ27441_current>
 800341a:	0003      	movs	r3, r0
 800341c:	001a      	movs	r2, r3
 800341e:	230e      	movs	r3, #14
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	801a      	strh	r2, [r3, #0]
	  uint16_t cap_remaining = BQ27441_capacity(REMAIN);
 8003424:	220c      	movs	r2, #12
 8003426:	18bc      	adds	r4, r7, r2
 8003428:	2000      	movs	r0, #0
 800342a:	f7fe fe2d 	bl	8002088 <BQ27441_capacity>
 800342e:	0003      	movs	r3, r0
 8003430:	8023      	strh	r3, [r4, #0]
	  uint16_t cap_max = BQ27441_capacity(DESIGN);
 8003432:	210a      	movs	r1, #10
 8003434:	187c      	adds	r4, r7, r1
 8003436:	2008      	movs	r0, #8
 8003438:	f7fe fe26 	bl	8002088 <BQ27441_capacity>
 800343c:	0003      	movs	r3, r0
 800343e:	8023      	strh	r3, [r4, #0]
	  int16_t power = BQ27441_power(); //average draw
 8003440:	2008      	movs	r0, #8
 8003442:	183c      	adds	r4, r7, r0
 8003444:	f7fe fe7e 	bl	8002144 <BQ27441_power>
 8003448:	0003      	movs	r3, r0
 800344a:	8023      	strh	r3, [r4, #0]
	  uint16_t soh = BQ27441_soh(PERCENT);
 800344c:	2000      	movs	r0, #0
 800344e:	f7fe feab 	bl	80021a8 <BQ27441_soh>
 8003452:	0003      	movs	r3, r0
 8003454:	001a      	movs	r2, r3
 8003456:	1dbb      	adds	r3, r7, #6
 8003458:	801a      	strh	r2, [r3, #0]
	  uint16_t temp_bat = BQ27441_temperature(BATTERY) / 10;
 800345a:	2000      	movs	r0, #0
 800345c:	f7fe fecc 	bl	80021f8 <BQ27441_temperature>
 8003460:	0003      	movs	r3, r0
 8003462:	1d3c      	adds	r4, r7, #4
 8003464:	210a      	movs	r1, #10
 8003466:	0018      	movs	r0, r3
 8003468:	f7fc fe4e 	bl	8000108 <__udivsi3>
 800346c:	0003      	movs	r3, r0
 800346e:	8023      	strh	r3, [r4, #0]
	  uint16_t temp_bq_IC = BQ27441_temperature(INTERNAL_TEMP) / 10;
 8003470:	2001      	movs	r0, #1
 8003472:	f7fe fec1 	bl	80021f8 <BQ27441_temperature>
 8003476:	0003      	movs	r3, r0
 8003478:	1cbc      	adds	r4, r7, #2
 800347a:	210a      	movs	r1, #10
 800347c:	0018      	movs	r0, r3
 800347e:	f7fc fe43 	bl	8000108 <__udivsi3>
 8003482:	0003      	movs	r3, r0
 8003484:	8023      	strh	r3, [r4, #0]

	  serial_printf("State of Charge\t\t\t\t%d\t%%\r\n", soc);
 8003486:	19bb      	adds	r3, r7, r6
 8003488:	881a      	ldrh	r2, [r3, #0]
 800348a:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <TIM6_DAC_IRQHandler+0x1c8>)
 800348c:	0011      	movs	r1, r2
 800348e:	0018      	movs	r0, r3
 8003490:	f7ff feaa 	bl	80031e8 <serial_printf>
	  serial_printf("Battery Voltage\t\t\t\t%d\tmV\r\n", voltage);
 8003494:	197b      	adds	r3, r7, r5
 8003496:	881a      	ldrh	r2, [r3, #0]
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <TIM6_DAC_IRQHandler+0x1cc>)
 800349a:	0011      	movs	r1, r2
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff fea3 	bl	80031e8 <serial_printf>
	  serial_printf("Current\t\t\t\t\t%d\tmA\r\n", current);
 80034a2:	230e      	movs	r3, #14
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	881a      	ldrh	r2, [r3, #0]
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <TIM6_DAC_IRQHandler+0x1d0>)
 80034aa:	0011      	movs	r1, r2
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7ff fe9b 	bl	80031e8 <serial_printf>
	  serial_printf("Max Capacity\t\t\t\t%d\tmAh\r\n", cap_max);
 80034b2:	210a      	movs	r1, #10
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	881a      	ldrh	r2, [r3, #0]
 80034b8:	4b22      	ldr	r3, [pc, #136]	; (8003544 <TIM6_DAC_IRQHandler+0x1d4>)
 80034ba:	0011      	movs	r1, r2
 80034bc:	0018      	movs	r0, r3
 80034be:	f7ff fe93 	bl	80031e8 <serial_printf>
	  serial_printf("Remaining Capacity\t\t\t%d\tmAh\r\n", cap_remaining);
 80034c2:	220c      	movs	r2, #12
 80034c4:	18bb      	adds	r3, r7, r2
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <TIM6_DAC_IRQHandler+0x1d8>)
 80034ca:	0011      	movs	r1, r2
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff fe8b 	bl	80031e8 <serial_printf>
	  serial_printf("Ave power consumption\t\t\t%d\tmW\r\n", power);
 80034d2:	2008      	movs	r0, #8
 80034d4:	183b      	adds	r3, r7, r0
 80034d6:	2200      	movs	r2, #0
 80034d8:	5e9a      	ldrsh	r2, [r3, r2]
 80034da:	4b1c      	ldr	r3, [pc, #112]	; (800354c <TIM6_DAC_IRQHandler+0x1dc>)
 80034dc:	0011      	movs	r1, r2
 80034de:	0018      	movs	r0, r3
 80034e0:	f7ff fe82 	bl	80031e8 <serial_printf>
	  serial_printf("Health\t\t\t\t\t%d\t%%\r\n", soh);
 80034e4:	1dbb      	adds	r3, r7, #6
 80034e6:	881a      	ldrh	r2, [r3, #0]
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <TIM6_DAC_IRQHandler+0x1e0>)
 80034ea:	0011      	movs	r1, r2
 80034ec:	0018      	movs	r0, r3
 80034ee:	f7ff fe7b 	bl	80031e8 <serial_printf>
	  serial_printf("Battery Pack Temp\t\t\t%d\tK\r\n", temp_bat);
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	881a      	ldrh	r2, [r3, #0]
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <TIM6_DAC_IRQHandler+0x1e4>)
 80034f8:	0011      	movs	r1, r2
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff fe74 	bl	80031e8 <serial_printf>
	  serial_printf("Current Bat IC Temp is\t\t\t%d\tK\r\n\n", temp_bq_IC);
 8003500:	1cbb      	adds	r3, r7, #2
 8003502:	881a      	ldrh	r2, [r3, #0]
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <TIM6_DAC_IRQHandler+0x1e8>)
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff fe6d 	bl	80031e8 <serial_printf>
  }

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b009      	add	sp, #36	; 0x24
 8003514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	20000134 	.word	0x20000134
 800351c:	2000012c 	.word	0x2000012c
 8003520:	08006908 	.word	0x08006908
 8003524:	fffffe34 	.word	0xfffffe34
 8003528:	08006928 	.word	0x08006928
 800352c:	08006944 	.word	0x08006944
 8003530:	08006968 	.word	0x08006968
 8003534:	08006984 	.word	0x08006984
 8003538:	080069ac 	.word	0x080069ac
 800353c:	080069c8 	.word	0x080069c8
 8003540:	080069e4 	.word	0x080069e4
 8003544:	080069f8 	.word	0x080069f8
 8003548:	08006a14 	.word	0x08006a14
 800354c:	08006a34 	.word	0x08006a34
 8003550:	08006a54 	.word	0x08006a54
 8003554:	08006a68 	.word	0x08006a68
 8003558:	08006a84 	.word	0x08006a84

0800355c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <_sbrk+0x5c>)
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <_sbrk+0x60>)
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <_sbrk+0x64>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <_sbrk+0x64>)
 800357a:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <_sbrk+0x68>)
 800357c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800357e:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <_sbrk+0x64>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	18d3      	adds	r3, r2, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	429a      	cmp	r2, r3
 800358a:	d207      	bcs.n	800359c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800358c:	f003 f8e2 	bl	8006754 <__errno>
 8003590:	0003      	movs	r3, r0
 8003592:	220c      	movs	r2, #12
 8003594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003596:	2301      	movs	r3, #1
 8003598:	425b      	negs	r3, r3
 800359a:	e009      	b.n	80035b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <_sbrk+0x64>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035a2:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <_sbrk+0x64>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	18d2      	adds	r2, r2, r3
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <_sbrk+0x64>)
 80035ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80035ae:	68fb      	ldr	r3, [r7, #12]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b006      	add	sp, #24
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20002000 	.word	0x20002000
 80035bc:	00000400 	.word	0x00000400
 80035c0:	200000d4 	.word	0x200000d4
 80035c4:	20000210 	.word	0x20000210

080035c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035da:	003b      	movs	r3, r7
 80035dc:	0018      	movs	r0, r3
 80035de:	2308      	movs	r3, #8
 80035e0:	001a      	movs	r2, r3
 80035e2:	2100      	movs	r1, #0
 80035e4:	f003 f8ea 	bl	80067bc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80035e8:	4b15      	ldr	r3, [pc, #84]	; (8003640 <MX_TIM6_Init+0x6c>)
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <MX_TIM6_Init+0x70>)
 80035ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2097-1;
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <MX_TIM6_Init+0x6c>)
 80035f0:	2283      	movs	r2, #131	; 0x83
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <MX_TIM6_Init+0x6c>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <MX_TIM6_Init+0x6c>)
 80035fe:	4a12      	ldr	r2, [pc, #72]	; (8003648 <MX_TIM6_Init+0x74>)
 8003600:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <MX_TIM6_Init+0x6c>)
 8003604:	2200      	movs	r2, #0
 8003606:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <MX_TIM6_Init+0x6c>)
 800360a:	0018      	movs	r0, r3
 800360c:	f002 f944 	bl	8005898 <HAL_TIM_Base_Init>
 8003610:	1e03      	subs	r3, r0, #0
 8003612:	d001      	beq.n	8003618 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8003614:	f7ff fd35 	bl	8003082 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003618:	003b      	movs	r3, r7
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800361e:	003b      	movs	r3, r7
 8003620:	2200      	movs	r2, #0
 8003622:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003624:	003a      	movs	r2, r7
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_TIM6_Init+0x6c>)
 8003628:	0011      	movs	r1, r2
 800362a:	0018      	movs	r0, r3
 800362c:	f002 fb24 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8003634:	f7ff fd25 	bl	8003082 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000134 	.word	0x20000134
 8003644:	40001000 	.word	0x40001000
 8003648:	000003e7 	.word	0x000003e7

0800364c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a06      	ldr	r2, [pc, #24]	; (8003674 <HAL_TIM_Base_MspInit+0x28>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d105      	bne.n	800366a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_TIM_Base_MspInit+0x2c>)
 8003660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_TIM_Base_MspInit+0x2c>)
 8003664:	2110      	movs	r1, #16
 8003666:	430a      	orrs	r2, r1
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b002      	add	sp, #8
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	40001000 	.word	0x40001000
 8003678:	40021000 	.word	0x40021000

0800367c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 8003682:	4a15      	ldr	r2, [pc, #84]	; (80036d8 <MX_USART2_UART_Init+0x5c>)
 8003684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 8003688:	2296      	movs	r2, #150	; 0x96
 800368a:	0192      	lsls	r2, r2, #6
 800368c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 8003696:	2200      	movs	r2, #0
 8003698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 800369c:	2200      	movs	r2, #0
 800369e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 80036a2:	220c      	movs	r2, #12
 80036a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <MX_USART2_UART_Init+0x58>)
 80036c0:	0018      	movs	r0, r3
 80036c2:	f002 fb31 	bl	8005d28 <HAL_UART_Init>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d001      	beq.n	80036ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80036ca:	f7ff fcda 	bl	8003082 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000174 	.word	0x20000174
 80036d8:	40004400 	.word	0x40004400

080036dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	240c      	movs	r4, #12
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	0018      	movs	r0, r3
 80036ea:	2314      	movs	r3, #20
 80036ec:	001a      	movs	r2, r3
 80036ee:	2100      	movs	r1, #0
 80036f0:	f003 f864 	bl	80067bc <memset>
  if(uartHandle->Instance==USART2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_UART_MspInit+0x80>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d129      	bne.n	8003752 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036fe:	4b18      	ldr	r3, [pc, #96]	; (8003760 <HAL_UART_MspInit+0x84>)
 8003700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_UART_MspInit+0x84>)
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	0289      	lsls	r1, r1, #10
 8003708:	430a      	orrs	r2, r1
 800370a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370c:	4b14      	ldr	r3, [pc, #80]	; (8003760 <HAL_UART_MspInit+0x84>)
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	4b13      	ldr	r3, [pc, #76]	; (8003760 <HAL_UART_MspInit+0x84>)
 8003712:	2101      	movs	r1, #1
 8003714:	430a      	orrs	r2, r1
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_UART_MspInit+0x84>)
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2201      	movs	r2, #1
 800371e:	4013      	ands	r3, r2
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003724:	0021      	movs	r1, r4
 8003726:	187b      	adds	r3, r7, r1
 8003728:	220c      	movs	r2, #12
 800372a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372c:	187b      	adds	r3, r7, r1
 800372e:	2202      	movs	r2, #2
 8003730:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	187b      	adds	r3, r7, r1
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003738:	187b      	adds	r3, r7, r1
 800373a:	2203      	movs	r2, #3
 800373c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800373e:	187b      	adds	r3, r7, r1
 8003740:	2204      	movs	r2, #4
 8003742:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003744:	187a      	adds	r2, r7, r1
 8003746:	23a0      	movs	r3, #160	; 0xa0
 8003748:	05db      	lsls	r3, r3, #23
 800374a:	0011      	movs	r1, r2
 800374c:	0018      	movs	r0, r3
 800374e:	f000 fa13 	bl	8003b78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	b009      	add	sp, #36	; 0x24
 8003758:	bd90      	pop	{r4, r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	40004400 	.word	0x40004400
 8003760:	40021000 	.word	0x40021000

08003764 <VCNL4010_readProximity>:
    @return Raw 16-bit reading value, will vary with LED current, unit-less!
    TODO - Fix infinite loop, add timeout!
*/
/**************************************************************************/

uint16_t VCNL4010_readProximity(void) {
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
  uint8_t i = VCNL4010_read8(VCNL4010_INTSTAT);
 800376a:	1dfc      	adds	r4, r7, #7
 800376c:	208e      	movs	r0, #142	; 0x8e
 800376e:	f000 f845 	bl	80037fc <VCNL4010_read8>
 8003772:	0003      	movs	r3, r0
 8003774:	7023      	strb	r3, [r4, #0]
  i &= ~0x80;
 8003776:	1dfb      	adds	r3, r7, #7
 8003778:	1dfa      	adds	r2, r7, #7
 800377a:	7812      	ldrb	r2, [r2, #0]
 800377c:	217f      	movs	r1, #127	; 0x7f
 800377e:	400a      	ands	r2, r1
 8003780:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTSTAT, i);
 8003782:	1dfb      	adds	r3, r7, #7
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	0019      	movs	r1, r3
 8003788:	208e      	movs	r0, #142	; 0x8e
 800378a:	f000 f817 	bl	80037bc <VCNL4010_write8>

  VCNL4010_write8(VCNL4010_COMMAND, VCNL4010_MEASUREPROXIMITY);
 800378e:	2108      	movs	r1, #8
 8003790:	2080      	movs	r0, #128	; 0x80
 8003792:	f000 f813 	bl	80037bc <VCNL4010_write8>
  while (1) {
    // Serial.println(read8(VCNL4010_INTSTAT), HEX);
    uint8_t result = VCNL4010_read8(VCNL4010_COMMAND);
 8003796:	1dbc      	adds	r4, r7, #6
 8003798:	2080      	movs	r0, #128	; 0x80
 800379a:	f000 f82f 	bl	80037fc <VCNL4010_read8>
 800379e:	0003      	movs	r3, r0
 80037a0:	7023      	strb	r3, [r4, #0]
    // Serial.print("Ready = 0x"); Serial.println(result, HEX);
    if (result & VCNL4010_PROXIMITYREADY) {
 80037a2:	1dbb      	adds	r3, r7, #6
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2220      	movs	r2, #32
 80037a8:	4013      	ands	r3, r2
 80037aa:	d0f4      	beq.n	8003796 <VCNL4010_readProximity+0x32>
      return VCNL4010_read16(VCNL4010_PROXIMITYDATA);
 80037ac:	2087      	movs	r0, #135	; 0x87
 80037ae:	f000 f843 	bl	8003838 <VCNL4010_read16>
 80037b2:	0003      	movs	r3, r0
    }
//    delay(1);
  }
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b003      	add	sp, #12
 80037ba:	bd90      	pop	{r4, r7, pc}

080037bc <VCNL4010_write8>:
    }
  }
}

HAL_StatusTypeDef VCNL4010_write8(uint8_t subAddress, uint8_t data)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af04      	add	r7, sp, #16
 80037c2:	0002      	movs	r2, r0
 80037c4:	1dfb      	adds	r3, r7, #7
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	1dbb      	adds	r3, r7, #6
 80037ca:	1c0a      	adds	r2, r1, #0
 80037cc:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80037ce:	1dfb      	adds	r3, r7, #7
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	4808      	ldr	r0, [pc, #32]	; (80037f8 <VCNL4010_write8+0x3c>)
 80037d6:	2301      	movs	r3, #1
 80037d8:	425b      	negs	r3, r3
 80037da:	9302      	str	r3, [sp, #8]
 80037dc:	2301      	movs	r3, #1
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	1dbb      	adds	r3, r7, #6
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	2301      	movs	r3, #1
 80037e6:	2126      	movs	r1, #38	; 0x26
 80037e8:	f000 fbd2 	bl	8003f90 <HAL_I2C_Mem_Write>
 80037ec:	0003      	movs	r3, r0

}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	200000e0 	.word	0x200000e0

080037fc <VCNL4010_read8>:

uint8_t VCNL4010_read8(uint8_t subAddress){
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af04      	add	r7, sp, #16
 8003802:	0002      	movs	r2, r0
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	701a      	strb	r2, [r3, #0]

	uint8_t data;
	HAL_I2C_Mem_Read(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8003808:	1dfb      	adds	r3, r7, #7
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	b29a      	uxth	r2, r3
 800380e:	4809      	ldr	r0, [pc, #36]	; (8003834 <VCNL4010_read8+0x38>)
 8003810:	2301      	movs	r3, #1
 8003812:	425b      	negs	r3, r3
 8003814:	9302      	str	r3, [sp, #8]
 8003816:	2301      	movs	r3, #1
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	240f      	movs	r4, #15
 800381c:	193b      	adds	r3, r7, r4
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2301      	movs	r3, #1
 8003822:	2126      	movs	r1, #38	; 0x26
 8003824:	f000 fce2 	bl	80041ec <HAL_I2C_Mem_Read>
	return ((uint8_t) data);
 8003828:	193b      	adds	r3, r7, r4
 800382a:	781b      	ldrb	r3, [r3, #0]
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b005      	add	sp, #20
 8003832:	bd90      	pop	{r4, r7, pc}
 8003834:	200000e0 	.word	0x200000e0

08003838 <VCNL4010_read16>:

uint16_t VCNL4010_read16(uint8_t subAddress){
 8003838:	b590      	push	{r4, r7, lr}
 800383a:	b089      	sub	sp, #36	; 0x24
 800383c:	af04      	add	r7, sp, #16
 800383e:	0002      	movs	r2, r0
 8003840:	1dfb      	adds	r3, r7, #7
 8003842:	701a      	strb	r2, [r3, #0]

	uint8_t data[2];
	HAL_I2C_Mem_Read(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b29a      	uxth	r2, r3
 800384a:	480e      	ldr	r0, [pc, #56]	; (8003884 <VCNL4010_read16+0x4c>)
 800384c:	2301      	movs	r3, #1
 800384e:	425b      	negs	r3, r3
 8003850:	9302      	str	r3, [sp, #8]
 8003852:	2302      	movs	r3, #2
 8003854:	9301      	str	r3, [sp, #4]
 8003856:	240c      	movs	r4, #12
 8003858:	193b      	adds	r3, r7, r4
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2301      	movs	r3, #1
 800385e:	2126      	movs	r1, #38	; 0x26
 8003860:	f000 fcc4 	bl	80041ec <HAL_I2C_Mem_Read>
	return ((uint16_t) data[1] << 8) | data[0];
 8003864:	0021      	movs	r1, r4
 8003866:	187b      	adds	r3, r7, r1
 8003868:	785b      	ldrb	r3, [r3, #1]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	b21a      	sxth	r2, r3
 800386e:	187b      	adds	r3, r7, r1
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	b21b      	sxth	r3, r3
 8003874:	4313      	orrs	r3, r2
 8003876:	b21b      	sxth	r3, r3
 8003878:	b29b      	uxth	r3, r3
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b005      	add	sp, #20
 8003880:	bd90      	pop	{r4, r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	200000e0 	.word	0x200000e0

08003888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003888:	480d      	ldr	r0, [pc, #52]	; (80038c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800388a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800388c:	480d      	ldr	r0, [pc, #52]	; (80038c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800388e:	490e      	ldr	r1, [pc, #56]	; (80038c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003890:	4a0e      	ldr	r2, [pc, #56]	; (80038cc <LoopForever+0xe>)
  movs r3, #0
 8003892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003894:	e002      	b.n	800389c <LoopCopyDataInit>

08003896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800389a:	3304      	adds	r3, #4

0800389c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800389c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800389e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038a0:	d3f9      	bcc.n	8003896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038a2:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038a4:	4c0b      	ldr	r4, [pc, #44]	; (80038d4 <LoopForever+0x16>)
  movs r3, #0
 80038a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038a8:	e001      	b.n	80038ae <LoopFillZerobss>

080038aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038ac:	3204      	adds	r2, #4

080038ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038b0:	d3fb      	bcc.n	80038aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80038b2:	f7ff fe89 	bl	80035c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038b6:	f002 ff53 	bl	8006760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038ba:	f7ff fb39 	bl	8002f30 <main>

080038be <LoopForever>:

LoopForever:
    b LoopForever
 80038be:	e7fe      	b.n	80038be <LoopForever>
  ldr   r0, =_estack
 80038c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80038c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038c8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80038cc:	08006ce0 	.word	0x08006ce0
  ldr r2, =_sbss
 80038d0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80038d4:	2000020c 	.word	0x2000020c

080038d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038d8:	e7fe      	b.n	80038d8 <ADC1_COMP_IRQHandler>
	...

080038dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038e2:	1dfb      	adds	r3, r7, #7
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_Init+0x3c>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_Init+0x3c>)
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038f4:	2000      	movs	r0, #0
 80038f6:	f000 f811 	bl	800391c <HAL_InitTick>
 80038fa:	1e03      	subs	r3, r0, #0
 80038fc:	d003      	beq.n	8003906 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e001      	b.n	800390a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003906:	f7ff fd07 	bl	8003318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800390a:	1dfb      	adds	r3, r7, #7
 800390c:	781b      	ldrb	r3, [r3, #0]
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	40022000 	.word	0x40022000

0800391c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_InitTick+0x5c>)
 8003926:	681c      	ldr	r4, [r3, #0]
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <HAL_InitTick+0x60>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	0019      	movs	r1, r3
 800392e:	23fa      	movs	r3, #250	; 0xfa
 8003930:	0098      	lsls	r0, r3, #2
 8003932:	f7fc fbe9 	bl	8000108 <__udivsi3>
 8003936:	0003      	movs	r3, r0
 8003938:	0019      	movs	r1, r3
 800393a:	0020      	movs	r0, r4
 800393c:	f7fc fbe4 	bl	8000108 <__udivsi3>
 8003940:	0003      	movs	r3, r0
 8003942:	0018      	movs	r0, r3
 8003944:	f000 f90b 	bl	8003b5e <HAL_SYSTICK_Config>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d001      	beq.n	8003950 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e00f      	b.n	8003970 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d80b      	bhi.n	800396e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	2301      	movs	r3, #1
 800395a:	425b      	negs	r3, r3
 800395c:	2200      	movs	r2, #0
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f8d8 	bl	8003b14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_InitTick+0x64>)
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b003      	add	sp, #12
 8003976:	bd90      	pop	{r4, r7, pc}
 8003978:	20000014 	.word	0x20000014
 800397c:	2000001c 	.word	0x2000001c
 8003980:	20000018 	.word	0x20000018

08003984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_IncTick+0x1c>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	001a      	movs	r2, r3
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_IncTick+0x20>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	18d2      	adds	r2, r2, r3
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_IncTick+0x20>)
 8003996:	601a      	str	r2, [r3, #0]
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	2000001c 	.word	0x2000001c
 80039a4:	200001f8 	.word	0x200001f8

080039a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  return uwTick;
 80039ac:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <HAL_GetTick+0x10>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	200001f8 	.word	0x200001f8

080039bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	0002      	movs	r2, r0
 80039c4:	1dfb      	adds	r3, r7, #7
 80039c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039c8:	1dfb      	adds	r3, r7, #7
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b7f      	cmp	r3, #127	; 0x7f
 80039ce:	d809      	bhi.n	80039e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d0:	1dfb      	adds	r3, r7, #7
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	001a      	movs	r2, r3
 80039d6:	231f      	movs	r3, #31
 80039d8:	401a      	ands	r2, r3
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <__NVIC_EnableIRQ+0x30>)
 80039dc:	2101      	movs	r1, #1
 80039de:	4091      	lsls	r1, r2
 80039e0:	000a      	movs	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]
  }
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	e000e100 	.word	0xe000e100

080039f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	0002      	movs	r2, r0
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	1dfb      	adds	r3, r7, #7
 80039fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039fe:	1dfb      	adds	r3, r7, #7
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b7f      	cmp	r3, #127	; 0x7f
 8003a04:	d828      	bhi.n	8003a58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a06:	4a2f      	ldr	r2, [pc, #188]	; (8003ac4 <__NVIC_SetPriority+0xd4>)
 8003a08:	1dfb      	adds	r3, r7, #7
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b25b      	sxtb	r3, r3
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	33c0      	adds	r3, #192	; 0xc0
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	589b      	ldr	r3, [r3, r2]
 8003a16:	1dfa      	adds	r2, r7, #7
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	0011      	movs	r1, r2
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	400a      	ands	r2, r1
 8003a20:	00d2      	lsls	r2, r2, #3
 8003a22:	21ff      	movs	r1, #255	; 0xff
 8003a24:	4091      	lsls	r1, r2
 8003a26:	000a      	movs	r2, r1
 8003a28:	43d2      	mvns	r2, r2
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	401a      	ands	r2, r3
 8003a36:	1dfb      	adds	r3, r7, #7
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	4003      	ands	r3, r0
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a44:	481f      	ldr	r0, [pc, #124]	; (8003ac4 <__NVIC_SetPriority+0xd4>)
 8003a46:	1dfb      	adds	r3, r7, #7
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	b25b      	sxtb	r3, r3
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	33c0      	adds	r3, #192	; 0xc0
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a56:	e031      	b.n	8003abc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a58:	4a1b      	ldr	r2, [pc, #108]	; (8003ac8 <__NVIC_SetPriority+0xd8>)
 8003a5a:	1dfb      	adds	r3, r7, #7
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	0019      	movs	r1, r3
 8003a60:	230f      	movs	r3, #15
 8003a62:	400b      	ands	r3, r1
 8003a64:	3b08      	subs	r3, #8
 8003a66:	089b      	lsrs	r3, r3, #2
 8003a68:	3306      	adds	r3, #6
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	18d3      	adds	r3, r2, r3
 8003a6e:	3304      	adds	r3, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	1dfa      	adds	r2, r7, #7
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	0011      	movs	r1, r2
 8003a78:	2203      	movs	r2, #3
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	00d2      	lsls	r2, r2, #3
 8003a7e:	21ff      	movs	r1, #255	; 0xff
 8003a80:	4091      	lsls	r1, r2
 8003a82:	000a      	movs	r2, r1
 8003a84:	43d2      	mvns	r2, r2
 8003a86:	401a      	ands	r2, r3
 8003a88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	019b      	lsls	r3, r3, #6
 8003a8e:	22ff      	movs	r2, #255	; 0xff
 8003a90:	401a      	ands	r2, r3
 8003a92:	1dfb      	adds	r3, r7, #7
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	0018      	movs	r0, r3
 8003a98:	2303      	movs	r3, #3
 8003a9a:	4003      	ands	r3, r0
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aa0:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <__NVIC_SetPriority+0xd8>)
 8003aa2:	1dfb      	adds	r3, r7, #7
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	001c      	movs	r4, r3
 8003aa8:	230f      	movs	r3, #15
 8003aaa:	4023      	ands	r3, r4
 8003aac:	3b08      	subs	r3, #8
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	3306      	adds	r3, #6
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	18c3      	adds	r3, r0, r3
 8003ab8:	3304      	adds	r3, #4
 8003aba:	601a      	str	r2, [r3, #0]
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b003      	add	sp, #12
 8003ac2:	bd90      	pop	{r4, r7, pc}
 8003ac4:	e000e100 	.word	0xe000e100
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	1e5a      	subs	r2, r3, #1
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	045b      	lsls	r3, r3, #17
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d301      	bcc.n	8003ae4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e010      	b.n	8003b06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <SysTick_Config+0x44>)
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	3a01      	subs	r2, #1
 8003aea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aec:	2301      	movs	r3, #1
 8003aee:	425b      	negs	r3, r3
 8003af0:	2103      	movs	r1, #3
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7ff ff7c 	bl	80039f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <SysTick_Config+0x44>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afe:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <SysTick_Config+0x44>)
 8003b00:	2207      	movs	r2, #7
 8003b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b002      	add	sp, #8
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	e000e010 	.word	0xe000e010

08003b14 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	210f      	movs	r1, #15
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	1c02      	adds	r2, r0, #0
 8003b24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	0011      	movs	r1, r2
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff ff5d 	bl	80039f0 <__NVIC_SetPriority>
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b004      	add	sp, #16
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	0002      	movs	r2, r0
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b4a:	1dfb      	adds	r3, r7, #7
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	b25b      	sxtb	r3, r3
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff ff33 	bl	80039bc <__NVIC_EnableIRQ>
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b002      	add	sp, #8
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7ff ffaf 	bl	8003acc <SysTick_Config>
 8003b6e:	0003      	movs	r3, r0
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b002      	add	sp, #8
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003b8e:	e14f      	b.n	8003e30 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4091      	lsls	r1, r2
 8003b9a:	000a      	movs	r2, r1
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d100      	bne.n	8003ba8 <HAL_GPIO_Init+0x30>
 8003ba6:	e140      	b.n	8003e2a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d00b      	beq.n	8003bc8 <HAL_GPIO_Init+0x50>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d007      	beq.n	8003bc8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bbc:	2b11      	cmp	r3, #17
 8003bbe:	d003      	beq.n	8003bc8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b12      	cmp	r3, #18
 8003bc6:	d130      	bne.n	8003c2a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	43da      	mvns	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	409a      	lsls	r2, r3
 8003bea:	0013      	movs	r3, r2
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bfe:	2201      	movs	r2, #1
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	409a      	lsls	r2, r3
 8003c04:	0013      	movs	r3, r2
 8003c06:	43da      	mvns	r2, r3
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	2201      	movs	r2, #1
 8003c16:	401a      	ands	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	0013      	movs	r3, r2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	2203      	movs	r2, #3
 8003c36:	409a      	lsls	r2, r3
 8003c38:	0013      	movs	r3, r2
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	0013      	movs	r3, r2
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0xf2>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b12      	cmp	r3, #18
 8003c68:	d123      	bne.n	8003cb2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	08da      	lsrs	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3208      	adds	r2, #8
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	58d3      	ldr	r3, [r2, r3]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2207      	movs	r2, #7
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	409a      	lsls	r2, r3
 8003c84:	0013      	movs	r3, r2
 8003c86:	43da      	mvns	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2107      	movs	r1, #7
 8003c96:	400b      	ands	r3, r1
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	0013      	movs	r3, r2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3208      	adds	r2, #8
 8003cac:	0092      	lsls	r2, r2, #2
 8003cae:	6939      	ldr	r1, [r7, #16]
 8003cb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	0013      	movs	r3, r2
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2203      	movs	r2, #3
 8003cd0:	401a      	ands	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	0013      	movs	r3, r2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	055b      	lsls	r3, r3, #21
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d100      	bne.n	8003cf4 <HAL_GPIO_Init+0x17c>
 8003cf2:	e09a      	b.n	8003e2a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf4:	4b54      	ldr	r3, [pc, #336]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf8:	4b53      	ldr	r3, [pc, #332]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d00:	4a52      	ldr	r2, [pc, #328]	; (8003e4c <HAL_GPIO_Init+0x2d4>)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	3302      	adds	r3, #2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	589b      	ldr	r3, [r3, r2]
 8003d0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2203      	movs	r2, #3
 8003d12:	4013      	ands	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	220f      	movs	r2, #15
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	0013      	movs	r3, r2
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4013      	ands	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	23a0      	movs	r3, #160	; 0xa0
 8003d28:	05db      	lsls	r3, r3, #23
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d019      	beq.n	8003d62 <HAL_GPIO_Init+0x1ea>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a47      	ldr	r2, [pc, #284]	; (8003e50 <HAL_GPIO_Init+0x2d8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <HAL_GPIO_Init+0x1e6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a46      	ldr	r2, [pc, #280]	; (8003e54 <HAL_GPIO_Init+0x2dc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00d      	beq.n	8003d5a <HAL_GPIO_Init+0x1e2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a45      	ldr	r2, [pc, #276]	; (8003e58 <HAL_GPIO_Init+0x2e0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <HAL_GPIO_Init+0x1de>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a44      	ldr	r2, [pc, #272]	; (8003e5c <HAL_GPIO_Init+0x2e4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_GPIO_Init+0x1da>
 8003d4e:	2305      	movs	r3, #5
 8003d50:	e008      	b.n	8003d64 <HAL_GPIO_Init+0x1ec>
 8003d52:	2306      	movs	r3, #6
 8003d54:	e006      	b.n	8003d64 <HAL_GPIO_Init+0x1ec>
 8003d56:	2303      	movs	r3, #3
 8003d58:	e004      	b.n	8003d64 <HAL_GPIO_Init+0x1ec>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e002      	b.n	8003d64 <HAL_GPIO_Init+0x1ec>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_GPIO_Init+0x1ec>
 8003d62:	2300      	movs	r3, #0
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	2103      	movs	r1, #3
 8003d68:	400a      	ands	r2, r1
 8003d6a:	0092      	lsls	r2, r2, #2
 8003d6c:	4093      	lsls	r3, r2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d74:	4935      	ldr	r1, [pc, #212]	; (8003e4c <HAL_GPIO_Init+0x2d4>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d82:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <HAL_GPIO_Init+0x2e8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	025b      	lsls	r3, r3, #9
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003da6:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <HAL_GPIO_Init+0x2e8>)
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003dac:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <HAL_GPIO_Init+0x2e8>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	43da      	mvns	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	029b      	lsls	r3, r3, #10
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003dd0:	4b23      	ldr	r3, [pc, #140]	; (8003e60 <HAL_GPIO_Init+0x2e8>)
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dd6:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <HAL_GPIO_Init+0x2e8>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	43da      	mvns	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4013      	ands	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	035b      	lsls	r3, r3, #13
 8003dee:	4013      	ands	r3, r2
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dfa:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_GPIO_Init+0x2e8>)
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003e00:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <HAL_GPIO_Init+0x2e8>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	43da      	mvns	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	039b      	lsls	r3, r3, #14
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <HAL_GPIO_Init+0x2e8>)
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	40da      	lsrs	r2, r3
 8003e38:	1e13      	subs	r3, r2, #0
 8003e3a:	d000      	beq.n	8003e3e <HAL_GPIO_Init+0x2c6>
 8003e3c:	e6a8      	b.n	8003b90 <HAL_GPIO_Init+0x18>
  }
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46c0      	nop			; (mov r8, r8)
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b006      	add	sp, #24
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	50000400 	.word	0x50000400
 8003e54:	50000800 	.word	0x50000800
 8003e58:	50000c00 	.word	0x50000c00
 8003e5c:	50001c00 	.word	0x50001c00
 8003e60:	40010400 	.word	0x40010400

08003e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e082      	b.n	8003f7c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2241      	movs	r2, #65	; 0x41
 8003e7a:	5c9b      	ldrb	r3, [r3, r2]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2240      	movs	r2, #64	; 0x40
 8003e86:	2100      	movs	r1, #0
 8003e88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff f809 	bl	8002ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2241      	movs	r2, #65	; 0x41
 8003e96:	2124      	movs	r1, #36	; 0x24
 8003e98:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	438a      	bics	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4934      	ldr	r1, [pc, #208]	; (8003f84 <HAL_I2C_Init+0x120>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4931      	ldr	r1, [pc, #196]	; (8003f88 <HAL_I2C_Init+0x124>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d108      	bne.n	8003ee2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	0209      	lsls	r1, r1, #8
 8003edc:	430a      	orrs	r2, r1
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	e007      	b.n	8003ef2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2184      	movs	r1, #132	; 0x84
 8003eec:	0209      	lsls	r1, r1, #8
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d104      	bne.n	8003f04 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	0112      	lsls	r2, r2, #4
 8003f02:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	491f      	ldr	r1, [pc, #124]	; (8003f8c <HAL_I2C_Init+0x128>)
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	491a      	ldr	r1, [pc, #104]	; (8003f88 <HAL_I2C_Init+0x124>)
 8003f20:	400a      	ands	r2, r1
 8003f22:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	0011      	movs	r1, r2
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	021a      	lsls	r2, r3, #8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69d9      	ldr	r1, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1a      	ldr	r2, [r3, #32]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2101      	movs	r1, #1
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2241      	movs	r2, #65	; 0x41
 8003f68:	2120      	movs	r1, #32
 8003f6a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2242      	movs	r2, #66	; 0x42
 8003f76:	2100      	movs	r1, #0
 8003f78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b002      	add	sp, #8
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	f0ffffff 	.word	0xf0ffffff
 8003f88:	ffff7fff 	.word	0xffff7fff
 8003f8c:	02008000 	.word	0x02008000

08003f90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	000c      	movs	r4, r1
 8003f9a:	0010      	movs	r0, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	230a      	movs	r3, #10
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	1c22      	adds	r2, r4, #0
 8003fa4:	801a      	strh	r2, [r3, #0]
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	1c02      	adds	r2, r0, #0
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	1dbb      	adds	r3, r7, #6
 8003fb0:	1c0a      	adds	r2, r1, #0
 8003fb2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2241      	movs	r2, #65	; 0x41
 8003fb8:	5c9b      	ldrb	r3, [r3, r2]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d000      	beq.n	8003fc2 <HAL_I2C_Mem_Write+0x32>
 8003fc0:	e10c      	b.n	80041dc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d004      	beq.n	8003fd2 <HAL_I2C_Mem_Write+0x42>
 8003fc8:	232c      	movs	r3, #44	; 0x2c
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	0092      	lsls	r2, r2, #2
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0ff      	b.n	80041de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2240      	movs	r2, #64	; 0x40
 8003fe2:	5c9b      	ldrb	r3, [r3, r2]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_I2C_Mem_Write+0x5c>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e0f8      	b.n	80041de <HAL_I2C_Mem_Write+0x24e>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2240      	movs	r2, #64	; 0x40
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ff4:	f7ff fcd8 	bl	80039a8 <HAL_GetTick>
 8003ff8:	0003      	movs	r3, r0
 8003ffa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	0219      	lsls	r1, r3, #8
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	2319      	movs	r3, #25
 8004008:	2201      	movs	r2, #1
 800400a:	f000 fb0b 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 800400e:	1e03      	subs	r3, r0, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0e3      	b.n	80041de <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2241      	movs	r2, #65	; 0x41
 800401a:	2121      	movs	r1, #33	; 0x21
 800401c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2242      	movs	r2, #66	; 0x42
 8004022:	2140      	movs	r1, #64	; 0x40
 8004024:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	222c      	movs	r2, #44	; 0x2c
 8004036:	18ba      	adds	r2, r7, r2
 8004038:	8812      	ldrh	r2, [r2, #0]
 800403a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004042:	1dbb      	adds	r3, r7, #6
 8004044:	881c      	ldrh	r4, [r3, #0]
 8004046:	2308      	movs	r3, #8
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	881a      	ldrh	r2, [r3, #0]
 800404c:	230a      	movs	r3, #10
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	8819      	ldrh	r1, [r3, #0]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	0023      	movs	r3, r4
 800405e:	f000 f9f9 	bl	8004454 <I2C_RequestMemoryWrite>
 8004062:	1e03      	subs	r3, r0, #0
 8004064:	d005      	beq.n	8004072 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2240      	movs	r2, #64	; 0x40
 800406a:	2100      	movs	r1, #0
 800406c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e0b5      	b.n	80041de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	2bff      	cmp	r3, #255	; 0xff
 800407a:	d911      	bls.n	80040a0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	22ff      	movs	r2, #255	; 0xff
 8004080:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	b2da      	uxtb	r2, r3
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	045c      	lsls	r4, r3, #17
 800408c:	230a      	movs	r3, #10
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	8819      	ldrh	r1, [r3, #0]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	2300      	movs	r3, #0
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	0023      	movs	r3, r4
 800409a:	f000 fbe3 	bl	8004864 <I2C_TransferConfig>
 800409e:	e012      	b.n	80040c6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	049c      	lsls	r4, r3, #18
 80040b4:	230a      	movs	r3, #10
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	8819      	ldrh	r1, [r3, #0]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	0023      	movs	r3, r4
 80040c2:	f000 fbcf 	bl	8004864 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 fae8 	bl	80046a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e081      	b.n	80041de <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d03a      	beq.n	800418a <HAL_I2C_Mem_Write+0x1fa>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d136      	bne.n	800418a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	0013      	movs	r3, r2
 8004126:	2200      	movs	r2, #0
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	f000 fa7b 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 800412e:	1e03      	subs	r3, r0, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e053      	b.n	80041de <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	2bff      	cmp	r3, #255	; 0xff
 800413e:	d911      	bls.n	8004164 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	22ff      	movs	r2, #255	; 0xff
 8004144:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	b2da      	uxtb	r2, r3
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	045c      	lsls	r4, r3, #17
 8004150:	230a      	movs	r3, #10
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	8819      	ldrh	r1, [r3, #0]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	2300      	movs	r3, #0
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	0023      	movs	r3, r4
 800415e:	f000 fb81 	bl	8004864 <I2C_TransferConfig>
 8004162:	e012      	b.n	800418a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	b2da      	uxtb	r2, r3
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	049c      	lsls	r4, r3, #18
 8004178:	230a      	movs	r3, #10
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	8819      	ldrh	r1, [r3, #0]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	2300      	movs	r3, #0
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	0023      	movs	r3, r4
 8004186:	f000 fb6d 	bl	8004864 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d198      	bne.n	80040c6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	0018      	movs	r0, r3
 800419c:	f000 fac0 	bl	8004720 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041a0:	1e03      	subs	r3, r0, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e01a      	b.n	80041de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2220      	movs	r2, #32
 80041ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	490b      	ldr	r1, [pc, #44]	; (80041e8 <HAL_I2C_Mem_Write+0x258>)
 80041bc:	400a      	ands	r2, r1
 80041be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2241      	movs	r2, #65	; 0x41
 80041c4:	2120      	movs	r1, #32
 80041c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2242      	movs	r2, #66	; 0x42
 80041cc:	2100      	movs	r1, #0
 80041ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2240      	movs	r2, #64	; 0x40
 80041d4:	2100      	movs	r1, #0
 80041d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	e000      	b.n	80041de <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
  }
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b007      	add	sp, #28
 80041e4:	bd90      	pop	{r4, r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	fe00e800 	.word	0xfe00e800

080041ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b089      	sub	sp, #36	; 0x24
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	000c      	movs	r4, r1
 80041f6:	0010      	movs	r0, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	230a      	movs	r3, #10
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	1c22      	adds	r2, r4, #0
 8004200:	801a      	strh	r2, [r3, #0]
 8004202:	2308      	movs	r3, #8
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	1c02      	adds	r2, r0, #0
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	1dbb      	adds	r3, r7, #6
 800420c:	1c0a      	adds	r2, r1, #0
 800420e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2241      	movs	r2, #65	; 0x41
 8004214:	5c9b      	ldrb	r3, [r3, r2]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b20      	cmp	r3, #32
 800421a:	d000      	beq.n	800421e <HAL_I2C_Mem_Read+0x32>
 800421c:	e110      	b.n	8004440 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <HAL_I2C_Mem_Read+0x42>
 8004224:	232c      	movs	r3, #44	; 0x2c
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2280      	movs	r2, #128	; 0x80
 8004232:	0092      	lsls	r2, r2, #2
 8004234:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e103      	b.n	8004442 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2240      	movs	r2, #64	; 0x40
 800423e:	5c9b      	ldrb	r3, [r3, r2]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_I2C_Mem_Read+0x5c>
 8004244:	2302      	movs	r3, #2
 8004246:	e0fc      	b.n	8004442 <HAL_I2C_Mem_Read+0x256>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2240      	movs	r2, #64	; 0x40
 800424c:	2101      	movs	r1, #1
 800424e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004250:	f7ff fbaa 	bl	80039a8 <HAL_GetTick>
 8004254:	0003      	movs	r3, r0
 8004256:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	0219      	lsls	r1, r3, #8
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	2319      	movs	r3, #25
 8004264:	2201      	movs	r2, #1
 8004266:	f000 f9dd 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 800426a:	1e03      	subs	r3, r0, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0e7      	b.n	8004442 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2241      	movs	r2, #65	; 0x41
 8004276:	2122      	movs	r1, #34	; 0x22
 8004278:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2242      	movs	r2, #66	; 0x42
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800428c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	222c      	movs	r2, #44	; 0x2c
 8004292:	18ba      	adds	r2, r7, r2
 8004294:	8812      	ldrh	r2, [r2, #0]
 8004296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800429e:	1dbb      	adds	r3, r7, #6
 80042a0:	881c      	ldrh	r4, [r3, #0]
 80042a2:	2308      	movs	r3, #8
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	230a      	movs	r3, #10
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	8819      	ldrh	r1, [r3, #0]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	0023      	movs	r3, r4
 80042ba:	f000 f92f 	bl	800451c <I2C_RequestMemoryRead>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d005      	beq.n	80042ce <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2240      	movs	r2, #64	; 0x40
 80042c6:	2100      	movs	r1, #0
 80042c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e0b9      	b.n	8004442 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2bff      	cmp	r3, #255	; 0xff
 80042d6:	d911      	bls.n	80042fc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	22ff      	movs	r2, #255	; 0xff
 80042dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	045c      	lsls	r4, r3, #17
 80042e8:	230a      	movs	r3, #10
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	8819      	ldrh	r1, [r3, #0]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	4b56      	ldr	r3, [pc, #344]	; (800444c <HAL_I2C_Mem_Read+0x260>)
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	0023      	movs	r3, r4
 80042f6:	f000 fab5 	bl	8004864 <I2C_TransferConfig>
 80042fa:	e012      	b.n	8004322 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	b2da      	uxtb	r2, r3
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	049c      	lsls	r4, r3, #18
 8004310:	230a      	movs	r3, #10
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	8819      	ldrh	r1, [r3, #0]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	4b4c      	ldr	r3, [pc, #304]	; (800444c <HAL_I2C_Mem_Read+0x260>)
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	0023      	movs	r3, r4
 800431e:	f000 faa1 	bl	8004864 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	0013      	movs	r3, r2
 800432c:	2200      	movs	r2, #0
 800432e:	2104      	movs	r1, #4
 8004330:	f000 f978 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004334:	1e03      	subs	r3, r0, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e082      	b.n	8004442 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d03a      	beq.n	80043ee <HAL_I2C_Mem_Read+0x202>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	d136      	bne.n	80043ee <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	0013      	movs	r3, r2
 800438a:	2200      	movs	r2, #0
 800438c:	2180      	movs	r1, #128	; 0x80
 800438e:	f000 f949 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004392:	1e03      	subs	r3, r0, #0
 8004394:	d001      	beq.n	800439a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e053      	b.n	8004442 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2bff      	cmp	r3, #255	; 0xff
 80043a2:	d911      	bls.n	80043c8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	22ff      	movs	r2, #255	; 0xff
 80043a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	045c      	lsls	r4, r3, #17
 80043b4:	230a      	movs	r3, #10
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	8819      	ldrh	r1, [r3, #0]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	2300      	movs	r3, #0
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	0023      	movs	r3, r4
 80043c2:	f000 fa4f 	bl	8004864 <I2C_TransferConfig>
 80043c6:	e012      	b.n	80043ee <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	049c      	lsls	r4, r3, #18
 80043dc:	230a      	movs	r3, #10
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	8819      	ldrh	r1, [r3, #0]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	0023      	movs	r3, r4
 80043ea:	f000 fa3b 	bl	8004864 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d194      	bne.n	8004322 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 f98e 	bl	8004720 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004404:	1e03      	subs	r3, r0, #0
 8004406:	d001      	beq.n	800440c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e01a      	b.n	8004442 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2220      	movs	r2, #32
 8004412:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	490c      	ldr	r1, [pc, #48]	; (8004450 <HAL_I2C_Mem_Read+0x264>)
 8004420:	400a      	ands	r2, r1
 8004422:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2241      	movs	r2, #65	; 0x41
 8004428:	2120      	movs	r1, #32
 800442a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2242      	movs	r2, #66	; 0x42
 8004430:	2100      	movs	r1, #0
 8004432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2240      	movs	r2, #64	; 0x40
 8004438:	2100      	movs	r1, #0
 800443a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
  }
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b007      	add	sp, #28
 8004448:	bd90      	pop	{r4, r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	80002400 	.word	0x80002400
 8004450:	fe00e800 	.word	0xfe00e800

08004454 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b5b0      	push	{r4, r5, r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	000c      	movs	r4, r1
 800445e:	0010      	movs	r0, r2
 8004460:	0019      	movs	r1, r3
 8004462:	250a      	movs	r5, #10
 8004464:	197b      	adds	r3, r7, r5
 8004466:	1c22      	adds	r2, r4, #0
 8004468:	801a      	strh	r2, [r3, #0]
 800446a:	2308      	movs	r3, #8
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	1c02      	adds	r2, r0, #0
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	1dbb      	adds	r3, r7, #6
 8004474:	1c0a      	adds	r2, r1, #0
 8004476:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004478:	1dbb      	adds	r3, r7, #6
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	045c      	lsls	r4, r3, #17
 8004482:	197b      	adds	r3, r7, r5
 8004484:	8819      	ldrh	r1, [r3, #0]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	4b23      	ldr	r3, [pc, #140]	; (8004518 <I2C_RequestMemoryWrite+0xc4>)
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	0023      	movs	r3, r4
 800448e:	f000 f9e9 	bl	8004864 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004494:	6a39      	ldr	r1, [r7, #32]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	0018      	movs	r0, r3
 800449a:	f000 f902 	bl	80046a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e033      	b.n	800450e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044ae:	2308      	movs	r3, #8
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28
 80044bc:	e019      	b.n	80044f2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044be:	2308      	movs	r3, #8
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d2:	6a39      	ldr	r1, [r7, #32]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 f8e3 	bl	80046a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80044dc:	1e03      	subs	r3, r0, #0
 80044de:	d001      	beq.n	80044e4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e014      	b.n	800450e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044e4:	2308      	movs	r3, #8
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80044f2:	6a3a      	ldr	r2, [r7, #32]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	0013      	movs	r3, r2
 80044fc:	2200      	movs	r2, #0
 80044fe:	2180      	movs	r1, #128	; 0x80
 8004500:	f000 f890 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004504:	1e03      	subs	r3, r0, #0
 8004506:	d001      	beq.n	800450c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bdb0      	pop	{r4, r5, r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	80002000 	.word	0x80002000

0800451c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b5b0      	push	{r4, r5, r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	000c      	movs	r4, r1
 8004526:	0010      	movs	r0, r2
 8004528:	0019      	movs	r1, r3
 800452a:	250a      	movs	r5, #10
 800452c:	197b      	adds	r3, r7, r5
 800452e:	1c22      	adds	r2, r4, #0
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	2308      	movs	r3, #8
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	1c02      	adds	r2, r0, #0
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	1dbb      	adds	r3, r7, #6
 800453c:	1c0a      	adds	r2, r1, #0
 800453e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004540:	1dbb      	adds	r3, r7, #6
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	197b      	adds	r3, r7, r5
 8004548:	8819      	ldrh	r1, [r3, #0]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	4b23      	ldr	r3, [pc, #140]	; (80045dc <I2C_RequestMemoryRead+0xc0>)
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	2300      	movs	r3, #0
 8004552:	f000 f987 	bl	8004864 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	6a39      	ldr	r1, [r7, #32]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	0018      	movs	r0, r3
 800455e:	f000 f8a0 	bl	80046a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004562:	1e03      	subs	r3, r0, #0
 8004564:	d001      	beq.n	800456a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e033      	b.n	80045d2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800456a:	1dbb      	adds	r3, r7, #6
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d107      	bne.n	8004582 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004572:	2308      	movs	r3, #8
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	629a      	str	r2, [r3, #40]	; 0x28
 8004580:	e019      	b.n	80045b6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004582:	2308      	movs	r3, #8
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	b29b      	uxth	r3, r3
 800458c:	b2da      	uxtb	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004596:	6a39      	ldr	r1, [r7, #32]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	0018      	movs	r0, r3
 800459c:	f000 f881 	bl	80046a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80045a0:	1e03      	subs	r3, r0, #0
 80045a2:	d001      	beq.n	80045a8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e014      	b.n	80045d2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045a8:	2308      	movs	r3, #8
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045b6:	6a3a      	ldr	r2, [r7, #32]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	0013      	movs	r3, r2
 80045c0:	2200      	movs	r2, #0
 80045c2:	2140      	movs	r1, #64	; 0x40
 80045c4:	f000 f82e 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80045c8:	1e03      	subs	r3, r0, #0
 80045ca:	d001      	beq.n	80045d0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	0018      	movs	r0, r3
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b004      	add	sp, #16
 80045d8:	bdb0      	pop	{r4, r5, r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	80002000 	.word	0x80002000

080045e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2202      	movs	r2, #2
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d103      	bne.n	80045fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2200      	movs	r2, #0
 80045fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2201      	movs	r2, #1
 8004606:	4013      	ands	r3, r2
 8004608:	2b01      	cmp	r3, #1
 800460a:	d007      	beq.n	800461c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2101      	movs	r1, #1
 8004618:	430a      	orrs	r2, r1
 800461a:	619a      	str	r2, [r3, #24]
  }
}
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}

08004624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	1dfb      	adds	r3, r7, #7
 8004632:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004634:	e021      	b.n	800467a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	d01e      	beq.n	800467a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463c:	f7ff f9b4 	bl	80039a8 <HAL_GetTick>
 8004640:	0002      	movs	r2, r0
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d302      	bcc.n	8004652 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d113      	bne.n	800467a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	2220      	movs	r2, #32
 8004658:	431a      	orrs	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2241      	movs	r2, #65	; 0x41
 8004662:	2120      	movs	r1, #32
 8004664:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2242      	movs	r2, #66	; 0x42
 800466a:	2100      	movs	r1, #0
 800466c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2240      	movs	r2, #64	; 0x40
 8004672:	2100      	movs	r1, #0
 8004674:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e00f      	b.n	800469a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	4013      	ands	r3, r2
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	425a      	negs	r2, r3
 800468a:	4153      	adcs	r3, r2
 800468c:	b2db      	uxtb	r3, r3
 800468e:	001a      	movs	r2, r3
 8004690:	1dfb      	adds	r3, r7, #7
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d0ce      	beq.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b004      	add	sp, #16
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046ae:	e02b      	b.n	8004708 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	0018      	movs	r0, r3
 80046b8:	f000 f86e 	bl	8004798 <I2C_IsAcknowledgeFailed>
 80046bc:	1e03      	subs	r3, r0, #0
 80046be:	d001      	beq.n	80046c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e029      	b.n	8004718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	3301      	adds	r3, #1
 80046c8:	d01e      	beq.n	8004708 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7ff f96d 	bl	80039a8 <HAL_GetTick>
 80046ce:	0002      	movs	r2, r0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d113      	bne.n	8004708 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e4:	2220      	movs	r2, #32
 80046e6:	431a      	orrs	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2241      	movs	r2, #65	; 0x41
 80046f0:	2120      	movs	r1, #32
 80046f2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2242      	movs	r2, #66	; 0x42
 80046f8:	2100      	movs	r1, #0
 80046fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2240      	movs	r2, #64	; 0x40
 8004700:	2100      	movs	r1, #0
 8004702:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e007      	b.n	8004718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2202      	movs	r2, #2
 8004710:	4013      	ands	r3, r2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d1cc      	bne.n	80046b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b004      	add	sp, #16
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800472c:	e028      	b.n	8004780 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	0018      	movs	r0, r3
 8004736:	f000 f82f 	bl	8004798 <I2C_IsAcknowledgeFailed>
 800473a:	1e03      	subs	r3, r0, #0
 800473c:	d001      	beq.n	8004742 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e026      	b.n	8004790 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004742:	f7ff f931 	bl	80039a8 <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	429a      	cmp	r2, r3
 8004750:	d302      	bcc.n	8004758 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d113      	bne.n	8004780 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	2220      	movs	r2, #32
 800475e:	431a      	orrs	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2241      	movs	r2, #65	; 0x41
 8004768:	2120      	movs	r1, #32
 800476a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2242      	movs	r2, #66	; 0x42
 8004770:	2100      	movs	r1, #0
 8004772:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2240      	movs	r2, #64	; 0x40
 8004778:	2100      	movs	r1, #0
 800477a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e007      	b.n	8004790 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2220      	movs	r2, #32
 8004788:	4013      	ands	r3, r2
 800478a:	2b20      	cmp	r3, #32
 800478c:	d1cf      	bne.n	800472e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	b004      	add	sp, #16
 8004796:	bd80      	pop	{r7, pc}

08004798 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2210      	movs	r2, #16
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d151      	bne.n	8004856 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047b2:	e021      	b.n	80047f8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	3301      	adds	r3, #1
 80047b8:	d01e      	beq.n	80047f8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7ff f8f5 	bl	80039a8 <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <I2C_IsAcknowledgeFailed+0x38>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d113      	bne.n	80047f8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	2220      	movs	r2, #32
 80047d6:	431a      	orrs	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2241      	movs	r2, #65	; 0x41
 80047e0:	2120      	movs	r1, #32
 80047e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2242      	movs	r2, #66	; 0x42
 80047e8:	2100      	movs	r1, #0
 80047ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2240      	movs	r2, #64	; 0x40
 80047f0:	2100      	movs	r1, #0
 80047f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e02f      	b.n	8004858 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2220      	movs	r2, #32
 8004800:	4013      	ands	r3, r2
 8004802:	2b20      	cmp	r3, #32
 8004804:	d1d6      	bne.n	80047b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2210      	movs	r2, #16
 800480c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2220      	movs	r2, #32
 8004814:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	0018      	movs	r0, r3
 800481a:	f7ff fee1 	bl	80045e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	490d      	ldr	r1, [pc, #52]	; (8004860 <I2C_IsAcknowledgeFailed+0xc8>)
 800482a:	400a      	ands	r2, r1
 800482c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	2204      	movs	r2, #4
 8004834:	431a      	orrs	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2241      	movs	r2, #65	; 0x41
 800483e:	2120      	movs	r1, #32
 8004840:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2242      	movs	r2, #66	; 0x42
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2240      	movs	r2, #64	; 0x40
 800484e:	2100      	movs	r1, #0
 8004850:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b004      	add	sp, #16
 800485e:	bd80      	pop	{r7, pc}
 8004860:	fe00e800 	.word	0xfe00e800

08004864 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	0008      	movs	r0, r1
 800486e:	0011      	movs	r1, r2
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	240a      	movs	r4, #10
 8004874:	193b      	adds	r3, r7, r4
 8004876:	1c02      	adds	r2, r0, #0
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	2009      	movs	r0, #9
 800487c:	183b      	adds	r3, r7, r0
 800487e:	1c0a      	adds	r2, r1, #0
 8004880:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	6a3a      	ldr	r2, [r7, #32]
 800488a:	0d51      	lsrs	r1, r2, #21
 800488c:	2280      	movs	r2, #128	; 0x80
 800488e:	00d2      	lsls	r2, r2, #3
 8004890:	400a      	ands	r2, r1
 8004892:	490e      	ldr	r1, [pc, #56]	; (80048cc <I2C_TransferConfig+0x68>)
 8004894:	430a      	orrs	r2, r1
 8004896:	43d2      	mvns	r2, r2
 8004898:	401a      	ands	r2, r3
 800489a:	0011      	movs	r1, r2
 800489c:	193b      	adds	r3, r7, r4
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	059b      	lsls	r3, r3, #22
 80048a2:	0d9a      	lsrs	r2, r3, #22
 80048a4:	183b      	adds	r3, r7, r0
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	0418      	lsls	r0, r3, #16
 80048aa:	23ff      	movs	r3, #255	; 0xff
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	4003      	ands	r3, r0
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	431a      	orrs	r2, r3
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b005      	add	sp, #20
 80048c8:	bd90      	pop	{r4, r7, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	03ff63ff 	.word	0x03ff63ff

080048d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2241      	movs	r2, #65	; 0x41
 80048de:	5c9b      	ldrb	r3, [r3, r2]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d138      	bne.n	8004958 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2240      	movs	r2, #64	; 0x40
 80048ea:	5c9b      	ldrb	r3, [r3, r2]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e032      	b.n	800495a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2240      	movs	r2, #64	; 0x40
 80048f8:	2101      	movs	r1, #1
 80048fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2241      	movs	r2, #65	; 0x41
 8004900:	2124      	movs	r1, #36	; 0x24
 8004902:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2101      	movs	r1, #1
 8004910:	438a      	bics	r2, r1
 8004912:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4911      	ldr	r1, [pc, #68]	; (8004964 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004920:	400a      	ands	r2, r1
 8004922:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6819      	ldr	r1, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2101      	movs	r1, #1
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2241      	movs	r2, #65	; 0x41
 8004948:	2120      	movs	r1, #32
 800494a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2240      	movs	r2, #64	; 0x40
 8004950:	2100      	movs	r1, #0
 8004952:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	e000      	b.n	800495a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004958:	2302      	movs	r3, #2
  }
}
 800495a:	0018      	movs	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	b002      	add	sp, #8
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	ffffefff 	.word	0xffffefff

08004968 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2241      	movs	r2, #65	; 0x41
 8004976:	5c9b      	ldrb	r3, [r3, r2]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b20      	cmp	r3, #32
 800497c:	d139      	bne.n	80049f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2240      	movs	r2, #64	; 0x40
 8004982:	5c9b      	ldrb	r3, [r3, r2]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004988:	2302      	movs	r3, #2
 800498a:	e033      	b.n	80049f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	2101      	movs	r1, #1
 8004992:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2241      	movs	r2, #65	; 0x41
 8004998:	2124      	movs	r1, #36	; 0x24
 800499a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2101      	movs	r1, #1
 80049a8:	438a      	bics	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a11      	ldr	r2, [pc, #68]	; (80049fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2101      	movs	r1, #1
 80049da:	430a      	orrs	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2241      	movs	r2, #65	; 0x41
 80049e2:	2120      	movs	r1, #32
 80049e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2240      	movs	r2, #64	; 0x40
 80049ea:	2100      	movs	r1, #0
 80049ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
  }
}
 80049f4:	0018      	movs	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b004      	add	sp, #16
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	fffff0ff 	.word	0xfffff0ff

08004a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a00:	b5b0      	push	{r4, r5, r7, lr}
 8004a02:	b08a      	sub	sp, #40	; 0x28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f000 fbaf 	bl	8005172 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a14:	4bcf      	ldr	r3, [pc, #828]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	220c      	movs	r2, #12
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a1e:	4bcd      	ldr	r3, [pc, #820]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	025b      	lsls	r3, r3, #9
 8004a26:	4013      	ands	r3, r2
 8004a28:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4013      	ands	r3, r2
 8004a32:	d100      	bne.n	8004a36 <HAL_RCC_OscConfig+0x36>
 8004a34:	e07e      	b.n	8004b34 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d007      	beq.n	8004a4c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d112      	bne.n	8004a68 <HAL_RCC_OscConfig+0x68>
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	025b      	lsls	r3, r3, #9
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d10d      	bne.n	8004a68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	4bc1      	ldr	r3, [pc, #772]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	4013      	ands	r3, r2
 8004a56:	d100      	bne.n	8004a5a <HAL_RCC_OscConfig+0x5a>
 8004a58:	e06b      	b.n	8004b32 <HAL_RCC_OscConfig+0x132>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d167      	bne.n	8004b32 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f000 fb85 	bl	8005172 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	2380      	movs	r3, #128	; 0x80
 8004a6e:	025b      	lsls	r3, r3, #9
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d107      	bne.n	8004a84 <HAL_RCC_OscConfig+0x84>
 8004a74:	4bb7      	ldr	r3, [pc, #732]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4bb6      	ldr	r3, [pc, #728]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004a7a:	2180      	movs	r1, #128	; 0x80
 8004a7c:	0249      	lsls	r1, r1, #9
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e027      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd4>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	23a0      	movs	r3, #160	; 0xa0
 8004a8a:	02db      	lsls	r3, r3, #11
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d10e      	bne.n	8004aae <HAL_RCC_OscConfig+0xae>
 8004a90:	4bb0      	ldr	r3, [pc, #704]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4baf      	ldr	r3, [pc, #700]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	02c9      	lsls	r1, r1, #11
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	4bad      	ldr	r3, [pc, #692]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4bac      	ldr	r3, [pc, #688]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004aa4:	2180      	movs	r1, #128	; 0x80
 8004aa6:	0249      	lsls	r1, r1, #9
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e012      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd4>
 8004aae:	4ba9      	ldr	r3, [pc, #676]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4ba8      	ldr	r3, [pc, #672]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004ab4:	49a8      	ldr	r1, [pc, #672]	; (8004d58 <HAL_RCC_OscConfig+0x358>)
 8004ab6:	400a      	ands	r2, r1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	4ba6      	ldr	r3, [pc, #664]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	025b      	lsls	r3, r3, #9
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4ba2      	ldr	r3, [pc, #648]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4ba1      	ldr	r3, [pc, #644]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004ace:	49a3      	ldr	r1, [pc, #652]	; (8004d5c <HAL_RCC_OscConfig+0x35c>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d015      	beq.n	8004b08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fe ff64 	bl	80039a8 <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ae4:	e009      	b.n	8004afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae6:	f7fe ff5f 	bl	80039a8 <HAL_GetTick>
 8004aea:	0002      	movs	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b64      	cmp	r3, #100	; 0x64
 8004af2:	d902      	bls.n	8004afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	f000 fb3c 	bl	8005172 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004afa:	4b96      	ldr	r3, [pc, #600]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	029b      	lsls	r3, r3, #10
 8004b02:	4013      	ands	r3, r2
 8004b04:	d0ef      	beq.n	8004ae6 <HAL_RCC_OscConfig+0xe6>
 8004b06:	e015      	b.n	8004b34 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fe ff4e 	bl	80039a8 <HAL_GetTick>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b12:	f7fe ff49 	bl	80039a8 <HAL_GetTick>
 8004b16:	0002      	movs	r2, r0
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b64      	cmp	r3, #100	; 0x64
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e326      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b24:	4b8b      	ldr	r3, [pc, #556]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d1f0      	bne.n	8004b12 <HAL_RCC_OscConfig+0x112>
 8004b30:	e000      	b.n	8004b34 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d100      	bne.n	8004b40 <HAL_RCC_OscConfig+0x140>
 8004b3e:	e08b      	b.n	8004c58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d13e      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x1d0>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d13b      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004b58:	4b7e      	ldr	r3, [pc, #504]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d004      	beq.n	8004b6c <HAL_RCC_OscConfig+0x16c>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e302      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6c:	4b79      	ldr	r3, [pc, #484]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a7b      	ldr	r2, [pc, #492]	; (8004d60 <HAL_RCC_OscConfig+0x360>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	0019      	movs	r1, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	021a      	lsls	r2, r3, #8
 8004b7c:	4b75      	ldr	r3, [pc, #468]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004b82:	4b74      	ldr	r3, [pc, #464]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2209      	movs	r2, #9
 8004b88:	4393      	bics	r3, r2
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	4b71      	ldr	r3, [pc, #452]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b94:	f000 fc40 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 8004b98:	0001      	movs	r1, r0
 8004b9a:	4b6e      	ldr	r3, [pc, #440]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	220f      	movs	r2, #15
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	4a6f      	ldr	r2, [pc, #444]	; (8004d64 <HAL_RCC_OscConfig+0x364>)
 8004ba6:	5cd3      	ldrb	r3, [r2, r3]
 8004ba8:	000a      	movs	r2, r1
 8004baa:	40da      	lsrs	r2, r3
 8004bac:	4b6e      	ldr	r3, [pc, #440]	; (8004d68 <HAL_RCC_OscConfig+0x368>)
 8004bae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004bb0:	4b6e      	ldr	r3, [pc, #440]	; (8004d6c <HAL_RCC_OscConfig+0x36c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2513      	movs	r5, #19
 8004bb6:	197c      	adds	r4, r7, r5
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7fe feaf 	bl	800391c <HAL_InitTick>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004bc2:	197b      	adds	r3, r7, r5
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d046      	beq.n	8004c58 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004bca:	197b      	adds	r3, r7, r5
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	e2d0      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d027      	beq.n	8004c26 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004bd6:	4b5f      	ldr	r3, [pc, #380]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2209      	movs	r2, #9
 8004bdc:	4393      	bics	r3, r2
 8004bde:	0019      	movs	r1, r3
 8004be0:	4b5c      	ldr	r3, [pc, #368]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be8:	f7fe fede 	bl	80039a8 <HAL_GetTick>
 8004bec:	0003      	movs	r3, r0
 8004bee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fe fed9 	bl	80039a8 <HAL_GetTick>
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e2b6      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c04:	4b53      	ldr	r3, [pc, #332]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d0f1      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0e:	4b51      	ldr	r3, [pc, #324]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4a53      	ldr	r2, [pc, #332]	; (8004d60 <HAL_RCC_OscConfig+0x360>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	0019      	movs	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	021a      	lsls	r2, r3, #8
 8004c1e:	4b4d      	ldr	r3, [pc, #308]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]
 8004c24:	e018      	b.n	8004c58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c26:	4b4b      	ldr	r3, [pc, #300]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b4a      	ldr	r3, [pc, #296]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	438a      	bics	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fe feb9 	bl	80039a8 <HAL_GetTick>
 8004c36:	0003      	movs	r3, r0
 8004c38:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c3c:	f7fe feb4 	bl	80039a8 <HAL_GetTick>
 8004c40:	0002      	movs	r2, r0
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e291      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c4e:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2204      	movs	r2, #4
 8004c54:	4013      	ands	r3, r2
 8004c56:	d1f1      	bne.n	8004c3c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d100      	bne.n	8004c64 <HAL_RCC_OscConfig+0x264>
 8004c62:	e0a1      	b.n	8004da8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d140      	bne.n	8004cec <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c6a:	4b3a      	ldr	r3, [pc, #232]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4013      	ands	r3, r2
 8004c74:	d005      	beq.n	8004c82 <HAL_RCC_OscConfig+0x282>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e277      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c82:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4a3a      	ldr	r2, [pc, #232]	; (8004d70 <HAL_RCC_OscConfig+0x370>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c96:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	0a19      	lsrs	r1, r3, #8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	061a      	lsls	r2, r3, #24
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	0b5b      	lsrs	r3, r3, #13
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	2280      	movs	r2, #128	; 0x80
 8004cb4:	0212      	lsls	r2, r2, #8
 8004cb6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004cb8:	4b26      	ldr	r3, [pc, #152]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	210f      	movs	r1, #15
 8004cc0:	400b      	ands	r3, r1
 8004cc2:	4928      	ldr	r1, [pc, #160]	; (8004d64 <HAL_RCC_OscConfig+0x364>)
 8004cc4:	5ccb      	ldrb	r3, [r1, r3]
 8004cc6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <HAL_RCC_OscConfig+0x368>)
 8004cca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004ccc:	4b27      	ldr	r3, [pc, #156]	; (8004d6c <HAL_RCC_OscConfig+0x36c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2513      	movs	r5, #19
 8004cd2:	197c      	adds	r4, r7, r5
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7fe fe21 	bl	800391c <HAL_InitTick>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004cde:	197b      	adds	r3, r7, r5
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d060      	beq.n	8004da8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004ce6:	197b      	adds	r3, r7, r5
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	e242      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d03f      	beq.n	8004d74 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cf4:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b16      	ldr	r3, [pc, #88]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	0049      	lsls	r1, r1, #1
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d02:	f7fe fe51 	bl	80039a8 <HAL_GetTick>
 8004d06:	0003      	movs	r3, r0
 8004d08:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d0c:	f7fe fe4c 	bl	80039a8 <HAL_GetTick>
 8004d10:	0002      	movs	r2, r0
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e229      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	2380      	movs	r3, #128	; 0x80
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4013      	ands	r3, r2
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4a10      	ldr	r2, [pc, #64]	; (8004d70 <HAL_RCC_OscConfig+0x370>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	0a19      	lsrs	r1, r3, #8
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	061a      	lsls	r2, r3, #24
 8004d4c:	4b01      	ldr	r3, [pc, #4]	; (8004d54 <HAL_RCC_OscConfig+0x354>)
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	e029      	b.n	8004da8 <HAL_RCC_OscConfig+0x3a8>
 8004d54:	40021000 	.word	0x40021000
 8004d58:	fffeffff 	.word	0xfffeffff
 8004d5c:	fffbffff 	.word	0xfffbffff
 8004d60:	ffffe0ff 	.word	0xffffe0ff
 8004d64:	08006c64 	.word	0x08006c64
 8004d68:	20000014 	.word	0x20000014
 8004d6c:	20000018 	.word	0x20000018
 8004d70:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d74:	4bbd      	ldr	r3, [pc, #756]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4bbc      	ldr	r3, [pc, #752]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004d7a:	49bd      	ldr	r1, [pc, #756]	; (8005070 <HAL_RCC_OscConfig+0x670>)
 8004d7c:	400a      	ands	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fe fe12 	bl	80039a8 <HAL_GetTick>
 8004d84:	0003      	movs	r3, r0
 8004d86:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d8a:	f7fe fe0d 	bl	80039a8 <HAL_GetTick>
 8004d8e:	0002      	movs	r2, r0
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e1ea      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d9c:	4bb3      	ldr	r3, [pc, #716]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4013      	ands	r3, r2
 8004da6:	d1f0      	bne.n	8004d8a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2208      	movs	r2, #8
 8004dae:	4013      	ands	r3, r2
 8004db0:	d036      	beq.n	8004e20 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d019      	beq.n	8004dee <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dba:	4bac      	ldr	r3, [pc, #688]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dbe:	4bab      	ldr	r3, [pc, #684]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc6:	f7fe fdef 	bl	80039a8 <HAL_GetTick>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dd0:	f7fe fdea 	bl	80039a8 <HAL_GetTick>
 8004dd4:	0002      	movs	r2, r0
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e1c7      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004de2:	4ba2      	ldr	r3, [pc, #648]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	2202      	movs	r2, #2
 8004de8:	4013      	ands	r3, r2
 8004dea:	d0f1      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x3d0>
 8004dec:	e018      	b.n	8004e20 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dee:	4b9f      	ldr	r3, [pc, #636]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004df2:	4b9e      	ldr	r3, [pc, #632]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004df4:	2101      	movs	r1, #1
 8004df6:	438a      	bics	r2, r1
 8004df8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfa:	f7fe fdd5 	bl	80039a8 <HAL_GetTick>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fe fdd0 	bl	80039a8 <HAL_GetTick>
 8004e08:	0002      	movs	r2, r0
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e1ad      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e16:	4b95      	ldr	r3, [pc, #596]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d1f1      	bne.n	8004e04 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2204      	movs	r2, #4
 8004e26:	4013      	ands	r3, r2
 8004e28:	d100      	bne.n	8004e2c <HAL_RCC_OscConfig+0x42c>
 8004e2a:	e0ae      	b.n	8004f8a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2c:	2027      	movs	r0, #39	; 0x27
 8004e2e:	183b      	adds	r3, r7, r0
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e34:	4b8d      	ldr	r3, [pc, #564]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	055b      	lsls	r3, r3, #21
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d109      	bne.n	8004e54 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e40:	4b8a      	ldr	r3, [pc, #552]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e44:	4b89      	ldr	r3, [pc, #548]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	0549      	lsls	r1, r1, #21
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004e4e:	183b      	adds	r3, r7, r0
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e54:	4b87      	ldr	r3, [pc, #540]	; (8005074 <HAL_RCC_OscConfig+0x674>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d11a      	bne.n	8004e96 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e60:	4b84      	ldr	r3, [pc, #528]	; (8005074 <HAL_RCC_OscConfig+0x674>)
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	4b83      	ldr	r3, [pc, #524]	; (8005074 <HAL_RCC_OscConfig+0x674>)
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	0049      	lsls	r1, r1, #1
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6e:	f7fe fd9b 	bl	80039a8 <HAL_GetTick>
 8004e72:	0003      	movs	r3, r0
 8004e74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e78:	f7fe fd96 	bl	80039a8 <HAL_GetTick>
 8004e7c:	0002      	movs	r2, r0
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b64      	cmp	r3, #100	; 0x64
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e173      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8a:	4b7a      	ldr	r3, [pc, #488]	; (8005074 <HAL_RCC_OscConfig+0x674>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	2380      	movs	r3, #128	; 0x80
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4013      	ands	r3, r2
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d107      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x4b2>
 8004ea2:	4b72      	ldr	r3, [pc, #456]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ea6:	4b71      	ldr	r3, [pc, #452]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ea8:	2180      	movs	r1, #128	; 0x80
 8004eaa:	0049      	lsls	r1, r1, #1
 8004eac:	430a      	orrs	r2, r1
 8004eae:	651a      	str	r2, [r3, #80]	; 0x50
 8004eb0:	e031      	b.n	8004f16 <HAL_RCC_OscConfig+0x516>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x4d4>
 8004eba:	4b6c      	ldr	r3, [pc, #432]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ebe:	4b6b      	ldr	r3, [pc, #428]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ec0:	496b      	ldr	r1, [pc, #428]	; (8005070 <HAL_RCC_OscConfig+0x670>)
 8004ec2:	400a      	ands	r2, r1
 8004ec4:	651a      	str	r2, [r3, #80]	; 0x50
 8004ec6:	4b69      	ldr	r3, [pc, #420]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eca:	4b68      	ldr	r3, [pc, #416]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ecc:	496a      	ldr	r1, [pc, #424]	; (8005078 <HAL_RCC_OscConfig+0x678>)
 8004ece:	400a      	ands	r2, r1
 8004ed0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ed2:	e020      	b.n	8004f16 <HAL_RCC_OscConfig+0x516>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	23a0      	movs	r3, #160	; 0xa0
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d10e      	bne.n	8004efe <HAL_RCC_OscConfig+0x4fe>
 8004ee0:	4b62      	ldr	r3, [pc, #392]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee4:	4b61      	ldr	r3, [pc, #388]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	00c9      	lsls	r1, r1, #3
 8004eea:	430a      	orrs	r2, r1
 8004eec:	651a      	str	r2, [r3, #80]	; 0x50
 8004eee:	4b5f      	ldr	r3, [pc, #380]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ef2:	4b5e      	ldr	r3, [pc, #376]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	0049      	lsls	r1, r1, #1
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	651a      	str	r2, [r3, #80]	; 0x50
 8004efc:	e00b      	b.n	8004f16 <HAL_RCC_OscConfig+0x516>
 8004efe:	4b5b      	ldr	r3, [pc, #364]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f02:	4b5a      	ldr	r3, [pc, #360]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004f04:	495a      	ldr	r1, [pc, #360]	; (8005070 <HAL_RCC_OscConfig+0x670>)
 8004f06:	400a      	ands	r2, r1
 8004f08:	651a      	str	r2, [r3, #80]	; 0x50
 8004f0a:	4b58      	ldr	r3, [pc, #352]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f0e:	4b57      	ldr	r3, [pc, #348]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004f10:	4959      	ldr	r1, [pc, #356]	; (8005078 <HAL_RCC_OscConfig+0x678>)
 8004f12:	400a      	ands	r2, r1
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d015      	beq.n	8004f4a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1e:	f7fe fd43 	bl	80039a8 <HAL_GetTick>
 8004f22:	0003      	movs	r3, r0
 8004f24:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f26:	e009      	b.n	8004f3c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7fe fd3e 	bl	80039a8 <HAL_GetTick>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	4a52      	ldr	r2, [pc, #328]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e11a      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f3c:	4b4b      	ldr	r3, [pc, #300]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4013      	ands	r3, r2
 8004f46:	d0ef      	beq.n	8004f28 <HAL_RCC_OscConfig+0x528>
 8004f48:	e014      	b.n	8004f74 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f4a:	f7fe fd2d 	bl	80039a8 <HAL_GetTick>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f52:	e009      	b.n	8004f68 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f54:	f7fe fd28 	bl	80039a8 <HAL_GetTick>
 8004f58:	0002      	movs	r2, r0
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	4a47      	ldr	r2, [pc, #284]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e104      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f68:	4b40      	ldr	r3, [pc, #256]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004f6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4013      	ands	r3, r2
 8004f72:	d1ef      	bne.n	8004f54 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f74:	2327      	movs	r3, #39	; 0x27
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d105      	bne.n	8004f8a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f82:	4b3a      	ldr	r3, [pc, #232]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004f84:	493e      	ldr	r1, [pc, #248]	; (8005080 <HAL_RCC_OscConfig+0x680>)
 8004f86:	400a      	ands	r2, r1
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	4013      	ands	r3, r2
 8004f92:	d049      	beq.n	8005028 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d026      	beq.n	8004fea <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004f9c:	4b33      	ldr	r3, [pc, #204]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	4b32      	ldr	r3, [pc, #200]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	4b30      	ldr	r3, [pc, #192]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fac:	4b2f      	ldr	r3, [pc, #188]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004fae:	2101      	movs	r1, #1
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	635a      	str	r2, [r3, #52]	; 0x34
 8004fb4:	4b33      	ldr	r3, [pc, #204]	; (8005084 <HAL_RCC_OscConfig+0x684>)
 8004fb6:	6a1a      	ldr	r2, [r3, #32]
 8004fb8:	4b32      	ldr	r3, [pc, #200]	; (8005084 <HAL_RCC_OscConfig+0x684>)
 8004fba:	2180      	movs	r1, #128	; 0x80
 8004fbc:	0189      	lsls	r1, r1, #6
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc2:	f7fe fcf1 	bl	80039a8 <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fcc:	f7fe fcec 	bl	80039a8 <HAL_GetTick>
 8004fd0:	0002      	movs	r2, r0
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0c9      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fde:	4b23      	ldr	r3, [pc, #140]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d0f1      	beq.n	8004fcc <HAL_RCC_OscConfig+0x5cc>
 8004fe8:	e01e      	b.n	8005028 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004fea:	4b20      	ldr	r3, [pc, #128]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	4b1f      	ldr	r3, [pc, #124]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	438a      	bics	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
 8004ff6:	4b23      	ldr	r3, [pc, #140]	; (8005084 <HAL_RCC_OscConfig+0x684>)
 8004ff8:	6a1a      	ldr	r2, [r3, #32]
 8004ffa:	4b22      	ldr	r3, [pc, #136]	; (8005084 <HAL_RCC_OscConfig+0x684>)
 8004ffc:	4922      	ldr	r1, [pc, #136]	; (8005088 <HAL_RCC_OscConfig+0x688>)
 8004ffe:	400a      	ands	r2, r1
 8005000:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005002:	f7fe fcd1 	bl	80039a8 <HAL_GetTick>
 8005006:	0003      	movs	r3, r0
 8005008:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800500c:	f7fe fccc 	bl	80039a8 <HAL_GetTick>
 8005010:	0002      	movs	r2, r0
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e0a9      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800501e:	4b13      	ldr	r3, [pc, #76]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2202      	movs	r2, #2
 8005024:	4013      	ands	r3, r2
 8005026:	d1f1      	bne.n	800500c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	2b00      	cmp	r3, #0
 800502e:	d100      	bne.n	8005032 <HAL_RCC_OscConfig+0x632>
 8005030:	e09e      	b.n	8005170 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	2b0c      	cmp	r3, #12
 8005036:	d100      	bne.n	800503a <HAL_RCC_OscConfig+0x63a>
 8005038:	e077      	b.n	800512a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	2b02      	cmp	r3, #2
 8005040:	d158      	bne.n	80050f4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005042:	4b0a      	ldr	r3, [pc, #40]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_OscConfig+0x66c>)
 8005048:	4910      	ldr	r1, [pc, #64]	; (800508c <HAL_RCC_OscConfig+0x68c>)
 800504a:	400a      	ands	r2, r1
 800504c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504e:	f7fe fcab 	bl	80039a8 <HAL_GetTick>
 8005052:	0003      	movs	r3, r0
 8005054:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005056:	e01b      	b.n	8005090 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005058:	f7fe fca6 	bl	80039a8 <HAL_GetTick>
 800505c:	0002      	movs	r2, r0
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d914      	bls.n	8005090 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e083      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	40021000 	.word	0x40021000
 8005070:	fffffeff 	.word	0xfffffeff
 8005074:	40007000 	.word	0x40007000
 8005078:	fffffbff 	.word	0xfffffbff
 800507c:	00001388 	.word	0x00001388
 8005080:	efffffff 	.word	0xefffffff
 8005084:	40010000 	.word	0x40010000
 8005088:	ffffdfff 	.word	0xffffdfff
 800508c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005090:	4b3a      	ldr	r3, [pc, #232]	; (800517c <HAL_RCC_OscConfig+0x77c>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	049b      	lsls	r3, r3, #18
 8005098:	4013      	ands	r3, r2
 800509a:	d1dd      	bne.n	8005058 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800509c:	4b37      	ldr	r3, [pc, #220]	; (800517c <HAL_RCC_OscConfig+0x77c>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4a37      	ldr	r2, [pc, #220]	; (8005180 <HAL_RCC_OscConfig+0x780>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	0019      	movs	r1, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	431a      	orrs	r2, r3
 80050b6:	4b31      	ldr	r3, [pc, #196]	; (800517c <HAL_RCC_OscConfig+0x77c>)
 80050b8:	430a      	orrs	r2, r1
 80050ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050bc:	4b2f      	ldr	r3, [pc, #188]	; (800517c <HAL_RCC_OscConfig+0x77c>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b2e      	ldr	r3, [pc, #184]	; (800517c <HAL_RCC_OscConfig+0x77c>)
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	0449      	lsls	r1, r1, #17
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ca:	f7fe fc6d 	bl	80039a8 <HAL_GetTick>
 80050ce:	0003      	movs	r3, r0
 80050d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fe fc68 	bl	80039a8 <HAL_GetTick>
 80050d8:	0002      	movs	r2, r0
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e045      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80050e6:	4b25      	ldr	r3, [pc, #148]	; (800517c <HAL_RCC_OscConfig+0x77c>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	049b      	lsls	r3, r3, #18
 80050ee:	4013      	ands	r3, r2
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0x6d4>
 80050f2:	e03d      	b.n	8005170 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f4:	4b21      	ldr	r3, [pc, #132]	; (800517c <HAL_RCC_OscConfig+0x77c>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <HAL_RCC_OscConfig+0x77c>)
 80050fa:	4922      	ldr	r1, [pc, #136]	; (8005184 <HAL_RCC_OscConfig+0x784>)
 80050fc:	400a      	ands	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005100:	f7fe fc52 	bl	80039a8 <HAL_GetTick>
 8005104:	0003      	movs	r3, r0
 8005106:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510a:	f7fe fc4d 	bl	80039a8 <HAL_GetTick>
 800510e:	0002      	movs	r2, r0
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e02a      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800511c:	4b17      	ldr	r3, [pc, #92]	; (800517c <HAL_RCC_OscConfig+0x77c>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	2380      	movs	r3, #128	; 0x80
 8005122:	049b      	lsls	r3, r3, #18
 8005124:	4013      	ands	r3, r2
 8005126:	d1f0      	bne.n	800510a <HAL_RCC_OscConfig+0x70a>
 8005128:	e022      	b.n	8005170 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e01d      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <HAL_RCC_OscConfig+0x77c>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	2380      	movs	r3, #128	; 0x80
 8005140:	025b      	lsls	r3, r3, #9
 8005142:	401a      	ands	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	429a      	cmp	r2, r3
 800514a:	d10f      	bne.n	800516c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	23f0      	movs	r3, #240	; 0xf0
 8005150:	039b      	lsls	r3, r3, #14
 8005152:	401a      	ands	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d107      	bne.n	800516c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	23c0      	movs	r3, #192	; 0xc0
 8005160:	041b      	lsls	r3, r3, #16
 8005162:	401a      	ands	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	0018      	movs	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	b00a      	add	sp, #40	; 0x28
 8005178:	bdb0      	pop	{r4, r5, r7, pc}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	40021000 	.word	0x40021000
 8005180:	ff02ffff 	.word	0xff02ffff
 8005184:	feffffff 	.word	0xfeffffff

08005188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005188:	b5b0      	push	{r4, r5, r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e128      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800519c:	4b96      	ldr	r3, [pc, #600]	; (80053f8 <HAL_RCC_ClockConfig+0x270>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2201      	movs	r2, #1
 80051a2:	4013      	ands	r3, r2
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d91e      	bls.n	80051e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	4b93      	ldr	r3, [pc, #588]	; (80053f8 <HAL_RCC_ClockConfig+0x270>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2201      	movs	r2, #1
 80051b0:	4393      	bics	r3, r2
 80051b2:	0019      	movs	r1, r3
 80051b4:	4b90      	ldr	r3, [pc, #576]	; (80053f8 <HAL_RCC_ClockConfig+0x270>)
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051bc:	f7fe fbf4 	bl	80039a8 <HAL_GetTick>
 80051c0:	0003      	movs	r3, r0
 80051c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c4:	e009      	b.n	80051da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c6:	f7fe fbef 	bl	80039a8 <HAL_GetTick>
 80051ca:	0002      	movs	r2, r0
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	4a8a      	ldr	r2, [pc, #552]	; (80053fc <HAL_RCC_ClockConfig+0x274>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e109      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051da:	4b87      	ldr	r3, [pc, #540]	; (80053f8 <HAL_RCC_ClockConfig+0x270>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2201      	movs	r2, #1
 80051e0:	4013      	ands	r3, r2
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d1ee      	bne.n	80051c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2202      	movs	r2, #2
 80051ee:	4013      	ands	r3, r2
 80051f0:	d009      	beq.n	8005206 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f2:	4b83      	ldr	r3, [pc, #524]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	22f0      	movs	r2, #240	; 0xf0
 80051f8:	4393      	bics	r3, r2
 80051fa:	0019      	movs	r1, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	4b7f      	ldr	r3, [pc, #508]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 8005202:	430a      	orrs	r2, r1
 8005204:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2201      	movs	r2, #1
 800520c:	4013      	ands	r3, r2
 800520e:	d100      	bne.n	8005212 <HAL_RCC_ClockConfig+0x8a>
 8005210:	e089      	b.n	8005326 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800521a:	4b79      	ldr	r3, [pc, #484]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	4013      	ands	r3, r2
 8005224:	d120      	bne.n	8005268 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e0e1      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b03      	cmp	r3, #3
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005232:	4b73      	ldr	r3, [pc, #460]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	049b      	lsls	r3, r3, #18
 800523a:	4013      	ands	r3, r2
 800523c:	d114      	bne.n	8005268 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e0d5      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d106      	bne.n	8005258 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800524a:	4b6d      	ldr	r3, [pc, #436]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2204      	movs	r2, #4
 8005250:	4013      	ands	r3, r2
 8005252:	d109      	bne.n	8005268 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0ca      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005258:	4b69      	ldr	r3, [pc, #420]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4013      	ands	r3, r2
 8005262:	d101      	bne.n	8005268 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0c2      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005268:	4b65      	ldr	r3, [pc, #404]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2203      	movs	r2, #3
 800526e:	4393      	bics	r3, r2
 8005270:	0019      	movs	r1, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	4b62      	ldr	r3, [pc, #392]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 8005278:	430a      	orrs	r2, r1
 800527a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800527c:	f7fe fb94 	bl	80039a8 <HAL_GetTick>
 8005280:	0003      	movs	r3, r0
 8005282:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d111      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800528c:	e009      	b.n	80052a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528e:	f7fe fb8b 	bl	80039a8 <HAL_GetTick>
 8005292:	0002      	movs	r2, r0
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	4a58      	ldr	r2, [pc, #352]	; (80053fc <HAL_RCC_ClockConfig+0x274>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e0a5      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	220c      	movs	r2, #12
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d1ef      	bne.n	800528e <HAL_RCC_ClockConfig+0x106>
 80052ae:	e03a      	b.n	8005326 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d111      	bne.n	80052dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052b8:	e009      	b.n	80052ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ba:	f7fe fb75 	bl	80039a8 <HAL_GetTick>
 80052be:	0002      	movs	r2, r0
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	4a4d      	ldr	r2, [pc, #308]	; (80053fc <HAL_RCC_ClockConfig+0x274>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e08f      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ce:	4b4c      	ldr	r3, [pc, #304]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	220c      	movs	r2, #12
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b0c      	cmp	r3, #12
 80052d8:	d1ef      	bne.n	80052ba <HAL_RCC_ClockConfig+0x132>
 80052da:	e024      	b.n	8005326 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d11b      	bne.n	800531c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e4:	e009      	b.n	80052fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e6:	f7fe fb5f 	bl	80039a8 <HAL_GetTick>
 80052ea:	0002      	movs	r2, r0
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	4a42      	ldr	r2, [pc, #264]	; (80053fc <HAL_RCC_ClockConfig+0x274>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e079      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052fa:	4b41      	ldr	r3, [pc, #260]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	220c      	movs	r2, #12
 8005300:	4013      	ands	r3, r2
 8005302:	2b04      	cmp	r3, #4
 8005304:	d1ef      	bne.n	80052e6 <HAL_RCC_ClockConfig+0x15e>
 8005306:	e00e      	b.n	8005326 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005308:	f7fe fb4e 	bl	80039a8 <HAL_GetTick>
 800530c:	0002      	movs	r2, r0
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	4a3a      	ldr	r2, [pc, #232]	; (80053fc <HAL_RCC_ClockConfig+0x274>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d901      	bls.n	800531c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e068      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800531c:	4b38      	ldr	r3, [pc, #224]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	220c      	movs	r2, #12
 8005322:	4013      	ands	r3, r2
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005326:	4b34      	ldr	r3, [pc, #208]	; (80053f8 <HAL_RCC_ClockConfig+0x270>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	4013      	ands	r3, r2
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d21e      	bcs.n	8005372 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005334:	4b30      	ldr	r3, [pc, #192]	; (80053f8 <HAL_RCC_ClockConfig+0x270>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2201      	movs	r2, #1
 800533a:	4393      	bics	r3, r2
 800533c:	0019      	movs	r1, r3
 800533e:	4b2e      	ldr	r3, [pc, #184]	; (80053f8 <HAL_RCC_ClockConfig+0x270>)
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005346:	f7fe fb2f 	bl	80039a8 <HAL_GetTick>
 800534a:	0003      	movs	r3, r0
 800534c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534e:	e009      	b.n	8005364 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fe fb2a 	bl	80039a8 <HAL_GetTick>
 8005354:	0002      	movs	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	4a28      	ldr	r2, [pc, #160]	; (80053fc <HAL_RCC_ClockConfig+0x274>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e044      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005364:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <HAL_RCC_ClockConfig+0x270>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2201      	movs	r2, #1
 800536a:	4013      	ands	r3, r2
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d1ee      	bne.n	8005350 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2204      	movs	r2, #4
 8005378:	4013      	ands	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800537c:	4b20      	ldr	r3, [pc, #128]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	4a20      	ldr	r2, [pc, #128]	; (8005404 <HAL_RCC_ClockConfig+0x27c>)
 8005382:	4013      	ands	r3, r2
 8005384:	0019      	movs	r1, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 800538c:	430a      	orrs	r2, r1
 800538e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2208      	movs	r2, #8
 8005396:	4013      	ands	r3, r2
 8005398:	d00a      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800539a:	4b19      	ldr	r3, [pc, #100]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	4a1a      	ldr	r2, [pc, #104]	; (8005408 <HAL_RCC_ClockConfig+0x280>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	0019      	movs	r1, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	00da      	lsls	r2, r3, #3
 80053aa:	4b15      	ldr	r3, [pc, #84]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 80053ac:	430a      	orrs	r2, r1
 80053ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053b0:	f000 f832 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053b4:	0001      	movs	r1, r0
 80053b6:	4b12      	ldr	r3, [pc, #72]	; (8005400 <HAL_RCC_ClockConfig+0x278>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	220f      	movs	r2, #15
 80053be:	4013      	ands	r3, r2
 80053c0:	4a12      	ldr	r2, [pc, #72]	; (800540c <HAL_RCC_ClockConfig+0x284>)
 80053c2:	5cd3      	ldrb	r3, [r2, r3]
 80053c4:	000a      	movs	r2, r1
 80053c6:	40da      	lsrs	r2, r3
 80053c8:	4b11      	ldr	r3, [pc, #68]	; (8005410 <HAL_RCC_ClockConfig+0x288>)
 80053ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <HAL_RCC_ClockConfig+0x28c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	250b      	movs	r5, #11
 80053d2:	197c      	adds	r4, r7, r5
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7fe faa1 	bl	800391c <HAL_InitTick>
 80053da:	0003      	movs	r3, r0
 80053dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80053de:	197b      	adds	r3, r7, r5
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80053e6:	197b      	adds	r3, r7, r5
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	e000      	b.n	80053ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	0018      	movs	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b004      	add	sp, #16
 80053f4:	bdb0      	pop	{r4, r5, r7, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	40022000 	.word	0x40022000
 80053fc:	00001388 	.word	0x00001388
 8005400:	40021000 	.word	0x40021000
 8005404:	fffff8ff 	.word	0xfffff8ff
 8005408:	ffffc7ff 	.word	0xffffc7ff
 800540c:	08006c64 	.word	0x08006c64
 8005410:	20000014 	.word	0x20000014
 8005414:	20000018 	.word	0x20000018

08005418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	b5b0      	push	{r4, r5, r7, lr}
 800541a:	b08e      	sub	sp, #56	; 0x38
 800541c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800541e:	4b4c      	ldr	r3, [pc, #304]	; (8005550 <HAL_RCC_GetSysClockFreq+0x138>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005426:	230c      	movs	r3, #12
 8005428:	4013      	ands	r3, r2
 800542a:	2b0c      	cmp	r3, #12
 800542c:	d014      	beq.n	8005458 <HAL_RCC_GetSysClockFreq+0x40>
 800542e:	d900      	bls.n	8005432 <HAL_RCC_GetSysClockFreq+0x1a>
 8005430:	e07b      	b.n	800552a <HAL_RCC_GetSysClockFreq+0x112>
 8005432:	2b04      	cmp	r3, #4
 8005434:	d002      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x24>
 8005436:	2b08      	cmp	r3, #8
 8005438:	d00b      	beq.n	8005452 <HAL_RCC_GetSysClockFreq+0x3a>
 800543a:	e076      	b.n	800552a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800543c:	4b44      	ldr	r3, [pc, #272]	; (8005550 <HAL_RCC_GetSysClockFreq+0x138>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2210      	movs	r2, #16
 8005442:	4013      	ands	r3, r2
 8005444:	d002      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005446:	4b43      	ldr	r3, [pc, #268]	; (8005554 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800544a:	e07c      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800544c:	4b42      	ldr	r3, [pc, #264]	; (8005558 <HAL_RCC_GetSysClockFreq+0x140>)
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005450:	e079      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005452:	4b42      	ldr	r3, [pc, #264]	; (800555c <HAL_RCC_GetSysClockFreq+0x144>)
 8005454:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005456:	e076      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	0c9a      	lsrs	r2, r3, #18
 800545c:	230f      	movs	r3, #15
 800545e:	401a      	ands	r2, r3
 8005460:	4b3f      	ldr	r3, [pc, #252]	; (8005560 <HAL_RCC_GetSysClockFreq+0x148>)
 8005462:	5c9b      	ldrb	r3, [r3, r2]
 8005464:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	0d9a      	lsrs	r2, r3, #22
 800546a:	2303      	movs	r3, #3
 800546c:	4013      	ands	r3, r2
 800546e:	3301      	adds	r3, #1
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005472:	4b37      	ldr	r3, [pc, #220]	; (8005550 <HAL_RCC_GetSysClockFreq+0x138>)
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	025b      	lsls	r3, r3, #9
 800547a:	4013      	ands	r3, r2
 800547c:	d01a      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	4a35      	ldr	r2, [pc, #212]	; (800555c <HAL_RCC_GetSysClockFreq+0x144>)
 8005488:	2300      	movs	r3, #0
 800548a:	69b8      	ldr	r0, [r7, #24]
 800548c:	69f9      	ldr	r1, [r7, #28]
 800548e:	f7fa fee7 	bl	8000260 <__aeabi_lmul>
 8005492:	0002      	movs	r2, r0
 8005494:	000b      	movs	r3, r1
 8005496:	0010      	movs	r0, r2
 8005498:	0019      	movs	r1, r3
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f7fa febb 	bl	8000220 <__aeabi_uldivmod>
 80054aa:	0002      	movs	r2, r0
 80054ac:	000b      	movs	r3, r1
 80054ae:	0013      	movs	r3, r2
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34
 80054b2:	e037      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80054b4:	4b26      	ldr	r3, [pc, #152]	; (8005550 <HAL_RCC_GetSysClockFreq+0x138>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2210      	movs	r2, #16
 80054ba:	4013      	ands	r3, r2
 80054bc:	d01a      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	4a23      	ldr	r2, [pc, #140]	; (8005554 <HAL_RCC_GetSysClockFreq+0x13c>)
 80054c8:	2300      	movs	r3, #0
 80054ca:	68b8      	ldr	r0, [r7, #8]
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	f7fa fec7 	bl	8000260 <__aeabi_lmul>
 80054d2:	0002      	movs	r2, r0
 80054d4:	000b      	movs	r3, r1
 80054d6:	0010      	movs	r0, r2
 80054d8:	0019      	movs	r1, r3
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	603b      	str	r3, [r7, #0]
 80054de:	2300      	movs	r3, #0
 80054e0:	607b      	str	r3, [r7, #4]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f7fa fe9b 	bl	8000220 <__aeabi_uldivmod>
 80054ea:	0002      	movs	r2, r0
 80054ec:	000b      	movs	r3, r1
 80054ee:	0013      	movs	r3, r2
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
 80054f2:	e017      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	0018      	movs	r0, r3
 80054f8:	2300      	movs	r3, #0
 80054fa:	0019      	movs	r1, r3
 80054fc:	4a16      	ldr	r2, [pc, #88]	; (8005558 <HAL_RCC_GetSysClockFreq+0x140>)
 80054fe:	2300      	movs	r3, #0
 8005500:	f7fa feae 	bl	8000260 <__aeabi_lmul>
 8005504:	0002      	movs	r2, r0
 8005506:	000b      	movs	r3, r1
 8005508:	0010      	movs	r0, r2
 800550a:	0019      	movs	r1, r3
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	001c      	movs	r4, r3
 8005510:	2300      	movs	r3, #0
 8005512:	001d      	movs	r5, r3
 8005514:	0022      	movs	r2, r4
 8005516:	002b      	movs	r3, r5
 8005518:	f7fa fe82 	bl	8000220 <__aeabi_uldivmod>
 800551c:	0002      	movs	r2, r0
 800551e:	000b      	movs	r3, r1
 8005520:	0013      	movs	r3, r2
 8005522:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005526:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005528:	e00d      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCC_GetSysClockFreq+0x138>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	0b5b      	lsrs	r3, r3, #13
 8005530:	2207      	movs	r2, #7
 8005532:	4013      	ands	r3, r2
 8005534:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	3301      	adds	r3, #1
 800553a:	2280      	movs	r2, #128	; 0x80
 800553c:	0212      	lsls	r2, r2, #8
 800553e:	409a      	lsls	r2, r3
 8005540:	0013      	movs	r3, r2
 8005542:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005544:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b00e      	add	sp, #56	; 0x38
 800554e:	bdb0      	pop	{r4, r5, r7, pc}
 8005550:	40021000 	.word	0x40021000
 8005554:	003d0900 	.word	0x003d0900
 8005558:	00f42400 	.word	0x00f42400
 800555c:	007a1200 	.word	0x007a1200
 8005560:	08006c7c 	.word	0x08006c7c

08005564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005568:	4b02      	ldr	r3, [pc, #8]	; (8005574 <HAL_RCC_GetHCLKFreq+0x10>)
 800556a:	681b      	ldr	r3, [r3, #0]
}
 800556c:	0018      	movs	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	20000014 	.word	0x20000014

08005578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800557c:	f7ff fff2 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 8005580:	0001      	movs	r1, r0
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	0a1b      	lsrs	r3, r3, #8
 8005588:	2207      	movs	r2, #7
 800558a:	4013      	ands	r3, r2
 800558c:	4a04      	ldr	r2, [pc, #16]	; (80055a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800558e:	5cd3      	ldrb	r3, [r2, r3]
 8005590:	40d9      	lsrs	r1, r3
 8005592:	000b      	movs	r3, r1
}
 8005594:	0018      	movs	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	40021000 	.word	0x40021000
 80055a0:	08006c74 	.word	0x08006c74

080055a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055a8:	f7ff ffdc 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 80055ac:	0001      	movs	r1, r0
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	0adb      	lsrs	r3, r3, #11
 80055b4:	2207      	movs	r2, #7
 80055b6:	4013      	ands	r3, r2
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ba:	5cd3      	ldrb	r3, [r2, r3]
 80055bc:	40d9      	lsrs	r1, r3
 80055be:	000b      	movs	r3, r1
}
 80055c0:	0018      	movs	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	40021000 	.word	0x40021000
 80055cc:	08006c74 	.word	0x08006c74

080055d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80055d8:	2317      	movs	r3, #23
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2220      	movs	r2, #32
 80055e6:	4013      	ands	r3, r2
 80055e8:	d106      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	4013      	ands	r3, r2
 80055f4:	d100      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80055f6:	e0d9      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f8:	4b9c      	ldr	r3, [pc, #624]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80055fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	055b      	lsls	r3, r3, #21
 8005600:	4013      	ands	r3, r2
 8005602:	d10a      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005604:	4b99      	ldr	r3, [pc, #612]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005608:	4b98      	ldr	r3, [pc, #608]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800560a:	2180      	movs	r1, #128	; 0x80
 800560c:	0549      	lsls	r1, r1, #21
 800560e:	430a      	orrs	r2, r1
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005612:	2317      	movs	r3, #23
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561a:	4b95      	ldr	r3, [pc, #596]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	4013      	ands	r3, r2
 8005624:	d11a      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005626:	4b92      	ldr	r3, [pc, #584]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b91      	ldr	r3, [pc, #580]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800562c:	2180      	movs	r1, #128	; 0x80
 800562e:	0049      	lsls	r1, r1, #1
 8005630:	430a      	orrs	r2, r1
 8005632:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005634:	f7fe f9b8 	bl	80039a8 <HAL_GetTick>
 8005638:	0003      	movs	r3, r0
 800563a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563c:	e008      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563e:	f7fe f9b3 	bl	80039a8 <HAL_GetTick>
 8005642:	0002      	movs	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b64      	cmp	r3, #100	; 0x64
 800564a:	d901      	bls.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e108      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005650:	4b87      	ldr	r3, [pc, #540]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4013      	ands	r3, r2
 800565a:	d0f0      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800565c:	4b83      	ldr	r3, [pc, #524]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	23c0      	movs	r3, #192	; 0xc0
 8005662:	039b      	lsls	r3, r3, #14
 8005664:	4013      	ands	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	23c0      	movs	r3, #192	; 0xc0
 800566e:	039b      	lsls	r3, r3, #14
 8005670:	4013      	ands	r3, r2
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	429a      	cmp	r2, r3
 8005676:	d107      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	23c0      	movs	r3, #192	; 0xc0
 800567e:	039b      	lsls	r3, r3, #14
 8005680:	4013      	ands	r3, r2
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	429a      	cmp	r2, r3
 8005686:	d013      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	23c0      	movs	r3, #192	; 0xc0
 800568e:	029b      	lsls	r3, r3, #10
 8005690:	401a      	ands	r2, r3
 8005692:	23c0      	movs	r3, #192	; 0xc0
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	429a      	cmp	r2, r3
 8005698:	d10a      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800569a:	4b74      	ldr	r3, [pc, #464]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	2380      	movs	r3, #128	; 0x80
 80056a0:	029b      	lsls	r3, r3, #10
 80056a2:	401a      	ands	r2, r3
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	029b      	lsls	r3, r3, #10
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d101      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0d8      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80056b0:	4b6e      	ldr	r3, [pc, #440]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80056b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056b4:	23c0      	movs	r3, #192	; 0xc0
 80056b6:	029b      	lsls	r3, r3, #10
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d049      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	23c0      	movs	r3, #192	; 0xc0
 80056c8:	029b      	lsls	r3, r3, #10
 80056ca:	4013      	ands	r3, r2
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d004      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2220      	movs	r2, #32
 80056d8:	4013      	ands	r3, r2
 80056da:	d10d      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	23c0      	movs	r3, #192	; 0xc0
 80056e2:	029b      	lsls	r3, r3, #10
 80056e4:	4013      	ands	r3, r2
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d034      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	4013      	ands	r3, r2
 80056f6:	d02e      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80056f8:	4b5c      	ldr	r3, [pc, #368]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80056fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fc:	4a5d      	ldr	r2, [pc, #372]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80056fe:	4013      	ands	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005702:	4b5a      	ldr	r3, [pc, #360]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005706:	4b59      	ldr	r3, [pc, #356]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005708:	2180      	movs	r1, #128	; 0x80
 800570a:	0309      	lsls	r1, r1, #12
 800570c:	430a      	orrs	r2, r1
 800570e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005710:	4b56      	ldr	r3, [pc, #344]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005714:	4b55      	ldr	r3, [pc, #340]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005716:	4958      	ldr	r1, [pc, #352]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005718:	400a      	ands	r2, r1
 800571a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800571c:	4b53      	ldr	r3, [pc, #332]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	4013      	ands	r3, r2
 800572a:	d014      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572c:	f7fe f93c 	bl	80039a8 <HAL_GetTick>
 8005730:	0003      	movs	r3, r0
 8005732:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005734:	e009      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fe f937 	bl	80039a8 <HAL_GetTick>
 800573a:	0002      	movs	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	4a4e      	ldr	r2, [pc, #312]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e08b      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800574a:	4b48      	ldr	r3, [pc, #288]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800574c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800574e:	2380      	movs	r3, #128	; 0x80
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4013      	ands	r3, r2
 8005754:	d0ef      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	23c0      	movs	r3, #192	; 0xc0
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	401a      	ands	r2, r3
 8005760:	23c0      	movs	r3, #192	; 0xc0
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	429a      	cmp	r2, r3
 8005766:	d10c      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005768:	4b40      	ldr	r3, [pc, #256]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a44      	ldr	r2, [pc, #272]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800576e:	4013      	ands	r3, r2
 8005770:	0019      	movs	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	23c0      	movs	r3, #192	; 0xc0
 8005778:	039b      	lsls	r3, r3, #14
 800577a:	401a      	ands	r2, r3
 800577c:	4b3b      	ldr	r3, [pc, #236]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800577e:	430a      	orrs	r2, r1
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	4b3a      	ldr	r3, [pc, #232]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005784:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	23c0      	movs	r3, #192	; 0xc0
 800578c:	029b      	lsls	r3, r3, #10
 800578e:	401a      	ands	r2, r3
 8005790:	4b36      	ldr	r3, [pc, #216]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005792:	430a      	orrs	r2, r1
 8005794:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005796:	2317      	movs	r3, #23
 8005798:	18fb      	adds	r3, r7, r3
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a0:	4b32      	ldr	r3, [pc, #200]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a4:	4b31      	ldr	r3, [pc, #196]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057a6:	4937      	ldr	r1, [pc, #220]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80057a8:	400a      	ands	r2, r1
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2201      	movs	r2, #1
 80057b2:	4013      	ands	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057b6:	4b2d      	ldr	r3, [pc, #180]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ba:	2203      	movs	r2, #3
 80057bc:	4393      	bics	r3, r2
 80057be:	0019      	movs	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	4b29      	ldr	r3, [pc, #164]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057c6:	430a      	orrs	r2, r1
 80057c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2202      	movs	r2, #2
 80057d0:	4013      	ands	r3, r2
 80057d2:	d009      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057d4:	4b25      	ldr	r3, [pc, #148]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d8:	220c      	movs	r2, #12
 80057da:	4393      	bics	r3, r2
 80057dc:	0019      	movs	r1, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	4b22      	ldr	r3, [pc, #136]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057e4:	430a      	orrs	r2, r1
 80057e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2204      	movs	r2, #4
 80057ee:	4013      	ands	r3, r2
 80057f0:	d009      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057f2:	4b1e      	ldr	r3, [pc, #120]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80057f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f6:	4a24      	ldr	r2, [pc, #144]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	0019      	movs	r1, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	4b1a      	ldr	r3, [pc, #104]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005802:	430a      	orrs	r2, r1
 8005804:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2208      	movs	r2, #8
 800580c:	4013      	ands	r3, r2
 800580e:	d009      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005810:	4b16      	ldr	r3, [pc, #88]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005814:	4a1d      	ldr	r2, [pc, #116]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005816:	4013      	ands	r3, r2
 8005818:	0019      	movs	r1, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005820:	430a      	orrs	r2, r1
 8005822:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2240      	movs	r2, #64	; 0x40
 800582a:	4013      	ands	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800582e:	4b0f      	ldr	r3, [pc, #60]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005832:	4a17      	ldr	r2, [pc, #92]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005834:	4013      	ands	r3, r2
 8005836:	0019      	movs	r1, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1a      	ldr	r2, [r3, #32]
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800583e:	430a      	orrs	r2, r1
 8005840:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	4013      	ands	r3, r2
 800584a:	d009      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800584c:	4b07      	ldr	r3, [pc, #28]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800584e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005850:	4a10      	ldr	r2, [pc, #64]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005852:	4013      	ands	r3, r2
 8005854:	0019      	movs	r1, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69da      	ldr	r2, [r3, #28]
 800585a:	4b04      	ldr	r3, [pc, #16]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800585c:	430a      	orrs	r2, r1
 800585e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	0018      	movs	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	b006      	add	sp, #24
 8005868:	bd80      	pop	{r7, pc}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	40021000 	.word	0x40021000
 8005870:	40007000 	.word	0x40007000
 8005874:	fffcffff 	.word	0xfffcffff
 8005878:	fff7ffff 	.word	0xfff7ffff
 800587c:	00001388 	.word	0x00001388
 8005880:	ffcfffff 	.word	0xffcfffff
 8005884:	efffffff 	.word	0xefffffff
 8005888:	fffff3ff 	.word	0xfffff3ff
 800588c:	ffffcfff 	.word	0xffffcfff
 8005890:	fbffffff 	.word	0xfbffffff
 8005894:	fff3ffff 	.word	0xfff3ffff

08005898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e032      	b.n	8005910 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2239      	movs	r2, #57	; 0x39
 80058ae:	5c9b      	ldrb	r3, [r3, r2]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d107      	bne.n	80058c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2238      	movs	r2, #56	; 0x38
 80058ba:	2100      	movs	r1, #0
 80058bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	0018      	movs	r0, r3
 80058c2:	f7fd fec3 	bl	800364c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2239      	movs	r2, #57	; 0x39
 80058ca:	2102      	movs	r1, #2
 80058cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3304      	adds	r3, #4
 80058d6:	0019      	movs	r1, r3
 80058d8:	0010      	movs	r0, r2
 80058da:	f000 f979 	bl	8005bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	223e      	movs	r2, #62	; 0x3e
 80058e2:	2101      	movs	r1, #1
 80058e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	223a      	movs	r2, #58	; 0x3a
 80058ea:	2101      	movs	r1, #1
 80058ec:	5499      	strb	r1, [r3, r2]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	223b      	movs	r2, #59	; 0x3b
 80058f2:	2101      	movs	r1, #1
 80058f4:	5499      	strb	r1, [r3, r2]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	223c      	movs	r2, #60	; 0x3c
 80058fa:	2101      	movs	r1, #1
 80058fc:	5499      	strb	r1, [r3, r2]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	223d      	movs	r2, #61	; 0x3d
 8005902:	2101      	movs	r1, #1
 8005904:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2239      	movs	r2, #57	; 0x39
 800590a:	2101      	movs	r1, #1
 800590c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	0018      	movs	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	b002      	add	sp, #8
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2239      	movs	r2, #57	; 0x39
 8005924:	5c9b      	ldrb	r3, [r3, r2]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	d001      	beq.n	8005930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e036      	b.n	800599e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2239      	movs	r2, #57	; 0x39
 8005934:	2102      	movs	r1, #2
 8005936:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2101      	movs	r1, #1
 8005944:	430a      	orrs	r2, r1
 8005946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	05db      	lsls	r3, r3, #23
 8005950:	429a      	cmp	r2, r3
 8005952:	d009      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x50>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a13      	ldr	r2, [pc, #76]	; (80059a8 <HAL_TIM_Base_Start_IT+0x90>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x50>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a12      	ldr	r2, [pc, #72]	; (80059ac <HAL_TIM_Base_Start_IT+0x94>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d111      	bne.n	800598c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2207      	movs	r2, #7
 8005970:	4013      	ands	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b06      	cmp	r3, #6
 8005978:	d010      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2101      	movs	r1, #1
 8005986:	430a      	orrs	r2, r1
 8005988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598a:	e007      	b.n	800599c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2101      	movs	r1, #1
 8005998:	430a      	orrs	r2, r1
 800599a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	0018      	movs	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b004      	add	sp, #16
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	40010800 	.word	0x40010800
 80059ac:	40011400 	.word	0x40011400

080059b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2202      	movs	r2, #2
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d124      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2202      	movs	r2, #2
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d11d      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2203      	movs	r2, #3
 80059da:	4252      	negs	r2, r2
 80059dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2203      	movs	r2, #3
 80059ec:	4013      	ands	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	0018      	movs	r0, r3
 80059f4:	f000 f8d4 	bl	8005ba0 <HAL_TIM_IC_CaptureCallback>
 80059f8:	e007      	b.n	8005a0a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	0018      	movs	r0, r3
 80059fe:	f000 f8c7 	bl	8005b90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	0018      	movs	r0, r3
 8005a06:	f000 f8d3 	bl	8005bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2204      	movs	r2, #4
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d125      	bne.n	8005a6a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2204      	movs	r2, #4
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d11e      	bne.n	8005a6a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2205      	movs	r2, #5
 8005a32:	4252      	negs	r2, r2
 8005a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	23c0      	movs	r3, #192	; 0xc0
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4013      	ands	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f000 f8a7 	bl	8005ba0 <HAL_TIM_IC_CaptureCallback>
 8005a52:	e007      	b.n	8005a64 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 f89a 	bl	8005b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f000 f8a6 	bl	8005bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2208      	movs	r2, #8
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d124      	bne.n	8005ac2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2208      	movs	r2, #8
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d11d      	bne.n	8005ac2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2209      	movs	r2, #9
 8005a8c:	4252      	negs	r2, r2
 8005a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2204      	movs	r2, #4
 8005a94:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d004      	beq.n	8005aac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f000 f87b 	bl	8005ba0 <HAL_TIM_IC_CaptureCallback>
 8005aaa:	e007      	b.n	8005abc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f000 f86e 	bl	8005b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f000 f87a 	bl	8005bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2210      	movs	r2, #16
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d125      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2210      	movs	r2, #16
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b10      	cmp	r3, #16
 8005adc:	d11e      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2211      	movs	r2, #17
 8005ae4:	4252      	negs	r2, r2
 8005ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2208      	movs	r2, #8
 8005aec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	23c0      	movs	r3, #192	; 0xc0
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4013      	ands	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	0018      	movs	r0, r3
 8005b00:	f000 f84e 	bl	8005ba0 <HAL_TIM_IC_CaptureCallback>
 8005b04:	e007      	b.n	8005b16 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 f841 	bl	8005b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 f84d 	bl	8005bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2201      	movs	r2, #1
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d10f      	bne.n	8005b4a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d108      	bne.n	8005b4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	4252      	negs	r2, r2
 8005b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 f81b 	bl	8005b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2240      	movs	r2, #64	; 0x40
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d10f      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	2240      	movs	r2, #64	; 0x40
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b40      	cmp	r3, #64	; 0x40
 8005b64:	d108      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2241      	movs	r2, #65	; 0x41
 8005b6c:	4252      	negs	r2, r2
 8005b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 f824 	bl	8005bc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b78:	46c0      	nop			; (mov r8, r8)
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b002      	add	sp, #8
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b88:	46c0      	nop			; (mov r8, r8)
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b002      	add	sp, #8
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ba8:	46c0      	nop			; (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b002      	add	sp, #8
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bb8:	46c0      	nop			; (mov r8, r8)
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b002      	add	sp, #8
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc8:	46c0      	nop			; (mov r8, r8)
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	05db      	lsls	r3, r3, #23
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d007      	beq.n	8005bfa <TIM_Base_SetConfig+0x2a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1f      	ldr	r2, [pc, #124]	; (8005c6c <TIM_Base_SetConfig+0x9c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_Base_SetConfig+0x2a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1e      	ldr	r2, [pc, #120]	; (8005c70 <TIM_Base_SetConfig+0xa0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d108      	bne.n	8005c0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2270      	movs	r2, #112	; 0x70
 8005bfe:	4393      	bics	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	2380      	movs	r3, #128	; 0x80
 8005c10:	05db      	lsls	r3, r3, #23
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d007      	beq.n	8005c26 <TIM_Base_SetConfig+0x56>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a14      	ldr	r2, [pc, #80]	; (8005c6c <TIM_Base_SetConfig+0x9c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0x56>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a13      	ldr	r2, [pc, #76]	; (8005c70 <TIM_Base_SetConfig+0xa0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <TIM_Base_SetConfig+0xa4>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	4393      	bics	r3, r2
 8005c3e:	001a      	movs	r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	615a      	str	r2, [r3, #20]
}
 8005c64:	46c0      	nop			; (mov r8, r8)
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b004      	add	sp, #16
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40010800 	.word	0x40010800
 8005c70:	40011400 	.word	0x40011400
 8005c74:	fffffcff 	.word	0xfffffcff

08005c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2238      	movs	r2, #56	; 0x38
 8005c86:	5c9b      	ldrb	r3, [r3, r2]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e042      	b.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2238      	movs	r2, #56	; 0x38
 8005c94:	2101      	movs	r1, #1
 8005c96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2239      	movs	r2, #57	; 0x39
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2270      	movs	r2, #112	; 0x70
 8005cb4:	4393      	bics	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	05db      	lsls	r3, r3, #23
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d009      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a11      	ldr	r2, [pc, #68]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0f      	ldr	r2, [pc, #60]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10c      	bne.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2280      	movs	r2, #128	; 0x80
 8005cee:	4393      	bics	r3, r2
 8005cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2239      	movs	r2, #57	; 0x39
 8005d08:	2101      	movs	r1, #1
 8005d0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2238      	movs	r2, #56	; 0x38
 8005d10:	2100      	movs	r1, #0
 8005d12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b004      	add	sp, #16
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	40010800 	.word	0x40010800
 8005d24:	40011400 	.word	0x40011400

08005d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e044      	b.n	8005dc4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d107      	bne.n	8005d52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2274      	movs	r2, #116	; 0x74
 8005d46:	2100      	movs	r1, #0
 8005d48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f7fd fcc5 	bl	80036dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2224      	movs	r2, #36	; 0x24
 8005d56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2101      	movs	r1, #1
 8005d64:	438a      	bics	r2, r1
 8005d66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 f8d8 	bl	8005f20 <UART_SetConfig>
 8005d70:	0003      	movs	r3, r0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e024      	b.n	8005dc4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 fb6b 	bl	8006460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	490d      	ldr	r1, [pc, #52]	; (8005dcc <HAL_UART_Init+0xa4>)
 8005d96:	400a      	ands	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	212a      	movs	r1, #42	; 0x2a
 8005da6:	438a      	bics	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2101      	movs	r1, #1
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f000 fc03 	bl	80065c8 <UART_CheckIdleState>
 8005dc2:	0003      	movs	r3, r0
}
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b002      	add	sp, #8
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	ffffb7ff 	.word	0xffffb7ff

08005dd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	1dbb      	adds	r3, r7, #6
 8005dde:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d000      	beq.n	8005dea <HAL_UART_Transmit+0x1a>
 8005de8:	e095      	b.n	8005f16 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_UART_Transmit+0x28>
 8005df0:	1dbb      	adds	r3, r7, #6
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e08d      	b.n	8005f18 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	2380      	movs	r3, #128	; 0x80
 8005e02:	015b      	lsls	r3, r3, #5
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d109      	bne.n	8005e1c <HAL_UART_Transmit+0x4c>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d105      	bne.n	8005e1c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2201      	movs	r2, #1
 8005e14:	4013      	ands	r3, r2
 8005e16:	d001      	beq.n	8005e1c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e07d      	b.n	8005f18 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2274      	movs	r2, #116	; 0x74
 8005e20:	5c9b      	ldrb	r3, [r3, r2]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Transmit+0x5a>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e076      	b.n	8005f18 <HAL_UART_Transmit+0x148>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2274      	movs	r2, #116	; 0x74
 8005e2e:	2101      	movs	r1, #1
 8005e30:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2280      	movs	r2, #128	; 0x80
 8005e36:	2100      	movs	r1, #0
 8005e38:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2221      	movs	r2, #33	; 0x21
 8005e3e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e40:	f7fd fdb2 	bl	80039a8 <HAL_GetTick>
 8005e44:	0003      	movs	r3, r0
 8005e46:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	1dba      	adds	r2, r7, #6
 8005e4c:	2150      	movs	r1, #80	; 0x50
 8005e4e:	8812      	ldrh	r2, [r2, #0]
 8005e50:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	1dba      	adds	r2, r7, #6
 8005e56:	2152      	movs	r1, #82	; 0x52
 8005e58:	8812      	ldrh	r2, [r2, #0]
 8005e5a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	015b      	lsls	r3, r3, #5
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d108      	bne.n	8005e7a <HAL_UART_Transmit+0xaa>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	61bb      	str	r3, [r7, #24]
 8005e78:	e003      	b.n	8005e82 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2274      	movs	r2, #116	; 0x74
 8005e86:	2100      	movs	r1, #0
 8005e88:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005e8a:	e02c      	b.n	8005ee6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	0013      	movs	r3, r2
 8005e96:	2200      	movs	r2, #0
 8005e98:	2180      	movs	r1, #128	; 0x80
 8005e9a:	f000 fbdd 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 8005e9e:	1e03      	subs	r3, r0, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e038      	b.n	8005f18 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	001a      	movs	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	05d2      	lsls	r2, r2, #23
 8005eb8:	0dd2      	lsrs	r2, r2, #23
 8005eba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	e007      	b.n	8005ed4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	781a      	ldrb	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2252      	movs	r2, #82	; 0x52
 8005ed8:	5a9b      	ldrh	r3, [r3, r2]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b299      	uxth	r1, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2252      	movs	r2, #82	; 0x52
 8005ee4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2252      	movs	r2, #82	; 0x52
 8005eea:	5a9b      	ldrh	r3, [r3, r2]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1cc      	bne.n	8005e8c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	0013      	movs	r3, r2
 8005efc:	2200      	movs	r2, #0
 8005efe:	2140      	movs	r1, #64	; 0x40
 8005f00:	f000 fbaa 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 8005f04:	1e03      	subs	r3, r0, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e005      	b.n	8005f18 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	e000      	b.n	8005f18 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005f16:	2302      	movs	r3, #2
  }
}
 8005f18:	0018      	movs	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b008      	add	sp, #32
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f20:	b5b0      	push	{r4, r5, r7, lr}
 8005f22:	b08e      	sub	sp, #56	; 0x38
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f28:	231a      	movs	r3, #26
 8005f2a:	2218      	movs	r2, #24
 8005f2c:	4694      	mov	ip, r2
 8005f2e:	44bc      	add	ip, r7
 8005f30:	4463      	add	r3, ip
 8005f32:	2200      	movs	r2, #0
 8005f34:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4ac1      	ldr	r2, [pc, #772]	; (800625c <UART_SetConfig+0x33c>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	0019      	movs	r1, r3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f60:	430a      	orrs	r2, r1
 8005f62:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4abd      	ldr	r2, [pc, #756]	; (8006260 <UART_SetConfig+0x340>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	0019      	movs	r1, r3
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4ab7      	ldr	r2, [pc, #732]	; (8006264 <UART_SetConfig+0x344>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f92:	4313      	orrs	r3, r2
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4ab2      	ldr	r2, [pc, #712]	; (8006268 <UART_SetConfig+0x348>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4aae      	ldr	r2, [pc, #696]	; (800626c <UART_SetConfig+0x34c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d136      	bne.n	8006024 <UART_SetConfig+0x104>
 8005fb6:	4bae      	ldr	r3, [pc, #696]	; (8006270 <UART_SetConfig+0x350>)
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	2203      	movs	r2, #3
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d020      	beq.n	8006004 <UART_SetConfig+0xe4>
 8005fc2:	d827      	bhi.n	8006014 <UART_SetConfig+0xf4>
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d00d      	beq.n	8005fe4 <UART_SetConfig+0xc4>
 8005fc8:	d824      	bhi.n	8006014 <UART_SetConfig+0xf4>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <UART_SetConfig+0xb4>
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d010      	beq.n	8005ff4 <UART_SetConfig+0xd4>
 8005fd2:	e01f      	b.n	8006014 <UART_SetConfig+0xf4>
 8005fd4:	231b      	movs	r3, #27
 8005fd6:	2218      	movs	r2, #24
 8005fd8:	4694      	mov	ip, r2
 8005fda:	44bc      	add	ip, r7
 8005fdc:	4463      	add	r3, ip
 8005fde:	2201      	movs	r2, #1
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	e0ab      	b.n	800613c <UART_SetConfig+0x21c>
 8005fe4:	231b      	movs	r3, #27
 8005fe6:	2218      	movs	r2, #24
 8005fe8:	4694      	mov	ip, r2
 8005fea:	44bc      	add	ip, r7
 8005fec:	4463      	add	r3, ip
 8005fee:	2202      	movs	r2, #2
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e0a3      	b.n	800613c <UART_SetConfig+0x21c>
 8005ff4:	231b      	movs	r3, #27
 8005ff6:	2218      	movs	r2, #24
 8005ff8:	4694      	mov	ip, r2
 8005ffa:	44bc      	add	ip, r7
 8005ffc:	4463      	add	r3, ip
 8005ffe:	2204      	movs	r2, #4
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e09b      	b.n	800613c <UART_SetConfig+0x21c>
 8006004:	231b      	movs	r3, #27
 8006006:	2218      	movs	r2, #24
 8006008:	4694      	mov	ip, r2
 800600a:	44bc      	add	ip, r7
 800600c:	4463      	add	r3, ip
 800600e:	2208      	movs	r2, #8
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	e093      	b.n	800613c <UART_SetConfig+0x21c>
 8006014:	231b      	movs	r3, #27
 8006016:	2218      	movs	r2, #24
 8006018:	4694      	mov	ip, r2
 800601a:	44bc      	add	ip, r7
 800601c:	4463      	add	r3, ip
 800601e:	2210      	movs	r2, #16
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	e08b      	b.n	800613c <UART_SetConfig+0x21c>
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a92      	ldr	r2, [pc, #584]	; (8006274 <UART_SetConfig+0x354>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d136      	bne.n	800609c <UART_SetConfig+0x17c>
 800602e:	4b90      	ldr	r3, [pc, #576]	; (8006270 <UART_SetConfig+0x350>)
 8006030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006032:	220c      	movs	r2, #12
 8006034:	4013      	ands	r3, r2
 8006036:	2b0c      	cmp	r3, #12
 8006038:	d020      	beq.n	800607c <UART_SetConfig+0x15c>
 800603a:	d827      	bhi.n	800608c <UART_SetConfig+0x16c>
 800603c:	2b08      	cmp	r3, #8
 800603e:	d00d      	beq.n	800605c <UART_SetConfig+0x13c>
 8006040:	d824      	bhi.n	800608c <UART_SetConfig+0x16c>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <UART_SetConfig+0x12c>
 8006046:	2b04      	cmp	r3, #4
 8006048:	d010      	beq.n	800606c <UART_SetConfig+0x14c>
 800604a:	e01f      	b.n	800608c <UART_SetConfig+0x16c>
 800604c:	231b      	movs	r3, #27
 800604e:	2218      	movs	r2, #24
 8006050:	4694      	mov	ip, r2
 8006052:	44bc      	add	ip, r7
 8006054:	4463      	add	r3, ip
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	e06f      	b.n	800613c <UART_SetConfig+0x21c>
 800605c:	231b      	movs	r3, #27
 800605e:	2218      	movs	r2, #24
 8006060:	4694      	mov	ip, r2
 8006062:	44bc      	add	ip, r7
 8006064:	4463      	add	r3, ip
 8006066:	2202      	movs	r2, #2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e067      	b.n	800613c <UART_SetConfig+0x21c>
 800606c:	231b      	movs	r3, #27
 800606e:	2218      	movs	r2, #24
 8006070:	4694      	mov	ip, r2
 8006072:	44bc      	add	ip, r7
 8006074:	4463      	add	r3, ip
 8006076:	2204      	movs	r2, #4
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e05f      	b.n	800613c <UART_SetConfig+0x21c>
 800607c:	231b      	movs	r3, #27
 800607e:	2218      	movs	r2, #24
 8006080:	4694      	mov	ip, r2
 8006082:	44bc      	add	ip, r7
 8006084:	4463      	add	r3, ip
 8006086:	2208      	movs	r2, #8
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	e057      	b.n	800613c <UART_SetConfig+0x21c>
 800608c:	231b      	movs	r3, #27
 800608e:	2218      	movs	r2, #24
 8006090:	4694      	mov	ip, r2
 8006092:	44bc      	add	ip, r7
 8006094:	4463      	add	r3, ip
 8006096:	2210      	movs	r2, #16
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e04f      	b.n	800613c <UART_SetConfig+0x21c>
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a70      	ldr	r2, [pc, #448]	; (8006264 <UART_SetConfig+0x344>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d143      	bne.n	800612e <UART_SetConfig+0x20e>
 80060a6:	4b72      	ldr	r3, [pc, #456]	; (8006270 <UART_SetConfig+0x350>)
 80060a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060aa:	23c0      	movs	r3, #192	; 0xc0
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	4013      	ands	r3, r2
 80060b0:	22c0      	movs	r2, #192	; 0xc0
 80060b2:	0112      	lsls	r2, r2, #4
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d02a      	beq.n	800610e <UART_SetConfig+0x1ee>
 80060b8:	22c0      	movs	r2, #192	; 0xc0
 80060ba:	0112      	lsls	r2, r2, #4
 80060bc:	4293      	cmp	r3, r2
 80060be:	d82e      	bhi.n	800611e <UART_SetConfig+0x1fe>
 80060c0:	2280      	movs	r2, #128	; 0x80
 80060c2:	0112      	lsls	r2, r2, #4
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d012      	beq.n	80060ee <UART_SetConfig+0x1ce>
 80060c8:	2280      	movs	r2, #128	; 0x80
 80060ca:	0112      	lsls	r2, r2, #4
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d826      	bhi.n	800611e <UART_SetConfig+0x1fe>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <UART_SetConfig+0x1be>
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	00d2      	lsls	r2, r2, #3
 80060d8:	4293      	cmp	r3, r2
 80060da:	d010      	beq.n	80060fe <UART_SetConfig+0x1de>
 80060dc:	e01f      	b.n	800611e <UART_SetConfig+0x1fe>
 80060de:	231b      	movs	r3, #27
 80060e0:	2218      	movs	r2, #24
 80060e2:	4694      	mov	ip, r2
 80060e4:	44bc      	add	ip, r7
 80060e6:	4463      	add	r3, ip
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e026      	b.n	800613c <UART_SetConfig+0x21c>
 80060ee:	231b      	movs	r3, #27
 80060f0:	2218      	movs	r2, #24
 80060f2:	4694      	mov	ip, r2
 80060f4:	44bc      	add	ip, r7
 80060f6:	4463      	add	r3, ip
 80060f8:	2202      	movs	r2, #2
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	e01e      	b.n	800613c <UART_SetConfig+0x21c>
 80060fe:	231b      	movs	r3, #27
 8006100:	2218      	movs	r2, #24
 8006102:	4694      	mov	ip, r2
 8006104:	44bc      	add	ip, r7
 8006106:	4463      	add	r3, ip
 8006108:	2204      	movs	r2, #4
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e016      	b.n	800613c <UART_SetConfig+0x21c>
 800610e:	231b      	movs	r3, #27
 8006110:	2218      	movs	r2, #24
 8006112:	4694      	mov	ip, r2
 8006114:	44bc      	add	ip, r7
 8006116:	4463      	add	r3, ip
 8006118:	2208      	movs	r2, #8
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e00e      	b.n	800613c <UART_SetConfig+0x21c>
 800611e:	231b      	movs	r3, #27
 8006120:	2218      	movs	r2, #24
 8006122:	4694      	mov	ip, r2
 8006124:	44bc      	add	ip, r7
 8006126:	4463      	add	r3, ip
 8006128:	2210      	movs	r2, #16
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	e006      	b.n	800613c <UART_SetConfig+0x21c>
 800612e:	231b      	movs	r3, #27
 8006130:	2218      	movs	r2, #24
 8006132:	4694      	mov	ip, r2
 8006134:	44bc      	add	ip, r7
 8006136:	4463      	add	r3, ip
 8006138:	2210      	movs	r2, #16
 800613a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a48      	ldr	r2, [pc, #288]	; (8006264 <UART_SetConfig+0x344>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d000      	beq.n	8006148 <UART_SetConfig+0x228>
 8006146:	e09b      	b.n	8006280 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006148:	231b      	movs	r3, #27
 800614a:	2218      	movs	r2, #24
 800614c:	4694      	mov	ip, r2
 800614e:	44bc      	add	ip, r7
 8006150:	4463      	add	r3, ip
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b08      	cmp	r3, #8
 8006156:	d01d      	beq.n	8006194 <UART_SetConfig+0x274>
 8006158:	dc20      	bgt.n	800619c <UART_SetConfig+0x27c>
 800615a:	2b04      	cmp	r3, #4
 800615c:	d015      	beq.n	800618a <UART_SetConfig+0x26a>
 800615e:	dc1d      	bgt.n	800619c <UART_SetConfig+0x27c>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <UART_SetConfig+0x24a>
 8006164:	2b02      	cmp	r3, #2
 8006166:	d005      	beq.n	8006174 <UART_SetConfig+0x254>
 8006168:	e018      	b.n	800619c <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800616a:	f7ff fa05 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 800616e:	0003      	movs	r3, r0
 8006170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006172:	e01d      	b.n	80061b0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006174:	4b3e      	ldr	r3, [pc, #248]	; (8006270 <UART_SetConfig+0x350>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2210      	movs	r2, #16
 800617a:	4013      	ands	r3, r2
 800617c:	d002      	beq.n	8006184 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800617e:	4b3e      	ldr	r3, [pc, #248]	; (8006278 <UART_SetConfig+0x358>)
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006182:	e015      	b.n	80061b0 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8006184:	4b3d      	ldr	r3, [pc, #244]	; (800627c <UART_SetConfig+0x35c>)
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006188:	e012      	b.n	80061b0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800618a:	f7ff f945 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 800618e:	0003      	movs	r3, r0
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006192:	e00d      	b.n	80061b0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006194:	2380      	movs	r3, #128	; 0x80
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800619a:	e009      	b.n	80061b0 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061a0:	231a      	movs	r3, #26
 80061a2:	2218      	movs	r2, #24
 80061a4:	4694      	mov	ip, r2
 80061a6:	44bc      	add	ip, r7
 80061a8:	4463      	add	r3, ip
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
        break;
 80061ae:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d100      	bne.n	80061b8 <UART_SetConfig+0x298>
 80061b6:	e139      	b.n	800642c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	0013      	movs	r3, r2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	189b      	adds	r3, r3, r2
 80061c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d305      	bcc.n	80061d4 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d907      	bls.n	80061e4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80061d4:	231a      	movs	r3, #26
 80061d6:	2218      	movs	r2, #24
 80061d8:	4694      	mov	ip, r2
 80061da:	44bc      	add	ip, r7
 80061dc:	4463      	add	r3, ip
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e123      	b.n	800642c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	6939      	ldr	r1, [r7, #16]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	000b      	movs	r3, r1
 80061f2:	0e1b      	lsrs	r3, r3, #24
 80061f4:	0010      	movs	r0, r2
 80061f6:	0205      	lsls	r5, r0, #8
 80061f8:	431d      	orrs	r5, r3
 80061fa:	000b      	movs	r3, r1
 80061fc:	021c      	lsls	r4, r3, #8
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	68b8      	ldr	r0, [r7, #8]
 800620c:	68f9      	ldr	r1, [r7, #12]
 800620e:	1900      	adds	r0, r0, r4
 8006210:	4169      	adcs	r1, r5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	2300      	movs	r3, #0
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f7f9 fffe 	bl	8000220 <__aeabi_uldivmod>
 8006224:	0002      	movs	r2, r0
 8006226:	000b      	movs	r3, r1
 8006228:	0013      	movs	r3, r2
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800622c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800622e:	23c0      	movs	r3, #192	; 0xc0
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	429a      	cmp	r2, r3
 8006234:	d309      	bcc.n	800624a <UART_SetConfig+0x32a>
 8006236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006238:	2380      	movs	r3, #128	; 0x80
 800623a:	035b      	lsls	r3, r3, #13
 800623c:	429a      	cmp	r2, r3
 800623e:	d204      	bcs.n	800624a <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006246:	60da      	str	r2, [r3, #12]
 8006248:	e0f0      	b.n	800642c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800624a:	231a      	movs	r3, #26
 800624c:	2218      	movs	r2, #24
 800624e:	4694      	mov	ip, r2
 8006250:	44bc      	add	ip, r7
 8006252:	4463      	add	r3, ip
 8006254:	2201      	movs	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	e0e8      	b.n	800642c <UART_SetConfig+0x50c>
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	efff69f3 	.word	0xefff69f3
 8006260:	ffffcfff 	.word	0xffffcfff
 8006264:	40004800 	.word	0x40004800
 8006268:	fffff4ff 	.word	0xfffff4ff
 800626c:	40013800 	.word	0x40013800
 8006270:	40021000 	.word	0x40021000
 8006274:	40004400 	.word	0x40004400
 8006278:	003d0900 	.word	0x003d0900
 800627c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	429a      	cmp	r2, r3
 800628a:	d000      	beq.n	800628e <UART_SetConfig+0x36e>
 800628c:	e074      	b.n	8006378 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800628e:	231b      	movs	r3, #27
 8006290:	2218      	movs	r2, #24
 8006292:	4694      	mov	ip, r2
 8006294:	44bc      	add	ip, r7
 8006296:	4463      	add	r3, ip
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b08      	cmp	r3, #8
 800629c:	d822      	bhi.n	80062e4 <UART_SetConfig+0x3c4>
 800629e:	009a      	lsls	r2, r3, #2
 80062a0:	4b6a      	ldr	r3, [pc, #424]	; (800644c <UART_SetConfig+0x52c>)
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7ff f966 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 80062ac:	0003      	movs	r3, r0
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062b0:	e022      	b.n	80062f8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b2:	f7ff f977 	bl	80055a4 <HAL_RCC_GetPCLK2Freq>
 80062b6:	0003      	movs	r3, r0
 80062b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062ba:	e01d      	b.n	80062f8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062bc:	4b64      	ldr	r3, [pc, #400]	; (8006450 <UART_SetConfig+0x530>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2210      	movs	r2, #16
 80062c2:	4013      	ands	r3, r2
 80062c4:	d002      	beq.n	80062cc <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80062c6:	4b63      	ldr	r3, [pc, #396]	; (8006454 <UART_SetConfig+0x534>)
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062ca:	e015      	b.n	80062f8 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 80062cc:	4b62      	ldr	r3, [pc, #392]	; (8006458 <UART_SetConfig+0x538>)
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062d0:	e012      	b.n	80062f8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d2:	f7ff f8a1 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80062d6:	0003      	movs	r3, r0
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062da:	e00d      	b.n	80062f8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062e2:	e009      	b.n	80062f8 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80062e8:	231a      	movs	r3, #26
 80062ea:	2218      	movs	r2, #24
 80062ec:	4694      	mov	ip, r2
 80062ee:	44bc      	add	ip, r7
 80062f0:	4463      	add	r3, ip
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
        break;
 80062f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d100      	bne.n	8006300 <UART_SetConfig+0x3e0>
 80062fe:	e095      	b.n	800642c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	005a      	lsls	r2, r3, #1
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	18d2      	adds	r2, r2, r3
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	0019      	movs	r1, r3
 8006312:	0010      	movs	r0, r2
 8006314:	f7f9 fef8 	bl	8000108 <__udivsi3>
 8006318:	0003      	movs	r3, r0
 800631a:	b29b      	uxth	r3, r3
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	2b0f      	cmp	r3, #15
 8006322:	d921      	bls.n	8006368 <UART_SetConfig+0x448>
 8006324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006326:	2380      	movs	r3, #128	; 0x80
 8006328:	025b      	lsls	r3, r3, #9
 800632a:	429a      	cmp	r2, r3
 800632c:	d21c      	bcs.n	8006368 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	b29a      	uxth	r2, r3
 8006332:	200e      	movs	r0, #14
 8006334:	2418      	movs	r4, #24
 8006336:	193b      	adds	r3, r7, r4
 8006338:	181b      	adds	r3, r3, r0
 800633a:	210f      	movs	r1, #15
 800633c:	438a      	bics	r2, r1
 800633e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	085b      	lsrs	r3, r3, #1
 8006344:	b29b      	uxth	r3, r3
 8006346:	2207      	movs	r2, #7
 8006348:	4013      	ands	r3, r2
 800634a:	b299      	uxth	r1, r3
 800634c:	193b      	adds	r3, r7, r4
 800634e:	181b      	adds	r3, r3, r0
 8006350:	193a      	adds	r2, r7, r4
 8006352:	1812      	adds	r2, r2, r0
 8006354:	8812      	ldrh	r2, [r2, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	193a      	adds	r2, r7, r4
 8006360:	1812      	adds	r2, r2, r0
 8006362:	8812      	ldrh	r2, [r2, #0]
 8006364:	60da      	str	r2, [r3, #12]
 8006366:	e061      	b.n	800642c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006368:	231a      	movs	r3, #26
 800636a:	2218      	movs	r2, #24
 800636c:	4694      	mov	ip, r2
 800636e:	44bc      	add	ip, r7
 8006370:	4463      	add	r3, ip
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	e059      	b.n	800642c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006378:	231b      	movs	r3, #27
 800637a:	2218      	movs	r2, #24
 800637c:	4694      	mov	ip, r2
 800637e:	44bc      	add	ip, r7
 8006380:	4463      	add	r3, ip
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b08      	cmp	r3, #8
 8006386:	d822      	bhi.n	80063ce <UART_SetConfig+0x4ae>
 8006388:	009a      	lsls	r2, r3, #2
 800638a:	4b34      	ldr	r3, [pc, #208]	; (800645c <UART_SetConfig+0x53c>)
 800638c:	18d3      	adds	r3, r2, r3
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006392:	f7ff f8f1 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 8006396:	0003      	movs	r3, r0
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800639a:	e022      	b.n	80063e2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800639c:	f7ff f902 	bl	80055a4 <HAL_RCC_GetPCLK2Freq>
 80063a0:	0003      	movs	r3, r0
 80063a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063a4:	e01d      	b.n	80063e2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063a6:	4b2a      	ldr	r3, [pc, #168]	; (8006450 <UART_SetConfig+0x530>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2210      	movs	r2, #16
 80063ac:	4013      	ands	r3, r2
 80063ae:	d002      	beq.n	80063b6 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80063b0:	4b28      	ldr	r3, [pc, #160]	; (8006454 <UART_SetConfig+0x534>)
 80063b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063b4:	e015      	b.n	80063e2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80063b6:	4b28      	ldr	r3, [pc, #160]	; (8006458 <UART_SetConfig+0x538>)
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063ba:	e012      	b.n	80063e2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063bc:	f7ff f82c 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80063c0:	0003      	movs	r3, r0
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063c4:	e00d      	b.n	80063e2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c6:	2380      	movs	r3, #128	; 0x80
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063cc:	e009      	b.n	80063e2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80063d2:	231a      	movs	r3, #26
 80063d4:	2218      	movs	r2, #24
 80063d6:	4694      	mov	ip, r2
 80063d8:	44bc      	add	ip, r7
 80063da:	4463      	add	r3, ip
 80063dc:	2201      	movs	r2, #1
 80063de:	701a      	strb	r2, [r3, #0]
        break;
 80063e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d021      	beq.n	800642c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	085a      	lsrs	r2, r3, #1
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	18d2      	adds	r2, r2, r3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	0019      	movs	r1, r3
 80063f8:	0010      	movs	r0, r2
 80063fa:	f7f9 fe85 	bl	8000108 <__udivsi3>
 80063fe:	0003      	movs	r3, r0
 8006400:	b29b      	uxth	r3, r3
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	2b0f      	cmp	r3, #15
 8006408:	d909      	bls.n	800641e <UART_SetConfig+0x4fe>
 800640a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	025b      	lsls	r3, r3, #9
 8006410:	429a      	cmp	r2, r3
 8006412:	d204      	bcs.n	800641e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641a:	60da      	str	r2, [r3, #12]
 800641c:	e006      	b.n	800642c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800641e:	231a      	movs	r3, #26
 8006420:	2218      	movs	r2, #24
 8006422:	4694      	mov	ip, r2
 8006424:	44bc      	add	ip, r7
 8006426:	4463      	add	r3, ip
 8006428:	2201      	movs	r2, #1
 800642a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2200      	movs	r2, #0
 8006430:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	2200      	movs	r2, #0
 8006436:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006438:	231a      	movs	r3, #26
 800643a:	2218      	movs	r2, #24
 800643c:	4694      	mov	ip, r2
 800643e:	44bc      	add	ip, r7
 8006440:	4463      	add	r3, ip
 8006442:	781b      	ldrb	r3, [r3, #0]
}
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	b00e      	add	sp, #56	; 0x38
 800644a:	bdb0      	pop	{r4, r5, r7, pc}
 800644c:	08006c88 	.word	0x08006c88
 8006450:	40021000 	.word	0x40021000
 8006454:	003d0900 	.word	0x003d0900
 8006458:	00f42400 	.word	0x00f42400
 800645c:	08006cac 	.word	0x08006cac

08006460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	2201      	movs	r2, #1
 800646e:	4013      	ands	r3, r2
 8006470:	d00b      	beq.n	800648a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	4a4a      	ldr	r2, [pc, #296]	; (80065a4 <UART_AdvFeatureConfig+0x144>)
 800647a:	4013      	ands	r3, r2
 800647c:	0019      	movs	r1, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	2202      	movs	r2, #2
 8006490:	4013      	ands	r3, r2
 8006492:	d00b      	beq.n	80064ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	4a43      	ldr	r2, [pc, #268]	; (80065a8 <UART_AdvFeatureConfig+0x148>)
 800649c:	4013      	ands	r3, r2
 800649e:	0019      	movs	r1, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	2204      	movs	r2, #4
 80064b2:	4013      	ands	r3, r2
 80064b4:	d00b      	beq.n	80064ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4a3b      	ldr	r2, [pc, #236]	; (80065ac <UART_AdvFeatureConfig+0x14c>)
 80064be:	4013      	ands	r3, r2
 80064c0:	0019      	movs	r1, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	2208      	movs	r2, #8
 80064d4:	4013      	ands	r3, r2
 80064d6:	d00b      	beq.n	80064f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	4a34      	ldr	r2, [pc, #208]	; (80065b0 <UART_AdvFeatureConfig+0x150>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	0019      	movs	r1, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	2210      	movs	r2, #16
 80064f6:	4013      	ands	r3, r2
 80064f8:	d00b      	beq.n	8006512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	4a2c      	ldr	r2, [pc, #176]	; (80065b4 <UART_AdvFeatureConfig+0x154>)
 8006502:	4013      	ands	r3, r2
 8006504:	0019      	movs	r1, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	2220      	movs	r2, #32
 8006518:	4013      	ands	r3, r2
 800651a:	d00b      	beq.n	8006534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	4a25      	ldr	r2, [pc, #148]	; (80065b8 <UART_AdvFeatureConfig+0x158>)
 8006524:	4013      	ands	r3, r2
 8006526:	0019      	movs	r1, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	2240      	movs	r2, #64	; 0x40
 800653a:	4013      	ands	r3, r2
 800653c:	d01d      	beq.n	800657a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	4a1d      	ldr	r2, [pc, #116]	; (80065bc <UART_AdvFeatureConfig+0x15c>)
 8006546:	4013      	ands	r3, r2
 8006548:	0019      	movs	r1, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	035b      	lsls	r3, r3, #13
 800655e:	429a      	cmp	r2, r3
 8006560:	d10b      	bne.n	800657a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <UART_AdvFeatureConfig+0x160>)
 800656a:	4013      	ands	r3, r2
 800656c:	0019      	movs	r1, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	2280      	movs	r2, #128	; 0x80
 8006580:	4013      	ands	r3, r2
 8006582:	d00b      	beq.n	800659c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	4a0e      	ldr	r2, [pc, #56]	; (80065c4 <UART_AdvFeatureConfig+0x164>)
 800658c:	4013      	ands	r3, r2
 800658e:	0019      	movs	r1, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	605a      	str	r2, [r3, #4]
  }
}
 800659c:	46c0      	nop			; (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b002      	add	sp, #8
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	fffdffff 	.word	0xfffdffff
 80065a8:	fffeffff 	.word	0xfffeffff
 80065ac:	fffbffff 	.word	0xfffbffff
 80065b0:	ffff7fff 	.word	0xffff7fff
 80065b4:	ffffefff 	.word	0xffffefff
 80065b8:	ffffdfff 	.word	0xffffdfff
 80065bc:	ffefffff 	.word	0xffefffff
 80065c0:	ff9fffff 	.word	0xff9fffff
 80065c4:	fff7ffff 	.word	0xfff7ffff

080065c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2280      	movs	r2, #128	; 0x80
 80065d4:	2100      	movs	r1, #0
 80065d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065d8:	f7fd f9e6 	bl	80039a8 <HAL_GetTick>
 80065dc:	0003      	movs	r3, r0
 80065de:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2208      	movs	r2, #8
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d10c      	bne.n	8006608 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2280      	movs	r2, #128	; 0x80
 80065f2:	0391      	lsls	r1, r2, #14
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	4a17      	ldr	r2, [pc, #92]	; (8006654 <UART_CheckIdleState+0x8c>)
 80065f8:	9200      	str	r2, [sp, #0]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f000 f82c 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 8006600:	1e03      	subs	r3, r0, #0
 8006602:	d001      	beq.n	8006608 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e021      	b.n	800664c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2204      	movs	r2, #4
 8006610:	4013      	ands	r3, r2
 8006612:	2b04      	cmp	r3, #4
 8006614:	d10c      	bne.n	8006630 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2280      	movs	r2, #128	; 0x80
 800661a:	03d1      	lsls	r1, r2, #15
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4a0d      	ldr	r2, [pc, #52]	; (8006654 <UART_CheckIdleState+0x8c>)
 8006620:	9200      	str	r2, [sp, #0]
 8006622:	2200      	movs	r2, #0
 8006624:	f000 f818 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 8006628:	1e03      	subs	r3, r0, #0
 800662a:	d001      	beq.n	8006630 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e00d      	b.n	800664c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2274      	movs	r2, #116	; 0x74
 8006646:	2100      	movs	r1, #0
 8006648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	0018      	movs	r0, r3
 800664e:	46bd      	mov	sp, r7
 8006650:	b004      	add	sp, #16
 8006652:	bd80      	pop	{r7, pc}
 8006654:	01ffffff 	.word	0x01ffffff

08006658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	1dfb      	adds	r3, r7, #7
 8006666:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006668:	e05e      	b.n	8006728 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	3301      	adds	r3, #1
 800666e:	d05b      	beq.n	8006728 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006670:	f7fd f99a 	bl	80039a8 <HAL_GetTick>
 8006674:	0002      	movs	r2, r0
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	429a      	cmp	r2, r3
 800667e:	d302      	bcc.n	8006686 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d11b      	bne.n	80066be <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	492f      	ldr	r1, [pc, #188]	; (8006750 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006692:	400a      	ands	r2, r1
 8006694:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2101      	movs	r1, #1
 80066a2:	438a      	bics	r2, r1
 80066a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2274      	movs	r2, #116	; 0x74
 80066b6:	2100      	movs	r1, #0
 80066b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e044      	b.n	8006748 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2204      	movs	r2, #4
 80066c6:	4013      	ands	r3, r2
 80066c8:	d02e      	beq.n	8006728 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	2380      	movs	r3, #128	; 0x80
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	401a      	ands	r2, r3
 80066d6:	2380      	movs	r3, #128	; 0x80
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	429a      	cmp	r2, r3
 80066dc:	d124      	bne.n	8006728 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2280      	movs	r2, #128	; 0x80
 80066e4:	0112      	lsls	r2, r2, #4
 80066e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4917      	ldr	r1, [pc, #92]	; (8006750 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80066f4:	400a      	ands	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2101      	movs	r1, #1
 8006704:	438a      	bics	r2, r1
 8006706:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2220      	movs	r2, #32
 8006712:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2280      	movs	r2, #128	; 0x80
 8006718:	2120      	movs	r1, #32
 800671a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2274      	movs	r2, #116	; 0x74
 8006720:	2100      	movs	r1, #0
 8006722:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e00f      	b.n	8006748 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4013      	ands	r3, r2
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	425a      	negs	r2, r3
 8006738:	4153      	adcs	r3, r2
 800673a:	b2db      	uxtb	r3, r3
 800673c:	001a      	movs	r2, r3
 800673e:	1dfb      	adds	r3, r7, #7
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d091      	beq.n	800666a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	0018      	movs	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	b004      	add	sp, #16
 800674e:	bd80      	pop	{r7, pc}
 8006750:	fffffe5f 	.word	0xfffffe5f

08006754 <__errno>:
 8006754:	4b01      	ldr	r3, [pc, #4]	; (800675c <__errno+0x8>)
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	4770      	bx	lr
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	20000020 	.word	0x20000020

08006760 <__libc_init_array>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	2600      	movs	r6, #0
 8006764:	4d0c      	ldr	r5, [pc, #48]	; (8006798 <__libc_init_array+0x38>)
 8006766:	4c0d      	ldr	r4, [pc, #52]	; (800679c <__libc_init_array+0x3c>)
 8006768:	1b64      	subs	r4, r4, r5
 800676a:	10a4      	asrs	r4, r4, #2
 800676c:	42a6      	cmp	r6, r4
 800676e:	d109      	bne.n	8006784 <__libc_init_array+0x24>
 8006770:	2600      	movs	r6, #0
 8006772:	f000 f8ad 	bl	80068d0 <_init>
 8006776:	4d0a      	ldr	r5, [pc, #40]	; (80067a0 <__libc_init_array+0x40>)
 8006778:	4c0a      	ldr	r4, [pc, #40]	; (80067a4 <__libc_init_array+0x44>)
 800677a:	1b64      	subs	r4, r4, r5
 800677c:	10a4      	asrs	r4, r4, #2
 800677e:	42a6      	cmp	r6, r4
 8006780:	d105      	bne.n	800678e <__libc_init_array+0x2e>
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	00b3      	lsls	r3, r6, #2
 8006786:	58eb      	ldr	r3, [r5, r3]
 8006788:	4798      	blx	r3
 800678a:	3601      	adds	r6, #1
 800678c:	e7ee      	b.n	800676c <__libc_init_array+0xc>
 800678e:	00b3      	lsls	r3, r6, #2
 8006790:	58eb      	ldr	r3, [r5, r3]
 8006792:	4798      	blx	r3
 8006794:	3601      	adds	r6, #1
 8006796:	e7f2      	b.n	800677e <__libc_init_array+0x1e>
 8006798:	08006cd8 	.word	0x08006cd8
 800679c:	08006cd8 	.word	0x08006cd8
 80067a0:	08006cd8 	.word	0x08006cd8
 80067a4:	08006cdc 	.word	0x08006cdc

080067a8 <malloc>:
 80067a8:	b510      	push	{r4, lr}
 80067aa:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <malloc+0x10>)
 80067ac:	0001      	movs	r1, r0
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	f000 f80c 	bl	80067cc <_malloc_r>
 80067b4:	bd10      	pop	{r4, pc}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	20000020 	.word	0x20000020

080067bc <memset>:
 80067bc:	0003      	movs	r3, r0
 80067be:	1882      	adds	r2, r0, r2
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d100      	bne.n	80067c6 <memset+0xa>
 80067c4:	4770      	bx	lr
 80067c6:	7019      	strb	r1, [r3, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	e7f9      	b.n	80067c0 <memset+0x4>

080067cc <_malloc_r>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	2303      	movs	r3, #3
 80067d0:	1ccd      	adds	r5, r1, #3
 80067d2:	439d      	bics	r5, r3
 80067d4:	3508      	adds	r5, #8
 80067d6:	0006      	movs	r6, r0
 80067d8:	2d0c      	cmp	r5, #12
 80067da:	d21f      	bcs.n	800681c <_malloc_r+0x50>
 80067dc:	250c      	movs	r5, #12
 80067de:	42a9      	cmp	r1, r5
 80067e0:	d81e      	bhi.n	8006820 <_malloc_r+0x54>
 80067e2:	0030      	movs	r0, r6
 80067e4:	f000 f862 	bl	80068ac <__malloc_lock>
 80067e8:	4925      	ldr	r1, [pc, #148]	; (8006880 <_malloc_r+0xb4>)
 80067ea:	680a      	ldr	r2, [r1, #0]
 80067ec:	0014      	movs	r4, r2
 80067ee:	2c00      	cmp	r4, #0
 80067f0:	d11a      	bne.n	8006828 <_malloc_r+0x5c>
 80067f2:	4f24      	ldr	r7, [pc, #144]	; (8006884 <_malloc_r+0xb8>)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <_malloc_r+0x38>
 80067fa:	0021      	movs	r1, r4
 80067fc:	0030      	movs	r0, r6
 80067fe:	f000 f843 	bl	8006888 <_sbrk_r>
 8006802:	6038      	str	r0, [r7, #0]
 8006804:	0029      	movs	r1, r5
 8006806:	0030      	movs	r0, r6
 8006808:	f000 f83e 	bl	8006888 <_sbrk_r>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d12b      	bne.n	8006868 <_malloc_r+0x9c>
 8006810:	230c      	movs	r3, #12
 8006812:	0030      	movs	r0, r6
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	f000 f851 	bl	80068bc <__malloc_unlock>
 800681a:	e003      	b.n	8006824 <_malloc_r+0x58>
 800681c:	2d00      	cmp	r5, #0
 800681e:	dade      	bge.n	80067de <_malloc_r+0x12>
 8006820:	230c      	movs	r3, #12
 8006822:	6033      	str	r3, [r6, #0]
 8006824:	2000      	movs	r0, #0
 8006826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	1b5b      	subs	r3, r3, r5
 800682c:	d419      	bmi.n	8006862 <_malloc_r+0x96>
 800682e:	2b0b      	cmp	r3, #11
 8006830:	d903      	bls.n	800683a <_malloc_r+0x6e>
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	18e4      	adds	r4, r4, r3
 8006836:	6025      	str	r5, [r4, #0]
 8006838:	e003      	b.n	8006842 <_malloc_r+0x76>
 800683a:	6863      	ldr	r3, [r4, #4]
 800683c:	42a2      	cmp	r2, r4
 800683e:	d10e      	bne.n	800685e <_malloc_r+0x92>
 8006840:	600b      	str	r3, [r1, #0]
 8006842:	0030      	movs	r0, r6
 8006844:	f000 f83a 	bl	80068bc <__malloc_unlock>
 8006848:	0020      	movs	r0, r4
 800684a:	2207      	movs	r2, #7
 800684c:	300b      	adds	r0, #11
 800684e:	1d23      	adds	r3, r4, #4
 8006850:	4390      	bics	r0, r2
 8006852:	1ac2      	subs	r2, r0, r3
 8006854:	4298      	cmp	r0, r3
 8006856:	d0e6      	beq.n	8006826 <_malloc_r+0x5a>
 8006858:	1a1b      	subs	r3, r3, r0
 800685a:	50a3      	str	r3, [r4, r2]
 800685c:	e7e3      	b.n	8006826 <_malloc_r+0x5a>
 800685e:	6053      	str	r3, [r2, #4]
 8006860:	e7ef      	b.n	8006842 <_malloc_r+0x76>
 8006862:	0022      	movs	r2, r4
 8006864:	6864      	ldr	r4, [r4, #4]
 8006866:	e7c2      	b.n	80067ee <_malloc_r+0x22>
 8006868:	2303      	movs	r3, #3
 800686a:	1cc4      	adds	r4, r0, #3
 800686c:	439c      	bics	r4, r3
 800686e:	42a0      	cmp	r0, r4
 8006870:	d0e1      	beq.n	8006836 <_malloc_r+0x6a>
 8006872:	1a21      	subs	r1, r4, r0
 8006874:	0030      	movs	r0, r6
 8006876:	f000 f807 	bl	8006888 <_sbrk_r>
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	d1db      	bne.n	8006836 <_malloc_r+0x6a>
 800687e:	e7c7      	b.n	8006810 <_malloc_r+0x44>
 8006880:	200000d8 	.word	0x200000d8
 8006884:	200000dc 	.word	0x200000dc

08006888 <_sbrk_r>:
 8006888:	2300      	movs	r3, #0
 800688a:	b570      	push	{r4, r5, r6, lr}
 800688c:	4d06      	ldr	r5, [pc, #24]	; (80068a8 <_sbrk_r+0x20>)
 800688e:	0004      	movs	r4, r0
 8006890:	0008      	movs	r0, r1
 8006892:	602b      	str	r3, [r5, #0]
 8006894:	f7fc fe62 	bl	800355c <_sbrk>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d103      	bne.n	80068a4 <_sbrk_r+0x1c>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d000      	beq.n	80068a4 <_sbrk_r+0x1c>
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	200001fc 	.word	0x200001fc

080068ac <__malloc_lock>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	4802      	ldr	r0, [pc, #8]	; (80068b8 <__malloc_lock+0xc>)
 80068b0:	f000 f80c 	bl	80068cc <__retarget_lock_acquire_recursive>
 80068b4:	bd10      	pop	{r4, pc}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	20000204 	.word	0x20000204

080068bc <__malloc_unlock>:
 80068bc:	b510      	push	{r4, lr}
 80068be:	4802      	ldr	r0, [pc, #8]	; (80068c8 <__malloc_unlock+0xc>)
 80068c0:	f000 f805 	bl	80068ce <__retarget_lock_release_recursive>
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	20000204 	.word	0x20000204

080068cc <__retarget_lock_acquire_recursive>:
 80068cc:	4770      	bx	lr

080068ce <__retarget_lock_release_recursive>:
 80068ce:	4770      	bx	lr

080068d0 <_init>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d6:	bc08      	pop	{r3}
 80068d8:	469e      	mov	lr, r3
 80068da:	4770      	bx	lr

080068dc <_fini>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e2:	bc08      	pop	{r3}
 80068e4:	469e      	mov	lr, r3
 80068e6:	4770      	bx	lr
