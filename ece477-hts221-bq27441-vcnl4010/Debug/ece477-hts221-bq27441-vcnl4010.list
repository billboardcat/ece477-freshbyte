
ece477-hts221-bq27441-vcnl4010.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e0c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  08009ed0  08009ed0  00019ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a624  0800a624  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a624  0800a624  0001a624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a62c  0800a62c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a62c  0800a62c  0001a62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a630  0800a630  0001a630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001dc  0800a810  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  0800a810  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ff4  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee3  00000000  00000000  000341f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  000370e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00038110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dde  00000000  00000000  00038ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013eea  00000000  00000000  0004fdd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008257f  00000000  00000000  00063cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e623f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b0c  00000000  00000000  000e6294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009eb4 	.word	0x08009eb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009eb4 	.word	0x08009eb4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fc6f 	bl	8001d20 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fbb9 	bl	8001bc4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc61 	bl	8001d20 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc57 	bl	8001d20 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fbdb 	bl	8001c3c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fbd1 	bl	8001c3c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f82e 	bl	8000538 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	000f      	movs	r7, r1
 80004f0:	0001      	movs	r1, r0
 80004f2:	002e      	movs	r6, r5
 80004f4:	46c6      	mov	lr, r8
 80004f6:	4684      	mov	ip, r0
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	0c14      	lsrs	r4, r2, #16
 80004fc:	0c00      	lsrs	r0, r0, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	4346      	muls	r6, r0
 8000502:	434d      	muls	r5, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	1940      	adds	r0, r0, r5
 800050a:	0c34      	lsrs	r4, r6, #16
 800050c:	1824      	adds	r4, r4, r0
 800050e:	b500      	push	{lr}
 8000510:	42a5      	cmp	r5, r4
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x34>
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	4680      	mov	r8, r0
 800051a:	4441      	add	r1, r8
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	186d      	adds	r5, r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4359      	muls	r1, r3
 8000524:	437a      	muls	r2, r7
 8000526:	0430      	lsls	r0, r6, #16
 8000528:	1949      	adds	r1, r1, r5
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	0c00      	lsrs	r0, r0, #16
 800052e:	1820      	adds	r0, r4, r0
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bc80      	pop	{r7}
 8000534:	46b8      	mov	r8, r7
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f002 fb18 	bl	8002b8c <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f002 fb13 	bl	8002b8c <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	469b      	mov	fp, r3
 800056e:	d433      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 8000570:	465a      	mov	r2, fp
 8000572:	4653      	mov	r3, sl
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83a      	bhi.n	80005fa <__udivmoddi4+0xc2>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e078      	b.n	800067c <__udivmoddi4+0x144>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e075      	b.n	8000682 <__udivmoddi4+0x14a>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e028      	b.n	8000602 <__udivmoddi4+0xca>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	2320      	movs	r3, #32
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	4652      	mov	r2, sl
 80005e0:	40da      	lsrs	r2, r3
 80005e2:	4641      	mov	r1, r8
 80005e4:	0013      	movs	r3, r2
 80005e6:	464a      	mov	r2, r9
 80005e8:	408a      	lsls	r2, r1
 80005ea:	0017      	movs	r7, r2
 80005ec:	4642      	mov	r2, r8
 80005ee:	431f      	orrs	r7, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	4093      	lsls	r3, r2
 80005f4:	001e      	movs	r6, r3
 80005f6:	42af      	cmp	r7, r5
 80005f8:	d9c4      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	4643      	mov	r3, r8
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0d9      	beq.n	80005bc <__udivmoddi4+0x84>
 8000608:	07fb      	lsls	r3, r7, #31
 800060a:	0872      	lsrs	r2, r6, #1
 800060c:	431a      	orrs	r2, r3
 800060e:	4646      	mov	r6, r8
 8000610:	087b      	lsrs	r3, r7, #1
 8000612:	e00e      	b.n	8000632 <__udivmoddi4+0xfa>
 8000614:	42ab      	cmp	r3, r5
 8000616:	d101      	bne.n	800061c <__udivmoddi4+0xe4>
 8000618:	42a2      	cmp	r2, r4
 800061a:	d80c      	bhi.n	8000636 <__udivmoddi4+0xfe>
 800061c:	1aa4      	subs	r4, r4, r2
 800061e:	419d      	sbcs	r5, r3
 8000620:	2001      	movs	r0, #1
 8000622:	1924      	adds	r4, r4, r4
 8000624:	416d      	adcs	r5, r5
 8000626:	2100      	movs	r1, #0
 8000628:	3e01      	subs	r6, #1
 800062a:	1824      	adds	r4, r4, r0
 800062c:	414d      	adcs	r5, r1
 800062e:	2e00      	cmp	r6, #0
 8000630:	d006      	beq.n	8000640 <__udivmoddi4+0x108>
 8000632:	42ab      	cmp	r3, r5
 8000634:	d9ee      	bls.n	8000614 <__udivmoddi4+0xdc>
 8000636:	3e01      	subs	r6, #1
 8000638:	1924      	adds	r4, r4, r4
 800063a:	416d      	adcs	r5, r5
 800063c:	2e00      	cmp	r6, #0
 800063e:	d1f8      	bne.n	8000632 <__udivmoddi4+0xfa>
 8000640:	9800      	ldr	r0, [sp, #0]
 8000642:	9901      	ldr	r1, [sp, #4]
 8000644:	465b      	mov	r3, fp
 8000646:	1900      	adds	r0, r0, r4
 8000648:	4169      	adcs	r1, r5
 800064a:	2b00      	cmp	r3, #0
 800064c:	db24      	blt.n	8000698 <__udivmoddi4+0x160>
 800064e:	002b      	movs	r3, r5
 8000650:	465a      	mov	r2, fp
 8000652:	4644      	mov	r4, r8
 8000654:	40d3      	lsrs	r3, r2
 8000656:	002a      	movs	r2, r5
 8000658:	40e2      	lsrs	r2, r4
 800065a:	001c      	movs	r4, r3
 800065c:	465b      	mov	r3, fp
 800065e:	0015      	movs	r5, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	db2a      	blt.n	80006ba <__udivmoddi4+0x182>
 8000664:	0026      	movs	r6, r4
 8000666:	409e      	lsls	r6, r3
 8000668:	0033      	movs	r3, r6
 800066a:	0026      	movs	r6, r4
 800066c:	4647      	mov	r7, r8
 800066e:	40be      	lsls	r6, r7
 8000670:	0032      	movs	r2, r6
 8000672:	1a80      	subs	r0, r0, r2
 8000674:	4199      	sbcs	r1, r3
 8000676:	9000      	str	r0, [sp, #0]
 8000678:	9101      	str	r1, [sp, #4]
 800067a:	e79f      	b.n	80005bc <__udivmoddi4+0x84>
 800067c:	42a3      	cmp	r3, r4
 800067e:	d8bc      	bhi.n	80005fa <__udivmoddi4+0xc2>
 8000680:	e783      	b.n	800058a <__udivmoddi4+0x52>
 8000682:	4642      	mov	r2, r8
 8000684:	2320      	movs	r3, #32
 8000686:	2100      	movs	r1, #0
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	2200      	movs	r2, #0
 800068c:	9100      	str	r1, [sp, #0]
 800068e:	9201      	str	r2, [sp, #4]
 8000690:	2201      	movs	r2, #1
 8000692:	40da      	lsrs	r2, r3
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	e786      	b.n	80005a6 <__udivmoddi4+0x6e>
 8000698:	4642      	mov	r2, r8
 800069a:	2320      	movs	r3, #32
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	4646      	mov	r6, r8
 80006a2:	409a      	lsls	r2, r3
 80006a4:	0023      	movs	r3, r4
 80006a6:	40f3      	lsrs	r3, r6
 80006a8:	4644      	mov	r4, r8
 80006aa:	4313      	orrs	r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	40e2      	lsrs	r2, r4
 80006b0:	001c      	movs	r4, r3
 80006b2:	465b      	mov	r3, fp
 80006b4:	0015      	movs	r5, r2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	dad4      	bge.n	8000664 <__udivmoddi4+0x12c>
 80006ba:	4642      	mov	r2, r8
 80006bc:	002f      	movs	r7, r5
 80006be:	2320      	movs	r3, #32
 80006c0:	0026      	movs	r6, r4
 80006c2:	4097      	lsls	r7, r2
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	40de      	lsrs	r6, r3
 80006c8:	003b      	movs	r3, r7
 80006ca:	4333      	orrs	r3, r6
 80006cc:	e7cd      	b.n	800066a <__udivmoddi4+0x132>
 80006ce:	46c0      	nop			; (mov r8, r8)

080006d0 <__aeabi_fadd>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	4646      	mov	r6, r8
 80006d4:	46d6      	mov	lr, sl
 80006d6:	464f      	mov	r7, r9
 80006d8:	024d      	lsls	r5, r1, #9
 80006da:	0242      	lsls	r2, r0, #9
 80006dc:	b5c0      	push	{r6, r7, lr}
 80006de:	0a52      	lsrs	r2, r2, #9
 80006e0:	0a6e      	lsrs	r6, r5, #9
 80006e2:	0047      	lsls	r7, r0, #1
 80006e4:	46b0      	mov	r8, r6
 80006e6:	0e3f      	lsrs	r7, r7, #24
 80006e8:	004e      	lsls	r6, r1, #1
 80006ea:	0fc4      	lsrs	r4, r0, #31
 80006ec:	00d0      	lsls	r0, r2, #3
 80006ee:	4694      	mov	ip, r2
 80006f0:	003b      	movs	r3, r7
 80006f2:	4682      	mov	sl, r0
 80006f4:	0e36      	lsrs	r6, r6, #24
 80006f6:	0fc9      	lsrs	r1, r1, #31
 80006f8:	09ad      	lsrs	r5, r5, #6
 80006fa:	428c      	cmp	r4, r1
 80006fc:	d06d      	beq.n	80007da <__aeabi_fadd+0x10a>
 80006fe:	1bb8      	subs	r0, r7, r6
 8000700:	4681      	mov	r9, r0
 8000702:	2800      	cmp	r0, #0
 8000704:	dd4d      	ble.n	80007a2 <__aeabi_fadd+0xd2>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x3c>
 800070a:	e088      	b.n	800081e <__aeabi_fadd+0x14e>
 800070c:	2fff      	cmp	r7, #255	; 0xff
 800070e:	d05a      	beq.n	80007c6 <__aeabi_fadd+0xf6>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	04db      	lsls	r3, r3, #19
 8000714:	431d      	orrs	r5, r3
 8000716:	464b      	mov	r3, r9
 8000718:	2201      	movs	r2, #1
 800071a:	2b1b      	cmp	r3, #27
 800071c:	dc0a      	bgt.n	8000734 <__aeabi_fadd+0x64>
 800071e:	002b      	movs	r3, r5
 8000720:	464a      	mov	r2, r9
 8000722:	4649      	mov	r1, r9
 8000724:	40d3      	lsrs	r3, r2
 8000726:	2220      	movs	r2, #32
 8000728:	1a52      	subs	r2, r2, r1
 800072a:	4095      	lsls	r5, r2
 800072c:	002a      	movs	r2, r5
 800072e:	1e55      	subs	r5, r2, #1
 8000730:	41aa      	sbcs	r2, r5
 8000732:	431a      	orrs	r2, r3
 8000734:	4653      	mov	r3, sl
 8000736:	1a9a      	subs	r2, r3, r2
 8000738:	0153      	lsls	r3, r2, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x6e>
 800073c:	e0b9      	b.n	80008b2 <__aeabi_fadd+0x1e2>
 800073e:	0192      	lsls	r2, r2, #6
 8000740:	0996      	lsrs	r6, r2, #6
 8000742:	0030      	movs	r0, r6
 8000744:	f002 fa04 	bl	8002b50 <__clzsi2>
 8000748:	3805      	subs	r0, #5
 800074a:	4086      	lsls	r6, r0
 800074c:	4287      	cmp	r7, r0
 800074e:	dd00      	ble.n	8000752 <__aeabi_fadd+0x82>
 8000750:	e0d4      	b.n	80008fc <__aeabi_fadd+0x22c>
 8000752:	0033      	movs	r3, r6
 8000754:	1bc7      	subs	r7, r0, r7
 8000756:	2020      	movs	r0, #32
 8000758:	3701      	adds	r7, #1
 800075a:	40fb      	lsrs	r3, r7
 800075c:	1bc7      	subs	r7, r0, r7
 800075e:	40be      	lsls	r6, r7
 8000760:	0032      	movs	r2, r6
 8000762:	1e56      	subs	r6, r2, #1
 8000764:	41b2      	sbcs	r2, r6
 8000766:	2700      	movs	r7, #0
 8000768:	431a      	orrs	r2, r3
 800076a:	0753      	lsls	r3, r2, #29
 800076c:	d004      	beq.n	8000778 <__aeabi_fadd+0xa8>
 800076e:	230f      	movs	r3, #15
 8000770:	4013      	ands	r3, r2
 8000772:	2b04      	cmp	r3, #4
 8000774:	d000      	beq.n	8000778 <__aeabi_fadd+0xa8>
 8000776:	3204      	adds	r2, #4
 8000778:	0153      	lsls	r3, r2, #5
 800077a:	d400      	bmi.n	800077e <__aeabi_fadd+0xae>
 800077c:	e09c      	b.n	80008b8 <__aeabi_fadd+0x1e8>
 800077e:	1c7b      	adds	r3, r7, #1
 8000780:	2ffe      	cmp	r7, #254	; 0xfe
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0xb6>
 8000784:	e09a      	b.n	80008bc <__aeabi_fadd+0x1ec>
 8000786:	0192      	lsls	r2, r2, #6
 8000788:	0a52      	lsrs	r2, r2, #9
 800078a:	4694      	mov	ip, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	05d8      	lsls	r0, r3, #23
 8000790:	4663      	mov	r3, ip
 8000792:	07e4      	lsls	r4, r4, #31
 8000794:	4318      	orrs	r0, r3
 8000796:	4320      	orrs	r0, r4
 8000798:	bce0      	pop	{r5, r6, r7}
 800079a:	46ba      	mov	sl, r7
 800079c:	46b1      	mov	r9, r6
 800079e:	46a8      	mov	r8, r5
 80007a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a2:	2800      	cmp	r0, #0
 80007a4:	d049      	beq.n	800083a <__aeabi_fadd+0x16a>
 80007a6:	1bf3      	subs	r3, r6, r7
 80007a8:	2f00      	cmp	r7, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0xde>
 80007ac:	e0b6      	b.n	800091c <__aeabi_fadd+0x24c>
 80007ae:	4652      	mov	r2, sl
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d060      	beq.n	8000876 <__aeabi_fadd+0x1a6>
 80007b4:	3b01      	subs	r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0xec>
 80007ba:	e0fc      	b.n	80009b6 <__aeabi_fadd+0x2e6>
 80007bc:	2eff      	cmp	r6, #255	; 0xff
 80007be:	d000      	beq.n	80007c2 <__aeabi_fadd+0xf2>
 80007c0:	e0b4      	b.n	800092c <__aeabi_fadd+0x25c>
 80007c2:	000c      	movs	r4, r1
 80007c4:	4642      	mov	r2, r8
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d078      	beq.n	80008bc <__aeabi_fadd+0x1ec>
 80007ca:	2080      	movs	r0, #128	; 0x80
 80007cc:	03c0      	lsls	r0, r0, #15
 80007ce:	4310      	orrs	r0, r2
 80007d0:	0242      	lsls	r2, r0, #9
 80007d2:	0a53      	lsrs	r3, r2, #9
 80007d4:	469c      	mov	ip, r3
 80007d6:	23ff      	movs	r3, #255	; 0xff
 80007d8:	e7d9      	b.n	800078e <__aeabi_fadd+0xbe>
 80007da:	1bb9      	subs	r1, r7, r6
 80007dc:	2900      	cmp	r1, #0
 80007de:	dd71      	ble.n	80008c4 <__aeabi_fadd+0x1f4>
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d03f      	beq.n	8000864 <__aeabi_fadd+0x194>
 80007e4:	2fff      	cmp	r7, #255	; 0xff
 80007e6:	d0ee      	beq.n	80007c6 <__aeabi_fadd+0xf6>
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	04db      	lsls	r3, r3, #19
 80007ec:	431d      	orrs	r5, r3
 80007ee:	2201      	movs	r2, #1
 80007f0:	291b      	cmp	r1, #27
 80007f2:	dc07      	bgt.n	8000804 <__aeabi_fadd+0x134>
 80007f4:	002a      	movs	r2, r5
 80007f6:	2320      	movs	r3, #32
 80007f8:	40ca      	lsrs	r2, r1
 80007fa:	1a59      	subs	r1, r3, r1
 80007fc:	408d      	lsls	r5, r1
 80007fe:	1e6b      	subs	r3, r5, #1
 8000800:	419d      	sbcs	r5, r3
 8000802:	432a      	orrs	r2, r5
 8000804:	4452      	add	r2, sl
 8000806:	0153      	lsls	r3, r2, #5
 8000808:	d553      	bpl.n	80008b2 <__aeabi_fadd+0x1e2>
 800080a:	3701      	adds	r7, #1
 800080c:	2fff      	cmp	r7, #255	; 0xff
 800080e:	d055      	beq.n	80008bc <__aeabi_fadd+0x1ec>
 8000810:	2301      	movs	r3, #1
 8000812:	497b      	ldr	r1, [pc, #492]	; (8000a00 <__aeabi_fadd+0x330>)
 8000814:	4013      	ands	r3, r2
 8000816:	0852      	lsrs	r2, r2, #1
 8000818:	400a      	ands	r2, r1
 800081a:	431a      	orrs	r2, r3
 800081c:	e7a5      	b.n	800076a <__aeabi_fadd+0x9a>
 800081e:	2d00      	cmp	r5, #0
 8000820:	d02c      	beq.n	800087c <__aeabi_fadd+0x1ac>
 8000822:	2301      	movs	r3, #1
 8000824:	425b      	negs	r3, r3
 8000826:	469c      	mov	ip, r3
 8000828:	44e1      	add	r9, ip
 800082a:	464b      	mov	r3, r9
 800082c:	2b00      	cmp	r3, #0
 800082e:	d100      	bne.n	8000832 <__aeabi_fadd+0x162>
 8000830:	e0ad      	b.n	800098e <__aeabi_fadd+0x2be>
 8000832:	2fff      	cmp	r7, #255	; 0xff
 8000834:	d000      	beq.n	8000838 <__aeabi_fadd+0x168>
 8000836:	e76e      	b.n	8000716 <__aeabi_fadd+0x46>
 8000838:	e7c5      	b.n	80007c6 <__aeabi_fadd+0xf6>
 800083a:	20fe      	movs	r0, #254	; 0xfe
 800083c:	1c7e      	adds	r6, r7, #1
 800083e:	4230      	tst	r0, r6
 8000840:	d160      	bne.n	8000904 <__aeabi_fadd+0x234>
 8000842:	2f00      	cmp	r7, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_fadd+0x178>
 8000846:	e093      	b.n	8000970 <__aeabi_fadd+0x2a0>
 8000848:	4652      	mov	r2, sl
 800084a:	2a00      	cmp	r2, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x180>
 800084e:	e0b6      	b.n	80009be <__aeabi_fadd+0x2ee>
 8000850:	2d00      	cmp	r5, #0
 8000852:	d09c      	beq.n	800078e <__aeabi_fadd+0xbe>
 8000854:	1b52      	subs	r2, r2, r5
 8000856:	0150      	lsls	r0, r2, #5
 8000858:	d400      	bmi.n	800085c <__aeabi_fadd+0x18c>
 800085a:	e0c3      	b.n	80009e4 <__aeabi_fadd+0x314>
 800085c:	4653      	mov	r3, sl
 800085e:	000c      	movs	r4, r1
 8000860:	1aea      	subs	r2, r5, r3
 8000862:	e782      	b.n	800076a <__aeabi_fadd+0x9a>
 8000864:	2d00      	cmp	r5, #0
 8000866:	d009      	beq.n	800087c <__aeabi_fadd+0x1ac>
 8000868:	3901      	subs	r1, #1
 800086a:	2900      	cmp	r1, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x1a0>
 800086e:	e08b      	b.n	8000988 <__aeabi_fadd+0x2b8>
 8000870:	2fff      	cmp	r7, #255	; 0xff
 8000872:	d1bc      	bne.n	80007ee <__aeabi_fadd+0x11e>
 8000874:	e7a7      	b.n	80007c6 <__aeabi_fadd+0xf6>
 8000876:	000c      	movs	r4, r1
 8000878:	4642      	mov	r2, r8
 800087a:	0037      	movs	r7, r6
 800087c:	2fff      	cmp	r7, #255	; 0xff
 800087e:	d0a2      	beq.n	80007c6 <__aeabi_fadd+0xf6>
 8000880:	0252      	lsls	r2, r2, #9
 8000882:	0a53      	lsrs	r3, r2, #9
 8000884:	469c      	mov	ip, r3
 8000886:	b2fb      	uxtb	r3, r7
 8000888:	e781      	b.n	800078e <__aeabi_fadd+0xbe>
 800088a:	21fe      	movs	r1, #254	; 0xfe
 800088c:	3701      	adds	r7, #1
 800088e:	4239      	tst	r1, r7
 8000890:	d165      	bne.n	800095e <__aeabi_fadd+0x28e>
 8000892:	2b00      	cmp	r3, #0
 8000894:	d17e      	bne.n	8000994 <__aeabi_fadd+0x2c4>
 8000896:	2800      	cmp	r0, #0
 8000898:	d100      	bne.n	800089c <__aeabi_fadd+0x1cc>
 800089a:	e0aa      	b.n	80009f2 <__aeabi_fadd+0x322>
 800089c:	2d00      	cmp	r5, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_fadd+0x1d2>
 80008a0:	e775      	b.n	800078e <__aeabi_fadd+0xbe>
 80008a2:	002a      	movs	r2, r5
 80008a4:	4452      	add	r2, sl
 80008a6:	2700      	movs	r7, #0
 80008a8:	0153      	lsls	r3, r2, #5
 80008aa:	d502      	bpl.n	80008b2 <__aeabi_fadd+0x1e2>
 80008ac:	4b55      	ldr	r3, [pc, #340]	; (8000a04 <__aeabi_fadd+0x334>)
 80008ae:	3701      	adds	r7, #1
 80008b0:	401a      	ands	r2, r3
 80008b2:	0753      	lsls	r3, r2, #29
 80008b4:	d000      	beq.n	80008b8 <__aeabi_fadd+0x1e8>
 80008b6:	e75a      	b.n	800076e <__aeabi_fadd+0x9e>
 80008b8:	08d2      	lsrs	r2, r2, #3
 80008ba:	e7df      	b.n	800087c <__aeabi_fadd+0x1ac>
 80008bc:	2200      	movs	r2, #0
 80008be:	23ff      	movs	r3, #255	; 0xff
 80008c0:	4694      	mov	ip, r2
 80008c2:	e764      	b.n	800078e <__aeabi_fadd+0xbe>
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d0e0      	beq.n	800088a <__aeabi_fadd+0x1ba>
 80008c8:	1bf3      	subs	r3, r6, r7
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d03e      	beq.n	800094c <__aeabi_fadd+0x27c>
 80008ce:	2eff      	cmp	r6, #255	; 0xff
 80008d0:	d100      	bne.n	80008d4 <__aeabi_fadd+0x204>
 80008d2:	e777      	b.n	80007c4 <__aeabi_fadd+0xf4>
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	0001      	movs	r1, r0
 80008d8:	04d2      	lsls	r2, r2, #19
 80008da:	4311      	orrs	r1, r2
 80008dc:	468a      	mov	sl, r1
 80008de:	2201      	movs	r2, #1
 80008e0:	2b1b      	cmp	r3, #27
 80008e2:	dc08      	bgt.n	80008f6 <__aeabi_fadd+0x226>
 80008e4:	4652      	mov	r2, sl
 80008e6:	2120      	movs	r1, #32
 80008e8:	4650      	mov	r0, sl
 80008ea:	40da      	lsrs	r2, r3
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	4098      	lsls	r0, r3
 80008f0:	1e43      	subs	r3, r0, #1
 80008f2:	4198      	sbcs	r0, r3
 80008f4:	4302      	orrs	r2, r0
 80008f6:	0037      	movs	r7, r6
 80008f8:	1952      	adds	r2, r2, r5
 80008fa:	e784      	b.n	8000806 <__aeabi_fadd+0x136>
 80008fc:	4a41      	ldr	r2, [pc, #260]	; (8000a04 <__aeabi_fadd+0x334>)
 80008fe:	1a3f      	subs	r7, r7, r0
 8000900:	4032      	ands	r2, r6
 8000902:	e732      	b.n	800076a <__aeabi_fadd+0x9a>
 8000904:	4653      	mov	r3, sl
 8000906:	1b5e      	subs	r6, r3, r5
 8000908:	0173      	lsls	r3, r6, #5
 800090a:	d42d      	bmi.n	8000968 <__aeabi_fadd+0x298>
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0x242>
 8000910:	e717      	b.n	8000742 <__aeabi_fadd+0x72>
 8000912:	2200      	movs	r2, #0
 8000914:	2400      	movs	r4, #0
 8000916:	2300      	movs	r3, #0
 8000918:	4694      	mov	ip, r2
 800091a:	e738      	b.n	800078e <__aeabi_fadd+0xbe>
 800091c:	2eff      	cmp	r6, #255	; 0xff
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x252>
 8000920:	e74f      	b.n	80007c2 <__aeabi_fadd+0xf2>
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	4650      	mov	r0, sl
 8000926:	04d2      	lsls	r2, r2, #19
 8000928:	4310      	orrs	r0, r2
 800092a:	4682      	mov	sl, r0
 800092c:	2201      	movs	r2, #1
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dc08      	bgt.n	8000944 <__aeabi_fadd+0x274>
 8000932:	4652      	mov	r2, sl
 8000934:	2420      	movs	r4, #32
 8000936:	4650      	mov	r0, sl
 8000938:	40da      	lsrs	r2, r3
 800093a:	1ae3      	subs	r3, r4, r3
 800093c:	4098      	lsls	r0, r3
 800093e:	1e43      	subs	r3, r0, #1
 8000940:	4198      	sbcs	r0, r3
 8000942:	4302      	orrs	r2, r0
 8000944:	000c      	movs	r4, r1
 8000946:	0037      	movs	r7, r6
 8000948:	1aaa      	subs	r2, r5, r2
 800094a:	e6f5      	b.n	8000738 <__aeabi_fadd+0x68>
 800094c:	2800      	cmp	r0, #0
 800094e:	d093      	beq.n	8000878 <__aeabi_fadd+0x1a8>
 8000950:	3b01      	subs	r3, #1
 8000952:	2b00      	cmp	r3, #0
 8000954:	d04f      	beq.n	80009f6 <__aeabi_fadd+0x326>
 8000956:	2eff      	cmp	r6, #255	; 0xff
 8000958:	d1c1      	bne.n	80008de <__aeabi_fadd+0x20e>
 800095a:	4642      	mov	r2, r8
 800095c:	e733      	b.n	80007c6 <__aeabi_fadd+0xf6>
 800095e:	2fff      	cmp	r7, #255	; 0xff
 8000960:	d0ac      	beq.n	80008bc <__aeabi_fadd+0x1ec>
 8000962:	4455      	add	r5, sl
 8000964:	086a      	lsrs	r2, r5, #1
 8000966:	e7a4      	b.n	80008b2 <__aeabi_fadd+0x1e2>
 8000968:	4653      	mov	r3, sl
 800096a:	000c      	movs	r4, r1
 800096c:	1aee      	subs	r6, r5, r3
 800096e:	e6e8      	b.n	8000742 <__aeabi_fadd+0x72>
 8000970:	4653      	mov	r3, sl
 8000972:	2b00      	cmp	r3, #0
 8000974:	d128      	bne.n	80009c8 <__aeabi_fadd+0x2f8>
 8000976:	2d00      	cmp	r5, #0
 8000978:	d000      	beq.n	800097c <__aeabi_fadd+0x2ac>
 800097a:	e722      	b.n	80007c2 <__aeabi_fadd+0xf2>
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	03db      	lsls	r3, r3, #15
 8000980:	469c      	mov	ip, r3
 8000982:	2400      	movs	r4, #0
 8000984:	23ff      	movs	r3, #255	; 0xff
 8000986:	e702      	b.n	800078e <__aeabi_fadd+0xbe>
 8000988:	002a      	movs	r2, r5
 800098a:	4452      	add	r2, sl
 800098c:	e73b      	b.n	8000806 <__aeabi_fadd+0x136>
 800098e:	4653      	mov	r3, sl
 8000990:	1b5a      	subs	r2, r3, r5
 8000992:	e6d1      	b.n	8000738 <__aeabi_fadd+0x68>
 8000994:	2800      	cmp	r0, #0
 8000996:	d100      	bne.n	800099a <__aeabi_fadd+0x2ca>
 8000998:	e714      	b.n	80007c4 <__aeabi_fadd+0xf4>
 800099a:	2d00      	cmp	r5, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_fadd+0x2d0>
 800099e:	e712      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	03db      	lsls	r3, r3, #15
 80009a4:	421a      	tst	r2, r3
 80009a6:	d100      	bne.n	80009aa <__aeabi_fadd+0x2da>
 80009a8:	e70d      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009aa:	4641      	mov	r1, r8
 80009ac:	4219      	tst	r1, r3
 80009ae:	d000      	beq.n	80009b2 <__aeabi_fadd+0x2e2>
 80009b0:	e709      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009b2:	4642      	mov	r2, r8
 80009b4:	e707      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009b6:	000c      	movs	r4, r1
 80009b8:	0037      	movs	r7, r6
 80009ba:	1aaa      	subs	r2, r5, r2
 80009bc:	e6bc      	b.n	8000738 <__aeabi_fadd+0x68>
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d013      	beq.n	80009ea <__aeabi_fadd+0x31a>
 80009c2:	000c      	movs	r4, r1
 80009c4:	46c4      	mov	ip, r8
 80009c6:	e6e2      	b.n	800078e <__aeabi_fadd+0xbe>
 80009c8:	2d00      	cmp	r5, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_fadd+0x2fe>
 80009cc:	e6fb      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	03db      	lsls	r3, r3, #15
 80009d2:	421a      	tst	r2, r3
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fadd+0x308>
 80009d6:	e6f6      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009d8:	4640      	mov	r0, r8
 80009da:	4218      	tst	r0, r3
 80009dc:	d000      	beq.n	80009e0 <__aeabi_fadd+0x310>
 80009de:	e6f2      	b.n	80007c6 <__aeabi_fadd+0xf6>
 80009e0:	000c      	movs	r4, r1
 80009e2:	e6ef      	b.n	80007c4 <__aeabi_fadd+0xf4>
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	d000      	beq.n	80009ea <__aeabi_fadd+0x31a>
 80009e8:	e763      	b.n	80008b2 <__aeabi_fadd+0x1e2>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2400      	movs	r4, #0
 80009ee:	4694      	mov	ip, r2
 80009f0:	e6cd      	b.n	800078e <__aeabi_fadd+0xbe>
 80009f2:	46c4      	mov	ip, r8
 80009f4:	e6cb      	b.n	800078e <__aeabi_fadd+0xbe>
 80009f6:	002a      	movs	r2, r5
 80009f8:	0037      	movs	r7, r6
 80009fa:	4452      	add	r2, sl
 80009fc:	e703      	b.n	8000806 <__aeabi_fadd+0x136>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	7dffffff 	.word	0x7dffffff
 8000a04:	fbffffff 	.word	0xfbffffff

08000a08 <__aeabi_fdiv>:
 8000a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0a:	464f      	mov	r7, r9
 8000a0c:	4646      	mov	r6, r8
 8000a0e:	46d6      	mov	lr, sl
 8000a10:	0245      	lsls	r5, r0, #9
 8000a12:	b5c0      	push	{r6, r7, lr}
 8000a14:	0047      	lsls	r7, r0, #1
 8000a16:	1c0c      	adds	r4, r1, #0
 8000a18:	0a6d      	lsrs	r5, r5, #9
 8000a1a:	0e3f      	lsrs	r7, r7, #24
 8000a1c:	0fc6      	lsrs	r6, r0, #31
 8000a1e:	2f00      	cmp	r7, #0
 8000a20:	d066      	beq.n	8000af0 <__aeabi_fdiv+0xe8>
 8000a22:	2fff      	cmp	r7, #255	; 0xff
 8000a24:	d06c      	beq.n	8000b00 <__aeabi_fdiv+0xf8>
 8000a26:	2300      	movs	r3, #0
 8000a28:	00ea      	lsls	r2, r5, #3
 8000a2a:	2580      	movs	r5, #128	; 0x80
 8000a2c:	4699      	mov	r9, r3
 8000a2e:	469a      	mov	sl, r3
 8000a30:	04ed      	lsls	r5, r5, #19
 8000a32:	4315      	orrs	r5, r2
 8000a34:	3f7f      	subs	r7, #127	; 0x7f
 8000a36:	0260      	lsls	r0, r4, #9
 8000a38:	0061      	lsls	r1, r4, #1
 8000a3a:	0a43      	lsrs	r3, r0, #9
 8000a3c:	4698      	mov	r8, r3
 8000a3e:	0e09      	lsrs	r1, r1, #24
 8000a40:	0fe4      	lsrs	r4, r4, #31
 8000a42:	2900      	cmp	r1, #0
 8000a44:	d048      	beq.n	8000ad8 <__aeabi_fdiv+0xd0>
 8000a46:	29ff      	cmp	r1, #255	; 0xff
 8000a48:	d010      	beq.n	8000a6c <__aeabi_fdiv+0x64>
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	00d8      	lsls	r0, r3, #3
 8000a4e:	04d2      	lsls	r2, r2, #19
 8000a50:	4302      	orrs	r2, r0
 8000a52:	4690      	mov	r8, r2
 8000a54:	2000      	movs	r0, #0
 8000a56:	397f      	subs	r1, #127	; 0x7f
 8000a58:	464a      	mov	r2, r9
 8000a5a:	0033      	movs	r3, r6
 8000a5c:	1a7f      	subs	r7, r7, r1
 8000a5e:	4302      	orrs	r2, r0
 8000a60:	496c      	ldr	r1, [pc, #432]	; (8000c14 <__aeabi_fdiv+0x20c>)
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	588a      	ldr	r2, [r1, r2]
 8000a66:	4063      	eors	r3, r4
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4697      	mov	pc, r2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d16d      	bne.n	8000b4c <__aeabi_fdiv+0x144>
 8000a70:	2002      	movs	r0, #2
 8000a72:	3fff      	subs	r7, #255	; 0xff
 8000a74:	e033      	b.n	8000ade <__aeabi_fdiv+0xd6>
 8000a76:	2300      	movs	r3, #0
 8000a78:	4698      	mov	r8, r3
 8000a7a:	0026      	movs	r6, r4
 8000a7c:	4645      	mov	r5, r8
 8000a7e:	4682      	mov	sl, r0
 8000a80:	4653      	mov	r3, sl
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fdiv+0x80>
 8000a86:	e07f      	b.n	8000b88 <__aeabi_fdiv+0x180>
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_fdiv+0x86>
 8000a8c:	e094      	b.n	8000bb8 <__aeabi_fdiv+0x1b0>
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d017      	beq.n	8000ac2 <__aeabi_fdiv+0xba>
 8000a92:	0038      	movs	r0, r7
 8000a94:	307f      	adds	r0, #127	; 0x7f
 8000a96:	2800      	cmp	r0, #0
 8000a98:	dd5f      	ble.n	8000b5a <__aeabi_fdiv+0x152>
 8000a9a:	076b      	lsls	r3, r5, #29
 8000a9c:	d004      	beq.n	8000aa8 <__aeabi_fdiv+0xa0>
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	402b      	ands	r3, r5
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fdiv+0xa0>
 8000aa6:	3504      	adds	r5, #4
 8000aa8:	012b      	lsls	r3, r5, #4
 8000aaa:	d503      	bpl.n	8000ab4 <__aeabi_fdiv+0xac>
 8000aac:	0038      	movs	r0, r7
 8000aae:	4b5a      	ldr	r3, [pc, #360]	; (8000c18 <__aeabi_fdiv+0x210>)
 8000ab0:	3080      	adds	r0, #128	; 0x80
 8000ab2:	401d      	ands	r5, r3
 8000ab4:	28fe      	cmp	r0, #254	; 0xfe
 8000ab6:	dc67      	bgt.n	8000b88 <__aeabi_fdiv+0x180>
 8000ab8:	01ad      	lsls	r5, r5, #6
 8000aba:	0a6d      	lsrs	r5, r5, #9
 8000abc:	b2c0      	uxtb	r0, r0
 8000abe:	e002      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000ac0:	001e      	movs	r6, r3
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2500      	movs	r5, #0
 8000ac6:	05c0      	lsls	r0, r0, #23
 8000ac8:	4328      	orrs	r0, r5
 8000aca:	07f6      	lsls	r6, r6, #31
 8000acc:	4330      	orrs	r0, r6
 8000ace:	bce0      	pop	{r5, r6, r7}
 8000ad0:	46ba      	mov	sl, r7
 8000ad2:	46b1      	mov	r9, r6
 8000ad4:	46a8      	mov	r8, r5
 8000ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d12b      	bne.n	8000b34 <__aeabi_fdiv+0x12c>
 8000adc:	2001      	movs	r0, #1
 8000ade:	464a      	mov	r2, r9
 8000ae0:	0033      	movs	r3, r6
 8000ae2:	494e      	ldr	r1, [pc, #312]	; (8000c1c <__aeabi_fdiv+0x214>)
 8000ae4:	4302      	orrs	r2, r0
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	588a      	ldr	r2, [r1, r2]
 8000aea:	4063      	eors	r3, r4
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4697      	mov	pc, r2
 8000af0:	2d00      	cmp	r5, #0
 8000af2:	d113      	bne.n	8000b1c <__aeabi_fdiv+0x114>
 8000af4:	2304      	movs	r3, #4
 8000af6:	4699      	mov	r9, r3
 8000af8:	3b03      	subs	r3, #3
 8000afa:	2700      	movs	r7, #0
 8000afc:	469a      	mov	sl, r3
 8000afe:	e79a      	b.n	8000a36 <__aeabi_fdiv+0x2e>
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d105      	bne.n	8000b10 <__aeabi_fdiv+0x108>
 8000b04:	2308      	movs	r3, #8
 8000b06:	4699      	mov	r9, r3
 8000b08:	3b06      	subs	r3, #6
 8000b0a:	27ff      	movs	r7, #255	; 0xff
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	e792      	b.n	8000a36 <__aeabi_fdiv+0x2e>
 8000b10:	230c      	movs	r3, #12
 8000b12:	4699      	mov	r9, r3
 8000b14:	3b09      	subs	r3, #9
 8000b16:	27ff      	movs	r7, #255	; 0xff
 8000b18:	469a      	mov	sl, r3
 8000b1a:	e78c      	b.n	8000a36 <__aeabi_fdiv+0x2e>
 8000b1c:	0028      	movs	r0, r5
 8000b1e:	f002 f817 	bl	8002b50 <__clzsi2>
 8000b22:	2776      	movs	r7, #118	; 0x76
 8000b24:	1f43      	subs	r3, r0, #5
 8000b26:	409d      	lsls	r5, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	427f      	negs	r7, r7
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	469a      	mov	sl, r3
 8000b30:	1a3f      	subs	r7, r7, r0
 8000b32:	e780      	b.n	8000a36 <__aeabi_fdiv+0x2e>
 8000b34:	0018      	movs	r0, r3
 8000b36:	f002 f80b 	bl	8002b50 <__clzsi2>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	1f43      	subs	r3, r0, #5
 8000b3e:	2176      	movs	r1, #118	; 0x76
 8000b40:	409a      	lsls	r2, r3
 8000b42:	4249      	negs	r1, r1
 8000b44:	1a09      	subs	r1, r1, r0
 8000b46:	4690      	mov	r8, r2
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e785      	b.n	8000a58 <__aeabi_fdiv+0x50>
 8000b4c:	21ff      	movs	r1, #255	; 0xff
 8000b4e:	2003      	movs	r0, #3
 8000b50:	e782      	b.n	8000a58 <__aeabi_fdiv+0x50>
 8000b52:	001e      	movs	r6, r3
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	2500      	movs	r5, #0
 8000b58:	e7b5      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	1a1b      	subs	r3, r3, r0
 8000b5e:	2b1b      	cmp	r3, #27
 8000b60:	dcaf      	bgt.n	8000ac2 <__aeabi_fdiv+0xba>
 8000b62:	379e      	adds	r7, #158	; 0x9e
 8000b64:	0029      	movs	r1, r5
 8000b66:	40bd      	lsls	r5, r7
 8000b68:	40d9      	lsrs	r1, r3
 8000b6a:	1e6a      	subs	r2, r5, #1
 8000b6c:	4195      	sbcs	r5, r2
 8000b6e:	430d      	orrs	r5, r1
 8000b70:	076b      	lsls	r3, r5, #29
 8000b72:	d004      	beq.n	8000b7e <__aeabi_fdiv+0x176>
 8000b74:	230f      	movs	r3, #15
 8000b76:	402b      	ands	r3, r5
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d000      	beq.n	8000b7e <__aeabi_fdiv+0x176>
 8000b7c:	3504      	adds	r5, #4
 8000b7e:	016b      	lsls	r3, r5, #5
 8000b80:	d544      	bpl.n	8000c0c <__aeabi_fdiv+0x204>
 8000b82:	2001      	movs	r0, #1
 8000b84:	2500      	movs	r5, #0
 8000b86:	e79e      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000b88:	20ff      	movs	r0, #255	; 0xff
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	e79b      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000b8e:	2580      	movs	r5, #128	; 0x80
 8000b90:	2600      	movs	r6, #0
 8000b92:	20ff      	movs	r0, #255	; 0xff
 8000b94:	03ed      	lsls	r5, r5, #15
 8000b96:	e796      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	4698      	mov	r8, r3
 8000b9c:	2080      	movs	r0, #128	; 0x80
 8000b9e:	03c0      	lsls	r0, r0, #15
 8000ba0:	4205      	tst	r5, r0
 8000ba2:	d009      	beq.n	8000bb8 <__aeabi_fdiv+0x1b0>
 8000ba4:	4643      	mov	r3, r8
 8000ba6:	4203      	tst	r3, r0
 8000ba8:	d106      	bne.n	8000bb8 <__aeabi_fdiv+0x1b0>
 8000baa:	4645      	mov	r5, r8
 8000bac:	4305      	orrs	r5, r0
 8000bae:	026d      	lsls	r5, r5, #9
 8000bb0:	0026      	movs	r6, r4
 8000bb2:	20ff      	movs	r0, #255	; 0xff
 8000bb4:	0a6d      	lsrs	r5, r5, #9
 8000bb6:	e786      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000bb8:	2080      	movs	r0, #128	; 0x80
 8000bba:	03c0      	lsls	r0, r0, #15
 8000bbc:	4305      	orrs	r5, r0
 8000bbe:	026d      	lsls	r5, r5, #9
 8000bc0:	20ff      	movs	r0, #255	; 0xff
 8000bc2:	0a6d      	lsrs	r5, r5, #9
 8000bc4:	e77f      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000bc6:	4641      	mov	r1, r8
 8000bc8:	016a      	lsls	r2, r5, #5
 8000bca:	0148      	lsls	r0, r1, #5
 8000bcc:	4282      	cmp	r2, r0
 8000bce:	d219      	bcs.n	8000c04 <__aeabi_fdiv+0x1fc>
 8000bd0:	211b      	movs	r1, #27
 8000bd2:	2500      	movs	r5, #0
 8000bd4:	3f01      	subs	r7, #1
 8000bd6:	2601      	movs	r6, #1
 8000bd8:	0014      	movs	r4, r2
 8000bda:	006d      	lsls	r5, r5, #1
 8000bdc:	0052      	lsls	r2, r2, #1
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	db01      	blt.n	8000be6 <__aeabi_fdiv+0x1de>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	d801      	bhi.n	8000bea <__aeabi_fdiv+0x1e2>
 8000be6:	1a12      	subs	r2, r2, r0
 8000be8:	4335      	orrs	r5, r6
 8000bea:	3901      	subs	r1, #1
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d1f3      	bne.n	8000bd8 <__aeabi_fdiv+0x1d0>
 8000bf0:	1e50      	subs	r0, r2, #1
 8000bf2:	4182      	sbcs	r2, r0
 8000bf4:	0038      	movs	r0, r7
 8000bf6:	307f      	adds	r0, #127	; 0x7f
 8000bf8:	001e      	movs	r6, r3
 8000bfa:	4315      	orrs	r5, r2
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	dd00      	ble.n	8000c02 <__aeabi_fdiv+0x1fa>
 8000c00:	e74b      	b.n	8000a9a <__aeabi_fdiv+0x92>
 8000c02:	e7aa      	b.n	8000b5a <__aeabi_fdiv+0x152>
 8000c04:	211a      	movs	r1, #26
 8000c06:	2501      	movs	r5, #1
 8000c08:	1a12      	subs	r2, r2, r0
 8000c0a:	e7e4      	b.n	8000bd6 <__aeabi_fdiv+0x1ce>
 8000c0c:	01ad      	lsls	r5, r5, #6
 8000c0e:	2000      	movs	r0, #0
 8000c10:	0a6d      	lsrs	r5, r5, #9
 8000c12:	e758      	b.n	8000ac6 <__aeabi_fdiv+0xbe>
 8000c14:	0800a070 	.word	0x0800a070
 8000c18:	f7ffffff 	.word	0xf7ffffff
 8000c1c:	0800a0b0 	.word	0x0800a0b0

08000c20 <__aeabi_fmul>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	4657      	mov	r7, sl
 8000c24:	464e      	mov	r6, r9
 8000c26:	4645      	mov	r5, r8
 8000c28:	46de      	mov	lr, fp
 8000c2a:	0244      	lsls	r4, r0, #9
 8000c2c:	b5e0      	push	{r5, r6, r7, lr}
 8000c2e:	0045      	lsls	r5, r0, #1
 8000c30:	1c0f      	adds	r7, r1, #0
 8000c32:	0a64      	lsrs	r4, r4, #9
 8000c34:	0e2d      	lsrs	r5, r5, #24
 8000c36:	0fc6      	lsrs	r6, r0, #31
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d047      	beq.n	8000ccc <__aeabi_fmul+0xac>
 8000c3c:	2dff      	cmp	r5, #255	; 0xff
 8000c3e:	d04d      	beq.n	8000cdc <__aeabi_fmul+0xbc>
 8000c40:	2300      	movs	r3, #0
 8000c42:	2080      	movs	r0, #128	; 0x80
 8000c44:	469a      	mov	sl, r3
 8000c46:	469b      	mov	fp, r3
 8000c48:	00e4      	lsls	r4, r4, #3
 8000c4a:	04c0      	lsls	r0, r0, #19
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	3d7f      	subs	r5, #127	; 0x7f
 8000c50:	0278      	lsls	r0, r7, #9
 8000c52:	0a43      	lsrs	r3, r0, #9
 8000c54:	4699      	mov	r9, r3
 8000c56:	007a      	lsls	r2, r7, #1
 8000c58:	0ffb      	lsrs	r3, r7, #31
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	0e12      	lsrs	r2, r2, #24
 8000c5e:	464b      	mov	r3, r9
 8000c60:	d044      	beq.n	8000cec <__aeabi_fmul+0xcc>
 8000c62:	2aff      	cmp	r2, #255	; 0xff
 8000c64:	d011      	beq.n	8000c8a <__aeabi_fmul+0x6a>
 8000c66:	00d8      	lsls	r0, r3, #3
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	04db      	lsls	r3, r3, #19
 8000c6c:	4303      	orrs	r3, r0
 8000c6e:	4699      	mov	r9, r3
 8000c70:	2000      	movs	r0, #0
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	18ad      	adds	r5, r5, r2
 8000c76:	4647      	mov	r7, r8
 8000c78:	4653      	mov	r3, sl
 8000c7a:	4077      	eors	r7, r6
 8000c7c:	1c69      	adds	r1, r5, #1
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d83f      	bhi.n	8000d02 <__aeabi_fmul+0xe2>
 8000c82:	4a72      	ldr	r2, [pc, #456]	; (8000e4c <__aeabi_fmul+0x22c>)
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	58d3      	ldr	r3, [r2, r3]
 8000c88:	469f      	mov	pc, r3
 8000c8a:	35ff      	adds	r5, #255	; 0xff
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fmul+0x72>
 8000c90:	e079      	b.n	8000d86 <__aeabi_fmul+0x166>
 8000c92:	4652      	mov	r2, sl
 8000c94:	2302      	movs	r3, #2
 8000c96:	431a      	orrs	r2, r3
 8000c98:	4692      	mov	sl, r2
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	e7eb      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000c9e:	4647      	mov	r7, r8
 8000ca0:	464c      	mov	r4, r9
 8000ca2:	4683      	mov	fp, r0
 8000ca4:	465b      	mov	r3, fp
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d028      	beq.n	8000cfc <__aeabi_fmul+0xdc>
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fmul+0x90>
 8000cae:	e0c6      	b.n	8000e3e <__aeabi_fmul+0x21e>
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d14f      	bne.n	8000d54 <__aeabi_fmul+0x134>
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	2400      	movs	r4, #0
 8000cb8:	05c0      	lsls	r0, r0, #23
 8000cba:	07ff      	lsls	r7, r7, #31
 8000cbc:	4320      	orrs	r0, r4
 8000cbe:	4338      	orrs	r0, r7
 8000cc0:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc2:	46bb      	mov	fp, r7
 8000cc4:	46b2      	mov	sl, r6
 8000cc6:	46a9      	mov	r9, r5
 8000cc8:	46a0      	mov	r8, r4
 8000cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d171      	bne.n	8000db4 <__aeabi_fmul+0x194>
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e7b9      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000cdc:	2c00      	cmp	r4, #0
 8000cde:	d163      	bne.n	8000da8 <__aeabi_fmul+0x188>
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	469a      	mov	sl, r3
 8000ce4:	3b06      	subs	r3, #6
 8000ce6:	25ff      	movs	r5, #255	; 0xff
 8000ce8:	469b      	mov	fp, r3
 8000cea:	e7b1      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d150      	bne.n	8000d92 <__aeabi_fmul+0x172>
 8000cf0:	4652      	mov	r2, sl
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	4692      	mov	sl, r2
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	e7bc      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000cfc:	20ff      	movs	r0, #255	; 0xff
 8000cfe:	2400      	movs	r4, #0
 8000d00:	e7da      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000d02:	4648      	mov	r0, r9
 8000d04:	0c26      	lsrs	r6, r4, #16
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	0c22      	lsrs	r2, r4, #16
 8000d0a:	0404      	lsls	r4, r0, #16
 8000d0c:	0c24      	lsrs	r4, r4, #16
 8000d0e:	464b      	mov	r3, r9
 8000d10:	0020      	movs	r0, r4
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	4350      	muls	r0, r2
 8000d16:	4374      	muls	r4, r6
 8000d18:	435a      	muls	r2, r3
 8000d1a:	435e      	muls	r6, r3
 8000d1c:	1912      	adds	r2, r2, r4
 8000d1e:	0c03      	lsrs	r3, r0, #16
 8000d20:	189b      	adds	r3, r3, r2
 8000d22:	429c      	cmp	r4, r3
 8000d24:	d903      	bls.n	8000d2e <__aeabi_fmul+0x10e>
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	0252      	lsls	r2, r2, #9
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	4466      	add	r6, ip
 8000d2e:	0400      	lsls	r0, r0, #16
 8000d30:	041a      	lsls	r2, r3, #16
 8000d32:	0c00      	lsrs	r0, r0, #16
 8000d34:	1812      	adds	r2, r2, r0
 8000d36:	0194      	lsls	r4, r2, #6
 8000d38:	1e60      	subs	r0, r4, #1
 8000d3a:	4184      	sbcs	r4, r0
 8000d3c:	0c1b      	lsrs	r3, r3, #16
 8000d3e:	0e92      	lsrs	r2, r2, #26
 8000d40:	199b      	adds	r3, r3, r6
 8000d42:	4314      	orrs	r4, r2
 8000d44:	019b      	lsls	r3, r3, #6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	d572      	bpl.n	8000e32 <__aeabi_fmul+0x212>
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	0863      	lsrs	r3, r4, #1
 8000d50:	4004      	ands	r4, r0
 8000d52:	431c      	orrs	r4, r3
 8000d54:	0008      	movs	r0, r1
 8000d56:	307f      	adds	r0, #127	; 0x7f
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	dd3c      	ble.n	8000dd6 <__aeabi_fmul+0x1b6>
 8000d5c:	0763      	lsls	r3, r4, #29
 8000d5e:	d004      	beq.n	8000d6a <__aeabi_fmul+0x14a>
 8000d60:	230f      	movs	r3, #15
 8000d62:	4023      	ands	r3, r4
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d000      	beq.n	8000d6a <__aeabi_fmul+0x14a>
 8000d68:	3404      	adds	r4, #4
 8000d6a:	0123      	lsls	r3, r4, #4
 8000d6c:	d503      	bpl.n	8000d76 <__aeabi_fmul+0x156>
 8000d6e:	3180      	adds	r1, #128	; 0x80
 8000d70:	0008      	movs	r0, r1
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <__aeabi_fmul+0x230>)
 8000d74:	401c      	ands	r4, r3
 8000d76:	28fe      	cmp	r0, #254	; 0xfe
 8000d78:	dcc0      	bgt.n	8000cfc <__aeabi_fmul+0xdc>
 8000d7a:	01a4      	lsls	r4, r4, #6
 8000d7c:	0a64      	lsrs	r4, r4, #9
 8000d7e:	b2c0      	uxtb	r0, r0
 8000d80:	e79a      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000d82:	0037      	movs	r7, r6
 8000d84:	e78e      	b.n	8000ca4 <__aeabi_fmul+0x84>
 8000d86:	4652      	mov	r2, sl
 8000d88:	2303      	movs	r3, #3
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	4692      	mov	sl, r2
 8000d8e:	2003      	movs	r0, #3
 8000d90:	e771      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000d92:	4648      	mov	r0, r9
 8000d94:	f001 fedc 	bl	8002b50 <__clzsi2>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	1f43      	subs	r3, r0, #5
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	1a2d      	subs	r5, r5, r0
 8000da0:	4691      	mov	r9, r2
 8000da2:	2000      	movs	r0, #0
 8000da4:	3d76      	subs	r5, #118	; 0x76
 8000da6:	e766      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000da8:	230c      	movs	r3, #12
 8000daa:	469a      	mov	sl, r3
 8000dac:	3b09      	subs	r3, #9
 8000dae:	25ff      	movs	r5, #255	; 0xff
 8000db0:	469b      	mov	fp, r3
 8000db2:	e74d      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000db4:	0020      	movs	r0, r4
 8000db6:	f001 fecb 	bl	8002b50 <__clzsi2>
 8000dba:	2576      	movs	r5, #118	; 0x76
 8000dbc:	1f43      	subs	r3, r0, #5
 8000dbe:	409c      	lsls	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	426d      	negs	r5, r5
 8000dc4:	469a      	mov	sl, r3
 8000dc6:	469b      	mov	fp, r3
 8000dc8:	1a2d      	subs	r5, r5, r0
 8000dca:	e741      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000dcc:	2480      	movs	r4, #128	; 0x80
 8000dce:	2700      	movs	r7, #0
 8000dd0:	20ff      	movs	r0, #255	; 0xff
 8000dd2:	03e4      	lsls	r4, r4, #15
 8000dd4:	e770      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	1a1b      	subs	r3, r3, r0
 8000dda:	2b1b      	cmp	r3, #27
 8000ddc:	dd00      	ble.n	8000de0 <__aeabi_fmul+0x1c0>
 8000dde:	e769      	b.n	8000cb4 <__aeabi_fmul+0x94>
 8000de0:	319e      	adds	r1, #158	; 0x9e
 8000de2:	0020      	movs	r0, r4
 8000de4:	408c      	lsls	r4, r1
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	1e63      	subs	r3, r4, #1
 8000dea:	419c      	sbcs	r4, r3
 8000dec:	4304      	orrs	r4, r0
 8000dee:	0763      	lsls	r3, r4, #29
 8000df0:	d004      	beq.n	8000dfc <__aeabi_fmul+0x1dc>
 8000df2:	230f      	movs	r3, #15
 8000df4:	4023      	ands	r3, r4
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d000      	beq.n	8000dfc <__aeabi_fmul+0x1dc>
 8000dfa:	3404      	adds	r4, #4
 8000dfc:	0163      	lsls	r3, r4, #5
 8000dfe:	d51a      	bpl.n	8000e36 <__aeabi_fmul+0x216>
 8000e00:	2001      	movs	r0, #1
 8000e02:	2400      	movs	r4, #0
 8000e04:	e758      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e06:	2080      	movs	r0, #128	; 0x80
 8000e08:	03c0      	lsls	r0, r0, #15
 8000e0a:	4204      	tst	r4, r0
 8000e0c:	d009      	beq.n	8000e22 <__aeabi_fmul+0x202>
 8000e0e:	464b      	mov	r3, r9
 8000e10:	4203      	tst	r3, r0
 8000e12:	d106      	bne.n	8000e22 <__aeabi_fmul+0x202>
 8000e14:	464c      	mov	r4, r9
 8000e16:	4304      	orrs	r4, r0
 8000e18:	0264      	lsls	r4, r4, #9
 8000e1a:	4647      	mov	r7, r8
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	0a64      	lsrs	r4, r4, #9
 8000e20:	e74a      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e22:	2080      	movs	r0, #128	; 0x80
 8000e24:	03c0      	lsls	r0, r0, #15
 8000e26:	4304      	orrs	r4, r0
 8000e28:	0264      	lsls	r4, r4, #9
 8000e2a:	0037      	movs	r7, r6
 8000e2c:	20ff      	movs	r0, #255	; 0xff
 8000e2e:	0a64      	lsrs	r4, r4, #9
 8000e30:	e742      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e32:	0029      	movs	r1, r5
 8000e34:	e78e      	b.n	8000d54 <__aeabi_fmul+0x134>
 8000e36:	01a4      	lsls	r4, r4, #6
 8000e38:	2000      	movs	r0, #0
 8000e3a:	0a64      	lsrs	r4, r4, #9
 8000e3c:	e73c      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e3e:	2080      	movs	r0, #128	; 0x80
 8000e40:	03c0      	lsls	r0, r0, #15
 8000e42:	4304      	orrs	r4, r0
 8000e44:	0264      	lsls	r4, r4, #9
 8000e46:	20ff      	movs	r0, #255	; 0xff
 8000e48:	0a64      	lsrs	r4, r4, #9
 8000e4a:	e735      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e4c:	0800a0f0 	.word	0x0800a0f0
 8000e50:	f7ffffff 	.word	0xf7ffffff

08000e54 <__aeabi_f2iz>:
 8000e54:	0241      	lsls	r1, r0, #9
 8000e56:	0042      	lsls	r2, r0, #1
 8000e58:	0fc3      	lsrs	r3, r0, #31
 8000e5a:	0a49      	lsrs	r1, r1, #9
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	0e12      	lsrs	r2, r2, #24
 8000e60:	2a7e      	cmp	r2, #126	; 0x7e
 8000e62:	d903      	bls.n	8000e6c <__aeabi_f2iz+0x18>
 8000e64:	2a9d      	cmp	r2, #157	; 0x9d
 8000e66:	d902      	bls.n	8000e6e <__aeabi_f2iz+0x1a>
 8000e68:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <__aeabi_f2iz+0x3c>)
 8000e6a:	1898      	adds	r0, r3, r2
 8000e6c:	4770      	bx	lr
 8000e6e:	2080      	movs	r0, #128	; 0x80
 8000e70:	0400      	lsls	r0, r0, #16
 8000e72:	4301      	orrs	r1, r0
 8000e74:	2a95      	cmp	r2, #149	; 0x95
 8000e76:	dc07      	bgt.n	8000e88 <__aeabi_f2iz+0x34>
 8000e78:	2096      	movs	r0, #150	; 0x96
 8000e7a:	1a82      	subs	r2, r0, r2
 8000e7c:	40d1      	lsrs	r1, r2
 8000e7e:	4248      	negs	r0, r1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f3      	bne.n	8000e6c <__aeabi_f2iz+0x18>
 8000e84:	0008      	movs	r0, r1
 8000e86:	e7f1      	b.n	8000e6c <__aeabi_f2iz+0x18>
 8000e88:	3a96      	subs	r2, #150	; 0x96
 8000e8a:	4091      	lsls	r1, r2
 8000e8c:	e7f7      	b.n	8000e7e <__aeabi_f2iz+0x2a>
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	7fffffff 	.word	0x7fffffff

08000e94 <__aeabi_i2f>:
 8000e94:	b570      	push	{r4, r5, r6, lr}
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d013      	beq.n	8000ec2 <__aeabi_i2f+0x2e>
 8000e9a:	17c3      	asrs	r3, r0, #31
 8000e9c:	18c5      	adds	r5, r0, r3
 8000e9e:	405d      	eors	r5, r3
 8000ea0:	0fc4      	lsrs	r4, r0, #31
 8000ea2:	0028      	movs	r0, r5
 8000ea4:	f001 fe54 	bl	8002b50 <__clzsi2>
 8000ea8:	239e      	movs	r3, #158	; 0x9e
 8000eaa:	0001      	movs	r1, r0
 8000eac:	1a1b      	subs	r3, r3, r0
 8000eae:	2b96      	cmp	r3, #150	; 0x96
 8000eb0:	dc0f      	bgt.n	8000ed2 <__aeabi_i2f+0x3e>
 8000eb2:	2808      	cmp	r0, #8
 8000eb4:	dd01      	ble.n	8000eba <__aeabi_i2f+0x26>
 8000eb6:	3908      	subs	r1, #8
 8000eb8:	408d      	lsls	r5, r1
 8000eba:	026d      	lsls	r5, r5, #9
 8000ebc:	0a6d      	lsrs	r5, r5, #9
 8000ebe:	b2d8      	uxtb	r0, r3
 8000ec0:	e002      	b.n	8000ec8 <__aeabi_i2f+0x34>
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	05c0      	lsls	r0, r0, #23
 8000eca:	4328      	orrs	r0, r5
 8000ecc:	07e4      	lsls	r4, r4, #31
 8000ece:	4320      	orrs	r0, r4
 8000ed0:	bd70      	pop	{r4, r5, r6, pc}
 8000ed2:	2b99      	cmp	r3, #153	; 0x99
 8000ed4:	dd0b      	ble.n	8000eee <__aeabi_i2f+0x5a>
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	002e      	movs	r6, r5
 8000eda:	1a12      	subs	r2, r2, r0
 8000edc:	40d6      	lsrs	r6, r2
 8000ede:	0002      	movs	r2, r0
 8000ee0:	321b      	adds	r2, #27
 8000ee2:	4095      	lsls	r5, r2
 8000ee4:	0028      	movs	r0, r5
 8000ee6:	1e45      	subs	r5, r0, #1
 8000ee8:	41a8      	sbcs	r0, r5
 8000eea:	0035      	movs	r5, r6
 8000eec:	4305      	orrs	r5, r0
 8000eee:	2905      	cmp	r1, #5
 8000ef0:	dd01      	ble.n	8000ef6 <__aeabi_i2f+0x62>
 8000ef2:	1f4a      	subs	r2, r1, #5
 8000ef4:	4095      	lsls	r5, r2
 8000ef6:	002a      	movs	r2, r5
 8000ef8:	4e08      	ldr	r6, [pc, #32]	; (8000f1c <__aeabi_i2f+0x88>)
 8000efa:	4032      	ands	r2, r6
 8000efc:	0768      	lsls	r0, r5, #29
 8000efe:	d009      	beq.n	8000f14 <__aeabi_i2f+0x80>
 8000f00:	200f      	movs	r0, #15
 8000f02:	4028      	ands	r0, r5
 8000f04:	2804      	cmp	r0, #4
 8000f06:	d005      	beq.n	8000f14 <__aeabi_i2f+0x80>
 8000f08:	3204      	adds	r2, #4
 8000f0a:	0150      	lsls	r0, r2, #5
 8000f0c:	d502      	bpl.n	8000f14 <__aeabi_i2f+0x80>
 8000f0e:	239f      	movs	r3, #159	; 0x9f
 8000f10:	4032      	ands	r2, r6
 8000f12:	1a5b      	subs	r3, r3, r1
 8000f14:	0192      	lsls	r2, r2, #6
 8000f16:	0a55      	lsrs	r5, r2, #9
 8000f18:	b2d8      	uxtb	r0, r3
 8000f1a:	e7d5      	b.n	8000ec8 <__aeabi_i2f+0x34>
 8000f1c:	fbffffff 	.word	0xfbffffff

08000f20 <__aeabi_dadd>:
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f22:	464f      	mov	r7, r9
 8000f24:	46d6      	mov	lr, sl
 8000f26:	4646      	mov	r6, r8
 8000f28:	000d      	movs	r5, r1
 8000f2a:	0001      	movs	r1, r0
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	b5c0      	push	{r6, r7, lr}
 8000f30:	0017      	movs	r7, r2
 8000f32:	032b      	lsls	r3, r5, #12
 8000f34:	0a5a      	lsrs	r2, r3, #9
 8000f36:	0f4b      	lsrs	r3, r1, #29
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	00ca      	lsls	r2, r1, #3
 8000f3c:	4691      	mov	r9, r2
 8000f3e:	0302      	lsls	r2, r0, #12
 8000f40:	006e      	lsls	r6, r5, #1
 8000f42:	0041      	lsls	r1, r0, #1
 8000f44:	0a52      	lsrs	r2, r2, #9
 8000f46:	0fec      	lsrs	r4, r5, #31
 8000f48:	0f7d      	lsrs	r5, r7, #29
 8000f4a:	4315      	orrs	r5, r2
 8000f4c:	0d76      	lsrs	r6, r6, #21
 8000f4e:	0d49      	lsrs	r1, r1, #21
 8000f50:	0fc0      	lsrs	r0, r0, #31
 8000f52:	4682      	mov	sl, r0
 8000f54:	46ac      	mov	ip, r5
 8000f56:	00ff      	lsls	r7, r7, #3
 8000f58:	1a72      	subs	r2, r6, r1
 8000f5a:	4284      	cmp	r4, r0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_dadd+0x40>
 8000f5e:	e098      	b.n	8001092 <__aeabi_dadd+0x172>
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	dc00      	bgt.n	8000f66 <__aeabi_dadd+0x46>
 8000f64:	e081      	b.n	800106a <__aeabi_dadd+0x14a>
 8000f66:	2900      	cmp	r1, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_dadd+0x4c>
 8000f6a:	e0b6      	b.n	80010da <__aeabi_dadd+0x1ba>
 8000f6c:	49c9      	ldr	r1, [pc, #804]	; (8001294 <__aeabi_dadd+0x374>)
 8000f6e:	428e      	cmp	r6, r1
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dadd+0x54>
 8000f72:	e172      	b.n	800125a <__aeabi_dadd+0x33a>
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	0028      	movs	r0, r5
 8000f78:	0409      	lsls	r1, r1, #16
 8000f7a:	4308      	orrs	r0, r1
 8000f7c:	4684      	mov	ip, r0
 8000f7e:	2a38      	cmp	r2, #56	; 0x38
 8000f80:	dd00      	ble.n	8000f84 <__aeabi_dadd+0x64>
 8000f82:	e15e      	b.n	8001242 <__aeabi_dadd+0x322>
 8000f84:	2a1f      	cmp	r2, #31
 8000f86:	dd00      	ble.n	8000f8a <__aeabi_dadd+0x6a>
 8000f88:	e1ee      	b.n	8001368 <__aeabi_dadd+0x448>
 8000f8a:	2020      	movs	r0, #32
 8000f8c:	0039      	movs	r1, r7
 8000f8e:	4665      	mov	r5, ip
 8000f90:	1a80      	subs	r0, r0, r2
 8000f92:	4087      	lsls	r7, r0
 8000f94:	40d1      	lsrs	r1, r2
 8000f96:	4085      	lsls	r5, r0
 8000f98:	430d      	orrs	r5, r1
 8000f9a:	0039      	movs	r1, r7
 8000f9c:	1e4f      	subs	r7, r1, #1
 8000f9e:	41b9      	sbcs	r1, r7
 8000fa0:	4667      	mov	r7, ip
 8000fa2:	40d7      	lsrs	r7, r2
 8000fa4:	4329      	orrs	r1, r5
 8000fa6:	1bdb      	subs	r3, r3, r7
 8000fa8:	464a      	mov	r2, r9
 8000faa:	1a55      	subs	r5, r2, r1
 8000fac:	45a9      	cmp	r9, r5
 8000fae:	4189      	sbcs	r1, r1
 8000fb0:	4249      	negs	r1, r1
 8000fb2:	1a5b      	subs	r3, r3, r1
 8000fb4:	4698      	mov	r8, r3
 8000fb6:	4643      	mov	r3, r8
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	d400      	bmi.n	8000fbe <__aeabi_dadd+0x9e>
 8000fbc:	e0cc      	b.n	8001158 <__aeabi_dadd+0x238>
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	0a5b      	lsrs	r3, r3, #9
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	4643      	mov	r3, r8
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_dadd+0xae>
 8000fcc:	e12c      	b.n	8001228 <__aeabi_dadd+0x308>
 8000fce:	4640      	mov	r0, r8
 8000fd0:	f001 fdbe 	bl	8002b50 <__clzsi2>
 8000fd4:	0001      	movs	r1, r0
 8000fd6:	3908      	subs	r1, #8
 8000fd8:	2220      	movs	r2, #32
 8000fda:	0028      	movs	r0, r5
 8000fdc:	4643      	mov	r3, r8
 8000fde:	1a52      	subs	r2, r2, r1
 8000fe0:	408b      	lsls	r3, r1
 8000fe2:	40d0      	lsrs	r0, r2
 8000fe4:	408d      	lsls	r5, r1
 8000fe6:	4303      	orrs	r3, r0
 8000fe8:	428e      	cmp	r6, r1
 8000fea:	dd00      	ble.n	8000fee <__aeabi_dadd+0xce>
 8000fec:	e117      	b.n	800121e <__aeabi_dadd+0x2fe>
 8000fee:	1b8e      	subs	r6, r1, r6
 8000ff0:	1c72      	adds	r2, r6, #1
 8000ff2:	2a1f      	cmp	r2, #31
 8000ff4:	dd00      	ble.n	8000ff8 <__aeabi_dadd+0xd8>
 8000ff6:	e1a7      	b.n	8001348 <__aeabi_dadd+0x428>
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	002e      	movs	r6, r5
 8000ffe:	1a89      	subs	r1, r1, r2
 8001000:	408d      	lsls	r5, r1
 8001002:	4088      	lsls	r0, r1
 8001004:	40d6      	lsrs	r6, r2
 8001006:	40d3      	lsrs	r3, r2
 8001008:	1e69      	subs	r1, r5, #1
 800100a:	418d      	sbcs	r5, r1
 800100c:	4330      	orrs	r0, r6
 800100e:	4698      	mov	r8, r3
 8001010:	2600      	movs	r6, #0
 8001012:	4305      	orrs	r5, r0
 8001014:	076b      	lsls	r3, r5, #29
 8001016:	d009      	beq.n	800102c <__aeabi_dadd+0x10c>
 8001018:	230f      	movs	r3, #15
 800101a:	402b      	ands	r3, r5
 800101c:	2b04      	cmp	r3, #4
 800101e:	d005      	beq.n	800102c <__aeabi_dadd+0x10c>
 8001020:	1d2b      	adds	r3, r5, #4
 8001022:	42ab      	cmp	r3, r5
 8001024:	41ad      	sbcs	r5, r5
 8001026:	426d      	negs	r5, r5
 8001028:	44a8      	add	r8, r5
 800102a:	001d      	movs	r5, r3
 800102c:	4643      	mov	r3, r8
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	d400      	bmi.n	8001034 <__aeabi_dadd+0x114>
 8001032:	e094      	b.n	800115e <__aeabi_dadd+0x23e>
 8001034:	4b97      	ldr	r3, [pc, #604]	; (8001294 <__aeabi_dadd+0x374>)
 8001036:	1c72      	adds	r2, r6, #1
 8001038:	429a      	cmp	r2, r3
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x11e>
 800103c:	e09d      	b.n	800117a <__aeabi_dadd+0x25a>
 800103e:	4641      	mov	r1, r8
 8001040:	4b95      	ldr	r3, [pc, #596]	; (8001298 <__aeabi_dadd+0x378>)
 8001042:	08ed      	lsrs	r5, r5, #3
 8001044:	4019      	ands	r1, r3
 8001046:	000b      	movs	r3, r1
 8001048:	0552      	lsls	r2, r2, #21
 800104a:	0749      	lsls	r1, r1, #29
 800104c:	025b      	lsls	r3, r3, #9
 800104e:	4329      	orrs	r1, r5
 8001050:	0b1b      	lsrs	r3, r3, #12
 8001052:	0d52      	lsrs	r2, r2, #21
 8001054:	0512      	lsls	r2, r2, #20
 8001056:	4313      	orrs	r3, r2
 8001058:	07e4      	lsls	r4, r4, #31
 800105a:	4323      	orrs	r3, r4
 800105c:	0008      	movs	r0, r1
 800105e:	0019      	movs	r1, r3
 8001060:	bce0      	pop	{r5, r6, r7}
 8001062:	46ba      	mov	sl, r7
 8001064:	46b1      	mov	r9, r6
 8001066:	46a8      	mov	r8, r5
 8001068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800106a:	2a00      	cmp	r2, #0
 800106c:	d043      	beq.n	80010f6 <__aeabi_dadd+0x1d6>
 800106e:	1b8a      	subs	r2, r1, r6
 8001070:	2e00      	cmp	r6, #0
 8001072:	d000      	beq.n	8001076 <__aeabi_dadd+0x156>
 8001074:	e12a      	b.n	80012cc <__aeabi_dadd+0x3ac>
 8001076:	464c      	mov	r4, r9
 8001078:	431c      	orrs	r4, r3
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x15e>
 800107c:	e1d1      	b.n	8001422 <__aeabi_dadd+0x502>
 800107e:	1e54      	subs	r4, r2, #1
 8001080:	2a01      	cmp	r2, #1
 8001082:	d100      	bne.n	8001086 <__aeabi_dadd+0x166>
 8001084:	e21f      	b.n	80014c6 <__aeabi_dadd+0x5a6>
 8001086:	4d83      	ldr	r5, [pc, #524]	; (8001294 <__aeabi_dadd+0x374>)
 8001088:	42aa      	cmp	r2, r5
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x16e>
 800108c:	e272      	b.n	8001574 <__aeabi_dadd+0x654>
 800108e:	0022      	movs	r2, r4
 8001090:	e123      	b.n	80012da <__aeabi_dadd+0x3ba>
 8001092:	2a00      	cmp	r2, #0
 8001094:	dc00      	bgt.n	8001098 <__aeabi_dadd+0x178>
 8001096:	e098      	b.n	80011ca <__aeabi_dadd+0x2aa>
 8001098:	2900      	cmp	r1, #0
 800109a:	d042      	beq.n	8001122 <__aeabi_dadd+0x202>
 800109c:	497d      	ldr	r1, [pc, #500]	; (8001294 <__aeabi_dadd+0x374>)
 800109e:	428e      	cmp	r6, r1
 80010a0:	d100      	bne.n	80010a4 <__aeabi_dadd+0x184>
 80010a2:	e0da      	b.n	800125a <__aeabi_dadd+0x33a>
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	0028      	movs	r0, r5
 80010a8:	0409      	lsls	r1, r1, #16
 80010aa:	4308      	orrs	r0, r1
 80010ac:	4684      	mov	ip, r0
 80010ae:	2a38      	cmp	r2, #56	; 0x38
 80010b0:	dd00      	ble.n	80010b4 <__aeabi_dadd+0x194>
 80010b2:	e129      	b.n	8001308 <__aeabi_dadd+0x3e8>
 80010b4:	2a1f      	cmp	r2, #31
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_dadd+0x19a>
 80010b8:	e187      	b.n	80013ca <__aeabi_dadd+0x4aa>
 80010ba:	0011      	movs	r1, r2
 80010bc:	4665      	mov	r5, ip
 80010be:	3920      	subs	r1, #32
 80010c0:	40cd      	lsrs	r5, r1
 80010c2:	2a20      	cmp	r2, #32
 80010c4:	d004      	beq.n	80010d0 <__aeabi_dadd+0x1b0>
 80010c6:	2040      	movs	r0, #64	; 0x40
 80010c8:	4661      	mov	r1, ip
 80010ca:	1a82      	subs	r2, r0, r2
 80010cc:	4091      	lsls	r1, r2
 80010ce:	430f      	orrs	r7, r1
 80010d0:	0039      	movs	r1, r7
 80010d2:	1e4f      	subs	r7, r1, #1
 80010d4:	41b9      	sbcs	r1, r7
 80010d6:	430d      	orrs	r5, r1
 80010d8:	e11b      	b.n	8001312 <__aeabi_dadd+0x3f2>
 80010da:	0029      	movs	r1, r5
 80010dc:	4339      	orrs	r1, r7
 80010de:	d100      	bne.n	80010e2 <__aeabi_dadd+0x1c2>
 80010e0:	e0b5      	b.n	800124e <__aeabi_dadd+0x32e>
 80010e2:	1e51      	subs	r1, r2, #1
 80010e4:	2a01      	cmp	r2, #1
 80010e6:	d100      	bne.n	80010ea <__aeabi_dadd+0x1ca>
 80010e8:	e1ab      	b.n	8001442 <__aeabi_dadd+0x522>
 80010ea:	486a      	ldr	r0, [pc, #424]	; (8001294 <__aeabi_dadd+0x374>)
 80010ec:	4282      	cmp	r2, r0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_dadd+0x1d2>
 80010f0:	e1b2      	b.n	8001458 <__aeabi_dadd+0x538>
 80010f2:	000a      	movs	r2, r1
 80010f4:	e743      	b.n	8000f7e <__aeabi_dadd+0x5e>
 80010f6:	4969      	ldr	r1, [pc, #420]	; (800129c <__aeabi_dadd+0x37c>)
 80010f8:	1c75      	adds	r5, r6, #1
 80010fa:	420d      	tst	r5, r1
 80010fc:	d000      	beq.n	8001100 <__aeabi_dadd+0x1e0>
 80010fe:	e0cf      	b.n	80012a0 <__aeabi_dadd+0x380>
 8001100:	2e00      	cmp	r6, #0
 8001102:	d000      	beq.n	8001106 <__aeabi_dadd+0x1e6>
 8001104:	e193      	b.n	800142e <__aeabi_dadd+0x50e>
 8001106:	4649      	mov	r1, r9
 8001108:	4319      	orrs	r1, r3
 800110a:	d100      	bne.n	800110e <__aeabi_dadd+0x1ee>
 800110c:	e1d1      	b.n	80014b2 <__aeabi_dadd+0x592>
 800110e:	4661      	mov	r1, ip
 8001110:	4339      	orrs	r1, r7
 8001112:	d000      	beq.n	8001116 <__aeabi_dadd+0x1f6>
 8001114:	e1e3      	b.n	80014de <__aeabi_dadd+0x5be>
 8001116:	4649      	mov	r1, r9
 8001118:	0758      	lsls	r0, r3, #29
 800111a:	08c9      	lsrs	r1, r1, #3
 800111c:	4301      	orrs	r1, r0
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	e026      	b.n	8001170 <__aeabi_dadd+0x250>
 8001122:	0029      	movs	r1, r5
 8001124:	4339      	orrs	r1, r7
 8001126:	d100      	bne.n	800112a <__aeabi_dadd+0x20a>
 8001128:	e091      	b.n	800124e <__aeabi_dadd+0x32e>
 800112a:	1e51      	subs	r1, r2, #1
 800112c:	2a01      	cmp	r2, #1
 800112e:	d005      	beq.n	800113c <__aeabi_dadd+0x21c>
 8001130:	4858      	ldr	r0, [pc, #352]	; (8001294 <__aeabi_dadd+0x374>)
 8001132:	4282      	cmp	r2, r0
 8001134:	d100      	bne.n	8001138 <__aeabi_dadd+0x218>
 8001136:	e18f      	b.n	8001458 <__aeabi_dadd+0x538>
 8001138:	000a      	movs	r2, r1
 800113a:	e7b8      	b.n	80010ae <__aeabi_dadd+0x18e>
 800113c:	003d      	movs	r5, r7
 800113e:	444d      	add	r5, r9
 8001140:	454d      	cmp	r5, r9
 8001142:	4189      	sbcs	r1, r1
 8001144:	4463      	add	r3, ip
 8001146:	4698      	mov	r8, r3
 8001148:	4249      	negs	r1, r1
 800114a:	4488      	add	r8, r1
 800114c:	4643      	mov	r3, r8
 800114e:	2602      	movs	r6, #2
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	d500      	bpl.n	8001156 <__aeabi_dadd+0x236>
 8001154:	e0eb      	b.n	800132e <__aeabi_dadd+0x40e>
 8001156:	3e01      	subs	r6, #1
 8001158:	076b      	lsls	r3, r5, #29
 800115a:	d000      	beq.n	800115e <__aeabi_dadd+0x23e>
 800115c:	e75c      	b.n	8001018 <__aeabi_dadd+0xf8>
 800115e:	4643      	mov	r3, r8
 8001160:	08e9      	lsrs	r1, r5, #3
 8001162:	075a      	lsls	r2, r3, #29
 8001164:	4311      	orrs	r1, r2
 8001166:	0032      	movs	r2, r6
 8001168:	08db      	lsrs	r3, r3, #3
 800116a:	484a      	ldr	r0, [pc, #296]	; (8001294 <__aeabi_dadd+0x374>)
 800116c:	4282      	cmp	r2, r0
 800116e:	d021      	beq.n	80011b4 <__aeabi_dadd+0x294>
 8001170:	031b      	lsls	r3, r3, #12
 8001172:	0552      	lsls	r2, r2, #21
 8001174:	0b1b      	lsrs	r3, r3, #12
 8001176:	0d52      	lsrs	r2, r2, #21
 8001178:	e76c      	b.n	8001054 <__aeabi_dadd+0x134>
 800117a:	2300      	movs	r3, #0
 800117c:	2100      	movs	r1, #0
 800117e:	e769      	b.n	8001054 <__aeabi_dadd+0x134>
 8001180:	002a      	movs	r2, r5
 8001182:	433a      	orrs	r2, r7
 8001184:	d069      	beq.n	800125a <__aeabi_dadd+0x33a>
 8001186:	464a      	mov	r2, r9
 8001188:	0758      	lsls	r0, r3, #29
 800118a:	08d1      	lsrs	r1, r2, #3
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	031b      	lsls	r3, r3, #12
 8001192:	4308      	orrs	r0, r1
 8001194:	421a      	tst	r2, r3
 8001196:	d007      	beq.n	80011a8 <__aeabi_dadd+0x288>
 8001198:	0029      	movs	r1, r5
 800119a:	08ed      	lsrs	r5, r5, #3
 800119c:	421d      	tst	r5, r3
 800119e:	d103      	bne.n	80011a8 <__aeabi_dadd+0x288>
 80011a0:	002a      	movs	r2, r5
 80011a2:	08ff      	lsrs	r7, r7, #3
 80011a4:	0748      	lsls	r0, r1, #29
 80011a6:	4338      	orrs	r0, r7
 80011a8:	0f43      	lsrs	r3, r0, #29
 80011aa:	00c1      	lsls	r1, r0, #3
 80011ac:	075b      	lsls	r3, r3, #29
 80011ae:	08c9      	lsrs	r1, r1, #3
 80011b0:	4319      	orrs	r1, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	000a      	movs	r2, r1
 80011b6:	431a      	orrs	r2, r3
 80011b8:	d100      	bne.n	80011bc <__aeabi_dadd+0x29c>
 80011ba:	e213      	b.n	80015e4 <__aeabi_dadd+0x6c4>
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	0312      	lsls	r2, r2, #12
 80011c0:	4313      	orrs	r3, r2
 80011c2:	031b      	lsls	r3, r3, #12
 80011c4:	4a33      	ldr	r2, [pc, #204]	; (8001294 <__aeabi_dadd+0x374>)
 80011c6:	0b1b      	lsrs	r3, r3, #12
 80011c8:	e744      	b.n	8001054 <__aeabi_dadd+0x134>
 80011ca:	2a00      	cmp	r2, #0
 80011cc:	d04b      	beq.n	8001266 <__aeabi_dadd+0x346>
 80011ce:	1b8a      	subs	r2, r1, r6
 80011d0:	2e00      	cmp	r6, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dadd+0x2b6>
 80011d4:	e0e7      	b.n	80013a6 <__aeabi_dadd+0x486>
 80011d6:	482f      	ldr	r0, [pc, #188]	; (8001294 <__aeabi_dadd+0x374>)
 80011d8:	4281      	cmp	r1, r0
 80011da:	d100      	bne.n	80011de <__aeabi_dadd+0x2be>
 80011dc:	e195      	b.n	800150a <__aeabi_dadd+0x5ea>
 80011de:	2080      	movs	r0, #128	; 0x80
 80011e0:	0400      	lsls	r0, r0, #16
 80011e2:	4303      	orrs	r3, r0
 80011e4:	2a38      	cmp	r2, #56	; 0x38
 80011e6:	dd00      	ble.n	80011ea <__aeabi_dadd+0x2ca>
 80011e8:	e143      	b.n	8001472 <__aeabi_dadd+0x552>
 80011ea:	2a1f      	cmp	r2, #31
 80011ec:	dd00      	ble.n	80011f0 <__aeabi_dadd+0x2d0>
 80011ee:	e1db      	b.n	80015a8 <__aeabi_dadd+0x688>
 80011f0:	2020      	movs	r0, #32
 80011f2:	001d      	movs	r5, r3
 80011f4:	464e      	mov	r6, r9
 80011f6:	1a80      	subs	r0, r0, r2
 80011f8:	4085      	lsls	r5, r0
 80011fa:	40d6      	lsrs	r6, r2
 80011fc:	4335      	orrs	r5, r6
 80011fe:	464e      	mov	r6, r9
 8001200:	4086      	lsls	r6, r0
 8001202:	0030      	movs	r0, r6
 8001204:	40d3      	lsrs	r3, r2
 8001206:	1e46      	subs	r6, r0, #1
 8001208:	41b0      	sbcs	r0, r6
 800120a:	449c      	add	ip, r3
 800120c:	4305      	orrs	r5, r0
 800120e:	19ed      	adds	r5, r5, r7
 8001210:	42bd      	cmp	r5, r7
 8001212:	419b      	sbcs	r3, r3
 8001214:	425b      	negs	r3, r3
 8001216:	4463      	add	r3, ip
 8001218:	4698      	mov	r8, r3
 800121a:	000e      	movs	r6, r1
 800121c:	e07f      	b.n	800131e <__aeabi_dadd+0x3fe>
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <__aeabi_dadd+0x378>)
 8001220:	1a76      	subs	r6, r6, r1
 8001222:	4013      	ands	r3, r2
 8001224:	4698      	mov	r8, r3
 8001226:	e6f5      	b.n	8001014 <__aeabi_dadd+0xf4>
 8001228:	0028      	movs	r0, r5
 800122a:	f001 fc91 	bl	8002b50 <__clzsi2>
 800122e:	0001      	movs	r1, r0
 8001230:	3118      	adds	r1, #24
 8001232:	291f      	cmp	r1, #31
 8001234:	dc00      	bgt.n	8001238 <__aeabi_dadd+0x318>
 8001236:	e6cf      	b.n	8000fd8 <__aeabi_dadd+0xb8>
 8001238:	002b      	movs	r3, r5
 800123a:	3808      	subs	r0, #8
 800123c:	4083      	lsls	r3, r0
 800123e:	2500      	movs	r5, #0
 8001240:	e6d2      	b.n	8000fe8 <__aeabi_dadd+0xc8>
 8001242:	4662      	mov	r2, ip
 8001244:	433a      	orrs	r2, r7
 8001246:	0011      	movs	r1, r2
 8001248:	1e4f      	subs	r7, r1, #1
 800124a:	41b9      	sbcs	r1, r7
 800124c:	e6ac      	b.n	8000fa8 <__aeabi_dadd+0x88>
 800124e:	4649      	mov	r1, r9
 8001250:	0758      	lsls	r0, r3, #29
 8001252:	08c9      	lsrs	r1, r1, #3
 8001254:	4301      	orrs	r1, r0
 8001256:	08db      	lsrs	r3, r3, #3
 8001258:	e787      	b.n	800116a <__aeabi_dadd+0x24a>
 800125a:	4649      	mov	r1, r9
 800125c:	075a      	lsls	r2, r3, #29
 800125e:	08c9      	lsrs	r1, r1, #3
 8001260:	4311      	orrs	r1, r2
 8001262:	08db      	lsrs	r3, r3, #3
 8001264:	e7a6      	b.n	80011b4 <__aeabi_dadd+0x294>
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <__aeabi_dadd+0x37c>)
 8001268:	1c70      	adds	r0, r6, #1
 800126a:	4208      	tst	r0, r1
 800126c:	d000      	beq.n	8001270 <__aeabi_dadd+0x350>
 800126e:	e0bb      	b.n	80013e8 <__aeabi_dadd+0x4c8>
 8001270:	2e00      	cmp	r6, #0
 8001272:	d000      	beq.n	8001276 <__aeabi_dadd+0x356>
 8001274:	e114      	b.n	80014a0 <__aeabi_dadd+0x580>
 8001276:	4649      	mov	r1, r9
 8001278:	4319      	orrs	r1, r3
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x35e>
 800127c:	e175      	b.n	800156a <__aeabi_dadd+0x64a>
 800127e:	0029      	movs	r1, r5
 8001280:	4339      	orrs	r1, r7
 8001282:	d000      	beq.n	8001286 <__aeabi_dadd+0x366>
 8001284:	e17e      	b.n	8001584 <__aeabi_dadd+0x664>
 8001286:	4649      	mov	r1, r9
 8001288:	0758      	lsls	r0, r3, #29
 800128a:	08c9      	lsrs	r1, r1, #3
 800128c:	4301      	orrs	r1, r0
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	e76e      	b.n	8001170 <__aeabi_dadd+0x250>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	000007ff 	.word	0x000007ff
 8001298:	ff7fffff 	.word	0xff7fffff
 800129c:	000007fe 	.word	0x000007fe
 80012a0:	4649      	mov	r1, r9
 80012a2:	1bcd      	subs	r5, r1, r7
 80012a4:	4661      	mov	r1, ip
 80012a6:	1a58      	subs	r0, r3, r1
 80012a8:	45a9      	cmp	r9, r5
 80012aa:	4189      	sbcs	r1, r1
 80012ac:	4249      	negs	r1, r1
 80012ae:	4688      	mov	r8, r1
 80012b0:	0001      	movs	r1, r0
 80012b2:	4640      	mov	r0, r8
 80012b4:	1a09      	subs	r1, r1, r0
 80012b6:	4688      	mov	r8, r1
 80012b8:	0209      	lsls	r1, r1, #8
 80012ba:	d500      	bpl.n	80012be <__aeabi_dadd+0x39e>
 80012bc:	e0a6      	b.n	800140c <__aeabi_dadd+0x4ec>
 80012be:	4641      	mov	r1, r8
 80012c0:	4329      	orrs	r1, r5
 80012c2:	d000      	beq.n	80012c6 <__aeabi_dadd+0x3a6>
 80012c4:	e67f      	b.n	8000fc6 <__aeabi_dadd+0xa6>
 80012c6:	2300      	movs	r3, #0
 80012c8:	2400      	movs	r4, #0
 80012ca:	e751      	b.n	8001170 <__aeabi_dadd+0x250>
 80012cc:	4cc7      	ldr	r4, [pc, #796]	; (80015ec <__aeabi_dadd+0x6cc>)
 80012ce:	42a1      	cmp	r1, r4
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x3b4>
 80012d2:	e0c7      	b.n	8001464 <__aeabi_dadd+0x544>
 80012d4:	2480      	movs	r4, #128	; 0x80
 80012d6:	0424      	lsls	r4, r4, #16
 80012d8:	4323      	orrs	r3, r4
 80012da:	2a38      	cmp	r2, #56	; 0x38
 80012dc:	dc54      	bgt.n	8001388 <__aeabi_dadd+0x468>
 80012de:	2a1f      	cmp	r2, #31
 80012e0:	dd00      	ble.n	80012e4 <__aeabi_dadd+0x3c4>
 80012e2:	e0cc      	b.n	800147e <__aeabi_dadd+0x55e>
 80012e4:	2420      	movs	r4, #32
 80012e6:	4648      	mov	r0, r9
 80012e8:	1aa4      	subs	r4, r4, r2
 80012ea:	001d      	movs	r5, r3
 80012ec:	464e      	mov	r6, r9
 80012ee:	40a0      	lsls	r0, r4
 80012f0:	40d6      	lsrs	r6, r2
 80012f2:	40a5      	lsls	r5, r4
 80012f4:	0004      	movs	r4, r0
 80012f6:	40d3      	lsrs	r3, r2
 80012f8:	4662      	mov	r2, ip
 80012fa:	4335      	orrs	r5, r6
 80012fc:	1e66      	subs	r6, r4, #1
 80012fe:	41b4      	sbcs	r4, r6
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	469c      	mov	ip, r3
 8001304:	4325      	orrs	r5, r4
 8001306:	e044      	b.n	8001392 <__aeabi_dadd+0x472>
 8001308:	4662      	mov	r2, ip
 800130a:	433a      	orrs	r2, r7
 800130c:	0015      	movs	r5, r2
 800130e:	1e6f      	subs	r7, r5, #1
 8001310:	41bd      	sbcs	r5, r7
 8001312:	444d      	add	r5, r9
 8001314:	454d      	cmp	r5, r9
 8001316:	4189      	sbcs	r1, r1
 8001318:	4249      	negs	r1, r1
 800131a:	4688      	mov	r8, r1
 800131c:	4498      	add	r8, r3
 800131e:	4643      	mov	r3, r8
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	d400      	bmi.n	8001326 <__aeabi_dadd+0x406>
 8001324:	e718      	b.n	8001158 <__aeabi_dadd+0x238>
 8001326:	4bb1      	ldr	r3, [pc, #708]	; (80015ec <__aeabi_dadd+0x6cc>)
 8001328:	3601      	adds	r6, #1
 800132a:	429e      	cmp	r6, r3
 800132c:	d049      	beq.n	80013c2 <__aeabi_dadd+0x4a2>
 800132e:	4642      	mov	r2, r8
 8001330:	4baf      	ldr	r3, [pc, #700]	; (80015f0 <__aeabi_dadd+0x6d0>)
 8001332:	2101      	movs	r1, #1
 8001334:	401a      	ands	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	086a      	lsrs	r2, r5, #1
 800133a:	400d      	ands	r5, r1
 800133c:	4315      	orrs	r5, r2
 800133e:	07d9      	lsls	r1, r3, #31
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	4698      	mov	r8, r3
 8001344:	430d      	orrs	r5, r1
 8001346:	e665      	b.n	8001014 <__aeabi_dadd+0xf4>
 8001348:	0018      	movs	r0, r3
 800134a:	3e1f      	subs	r6, #31
 800134c:	40f0      	lsrs	r0, r6
 800134e:	2a20      	cmp	r2, #32
 8001350:	d003      	beq.n	800135a <__aeabi_dadd+0x43a>
 8001352:	2140      	movs	r1, #64	; 0x40
 8001354:	1a8a      	subs	r2, r1, r2
 8001356:	4093      	lsls	r3, r2
 8001358:	431d      	orrs	r5, r3
 800135a:	1e69      	subs	r1, r5, #1
 800135c:	418d      	sbcs	r5, r1
 800135e:	2300      	movs	r3, #0
 8001360:	2600      	movs	r6, #0
 8001362:	4698      	mov	r8, r3
 8001364:	4305      	orrs	r5, r0
 8001366:	e6f7      	b.n	8001158 <__aeabi_dadd+0x238>
 8001368:	0011      	movs	r1, r2
 800136a:	4665      	mov	r5, ip
 800136c:	3920      	subs	r1, #32
 800136e:	40cd      	lsrs	r5, r1
 8001370:	2a20      	cmp	r2, #32
 8001372:	d004      	beq.n	800137e <__aeabi_dadd+0x45e>
 8001374:	2040      	movs	r0, #64	; 0x40
 8001376:	4661      	mov	r1, ip
 8001378:	1a82      	subs	r2, r0, r2
 800137a:	4091      	lsls	r1, r2
 800137c:	430f      	orrs	r7, r1
 800137e:	0039      	movs	r1, r7
 8001380:	1e4f      	subs	r7, r1, #1
 8001382:	41b9      	sbcs	r1, r7
 8001384:	4329      	orrs	r1, r5
 8001386:	e60f      	b.n	8000fa8 <__aeabi_dadd+0x88>
 8001388:	464a      	mov	r2, r9
 800138a:	4313      	orrs	r3, r2
 800138c:	001d      	movs	r5, r3
 800138e:	1e6b      	subs	r3, r5, #1
 8001390:	419d      	sbcs	r5, r3
 8001392:	1b7d      	subs	r5, r7, r5
 8001394:	42af      	cmp	r7, r5
 8001396:	419b      	sbcs	r3, r3
 8001398:	4662      	mov	r2, ip
 800139a:	425b      	negs	r3, r3
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4698      	mov	r8, r3
 80013a0:	4654      	mov	r4, sl
 80013a2:	000e      	movs	r6, r1
 80013a4:	e607      	b.n	8000fb6 <__aeabi_dadd+0x96>
 80013a6:	4648      	mov	r0, r9
 80013a8:	4318      	orrs	r0, r3
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0x48e>
 80013ac:	e0b3      	b.n	8001516 <__aeabi_dadd+0x5f6>
 80013ae:	1e50      	subs	r0, r2, #1
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dadd+0x496>
 80013b4:	e10d      	b.n	80015d2 <__aeabi_dadd+0x6b2>
 80013b6:	4d8d      	ldr	r5, [pc, #564]	; (80015ec <__aeabi_dadd+0x6cc>)
 80013b8:	42aa      	cmp	r2, r5
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x49e>
 80013bc:	e0a5      	b.n	800150a <__aeabi_dadd+0x5ea>
 80013be:	0002      	movs	r2, r0
 80013c0:	e710      	b.n	80011e4 <__aeabi_dadd+0x2c4>
 80013c2:	0032      	movs	r2, r6
 80013c4:	2300      	movs	r3, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	e644      	b.n	8001054 <__aeabi_dadd+0x134>
 80013ca:	2120      	movs	r1, #32
 80013cc:	0038      	movs	r0, r7
 80013ce:	1a89      	subs	r1, r1, r2
 80013d0:	4665      	mov	r5, ip
 80013d2:	408f      	lsls	r7, r1
 80013d4:	408d      	lsls	r5, r1
 80013d6:	40d0      	lsrs	r0, r2
 80013d8:	1e79      	subs	r1, r7, #1
 80013da:	418f      	sbcs	r7, r1
 80013dc:	4305      	orrs	r5, r0
 80013de:	433d      	orrs	r5, r7
 80013e0:	4667      	mov	r7, ip
 80013e2:	40d7      	lsrs	r7, r2
 80013e4:	19db      	adds	r3, r3, r7
 80013e6:	e794      	b.n	8001312 <__aeabi_dadd+0x3f2>
 80013e8:	4a80      	ldr	r2, [pc, #512]	; (80015ec <__aeabi_dadd+0x6cc>)
 80013ea:	4290      	cmp	r0, r2
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dadd+0x4d0>
 80013ee:	e0ec      	b.n	80015ca <__aeabi_dadd+0x6aa>
 80013f0:	0039      	movs	r1, r7
 80013f2:	4449      	add	r1, r9
 80013f4:	4549      	cmp	r1, r9
 80013f6:	4192      	sbcs	r2, r2
 80013f8:	4463      	add	r3, ip
 80013fa:	4252      	negs	r2, r2
 80013fc:	189b      	adds	r3, r3, r2
 80013fe:	07dd      	lsls	r5, r3, #31
 8001400:	0849      	lsrs	r1, r1, #1
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	4698      	mov	r8, r3
 8001406:	0006      	movs	r6, r0
 8001408:	430d      	orrs	r5, r1
 800140a:	e6a5      	b.n	8001158 <__aeabi_dadd+0x238>
 800140c:	464a      	mov	r2, r9
 800140e:	1abd      	subs	r5, r7, r2
 8001410:	42af      	cmp	r7, r5
 8001412:	4189      	sbcs	r1, r1
 8001414:	4662      	mov	r2, ip
 8001416:	4249      	negs	r1, r1
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	1a5b      	subs	r3, r3, r1
 800141c:	4698      	mov	r8, r3
 800141e:	4654      	mov	r4, sl
 8001420:	e5d1      	b.n	8000fc6 <__aeabi_dadd+0xa6>
 8001422:	076c      	lsls	r4, r5, #29
 8001424:	08f9      	lsrs	r1, r7, #3
 8001426:	4321      	orrs	r1, r4
 8001428:	08eb      	lsrs	r3, r5, #3
 800142a:	0004      	movs	r4, r0
 800142c:	e69d      	b.n	800116a <__aeabi_dadd+0x24a>
 800142e:	464a      	mov	r2, r9
 8001430:	431a      	orrs	r2, r3
 8001432:	d175      	bne.n	8001520 <__aeabi_dadd+0x600>
 8001434:	4661      	mov	r1, ip
 8001436:	4339      	orrs	r1, r7
 8001438:	d114      	bne.n	8001464 <__aeabi_dadd+0x544>
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	2400      	movs	r4, #0
 800143e:	031b      	lsls	r3, r3, #12
 8001440:	e6bc      	b.n	80011bc <__aeabi_dadd+0x29c>
 8001442:	464a      	mov	r2, r9
 8001444:	1bd5      	subs	r5, r2, r7
 8001446:	45a9      	cmp	r9, r5
 8001448:	4189      	sbcs	r1, r1
 800144a:	4662      	mov	r2, ip
 800144c:	4249      	negs	r1, r1
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	1a5b      	subs	r3, r3, r1
 8001452:	4698      	mov	r8, r3
 8001454:	2601      	movs	r6, #1
 8001456:	e5ae      	b.n	8000fb6 <__aeabi_dadd+0x96>
 8001458:	464a      	mov	r2, r9
 800145a:	08d1      	lsrs	r1, r2, #3
 800145c:	075a      	lsls	r2, r3, #29
 800145e:	4311      	orrs	r1, r2
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	e6a7      	b.n	80011b4 <__aeabi_dadd+0x294>
 8001464:	4663      	mov	r3, ip
 8001466:	08f9      	lsrs	r1, r7, #3
 8001468:	075a      	lsls	r2, r3, #29
 800146a:	4654      	mov	r4, sl
 800146c:	4311      	orrs	r1, r2
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	e6a0      	b.n	80011b4 <__aeabi_dadd+0x294>
 8001472:	464a      	mov	r2, r9
 8001474:	4313      	orrs	r3, r2
 8001476:	001d      	movs	r5, r3
 8001478:	1e6b      	subs	r3, r5, #1
 800147a:	419d      	sbcs	r5, r3
 800147c:	e6c7      	b.n	800120e <__aeabi_dadd+0x2ee>
 800147e:	0014      	movs	r4, r2
 8001480:	001e      	movs	r6, r3
 8001482:	3c20      	subs	r4, #32
 8001484:	40e6      	lsrs	r6, r4
 8001486:	2a20      	cmp	r2, #32
 8001488:	d005      	beq.n	8001496 <__aeabi_dadd+0x576>
 800148a:	2440      	movs	r4, #64	; 0x40
 800148c:	1aa2      	subs	r2, r4, r2
 800148e:	4093      	lsls	r3, r2
 8001490:	464a      	mov	r2, r9
 8001492:	431a      	orrs	r2, r3
 8001494:	4691      	mov	r9, r2
 8001496:	464d      	mov	r5, r9
 8001498:	1e6b      	subs	r3, r5, #1
 800149a:	419d      	sbcs	r5, r3
 800149c:	4335      	orrs	r5, r6
 800149e:	e778      	b.n	8001392 <__aeabi_dadd+0x472>
 80014a0:	464a      	mov	r2, r9
 80014a2:	431a      	orrs	r2, r3
 80014a4:	d000      	beq.n	80014a8 <__aeabi_dadd+0x588>
 80014a6:	e66b      	b.n	8001180 <__aeabi_dadd+0x260>
 80014a8:	076b      	lsls	r3, r5, #29
 80014aa:	08f9      	lsrs	r1, r7, #3
 80014ac:	4319      	orrs	r1, r3
 80014ae:	08eb      	lsrs	r3, r5, #3
 80014b0:	e680      	b.n	80011b4 <__aeabi_dadd+0x294>
 80014b2:	4661      	mov	r1, ip
 80014b4:	4339      	orrs	r1, r7
 80014b6:	d054      	beq.n	8001562 <__aeabi_dadd+0x642>
 80014b8:	4663      	mov	r3, ip
 80014ba:	08f9      	lsrs	r1, r7, #3
 80014bc:	075c      	lsls	r4, r3, #29
 80014be:	4321      	orrs	r1, r4
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	0004      	movs	r4, r0
 80014c4:	e654      	b.n	8001170 <__aeabi_dadd+0x250>
 80014c6:	464a      	mov	r2, r9
 80014c8:	1abd      	subs	r5, r7, r2
 80014ca:	42af      	cmp	r7, r5
 80014cc:	4189      	sbcs	r1, r1
 80014ce:	4662      	mov	r2, ip
 80014d0:	4249      	negs	r1, r1
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	1a5b      	subs	r3, r3, r1
 80014d6:	4698      	mov	r8, r3
 80014d8:	0004      	movs	r4, r0
 80014da:	2601      	movs	r6, #1
 80014dc:	e56b      	b.n	8000fb6 <__aeabi_dadd+0x96>
 80014de:	464a      	mov	r2, r9
 80014e0:	1bd5      	subs	r5, r2, r7
 80014e2:	45a9      	cmp	r9, r5
 80014e4:	4189      	sbcs	r1, r1
 80014e6:	4662      	mov	r2, ip
 80014e8:	4249      	negs	r1, r1
 80014ea:	1a9a      	subs	r2, r3, r2
 80014ec:	1a52      	subs	r2, r2, r1
 80014ee:	4690      	mov	r8, r2
 80014f0:	0212      	lsls	r2, r2, #8
 80014f2:	d532      	bpl.n	800155a <__aeabi_dadd+0x63a>
 80014f4:	464a      	mov	r2, r9
 80014f6:	1abd      	subs	r5, r7, r2
 80014f8:	42af      	cmp	r7, r5
 80014fa:	4189      	sbcs	r1, r1
 80014fc:	4662      	mov	r2, ip
 80014fe:	4249      	negs	r1, r1
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	4698      	mov	r8, r3
 8001506:	0004      	movs	r4, r0
 8001508:	e584      	b.n	8001014 <__aeabi_dadd+0xf4>
 800150a:	4663      	mov	r3, ip
 800150c:	08f9      	lsrs	r1, r7, #3
 800150e:	075a      	lsls	r2, r3, #29
 8001510:	4311      	orrs	r1, r2
 8001512:	08db      	lsrs	r3, r3, #3
 8001514:	e64e      	b.n	80011b4 <__aeabi_dadd+0x294>
 8001516:	08f9      	lsrs	r1, r7, #3
 8001518:	0768      	lsls	r0, r5, #29
 800151a:	4301      	orrs	r1, r0
 800151c:	08eb      	lsrs	r3, r5, #3
 800151e:	e624      	b.n	800116a <__aeabi_dadd+0x24a>
 8001520:	4662      	mov	r2, ip
 8001522:	433a      	orrs	r2, r7
 8001524:	d100      	bne.n	8001528 <__aeabi_dadd+0x608>
 8001526:	e698      	b.n	800125a <__aeabi_dadd+0x33a>
 8001528:	464a      	mov	r2, r9
 800152a:	08d1      	lsrs	r1, r2, #3
 800152c:	075a      	lsls	r2, r3, #29
 800152e:	4311      	orrs	r1, r2
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	031b      	lsls	r3, r3, #12
 8001536:	421a      	tst	r2, r3
 8001538:	d008      	beq.n	800154c <__aeabi_dadd+0x62c>
 800153a:	4660      	mov	r0, ip
 800153c:	08c5      	lsrs	r5, r0, #3
 800153e:	421d      	tst	r5, r3
 8001540:	d104      	bne.n	800154c <__aeabi_dadd+0x62c>
 8001542:	4654      	mov	r4, sl
 8001544:	002a      	movs	r2, r5
 8001546:	08f9      	lsrs	r1, r7, #3
 8001548:	0743      	lsls	r3, r0, #29
 800154a:	4319      	orrs	r1, r3
 800154c:	0f4b      	lsrs	r3, r1, #29
 800154e:	00c9      	lsls	r1, r1, #3
 8001550:	075b      	lsls	r3, r3, #29
 8001552:	08c9      	lsrs	r1, r1, #3
 8001554:	4319      	orrs	r1, r3
 8001556:	0013      	movs	r3, r2
 8001558:	e62c      	b.n	80011b4 <__aeabi_dadd+0x294>
 800155a:	4641      	mov	r1, r8
 800155c:	4329      	orrs	r1, r5
 800155e:	d000      	beq.n	8001562 <__aeabi_dadd+0x642>
 8001560:	e5fa      	b.n	8001158 <__aeabi_dadd+0x238>
 8001562:	2300      	movs	r3, #0
 8001564:	000a      	movs	r2, r1
 8001566:	2400      	movs	r4, #0
 8001568:	e602      	b.n	8001170 <__aeabi_dadd+0x250>
 800156a:	076b      	lsls	r3, r5, #29
 800156c:	08f9      	lsrs	r1, r7, #3
 800156e:	4319      	orrs	r1, r3
 8001570:	08eb      	lsrs	r3, r5, #3
 8001572:	e5fd      	b.n	8001170 <__aeabi_dadd+0x250>
 8001574:	4663      	mov	r3, ip
 8001576:	08f9      	lsrs	r1, r7, #3
 8001578:	075b      	lsls	r3, r3, #29
 800157a:	4319      	orrs	r1, r3
 800157c:	4663      	mov	r3, ip
 800157e:	0004      	movs	r4, r0
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	e617      	b.n	80011b4 <__aeabi_dadd+0x294>
 8001584:	003d      	movs	r5, r7
 8001586:	444d      	add	r5, r9
 8001588:	4463      	add	r3, ip
 800158a:	454d      	cmp	r5, r9
 800158c:	4189      	sbcs	r1, r1
 800158e:	4698      	mov	r8, r3
 8001590:	4249      	negs	r1, r1
 8001592:	4488      	add	r8, r1
 8001594:	4643      	mov	r3, r8
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	d400      	bmi.n	800159c <__aeabi_dadd+0x67c>
 800159a:	e5dd      	b.n	8001158 <__aeabi_dadd+0x238>
 800159c:	4642      	mov	r2, r8
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <__aeabi_dadd+0x6d0>)
 80015a0:	2601      	movs	r6, #1
 80015a2:	401a      	ands	r2, r3
 80015a4:	4690      	mov	r8, r2
 80015a6:	e5d7      	b.n	8001158 <__aeabi_dadd+0x238>
 80015a8:	0010      	movs	r0, r2
 80015aa:	001e      	movs	r6, r3
 80015ac:	3820      	subs	r0, #32
 80015ae:	40c6      	lsrs	r6, r0
 80015b0:	2a20      	cmp	r2, #32
 80015b2:	d005      	beq.n	80015c0 <__aeabi_dadd+0x6a0>
 80015b4:	2040      	movs	r0, #64	; 0x40
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	4093      	lsls	r3, r2
 80015ba:	464a      	mov	r2, r9
 80015bc:	431a      	orrs	r2, r3
 80015be:	4691      	mov	r9, r2
 80015c0:	464d      	mov	r5, r9
 80015c2:	1e6b      	subs	r3, r5, #1
 80015c4:	419d      	sbcs	r5, r3
 80015c6:	4335      	orrs	r5, r6
 80015c8:	e621      	b.n	800120e <__aeabi_dadd+0x2ee>
 80015ca:	0002      	movs	r2, r0
 80015cc:	2300      	movs	r3, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	e540      	b.n	8001054 <__aeabi_dadd+0x134>
 80015d2:	464a      	mov	r2, r9
 80015d4:	19d5      	adds	r5, r2, r7
 80015d6:	42bd      	cmp	r5, r7
 80015d8:	4189      	sbcs	r1, r1
 80015da:	4463      	add	r3, ip
 80015dc:	4698      	mov	r8, r3
 80015de:	4249      	negs	r1, r1
 80015e0:	4488      	add	r8, r1
 80015e2:	e5b3      	b.n	800114c <__aeabi_dadd+0x22c>
 80015e4:	2100      	movs	r1, #0
 80015e6:	4a01      	ldr	r2, [pc, #4]	; (80015ec <__aeabi_dadd+0x6cc>)
 80015e8:	000b      	movs	r3, r1
 80015ea:	e533      	b.n	8001054 <__aeabi_dadd+0x134>
 80015ec:	000007ff 	.word	0x000007ff
 80015f0:	ff7fffff 	.word	0xff7fffff

080015f4 <__aeabi_ddiv>:
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	4657      	mov	r7, sl
 80015f8:	464e      	mov	r6, r9
 80015fa:	4645      	mov	r5, r8
 80015fc:	46de      	mov	lr, fp
 80015fe:	b5e0      	push	{r5, r6, r7, lr}
 8001600:	4681      	mov	r9, r0
 8001602:	0005      	movs	r5, r0
 8001604:	030c      	lsls	r4, r1, #12
 8001606:	0048      	lsls	r0, r1, #1
 8001608:	4692      	mov	sl, r2
 800160a:	001f      	movs	r7, r3
 800160c:	b085      	sub	sp, #20
 800160e:	0b24      	lsrs	r4, r4, #12
 8001610:	0d40      	lsrs	r0, r0, #21
 8001612:	0fce      	lsrs	r6, r1, #31
 8001614:	2800      	cmp	r0, #0
 8001616:	d059      	beq.n	80016cc <__aeabi_ddiv+0xd8>
 8001618:	4b87      	ldr	r3, [pc, #540]	; (8001838 <__aeabi_ddiv+0x244>)
 800161a:	4298      	cmp	r0, r3
 800161c:	d100      	bne.n	8001620 <__aeabi_ddiv+0x2c>
 800161e:	e098      	b.n	8001752 <__aeabi_ddiv+0x15e>
 8001620:	0f6b      	lsrs	r3, r5, #29
 8001622:	00e4      	lsls	r4, r4, #3
 8001624:	431c      	orrs	r4, r3
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	4323      	orrs	r3, r4
 800162c:	4698      	mov	r8, r3
 800162e:	4b83      	ldr	r3, [pc, #524]	; (800183c <__aeabi_ddiv+0x248>)
 8001630:	00ed      	lsls	r5, r5, #3
 8001632:	469b      	mov	fp, r3
 8001634:	2300      	movs	r3, #0
 8001636:	4699      	mov	r9, r3
 8001638:	4483      	add	fp, r0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	033c      	lsls	r4, r7, #12
 800163e:	007b      	lsls	r3, r7, #1
 8001640:	4650      	mov	r0, sl
 8001642:	0b24      	lsrs	r4, r4, #12
 8001644:	0d5b      	lsrs	r3, r3, #21
 8001646:	0fff      	lsrs	r7, r7, #31
 8001648:	2b00      	cmp	r3, #0
 800164a:	d067      	beq.n	800171c <__aeabi_ddiv+0x128>
 800164c:	4a7a      	ldr	r2, [pc, #488]	; (8001838 <__aeabi_ddiv+0x244>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d018      	beq.n	8001684 <__aeabi_ddiv+0x90>
 8001652:	497a      	ldr	r1, [pc, #488]	; (800183c <__aeabi_ddiv+0x248>)
 8001654:	0f42      	lsrs	r2, r0, #29
 8001656:	468c      	mov	ip, r1
 8001658:	00e4      	lsls	r4, r4, #3
 800165a:	4659      	mov	r1, fp
 800165c:	4314      	orrs	r4, r2
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	4463      	add	r3, ip
 8001662:	0412      	lsls	r2, r2, #16
 8001664:	1acb      	subs	r3, r1, r3
 8001666:	4314      	orrs	r4, r2
 8001668:	469b      	mov	fp, r3
 800166a:	00c2      	lsls	r2, r0, #3
 800166c:	2000      	movs	r0, #0
 800166e:	0033      	movs	r3, r6
 8001670:	407b      	eors	r3, r7
 8001672:	469a      	mov	sl, r3
 8001674:	464b      	mov	r3, r9
 8001676:	2b0f      	cmp	r3, #15
 8001678:	d900      	bls.n	800167c <__aeabi_ddiv+0x88>
 800167a:	e0ef      	b.n	800185c <__aeabi_ddiv+0x268>
 800167c:	4970      	ldr	r1, [pc, #448]	; (8001840 <__aeabi_ddiv+0x24c>)
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	58cb      	ldr	r3, [r1, r3]
 8001682:	469f      	mov	pc, r3
 8001684:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <__aeabi_ddiv+0x250>)
 8001686:	4652      	mov	r2, sl
 8001688:	469c      	mov	ip, r3
 800168a:	4322      	orrs	r2, r4
 800168c:	44e3      	add	fp, ip
 800168e:	2a00      	cmp	r2, #0
 8001690:	d000      	beq.n	8001694 <__aeabi_ddiv+0xa0>
 8001692:	e095      	b.n	80017c0 <__aeabi_ddiv+0x1cc>
 8001694:	4649      	mov	r1, r9
 8001696:	2302      	movs	r3, #2
 8001698:	4319      	orrs	r1, r3
 800169a:	4689      	mov	r9, r1
 800169c:	2400      	movs	r4, #0
 800169e:	2002      	movs	r0, #2
 80016a0:	e7e5      	b.n	800166e <__aeabi_ddiv+0x7a>
 80016a2:	2300      	movs	r3, #0
 80016a4:	2400      	movs	r4, #0
 80016a6:	2500      	movs	r5, #0
 80016a8:	4652      	mov	r2, sl
 80016aa:	051b      	lsls	r3, r3, #20
 80016ac:	4323      	orrs	r3, r4
 80016ae:	07d2      	lsls	r2, r2, #31
 80016b0:	4313      	orrs	r3, r2
 80016b2:	0028      	movs	r0, r5
 80016b4:	0019      	movs	r1, r3
 80016b6:	b005      	add	sp, #20
 80016b8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ba:	46bb      	mov	fp, r7
 80016bc:	46b2      	mov	sl, r6
 80016be:	46a9      	mov	r9, r5
 80016c0:	46a0      	mov	r8, r4
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	2400      	movs	r4, #0
 80016c6:	2500      	movs	r5, #0
 80016c8:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <__aeabi_ddiv+0x244>)
 80016ca:	e7ed      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 80016cc:	464b      	mov	r3, r9
 80016ce:	4323      	orrs	r3, r4
 80016d0:	4698      	mov	r8, r3
 80016d2:	d100      	bne.n	80016d6 <__aeabi_ddiv+0xe2>
 80016d4:	e089      	b.n	80017ea <__aeabi_ddiv+0x1f6>
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d100      	bne.n	80016dc <__aeabi_ddiv+0xe8>
 80016da:	e1e0      	b.n	8001a9e <__aeabi_ddiv+0x4aa>
 80016dc:	0020      	movs	r0, r4
 80016de:	f001 fa37 	bl	8002b50 <__clzsi2>
 80016e2:	0001      	movs	r1, r0
 80016e4:	0002      	movs	r2, r0
 80016e6:	390b      	subs	r1, #11
 80016e8:	231d      	movs	r3, #29
 80016ea:	1a5b      	subs	r3, r3, r1
 80016ec:	4649      	mov	r1, r9
 80016ee:	0010      	movs	r0, r2
 80016f0:	40d9      	lsrs	r1, r3
 80016f2:	3808      	subs	r0, #8
 80016f4:	4084      	lsls	r4, r0
 80016f6:	000b      	movs	r3, r1
 80016f8:	464d      	mov	r5, r9
 80016fa:	4323      	orrs	r3, r4
 80016fc:	4698      	mov	r8, r3
 80016fe:	4085      	lsls	r5, r0
 8001700:	4851      	ldr	r0, [pc, #324]	; (8001848 <__aeabi_ddiv+0x254>)
 8001702:	033c      	lsls	r4, r7, #12
 8001704:	1a83      	subs	r3, r0, r2
 8001706:	469b      	mov	fp, r3
 8001708:	2300      	movs	r3, #0
 800170a:	4699      	mov	r9, r3
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	007b      	lsls	r3, r7, #1
 8001710:	4650      	mov	r0, sl
 8001712:	0b24      	lsrs	r4, r4, #12
 8001714:	0d5b      	lsrs	r3, r3, #21
 8001716:	0fff      	lsrs	r7, r7, #31
 8001718:	2b00      	cmp	r3, #0
 800171a:	d197      	bne.n	800164c <__aeabi_ddiv+0x58>
 800171c:	4652      	mov	r2, sl
 800171e:	4322      	orrs	r2, r4
 8001720:	d055      	beq.n	80017ce <__aeabi_ddiv+0x1da>
 8001722:	2c00      	cmp	r4, #0
 8001724:	d100      	bne.n	8001728 <__aeabi_ddiv+0x134>
 8001726:	e1ca      	b.n	8001abe <__aeabi_ddiv+0x4ca>
 8001728:	0020      	movs	r0, r4
 800172a:	f001 fa11 	bl	8002b50 <__clzsi2>
 800172e:	0002      	movs	r2, r0
 8001730:	3a0b      	subs	r2, #11
 8001732:	231d      	movs	r3, #29
 8001734:	0001      	movs	r1, r0
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	4652      	mov	r2, sl
 800173a:	3908      	subs	r1, #8
 800173c:	40da      	lsrs	r2, r3
 800173e:	408c      	lsls	r4, r1
 8001740:	4314      	orrs	r4, r2
 8001742:	4652      	mov	r2, sl
 8001744:	408a      	lsls	r2, r1
 8001746:	4b41      	ldr	r3, [pc, #260]	; (800184c <__aeabi_ddiv+0x258>)
 8001748:	4458      	add	r0, fp
 800174a:	469b      	mov	fp, r3
 800174c:	4483      	add	fp, r0
 800174e:	2000      	movs	r0, #0
 8001750:	e78d      	b.n	800166e <__aeabi_ddiv+0x7a>
 8001752:	464b      	mov	r3, r9
 8001754:	4323      	orrs	r3, r4
 8001756:	4698      	mov	r8, r3
 8001758:	d140      	bne.n	80017dc <__aeabi_ddiv+0x1e8>
 800175a:	2308      	movs	r3, #8
 800175c:	4699      	mov	r9, r3
 800175e:	3b06      	subs	r3, #6
 8001760:	2500      	movs	r5, #0
 8001762:	4683      	mov	fp, r0
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	e769      	b.n	800163c <__aeabi_ddiv+0x48>
 8001768:	46b2      	mov	sl, r6
 800176a:	9b00      	ldr	r3, [sp, #0]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d0a9      	beq.n	80016c4 <__aeabi_ddiv+0xd0>
 8001770:	2b03      	cmp	r3, #3
 8001772:	d100      	bne.n	8001776 <__aeabi_ddiv+0x182>
 8001774:	e211      	b.n	8001b9a <__aeabi_ddiv+0x5a6>
 8001776:	2b01      	cmp	r3, #1
 8001778:	d093      	beq.n	80016a2 <__aeabi_ddiv+0xae>
 800177a:	4a35      	ldr	r2, [pc, #212]	; (8001850 <__aeabi_ddiv+0x25c>)
 800177c:	445a      	add	r2, fp
 800177e:	2a00      	cmp	r2, #0
 8001780:	dc00      	bgt.n	8001784 <__aeabi_ddiv+0x190>
 8001782:	e13c      	b.n	80019fe <__aeabi_ddiv+0x40a>
 8001784:	076b      	lsls	r3, r5, #29
 8001786:	d000      	beq.n	800178a <__aeabi_ddiv+0x196>
 8001788:	e1a7      	b.n	8001ada <__aeabi_ddiv+0x4e6>
 800178a:	08ed      	lsrs	r5, r5, #3
 800178c:	4643      	mov	r3, r8
 800178e:	01db      	lsls	r3, r3, #7
 8001790:	d506      	bpl.n	80017a0 <__aeabi_ddiv+0x1ac>
 8001792:	4642      	mov	r2, r8
 8001794:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <__aeabi_ddiv+0x260>)
 8001796:	401a      	ands	r2, r3
 8001798:	4690      	mov	r8, r2
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	00d2      	lsls	r2, r2, #3
 800179e:	445a      	add	r2, fp
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <__aeabi_ddiv+0x264>)
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dc8e      	bgt.n	80016c4 <__aeabi_ddiv+0xd0>
 80017a6:	4643      	mov	r3, r8
 80017a8:	0552      	lsls	r2, r2, #21
 80017aa:	0758      	lsls	r0, r3, #29
 80017ac:	025c      	lsls	r4, r3, #9
 80017ae:	4305      	orrs	r5, r0
 80017b0:	0b24      	lsrs	r4, r4, #12
 80017b2:	0d53      	lsrs	r3, r2, #21
 80017b4:	e778      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 80017b6:	46ba      	mov	sl, r7
 80017b8:	46a0      	mov	r8, r4
 80017ba:	0015      	movs	r5, r2
 80017bc:	9000      	str	r0, [sp, #0]
 80017be:	e7d4      	b.n	800176a <__aeabi_ddiv+0x176>
 80017c0:	464a      	mov	r2, r9
 80017c2:	2303      	movs	r3, #3
 80017c4:	431a      	orrs	r2, r3
 80017c6:	4691      	mov	r9, r2
 80017c8:	2003      	movs	r0, #3
 80017ca:	4652      	mov	r2, sl
 80017cc:	e74f      	b.n	800166e <__aeabi_ddiv+0x7a>
 80017ce:	4649      	mov	r1, r9
 80017d0:	2301      	movs	r3, #1
 80017d2:	4319      	orrs	r1, r3
 80017d4:	4689      	mov	r9, r1
 80017d6:	2400      	movs	r4, #0
 80017d8:	2001      	movs	r0, #1
 80017da:	e748      	b.n	800166e <__aeabi_ddiv+0x7a>
 80017dc:	230c      	movs	r3, #12
 80017de:	4699      	mov	r9, r3
 80017e0:	3b09      	subs	r3, #9
 80017e2:	46a0      	mov	r8, r4
 80017e4:	4683      	mov	fp, r0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	e728      	b.n	800163c <__aeabi_ddiv+0x48>
 80017ea:	2304      	movs	r3, #4
 80017ec:	4699      	mov	r9, r3
 80017ee:	2300      	movs	r3, #0
 80017f0:	469b      	mov	fp, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	2500      	movs	r5, #0
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	e720      	b.n	800163c <__aeabi_ddiv+0x48>
 80017fa:	2300      	movs	r3, #0
 80017fc:	2480      	movs	r4, #128	; 0x80
 80017fe:	469a      	mov	sl, r3
 8001800:	2500      	movs	r5, #0
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <__aeabi_ddiv+0x244>)
 8001804:	0324      	lsls	r4, r4, #12
 8001806:	e74f      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	4641      	mov	r1, r8
 800180c:	031b      	lsls	r3, r3, #12
 800180e:	4219      	tst	r1, r3
 8001810:	d008      	beq.n	8001824 <__aeabi_ddiv+0x230>
 8001812:	421c      	tst	r4, r3
 8001814:	d106      	bne.n	8001824 <__aeabi_ddiv+0x230>
 8001816:	431c      	orrs	r4, r3
 8001818:	0324      	lsls	r4, r4, #12
 800181a:	46ba      	mov	sl, r7
 800181c:	0015      	movs	r5, r2
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <__aeabi_ddiv+0x244>)
 8001820:	0b24      	lsrs	r4, r4, #12
 8001822:	e741      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001824:	2480      	movs	r4, #128	; 0x80
 8001826:	4643      	mov	r3, r8
 8001828:	0324      	lsls	r4, r4, #12
 800182a:	431c      	orrs	r4, r3
 800182c:	0324      	lsls	r4, r4, #12
 800182e:	46b2      	mov	sl, r6
 8001830:	4b01      	ldr	r3, [pc, #4]	; (8001838 <__aeabi_ddiv+0x244>)
 8001832:	0b24      	lsrs	r4, r4, #12
 8001834:	e738      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	000007ff 	.word	0x000007ff
 800183c:	fffffc01 	.word	0xfffffc01
 8001840:	0800a130 	.word	0x0800a130
 8001844:	fffff801 	.word	0xfffff801
 8001848:	fffffc0d 	.word	0xfffffc0d
 800184c:	000003f3 	.word	0x000003f3
 8001850:	000003ff 	.word	0x000003ff
 8001854:	feffffff 	.word	0xfeffffff
 8001858:	000007fe 	.word	0x000007fe
 800185c:	4544      	cmp	r4, r8
 800185e:	d200      	bcs.n	8001862 <__aeabi_ddiv+0x26e>
 8001860:	e116      	b.n	8001a90 <__aeabi_ddiv+0x49c>
 8001862:	d100      	bne.n	8001866 <__aeabi_ddiv+0x272>
 8001864:	e111      	b.n	8001a8a <__aeabi_ddiv+0x496>
 8001866:	2301      	movs	r3, #1
 8001868:	425b      	negs	r3, r3
 800186a:	469c      	mov	ip, r3
 800186c:	002e      	movs	r6, r5
 800186e:	4640      	mov	r0, r8
 8001870:	2500      	movs	r5, #0
 8001872:	44e3      	add	fp, ip
 8001874:	0223      	lsls	r3, r4, #8
 8001876:	0e14      	lsrs	r4, r2, #24
 8001878:	431c      	orrs	r4, r3
 800187a:	0c1b      	lsrs	r3, r3, #16
 800187c:	4699      	mov	r9, r3
 800187e:	0423      	lsls	r3, r4, #16
 8001880:	0c1f      	lsrs	r7, r3, #16
 8001882:	0212      	lsls	r2, r2, #8
 8001884:	4649      	mov	r1, r9
 8001886:	9200      	str	r2, [sp, #0]
 8001888:	9701      	str	r7, [sp, #4]
 800188a:	f7fe fcdf 	bl	800024c <__aeabi_uidivmod>
 800188e:	0002      	movs	r2, r0
 8001890:	437a      	muls	r2, r7
 8001892:	040b      	lsls	r3, r1, #16
 8001894:	0c31      	lsrs	r1, r6, #16
 8001896:	4680      	mov	r8, r0
 8001898:	4319      	orrs	r1, r3
 800189a:	428a      	cmp	r2, r1
 800189c:	d90b      	bls.n	80018b6 <__aeabi_ddiv+0x2c2>
 800189e:	2301      	movs	r3, #1
 80018a0:	425b      	negs	r3, r3
 80018a2:	469c      	mov	ip, r3
 80018a4:	1909      	adds	r1, r1, r4
 80018a6:	44e0      	add	r8, ip
 80018a8:	428c      	cmp	r4, r1
 80018aa:	d804      	bhi.n	80018b6 <__aeabi_ddiv+0x2c2>
 80018ac:	428a      	cmp	r2, r1
 80018ae:	d902      	bls.n	80018b6 <__aeabi_ddiv+0x2c2>
 80018b0:	1e83      	subs	r3, r0, #2
 80018b2:	4698      	mov	r8, r3
 80018b4:	1909      	adds	r1, r1, r4
 80018b6:	1a88      	subs	r0, r1, r2
 80018b8:	4649      	mov	r1, r9
 80018ba:	f7fe fcc7 	bl	800024c <__aeabi_uidivmod>
 80018be:	0409      	lsls	r1, r1, #16
 80018c0:	468c      	mov	ip, r1
 80018c2:	0431      	lsls	r1, r6, #16
 80018c4:	4666      	mov	r6, ip
 80018c6:	9a01      	ldr	r2, [sp, #4]
 80018c8:	0c09      	lsrs	r1, r1, #16
 80018ca:	4342      	muls	r2, r0
 80018cc:	0003      	movs	r3, r0
 80018ce:	4331      	orrs	r1, r6
 80018d0:	428a      	cmp	r2, r1
 80018d2:	d904      	bls.n	80018de <__aeabi_ddiv+0x2ea>
 80018d4:	1909      	adds	r1, r1, r4
 80018d6:	3b01      	subs	r3, #1
 80018d8:	428c      	cmp	r4, r1
 80018da:	d800      	bhi.n	80018de <__aeabi_ddiv+0x2ea>
 80018dc:	e111      	b.n	8001b02 <__aeabi_ddiv+0x50e>
 80018de:	1a89      	subs	r1, r1, r2
 80018e0:	4642      	mov	r2, r8
 80018e2:	9e00      	ldr	r6, [sp, #0]
 80018e4:	0412      	lsls	r2, r2, #16
 80018e6:	431a      	orrs	r2, r3
 80018e8:	0c33      	lsrs	r3, r6, #16
 80018ea:	001f      	movs	r7, r3
 80018ec:	0c10      	lsrs	r0, r2, #16
 80018ee:	4690      	mov	r8, r2
 80018f0:	9302      	str	r3, [sp, #8]
 80018f2:	0413      	lsls	r3, r2, #16
 80018f4:	0432      	lsls	r2, r6, #16
 80018f6:	0c16      	lsrs	r6, r2, #16
 80018f8:	0032      	movs	r2, r6
 80018fa:	0c1b      	lsrs	r3, r3, #16
 80018fc:	435a      	muls	r2, r3
 80018fe:	9603      	str	r6, [sp, #12]
 8001900:	437b      	muls	r3, r7
 8001902:	4346      	muls	r6, r0
 8001904:	4378      	muls	r0, r7
 8001906:	0c17      	lsrs	r7, r2, #16
 8001908:	46bc      	mov	ip, r7
 800190a:	199b      	adds	r3, r3, r6
 800190c:	4463      	add	r3, ip
 800190e:	429e      	cmp	r6, r3
 8001910:	d903      	bls.n	800191a <__aeabi_ddiv+0x326>
 8001912:	2680      	movs	r6, #128	; 0x80
 8001914:	0276      	lsls	r6, r6, #9
 8001916:	46b4      	mov	ip, r6
 8001918:	4460      	add	r0, ip
 800191a:	0c1e      	lsrs	r6, r3, #16
 800191c:	1830      	adds	r0, r6, r0
 800191e:	0416      	lsls	r6, r2, #16
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	0c36      	lsrs	r6, r6, #16
 8001924:	199e      	adds	r6, r3, r6
 8001926:	4281      	cmp	r1, r0
 8001928:	d200      	bcs.n	800192c <__aeabi_ddiv+0x338>
 800192a:	e09c      	b.n	8001a66 <__aeabi_ddiv+0x472>
 800192c:	d100      	bne.n	8001930 <__aeabi_ddiv+0x33c>
 800192e:	e097      	b.n	8001a60 <__aeabi_ddiv+0x46c>
 8001930:	1bae      	subs	r6, r5, r6
 8001932:	1a09      	subs	r1, r1, r0
 8001934:	42b5      	cmp	r5, r6
 8001936:	4180      	sbcs	r0, r0
 8001938:	4240      	negs	r0, r0
 800193a:	1a08      	subs	r0, r1, r0
 800193c:	4284      	cmp	r4, r0
 800193e:	d100      	bne.n	8001942 <__aeabi_ddiv+0x34e>
 8001940:	e111      	b.n	8001b66 <__aeabi_ddiv+0x572>
 8001942:	4649      	mov	r1, r9
 8001944:	f7fe fc82 	bl	800024c <__aeabi_uidivmod>
 8001948:	9a01      	ldr	r2, [sp, #4]
 800194a:	040b      	lsls	r3, r1, #16
 800194c:	4342      	muls	r2, r0
 800194e:	0c31      	lsrs	r1, r6, #16
 8001950:	0005      	movs	r5, r0
 8001952:	4319      	orrs	r1, r3
 8001954:	428a      	cmp	r2, r1
 8001956:	d907      	bls.n	8001968 <__aeabi_ddiv+0x374>
 8001958:	1909      	adds	r1, r1, r4
 800195a:	3d01      	subs	r5, #1
 800195c:	428c      	cmp	r4, r1
 800195e:	d803      	bhi.n	8001968 <__aeabi_ddiv+0x374>
 8001960:	428a      	cmp	r2, r1
 8001962:	d901      	bls.n	8001968 <__aeabi_ddiv+0x374>
 8001964:	1e85      	subs	r5, r0, #2
 8001966:	1909      	adds	r1, r1, r4
 8001968:	1a88      	subs	r0, r1, r2
 800196a:	4649      	mov	r1, r9
 800196c:	f7fe fc6e 	bl	800024c <__aeabi_uidivmod>
 8001970:	0409      	lsls	r1, r1, #16
 8001972:	468c      	mov	ip, r1
 8001974:	0431      	lsls	r1, r6, #16
 8001976:	4666      	mov	r6, ip
 8001978:	9a01      	ldr	r2, [sp, #4]
 800197a:	0c09      	lsrs	r1, r1, #16
 800197c:	4342      	muls	r2, r0
 800197e:	0003      	movs	r3, r0
 8001980:	4331      	orrs	r1, r6
 8001982:	428a      	cmp	r2, r1
 8001984:	d907      	bls.n	8001996 <__aeabi_ddiv+0x3a2>
 8001986:	1909      	adds	r1, r1, r4
 8001988:	3b01      	subs	r3, #1
 800198a:	428c      	cmp	r4, r1
 800198c:	d803      	bhi.n	8001996 <__aeabi_ddiv+0x3a2>
 800198e:	428a      	cmp	r2, r1
 8001990:	d901      	bls.n	8001996 <__aeabi_ddiv+0x3a2>
 8001992:	1e83      	subs	r3, r0, #2
 8001994:	1909      	adds	r1, r1, r4
 8001996:	9e03      	ldr	r6, [sp, #12]
 8001998:	1a89      	subs	r1, r1, r2
 800199a:	0032      	movs	r2, r6
 800199c:	042d      	lsls	r5, r5, #16
 800199e:	431d      	orrs	r5, r3
 80019a0:	9f02      	ldr	r7, [sp, #8]
 80019a2:	042b      	lsls	r3, r5, #16
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	435a      	muls	r2, r3
 80019a8:	437b      	muls	r3, r7
 80019aa:	469c      	mov	ip, r3
 80019ac:	0c28      	lsrs	r0, r5, #16
 80019ae:	4346      	muls	r6, r0
 80019b0:	0c13      	lsrs	r3, r2, #16
 80019b2:	44b4      	add	ip, r6
 80019b4:	4463      	add	r3, ip
 80019b6:	4378      	muls	r0, r7
 80019b8:	429e      	cmp	r6, r3
 80019ba:	d903      	bls.n	80019c4 <__aeabi_ddiv+0x3d0>
 80019bc:	2680      	movs	r6, #128	; 0x80
 80019be:	0276      	lsls	r6, r6, #9
 80019c0:	46b4      	mov	ip, r6
 80019c2:	4460      	add	r0, ip
 80019c4:	0c1e      	lsrs	r6, r3, #16
 80019c6:	0412      	lsls	r2, r2, #16
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	0c12      	lsrs	r2, r2, #16
 80019cc:	1830      	adds	r0, r6, r0
 80019ce:	189b      	adds	r3, r3, r2
 80019d0:	4281      	cmp	r1, r0
 80019d2:	d306      	bcc.n	80019e2 <__aeabi_ddiv+0x3ee>
 80019d4:	d002      	beq.n	80019dc <__aeabi_ddiv+0x3e8>
 80019d6:	2301      	movs	r3, #1
 80019d8:	431d      	orrs	r5, r3
 80019da:	e6ce      	b.n	800177a <__aeabi_ddiv+0x186>
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d100      	bne.n	80019e2 <__aeabi_ddiv+0x3ee>
 80019e0:	e6cb      	b.n	800177a <__aeabi_ddiv+0x186>
 80019e2:	1861      	adds	r1, r4, r1
 80019e4:	1e6e      	subs	r6, r5, #1
 80019e6:	42a1      	cmp	r1, r4
 80019e8:	d200      	bcs.n	80019ec <__aeabi_ddiv+0x3f8>
 80019ea:	e0a4      	b.n	8001b36 <__aeabi_ddiv+0x542>
 80019ec:	4281      	cmp	r1, r0
 80019ee:	d200      	bcs.n	80019f2 <__aeabi_ddiv+0x3fe>
 80019f0:	e0c9      	b.n	8001b86 <__aeabi_ddiv+0x592>
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0x402>
 80019f4:	e0d9      	b.n	8001baa <__aeabi_ddiv+0x5b6>
 80019f6:	0035      	movs	r5, r6
 80019f8:	e7ed      	b.n	80019d6 <__aeabi_ddiv+0x3e2>
 80019fa:	2501      	movs	r5, #1
 80019fc:	426d      	negs	r5, r5
 80019fe:	2101      	movs	r1, #1
 8001a00:	1a89      	subs	r1, r1, r2
 8001a02:	2938      	cmp	r1, #56	; 0x38
 8001a04:	dd00      	ble.n	8001a08 <__aeabi_ddiv+0x414>
 8001a06:	e64c      	b.n	80016a2 <__aeabi_ddiv+0xae>
 8001a08:	291f      	cmp	r1, #31
 8001a0a:	dc00      	bgt.n	8001a0e <__aeabi_ddiv+0x41a>
 8001a0c:	e07f      	b.n	8001b0e <__aeabi_ddiv+0x51a>
 8001a0e:	231f      	movs	r3, #31
 8001a10:	425b      	negs	r3, r3
 8001a12:	1a9a      	subs	r2, r3, r2
 8001a14:	4643      	mov	r3, r8
 8001a16:	40d3      	lsrs	r3, r2
 8001a18:	2920      	cmp	r1, #32
 8001a1a:	d004      	beq.n	8001a26 <__aeabi_ddiv+0x432>
 8001a1c:	4644      	mov	r4, r8
 8001a1e:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <__aeabi_ddiv+0x5c0>)
 8001a20:	445a      	add	r2, fp
 8001a22:	4094      	lsls	r4, r2
 8001a24:	4325      	orrs	r5, r4
 8001a26:	1e6a      	subs	r2, r5, #1
 8001a28:	4195      	sbcs	r5, r2
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	432b      	orrs	r3, r5
 8001a2e:	0015      	movs	r5, r2
 8001a30:	2400      	movs	r4, #0
 8001a32:	401d      	ands	r5, r3
 8001a34:	421a      	tst	r2, r3
 8001a36:	d100      	bne.n	8001a3a <__aeabi_ddiv+0x446>
 8001a38:	e0a1      	b.n	8001b7e <__aeabi_ddiv+0x58a>
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	401a      	ands	r2, r3
 8001a40:	2a04      	cmp	r2, #4
 8001a42:	d100      	bne.n	8001a46 <__aeabi_ddiv+0x452>
 8001a44:	e098      	b.n	8001b78 <__aeabi_ddiv+0x584>
 8001a46:	1d1a      	adds	r2, r3, #4
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	419b      	sbcs	r3, r3
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	18e4      	adds	r4, r4, r3
 8001a50:	0013      	movs	r3, r2
 8001a52:	0222      	lsls	r2, r4, #8
 8001a54:	d400      	bmi.n	8001a58 <__aeabi_ddiv+0x464>
 8001a56:	e08f      	b.n	8001b78 <__aeabi_ddiv+0x584>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2400      	movs	r4, #0
 8001a5c:	2500      	movs	r5, #0
 8001a5e:	e623      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001a60:	42b5      	cmp	r5, r6
 8001a62:	d300      	bcc.n	8001a66 <__aeabi_ddiv+0x472>
 8001a64:	e764      	b.n	8001930 <__aeabi_ddiv+0x33c>
 8001a66:	4643      	mov	r3, r8
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	9b00      	ldr	r3, [sp, #0]
 8001a6c:	469c      	mov	ip, r3
 8001a6e:	4465      	add	r5, ip
 8001a70:	001f      	movs	r7, r3
 8001a72:	429d      	cmp	r5, r3
 8001a74:	419b      	sbcs	r3, r3
 8001a76:	425b      	negs	r3, r3
 8001a78:	191b      	adds	r3, r3, r4
 8001a7a:	18c9      	adds	r1, r1, r3
 8001a7c:	428c      	cmp	r4, r1
 8001a7e:	d23a      	bcs.n	8001af6 <__aeabi_ddiv+0x502>
 8001a80:	4288      	cmp	r0, r1
 8001a82:	d863      	bhi.n	8001b4c <__aeabi_ddiv+0x558>
 8001a84:	d060      	beq.n	8001b48 <__aeabi_ddiv+0x554>
 8001a86:	4690      	mov	r8, r2
 8001a88:	e752      	b.n	8001930 <__aeabi_ddiv+0x33c>
 8001a8a:	42aa      	cmp	r2, r5
 8001a8c:	d900      	bls.n	8001a90 <__aeabi_ddiv+0x49c>
 8001a8e:	e6ea      	b.n	8001866 <__aeabi_ddiv+0x272>
 8001a90:	4643      	mov	r3, r8
 8001a92:	07de      	lsls	r6, r3, #31
 8001a94:	0858      	lsrs	r0, r3, #1
 8001a96:	086b      	lsrs	r3, r5, #1
 8001a98:	431e      	orrs	r6, r3
 8001a9a:	07ed      	lsls	r5, r5, #31
 8001a9c:	e6ea      	b.n	8001874 <__aeabi_ddiv+0x280>
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	f001 f856 	bl	8002b50 <__clzsi2>
 8001aa4:	0001      	movs	r1, r0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	3115      	adds	r1, #21
 8001aaa:	3220      	adds	r2, #32
 8001aac:	291c      	cmp	r1, #28
 8001aae:	dc00      	bgt.n	8001ab2 <__aeabi_ddiv+0x4be>
 8001ab0:	e61a      	b.n	80016e8 <__aeabi_ddiv+0xf4>
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	3808      	subs	r0, #8
 8001ab6:	4083      	lsls	r3, r0
 8001ab8:	2500      	movs	r5, #0
 8001aba:	4698      	mov	r8, r3
 8001abc:	e620      	b.n	8001700 <__aeabi_ddiv+0x10c>
 8001abe:	f001 f847 	bl	8002b50 <__clzsi2>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	3215      	adds	r2, #21
 8001ac8:	3020      	adds	r0, #32
 8001aca:	2a1c      	cmp	r2, #28
 8001acc:	dc00      	bgt.n	8001ad0 <__aeabi_ddiv+0x4dc>
 8001ace:	e630      	b.n	8001732 <__aeabi_ddiv+0x13e>
 8001ad0:	4654      	mov	r4, sl
 8001ad2:	3b08      	subs	r3, #8
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	409c      	lsls	r4, r3
 8001ad8:	e635      	b.n	8001746 <__aeabi_ddiv+0x152>
 8001ada:	230f      	movs	r3, #15
 8001adc:	402b      	ands	r3, r5
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_ddiv+0x4f0>
 8001ae2:	e652      	b.n	800178a <__aeabi_ddiv+0x196>
 8001ae4:	2305      	movs	r3, #5
 8001ae6:	425b      	negs	r3, r3
 8001ae8:	42ab      	cmp	r3, r5
 8001aea:	419b      	sbcs	r3, r3
 8001aec:	3504      	adds	r5, #4
 8001aee:	425b      	negs	r3, r3
 8001af0:	08ed      	lsrs	r5, r5, #3
 8001af2:	4498      	add	r8, r3
 8001af4:	e64a      	b.n	800178c <__aeabi_ddiv+0x198>
 8001af6:	428c      	cmp	r4, r1
 8001af8:	d1c5      	bne.n	8001a86 <__aeabi_ddiv+0x492>
 8001afa:	42af      	cmp	r7, r5
 8001afc:	d9c0      	bls.n	8001a80 <__aeabi_ddiv+0x48c>
 8001afe:	4690      	mov	r8, r2
 8001b00:	e716      	b.n	8001930 <__aeabi_ddiv+0x33c>
 8001b02:	428a      	cmp	r2, r1
 8001b04:	d800      	bhi.n	8001b08 <__aeabi_ddiv+0x514>
 8001b06:	e6ea      	b.n	80018de <__aeabi_ddiv+0x2ea>
 8001b08:	1e83      	subs	r3, r0, #2
 8001b0a:	1909      	adds	r1, r1, r4
 8001b0c:	e6e7      	b.n	80018de <__aeabi_ddiv+0x2ea>
 8001b0e:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <__aeabi_ddiv+0x5c4>)
 8001b10:	0028      	movs	r0, r5
 8001b12:	445a      	add	r2, fp
 8001b14:	4643      	mov	r3, r8
 8001b16:	4095      	lsls	r5, r2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	40c8      	lsrs	r0, r1
 8001b1c:	1e6a      	subs	r2, r5, #1
 8001b1e:	4195      	sbcs	r5, r2
 8001b20:	4644      	mov	r4, r8
 8001b22:	4303      	orrs	r3, r0
 8001b24:	432b      	orrs	r3, r5
 8001b26:	40cc      	lsrs	r4, r1
 8001b28:	075a      	lsls	r2, r3, #29
 8001b2a:	d092      	beq.n	8001a52 <__aeabi_ddiv+0x45e>
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	401a      	ands	r2, r3
 8001b30:	2a04      	cmp	r2, #4
 8001b32:	d188      	bne.n	8001a46 <__aeabi_ddiv+0x452>
 8001b34:	e78d      	b.n	8001a52 <__aeabi_ddiv+0x45e>
 8001b36:	0035      	movs	r5, r6
 8001b38:	4281      	cmp	r1, r0
 8001b3a:	d000      	beq.n	8001b3e <__aeabi_ddiv+0x54a>
 8001b3c:	e74b      	b.n	80019d6 <__aeabi_ddiv+0x3e2>
 8001b3e:	9a00      	ldr	r2, [sp, #0]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d000      	beq.n	8001b46 <__aeabi_ddiv+0x552>
 8001b44:	e747      	b.n	80019d6 <__aeabi_ddiv+0x3e2>
 8001b46:	e618      	b.n	800177a <__aeabi_ddiv+0x186>
 8001b48:	42ae      	cmp	r6, r5
 8001b4a:	d99c      	bls.n	8001a86 <__aeabi_ddiv+0x492>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	425b      	negs	r3, r3
 8001b50:	469c      	mov	ip, r3
 8001b52:	9b00      	ldr	r3, [sp, #0]
 8001b54:	44e0      	add	r8, ip
 8001b56:	469c      	mov	ip, r3
 8001b58:	4465      	add	r5, ip
 8001b5a:	429d      	cmp	r5, r3
 8001b5c:	419b      	sbcs	r3, r3
 8001b5e:	425b      	negs	r3, r3
 8001b60:	191b      	adds	r3, r3, r4
 8001b62:	18c9      	adds	r1, r1, r3
 8001b64:	e6e4      	b.n	8001930 <__aeabi_ddiv+0x33c>
 8001b66:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <__aeabi_ddiv+0x5c8>)
 8001b68:	445a      	add	r2, fp
 8001b6a:	2a00      	cmp	r2, #0
 8001b6c:	dc00      	bgt.n	8001b70 <__aeabi_ddiv+0x57c>
 8001b6e:	e744      	b.n	80019fa <__aeabi_ddiv+0x406>
 8001b70:	2301      	movs	r3, #1
 8001b72:	2500      	movs	r5, #0
 8001b74:	4498      	add	r8, r3
 8001b76:	e609      	b.n	800178c <__aeabi_ddiv+0x198>
 8001b78:	0765      	lsls	r5, r4, #29
 8001b7a:	0264      	lsls	r4, r4, #9
 8001b7c:	0b24      	lsrs	r4, r4, #12
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	431d      	orrs	r5, r3
 8001b82:	2300      	movs	r3, #0
 8001b84:	e590      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001b86:	9e00      	ldr	r6, [sp, #0]
 8001b88:	3d02      	subs	r5, #2
 8001b8a:	0072      	lsls	r2, r6, #1
 8001b8c:	42b2      	cmp	r2, r6
 8001b8e:	41bf      	sbcs	r7, r7
 8001b90:	427f      	negs	r7, r7
 8001b92:	193c      	adds	r4, r7, r4
 8001b94:	1909      	adds	r1, r1, r4
 8001b96:	9200      	str	r2, [sp, #0]
 8001b98:	e7ce      	b.n	8001b38 <__aeabi_ddiv+0x544>
 8001b9a:	2480      	movs	r4, #128	; 0x80
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	0324      	lsls	r4, r4, #12
 8001ba0:	431c      	orrs	r4, r3
 8001ba2:	0324      	lsls	r4, r4, #12
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <__aeabi_ddiv+0x5cc>)
 8001ba6:	0b24      	lsrs	r4, r4, #12
 8001ba8:	e57e      	b.n	80016a8 <__aeabi_ddiv+0xb4>
 8001baa:	9a00      	ldr	r2, [sp, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d3ea      	bcc.n	8001b86 <__aeabi_ddiv+0x592>
 8001bb0:	0035      	movs	r5, r6
 8001bb2:	e7c4      	b.n	8001b3e <__aeabi_ddiv+0x54a>
 8001bb4:	0000043e 	.word	0x0000043e
 8001bb8:	0000041e 	.word	0x0000041e
 8001bbc:	000003ff 	.word	0x000003ff
 8001bc0:	000007ff 	.word	0x000007ff

08001bc4 <__eqdf2>:
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	464f      	mov	r7, r9
 8001bc8:	4646      	mov	r6, r8
 8001bca:	46d6      	mov	lr, sl
 8001bcc:	4694      	mov	ip, r2
 8001bce:	4691      	mov	r9, r2
 8001bd0:	031a      	lsls	r2, r3, #12
 8001bd2:	0b12      	lsrs	r2, r2, #12
 8001bd4:	4d18      	ldr	r5, [pc, #96]	; (8001c38 <__eqdf2+0x74>)
 8001bd6:	b5c0      	push	{r6, r7, lr}
 8001bd8:	004c      	lsls	r4, r1, #1
 8001bda:	030f      	lsls	r7, r1, #12
 8001bdc:	4692      	mov	sl, r2
 8001bde:	005a      	lsls	r2, r3, #1
 8001be0:	0006      	movs	r6, r0
 8001be2:	4680      	mov	r8, r0
 8001be4:	0b3f      	lsrs	r7, r7, #12
 8001be6:	2001      	movs	r0, #1
 8001be8:	0d64      	lsrs	r4, r4, #21
 8001bea:	0fc9      	lsrs	r1, r1, #31
 8001bec:	0d52      	lsrs	r2, r2, #21
 8001bee:	0fdb      	lsrs	r3, r3, #31
 8001bf0:	42ac      	cmp	r4, r5
 8001bf2:	d00a      	beq.n	8001c0a <__eqdf2+0x46>
 8001bf4:	42aa      	cmp	r2, r5
 8001bf6:	d003      	beq.n	8001c00 <__eqdf2+0x3c>
 8001bf8:	4294      	cmp	r4, r2
 8001bfa:	d101      	bne.n	8001c00 <__eqdf2+0x3c>
 8001bfc:	4557      	cmp	r7, sl
 8001bfe:	d00d      	beq.n	8001c1c <__eqdf2+0x58>
 8001c00:	bce0      	pop	{r5, r6, r7}
 8001c02:	46ba      	mov	sl, r7
 8001c04:	46b1      	mov	r9, r6
 8001c06:	46a8      	mov	r8, r5
 8001c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c0a:	003d      	movs	r5, r7
 8001c0c:	4335      	orrs	r5, r6
 8001c0e:	d1f7      	bne.n	8001c00 <__eqdf2+0x3c>
 8001c10:	42a2      	cmp	r2, r4
 8001c12:	d1f5      	bne.n	8001c00 <__eqdf2+0x3c>
 8001c14:	4652      	mov	r2, sl
 8001c16:	4665      	mov	r5, ip
 8001c18:	432a      	orrs	r2, r5
 8001c1a:	d1f1      	bne.n	8001c00 <__eqdf2+0x3c>
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	45c8      	cmp	r8, r9
 8001c20:	d1ee      	bne.n	8001c00 <__eqdf2+0x3c>
 8001c22:	4299      	cmp	r1, r3
 8001c24:	d006      	beq.n	8001c34 <__eqdf2+0x70>
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	d1ea      	bne.n	8001c00 <__eqdf2+0x3c>
 8001c2a:	433e      	orrs	r6, r7
 8001c2c:	0030      	movs	r0, r6
 8001c2e:	1e46      	subs	r6, r0, #1
 8001c30:	41b0      	sbcs	r0, r6
 8001c32:	e7e5      	b.n	8001c00 <__eqdf2+0x3c>
 8001c34:	2000      	movs	r0, #0
 8001c36:	e7e3      	b.n	8001c00 <__eqdf2+0x3c>
 8001c38:	000007ff 	.word	0x000007ff

08001c3c <__gedf2>:
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	464e      	mov	r6, r9
 8001c40:	4645      	mov	r5, r8
 8001c42:	4657      	mov	r7, sl
 8001c44:	46de      	mov	lr, fp
 8001c46:	0004      	movs	r4, r0
 8001c48:	0018      	movs	r0, r3
 8001c4a:	b5e0      	push	{r5, r6, r7, lr}
 8001c4c:	0016      	movs	r6, r2
 8001c4e:	031b      	lsls	r3, r3, #12
 8001c50:	0b1b      	lsrs	r3, r3, #12
 8001c52:	4d32      	ldr	r5, [pc, #200]	; (8001d1c <__gedf2+0xe0>)
 8001c54:	030f      	lsls	r7, r1, #12
 8001c56:	004a      	lsls	r2, r1, #1
 8001c58:	4699      	mov	r9, r3
 8001c5a:	0043      	lsls	r3, r0, #1
 8001c5c:	46a4      	mov	ip, r4
 8001c5e:	46b0      	mov	r8, r6
 8001c60:	0b3f      	lsrs	r7, r7, #12
 8001c62:	0d52      	lsrs	r2, r2, #21
 8001c64:	0fc9      	lsrs	r1, r1, #31
 8001c66:	0d5b      	lsrs	r3, r3, #21
 8001c68:	0fc0      	lsrs	r0, r0, #31
 8001c6a:	42aa      	cmp	r2, r5
 8001c6c:	d029      	beq.n	8001cc2 <__gedf2+0x86>
 8001c6e:	42ab      	cmp	r3, r5
 8001c70:	d018      	beq.n	8001ca4 <__gedf2+0x68>
 8001c72:	2a00      	cmp	r2, #0
 8001c74:	d12a      	bne.n	8001ccc <__gedf2+0x90>
 8001c76:	433c      	orrs	r4, r7
 8001c78:	46a3      	mov	fp, r4
 8001c7a:	4265      	negs	r5, r4
 8001c7c:	4165      	adcs	r5, r4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d102      	bne.n	8001c88 <__gedf2+0x4c>
 8001c82:	464c      	mov	r4, r9
 8001c84:	4326      	orrs	r6, r4
 8001c86:	d027      	beq.n	8001cd8 <__gedf2+0x9c>
 8001c88:	2d00      	cmp	r5, #0
 8001c8a:	d115      	bne.n	8001cb8 <__gedf2+0x7c>
 8001c8c:	4281      	cmp	r1, r0
 8001c8e:	d028      	beq.n	8001ce2 <__gedf2+0xa6>
 8001c90:	2002      	movs	r0, #2
 8001c92:	3901      	subs	r1, #1
 8001c94:	4008      	ands	r0, r1
 8001c96:	3801      	subs	r0, #1
 8001c98:	bcf0      	pop	{r4, r5, r6, r7}
 8001c9a:	46bb      	mov	fp, r7
 8001c9c:	46b2      	mov	sl, r6
 8001c9e:	46a9      	mov	r9, r5
 8001ca0:	46a0      	mov	r8, r4
 8001ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca4:	464d      	mov	r5, r9
 8001ca6:	432e      	orrs	r6, r5
 8001ca8:	d12f      	bne.n	8001d0a <__gedf2+0xce>
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d1ee      	bne.n	8001c8c <__gedf2+0x50>
 8001cae:	433c      	orrs	r4, r7
 8001cb0:	4265      	negs	r5, r4
 8001cb2:	4165      	adcs	r5, r4
 8001cb4:	2d00      	cmp	r5, #0
 8001cb6:	d0e9      	beq.n	8001c8c <__gedf2+0x50>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d1ed      	bne.n	8001c98 <__gedf2+0x5c>
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	4240      	negs	r0, r0
 8001cc0:	e7ea      	b.n	8001c98 <__gedf2+0x5c>
 8001cc2:	003d      	movs	r5, r7
 8001cc4:	4325      	orrs	r5, r4
 8001cc6:	d120      	bne.n	8001d0a <__gedf2+0xce>
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d0eb      	beq.n	8001ca4 <__gedf2+0x68>
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1dd      	bne.n	8001c8c <__gedf2+0x50>
 8001cd0:	464c      	mov	r4, r9
 8001cd2:	4326      	orrs	r6, r4
 8001cd4:	d1da      	bne.n	8001c8c <__gedf2+0x50>
 8001cd6:	e7db      	b.n	8001c90 <__gedf2+0x54>
 8001cd8:	465b      	mov	r3, fp
 8001cda:	2000      	movs	r0, #0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0db      	beq.n	8001c98 <__gedf2+0x5c>
 8001ce0:	e7d6      	b.n	8001c90 <__gedf2+0x54>
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dc0a      	bgt.n	8001cfc <__gedf2+0xc0>
 8001ce6:	dbe7      	blt.n	8001cb8 <__gedf2+0x7c>
 8001ce8:	454f      	cmp	r7, r9
 8001cea:	d8d1      	bhi.n	8001c90 <__gedf2+0x54>
 8001cec:	d010      	beq.n	8001d10 <__gedf2+0xd4>
 8001cee:	2000      	movs	r0, #0
 8001cf0:	454f      	cmp	r7, r9
 8001cf2:	d2d1      	bcs.n	8001c98 <__gedf2+0x5c>
 8001cf4:	2900      	cmp	r1, #0
 8001cf6:	d0e1      	beq.n	8001cbc <__gedf2+0x80>
 8001cf8:	0008      	movs	r0, r1
 8001cfa:	e7cd      	b.n	8001c98 <__gedf2+0x5c>
 8001cfc:	4243      	negs	r3, r0
 8001cfe:	4158      	adcs	r0, r3
 8001d00:	2302      	movs	r3, #2
 8001d02:	4240      	negs	r0, r0
 8001d04:	4018      	ands	r0, r3
 8001d06:	3801      	subs	r0, #1
 8001d08:	e7c6      	b.n	8001c98 <__gedf2+0x5c>
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	4240      	negs	r0, r0
 8001d0e:	e7c3      	b.n	8001c98 <__gedf2+0x5c>
 8001d10:	45c4      	cmp	ip, r8
 8001d12:	d8bd      	bhi.n	8001c90 <__gedf2+0x54>
 8001d14:	2000      	movs	r0, #0
 8001d16:	45c4      	cmp	ip, r8
 8001d18:	d2be      	bcs.n	8001c98 <__gedf2+0x5c>
 8001d1a:	e7eb      	b.n	8001cf4 <__gedf2+0xb8>
 8001d1c:	000007ff 	.word	0x000007ff

08001d20 <__ledf2>:
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	464e      	mov	r6, r9
 8001d24:	4645      	mov	r5, r8
 8001d26:	4657      	mov	r7, sl
 8001d28:	46de      	mov	lr, fp
 8001d2a:	0004      	movs	r4, r0
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	b5e0      	push	{r5, r6, r7, lr}
 8001d30:	0016      	movs	r6, r2
 8001d32:	031b      	lsls	r3, r3, #12
 8001d34:	0b1b      	lsrs	r3, r3, #12
 8001d36:	4d31      	ldr	r5, [pc, #196]	; (8001dfc <__ledf2+0xdc>)
 8001d38:	030f      	lsls	r7, r1, #12
 8001d3a:	004a      	lsls	r2, r1, #1
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	0043      	lsls	r3, r0, #1
 8001d40:	46a4      	mov	ip, r4
 8001d42:	46b0      	mov	r8, r6
 8001d44:	0b3f      	lsrs	r7, r7, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0fc9      	lsrs	r1, r1, #31
 8001d4a:	0d5b      	lsrs	r3, r3, #21
 8001d4c:	0fc0      	lsrs	r0, r0, #31
 8001d4e:	42aa      	cmp	r2, r5
 8001d50:	d011      	beq.n	8001d76 <__ledf2+0x56>
 8001d52:	42ab      	cmp	r3, r5
 8001d54:	d014      	beq.n	8001d80 <__ledf2+0x60>
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	d12f      	bne.n	8001dba <__ledf2+0x9a>
 8001d5a:	433c      	orrs	r4, r7
 8001d5c:	46a3      	mov	fp, r4
 8001d5e:	4265      	negs	r5, r4
 8001d60:	4165      	adcs	r5, r4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d114      	bne.n	8001d90 <__ledf2+0x70>
 8001d66:	464c      	mov	r4, r9
 8001d68:	4326      	orrs	r6, r4
 8001d6a:	d111      	bne.n	8001d90 <__ledf2+0x70>
 8001d6c:	465b      	mov	r3, fp
 8001d6e:	2000      	movs	r0, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d017      	beq.n	8001da4 <__ledf2+0x84>
 8001d74:	e010      	b.n	8001d98 <__ledf2+0x78>
 8001d76:	003d      	movs	r5, r7
 8001d78:	4325      	orrs	r5, r4
 8001d7a:	d112      	bne.n	8001da2 <__ledf2+0x82>
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d11c      	bne.n	8001dba <__ledf2+0x9a>
 8001d80:	464d      	mov	r5, r9
 8001d82:	432e      	orrs	r6, r5
 8001d84:	d10d      	bne.n	8001da2 <__ledf2+0x82>
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	d104      	bne.n	8001d94 <__ledf2+0x74>
 8001d8a:	433c      	orrs	r4, r7
 8001d8c:	4265      	negs	r5, r4
 8001d8e:	4165      	adcs	r5, r4
 8001d90:	2d00      	cmp	r5, #0
 8001d92:	d10d      	bne.n	8001db0 <__ledf2+0x90>
 8001d94:	4281      	cmp	r1, r0
 8001d96:	d016      	beq.n	8001dc6 <__ledf2+0xa6>
 8001d98:	2002      	movs	r0, #2
 8001d9a:	3901      	subs	r1, #1
 8001d9c:	4008      	ands	r0, r1
 8001d9e:	3801      	subs	r0, #1
 8001da0:	e000      	b.n	8001da4 <__ledf2+0x84>
 8001da2:	2002      	movs	r0, #2
 8001da4:	bcf0      	pop	{r4, r5, r6, r7}
 8001da6:	46bb      	mov	fp, r7
 8001da8:	46b2      	mov	sl, r6
 8001daa:	46a9      	mov	r9, r5
 8001dac:	46a0      	mov	r8, r4
 8001dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d1f7      	bne.n	8001da4 <__ledf2+0x84>
 8001db4:	2001      	movs	r0, #1
 8001db6:	4240      	negs	r0, r0
 8001db8:	e7f4      	b.n	8001da4 <__ledf2+0x84>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ea      	bne.n	8001d94 <__ledf2+0x74>
 8001dbe:	464c      	mov	r4, r9
 8001dc0:	4326      	orrs	r6, r4
 8001dc2:	d1e7      	bne.n	8001d94 <__ledf2+0x74>
 8001dc4:	e7e8      	b.n	8001d98 <__ledf2+0x78>
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dd06      	ble.n	8001dd8 <__ledf2+0xb8>
 8001dca:	4243      	negs	r3, r0
 8001dcc:	4158      	adcs	r0, r3
 8001dce:	2302      	movs	r3, #2
 8001dd0:	4240      	negs	r0, r0
 8001dd2:	4018      	ands	r0, r3
 8001dd4:	3801      	subs	r0, #1
 8001dd6:	e7e5      	b.n	8001da4 <__ledf2+0x84>
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbe9      	blt.n	8001db0 <__ledf2+0x90>
 8001ddc:	454f      	cmp	r7, r9
 8001dde:	d8db      	bhi.n	8001d98 <__ledf2+0x78>
 8001de0:	d006      	beq.n	8001df0 <__ledf2+0xd0>
 8001de2:	2000      	movs	r0, #0
 8001de4:	454f      	cmp	r7, r9
 8001de6:	d2dd      	bcs.n	8001da4 <__ledf2+0x84>
 8001de8:	2900      	cmp	r1, #0
 8001dea:	d0e3      	beq.n	8001db4 <__ledf2+0x94>
 8001dec:	0008      	movs	r0, r1
 8001dee:	e7d9      	b.n	8001da4 <__ledf2+0x84>
 8001df0:	45c4      	cmp	ip, r8
 8001df2:	d8d1      	bhi.n	8001d98 <__ledf2+0x78>
 8001df4:	2000      	movs	r0, #0
 8001df6:	45c4      	cmp	ip, r8
 8001df8:	d2d4      	bcs.n	8001da4 <__ledf2+0x84>
 8001dfa:	e7f5      	b.n	8001de8 <__ledf2+0xc8>
 8001dfc:	000007ff 	.word	0x000007ff

08001e00 <__aeabi_dmul>:
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	4657      	mov	r7, sl
 8001e04:	464e      	mov	r6, r9
 8001e06:	4645      	mov	r5, r8
 8001e08:	46de      	mov	lr, fp
 8001e0a:	b5e0      	push	{r5, r6, r7, lr}
 8001e0c:	4698      	mov	r8, r3
 8001e0e:	030c      	lsls	r4, r1, #12
 8001e10:	004b      	lsls	r3, r1, #1
 8001e12:	0006      	movs	r6, r0
 8001e14:	4692      	mov	sl, r2
 8001e16:	b087      	sub	sp, #28
 8001e18:	0b24      	lsrs	r4, r4, #12
 8001e1a:	0d5b      	lsrs	r3, r3, #21
 8001e1c:	0fcf      	lsrs	r7, r1, #31
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d06c      	beq.n	8001efc <__aeabi_dmul+0xfc>
 8001e22:	4add      	ldr	r2, [pc, #884]	; (8002198 <__aeabi_dmul+0x398>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dmul+0x2a>
 8001e28:	e086      	b.n	8001f38 <__aeabi_dmul+0x138>
 8001e2a:	0f42      	lsrs	r2, r0, #29
 8001e2c:	00e4      	lsls	r4, r4, #3
 8001e2e:	4314      	orrs	r4, r2
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0412      	lsls	r2, r2, #16
 8001e34:	4314      	orrs	r4, r2
 8001e36:	4ad9      	ldr	r2, [pc, #868]	; (800219c <__aeabi_dmul+0x39c>)
 8001e38:	00c5      	lsls	r5, r0, #3
 8001e3a:	4694      	mov	ip, r2
 8001e3c:	4463      	add	r3, ip
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2300      	movs	r3, #0
 8001e42:	4699      	mov	r9, r3
 8001e44:	469b      	mov	fp, r3
 8001e46:	4643      	mov	r3, r8
 8001e48:	4642      	mov	r2, r8
 8001e4a:	031e      	lsls	r6, r3, #12
 8001e4c:	0fd2      	lsrs	r2, r2, #31
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4650      	mov	r0, sl
 8001e52:	4690      	mov	r8, r2
 8001e54:	0b36      	lsrs	r6, r6, #12
 8001e56:	0d5b      	lsrs	r3, r3, #21
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dmul+0x5c>
 8001e5a:	e078      	b.n	8001f4e <__aeabi_dmul+0x14e>
 8001e5c:	4ace      	ldr	r2, [pc, #824]	; (8002198 <__aeabi_dmul+0x398>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01d      	beq.n	8001e9e <__aeabi_dmul+0x9e>
 8001e62:	49ce      	ldr	r1, [pc, #824]	; (800219c <__aeabi_dmul+0x39c>)
 8001e64:	0f42      	lsrs	r2, r0, #29
 8001e66:	468c      	mov	ip, r1
 8001e68:	9900      	ldr	r1, [sp, #0]
 8001e6a:	4463      	add	r3, ip
 8001e6c:	00f6      	lsls	r6, r6, #3
 8001e6e:	468c      	mov	ip, r1
 8001e70:	4316      	orrs	r6, r2
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	449c      	add	ip, r3
 8001e76:	0412      	lsls	r2, r2, #16
 8001e78:	4663      	mov	r3, ip
 8001e7a:	4316      	orrs	r6, r2
 8001e7c:	00c2      	lsls	r2, r0, #3
 8001e7e:	2000      	movs	r0, #0
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	9900      	ldr	r1, [sp, #0]
 8001e84:	4643      	mov	r3, r8
 8001e86:	3101      	adds	r1, #1
 8001e88:	468c      	mov	ip, r1
 8001e8a:	4649      	mov	r1, r9
 8001e8c:	407b      	eors	r3, r7
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	290f      	cmp	r1, #15
 8001e92:	d900      	bls.n	8001e96 <__aeabi_dmul+0x96>
 8001e94:	e07e      	b.n	8001f94 <__aeabi_dmul+0x194>
 8001e96:	4bc2      	ldr	r3, [pc, #776]	; (80021a0 <__aeabi_dmul+0x3a0>)
 8001e98:	0089      	lsls	r1, r1, #2
 8001e9a:	5859      	ldr	r1, [r3, r1]
 8001e9c:	468f      	mov	pc, r1
 8001e9e:	4652      	mov	r2, sl
 8001ea0:	9b00      	ldr	r3, [sp, #0]
 8001ea2:	4332      	orrs	r2, r6
 8001ea4:	d000      	beq.n	8001ea8 <__aeabi_dmul+0xa8>
 8001ea6:	e156      	b.n	8002156 <__aeabi_dmul+0x356>
 8001ea8:	49bb      	ldr	r1, [pc, #748]	; (8002198 <__aeabi_dmul+0x398>)
 8001eaa:	2600      	movs	r6, #0
 8001eac:	468c      	mov	ip, r1
 8001eae:	4463      	add	r3, ip
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	4319      	orrs	r1, r3
 8001eb8:	4689      	mov	r9, r1
 8001eba:	2002      	movs	r0, #2
 8001ebc:	e7e1      	b.n	8001e82 <__aeabi_dmul+0x82>
 8001ebe:	4643      	mov	r3, r8
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	0034      	movs	r4, r6
 8001ec4:	0015      	movs	r5, r2
 8001ec6:	4683      	mov	fp, r0
 8001ec8:	465b      	mov	r3, fp
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d05e      	beq.n	8001f8c <__aeabi_dmul+0x18c>
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dmul+0xd4>
 8001ed2:	e1f3      	b.n	80022bc <__aeabi_dmul+0x4bc>
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d000      	beq.n	8001eda <__aeabi_dmul+0xda>
 8001ed8:	e118      	b.n	800210c <__aeabi_dmul+0x30c>
 8001eda:	2200      	movs	r2, #0
 8001edc:	2400      	movs	r4, #0
 8001ede:	2500      	movs	r5, #0
 8001ee0:	9b01      	ldr	r3, [sp, #4]
 8001ee2:	0512      	lsls	r2, r2, #20
 8001ee4:	4322      	orrs	r2, r4
 8001ee6:	07db      	lsls	r3, r3, #31
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	0028      	movs	r0, r5
 8001eec:	0011      	movs	r1, r2
 8001eee:	b007      	add	sp, #28
 8001ef0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ef2:	46bb      	mov	fp, r7
 8001ef4:	46b2      	mov	sl, r6
 8001ef6:	46a9      	mov	r9, r5
 8001ef8:	46a0      	mov	r8, r4
 8001efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efc:	0025      	movs	r5, r4
 8001efe:	4305      	orrs	r5, r0
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dmul+0x104>
 8001f02:	e141      	b.n	8002188 <__aeabi_dmul+0x388>
 8001f04:	2c00      	cmp	r4, #0
 8001f06:	d100      	bne.n	8001f0a <__aeabi_dmul+0x10a>
 8001f08:	e1ad      	b.n	8002266 <__aeabi_dmul+0x466>
 8001f0a:	0020      	movs	r0, r4
 8001f0c:	f000 fe20 	bl	8002b50 <__clzsi2>
 8001f10:	0001      	movs	r1, r0
 8001f12:	0002      	movs	r2, r0
 8001f14:	390b      	subs	r1, #11
 8001f16:	231d      	movs	r3, #29
 8001f18:	0010      	movs	r0, r2
 8001f1a:	1a5b      	subs	r3, r3, r1
 8001f1c:	0031      	movs	r1, r6
 8001f1e:	0035      	movs	r5, r6
 8001f20:	3808      	subs	r0, #8
 8001f22:	4084      	lsls	r4, r0
 8001f24:	40d9      	lsrs	r1, r3
 8001f26:	4085      	lsls	r5, r0
 8001f28:	430c      	orrs	r4, r1
 8001f2a:	489e      	ldr	r0, [pc, #632]	; (80021a4 <__aeabi_dmul+0x3a4>)
 8001f2c:	1a83      	subs	r3, r0, r2
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2300      	movs	r3, #0
 8001f32:	4699      	mov	r9, r3
 8001f34:	469b      	mov	fp, r3
 8001f36:	e786      	b.n	8001e46 <__aeabi_dmul+0x46>
 8001f38:	0005      	movs	r5, r0
 8001f3a:	4325      	orrs	r5, r4
 8001f3c:	d000      	beq.n	8001f40 <__aeabi_dmul+0x140>
 8001f3e:	e11c      	b.n	800217a <__aeabi_dmul+0x37a>
 8001f40:	2208      	movs	r2, #8
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2302      	movs	r3, #2
 8001f46:	2400      	movs	r4, #0
 8001f48:	4691      	mov	r9, r2
 8001f4a:	469b      	mov	fp, r3
 8001f4c:	e77b      	b.n	8001e46 <__aeabi_dmul+0x46>
 8001f4e:	4652      	mov	r2, sl
 8001f50:	4332      	orrs	r2, r6
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dmul+0x156>
 8001f54:	e10a      	b.n	800216c <__aeabi_dmul+0x36c>
 8001f56:	2e00      	cmp	r6, #0
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dmul+0x15c>
 8001f5a:	e176      	b.n	800224a <__aeabi_dmul+0x44a>
 8001f5c:	0030      	movs	r0, r6
 8001f5e:	f000 fdf7 	bl	8002b50 <__clzsi2>
 8001f62:	0002      	movs	r2, r0
 8001f64:	3a0b      	subs	r2, #11
 8001f66:	231d      	movs	r3, #29
 8001f68:	0001      	movs	r1, r0
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	4652      	mov	r2, sl
 8001f6e:	3908      	subs	r1, #8
 8001f70:	40da      	lsrs	r2, r3
 8001f72:	408e      	lsls	r6, r1
 8001f74:	4316      	orrs	r6, r2
 8001f76:	4652      	mov	r2, sl
 8001f78:	408a      	lsls	r2, r1
 8001f7a:	9b00      	ldr	r3, [sp, #0]
 8001f7c:	4989      	ldr	r1, [pc, #548]	; (80021a4 <__aeabi_dmul+0x3a4>)
 8001f7e:	1a18      	subs	r0, r3, r0
 8001f80:	0003      	movs	r3, r0
 8001f82:	468c      	mov	ip, r1
 8001f84:	4463      	add	r3, ip
 8001f86:	2000      	movs	r0, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	e77a      	b.n	8001e82 <__aeabi_dmul+0x82>
 8001f8c:	2400      	movs	r4, #0
 8001f8e:	2500      	movs	r5, #0
 8001f90:	4a81      	ldr	r2, [pc, #516]	; (8002198 <__aeabi_dmul+0x398>)
 8001f92:	e7a5      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 8001f94:	0c2f      	lsrs	r7, r5, #16
 8001f96:	042d      	lsls	r5, r5, #16
 8001f98:	0c2d      	lsrs	r5, r5, #16
 8001f9a:	002b      	movs	r3, r5
 8001f9c:	0c11      	lsrs	r1, r2, #16
 8001f9e:	0412      	lsls	r2, r2, #16
 8001fa0:	0c12      	lsrs	r2, r2, #16
 8001fa2:	4353      	muls	r3, r2
 8001fa4:	4698      	mov	r8, r3
 8001fa6:	0013      	movs	r3, r2
 8001fa8:	0028      	movs	r0, r5
 8001faa:	437b      	muls	r3, r7
 8001fac:	4699      	mov	r9, r3
 8001fae:	4348      	muls	r0, r1
 8001fb0:	4448      	add	r0, r9
 8001fb2:	4683      	mov	fp, r0
 8001fb4:	4640      	mov	r0, r8
 8001fb6:	000b      	movs	r3, r1
 8001fb8:	0c00      	lsrs	r0, r0, #16
 8001fba:	4682      	mov	sl, r0
 8001fbc:	4658      	mov	r0, fp
 8001fbe:	437b      	muls	r3, r7
 8001fc0:	4450      	add	r0, sl
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	4581      	cmp	r9, r0
 8001fc6:	d906      	bls.n	8001fd6 <__aeabi_dmul+0x1d6>
 8001fc8:	469a      	mov	sl, r3
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	025b      	lsls	r3, r3, #9
 8001fce:	4699      	mov	r9, r3
 8001fd0:	44ca      	add	sl, r9
 8001fd2:	4653      	mov	r3, sl
 8001fd4:	9302      	str	r3, [sp, #8]
 8001fd6:	0c03      	lsrs	r3, r0, #16
 8001fd8:	469b      	mov	fp, r3
 8001fda:	4643      	mov	r3, r8
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	0400      	lsls	r0, r0, #16
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	4698      	mov	r8, r3
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	4443      	add	r3, r8
 8001fe8:	9304      	str	r3, [sp, #16]
 8001fea:	0c33      	lsrs	r3, r6, #16
 8001fec:	4699      	mov	r9, r3
 8001fee:	002b      	movs	r3, r5
 8001ff0:	0436      	lsls	r6, r6, #16
 8001ff2:	0c36      	lsrs	r6, r6, #16
 8001ff4:	4373      	muls	r3, r6
 8001ff6:	4698      	mov	r8, r3
 8001ff8:	0033      	movs	r3, r6
 8001ffa:	437b      	muls	r3, r7
 8001ffc:	469a      	mov	sl, r3
 8001ffe:	464b      	mov	r3, r9
 8002000:	435d      	muls	r5, r3
 8002002:	435f      	muls	r7, r3
 8002004:	4643      	mov	r3, r8
 8002006:	4455      	add	r5, sl
 8002008:	0c18      	lsrs	r0, r3, #16
 800200a:	1940      	adds	r0, r0, r5
 800200c:	4582      	cmp	sl, r0
 800200e:	d903      	bls.n	8002018 <__aeabi_dmul+0x218>
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	469a      	mov	sl, r3
 8002016:	4457      	add	r7, sl
 8002018:	0c05      	lsrs	r5, r0, #16
 800201a:	19eb      	adds	r3, r5, r7
 800201c:	9305      	str	r3, [sp, #20]
 800201e:	4643      	mov	r3, r8
 8002020:	041d      	lsls	r5, r3, #16
 8002022:	0c2d      	lsrs	r5, r5, #16
 8002024:	0400      	lsls	r0, r0, #16
 8002026:	1940      	adds	r0, r0, r5
 8002028:	0c25      	lsrs	r5, r4, #16
 800202a:	0424      	lsls	r4, r4, #16
 800202c:	0c24      	lsrs	r4, r4, #16
 800202e:	0027      	movs	r7, r4
 8002030:	4357      	muls	r7, r2
 8002032:	436a      	muls	r2, r5
 8002034:	4690      	mov	r8, r2
 8002036:	002a      	movs	r2, r5
 8002038:	0c3b      	lsrs	r3, r7, #16
 800203a:	469a      	mov	sl, r3
 800203c:	434a      	muls	r2, r1
 800203e:	4361      	muls	r1, r4
 8002040:	4441      	add	r1, r8
 8002042:	4451      	add	r1, sl
 8002044:	4483      	add	fp, r0
 8002046:	4588      	cmp	r8, r1
 8002048:	d903      	bls.n	8002052 <__aeabi_dmul+0x252>
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	025b      	lsls	r3, r3, #9
 800204e:	4698      	mov	r8, r3
 8002050:	4442      	add	r2, r8
 8002052:	043f      	lsls	r7, r7, #16
 8002054:	0c0b      	lsrs	r3, r1, #16
 8002056:	0c3f      	lsrs	r7, r7, #16
 8002058:	0409      	lsls	r1, r1, #16
 800205a:	19c9      	adds	r1, r1, r7
 800205c:	0027      	movs	r7, r4
 800205e:	4698      	mov	r8, r3
 8002060:	464b      	mov	r3, r9
 8002062:	4377      	muls	r7, r6
 8002064:	435c      	muls	r4, r3
 8002066:	436e      	muls	r6, r5
 8002068:	435d      	muls	r5, r3
 800206a:	0c3b      	lsrs	r3, r7, #16
 800206c:	4699      	mov	r9, r3
 800206e:	19a4      	adds	r4, r4, r6
 8002070:	444c      	add	r4, r9
 8002072:	4442      	add	r2, r8
 8002074:	9503      	str	r5, [sp, #12]
 8002076:	42a6      	cmp	r6, r4
 8002078:	d904      	bls.n	8002084 <__aeabi_dmul+0x284>
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	4698      	mov	r8, r3
 8002080:	4445      	add	r5, r8
 8002082:	9503      	str	r5, [sp, #12]
 8002084:	9b02      	ldr	r3, [sp, #8]
 8002086:	043f      	lsls	r7, r7, #16
 8002088:	445b      	add	r3, fp
 800208a:	001e      	movs	r6, r3
 800208c:	4283      	cmp	r3, r0
 800208e:	4180      	sbcs	r0, r0
 8002090:	0423      	lsls	r3, r4, #16
 8002092:	4698      	mov	r8, r3
 8002094:	9b05      	ldr	r3, [sp, #20]
 8002096:	0c3f      	lsrs	r7, r7, #16
 8002098:	4447      	add	r7, r8
 800209a:	4698      	mov	r8, r3
 800209c:	1876      	adds	r6, r6, r1
 800209e:	428e      	cmp	r6, r1
 80020a0:	4189      	sbcs	r1, r1
 80020a2:	4447      	add	r7, r8
 80020a4:	4240      	negs	r0, r0
 80020a6:	183d      	adds	r5, r7, r0
 80020a8:	46a8      	mov	r8, r5
 80020aa:	4693      	mov	fp, r2
 80020ac:	4249      	negs	r1, r1
 80020ae:	468a      	mov	sl, r1
 80020b0:	44c3      	add	fp, r8
 80020b2:	429f      	cmp	r7, r3
 80020b4:	41bf      	sbcs	r7, r7
 80020b6:	4580      	cmp	r8, r0
 80020b8:	4180      	sbcs	r0, r0
 80020ba:	9b03      	ldr	r3, [sp, #12]
 80020bc:	44da      	add	sl, fp
 80020be:	4698      	mov	r8, r3
 80020c0:	4653      	mov	r3, sl
 80020c2:	4240      	negs	r0, r0
 80020c4:	427f      	negs	r7, r7
 80020c6:	4307      	orrs	r7, r0
 80020c8:	0c24      	lsrs	r4, r4, #16
 80020ca:	4593      	cmp	fp, r2
 80020cc:	4192      	sbcs	r2, r2
 80020ce:	458a      	cmp	sl, r1
 80020d0:	4189      	sbcs	r1, r1
 80020d2:	193f      	adds	r7, r7, r4
 80020d4:	0ddc      	lsrs	r4, r3, #23
 80020d6:	9b04      	ldr	r3, [sp, #16]
 80020d8:	0275      	lsls	r5, r6, #9
 80020da:	431d      	orrs	r5, r3
 80020dc:	1e68      	subs	r0, r5, #1
 80020de:	4185      	sbcs	r5, r0
 80020e0:	4653      	mov	r3, sl
 80020e2:	4252      	negs	r2, r2
 80020e4:	4249      	negs	r1, r1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	18bf      	adds	r7, r7, r2
 80020ea:	4447      	add	r7, r8
 80020ec:	0df6      	lsrs	r6, r6, #23
 80020ee:	027f      	lsls	r7, r7, #9
 80020f0:	4335      	orrs	r5, r6
 80020f2:	025a      	lsls	r2, r3, #9
 80020f4:	433c      	orrs	r4, r7
 80020f6:	4315      	orrs	r5, r2
 80020f8:	01fb      	lsls	r3, r7, #7
 80020fa:	d400      	bmi.n	80020fe <__aeabi_dmul+0x2fe>
 80020fc:	e0c1      	b.n	8002282 <__aeabi_dmul+0x482>
 80020fe:	2101      	movs	r1, #1
 8002100:	086a      	lsrs	r2, r5, #1
 8002102:	400d      	ands	r5, r1
 8002104:	4315      	orrs	r5, r2
 8002106:	07e2      	lsls	r2, r4, #31
 8002108:	4315      	orrs	r5, r2
 800210a:	0864      	lsrs	r4, r4, #1
 800210c:	4926      	ldr	r1, [pc, #152]	; (80021a8 <__aeabi_dmul+0x3a8>)
 800210e:	4461      	add	r1, ip
 8002110:	2900      	cmp	r1, #0
 8002112:	dd56      	ble.n	80021c2 <__aeabi_dmul+0x3c2>
 8002114:	076b      	lsls	r3, r5, #29
 8002116:	d009      	beq.n	800212c <__aeabi_dmul+0x32c>
 8002118:	220f      	movs	r2, #15
 800211a:	402a      	ands	r2, r5
 800211c:	2a04      	cmp	r2, #4
 800211e:	d005      	beq.n	800212c <__aeabi_dmul+0x32c>
 8002120:	1d2a      	adds	r2, r5, #4
 8002122:	42aa      	cmp	r2, r5
 8002124:	41ad      	sbcs	r5, r5
 8002126:	426d      	negs	r5, r5
 8002128:	1964      	adds	r4, r4, r5
 800212a:	0015      	movs	r5, r2
 800212c:	01e3      	lsls	r3, r4, #7
 800212e:	d504      	bpl.n	800213a <__aeabi_dmul+0x33a>
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <__aeabi_dmul+0x3ac>)
 8002134:	00c9      	lsls	r1, r1, #3
 8002136:	4014      	ands	r4, r2
 8002138:	4461      	add	r1, ip
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <__aeabi_dmul+0x3b0>)
 800213c:	4291      	cmp	r1, r2
 800213e:	dd00      	ble.n	8002142 <__aeabi_dmul+0x342>
 8002140:	e724      	b.n	8001f8c <__aeabi_dmul+0x18c>
 8002142:	0762      	lsls	r2, r4, #29
 8002144:	08ed      	lsrs	r5, r5, #3
 8002146:	0264      	lsls	r4, r4, #9
 8002148:	0549      	lsls	r1, r1, #21
 800214a:	4315      	orrs	r5, r2
 800214c:	0b24      	lsrs	r4, r4, #12
 800214e:	0d4a      	lsrs	r2, r1, #21
 8002150:	e6c6      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 8002152:	9701      	str	r7, [sp, #4]
 8002154:	e6b8      	b.n	8001ec8 <__aeabi_dmul+0xc8>
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <__aeabi_dmul+0x398>)
 8002158:	2003      	movs	r0, #3
 800215a:	4694      	mov	ip, r2
 800215c:	4463      	add	r3, ip
 800215e:	464a      	mov	r2, r9
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2303      	movs	r3, #3
 8002164:	431a      	orrs	r2, r3
 8002166:	4691      	mov	r9, r2
 8002168:	4652      	mov	r2, sl
 800216a:	e68a      	b.n	8001e82 <__aeabi_dmul+0x82>
 800216c:	4649      	mov	r1, r9
 800216e:	2301      	movs	r3, #1
 8002170:	4319      	orrs	r1, r3
 8002172:	4689      	mov	r9, r1
 8002174:	2600      	movs	r6, #0
 8002176:	2001      	movs	r0, #1
 8002178:	e683      	b.n	8001e82 <__aeabi_dmul+0x82>
 800217a:	220c      	movs	r2, #12
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2303      	movs	r3, #3
 8002180:	0005      	movs	r5, r0
 8002182:	4691      	mov	r9, r2
 8002184:	469b      	mov	fp, r3
 8002186:	e65e      	b.n	8001e46 <__aeabi_dmul+0x46>
 8002188:	2304      	movs	r3, #4
 800218a:	4699      	mov	r9, r3
 800218c:	2300      	movs	r3, #0
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	2400      	movs	r4, #0
 8002194:	469b      	mov	fp, r3
 8002196:	e656      	b.n	8001e46 <__aeabi_dmul+0x46>
 8002198:	000007ff 	.word	0x000007ff
 800219c:	fffffc01 	.word	0xfffffc01
 80021a0:	0800a170 	.word	0x0800a170
 80021a4:	fffffc0d 	.word	0xfffffc0d
 80021a8:	000003ff 	.word	0x000003ff
 80021ac:	feffffff 	.word	0xfeffffff
 80021b0:	000007fe 	.word	0x000007fe
 80021b4:	2300      	movs	r3, #0
 80021b6:	2480      	movs	r4, #128	; 0x80
 80021b8:	2500      	movs	r5, #0
 80021ba:	4a44      	ldr	r2, [pc, #272]	; (80022cc <__aeabi_dmul+0x4cc>)
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	0324      	lsls	r4, r4, #12
 80021c0:	e68e      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 80021c2:	2001      	movs	r0, #1
 80021c4:	1a40      	subs	r0, r0, r1
 80021c6:	2838      	cmp	r0, #56	; 0x38
 80021c8:	dd00      	ble.n	80021cc <__aeabi_dmul+0x3cc>
 80021ca:	e686      	b.n	8001eda <__aeabi_dmul+0xda>
 80021cc:	281f      	cmp	r0, #31
 80021ce:	dd5b      	ble.n	8002288 <__aeabi_dmul+0x488>
 80021d0:	221f      	movs	r2, #31
 80021d2:	0023      	movs	r3, r4
 80021d4:	4252      	negs	r2, r2
 80021d6:	1a51      	subs	r1, r2, r1
 80021d8:	40cb      	lsrs	r3, r1
 80021da:	0019      	movs	r1, r3
 80021dc:	2820      	cmp	r0, #32
 80021de:	d003      	beq.n	80021e8 <__aeabi_dmul+0x3e8>
 80021e0:	4a3b      	ldr	r2, [pc, #236]	; (80022d0 <__aeabi_dmul+0x4d0>)
 80021e2:	4462      	add	r2, ip
 80021e4:	4094      	lsls	r4, r2
 80021e6:	4325      	orrs	r5, r4
 80021e8:	1e6a      	subs	r2, r5, #1
 80021ea:	4195      	sbcs	r5, r2
 80021ec:	002a      	movs	r2, r5
 80021ee:	430a      	orrs	r2, r1
 80021f0:	2107      	movs	r1, #7
 80021f2:	000d      	movs	r5, r1
 80021f4:	2400      	movs	r4, #0
 80021f6:	4015      	ands	r5, r2
 80021f8:	4211      	tst	r1, r2
 80021fa:	d05b      	beq.n	80022b4 <__aeabi_dmul+0x4b4>
 80021fc:	210f      	movs	r1, #15
 80021fe:	2400      	movs	r4, #0
 8002200:	4011      	ands	r1, r2
 8002202:	2904      	cmp	r1, #4
 8002204:	d053      	beq.n	80022ae <__aeabi_dmul+0x4ae>
 8002206:	1d11      	adds	r1, r2, #4
 8002208:	4291      	cmp	r1, r2
 800220a:	4192      	sbcs	r2, r2
 800220c:	4252      	negs	r2, r2
 800220e:	18a4      	adds	r4, r4, r2
 8002210:	000a      	movs	r2, r1
 8002212:	0223      	lsls	r3, r4, #8
 8002214:	d54b      	bpl.n	80022ae <__aeabi_dmul+0x4ae>
 8002216:	2201      	movs	r2, #1
 8002218:	2400      	movs	r4, #0
 800221a:	2500      	movs	r5, #0
 800221c:	e660      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	031b      	lsls	r3, r3, #12
 8002222:	421c      	tst	r4, r3
 8002224:	d009      	beq.n	800223a <__aeabi_dmul+0x43a>
 8002226:	421e      	tst	r6, r3
 8002228:	d107      	bne.n	800223a <__aeabi_dmul+0x43a>
 800222a:	4333      	orrs	r3, r6
 800222c:	031c      	lsls	r4, r3, #12
 800222e:	4643      	mov	r3, r8
 8002230:	0015      	movs	r5, r2
 8002232:	0b24      	lsrs	r4, r4, #12
 8002234:	4a25      	ldr	r2, [pc, #148]	; (80022cc <__aeabi_dmul+0x4cc>)
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	e652      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 800223a:	2280      	movs	r2, #128	; 0x80
 800223c:	0312      	lsls	r2, r2, #12
 800223e:	4314      	orrs	r4, r2
 8002240:	0324      	lsls	r4, r4, #12
 8002242:	4a22      	ldr	r2, [pc, #136]	; (80022cc <__aeabi_dmul+0x4cc>)
 8002244:	0b24      	lsrs	r4, r4, #12
 8002246:	9701      	str	r7, [sp, #4]
 8002248:	e64a      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 800224a:	f000 fc81 	bl	8002b50 <__clzsi2>
 800224e:	0003      	movs	r3, r0
 8002250:	001a      	movs	r2, r3
 8002252:	3215      	adds	r2, #21
 8002254:	3020      	adds	r0, #32
 8002256:	2a1c      	cmp	r2, #28
 8002258:	dc00      	bgt.n	800225c <__aeabi_dmul+0x45c>
 800225a:	e684      	b.n	8001f66 <__aeabi_dmul+0x166>
 800225c:	4656      	mov	r6, sl
 800225e:	3b08      	subs	r3, #8
 8002260:	2200      	movs	r2, #0
 8002262:	409e      	lsls	r6, r3
 8002264:	e689      	b.n	8001f7a <__aeabi_dmul+0x17a>
 8002266:	f000 fc73 	bl	8002b50 <__clzsi2>
 800226a:	0001      	movs	r1, r0
 800226c:	0002      	movs	r2, r0
 800226e:	3115      	adds	r1, #21
 8002270:	3220      	adds	r2, #32
 8002272:	291c      	cmp	r1, #28
 8002274:	dc00      	bgt.n	8002278 <__aeabi_dmul+0x478>
 8002276:	e64e      	b.n	8001f16 <__aeabi_dmul+0x116>
 8002278:	0034      	movs	r4, r6
 800227a:	3808      	subs	r0, #8
 800227c:	2500      	movs	r5, #0
 800227e:	4084      	lsls	r4, r0
 8002280:	e653      	b.n	8001f2a <__aeabi_dmul+0x12a>
 8002282:	9b00      	ldr	r3, [sp, #0]
 8002284:	469c      	mov	ip, r3
 8002286:	e741      	b.n	800210c <__aeabi_dmul+0x30c>
 8002288:	4912      	ldr	r1, [pc, #72]	; (80022d4 <__aeabi_dmul+0x4d4>)
 800228a:	0022      	movs	r2, r4
 800228c:	4461      	add	r1, ip
 800228e:	002e      	movs	r6, r5
 8002290:	408d      	lsls	r5, r1
 8002292:	408a      	lsls	r2, r1
 8002294:	40c6      	lsrs	r6, r0
 8002296:	1e69      	subs	r1, r5, #1
 8002298:	418d      	sbcs	r5, r1
 800229a:	4332      	orrs	r2, r6
 800229c:	432a      	orrs	r2, r5
 800229e:	40c4      	lsrs	r4, r0
 80022a0:	0753      	lsls	r3, r2, #29
 80022a2:	d0b6      	beq.n	8002212 <__aeabi_dmul+0x412>
 80022a4:	210f      	movs	r1, #15
 80022a6:	4011      	ands	r1, r2
 80022a8:	2904      	cmp	r1, #4
 80022aa:	d1ac      	bne.n	8002206 <__aeabi_dmul+0x406>
 80022ac:	e7b1      	b.n	8002212 <__aeabi_dmul+0x412>
 80022ae:	0765      	lsls	r5, r4, #29
 80022b0:	0264      	lsls	r4, r4, #9
 80022b2:	0b24      	lsrs	r4, r4, #12
 80022b4:	08d2      	lsrs	r2, r2, #3
 80022b6:	4315      	orrs	r5, r2
 80022b8:	2200      	movs	r2, #0
 80022ba:	e611      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	0312      	lsls	r2, r2, #12
 80022c0:	4314      	orrs	r4, r2
 80022c2:	0324      	lsls	r4, r4, #12
 80022c4:	4a01      	ldr	r2, [pc, #4]	; (80022cc <__aeabi_dmul+0x4cc>)
 80022c6:	0b24      	lsrs	r4, r4, #12
 80022c8:	e60a      	b.n	8001ee0 <__aeabi_dmul+0xe0>
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	000007ff 	.word	0x000007ff
 80022d0:	0000043e 	.word	0x0000043e
 80022d4:	0000041e 	.word	0x0000041e

080022d8 <__aeabi_dsub>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	4645      	mov	r5, r8
 80022e0:	46de      	mov	lr, fp
 80022e2:	0004      	movs	r4, r0
 80022e4:	b5e0      	push	{r5, r6, r7, lr}
 80022e6:	001f      	movs	r7, r3
 80022e8:	0010      	movs	r0, r2
 80022ea:	030b      	lsls	r3, r1, #12
 80022ec:	0f62      	lsrs	r2, r4, #29
 80022ee:	004e      	lsls	r6, r1, #1
 80022f0:	0fcd      	lsrs	r5, r1, #31
 80022f2:	0a5b      	lsrs	r3, r3, #9
 80022f4:	0339      	lsls	r1, r7, #12
 80022f6:	4313      	orrs	r3, r2
 80022f8:	0a49      	lsrs	r1, r1, #9
 80022fa:	00e2      	lsls	r2, r4, #3
 80022fc:	0f44      	lsrs	r4, r0, #29
 80022fe:	4321      	orrs	r1, r4
 8002300:	4cc2      	ldr	r4, [pc, #776]	; (800260c <__aeabi_dsub+0x334>)
 8002302:	4691      	mov	r9, r2
 8002304:	4692      	mov	sl, r2
 8002306:	00c0      	lsls	r0, r0, #3
 8002308:	007a      	lsls	r2, r7, #1
 800230a:	4680      	mov	r8, r0
 800230c:	0d76      	lsrs	r6, r6, #21
 800230e:	0d52      	lsrs	r2, r2, #21
 8002310:	0fff      	lsrs	r7, r7, #31
 8002312:	42a2      	cmp	r2, r4
 8002314:	d100      	bne.n	8002318 <__aeabi_dsub+0x40>
 8002316:	e0b4      	b.n	8002482 <__aeabi_dsub+0x1aa>
 8002318:	2401      	movs	r4, #1
 800231a:	4067      	eors	r7, r4
 800231c:	46bb      	mov	fp, r7
 800231e:	42bd      	cmp	r5, r7
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x4c>
 8002322:	e088      	b.n	8002436 <__aeabi_dsub+0x15e>
 8002324:	1ab4      	subs	r4, r6, r2
 8002326:	46a4      	mov	ip, r4
 8002328:	2c00      	cmp	r4, #0
 800232a:	dc00      	bgt.n	800232e <__aeabi_dsub+0x56>
 800232c:	e0b2      	b.n	8002494 <__aeabi_dsub+0x1bc>
 800232e:	2a00      	cmp	r2, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dsub+0x5c>
 8002332:	e0c5      	b.n	80024c0 <__aeabi_dsub+0x1e8>
 8002334:	4ab5      	ldr	r2, [pc, #724]	; (800260c <__aeabi_dsub+0x334>)
 8002336:	4296      	cmp	r6, r2
 8002338:	d100      	bne.n	800233c <__aeabi_dsub+0x64>
 800233a:	e28b      	b.n	8002854 <__aeabi_dsub+0x57c>
 800233c:	2280      	movs	r2, #128	; 0x80
 800233e:	0412      	lsls	r2, r2, #16
 8002340:	4311      	orrs	r1, r2
 8002342:	4662      	mov	r2, ip
 8002344:	2a38      	cmp	r2, #56	; 0x38
 8002346:	dd00      	ble.n	800234a <__aeabi_dsub+0x72>
 8002348:	e1a1      	b.n	800268e <__aeabi_dsub+0x3b6>
 800234a:	2a1f      	cmp	r2, #31
 800234c:	dd00      	ble.n	8002350 <__aeabi_dsub+0x78>
 800234e:	e216      	b.n	800277e <__aeabi_dsub+0x4a6>
 8002350:	2720      	movs	r7, #32
 8002352:	000c      	movs	r4, r1
 8002354:	1abf      	subs	r7, r7, r2
 8002356:	40bc      	lsls	r4, r7
 8002358:	0002      	movs	r2, r0
 800235a:	46a0      	mov	r8, r4
 800235c:	4664      	mov	r4, ip
 800235e:	40b8      	lsls	r0, r7
 8002360:	40e2      	lsrs	r2, r4
 8002362:	4644      	mov	r4, r8
 8002364:	4314      	orrs	r4, r2
 8002366:	0002      	movs	r2, r0
 8002368:	1e50      	subs	r0, r2, #1
 800236a:	4182      	sbcs	r2, r0
 800236c:	4660      	mov	r0, ip
 800236e:	40c1      	lsrs	r1, r0
 8002370:	4322      	orrs	r2, r4
 8002372:	1a5b      	subs	r3, r3, r1
 8002374:	4649      	mov	r1, r9
 8002376:	1a8c      	subs	r4, r1, r2
 8002378:	45a1      	cmp	r9, r4
 800237a:	4192      	sbcs	r2, r2
 800237c:	4252      	negs	r2, r2
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	4698      	mov	r8, r3
 8002382:	4643      	mov	r3, r8
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	d400      	bmi.n	800238a <__aeabi_dsub+0xb2>
 8002388:	e117      	b.n	80025ba <__aeabi_dsub+0x2e2>
 800238a:	4643      	mov	r3, r8
 800238c:	025b      	lsls	r3, r3, #9
 800238e:	0a5b      	lsrs	r3, r3, #9
 8002390:	4698      	mov	r8, r3
 8002392:	4643      	mov	r3, r8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d100      	bne.n	800239a <__aeabi_dsub+0xc2>
 8002398:	e16c      	b.n	8002674 <__aeabi_dsub+0x39c>
 800239a:	4640      	mov	r0, r8
 800239c:	f000 fbd8 	bl	8002b50 <__clzsi2>
 80023a0:	0002      	movs	r2, r0
 80023a2:	3a08      	subs	r2, #8
 80023a4:	2120      	movs	r1, #32
 80023a6:	0020      	movs	r0, r4
 80023a8:	4643      	mov	r3, r8
 80023aa:	1a89      	subs	r1, r1, r2
 80023ac:	4093      	lsls	r3, r2
 80023ae:	40c8      	lsrs	r0, r1
 80023b0:	4094      	lsls	r4, r2
 80023b2:	4303      	orrs	r3, r0
 80023b4:	4296      	cmp	r6, r2
 80023b6:	dd00      	ble.n	80023ba <__aeabi_dsub+0xe2>
 80023b8:	e157      	b.n	800266a <__aeabi_dsub+0x392>
 80023ba:	1b96      	subs	r6, r2, r6
 80023bc:	1c71      	adds	r1, r6, #1
 80023be:	291f      	cmp	r1, #31
 80023c0:	dd00      	ble.n	80023c4 <__aeabi_dsub+0xec>
 80023c2:	e1cb      	b.n	800275c <__aeabi_dsub+0x484>
 80023c4:	2220      	movs	r2, #32
 80023c6:	0018      	movs	r0, r3
 80023c8:	0026      	movs	r6, r4
 80023ca:	1a52      	subs	r2, r2, r1
 80023cc:	4094      	lsls	r4, r2
 80023ce:	4090      	lsls	r0, r2
 80023d0:	40ce      	lsrs	r6, r1
 80023d2:	40cb      	lsrs	r3, r1
 80023d4:	1e62      	subs	r2, r4, #1
 80023d6:	4194      	sbcs	r4, r2
 80023d8:	4330      	orrs	r0, r6
 80023da:	4698      	mov	r8, r3
 80023dc:	2600      	movs	r6, #0
 80023de:	4304      	orrs	r4, r0
 80023e0:	0763      	lsls	r3, r4, #29
 80023e2:	d009      	beq.n	80023f8 <__aeabi_dsub+0x120>
 80023e4:	230f      	movs	r3, #15
 80023e6:	4023      	ands	r3, r4
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d005      	beq.n	80023f8 <__aeabi_dsub+0x120>
 80023ec:	1d23      	adds	r3, r4, #4
 80023ee:	42a3      	cmp	r3, r4
 80023f0:	41a4      	sbcs	r4, r4
 80023f2:	4264      	negs	r4, r4
 80023f4:	44a0      	add	r8, r4
 80023f6:	001c      	movs	r4, r3
 80023f8:	4643      	mov	r3, r8
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	d400      	bmi.n	8002400 <__aeabi_dsub+0x128>
 80023fe:	e0df      	b.n	80025c0 <__aeabi_dsub+0x2e8>
 8002400:	4b82      	ldr	r3, [pc, #520]	; (800260c <__aeabi_dsub+0x334>)
 8002402:	3601      	adds	r6, #1
 8002404:	429e      	cmp	r6, r3
 8002406:	d100      	bne.n	800240a <__aeabi_dsub+0x132>
 8002408:	e0fb      	b.n	8002602 <__aeabi_dsub+0x32a>
 800240a:	4642      	mov	r2, r8
 800240c:	4b80      	ldr	r3, [pc, #512]	; (8002610 <__aeabi_dsub+0x338>)
 800240e:	08e4      	lsrs	r4, r4, #3
 8002410:	401a      	ands	r2, r3
 8002412:	0013      	movs	r3, r2
 8002414:	0571      	lsls	r1, r6, #21
 8002416:	0752      	lsls	r2, r2, #29
 8002418:	025b      	lsls	r3, r3, #9
 800241a:	4322      	orrs	r2, r4
 800241c:	0b1b      	lsrs	r3, r3, #12
 800241e:	0d49      	lsrs	r1, r1, #21
 8002420:	0509      	lsls	r1, r1, #20
 8002422:	07ed      	lsls	r5, r5, #31
 8002424:	4319      	orrs	r1, r3
 8002426:	4329      	orrs	r1, r5
 8002428:	0010      	movs	r0, r2
 800242a:	bcf0      	pop	{r4, r5, r6, r7}
 800242c:	46bb      	mov	fp, r7
 800242e:	46b2      	mov	sl, r6
 8002430:	46a9      	mov	r9, r5
 8002432:	46a0      	mov	r8, r4
 8002434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002436:	1ab4      	subs	r4, r6, r2
 8002438:	46a4      	mov	ip, r4
 800243a:	2c00      	cmp	r4, #0
 800243c:	dd58      	ble.n	80024f0 <__aeabi_dsub+0x218>
 800243e:	2a00      	cmp	r2, #0
 8002440:	d100      	bne.n	8002444 <__aeabi_dsub+0x16c>
 8002442:	e09e      	b.n	8002582 <__aeabi_dsub+0x2aa>
 8002444:	4a71      	ldr	r2, [pc, #452]	; (800260c <__aeabi_dsub+0x334>)
 8002446:	4296      	cmp	r6, r2
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x174>
 800244a:	e13b      	b.n	80026c4 <__aeabi_dsub+0x3ec>
 800244c:	2280      	movs	r2, #128	; 0x80
 800244e:	0412      	lsls	r2, r2, #16
 8002450:	4311      	orrs	r1, r2
 8002452:	4662      	mov	r2, ip
 8002454:	2a38      	cmp	r2, #56	; 0x38
 8002456:	dd00      	ble.n	800245a <__aeabi_dsub+0x182>
 8002458:	e0c1      	b.n	80025de <__aeabi_dsub+0x306>
 800245a:	2a1f      	cmp	r2, #31
 800245c:	dc00      	bgt.n	8002460 <__aeabi_dsub+0x188>
 800245e:	e1bb      	b.n	80027d8 <__aeabi_dsub+0x500>
 8002460:	000c      	movs	r4, r1
 8002462:	3a20      	subs	r2, #32
 8002464:	40d4      	lsrs	r4, r2
 8002466:	0022      	movs	r2, r4
 8002468:	4664      	mov	r4, ip
 800246a:	2c20      	cmp	r4, #32
 800246c:	d004      	beq.n	8002478 <__aeabi_dsub+0x1a0>
 800246e:	2740      	movs	r7, #64	; 0x40
 8002470:	1b3f      	subs	r7, r7, r4
 8002472:	40b9      	lsls	r1, r7
 8002474:	4308      	orrs	r0, r1
 8002476:	4680      	mov	r8, r0
 8002478:	4644      	mov	r4, r8
 800247a:	1e61      	subs	r1, r4, #1
 800247c:	418c      	sbcs	r4, r1
 800247e:	4314      	orrs	r4, r2
 8002480:	e0b1      	b.n	80025e6 <__aeabi_dsub+0x30e>
 8002482:	000c      	movs	r4, r1
 8002484:	4304      	orrs	r4, r0
 8002486:	d02a      	beq.n	80024de <__aeabi_dsub+0x206>
 8002488:	46bb      	mov	fp, r7
 800248a:	42bd      	cmp	r5, r7
 800248c:	d02d      	beq.n	80024ea <__aeabi_dsub+0x212>
 800248e:	4c61      	ldr	r4, [pc, #388]	; (8002614 <__aeabi_dsub+0x33c>)
 8002490:	46a4      	mov	ip, r4
 8002492:	44b4      	add	ip, r6
 8002494:	4664      	mov	r4, ip
 8002496:	2c00      	cmp	r4, #0
 8002498:	d05c      	beq.n	8002554 <__aeabi_dsub+0x27c>
 800249a:	1b94      	subs	r4, r2, r6
 800249c:	46a4      	mov	ip, r4
 800249e:	2e00      	cmp	r6, #0
 80024a0:	d000      	beq.n	80024a4 <__aeabi_dsub+0x1cc>
 80024a2:	e115      	b.n	80026d0 <__aeabi_dsub+0x3f8>
 80024a4:	464d      	mov	r5, r9
 80024a6:	431d      	orrs	r5, r3
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x1d4>
 80024aa:	e1c3      	b.n	8002834 <__aeabi_dsub+0x55c>
 80024ac:	1e65      	subs	r5, r4, #1
 80024ae:	2c01      	cmp	r4, #1
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x1dc>
 80024b2:	e20c      	b.n	80028ce <__aeabi_dsub+0x5f6>
 80024b4:	4e55      	ldr	r6, [pc, #340]	; (800260c <__aeabi_dsub+0x334>)
 80024b6:	42b4      	cmp	r4, r6
 80024b8:	d100      	bne.n	80024bc <__aeabi_dsub+0x1e4>
 80024ba:	e1f8      	b.n	80028ae <__aeabi_dsub+0x5d6>
 80024bc:	46ac      	mov	ip, r5
 80024be:	e10e      	b.n	80026de <__aeabi_dsub+0x406>
 80024c0:	000a      	movs	r2, r1
 80024c2:	4302      	orrs	r2, r0
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x1f0>
 80024c6:	e136      	b.n	8002736 <__aeabi_dsub+0x45e>
 80024c8:	0022      	movs	r2, r4
 80024ca:	3a01      	subs	r2, #1
 80024cc:	2c01      	cmp	r4, #1
 80024ce:	d100      	bne.n	80024d2 <__aeabi_dsub+0x1fa>
 80024d0:	e1c6      	b.n	8002860 <__aeabi_dsub+0x588>
 80024d2:	4c4e      	ldr	r4, [pc, #312]	; (800260c <__aeabi_dsub+0x334>)
 80024d4:	45a4      	cmp	ip, r4
 80024d6:	d100      	bne.n	80024da <__aeabi_dsub+0x202>
 80024d8:	e0f4      	b.n	80026c4 <__aeabi_dsub+0x3ec>
 80024da:	4694      	mov	ip, r2
 80024dc:	e731      	b.n	8002342 <__aeabi_dsub+0x6a>
 80024de:	2401      	movs	r4, #1
 80024e0:	4067      	eors	r7, r4
 80024e2:	46bb      	mov	fp, r7
 80024e4:	42bd      	cmp	r5, r7
 80024e6:	d000      	beq.n	80024ea <__aeabi_dsub+0x212>
 80024e8:	e71c      	b.n	8002324 <__aeabi_dsub+0x4c>
 80024ea:	4c4a      	ldr	r4, [pc, #296]	; (8002614 <__aeabi_dsub+0x33c>)
 80024ec:	46a4      	mov	ip, r4
 80024ee:	44b4      	add	ip, r6
 80024f0:	4664      	mov	r4, ip
 80024f2:	2c00      	cmp	r4, #0
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dsub+0x220>
 80024f6:	e0cf      	b.n	8002698 <__aeabi_dsub+0x3c0>
 80024f8:	1b94      	subs	r4, r2, r6
 80024fa:	46a4      	mov	ip, r4
 80024fc:	2e00      	cmp	r6, #0
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0x22a>
 8002500:	e15c      	b.n	80027bc <__aeabi_dsub+0x4e4>
 8002502:	4e42      	ldr	r6, [pc, #264]	; (800260c <__aeabi_dsub+0x334>)
 8002504:	42b2      	cmp	r2, r6
 8002506:	d100      	bne.n	800250a <__aeabi_dsub+0x232>
 8002508:	e1ec      	b.n	80028e4 <__aeabi_dsub+0x60c>
 800250a:	2680      	movs	r6, #128	; 0x80
 800250c:	0436      	lsls	r6, r6, #16
 800250e:	4333      	orrs	r3, r6
 8002510:	4664      	mov	r4, ip
 8002512:	2c38      	cmp	r4, #56	; 0x38
 8002514:	dd00      	ble.n	8002518 <__aeabi_dsub+0x240>
 8002516:	e1b3      	b.n	8002880 <__aeabi_dsub+0x5a8>
 8002518:	2c1f      	cmp	r4, #31
 800251a:	dd00      	ble.n	800251e <__aeabi_dsub+0x246>
 800251c:	e238      	b.n	8002990 <__aeabi_dsub+0x6b8>
 800251e:	2620      	movs	r6, #32
 8002520:	1b36      	subs	r6, r6, r4
 8002522:	001c      	movs	r4, r3
 8002524:	40b4      	lsls	r4, r6
 8002526:	464f      	mov	r7, r9
 8002528:	46a0      	mov	r8, r4
 800252a:	4664      	mov	r4, ip
 800252c:	40e7      	lsrs	r7, r4
 800252e:	4644      	mov	r4, r8
 8002530:	433c      	orrs	r4, r7
 8002532:	464f      	mov	r7, r9
 8002534:	40b7      	lsls	r7, r6
 8002536:	003e      	movs	r6, r7
 8002538:	1e77      	subs	r7, r6, #1
 800253a:	41be      	sbcs	r6, r7
 800253c:	4334      	orrs	r4, r6
 800253e:	4666      	mov	r6, ip
 8002540:	40f3      	lsrs	r3, r6
 8002542:	18c9      	adds	r1, r1, r3
 8002544:	1824      	adds	r4, r4, r0
 8002546:	4284      	cmp	r4, r0
 8002548:	419b      	sbcs	r3, r3
 800254a:	425b      	negs	r3, r3
 800254c:	4698      	mov	r8, r3
 800254e:	0016      	movs	r6, r2
 8002550:	4488      	add	r8, r1
 8002552:	e04e      	b.n	80025f2 <__aeabi_dsub+0x31a>
 8002554:	4a30      	ldr	r2, [pc, #192]	; (8002618 <__aeabi_dsub+0x340>)
 8002556:	1c74      	adds	r4, r6, #1
 8002558:	4214      	tst	r4, r2
 800255a:	d000      	beq.n	800255e <__aeabi_dsub+0x286>
 800255c:	e0d6      	b.n	800270c <__aeabi_dsub+0x434>
 800255e:	464a      	mov	r2, r9
 8002560:	431a      	orrs	r2, r3
 8002562:	2e00      	cmp	r6, #0
 8002564:	d000      	beq.n	8002568 <__aeabi_dsub+0x290>
 8002566:	e15b      	b.n	8002820 <__aeabi_dsub+0x548>
 8002568:	2a00      	cmp	r2, #0
 800256a:	d100      	bne.n	800256e <__aeabi_dsub+0x296>
 800256c:	e1a5      	b.n	80028ba <__aeabi_dsub+0x5e2>
 800256e:	000a      	movs	r2, r1
 8002570:	4302      	orrs	r2, r0
 8002572:	d000      	beq.n	8002576 <__aeabi_dsub+0x29e>
 8002574:	e1bb      	b.n	80028ee <__aeabi_dsub+0x616>
 8002576:	464a      	mov	r2, r9
 8002578:	0759      	lsls	r1, r3, #29
 800257a:	08d2      	lsrs	r2, r2, #3
 800257c:	430a      	orrs	r2, r1
 800257e:	08db      	lsrs	r3, r3, #3
 8002580:	e027      	b.n	80025d2 <__aeabi_dsub+0x2fa>
 8002582:	000a      	movs	r2, r1
 8002584:	4302      	orrs	r2, r0
 8002586:	d100      	bne.n	800258a <__aeabi_dsub+0x2b2>
 8002588:	e174      	b.n	8002874 <__aeabi_dsub+0x59c>
 800258a:	0022      	movs	r2, r4
 800258c:	3a01      	subs	r2, #1
 800258e:	2c01      	cmp	r4, #1
 8002590:	d005      	beq.n	800259e <__aeabi_dsub+0x2c6>
 8002592:	4c1e      	ldr	r4, [pc, #120]	; (800260c <__aeabi_dsub+0x334>)
 8002594:	45a4      	cmp	ip, r4
 8002596:	d100      	bne.n	800259a <__aeabi_dsub+0x2c2>
 8002598:	e094      	b.n	80026c4 <__aeabi_dsub+0x3ec>
 800259a:	4694      	mov	ip, r2
 800259c:	e759      	b.n	8002452 <__aeabi_dsub+0x17a>
 800259e:	4448      	add	r0, r9
 80025a0:	4548      	cmp	r0, r9
 80025a2:	4192      	sbcs	r2, r2
 80025a4:	185b      	adds	r3, r3, r1
 80025a6:	4698      	mov	r8, r3
 80025a8:	0004      	movs	r4, r0
 80025aa:	4252      	negs	r2, r2
 80025ac:	4490      	add	r8, r2
 80025ae:	4643      	mov	r3, r8
 80025b0:	2602      	movs	r6, #2
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	d500      	bpl.n	80025b8 <__aeabi_dsub+0x2e0>
 80025b6:	e0c4      	b.n	8002742 <__aeabi_dsub+0x46a>
 80025b8:	3e01      	subs	r6, #1
 80025ba:	0763      	lsls	r3, r4, #29
 80025bc:	d000      	beq.n	80025c0 <__aeabi_dsub+0x2e8>
 80025be:	e711      	b.n	80023e4 <__aeabi_dsub+0x10c>
 80025c0:	4643      	mov	r3, r8
 80025c2:	46b4      	mov	ip, r6
 80025c4:	0759      	lsls	r1, r3, #29
 80025c6:	08e2      	lsrs	r2, r4, #3
 80025c8:	430a      	orrs	r2, r1
 80025ca:	08db      	lsrs	r3, r3, #3
 80025cc:	490f      	ldr	r1, [pc, #60]	; (800260c <__aeabi_dsub+0x334>)
 80025ce:	458c      	cmp	ip, r1
 80025d0:	d040      	beq.n	8002654 <__aeabi_dsub+0x37c>
 80025d2:	4661      	mov	r1, ip
 80025d4:	031b      	lsls	r3, r3, #12
 80025d6:	0549      	lsls	r1, r1, #21
 80025d8:	0b1b      	lsrs	r3, r3, #12
 80025da:	0d49      	lsrs	r1, r1, #21
 80025dc:	e720      	b.n	8002420 <__aeabi_dsub+0x148>
 80025de:	4301      	orrs	r1, r0
 80025e0:	000c      	movs	r4, r1
 80025e2:	1e61      	subs	r1, r4, #1
 80025e4:	418c      	sbcs	r4, r1
 80025e6:	444c      	add	r4, r9
 80025e8:	454c      	cmp	r4, r9
 80025ea:	4192      	sbcs	r2, r2
 80025ec:	4252      	negs	r2, r2
 80025ee:	4690      	mov	r8, r2
 80025f0:	4498      	add	r8, r3
 80025f2:	4643      	mov	r3, r8
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	d5e0      	bpl.n	80025ba <__aeabi_dsub+0x2e2>
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__aeabi_dsub+0x334>)
 80025fa:	3601      	adds	r6, #1
 80025fc:	429e      	cmp	r6, r3
 80025fe:	d000      	beq.n	8002602 <__aeabi_dsub+0x32a>
 8002600:	e09f      	b.n	8002742 <__aeabi_dsub+0x46a>
 8002602:	0031      	movs	r1, r6
 8002604:	2300      	movs	r3, #0
 8002606:	2200      	movs	r2, #0
 8002608:	e70a      	b.n	8002420 <__aeabi_dsub+0x148>
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	000007ff 	.word	0x000007ff
 8002610:	ff7fffff 	.word	0xff7fffff
 8002614:	fffff801 	.word	0xfffff801
 8002618:	000007fe 	.word	0x000007fe
 800261c:	2a00      	cmp	r2, #0
 800261e:	d100      	bne.n	8002622 <__aeabi_dsub+0x34a>
 8002620:	e160      	b.n	80028e4 <__aeabi_dsub+0x60c>
 8002622:	000a      	movs	r2, r1
 8002624:	4302      	orrs	r2, r0
 8002626:	d04d      	beq.n	80026c4 <__aeabi_dsub+0x3ec>
 8002628:	464a      	mov	r2, r9
 800262a:	075c      	lsls	r4, r3, #29
 800262c:	08d2      	lsrs	r2, r2, #3
 800262e:	4322      	orrs	r2, r4
 8002630:	2480      	movs	r4, #128	; 0x80
 8002632:	08db      	lsrs	r3, r3, #3
 8002634:	0324      	lsls	r4, r4, #12
 8002636:	4223      	tst	r3, r4
 8002638:	d007      	beq.n	800264a <__aeabi_dsub+0x372>
 800263a:	08ce      	lsrs	r6, r1, #3
 800263c:	4226      	tst	r6, r4
 800263e:	d104      	bne.n	800264a <__aeabi_dsub+0x372>
 8002640:	465d      	mov	r5, fp
 8002642:	0033      	movs	r3, r6
 8002644:	08c2      	lsrs	r2, r0, #3
 8002646:	0749      	lsls	r1, r1, #29
 8002648:	430a      	orrs	r2, r1
 800264a:	0f51      	lsrs	r1, r2, #29
 800264c:	00d2      	lsls	r2, r2, #3
 800264e:	08d2      	lsrs	r2, r2, #3
 8002650:	0749      	lsls	r1, r1, #29
 8002652:	430a      	orrs	r2, r1
 8002654:	0011      	movs	r1, r2
 8002656:	4319      	orrs	r1, r3
 8002658:	d100      	bne.n	800265c <__aeabi_dsub+0x384>
 800265a:	e1c8      	b.n	80029ee <__aeabi_dsub+0x716>
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	0309      	lsls	r1, r1, #12
 8002660:	430b      	orrs	r3, r1
 8002662:	031b      	lsls	r3, r3, #12
 8002664:	49d5      	ldr	r1, [pc, #852]	; (80029bc <__aeabi_dsub+0x6e4>)
 8002666:	0b1b      	lsrs	r3, r3, #12
 8002668:	e6da      	b.n	8002420 <__aeabi_dsub+0x148>
 800266a:	49d5      	ldr	r1, [pc, #852]	; (80029c0 <__aeabi_dsub+0x6e8>)
 800266c:	1ab6      	subs	r6, r6, r2
 800266e:	400b      	ands	r3, r1
 8002670:	4698      	mov	r8, r3
 8002672:	e6b5      	b.n	80023e0 <__aeabi_dsub+0x108>
 8002674:	0020      	movs	r0, r4
 8002676:	f000 fa6b 	bl	8002b50 <__clzsi2>
 800267a:	0002      	movs	r2, r0
 800267c:	3218      	adds	r2, #24
 800267e:	2a1f      	cmp	r2, #31
 8002680:	dc00      	bgt.n	8002684 <__aeabi_dsub+0x3ac>
 8002682:	e68f      	b.n	80023a4 <__aeabi_dsub+0xcc>
 8002684:	0023      	movs	r3, r4
 8002686:	3808      	subs	r0, #8
 8002688:	4083      	lsls	r3, r0
 800268a:	2400      	movs	r4, #0
 800268c:	e692      	b.n	80023b4 <__aeabi_dsub+0xdc>
 800268e:	4308      	orrs	r0, r1
 8002690:	0002      	movs	r2, r0
 8002692:	1e50      	subs	r0, r2, #1
 8002694:	4182      	sbcs	r2, r0
 8002696:	e66d      	b.n	8002374 <__aeabi_dsub+0x9c>
 8002698:	4cca      	ldr	r4, [pc, #808]	; (80029c4 <__aeabi_dsub+0x6ec>)
 800269a:	1c72      	adds	r2, r6, #1
 800269c:	4222      	tst	r2, r4
 800269e:	d000      	beq.n	80026a2 <__aeabi_dsub+0x3ca>
 80026a0:	e0ad      	b.n	80027fe <__aeabi_dsub+0x526>
 80026a2:	464a      	mov	r2, r9
 80026a4:	431a      	orrs	r2, r3
 80026a6:	2e00      	cmp	r6, #0
 80026a8:	d1b8      	bne.n	800261c <__aeabi_dsub+0x344>
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x3d8>
 80026ae:	e158      	b.n	8002962 <__aeabi_dsub+0x68a>
 80026b0:	000a      	movs	r2, r1
 80026b2:	4302      	orrs	r2, r0
 80026b4:	d000      	beq.n	80026b8 <__aeabi_dsub+0x3e0>
 80026b6:	e159      	b.n	800296c <__aeabi_dsub+0x694>
 80026b8:	464a      	mov	r2, r9
 80026ba:	0759      	lsls	r1, r3, #29
 80026bc:	08d2      	lsrs	r2, r2, #3
 80026be:	430a      	orrs	r2, r1
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	e786      	b.n	80025d2 <__aeabi_dsub+0x2fa>
 80026c4:	464a      	mov	r2, r9
 80026c6:	0759      	lsls	r1, r3, #29
 80026c8:	08d2      	lsrs	r2, r2, #3
 80026ca:	430a      	orrs	r2, r1
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	e7c1      	b.n	8002654 <__aeabi_dsub+0x37c>
 80026d0:	4dba      	ldr	r5, [pc, #744]	; (80029bc <__aeabi_dsub+0x6e4>)
 80026d2:	42aa      	cmp	r2, r5
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x400>
 80026d6:	e11e      	b.n	8002916 <__aeabi_dsub+0x63e>
 80026d8:	2580      	movs	r5, #128	; 0x80
 80026da:	042d      	lsls	r5, r5, #16
 80026dc:	432b      	orrs	r3, r5
 80026de:	4664      	mov	r4, ip
 80026e0:	2c38      	cmp	r4, #56	; 0x38
 80026e2:	dc5d      	bgt.n	80027a0 <__aeabi_dsub+0x4c8>
 80026e4:	2c1f      	cmp	r4, #31
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0x412>
 80026e8:	e0d0      	b.n	800288c <__aeabi_dsub+0x5b4>
 80026ea:	2520      	movs	r5, #32
 80026ec:	4667      	mov	r7, ip
 80026ee:	1b2d      	subs	r5, r5, r4
 80026f0:	464e      	mov	r6, r9
 80026f2:	001c      	movs	r4, r3
 80026f4:	40fe      	lsrs	r6, r7
 80026f6:	40ac      	lsls	r4, r5
 80026f8:	4334      	orrs	r4, r6
 80026fa:	464e      	mov	r6, r9
 80026fc:	40ae      	lsls	r6, r5
 80026fe:	0035      	movs	r5, r6
 8002700:	40fb      	lsrs	r3, r7
 8002702:	1e6e      	subs	r6, r5, #1
 8002704:	41b5      	sbcs	r5, r6
 8002706:	1ac9      	subs	r1, r1, r3
 8002708:	432c      	orrs	r4, r5
 800270a:	e04e      	b.n	80027aa <__aeabi_dsub+0x4d2>
 800270c:	464a      	mov	r2, r9
 800270e:	1a14      	subs	r4, r2, r0
 8002710:	45a1      	cmp	r9, r4
 8002712:	4192      	sbcs	r2, r2
 8002714:	4252      	negs	r2, r2
 8002716:	4690      	mov	r8, r2
 8002718:	1a5f      	subs	r7, r3, r1
 800271a:	003a      	movs	r2, r7
 800271c:	4647      	mov	r7, r8
 800271e:	1bd2      	subs	r2, r2, r7
 8002720:	4690      	mov	r8, r2
 8002722:	0212      	lsls	r2, r2, #8
 8002724:	d500      	bpl.n	8002728 <__aeabi_dsub+0x450>
 8002726:	e08b      	b.n	8002840 <__aeabi_dsub+0x568>
 8002728:	4642      	mov	r2, r8
 800272a:	4322      	orrs	r2, r4
 800272c:	d000      	beq.n	8002730 <__aeabi_dsub+0x458>
 800272e:	e630      	b.n	8002392 <__aeabi_dsub+0xba>
 8002730:	2300      	movs	r3, #0
 8002732:	2500      	movs	r5, #0
 8002734:	e74d      	b.n	80025d2 <__aeabi_dsub+0x2fa>
 8002736:	464a      	mov	r2, r9
 8002738:	0759      	lsls	r1, r3, #29
 800273a:	08d2      	lsrs	r2, r2, #3
 800273c:	430a      	orrs	r2, r1
 800273e:	08db      	lsrs	r3, r3, #3
 8002740:	e744      	b.n	80025cc <__aeabi_dsub+0x2f4>
 8002742:	4642      	mov	r2, r8
 8002744:	4b9e      	ldr	r3, [pc, #632]	; (80029c0 <__aeabi_dsub+0x6e8>)
 8002746:	0861      	lsrs	r1, r4, #1
 8002748:	401a      	ands	r2, r3
 800274a:	0013      	movs	r3, r2
 800274c:	2201      	movs	r2, #1
 800274e:	4014      	ands	r4, r2
 8002750:	430c      	orrs	r4, r1
 8002752:	07da      	lsls	r2, r3, #31
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	4698      	mov	r8, r3
 8002758:	4314      	orrs	r4, r2
 800275a:	e641      	b.n	80023e0 <__aeabi_dsub+0x108>
 800275c:	001a      	movs	r2, r3
 800275e:	3e1f      	subs	r6, #31
 8002760:	40f2      	lsrs	r2, r6
 8002762:	0016      	movs	r6, r2
 8002764:	2920      	cmp	r1, #32
 8002766:	d003      	beq.n	8002770 <__aeabi_dsub+0x498>
 8002768:	2240      	movs	r2, #64	; 0x40
 800276a:	1a51      	subs	r1, r2, r1
 800276c:	408b      	lsls	r3, r1
 800276e:	431c      	orrs	r4, r3
 8002770:	1e62      	subs	r2, r4, #1
 8002772:	4194      	sbcs	r4, r2
 8002774:	2300      	movs	r3, #0
 8002776:	4334      	orrs	r4, r6
 8002778:	4698      	mov	r8, r3
 800277a:	2600      	movs	r6, #0
 800277c:	e71d      	b.n	80025ba <__aeabi_dsub+0x2e2>
 800277e:	000c      	movs	r4, r1
 8002780:	3a20      	subs	r2, #32
 8002782:	40d4      	lsrs	r4, r2
 8002784:	0022      	movs	r2, r4
 8002786:	4664      	mov	r4, ip
 8002788:	2c20      	cmp	r4, #32
 800278a:	d004      	beq.n	8002796 <__aeabi_dsub+0x4be>
 800278c:	2740      	movs	r7, #64	; 0x40
 800278e:	1b3f      	subs	r7, r7, r4
 8002790:	40b9      	lsls	r1, r7
 8002792:	4308      	orrs	r0, r1
 8002794:	4680      	mov	r8, r0
 8002796:	4644      	mov	r4, r8
 8002798:	1e61      	subs	r1, r4, #1
 800279a:	418c      	sbcs	r4, r1
 800279c:	4322      	orrs	r2, r4
 800279e:	e5e9      	b.n	8002374 <__aeabi_dsub+0x9c>
 80027a0:	464c      	mov	r4, r9
 80027a2:	4323      	orrs	r3, r4
 80027a4:	001c      	movs	r4, r3
 80027a6:	1e63      	subs	r3, r4, #1
 80027a8:	419c      	sbcs	r4, r3
 80027aa:	1b04      	subs	r4, r0, r4
 80027ac:	42a0      	cmp	r0, r4
 80027ae:	419b      	sbcs	r3, r3
 80027b0:	425b      	negs	r3, r3
 80027b2:	1acb      	subs	r3, r1, r3
 80027b4:	4698      	mov	r8, r3
 80027b6:	465d      	mov	r5, fp
 80027b8:	0016      	movs	r6, r2
 80027ba:	e5e2      	b.n	8002382 <__aeabi_dsub+0xaa>
 80027bc:	464e      	mov	r6, r9
 80027be:	431e      	orrs	r6, r3
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x4ec>
 80027c2:	e0ae      	b.n	8002922 <__aeabi_dsub+0x64a>
 80027c4:	1e66      	subs	r6, r4, #1
 80027c6:	2c01      	cmp	r4, #1
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x4f4>
 80027ca:	e0fd      	b.n	80029c8 <__aeabi_dsub+0x6f0>
 80027cc:	4f7b      	ldr	r7, [pc, #492]	; (80029bc <__aeabi_dsub+0x6e4>)
 80027ce:	42bc      	cmp	r4, r7
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x4fc>
 80027d2:	e107      	b.n	80029e4 <__aeabi_dsub+0x70c>
 80027d4:	46b4      	mov	ip, r6
 80027d6:	e69b      	b.n	8002510 <__aeabi_dsub+0x238>
 80027d8:	4664      	mov	r4, ip
 80027da:	2220      	movs	r2, #32
 80027dc:	1b12      	subs	r2, r2, r4
 80027de:	000c      	movs	r4, r1
 80027e0:	4094      	lsls	r4, r2
 80027e2:	0007      	movs	r7, r0
 80027e4:	4090      	lsls	r0, r2
 80027e6:	46a0      	mov	r8, r4
 80027e8:	4664      	mov	r4, ip
 80027ea:	1e42      	subs	r2, r0, #1
 80027ec:	4190      	sbcs	r0, r2
 80027ee:	4662      	mov	r2, ip
 80027f0:	40e7      	lsrs	r7, r4
 80027f2:	4644      	mov	r4, r8
 80027f4:	40d1      	lsrs	r1, r2
 80027f6:	433c      	orrs	r4, r7
 80027f8:	4304      	orrs	r4, r0
 80027fa:	185b      	adds	r3, r3, r1
 80027fc:	e6f3      	b.n	80025e6 <__aeabi_dsub+0x30e>
 80027fe:	4c6f      	ldr	r4, [pc, #444]	; (80029bc <__aeabi_dsub+0x6e4>)
 8002800:	42a2      	cmp	r2, r4
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x52e>
 8002804:	e0d5      	b.n	80029b2 <__aeabi_dsub+0x6da>
 8002806:	4448      	add	r0, r9
 8002808:	185b      	adds	r3, r3, r1
 800280a:	4548      	cmp	r0, r9
 800280c:	4189      	sbcs	r1, r1
 800280e:	4249      	negs	r1, r1
 8002810:	185b      	adds	r3, r3, r1
 8002812:	07dc      	lsls	r4, r3, #31
 8002814:	0840      	lsrs	r0, r0, #1
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	4698      	mov	r8, r3
 800281a:	0016      	movs	r6, r2
 800281c:	4304      	orrs	r4, r0
 800281e:	e6cc      	b.n	80025ba <__aeabi_dsub+0x2e2>
 8002820:	2a00      	cmp	r2, #0
 8002822:	d000      	beq.n	8002826 <__aeabi_dsub+0x54e>
 8002824:	e082      	b.n	800292c <__aeabi_dsub+0x654>
 8002826:	000a      	movs	r2, r1
 8002828:	4302      	orrs	r2, r0
 800282a:	d140      	bne.n	80028ae <__aeabi_dsub+0x5d6>
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	2500      	movs	r5, #0
 8002830:	031b      	lsls	r3, r3, #12
 8002832:	e713      	b.n	800265c <__aeabi_dsub+0x384>
 8002834:	074b      	lsls	r3, r1, #29
 8002836:	08c2      	lsrs	r2, r0, #3
 8002838:	431a      	orrs	r2, r3
 800283a:	465d      	mov	r5, fp
 800283c:	08cb      	lsrs	r3, r1, #3
 800283e:	e6c5      	b.n	80025cc <__aeabi_dsub+0x2f4>
 8002840:	464a      	mov	r2, r9
 8002842:	1a84      	subs	r4, r0, r2
 8002844:	42a0      	cmp	r0, r4
 8002846:	4192      	sbcs	r2, r2
 8002848:	1acb      	subs	r3, r1, r3
 800284a:	4252      	negs	r2, r2
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	4698      	mov	r8, r3
 8002850:	465d      	mov	r5, fp
 8002852:	e59e      	b.n	8002392 <__aeabi_dsub+0xba>
 8002854:	464a      	mov	r2, r9
 8002856:	0759      	lsls	r1, r3, #29
 8002858:	08d2      	lsrs	r2, r2, #3
 800285a:	430a      	orrs	r2, r1
 800285c:	08db      	lsrs	r3, r3, #3
 800285e:	e6f9      	b.n	8002654 <__aeabi_dsub+0x37c>
 8002860:	464a      	mov	r2, r9
 8002862:	1a14      	subs	r4, r2, r0
 8002864:	45a1      	cmp	r9, r4
 8002866:	4192      	sbcs	r2, r2
 8002868:	1a5b      	subs	r3, r3, r1
 800286a:	4252      	negs	r2, r2
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	4698      	mov	r8, r3
 8002870:	2601      	movs	r6, #1
 8002872:	e586      	b.n	8002382 <__aeabi_dsub+0xaa>
 8002874:	464a      	mov	r2, r9
 8002876:	0759      	lsls	r1, r3, #29
 8002878:	08d2      	lsrs	r2, r2, #3
 800287a:	430a      	orrs	r2, r1
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	e6a5      	b.n	80025cc <__aeabi_dsub+0x2f4>
 8002880:	464c      	mov	r4, r9
 8002882:	4323      	orrs	r3, r4
 8002884:	001c      	movs	r4, r3
 8002886:	1e63      	subs	r3, r4, #1
 8002888:	419c      	sbcs	r4, r3
 800288a:	e65b      	b.n	8002544 <__aeabi_dsub+0x26c>
 800288c:	4665      	mov	r5, ip
 800288e:	001e      	movs	r6, r3
 8002890:	3d20      	subs	r5, #32
 8002892:	40ee      	lsrs	r6, r5
 8002894:	2c20      	cmp	r4, #32
 8002896:	d005      	beq.n	80028a4 <__aeabi_dsub+0x5cc>
 8002898:	2540      	movs	r5, #64	; 0x40
 800289a:	1b2d      	subs	r5, r5, r4
 800289c:	40ab      	lsls	r3, r5
 800289e:	464c      	mov	r4, r9
 80028a0:	431c      	orrs	r4, r3
 80028a2:	46a2      	mov	sl, r4
 80028a4:	4654      	mov	r4, sl
 80028a6:	1e63      	subs	r3, r4, #1
 80028a8:	419c      	sbcs	r4, r3
 80028aa:	4334      	orrs	r4, r6
 80028ac:	e77d      	b.n	80027aa <__aeabi_dsub+0x4d2>
 80028ae:	074b      	lsls	r3, r1, #29
 80028b0:	08c2      	lsrs	r2, r0, #3
 80028b2:	431a      	orrs	r2, r3
 80028b4:	465d      	mov	r5, fp
 80028b6:	08cb      	lsrs	r3, r1, #3
 80028b8:	e6cc      	b.n	8002654 <__aeabi_dsub+0x37c>
 80028ba:	000a      	movs	r2, r1
 80028bc:	4302      	orrs	r2, r0
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x5ea>
 80028c0:	e736      	b.n	8002730 <__aeabi_dsub+0x458>
 80028c2:	074b      	lsls	r3, r1, #29
 80028c4:	08c2      	lsrs	r2, r0, #3
 80028c6:	431a      	orrs	r2, r3
 80028c8:	465d      	mov	r5, fp
 80028ca:	08cb      	lsrs	r3, r1, #3
 80028cc:	e681      	b.n	80025d2 <__aeabi_dsub+0x2fa>
 80028ce:	464a      	mov	r2, r9
 80028d0:	1a84      	subs	r4, r0, r2
 80028d2:	42a0      	cmp	r0, r4
 80028d4:	4192      	sbcs	r2, r2
 80028d6:	1acb      	subs	r3, r1, r3
 80028d8:	4252      	negs	r2, r2
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	4698      	mov	r8, r3
 80028de:	465d      	mov	r5, fp
 80028e0:	2601      	movs	r6, #1
 80028e2:	e54e      	b.n	8002382 <__aeabi_dsub+0xaa>
 80028e4:	074b      	lsls	r3, r1, #29
 80028e6:	08c2      	lsrs	r2, r0, #3
 80028e8:	431a      	orrs	r2, r3
 80028ea:	08cb      	lsrs	r3, r1, #3
 80028ec:	e6b2      	b.n	8002654 <__aeabi_dsub+0x37c>
 80028ee:	464a      	mov	r2, r9
 80028f0:	1a14      	subs	r4, r2, r0
 80028f2:	45a1      	cmp	r9, r4
 80028f4:	4192      	sbcs	r2, r2
 80028f6:	1a5f      	subs	r7, r3, r1
 80028f8:	4252      	negs	r2, r2
 80028fa:	1aba      	subs	r2, r7, r2
 80028fc:	4690      	mov	r8, r2
 80028fe:	0212      	lsls	r2, r2, #8
 8002900:	d56b      	bpl.n	80029da <__aeabi_dsub+0x702>
 8002902:	464a      	mov	r2, r9
 8002904:	1a84      	subs	r4, r0, r2
 8002906:	42a0      	cmp	r0, r4
 8002908:	4192      	sbcs	r2, r2
 800290a:	1acb      	subs	r3, r1, r3
 800290c:	4252      	negs	r2, r2
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	4698      	mov	r8, r3
 8002912:	465d      	mov	r5, fp
 8002914:	e564      	b.n	80023e0 <__aeabi_dsub+0x108>
 8002916:	074b      	lsls	r3, r1, #29
 8002918:	08c2      	lsrs	r2, r0, #3
 800291a:	431a      	orrs	r2, r3
 800291c:	465d      	mov	r5, fp
 800291e:	08cb      	lsrs	r3, r1, #3
 8002920:	e698      	b.n	8002654 <__aeabi_dsub+0x37c>
 8002922:	074b      	lsls	r3, r1, #29
 8002924:	08c2      	lsrs	r2, r0, #3
 8002926:	431a      	orrs	r2, r3
 8002928:	08cb      	lsrs	r3, r1, #3
 800292a:	e64f      	b.n	80025cc <__aeabi_dsub+0x2f4>
 800292c:	000a      	movs	r2, r1
 800292e:	4302      	orrs	r2, r0
 8002930:	d090      	beq.n	8002854 <__aeabi_dsub+0x57c>
 8002932:	464a      	mov	r2, r9
 8002934:	075c      	lsls	r4, r3, #29
 8002936:	08d2      	lsrs	r2, r2, #3
 8002938:	4314      	orrs	r4, r2
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	0312      	lsls	r2, r2, #12
 8002940:	4213      	tst	r3, r2
 8002942:	d008      	beq.n	8002956 <__aeabi_dsub+0x67e>
 8002944:	08ce      	lsrs	r6, r1, #3
 8002946:	4216      	tst	r6, r2
 8002948:	d105      	bne.n	8002956 <__aeabi_dsub+0x67e>
 800294a:	08c0      	lsrs	r0, r0, #3
 800294c:	0749      	lsls	r1, r1, #29
 800294e:	4308      	orrs	r0, r1
 8002950:	0004      	movs	r4, r0
 8002952:	465d      	mov	r5, fp
 8002954:	0033      	movs	r3, r6
 8002956:	0f61      	lsrs	r1, r4, #29
 8002958:	00e2      	lsls	r2, r4, #3
 800295a:	0749      	lsls	r1, r1, #29
 800295c:	08d2      	lsrs	r2, r2, #3
 800295e:	430a      	orrs	r2, r1
 8002960:	e678      	b.n	8002654 <__aeabi_dsub+0x37c>
 8002962:	074b      	lsls	r3, r1, #29
 8002964:	08c2      	lsrs	r2, r0, #3
 8002966:	431a      	orrs	r2, r3
 8002968:	08cb      	lsrs	r3, r1, #3
 800296a:	e632      	b.n	80025d2 <__aeabi_dsub+0x2fa>
 800296c:	4448      	add	r0, r9
 800296e:	185b      	adds	r3, r3, r1
 8002970:	4548      	cmp	r0, r9
 8002972:	4192      	sbcs	r2, r2
 8002974:	4698      	mov	r8, r3
 8002976:	4252      	negs	r2, r2
 8002978:	4490      	add	r8, r2
 800297a:	4643      	mov	r3, r8
 800297c:	0004      	movs	r4, r0
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	d400      	bmi.n	8002984 <__aeabi_dsub+0x6ac>
 8002982:	e61a      	b.n	80025ba <__aeabi_dsub+0x2e2>
 8002984:	4642      	mov	r2, r8
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <__aeabi_dsub+0x6e8>)
 8002988:	2601      	movs	r6, #1
 800298a:	401a      	ands	r2, r3
 800298c:	4690      	mov	r8, r2
 800298e:	e614      	b.n	80025ba <__aeabi_dsub+0x2e2>
 8002990:	4666      	mov	r6, ip
 8002992:	001f      	movs	r7, r3
 8002994:	3e20      	subs	r6, #32
 8002996:	40f7      	lsrs	r7, r6
 8002998:	2c20      	cmp	r4, #32
 800299a:	d005      	beq.n	80029a8 <__aeabi_dsub+0x6d0>
 800299c:	2640      	movs	r6, #64	; 0x40
 800299e:	1b36      	subs	r6, r6, r4
 80029a0:	40b3      	lsls	r3, r6
 80029a2:	464c      	mov	r4, r9
 80029a4:	431c      	orrs	r4, r3
 80029a6:	46a2      	mov	sl, r4
 80029a8:	4654      	mov	r4, sl
 80029aa:	1e63      	subs	r3, r4, #1
 80029ac:	419c      	sbcs	r4, r3
 80029ae:	433c      	orrs	r4, r7
 80029b0:	e5c8      	b.n	8002544 <__aeabi_dsub+0x26c>
 80029b2:	0011      	movs	r1, r2
 80029b4:	2300      	movs	r3, #0
 80029b6:	2200      	movs	r2, #0
 80029b8:	e532      	b.n	8002420 <__aeabi_dsub+0x148>
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	000007ff 	.word	0x000007ff
 80029c0:	ff7fffff 	.word	0xff7fffff
 80029c4:	000007fe 	.word	0x000007fe
 80029c8:	464a      	mov	r2, r9
 80029ca:	1814      	adds	r4, r2, r0
 80029cc:	4284      	cmp	r4, r0
 80029ce:	4192      	sbcs	r2, r2
 80029d0:	185b      	adds	r3, r3, r1
 80029d2:	4698      	mov	r8, r3
 80029d4:	4252      	negs	r2, r2
 80029d6:	4490      	add	r8, r2
 80029d8:	e5e9      	b.n	80025ae <__aeabi_dsub+0x2d6>
 80029da:	4642      	mov	r2, r8
 80029dc:	4322      	orrs	r2, r4
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x70a>
 80029e0:	e6a6      	b.n	8002730 <__aeabi_dsub+0x458>
 80029e2:	e5ea      	b.n	80025ba <__aeabi_dsub+0x2e2>
 80029e4:	074b      	lsls	r3, r1, #29
 80029e6:	08c2      	lsrs	r2, r0, #3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	08cb      	lsrs	r3, r1, #3
 80029ec:	e632      	b.n	8002654 <__aeabi_dsub+0x37c>
 80029ee:	2200      	movs	r2, #0
 80029f0:	4901      	ldr	r1, [pc, #4]	; (80029f8 <__aeabi_dsub+0x720>)
 80029f2:	0013      	movs	r3, r2
 80029f4:	e514      	b.n	8002420 <__aeabi_dsub+0x148>
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	000007ff 	.word	0x000007ff

080029fc <__aeabi_dcmpun>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	0005      	movs	r5, r0
 8002a00:	480c      	ldr	r0, [pc, #48]	; (8002a34 <__aeabi_dcmpun+0x38>)
 8002a02:	030c      	lsls	r4, r1, #12
 8002a04:	0016      	movs	r6, r2
 8002a06:	0049      	lsls	r1, r1, #1
 8002a08:	031a      	lsls	r2, r3, #12
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	0b24      	lsrs	r4, r4, #12
 8002a0e:	0d49      	lsrs	r1, r1, #21
 8002a10:	0b12      	lsrs	r2, r2, #12
 8002a12:	0d5b      	lsrs	r3, r3, #21
 8002a14:	4281      	cmp	r1, r0
 8002a16:	d008      	beq.n	8002a2a <__aeabi_dcmpun+0x2e>
 8002a18:	4906      	ldr	r1, [pc, #24]	; (8002a34 <__aeabi_dcmpun+0x38>)
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	d103      	bne.n	8002a28 <__aeabi_dcmpun+0x2c>
 8002a20:	4332      	orrs	r2, r6
 8002a22:	0010      	movs	r0, r2
 8002a24:	1e42      	subs	r2, r0, #1
 8002a26:	4190      	sbcs	r0, r2
 8002a28:	bd70      	pop	{r4, r5, r6, pc}
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	432c      	orrs	r4, r5
 8002a2e:	d1fb      	bne.n	8002a28 <__aeabi_dcmpun+0x2c>
 8002a30:	e7f2      	b.n	8002a18 <__aeabi_dcmpun+0x1c>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000007ff 	.word	0x000007ff

08002a38 <__aeabi_d2iz>:
 8002a38:	000a      	movs	r2, r1
 8002a3a:	b530      	push	{r4, r5, lr}
 8002a3c:	4c13      	ldr	r4, [pc, #76]	; (8002a8c <__aeabi_d2iz+0x54>)
 8002a3e:	0053      	lsls	r3, r2, #1
 8002a40:	0309      	lsls	r1, r1, #12
 8002a42:	0005      	movs	r5, r0
 8002a44:	0b09      	lsrs	r1, r1, #12
 8002a46:	2000      	movs	r0, #0
 8002a48:	0d5b      	lsrs	r3, r3, #21
 8002a4a:	0fd2      	lsrs	r2, r2, #31
 8002a4c:	42a3      	cmp	r3, r4
 8002a4e:	dd04      	ble.n	8002a5a <__aeabi_d2iz+0x22>
 8002a50:	480f      	ldr	r0, [pc, #60]	; (8002a90 <__aeabi_d2iz+0x58>)
 8002a52:	4283      	cmp	r3, r0
 8002a54:	dd02      	ble.n	8002a5c <__aeabi_d2iz+0x24>
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <__aeabi_d2iz+0x5c>)
 8002a58:	18d0      	adds	r0, r2, r3
 8002a5a:	bd30      	pop	{r4, r5, pc}
 8002a5c:	2080      	movs	r0, #128	; 0x80
 8002a5e:	0340      	lsls	r0, r0, #13
 8002a60:	4301      	orrs	r1, r0
 8002a62:	480d      	ldr	r0, [pc, #52]	; (8002a98 <__aeabi_d2iz+0x60>)
 8002a64:	1ac0      	subs	r0, r0, r3
 8002a66:	281f      	cmp	r0, #31
 8002a68:	dd08      	ble.n	8002a7c <__aeabi_d2iz+0x44>
 8002a6a:	480c      	ldr	r0, [pc, #48]	; (8002a9c <__aeabi_d2iz+0x64>)
 8002a6c:	1ac3      	subs	r3, r0, r3
 8002a6e:	40d9      	lsrs	r1, r3
 8002a70:	000b      	movs	r3, r1
 8002a72:	4258      	negs	r0, r3
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d1f0      	bne.n	8002a5a <__aeabi_d2iz+0x22>
 8002a78:	0018      	movs	r0, r3
 8002a7a:	e7ee      	b.n	8002a5a <__aeabi_d2iz+0x22>
 8002a7c:	4c08      	ldr	r4, [pc, #32]	; (8002aa0 <__aeabi_d2iz+0x68>)
 8002a7e:	40c5      	lsrs	r5, r0
 8002a80:	46a4      	mov	ip, r4
 8002a82:	4463      	add	r3, ip
 8002a84:	4099      	lsls	r1, r3
 8002a86:	000b      	movs	r3, r1
 8002a88:	432b      	orrs	r3, r5
 8002a8a:	e7f2      	b.n	8002a72 <__aeabi_d2iz+0x3a>
 8002a8c:	000003fe 	.word	0x000003fe
 8002a90:	0000041d 	.word	0x0000041d
 8002a94:	7fffffff 	.word	0x7fffffff
 8002a98:	00000433 	.word	0x00000433
 8002a9c:	00000413 	.word	0x00000413
 8002aa0:	fffffbed 	.word	0xfffffbed

08002aa4 <__aeabi_i2d>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d016      	beq.n	8002ad8 <__aeabi_i2d+0x34>
 8002aaa:	17c3      	asrs	r3, r0, #31
 8002aac:	18c5      	adds	r5, r0, r3
 8002aae:	405d      	eors	r5, r3
 8002ab0:	0fc4      	lsrs	r4, r0, #31
 8002ab2:	0028      	movs	r0, r5
 8002ab4:	f000 f84c 	bl	8002b50 <__clzsi2>
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <__aeabi_i2d+0x5c>)
 8002aba:	1a12      	subs	r2, r2, r0
 8002abc:	280a      	cmp	r0, #10
 8002abe:	dc16      	bgt.n	8002aee <__aeabi_i2d+0x4a>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	002e      	movs	r6, r5
 8002ac4:	3315      	adds	r3, #21
 8002ac6:	409e      	lsls	r6, r3
 8002ac8:	230b      	movs	r3, #11
 8002aca:	1a18      	subs	r0, r3, r0
 8002acc:	40c5      	lsrs	r5, r0
 8002ace:	0553      	lsls	r3, r2, #21
 8002ad0:	032d      	lsls	r5, r5, #12
 8002ad2:	0b2d      	lsrs	r5, r5, #12
 8002ad4:	0d5b      	lsrs	r3, r3, #21
 8002ad6:	e003      	b.n	8002ae0 <__aeabi_i2d+0x3c>
 8002ad8:	2400      	movs	r4, #0
 8002ada:	2300      	movs	r3, #0
 8002adc:	2500      	movs	r5, #0
 8002ade:	2600      	movs	r6, #0
 8002ae0:	051b      	lsls	r3, r3, #20
 8002ae2:	432b      	orrs	r3, r5
 8002ae4:	07e4      	lsls	r4, r4, #31
 8002ae6:	4323      	orrs	r3, r4
 8002ae8:	0030      	movs	r0, r6
 8002aea:	0019      	movs	r1, r3
 8002aec:	bd70      	pop	{r4, r5, r6, pc}
 8002aee:	380b      	subs	r0, #11
 8002af0:	4085      	lsls	r5, r0
 8002af2:	0553      	lsls	r3, r2, #21
 8002af4:	032d      	lsls	r5, r5, #12
 8002af6:	2600      	movs	r6, #0
 8002af8:	0b2d      	lsrs	r5, r5, #12
 8002afa:	0d5b      	lsrs	r3, r3, #21
 8002afc:	e7f0      	b.n	8002ae0 <__aeabi_i2d+0x3c>
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	0000041e 	.word	0x0000041e

08002b04 <__aeabi_ui2d>:
 8002b04:	b510      	push	{r4, lr}
 8002b06:	1e04      	subs	r4, r0, #0
 8002b08:	d010      	beq.n	8002b2c <__aeabi_ui2d+0x28>
 8002b0a:	f000 f821 	bl	8002b50 <__clzsi2>
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <__aeabi_ui2d+0x48>)
 8002b10:	1a1b      	subs	r3, r3, r0
 8002b12:	280a      	cmp	r0, #10
 8002b14:	dc11      	bgt.n	8002b3a <__aeabi_ui2d+0x36>
 8002b16:	220b      	movs	r2, #11
 8002b18:	0021      	movs	r1, r4
 8002b1a:	1a12      	subs	r2, r2, r0
 8002b1c:	40d1      	lsrs	r1, r2
 8002b1e:	3015      	adds	r0, #21
 8002b20:	030a      	lsls	r2, r1, #12
 8002b22:	055b      	lsls	r3, r3, #21
 8002b24:	4084      	lsls	r4, r0
 8002b26:	0b12      	lsrs	r2, r2, #12
 8002b28:	0d5b      	lsrs	r3, r3, #21
 8002b2a:	e001      	b.n	8002b30 <__aeabi_ui2d+0x2c>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2200      	movs	r2, #0
 8002b30:	051b      	lsls	r3, r3, #20
 8002b32:	4313      	orrs	r3, r2
 8002b34:	0020      	movs	r0, r4
 8002b36:	0019      	movs	r1, r3
 8002b38:	bd10      	pop	{r4, pc}
 8002b3a:	0022      	movs	r2, r4
 8002b3c:	380b      	subs	r0, #11
 8002b3e:	4082      	lsls	r2, r0
 8002b40:	055b      	lsls	r3, r3, #21
 8002b42:	0312      	lsls	r2, r2, #12
 8002b44:	2400      	movs	r4, #0
 8002b46:	0b12      	lsrs	r2, r2, #12
 8002b48:	0d5b      	lsrs	r3, r3, #21
 8002b4a:	e7f1      	b.n	8002b30 <__aeabi_ui2d+0x2c>
 8002b4c:	0000041e 	.word	0x0000041e

08002b50 <__clzsi2>:
 8002b50:	211c      	movs	r1, #28
 8002b52:	2301      	movs	r3, #1
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	4298      	cmp	r0, r3
 8002b58:	d301      	bcc.n	8002b5e <__clzsi2+0xe>
 8002b5a:	0c00      	lsrs	r0, r0, #16
 8002b5c:	3910      	subs	r1, #16
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	4298      	cmp	r0, r3
 8002b62:	d301      	bcc.n	8002b68 <__clzsi2+0x18>
 8002b64:	0a00      	lsrs	r0, r0, #8
 8002b66:	3908      	subs	r1, #8
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	4298      	cmp	r0, r3
 8002b6c:	d301      	bcc.n	8002b72 <__clzsi2+0x22>
 8002b6e:	0900      	lsrs	r0, r0, #4
 8002b70:	3904      	subs	r1, #4
 8002b72:	a202      	add	r2, pc, #8	; (adr r2, 8002b7c <__clzsi2+0x2c>)
 8002b74:	5c10      	ldrb	r0, [r2, r0]
 8002b76:	1840      	adds	r0, r0, r1
 8002b78:	4770      	bx	lr
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	02020304 	.word	0x02020304
 8002b80:	01010101 	.word	0x01010101
	...

08002b8c <__clzdi2>:
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	2900      	cmp	r1, #0
 8002b90:	d103      	bne.n	8002b9a <__clzdi2+0xe>
 8002b92:	f7ff ffdd 	bl	8002b50 <__clzsi2>
 8002b96:	3020      	adds	r0, #32
 8002b98:	e002      	b.n	8002ba0 <__clzdi2+0x14>
 8002b9a:	1c08      	adds	r0, r1, #0
 8002b9c:	f7ff ffd8 	bl	8002b50 <__clzsi2>
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)

08002ba4 <bq_init>:
#include "stm32l0xx_hal.h"
#include "i2c.h"

#define I2C hi2c1

int bq_init(){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	// return BAT_INIT_FAIL if not able to init (BAT_INIT_SUCCESS for success)

	/* === Set BQ Max Battery Capacity === */
	if (BQ27441_setCapacity(BAT_CAP_MAX) != BAT_INIT_SUCCESS) return BAT_INIT_FAIL;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <bq_init+0x20>)
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f80c 	bl	8002bc8 <BQ27441_setCapacity>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d002      	beq.n	8002bbc <bq_init+0x18>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	425b      	negs	r3, r3
 8002bba:	e000      	b.n	8002bbe <bq_init+0x1a>
//	retval = BQ27441_writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
//	if (retval != BAT_INIT_SUCCESS)
//		return BAT_INIT_FAIL;


	return BAT_INIT_SUCCESS;
 8002bbc:	2301      	movs	r3, #1
}
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	00001130 	.word	0x00001130

08002bc8 <BQ27441_setCapacity>:
 ************************** Initialization Functions *************************
 *****************************************************************************/

// Configures the design capacity of the connected battery.
int BQ27441_setCapacity(uint16_t capacity)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	0002      	movs	r2, r0
 8002bd0:	1dbb      	adds	r3, r7, #6
 8002bd2:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0A (10)
	// Design capacity is a 2-byte piece of data - MSB first
	// Unit: mAh

	uint8_t capMSB = capacity >> 8;
 8002bd4:	1dbb      	adds	r3, r7, #6
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	200f      	movs	r0, #15
 8002bde:	183b      	adds	r3, r7, r0
 8002be0:	701a      	strb	r2, [r3, #0]
	uint8_t capLSB = capacity & 0x00FF;
 8002be2:	240e      	movs	r4, #14
 8002be4:	193b      	adds	r3, r7, r4
 8002be6:	1dba      	adds	r2, r7, #6
 8002be8:	8812      	ldrh	r2, [r2, #0]
 8002bea:	701a      	strb	r2, [r3, #0]
	uint8_t capacityData[2] = {capLSB, capMSB};
 8002bec:	210c      	movs	r1, #12
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	193a      	adds	r2, r7, r4
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	183a      	adds	r2, r7, r0
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	705a      	strb	r2, [r3, #1]
	return BQ27441_writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
 8002bfe:	187a      	adds	r2, r7, r1
 8002c00:	2302      	movs	r3, #2
 8002c02:	210a      	movs	r1, #10
 8002c04:	2052      	movs	r0, #82	; 0x52
 8002c06:	f000 f925 	bl	8002e54 <BQ27441_writeExtendedData>
 8002c0a:	0003      	movs	r3, r0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b005      	add	sp, #20
 8002c12:	bd90      	pop	{r4, r7, pc}

08002c14 <BQ27441_voltage>:
/*****************************************************************************
 ********************** Battery Characteristics Functions ********************
 *****************************************************************************/
// Reads and returns the battery voltage
uint16_t BQ27441_voltage(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
	return BQ27441_readWord(BQ27441_COMMAND_VOLTAGE);
 8002c18:	2004      	movs	r0, #4
 8002c1a:	f000 f983 	bl	8002f24 <BQ27441_readWord>
 8002c1e:	0003      	movs	r3, r0
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <BQ27441_current>:

// Reads and returns the specified current measurement
int16_t BQ27441_current(current_measure type)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	701a      	strb	r2, [r3, #0]
	int16_t current = 0;
 8002c32:	230e      	movs	r3, #14
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	2200      	movs	r2, #0
 8002c38:	801a      	strh	r2, [r3, #0]
	switch (type)
 8002c3a:	1dfb      	adds	r3, r7, #7
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d017      	beq.n	8002c72 <BQ27441_current+0x4c>
 8002c42:	dc1f      	bgt.n	8002c84 <BQ27441_current+0x5e>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <BQ27441_current+0x28>
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d009      	beq.n	8002c60 <BQ27441_current+0x3a>
 8002c4c:	e01a      	b.n	8002c84 <BQ27441_current+0x5e>
	{
	case AVG:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_CURRENT);
 8002c4e:	2010      	movs	r0, #16
 8002c50:	f000 f968 	bl	8002f24 <BQ27441_readWord>
 8002c54:	0003      	movs	r3, r0
 8002c56:	001a      	movs	r2, r3
 8002c58:	230e      	movs	r3, #14
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	801a      	strh	r2, [r3, #0]
		break;
 8002c5e:	e011      	b.n	8002c84 <BQ27441_current+0x5e>
	case STBY:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_STDBY_CURRENT);
 8002c60:	2012      	movs	r0, #18
 8002c62:	f000 f95f 	bl	8002f24 <BQ27441_readWord>
 8002c66:	0003      	movs	r3, r0
 8002c68:	001a      	movs	r2, r3
 8002c6a:	230e      	movs	r3, #14
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	801a      	strh	r2, [r3, #0]
		break;
 8002c70:	e008      	b.n	8002c84 <BQ27441_current+0x5e>
	case MAX:
		current = (int16_t) BQ27441_readWord(BQ27441_COMMAND_MAX_CURRENT);
 8002c72:	2014      	movs	r0, #20
 8002c74:	f000 f956 	bl	8002f24 <BQ27441_readWord>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	230e      	movs	r3, #14
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	801a      	strh	r2, [r3, #0]
		break;
 8002c82:	46c0      	nop			; (mov r8, r8)
	}

	return current;
 8002c84:	230e      	movs	r3, #14
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	2200      	movs	r2, #0
 8002c8a:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <BQ27441_capacity>:

// Reads and returns the specified capacity measurement
uint16_t BQ27441_capacity(capacity_measure type)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	1dfb      	adds	r3, r7, #7
 8002c9e:	701a      	strb	r2, [r3, #0]
	uint16_t capacity = 0;
 8002ca0:	230e      	movs	r3, #14
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	801a      	strh	r2, [r3, #0]
	switch (type)
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d845      	bhi.n	8002d3c <BQ27441_capacity+0xa8>
 8002cb0:	009a      	lsls	r2, r3, #2
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <BQ27441_capacity+0xb8>)
 8002cb4:	18d3      	adds	r3, r2, r3
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	469f      	mov	pc, r3
	{
	case REMAIN:
		return BQ27441_readWord(BQ27441_COMMAND_REM_CAPACITY);
 8002cba:	200c      	movs	r0, #12
 8002cbc:	f000 f932 	bl	8002f24 <BQ27441_readWord>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	e03e      	b.n	8002d42 <BQ27441_capacity+0xae>
		break;
	case FULL:
		return BQ27441_readWord(BQ27441_COMMAND_FULL_CAPACITY);
 8002cc4:	200e      	movs	r0, #14
 8002cc6:	f000 f92d 	bl	8002f24 <BQ27441_readWord>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	e039      	b.n	8002d42 <BQ27441_capacity+0xae>
		break;
	case AVAIL:
		capacity = BQ27441_readWord(BQ27441_COMMAND_NOM_CAPACITY);
 8002cce:	230e      	movs	r3, #14
 8002cd0:	18fc      	adds	r4, r7, r3
 8002cd2:	2008      	movs	r0, #8
 8002cd4:	f000 f926 	bl	8002f24 <BQ27441_readWord>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	8023      	strh	r3, [r4, #0]
		break;
 8002cdc:	e02e      	b.n	8002d3c <BQ27441_capacity+0xa8>
	case AVAIL_FULL:
		capacity = BQ27441_readWord(BQ27441_COMMAND_AVAIL_CAPACITY);
 8002cde:	230e      	movs	r3, #14
 8002ce0:	18fc      	adds	r4, r7, r3
 8002ce2:	200a      	movs	r0, #10
 8002ce4:	f000 f91e 	bl	8002f24 <BQ27441_readWord>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	8023      	strh	r3, [r4, #0]
		break;
 8002cec:	e026      	b.n	8002d3c <BQ27441_capacity+0xa8>
	case REMAIN_F:
		capacity = BQ27441_readWord(BQ27441_COMMAND_REM_CAP_FIL);
 8002cee:	230e      	movs	r3, #14
 8002cf0:	18fc      	adds	r4, r7, r3
 8002cf2:	202a      	movs	r0, #42	; 0x2a
 8002cf4:	f000 f916 	bl	8002f24 <BQ27441_readWord>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	8023      	strh	r3, [r4, #0]
		break;
 8002cfc:	e01e      	b.n	8002d3c <BQ27441_capacity+0xa8>
	case REMAIN_UF:
		capacity = BQ27441_readWord(BQ27441_COMMAND_REM_CAP_UNFL);
 8002cfe:	230e      	movs	r3, #14
 8002d00:	18fc      	adds	r4, r7, r3
 8002d02:	2028      	movs	r0, #40	; 0x28
 8002d04:	f000 f90e 	bl	8002f24 <BQ27441_readWord>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	8023      	strh	r3, [r4, #0]
		break;
 8002d0c:	e016      	b.n	8002d3c <BQ27441_capacity+0xa8>
	case FULL_F:
		capacity = BQ27441_readWord(BQ27441_COMMAND_FULL_CAP_FIL);
 8002d0e:	230e      	movs	r3, #14
 8002d10:	18fc      	adds	r4, r7, r3
 8002d12:	202e      	movs	r0, #46	; 0x2e
 8002d14:	f000 f906 	bl	8002f24 <BQ27441_readWord>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	8023      	strh	r3, [r4, #0]
		break;
 8002d1c:	e00e      	b.n	8002d3c <BQ27441_capacity+0xa8>
	case FULL_UF:
		capacity = BQ27441_readWord(BQ27441_COMMAND_FULL_CAP_UNFL);
 8002d1e:	230e      	movs	r3, #14
 8002d20:	18fc      	adds	r4, r7, r3
 8002d22:	202c      	movs	r0, #44	; 0x2c
 8002d24:	f000 f8fe 	bl	8002f24 <BQ27441_readWord>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	8023      	strh	r3, [r4, #0]
		break;
 8002d2c:	e006      	b.n	8002d3c <BQ27441_capacity+0xa8>
	case DESIGN:
		capacity = BQ27441_readWord(BQ27441_EXTENDED_CAPACITY);
 8002d2e:	230e      	movs	r3, #14
 8002d30:	18fc      	adds	r4, r7, r3
 8002d32:	203c      	movs	r0, #60	; 0x3c
 8002d34:	f000 f8f6 	bl	8002f24 <BQ27441_readWord>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	8023      	strh	r3, [r4, #0]
//		capacity = BQ27441_readWord(0x4A);
	}

	return capacity;
 8002d3c:	230e      	movs	r3, #14
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	881b      	ldrh	r3, [r3, #0]
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b005      	add	sp, #20
 8002d48:	bd90      	pop	{r4, r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	0800a1b0 	.word	0x0800a1b0

08002d50 <BQ27441_power>:

// Reads and returns measured average power
int16_t BQ27441_power(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	return (int16_t) BQ27441_readWord(BQ27441_COMMAND_AVG_POWER);
 8002d54:	2018      	movs	r0, #24
 8002d56:	f000 f8e5 	bl	8002f24 <BQ27441_readWord>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	b21b      	sxth	r3, r3
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <BQ27441_soc>:

// Reads and returns specified state of charge measurement
uint16_t BQ27441_soc(soc_measure type)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	1dfb      	adds	r3, r7, #7
 8002d6e:	701a      	strb	r2, [r3, #0]
	uint16_t socRet = 0;
 8002d70:	230e      	movs	r3, #14
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2200      	movs	r2, #0
 8002d76:	801a      	strh	r2, [r3, #0]
	switch (type)
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <BQ27441_soc+0x22>
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d008      	beq.n	8002d96 <BQ27441_soc+0x32>
 8002d84:	e00f      	b.n	8002da6 <BQ27441_soc+0x42>
	{
	case FILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC);
 8002d86:	230e      	movs	r3, #14
 8002d88:	18fc      	adds	r4, r7, r3
 8002d8a:	201c      	movs	r0, #28
 8002d8c:	f000 f8ca 	bl	8002f24 <BQ27441_readWord>
 8002d90:	0003      	movs	r3, r0
 8002d92:	8023      	strh	r3, [r4, #0]
		break;
 8002d94:	e007      	b.n	8002da6 <BQ27441_soc+0x42>
	case UNFILTERED:
		socRet = BQ27441_readWord(BQ27441_COMMAND_SOC_UNFL);
 8002d96:	230e      	movs	r3, #14
 8002d98:	18fc      	adds	r4, r7, r3
 8002d9a:	2030      	movs	r0, #48	; 0x30
 8002d9c:	f000 f8c2 	bl	8002f24 <BQ27441_readWord>
 8002da0:	0003      	movs	r3, r0
 8002da2:	8023      	strh	r3, [r4, #0]
		break;
 8002da4:	46c0      	nop			; (mov r8, r8)
	}

	return socRet;
 8002da6:	230e      	movs	r3, #14
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	881b      	ldrh	r3, [r3, #0]
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b005      	add	sp, #20
 8002db2:	bd90      	pop	{r4, r7, pc}

08002db4 <BQ27441_soh>:

// Reads and returns specified state of health measurement
uint8_t BQ27441_soh(soh_measure type)
{
 8002db4:	b5b0      	push	{r4, r5, r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	0002      	movs	r2, r0
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	701a      	strb	r2, [r3, #0]
	uint16_t sohRaw = BQ27441_readWord(BQ27441_COMMAND_SOH);
 8002dc0:	250e      	movs	r5, #14
 8002dc2:	197c      	adds	r4, r7, r5
 8002dc4:	2020      	movs	r0, #32
 8002dc6:	f000 f8ad 	bl	8002f24 <BQ27441_readWord>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	8023      	strh	r3, [r4, #0]
	uint8_t sohStatus = sohRaw >> 8;
 8002dce:	0029      	movs	r1, r5
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	230d      	movs	r3, #13
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	701a      	strb	r2, [r3, #0]
	uint8_t sohPercent = sohRaw & 0x00FF;
 8002dde:	200c      	movs	r0, #12
 8002de0:	183b      	adds	r3, r7, r0
 8002de2:	187a      	adds	r2, r7, r1
 8002de4:	8812      	ldrh	r2, [r2, #0]
 8002de6:	701a      	strb	r2, [r3, #0]

	if (type == PERCENT)
 8002de8:	1dfb      	adds	r3, r7, #7
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <BQ27441_soh+0x42>
		return sohPercent;
 8002df0:	183b      	adds	r3, r7, r0
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	e002      	b.n	8002dfc <BQ27441_soh+0x48>
	else
		return sohStatus;
 8002df6:	230d      	movs	r3, #13
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	781b      	ldrb	r3, [r3, #0]
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bdb0      	pop	{r4, r5, r7, pc}

08002e04 <BQ27441_temperature>:

// Reads and returns specified temperature measurement
uint16_t BQ27441_temperature(temp_measure type)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	701a      	strb	r2, [r3, #0]
	uint16_t temp = 0;
 8002e10:	230e      	movs	r3, #14
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2200      	movs	r2, #0
 8002e16:	801a      	strh	r2, [r3, #0]
	switch (type)
 8002e18:	1dfb      	adds	r3, r7, #7
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <BQ27441_temperature+0x22>
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d008      	beq.n	8002e36 <BQ27441_temperature+0x32>
 8002e24:	e00f      	b.n	8002e46 <BQ27441_temperature+0x42>
	{
	case BATTERY:
		temp = BQ27441_readWord(BQ27441_COMMAND_TEMP);
 8002e26:	230e      	movs	r3, #14
 8002e28:	18fc      	adds	r4, r7, r3
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	f000 f87a 	bl	8002f24 <BQ27441_readWord>
 8002e30:	0003      	movs	r3, r0
 8002e32:	8023      	strh	r3, [r4, #0]
		break;
 8002e34:	e007      	b.n	8002e46 <BQ27441_temperature+0x42>
	case INTERNAL_TEMP:
		temp = BQ27441_readWord(BQ27441_COMMAND_INT_TEMP);
 8002e36:	230e      	movs	r3, #14
 8002e38:	18fc      	adds	r4, r7, r3
 8002e3a:	201e      	movs	r0, #30
 8002e3c:	f000 f872 	bl	8002f24 <BQ27441_readWord>
 8002e40:	0003      	movs	r3, r0
 8002e42:	8023      	strh	r3, [r4, #0]
		break;
 8002e44:	46c0      	nop			; (mov r8, r8)
	}
	return temp;
 8002e46:	230e      	movs	r3, #14
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	881b      	ldrh	r3, [r3, #0]
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b005      	add	sp, #20
 8002e52:	bd90      	pop	{r4, r7, pc}

08002e54 <BQ27441_writeExtendedData>:
 *****************************************************************************/

// Write a specified number of bytes to extended data specifying a
// class ID, position offset.
int BQ27441_writeExtendedData(uint8_t classID, uint8_t offset, uint8_t * data, uint8_t len)
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	0004      	movs	r4, r0
 8002e5c:	0008      	movs	r0, r1
 8002e5e:	603a      	str	r2, [r7, #0]
 8002e60:	0019      	movs	r1, r3
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	1c22      	adds	r2, r4, #0
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	1dbb      	adds	r3, r7, #6
 8002e6a:	1c02      	adds	r2, r0, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	1d7b      	adds	r3, r7, #5
 8002e70:	1c0a      	adds	r2, r1, #0
 8002e72:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;	// I2C return status

	if (len > 32)
 8002e74:	1d7b      	adds	r3, r7, #5
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d902      	bls.n	8002e82 <BQ27441_writeExtendedData+0x2e>
		return BAT_INIT_FAIL;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	425b      	negs	r3, r3
 8002e80:	e04c      	b.n	8002f1c <BQ27441_writeExtendedData+0xc8>

	ret = BQ27441_blockDataControl();
 8002e82:	250b      	movs	r5, #11
 8002e84:	197c      	adds	r4, r7, r5
 8002e86:	f000 f873 	bl	8002f70 <BQ27441_blockDataControl>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) // // enable block data memory control
 8002e8e:	197b      	adds	r3, r7, r5
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <BQ27441_writeExtendedData+0x48>
		return BAT_INIT_FAIL; // Return false if enable fails
 8002e96:	2301      	movs	r3, #1
 8002e98:	425b      	negs	r3, r3
 8002e9a:	e03f      	b.n	8002f1c <BQ27441_writeExtendedData+0xc8>
	if (BQ27441_blockDataClass(classID) != HAL_OK) // Write class ID using DataBlockClass()
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 f87f 	bl	8002fa4 <BQ27441_blockDataClass>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d002      	beq.n	8002eb0 <BQ27441_writeExtendedData+0x5c>
		return BAT_INIT_FAIL;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	425b      	negs	r3, r3
 8002eae:	e035      	b.n	8002f1c <BQ27441_writeExtendedData+0xc8>

	BQ27441_blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
 8002eb0:	1dbb      	adds	r3, r7, #6
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 f88d 	bl	8002fd8 <BQ27441_blockDataOffset>
	BQ27441_computeBlockChecksum(); // Compute checksum going in
 8002ebe:	f000 f8bd 	bl	800303c <BQ27441_computeBlockChecksum>
	uint8_t oldCsum = BQ27441_blockDataChecksum();
 8002ec2:	230a      	movs	r3, #10
 8002ec4:	18fc      	adds	r4, r7, r3
 8002ec6:	f000 f8a1 	bl	800300c <BQ27441_blockDataChecksum>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	7023      	strb	r3, [r4, #0]

	// Write data bytes:
	for (int i = 0; i < len; i++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e012      	b.n	8002efa <BQ27441_writeExtendedData+0xa6>
	{
		// Write to offset, mod 32 if offset is greater than 32
		// The blockDataOffset above sets the 32-bit block
		BQ27441_writeBlockData((offset % 32) + i, data[i]);
 8002ed4:	1dbb      	adds	r3, r7, #6
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	221f      	movs	r2, #31
 8002eda:	4013      	ands	r3, r2
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	18d3      	adds	r3, r2, r3
 8002ee4:	b2d8      	uxtb	r0, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	18d3      	adds	r3, r2, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	0019      	movs	r1, r3
 8002ef0:	f000 f8f4 	bl	80030dc <BQ27441_writeBlockData>
	for (int i = 0; i < len; i++)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	1d7b      	adds	r3, r7, #5
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	dbe7      	blt.n	8002ed4 <BQ27441_writeExtendedData+0x80>
	}

	// Write new checksum using BlockDataChecksum (0x60)
	uint8_t newCsum = BQ27441_computeBlockChecksum(); // Compute the new checksum
 8002f04:	2509      	movs	r5, #9
 8002f06:	197c      	adds	r4, r7, r5
 8002f08:	f000 f898 	bl	800303c <BQ27441_computeBlockChecksum>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	7023      	strb	r3, [r4, #0]
	BQ27441_writeBlockChecksum(newCsum);
 8002f10:	197b      	adds	r3, r7, r5
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 f8c7 	bl	80030a8 <BQ27441_writeBlockChecksum>


	return BAT_INIT_SUCCESS;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bdb0      	pop	{r4, r5, r7, pc}

08002f24 <BQ27441_readWord>:

// Read a 16-bit command word from the BQ27441-G1A
uint16_t BQ27441_readWord(uint16_t subAddress)
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af04      	add	r7, sp, #16
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
//	i2cReadBytes(subAddress, data, 2);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), subAddress, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8002f30:	1dbb      	adds	r3, r7, #6
 8002f32:	881a      	ldrh	r2, [r3, #0]
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <BQ27441_readWord+0x48>)
 8002f36:	2301      	movs	r3, #1
 8002f38:	425b      	negs	r3, r3
 8002f3a:	9302      	str	r3, [sp, #8]
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	240c      	movs	r4, #12
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2301      	movs	r3, #1
 8002f48:	21aa      	movs	r1, #170	; 0xaa
 8002f4a:	f001 feb1 	bl	8004cb0 <HAL_I2C_Mem_Read>
	return ((uint16_t) data[1] << 8) | data[0];
 8002f4e:	0021      	movs	r1, r4
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	b21a      	sxth	r2, r3
 8002f58:	187b      	adds	r3, r7, r1
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	b29b      	uxth	r3, r3
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b005      	add	sp, #20
 8002f6a:	bd90      	pop	{r4, r7, pc}
 8002f6c:	20000204 	.word	0x20000204

08002f70 <BQ27441_blockDataControl>:

// Issue a BlockDataControl() command to enable BlockData access
HAL_StatusTypeDef BQ27441_blockDataControl(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af04      	add	r7, sp, #16
	uint8_t enableByte = 0x00;
 8002f76:	1dfb      	adds	r3, r7, #7
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_CONTROL, &enableByte, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CONTROL, I2C_MEMADD_SIZE_8BIT, &enableByte, 1, HAL_MAX_DELAY);
 8002f7c:	4808      	ldr	r0, [pc, #32]	; (8002fa0 <BQ27441_blockDataControl+0x30>)
 8002f7e:	2301      	movs	r3, #1
 8002f80:	425b      	negs	r3, r3
 8002f82:	9302      	str	r3, [sp, #8]
 8002f84:	2301      	movs	r3, #1
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	1dfb      	adds	r3, r7, #7
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	2261      	movs	r2, #97	; 0x61
 8002f90:	21aa      	movs	r1, #170	; 0xaa
 8002f92:	f001 fd5f 	bl	8004a54 <HAL_I2C_Mem_Write>
 8002f96:	0003      	movs	r3, r0
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000204 	.word	0x20000204

08002fa4 <BQ27441_blockDataClass>:

// Issue a DataClass() command to set the data class to be accessed
HAL_StatusTypeDef BQ27441_blockDataClass(uint8_t id)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af04      	add	r7, sp, #16
 8002faa:	0002      	movs	r2, r0
 8002fac:	1dfb      	adds	r3, r7, #7
 8002fae:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_DATACLASS, &id, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_DATACLASS, I2C_MEMADD_SIZE_8BIT, &id, 1, HAL_MAX_DELAY);
 8002fb0:	4808      	ldr	r0, [pc, #32]	; (8002fd4 <BQ27441_blockDataClass+0x30>)
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	425b      	negs	r3, r3
 8002fb6:	9302      	str	r3, [sp, #8]
 8002fb8:	2301      	movs	r3, #1
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	223e      	movs	r2, #62	; 0x3e
 8002fc4:	21aa      	movs	r1, #170	; 0xaa
 8002fc6:	f001 fd45 	bl	8004a54 <HAL_I2C_Mem_Write>
 8002fca:	0003      	movs	r3, r0

}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000204 	.word	0x20000204

08002fd8 <BQ27441_blockDataOffset>:

// Issue a DataBlock() command to set the data block to be accessed
HAL_StatusTypeDef BQ27441_blockDataOffset(uint8_t offset)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af04      	add	r7, sp, #16
 8002fde:	0002      	movs	r2, r0
 8002fe0:	1dfb      	adds	r3, r7, #7
 8002fe2:	701a      	strb	r2, [r3, #0]
//	return i2cWriteBytes(BQ27441_EXTENDED_DATABLOCK, &offset, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_DATABLOCK, I2C_MEMADD_SIZE_8BIT, &offset, 1, HAL_MAX_DELAY);
 8002fe4:	4808      	ldr	r0, [pc, #32]	; (8003008 <BQ27441_blockDataOffset+0x30>)
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	425b      	negs	r3, r3
 8002fea:	9302      	str	r3, [sp, #8]
 8002fec:	2301      	movs	r3, #1
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	1dfb      	adds	r3, r7, #7
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	223f      	movs	r2, #63	; 0x3f
 8002ff8:	21aa      	movs	r1, #170	; 0xaa
 8002ffa:	f001 fd2b 	bl	8004a54 <HAL_I2C_Mem_Write>
 8002ffe:	0003      	movs	r3, r0

}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000204 	.word	0x20000204

0800300c <BQ27441_blockDataChecksum>:

// Read the current checksum using BlockDataCheckSum()
uint8_t BQ27441_blockDataChecksum(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af04      	add	r7, sp, #16
	uint8_t csum;
//	i2cReadBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, &csum, 1, HAL_MAX_DELAY);
 8003012:	4809      	ldr	r0, [pc, #36]	; (8003038 <BQ27441_blockDataChecksum+0x2c>)
 8003014:	2301      	movs	r3, #1
 8003016:	425b      	negs	r3, r3
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	2301      	movs	r3, #1
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2301      	movs	r3, #1
 8003024:	2260      	movs	r2, #96	; 0x60
 8003026:	21aa      	movs	r1, #170	; 0xaa
 8003028:	f001 fe42 	bl	8004cb0 <HAL_I2C_Mem_Read>
	return csum;
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	781b      	ldrb	r3, [r3, #0]
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000204 	.word	0x20000204

0800303c <BQ27441_computeBlockChecksum>:

// Read all 32 bytes of the loaded extended data and compute a
// checksum based on the values.
uint8_t BQ27441_computeBlockChecksum(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08e      	sub	sp, #56	; 0x38
 8003040:	af04      	add	r7, sp, #16
	uint8_t data[32];
	// i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);
	HAL_I2C_Mem_Read(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, data, 32, HAL_MAX_DELAY);
 8003042:	4818      	ldr	r0, [pc, #96]	; (80030a4 <BQ27441_computeBlockChecksum+0x68>)
 8003044:	2301      	movs	r3, #1
 8003046:	425b      	negs	r3, r3
 8003048:	9302      	str	r3, [sp, #8]
 800304a:	2320      	movs	r3, #32
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	003b      	movs	r3, r7
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2301      	movs	r3, #1
 8003054:	2260      	movs	r2, #96	; 0x60
 8003056:	21aa      	movs	r1, #170	; 0xaa
 8003058:	f001 fe2a 	bl	8004cb0 <HAL_I2C_Mem_Read>


	uint8_t csum = 0;
 800305c:	2327      	movs	r3, #39	; 0x27
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
 8003064:	2300      	movs	r3, #0
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	e00c      	b.n	8003084 <BQ27441_computeBlockChecksum+0x48>
	{
		csum += data[i];
 800306a:	003a      	movs	r2, r7
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	18d3      	adds	r3, r2, r3
 8003070:	7819      	ldrb	r1, [r3, #0]
 8003072:	2227      	movs	r2, #39	; 0x27
 8003074:	18bb      	adds	r3, r7, r2
 8003076:	18ba      	adds	r2, r7, r2
 8003078:	7812      	ldrb	r2, [r2, #0]
 800307a:	188a      	adds	r2, r1, r2
 800307c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	3301      	adds	r3, #1
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	2b1f      	cmp	r3, #31
 8003088:	ddef      	ble.n	800306a <BQ27441_computeBlockChecksum+0x2e>
	}
	csum = 255 - csum;
 800308a:	2127      	movs	r1, #39	; 0x27
 800308c:	187b      	adds	r3, r7, r1
 800308e:	187a      	adds	r2, r7, r1
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	43d2      	mvns	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

	return csum;
 8003096:	187b      	adds	r3, r7, r1
 8003098:	781b      	ldrb	r3, [r3, #0]
}
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b00a      	add	sp, #40	; 0x28
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	20000204 	.word	0x20000204

080030a8 <BQ27441_writeBlockChecksum>:

// Use the BlockDataCheckSum() command to write a checksum value
HAL_StatusTypeDef BQ27441_writeBlockChecksum(uint8_t csum)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af04      	add	r7, sp, #16
 80030ae:	0002      	movs	r2, r0
 80030b0:	1dfb      	adds	r3, r7, #7
 80030b2:	701a      	strb	r2, [r3, #0]
	//return i2cWriteBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), BQ27441_EXTENDED_CHECKSUM, I2C_MEMADD_SIZE_8BIT, &csum, 1, HAL_MAX_DELAY);
 80030b4:	4808      	ldr	r0, [pc, #32]	; (80030d8 <BQ27441_writeBlockChecksum+0x30>)
 80030b6:	2301      	movs	r3, #1
 80030b8:	425b      	negs	r3, r3
 80030ba:	9302      	str	r3, [sp, #8]
 80030bc:	2301      	movs	r3, #1
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	1dfb      	adds	r3, r7, #7
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2301      	movs	r3, #1
 80030c6:	2260      	movs	r2, #96	; 0x60
 80030c8:	21aa      	movs	r1, #170	; 0xaa
 80030ca:	f001 fcc3 	bl	8004a54 <HAL_I2C_Mem_Write>
 80030ce:	0003      	movs	r3, r0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000204 	.word	0x20000204

080030dc <BQ27441_writeBlockData>:

// Use BlockData() to write a byte to an offset of the loaded data
HAL_StatusTypeDef BQ27441_writeBlockData(uint8_t offset, uint8_t data)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	0002      	movs	r2, r0
 80030e4:	1dfb      	adds	r3, r7, #7
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	1dbb      	adds	r3, r7, #6
 80030ea:	1c0a      	adds	r2, r1, #0
 80030ec:	701a      	strb	r2, [r3, #0]
	uint8_t address = offset + BQ27441_EXTENDED_BLOCKDATA;
 80030ee:	210f      	movs	r1, #15
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	1dfa      	adds	r2, r7, #7
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	3240      	adds	r2, #64	; 0x40
 80030f8:	701a      	strb	r2, [r3, #0]
	//return i2cWriteBytes(address, &data, 1);
	return HAL_I2C_Mem_Write(&I2C, (BQ_ADDR << 1), address, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	4808      	ldr	r0, [pc, #32]	; (8003124 <BQ27441_writeBlockData+0x48>)
 8003102:	2301      	movs	r3, #1
 8003104:	425b      	negs	r3, r3
 8003106:	9302      	str	r3, [sp, #8]
 8003108:	2301      	movs	r3, #1
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	1dbb      	adds	r3, r7, #6
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2301      	movs	r3, #1
 8003112:	21aa      	movs	r1, #170	; 0xaa
 8003114:	f001 fc9e 	bl	8004a54 <HAL_I2C_Mem_Write>
 8003118:	0003      	movs	r3, r0

}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	20000204 	.word	0x20000204

08003128 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MX_GPIO_Init+0x40>)
 8003130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <MX_GPIO_Init+0x40>)
 8003134:	2101      	movs	r1, #1
 8003136:	430a      	orrs	r2, r1
 8003138:	62da      	str	r2, [r3, #44]	; 0x2c
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <MX_GPIO_Init+0x40>)
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	2201      	movs	r2, #1
 8003140:	4013      	ands	r3, r2
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <MX_GPIO_Init+0x40>)
 8003148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <MX_GPIO_Init+0x40>)
 800314c:	2102      	movs	r1, #2
 800314e:	430a      	orrs	r2, r1
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <MX_GPIO_Init+0x40>)
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	683b      	ldr	r3, [r7, #0]

}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b002      	add	sp, #8
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	40021000 	.word	0x40021000

0800316c <hts221_reboot>:
#include "stm32l0xx_hal.h"
#include "i2c.h"

#define I2C hi2c1

int hts221_reboot(){
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b087      	sub	sp, #28
 8003170:	af04      	add	r7, sp, #16
	uint8_t buf[1];			// read buffer

	/* === Reboot HTS221 === */

	//read register
	ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003172:	1dfc      	adds	r4, r7, #7
 8003174:	482a      	ldr	r0, [pc, #168]	; (8003220 <hts221_reboot+0xb4>)
 8003176:	2301      	movs	r3, #1
 8003178:	425b      	negs	r3, r3
 800317a:	9302      	str	r3, [sp, #8]
 800317c:	2301      	movs	r3, #1
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2301      	movs	r3, #1
 8003186:	2221      	movs	r2, #33	; 0x21
 8003188:	21be      	movs	r1, #190	; 0xbe
 800318a:	f001 fd91 	bl	8004cb0 <HAL_I2C_Mem_Read>
 800318e:	0003      	movs	r3, r0
 8003190:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8003192:	1dfb      	adds	r3, r7, #7
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <hts221_reboot+0x34>
		return HTS_REBOOT_FAIL;
 800319a:	2301      	movs	r3, #1
 800319c:	425b      	negs	r3, r3
 800319e:	e03b      	b.n	8003218 <hts221_reboot+0xac>
	}

	//write boot bit
	buf[0] |= HTS_CTRL_REG2_BOOT;
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	4252      	negs	r2, r2
 80031a8:	4313      	orrs	r3, r2
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(&I2C, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80031b0:	1dfc      	adds	r4, r7, #7
 80031b2:	481b      	ldr	r0, [pc, #108]	; (8003220 <hts221_reboot+0xb4>)
 80031b4:	2301      	movs	r3, #1
 80031b6:	425b      	negs	r3, r3
 80031b8:	9302      	str	r3, [sp, #8]
 80031ba:	2301      	movs	r3, #1
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2301      	movs	r3, #1
 80031c4:	2221      	movs	r2, #33	; 0x21
 80031c6:	21be      	movs	r1, #190	; 0xbe
 80031c8:	f001 fc44 	bl	8004a54 <HAL_I2C_Mem_Write>
 80031cc:	0003      	movs	r3, r0
 80031ce:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <hts221_reboot+0x72>
		return HTS_REBOOT_FAIL;
 80031d8:	2301      	movs	r3, #1
 80031da:	425b      	negs	r3, r3
 80031dc:	e01c      	b.n	8003218 <hts221_reboot+0xac>
	}

	//wait for device to restart + clear boot bit
	do{
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80031de:	1dfc      	adds	r4, r7, #7
 80031e0:	480f      	ldr	r0, [pc, #60]	; (8003220 <hts221_reboot+0xb4>)
 80031e2:	2301      	movs	r3, #1
 80031e4:	425b      	negs	r3, r3
 80031e6:	9302      	str	r3, [sp, #8]
 80031e8:	2301      	movs	r3, #1
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2301      	movs	r3, #1
 80031f2:	2221      	movs	r2, #33	; 0x21
 80031f4:	21be      	movs	r1, #190	; 0xbe
 80031f6:	f001 fd5b 	bl	8004cb0 <HAL_I2C_Mem_Read>
 80031fa:	0003      	movs	r3, r0
 80031fc:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 80031fe:	1dfb      	adds	r3, r7, #7
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <hts221_reboot+0xa0>
			return HTS_REBOOT_FAIL;
 8003206:	2301      	movs	r3, #1
 8003208:	425b      	negs	r3, r3
 800320a:	e005      	b.n	8003218 <hts221_reboot+0xac>
		}
	} while (buf[0] & HTS_CTRL_REG2_BOOT);
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	b25b      	sxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	dbe3      	blt.n	80031de <hts221_reboot+0x72>

//	printf("Rebooted\n");

	return HTS_REBOOT_SUCCESS;
 8003216:	2301      	movs	r3, #1

}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b003      	add	sp, #12
 800321e:	bd90      	pop	{r4, r7, pc}
 8003220:	20000204 	.word	0x20000204

08003224 <hts221_init>:

HTS_Cal * hts221_init () {
 8003224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003226:	b08f      	sub	sp, #60	; 0x3c
 8003228:	af04      	add	r7, sp, #16

	HAL_StatusTypeDef ret;	// I2C return status
	uint8_t buf[13];			// read buffer


	hts221_reboot();
 800322a:	f7ff ff9f 	bl	800316c <hts221_reboot>

	/* === Set HTS221 to wake mode === */
	buf[0] = HTS_CTRL_REG1_PD | HTS_CTRL_REG1_BUD;
 800322e:	003b      	movs	r3, r7
 8003230:	2284      	movs	r2, #132	; 0x84
 8003232:	701a      	strb	r2, [r3, #0]

//	ret = HAL_I2C_Master_Transmit(&I2C, (HTS_ADDR << 1), buf, 2, HAL_MAX_DELAY);
	ret = HAL_I2C_Mem_Write(&I2C, (HTS_ADDR << 1), HTS_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003234:	2527      	movs	r5, #39	; 0x27
 8003236:	197c      	adds	r4, r7, r5
 8003238:	48a5      	ldr	r0, [pc, #660]	; (80034d0 <hts221_init+0x2ac>)
 800323a:	2301      	movs	r3, #1
 800323c:	425b      	negs	r3, r3
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	2301      	movs	r3, #1
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	003b      	movs	r3, r7
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2301      	movs	r3, #1
 800324a:	2220      	movs	r2, #32
 800324c:	21be      	movs	r1, #190	; 0xbe
 800324e:	f001 fc01 	bl	8004a54 <HAL_I2C_Mem_Write>
 8003252:	0003      	movs	r3, r0
 8003254:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8003256:	197b      	adds	r3, r7, r5
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <hts221_init+0x3e>
		return NULL;
 800325e:	2300      	movs	r3, #0
 8003260:	e1f9      	b.n	8003656 <hts221_init+0x432>
	else  {
		/* === Read in temperature + humidity calibration data === */
		//Temp

		// buf[0] = T0_degC_x8
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_T0_degC_x8, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003262:	2527      	movs	r5, #39	; 0x27
 8003264:	197c      	adds	r4, r7, r5
 8003266:	489a      	ldr	r0, [pc, #616]	; (80034d0 <hts221_init+0x2ac>)
 8003268:	2301      	movs	r3, #1
 800326a:	425b      	negs	r3, r3
 800326c:	9302      	str	r3, [sp, #8]
 800326e:	2301      	movs	r3, #1
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	003b      	movs	r3, r7
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2301      	movs	r3, #1
 8003278:	2232      	movs	r2, #50	; 0x32
 800327a:	21be      	movs	r1, #190	; 0xbe
 800327c:	f001 fd18 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003280:	0003      	movs	r3, r0
 8003282:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8003284:	197b      	adds	r3, r7, r5
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <hts221_init+0x6c>
			return NULL;
 800328c:	2300      	movs	r3, #0
 800328e:	e1e2      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[1] = T1_degC_x8
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_T1_degC_x8, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8003290:	003b      	movs	r3, r7
 8003292:	3301      	adds	r3, #1
 8003294:	2527      	movs	r5, #39	; 0x27
 8003296:	197c      	adds	r4, r7, r5
 8003298:	488d      	ldr	r0, [pc, #564]	; (80034d0 <hts221_init+0x2ac>)
 800329a:	2201      	movs	r2, #1
 800329c:	4252      	negs	r2, r2
 800329e:	9202      	str	r2, [sp, #8]
 80032a0:	2201      	movs	r2, #1
 80032a2:	9201      	str	r2, [sp, #4]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2301      	movs	r3, #1
 80032a8:	2233      	movs	r2, #51	; 0x33
 80032aa:	21be      	movs	r1, #190	; 0xbe
 80032ac:	f001 fd00 	bl	8004cb0 <HAL_I2C_Mem_Read>
 80032b0:	0003      	movs	r3, r0
 80032b2:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 80032b4:	197b      	adds	r3, r7, r5
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <hts221_init+0x9c>
			return NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	e1ca      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[2] = T1_T0_msb
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_T1_T0_msb, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 80032c0:	003b      	movs	r3, r7
 80032c2:	3302      	adds	r3, #2
 80032c4:	2527      	movs	r5, #39	; 0x27
 80032c6:	197c      	adds	r4, r7, r5
 80032c8:	4881      	ldr	r0, [pc, #516]	; (80034d0 <hts221_init+0x2ac>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	4252      	negs	r2, r2
 80032ce:	9202      	str	r2, [sp, #8]
 80032d0:	2201      	movs	r2, #1
 80032d2:	9201      	str	r2, [sp, #4]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2301      	movs	r3, #1
 80032d8:	2235      	movs	r2, #53	; 0x35
 80032da:	21be      	movs	r1, #190	; 0xbe
 80032dc:	f001 fce8 	bl	8004cb0 <HAL_I2C_Mem_Read>
 80032e0:	0003      	movs	r3, r0
 80032e2:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 80032e4:	197b      	adds	r3, r7, r5
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <hts221_init+0xcc>
			return NULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e1b2      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[3] = HTS_CAL_T0_OUT_L
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 3, 1, HAL_MAX_DELAY);
 80032f0:	003b      	movs	r3, r7
 80032f2:	3303      	adds	r3, #3
 80032f4:	2527      	movs	r5, #39	; 0x27
 80032f6:	197c      	adds	r4, r7, r5
 80032f8:	4875      	ldr	r0, [pc, #468]	; (80034d0 <hts221_init+0x2ac>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	4252      	negs	r2, r2
 80032fe:	9202      	str	r2, [sp, #8]
 8003300:	2201      	movs	r2, #1
 8003302:	9201      	str	r2, [sp, #4]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2301      	movs	r3, #1
 8003308:	223c      	movs	r2, #60	; 0x3c
 800330a:	21be      	movs	r1, #190	; 0xbe
 800330c:	f001 fcd0 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003310:	0003      	movs	r3, r0
 8003312:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8003314:	197b      	adds	r3, r7, r5
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <hts221_init+0xfc>
			return NULL;
 800331c:	2300      	movs	r3, #0
 800331e:	e19a      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[4] = HTS_CAL_T0_OUT_H
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 4, 1, HAL_MAX_DELAY);
 8003320:	003b      	movs	r3, r7
 8003322:	3304      	adds	r3, #4
 8003324:	2527      	movs	r5, #39	; 0x27
 8003326:	197c      	adds	r4, r7, r5
 8003328:	4869      	ldr	r0, [pc, #420]	; (80034d0 <hts221_init+0x2ac>)
 800332a:	2201      	movs	r2, #1
 800332c:	4252      	negs	r2, r2
 800332e:	9202      	str	r2, [sp, #8]
 8003330:	2201      	movs	r2, #1
 8003332:	9201      	str	r2, [sp, #4]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2301      	movs	r3, #1
 8003338:	223d      	movs	r2, #61	; 0x3d
 800333a:	21be      	movs	r1, #190	; 0xbe
 800333c:	f001 fcb8 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003340:	0003      	movs	r3, r0
 8003342:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8003344:	197b      	adds	r3, r7, r5
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <hts221_init+0x12c>
			return NULL;
 800334c:	2300      	movs	r3, #0
 800334e:	e182      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[5] = HTS_CAL_T1_OUT_L
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_T1_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 5, 1, HAL_MAX_DELAY);
 8003350:	003b      	movs	r3, r7
 8003352:	3305      	adds	r3, #5
 8003354:	2527      	movs	r5, #39	; 0x27
 8003356:	197c      	adds	r4, r7, r5
 8003358:	485d      	ldr	r0, [pc, #372]	; (80034d0 <hts221_init+0x2ac>)
 800335a:	2201      	movs	r2, #1
 800335c:	4252      	negs	r2, r2
 800335e:	9202      	str	r2, [sp, #8]
 8003360:	2201      	movs	r2, #1
 8003362:	9201      	str	r2, [sp, #4]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2301      	movs	r3, #1
 8003368:	223e      	movs	r2, #62	; 0x3e
 800336a:	21be      	movs	r1, #190	; 0xbe
 800336c:	f001 fca0 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003370:	0003      	movs	r3, r0
 8003372:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8003374:	197b      	adds	r3, r7, r5
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <hts221_init+0x15c>
			return NULL;
 800337c:	2300      	movs	r3, #0
 800337e:	e16a      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[6] = HTS_CAL_T1_OUT_H
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_T1_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 6, 1, HAL_MAX_DELAY);
 8003380:	003b      	movs	r3, r7
 8003382:	3306      	adds	r3, #6
 8003384:	2527      	movs	r5, #39	; 0x27
 8003386:	197c      	adds	r4, r7, r5
 8003388:	4851      	ldr	r0, [pc, #324]	; (80034d0 <hts221_init+0x2ac>)
 800338a:	2201      	movs	r2, #1
 800338c:	4252      	negs	r2, r2
 800338e:	9202      	str	r2, [sp, #8]
 8003390:	2201      	movs	r2, #1
 8003392:	9201      	str	r2, [sp, #4]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	2301      	movs	r3, #1
 8003398:	223f      	movs	r2, #63	; 0x3f
 800339a:	21be      	movs	r1, #190	; 0xbe
 800339c:	f001 fc88 	bl	8004cb0 <HAL_I2C_Mem_Read>
 80033a0:	0003      	movs	r3, r0
 80033a2:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 80033a4:	197b      	adds	r3, r7, r5
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <hts221_init+0x18c>
			return NULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e152      	b.n	8003656 <hts221_init+0x432>
		}

		//Humidity

		// buf[7] = HTS_CAL_H0_T0_OUT_L
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 7, 1, HAL_MAX_DELAY);
 80033b0:	003b      	movs	r3, r7
 80033b2:	3307      	adds	r3, #7
 80033b4:	2527      	movs	r5, #39	; 0x27
 80033b6:	197c      	adds	r4, r7, r5
 80033b8:	4845      	ldr	r0, [pc, #276]	; (80034d0 <hts221_init+0x2ac>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	4252      	negs	r2, r2
 80033be:	9202      	str	r2, [sp, #8]
 80033c0:	2201      	movs	r2, #1
 80033c2:	9201      	str	r2, [sp, #4]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2301      	movs	r3, #1
 80033c8:	2236      	movs	r2, #54	; 0x36
 80033ca:	21be      	movs	r1, #190	; 0xbe
 80033cc:	f001 fc70 	bl	8004cb0 <HAL_I2C_Mem_Read>
 80033d0:	0003      	movs	r3, r0
 80033d2:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 80033d4:	197b      	adds	r3, r7, r5
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <hts221_init+0x1bc>
			return NULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	e13a      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[8] = HTS_CAL_H0_T0_OUT_H
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_H0_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 8, 1, HAL_MAX_DELAY);
 80033e0:	003b      	movs	r3, r7
 80033e2:	3308      	adds	r3, #8
 80033e4:	2527      	movs	r5, #39	; 0x27
 80033e6:	197c      	adds	r4, r7, r5
 80033e8:	4839      	ldr	r0, [pc, #228]	; (80034d0 <hts221_init+0x2ac>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	4252      	negs	r2, r2
 80033ee:	9202      	str	r2, [sp, #8]
 80033f0:	2201      	movs	r2, #1
 80033f2:	9201      	str	r2, [sp, #4]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2301      	movs	r3, #1
 80033f8:	2237      	movs	r2, #55	; 0x37
 80033fa:	21be      	movs	r1, #190	; 0xbe
 80033fc:	f001 fc58 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003400:	0003      	movs	r3, r0
 8003402:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8003404:	197b      	adds	r3, r7, r5
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <hts221_init+0x1ec>
			return NULL;
 800340c:	2300      	movs	r3, #0
 800340e:	e122      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[9] = HTS_CAL_H1_T0_OUT_L
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 9, 1, HAL_MAX_DELAY);
 8003410:	003b      	movs	r3, r7
 8003412:	3309      	adds	r3, #9
 8003414:	2527      	movs	r5, #39	; 0x27
 8003416:	197c      	adds	r4, r7, r5
 8003418:	482d      	ldr	r0, [pc, #180]	; (80034d0 <hts221_init+0x2ac>)
 800341a:	2201      	movs	r2, #1
 800341c:	4252      	negs	r2, r2
 800341e:	9202      	str	r2, [sp, #8]
 8003420:	2201      	movs	r2, #1
 8003422:	9201      	str	r2, [sp, #4]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2301      	movs	r3, #1
 8003428:	223a      	movs	r2, #58	; 0x3a
 800342a:	21be      	movs	r1, #190	; 0xbe
 800342c:	f001 fc40 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003430:	0003      	movs	r3, r0
 8003432:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8003434:	197b      	adds	r3, r7, r5
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <hts221_init+0x21c>
			return NULL;
 800343c:	2300      	movs	r3, #0
 800343e:	e10a      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[10] = HTS_CAL_H1_T0_OUT_H
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_H1_T0_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 10, 1, HAL_MAX_DELAY);
 8003440:	003b      	movs	r3, r7
 8003442:	330a      	adds	r3, #10
 8003444:	2527      	movs	r5, #39	; 0x27
 8003446:	197c      	adds	r4, r7, r5
 8003448:	4821      	ldr	r0, [pc, #132]	; (80034d0 <hts221_init+0x2ac>)
 800344a:	2201      	movs	r2, #1
 800344c:	4252      	negs	r2, r2
 800344e:	9202      	str	r2, [sp, #8]
 8003450:	2201      	movs	r2, #1
 8003452:	9201      	str	r2, [sp, #4]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2301      	movs	r3, #1
 8003458:	223b      	movs	r2, #59	; 0x3b
 800345a:	21be      	movs	r1, #190	; 0xbe
 800345c:	f001 fc28 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003460:	0003      	movs	r3, r0
 8003462:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8003464:	197b      	adds	r3, r7, r5
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <hts221_init+0x24c>
			return NULL;
 800346c:	2300      	movs	r3, #0
 800346e:	e0f2      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[11] = HTS_CAL_H0_rH_x2
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_H0_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 11, 1, HAL_MAX_DELAY);
 8003470:	003b      	movs	r3, r7
 8003472:	330b      	adds	r3, #11
 8003474:	2527      	movs	r5, #39	; 0x27
 8003476:	197c      	adds	r4, r7, r5
 8003478:	4815      	ldr	r0, [pc, #84]	; (80034d0 <hts221_init+0x2ac>)
 800347a:	2201      	movs	r2, #1
 800347c:	4252      	negs	r2, r2
 800347e:	9202      	str	r2, [sp, #8]
 8003480:	2201      	movs	r2, #1
 8003482:	9201      	str	r2, [sp, #4]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2301      	movs	r3, #1
 8003488:	2230      	movs	r2, #48	; 0x30
 800348a:	21be      	movs	r1, #190	; 0xbe
 800348c:	f001 fc10 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003490:	0003      	movs	r3, r0
 8003492:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8003494:	197b      	adds	r3, r7, r5
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <hts221_init+0x27c>
			return NULL;
 800349c:	2300      	movs	r3, #0
 800349e:	e0da      	b.n	8003656 <hts221_init+0x432>
		}

		// buf[12] = HTS_CAL_H1_rH_x2
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CAL_H1_rH_x2, I2C_MEMADD_SIZE_8BIT, buf + 12, 1, HAL_MAX_DELAY);
 80034a0:	003b      	movs	r3, r7
 80034a2:	330c      	adds	r3, #12
 80034a4:	2527      	movs	r5, #39	; 0x27
 80034a6:	197c      	adds	r4, r7, r5
 80034a8:	4809      	ldr	r0, [pc, #36]	; (80034d0 <hts221_init+0x2ac>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	4252      	negs	r2, r2
 80034ae:	9202      	str	r2, [sp, #8]
 80034b0:	2201      	movs	r2, #1
 80034b2:	9201      	str	r2, [sp, #4]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	2301      	movs	r3, #1
 80034b8:	2231      	movs	r2, #49	; 0x31
 80034ba:	21be      	movs	r1, #190	; 0xbe
 80034bc:	f001 fbf8 	bl	8004cb0 <HAL_I2C_Mem_Read>
 80034c0:	0003      	movs	r3, r0
 80034c2:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 80034c4:	197b      	adds	r3, r7, r5
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <hts221_init+0x2b0>
			return NULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e0c2      	b.n	8003656 <hts221_init+0x432>
 80034d0:	20000204 	.word	0x20000204
		}

		/* === Process temperature + humidity calibration data === */

		uint16_t T0_degC_R32 = buf[0] >> 3; //divide x8 value by 8
 80034d4:	003b      	movs	r3, r7
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	08db      	lsrs	r3, r3, #3
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	2024      	movs	r0, #36	; 0x24
 80034de:	183b      	adds	r3, r7, r0
 80034e0:	801a      	strh	r2, [r3, #0]
		uint16_t T1_degC_R33 = buf[1] >> 3; //divide x8 value by 8
 80034e2:	003b      	movs	r3, r7
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	08db      	lsrs	r3, r3, #3
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	2522      	movs	r5, #34	; 0x22
 80034ec:	197b      	adds	r3, r7, r5
 80034ee:	801a      	strh	r2, [r3, #0]
		uint8_t T1_T0_msb 	= buf[2];
 80034f0:	2421      	movs	r4, #33	; 0x21
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	003a      	movs	r2, r7
 80034f6:	7892      	ldrb	r2, [r2, #2]
 80034f8:	701a      	strb	r2, [r3, #0]
		int16_t T0_OUT = (buf[3] | (buf[4] << 8)); // This should be signed int
 80034fa:	003b      	movs	r3, r7
 80034fc:	78db      	ldrb	r3, [r3, #3]
 80034fe:	b219      	sxth	r1, r3
 8003500:	003b      	movs	r3, r7
 8003502:	791b      	ldrb	r3, [r3, #4]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	b21a      	sxth	r2, r3
 8003508:	261e      	movs	r6, #30
 800350a:	19bb      	adds	r3, r7, r6
 800350c:	430a      	orrs	r2, r1
 800350e:	801a      	strh	r2, [r3, #0]
		int16_t T1_OUT = (buf[5] | (buf[6] << 8)); // This should be signed int
 8003510:	003b      	movs	r3, r7
 8003512:	795b      	ldrb	r3, [r3, #5]
 8003514:	b219      	sxth	r1, r3
 8003516:	003b      	movs	r3, r7
 8003518:	799b      	ldrb	r3, [r3, #6]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	b21a      	sxth	r2, r3
 800351e:	231c      	movs	r3, #28
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	430a      	orrs	r2, r1
 8003524:	801a      	strh	r2, [r3, #0]

		uint8_t H0_Rh_R30 = buf[11] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 8003526:	003b      	movs	r3, r7
 8003528:	7ada      	ldrb	r2, [r3, #11]
 800352a:	231b      	movs	r3, #27
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	0852      	lsrs	r2, r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
		uint8_t H1_Rh_R31 = buf[12] >> 1; //divide HTS_CAL_H0_rH_x2 by 2
 8003532:	003b      	movs	r3, r7
 8003534:	7b1a      	ldrb	r2, [r3, #12]
 8003536:	211a      	movs	r1, #26
 8003538:	187b      	adds	r3, r7, r1
 800353a:	0852      	lsrs	r2, r2, #1
 800353c:	701a      	strb	r2, [r3, #0]
		int16_t H0_T0_OUT = (buf[7] | (buf[8] << 8)); // This should be signed int
 800353e:	003b      	movs	r3, r7
 8003540:	79db      	ldrb	r3, [r3, #7]
 8003542:	b219      	sxth	r1, r3
 8003544:	003b      	movs	r3, r7
 8003546:	7a1b      	ldrb	r3, [r3, #8]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	b21a      	sxth	r2, r3
 800354c:	2318      	movs	r3, #24
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	430a      	orrs	r2, r1
 8003552:	801a      	strh	r2, [r3, #0]
		int16_t H1_T0_OUT = (buf[9] | (buf[10] << 8)); // This should be signed int
 8003554:	003b      	movs	r3, r7
 8003556:	7a5b      	ldrb	r3, [r3, #9]
 8003558:	b219      	sxth	r1, r3
 800355a:	003b      	movs	r3, r7
 800355c:	7a9b      	ldrb	r3, [r3, #10]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	b21a      	sxth	r2, r3
 8003562:	2316      	movs	r3, #22
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	430a      	orrs	r2, r1
 8003568:	801a      	strh	r2, [r3, #0]

		// add msb's for 10 bit values
		T0_degC_R32 |= (T1_T0_msb & 0b0011) << 8;
 800356a:	0021      	movs	r1, r4
 800356c:	187b      	adds	r3, r7, r1
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	b21a      	sxth	r2, r3
 8003574:	23c0      	movs	r3, #192	; 0xc0
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4013      	ands	r3, r2
 800357a:	b21a      	sxth	r2, r3
 800357c:	183b      	adds	r3, r7, r0
 800357e:	2400      	movs	r4, #0
 8003580:	5f1b      	ldrsh	r3, [r3, r4]
 8003582:	4313      	orrs	r3, r2
 8003584:	b21a      	sxth	r2, r3
 8003586:	0004      	movs	r4, r0
 8003588:	183b      	adds	r3, r7, r0
 800358a:	801a      	strh	r2, [r3, #0]
		T1_degC_R33 |= (T1_T0_msb & 0b1100) << 6;
 800358c:	187b      	adds	r3, r7, r1
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	019b      	lsls	r3, r3, #6
 8003592:	b21a      	sxth	r2, r3
 8003594:	23c0      	movs	r3, #192	; 0xc0
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4013      	ands	r3, r2
 800359a:	b21a      	sxth	r2, r3
 800359c:	197b      	adds	r3, r7, r5
 800359e:	2000      	movs	r0, #0
 80035a0:	5e1b      	ldrsh	r3, [r3, r0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	b21a      	sxth	r2, r3
 80035a6:	197b      	adds	r3, r7, r5
 80035a8:	801a      	strh	r2, [r3, #0]

		// init struct to store calibration data
		HTS_Cal * hts_cal_data = malloc(sizeof(HTS_Cal));
 80035aa:	2018      	movs	r0, #24
 80035ac:	f003 fe5e 	bl	800726c <malloc>
 80035b0:	0003      	movs	r3, r0
 80035b2:	613b      	str	r3, [r7, #16]

		// Store Temp
		hts_cal_data->T0_OUT = T0_OUT;
 80035b4:	19bb      	adds	r3, r7, r6
 80035b6:	2000      	movs	r0, #0
 80035b8:	5e1a      	ldrsh	r2, [r3, r0]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	601a      	str	r2, [r3, #0]
		hts_cal_data->temp_correction_factor = (float) (T1_degC_R33 - T0_degC_R32) / (T1_OUT - T0_OUT);
 80035be:	197b      	adds	r3, r7, r5
 80035c0:	881a      	ldrh	r2, [r3, #0]
 80035c2:	0025      	movs	r5, r4
 80035c4:	193b      	adds	r3, r7, r4
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7fd fc62 	bl	8000e94 <__aeabi_i2f>
 80035d0:	1c04      	adds	r4, r0, #0
 80035d2:	221c      	movs	r2, #28
 80035d4:	18bb      	adds	r3, r7, r2
 80035d6:	2000      	movs	r0, #0
 80035d8:	5e1a      	ldrsh	r2, [r3, r0]
 80035da:	19bb      	adds	r3, r7, r6
 80035dc:	2000      	movs	r0, #0
 80035de:	5e1b      	ldrsh	r3, [r3, r0]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fd fc56 	bl	8000e94 <__aeabi_i2f>
 80035e8:	1c03      	adds	r3, r0, #0
 80035ea:	1c19      	adds	r1, r3, #0
 80035ec:	1c20      	adds	r0, r4, #0
 80035ee:	f7fd fa0b 	bl	8000a08 <__aeabi_fdiv>
 80035f2:	1c03      	adds	r3, r0, #0
 80035f4:	1c1a      	adds	r2, r3, #0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	605a      	str	r2, [r3, #4]
		hts_cal_data->temp_offset = T0_degC_R32;
 80035fa:	197b      	adds	r3, r7, r5
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	609a      	str	r2, [r3, #8]

		//zeroed_temp = T_out - T0_Out
		//temp_adj = (zeroed_temp * correction_factor) + offset

		//Store Humid.
		hts_cal_data->H0_OUT = H0_T0_OUT;
 8003602:	2618      	movs	r6, #24
 8003604:	19bb      	adds	r3, r7, r6
 8003606:	2000      	movs	r0, #0
 8003608:	5e1a      	ldrsh	r2, [r3, r0]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	60da      	str	r2, [r3, #12]
		hts_cal_data->humid_correction_factor = (float) (H1_Rh_R31 - H0_Rh_R30) / (H1_T0_OUT - H0_T0_OUT);
 800360e:	211a      	movs	r1, #26
 8003610:	187b      	adds	r3, r7, r1
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	251b      	movs	r5, #27
 8003616:	197b      	adds	r3, r7, r5
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	0018      	movs	r0, r3
 800361e:	f7fd fc39 	bl	8000e94 <__aeabi_i2f>
 8003622:	1c04      	adds	r4, r0, #0
 8003624:	2316      	movs	r3, #22
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	2200      	movs	r2, #0
 800362a:	5e9a      	ldrsh	r2, [r3, r2]
 800362c:	19bb      	adds	r3, r7, r6
 800362e:	2100      	movs	r1, #0
 8003630:	5e5b      	ldrsh	r3, [r3, r1]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	0018      	movs	r0, r3
 8003636:	f7fd fc2d 	bl	8000e94 <__aeabi_i2f>
 800363a:	1c03      	adds	r3, r0, #0
 800363c:	1c19      	adds	r1, r3, #0
 800363e:	1c20      	adds	r0, r4, #0
 8003640:	f7fd f9e2 	bl	8000a08 <__aeabi_fdiv>
 8003644:	1c03      	adds	r3, r0, #0
 8003646:	1c1a      	adds	r2, r3, #0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	611a      	str	r2, [r3, #16]
		hts_cal_data->humid_offset = H0_Rh_R30;
 800364c:	197b      	adds	r3, r7, r5
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	615a      	str	r2, [r3, #20]

		return hts_cal_data;
 8003654:	693b      	ldr	r3, [r7, #16]
	}

	return NULL;
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b00b      	add	sp, #44	; 0x2c
 800365c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)

08003660 <hts221_get_temp>:

int hts221_get_temp(char unit, HTS_Cal * hts_cal_data){
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b08c      	sub	sp, #48	; 0x30
 8003664:	af04      	add	r7, sp, #16
 8003666:	0002      	movs	r2, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	1dfb      	adds	r3, r7, #7
 800366c:	701a      	strb	r2, [r3, #0]
	uint8_t buf[3];			// read buffer
	int16_t T_OUT;			// T_OUT raw temperature reading
	int temp_adj;			// calibrated temperature value

	/* === Start a temperature reading === */
	ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 800366e:	251f      	movs	r5, #31
 8003670:	197c      	adds	r4, r7, r5
 8003672:	4875      	ldr	r0, [pc, #468]	; (8003848 <hts221_get_temp+0x1e8>)
 8003674:	2301      	movs	r3, #1
 8003676:	425b      	negs	r3, r3
 8003678:	9302      	str	r3, [sp, #8]
 800367a:	2301      	movs	r3, #1
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	230c      	movs	r3, #12
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2301      	movs	r3, #1
 8003686:	2221      	movs	r2, #33	; 0x21
 8003688:	21be      	movs	r1, #190	; 0xbe
 800368a:	f001 fb11 	bl	8004cb0 <HAL_I2C_Mem_Read>
 800368e:	0003      	movs	r3, r0
 8003690:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8003692:	197b      	adds	r3, r7, r5
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <hts221_get_temp+0x3e>
		return TEMP_ERROR;
 800369a:	4b6c      	ldr	r3, [pc, #432]	; (800384c <hts221_get_temp+0x1ec>)
 800369c:	e0cf      	b.n	800383e <hts221_get_temp+0x1de>
	}

	buf[0] |= HTS_CTRL_REG2_ONE_SHOT;
 800369e:	210c      	movs	r1, #12
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2201      	movs	r2, #1
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(&I2C, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80036ae:	251f      	movs	r5, #31
 80036b0:	197c      	adds	r4, r7, r5
 80036b2:	4865      	ldr	r0, [pc, #404]	; (8003848 <hts221_get_temp+0x1e8>)
 80036b4:	2301      	movs	r3, #1
 80036b6:	425b      	negs	r3, r3
 80036b8:	9302      	str	r3, [sp, #8]
 80036ba:	2301      	movs	r3, #1
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	2301      	movs	r3, #1
 80036c4:	2221      	movs	r2, #33	; 0x21
 80036c6:	21be      	movs	r1, #190	; 0xbe
 80036c8:	f001 f9c4 	bl	8004a54 <HAL_I2C_Mem_Write>
 80036cc:	0003      	movs	r3, r0
 80036ce:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 80036d0:	197b      	adds	r3, r7, r5
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <hts221_get_temp+0x7c>
		return TEMP_ERROR;
 80036d8:	4b5c      	ldr	r3, [pc, #368]	; (800384c <hts221_get_temp+0x1ec>)
 80036da:	e0b0      	b.n	800383e <hts221_get_temp+0x1de>
	}

	// wait for one shot bit to clear by the hts
	do{
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80036dc:	251f      	movs	r5, #31
 80036de:	197c      	adds	r4, r7, r5
 80036e0:	4859      	ldr	r0, [pc, #356]	; (8003848 <hts221_get_temp+0x1e8>)
 80036e2:	2301      	movs	r3, #1
 80036e4:	425b      	negs	r3, r3
 80036e6:	9302      	str	r3, [sp, #8]
 80036e8:	2301      	movs	r3, #1
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	230c      	movs	r3, #12
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2301      	movs	r3, #1
 80036f4:	2221      	movs	r2, #33	; 0x21
 80036f6:	21be      	movs	r1, #190	; 0xbe
 80036f8:	f001 fada 	bl	8004cb0 <HAL_I2C_Mem_Read>
 80036fc:	0003      	movs	r3, r0
 80036fe:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8003700:	197b      	adds	r3, r7, r5
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <hts221_get_temp+0xac>
			return TEMP_ERROR;
 8003708:	4b50      	ldr	r3, [pc, #320]	; (800384c <hts221_get_temp+0x1ec>)
 800370a:	e098      	b.n	800383e <hts221_get_temp+0x1de>
		}
	} while (buf[0] & HTS_CTRL_REG2_ONE_SHOT);
 800370c:	210c      	movs	r1, #12
 800370e:	187b      	adds	r3, r7, r1
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	001a      	movs	r2, r3
 8003714:	2301      	movs	r3, #1
 8003716:	4013      	ands	r3, r2
 8003718:	d1e0      	bne.n	80036dc <hts221_get_temp+0x7c>

	/* === Read in temperature data === */

	//TODO check that this loop is right...
	// Try three times for temp data to be ready
	for (int i = 0; i < 3; ++i) {
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b02      	cmp	r3, #2
 8003722:	dc20      	bgt.n	8003766 <hts221_get_temp+0x106>
		// buf[0] = HTS_STATUS_REG
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003724:	251f      	movs	r5, #31
 8003726:	197c      	adds	r4, r7, r5
 8003728:	4847      	ldr	r0, [pc, #284]	; (8003848 <hts221_get_temp+0x1e8>)
 800372a:	2301      	movs	r3, #1
 800372c:	425b      	negs	r3, r3
 800372e:	9302      	str	r3, [sp, #8]
 8003730:	2301      	movs	r3, #1
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	187b      	adds	r3, r7, r1
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	2301      	movs	r3, #1
 800373a:	2227      	movs	r2, #39	; 0x27
 800373c:	21be      	movs	r1, #190	; 0xbe
 800373e:	f001 fab7 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003742:	0003      	movs	r3, r0
 8003744:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8003746:	197b      	adds	r3, r7, r5
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <hts221_get_temp+0xf2>
			return TEMP_ERROR;
 800374e:	4b3f      	ldr	r3, [pc, #252]	; (800384c <hts221_get_temp+0x1ec>)
 8003750:	e075      	b.n	800383e <hts221_get_temp+0x1de>
		}
		if (buf[0] & 1){
 8003752:	230c      	movs	r3, #12
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	001a      	movs	r2, r3
 800375a:	2301      	movs	r3, #1
 800375c:	4013      	ands	r3, r2
 800375e:	d101      	bne.n	8003764 <hts221_get_temp+0x104>
			// new temp. data ready
			break;
		}
		return TEMP_ERROR;
 8003760:	4b3a      	ldr	r3, [pc, #232]	; (800384c <hts221_get_temp+0x1ec>)
 8003762:	e06c      	b.n	800383e <hts221_get_temp+0x1de>
			break;
 8003764:	46c0      	nop			; (mov r8, r8)
	}

	// buf[1] = HTS_TEMP_OUT_L
	ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 8003766:	230c      	movs	r3, #12
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	3301      	adds	r3, #1
 800376c:	251f      	movs	r5, #31
 800376e:	197c      	adds	r4, r7, r5
 8003770:	4835      	ldr	r0, [pc, #212]	; (8003848 <hts221_get_temp+0x1e8>)
 8003772:	2201      	movs	r2, #1
 8003774:	4252      	negs	r2, r2
 8003776:	9202      	str	r2, [sp, #8]
 8003778:	2201      	movs	r2, #1
 800377a:	9201      	str	r2, [sp, #4]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2301      	movs	r3, #1
 8003780:	222a      	movs	r2, #42	; 0x2a
 8003782:	21be      	movs	r1, #190	; 0xbe
 8003784:	f001 fa94 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003788:	0003      	movs	r3, r0
 800378a:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 800378c:	197b      	adds	r3, r7, r5
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <hts221_get_temp+0x138>
		return TEMP_ERROR;
 8003794:	4b2d      	ldr	r3, [pc, #180]	; (800384c <hts221_get_temp+0x1ec>)
 8003796:	e052      	b.n	800383e <hts221_get_temp+0x1de>
	}

	// buf[2] = HTS_TEMP_OUT_H
	ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8003798:	230c      	movs	r3, #12
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	3302      	adds	r3, #2
 800379e:	251f      	movs	r5, #31
 80037a0:	197c      	adds	r4, r7, r5
 80037a2:	4829      	ldr	r0, [pc, #164]	; (8003848 <hts221_get_temp+0x1e8>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	4252      	negs	r2, r2
 80037a8:	9202      	str	r2, [sp, #8]
 80037aa:	2201      	movs	r2, #1
 80037ac:	9201      	str	r2, [sp, #4]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2301      	movs	r3, #1
 80037b2:	222b      	movs	r2, #43	; 0x2b
 80037b4:	21be      	movs	r1, #190	; 0xbe
 80037b6:	f001 fa7b 	bl	8004cb0 <HAL_I2C_Mem_Read>
 80037ba:	0003      	movs	r3, r0
 80037bc:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 80037be:	197b      	adds	r3, r7, r5
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <hts221_get_temp+0x16a>
		return TEMP_ERROR;
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <hts221_get_temp+0x1ec>)
 80037c8:	e039      	b.n	800383e <hts221_get_temp+0x1de>
	}

	T_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 80037ca:	220c      	movs	r2, #12
 80037cc:	18bb      	adds	r3, r7, r2
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	b219      	sxth	r1, r3
 80037d2:	18bb      	adds	r3, r7, r2
 80037d4:	789b      	ldrb	r3, [r3, #2]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	b21a      	sxth	r2, r3
 80037da:	2016      	movs	r0, #22
 80037dc:	183b      	adds	r3, r7, r0
 80037de:	430a      	orrs	r2, r1
 80037e0:	801a      	strh	r2, [r3, #0]

	temp_adj = hts221_calc_temp(T_OUT, hts_cal_data);
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	183b      	adds	r3, r7, r0
 80037e6:	2100      	movs	r1, #0
 80037e8:	5e5b      	ldrsh	r3, [r3, r1]
 80037ea:	0011      	movs	r1, r2
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 f835 	bl	800385c <hts221_calc_temp>
 80037f2:	0003      	movs	r3, r0
 80037f4:	613b      	str	r3, [r7, #16]

	// Return in correct units
	if (unit == 'F'){
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b46      	cmp	r3, #70	; 0x46
 80037fc:	d11e      	bne.n	800383c <hts221_get_temp+0x1dc>
		//Fahrenheit
		return (temp_adj * 9.0 / 5.0) + 32;
 80037fe:	6938      	ldr	r0, [r7, #16]
 8003800:	f7ff f950 	bl	8002aa4 <__aeabi_i2d>
 8003804:	2200      	movs	r2, #0
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <hts221_get_temp+0x1f0>)
 8003808:	f7fe fafa 	bl	8001e00 <__aeabi_dmul>
 800380c:	0002      	movs	r2, r0
 800380e:	000b      	movs	r3, r1
 8003810:	0010      	movs	r0, r2
 8003812:	0019      	movs	r1, r3
 8003814:	2200      	movs	r2, #0
 8003816:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <hts221_get_temp+0x1f4>)
 8003818:	f7fd feec 	bl	80015f4 <__aeabi_ddiv>
 800381c:	0002      	movs	r2, r0
 800381e:	000b      	movs	r3, r1
 8003820:	0010      	movs	r0, r2
 8003822:	0019      	movs	r1, r3
 8003824:	2200      	movs	r2, #0
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <hts221_get_temp+0x1f8>)
 8003828:	f7fd fb7a 	bl	8000f20 <__aeabi_dadd>
 800382c:	0002      	movs	r2, r0
 800382e:	000b      	movs	r3, r1
 8003830:	0010      	movs	r0, r2
 8003832:	0019      	movs	r1, r3
 8003834:	f7ff f900 	bl	8002a38 <__aeabi_d2iz>
 8003838:	0003      	movs	r3, r0
 800383a:	e000      	b.n	800383e <hts221_get_temp+0x1de>

	}
	else {
		//Celsius
		return temp_adj;
 800383c:	693b      	ldr	r3, [r7, #16]
	}

}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b008      	add	sp, #32
 8003844:	bdb0      	pop	{r4, r5, r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	20000204 	.word	0x20000204
 800384c:	fffffe34 	.word	0xfffffe34
 8003850:	40220000 	.word	0x40220000
 8003854:	40140000 	.word	0x40140000
 8003858:	40400000 	.word	0x40400000

0800385c <hts221_calc_temp>:

int hts221_calc_temp(int16_t T_OUT, HTS_Cal * hts_cal_data){
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	0002      	movs	r2, r0
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	1dbb      	adds	r3, r7, #6
 8003868:	801a      	strh	r2, [r3, #0]

	int zeroed_temp = T_OUT - hts_cal_data->T0_OUT;
 800386a:	1dbb      	adds	r3, r7, #6
 800386c:	2200      	movs	r2, #0
 800386e:	5e9a      	ldrsh	r2, [r3, r2]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	60fb      	str	r3, [r7, #12]
	int temp_adj = (zeroed_temp * hts_cal_data->temp_correction_factor) + hts_cal_data->temp_offset;
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7fd fb0b 	bl	8000e94 <__aeabi_i2f>
 800387e:	1c02      	adds	r2, r0, #0
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	1c19      	adds	r1, r3, #0
 8003886:	1c10      	adds	r0, r2, #0
 8003888:	f7fd f9ca 	bl	8000c20 <__aeabi_fmul>
 800388c:	1c03      	adds	r3, r0, #0
 800388e:	1c1c      	adds	r4, r3, #0
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fafd 	bl	8000e94 <__aeabi_i2f>
 800389a:	1c03      	adds	r3, r0, #0
 800389c:	1c19      	adds	r1, r3, #0
 800389e:	1c20      	adds	r0, r4, #0
 80038a0:	f7fc ff16 	bl	80006d0 <__aeabi_fadd>
 80038a4:	1c03      	adds	r3, r0, #0
 80038a6:	1c18      	adds	r0, r3, #0
 80038a8:	f7fd fad4 	bl	8000e54 <__aeabi_f2iz>
 80038ac:	0003      	movs	r3, r0
 80038ae:	60bb      	str	r3, [r7, #8]

	return temp_adj;
 80038b0:	68bb      	ldr	r3, [r7, #8]

}
 80038b2:	0018      	movs	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b005      	add	sp, #20
 80038b8:	bd90      	pop	{r4, r7, pc}
	...

080038bc <hts221_get_humid>:

int hts221_get_humid(HTS_Cal * hts_cal_data){
 80038bc:	b5b0      	push	{r4, r5, r7, lr}
 80038be:	b08c      	sub	sp, #48	; 0x30
 80038c0:	af04      	add	r7, sp, #16
 80038c2:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];			// read buffer
	int16_t H_OUT;			// H_OUT raw temperature reading
	int humid_adj;			// calibrated temperature value

	/* === Start a humidity reading === */
	buf[0] = HTS_CTRL_REG2_ONE_SHOT;
 80038c4:	210c      	movs	r1, #12
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Mem_Write(&I2C, (HTS_ADDR << 1), HTS_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80038cc:	251f      	movs	r5, #31
 80038ce:	197c      	adds	r4, r7, r5
 80038d0:	4846      	ldr	r0, [pc, #280]	; (80039ec <hts221_get_humid+0x130>)
 80038d2:	2301      	movs	r3, #1
 80038d4:	425b      	negs	r3, r3
 80038d6:	9302      	str	r3, [sp, #8]
 80038d8:	2301      	movs	r3, #1
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2301      	movs	r3, #1
 80038e2:	2221      	movs	r2, #33	; 0x21
 80038e4:	21be      	movs	r1, #190	; 0xbe
 80038e6:	f001 f8b5 	bl	8004a54 <HAL_I2C_Mem_Write>
 80038ea:	0003      	movs	r3, r0
 80038ec:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 80038ee:	197b      	adds	r3, r7, r5
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <hts221_get_humid+0x40>
		return HUMID_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	425b      	negs	r3, r3
 80038fa:	e073      	b.n	80039e4 <hts221_get_humid+0x128>

	/* === Read in humidity data === */

	//TODO check that this loop is right...
	// Try three times for temp data to be ready
	for (int i = 0; i < 3; ++i) {
 80038fc:	2300      	movs	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b02      	cmp	r3, #2
 8003904:	dc23      	bgt.n	800394e <hts221_get_humid+0x92>
		// buf[0] = HTS_STATUS_REG
		ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_STATUS_REG, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 8003906:	251f      	movs	r5, #31
 8003908:	197c      	adds	r4, r7, r5
 800390a:	4838      	ldr	r0, [pc, #224]	; (80039ec <hts221_get_humid+0x130>)
 800390c:	2301      	movs	r3, #1
 800390e:	425b      	negs	r3, r3
 8003910:	9302      	str	r3, [sp, #8]
 8003912:	2301      	movs	r3, #1
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	230c      	movs	r3, #12
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	2301      	movs	r3, #1
 800391e:	2227      	movs	r2, #39	; 0x27
 8003920:	21be      	movs	r1, #190	; 0xbe
 8003922:	f001 f9c5 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003926:	0003      	movs	r3, r0
 8003928:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 800392a:	197b      	adds	r3, r7, r5
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <hts221_get_humid+0x7c>
			return HUMID_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	425b      	negs	r3, r3
 8003936:	e055      	b.n	80039e4 <hts221_get_humid+0x128>
		}
		if (buf[0] & 2){
 8003938:	230c      	movs	r3, #12
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	001a      	movs	r2, r3
 8003940:	2302      	movs	r3, #2
 8003942:	4013      	ands	r3, r2
 8003944:	d102      	bne.n	800394c <hts221_get_humid+0x90>
			// new humid. data ready
			break;
		}
		return HUMID_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	425b      	negs	r3, r3
 800394a:	e04b      	b.n	80039e4 <hts221_get_humid+0x128>
			break;
 800394c:	46c0      	nop			; (mov r8, r8)
	}

	// buf[1] = HTS_HUMIDITY_OUT_L
	ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_L, I2C_MEMADD_SIZE_8BIT, buf + 1, 1, HAL_MAX_DELAY);
 800394e:	230c      	movs	r3, #12
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	3301      	adds	r3, #1
 8003954:	251f      	movs	r5, #31
 8003956:	197c      	adds	r4, r7, r5
 8003958:	4824      	ldr	r0, [pc, #144]	; (80039ec <hts221_get_humid+0x130>)
 800395a:	2201      	movs	r2, #1
 800395c:	4252      	negs	r2, r2
 800395e:	9202      	str	r2, [sp, #8]
 8003960:	2201      	movs	r2, #1
 8003962:	9201      	str	r2, [sp, #4]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2301      	movs	r3, #1
 8003968:	2228      	movs	r2, #40	; 0x28
 800396a:	21be      	movs	r1, #190	; 0xbe
 800396c:	f001 f9a0 	bl	8004cb0 <HAL_I2C_Mem_Read>
 8003970:	0003      	movs	r3, r0
 8003972:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8003974:	197b      	adds	r3, r7, r5
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <hts221_get_humid+0xc6>
		return HUMID_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	425b      	negs	r3, r3
 8003980:	e030      	b.n	80039e4 <hts221_get_humid+0x128>
	}

	// buf[2] = HTS_HUMIDITY_OUT_H
	ret = HAL_I2C_Mem_Read(&I2C, (HTS_ADDR << 1), HTS_HUMIDITY_OUT_H, I2C_MEMADD_SIZE_8BIT, buf + 2, 1, HAL_MAX_DELAY);
 8003982:	230c      	movs	r3, #12
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	3302      	adds	r3, #2
 8003988:	251f      	movs	r5, #31
 800398a:	197c      	adds	r4, r7, r5
 800398c:	4817      	ldr	r0, [pc, #92]	; (80039ec <hts221_get_humid+0x130>)
 800398e:	2201      	movs	r2, #1
 8003990:	4252      	negs	r2, r2
 8003992:	9202      	str	r2, [sp, #8]
 8003994:	2201      	movs	r2, #1
 8003996:	9201      	str	r2, [sp, #4]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2301      	movs	r3, #1
 800399c:	2229      	movs	r2, #41	; 0x29
 800399e:	21be      	movs	r1, #190	; 0xbe
 80039a0:	f001 f986 	bl	8004cb0 <HAL_I2C_Mem_Read>
 80039a4:	0003      	movs	r3, r0
 80039a6:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 80039a8:	197b      	adds	r3, r7, r5
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <hts221_get_humid+0xfa>
		return HUMID_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	425b      	negs	r3, r3
 80039b4:	e016      	b.n	80039e4 <hts221_get_humid+0x128>
	}

	H_OUT = buf[1] | (((uint16_t) buf[2]) << 8);
 80039b6:	220c      	movs	r2, #12
 80039b8:	18bb      	adds	r3, r7, r2
 80039ba:	785b      	ldrb	r3, [r3, #1]
 80039bc:	b219      	sxth	r1, r3
 80039be:	18bb      	adds	r3, r7, r2
 80039c0:	789b      	ldrb	r3, [r3, #2]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	b21a      	sxth	r2, r3
 80039c6:	2016      	movs	r0, #22
 80039c8:	183b      	adds	r3, r7, r0
 80039ca:	430a      	orrs	r2, r1
 80039cc:	801a      	strh	r2, [r3, #0]

	humid_adj = hts221_calc_humid(H_OUT, hts_cal_data);
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	183b      	adds	r3, r7, r0
 80039d2:	2100      	movs	r1, #0
 80039d4:	5e5b      	ldrsh	r3, [r3, r1]
 80039d6:	0011      	movs	r1, r2
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 f809 	bl	80039f0 <hts221_calc_humid>
 80039de:	0003      	movs	r3, r0
 80039e0:	613b      	str	r3, [r7, #16]

	return humid_adj;
 80039e2:	693b      	ldr	r3, [r7, #16]

}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b008      	add	sp, #32
 80039ea:	bdb0      	pop	{r4, r5, r7, pc}
 80039ec:	20000204 	.word	0x20000204

080039f0 <hts221_calc_humid>:

int hts221_calc_humid(int16_t H_OUT, HTS_Cal * hts_cal_data){
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	0002      	movs	r2, r0
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	1dbb      	adds	r3, r7, #6
 80039fc:	801a      	strh	r2, [r3, #0]

	int zeroed_humid = H_OUT - hts_cal_data->H0_OUT;
 80039fe:	1dbb      	adds	r3, r7, #6
 8003a00:	2200      	movs	r2, #0
 8003a02:	5e9a      	ldrsh	r2, [r3, r2]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	60fb      	str	r3, [r7, #12]
	int humid_adj = (zeroed_humid * hts_cal_data->humid_correction_factor) + hts_cal_data->humid_offset;
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f7fd fa41 	bl	8000e94 <__aeabi_i2f>
 8003a12:	1c02      	adds	r2, r0, #0
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	1c19      	adds	r1, r3, #0
 8003a1a:	1c10      	adds	r0, r2, #0
 8003a1c:	f7fd f900 	bl	8000c20 <__aeabi_fmul>
 8003a20:	1c03      	adds	r3, r0, #0
 8003a22:	1c1c      	adds	r4, r3, #0
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fd fa33 	bl	8000e94 <__aeabi_i2f>
 8003a2e:	1c03      	adds	r3, r0, #0
 8003a30:	1c19      	adds	r1, r3, #0
 8003a32:	1c20      	adds	r0, r4, #0
 8003a34:	f7fc fe4c 	bl	80006d0 <__aeabi_fadd>
 8003a38:	1c03      	adds	r3, r0, #0
 8003a3a:	1c18      	adds	r0, r3, #0
 8003a3c:	f7fd fa0a 	bl	8000e54 <__aeabi_f2iz>
 8003a40:	0003      	movs	r3, r0
 8003a42:	60bb      	str	r3, [r7, #8]

	return humid_adj;
 8003a44:	68bb      	ldr	r3, [r7, #8]

}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b005      	add	sp, #20
 8003a4c:	bd90      	pop	{r4, r7, pc}
	...

08003a50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a54:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a56:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <MX_I2C1_Init+0x7c>)
 8003a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8003a5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a5c:	22e1      	movs	r2, #225	; 0xe1
 8003a5e:	00d2      	lsls	r2, r2, #3
 8003a60:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a62:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a68:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a6e:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a74:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a7a:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 ff4a 	bl	8004928 <HAL_I2C_Init>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d001      	beq.n	8003a9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a98:	f000 f90a 	bl	8003cb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f001 fc77 	bl	8005394 <HAL_I2CEx_ConfigAnalogFilter>
 8003aa6:	1e03      	subs	r3, r0, #0
 8003aa8:	d001      	beq.n	8003aae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003aaa:	f000 f901 	bl	8003cb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <MX_I2C1_Init+0x78>)
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f001 fcba 	bl	800542c <HAL_I2CEx_ConfigDigitalFilter>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003abc:	f000 f8f8 	bl	8003cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	20000204 	.word	0x20000204
 8003acc:	40005400 	.word	0x40005400

08003ad0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b089      	sub	sp, #36	; 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad8:	240c      	movs	r4, #12
 8003ada:	193b      	adds	r3, r7, r4
 8003adc:	0018      	movs	r0, r3
 8003ade:	2314      	movs	r3, #20
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	f003 fbcc 	bl	8007280 <memset>
  if(i2cHandle->Instance==I2C1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <HAL_I2C_MspInit+0x7c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d128      	bne.n	8003b44 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af2:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <HAL_I2C_MspInit+0x80>)
 8003af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af6:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <HAL_I2C_MspInit+0x80>)
 8003af8:	2102      	movs	r1, #2
 8003afa:	430a      	orrs	r2, r1
 8003afc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003afe:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <HAL_I2C_MspInit+0x80>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	2202      	movs	r2, #2
 8003b04:	4013      	ands	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b0a:	0021      	movs	r1, r4
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	22c0      	movs	r2, #192	; 0xc0
 8003b10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b12:	187b      	adds	r3, r7, r1
 8003b14:	2212      	movs	r2, #18
 8003b16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	2203      	movs	r2, #3
 8003b22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003b24:	187b      	adds	r3, r7, r1
 8003b26:	2201      	movs	r2, #1
 8003b28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2a:	187b      	adds	r3, r7, r1
 8003b2c:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <HAL_I2C_MspInit+0x84>)
 8003b2e:	0019      	movs	r1, r3
 8003b30:	0010      	movs	r0, r2
 8003b32:	f000 fd83 	bl	800463c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_I2C_MspInit+0x80>)
 8003b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_I2C_MspInit+0x80>)
 8003b3c:	2180      	movs	r1, #128	; 0x80
 8003b3e:	0389      	lsls	r1, r1, #14
 8003b40:	430a      	orrs	r2, r1
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b009      	add	sp, #36	; 0x24
 8003b4a:	bd90      	pop	{r4, r7, pc}
 8003b4c:	40005400 	.word	0x40005400
 8003b50:	40021000 	.word	0x40021000
 8003b54:	50000400 	.word	0x50000400

08003b58 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <__io_putchar+0x20>)
 8003b62:	1d39      	adds	r1, r7, #4
 8003b64:	4805      	ldr	r0, [pc, #20]	; (8003b7c <__io_putchar+0x24>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	f002 fe94 	bl	8006894 <HAL_UART_Transmit>

  return ch;
 8003b6c:	687b      	ldr	r3, [r7, #4]
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b002      	add	sp, #8
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	0000ffff 	.word	0x0000ffff
 8003b7c:	20000298 	.word	0x20000298

08003b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b84:	f000 fc0c 	bl	80043a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b88:	f000 f824 	bl	8003bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b8c:	f7ff facc 	bl	8003128 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003b90:	f7ff ff5e 	bl	8003a50 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003b94:	f000 fad4 	bl	8004140 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003b98:	f000 fa76 	bl	8004088 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

//  HTS_Cal * hts_cal_data = hts221_init();

  puts("\033[2J\033[H"); // This clears the terminal
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <main+0x44>)
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f004 f924 	bl	8007dec <puts>

  hts_cal_data = hts221_init();
 8003ba4:	f7ff fb3e 	bl	8003224 <hts221_init>
 8003ba8:	0002      	movs	r2, r0
 8003baa:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <main+0x48>)
 8003bac:	601a      	str	r2, [r3, #0]
  bq_init_ret = bq_init();
 8003bae:	f7fe fff9 	bl	8002ba4 <bq_init>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <main+0x4c>)
 8003bb6:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim6);
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <main+0x50>)
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f002 fc0e 	bl	80063dc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003bc0:	e7fe      	b.n	8003bc0 <main+0x40>
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	08009ed0 	.word	0x08009ed0
 8003bc8:	20000250 	.word	0x20000250
 8003bcc:	20000254 	.word	0x20000254
 8003bd0:	20000258 	.word	0x20000258

08003bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b09d      	sub	sp, #116	; 0x74
 8003bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bda:	2438      	movs	r4, #56	; 0x38
 8003bdc:	193b      	adds	r3, r7, r4
 8003bde:	0018      	movs	r0, r3
 8003be0:	2338      	movs	r3, #56	; 0x38
 8003be2:	001a      	movs	r2, r3
 8003be4:	2100      	movs	r1, #0
 8003be6:	f003 fb4b 	bl	8007280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bea:	2324      	movs	r3, #36	; 0x24
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	0018      	movs	r0, r3
 8003bf0:	2314      	movs	r3, #20
 8003bf2:	001a      	movs	r2, r3
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	f003 fb43 	bl	8007280 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bfa:	003b      	movs	r3, r7
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	2324      	movs	r3, #36	; 0x24
 8003c00:	001a      	movs	r2, r3
 8003c02:	2100      	movs	r1, #0
 8003c04:	f003 fb3c 	bl	8007280 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c08:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <SystemClock_Config+0xd4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a27      	ldr	r2, [pc, #156]	; (8003cac <SystemClock_Config+0xd8>)
 8003c0e:	401a      	ands	r2, r3
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <SystemClock_Config+0xd4>)
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	0109      	lsls	r1, r1, #4
 8003c16:	430a      	orrs	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003c1a:	0021      	movs	r1, r4
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	2210      	movs	r2, #16
 8003c20:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	2201      	movs	r2, #1
 8003c26:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003c2e:	187b      	adds	r3, r7, r1
 8003c30:	22a0      	movs	r2, #160	; 0xa0
 8003c32:	0212      	lsls	r2, r2, #8
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	2200      	movs	r2, #0
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f001 fc40 	bl	80054c4 <HAL_RCC_OscConfig>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d001      	beq.n	8003c4c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003c48:	f000 f832 	bl	8003cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c4c:	2124      	movs	r1, #36	; 0x24
 8003c4e:	187b      	adds	r3, r7, r1
 8003c50:	220f      	movs	r2, #15
 8003c52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	2200      	movs	r2, #0
 8003c58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c5a:	187b      	adds	r3, r7, r1
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c60:	187b      	adds	r3, r7, r1
 8003c62:	2200      	movs	r2, #0
 8003c64:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c66:	187b      	adds	r3, r7, r1
 8003c68:	2200      	movs	r2, #0
 8003c6a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	2100      	movs	r1, #0
 8003c70:	0018      	movs	r0, r3
 8003c72:	f001 ffeb 	bl	8005c4c <HAL_RCC_ClockConfig>
 8003c76:	1e03      	subs	r3, r0, #0
 8003c78:	d001      	beq.n	8003c7e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003c7a:	f000 f819 	bl	8003cb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003c7e:	003b      	movs	r3, r7
 8003c80:	2209      	movs	r2, #9
 8003c82:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c84:	003b      	movs	r3, r7
 8003c86:	2200      	movs	r2, #0
 8003c88:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c8a:	003b      	movs	r3, r7
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c90:	003b      	movs	r3, r7
 8003c92:	0018      	movs	r0, r3
 8003c94:	f002 f9fe 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 8003c98:	1e03      	subs	r3, r0, #0
 8003c9a:	d001      	beq.n	8003ca0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003c9c:	f000 f808 	bl	8003cb0 <Error_Handler>
  }
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b01d      	add	sp, #116	; 0x74
 8003ca6:	bd90      	pop	{r4, r7, pc}
 8003ca8:	40007000 	.word	0x40007000
 8003cac:	ffffe7ff 	.word	0xffffe7ff

08003cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb4:	b672      	cpsid	i
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cb8:	e7fe      	b.n	8003cb8 <Error_Handler+0x8>
	...

08003cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <HAL_MspInit+0x24>)
 8003cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_MspInit+0x24>)
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <HAL_MspInit+0x24>)
 8003cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_MspInit+0x24>)
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	0549      	lsls	r1, r1, #21
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000

08003ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ce8:	e7fe      	b.n	8003ce8 <NMI_Handler+0x4>

08003cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cee:	e7fe      	b.n	8003cee <HardFault_Handler+0x4>

08003cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d08:	f000 fb9e 	bl	8004448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d1a:	4b68      	ldr	r3, [pc, #416]	; (8003ebc <TIM6_DAC_IRQHandler+0x1a8>)
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f002 fba9 	bl	8006474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  if (hts_cal_data != NULL){
 8003d22:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <TIM6_DAC_IRQHandler+0x1ac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d100      	bne.n	8003d2c <TIM6_DAC_IRQHandler+0x18>
 8003d2a:	e0c2      	b.n	8003eb2 <TIM6_DAC_IRQHandler+0x19e>

	  uint16_t proximity = VCNL4010_readProximity();
 8003d2c:	251e      	movs	r5, #30
 8003d2e:	197c      	adds	r4, r7, r5
 8003d30:	f000 fa7a 	bl	8004228 <VCNL4010_readProximity>
 8003d34:	0003      	movs	r3, r0
 8003d36:	8023      	strh	r3, [r4, #0]
	  printf("Proximity Reading is \t\t\t\t%d\r\n", proximity);
 8003d38:	197b      	adds	r3, r7, r5
 8003d3a:	881a      	ldrh	r2, [r3, #0]
 8003d3c:	4b61      	ldr	r3, [pc, #388]	; (8003ec4 <TIM6_DAC_IRQHandler+0x1b0>)
 8003d3e:	0011      	movs	r1, r2
 8003d40:	0018      	movs	r0, r3
 8003d42:	f003 ffc7 	bl	8007cd4 <iprintf>

	  int temp = hts221_get_temp('C', hts_cal_data);
 8003d46:	4b5e      	ldr	r3, [pc, #376]	; (8003ec0 <TIM6_DAC_IRQHandler+0x1ac>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	2043      	movs	r0, #67	; 0x43
 8003d4e:	f7ff fc87 	bl	8003660 <hts221_get_temp>
 8003d52:	0003      	movs	r3, r0
 8003d54:	61bb      	str	r3, [r7, #24]
	  if (temp == TEMP_ERROR) printf("Error reading temperature\r\n");
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	4a5b      	ldr	r2, [pc, #364]	; (8003ec8 <TIM6_DAC_IRQHandler+0x1b4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d104      	bne.n	8003d68 <TIM6_DAC_IRQHandler+0x54>
 8003d5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <TIM6_DAC_IRQHandler+0x1b8>)
 8003d60:	0018      	movs	r0, r3
 8003d62:	f004 f843 	bl	8007dec <puts>
 8003d66:	e005      	b.n	8003d74 <TIM6_DAC_IRQHandler+0x60>
	  else printf("Current temperature is \t\t\t%d\tC\r\n", temp);
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <TIM6_DAC_IRQHandler+0x1bc>)
 8003d6c:	0011      	movs	r1, r2
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f003 ffb0 	bl	8007cd4 <iprintf>

	  int humid = hts221_get_humid(hts_cal_data);
 8003d74:	4b52      	ldr	r3, [pc, #328]	; (8003ec0 <TIM6_DAC_IRQHandler+0x1ac>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7ff fd9f 	bl	80038bc <hts221_get_humid>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	617b      	str	r3, [r7, #20]
	  if (humid == HUMID_ERROR) printf("Error reading humidity\r\n");
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3301      	adds	r3, #1
 8003d86:	d104      	bne.n	8003d92 <TIM6_DAC_IRQHandler+0x7e>
 8003d88:	4b52      	ldr	r3, [pc, #328]	; (8003ed4 <TIM6_DAC_IRQHandler+0x1c0>)
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f004 f82e 	bl	8007dec <puts>
 8003d90:	e005      	b.n	8003d9e <TIM6_DAC_IRQHandler+0x8a>
	  else printf("Current Relative Humidity is \t\t%d\t%% \r\n", humid);
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4b50      	ldr	r3, [pc, #320]	; (8003ed8 <TIM6_DAC_IRQHandler+0x1c4>)
 8003d96:	0011      	movs	r1, r2
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f003 ff9b 	bl	8007cd4 <iprintf>

	  uint16_t voltage = BQ27441_voltage();
 8003d9e:	2512      	movs	r5, #18
 8003da0:	197c      	adds	r4, r7, r5
 8003da2:	f7fe ff37 	bl	8002c14 <BQ27441_voltage>
 8003da6:	0003      	movs	r3, r0
 8003da8:	8023      	strh	r3, [r4, #0]
	  uint16_t soc = BQ27441_soc(FILTERED);
 8003daa:	2610      	movs	r6, #16
 8003dac:	19bc      	adds	r4, r7, r6
 8003dae:	2000      	movs	r0, #0
 8003db0:	f7fe ffd8 	bl	8002d64 <BQ27441_soc>
 8003db4:	0003      	movs	r3, r0
 8003db6:	8023      	strh	r3, [r4, #0]
	  uint16_t current = BQ27441_current(AVG);
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7fe ff34 	bl	8002c26 <BQ27441_current>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	230e      	movs	r3, #14
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	801a      	strh	r2, [r3, #0]
	  uint16_t cap_remaining = BQ27441_capacity(REMAIN);
 8003dc8:	220c      	movs	r2, #12
 8003dca:	18bc      	adds	r4, r7, r2
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7fe ff61 	bl	8002c94 <BQ27441_capacity>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	8023      	strh	r3, [r4, #0]
	  uint16_t cap_max = BQ27441_capacity(DESIGN);
 8003dd6:	210a      	movs	r1, #10
 8003dd8:	187c      	adds	r4, r7, r1
 8003dda:	2008      	movs	r0, #8
 8003ddc:	f7fe ff5a 	bl	8002c94 <BQ27441_capacity>
 8003de0:	0003      	movs	r3, r0
 8003de2:	8023      	strh	r3, [r4, #0]
	  int16_t power = BQ27441_power(); //average draw
 8003de4:	2008      	movs	r0, #8
 8003de6:	183c      	adds	r4, r7, r0
 8003de8:	f7fe ffb2 	bl	8002d50 <BQ27441_power>
 8003dec:	0003      	movs	r3, r0
 8003dee:	8023      	strh	r3, [r4, #0]
	  uint16_t soh = BQ27441_soh(PERCENT);
 8003df0:	2000      	movs	r0, #0
 8003df2:	f7fe ffdf 	bl	8002db4 <BQ27441_soh>
 8003df6:	0003      	movs	r3, r0
 8003df8:	001a      	movs	r2, r3
 8003dfa:	1dbb      	adds	r3, r7, #6
 8003dfc:	801a      	strh	r2, [r3, #0]
	  uint16_t temp_bat = BQ27441_temperature(BATTERY) / 10;
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f7ff f800 	bl	8002e04 <BQ27441_temperature>
 8003e04:	0003      	movs	r3, r0
 8003e06:	1d3c      	adds	r4, r7, #4
 8003e08:	210a      	movs	r1, #10
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fc f998 	bl	8000140 <__udivsi3>
 8003e10:	0003      	movs	r3, r0
 8003e12:	8023      	strh	r3, [r4, #0]
	  uint16_t temp_bq_IC = BQ27441_temperature(INTERNAL_TEMP) / 10;
 8003e14:	2001      	movs	r0, #1
 8003e16:	f7fe fff5 	bl	8002e04 <BQ27441_temperature>
 8003e1a:	0003      	movs	r3, r0
 8003e1c:	1cbc      	adds	r4, r7, #2
 8003e1e:	210a      	movs	r1, #10
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7fc f98d 	bl	8000140 <__udivsi3>
 8003e26:	0003      	movs	r3, r0
 8003e28:	8023      	strh	r3, [r4, #0]

	  printf("State of Charge\t\t\t\t%d\t%%\r\n", soc);
 8003e2a:	19bb      	adds	r3, r7, r6
 8003e2c:	881a      	ldrh	r2, [r3, #0]
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <TIM6_DAC_IRQHandler+0x1c8>)
 8003e30:	0011      	movs	r1, r2
 8003e32:	0018      	movs	r0, r3
 8003e34:	f003 ff4e 	bl	8007cd4 <iprintf>
	  printf("Battery Voltage\t\t\t\t%d\tmV\r\n", voltage);
 8003e38:	197b      	adds	r3, r7, r5
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <TIM6_DAC_IRQHandler+0x1cc>)
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f003 ff47 	bl	8007cd4 <iprintf>
	  printf("Current\t\t\t\t\t%d\tmA\r\n", current);
 8003e46:	230e      	movs	r3, #14
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	881a      	ldrh	r2, [r3, #0]
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <TIM6_DAC_IRQHandler+0x1d0>)
 8003e4e:	0011      	movs	r1, r2
 8003e50:	0018      	movs	r0, r3
 8003e52:	f003 ff3f 	bl	8007cd4 <iprintf>
	  printf("Max Capacity\t\t\t\t%d\tmAh\r\n", cap_max);
 8003e56:	210a      	movs	r1, #10
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	881a      	ldrh	r2, [r3, #0]
 8003e5c:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <TIM6_DAC_IRQHandler+0x1d4>)
 8003e5e:	0011      	movs	r1, r2
 8003e60:	0018      	movs	r0, r3
 8003e62:	f003 ff37 	bl	8007cd4 <iprintf>
	  printf("Remaining Capacity\t\t\t%d\tmAh\r\n", cap_remaining);
 8003e66:	220c      	movs	r2, #12
 8003e68:	18bb      	adds	r3, r7, r2
 8003e6a:	881a      	ldrh	r2, [r3, #0]
 8003e6c:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <TIM6_DAC_IRQHandler+0x1d8>)
 8003e6e:	0011      	movs	r1, r2
 8003e70:	0018      	movs	r0, r3
 8003e72:	f003 ff2f 	bl	8007cd4 <iprintf>
	  printf("Ave power consumption\t\t\t%d\tmW\r\n", power);
 8003e76:	2008      	movs	r0, #8
 8003e78:	183b      	adds	r3, r7, r0
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	5e9a      	ldrsh	r2, [r3, r2]
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <TIM6_DAC_IRQHandler+0x1dc>)
 8003e80:	0011      	movs	r1, r2
 8003e82:	0018      	movs	r0, r3
 8003e84:	f003 ff26 	bl	8007cd4 <iprintf>
	  printf("Health\t\t\t\t\t%d\t%%\r\n", soh);
 8003e88:	1dbb      	adds	r3, r7, #6
 8003e8a:	881a      	ldrh	r2, [r3, #0]
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <TIM6_DAC_IRQHandler+0x1e0>)
 8003e8e:	0011      	movs	r1, r2
 8003e90:	0018      	movs	r0, r3
 8003e92:	f003 ff1f 	bl	8007cd4 <iprintf>
	  printf("Battery Pack Temp\t\t\t%d\tK\r\n", temp_bat);
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	881a      	ldrh	r2, [r3, #0]
 8003e9a:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <TIM6_DAC_IRQHandler+0x1e4>)
 8003e9c:	0011      	movs	r1, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f003 ff18 	bl	8007cd4 <iprintf>
	  printf("Current Bat IC Temp is\t\t\t%d\tK\r\n", temp_bq_IC);
 8003ea4:	1cbb      	adds	r3, r7, #2
 8003ea6:	881a      	ldrh	r2, [r3, #0]
 8003ea8:	4b14      	ldr	r3, [pc, #80]	; (8003efc <TIM6_DAC_IRQHandler+0x1e8>)
 8003eaa:	0011      	movs	r1, r2
 8003eac:	0018      	movs	r0, r3
 8003eae:	f003 ff11 	bl	8007cd4 <iprintf>


  }

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b009      	add	sp, #36	; 0x24
 8003eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	20000258 	.word	0x20000258
 8003ec0:	20000250 	.word	0x20000250
 8003ec4:	08009ed8 	.word	0x08009ed8
 8003ec8:	fffffe34 	.word	0xfffffe34
 8003ecc:	08009ef8 	.word	0x08009ef8
 8003ed0:	08009f14 	.word	0x08009f14
 8003ed4:	08009f38 	.word	0x08009f38
 8003ed8:	08009f50 	.word	0x08009f50
 8003edc:	08009f78 	.word	0x08009f78
 8003ee0:	08009f94 	.word	0x08009f94
 8003ee4:	08009fb0 	.word	0x08009fb0
 8003ee8:	08009fc4 	.word	0x08009fc4
 8003eec:	08009fe0 	.word	0x08009fe0
 8003ef0:	0800a000 	.word	0x0800a000
 8003ef4:	0800a020 	.word	0x0800a020
 8003ef8:	0800a034 	.word	0x0800a034
 8003efc:	0800a050 	.word	0x0800a050

08003f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
	return 1;
 8003f04:	2301      	movs	r3, #1
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_kill>:

int _kill(int pid, int sig)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f16:	f003 f97f 	bl	8007218 <__errno>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	2216      	movs	r2, #22
 8003f1e:	601a      	str	r2, [r3, #0]
	return -1;
 8003f20:	2301      	movs	r3, #1
 8003f22:	425b      	negs	r3, r3
}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b002      	add	sp, #8
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <_exit>:

void _exit (int status)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f34:	2301      	movs	r3, #1
 8003f36:	425a      	negs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	0011      	movs	r1, r2
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7ff ffe5 	bl	8003f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f42:	e7fe      	b.n	8003f42 <_exit+0x16>

08003f44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e00a      	b.n	8003f6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f56:	e000      	b.n	8003f5a <_read+0x16>
 8003f58:	bf00      	nop
 8003f5a:	0001      	movs	r1, r0
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	60ba      	str	r2, [r7, #8]
 8003f62:	b2ca      	uxtb	r2, r1
 8003f64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	dbf0      	blt.n	8003f56 <_read+0x12>
	}

return len;
 8003f74:	687b      	ldr	r3, [r7, #4]
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b006      	add	sp, #24
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e009      	b.n	8003fa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	60ba      	str	r2, [r7, #8]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff fddd 	bl	8003b58 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	dbf1      	blt.n	8003f90 <_write+0x12>
	}
	return len;
 8003fac:	687b      	ldr	r3, [r7, #4]
}
 8003fae:	0018      	movs	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b006      	add	sp, #24
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <_close>:

int _close(int file)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
	return -1;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	425b      	negs	r3, r3
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b002      	add	sp, #8
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	0192      	lsls	r2, r2, #6
 8003fda:	605a      	str	r2, [r3, #4]
	return 0;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	0018      	movs	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b002      	add	sp, #8
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <_isatty>:

int _isatty(int file)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
	return 1;
 8003fee:	2301      	movs	r3, #1
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
	return 0;
 8004004:	2300      	movs	r3, #0
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b004      	add	sp, #16
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <_sbrk+0x5c>)
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <_sbrk+0x60>)
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004024:	4b13      	ldr	r3, [pc, #76]	; (8004074 <_sbrk+0x64>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800402c:	4b11      	ldr	r3, [pc, #68]	; (8004074 <_sbrk+0x64>)
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <_sbrk+0x68>)
 8004030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <_sbrk+0x64>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	429a      	cmp	r2, r3
 800403e:	d207      	bcs.n	8004050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004040:	f003 f8ea 	bl	8007218 <__errno>
 8004044:	0003      	movs	r3, r0
 8004046:	220c      	movs	r2, #12
 8004048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800404a:	2301      	movs	r3, #1
 800404c:	425b      	negs	r3, r3
 800404e:	e009      	b.n	8004064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <_sbrk+0x64>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <_sbrk+0x64>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	18d2      	adds	r2, r2, r3
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <_sbrk+0x64>)
 8004060:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004062:	68fb      	ldr	r3, [r7, #12]
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b006      	add	sp, #24
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20002000 	.word	0x20002000
 8004070:	00000400 	.word	0x00000400
 8004074:	200001f8 	.word	0x200001f8
 8004078:	20000330 	.word	0x20000330

0800407c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800408e:	003b      	movs	r3, r7
 8004090:	0018      	movs	r0, r3
 8004092:	2308      	movs	r3, #8
 8004094:	001a      	movs	r2, r3
 8004096:	2100      	movs	r1, #0
 8004098:	f003 f8f2 	bl	8007280 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800409c:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <MX_TIM6_Init+0x6c>)
 800409e:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <MX_TIM6_Init+0x70>)
 80040a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2097 - 1;
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <MX_TIM6_Init+0x6c>)
 80040a4:	2283      	movs	r2, #131	; 0x83
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <MX_TIM6_Init+0x6c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <MX_TIM6_Init+0x6c>)
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <MX_TIM6_Init+0x74>)
 80040b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <MX_TIM6_Init+0x6c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <MX_TIM6_Init+0x6c>)
 80040be:	0018      	movs	r0, r3
 80040c0:	f002 f94c 	bl	800635c <HAL_TIM_Base_Init>
 80040c4:	1e03      	subs	r3, r0, #0
 80040c6:	d001      	beq.n	80040cc <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80040c8:	f7ff fdf2 	bl	8003cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040cc:	003b      	movs	r3, r7
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040d2:	003b      	movs	r3, r7
 80040d4:	2200      	movs	r2, #0
 80040d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80040d8:	003a      	movs	r2, r7
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <MX_TIM6_Init+0x6c>)
 80040dc:	0011      	movs	r1, r2
 80040de:	0018      	movs	r0, r3
 80040e0:	f002 fb2c 	bl	800673c <HAL_TIMEx_MasterConfigSynchronization>
 80040e4:	1e03      	subs	r3, r0, #0
 80040e6:	d001      	beq.n	80040ec <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80040e8:	f7ff fde2 	bl	8003cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b002      	add	sp, #8
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000258 	.word	0x20000258
 80040f8:	40001000 	.word	0x40001000
 80040fc:	000003e7 	.word	0x000003e7

08004100 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <HAL_TIM_Base_MspInit+0x38>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d10d      	bne.n	800412e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004112:	4b0a      	ldr	r3, [pc, #40]	; (800413c <HAL_TIM_Base_MspInit+0x3c>)
 8004114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_TIM_Base_MspInit+0x3c>)
 8004118:	2110      	movs	r1, #16
 800411a:	430a      	orrs	r2, r1
 800411c:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2100      	movs	r1, #0
 8004122:	2011      	movs	r0, #17
 8004124:	f000 fa58 	bl	80045d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004128:	2011      	movs	r0, #17
 800412a:	f000 fa6a 	bl	8004602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b002      	add	sp, #8
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	40001000 	.word	0x40001000
 800413c:	40021000 	.word	0x40021000

08004140 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <MX_USART1_UART_Init+0x58>)
 8004146:	4a15      	ldr	r2, [pc, #84]	; (800419c <MX_USART1_UART_Init+0x5c>)
 8004148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <MX_USART1_UART_Init+0x58>)
 800414c:	22e1      	movs	r2, #225	; 0xe1
 800414e:	0252      	lsls	r2, r2, #9
 8004150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004152:	4b11      	ldr	r3, [pc, #68]	; (8004198 <MX_USART1_UART_Init+0x58>)
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <MX_USART1_UART_Init+0x58>)
 800415a:	2200      	movs	r2, #0
 800415c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <MX_USART1_UART_Init+0x58>)
 8004160:	2200      	movs	r2, #0
 8004162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <MX_USART1_UART_Init+0x58>)
 8004166:	220c      	movs	r2, #12
 8004168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <MX_USART1_UART_Init+0x58>)
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <MX_USART1_UART_Init+0x58>)
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <MX_USART1_UART_Init+0x58>)
 8004178:	2200      	movs	r2, #0
 800417a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <MX_USART1_UART_Init+0x58>)
 800417e:	2200      	movs	r2, #0
 8004180:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <MX_USART1_UART_Init+0x58>)
 8004184:	0018      	movs	r0, r3
 8004186:	f002 fb31 	bl	80067ec <HAL_UART_Init>
 800418a:	1e03      	subs	r3, r0, #0
 800418c:	d001      	beq.n	8004192 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800418e:	f7ff fd8f 	bl	8003cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000298 	.word	0x20000298
 800419c:	40013800 	.word	0x40013800

080041a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b089      	sub	sp, #36	; 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	240c      	movs	r4, #12
 80041aa:	193b      	adds	r3, r7, r4
 80041ac:	0018      	movs	r0, r3
 80041ae:	2314      	movs	r3, #20
 80041b0:	001a      	movs	r2, r3
 80041b2:	2100      	movs	r1, #0
 80041b4:	f003 f864 	bl	8007280 <memset>
  if(uartHandle->Instance==USART1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a18      	ldr	r2, [pc, #96]	; (8004220 <HAL_UART_MspInit+0x80>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d12a      	bne.n	8004218 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041c2:	4b18      	ldr	r3, [pc, #96]	; (8004224 <HAL_UART_MspInit+0x84>)
 80041c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c6:	4b17      	ldr	r3, [pc, #92]	; (8004224 <HAL_UART_MspInit+0x84>)
 80041c8:	2180      	movs	r1, #128	; 0x80
 80041ca:	01c9      	lsls	r1, r1, #7
 80041cc:	430a      	orrs	r2, r1
 80041ce:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d0:	4b14      	ldr	r3, [pc, #80]	; (8004224 <HAL_UART_MspInit+0x84>)
 80041d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <HAL_UART_MspInit+0x84>)
 80041d6:	2101      	movs	r1, #1
 80041d8:	430a      	orrs	r2, r1
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <HAL_UART_MspInit+0x84>)
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	2201      	movs	r2, #1
 80041e2:	4013      	ands	r3, r2
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041e8:	193b      	adds	r3, r7, r4
 80041ea:	22c0      	movs	r2, #192	; 0xc0
 80041ec:	00d2      	lsls	r2, r2, #3
 80041ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f0:	0021      	movs	r1, r4
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	2202      	movs	r2, #2
 80041f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	2200      	movs	r2, #0
 80041fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fe:	187b      	adds	r3, r7, r1
 8004200:	2203      	movs	r2, #3
 8004202:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004204:	187b      	adds	r3, r7, r1
 8004206:	2204      	movs	r2, #4
 8004208:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420a:	187a      	adds	r2, r7, r1
 800420c:	23a0      	movs	r3, #160	; 0xa0
 800420e:	05db      	lsls	r3, r3, #23
 8004210:	0011      	movs	r1, r2
 8004212:	0018      	movs	r0, r3
 8004214:	f000 fa12 	bl	800463c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b009      	add	sp, #36	; 0x24
 800421e:	bd90      	pop	{r4, r7, pc}
 8004220:	40013800 	.word	0x40013800
 8004224:	40021000 	.word	0x40021000

08004228 <VCNL4010_readProximity>:
    @return Raw 16-bit reading value, will vary with LED current, unit-less!
    TODO - Fix infinite loop, add timeout!
*/
/**************************************************************************/

uint16_t VCNL4010_readProximity(void) {
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
  uint8_t i = VCNL4010_read8(VCNL4010_INTSTAT);
 800422e:	1dfc      	adds	r4, r7, #7
 8004230:	208e      	movs	r0, #142	; 0x8e
 8004232:	f000 f845 	bl	80042c0 <VCNL4010_read8>
 8004236:	0003      	movs	r3, r0
 8004238:	7023      	strb	r3, [r4, #0]
  i &= ~0x80;
 800423a:	1dfb      	adds	r3, r7, #7
 800423c:	1dfa      	adds	r2, r7, #7
 800423e:	7812      	ldrb	r2, [r2, #0]
 8004240:	217f      	movs	r1, #127	; 0x7f
 8004242:	400a      	ands	r2, r1
 8004244:	701a      	strb	r2, [r3, #0]
  VCNL4010_write8(VCNL4010_INTSTAT, i);
 8004246:	1dfb      	adds	r3, r7, #7
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	0019      	movs	r1, r3
 800424c:	208e      	movs	r0, #142	; 0x8e
 800424e:	f000 f817 	bl	8004280 <VCNL4010_write8>

  VCNL4010_write8(VCNL4010_COMMAND, VCNL4010_MEASUREPROXIMITY);
 8004252:	2108      	movs	r1, #8
 8004254:	2080      	movs	r0, #128	; 0x80
 8004256:	f000 f813 	bl	8004280 <VCNL4010_write8>
  while (1) {
    // Serial.println(read8(VCNL4010_INTSTAT), HEX);
    uint8_t result = VCNL4010_read8(VCNL4010_COMMAND);
 800425a:	1dbc      	adds	r4, r7, #6
 800425c:	2080      	movs	r0, #128	; 0x80
 800425e:	f000 f82f 	bl	80042c0 <VCNL4010_read8>
 8004262:	0003      	movs	r3, r0
 8004264:	7023      	strb	r3, [r4, #0]
    // Serial.print("Ready = 0x"); Serial.println(result, HEX);
    if (result & VCNL4010_PROXIMITYREADY) {
 8004266:	1dbb      	adds	r3, r7, #6
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2220      	movs	r2, #32
 800426c:	4013      	ands	r3, r2
 800426e:	d0f4      	beq.n	800425a <VCNL4010_readProximity+0x32>
      return VCNL4010_read16(VCNL4010_PROXIMITYDATA);
 8004270:	2087      	movs	r0, #135	; 0x87
 8004272:	f000 f843 	bl	80042fc <VCNL4010_read16>
 8004276:	0003      	movs	r3, r0
    }
//    delay(1);
  }
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b003      	add	sp, #12
 800427e:	bd90      	pop	{r4, r7, pc}

08004280 <VCNL4010_write8>:
    }
  }
}

HAL_StatusTypeDef VCNL4010_write8(uint8_t subAddress, uint8_t data)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af04      	add	r7, sp, #16
 8004286:	0002      	movs	r2, r0
 8004288:	1dfb      	adds	r3, r7, #7
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	1dbb      	adds	r3, r7, #6
 800428e:	1c0a      	adds	r2, r1, #0
 8004290:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8004292:	1dfb      	adds	r3, r7, #7
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b29a      	uxth	r2, r3
 8004298:	4808      	ldr	r0, [pc, #32]	; (80042bc <VCNL4010_write8+0x3c>)
 800429a:	2301      	movs	r3, #1
 800429c:	425b      	negs	r3, r3
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	2301      	movs	r3, #1
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	1dbb      	adds	r3, r7, #6
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	2301      	movs	r3, #1
 80042aa:	2126      	movs	r1, #38	; 0x26
 80042ac:	f000 fbd2 	bl	8004a54 <HAL_I2C_Mem_Write>
 80042b0:	0003      	movs	r3, r0

}
 80042b2:	0018      	movs	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b002      	add	sp, #8
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	20000204 	.word	0x20000204

080042c0 <VCNL4010_read8>:

uint8_t VCNL4010_read8(uint8_t subAddress){
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b089      	sub	sp, #36	; 0x24
 80042c4:	af04      	add	r7, sp, #16
 80042c6:	0002      	movs	r2, r0
 80042c8:	1dfb      	adds	r3, r7, #7
 80042ca:	701a      	strb	r2, [r3, #0]

	uint8_t data;
	HAL_I2C_Mem_Read(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80042cc:	1dfb      	adds	r3, r7, #7
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	4809      	ldr	r0, [pc, #36]	; (80042f8 <VCNL4010_read8+0x38>)
 80042d4:	2301      	movs	r3, #1
 80042d6:	425b      	negs	r3, r3
 80042d8:	9302      	str	r3, [sp, #8]
 80042da:	2301      	movs	r3, #1
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	240f      	movs	r4, #15
 80042e0:	193b      	adds	r3, r7, r4
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2301      	movs	r3, #1
 80042e6:	2126      	movs	r1, #38	; 0x26
 80042e8:	f000 fce2 	bl	8004cb0 <HAL_I2C_Mem_Read>
	return ((uint8_t) data);
 80042ec:	193b      	adds	r3, r7, r4
 80042ee:	781b      	ldrb	r3, [r3, #0]
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b005      	add	sp, #20
 80042f6:	bd90      	pop	{r4, r7, pc}
 80042f8:	20000204 	.word	0x20000204

080042fc <VCNL4010_read16>:

uint16_t VCNL4010_read16(uint8_t subAddress){
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af04      	add	r7, sp, #16
 8004302:	0002      	movs	r2, r0
 8004304:	1dfb      	adds	r3, r7, #7
 8004306:	701a      	strb	r2, [r3, #0]

	uint8_t data[2];
	HAL_I2C_Mem_Read(&I2C, (VCNL4010_I2CADDR_DEFAULT << 1), subAddress, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b29a      	uxth	r2, r3
 800430e:	480e      	ldr	r0, [pc, #56]	; (8004348 <VCNL4010_read16+0x4c>)
 8004310:	2301      	movs	r3, #1
 8004312:	425b      	negs	r3, r3
 8004314:	9302      	str	r3, [sp, #8]
 8004316:	2302      	movs	r3, #2
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	240c      	movs	r4, #12
 800431c:	193b      	adds	r3, r7, r4
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2301      	movs	r3, #1
 8004322:	2126      	movs	r1, #38	; 0x26
 8004324:	f000 fcc4 	bl	8004cb0 <HAL_I2C_Mem_Read>
	return ((uint16_t) data[1] << 8) | data[0];
 8004328:	0021      	movs	r1, r4
 800432a:	187b      	adds	r3, r7, r1
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	b21a      	sxth	r2, r3
 8004332:	187b      	adds	r3, r7, r1
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b21b      	sxth	r3, r3
 8004338:	4313      	orrs	r3, r2
 800433a:	b21b      	sxth	r3, r3
 800433c:	b29b      	uxth	r3, r3
}
 800433e:	0018      	movs	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	b005      	add	sp, #20
 8004344:	bd90      	pop	{r4, r7, pc}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	20000204 	.word	0x20000204

0800434c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800434c:	480d      	ldr	r0, [pc, #52]	; (8004384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800434e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004350:	480d      	ldr	r0, [pc, #52]	; (8004388 <LoopForever+0x6>)
  ldr r1, =_edata
 8004352:	490e      	ldr	r1, [pc, #56]	; (800438c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004354:	4a0e      	ldr	r2, [pc, #56]	; (8004390 <LoopForever+0xe>)
  movs r3, #0
 8004356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004358:	e002      	b.n	8004360 <LoopCopyDataInit>

0800435a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800435a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800435c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800435e:	3304      	adds	r3, #4

08004360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004364:	d3f9      	bcc.n	800435a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004366:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004368:	4c0b      	ldr	r4, [pc, #44]	; (8004398 <LoopForever+0x16>)
  movs r3, #0
 800436a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800436c:	e001      	b.n	8004372 <LoopFillZerobss>

0800436e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800436e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004370:	3204      	adds	r2, #4

08004372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004374:	d3fb      	bcc.n	800436e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004376:	f7ff fe81 	bl	800407c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800437a:	f002 ff53 	bl	8007224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800437e:	f7ff fbff 	bl	8003b80 <main>

08004382 <LoopForever>:

LoopForever:
    b LoopForever
 8004382:	e7fe      	b.n	8004382 <LoopForever>
  ldr   r0, =_estack
 8004384:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800438c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004390:	0800a634 	.word	0x0800a634
  ldr r2, =_sbss
 8004394:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004398:	20000330 	.word	0x20000330

0800439c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800439c:	e7fe      	b.n	800439c <ADC1_COMP_IRQHandler>
	...

080043a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043a6:	1dfb      	adds	r3, r7, #7
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_Init+0x3c>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <HAL_Init+0x3c>)
 80043b2:	2140      	movs	r1, #64	; 0x40
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043b8:	2000      	movs	r0, #0
 80043ba:	f000 f811 	bl	80043e0 <HAL_InitTick>
 80043be:	1e03      	subs	r3, r0, #0
 80043c0:	d003      	beq.n	80043ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80043c2:	1dfb      	adds	r3, r7, #7
 80043c4:	2201      	movs	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e001      	b.n	80043ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043ca:	f7ff fc77 	bl	8003cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043ce:	1dfb      	adds	r3, r7, #7
 80043d0:	781b      	ldrb	r3, [r3, #0]
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b002      	add	sp, #8
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	40022000 	.word	0x40022000

080043e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043e8:	4b14      	ldr	r3, [pc, #80]	; (800443c <HAL_InitTick+0x5c>)
 80043ea:	681c      	ldr	r4, [r3, #0]
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_InitTick+0x60>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	0019      	movs	r1, r3
 80043f2:	23fa      	movs	r3, #250	; 0xfa
 80043f4:	0098      	lsls	r0, r3, #2
 80043f6:	f7fb fea3 	bl	8000140 <__udivsi3>
 80043fa:	0003      	movs	r3, r0
 80043fc:	0019      	movs	r1, r3
 80043fe:	0020      	movs	r0, r4
 8004400:	f7fb fe9e 	bl	8000140 <__udivsi3>
 8004404:	0003      	movs	r3, r0
 8004406:	0018      	movs	r0, r3
 8004408:	f000 f90b 	bl	8004622 <HAL_SYSTICK_Config>
 800440c:	1e03      	subs	r3, r0, #0
 800440e:	d001      	beq.n	8004414 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e00f      	b.n	8004434 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d80b      	bhi.n	8004432 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	2301      	movs	r3, #1
 800441e:	425b      	negs	r3, r3
 8004420:	2200      	movs	r2, #0
 8004422:	0018      	movs	r0, r3
 8004424:	f000 f8d8 	bl	80045d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_InitTick+0x64>)
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	e000      	b.n	8004434 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	b003      	add	sp, #12
 800443a:	bd90      	pop	{r4, r7, pc}
 800443c:	20000000 	.word	0x20000000
 8004440:	20000008 	.word	0x20000008
 8004444:	20000004 	.word	0x20000004

08004448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_IncTick+0x1c>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	001a      	movs	r2, r3
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_IncTick+0x20>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	18d2      	adds	r2, r2, r3
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_IncTick+0x20>)
 800445a:	601a      	str	r2, [r3, #0]
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	20000008 	.word	0x20000008
 8004468:	2000031c 	.word	0x2000031c

0800446c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  return uwTick;
 8004470:	4b02      	ldr	r3, [pc, #8]	; (800447c <HAL_GetTick+0x10>)
 8004472:	681b      	ldr	r3, [r3, #0]
}
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	2000031c 	.word	0x2000031c

08004480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	0002      	movs	r2, r0
 8004488:	1dfb      	adds	r3, r7, #7
 800448a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800448c:	1dfb      	adds	r3, r7, #7
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b7f      	cmp	r3, #127	; 0x7f
 8004492:	d809      	bhi.n	80044a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004494:	1dfb      	adds	r3, r7, #7
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	001a      	movs	r2, r3
 800449a:	231f      	movs	r3, #31
 800449c:	401a      	ands	r2, r3
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <__NVIC_EnableIRQ+0x30>)
 80044a0:	2101      	movs	r1, #1
 80044a2:	4091      	lsls	r1, r2
 80044a4:	000a      	movs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
  }
}
 80044a8:	46c0      	nop			; (mov r8, r8)
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b002      	add	sp, #8
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	e000e100 	.word	0xe000e100

080044b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	0002      	movs	r2, r0
 80044bc:	6039      	str	r1, [r7, #0]
 80044be:	1dfb      	adds	r3, r7, #7
 80044c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044c2:	1dfb      	adds	r3, r7, #7
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b7f      	cmp	r3, #127	; 0x7f
 80044c8:	d828      	bhi.n	800451c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044ca:	4a2f      	ldr	r2, [pc, #188]	; (8004588 <__NVIC_SetPriority+0xd4>)
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	b25b      	sxtb	r3, r3
 80044d2:	089b      	lsrs	r3, r3, #2
 80044d4:	33c0      	adds	r3, #192	; 0xc0
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	589b      	ldr	r3, [r3, r2]
 80044da:	1dfa      	adds	r2, r7, #7
 80044dc:	7812      	ldrb	r2, [r2, #0]
 80044de:	0011      	movs	r1, r2
 80044e0:	2203      	movs	r2, #3
 80044e2:	400a      	ands	r2, r1
 80044e4:	00d2      	lsls	r2, r2, #3
 80044e6:	21ff      	movs	r1, #255	; 0xff
 80044e8:	4091      	lsls	r1, r2
 80044ea:	000a      	movs	r2, r1
 80044ec:	43d2      	mvns	r2, r2
 80044ee:	401a      	ands	r2, r3
 80044f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	019b      	lsls	r3, r3, #6
 80044f6:	22ff      	movs	r2, #255	; 0xff
 80044f8:	401a      	ands	r2, r3
 80044fa:	1dfb      	adds	r3, r7, #7
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	0018      	movs	r0, r3
 8004500:	2303      	movs	r3, #3
 8004502:	4003      	ands	r3, r0
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004508:	481f      	ldr	r0, [pc, #124]	; (8004588 <__NVIC_SetPriority+0xd4>)
 800450a:	1dfb      	adds	r3, r7, #7
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	b25b      	sxtb	r3, r3
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	430a      	orrs	r2, r1
 8004514:	33c0      	adds	r3, #192	; 0xc0
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800451a:	e031      	b.n	8004580 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800451c:	4a1b      	ldr	r2, [pc, #108]	; (800458c <__NVIC_SetPriority+0xd8>)
 800451e:	1dfb      	adds	r3, r7, #7
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	0019      	movs	r1, r3
 8004524:	230f      	movs	r3, #15
 8004526:	400b      	ands	r3, r1
 8004528:	3b08      	subs	r3, #8
 800452a:	089b      	lsrs	r3, r3, #2
 800452c:	3306      	adds	r3, #6
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	18d3      	adds	r3, r2, r3
 8004532:	3304      	adds	r3, #4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	1dfa      	adds	r2, r7, #7
 8004538:	7812      	ldrb	r2, [r2, #0]
 800453a:	0011      	movs	r1, r2
 800453c:	2203      	movs	r2, #3
 800453e:	400a      	ands	r2, r1
 8004540:	00d2      	lsls	r2, r2, #3
 8004542:	21ff      	movs	r1, #255	; 0xff
 8004544:	4091      	lsls	r1, r2
 8004546:	000a      	movs	r2, r1
 8004548:	43d2      	mvns	r2, r2
 800454a:	401a      	ands	r2, r3
 800454c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	22ff      	movs	r2, #255	; 0xff
 8004554:	401a      	ands	r2, r3
 8004556:	1dfb      	adds	r3, r7, #7
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	0018      	movs	r0, r3
 800455c:	2303      	movs	r3, #3
 800455e:	4003      	ands	r3, r0
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004564:	4809      	ldr	r0, [pc, #36]	; (800458c <__NVIC_SetPriority+0xd8>)
 8004566:	1dfb      	adds	r3, r7, #7
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	001c      	movs	r4, r3
 800456c:	230f      	movs	r3, #15
 800456e:	4023      	ands	r3, r4
 8004570:	3b08      	subs	r3, #8
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	430a      	orrs	r2, r1
 8004576:	3306      	adds	r3, #6
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	18c3      	adds	r3, r0, r3
 800457c:	3304      	adds	r3, #4
 800457e:	601a      	str	r2, [r3, #0]
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b003      	add	sp, #12
 8004586:	bd90      	pop	{r4, r7, pc}
 8004588:	e000e100 	.word	0xe000e100
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	1e5a      	subs	r2, r3, #1
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	045b      	lsls	r3, r3, #17
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d301      	bcc.n	80045a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045a4:	2301      	movs	r3, #1
 80045a6:	e010      	b.n	80045ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <SysTick_Config+0x44>)
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	3a01      	subs	r2, #1
 80045ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045b0:	2301      	movs	r3, #1
 80045b2:	425b      	negs	r3, r3
 80045b4:	2103      	movs	r1, #3
 80045b6:	0018      	movs	r0, r3
 80045b8:	f7ff ff7c 	bl	80044b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <SysTick_Config+0x44>)
 80045be:	2200      	movs	r2, #0
 80045c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045c2:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <SysTick_Config+0x44>)
 80045c4:	2207      	movs	r2, #7
 80045c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	0018      	movs	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b002      	add	sp, #8
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	e000e010 	.word	0xe000e010

080045d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	210f      	movs	r1, #15
 80045e4:	187b      	adds	r3, r7, r1
 80045e6:	1c02      	adds	r2, r0, #0
 80045e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b25b      	sxtb	r3, r3
 80045f2:	0011      	movs	r1, r2
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7ff ff5d 	bl	80044b4 <__NVIC_SetPriority>
}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b004      	add	sp, #16
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	0002      	movs	r2, r0
 800460a:	1dfb      	adds	r3, r7, #7
 800460c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800460e:	1dfb      	adds	r3, r7, #7
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b25b      	sxtb	r3, r3
 8004614:	0018      	movs	r0, r3
 8004616:	f7ff ff33 	bl	8004480 <__NVIC_EnableIRQ>
}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	46bd      	mov	sp, r7
 800461e:	b002      	add	sp, #8
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0018      	movs	r0, r3
 800462e:	f7ff ffaf 	bl	8004590 <SysTick_Config>
 8004632:	0003      	movs	r3, r0
}
 8004634:	0018      	movs	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	b002      	add	sp, #8
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004652:	e14f      	b.n	80048f4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4091      	lsls	r1, r2
 800465e:	000a      	movs	r2, r1
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d100      	bne.n	800466c <HAL_GPIO_Init+0x30>
 800466a:	e140      	b.n	80048ee <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d00b      	beq.n	800468c <HAL_GPIO_Init+0x50>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d007      	beq.n	800468c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004680:	2b11      	cmp	r3, #17
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b12      	cmp	r3, #18
 800468a:	d130      	bne.n	80046ee <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	2203      	movs	r2, #3
 8004698:	409a      	lsls	r2, r3
 800469a:	0013      	movs	r3, r2
 800469c:	43da      	mvns	r2, r3
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4013      	ands	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	409a      	lsls	r2, r3
 80046ae:	0013      	movs	r3, r2
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c2:	2201      	movs	r2, #1
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	409a      	lsls	r2, r3
 80046c8:	0013      	movs	r3, r2
 80046ca:	43da      	mvns	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	2201      	movs	r2, #1
 80046da:	401a      	ands	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	409a      	lsls	r2, r3
 80046e0:	0013      	movs	r3, r2
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	2203      	movs	r2, #3
 80046fa:	409a      	lsls	r2, r3
 80046fc:	0013      	movs	r3, r2
 80046fe:	43da      	mvns	r2, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4013      	ands	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	0013      	movs	r3, r2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d003      	beq.n	800472e <HAL_GPIO_Init+0xf2>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b12      	cmp	r3, #18
 800472c:	d123      	bne.n	8004776 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	08da      	lsrs	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3208      	adds	r2, #8
 8004736:	0092      	lsls	r2, r2, #2
 8004738:	58d3      	ldr	r3, [r2, r3]
 800473a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2207      	movs	r2, #7
 8004740:	4013      	ands	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	220f      	movs	r2, #15
 8004746:	409a      	lsls	r2, r3
 8004748:	0013      	movs	r3, r2
 800474a:	43da      	mvns	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2107      	movs	r1, #7
 800475a:	400b      	ands	r3, r1
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	409a      	lsls	r2, r3
 8004760:	0013      	movs	r3, r2
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	08da      	lsrs	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3208      	adds	r2, #8
 8004770:	0092      	lsls	r2, r2, #2
 8004772:	6939      	ldr	r1, [r7, #16]
 8004774:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	2203      	movs	r2, #3
 8004782:	409a      	lsls	r2, r3
 8004784:	0013      	movs	r3, r2
 8004786:	43da      	mvns	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2203      	movs	r2, #3
 8004794:	401a      	ands	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	409a      	lsls	r2, r3
 800479c:	0013      	movs	r3, r2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	2380      	movs	r3, #128	; 0x80
 80047b0:	055b      	lsls	r3, r3, #21
 80047b2:	4013      	ands	r3, r2
 80047b4:	d100      	bne.n	80047b8 <HAL_GPIO_Init+0x17c>
 80047b6:	e09a      	b.n	80048ee <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b8:	4b54      	ldr	r3, [pc, #336]	; (800490c <HAL_GPIO_Init+0x2d0>)
 80047ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047bc:	4b53      	ldr	r3, [pc, #332]	; (800490c <HAL_GPIO_Init+0x2d0>)
 80047be:	2101      	movs	r1, #1
 80047c0:	430a      	orrs	r2, r1
 80047c2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80047c4:	4a52      	ldr	r2, [pc, #328]	; (8004910 <HAL_GPIO_Init+0x2d4>)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	3302      	adds	r3, #2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	589b      	ldr	r3, [r3, r2]
 80047d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2203      	movs	r2, #3
 80047d6:	4013      	ands	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	220f      	movs	r2, #15
 80047dc:	409a      	lsls	r2, r3
 80047de:	0013      	movs	r3, r2
 80047e0:	43da      	mvns	r2, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	23a0      	movs	r3, #160	; 0xa0
 80047ec:	05db      	lsls	r3, r3, #23
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d019      	beq.n	8004826 <HAL_GPIO_Init+0x1ea>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a47      	ldr	r2, [pc, #284]	; (8004914 <HAL_GPIO_Init+0x2d8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_GPIO_Init+0x1e6>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a46      	ldr	r2, [pc, #280]	; (8004918 <HAL_GPIO_Init+0x2dc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00d      	beq.n	800481e <HAL_GPIO_Init+0x1e2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a45      	ldr	r2, [pc, #276]	; (800491c <HAL_GPIO_Init+0x2e0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d007      	beq.n	800481a <HAL_GPIO_Init+0x1de>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a44      	ldr	r2, [pc, #272]	; (8004920 <HAL_GPIO_Init+0x2e4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <HAL_GPIO_Init+0x1da>
 8004812:	2305      	movs	r3, #5
 8004814:	e008      	b.n	8004828 <HAL_GPIO_Init+0x1ec>
 8004816:	2306      	movs	r3, #6
 8004818:	e006      	b.n	8004828 <HAL_GPIO_Init+0x1ec>
 800481a:	2303      	movs	r3, #3
 800481c:	e004      	b.n	8004828 <HAL_GPIO_Init+0x1ec>
 800481e:	2302      	movs	r3, #2
 8004820:	e002      	b.n	8004828 <HAL_GPIO_Init+0x1ec>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <HAL_GPIO_Init+0x1ec>
 8004826:	2300      	movs	r3, #0
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	2103      	movs	r1, #3
 800482c:	400a      	ands	r2, r1
 800482e:	0092      	lsls	r2, r2, #2
 8004830:	4093      	lsls	r3, r2
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004838:	4935      	ldr	r1, [pc, #212]	; (8004910 <HAL_GPIO_Init+0x2d4>)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	3302      	adds	r3, #2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004846:	4b37      	ldr	r3, [pc, #220]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	43da      	mvns	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4013      	ands	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	025b      	lsls	r3, r3, #9
 800485e:	4013      	ands	r3, r2
 8004860:	d003      	beq.n	800486a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800486a:	4b2e      	ldr	r3, [pc, #184]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004870:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	43da      	mvns	r2, r3
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4013      	ands	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	029b      	lsls	r3, r3, #10
 8004888:	4013      	ands	r3, r2
 800488a:	d003      	beq.n	8004894 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004894:	4b23      	ldr	r3, [pc, #140]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800489a:	4b22      	ldr	r3, [pc, #136]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	43da      	mvns	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4013      	ands	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	035b      	lsls	r3, r3, #13
 80048b2:	4013      	ands	r3, r2
 80048b4:	d003      	beq.n	80048be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80048be:	4b19      	ldr	r3, [pc, #100]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80048c4:	4b17      	ldr	r3, [pc, #92]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	43da      	mvns	r2, r3
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4013      	ands	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	039b      	lsls	r3, r3, #14
 80048dc:	4013      	ands	r3, r2
 80048de:	d003      	beq.n	80048e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80048e8:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	3301      	adds	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	40da      	lsrs	r2, r3
 80048fc:	1e13      	subs	r3, r2, #0
 80048fe:	d000      	beq.n	8004902 <HAL_GPIO_Init+0x2c6>
 8004900:	e6a8      	b.n	8004654 <HAL_GPIO_Init+0x18>
  }
}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	46c0      	nop			; (mov r8, r8)
 8004906:	46bd      	mov	sp, r7
 8004908:	b006      	add	sp, #24
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40021000 	.word	0x40021000
 8004910:	40010000 	.word	0x40010000
 8004914:	50000400 	.word	0x50000400
 8004918:	50000800 	.word	0x50000800
 800491c:	50000c00 	.word	0x50000c00
 8004920:	50001c00 	.word	0x50001c00
 8004924:	40010400 	.word	0x40010400

08004928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e082      	b.n	8004a40 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2241      	movs	r2, #65	; 0x41
 800493e:	5c9b      	ldrb	r3, [r3, r2]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2240      	movs	r2, #64	; 0x40
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0018      	movs	r0, r3
 8004952:	f7ff f8bd 	bl	8003ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2241      	movs	r2, #65	; 0x41
 800495a:	2124      	movs	r1, #36	; 0x24
 800495c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2101      	movs	r1, #1
 800496a:	438a      	bics	r2, r1
 800496c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4934      	ldr	r1, [pc, #208]	; (8004a48 <HAL_I2C_Init+0x120>)
 8004978:	400a      	ands	r2, r1
 800497a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4931      	ldr	r1, [pc, #196]	; (8004a4c <HAL_I2C_Init+0x124>)
 8004988:	400a      	ands	r2, r1
 800498a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d108      	bne.n	80049a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2180      	movs	r1, #128	; 0x80
 800499e:	0209      	lsls	r1, r1, #8
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e007      	b.n	80049b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2184      	movs	r1, #132	; 0x84
 80049b0:	0209      	lsls	r1, r1, #8
 80049b2:	430a      	orrs	r2, r1
 80049b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d104      	bne.n	80049c8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2280      	movs	r2, #128	; 0x80
 80049c4:	0112      	lsls	r2, r2, #4
 80049c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	491f      	ldr	r1, [pc, #124]	; (8004a50 <HAL_I2C_Init+0x128>)
 80049d4:	430a      	orrs	r2, r1
 80049d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	491a      	ldr	r1, [pc, #104]	; (8004a4c <HAL_I2C_Init+0x124>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	0011      	movs	r1, r2
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	021a      	lsls	r2, r3, #8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69d9      	ldr	r1, [r3, #28]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1a      	ldr	r2, [r3, #32]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2241      	movs	r2, #65	; 0x41
 8004a2c:	2120      	movs	r1, #32
 8004a2e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2242      	movs	r2, #66	; 0x42
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b002      	add	sp, #8
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	f0ffffff 	.word	0xf0ffffff
 8004a4c:	ffff7fff 	.word	0xffff7fff
 8004a50:	02008000 	.word	0x02008000

08004a54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a54:	b590      	push	{r4, r7, lr}
 8004a56:	b089      	sub	sp, #36	; 0x24
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	000c      	movs	r4, r1
 8004a5e:	0010      	movs	r0, r2
 8004a60:	0019      	movs	r1, r3
 8004a62:	230a      	movs	r3, #10
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	1c22      	adds	r2, r4, #0
 8004a68:	801a      	strh	r2, [r3, #0]
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	1c02      	adds	r2, r0, #0
 8004a70:	801a      	strh	r2, [r3, #0]
 8004a72:	1dbb      	adds	r3, r7, #6
 8004a74:	1c0a      	adds	r2, r1, #0
 8004a76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2241      	movs	r2, #65	; 0x41
 8004a7c:	5c9b      	ldrb	r3, [r3, r2]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d000      	beq.n	8004a86 <HAL_I2C_Mem_Write+0x32>
 8004a84:	e10c      	b.n	8004ca0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <HAL_I2C_Mem_Write+0x42>
 8004a8c:	232c      	movs	r3, #44	; 0x2c
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d105      	bne.n	8004aa2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2280      	movs	r2, #128	; 0x80
 8004a9a:	0092      	lsls	r2, r2, #2
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e0ff      	b.n	8004ca2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2240      	movs	r2, #64	; 0x40
 8004aa6:	5c9b      	ldrb	r3, [r3, r2]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_I2C_Mem_Write+0x5c>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e0f8      	b.n	8004ca2 <HAL_I2C_Mem_Write+0x24e>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2240      	movs	r2, #64	; 0x40
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ab8:	f7ff fcd8 	bl	800446c <HAL_GetTick>
 8004abc:	0003      	movs	r3, r0
 8004abe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	0219      	lsls	r1, r3, #8
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	2319      	movs	r3, #25
 8004acc:	2201      	movs	r2, #1
 8004ace:	f000 fb0b 	bl	80050e8 <I2C_WaitOnFlagUntilTimeout>
 8004ad2:	1e03      	subs	r3, r0, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0e3      	b.n	8004ca2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2241      	movs	r2, #65	; 0x41
 8004ade:	2121      	movs	r1, #33	; 0x21
 8004ae0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2242      	movs	r2, #66	; 0x42
 8004ae6:	2140      	movs	r1, #64	; 0x40
 8004ae8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	222c      	movs	r2, #44	; 0x2c
 8004afa:	18ba      	adds	r2, r7, r2
 8004afc:	8812      	ldrh	r2, [r2, #0]
 8004afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b06:	1dbb      	adds	r3, r7, #6
 8004b08:	881c      	ldrh	r4, [r3, #0]
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	881a      	ldrh	r2, [r3, #0]
 8004b10:	230a      	movs	r3, #10
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	8819      	ldrh	r1, [r3, #0]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	0023      	movs	r3, r4
 8004b22:	f000 f9f9 	bl	8004f18 <I2C_RequestMemoryWrite>
 8004b26:	1e03      	subs	r3, r0, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2240      	movs	r2, #64	; 0x40
 8004b2e:	2100      	movs	r1, #0
 8004b30:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e0b5      	b.n	8004ca2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2bff      	cmp	r3, #255	; 0xff
 8004b3e:	d911      	bls.n	8004b64 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	22ff      	movs	r2, #255	; 0xff
 8004b44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	045c      	lsls	r4, r3, #17
 8004b50:	230a      	movs	r3, #10
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	8819      	ldrh	r1, [r3, #0]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	0023      	movs	r3, r4
 8004b5e:	f000 fbe3 	bl	8005328 <I2C_TransferConfig>
 8004b62:	e012      	b.n	8004b8a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	049c      	lsls	r4, r3, #18
 8004b78:	230a      	movs	r3, #10
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	8819      	ldrh	r1, [r3, #0]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	2300      	movs	r3, #0
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	0023      	movs	r3, r4
 8004b86:	f000 fbcf 	bl	8005328 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 fae8 	bl	8005166 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b96:	1e03      	subs	r3, r0, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e081      	b.n	8004ca2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	781a      	ldrb	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d03a      	beq.n	8004c4e <HAL_I2C_Mem_Write+0x1fa>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d136      	bne.n	8004c4e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	0013      	movs	r3, r2
 8004bea:	2200      	movs	r2, #0
 8004bec:	2180      	movs	r1, #128	; 0x80
 8004bee:	f000 fa7b 	bl	80050e8 <I2C_WaitOnFlagUntilTimeout>
 8004bf2:	1e03      	subs	r3, r0, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e053      	b.n	8004ca2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2bff      	cmp	r3, #255	; 0xff
 8004c02:	d911      	bls.n	8004c28 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	22ff      	movs	r2, #255	; 0xff
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	045c      	lsls	r4, r3, #17
 8004c14:	230a      	movs	r3, #10
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	8819      	ldrh	r1, [r3, #0]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	0023      	movs	r3, r4
 8004c22:	f000 fb81 	bl	8005328 <I2C_TransferConfig>
 8004c26:	e012      	b.n	8004c4e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	049c      	lsls	r4, r3, #18
 8004c3c:	230a      	movs	r3, #10
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	8819      	ldrh	r1, [r3, #0]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	2300      	movs	r3, #0
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	0023      	movs	r3, r4
 8004c4a:	f000 fb6d 	bl	8005328 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d198      	bne.n	8004b8a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f000 fac0 	bl	80051e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e01a      	b.n	8004ca2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2220      	movs	r2, #32
 8004c72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	490b      	ldr	r1, [pc, #44]	; (8004cac <HAL_I2C_Mem_Write+0x258>)
 8004c80:	400a      	ands	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2241      	movs	r2, #65	; 0x41
 8004c88:	2120      	movs	r1, #32
 8004c8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2242      	movs	r2, #66	; 0x42
 8004c90:	2100      	movs	r1, #0
 8004c92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	2100      	movs	r1, #0
 8004c9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e000      	b.n	8004ca2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
  }
}
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b007      	add	sp, #28
 8004ca8:	bd90      	pop	{r4, r7, pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	fe00e800 	.word	0xfe00e800

08004cb0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b089      	sub	sp, #36	; 0x24
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	000c      	movs	r4, r1
 8004cba:	0010      	movs	r0, r2
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	1c22      	adds	r2, r4, #0
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	1c02      	adds	r2, r0, #0
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	1dbb      	adds	r3, r7, #6
 8004cd0:	1c0a      	adds	r2, r1, #0
 8004cd2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2241      	movs	r2, #65	; 0x41
 8004cd8:	5c9b      	ldrb	r3, [r3, r2]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d000      	beq.n	8004ce2 <HAL_I2C_Mem_Read+0x32>
 8004ce0:	e110      	b.n	8004f04 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d004      	beq.n	8004cf2 <HAL_I2C_Mem_Read+0x42>
 8004ce8:	232c      	movs	r3, #44	; 0x2c
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2280      	movs	r2, #128	; 0x80
 8004cf6:	0092      	lsls	r2, r2, #2
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e103      	b.n	8004f06 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2240      	movs	r2, #64	; 0x40
 8004d02:	5c9b      	ldrb	r3, [r3, r2]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_I2C_Mem_Read+0x5c>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e0fc      	b.n	8004f06 <HAL_I2C_Mem_Read+0x256>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2240      	movs	r2, #64	; 0x40
 8004d10:	2101      	movs	r1, #1
 8004d12:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d14:	f7ff fbaa 	bl	800446c <HAL_GetTick>
 8004d18:	0003      	movs	r3, r0
 8004d1a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	0219      	lsls	r1, r3, #8
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	2319      	movs	r3, #25
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f000 f9dd 	bl	80050e8 <I2C_WaitOnFlagUntilTimeout>
 8004d2e:	1e03      	subs	r3, r0, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e0e7      	b.n	8004f06 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2241      	movs	r2, #65	; 0x41
 8004d3a:	2122      	movs	r1, #34	; 0x22
 8004d3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2242      	movs	r2, #66	; 0x42
 8004d42:	2140      	movs	r1, #64	; 0x40
 8004d44:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	222c      	movs	r2, #44	; 0x2c
 8004d56:	18ba      	adds	r2, r7, r2
 8004d58:	8812      	ldrh	r2, [r2, #0]
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d62:	1dbb      	adds	r3, r7, #6
 8004d64:	881c      	ldrh	r4, [r3, #0]
 8004d66:	2308      	movs	r3, #8
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	881a      	ldrh	r2, [r3, #0]
 8004d6c:	230a      	movs	r3, #10
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	8819      	ldrh	r1, [r3, #0]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	0023      	movs	r3, r4
 8004d7e:	f000 f92f 	bl	8004fe0 <I2C_RequestMemoryRead>
 8004d82:	1e03      	subs	r3, r0, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2240      	movs	r2, #64	; 0x40
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e0b9      	b.n	8004f06 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2bff      	cmp	r3, #255	; 0xff
 8004d9a:	d911      	bls.n	8004dc0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	22ff      	movs	r2, #255	; 0xff
 8004da0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	045c      	lsls	r4, r3, #17
 8004dac:	230a      	movs	r3, #10
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	8819      	ldrh	r1, [r3, #0]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	4b56      	ldr	r3, [pc, #344]	; (8004f10 <HAL_I2C_Mem_Read+0x260>)
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	0023      	movs	r3, r4
 8004dba:	f000 fab5 	bl	8005328 <I2C_TransferConfig>
 8004dbe:	e012      	b.n	8004de6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	049c      	lsls	r4, r3, #18
 8004dd4:	230a      	movs	r3, #10
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	8819      	ldrh	r1, [r3, #0]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	4b4c      	ldr	r3, [pc, #304]	; (8004f10 <HAL_I2C_Mem_Read+0x260>)
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	0023      	movs	r3, r4
 8004de2:	f000 faa1 	bl	8005328 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	0013      	movs	r3, r2
 8004df0:	2200      	movs	r2, #0
 8004df2:	2104      	movs	r1, #4
 8004df4:	f000 f978 	bl	80050e8 <I2C_WaitOnFlagUntilTimeout>
 8004df8:	1e03      	subs	r3, r0, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e082      	b.n	8004f06 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d03a      	beq.n	8004eb2 <HAL_I2C_Mem_Read+0x202>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d136      	bne.n	8004eb2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	0013      	movs	r3, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2180      	movs	r1, #128	; 0x80
 8004e52:	f000 f949 	bl	80050e8 <I2C_WaitOnFlagUntilTimeout>
 8004e56:	1e03      	subs	r3, r0, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e053      	b.n	8004f06 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2bff      	cmp	r3, #255	; 0xff
 8004e66:	d911      	bls.n	8004e8c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	22ff      	movs	r2, #255	; 0xff
 8004e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	045c      	lsls	r4, r3, #17
 8004e78:	230a      	movs	r3, #10
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	8819      	ldrh	r1, [r3, #0]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	2300      	movs	r3, #0
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	0023      	movs	r3, r4
 8004e86:	f000 fa4f 	bl	8005328 <I2C_TransferConfig>
 8004e8a:	e012      	b.n	8004eb2 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	049c      	lsls	r4, r3, #18
 8004ea0:	230a      	movs	r3, #10
 8004ea2:	18fb      	adds	r3, r7, r3
 8004ea4:	8819      	ldrh	r1, [r3, #0]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	0023      	movs	r3, r4
 8004eae:	f000 fa3b 	bl	8005328 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d194      	bne.n	8004de6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f000 f98e 	bl	80051e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ec8:	1e03      	subs	r3, r0, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e01a      	b.n	8004f06 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	490c      	ldr	r1, [pc, #48]	; (8004f14 <HAL_I2C_Mem_Read+0x264>)
 8004ee4:	400a      	ands	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2241      	movs	r2, #65	; 0x41
 8004eec:	2120      	movs	r1, #32
 8004eee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2242      	movs	r2, #66	; 0x42
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2240      	movs	r2, #64	; 0x40
 8004efc:	2100      	movs	r1, #0
 8004efe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b007      	add	sp, #28
 8004f0c:	bd90      	pop	{r4, r7, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	80002400 	.word	0x80002400
 8004f14:	fe00e800 	.word	0xfe00e800

08004f18 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b5b0      	push	{r4, r5, r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	000c      	movs	r4, r1
 8004f22:	0010      	movs	r0, r2
 8004f24:	0019      	movs	r1, r3
 8004f26:	250a      	movs	r5, #10
 8004f28:	197b      	adds	r3, r7, r5
 8004f2a:	1c22      	adds	r2, r4, #0
 8004f2c:	801a      	strh	r2, [r3, #0]
 8004f2e:	2308      	movs	r3, #8
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	1c02      	adds	r2, r0, #0
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	1dbb      	adds	r3, r7, #6
 8004f38:	1c0a      	adds	r2, r1, #0
 8004f3a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f3c:	1dbb      	adds	r3, r7, #6
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	045c      	lsls	r4, r3, #17
 8004f46:	197b      	adds	r3, r7, r5
 8004f48:	8819      	ldrh	r1, [r3, #0]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	4b23      	ldr	r3, [pc, #140]	; (8004fdc <I2C_RequestMemoryWrite+0xc4>)
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	0023      	movs	r3, r4
 8004f52:	f000 f9e9 	bl	8005328 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f58:	6a39      	ldr	r1, [r7, #32]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f000 f902 	bl	8005166 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f62:	1e03      	subs	r3, r0, #0
 8004f64:	d001      	beq.n	8004f6a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e033      	b.n	8004fd2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f6a:	1dbb      	adds	r3, r7, #6
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d107      	bne.n	8004f82 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f72:	2308      	movs	r3, #8
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f80:	e019      	b.n	8004fb6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f82:	2308      	movs	r3, #8
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	0a1b      	lsrs	r3, r3, #8
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f96:	6a39      	ldr	r1, [r7, #32]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f000 f8e3 	bl	8005166 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fa0:	1e03      	subs	r3, r0, #0
 8004fa2:	d001      	beq.n	8004fa8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e014      	b.n	8004fd2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa8:	2308      	movs	r3, #8
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb6:	6a3a      	ldr	r2, [r7, #32]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	0013      	movs	r3, r2
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	f000 f890 	bl	80050e8 <I2C_WaitOnFlagUntilTimeout>
 8004fc8:	1e03      	subs	r3, r0, #0
 8004fca:	d001      	beq.n	8004fd0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b004      	add	sp, #16
 8004fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	80002000 	.word	0x80002000

08004fe0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b5b0      	push	{r4, r5, r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	000c      	movs	r4, r1
 8004fea:	0010      	movs	r0, r2
 8004fec:	0019      	movs	r1, r3
 8004fee:	250a      	movs	r5, #10
 8004ff0:	197b      	adds	r3, r7, r5
 8004ff2:	1c22      	adds	r2, r4, #0
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	1c02      	adds	r2, r0, #0
 8004ffc:	801a      	strh	r2, [r3, #0]
 8004ffe:	1dbb      	adds	r3, r7, #6
 8005000:	1c0a      	adds	r2, r1, #0
 8005002:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005004:	1dbb      	adds	r3, r7, #6
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	197b      	adds	r3, r7, r5
 800500c:	8819      	ldrh	r1, [r3, #0]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <I2C_RequestMemoryRead+0xc0>)
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	2300      	movs	r3, #0
 8005016:	f000 f987 	bl	8005328 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501c:	6a39      	ldr	r1, [r7, #32]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	0018      	movs	r0, r3
 8005022:	f000 f8a0 	bl	8005166 <I2C_WaitOnTXISFlagUntilTimeout>
 8005026:	1e03      	subs	r3, r0, #0
 8005028:	d001      	beq.n	800502e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e033      	b.n	8005096 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800502e:	1dbb      	adds	r3, r7, #6
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d107      	bne.n	8005046 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005036:	2308      	movs	r3, #8
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28
 8005044:	e019      	b.n	800507a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005046:	2308      	movs	r3, #8
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	0a1b      	lsrs	r3, r3, #8
 800504e:	b29b      	uxth	r3, r3
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505a:	6a39      	ldr	r1, [r7, #32]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	0018      	movs	r0, r3
 8005060:	f000 f881 	bl	8005166 <I2C_WaitOnTXISFlagUntilTimeout>
 8005064:	1e03      	subs	r3, r0, #0
 8005066:	d001      	beq.n	800506c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e014      	b.n	8005096 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800506c:	2308      	movs	r3, #8
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b2da      	uxtb	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	0013      	movs	r3, r2
 8005084:	2200      	movs	r2, #0
 8005086:	2140      	movs	r1, #64	; 0x40
 8005088:	f000 f82e 	bl	80050e8 <I2C_WaitOnFlagUntilTimeout>
 800508c:	1e03      	subs	r3, r0, #0
 800508e:	d001      	beq.n	8005094 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	0018      	movs	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	b004      	add	sp, #16
 800509c:	bdb0      	pop	{r4, r5, r7, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	80002000 	.word	0x80002000

080050a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	2202      	movs	r2, #2
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d103      	bne.n	80050c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2201      	movs	r2, #1
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d007      	beq.n	80050e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2101      	movs	r1, #1
 80050dc:	430a      	orrs	r2, r1
 80050de:	619a      	str	r2, [r3, #24]
  }
}
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b002      	add	sp, #8
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	1dfb      	adds	r3, r7, #7
 80050f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f8:	e021      	b.n	800513e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	3301      	adds	r3, #1
 80050fe:	d01e      	beq.n	800513e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005100:	f7ff f9b4 	bl	800446c <HAL_GetTick>
 8005104:	0002      	movs	r2, r0
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d302      	bcc.n	8005116 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d113      	bne.n	800513e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	2220      	movs	r2, #32
 800511c:	431a      	orrs	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2241      	movs	r2, #65	; 0x41
 8005126:	2120      	movs	r1, #32
 8005128:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2242      	movs	r2, #66	; 0x42
 800512e:	2100      	movs	r1, #0
 8005130:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2240      	movs	r2, #64	; 0x40
 8005136:	2100      	movs	r1, #0
 8005138:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e00f      	b.n	800515e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	4013      	ands	r3, r2
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	425a      	negs	r2, r3
 800514e:	4153      	adcs	r3, r2
 8005150:	b2db      	uxtb	r3, r3
 8005152:	001a      	movs	r2, r3
 8005154:	1dfb      	adds	r3, r7, #7
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d0ce      	beq.n	80050fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	0018      	movs	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	b004      	add	sp, #16
 8005164:	bd80      	pop	{r7, pc}

08005166 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005172:	e02b      	b.n	80051cc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	0018      	movs	r0, r3
 800517c:	f000 f86e 	bl	800525c <I2C_IsAcknowledgeFailed>
 8005180:	1e03      	subs	r3, r0, #0
 8005182:	d001      	beq.n	8005188 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e029      	b.n	80051dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	3301      	adds	r3, #1
 800518c:	d01e      	beq.n	80051cc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518e:	f7ff f96d 	bl	800446c <HAL_GetTick>
 8005192:	0002      	movs	r2, r0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d113      	bne.n	80051cc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a8:	2220      	movs	r2, #32
 80051aa:	431a      	orrs	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2241      	movs	r2, #65	; 0x41
 80051b4:	2120      	movs	r1, #32
 80051b6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2242      	movs	r2, #66	; 0x42
 80051bc:	2100      	movs	r1, #0
 80051be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2240      	movs	r2, #64	; 0x40
 80051c4:	2100      	movs	r1, #0
 80051c6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e007      	b.n	80051dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2202      	movs	r2, #2
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d1cc      	bne.n	8005174 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	b004      	add	sp, #16
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051f0:	e028      	b.n	8005244 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f000 f82f 	bl	800525c <I2C_IsAcknowledgeFailed>
 80051fe:	1e03      	subs	r3, r0, #0
 8005200:	d001      	beq.n	8005206 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e026      	b.n	8005254 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005206:	f7ff f931 	bl	800446c <HAL_GetTick>
 800520a:	0002      	movs	r2, r0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	d302      	bcc.n	800521c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d113      	bne.n	8005244 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005220:	2220      	movs	r2, #32
 8005222:	431a      	orrs	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2241      	movs	r2, #65	; 0x41
 800522c:	2120      	movs	r1, #32
 800522e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2242      	movs	r2, #66	; 0x42
 8005234:	2100      	movs	r1, #0
 8005236:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2240      	movs	r2, #64	; 0x40
 800523c:	2100      	movs	r1, #0
 800523e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e007      	b.n	8005254 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2220      	movs	r2, #32
 800524c:	4013      	ands	r3, r2
 800524e:	2b20      	cmp	r3, #32
 8005250:	d1cf      	bne.n	80051f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	0018      	movs	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	b004      	add	sp, #16
 800525a:	bd80      	pop	{r7, pc}

0800525c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	2210      	movs	r2, #16
 8005270:	4013      	ands	r3, r2
 8005272:	2b10      	cmp	r3, #16
 8005274:	d151      	bne.n	800531a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005276:	e021      	b.n	80052bc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	3301      	adds	r3, #1
 800527c:	d01e      	beq.n	80052bc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527e:	f7ff f8f5 	bl	800446c <HAL_GetTick>
 8005282:	0002      	movs	r2, r0
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <I2C_IsAcknowledgeFailed+0x38>
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d113      	bne.n	80052bc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005298:	2220      	movs	r2, #32
 800529a:	431a      	orrs	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2241      	movs	r2, #65	; 0x41
 80052a4:	2120      	movs	r1, #32
 80052a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2242      	movs	r2, #66	; 0x42
 80052ac:	2100      	movs	r1, #0
 80052ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2240      	movs	r2, #64	; 0x40
 80052b4:	2100      	movs	r1, #0
 80052b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e02f      	b.n	800531c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2220      	movs	r2, #32
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d1d6      	bne.n	8005278 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2210      	movs	r2, #16
 80052d0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2220      	movs	r2, #32
 80052d8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	0018      	movs	r0, r3
 80052de:	f7ff fee1 	bl	80050a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	490d      	ldr	r1, [pc, #52]	; (8005324 <I2C_IsAcknowledgeFailed+0xc8>)
 80052ee:	400a      	ands	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	2204      	movs	r2, #4
 80052f8:	431a      	orrs	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2241      	movs	r2, #65	; 0x41
 8005302:	2120      	movs	r1, #32
 8005304:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2242      	movs	r2, #66	; 0x42
 800530a:	2100      	movs	r1, #0
 800530c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2240      	movs	r2, #64	; 0x40
 8005312:	2100      	movs	r1, #0
 8005314:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b004      	add	sp, #16
 8005322:	bd80      	pop	{r7, pc}
 8005324:	fe00e800 	.word	0xfe00e800

08005328 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	0008      	movs	r0, r1
 8005332:	0011      	movs	r1, r2
 8005334:	607b      	str	r3, [r7, #4]
 8005336:	240a      	movs	r4, #10
 8005338:	193b      	adds	r3, r7, r4
 800533a:	1c02      	adds	r2, r0, #0
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	2009      	movs	r0, #9
 8005340:	183b      	adds	r3, r7, r0
 8005342:	1c0a      	adds	r2, r1, #0
 8005344:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	6a3a      	ldr	r2, [r7, #32]
 800534e:	0d51      	lsrs	r1, r2, #21
 8005350:	2280      	movs	r2, #128	; 0x80
 8005352:	00d2      	lsls	r2, r2, #3
 8005354:	400a      	ands	r2, r1
 8005356:	490e      	ldr	r1, [pc, #56]	; (8005390 <I2C_TransferConfig+0x68>)
 8005358:	430a      	orrs	r2, r1
 800535a:	43d2      	mvns	r2, r2
 800535c:	401a      	ands	r2, r3
 800535e:	0011      	movs	r1, r2
 8005360:	193b      	adds	r3, r7, r4
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	059b      	lsls	r3, r3, #22
 8005366:	0d9a      	lsrs	r2, r3, #22
 8005368:	183b      	adds	r3, r7, r0
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	0418      	lsls	r0, r3, #16
 800536e:	23ff      	movs	r3, #255	; 0xff
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	4003      	ands	r3, r0
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	431a      	orrs	r2, r3
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	431a      	orrs	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	46bd      	mov	sp, r7
 800538a:	b005      	add	sp, #20
 800538c:	bd90      	pop	{r4, r7, pc}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	03ff63ff 	.word	0x03ff63ff

08005394 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2241      	movs	r2, #65	; 0x41
 80053a2:	5c9b      	ldrb	r3, [r3, r2]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d138      	bne.n	800541c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2240      	movs	r2, #64	; 0x40
 80053ae:	5c9b      	ldrb	r3, [r3, r2]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e032      	b.n	800541e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2240      	movs	r2, #64	; 0x40
 80053bc:	2101      	movs	r1, #1
 80053be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2241      	movs	r2, #65	; 0x41
 80053c4:	2124      	movs	r1, #36	; 0x24
 80053c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2101      	movs	r1, #1
 80053d4:	438a      	bics	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4911      	ldr	r1, [pc, #68]	; (8005428 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80053e4:	400a      	ands	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6819      	ldr	r1, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2101      	movs	r1, #1
 8005404:	430a      	orrs	r2, r1
 8005406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2241      	movs	r2, #65	; 0x41
 800540c:	2120      	movs	r1, #32
 800540e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2240      	movs	r2, #64	; 0x40
 8005414:	2100      	movs	r1, #0
 8005416:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	0018      	movs	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	b002      	add	sp, #8
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	ffffefff 	.word	0xffffefff

0800542c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2241      	movs	r2, #65	; 0x41
 800543a:	5c9b      	ldrb	r3, [r3, r2]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b20      	cmp	r3, #32
 8005440:	d139      	bne.n	80054b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2240      	movs	r2, #64	; 0x40
 8005446:	5c9b      	ldrb	r3, [r3, r2]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800544c:	2302      	movs	r3, #2
 800544e:	e033      	b.n	80054b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2240      	movs	r2, #64	; 0x40
 8005454:	2101      	movs	r1, #1
 8005456:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2241      	movs	r2, #65	; 0x41
 800545c:	2124      	movs	r1, #36	; 0x24
 800545e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2101      	movs	r1, #1
 800546c:	438a      	bics	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a11      	ldr	r2, [pc, #68]	; (80054c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800547c:	4013      	ands	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2101      	movs	r1, #1
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2241      	movs	r2, #65	; 0x41
 80054a6:	2120      	movs	r1, #32
 80054a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2240      	movs	r2, #64	; 0x40
 80054ae:	2100      	movs	r1, #0
 80054b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e000      	b.n	80054b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
  }
}
 80054b8:	0018      	movs	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b004      	add	sp, #16
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	fffff0ff 	.word	0xfffff0ff

080054c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c4:	b5b0      	push	{r4, r5, r7, lr}
 80054c6:	b08a      	sub	sp, #40	; 0x28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d102      	bne.n	80054d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f000 fbaf 	bl	8005c36 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d8:	4bcf      	ldr	r3, [pc, #828]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	220c      	movs	r2, #12
 80054de:	4013      	ands	r3, r2
 80054e0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054e2:	4bcd      	ldr	r3, [pc, #820]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	025b      	lsls	r3, r3, #9
 80054ea:	4013      	ands	r3, r2
 80054ec:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2201      	movs	r2, #1
 80054f4:	4013      	ands	r3, r2
 80054f6:	d100      	bne.n	80054fa <HAL_RCC_OscConfig+0x36>
 80054f8:	e07e      	b.n	80055f8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d007      	beq.n	8005510 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	2b0c      	cmp	r3, #12
 8005504:	d112      	bne.n	800552c <HAL_RCC_OscConfig+0x68>
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	025b      	lsls	r3, r3, #9
 800550c:	429a      	cmp	r2, r3
 800550e:	d10d      	bne.n	800552c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005510:	4bc1      	ldr	r3, [pc, #772]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	029b      	lsls	r3, r3, #10
 8005518:	4013      	ands	r3, r2
 800551a:	d100      	bne.n	800551e <HAL_RCC_OscConfig+0x5a>
 800551c:	e06b      	b.n	80055f6 <HAL_RCC_OscConfig+0x132>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d167      	bne.n	80055f6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f000 fb85 	bl	8005c36 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	025b      	lsls	r3, r3, #9
 8005534:	429a      	cmp	r2, r3
 8005536:	d107      	bne.n	8005548 <HAL_RCC_OscConfig+0x84>
 8005538:	4bb7      	ldr	r3, [pc, #732]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4bb6      	ldr	r3, [pc, #728]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	0249      	lsls	r1, r1, #9
 8005542:	430a      	orrs	r2, r1
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e027      	b.n	8005598 <HAL_RCC_OscConfig+0xd4>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	23a0      	movs	r3, #160	; 0xa0
 800554e:	02db      	lsls	r3, r3, #11
 8005550:	429a      	cmp	r2, r3
 8005552:	d10e      	bne.n	8005572 <HAL_RCC_OscConfig+0xae>
 8005554:	4bb0      	ldr	r3, [pc, #704]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4baf      	ldr	r3, [pc, #700]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 800555a:	2180      	movs	r1, #128	; 0x80
 800555c:	02c9      	lsls	r1, r1, #11
 800555e:	430a      	orrs	r2, r1
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	4bad      	ldr	r3, [pc, #692]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4bac      	ldr	r3, [pc, #688]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005568:	2180      	movs	r1, #128	; 0x80
 800556a:	0249      	lsls	r1, r1, #9
 800556c:	430a      	orrs	r2, r1
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e012      	b.n	8005598 <HAL_RCC_OscConfig+0xd4>
 8005572:	4ba9      	ldr	r3, [pc, #676]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4ba8      	ldr	r3, [pc, #672]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005578:	49a8      	ldr	r1, [pc, #672]	; (800581c <HAL_RCC_OscConfig+0x358>)
 800557a:	400a      	ands	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	4ba6      	ldr	r3, [pc, #664]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	2380      	movs	r3, #128	; 0x80
 8005584:	025b      	lsls	r3, r3, #9
 8005586:	4013      	ands	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4ba2      	ldr	r3, [pc, #648]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4ba1      	ldr	r3, [pc, #644]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005592:	49a3      	ldr	r1, [pc, #652]	; (8005820 <HAL_RCC_OscConfig+0x35c>)
 8005594:	400a      	ands	r2, r1
 8005596:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d015      	beq.n	80055cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a0:	f7fe ff64 	bl	800446c <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055a8:	e009      	b.n	80055be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055aa:	f7fe ff5f 	bl	800446c <HAL_GetTick>
 80055ae:	0002      	movs	r2, r0
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b64      	cmp	r3, #100	; 0x64
 80055b6:	d902      	bls.n	80055be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	f000 fb3c 	bl	8005c36 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055be:	4b96      	ldr	r3, [pc, #600]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	029b      	lsls	r3, r3, #10
 80055c6:	4013      	ands	r3, r2
 80055c8:	d0ef      	beq.n	80055aa <HAL_RCC_OscConfig+0xe6>
 80055ca:	e015      	b.n	80055f8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055cc:	f7fe ff4e 	bl	800446c <HAL_GetTick>
 80055d0:	0003      	movs	r3, r0
 80055d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d6:	f7fe ff49 	bl	800446c <HAL_GetTick>
 80055da:	0002      	movs	r2, r0
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b64      	cmp	r3, #100	; 0x64
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e326      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055e8:	4b8b      	ldr	r3, [pc, #556]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	029b      	lsls	r3, r3, #10
 80055f0:	4013      	ands	r3, r2
 80055f2:	d1f0      	bne.n	80055d6 <HAL_RCC_OscConfig+0x112>
 80055f4:	e000      	b.n	80055f8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2202      	movs	r2, #2
 80055fe:	4013      	ands	r3, r2
 8005600:	d100      	bne.n	8005604 <HAL_RCC_OscConfig+0x140>
 8005602:	e08b      	b.n	800571c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	2b04      	cmp	r3, #4
 800560e:	d005      	beq.n	800561c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	2b0c      	cmp	r3, #12
 8005614:	d13e      	bne.n	8005694 <HAL_RCC_OscConfig+0x1d0>
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d13b      	bne.n	8005694 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800561c:	4b7e      	ldr	r3, [pc, #504]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2204      	movs	r2, #4
 8005622:	4013      	ands	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_RCC_OscConfig+0x16c>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e302      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005630:	4b79      	ldr	r3, [pc, #484]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a7b      	ldr	r2, [pc, #492]	; (8005824 <HAL_RCC_OscConfig+0x360>)
 8005636:	4013      	ands	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	021a      	lsls	r2, r3, #8
 8005640:	4b75      	ldr	r3, [pc, #468]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005646:	4b74      	ldr	r3, [pc, #464]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2209      	movs	r2, #9
 800564c:	4393      	bics	r3, r2
 800564e:	0019      	movs	r1, r3
 8005650:	4b71      	ldr	r3, [pc, #452]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	430a      	orrs	r2, r1
 8005656:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005658:	f000 fc40 	bl	8005edc <HAL_RCC_GetSysClockFreq>
 800565c:	0001      	movs	r1, r0
 800565e:	4b6e      	ldr	r3, [pc, #440]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	091b      	lsrs	r3, r3, #4
 8005664:	220f      	movs	r2, #15
 8005666:	4013      	ands	r3, r2
 8005668:	4a6f      	ldr	r2, [pc, #444]	; (8005828 <HAL_RCC_OscConfig+0x364>)
 800566a:	5cd3      	ldrb	r3, [r2, r3]
 800566c:	000a      	movs	r2, r1
 800566e:	40da      	lsrs	r2, r3
 8005670:	4b6e      	ldr	r3, [pc, #440]	; (800582c <HAL_RCC_OscConfig+0x368>)
 8005672:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005674:	4b6e      	ldr	r3, [pc, #440]	; (8005830 <HAL_RCC_OscConfig+0x36c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2513      	movs	r5, #19
 800567a:	197c      	adds	r4, r7, r5
 800567c:	0018      	movs	r0, r3
 800567e:	f7fe feaf 	bl	80043e0 <HAL_InitTick>
 8005682:	0003      	movs	r3, r0
 8005684:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005686:	197b      	adds	r3, r7, r5
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d046      	beq.n	800571c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800568e:	197b      	adds	r3, r7, r5
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	e2d0      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d027      	beq.n	80056ea <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800569a:	4b5f      	ldr	r3, [pc, #380]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2209      	movs	r2, #9
 80056a0:	4393      	bics	r3, r2
 80056a2:	0019      	movs	r1, r3
 80056a4:	4b5c      	ldr	r3, [pc, #368]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fe fede 	bl	800446c <HAL_GetTick>
 80056b0:	0003      	movs	r3, r0
 80056b2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056b6:	f7fe fed9 	bl	800446c <HAL_GetTick>
 80056ba:	0002      	movs	r2, r0
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e2b6      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c8:	4b53      	ldr	r3, [pc, #332]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2204      	movs	r2, #4
 80056ce:	4013      	ands	r3, r2
 80056d0:	d0f1      	beq.n	80056b6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d2:	4b51      	ldr	r3, [pc, #324]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4a53      	ldr	r2, [pc, #332]	; (8005824 <HAL_RCC_OscConfig+0x360>)
 80056d8:	4013      	ands	r3, r2
 80056da:	0019      	movs	r1, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	021a      	lsls	r2, r3, #8
 80056e2:	4b4d      	ldr	r3, [pc, #308]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80056e4:	430a      	orrs	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	e018      	b.n	800571c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ea:	4b4b      	ldr	r3, [pc, #300]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b4a      	ldr	r3, [pc, #296]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80056f0:	2101      	movs	r1, #1
 80056f2:	438a      	bics	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f6:	f7fe feb9 	bl	800446c <HAL_GetTick>
 80056fa:	0003      	movs	r3, r0
 80056fc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005700:	f7fe feb4 	bl	800446c <HAL_GetTick>
 8005704:	0002      	movs	r2, r0
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e291      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005712:	4b41      	ldr	r3, [pc, #260]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2204      	movs	r2, #4
 8005718:	4013      	ands	r3, r2
 800571a:	d1f1      	bne.n	8005700 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2210      	movs	r2, #16
 8005722:	4013      	ands	r3, r2
 8005724:	d100      	bne.n	8005728 <HAL_RCC_OscConfig+0x264>
 8005726:	e0a1      	b.n	800586c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d140      	bne.n	80057b0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800572e:	4b3a      	ldr	r3, [pc, #232]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4013      	ands	r3, r2
 8005738:	d005      	beq.n	8005746 <HAL_RCC_OscConfig+0x282>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e277      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005746:	4b34      	ldr	r3, [pc, #208]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4a3a      	ldr	r2, [pc, #232]	; (8005834 <HAL_RCC_OscConfig+0x370>)
 800574c:	4013      	ands	r3, r2
 800574e:	0019      	movs	r1, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005754:	4b30      	ldr	r3, [pc, #192]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800575a:	4b2f      	ldr	r3, [pc, #188]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	0a19      	lsrs	r1, r3, #8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	061a      	lsls	r2, r3, #24
 8005768:	4b2b      	ldr	r3, [pc, #172]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	0b5b      	lsrs	r3, r3, #13
 8005774:	3301      	adds	r3, #1
 8005776:	2280      	movs	r2, #128	; 0x80
 8005778:	0212      	lsls	r2, r2, #8
 800577a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800577c:	4b26      	ldr	r3, [pc, #152]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	210f      	movs	r1, #15
 8005784:	400b      	ands	r3, r1
 8005786:	4928      	ldr	r1, [pc, #160]	; (8005828 <HAL_RCC_OscConfig+0x364>)
 8005788:	5ccb      	ldrb	r3, [r1, r3]
 800578a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800578c:	4b27      	ldr	r3, [pc, #156]	; (800582c <HAL_RCC_OscConfig+0x368>)
 800578e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005790:	4b27      	ldr	r3, [pc, #156]	; (8005830 <HAL_RCC_OscConfig+0x36c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2513      	movs	r5, #19
 8005796:	197c      	adds	r4, r7, r5
 8005798:	0018      	movs	r0, r3
 800579a:	f7fe fe21 	bl	80043e0 <HAL_InitTick>
 800579e:	0003      	movs	r3, r0
 80057a0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80057a2:	197b      	adds	r3, r7, r5
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d060      	beq.n	800586c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80057aa:	197b      	adds	r3, r7, r5
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	e242      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d03f      	beq.n	8005838 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057b8:	4b17      	ldr	r3, [pc, #92]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4b16      	ldr	r3, [pc, #88]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80057be:	2180      	movs	r1, #128	; 0x80
 80057c0:	0049      	lsls	r1, r1, #1
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c6:	f7fe fe51 	bl	800446c <HAL_GetTick>
 80057ca:	0003      	movs	r3, r0
 80057cc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057d0:	f7fe fe4c 	bl	800446c <HAL_GetTick>
 80057d4:	0002      	movs	r2, r0
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e229      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80057e2:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	2380      	movs	r3, #128	; 0x80
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4013      	ands	r3, r2
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4a10      	ldr	r2, [pc, #64]	; (8005834 <HAL_RCC_OscConfig+0x370>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	0019      	movs	r1, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	0a19      	lsrs	r1, r3, #8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	061a      	lsls	r2, r3, #24
 8005810:	4b01      	ldr	r3, [pc, #4]	; (8005818 <HAL_RCC_OscConfig+0x354>)
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	e029      	b.n	800586c <HAL_RCC_OscConfig+0x3a8>
 8005818:	40021000 	.word	0x40021000
 800581c:	fffeffff 	.word	0xfffeffff
 8005820:	fffbffff 	.word	0xfffbffff
 8005824:	ffffe0ff 	.word	0xffffe0ff
 8005828:	0800a1d4 	.word	0x0800a1d4
 800582c:	20000000 	.word	0x20000000
 8005830:	20000004 	.word	0x20000004
 8005834:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005838:	4bbd      	ldr	r3, [pc, #756]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4bbc      	ldr	r3, [pc, #752]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 800583e:	49bd      	ldr	r1, [pc, #756]	; (8005b34 <HAL_RCC_OscConfig+0x670>)
 8005840:	400a      	ands	r2, r1
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fe fe12 	bl	800446c <HAL_GetTick>
 8005848:	0003      	movs	r3, r0
 800584a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800584e:	f7fe fe0d 	bl	800446c <HAL_GetTick>
 8005852:	0002      	movs	r2, r0
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e1ea      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005860:	4bb3      	ldr	r3, [pc, #716]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4013      	ands	r3, r2
 800586a:	d1f0      	bne.n	800584e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2208      	movs	r2, #8
 8005872:	4013      	ands	r3, r2
 8005874:	d036      	beq.n	80058e4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d019      	beq.n	80058b2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800587e:	4bac      	ldr	r3, [pc, #688]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005882:	4bab      	ldr	r3, [pc, #684]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005884:	2101      	movs	r1, #1
 8005886:	430a      	orrs	r2, r1
 8005888:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588a:	f7fe fdef 	bl	800446c <HAL_GetTick>
 800588e:	0003      	movs	r3, r0
 8005890:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005894:	f7fe fdea 	bl	800446c <HAL_GetTick>
 8005898:	0002      	movs	r2, r0
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e1c7      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058a6:	4ba2      	ldr	r3, [pc, #648]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80058a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058aa:	2202      	movs	r2, #2
 80058ac:	4013      	ands	r3, r2
 80058ae:	d0f1      	beq.n	8005894 <HAL_RCC_OscConfig+0x3d0>
 80058b0:	e018      	b.n	80058e4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058b2:	4b9f      	ldr	r3, [pc, #636]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80058b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058b6:	4b9e      	ldr	r3, [pc, #632]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80058b8:	2101      	movs	r1, #1
 80058ba:	438a      	bics	r2, r1
 80058bc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058be:	f7fe fdd5 	bl	800446c <HAL_GetTick>
 80058c2:	0003      	movs	r3, r0
 80058c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058c8:	f7fe fdd0 	bl	800446c <HAL_GetTick>
 80058cc:	0002      	movs	r2, r0
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e1ad      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058da:	4b95      	ldr	r3, [pc, #596]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80058dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058de:	2202      	movs	r2, #2
 80058e0:	4013      	ands	r3, r2
 80058e2:	d1f1      	bne.n	80058c8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2204      	movs	r2, #4
 80058ea:	4013      	ands	r3, r2
 80058ec:	d100      	bne.n	80058f0 <HAL_RCC_OscConfig+0x42c>
 80058ee:	e0ae      	b.n	8005a4e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f0:	2027      	movs	r0, #39	; 0x27
 80058f2:	183b      	adds	r3, r7, r0
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f8:	4b8d      	ldr	r3, [pc, #564]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80058fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	055b      	lsls	r3, r3, #21
 8005900:	4013      	ands	r3, r2
 8005902:	d109      	bne.n	8005918 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005904:	4b8a      	ldr	r3, [pc, #552]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005908:	4b89      	ldr	r3, [pc, #548]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 800590a:	2180      	movs	r1, #128	; 0x80
 800590c:	0549      	lsls	r1, r1, #21
 800590e:	430a      	orrs	r2, r1
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005912:	183b      	adds	r3, r7, r0
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005918:	4b87      	ldr	r3, [pc, #540]	; (8005b38 <HAL_RCC_OscConfig+0x674>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	2380      	movs	r3, #128	; 0x80
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	4013      	ands	r3, r2
 8005922:	d11a      	bne.n	800595a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005924:	4b84      	ldr	r3, [pc, #528]	; (8005b38 <HAL_RCC_OscConfig+0x674>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b83      	ldr	r3, [pc, #524]	; (8005b38 <HAL_RCC_OscConfig+0x674>)
 800592a:	2180      	movs	r1, #128	; 0x80
 800592c:	0049      	lsls	r1, r1, #1
 800592e:	430a      	orrs	r2, r1
 8005930:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005932:	f7fe fd9b 	bl	800446c <HAL_GetTick>
 8005936:	0003      	movs	r3, r0
 8005938:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593c:	f7fe fd96 	bl	800446c <HAL_GetTick>
 8005940:	0002      	movs	r2, r0
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b64      	cmp	r3, #100	; 0x64
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e173      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594e:	4b7a      	ldr	r3, [pc, #488]	; (8005b38 <HAL_RCC_OscConfig+0x674>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	4013      	ands	r3, r2
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	2380      	movs	r3, #128	; 0x80
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	429a      	cmp	r2, r3
 8005964:	d107      	bne.n	8005976 <HAL_RCC_OscConfig+0x4b2>
 8005966:	4b72      	ldr	r3, [pc, #456]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800596a:	4b71      	ldr	r3, [pc, #452]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 800596c:	2180      	movs	r1, #128	; 0x80
 800596e:	0049      	lsls	r1, r1, #1
 8005970:	430a      	orrs	r2, r1
 8005972:	651a      	str	r2, [r3, #80]	; 0x50
 8005974:	e031      	b.n	80059da <HAL_RCC_OscConfig+0x516>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10c      	bne.n	8005998 <HAL_RCC_OscConfig+0x4d4>
 800597e:	4b6c      	ldr	r3, [pc, #432]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005982:	4b6b      	ldr	r3, [pc, #428]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005984:	496b      	ldr	r1, [pc, #428]	; (8005b34 <HAL_RCC_OscConfig+0x670>)
 8005986:	400a      	ands	r2, r1
 8005988:	651a      	str	r2, [r3, #80]	; 0x50
 800598a:	4b69      	ldr	r3, [pc, #420]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 800598c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800598e:	4b68      	ldr	r3, [pc, #416]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005990:	496a      	ldr	r1, [pc, #424]	; (8005b3c <HAL_RCC_OscConfig+0x678>)
 8005992:	400a      	ands	r2, r1
 8005994:	651a      	str	r2, [r3, #80]	; 0x50
 8005996:	e020      	b.n	80059da <HAL_RCC_OscConfig+0x516>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	23a0      	movs	r3, #160	; 0xa0
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d10e      	bne.n	80059c2 <HAL_RCC_OscConfig+0x4fe>
 80059a4:	4b62      	ldr	r3, [pc, #392]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80059a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059a8:	4b61      	ldr	r3, [pc, #388]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80059aa:	2180      	movs	r1, #128	; 0x80
 80059ac:	00c9      	lsls	r1, r1, #3
 80059ae:	430a      	orrs	r2, r1
 80059b0:	651a      	str	r2, [r3, #80]	; 0x50
 80059b2:	4b5f      	ldr	r3, [pc, #380]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80059b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059b6:	4b5e      	ldr	r3, [pc, #376]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80059b8:	2180      	movs	r1, #128	; 0x80
 80059ba:	0049      	lsls	r1, r1, #1
 80059bc:	430a      	orrs	r2, r1
 80059be:	651a      	str	r2, [r3, #80]	; 0x50
 80059c0:	e00b      	b.n	80059da <HAL_RCC_OscConfig+0x516>
 80059c2:	4b5b      	ldr	r3, [pc, #364]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80059c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059c6:	4b5a      	ldr	r3, [pc, #360]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80059c8:	495a      	ldr	r1, [pc, #360]	; (8005b34 <HAL_RCC_OscConfig+0x670>)
 80059ca:	400a      	ands	r2, r1
 80059cc:	651a      	str	r2, [r3, #80]	; 0x50
 80059ce:	4b58      	ldr	r3, [pc, #352]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80059d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059d2:	4b57      	ldr	r3, [pc, #348]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 80059d4:	4959      	ldr	r1, [pc, #356]	; (8005b3c <HAL_RCC_OscConfig+0x678>)
 80059d6:	400a      	ands	r2, r1
 80059d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d015      	beq.n	8005a0e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e2:	f7fe fd43 	bl	800446c <HAL_GetTick>
 80059e6:	0003      	movs	r3, r0
 80059e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059ea:	e009      	b.n	8005a00 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ec:	f7fe fd3e 	bl	800446c <HAL_GetTick>
 80059f0:	0002      	movs	r2, r0
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	4a52      	ldr	r2, [pc, #328]	; (8005b40 <HAL_RCC_OscConfig+0x67c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e11a      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a00:	4b4b      	ldr	r3, [pc, #300]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005a02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d0ef      	beq.n	80059ec <HAL_RCC_OscConfig+0x528>
 8005a0c:	e014      	b.n	8005a38 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a0e:	f7fe fd2d 	bl	800446c <HAL_GetTick>
 8005a12:	0003      	movs	r3, r0
 8005a14:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a16:	e009      	b.n	8005a2c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a18:	f7fe fd28 	bl	800446c <HAL_GetTick>
 8005a1c:	0002      	movs	r2, r0
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	4a47      	ldr	r2, [pc, #284]	; (8005b40 <HAL_RCC_OscConfig+0x67c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e104      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a2c:	4b40      	ldr	r3, [pc, #256]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005a2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4013      	ands	r3, r2
 8005a36:	d1ef      	bne.n	8005a18 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a38:	2327      	movs	r3, #39	; 0x27
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d105      	bne.n	8005a4e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a42:	4b3b      	ldr	r3, [pc, #236]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a46:	4b3a      	ldr	r3, [pc, #232]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005a48:	493e      	ldr	r1, [pc, #248]	; (8005b44 <HAL_RCC_OscConfig+0x680>)
 8005a4a:	400a      	ands	r2, r1
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2220      	movs	r2, #32
 8005a54:	4013      	ands	r3, r2
 8005a56:	d049      	beq.n	8005aec <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d026      	beq.n	8005aae <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005a60:	4b33      	ldr	r3, [pc, #204]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	4b32      	ldr	r3, [pc, #200]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005a66:	2101      	movs	r1, #1
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
 8005a6c:	4b30      	ldr	r3, [pc, #192]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a70:	4b2f      	ldr	r3, [pc, #188]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005a72:	2101      	movs	r1, #1
 8005a74:	430a      	orrs	r2, r1
 8005a76:	635a      	str	r2, [r3, #52]	; 0x34
 8005a78:	4b33      	ldr	r3, [pc, #204]	; (8005b48 <HAL_RCC_OscConfig+0x684>)
 8005a7a:	6a1a      	ldr	r2, [r3, #32]
 8005a7c:	4b32      	ldr	r3, [pc, #200]	; (8005b48 <HAL_RCC_OscConfig+0x684>)
 8005a7e:	2180      	movs	r1, #128	; 0x80
 8005a80:	0189      	lsls	r1, r1, #6
 8005a82:	430a      	orrs	r2, r1
 8005a84:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a86:	f7fe fcf1 	bl	800446c <HAL_GetTick>
 8005a8a:	0003      	movs	r3, r0
 8005a8c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a90:	f7fe fcec 	bl	800446c <HAL_GetTick>
 8005a94:	0002      	movs	r2, r0
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e0c9      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005aa2:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d0f1      	beq.n	8005a90 <HAL_RCC_OscConfig+0x5cc>
 8005aac:	e01e      	b.n	8005aec <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005aae:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	438a      	bics	r2, r1
 8005ab8:	609a      	str	r2, [r3, #8]
 8005aba:	4b23      	ldr	r3, [pc, #140]	; (8005b48 <HAL_RCC_OscConfig+0x684>)
 8005abc:	6a1a      	ldr	r2, [r3, #32]
 8005abe:	4b22      	ldr	r3, [pc, #136]	; (8005b48 <HAL_RCC_OscConfig+0x684>)
 8005ac0:	4922      	ldr	r1, [pc, #136]	; (8005b4c <HAL_RCC_OscConfig+0x688>)
 8005ac2:	400a      	ands	r2, r1
 8005ac4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac6:	f7fe fcd1 	bl	800446c <HAL_GetTick>
 8005aca:	0003      	movs	r3, r0
 8005acc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ad0:	f7fe fccc 	bl	800446c <HAL_GetTick>
 8005ad4:	0002      	movs	r2, r0
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e0a9      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ae2:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d1f1      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d100      	bne.n	8005af6 <HAL_RCC_OscConfig+0x632>
 8005af4:	e09e      	b.n	8005c34 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d100      	bne.n	8005afe <HAL_RCC_OscConfig+0x63a>
 8005afc:	e077      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d158      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <HAL_RCC_OscConfig+0x66c>)
 8005b0c:	4910      	ldr	r1, [pc, #64]	; (8005b50 <HAL_RCC_OscConfig+0x68c>)
 8005b0e:	400a      	ands	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b12:	f7fe fcab 	bl	800446c <HAL_GetTick>
 8005b16:	0003      	movs	r3, r0
 8005b18:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b1a:	e01b      	b.n	8005b54 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fe fca6 	bl	800446c <HAL_GetTick>
 8005b20:	0002      	movs	r2, r0
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d914      	bls.n	8005b54 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e083      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	40021000 	.word	0x40021000
 8005b34:	fffffeff 	.word	0xfffffeff
 8005b38:	40007000 	.word	0x40007000
 8005b3c:	fffffbff 	.word	0xfffffbff
 8005b40:	00001388 	.word	0x00001388
 8005b44:	efffffff 	.word	0xefffffff
 8005b48:	40010000 	.word	0x40010000
 8005b4c:	ffffdfff 	.word	0xffffdfff
 8005b50:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b54:	4b3a      	ldr	r3, [pc, #232]	; (8005c40 <HAL_RCC_OscConfig+0x77c>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	049b      	lsls	r3, r3, #18
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d1dd      	bne.n	8005b1c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b60:	4b37      	ldr	r3, [pc, #220]	; (8005c40 <HAL_RCC_OscConfig+0x77c>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a37      	ldr	r2, [pc, #220]	; (8005c44 <HAL_RCC_OscConfig+0x780>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	0019      	movs	r1, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <HAL_RCC_OscConfig+0x77c>)
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b80:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <HAL_RCC_OscConfig+0x77c>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <HAL_RCC_OscConfig+0x77c>)
 8005b86:	2180      	movs	r1, #128	; 0x80
 8005b88:	0449      	lsls	r1, r1, #17
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8e:	f7fe fc6d 	bl	800446c <HAL_GetTick>
 8005b92:	0003      	movs	r3, r0
 8005b94:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fe fc68 	bl	800446c <HAL_GetTick>
 8005b9c:	0002      	movs	r2, r0
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e045      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005baa:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <HAL_RCC_OscConfig+0x77c>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	049b      	lsls	r3, r3, #18
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d0f0      	beq.n	8005b98 <HAL_RCC_OscConfig+0x6d4>
 8005bb6:	e03d      	b.n	8005c34 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb8:	4b21      	ldr	r3, [pc, #132]	; (8005c40 <HAL_RCC_OscConfig+0x77c>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <HAL_RCC_OscConfig+0x77c>)
 8005bbe:	4922      	ldr	r1, [pc, #136]	; (8005c48 <HAL_RCC_OscConfig+0x784>)
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fe fc52 	bl	800446c <HAL_GetTick>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bce:	f7fe fc4d 	bl	800446c <HAL_GetTick>
 8005bd2:	0002      	movs	r2, r0
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e02a      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005be0:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <HAL_RCC_OscConfig+0x77c>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	049b      	lsls	r3, r3, #18
 8005be8:	4013      	ands	r3, r2
 8005bea:	d1f0      	bne.n	8005bce <HAL_RCC_OscConfig+0x70a>
 8005bec:	e022      	b.n	8005c34 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e01d      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bfa:	4b11      	ldr	r3, [pc, #68]	; (8005c40 <HAL_RCC_OscConfig+0x77c>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	025b      	lsls	r3, r3, #9
 8005c06:	401a      	ands	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d10f      	bne.n	8005c30 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	23f0      	movs	r3, #240	; 0xf0
 8005c14:	039b      	lsls	r3, r3, #14
 8005c16:	401a      	ands	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d107      	bne.n	8005c30 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	23c0      	movs	r3, #192	; 0xc0
 8005c24:	041b      	lsls	r3, r3, #16
 8005c26:	401a      	ands	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	0018      	movs	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b00a      	add	sp, #40	; 0x28
 8005c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	40021000 	.word	0x40021000
 8005c44:	ff02ffff 	.word	0xff02ffff
 8005c48:	feffffff 	.word	0xfeffffff

08005c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c4c:	b5b0      	push	{r4, r5, r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e128      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c60:	4b96      	ldr	r3, [pc, #600]	; (8005ebc <HAL_RCC_ClockConfig+0x270>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2201      	movs	r2, #1
 8005c66:	4013      	ands	r3, r2
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d91e      	bls.n	8005cac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6e:	4b93      	ldr	r3, [pc, #588]	; (8005ebc <HAL_RCC_ClockConfig+0x270>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2201      	movs	r2, #1
 8005c74:	4393      	bics	r3, r2
 8005c76:	0019      	movs	r1, r3
 8005c78:	4b90      	ldr	r3, [pc, #576]	; (8005ebc <HAL_RCC_ClockConfig+0x270>)
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c80:	f7fe fbf4 	bl	800446c <HAL_GetTick>
 8005c84:	0003      	movs	r3, r0
 8005c86:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c88:	e009      	b.n	8005c9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c8a:	f7fe fbef 	bl	800446c <HAL_GetTick>
 8005c8e:	0002      	movs	r2, r0
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	4a8a      	ldr	r2, [pc, #552]	; (8005ec0 <HAL_RCC_ClockConfig+0x274>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e109      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9e:	4b87      	ldr	r3, [pc, #540]	; (8005ebc <HAL_RCC_ClockConfig+0x270>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d1ee      	bne.n	8005c8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d009      	beq.n	8005cca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb6:	4b83      	ldr	r3, [pc, #524]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	22f0      	movs	r2, #240	; 0xf0
 8005cbc:	4393      	bics	r3, r2
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	4b7f      	ldr	r3, [pc, #508]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d100      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0x8a>
 8005cd4:	e089      	b.n	8005dea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d107      	bne.n	8005cee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cde:	4b79      	ldr	r3, [pc, #484]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	029b      	lsls	r3, r3, #10
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d120      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e0e1      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d107      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cf6:	4b73      	ldr	r3, [pc, #460]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	2380      	movs	r3, #128	; 0x80
 8005cfc:	049b      	lsls	r3, r3, #18
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d114      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e0d5      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d106      	bne.n	8005d1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d0e:	4b6d      	ldr	r3, [pc, #436]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2204      	movs	r2, #4
 8005d14:	4013      	ands	r3, r2
 8005d16:	d109      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0ca      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d1c:	4b69      	ldr	r3, [pc, #420]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	2380      	movs	r3, #128	; 0x80
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4013      	ands	r3, r2
 8005d26:	d101      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0c2      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d2c:	4b65      	ldr	r3, [pc, #404]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2203      	movs	r2, #3
 8005d32:	4393      	bics	r3, r2
 8005d34:	0019      	movs	r1, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	4b62      	ldr	r3, [pc, #392]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d40:	f7fe fb94 	bl	800446c <HAL_GetTick>
 8005d44:	0003      	movs	r3, r0
 8005d46:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d111      	bne.n	8005d74 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d50:	e009      	b.n	8005d66 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d52:	f7fe fb8b 	bl	800446c <HAL_GetTick>
 8005d56:	0002      	movs	r2, r0
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	4a58      	ldr	r2, [pc, #352]	; (8005ec0 <HAL_RCC_ClockConfig+0x274>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e0a5      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d66:	4b57      	ldr	r3, [pc, #348]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	220c      	movs	r2, #12
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d1ef      	bne.n	8005d52 <HAL_RCC_ClockConfig+0x106>
 8005d72:	e03a      	b.n	8005dea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d111      	bne.n	8005da0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d7c:	e009      	b.n	8005d92 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d7e:	f7fe fb75 	bl	800446c <HAL_GetTick>
 8005d82:	0002      	movs	r2, r0
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	4a4d      	ldr	r2, [pc, #308]	; (8005ec0 <HAL_RCC_ClockConfig+0x274>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e08f      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d92:	4b4c      	ldr	r3, [pc, #304]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	220c      	movs	r2, #12
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b0c      	cmp	r3, #12
 8005d9c:	d1ef      	bne.n	8005d7e <HAL_RCC_ClockConfig+0x132>
 8005d9e:	e024      	b.n	8005dea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d11b      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005da8:	e009      	b.n	8005dbe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005daa:	f7fe fb5f 	bl	800446c <HAL_GetTick>
 8005dae:	0002      	movs	r2, r0
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	4a42      	ldr	r2, [pc, #264]	; (8005ec0 <HAL_RCC_ClockConfig+0x274>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e079      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dbe:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	220c      	movs	r2, #12
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d1ef      	bne.n	8005daa <HAL_RCC_ClockConfig+0x15e>
 8005dca:	e00e      	b.n	8005dea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dcc:	f7fe fb4e 	bl	800446c <HAL_GetTick>
 8005dd0:	0002      	movs	r2, r0
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	4a3a      	ldr	r2, [pc, #232]	; (8005ec0 <HAL_RCC_ClockConfig+0x274>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e068      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005de0:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	220c      	movs	r2, #12
 8005de6:	4013      	ands	r3, r2
 8005de8:	d1f0      	bne.n	8005dcc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dea:	4b34      	ldr	r3, [pc, #208]	; (8005ebc <HAL_RCC_ClockConfig+0x270>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2201      	movs	r2, #1
 8005df0:	4013      	ands	r3, r2
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d21e      	bcs.n	8005e36 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df8:	4b30      	ldr	r3, [pc, #192]	; (8005ebc <HAL_RCC_ClockConfig+0x270>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	4393      	bics	r3, r2
 8005e00:	0019      	movs	r1, r3
 8005e02:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <HAL_RCC_ClockConfig+0x270>)
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e0a:	f7fe fb2f 	bl	800446c <HAL_GetTick>
 8005e0e:	0003      	movs	r3, r0
 8005e10:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	e009      	b.n	8005e28 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e14:	f7fe fb2a 	bl	800446c <HAL_GetTick>
 8005e18:	0002      	movs	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	4a28      	ldr	r2, [pc, #160]	; (8005ec0 <HAL_RCC_ClockConfig+0x274>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e044      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e28:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <HAL_RCC_ClockConfig+0x270>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4013      	ands	r3, r2
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d1ee      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e40:	4b20      	ldr	r3, [pc, #128]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <HAL_RCC_ClockConfig+0x27c>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	0019      	movs	r1, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005e50:	430a      	orrs	r2, r1
 8005e52:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d00a      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e5e:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <HAL_RCC_ClockConfig+0x280>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	0019      	movs	r1, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	00da      	lsls	r2, r3, #3
 8005e6e:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005e70:	430a      	orrs	r2, r1
 8005e72:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e74:	f000 f832 	bl	8005edc <HAL_RCC_GetSysClockFreq>
 8005e78:	0001      	movs	r1, r0
 8005e7a:	4b12      	ldr	r3, [pc, #72]	; (8005ec4 <HAL_RCC_ClockConfig+0x278>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	091b      	lsrs	r3, r3, #4
 8005e80:	220f      	movs	r2, #15
 8005e82:	4013      	ands	r3, r2
 8005e84:	4a12      	ldr	r2, [pc, #72]	; (8005ed0 <HAL_RCC_ClockConfig+0x284>)
 8005e86:	5cd3      	ldrb	r3, [r2, r3]
 8005e88:	000a      	movs	r2, r1
 8005e8a:	40da      	lsrs	r2, r3
 8005e8c:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <HAL_RCC_ClockConfig+0x288>)
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e90:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <HAL_RCC_ClockConfig+0x28c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	250b      	movs	r5, #11
 8005e96:	197c      	adds	r4, r7, r5
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7fe faa1 	bl	80043e0 <HAL_InitTick>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005ea2:	197b      	adds	r3, r7, r5
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005eaa:	197b      	adds	r3, r7, r5
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	e000      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b004      	add	sp, #16
 8005eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	40022000 	.word	0x40022000
 8005ec0:	00001388 	.word	0x00001388
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	fffff8ff 	.word	0xfffff8ff
 8005ecc:	ffffc7ff 	.word	0xffffc7ff
 8005ed0:	0800a1d4 	.word	0x0800a1d4
 8005ed4:	20000000 	.word	0x20000000
 8005ed8:	20000004 	.word	0x20000004

08005edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005edc:	b5b0      	push	{r4, r5, r7, lr}
 8005ede:	b08e      	sub	sp, #56	; 0x38
 8005ee0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005ee2:	4b4c      	ldr	r3, [pc, #304]	; (8006014 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eea:	230c      	movs	r3, #12
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b0c      	cmp	r3, #12
 8005ef0:	d014      	beq.n	8005f1c <HAL_RCC_GetSysClockFreq+0x40>
 8005ef2:	d900      	bls.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x1a>
 8005ef4:	e07b      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x112>
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d002      	beq.n	8005f00 <HAL_RCC_GetSysClockFreq+0x24>
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d00b      	beq.n	8005f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005efe:	e076      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005f00:	4b44      	ldr	r3, [pc, #272]	; (8006014 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2210      	movs	r2, #16
 8005f06:	4013      	ands	r3, r2
 8005f08:	d002      	beq.n	8005f10 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005f0a:	4b43      	ldr	r3, [pc, #268]	; (8006018 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005f0c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005f0e:	e07c      	b.n	800600a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005f10:	4b42      	ldr	r3, [pc, #264]	; (800601c <HAL_RCC_GetSysClockFreq+0x140>)
 8005f12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f14:	e079      	b.n	800600a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f16:	4b42      	ldr	r3, [pc, #264]	; (8006020 <HAL_RCC_GetSysClockFreq+0x144>)
 8005f18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f1a:	e076      	b.n	800600a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	0c9a      	lsrs	r2, r3, #18
 8005f20:	230f      	movs	r3, #15
 8005f22:	401a      	ands	r2, r3
 8005f24:	4b3f      	ldr	r3, [pc, #252]	; (8006024 <HAL_RCC_GetSysClockFreq+0x148>)
 8005f26:	5c9b      	ldrb	r3, [r3, r2]
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	0d9a      	lsrs	r2, r3, #22
 8005f2e:	2303      	movs	r3, #3
 8005f30:	4013      	ands	r3, r2
 8005f32:	3301      	adds	r3, #1
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f36:	4b37      	ldr	r3, [pc, #220]	; (8006014 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	025b      	lsls	r3, r3, #9
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d01a      	beq.n	8005f78 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	61bb      	str	r3, [r7, #24]
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
 8005f4a:	4a35      	ldr	r2, [pc, #212]	; (8006020 <HAL_RCC_GetSysClockFreq+0x144>)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	69b8      	ldr	r0, [r7, #24]
 8005f50:	69f9      	ldr	r1, [r7, #28]
 8005f52:	f7fa fac9 	bl	80004e8 <__aeabi_lmul>
 8005f56:	0002      	movs	r2, r0
 8005f58:	000b      	movs	r3, r1
 8005f5a:	0010      	movs	r0, r2
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f7fa fa9d 	bl	80004a8 <__aeabi_uldivmod>
 8005f6e:	0002      	movs	r2, r0
 8005f70:	000b      	movs	r3, r1
 8005f72:	0013      	movs	r3, r2
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
 8005f76:	e037      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005f78:	4b26      	ldr	r3, [pc, #152]	; (8006014 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2210      	movs	r2, #16
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d01a      	beq.n	8005fb8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	4a23      	ldr	r2, [pc, #140]	; (8006018 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	68b8      	ldr	r0, [r7, #8]
 8005f90:	68f9      	ldr	r1, [r7, #12]
 8005f92:	f7fa faa9 	bl	80004e8 <__aeabi_lmul>
 8005f96:	0002      	movs	r2, r0
 8005f98:	000b      	movs	r3, r1
 8005f9a:	0010      	movs	r0, r2
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f7fa fa7d 	bl	80004a8 <__aeabi_uldivmod>
 8005fae:	0002      	movs	r2, r0
 8005fb0:	000b      	movs	r3, r1
 8005fb2:	0013      	movs	r3, r2
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb6:	e017      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	0018      	movs	r0, r3
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	4a16      	ldr	r2, [pc, #88]	; (800601c <HAL_RCC_GetSysClockFreq+0x140>)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f7fa fa90 	bl	80004e8 <__aeabi_lmul>
 8005fc8:	0002      	movs	r2, r0
 8005fca:	000b      	movs	r3, r1
 8005fcc:	0010      	movs	r0, r2
 8005fce:	0019      	movs	r1, r3
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	001c      	movs	r4, r3
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	001d      	movs	r5, r3
 8005fd8:	0022      	movs	r2, r4
 8005fda:	002b      	movs	r3, r5
 8005fdc:	f7fa fa64 	bl	80004a8 <__aeabi_uldivmod>
 8005fe0:	0002      	movs	r2, r0
 8005fe2:	000b      	movs	r3, r1
 8005fe4:	0013      	movs	r3, r2
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005fec:	e00d      	b.n	800600a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	0b5b      	lsrs	r3, r3, #13
 8005ff4:	2207      	movs	r2, #7
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	2280      	movs	r2, #128	; 0x80
 8006000:	0212      	lsls	r2, r2, #8
 8006002:	409a      	lsls	r2, r3
 8006004:	0013      	movs	r3, r2
 8006006:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006008:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b00e      	add	sp, #56	; 0x38
 8006012:	bdb0      	pop	{r4, r5, r7, pc}
 8006014:	40021000 	.word	0x40021000
 8006018:	003d0900 	.word	0x003d0900
 800601c:	00f42400 	.word	0x00f42400
 8006020:	007a1200 	.word	0x007a1200
 8006024:	0800a1ec 	.word	0x0800a1ec

08006028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800602c:	4b02      	ldr	r3, [pc, #8]	; (8006038 <HAL_RCC_GetHCLKFreq+0x10>)
 800602e:	681b      	ldr	r3, [r3, #0]
}
 8006030:	0018      	movs	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	20000000 	.word	0x20000000

0800603c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006040:	f7ff fff2 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 8006044:	0001      	movs	r1, r0
 8006046:	4b06      	ldr	r3, [pc, #24]	; (8006060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	2207      	movs	r2, #7
 800604e:	4013      	ands	r3, r2
 8006050:	4a04      	ldr	r2, [pc, #16]	; (8006064 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006052:	5cd3      	ldrb	r3, [r2, r3]
 8006054:	40d9      	lsrs	r1, r3
 8006056:	000b      	movs	r3, r1
}
 8006058:	0018      	movs	r0, r3
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	40021000 	.word	0x40021000
 8006064:	0800a1e4 	.word	0x0800a1e4

08006068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800606c:	f7ff ffdc 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 8006070:	0001      	movs	r1, r0
 8006072:	4b06      	ldr	r3, [pc, #24]	; (800608c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	0adb      	lsrs	r3, r3, #11
 8006078:	2207      	movs	r2, #7
 800607a:	4013      	ands	r3, r2
 800607c:	4a04      	ldr	r2, [pc, #16]	; (8006090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800607e:	5cd3      	ldrb	r3, [r2, r3]
 8006080:	40d9      	lsrs	r1, r3
 8006082:	000b      	movs	r3, r1
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	40021000 	.word	0x40021000
 8006090:	0800a1e4 	.word	0x0800a1e4

08006094 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800609c:	2317      	movs	r3, #23
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2220      	movs	r2, #32
 80060aa:	4013      	ands	r3, r2
 80060ac:	d106      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4013      	ands	r3, r2
 80060b8:	d100      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80060ba:	e0d9      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060bc:	4b9c      	ldr	r3, [pc, #624]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80060be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	055b      	lsls	r3, r3, #21
 80060c4:	4013      	ands	r3, r2
 80060c6:	d10a      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060c8:	4b99      	ldr	r3, [pc, #612]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80060ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060cc:	4b98      	ldr	r3, [pc, #608]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80060ce:	2180      	movs	r1, #128	; 0x80
 80060d0:	0549      	lsls	r1, r1, #21
 80060d2:	430a      	orrs	r2, r1
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80060d6:	2317      	movs	r3, #23
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	2201      	movs	r2, #1
 80060dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060de:	4b95      	ldr	r3, [pc, #596]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	4013      	ands	r3, r2
 80060e8:	d11a      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ea:	4b92      	ldr	r3, [pc, #584]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4b91      	ldr	r3, [pc, #580]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80060f0:	2180      	movs	r1, #128	; 0x80
 80060f2:	0049      	lsls	r1, r1, #1
 80060f4:	430a      	orrs	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060f8:	f7fe f9b8 	bl	800446c <HAL_GetTick>
 80060fc:	0003      	movs	r3, r0
 80060fe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006100:	e008      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006102:	f7fe f9b3 	bl	800446c <HAL_GetTick>
 8006106:	0002      	movs	r2, r0
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b64      	cmp	r3, #100	; 0x64
 800610e:	d901      	bls.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e108      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006114:	4b87      	ldr	r3, [pc, #540]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	4013      	ands	r3, r2
 800611e:	d0f0      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006120:	4b83      	ldr	r3, [pc, #524]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	23c0      	movs	r3, #192	; 0xc0
 8006126:	039b      	lsls	r3, r3, #14
 8006128:	4013      	ands	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	23c0      	movs	r3, #192	; 0xc0
 8006132:	039b      	lsls	r3, r3, #14
 8006134:	4013      	ands	r3, r2
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	429a      	cmp	r2, r3
 800613a:	d107      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	23c0      	movs	r3, #192	; 0xc0
 8006142:	039b      	lsls	r3, r3, #14
 8006144:	4013      	ands	r3, r2
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	429a      	cmp	r2, r3
 800614a:	d013      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	23c0      	movs	r3, #192	; 0xc0
 8006152:	029b      	lsls	r3, r3, #10
 8006154:	401a      	ands	r2, r3
 8006156:	23c0      	movs	r3, #192	; 0xc0
 8006158:	029b      	lsls	r3, r3, #10
 800615a:	429a      	cmp	r2, r3
 800615c:	d10a      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800615e:	4b74      	ldr	r3, [pc, #464]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	029b      	lsls	r3, r3, #10
 8006166:	401a      	ands	r2, r3
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	029b      	lsls	r3, r3, #10
 800616c:	429a      	cmp	r2, r3
 800616e:	d101      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0d8      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006174:	4b6e      	ldr	r3, [pc, #440]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006178:	23c0      	movs	r3, #192	; 0xc0
 800617a:	029b      	lsls	r3, r3, #10
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d049      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	23c0      	movs	r3, #192	; 0xc0
 800618c:	029b      	lsls	r3, r3, #10
 800618e:	4013      	ands	r3, r2
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	429a      	cmp	r2, r3
 8006194:	d004      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2220      	movs	r2, #32
 800619c:	4013      	ands	r3, r2
 800619e:	d10d      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	23c0      	movs	r3, #192	; 0xc0
 80061a6:	029b      	lsls	r3, r3, #10
 80061a8:	4013      	ands	r3, r2
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d034      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	2380      	movs	r3, #128	; 0x80
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	4013      	ands	r3, r2
 80061ba:	d02e      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80061bc:	4b5c      	ldr	r3, [pc, #368]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80061be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c0:	4a5d      	ldr	r2, [pc, #372]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061c6:	4b5a      	ldr	r3, [pc, #360]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80061c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061ca:	4b59      	ldr	r3, [pc, #356]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80061cc:	2180      	movs	r1, #128	; 0x80
 80061ce:	0309      	lsls	r1, r1, #12
 80061d0:	430a      	orrs	r2, r1
 80061d2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061d4:	4b56      	ldr	r3, [pc, #344]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80061d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061d8:	4b55      	ldr	r3, [pc, #340]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80061da:	4958      	ldr	r1, [pc, #352]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80061dc:	400a      	ands	r2, r1
 80061de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80061e0:	4b53      	ldr	r3, [pc, #332]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	4013      	ands	r3, r2
 80061ee:	d014      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f0:	f7fe f93c 	bl	800446c <HAL_GetTick>
 80061f4:	0003      	movs	r3, r0
 80061f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061f8:	e009      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061fa:	f7fe f937 	bl	800446c <HAL_GetTick>
 80061fe:	0002      	movs	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	4a4e      	ldr	r2, [pc, #312]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d901      	bls.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e08b      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800620e:	4b48      	ldr	r3, [pc, #288]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006212:	2380      	movs	r3, #128	; 0x80
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4013      	ands	r3, r2
 8006218:	d0ef      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	23c0      	movs	r3, #192	; 0xc0
 8006220:	029b      	lsls	r3, r3, #10
 8006222:	401a      	ands	r2, r3
 8006224:	23c0      	movs	r3, #192	; 0xc0
 8006226:	029b      	lsls	r3, r3, #10
 8006228:	429a      	cmp	r2, r3
 800622a:	d10c      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800622c:	4b40      	ldr	r3, [pc, #256]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a44      	ldr	r2, [pc, #272]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8006232:	4013      	ands	r3, r2
 8006234:	0019      	movs	r1, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	23c0      	movs	r3, #192	; 0xc0
 800623c:	039b      	lsls	r3, r3, #14
 800623e:	401a      	ands	r2, r3
 8006240:	4b3b      	ldr	r3, [pc, #236]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006242:	430a      	orrs	r2, r1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	4b3a      	ldr	r3, [pc, #232]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006248:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	23c0      	movs	r3, #192	; 0xc0
 8006250:	029b      	lsls	r3, r3, #10
 8006252:	401a      	ands	r2, r3
 8006254:	4b36      	ldr	r3, [pc, #216]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006256:	430a      	orrs	r2, r1
 8006258:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800625a:	2317      	movs	r3, #23
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d105      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006264:	4b32      	ldr	r3, [pc, #200]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006268:	4b31      	ldr	r3, [pc, #196]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800626a:	4937      	ldr	r1, [pc, #220]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800626c:	400a      	ands	r2, r1
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2201      	movs	r2, #1
 8006276:	4013      	ands	r3, r2
 8006278:	d009      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800627a:	4b2d      	ldr	r3, [pc, #180]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800627c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627e:	2203      	movs	r2, #3
 8006280:	4393      	bics	r3, r2
 8006282:	0019      	movs	r1, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	4b29      	ldr	r3, [pc, #164]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800628a:	430a      	orrs	r2, r1
 800628c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2202      	movs	r2, #2
 8006294:	4013      	ands	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006298:	4b25      	ldr	r3, [pc, #148]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800629a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629c:	220c      	movs	r2, #12
 800629e:	4393      	bics	r3, r2
 80062a0:	0019      	movs	r1, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	4b22      	ldr	r3, [pc, #136]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062a8:	430a      	orrs	r2, r1
 80062aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2204      	movs	r2, #4
 80062b2:	4013      	ands	r3, r2
 80062b4:	d009      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062b6:	4b1e      	ldr	r3, [pc, #120]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ba:	4a24      	ldr	r2, [pc, #144]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80062bc:	4013      	ands	r3, r2
 80062be:	0019      	movs	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062c6:	430a      	orrs	r2, r1
 80062c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2208      	movs	r2, #8
 80062d0:	4013      	ands	r3, r2
 80062d2:	d009      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062d4:	4b16      	ldr	r3, [pc, #88]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d8:	4a1d      	ldr	r2, [pc, #116]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062da:	4013      	ands	r3, r2
 80062dc:	0019      	movs	r1, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699a      	ldr	r2, [r3, #24]
 80062e2:	4b13      	ldr	r3, [pc, #76]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062e4:	430a      	orrs	r2, r1
 80062e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2240      	movs	r2, #64	; 0x40
 80062ee:	4013      	ands	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062f2:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f6:	4a17      	ldr	r2, [pc, #92]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	0019      	movs	r1, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a1a      	ldr	r2, [r3, #32]
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006302:	430a      	orrs	r2, r1
 8006304:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2280      	movs	r2, #128	; 0x80
 800630c:	4013      	ands	r3, r2
 800630e:	d009      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006310:	4b07      	ldr	r3, [pc, #28]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006314:	4a10      	ldr	r2, [pc, #64]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006316:	4013      	ands	r3, r2
 8006318:	0019      	movs	r1, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69da      	ldr	r2, [r3, #28]
 800631e:	4b04      	ldr	r3, [pc, #16]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006320:	430a      	orrs	r2, r1
 8006322:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b006      	add	sp, #24
 800632c:	bd80      	pop	{r7, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	40021000 	.word	0x40021000
 8006334:	40007000 	.word	0x40007000
 8006338:	fffcffff 	.word	0xfffcffff
 800633c:	fff7ffff 	.word	0xfff7ffff
 8006340:	00001388 	.word	0x00001388
 8006344:	ffcfffff 	.word	0xffcfffff
 8006348:	efffffff 	.word	0xefffffff
 800634c:	fffff3ff 	.word	0xfffff3ff
 8006350:	ffffcfff 	.word	0xffffcfff
 8006354:	fbffffff 	.word	0xfbffffff
 8006358:	fff3ffff 	.word	0xfff3ffff

0800635c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e032      	b.n	80063d4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2239      	movs	r2, #57	; 0x39
 8006372:	5c9b      	ldrb	r3, [r3, r2]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d107      	bne.n	800638a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2238      	movs	r2, #56	; 0x38
 800637e:	2100      	movs	r1, #0
 8006380:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	0018      	movs	r0, r3
 8006386:	f7fd febb 	bl	8004100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2239      	movs	r2, #57	; 0x39
 800638e:	2102      	movs	r1, #2
 8006390:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3304      	adds	r3, #4
 800639a:	0019      	movs	r1, r3
 800639c:	0010      	movs	r0, r2
 800639e:	f000 f979 	bl	8006694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	223e      	movs	r2, #62	; 0x3e
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	223a      	movs	r2, #58	; 0x3a
 80063ae:	2101      	movs	r1, #1
 80063b0:	5499      	strb	r1, [r3, r2]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	223b      	movs	r2, #59	; 0x3b
 80063b6:	2101      	movs	r1, #1
 80063b8:	5499      	strb	r1, [r3, r2]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	223c      	movs	r2, #60	; 0x3c
 80063be:	2101      	movs	r1, #1
 80063c0:	5499      	strb	r1, [r3, r2]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	223d      	movs	r2, #61	; 0x3d
 80063c6:	2101      	movs	r1, #1
 80063c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2239      	movs	r2, #57	; 0x39
 80063ce:	2101      	movs	r1, #1
 80063d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	0018      	movs	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b002      	add	sp, #8
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2239      	movs	r2, #57	; 0x39
 80063e8:	5c9b      	ldrb	r3, [r3, r2]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d001      	beq.n	80063f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e036      	b.n	8006462 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2239      	movs	r2, #57	; 0x39
 80063f8:	2102      	movs	r1, #2
 80063fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2101      	movs	r1, #1
 8006408:	430a      	orrs	r2, r1
 800640a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	2380      	movs	r3, #128	; 0x80
 8006412:	05db      	lsls	r3, r3, #23
 8006414:	429a      	cmp	r2, r3
 8006416:	d009      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x50>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a13      	ldr	r2, [pc, #76]	; (800646c <HAL_TIM_Base_Start_IT+0x90>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x50>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a12      	ldr	r2, [pc, #72]	; (8006470 <HAL_TIM_Base_Start_IT+0x94>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d111      	bne.n	8006450 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2207      	movs	r2, #7
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b06      	cmp	r3, #6
 800643c:	d010      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2101      	movs	r1, #1
 800644a:	430a      	orrs	r2, r1
 800644c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644e:	e007      	b.n	8006460 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2101      	movs	r1, #1
 800645c:	430a      	orrs	r2, r1
 800645e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b004      	add	sp, #16
 8006468:	bd80      	pop	{r7, pc}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	40010800 	.word	0x40010800
 8006470:	40011400 	.word	0x40011400

08006474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2202      	movs	r2, #2
 8006484:	4013      	ands	r3, r2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d124      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2202      	movs	r2, #2
 8006492:	4013      	ands	r3, r2
 8006494:	2b02      	cmp	r3, #2
 8006496:	d11d      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2203      	movs	r2, #3
 800649e:	4252      	negs	r2, r2
 80064a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2203      	movs	r2, #3
 80064b0:	4013      	ands	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	0018      	movs	r0, r3
 80064b8:	f000 f8d4 	bl	8006664 <HAL_TIM_IC_CaptureCallback>
 80064bc:	e007      	b.n	80064ce <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	0018      	movs	r0, r3
 80064c2:	f000 f8c7 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	0018      	movs	r0, r3
 80064ca:	f000 f8d3 	bl	8006674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2204      	movs	r2, #4
 80064dc:	4013      	ands	r3, r2
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d125      	bne.n	800652e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	2204      	movs	r2, #4
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d11e      	bne.n	800652e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2205      	movs	r2, #5
 80064f6:	4252      	negs	r2, r2
 80064f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2202      	movs	r2, #2
 80064fe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	23c0      	movs	r3, #192	; 0xc0
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4013      	ands	r3, r2
 800650c:	d004      	beq.n	8006518 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	0018      	movs	r0, r3
 8006512:	f000 f8a7 	bl	8006664 <HAL_TIM_IC_CaptureCallback>
 8006516:	e007      	b.n	8006528 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	0018      	movs	r0, r3
 800651c:	f000 f89a 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	0018      	movs	r0, r3
 8006524:	f000 f8a6 	bl	8006674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2208      	movs	r2, #8
 8006536:	4013      	ands	r3, r2
 8006538:	2b08      	cmp	r3, #8
 800653a:	d124      	bne.n	8006586 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2208      	movs	r2, #8
 8006544:	4013      	ands	r3, r2
 8006546:	2b08      	cmp	r3, #8
 8006548:	d11d      	bne.n	8006586 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2209      	movs	r2, #9
 8006550:	4252      	negs	r2, r2
 8006552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2204      	movs	r2, #4
 8006558:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	2203      	movs	r2, #3
 8006562:	4013      	ands	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	0018      	movs	r0, r3
 800656a:	f000 f87b 	bl	8006664 <HAL_TIM_IC_CaptureCallback>
 800656e:	e007      	b.n	8006580 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	0018      	movs	r0, r3
 8006574:	f000 f86e 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	0018      	movs	r0, r3
 800657c:	f000 f87a 	bl	8006674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2210      	movs	r2, #16
 800658e:	4013      	ands	r3, r2
 8006590:	2b10      	cmp	r3, #16
 8006592:	d125      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	2210      	movs	r2, #16
 800659c:	4013      	ands	r3, r2
 800659e:	2b10      	cmp	r3, #16
 80065a0:	d11e      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2211      	movs	r2, #17
 80065a8:	4252      	negs	r2, r2
 80065aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2208      	movs	r2, #8
 80065b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	23c0      	movs	r3, #192	; 0xc0
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4013      	ands	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	0018      	movs	r0, r3
 80065c4:	f000 f84e 	bl	8006664 <HAL_TIM_IC_CaptureCallback>
 80065c8:	e007      	b.n	80065da <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	0018      	movs	r0, r3
 80065ce:	f000 f841 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	0018      	movs	r0, r3
 80065d6:	f000 f84d 	bl	8006674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2201      	movs	r2, #1
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d10f      	bne.n	800660e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	4013      	ands	r3, r2
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d108      	bne.n	800660e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2202      	movs	r2, #2
 8006602:	4252      	negs	r2, r2
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0018      	movs	r0, r3
 800660a:	f000 f81b 	bl	8006644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2240      	movs	r2, #64	; 0x40
 8006616:	4013      	ands	r3, r2
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d10f      	bne.n	800663c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	2240      	movs	r2, #64	; 0x40
 8006624:	4013      	ands	r3, r2
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d108      	bne.n	800663c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2241      	movs	r2, #65	; 0x41
 8006630:	4252      	negs	r2, r2
 8006632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	0018      	movs	r0, r3
 8006638:	f000 f824 	bl	8006684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800663c:	46c0      	nop			; (mov r8, r8)
 800663e:	46bd      	mov	sp, r7
 8006640:	b002      	add	sp, #8
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800664c:	46c0      	nop			; (mov r8, r8)
 800664e:	46bd      	mov	sp, r7
 8006650:	b002      	add	sp, #8
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800665c:	46c0      	nop			; (mov r8, r8)
 800665e:	46bd      	mov	sp, r7
 8006660:	b002      	add	sp, #8
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800666c:	46c0      	nop			; (mov r8, r8)
 800666e:	46bd      	mov	sp, r7
 8006670:	b002      	add	sp, #8
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800667c:	46c0      	nop			; (mov r8, r8)
 800667e:	46bd      	mov	sp, r7
 8006680:	b002      	add	sp, #8
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800668c:	46c0      	nop			; (mov r8, r8)
 800668e:	46bd      	mov	sp, r7
 8006690:	b002      	add	sp, #8
 8006692:	bd80      	pop	{r7, pc}

08006694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	2380      	movs	r3, #128	; 0x80
 80066a8:	05db      	lsls	r3, r3, #23
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d007      	beq.n	80066be <TIM_Base_SetConfig+0x2a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1f      	ldr	r2, [pc, #124]	; (8006730 <TIM_Base_SetConfig+0x9c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_Base_SetConfig+0x2a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <TIM_Base_SetConfig+0xa0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d108      	bne.n	80066d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2270      	movs	r2, #112	; 0x70
 80066c2:	4393      	bics	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	2380      	movs	r3, #128	; 0x80
 80066d4:	05db      	lsls	r3, r3, #23
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d007      	beq.n	80066ea <TIM_Base_SetConfig+0x56>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a14      	ldr	r2, [pc, #80]	; (8006730 <TIM_Base_SetConfig+0x9c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_Base_SetConfig+0x56>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a13      	ldr	r2, [pc, #76]	; (8006734 <TIM_Base_SetConfig+0xa0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4a12      	ldr	r2, [pc, #72]	; (8006738 <TIM_Base_SetConfig+0xa4>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2280      	movs	r2, #128	; 0x80
 8006700:	4393      	bics	r3, r2
 8006702:	001a      	movs	r2, r3
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	615a      	str	r2, [r3, #20]
}
 8006728:	46c0      	nop			; (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b004      	add	sp, #16
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40010800 	.word	0x40010800
 8006734:	40011400 	.word	0x40011400
 8006738:	fffffcff 	.word	0xfffffcff

0800673c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2238      	movs	r2, #56	; 0x38
 800674a:	5c9b      	ldrb	r3, [r3, r2]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006750:	2302      	movs	r3, #2
 8006752:	e042      	b.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2238      	movs	r2, #56	; 0x38
 8006758:	2101      	movs	r1, #1
 800675a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2239      	movs	r2, #57	; 0x39
 8006760:	2102      	movs	r1, #2
 8006762:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2270      	movs	r2, #112	; 0x70
 8006778:	4393      	bics	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	2380      	movs	r3, #128	; 0x80
 8006794:	05db      	lsls	r3, r3, #23
 8006796:	429a      	cmp	r2, r3
 8006798:	d009      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a11      	ldr	r2, [pc, #68]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d004      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a0f      	ldr	r2, [pc, #60]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10c      	bne.n	80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2280      	movs	r2, #128	; 0x80
 80067b2:	4393      	bics	r3, r2
 80067b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2239      	movs	r2, #57	; 0x39
 80067cc:	2101      	movs	r1, #1
 80067ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2238      	movs	r2, #56	; 0x38
 80067d4:	2100      	movs	r1, #0
 80067d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	0018      	movs	r0, r3
 80067dc:	46bd      	mov	sp, r7
 80067de:	b004      	add	sp, #16
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	40010800 	.word	0x40010800
 80067e8:	40011400 	.word	0x40011400

080067ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e044      	b.n	8006888 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006802:	2b00      	cmp	r3, #0
 8006804:	d107      	bne.n	8006816 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2274      	movs	r2, #116	; 0x74
 800680a:	2100      	movs	r1, #0
 800680c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0018      	movs	r0, r3
 8006812:	f7fd fcc5 	bl	80041a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2224      	movs	r2, #36	; 0x24
 800681a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2101      	movs	r1, #1
 8006828:	438a      	bics	r2, r1
 800682a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	0018      	movs	r0, r3
 8006830:	f000 f8d8 	bl	80069e4 <UART_SetConfig>
 8006834:	0003      	movs	r3, r0
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e024      	b.n	8006888 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	0018      	movs	r0, r3
 800684a:	f000 fb6b 	bl	8006f24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	490d      	ldr	r1, [pc, #52]	; (8006890 <HAL_UART_Init+0xa4>)
 800685a:	400a      	ands	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	212a      	movs	r1, #42	; 0x2a
 800686a:	438a      	bics	r2, r1
 800686c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2101      	movs	r1, #1
 800687a:	430a      	orrs	r2, r1
 800687c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	0018      	movs	r0, r3
 8006882:	f000 fc03 	bl	800708c <UART_CheckIdleState>
 8006886:	0003      	movs	r3, r0
}
 8006888:	0018      	movs	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	b002      	add	sp, #8
 800688e:	bd80      	pop	{r7, pc}
 8006890:	ffffb7ff 	.word	0xffffb7ff

08006894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08a      	sub	sp, #40	; 0x28
 8006898:	af02      	add	r7, sp, #8
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	1dbb      	adds	r3, r7, #6
 80068a2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d000      	beq.n	80068ae <HAL_UART_Transmit+0x1a>
 80068ac:	e095      	b.n	80069da <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_UART_Transmit+0x28>
 80068b4:	1dbb      	adds	r3, r7, #6
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e08d      	b.n	80069dc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	015b      	lsls	r3, r3, #5
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d109      	bne.n	80068e0 <HAL_UART_Transmit+0x4c>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2201      	movs	r2, #1
 80068d8:	4013      	ands	r3, r2
 80068da:	d001      	beq.n	80068e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e07d      	b.n	80069dc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2274      	movs	r2, #116	; 0x74
 80068e4:	5c9b      	ldrb	r3, [r3, r2]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Transmit+0x5a>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e076      	b.n	80069dc <HAL_UART_Transmit+0x148>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2274      	movs	r2, #116	; 0x74
 80068f2:	2101      	movs	r1, #1
 80068f4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2280      	movs	r2, #128	; 0x80
 80068fa:	2100      	movs	r1, #0
 80068fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2221      	movs	r2, #33	; 0x21
 8006902:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006904:	f7fd fdb2 	bl	800446c <HAL_GetTick>
 8006908:	0003      	movs	r3, r0
 800690a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	1dba      	adds	r2, r7, #6
 8006910:	2150      	movs	r1, #80	; 0x50
 8006912:	8812      	ldrh	r2, [r2, #0]
 8006914:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1dba      	adds	r2, r7, #6
 800691a:	2152      	movs	r1, #82	; 0x52
 800691c:	8812      	ldrh	r2, [r2, #0]
 800691e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	2380      	movs	r3, #128	; 0x80
 8006926:	015b      	lsls	r3, r3, #5
 8006928:	429a      	cmp	r2, r3
 800692a:	d108      	bne.n	800693e <HAL_UART_Transmit+0xaa>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	61bb      	str	r3, [r7, #24]
 800693c:	e003      	b.n	8006946 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2274      	movs	r2, #116	; 0x74
 800694a:	2100      	movs	r1, #0
 800694c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800694e:	e02c      	b.n	80069aa <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	0013      	movs	r3, r2
 800695a:	2200      	movs	r2, #0
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	f000 fbdd 	bl	800711c <UART_WaitOnFlagUntilTimeout>
 8006962:	1e03      	subs	r3, r0, #0
 8006964:	d001      	beq.n	800696a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e038      	b.n	80069dc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10b      	bne.n	8006988 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	001a      	movs	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	05d2      	lsls	r2, r2, #23
 800697c:	0dd2      	lsrs	r2, r2, #23
 800697e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	3302      	adds	r3, #2
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	e007      	b.n	8006998 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	781a      	ldrb	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	3301      	adds	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2252      	movs	r2, #82	; 0x52
 800699c:	5a9b      	ldrh	r3, [r3, r2]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b299      	uxth	r1, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2252      	movs	r2, #82	; 0x52
 80069a8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2252      	movs	r2, #82	; 0x52
 80069ae:	5a9b      	ldrh	r3, [r3, r2]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1cc      	bne.n	8006950 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	0013      	movs	r3, r2
 80069c0:	2200      	movs	r2, #0
 80069c2:	2140      	movs	r1, #64	; 0x40
 80069c4:	f000 fbaa 	bl	800711c <UART_WaitOnFlagUntilTimeout>
 80069c8:	1e03      	subs	r3, r0, #0
 80069ca:	d001      	beq.n	80069d0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e005      	b.n	80069dc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e000      	b.n	80069dc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80069da:	2302      	movs	r3, #2
  }
}
 80069dc:	0018      	movs	r0, r3
 80069de:	46bd      	mov	sp, r7
 80069e0:	b008      	add	sp, #32
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069e4:	b5b0      	push	{r4, r5, r7, lr}
 80069e6:	b08e      	sub	sp, #56	; 0x38
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ec:	231a      	movs	r3, #26
 80069ee:	2218      	movs	r2, #24
 80069f0:	4694      	mov	ip, r2
 80069f2:	44bc      	add	ip, r7
 80069f4:	4463      	add	r3, ip
 80069f6:	2200      	movs	r2, #0
 80069f8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4ac1      	ldr	r2, [pc, #772]	; (8006d20 <UART_SetConfig+0x33c>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	0019      	movs	r1, r3
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a24:	430a      	orrs	r2, r1
 8006a26:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	4abd      	ldr	r2, [pc, #756]	; (8006d24 <UART_SetConfig+0x340>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	0019      	movs	r1, r3
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4ab7      	ldr	r2, [pc, #732]	; (8006d28 <UART_SetConfig+0x344>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d004      	beq.n	8006a5a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a56:	4313      	orrs	r3, r2
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	4ab2      	ldr	r2, [pc, #712]	; (8006d2c <UART_SetConfig+0x348>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	0019      	movs	r1, r3
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4aae      	ldr	r2, [pc, #696]	; (8006d30 <UART_SetConfig+0x34c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d136      	bne.n	8006ae8 <UART_SetConfig+0x104>
 8006a7a:	4bae      	ldr	r3, [pc, #696]	; (8006d34 <UART_SetConfig+0x350>)
 8006a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7e:	2203      	movs	r2, #3
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d020      	beq.n	8006ac8 <UART_SetConfig+0xe4>
 8006a86:	d827      	bhi.n	8006ad8 <UART_SetConfig+0xf4>
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d00d      	beq.n	8006aa8 <UART_SetConfig+0xc4>
 8006a8c:	d824      	bhi.n	8006ad8 <UART_SetConfig+0xf4>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <UART_SetConfig+0xb4>
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d010      	beq.n	8006ab8 <UART_SetConfig+0xd4>
 8006a96:	e01f      	b.n	8006ad8 <UART_SetConfig+0xf4>
 8006a98:	231b      	movs	r3, #27
 8006a9a:	2218      	movs	r2, #24
 8006a9c:	4694      	mov	ip, r2
 8006a9e:	44bc      	add	ip, r7
 8006aa0:	4463      	add	r3, ip
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e0ab      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006aa8:	231b      	movs	r3, #27
 8006aaa:	2218      	movs	r2, #24
 8006aac:	4694      	mov	ip, r2
 8006aae:	44bc      	add	ip, r7
 8006ab0:	4463      	add	r3, ip
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	e0a3      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006ab8:	231b      	movs	r3, #27
 8006aba:	2218      	movs	r2, #24
 8006abc:	4694      	mov	ip, r2
 8006abe:	44bc      	add	ip, r7
 8006ac0:	4463      	add	r3, ip
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e09b      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006ac8:	231b      	movs	r3, #27
 8006aca:	2218      	movs	r2, #24
 8006acc:	4694      	mov	ip, r2
 8006ace:	44bc      	add	ip, r7
 8006ad0:	4463      	add	r3, ip
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e093      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006ad8:	231b      	movs	r3, #27
 8006ada:	2218      	movs	r2, #24
 8006adc:	4694      	mov	ip, r2
 8006ade:	44bc      	add	ip, r7
 8006ae0:	4463      	add	r3, ip
 8006ae2:	2210      	movs	r2, #16
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e08b      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a92      	ldr	r2, [pc, #584]	; (8006d38 <UART_SetConfig+0x354>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d136      	bne.n	8006b60 <UART_SetConfig+0x17c>
 8006af2:	4b90      	ldr	r3, [pc, #576]	; (8006d34 <UART_SetConfig+0x350>)
 8006af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af6:	220c      	movs	r2, #12
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b0c      	cmp	r3, #12
 8006afc:	d020      	beq.n	8006b40 <UART_SetConfig+0x15c>
 8006afe:	d827      	bhi.n	8006b50 <UART_SetConfig+0x16c>
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d00d      	beq.n	8006b20 <UART_SetConfig+0x13c>
 8006b04:	d824      	bhi.n	8006b50 <UART_SetConfig+0x16c>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <UART_SetConfig+0x12c>
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d010      	beq.n	8006b30 <UART_SetConfig+0x14c>
 8006b0e:	e01f      	b.n	8006b50 <UART_SetConfig+0x16c>
 8006b10:	231b      	movs	r3, #27
 8006b12:	2218      	movs	r2, #24
 8006b14:	4694      	mov	ip, r2
 8006b16:	44bc      	add	ip, r7
 8006b18:	4463      	add	r3, ip
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	e06f      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006b20:	231b      	movs	r3, #27
 8006b22:	2218      	movs	r2, #24
 8006b24:	4694      	mov	ip, r2
 8006b26:	44bc      	add	ip, r7
 8006b28:	4463      	add	r3, ip
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	e067      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006b30:	231b      	movs	r3, #27
 8006b32:	2218      	movs	r2, #24
 8006b34:	4694      	mov	ip, r2
 8006b36:	44bc      	add	ip, r7
 8006b38:	4463      	add	r3, ip
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e05f      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006b40:	231b      	movs	r3, #27
 8006b42:	2218      	movs	r2, #24
 8006b44:	4694      	mov	ip, r2
 8006b46:	44bc      	add	ip, r7
 8006b48:	4463      	add	r3, ip
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	e057      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006b50:	231b      	movs	r3, #27
 8006b52:	2218      	movs	r2, #24
 8006b54:	4694      	mov	ip, r2
 8006b56:	44bc      	add	ip, r7
 8006b58:	4463      	add	r3, ip
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	e04f      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a70      	ldr	r2, [pc, #448]	; (8006d28 <UART_SetConfig+0x344>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d143      	bne.n	8006bf2 <UART_SetConfig+0x20e>
 8006b6a:	4b72      	ldr	r3, [pc, #456]	; (8006d34 <UART_SetConfig+0x350>)
 8006b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b6e:	23c0      	movs	r3, #192	; 0xc0
 8006b70:	011b      	lsls	r3, r3, #4
 8006b72:	4013      	ands	r3, r2
 8006b74:	22c0      	movs	r2, #192	; 0xc0
 8006b76:	0112      	lsls	r2, r2, #4
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d02a      	beq.n	8006bd2 <UART_SetConfig+0x1ee>
 8006b7c:	22c0      	movs	r2, #192	; 0xc0
 8006b7e:	0112      	lsls	r2, r2, #4
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d82e      	bhi.n	8006be2 <UART_SetConfig+0x1fe>
 8006b84:	2280      	movs	r2, #128	; 0x80
 8006b86:	0112      	lsls	r2, r2, #4
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d012      	beq.n	8006bb2 <UART_SetConfig+0x1ce>
 8006b8c:	2280      	movs	r2, #128	; 0x80
 8006b8e:	0112      	lsls	r2, r2, #4
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d826      	bhi.n	8006be2 <UART_SetConfig+0x1fe>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <UART_SetConfig+0x1be>
 8006b98:	2280      	movs	r2, #128	; 0x80
 8006b9a:	00d2      	lsls	r2, r2, #3
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d010      	beq.n	8006bc2 <UART_SetConfig+0x1de>
 8006ba0:	e01f      	b.n	8006be2 <UART_SetConfig+0x1fe>
 8006ba2:	231b      	movs	r3, #27
 8006ba4:	2218      	movs	r2, #24
 8006ba6:	4694      	mov	ip, r2
 8006ba8:	44bc      	add	ip, r7
 8006baa:	4463      	add	r3, ip
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	e026      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006bb2:	231b      	movs	r3, #27
 8006bb4:	2218      	movs	r2, #24
 8006bb6:	4694      	mov	ip, r2
 8006bb8:	44bc      	add	ip, r7
 8006bba:	4463      	add	r3, ip
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	e01e      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006bc2:	231b      	movs	r3, #27
 8006bc4:	2218      	movs	r2, #24
 8006bc6:	4694      	mov	ip, r2
 8006bc8:	44bc      	add	ip, r7
 8006bca:	4463      	add	r3, ip
 8006bcc:	2204      	movs	r2, #4
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	e016      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006bd2:	231b      	movs	r3, #27
 8006bd4:	2218      	movs	r2, #24
 8006bd6:	4694      	mov	ip, r2
 8006bd8:	44bc      	add	ip, r7
 8006bda:	4463      	add	r3, ip
 8006bdc:	2208      	movs	r2, #8
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	e00e      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006be2:	231b      	movs	r3, #27
 8006be4:	2218      	movs	r2, #24
 8006be6:	4694      	mov	ip, r2
 8006be8:	44bc      	add	ip, r7
 8006bea:	4463      	add	r3, ip
 8006bec:	2210      	movs	r2, #16
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	e006      	b.n	8006c00 <UART_SetConfig+0x21c>
 8006bf2:	231b      	movs	r3, #27
 8006bf4:	2218      	movs	r2, #24
 8006bf6:	4694      	mov	ip, r2
 8006bf8:	44bc      	add	ip, r7
 8006bfa:	4463      	add	r3, ip
 8006bfc:	2210      	movs	r2, #16
 8006bfe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a48      	ldr	r2, [pc, #288]	; (8006d28 <UART_SetConfig+0x344>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d000      	beq.n	8006c0c <UART_SetConfig+0x228>
 8006c0a:	e09b      	b.n	8006d44 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c0c:	231b      	movs	r3, #27
 8006c0e:	2218      	movs	r2, #24
 8006c10:	4694      	mov	ip, r2
 8006c12:	44bc      	add	ip, r7
 8006c14:	4463      	add	r3, ip
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d01d      	beq.n	8006c58 <UART_SetConfig+0x274>
 8006c1c:	dc20      	bgt.n	8006c60 <UART_SetConfig+0x27c>
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d015      	beq.n	8006c4e <UART_SetConfig+0x26a>
 8006c22:	dc1d      	bgt.n	8006c60 <UART_SetConfig+0x27c>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <UART_SetConfig+0x24a>
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d005      	beq.n	8006c38 <UART_SetConfig+0x254>
 8006c2c:	e018      	b.n	8006c60 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c2e:	f7ff fa05 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8006c32:	0003      	movs	r3, r0
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c36:	e01d      	b.n	8006c74 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c38:	4b3e      	ldr	r3, [pc, #248]	; (8006d34 <UART_SetConfig+0x350>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	4013      	ands	r3, r2
 8006c40:	d002      	beq.n	8006c48 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006c42:	4b3e      	ldr	r3, [pc, #248]	; (8006d3c <UART_SetConfig+0x358>)
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c46:	e015      	b.n	8006c74 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8006c48:	4b3d      	ldr	r3, [pc, #244]	; (8006d40 <UART_SetConfig+0x35c>)
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c4c:	e012      	b.n	8006c74 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4e:	f7ff f945 	bl	8005edc <HAL_RCC_GetSysClockFreq>
 8006c52:	0003      	movs	r3, r0
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c56:	e00d      	b.n	8006c74 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c5e:	e009      	b.n	8006c74 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c64:	231a      	movs	r3, #26
 8006c66:	2218      	movs	r2, #24
 8006c68:	4694      	mov	ip, r2
 8006c6a:	44bc      	add	ip, r7
 8006c6c:	4463      	add	r3, ip
 8006c6e:	2201      	movs	r2, #1
 8006c70:	701a      	strb	r2, [r3, #0]
        break;
 8006c72:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d100      	bne.n	8006c7c <UART_SetConfig+0x298>
 8006c7a:	e139      	b.n	8006ef0 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	0013      	movs	r3, r2
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	189b      	adds	r3, r3, r2
 8006c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d305      	bcc.n	8006c98 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d907      	bls.n	8006ca8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006c98:	231a      	movs	r3, #26
 8006c9a:	2218      	movs	r2, #24
 8006c9c:	4694      	mov	ip, r2
 8006c9e:	44bc      	add	ip, r7
 8006ca0:	4463      	add	r3, ip
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	e123      	b.n	8006ef0 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	613b      	str	r3, [r7, #16]
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	6939      	ldr	r1, [r7, #16]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	000b      	movs	r3, r1
 8006cb6:	0e1b      	lsrs	r3, r3, #24
 8006cb8:	0010      	movs	r0, r2
 8006cba:	0205      	lsls	r5, r0, #8
 8006cbc:	431d      	orrs	r5, r3
 8006cbe:	000b      	movs	r3, r1
 8006cc0:	021c      	lsls	r4, r3, #8
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	68b8      	ldr	r0, [r7, #8]
 8006cd0:	68f9      	ldr	r1, [r7, #12]
 8006cd2:	1900      	adds	r0, r0, r4
 8006cd4:	4169      	adcs	r1, r5
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	607b      	str	r3, [r7, #4]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f7f9 fbe0 	bl	80004a8 <__aeabi_uldivmod>
 8006ce8:	0002      	movs	r2, r0
 8006cea:	000b      	movs	r3, r1
 8006cec:	0013      	movs	r3, r2
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf2:	23c0      	movs	r3, #192	; 0xc0
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d309      	bcc.n	8006d0e <UART_SetConfig+0x32a>
 8006cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	035b      	lsls	r3, r3, #13
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d204      	bcs.n	8006d0e <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d0a:	60da      	str	r2, [r3, #12]
 8006d0c:	e0f0      	b.n	8006ef0 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d0e:	231a      	movs	r3, #26
 8006d10:	2218      	movs	r2, #24
 8006d12:	4694      	mov	ip, r2
 8006d14:	44bc      	add	ip, r7
 8006d16:	4463      	add	r3, ip
 8006d18:	2201      	movs	r2, #1
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e0e8      	b.n	8006ef0 <UART_SetConfig+0x50c>
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	efff69f3 	.word	0xefff69f3
 8006d24:	ffffcfff 	.word	0xffffcfff
 8006d28:	40004800 	.word	0x40004800
 8006d2c:	fffff4ff 	.word	0xfffff4ff
 8006d30:	40013800 	.word	0x40013800
 8006d34:	40021000 	.word	0x40021000
 8006d38:	40004400 	.word	0x40004400
 8006d3c:	003d0900 	.word	0x003d0900
 8006d40:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	2380      	movs	r3, #128	; 0x80
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d000      	beq.n	8006d52 <UART_SetConfig+0x36e>
 8006d50:	e074      	b.n	8006e3c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006d52:	231b      	movs	r3, #27
 8006d54:	2218      	movs	r2, #24
 8006d56:	4694      	mov	ip, r2
 8006d58:	44bc      	add	ip, r7
 8006d5a:	4463      	add	r3, ip
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d822      	bhi.n	8006da8 <UART_SetConfig+0x3c4>
 8006d62:	009a      	lsls	r2, r3, #2
 8006d64:	4b6a      	ldr	r3, [pc, #424]	; (8006f10 <UART_SetConfig+0x52c>)
 8006d66:	18d3      	adds	r3, r2, r3
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d6c:	f7ff f966 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8006d70:	0003      	movs	r3, r0
 8006d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d74:	e022      	b.n	8006dbc <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d76:	f7ff f977 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8006d7a:	0003      	movs	r3, r0
 8006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d7e:	e01d      	b.n	8006dbc <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d80:	4b64      	ldr	r3, [pc, #400]	; (8006f14 <UART_SetConfig+0x530>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2210      	movs	r2, #16
 8006d86:	4013      	ands	r3, r2
 8006d88:	d002      	beq.n	8006d90 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006d8a:	4b63      	ldr	r3, [pc, #396]	; (8006f18 <UART_SetConfig+0x534>)
 8006d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d8e:	e015      	b.n	8006dbc <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8006d90:	4b62      	ldr	r3, [pc, #392]	; (8006f1c <UART_SetConfig+0x538>)
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d94:	e012      	b.n	8006dbc <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d96:	f7ff f8a1 	bl	8005edc <HAL_RCC_GetSysClockFreq>
 8006d9a:	0003      	movs	r3, r0
 8006d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d9e:	e00d      	b.n	8006dbc <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006da6:	e009      	b.n	8006dbc <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006dac:	231a      	movs	r3, #26
 8006dae:	2218      	movs	r2, #24
 8006db0:	4694      	mov	ip, r2
 8006db2:	44bc      	add	ip, r7
 8006db4:	4463      	add	r3, ip
 8006db6:	2201      	movs	r2, #1
 8006db8:	701a      	strb	r2, [r3, #0]
        break;
 8006dba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d100      	bne.n	8006dc4 <UART_SetConfig+0x3e0>
 8006dc2:	e095      	b.n	8006ef0 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	005a      	lsls	r2, r3, #1
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	085b      	lsrs	r3, r3, #1
 8006dce:	18d2      	adds	r2, r2, r3
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	0019      	movs	r1, r3
 8006dd6:	0010      	movs	r0, r2
 8006dd8:	f7f9 f9b2 	bl	8000140 <__udivsi3>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	2b0f      	cmp	r3, #15
 8006de6:	d921      	bls.n	8006e2c <UART_SetConfig+0x448>
 8006de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dea:	2380      	movs	r3, #128	; 0x80
 8006dec:	025b      	lsls	r3, r3, #9
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d21c      	bcs.n	8006e2c <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	200e      	movs	r0, #14
 8006df8:	2418      	movs	r4, #24
 8006dfa:	193b      	adds	r3, r7, r4
 8006dfc:	181b      	adds	r3, r3, r0
 8006dfe:	210f      	movs	r1, #15
 8006e00:	438a      	bics	r2, r1
 8006e02:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	085b      	lsrs	r3, r3, #1
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2207      	movs	r2, #7
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	b299      	uxth	r1, r3
 8006e10:	193b      	adds	r3, r7, r4
 8006e12:	181b      	adds	r3, r3, r0
 8006e14:	193a      	adds	r2, r7, r4
 8006e16:	1812      	adds	r2, r2, r0
 8006e18:	8812      	ldrh	r2, [r2, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	193a      	adds	r2, r7, r4
 8006e24:	1812      	adds	r2, r2, r0
 8006e26:	8812      	ldrh	r2, [r2, #0]
 8006e28:	60da      	str	r2, [r3, #12]
 8006e2a:	e061      	b.n	8006ef0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e2c:	231a      	movs	r3, #26
 8006e2e:	2218      	movs	r2, #24
 8006e30:	4694      	mov	ip, r2
 8006e32:	44bc      	add	ip, r7
 8006e34:	4463      	add	r3, ip
 8006e36:	2201      	movs	r2, #1
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	e059      	b.n	8006ef0 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e3c:	231b      	movs	r3, #27
 8006e3e:	2218      	movs	r2, #24
 8006e40:	4694      	mov	ip, r2
 8006e42:	44bc      	add	ip, r7
 8006e44:	4463      	add	r3, ip
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d822      	bhi.n	8006e92 <UART_SetConfig+0x4ae>
 8006e4c:	009a      	lsls	r2, r3, #2
 8006e4e:	4b34      	ldr	r3, [pc, #208]	; (8006f20 <UART_SetConfig+0x53c>)
 8006e50:	18d3      	adds	r3, r2, r3
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e56:	f7ff f8f1 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8006e5a:	0003      	movs	r3, r0
 8006e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e5e:	e022      	b.n	8006ea6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e60:	f7ff f902 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8006e64:	0003      	movs	r3, r0
 8006e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e68:	e01d      	b.n	8006ea6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	; (8006f14 <UART_SetConfig+0x530>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2210      	movs	r2, #16
 8006e70:	4013      	ands	r3, r2
 8006e72:	d002      	beq.n	8006e7a <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006e74:	4b28      	ldr	r3, [pc, #160]	; (8006f18 <UART_SetConfig+0x534>)
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e78:	e015      	b.n	8006ea6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006e7a:	4b28      	ldr	r3, [pc, #160]	; (8006f1c <UART_SetConfig+0x538>)
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e7e:	e012      	b.n	8006ea6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e80:	f7ff f82c 	bl	8005edc <HAL_RCC_GetSysClockFreq>
 8006e84:	0003      	movs	r3, r0
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e88:	e00d      	b.n	8006ea6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e8a:	2380      	movs	r3, #128	; 0x80
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e90:	e009      	b.n	8006ea6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e96:	231a      	movs	r3, #26
 8006e98:	2218      	movs	r2, #24
 8006e9a:	4694      	mov	ip, r2
 8006e9c:	44bc      	add	ip, r7
 8006e9e:	4463      	add	r3, ip
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	701a      	strb	r2, [r3, #0]
        break;
 8006ea4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d021      	beq.n	8006ef0 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	085a      	lsrs	r2, r3, #1
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	18d2      	adds	r2, r2, r3
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	0019      	movs	r1, r3
 8006ebc:	0010      	movs	r0, r2
 8006ebe:	f7f9 f93f 	bl	8000140 <__udivsi3>
 8006ec2:	0003      	movs	r3, r0
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	2b0f      	cmp	r3, #15
 8006ecc:	d909      	bls.n	8006ee2 <UART_SetConfig+0x4fe>
 8006ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed0:	2380      	movs	r3, #128	; 0x80
 8006ed2:	025b      	lsls	r3, r3, #9
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d204      	bcs.n	8006ee2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ede:	60da      	str	r2, [r3, #12]
 8006ee0:	e006      	b.n	8006ef0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ee2:	231a      	movs	r3, #26
 8006ee4:	2218      	movs	r2, #24
 8006ee6:	4694      	mov	ip, r2
 8006ee8:	44bc      	add	ip, r7
 8006eea:	4463      	add	r3, ip
 8006eec:	2201      	movs	r2, #1
 8006eee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006efc:	231a      	movs	r3, #26
 8006efe:	2218      	movs	r2, #24
 8006f00:	4694      	mov	ip, r2
 8006f02:	44bc      	add	ip, r7
 8006f04:	4463      	add	r3, ip
 8006f06:	781b      	ldrb	r3, [r3, #0]
}
 8006f08:	0018      	movs	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	b00e      	add	sp, #56	; 0x38
 8006f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f10:	0800a1f8 	.word	0x0800a1f8
 8006f14:	40021000 	.word	0x40021000
 8006f18:	003d0900 	.word	0x003d0900
 8006f1c:	00f42400 	.word	0x00f42400
 8006f20:	0800a21c 	.word	0x0800a21c

08006f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	2201      	movs	r2, #1
 8006f32:	4013      	ands	r3, r2
 8006f34:	d00b      	beq.n	8006f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	4a4a      	ldr	r2, [pc, #296]	; (8007068 <UART_AdvFeatureConfig+0x144>)
 8006f3e:	4013      	ands	r3, r2
 8006f40:	0019      	movs	r1, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	2202      	movs	r2, #2
 8006f54:	4013      	ands	r3, r2
 8006f56:	d00b      	beq.n	8006f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	4a43      	ldr	r2, [pc, #268]	; (800706c <UART_AdvFeatureConfig+0x148>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	0019      	movs	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	2204      	movs	r2, #4
 8006f76:	4013      	ands	r3, r2
 8006f78:	d00b      	beq.n	8006f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	4a3b      	ldr	r2, [pc, #236]	; (8007070 <UART_AdvFeatureConfig+0x14c>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	0019      	movs	r1, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	2208      	movs	r2, #8
 8006f98:	4013      	ands	r3, r2
 8006f9a:	d00b      	beq.n	8006fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	4a34      	ldr	r2, [pc, #208]	; (8007074 <UART_AdvFeatureConfig+0x150>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	0019      	movs	r1, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	2210      	movs	r2, #16
 8006fba:	4013      	ands	r3, r2
 8006fbc:	d00b      	beq.n	8006fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	4a2c      	ldr	r2, [pc, #176]	; (8007078 <UART_AdvFeatureConfig+0x154>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	0019      	movs	r1, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	2220      	movs	r2, #32
 8006fdc:	4013      	ands	r3, r2
 8006fde:	d00b      	beq.n	8006ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	4a25      	ldr	r2, [pc, #148]	; (800707c <UART_AdvFeatureConfig+0x158>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	0019      	movs	r1, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	2240      	movs	r2, #64	; 0x40
 8006ffe:	4013      	ands	r3, r2
 8007000:	d01d      	beq.n	800703e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <UART_AdvFeatureConfig+0x15c>)
 800700a:	4013      	ands	r3, r2
 800700c:	0019      	movs	r1, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800701e:	2380      	movs	r3, #128	; 0x80
 8007020:	035b      	lsls	r3, r3, #13
 8007022:	429a      	cmp	r2, r3
 8007024:	d10b      	bne.n	800703e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	4a15      	ldr	r2, [pc, #84]	; (8007084 <UART_AdvFeatureConfig+0x160>)
 800702e:	4013      	ands	r3, r2
 8007030:	0019      	movs	r1, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	2280      	movs	r2, #128	; 0x80
 8007044:	4013      	ands	r3, r2
 8007046:	d00b      	beq.n	8007060 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	4a0e      	ldr	r2, [pc, #56]	; (8007088 <UART_AdvFeatureConfig+0x164>)
 8007050:	4013      	ands	r3, r2
 8007052:	0019      	movs	r1, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	605a      	str	r2, [r3, #4]
  }
}
 8007060:	46c0      	nop			; (mov r8, r8)
 8007062:	46bd      	mov	sp, r7
 8007064:	b002      	add	sp, #8
 8007066:	bd80      	pop	{r7, pc}
 8007068:	fffdffff 	.word	0xfffdffff
 800706c:	fffeffff 	.word	0xfffeffff
 8007070:	fffbffff 	.word	0xfffbffff
 8007074:	ffff7fff 	.word	0xffff7fff
 8007078:	ffffefff 	.word	0xffffefff
 800707c:	ffffdfff 	.word	0xffffdfff
 8007080:	ffefffff 	.word	0xffefffff
 8007084:	ff9fffff 	.word	0xff9fffff
 8007088:	fff7ffff 	.word	0xfff7ffff

0800708c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af02      	add	r7, sp, #8
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2280      	movs	r2, #128	; 0x80
 8007098:	2100      	movs	r1, #0
 800709a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800709c:	f7fd f9e6 	bl	800446c <HAL_GetTick>
 80070a0:	0003      	movs	r3, r0
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2208      	movs	r2, #8
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b08      	cmp	r3, #8
 80070b0:	d10c      	bne.n	80070cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2280      	movs	r2, #128	; 0x80
 80070b6:	0391      	lsls	r1, r2, #14
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4a17      	ldr	r2, [pc, #92]	; (8007118 <UART_CheckIdleState+0x8c>)
 80070bc:	9200      	str	r2, [sp, #0]
 80070be:	2200      	movs	r2, #0
 80070c0:	f000 f82c 	bl	800711c <UART_WaitOnFlagUntilTimeout>
 80070c4:	1e03      	subs	r3, r0, #0
 80070c6:	d001      	beq.n	80070cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e021      	b.n	8007110 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2204      	movs	r2, #4
 80070d4:	4013      	ands	r3, r2
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d10c      	bne.n	80070f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2280      	movs	r2, #128	; 0x80
 80070de:	03d1      	lsls	r1, r2, #15
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	4a0d      	ldr	r2, [pc, #52]	; (8007118 <UART_CheckIdleState+0x8c>)
 80070e4:	9200      	str	r2, [sp, #0]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f000 f818 	bl	800711c <UART_WaitOnFlagUntilTimeout>
 80070ec:	1e03      	subs	r3, r0, #0
 80070ee:	d001      	beq.n	80070f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e00d      	b.n	8007110 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2274      	movs	r2, #116	; 0x74
 800710a:	2100      	movs	r1, #0
 800710c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	0018      	movs	r0, r3
 8007112:	46bd      	mov	sp, r7
 8007114:	b004      	add	sp, #16
 8007116:	bd80      	pop	{r7, pc}
 8007118:	01ffffff 	.word	0x01ffffff

0800711c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	1dfb      	adds	r3, r7, #7
 800712a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800712c:	e05e      	b.n	80071ec <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	3301      	adds	r3, #1
 8007132:	d05b      	beq.n	80071ec <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007134:	f7fd f99a 	bl	800446c <HAL_GetTick>
 8007138:	0002      	movs	r2, r0
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	429a      	cmp	r2, r3
 8007142:	d302      	bcc.n	800714a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d11b      	bne.n	8007182 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	492f      	ldr	r1, [pc, #188]	; (8007214 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007156:	400a      	ands	r2, r1
 8007158:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2101      	movs	r1, #1
 8007166:	438a      	bics	r2, r1
 8007168:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2274      	movs	r2, #116	; 0x74
 800717a:	2100      	movs	r1, #0
 800717c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e044      	b.n	800720c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2204      	movs	r2, #4
 800718a:	4013      	ands	r3, r2
 800718c:	d02e      	beq.n	80071ec <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	2380      	movs	r3, #128	; 0x80
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	401a      	ands	r2, r3
 800719a:	2380      	movs	r3, #128	; 0x80
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	429a      	cmp	r2, r3
 80071a0:	d124      	bne.n	80071ec <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2280      	movs	r2, #128	; 0x80
 80071a8:	0112      	lsls	r2, r2, #4
 80071aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4917      	ldr	r1, [pc, #92]	; (8007214 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80071b8:	400a      	ands	r2, r1
 80071ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2101      	movs	r1, #1
 80071c8:	438a      	bics	r2, r1
 80071ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2280      	movs	r2, #128	; 0x80
 80071dc:	2120      	movs	r1, #32
 80071de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2274      	movs	r2, #116	; 0x74
 80071e4:	2100      	movs	r1, #0
 80071e6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e00f      	b.n	800720c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	4013      	ands	r3, r2
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	425a      	negs	r2, r3
 80071fc:	4153      	adcs	r3, r2
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	001a      	movs	r2, r3
 8007202:	1dfb      	adds	r3, r7, #7
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d091      	beq.n	800712e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	0018      	movs	r0, r3
 800720e:	46bd      	mov	sp, r7
 8007210:	b004      	add	sp, #16
 8007212:	bd80      	pop	{r7, pc}
 8007214:	fffffe5f 	.word	0xfffffe5f

08007218 <__errno>:
 8007218:	4b01      	ldr	r3, [pc, #4]	; (8007220 <__errno+0x8>)
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	4770      	bx	lr
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	2000000c 	.word	0x2000000c

08007224 <__libc_init_array>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	2600      	movs	r6, #0
 8007228:	4d0c      	ldr	r5, [pc, #48]	; (800725c <__libc_init_array+0x38>)
 800722a:	4c0d      	ldr	r4, [pc, #52]	; (8007260 <__libc_init_array+0x3c>)
 800722c:	1b64      	subs	r4, r4, r5
 800722e:	10a4      	asrs	r4, r4, #2
 8007230:	42a6      	cmp	r6, r4
 8007232:	d109      	bne.n	8007248 <__libc_init_array+0x24>
 8007234:	2600      	movs	r6, #0
 8007236:	f002 fe3d 	bl	8009eb4 <_init>
 800723a:	4d0a      	ldr	r5, [pc, #40]	; (8007264 <__libc_init_array+0x40>)
 800723c:	4c0a      	ldr	r4, [pc, #40]	; (8007268 <__libc_init_array+0x44>)
 800723e:	1b64      	subs	r4, r4, r5
 8007240:	10a4      	asrs	r4, r4, #2
 8007242:	42a6      	cmp	r6, r4
 8007244:	d105      	bne.n	8007252 <__libc_init_array+0x2e>
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	00b3      	lsls	r3, r6, #2
 800724a:	58eb      	ldr	r3, [r5, r3]
 800724c:	4798      	blx	r3
 800724e:	3601      	adds	r6, #1
 8007250:	e7ee      	b.n	8007230 <__libc_init_array+0xc>
 8007252:	00b3      	lsls	r3, r6, #2
 8007254:	58eb      	ldr	r3, [r5, r3]
 8007256:	4798      	blx	r3
 8007258:	3601      	adds	r6, #1
 800725a:	e7f2      	b.n	8007242 <__libc_init_array+0x1e>
 800725c:	0800a62c 	.word	0x0800a62c
 8007260:	0800a62c 	.word	0x0800a62c
 8007264:	0800a62c 	.word	0x0800a62c
 8007268:	0800a630 	.word	0x0800a630

0800726c <malloc>:
 800726c:	b510      	push	{r4, lr}
 800726e:	4b03      	ldr	r3, [pc, #12]	; (800727c <malloc+0x10>)
 8007270:	0001      	movs	r1, r0
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	f000 f856 	bl	8007324 <_malloc_r>
 8007278:	bd10      	pop	{r4, pc}
 800727a:	46c0      	nop			; (mov r8, r8)
 800727c:	2000000c 	.word	0x2000000c

08007280 <memset>:
 8007280:	0003      	movs	r3, r0
 8007282:	1882      	adds	r2, r0, r2
 8007284:	4293      	cmp	r3, r2
 8007286:	d100      	bne.n	800728a <memset+0xa>
 8007288:	4770      	bx	lr
 800728a:	7019      	strb	r1, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	e7f9      	b.n	8007284 <memset+0x4>

08007290 <_free_r>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	0005      	movs	r5, r0
 8007294:	2900      	cmp	r1, #0
 8007296:	d010      	beq.n	80072ba <_free_r+0x2a>
 8007298:	1f0c      	subs	r4, r1, #4
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	da00      	bge.n	80072a2 <_free_r+0x12>
 80072a0:	18e4      	adds	r4, r4, r3
 80072a2:	0028      	movs	r0, r5
 80072a4:	f001 ff8c 	bl	80091c0 <__malloc_lock>
 80072a8:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <_free_r+0x90>)
 80072aa:	6813      	ldr	r3, [r2, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d105      	bne.n	80072bc <_free_r+0x2c>
 80072b0:	6063      	str	r3, [r4, #4]
 80072b2:	6014      	str	r4, [r2, #0]
 80072b4:	0028      	movs	r0, r5
 80072b6:	f001 ff8b 	bl	80091d0 <__malloc_unlock>
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	42a3      	cmp	r3, r4
 80072be:	d908      	bls.n	80072d2 <_free_r+0x42>
 80072c0:	6821      	ldr	r1, [r4, #0]
 80072c2:	1860      	adds	r0, r4, r1
 80072c4:	4283      	cmp	r3, r0
 80072c6:	d1f3      	bne.n	80072b0 <_free_r+0x20>
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	1841      	adds	r1, r0, r1
 80072ce:	6021      	str	r1, [r4, #0]
 80072d0:	e7ee      	b.n	80072b0 <_free_r+0x20>
 80072d2:	001a      	movs	r2, r3
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <_free_r+0x4e>
 80072da:	42a3      	cmp	r3, r4
 80072dc:	d9f9      	bls.n	80072d2 <_free_r+0x42>
 80072de:	6811      	ldr	r1, [r2, #0]
 80072e0:	1850      	adds	r0, r2, r1
 80072e2:	42a0      	cmp	r0, r4
 80072e4:	d10b      	bne.n	80072fe <_free_r+0x6e>
 80072e6:	6820      	ldr	r0, [r4, #0]
 80072e8:	1809      	adds	r1, r1, r0
 80072ea:	1850      	adds	r0, r2, r1
 80072ec:	6011      	str	r1, [r2, #0]
 80072ee:	4283      	cmp	r3, r0
 80072f0:	d1e0      	bne.n	80072b4 <_free_r+0x24>
 80072f2:	6818      	ldr	r0, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	1841      	adds	r1, r0, r1
 80072f8:	6011      	str	r1, [r2, #0]
 80072fa:	6053      	str	r3, [r2, #4]
 80072fc:	e7da      	b.n	80072b4 <_free_r+0x24>
 80072fe:	42a0      	cmp	r0, r4
 8007300:	d902      	bls.n	8007308 <_free_r+0x78>
 8007302:	230c      	movs	r3, #12
 8007304:	602b      	str	r3, [r5, #0]
 8007306:	e7d5      	b.n	80072b4 <_free_r+0x24>
 8007308:	6821      	ldr	r1, [r4, #0]
 800730a:	1860      	adds	r0, r4, r1
 800730c:	4283      	cmp	r3, r0
 800730e:	d103      	bne.n	8007318 <_free_r+0x88>
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	1841      	adds	r1, r0, r1
 8007316:	6021      	str	r1, [r4, #0]
 8007318:	6063      	str	r3, [r4, #4]
 800731a:	6054      	str	r4, [r2, #4]
 800731c:	e7ca      	b.n	80072b4 <_free_r+0x24>
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	200001fc 	.word	0x200001fc

08007324 <_malloc_r>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	2303      	movs	r3, #3
 8007328:	1ccd      	adds	r5, r1, #3
 800732a:	439d      	bics	r5, r3
 800732c:	3508      	adds	r5, #8
 800732e:	0006      	movs	r6, r0
 8007330:	2d0c      	cmp	r5, #12
 8007332:	d21f      	bcs.n	8007374 <_malloc_r+0x50>
 8007334:	250c      	movs	r5, #12
 8007336:	42a9      	cmp	r1, r5
 8007338:	d81e      	bhi.n	8007378 <_malloc_r+0x54>
 800733a:	0030      	movs	r0, r6
 800733c:	f001 ff40 	bl	80091c0 <__malloc_lock>
 8007340:	4925      	ldr	r1, [pc, #148]	; (80073d8 <_malloc_r+0xb4>)
 8007342:	680a      	ldr	r2, [r1, #0]
 8007344:	0014      	movs	r4, r2
 8007346:	2c00      	cmp	r4, #0
 8007348:	d11a      	bne.n	8007380 <_malloc_r+0x5c>
 800734a:	4f24      	ldr	r7, [pc, #144]	; (80073dc <_malloc_r+0xb8>)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d104      	bne.n	800735c <_malloc_r+0x38>
 8007352:	0021      	movs	r1, r4
 8007354:	0030      	movs	r0, r6
 8007356:	f000 fd53 	bl	8007e00 <_sbrk_r>
 800735a:	6038      	str	r0, [r7, #0]
 800735c:	0029      	movs	r1, r5
 800735e:	0030      	movs	r0, r6
 8007360:	f000 fd4e 	bl	8007e00 <_sbrk_r>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d12b      	bne.n	80073c0 <_malloc_r+0x9c>
 8007368:	230c      	movs	r3, #12
 800736a:	0030      	movs	r0, r6
 800736c:	6033      	str	r3, [r6, #0]
 800736e:	f001 ff2f 	bl	80091d0 <__malloc_unlock>
 8007372:	e003      	b.n	800737c <_malloc_r+0x58>
 8007374:	2d00      	cmp	r5, #0
 8007376:	dade      	bge.n	8007336 <_malloc_r+0x12>
 8007378:	230c      	movs	r3, #12
 800737a:	6033      	str	r3, [r6, #0]
 800737c:	2000      	movs	r0, #0
 800737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	1b5b      	subs	r3, r3, r5
 8007384:	d419      	bmi.n	80073ba <_malloc_r+0x96>
 8007386:	2b0b      	cmp	r3, #11
 8007388:	d903      	bls.n	8007392 <_malloc_r+0x6e>
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	18e4      	adds	r4, r4, r3
 800738e:	6025      	str	r5, [r4, #0]
 8007390:	e003      	b.n	800739a <_malloc_r+0x76>
 8007392:	6863      	ldr	r3, [r4, #4]
 8007394:	42a2      	cmp	r2, r4
 8007396:	d10e      	bne.n	80073b6 <_malloc_r+0x92>
 8007398:	600b      	str	r3, [r1, #0]
 800739a:	0030      	movs	r0, r6
 800739c:	f001 ff18 	bl	80091d0 <__malloc_unlock>
 80073a0:	0020      	movs	r0, r4
 80073a2:	2207      	movs	r2, #7
 80073a4:	300b      	adds	r0, #11
 80073a6:	1d23      	adds	r3, r4, #4
 80073a8:	4390      	bics	r0, r2
 80073aa:	1ac2      	subs	r2, r0, r3
 80073ac:	4298      	cmp	r0, r3
 80073ae:	d0e6      	beq.n	800737e <_malloc_r+0x5a>
 80073b0:	1a1b      	subs	r3, r3, r0
 80073b2:	50a3      	str	r3, [r4, r2]
 80073b4:	e7e3      	b.n	800737e <_malloc_r+0x5a>
 80073b6:	6053      	str	r3, [r2, #4]
 80073b8:	e7ef      	b.n	800739a <_malloc_r+0x76>
 80073ba:	0022      	movs	r2, r4
 80073bc:	6864      	ldr	r4, [r4, #4]
 80073be:	e7c2      	b.n	8007346 <_malloc_r+0x22>
 80073c0:	2303      	movs	r3, #3
 80073c2:	1cc4      	adds	r4, r0, #3
 80073c4:	439c      	bics	r4, r3
 80073c6:	42a0      	cmp	r0, r4
 80073c8:	d0e1      	beq.n	800738e <_malloc_r+0x6a>
 80073ca:	1a21      	subs	r1, r4, r0
 80073cc:	0030      	movs	r0, r6
 80073ce:	f000 fd17 	bl	8007e00 <_sbrk_r>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	d1db      	bne.n	800738e <_malloc_r+0x6a>
 80073d6:	e7c7      	b.n	8007368 <_malloc_r+0x44>
 80073d8:	200001fc 	.word	0x200001fc
 80073dc:	20000200 	.word	0x20000200

080073e0 <__cvt>:
 80073e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073e2:	001e      	movs	r6, r3
 80073e4:	2300      	movs	r3, #0
 80073e6:	0014      	movs	r4, r2
 80073e8:	b08b      	sub	sp, #44	; 0x2c
 80073ea:	429e      	cmp	r6, r3
 80073ec:	da04      	bge.n	80073f8 <__cvt+0x18>
 80073ee:	2180      	movs	r1, #128	; 0x80
 80073f0:	0609      	lsls	r1, r1, #24
 80073f2:	1873      	adds	r3, r6, r1
 80073f4:	001e      	movs	r6, r3
 80073f6:	232d      	movs	r3, #45	; 0x2d
 80073f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80073fc:	7013      	strb	r3, [r2, #0]
 80073fe:	2320      	movs	r3, #32
 8007400:	2203      	movs	r2, #3
 8007402:	439f      	bics	r7, r3
 8007404:	2f46      	cmp	r7, #70	; 0x46
 8007406:	d007      	beq.n	8007418 <__cvt+0x38>
 8007408:	003b      	movs	r3, r7
 800740a:	3b45      	subs	r3, #69	; 0x45
 800740c:	4259      	negs	r1, r3
 800740e:	414b      	adcs	r3, r1
 8007410:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007412:	3a01      	subs	r2, #1
 8007414:	18cb      	adds	r3, r1, r3
 8007416:	9310      	str	r3, [sp, #64]	; 0x40
 8007418:	ab09      	add	r3, sp, #36	; 0x24
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	ab08      	add	r3, sp, #32
 800741e:	9303      	str	r3, [sp, #12]
 8007420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007422:	9200      	str	r2, [sp, #0]
 8007424:	9302      	str	r3, [sp, #8]
 8007426:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007428:	0022      	movs	r2, r4
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	0033      	movs	r3, r6
 800742e:	f000 fe53 	bl	80080d8 <_dtoa_r>
 8007432:	0005      	movs	r5, r0
 8007434:	2f47      	cmp	r7, #71	; 0x47
 8007436:	d102      	bne.n	800743e <__cvt+0x5e>
 8007438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800743a:	07db      	lsls	r3, r3, #31
 800743c:	d528      	bpl.n	8007490 <__cvt+0xb0>
 800743e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007440:	18eb      	adds	r3, r5, r3
 8007442:	9307      	str	r3, [sp, #28]
 8007444:	2f46      	cmp	r7, #70	; 0x46
 8007446:	d114      	bne.n	8007472 <__cvt+0x92>
 8007448:	782b      	ldrb	r3, [r5, #0]
 800744a:	2b30      	cmp	r3, #48	; 0x30
 800744c:	d10c      	bne.n	8007468 <__cvt+0x88>
 800744e:	2200      	movs	r2, #0
 8007450:	2300      	movs	r3, #0
 8007452:	0020      	movs	r0, r4
 8007454:	0031      	movs	r1, r6
 8007456:	f7f8 fff9 	bl	800044c <__aeabi_dcmpeq>
 800745a:	2800      	cmp	r0, #0
 800745c:	d104      	bne.n	8007468 <__cvt+0x88>
 800745e:	2301      	movs	r3, #1
 8007460:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800746a:	9a07      	ldr	r2, [sp, #28]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	18d3      	adds	r3, r2, r3
 8007470:	9307      	str	r3, [sp, #28]
 8007472:	2200      	movs	r2, #0
 8007474:	2300      	movs	r3, #0
 8007476:	0020      	movs	r0, r4
 8007478:	0031      	movs	r1, r6
 800747a:	f7f8 ffe7 	bl	800044c <__aeabi_dcmpeq>
 800747e:	2800      	cmp	r0, #0
 8007480:	d001      	beq.n	8007486 <__cvt+0xa6>
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	9309      	str	r3, [sp, #36]	; 0x24
 8007486:	2230      	movs	r2, #48	; 0x30
 8007488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748a:	9907      	ldr	r1, [sp, #28]
 800748c:	428b      	cmp	r3, r1
 800748e:	d306      	bcc.n	800749e <__cvt+0xbe>
 8007490:	0028      	movs	r0, r5
 8007492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007494:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007496:	1b5b      	subs	r3, r3, r5
 8007498:	6013      	str	r3, [r2, #0]
 800749a:	b00b      	add	sp, #44	; 0x2c
 800749c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800749e:	1c59      	adds	r1, r3, #1
 80074a0:	9109      	str	r1, [sp, #36]	; 0x24
 80074a2:	701a      	strb	r2, [r3, #0]
 80074a4:	e7f0      	b.n	8007488 <__cvt+0xa8>

080074a6 <__exponent>:
 80074a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074a8:	1c83      	adds	r3, r0, #2
 80074aa:	b087      	sub	sp, #28
 80074ac:	9303      	str	r3, [sp, #12]
 80074ae:	0005      	movs	r5, r0
 80074b0:	000c      	movs	r4, r1
 80074b2:	232b      	movs	r3, #43	; 0x2b
 80074b4:	7002      	strb	r2, [r0, #0]
 80074b6:	2900      	cmp	r1, #0
 80074b8:	da01      	bge.n	80074be <__exponent+0x18>
 80074ba:	424c      	negs	r4, r1
 80074bc:	3302      	adds	r3, #2
 80074be:	706b      	strb	r3, [r5, #1]
 80074c0:	2c09      	cmp	r4, #9
 80074c2:	dd31      	ble.n	8007528 <__exponent+0x82>
 80074c4:	270a      	movs	r7, #10
 80074c6:	ab04      	add	r3, sp, #16
 80074c8:	1dde      	adds	r6, r3, #7
 80074ca:	0020      	movs	r0, r4
 80074cc:	0039      	movs	r1, r7
 80074ce:	9601      	str	r6, [sp, #4]
 80074d0:	f7f8 ffa6 	bl	8000420 <__aeabi_idivmod>
 80074d4:	3e01      	subs	r6, #1
 80074d6:	3130      	adds	r1, #48	; 0x30
 80074d8:	0020      	movs	r0, r4
 80074da:	7031      	strb	r1, [r6, #0]
 80074dc:	0039      	movs	r1, r7
 80074de:	9402      	str	r4, [sp, #8]
 80074e0:	f7f8 feb8 	bl	8000254 <__divsi3>
 80074e4:	9b02      	ldr	r3, [sp, #8]
 80074e6:	0004      	movs	r4, r0
 80074e8:	2b63      	cmp	r3, #99	; 0x63
 80074ea:	dcee      	bgt.n	80074ca <__exponent+0x24>
 80074ec:	9b01      	ldr	r3, [sp, #4]
 80074ee:	3430      	adds	r4, #48	; 0x30
 80074f0:	1e9a      	subs	r2, r3, #2
 80074f2:	0013      	movs	r3, r2
 80074f4:	9903      	ldr	r1, [sp, #12]
 80074f6:	7014      	strb	r4, [r2, #0]
 80074f8:	a804      	add	r0, sp, #16
 80074fa:	3007      	adds	r0, #7
 80074fc:	4298      	cmp	r0, r3
 80074fe:	d80e      	bhi.n	800751e <__exponent+0x78>
 8007500:	ab04      	add	r3, sp, #16
 8007502:	3307      	adds	r3, #7
 8007504:	2000      	movs	r0, #0
 8007506:	429a      	cmp	r2, r3
 8007508:	d804      	bhi.n	8007514 <__exponent+0x6e>
 800750a:	ab04      	add	r3, sp, #16
 800750c:	3009      	adds	r0, #9
 800750e:	18c0      	adds	r0, r0, r3
 8007510:	9b01      	ldr	r3, [sp, #4]
 8007512:	1ac0      	subs	r0, r0, r3
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	1818      	adds	r0, r3, r0
 8007518:	1b40      	subs	r0, r0, r5
 800751a:	b007      	add	sp, #28
 800751c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800751e:	7818      	ldrb	r0, [r3, #0]
 8007520:	3301      	adds	r3, #1
 8007522:	7008      	strb	r0, [r1, #0]
 8007524:	3101      	adds	r1, #1
 8007526:	e7e7      	b.n	80074f8 <__exponent+0x52>
 8007528:	2330      	movs	r3, #48	; 0x30
 800752a:	18e4      	adds	r4, r4, r3
 800752c:	70ab      	strb	r3, [r5, #2]
 800752e:	1d28      	adds	r0, r5, #4
 8007530:	70ec      	strb	r4, [r5, #3]
 8007532:	e7f1      	b.n	8007518 <__exponent+0x72>

08007534 <_printf_float>:
 8007534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007536:	b095      	sub	sp, #84	; 0x54
 8007538:	000c      	movs	r4, r1
 800753a:	9208      	str	r2, [sp, #32]
 800753c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800753e:	9309      	str	r3, [sp, #36]	; 0x24
 8007540:	0007      	movs	r7, r0
 8007542:	f001 fdb5 	bl	80090b0 <_localeconv_r>
 8007546:	6803      	ldr	r3, [r0, #0]
 8007548:	0018      	movs	r0, r3
 800754a:	930b      	str	r3, [sp, #44]	; 0x2c
 800754c:	f7f8 fddc 	bl	8000108 <strlen>
 8007550:	2300      	movs	r3, #0
 8007552:	9312      	str	r3, [sp, #72]	; 0x48
 8007554:	7e23      	ldrb	r3, [r4, #24]
 8007556:	2207      	movs	r2, #7
 8007558:	001e      	movs	r6, r3
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	900d      	str	r0, [sp, #52]	; 0x34
 800755e:	930c      	str	r3, [sp, #48]	; 0x30
 8007560:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007562:	682b      	ldr	r3, [r5, #0]
 8007564:	05c9      	lsls	r1, r1, #23
 8007566:	d547      	bpl.n	80075f8 <_printf_float+0xc4>
 8007568:	189b      	adds	r3, r3, r2
 800756a:	4393      	bics	r3, r2
 800756c:	001a      	movs	r2, r3
 800756e:	3208      	adds	r2, #8
 8007570:	602a      	str	r2, [r5, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	64a2      	str	r2, [r4, #72]	; 0x48
 8007578:	64e3      	str	r3, [r4, #76]	; 0x4c
 800757a:	2201      	movs	r2, #1
 800757c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800757e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007580:	930a      	str	r3, [sp, #40]	; 0x28
 8007582:	006b      	lsls	r3, r5, #1
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	930e      	str	r3, [sp, #56]	; 0x38
 8007588:	980a      	ldr	r0, [sp, #40]	; 0x28
 800758a:	4ba8      	ldr	r3, [pc, #672]	; (800782c <_printf_float+0x2f8>)
 800758c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800758e:	4252      	negs	r2, r2
 8007590:	f7fb fa34 	bl	80029fc <__aeabi_dcmpun>
 8007594:	2800      	cmp	r0, #0
 8007596:	d131      	bne.n	80075fc <_printf_float+0xc8>
 8007598:	2201      	movs	r2, #1
 800759a:	4ba4      	ldr	r3, [pc, #656]	; (800782c <_printf_float+0x2f8>)
 800759c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800759e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80075a0:	4252      	negs	r2, r2
 80075a2:	f7f8 ff63 	bl	800046c <__aeabi_dcmple>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d128      	bne.n	80075fc <_printf_float+0xc8>
 80075aa:	2200      	movs	r2, #0
 80075ac:	2300      	movs	r3, #0
 80075ae:	0029      	movs	r1, r5
 80075b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80075b2:	f7f8 ff51 	bl	8000458 <__aeabi_dcmplt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d003      	beq.n	80075c2 <_printf_float+0x8e>
 80075ba:	0023      	movs	r3, r4
 80075bc:	222d      	movs	r2, #45	; 0x2d
 80075be:	3343      	adds	r3, #67	; 0x43
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	4d9b      	ldr	r5, [pc, #620]	; (8007830 <_printf_float+0x2fc>)
 80075c4:	2e47      	cmp	r6, #71	; 0x47
 80075c6:	d900      	bls.n	80075ca <_printf_float+0x96>
 80075c8:	4d9a      	ldr	r5, [pc, #616]	; (8007834 <_printf_float+0x300>)
 80075ca:	2303      	movs	r3, #3
 80075cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075ce:	6123      	str	r3, [r4, #16]
 80075d0:	3301      	adds	r3, #1
 80075d2:	439a      	bics	r2, r3
 80075d4:	2300      	movs	r3, #0
 80075d6:	6022      	str	r2, [r4, #0]
 80075d8:	930a      	str	r3, [sp, #40]	; 0x28
 80075da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075dc:	0021      	movs	r1, r4
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	0038      	movs	r0, r7
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	aa13      	add	r2, sp, #76	; 0x4c
 80075e6:	f000 f9f3 	bl	80079d0 <_printf_common>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	d000      	beq.n	80075f0 <_printf_float+0xbc>
 80075ee:	e09e      	b.n	800772e <_printf_float+0x1fa>
 80075f0:	2001      	movs	r0, #1
 80075f2:	4240      	negs	r0, r0
 80075f4:	b015      	add	sp, #84	; 0x54
 80075f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075f8:	3307      	adds	r3, #7
 80075fa:	e7b6      	b.n	800756a <_printf_float+0x36>
 80075fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075fe:	002b      	movs	r3, r5
 8007600:	0010      	movs	r0, r2
 8007602:	0029      	movs	r1, r5
 8007604:	f7fb f9fa 	bl	80029fc <__aeabi_dcmpun>
 8007608:	2800      	cmp	r0, #0
 800760a:	d00a      	beq.n	8007622 <_printf_float+0xee>
 800760c:	2d00      	cmp	r5, #0
 800760e:	da03      	bge.n	8007618 <_printf_float+0xe4>
 8007610:	0023      	movs	r3, r4
 8007612:	222d      	movs	r2, #45	; 0x2d
 8007614:	3343      	adds	r3, #67	; 0x43
 8007616:	701a      	strb	r2, [r3, #0]
 8007618:	4d87      	ldr	r5, [pc, #540]	; (8007838 <_printf_float+0x304>)
 800761a:	2e47      	cmp	r6, #71	; 0x47
 800761c:	d9d5      	bls.n	80075ca <_printf_float+0x96>
 800761e:	4d87      	ldr	r5, [pc, #540]	; (800783c <_printf_float+0x308>)
 8007620:	e7d3      	b.n	80075ca <_printf_float+0x96>
 8007622:	2220      	movs	r2, #32
 8007624:	0031      	movs	r1, r6
 8007626:	6863      	ldr	r3, [r4, #4]
 8007628:	4391      	bics	r1, r2
 800762a:	910e      	str	r1, [sp, #56]	; 0x38
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	d147      	bne.n	80076c0 <_printf_float+0x18c>
 8007630:	3307      	adds	r3, #7
 8007632:	6063      	str	r3, [r4, #4]
 8007634:	2380      	movs	r3, #128	; 0x80
 8007636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	4313      	orrs	r3, r2
 800763c:	2200      	movs	r2, #0
 800763e:	9206      	str	r2, [sp, #24]
 8007640:	aa12      	add	r2, sp, #72	; 0x48
 8007642:	9205      	str	r2, [sp, #20]
 8007644:	aa11      	add	r2, sp, #68	; 0x44
 8007646:	9203      	str	r2, [sp, #12]
 8007648:	2223      	movs	r2, #35	; 0x23
 800764a:	a908      	add	r1, sp, #32
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	6863      	ldr	r3, [r4, #4]
 8007652:	1852      	adds	r2, r2, r1
 8007654:	9202      	str	r2, [sp, #8]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	0038      	movs	r0, r7
 800765a:	002b      	movs	r3, r5
 800765c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800765e:	9604      	str	r6, [sp, #16]
 8007660:	f7ff febe 	bl	80073e0 <__cvt>
 8007664:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007666:	0005      	movs	r5, r0
 8007668:	9911      	ldr	r1, [sp, #68]	; 0x44
 800766a:	2b47      	cmp	r3, #71	; 0x47
 800766c:	d108      	bne.n	8007680 <_printf_float+0x14c>
 800766e:	1ccb      	adds	r3, r1, #3
 8007670:	db02      	blt.n	8007678 <_printf_float+0x144>
 8007672:	6863      	ldr	r3, [r4, #4]
 8007674:	4299      	cmp	r1, r3
 8007676:	dd46      	ble.n	8007706 <_printf_float+0x1d2>
 8007678:	0033      	movs	r3, r6
 800767a:	3b02      	subs	r3, #2
 800767c:	b2db      	uxtb	r3, r3
 800767e:	001e      	movs	r6, r3
 8007680:	2e65      	cmp	r6, #101	; 0x65
 8007682:	d824      	bhi.n	80076ce <_printf_float+0x19a>
 8007684:	0020      	movs	r0, r4
 8007686:	0032      	movs	r2, r6
 8007688:	3901      	subs	r1, #1
 800768a:	3050      	adds	r0, #80	; 0x50
 800768c:	9111      	str	r1, [sp, #68]	; 0x44
 800768e:	f7ff ff0a 	bl	80074a6 <__exponent>
 8007692:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007694:	900a      	str	r0, [sp, #40]	; 0x28
 8007696:	1813      	adds	r3, r2, r0
 8007698:	6123      	str	r3, [r4, #16]
 800769a:	2a01      	cmp	r2, #1
 800769c:	dc02      	bgt.n	80076a4 <_printf_float+0x170>
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	07d2      	lsls	r2, r2, #31
 80076a2:	d501      	bpl.n	80076a8 <_printf_float+0x174>
 80076a4:	3301      	adds	r3, #1
 80076a6:	6123      	str	r3, [r4, #16]
 80076a8:	2323      	movs	r3, #35	; 0x23
 80076aa:	aa08      	add	r2, sp, #32
 80076ac:	189b      	adds	r3, r3, r2
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d100      	bne.n	80076b6 <_printf_float+0x182>
 80076b4:	e791      	b.n	80075da <_printf_float+0xa6>
 80076b6:	0023      	movs	r3, r4
 80076b8:	222d      	movs	r2, #45	; 0x2d
 80076ba:	3343      	adds	r3, #67	; 0x43
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	e78c      	b.n	80075da <_printf_float+0xa6>
 80076c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076c2:	2a47      	cmp	r2, #71	; 0x47
 80076c4:	d1b6      	bne.n	8007634 <_printf_float+0x100>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1b4      	bne.n	8007634 <_printf_float+0x100>
 80076ca:	3301      	adds	r3, #1
 80076cc:	e7b1      	b.n	8007632 <_printf_float+0xfe>
 80076ce:	2e66      	cmp	r6, #102	; 0x66
 80076d0:	d11b      	bne.n	800770a <_printf_float+0x1d6>
 80076d2:	6863      	ldr	r3, [r4, #4]
 80076d4:	2900      	cmp	r1, #0
 80076d6:	dd0d      	ble.n	80076f4 <_printf_float+0x1c0>
 80076d8:	6121      	str	r1, [r4, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d102      	bne.n	80076e4 <_printf_float+0x1b0>
 80076de:	6822      	ldr	r2, [r4, #0]
 80076e0:	07d2      	lsls	r2, r2, #31
 80076e2:	d502      	bpl.n	80076ea <_printf_float+0x1b6>
 80076e4:	3301      	adds	r3, #1
 80076e6:	1859      	adds	r1, r3, r1
 80076e8:	6121      	str	r1, [r4, #16]
 80076ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80076ee:	2300      	movs	r3, #0
 80076f0:	930a      	str	r3, [sp, #40]	; 0x28
 80076f2:	e7d9      	b.n	80076a8 <_printf_float+0x174>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d103      	bne.n	8007700 <_printf_float+0x1cc>
 80076f8:	2201      	movs	r2, #1
 80076fa:	6821      	ldr	r1, [r4, #0]
 80076fc:	4211      	tst	r1, r2
 80076fe:	d000      	beq.n	8007702 <_printf_float+0x1ce>
 8007700:	1c9a      	adds	r2, r3, #2
 8007702:	6122      	str	r2, [r4, #16]
 8007704:	e7f1      	b.n	80076ea <_printf_float+0x1b6>
 8007706:	2367      	movs	r3, #103	; 0x67
 8007708:	001e      	movs	r6, r3
 800770a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800770c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800770e:	4293      	cmp	r3, r2
 8007710:	db06      	blt.n	8007720 <_printf_float+0x1ec>
 8007712:	6822      	ldr	r2, [r4, #0]
 8007714:	6123      	str	r3, [r4, #16]
 8007716:	07d2      	lsls	r2, r2, #31
 8007718:	d5e7      	bpl.n	80076ea <_printf_float+0x1b6>
 800771a:	3301      	adds	r3, #1
 800771c:	6123      	str	r3, [r4, #16]
 800771e:	e7e4      	b.n	80076ea <_printf_float+0x1b6>
 8007720:	2101      	movs	r1, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	dc01      	bgt.n	800772a <_printf_float+0x1f6>
 8007726:	1849      	adds	r1, r1, r1
 8007728:	1ac9      	subs	r1, r1, r3
 800772a:	1852      	adds	r2, r2, r1
 800772c:	e7e9      	b.n	8007702 <_printf_float+0x1ce>
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	0553      	lsls	r3, r2, #21
 8007732:	d408      	bmi.n	8007746 <_printf_float+0x212>
 8007734:	6923      	ldr	r3, [r4, #16]
 8007736:	002a      	movs	r2, r5
 8007738:	0038      	movs	r0, r7
 800773a:	9908      	ldr	r1, [sp, #32]
 800773c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800773e:	47a8      	blx	r5
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	d129      	bne.n	8007798 <_printf_float+0x264>
 8007744:	e754      	b.n	80075f0 <_printf_float+0xbc>
 8007746:	2e65      	cmp	r6, #101	; 0x65
 8007748:	d800      	bhi.n	800774c <_printf_float+0x218>
 800774a:	e0ec      	b.n	8007926 <_printf_float+0x3f2>
 800774c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800774e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007750:	2200      	movs	r2, #0
 8007752:	2300      	movs	r3, #0
 8007754:	f7f8 fe7a 	bl	800044c <__aeabi_dcmpeq>
 8007758:	2800      	cmp	r0, #0
 800775a:	d034      	beq.n	80077c6 <_printf_float+0x292>
 800775c:	2301      	movs	r3, #1
 800775e:	0038      	movs	r0, r7
 8007760:	4a37      	ldr	r2, [pc, #220]	; (8007840 <_printf_float+0x30c>)
 8007762:	9908      	ldr	r1, [sp, #32]
 8007764:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007766:	47a8      	blx	r5
 8007768:	1c43      	adds	r3, r0, #1
 800776a:	d100      	bne.n	800776e <_printf_float+0x23a>
 800776c:	e740      	b.n	80075f0 <_printf_float+0xbc>
 800776e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007770:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007772:	4293      	cmp	r3, r2
 8007774:	db02      	blt.n	800777c <_printf_float+0x248>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	07db      	lsls	r3, r3, #31
 800777a:	d50d      	bpl.n	8007798 <_printf_float+0x264>
 800777c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800777e:	0038      	movs	r0, r7
 8007780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007782:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007784:	9908      	ldr	r1, [sp, #32]
 8007786:	47a8      	blx	r5
 8007788:	2500      	movs	r5, #0
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	d100      	bne.n	8007790 <_printf_float+0x25c>
 800778e:	e72f      	b.n	80075f0 <_printf_float+0xbc>
 8007790:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007792:	3b01      	subs	r3, #1
 8007794:	42ab      	cmp	r3, r5
 8007796:	dc0a      	bgt.n	80077ae <_printf_float+0x27a>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	079b      	lsls	r3, r3, #30
 800779c:	d500      	bpl.n	80077a0 <_printf_float+0x26c>
 800779e:	e114      	b.n	80079ca <_printf_float+0x496>
 80077a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077a2:	68e0      	ldr	r0, [r4, #12]
 80077a4:	4298      	cmp	r0, r3
 80077a6:	db00      	blt.n	80077aa <_printf_float+0x276>
 80077a8:	e724      	b.n	80075f4 <_printf_float+0xc0>
 80077aa:	0018      	movs	r0, r3
 80077ac:	e722      	b.n	80075f4 <_printf_float+0xc0>
 80077ae:	0022      	movs	r2, r4
 80077b0:	2301      	movs	r3, #1
 80077b2:	0038      	movs	r0, r7
 80077b4:	9908      	ldr	r1, [sp, #32]
 80077b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077b8:	321a      	adds	r2, #26
 80077ba:	47b0      	blx	r6
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d100      	bne.n	80077c2 <_printf_float+0x28e>
 80077c0:	e716      	b.n	80075f0 <_printf_float+0xbc>
 80077c2:	3501      	adds	r5, #1
 80077c4:	e7e4      	b.n	8007790 <_printf_float+0x25c>
 80077c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dc3b      	bgt.n	8007844 <_printf_float+0x310>
 80077cc:	2301      	movs	r3, #1
 80077ce:	0038      	movs	r0, r7
 80077d0:	4a1b      	ldr	r2, [pc, #108]	; (8007840 <_printf_float+0x30c>)
 80077d2:	9908      	ldr	r1, [sp, #32]
 80077d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077d6:	47b0      	blx	r6
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d100      	bne.n	80077de <_printf_float+0x2aa>
 80077dc:	e708      	b.n	80075f0 <_printf_float+0xbc>
 80077de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077e2:	4313      	orrs	r3, r2
 80077e4:	d102      	bne.n	80077ec <_printf_float+0x2b8>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	07db      	lsls	r3, r3, #31
 80077ea:	d5d5      	bpl.n	8007798 <_printf_float+0x264>
 80077ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ee:	0038      	movs	r0, r7
 80077f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077f2:	9908      	ldr	r1, [sp, #32]
 80077f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077f6:	47b0      	blx	r6
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d100      	bne.n	80077fe <_printf_float+0x2ca>
 80077fc:	e6f8      	b.n	80075f0 <_printf_float+0xbc>
 80077fe:	2300      	movs	r3, #0
 8007800:	930a      	str	r3, [sp, #40]	; 0x28
 8007802:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007806:	425b      	negs	r3, r3
 8007808:	4293      	cmp	r3, r2
 800780a:	dc01      	bgt.n	8007810 <_printf_float+0x2dc>
 800780c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800780e:	e792      	b.n	8007736 <_printf_float+0x202>
 8007810:	0022      	movs	r2, r4
 8007812:	2301      	movs	r3, #1
 8007814:	0038      	movs	r0, r7
 8007816:	9908      	ldr	r1, [sp, #32]
 8007818:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800781a:	321a      	adds	r2, #26
 800781c:	47b0      	blx	r6
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d100      	bne.n	8007824 <_printf_float+0x2f0>
 8007822:	e6e5      	b.n	80075f0 <_printf_float+0xbc>
 8007824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007826:	3301      	adds	r3, #1
 8007828:	e7ea      	b.n	8007800 <_printf_float+0x2cc>
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	7fefffff 	.word	0x7fefffff
 8007830:	0800a244 	.word	0x0800a244
 8007834:	0800a248 	.word	0x0800a248
 8007838:	0800a24c 	.word	0x0800a24c
 800783c:	0800a250 	.word	0x0800a250
 8007840:	0800a254 	.word	0x0800a254
 8007844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007848:	920a      	str	r2, [sp, #40]	; 0x28
 800784a:	429a      	cmp	r2, r3
 800784c:	dd00      	ble.n	8007850 <_printf_float+0x31c>
 800784e:	930a      	str	r3, [sp, #40]	; 0x28
 8007850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007852:	2b00      	cmp	r3, #0
 8007854:	dc3d      	bgt.n	80078d2 <_printf_float+0x39e>
 8007856:	2300      	movs	r3, #0
 8007858:	930e      	str	r3, [sp, #56]	; 0x38
 800785a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785c:	43db      	mvns	r3, r3
 800785e:	17db      	asrs	r3, r3, #31
 8007860:	930f      	str	r3, [sp, #60]	; 0x3c
 8007862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007864:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007866:	930c      	str	r3, [sp, #48]	; 0x30
 8007868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800786a:	4013      	ands	r3, r2
 800786c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007872:	4293      	cmp	r3, r2
 8007874:	dc36      	bgt.n	80078e4 <_printf_float+0x3b0>
 8007876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007878:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800787a:	4293      	cmp	r3, r2
 800787c:	db40      	blt.n	8007900 <_printf_float+0x3cc>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	07db      	lsls	r3, r3, #31
 8007882:	d43d      	bmi.n	8007900 <_printf_float+0x3cc>
 8007884:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007888:	9911      	ldr	r1, [sp, #68]	; 0x44
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	1a52      	subs	r2, r2, r1
 800788e:	920a      	str	r2, [sp, #40]	; 0x28
 8007890:	429a      	cmp	r2, r3
 8007892:	dd00      	ble.n	8007896 <_printf_float+0x362>
 8007894:	930a      	str	r3, [sp, #40]	; 0x28
 8007896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007898:	2b00      	cmp	r3, #0
 800789a:	dc3a      	bgt.n	8007912 <_printf_float+0x3de>
 800789c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789e:	2500      	movs	r5, #0
 80078a0:	43db      	mvns	r3, r3
 80078a2:	17db      	asrs	r3, r3, #31
 80078a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80078a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078ac:	1a9b      	subs	r3, r3, r2
 80078ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078b0:	400a      	ands	r2, r1
 80078b2:	1a9b      	subs	r3, r3, r2
 80078b4:	42ab      	cmp	r3, r5
 80078b6:	dc00      	bgt.n	80078ba <_printf_float+0x386>
 80078b8:	e76e      	b.n	8007798 <_printf_float+0x264>
 80078ba:	0022      	movs	r2, r4
 80078bc:	2301      	movs	r3, #1
 80078be:	0038      	movs	r0, r7
 80078c0:	9908      	ldr	r1, [sp, #32]
 80078c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078c4:	321a      	adds	r2, #26
 80078c6:	47b0      	blx	r6
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d100      	bne.n	80078ce <_printf_float+0x39a>
 80078cc:	e690      	b.n	80075f0 <_printf_float+0xbc>
 80078ce:	3501      	adds	r5, #1
 80078d0:	e7e9      	b.n	80078a6 <_printf_float+0x372>
 80078d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d4:	002a      	movs	r2, r5
 80078d6:	0038      	movs	r0, r7
 80078d8:	9908      	ldr	r1, [sp, #32]
 80078da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078dc:	47b0      	blx	r6
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d1b9      	bne.n	8007856 <_printf_float+0x322>
 80078e2:	e685      	b.n	80075f0 <_printf_float+0xbc>
 80078e4:	0022      	movs	r2, r4
 80078e6:	2301      	movs	r3, #1
 80078e8:	0038      	movs	r0, r7
 80078ea:	9908      	ldr	r1, [sp, #32]
 80078ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078ee:	321a      	adds	r2, #26
 80078f0:	47b0      	blx	r6
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	d100      	bne.n	80078f8 <_printf_float+0x3c4>
 80078f6:	e67b      	b.n	80075f0 <_printf_float+0xbc>
 80078f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078fa:	3301      	adds	r3, #1
 80078fc:	930e      	str	r3, [sp, #56]	; 0x38
 80078fe:	e7b0      	b.n	8007862 <_printf_float+0x32e>
 8007900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007902:	0038      	movs	r0, r7
 8007904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007906:	9908      	ldr	r1, [sp, #32]
 8007908:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800790a:	47b0      	blx	r6
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d1b9      	bne.n	8007884 <_printf_float+0x350>
 8007910:	e66e      	b.n	80075f0 <_printf_float+0xbc>
 8007912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007914:	0038      	movs	r0, r7
 8007916:	18ea      	adds	r2, r5, r3
 8007918:	9908      	ldr	r1, [sp, #32]
 800791a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800791e:	47a8      	blx	r5
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d1bb      	bne.n	800789c <_printf_float+0x368>
 8007924:	e664      	b.n	80075f0 <_printf_float+0xbc>
 8007926:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007928:	2b01      	cmp	r3, #1
 800792a:	dc02      	bgt.n	8007932 <_printf_float+0x3fe>
 800792c:	2301      	movs	r3, #1
 800792e:	421a      	tst	r2, r3
 8007930:	d038      	beq.n	80079a4 <_printf_float+0x470>
 8007932:	2301      	movs	r3, #1
 8007934:	002a      	movs	r2, r5
 8007936:	0038      	movs	r0, r7
 8007938:	9908      	ldr	r1, [sp, #32]
 800793a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800793c:	47b0      	blx	r6
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	d100      	bne.n	8007944 <_printf_float+0x410>
 8007942:	e655      	b.n	80075f0 <_printf_float+0xbc>
 8007944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007946:	0038      	movs	r0, r7
 8007948:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800794a:	9908      	ldr	r1, [sp, #32]
 800794c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800794e:	47b0      	blx	r6
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d100      	bne.n	8007956 <_printf_float+0x422>
 8007954:	e64c      	b.n	80075f0 <_printf_float+0xbc>
 8007956:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007958:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800795a:	2200      	movs	r2, #0
 800795c:	2300      	movs	r3, #0
 800795e:	f7f8 fd75 	bl	800044c <__aeabi_dcmpeq>
 8007962:	2800      	cmp	r0, #0
 8007964:	d11c      	bne.n	80079a0 <_printf_float+0x46c>
 8007966:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007968:	1c6a      	adds	r2, r5, #1
 800796a:	3b01      	subs	r3, #1
 800796c:	0038      	movs	r0, r7
 800796e:	9908      	ldr	r1, [sp, #32]
 8007970:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007972:	47a8      	blx	r5
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d10f      	bne.n	8007998 <_printf_float+0x464>
 8007978:	e63a      	b.n	80075f0 <_printf_float+0xbc>
 800797a:	0022      	movs	r2, r4
 800797c:	2301      	movs	r3, #1
 800797e:	0038      	movs	r0, r7
 8007980:	9908      	ldr	r1, [sp, #32]
 8007982:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007984:	321a      	adds	r2, #26
 8007986:	47b0      	blx	r6
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d100      	bne.n	800798e <_printf_float+0x45a>
 800798c:	e630      	b.n	80075f0 <_printf_float+0xbc>
 800798e:	3501      	adds	r5, #1
 8007990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007992:	3b01      	subs	r3, #1
 8007994:	42ab      	cmp	r3, r5
 8007996:	dcf0      	bgt.n	800797a <_printf_float+0x446>
 8007998:	0022      	movs	r2, r4
 800799a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800799c:	3250      	adds	r2, #80	; 0x50
 800799e:	e6cb      	b.n	8007738 <_printf_float+0x204>
 80079a0:	2500      	movs	r5, #0
 80079a2:	e7f5      	b.n	8007990 <_printf_float+0x45c>
 80079a4:	002a      	movs	r2, r5
 80079a6:	e7e1      	b.n	800796c <_printf_float+0x438>
 80079a8:	0022      	movs	r2, r4
 80079aa:	2301      	movs	r3, #1
 80079ac:	0038      	movs	r0, r7
 80079ae:	9908      	ldr	r1, [sp, #32]
 80079b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80079b2:	3219      	adds	r2, #25
 80079b4:	47b0      	blx	r6
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	d100      	bne.n	80079bc <_printf_float+0x488>
 80079ba:	e619      	b.n	80075f0 <_printf_float+0xbc>
 80079bc:	3501      	adds	r5, #1
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dcef      	bgt.n	80079a8 <_printf_float+0x474>
 80079c8:	e6ea      	b.n	80077a0 <_printf_float+0x26c>
 80079ca:	2500      	movs	r5, #0
 80079cc:	e7f7      	b.n	80079be <_printf_float+0x48a>
 80079ce:	46c0      	nop			; (mov r8, r8)

080079d0 <_printf_common>:
 80079d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079d2:	0015      	movs	r5, r2
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	688a      	ldr	r2, [r1, #8]
 80079d8:	690b      	ldr	r3, [r1, #16]
 80079da:	000c      	movs	r4, r1
 80079dc:	9000      	str	r0, [sp, #0]
 80079de:	4293      	cmp	r3, r2
 80079e0:	da00      	bge.n	80079e4 <_printf_common+0x14>
 80079e2:	0013      	movs	r3, r2
 80079e4:	0022      	movs	r2, r4
 80079e6:	602b      	str	r3, [r5, #0]
 80079e8:	3243      	adds	r2, #67	; 0x43
 80079ea:	7812      	ldrb	r2, [r2, #0]
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	d001      	beq.n	80079f4 <_printf_common+0x24>
 80079f0:	3301      	adds	r3, #1
 80079f2:	602b      	str	r3, [r5, #0]
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	069b      	lsls	r3, r3, #26
 80079f8:	d502      	bpl.n	8007a00 <_printf_common+0x30>
 80079fa:	682b      	ldr	r3, [r5, #0]
 80079fc:	3302      	adds	r3, #2
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	2306      	movs	r3, #6
 8007a04:	0017      	movs	r7, r2
 8007a06:	401f      	ands	r7, r3
 8007a08:	421a      	tst	r2, r3
 8007a0a:	d027      	beq.n	8007a5c <_printf_common+0x8c>
 8007a0c:	0023      	movs	r3, r4
 8007a0e:	3343      	adds	r3, #67	; 0x43
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	1e5a      	subs	r2, r3, #1
 8007a14:	4193      	sbcs	r3, r2
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	0692      	lsls	r2, r2, #26
 8007a1a:	d430      	bmi.n	8007a7e <_printf_common+0xae>
 8007a1c:	0022      	movs	r2, r4
 8007a1e:	9901      	ldr	r1, [sp, #4]
 8007a20:	9800      	ldr	r0, [sp, #0]
 8007a22:	9e08      	ldr	r6, [sp, #32]
 8007a24:	3243      	adds	r2, #67	; 0x43
 8007a26:	47b0      	blx	r6
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d025      	beq.n	8007a78 <_printf_common+0xa8>
 8007a2c:	2306      	movs	r3, #6
 8007a2e:	6820      	ldr	r0, [r4, #0]
 8007a30:	682a      	ldr	r2, [r5, #0]
 8007a32:	68e1      	ldr	r1, [r4, #12]
 8007a34:	2500      	movs	r5, #0
 8007a36:	4003      	ands	r3, r0
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	d103      	bne.n	8007a44 <_printf_common+0x74>
 8007a3c:	1a8d      	subs	r5, r1, r2
 8007a3e:	43eb      	mvns	r3, r5
 8007a40:	17db      	asrs	r3, r3, #31
 8007a42:	401d      	ands	r5, r3
 8007a44:	68a3      	ldr	r3, [r4, #8]
 8007a46:	6922      	ldr	r2, [r4, #16]
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	dd01      	ble.n	8007a50 <_printf_common+0x80>
 8007a4c:	1a9b      	subs	r3, r3, r2
 8007a4e:	18ed      	adds	r5, r5, r3
 8007a50:	2700      	movs	r7, #0
 8007a52:	42bd      	cmp	r5, r7
 8007a54:	d120      	bne.n	8007a98 <_printf_common+0xc8>
 8007a56:	2000      	movs	r0, #0
 8007a58:	e010      	b.n	8007a7c <_printf_common+0xac>
 8007a5a:	3701      	adds	r7, #1
 8007a5c:	68e3      	ldr	r3, [r4, #12]
 8007a5e:	682a      	ldr	r2, [r5, #0]
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	42bb      	cmp	r3, r7
 8007a64:	ddd2      	ble.n	8007a0c <_printf_common+0x3c>
 8007a66:	0022      	movs	r2, r4
 8007a68:	2301      	movs	r3, #1
 8007a6a:	9901      	ldr	r1, [sp, #4]
 8007a6c:	9800      	ldr	r0, [sp, #0]
 8007a6e:	9e08      	ldr	r6, [sp, #32]
 8007a70:	3219      	adds	r2, #25
 8007a72:	47b0      	blx	r6
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d1f0      	bne.n	8007a5a <_printf_common+0x8a>
 8007a78:	2001      	movs	r0, #1
 8007a7a:	4240      	negs	r0, r0
 8007a7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a7e:	2030      	movs	r0, #48	; 0x30
 8007a80:	18e1      	adds	r1, r4, r3
 8007a82:	3143      	adds	r1, #67	; 0x43
 8007a84:	7008      	strb	r0, [r1, #0]
 8007a86:	0021      	movs	r1, r4
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	3145      	adds	r1, #69	; 0x45
 8007a8c:	7809      	ldrb	r1, [r1, #0]
 8007a8e:	18a2      	adds	r2, r4, r2
 8007a90:	3243      	adds	r2, #67	; 0x43
 8007a92:	3302      	adds	r3, #2
 8007a94:	7011      	strb	r1, [r2, #0]
 8007a96:	e7c1      	b.n	8007a1c <_printf_common+0x4c>
 8007a98:	0022      	movs	r2, r4
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	9901      	ldr	r1, [sp, #4]
 8007a9e:	9800      	ldr	r0, [sp, #0]
 8007aa0:	9e08      	ldr	r6, [sp, #32]
 8007aa2:	321a      	adds	r2, #26
 8007aa4:	47b0      	blx	r6
 8007aa6:	1c43      	adds	r3, r0, #1
 8007aa8:	d0e6      	beq.n	8007a78 <_printf_common+0xa8>
 8007aaa:	3701      	adds	r7, #1
 8007aac:	e7d1      	b.n	8007a52 <_printf_common+0x82>
	...

08007ab0 <_printf_i>:
 8007ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ab2:	b08b      	sub	sp, #44	; 0x2c
 8007ab4:	9206      	str	r2, [sp, #24]
 8007ab6:	000a      	movs	r2, r1
 8007ab8:	3243      	adds	r2, #67	; 0x43
 8007aba:	9307      	str	r3, [sp, #28]
 8007abc:	9005      	str	r0, [sp, #20]
 8007abe:	9204      	str	r2, [sp, #16]
 8007ac0:	7e0a      	ldrb	r2, [r1, #24]
 8007ac2:	000c      	movs	r4, r1
 8007ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ac6:	2a78      	cmp	r2, #120	; 0x78
 8007ac8:	d806      	bhi.n	8007ad8 <_printf_i+0x28>
 8007aca:	2a62      	cmp	r2, #98	; 0x62
 8007acc:	d808      	bhi.n	8007ae0 <_printf_i+0x30>
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	d100      	bne.n	8007ad4 <_printf_i+0x24>
 8007ad2:	e0c0      	b.n	8007c56 <_printf_i+0x1a6>
 8007ad4:	2a58      	cmp	r2, #88	; 0x58
 8007ad6:	d052      	beq.n	8007b7e <_printf_i+0xce>
 8007ad8:	0026      	movs	r6, r4
 8007ada:	3642      	adds	r6, #66	; 0x42
 8007adc:	7032      	strb	r2, [r6, #0]
 8007ade:	e022      	b.n	8007b26 <_printf_i+0x76>
 8007ae0:	0010      	movs	r0, r2
 8007ae2:	3863      	subs	r0, #99	; 0x63
 8007ae4:	2815      	cmp	r0, #21
 8007ae6:	d8f7      	bhi.n	8007ad8 <_printf_i+0x28>
 8007ae8:	f7f8 fb20 	bl	800012c <__gnu_thumb1_case_shi>
 8007aec:	001f0016 	.word	0x001f0016
 8007af0:	fff6fff6 	.word	0xfff6fff6
 8007af4:	fff6fff6 	.word	0xfff6fff6
 8007af8:	fff6001f 	.word	0xfff6001f
 8007afc:	fff6fff6 	.word	0xfff6fff6
 8007b00:	00a8fff6 	.word	0x00a8fff6
 8007b04:	009a0036 	.word	0x009a0036
 8007b08:	fff6fff6 	.word	0xfff6fff6
 8007b0c:	fff600b9 	.word	0xfff600b9
 8007b10:	fff60036 	.word	0xfff60036
 8007b14:	009efff6 	.word	0x009efff6
 8007b18:	0026      	movs	r6, r4
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	3642      	adds	r6, #66	; 0x42
 8007b1e:	1d11      	adds	r1, r2, #4
 8007b20:	6019      	str	r1, [r3, #0]
 8007b22:	6813      	ldr	r3, [r2, #0]
 8007b24:	7033      	strb	r3, [r6, #0]
 8007b26:	2301      	movs	r3, #1
 8007b28:	e0a7      	b.n	8007c7a <_printf_i+0x1ca>
 8007b2a:	6808      	ldr	r0, [r1, #0]
 8007b2c:	6819      	ldr	r1, [r3, #0]
 8007b2e:	1d0a      	adds	r2, r1, #4
 8007b30:	0605      	lsls	r5, r0, #24
 8007b32:	d50b      	bpl.n	8007b4c <_printf_i+0x9c>
 8007b34:	680d      	ldr	r5, [r1, #0]
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	2d00      	cmp	r5, #0
 8007b3a:	da03      	bge.n	8007b44 <_printf_i+0x94>
 8007b3c:	232d      	movs	r3, #45	; 0x2d
 8007b3e:	9a04      	ldr	r2, [sp, #16]
 8007b40:	426d      	negs	r5, r5
 8007b42:	7013      	strb	r3, [r2, #0]
 8007b44:	4b61      	ldr	r3, [pc, #388]	; (8007ccc <_printf_i+0x21c>)
 8007b46:	270a      	movs	r7, #10
 8007b48:	9303      	str	r3, [sp, #12]
 8007b4a:	e032      	b.n	8007bb2 <_printf_i+0x102>
 8007b4c:	680d      	ldr	r5, [r1, #0]
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	0641      	lsls	r1, r0, #25
 8007b52:	d5f1      	bpl.n	8007b38 <_printf_i+0x88>
 8007b54:	b22d      	sxth	r5, r5
 8007b56:	e7ef      	b.n	8007b38 <_printf_i+0x88>
 8007b58:	680d      	ldr	r5, [r1, #0]
 8007b5a:	6819      	ldr	r1, [r3, #0]
 8007b5c:	1d08      	adds	r0, r1, #4
 8007b5e:	6018      	str	r0, [r3, #0]
 8007b60:	062e      	lsls	r6, r5, #24
 8007b62:	d501      	bpl.n	8007b68 <_printf_i+0xb8>
 8007b64:	680d      	ldr	r5, [r1, #0]
 8007b66:	e003      	b.n	8007b70 <_printf_i+0xc0>
 8007b68:	066d      	lsls	r5, r5, #25
 8007b6a:	d5fb      	bpl.n	8007b64 <_printf_i+0xb4>
 8007b6c:	680d      	ldr	r5, [r1, #0]
 8007b6e:	b2ad      	uxth	r5, r5
 8007b70:	4b56      	ldr	r3, [pc, #344]	; (8007ccc <_printf_i+0x21c>)
 8007b72:	270a      	movs	r7, #10
 8007b74:	9303      	str	r3, [sp, #12]
 8007b76:	2a6f      	cmp	r2, #111	; 0x6f
 8007b78:	d117      	bne.n	8007baa <_printf_i+0xfa>
 8007b7a:	2708      	movs	r7, #8
 8007b7c:	e015      	b.n	8007baa <_printf_i+0xfa>
 8007b7e:	3145      	adds	r1, #69	; 0x45
 8007b80:	700a      	strb	r2, [r1, #0]
 8007b82:	4a52      	ldr	r2, [pc, #328]	; (8007ccc <_printf_i+0x21c>)
 8007b84:	9203      	str	r2, [sp, #12]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	6821      	ldr	r1, [r4, #0]
 8007b8a:	ca20      	ldmia	r2!, {r5}
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	0608      	lsls	r0, r1, #24
 8007b90:	d550      	bpl.n	8007c34 <_printf_i+0x184>
 8007b92:	07cb      	lsls	r3, r1, #31
 8007b94:	d502      	bpl.n	8007b9c <_printf_i+0xec>
 8007b96:	2320      	movs	r3, #32
 8007b98:	4319      	orrs	r1, r3
 8007b9a:	6021      	str	r1, [r4, #0]
 8007b9c:	2710      	movs	r7, #16
 8007b9e:	2d00      	cmp	r5, #0
 8007ba0:	d103      	bne.n	8007baa <_printf_i+0xfa>
 8007ba2:	2320      	movs	r3, #32
 8007ba4:	6822      	ldr	r2, [r4, #0]
 8007ba6:	439a      	bics	r2, r3
 8007ba8:	6022      	str	r2, [r4, #0]
 8007baa:	0023      	movs	r3, r4
 8007bac:	2200      	movs	r2, #0
 8007bae:	3343      	adds	r3, #67	; 0x43
 8007bb0:	701a      	strb	r2, [r3, #0]
 8007bb2:	6863      	ldr	r3, [r4, #4]
 8007bb4:	60a3      	str	r3, [r4, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	db03      	blt.n	8007bc2 <_printf_i+0x112>
 8007bba:	2204      	movs	r2, #4
 8007bbc:	6821      	ldr	r1, [r4, #0]
 8007bbe:	4391      	bics	r1, r2
 8007bc0:	6021      	str	r1, [r4, #0]
 8007bc2:	2d00      	cmp	r5, #0
 8007bc4:	d102      	bne.n	8007bcc <_printf_i+0x11c>
 8007bc6:	9e04      	ldr	r6, [sp, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <_printf_i+0x136>
 8007bcc:	9e04      	ldr	r6, [sp, #16]
 8007bce:	0028      	movs	r0, r5
 8007bd0:	0039      	movs	r1, r7
 8007bd2:	f7f8 fb3b 	bl	800024c <__aeabi_uidivmod>
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	3e01      	subs	r6, #1
 8007bda:	5c5b      	ldrb	r3, [r3, r1]
 8007bdc:	7033      	strb	r3, [r6, #0]
 8007bde:	002b      	movs	r3, r5
 8007be0:	0005      	movs	r5, r0
 8007be2:	429f      	cmp	r7, r3
 8007be4:	d9f3      	bls.n	8007bce <_printf_i+0x11e>
 8007be6:	2f08      	cmp	r7, #8
 8007be8:	d109      	bne.n	8007bfe <_printf_i+0x14e>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	07db      	lsls	r3, r3, #31
 8007bee:	d506      	bpl.n	8007bfe <_printf_i+0x14e>
 8007bf0:	6863      	ldr	r3, [r4, #4]
 8007bf2:	6922      	ldr	r2, [r4, #16]
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	dc02      	bgt.n	8007bfe <_printf_i+0x14e>
 8007bf8:	2330      	movs	r3, #48	; 0x30
 8007bfa:	3e01      	subs	r6, #1
 8007bfc:	7033      	strb	r3, [r6, #0]
 8007bfe:	9b04      	ldr	r3, [sp, #16]
 8007c00:	1b9b      	subs	r3, r3, r6
 8007c02:	6123      	str	r3, [r4, #16]
 8007c04:	9b07      	ldr	r3, [sp, #28]
 8007c06:	0021      	movs	r1, r4
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	9805      	ldr	r0, [sp, #20]
 8007c0c:	9b06      	ldr	r3, [sp, #24]
 8007c0e:	aa09      	add	r2, sp, #36	; 0x24
 8007c10:	f7ff fede 	bl	80079d0 <_printf_common>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d135      	bne.n	8007c84 <_printf_i+0x1d4>
 8007c18:	2001      	movs	r0, #1
 8007c1a:	4240      	negs	r0, r0
 8007c1c:	b00b      	add	sp, #44	; 0x2c
 8007c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c20:	2220      	movs	r2, #32
 8007c22:	6809      	ldr	r1, [r1, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	6022      	str	r2, [r4, #0]
 8007c28:	0022      	movs	r2, r4
 8007c2a:	2178      	movs	r1, #120	; 0x78
 8007c2c:	3245      	adds	r2, #69	; 0x45
 8007c2e:	7011      	strb	r1, [r2, #0]
 8007c30:	4a27      	ldr	r2, [pc, #156]	; (8007cd0 <_printf_i+0x220>)
 8007c32:	e7a7      	b.n	8007b84 <_printf_i+0xd4>
 8007c34:	0648      	lsls	r0, r1, #25
 8007c36:	d5ac      	bpl.n	8007b92 <_printf_i+0xe2>
 8007c38:	b2ad      	uxth	r5, r5
 8007c3a:	e7aa      	b.n	8007b92 <_printf_i+0xe2>
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	680d      	ldr	r5, [r1, #0]
 8007c40:	1d10      	adds	r0, r2, #4
 8007c42:	6949      	ldr	r1, [r1, #20]
 8007c44:	6018      	str	r0, [r3, #0]
 8007c46:	6813      	ldr	r3, [r2, #0]
 8007c48:	062e      	lsls	r6, r5, #24
 8007c4a:	d501      	bpl.n	8007c50 <_printf_i+0x1a0>
 8007c4c:	6019      	str	r1, [r3, #0]
 8007c4e:	e002      	b.n	8007c56 <_printf_i+0x1a6>
 8007c50:	066d      	lsls	r5, r5, #25
 8007c52:	d5fb      	bpl.n	8007c4c <_printf_i+0x19c>
 8007c54:	8019      	strh	r1, [r3, #0]
 8007c56:	2300      	movs	r3, #0
 8007c58:	9e04      	ldr	r6, [sp, #16]
 8007c5a:	6123      	str	r3, [r4, #16]
 8007c5c:	e7d2      	b.n	8007c04 <_printf_i+0x154>
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	1d11      	adds	r1, r2, #4
 8007c62:	6019      	str	r1, [r3, #0]
 8007c64:	6816      	ldr	r6, [r2, #0]
 8007c66:	2100      	movs	r1, #0
 8007c68:	0030      	movs	r0, r6
 8007c6a:	6862      	ldr	r2, [r4, #4]
 8007c6c:	f001 fa94 	bl	8009198 <memchr>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d001      	beq.n	8007c78 <_printf_i+0x1c8>
 8007c74:	1b80      	subs	r0, r0, r6
 8007c76:	6060      	str	r0, [r4, #4]
 8007c78:	6863      	ldr	r3, [r4, #4]
 8007c7a:	6123      	str	r3, [r4, #16]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9a04      	ldr	r2, [sp, #16]
 8007c80:	7013      	strb	r3, [r2, #0]
 8007c82:	e7bf      	b.n	8007c04 <_printf_i+0x154>
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	0032      	movs	r2, r6
 8007c88:	9906      	ldr	r1, [sp, #24]
 8007c8a:	9805      	ldr	r0, [sp, #20]
 8007c8c:	9d07      	ldr	r5, [sp, #28]
 8007c8e:	47a8      	blx	r5
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d0c1      	beq.n	8007c18 <_printf_i+0x168>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	079b      	lsls	r3, r3, #30
 8007c98:	d415      	bmi.n	8007cc6 <_printf_i+0x216>
 8007c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9c:	68e0      	ldr	r0, [r4, #12]
 8007c9e:	4298      	cmp	r0, r3
 8007ca0:	dabc      	bge.n	8007c1c <_printf_i+0x16c>
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	e7ba      	b.n	8007c1c <_printf_i+0x16c>
 8007ca6:	0022      	movs	r2, r4
 8007ca8:	2301      	movs	r3, #1
 8007caa:	9906      	ldr	r1, [sp, #24]
 8007cac:	9805      	ldr	r0, [sp, #20]
 8007cae:	9e07      	ldr	r6, [sp, #28]
 8007cb0:	3219      	adds	r2, #25
 8007cb2:	47b0      	blx	r6
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d0af      	beq.n	8007c18 <_printf_i+0x168>
 8007cb8:	3501      	adds	r5, #1
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	42ab      	cmp	r3, r5
 8007cc2:	dcf0      	bgt.n	8007ca6 <_printf_i+0x1f6>
 8007cc4:	e7e9      	b.n	8007c9a <_printf_i+0x1ea>
 8007cc6:	2500      	movs	r5, #0
 8007cc8:	e7f7      	b.n	8007cba <_printf_i+0x20a>
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	0800a256 	.word	0x0800a256
 8007cd0:	0800a267 	.word	0x0800a267

08007cd4 <iprintf>:
 8007cd4:	b40f      	push	{r0, r1, r2, r3}
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <iprintf+0x30>)
 8007cd8:	b513      	push	{r0, r1, r4, lr}
 8007cda:	681c      	ldr	r4, [r3, #0]
 8007cdc:	2c00      	cmp	r4, #0
 8007cde:	d005      	beq.n	8007cec <iprintf+0x18>
 8007ce0:	69a3      	ldr	r3, [r4, #24]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <iprintf+0x18>
 8007ce6:	0020      	movs	r0, r4
 8007ce8:	f001 f942 	bl	8008f70 <__sinit>
 8007cec:	ab05      	add	r3, sp, #20
 8007cee:	0020      	movs	r0, r4
 8007cf0:	9a04      	ldr	r2, [sp, #16]
 8007cf2:	68a1      	ldr	r1, [r4, #8]
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	f001 fe47 	bl	8009988 <_vfiprintf_r>
 8007cfa:	bc16      	pop	{r1, r2, r4}
 8007cfc:	bc08      	pop	{r3}
 8007cfe:	b004      	add	sp, #16
 8007d00:	4718      	bx	r3
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	2000000c 	.word	0x2000000c

08007d08 <_puts_r>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	0005      	movs	r5, r0
 8007d0c:	000e      	movs	r6, r1
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d004      	beq.n	8007d1c <_puts_r+0x14>
 8007d12:	6983      	ldr	r3, [r0, #24]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <_puts_r+0x14>
 8007d18:	f001 f92a 	bl	8008f70 <__sinit>
 8007d1c:	69ab      	ldr	r3, [r5, #24]
 8007d1e:	68ac      	ldr	r4, [r5, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d102      	bne.n	8007d2a <_puts_r+0x22>
 8007d24:	0028      	movs	r0, r5
 8007d26:	f001 f923 	bl	8008f70 <__sinit>
 8007d2a:	4b2d      	ldr	r3, [pc, #180]	; (8007de0 <_puts_r+0xd8>)
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	d122      	bne.n	8007d76 <_puts_r+0x6e>
 8007d30:	686c      	ldr	r4, [r5, #4]
 8007d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d34:	07db      	lsls	r3, r3, #31
 8007d36:	d405      	bmi.n	8007d44 <_puts_r+0x3c>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	059b      	lsls	r3, r3, #22
 8007d3c:	d402      	bmi.n	8007d44 <_puts_r+0x3c>
 8007d3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d40:	f001 f9bb 	bl	80090ba <__retarget_lock_acquire_recursive>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	071b      	lsls	r3, r3, #28
 8007d48:	d502      	bpl.n	8007d50 <_puts_r+0x48>
 8007d4a:	6923      	ldr	r3, [r4, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d129      	bne.n	8007da4 <_puts_r+0x9c>
 8007d50:	0021      	movs	r1, r4
 8007d52:	0028      	movs	r0, r5
 8007d54:	f000 f8bc 	bl	8007ed0 <__swsetup_r>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d023      	beq.n	8007da4 <_puts_r+0x9c>
 8007d5c:	2501      	movs	r5, #1
 8007d5e:	426d      	negs	r5, r5
 8007d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d62:	07db      	lsls	r3, r3, #31
 8007d64:	d405      	bmi.n	8007d72 <_puts_r+0x6a>
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	059b      	lsls	r3, r3, #22
 8007d6a:	d402      	bmi.n	8007d72 <_puts_r+0x6a>
 8007d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d6e:	f001 f9a5 	bl	80090bc <__retarget_lock_release_recursive>
 8007d72:	0028      	movs	r0, r5
 8007d74:	bd70      	pop	{r4, r5, r6, pc}
 8007d76:	4b1b      	ldr	r3, [pc, #108]	; (8007de4 <_puts_r+0xdc>)
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	d101      	bne.n	8007d80 <_puts_r+0x78>
 8007d7c:	68ac      	ldr	r4, [r5, #8]
 8007d7e:	e7d8      	b.n	8007d32 <_puts_r+0x2a>
 8007d80:	4b19      	ldr	r3, [pc, #100]	; (8007de8 <_puts_r+0xe0>)
 8007d82:	429c      	cmp	r4, r3
 8007d84:	d1d5      	bne.n	8007d32 <_puts_r+0x2a>
 8007d86:	68ec      	ldr	r4, [r5, #12]
 8007d88:	e7d3      	b.n	8007d32 <_puts_r+0x2a>
 8007d8a:	3601      	adds	r6, #1
 8007d8c:	60a3      	str	r3, [r4, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	da04      	bge.n	8007d9c <_puts_r+0x94>
 8007d92:	69a2      	ldr	r2, [r4, #24]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	dc16      	bgt.n	8007dc6 <_puts_r+0xbe>
 8007d98:	290a      	cmp	r1, #10
 8007d9a:	d014      	beq.n	8007dc6 <_puts_r+0xbe>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	6022      	str	r2, [r4, #0]
 8007da2:	7019      	strb	r1, [r3, #0]
 8007da4:	68a3      	ldr	r3, [r4, #8]
 8007da6:	7831      	ldrb	r1, [r6, #0]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	2900      	cmp	r1, #0
 8007dac:	d1ed      	bne.n	8007d8a <_puts_r+0x82>
 8007dae:	60a3      	str	r3, [r4, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	da0f      	bge.n	8007dd4 <_puts_r+0xcc>
 8007db4:	0028      	movs	r0, r5
 8007db6:	0022      	movs	r2, r4
 8007db8:	310a      	adds	r1, #10
 8007dba:	f000 f833 	bl	8007e24 <__swbuf_r>
 8007dbe:	250a      	movs	r5, #10
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	d1cd      	bne.n	8007d60 <_puts_r+0x58>
 8007dc4:	e7ca      	b.n	8007d5c <_puts_r+0x54>
 8007dc6:	0022      	movs	r2, r4
 8007dc8:	0028      	movs	r0, r5
 8007dca:	f000 f82b 	bl	8007e24 <__swbuf_r>
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	d1e8      	bne.n	8007da4 <_puts_r+0x9c>
 8007dd2:	e7c3      	b.n	8007d5c <_puts_r+0x54>
 8007dd4:	250a      	movs	r5, #10
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	6022      	str	r2, [r4, #0]
 8007ddc:	701d      	strb	r5, [r3, #0]
 8007dde:	e7bf      	b.n	8007d60 <_puts_r+0x58>
 8007de0:	0800a32c 	.word	0x0800a32c
 8007de4:	0800a34c 	.word	0x0800a34c
 8007de8:	0800a30c 	.word	0x0800a30c

08007dec <puts>:
 8007dec:	b510      	push	{r4, lr}
 8007dee:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <puts+0x10>)
 8007df0:	0001      	movs	r1, r0
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	f7ff ff88 	bl	8007d08 <_puts_r>
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	2000000c 	.word	0x2000000c

08007e00 <_sbrk_r>:
 8007e00:	2300      	movs	r3, #0
 8007e02:	b570      	push	{r4, r5, r6, lr}
 8007e04:	4d06      	ldr	r5, [pc, #24]	; (8007e20 <_sbrk_r+0x20>)
 8007e06:	0004      	movs	r4, r0
 8007e08:	0008      	movs	r0, r1
 8007e0a:	602b      	str	r3, [r5, #0]
 8007e0c:	f7fc f900 	bl	8004010 <_sbrk>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	d103      	bne.n	8007e1c <_sbrk_r+0x1c>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d000      	beq.n	8007e1c <_sbrk_r+0x1c>
 8007e1a:	6023      	str	r3, [r4, #0]
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	2000032c 	.word	0x2000032c

08007e24 <__swbuf_r>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	0005      	movs	r5, r0
 8007e28:	000e      	movs	r6, r1
 8007e2a:	0014      	movs	r4, r2
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d004      	beq.n	8007e3a <__swbuf_r+0x16>
 8007e30:	6983      	ldr	r3, [r0, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <__swbuf_r+0x16>
 8007e36:	f001 f89b 	bl	8008f70 <__sinit>
 8007e3a:	4b22      	ldr	r3, [pc, #136]	; (8007ec4 <__swbuf_r+0xa0>)
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	d12e      	bne.n	8007e9e <__swbuf_r+0x7a>
 8007e40:	686c      	ldr	r4, [r5, #4]
 8007e42:	69a3      	ldr	r3, [r4, #24]
 8007e44:	60a3      	str	r3, [r4, #8]
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	071b      	lsls	r3, r3, #28
 8007e4a:	d532      	bpl.n	8007eb2 <__swbuf_r+0x8e>
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d02f      	beq.n	8007eb2 <__swbuf_r+0x8e>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	6922      	ldr	r2, [r4, #16]
 8007e56:	b2f7      	uxtb	r7, r6
 8007e58:	1a98      	subs	r0, r3, r2
 8007e5a:	6963      	ldr	r3, [r4, #20]
 8007e5c:	b2f6      	uxtb	r6, r6
 8007e5e:	4283      	cmp	r3, r0
 8007e60:	dc05      	bgt.n	8007e6e <__swbuf_r+0x4a>
 8007e62:	0021      	movs	r1, r4
 8007e64:	0028      	movs	r0, r5
 8007e66:	f000 ffe1 	bl	8008e2c <_fflush_r>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d127      	bne.n	8007ebe <__swbuf_r+0x9a>
 8007e6e:	68a3      	ldr	r3, [r4, #8]
 8007e70:	3001      	adds	r0, #1
 8007e72:	3b01      	subs	r3, #1
 8007e74:	60a3      	str	r3, [r4, #8]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	6022      	str	r2, [r4, #0]
 8007e7c:	701f      	strb	r7, [r3, #0]
 8007e7e:	6963      	ldr	r3, [r4, #20]
 8007e80:	4283      	cmp	r3, r0
 8007e82:	d004      	beq.n	8007e8e <__swbuf_r+0x6a>
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	07db      	lsls	r3, r3, #31
 8007e88:	d507      	bpl.n	8007e9a <__swbuf_r+0x76>
 8007e8a:	2e0a      	cmp	r6, #10
 8007e8c:	d105      	bne.n	8007e9a <__swbuf_r+0x76>
 8007e8e:	0021      	movs	r1, r4
 8007e90:	0028      	movs	r0, r5
 8007e92:	f000 ffcb 	bl	8008e2c <_fflush_r>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d111      	bne.n	8007ebe <__swbuf_r+0x9a>
 8007e9a:	0030      	movs	r0, r6
 8007e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e9e:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <__swbuf_r+0xa4>)
 8007ea0:	429c      	cmp	r4, r3
 8007ea2:	d101      	bne.n	8007ea8 <__swbuf_r+0x84>
 8007ea4:	68ac      	ldr	r4, [r5, #8]
 8007ea6:	e7cc      	b.n	8007e42 <__swbuf_r+0x1e>
 8007ea8:	4b08      	ldr	r3, [pc, #32]	; (8007ecc <__swbuf_r+0xa8>)
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	d1c9      	bne.n	8007e42 <__swbuf_r+0x1e>
 8007eae:	68ec      	ldr	r4, [r5, #12]
 8007eb0:	e7c7      	b.n	8007e42 <__swbuf_r+0x1e>
 8007eb2:	0021      	movs	r1, r4
 8007eb4:	0028      	movs	r0, r5
 8007eb6:	f000 f80b 	bl	8007ed0 <__swsetup_r>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d0c9      	beq.n	8007e52 <__swbuf_r+0x2e>
 8007ebe:	2601      	movs	r6, #1
 8007ec0:	4276      	negs	r6, r6
 8007ec2:	e7ea      	b.n	8007e9a <__swbuf_r+0x76>
 8007ec4:	0800a32c 	.word	0x0800a32c
 8007ec8:	0800a34c 	.word	0x0800a34c
 8007ecc:	0800a30c 	.word	0x0800a30c

08007ed0 <__swsetup_r>:
 8007ed0:	4b37      	ldr	r3, [pc, #220]	; (8007fb0 <__swsetup_r+0xe0>)
 8007ed2:	b570      	push	{r4, r5, r6, lr}
 8007ed4:	681d      	ldr	r5, [r3, #0]
 8007ed6:	0006      	movs	r6, r0
 8007ed8:	000c      	movs	r4, r1
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	d005      	beq.n	8007eea <__swsetup_r+0x1a>
 8007ede:	69ab      	ldr	r3, [r5, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d102      	bne.n	8007eea <__swsetup_r+0x1a>
 8007ee4:	0028      	movs	r0, r5
 8007ee6:	f001 f843 	bl	8008f70 <__sinit>
 8007eea:	4b32      	ldr	r3, [pc, #200]	; (8007fb4 <__swsetup_r+0xe4>)
 8007eec:	429c      	cmp	r4, r3
 8007eee:	d10f      	bne.n	8007f10 <__swsetup_r+0x40>
 8007ef0:	686c      	ldr	r4, [r5, #4]
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	5ee2      	ldrsh	r2, [r4, r3]
 8007ef6:	b293      	uxth	r3, r2
 8007ef8:	0711      	lsls	r1, r2, #28
 8007efa:	d42d      	bmi.n	8007f58 <__swsetup_r+0x88>
 8007efc:	06d9      	lsls	r1, r3, #27
 8007efe:	d411      	bmi.n	8007f24 <__swsetup_r+0x54>
 8007f00:	2309      	movs	r3, #9
 8007f02:	2001      	movs	r0, #1
 8007f04:	6033      	str	r3, [r6, #0]
 8007f06:	3337      	adds	r3, #55	; 0x37
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	81a3      	strh	r3, [r4, #12]
 8007f0c:	4240      	negs	r0, r0
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	4b29      	ldr	r3, [pc, #164]	; (8007fb8 <__swsetup_r+0xe8>)
 8007f12:	429c      	cmp	r4, r3
 8007f14:	d101      	bne.n	8007f1a <__swsetup_r+0x4a>
 8007f16:	68ac      	ldr	r4, [r5, #8]
 8007f18:	e7eb      	b.n	8007ef2 <__swsetup_r+0x22>
 8007f1a:	4b28      	ldr	r3, [pc, #160]	; (8007fbc <__swsetup_r+0xec>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d1e8      	bne.n	8007ef2 <__swsetup_r+0x22>
 8007f20:	68ec      	ldr	r4, [r5, #12]
 8007f22:	e7e6      	b.n	8007ef2 <__swsetup_r+0x22>
 8007f24:	075b      	lsls	r3, r3, #29
 8007f26:	d513      	bpl.n	8007f50 <__swsetup_r+0x80>
 8007f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	d008      	beq.n	8007f40 <__swsetup_r+0x70>
 8007f2e:	0023      	movs	r3, r4
 8007f30:	3344      	adds	r3, #68	; 0x44
 8007f32:	4299      	cmp	r1, r3
 8007f34:	d002      	beq.n	8007f3c <__swsetup_r+0x6c>
 8007f36:	0030      	movs	r0, r6
 8007f38:	f7ff f9aa 	bl	8007290 <_free_r>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6363      	str	r3, [r4, #52]	; 0x34
 8007f40:	2224      	movs	r2, #36	; 0x24
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	4393      	bics	r3, r2
 8007f46:	81a3      	strh	r3, [r4, #12]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	6063      	str	r3, [r4, #4]
 8007f4c:	6923      	ldr	r3, [r4, #16]
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	2308      	movs	r3, #8
 8007f52:	89a2      	ldrh	r2, [r4, #12]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	81a3      	strh	r3, [r4, #12]
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10b      	bne.n	8007f76 <__swsetup_r+0xa6>
 8007f5e:	21a0      	movs	r1, #160	; 0xa0
 8007f60:	2280      	movs	r2, #128	; 0x80
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	0089      	lsls	r1, r1, #2
 8007f66:	0092      	lsls	r2, r2, #2
 8007f68:	400b      	ands	r3, r1
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d003      	beq.n	8007f76 <__swsetup_r+0xa6>
 8007f6e:	0021      	movs	r1, r4
 8007f70:	0030      	movs	r0, r6
 8007f72:	f001 f8cd 	bl	8009110 <__smakebuf_r>
 8007f76:	220c      	movs	r2, #12
 8007f78:	5ea3      	ldrsh	r3, [r4, r2]
 8007f7a:	2001      	movs	r0, #1
 8007f7c:	001a      	movs	r2, r3
 8007f7e:	b299      	uxth	r1, r3
 8007f80:	4002      	ands	r2, r0
 8007f82:	4203      	tst	r3, r0
 8007f84:	d00f      	beq.n	8007fa6 <__swsetup_r+0xd6>
 8007f86:	2200      	movs	r2, #0
 8007f88:	60a2      	str	r2, [r4, #8]
 8007f8a:	6962      	ldr	r2, [r4, #20]
 8007f8c:	4252      	negs	r2, r2
 8007f8e:	61a2      	str	r2, [r4, #24]
 8007f90:	2000      	movs	r0, #0
 8007f92:	6922      	ldr	r2, [r4, #16]
 8007f94:	4282      	cmp	r2, r0
 8007f96:	d1ba      	bne.n	8007f0e <__swsetup_r+0x3e>
 8007f98:	060a      	lsls	r2, r1, #24
 8007f9a:	d5b8      	bpl.n	8007f0e <__swsetup_r+0x3e>
 8007f9c:	2240      	movs	r2, #64	; 0x40
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	81a3      	strh	r3, [r4, #12]
 8007fa2:	3801      	subs	r0, #1
 8007fa4:	e7b3      	b.n	8007f0e <__swsetup_r+0x3e>
 8007fa6:	0788      	lsls	r0, r1, #30
 8007fa8:	d400      	bmi.n	8007fac <__swsetup_r+0xdc>
 8007faa:	6962      	ldr	r2, [r4, #20]
 8007fac:	60a2      	str	r2, [r4, #8]
 8007fae:	e7ef      	b.n	8007f90 <__swsetup_r+0xc0>
 8007fb0:	2000000c 	.word	0x2000000c
 8007fb4:	0800a32c 	.word	0x0800a32c
 8007fb8:	0800a34c 	.word	0x0800a34c
 8007fbc:	0800a30c 	.word	0x0800a30c

08007fc0 <quorem>:
 8007fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc2:	0006      	movs	r6, r0
 8007fc4:	690d      	ldr	r5, [r1, #16]
 8007fc6:	6933      	ldr	r3, [r6, #16]
 8007fc8:	b087      	sub	sp, #28
 8007fca:	2000      	movs	r0, #0
 8007fcc:	9102      	str	r1, [sp, #8]
 8007fce:	42ab      	cmp	r3, r5
 8007fd0:	db6b      	blt.n	80080aa <quorem+0xea>
 8007fd2:	000b      	movs	r3, r1
 8007fd4:	3d01      	subs	r5, #1
 8007fd6:	00ac      	lsls	r4, r5, #2
 8007fd8:	3314      	adds	r3, #20
 8007fda:	9305      	str	r3, [sp, #20]
 8007fdc:	191b      	adds	r3, r3, r4
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	0033      	movs	r3, r6
 8007fe2:	3314      	adds	r3, #20
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	191c      	adds	r4, r3, r4
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	6827      	ldr	r7, [r4, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	0038      	movs	r0, r7
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	0019      	movs	r1, r3
 8007ff6:	9304      	str	r3, [sp, #16]
 8007ff8:	f7f8 f8a2 	bl	8000140 <__udivsi3>
 8007ffc:	9b04      	ldr	r3, [sp, #16]
 8007ffe:	9000      	str	r0, [sp, #0]
 8008000:	429f      	cmp	r7, r3
 8008002:	d329      	bcc.n	8008058 <quorem+0x98>
 8008004:	2300      	movs	r3, #0
 8008006:	469c      	mov	ip, r3
 8008008:	9801      	ldr	r0, [sp, #4]
 800800a:	9f05      	ldr	r7, [sp, #20]
 800800c:	9304      	str	r3, [sp, #16]
 800800e:	cf08      	ldmia	r7!, {r3}
 8008010:	9a00      	ldr	r2, [sp, #0]
 8008012:	b299      	uxth	r1, r3
 8008014:	4351      	muls	r1, r2
 8008016:	0c1b      	lsrs	r3, r3, #16
 8008018:	4353      	muls	r3, r2
 800801a:	4461      	add	r1, ip
 800801c:	0c0a      	lsrs	r2, r1, #16
 800801e:	189b      	adds	r3, r3, r2
 8008020:	0c1a      	lsrs	r2, r3, #16
 8008022:	9305      	str	r3, [sp, #20]
 8008024:	6803      	ldr	r3, [r0, #0]
 8008026:	4694      	mov	ip, r2
 8008028:	b29a      	uxth	r2, r3
 800802a:	9b04      	ldr	r3, [sp, #16]
 800802c:	b289      	uxth	r1, r1
 800802e:	18d2      	adds	r2, r2, r3
 8008030:	6803      	ldr	r3, [r0, #0]
 8008032:	1a52      	subs	r2, r2, r1
 8008034:	0c19      	lsrs	r1, r3, #16
 8008036:	466b      	mov	r3, sp
 8008038:	8a9b      	ldrh	r3, [r3, #20]
 800803a:	1acb      	subs	r3, r1, r3
 800803c:	1411      	asrs	r1, r2, #16
 800803e:	185b      	adds	r3, r3, r1
 8008040:	1419      	asrs	r1, r3, #16
 8008042:	b292      	uxth	r2, r2
 8008044:	041b      	lsls	r3, r3, #16
 8008046:	431a      	orrs	r2, r3
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	9104      	str	r1, [sp, #16]
 800804c:	c004      	stmia	r0!, {r2}
 800804e:	42bb      	cmp	r3, r7
 8008050:	d2dd      	bcs.n	800800e <quorem+0x4e>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d02e      	beq.n	80080b6 <quorem+0xf6>
 8008058:	0030      	movs	r0, r6
 800805a:	9902      	ldr	r1, [sp, #8]
 800805c:	f001 fb46 	bl	80096ec <__mcmp>
 8008060:	2800      	cmp	r0, #0
 8008062:	db21      	blt.n	80080a8 <quorem+0xe8>
 8008064:	0030      	movs	r0, r6
 8008066:	2400      	movs	r4, #0
 8008068:	9b00      	ldr	r3, [sp, #0]
 800806a:	9902      	ldr	r1, [sp, #8]
 800806c:	3301      	adds	r3, #1
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	3014      	adds	r0, #20
 8008072:	3114      	adds	r1, #20
 8008074:	6802      	ldr	r2, [r0, #0]
 8008076:	c908      	ldmia	r1!, {r3}
 8008078:	b292      	uxth	r2, r2
 800807a:	1914      	adds	r4, r2, r4
 800807c:	b29a      	uxth	r2, r3
 800807e:	1aa2      	subs	r2, r4, r2
 8008080:	6804      	ldr	r4, [r0, #0]
 8008082:	0c1b      	lsrs	r3, r3, #16
 8008084:	0c24      	lsrs	r4, r4, #16
 8008086:	1ae3      	subs	r3, r4, r3
 8008088:	1414      	asrs	r4, r2, #16
 800808a:	191b      	adds	r3, r3, r4
 800808c:	141c      	asrs	r4, r3, #16
 800808e:	b292      	uxth	r2, r2
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	4313      	orrs	r3, r2
 8008094:	c008      	stmia	r0!, {r3}
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	428b      	cmp	r3, r1
 800809a:	d2eb      	bcs.n	8008074 <quorem+0xb4>
 800809c:	9a01      	ldr	r2, [sp, #4]
 800809e:	00ab      	lsls	r3, r5, #2
 80080a0:	18d3      	adds	r3, r2, r3
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	d010      	beq.n	80080ca <quorem+0x10a>
 80080a8:	9800      	ldr	r0, [sp, #0]
 80080aa:	b007      	add	sp, #28
 80080ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d104      	bne.n	80080be <quorem+0xfe>
 80080b4:	3d01      	subs	r5, #1
 80080b6:	9b01      	ldr	r3, [sp, #4]
 80080b8:	3c04      	subs	r4, #4
 80080ba:	42a3      	cmp	r3, r4
 80080bc:	d3f7      	bcc.n	80080ae <quorem+0xee>
 80080be:	6135      	str	r5, [r6, #16]
 80080c0:	e7ca      	b.n	8008058 <quorem+0x98>
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	d104      	bne.n	80080d2 <quorem+0x112>
 80080c8:	3d01      	subs	r5, #1
 80080ca:	9a01      	ldr	r2, [sp, #4]
 80080cc:	3b04      	subs	r3, #4
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d3f7      	bcc.n	80080c2 <quorem+0x102>
 80080d2:	6135      	str	r5, [r6, #16]
 80080d4:	e7e8      	b.n	80080a8 <quorem+0xe8>
	...

080080d8 <_dtoa_r>:
 80080d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080da:	b09d      	sub	sp, #116	; 0x74
 80080dc:	9202      	str	r2, [sp, #8]
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	9b02      	ldr	r3, [sp, #8]
 80080e2:	9c03      	ldr	r4, [sp, #12]
 80080e4:	930a      	str	r3, [sp, #40]	; 0x28
 80080e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80080e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80080ea:	0007      	movs	r7, r0
 80080ec:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	d10e      	bne.n	8008110 <_dtoa_r+0x38>
 80080f2:	2010      	movs	r0, #16
 80080f4:	f7ff f8ba 	bl	800726c <malloc>
 80080f8:	1e02      	subs	r2, r0, #0
 80080fa:	6278      	str	r0, [r7, #36]	; 0x24
 80080fc:	d104      	bne.n	8008108 <_dtoa_r+0x30>
 80080fe:	21ea      	movs	r1, #234	; 0xea
 8008100:	4bc0      	ldr	r3, [pc, #768]	; (8008404 <_dtoa_r+0x32c>)
 8008102:	48c1      	ldr	r0, [pc, #772]	; (8008408 <_dtoa_r+0x330>)
 8008104:	f001 fdda 	bl	8009cbc <__assert_func>
 8008108:	6044      	str	r4, [r0, #4]
 800810a:	6084      	str	r4, [r0, #8]
 800810c:	6004      	str	r4, [r0, #0]
 800810e:	60c4      	str	r4, [r0, #12]
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	6819      	ldr	r1, [r3, #0]
 8008114:	2900      	cmp	r1, #0
 8008116:	d00a      	beq.n	800812e <_dtoa_r+0x56>
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	2301      	movs	r3, #1
 800811c:	4093      	lsls	r3, r2
 800811e:	604a      	str	r2, [r1, #4]
 8008120:	608b      	str	r3, [r1, #8]
 8008122:	0038      	movs	r0, r7
 8008124:	f001 f8a0 	bl	8009268 <_Bfree>
 8008128:	2200      	movs	r2, #0
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	da21      	bge.n	8008178 <_dtoa_r+0xa0>
 8008134:	2301      	movs	r3, #1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008140:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008142:	4bb2      	ldr	r3, [pc, #712]	; (800840c <_dtoa_r+0x334>)
 8008144:	002a      	movs	r2, r5
 8008146:	9318      	str	r3, [sp, #96]	; 0x60
 8008148:	401a      	ands	r2, r3
 800814a:	429a      	cmp	r2, r3
 800814c:	d117      	bne.n	800817e <_dtoa_r+0xa6>
 800814e:	4bb0      	ldr	r3, [pc, #704]	; (8008410 <_dtoa_r+0x338>)
 8008150:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008152:	0328      	lsls	r0, r5, #12
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	9b02      	ldr	r3, [sp, #8]
 8008158:	0b00      	lsrs	r0, r0, #12
 800815a:	4318      	orrs	r0, r3
 800815c:	d101      	bne.n	8008162 <_dtoa_r+0x8a>
 800815e:	f000 fdc3 	bl	8008ce8 <_dtoa_r+0xc10>
 8008162:	48ac      	ldr	r0, [pc, #688]	; (8008414 <_dtoa_r+0x33c>)
 8008164:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008166:	9005      	str	r0, [sp, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <_dtoa_r+0x9a>
 800816c:	4baa      	ldr	r3, [pc, #680]	; (8008418 <_dtoa_r+0x340>)
 800816e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	9805      	ldr	r0, [sp, #20]
 8008174:	b01d      	add	sp, #116	; 0x74
 8008176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008178:	2300      	movs	r3, #0
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	e7e0      	b.n	8008140 <_dtoa_r+0x68>
 800817e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008180:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008182:	9312      	str	r3, [sp, #72]	; 0x48
 8008184:	9413      	str	r4, [sp, #76]	; 0x4c
 8008186:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008188:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800818a:	2200      	movs	r2, #0
 800818c:	2300      	movs	r3, #0
 800818e:	f7f8 f95d 	bl	800044c <__aeabi_dcmpeq>
 8008192:	1e04      	subs	r4, r0, #0
 8008194:	d00b      	beq.n	80081ae <_dtoa_r+0xd6>
 8008196:	2301      	movs	r3, #1
 8008198:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	4b9f      	ldr	r3, [pc, #636]	; (800841c <_dtoa_r+0x344>)
 800819e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80081a0:	9305      	str	r3, [sp, #20]
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	d0e5      	beq.n	8008172 <_dtoa_r+0x9a>
 80081a6:	4a9e      	ldr	r2, [pc, #632]	; (8008420 <_dtoa_r+0x348>)
 80081a8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80081aa:	600a      	str	r2, [r1, #0]
 80081ac:	e7e1      	b.n	8008172 <_dtoa_r+0x9a>
 80081ae:	ab1a      	add	r3, sp, #104	; 0x68
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	ab1b      	add	r3, sp, #108	; 0x6c
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	0038      	movs	r0, r7
 80081b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081bc:	f001 fb4a 	bl	8009854 <__d2b>
 80081c0:	006e      	lsls	r6, r5, #1
 80081c2:	9004      	str	r0, [sp, #16]
 80081c4:	0d76      	lsrs	r6, r6, #21
 80081c6:	d100      	bne.n	80081ca <_dtoa_r+0xf2>
 80081c8:	e07c      	b.n	80082c4 <_dtoa_r+0x1ec>
 80081ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80081cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80081ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081d0:	4a94      	ldr	r2, [pc, #592]	; (8008424 <_dtoa_r+0x34c>)
 80081d2:	031b      	lsls	r3, r3, #12
 80081d4:	0b1b      	lsrs	r3, r3, #12
 80081d6:	431a      	orrs	r2, r3
 80081d8:	0011      	movs	r1, r2
 80081da:	4b93      	ldr	r3, [pc, #588]	; (8008428 <_dtoa_r+0x350>)
 80081dc:	9416      	str	r4, [sp, #88]	; 0x58
 80081de:	18f6      	adds	r6, r6, r3
 80081e0:	2200      	movs	r2, #0
 80081e2:	4b92      	ldr	r3, [pc, #584]	; (800842c <_dtoa_r+0x354>)
 80081e4:	f7fa f878 	bl	80022d8 <__aeabi_dsub>
 80081e8:	4a91      	ldr	r2, [pc, #580]	; (8008430 <_dtoa_r+0x358>)
 80081ea:	4b92      	ldr	r3, [pc, #584]	; (8008434 <_dtoa_r+0x35c>)
 80081ec:	f7f9 fe08 	bl	8001e00 <__aeabi_dmul>
 80081f0:	4a91      	ldr	r2, [pc, #580]	; (8008438 <_dtoa_r+0x360>)
 80081f2:	4b92      	ldr	r3, [pc, #584]	; (800843c <_dtoa_r+0x364>)
 80081f4:	f7f8 fe94 	bl	8000f20 <__aeabi_dadd>
 80081f8:	0004      	movs	r4, r0
 80081fa:	0030      	movs	r0, r6
 80081fc:	000d      	movs	r5, r1
 80081fe:	f7fa fc51 	bl	8002aa4 <__aeabi_i2d>
 8008202:	4a8f      	ldr	r2, [pc, #572]	; (8008440 <_dtoa_r+0x368>)
 8008204:	4b8f      	ldr	r3, [pc, #572]	; (8008444 <_dtoa_r+0x36c>)
 8008206:	f7f9 fdfb 	bl	8001e00 <__aeabi_dmul>
 800820a:	0002      	movs	r2, r0
 800820c:	000b      	movs	r3, r1
 800820e:	0020      	movs	r0, r4
 8008210:	0029      	movs	r1, r5
 8008212:	f7f8 fe85 	bl	8000f20 <__aeabi_dadd>
 8008216:	0004      	movs	r4, r0
 8008218:	000d      	movs	r5, r1
 800821a:	f7fa fc0d 	bl	8002a38 <__aeabi_d2iz>
 800821e:	2200      	movs	r2, #0
 8008220:	9002      	str	r0, [sp, #8]
 8008222:	2300      	movs	r3, #0
 8008224:	0020      	movs	r0, r4
 8008226:	0029      	movs	r1, r5
 8008228:	f7f8 f916 	bl	8000458 <__aeabi_dcmplt>
 800822c:	2800      	cmp	r0, #0
 800822e:	d00b      	beq.n	8008248 <_dtoa_r+0x170>
 8008230:	9802      	ldr	r0, [sp, #8]
 8008232:	f7fa fc37 	bl	8002aa4 <__aeabi_i2d>
 8008236:	002b      	movs	r3, r5
 8008238:	0022      	movs	r2, r4
 800823a:	f7f8 f907 	bl	800044c <__aeabi_dcmpeq>
 800823e:	4243      	negs	r3, r0
 8008240:	4158      	adcs	r0, r3
 8008242:	9b02      	ldr	r3, [sp, #8]
 8008244:	1a1b      	subs	r3, r3, r0
 8008246:	9302      	str	r3, [sp, #8]
 8008248:	2301      	movs	r3, #1
 800824a:	9315      	str	r3, [sp, #84]	; 0x54
 800824c:	9b02      	ldr	r3, [sp, #8]
 800824e:	2b16      	cmp	r3, #22
 8008250:	d80f      	bhi.n	8008272 <_dtoa_r+0x19a>
 8008252:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008254:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008256:	00da      	lsls	r2, r3, #3
 8008258:	4b7b      	ldr	r3, [pc, #492]	; (8008448 <_dtoa_r+0x370>)
 800825a:	189b      	adds	r3, r3, r2
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f7f8 f8fa 	bl	8000458 <__aeabi_dcmplt>
 8008264:	2800      	cmp	r0, #0
 8008266:	d049      	beq.n	80082fc <_dtoa_r+0x224>
 8008268:	9b02      	ldr	r3, [sp, #8]
 800826a:	3b01      	subs	r3, #1
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	2300      	movs	r3, #0
 8008270:	9315      	str	r3, [sp, #84]	; 0x54
 8008272:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008274:	1b9e      	subs	r6, r3, r6
 8008276:	2300      	movs	r3, #0
 8008278:	9308      	str	r3, [sp, #32]
 800827a:	0033      	movs	r3, r6
 800827c:	3b01      	subs	r3, #1
 800827e:	930d      	str	r3, [sp, #52]	; 0x34
 8008280:	d504      	bpl.n	800828c <_dtoa_r+0x1b4>
 8008282:	2301      	movs	r3, #1
 8008284:	1b9b      	subs	r3, r3, r6
 8008286:	9308      	str	r3, [sp, #32]
 8008288:	2300      	movs	r3, #0
 800828a:	930d      	str	r3, [sp, #52]	; 0x34
 800828c:	9b02      	ldr	r3, [sp, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	db36      	blt.n	8008300 <_dtoa_r+0x228>
 8008292:	9a02      	ldr	r2, [sp, #8]
 8008294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008296:	4694      	mov	ip, r2
 8008298:	4463      	add	r3, ip
 800829a:	930d      	str	r3, [sp, #52]	; 0x34
 800829c:	2300      	movs	r3, #0
 800829e:	9214      	str	r2, [sp, #80]	; 0x50
 80082a0:	930e      	str	r3, [sp, #56]	; 0x38
 80082a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082a4:	2401      	movs	r4, #1
 80082a6:	2b09      	cmp	r3, #9
 80082a8:	d862      	bhi.n	8008370 <_dtoa_r+0x298>
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	dd02      	ble.n	80082b4 <_dtoa_r+0x1dc>
 80082ae:	2400      	movs	r4, #0
 80082b0:	3b04      	subs	r3, #4
 80082b2:	9322      	str	r3, [sp, #136]	; 0x88
 80082b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082b6:	1e98      	subs	r0, r3, #2
 80082b8:	2803      	cmp	r0, #3
 80082ba:	d862      	bhi.n	8008382 <_dtoa_r+0x2aa>
 80082bc:	f7f7 ff2c 	bl	8000118 <__gnu_thumb1_case_uqi>
 80082c0:	56343629 	.word	0x56343629
 80082c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80082c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80082c8:	189e      	adds	r6, r3, r2
 80082ca:	4b60      	ldr	r3, [pc, #384]	; (800844c <_dtoa_r+0x374>)
 80082cc:	18f2      	adds	r2, r6, r3
 80082ce:	2a20      	cmp	r2, #32
 80082d0:	dd0f      	ble.n	80082f2 <_dtoa_r+0x21a>
 80082d2:	2340      	movs	r3, #64	; 0x40
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	409d      	lsls	r5, r3
 80082d8:	4b5d      	ldr	r3, [pc, #372]	; (8008450 <_dtoa_r+0x378>)
 80082da:	9802      	ldr	r0, [sp, #8]
 80082dc:	18f3      	adds	r3, r6, r3
 80082de:	40d8      	lsrs	r0, r3
 80082e0:	4328      	orrs	r0, r5
 80082e2:	f7fa fc0f 	bl	8002b04 <__aeabi_ui2d>
 80082e6:	2301      	movs	r3, #1
 80082e8:	4c5a      	ldr	r4, [pc, #360]	; (8008454 <_dtoa_r+0x37c>)
 80082ea:	3e01      	subs	r6, #1
 80082ec:	1909      	adds	r1, r1, r4
 80082ee:	9316      	str	r3, [sp, #88]	; 0x58
 80082f0:	e776      	b.n	80081e0 <_dtoa_r+0x108>
 80082f2:	2320      	movs	r3, #32
 80082f4:	9802      	ldr	r0, [sp, #8]
 80082f6:	1a9b      	subs	r3, r3, r2
 80082f8:	4098      	lsls	r0, r3
 80082fa:	e7f2      	b.n	80082e2 <_dtoa_r+0x20a>
 80082fc:	9015      	str	r0, [sp, #84]	; 0x54
 80082fe:	e7b8      	b.n	8008272 <_dtoa_r+0x19a>
 8008300:	9b08      	ldr	r3, [sp, #32]
 8008302:	9a02      	ldr	r2, [sp, #8]
 8008304:	1a9b      	subs	r3, r3, r2
 8008306:	9308      	str	r3, [sp, #32]
 8008308:	4253      	negs	r3, r2
 800830a:	930e      	str	r3, [sp, #56]	; 0x38
 800830c:	2300      	movs	r3, #0
 800830e:	9314      	str	r3, [sp, #80]	; 0x50
 8008310:	e7c7      	b.n	80082a2 <_dtoa_r+0x1ca>
 8008312:	2300      	movs	r3, #0
 8008314:	930f      	str	r3, [sp, #60]	; 0x3c
 8008316:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008318:	2b00      	cmp	r3, #0
 800831a:	dc36      	bgt.n	800838a <_dtoa_r+0x2b2>
 800831c:	2301      	movs	r3, #1
 800831e:	001a      	movs	r2, r3
 8008320:	930c      	str	r3, [sp, #48]	; 0x30
 8008322:	9306      	str	r3, [sp, #24]
 8008324:	9223      	str	r2, [sp, #140]	; 0x8c
 8008326:	e00d      	b.n	8008344 <_dtoa_r+0x26c>
 8008328:	2301      	movs	r3, #1
 800832a:	e7f3      	b.n	8008314 <_dtoa_r+0x23c>
 800832c:	2300      	movs	r3, #0
 800832e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008330:	930f      	str	r3, [sp, #60]	; 0x3c
 8008332:	4694      	mov	ip, r2
 8008334:	9b02      	ldr	r3, [sp, #8]
 8008336:	4463      	add	r3, ip
 8008338:	930c      	str	r3, [sp, #48]	; 0x30
 800833a:	3301      	adds	r3, #1
 800833c:	9306      	str	r3, [sp, #24]
 800833e:	2b00      	cmp	r3, #0
 8008340:	dc00      	bgt.n	8008344 <_dtoa_r+0x26c>
 8008342:	2301      	movs	r3, #1
 8008344:	2200      	movs	r2, #0
 8008346:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008348:	6042      	str	r2, [r0, #4]
 800834a:	3204      	adds	r2, #4
 800834c:	0015      	movs	r5, r2
 800834e:	3514      	adds	r5, #20
 8008350:	6841      	ldr	r1, [r0, #4]
 8008352:	429d      	cmp	r5, r3
 8008354:	d91d      	bls.n	8008392 <_dtoa_r+0x2ba>
 8008356:	0038      	movs	r0, r7
 8008358:	f000 ff42 	bl	80091e0 <_Balloc>
 800835c:	9005      	str	r0, [sp, #20]
 800835e:	2800      	cmp	r0, #0
 8008360:	d11b      	bne.n	800839a <_dtoa_r+0x2c2>
 8008362:	21d5      	movs	r1, #213	; 0xd5
 8008364:	0002      	movs	r2, r0
 8008366:	4b3c      	ldr	r3, [pc, #240]	; (8008458 <_dtoa_r+0x380>)
 8008368:	0049      	lsls	r1, r1, #1
 800836a:	e6ca      	b.n	8008102 <_dtoa_r+0x2a>
 800836c:	2301      	movs	r3, #1
 800836e:	e7de      	b.n	800832e <_dtoa_r+0x256>
 8008370:	2300      	movs	r3, #0
 8008372:	940f      	str	r4, [sp, #60]	; 0x3c
 8008374:	9322      	str	r3, [sp, #136]	; 0x88
 8008376:	3b01      	subs	r3, #1
 8008378:	930c      	str	r3, [sp, #48]	; 0x30
 800837a:	9306      	str	r3, [sp, #24]
 800837c:	2200      	movs	r2, #0
 800837e:	3313      	adds	r3, #19
 8008380:	e7d0      	b.n	8008324 <_dtoa_r+0x24c>
 8008382:	2301      	movs	r3, #1
 8008384:	930f      	str	r3, [sp, #60]	; 0x3c
 8008386:	3b02      	subs	r3, #2
 8008388:	e7f6      	b.n	8008378 <_dtoa_r+0x2a0>
 800838a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800838c:	930c      	str	r3, [sp, #48]	; 0x30
 800838e:	9306      	str	r3, [sp, #24]
 8008390:	e7d8      	b.n	8008344 <_dtoa_r+0x26c>
 8008392:	3101      	adds	r1, #1
 8008394:	6041      	str	r1, [r0, #4]
 8008396:	0052      	lsls	r2, r2, #1
 8008398:	e7d8      	b.n	800834c <_dtoa_r+0x274>
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	9a05      	ldr	r2, [sp, #20]
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	9b06      	ldr	r3, [sp, #24]
 80083a2:	2b0e      	cmp	r3, #14
 80083a4:	d900      	bls.n	80083a8 <_dtoa_r+0x2d0>
 80083a6:	e0eb      	b.n	8008580 <_dtoa_r+0x4a8>
 80083a8:	2c00      	cmp	r4, #0
 80083aa:	d100      	bne.n	80083ae <_dtoa_r+0x2d6>
 80083ac:	e0e8      	b.n	8008580 <_dtoa_r+0x4a8>
 80083ae:	9b02      	ldr	r3, [sp, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dd68      	ble.n	8008486 <_dtoa_r+0x3ae>
 80083b4:	001a      	movs	r2, r3
 80083b6:	210f      	movs	r1, #15
 80083b8:	4b23      	ldr	r3, [pc, #140]	; (8008448 <_dtoa_r+0x370>)
 80083ba:	400a      	ands	r2, r1
 80083bc:	00d2      	lsls	r2, r2, #3
 80083be:	189b      	adds	r3, r3, r2
 80083c0:	681d      	ldr	r5, [r3, #0]
 80083c2:	685e      	ldr	r6, [r3, #4]
 80083c4:	9b02      	ldr	r3, [sp, #8]
 80083c6:	111c      	asrs	r4, r3, #4
 80083c8:	2302      	movs	r3, #2
 80083ca:	9310      	str	r3, [sp, #64]	; 0x40
 80083cc:	9b02      	ldr	r3, [sp, #8]
 80083ce:	05db      	lsls	r3, r3, #23
 80083d0:	d50b      	bpl.n	80083ea <_dtoa_r+0x312>
 80083d2:	4b22      	ldr	r3, [pc, #136]	; (800845c <_dtoa_r+0x384>)
 80083d4:	400c      	ands	r4, r1
 80083d6:	6a1a      	ldr	r2, [r3, #32]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	9812      	ldr	r0, [sp, #72]	; 0x48
 80083dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80083de:	f7f9 f909 	bl	80015f4 <__aeabi_ddiv>
 80083e2:	2303      	movs	r3, #3
 80083e4:	900a      	str	r0, [sp, #40]	; 0x28
 80083e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80083e8:	9310      	str	r3, [sp, #64]	; 0x40
 80083ea:	4b1c      	ldr	r3, [pc, #112]	; (800845c <_dtoa_r+0x384>)
 80083ec:	9307      	str	r3, [sp, #28]
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	d136      	bne.n	8008460 <_dtoa_r+0x388>
 80083f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80083f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083f6:	002a      	movs	r2, r5
 80083f8:	0033      	movs	r3, r6
 80083fa:	f7f9 f8fb 	bl	80015f4 <__aeabi_ddiv>
 80083fe:	900a      	str	r0, [sp, #40]	; 0x28
 8008400:	910b      	str	r1, [sp, #44]	; 0x2c
 8008402:	e05c      	b.n	80084be <_dtoa_r+0x3e6>
 8008404:	0800a285 	.word	0x0800a285
 8008408:	0800a29c 	.word	0x0800a29c
 800840c:	7ff00000 	.word	0x7ff00000
 8008410:	0000270f 	.word	0x0000270f
 8008414:	0800a281 	.word	0x0800a281
 8008418:	0800a284 	.word	0x0800a284
 800841c:	0800a254 	.word	0x0800a254
 8008420:	0800a255 	.word	0x0800a255
 8008424:	3ff00000 	.word	0x3ff00000
 8008428:	fffffc01 	.word	0xfffffc01
 800842c:	3ff80000 	.word	0x3ff80000
 8008430:	636f4361 	.word	0x636f4361
 8008434:	3fd287a7 	.word	0x3fd287a7
 8008438:	8b60c8b3 	.word	0x8b60c8b3
 800843c:	3fc68a28 	.word	0x3fc68a28
 8008440:	509f79fb 	.word	0x509f79fb
 8008444:	3fd34413 	.word	0x3fd34413
 8008448:	0800a3f8 	.word	0x0800a3f8
 800844c:	00000432 	.word	0x00000432
 8008450:	00000412 	.word	0x00000412
 8008454:	fe100000 	.word	0xfe100000
 8008458:	0800a2fb 	.word	0x0800a2fb
 800845c:	0800a3d0 	.word	0x0800a3d0
 8008460:	2301      	movs	r3, #1
 8008462:	421c      	tst	r4, r3
 8008464:	d00b      	beq.n	800847e <_dtoa_r+0x3a6>
 8008466:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008468:	0028      	movs	r0, r5
 800846a:	3301      	adds	r3, #1
 800846c:	9310      	str	r3, [sp, #64]	; 0x40
 800846e:	9b07      	ldr	r3, [sp, #28]
 8008470:	0031      	movs	r1, r6
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f7f9 fcc3 	bl	8001e00 <__aeabi_dmul>
 800847a:	0005      	movs	r5, r0
 800847c:	000e      	movs	r6, r1
 800847e:	9b07      	ldr	r3, [sp, #28]
 8008480:	1064      	asrs	r4, r4, #1
 8008482:	3308      	adds	r3, #8
 8008484:	e7b2      	b.n	80083ec <_dtoa_r+0x314>
 8008486:	2302      	movs	r3, #2
 8008488:	9310      	str	r3, [sp, #64]	; 0x40
 800848a:	9b02      	ldr	r3, [sp, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d016      	beq.n	80084be <_dtoa_r+0x3e6>
 8008490:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008492:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008494:	425c      	negs	r4, r3
 8008496:	230f      	movs	r3, #15
 8008498:	4ab5      	ldr	r2, [pc, #724]	; (8008770 <_dtoa_r+0x698>)
 800849a:	4023      	ands	r3, r4
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	18d3      	adds	r3, r2, r3
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f7f9 fcac 	bl	8001e00 <__aeabi_dmul>
 80084a8:	2601      	movs	r6, #1
 80084aa:	2300      	movs	r3, #0
 80084ac:	900a      	str	r0, [sp, #40]	; 0x28
 80084ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80084b0:	4db0      	ldr	r5, [pc, #704]	; (8008774 <_dtoa_r+0x69c>)
 80084b2:	1124      	asrs	r4, r4, #4
 80084b4:	2c00      	cmp	r4, #0
 80084b6:	d000      	beq.n	80084ba <_dtoa_r+0x3e2>
 80084b8:	e094      	b.n	80085e4 <_dtoa_r+0x50c>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d19f      	bne.n	80083fe <_dtoa_r+0x326>
 80084be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d100      	bne.n	80084c6 <_dtoa_r+0x3ee>
 80084c4:	e09b      	b.n	80085fe <_dtoa_r+0x526>
 80084c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80084ca:	2200      	movs	r2, #0
 80084cc:	0020      	movs	r0, r4
 80084ce:	0029      	movs	r1, r5
 80084d0:	4ba9      	ldr	r3, [pc, #676]	; (8008778 <_dtoa_r+0x6a0>)
 80084d2:	f7f7 ffc1 	bl	8000458 <__aeabi_dcmplt>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d100      	bne.n	80084dc <_dtoa_r+0x404>
 80084da:	e090      	b.n	80085fe <_dtoa_r+0x526>
 80084dc:	9b06      	ldr	r3, [sp, #24]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d100      	bne.n	80084e4 <_dtoa_r+0x40c>
 80084e2:	e08c      	b.n	80085fe <_dtoa_r+0x526>
 80084e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	dd46      	ble.n	8008578 <_dtoa_r+0x4a0>
 80084ea:	9b02      	ldr	r3, [sp, #8]
 80084ec:	2200      	movs	r2, #0
 80084ee:	0020      	movs	r0, r4
 80084f0:	0029      	movs	r1, r5
 80084f2:	1e5e      	subs	r6, r3, #1
 80084f4:	4ba1      	ldr	r3, [pc, #644]	; (800877c <_dtoa_r+0x6a4>)
 80084f6:	f7f9 fc83 	bl	8001e00 <__aeabi_dmul>
 80084fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084fc:	900a      	str	r0, [sp, #40]	; 0x28
 80084fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8008500:	3301      	adds	r3, #1
 8008502:	9310      	str	r3, [sp, #64]	; 0x40
 8008504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008506:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008508:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800850a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800850c:	9307      	str	r3, [sp, #28]
 800850e:	f7fa fac9 	bl	8002aa4 <__aeabi_i2d>
 8008512:	0022      	movs	r2, r4
 8008514:	002b      	movs	r3, r5
 8008516:	f7f9 fc73 	bl	8001e00 <__aeabi_dmul>
 800851a:	2200      	movs	r2, #0
 800851c:	4b98      	ldr	r3, [pc, #608]	; (8008780 <_dtoa_r+0x6a8>)
 800851e:	f7f8 fcff 	bl	8000f20 <__aeabi_dadd>
 8008522:	9010      	str	r0, [sp, #64]	; 0x40
 8008524:	9111      	str	r1, [sp, #68]	; 0x44
 8008526:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008528:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800852a:	920a      	str	r2, [sp, #40]	; 0x28
 800852c:	930b      	str	r3, [sp, #44]	; 0x2c
 800852e:	4a95      	ldr	r2, [pc, #596]	; (8008784 <_dtoa_r+0x6ac>)
 8008530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008532:	4694      	mov	ip, r2
 8008534:	4463      	add	r3, ip
 8008536:	9317      	str	r3, [sp, #92]	; 0x5c
 8008538:	930b      	str	r3, [sp, #44]	; 0x2c
 800853a:	9b07      	ldr	r3, [sp, #28]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d161      	bne.n	8008604 <_dtoa_r+0x52c>
 8008540:	2200      	movs	r2, #0
 8008542:	0020      	movs	r0, r4
 8008544:	0029      	movs	r1, r5
 8008546:	4b90      	ldr	r3, [pc, #576]	; (8008788 <_dtoa_r+0x6b0>)
 8008548:	f7f9 fec6 	bl	80022d8 <__aeabi_dsub>
 800854c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800854e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008550:	0004      	movs	r4, r0
 8008552:	000d      	movs	r5, r1
 8008554:	f7f7 ff94 	bl	8000480 <__aeabi_dcmpgt>
 8008558:	2800      	cmp	r0, #0
 800855a:	d000      	beq.n	800855e <_dtoa_r+0x486>
 800855c:	e2b5      	b.n	8008aca <_dtoa_r+0x9f2>
 800855e:	488b      	ldr	r0, [pc, #556]	; (800878c <_dtoa_r+0x6b4>)
 8008560:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008562:	4684      	mov	ip, r0
 8008564:	4461      	add	r1, ip
 8008566:	000b      	movs	r3, r1
 8008568:	0020      	movs	r0, r4
 800856a:	0029      	movs	r1, r5
 800856c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800856e:	f7f7 ff73 	bl	8000458 <__aeabi_dcmplt>
 8008572:	2800      	cmp	r0, #0
 8008574:	d000      	beq.n	8008578 <_dtoa_r+0x4a0>
 8008576:	e2a5      	b.n	8008ac4 <_dtoa_r+0x9ec>
 8008578:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800857a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800857c:	930a      	str	r3, [sp, #40]	; 0x28
 800857e:	940b      	str	r4, [sp, #44]	; 0x2c
 8008580:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008582:	2b00      	cmp	r3, #0
 8008584:	da00      	bge.n	8008588 <_dtoa_r+0x4b0>
 8008586:	e171      	b.n	800886c <_dtoa_r+0x794>
 8008588:	9a02      	ldr	r2, [sp, #8]
 800858a:	2a0e      	cmp	r2, #14
 800858c:	dd00      	ble.n	8008590 <_dtoa_r+0x4b8>
 800858e:	e16d      	b.n	800886c <_dtoa_r+0x794>
 8008590:	4b77      	ldr	r3, [pc, #476]	; (8008770 <_dtoa_r+0x698>)
 8008592:	00d2      	lsls	r2, r2, #3
 8008594:	189b      	adds	r3, r3, r2
 8008596:	685c      	ldr	r4, [r3, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	9308      	str	r3, [sp, #32]
 800859c:	9409      	str	r4, [sp, #36]	; 0x24
 800859e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	db00      	blt.n	80085a6 <_dtoa_r+0x4ce>
 80085a4:	e0f6      	b.n	8008794 <_dtoa_r+0x6bc>
 80085a6:	9b06      	ldr	r3, [sp, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dd00      	ble.n	80085ae <_dtoa_r+0x4d6>
 80085ac:	e0f2      	b.n	8008794 <_dtoa_r+0x6bc>
 80085ae:	d000      	beq.n	80085b2 <_dtoa_r+0x4da>
 80085b0:	e288      	b.n	8008ac4 <_dtoa_r+0x9ec>
 80085b2:	9808      	ldr	r0, [sp, #32]
 80085b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085b6:	2200      	movs	r2, #0
 80085b8:	4b73      	ldr	r3, [pc, #460]	; (8008788 <_dtoa_r+0x6b0>)
 80085ba:	f7f9 fc21 	bl	8001e00 <__aeabi_dmul>
 80085be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085c2:	f7f7 ff67 	bl	8000494 <__aeabi_dcmpge>
 80085c6:	9e06      	ldr	r6, [sp, #24]
 80085c8:	0035      	movs	r5, r6
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d000      	beq.n	80085d0 <_dtoa_r+0x4f8>
 80085ce:	e25f      	b.n	8008a90 <_dtoa_r+0x9b8>
 80085d0:	9b05      	ldr	r3, [sp, #20]
 80085d2:	9a05      	ldr	r2, [sp, #20]
 80085d4:	3301      	adds	r3, #1
 80085d6:	9307      	str	r3, [sp, #28]
 80085d8:	2331      	movs	r3, #49	; 0x31
 80085da:	7013      	strb	r3, [r2, #0]
 80085dc:	9b02      	ldr	r3, [sp, #8]
 80085de:	3301      	adds	r3, #1
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	e25a      	b.n	8008a9a <_dtoa_r+0x9c2>
 80085e4:	4234      	tst	r4, r6
 80085e6:	d007      	beq.n	80085f8 <_dtoa_r+0x520>
 80085e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085ea:	3301      	adds	r3, #1
 80085ec:	9310      	str	r3, [sp, #64]	; 0x40
 80085ee:	682a      	ldr	r2, [r5, #0]
 80085f0:	686b      	ldr	r3, [r5, #4]
 80085f2:	f7f9 fc05 	bl	8001e00 <__aeabi_dmul>
 80085f6:	0033      	movs	r3, r6
 80085f8:	1064      	asrs	r4, r4, #1
 80085fa:	3508      	adds	r5, #8
 80085fc:	e75a      	b.n	80084b4 <_dtoa_r+0x3dc>
 80085fe:	9e02      	ldr	r6, [sp, #8]
 8008600:	9b06      	ldr	r3, [sp, #24]
 8008602:	e780      	b.n	8008506 <_dtoa_r+0x42e>
 8008604:	9b07      	ldr	r3, [sp, #28]
 8008606:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008608:	1e5a      	subs	r2, r3, #1
 800860a:	4b59      	ldr	r3, [pc, #356]	; (8008770 <_dtoa_r+0x698>)
 800860c:	00d2      	lsls	r2, r2, #3
 800860e:	189b      	adds	r3, r3, r2
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2900      	cmp	r1, #0
 8008616:	d051      	beq.n	80086bc <_dtoa_r+0x5e4>
 8008618:	2000      	movs	r0, #0
 800861a:	495d      	ldr	r1, [pc, #372]	; (8008790 <_dtoa_r+0x6b8>)
 800861c:	f7f8 ffea 	bl	80015f4 <__aeabi_ddiv>
 8008620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008624:	f7f9 fe58 	bl	80022d8 <__aeabi_dsub>
 8008628:	9a05      	ldr	r2, [sp, #20]
 800862a:	9b05      	ldr	r3, [sp, #20]
 800862c:	4694      	mov	ip, r2
 800862e:	9310      	str	r3, [sp, #64]	; 0x40
 8008630:	9b07      	ldr	r3, [sp, #28]
 8008632:	900a      	str	r0, [sp, #40]	; 0x28
 8008634:	910b      	str	r1, [sp, #44]	; 0x2c
 8008636:	4463      	add	r3, ip
 8008638:	9319      	str	r3, [sp, #100]	; 0x64
 800863a:	0029      	movs	r1, r5
 800863c:	0020      	movs	r0, r4
 800863e:	f7fa f9fb 	bl	8002a38 <__aeabi_d2iz>
 8008642:	9017      	str	r0, [sp, #92]	; 0x5c
 8008644:	f7fa fa2e 	bl	8002aa4 <__aeabi_i2d>
 8008648:	0002      	movs	r2, r0
 800864a:	000b      	movs	r3, r1
 800864c:	0020      	movs	r0, r4
 800864e:	0029      	movs	r1, r5
 8008650:	f7f9 fe42 	bl	80022d8 <__aeabi_dsub>
 8008654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008656:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008658:	3301      	adds	r3, #1
 800865a:	9307      	str	r3, [sp, #28]
 800865c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800865e:	0004      	movs	r4, r0
 8008660:	3330      	adds	r3, #48	; 0x30
 8008662:	7013      	strb	r3, [r2, #0]
 8008664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008668:	000d      	movs	r5, r1
 800866a:	f7f7 fef5 	bl	8000458 <__aeabi_dcmplt>
 800866e:	2800      	cmp	r0, #0
 8008670:	d175      	bne.n	800875e <_dtoa_r+0x686>
 8008672:	0022      	movs	r2, r4
 8008674:	002b      	movs	r3, r5
 8008676:	2000      	movs	r0, #0
 8008678:	493f      	ldr	r1, [pc, #252]	; (8008778 <_dtoa_r+0x6a0>)
 800867a:	f7f9 fe2d 	bl	80022d8 <__aeabi_dsub>
 800867e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008682:	f7f7 fee9 	bl	8000458 <__aeabi_dcmplt>
 8008686:	2800      	cmp	r0, #0
 8008688:	d000      	beq.n	800868c <_dtoa_r+0x5b4>
 800868a:	e0d1      	b.n	8008830 <_dtoa_r+0x758>
 800868c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800868e:	9a07      	ldr	r2, [sp, #28]
 8008690:	4293      	cmp	r3, r2
 8008692:	d100      	bne.n	8008696 <_dtoa_r+0x5be>
 8008694:	e770      	b.n	8008578 <_dtoa_r+0x4a0>
 8008696:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800869a:	2200      	movs	r2, #0
 800869c:	4b37      	ldr	r3, [pc, #220]	; (800877c <_dtoa_r+0x6a4>)
 800869e:	f7f9 fbaf 	bl	8001e00 <__aeabi_dmul>
 80086a2:	4b36      	ldr	r3, [pc, #216]	; (800877c <_dtoa_r+0x6a4>)
 80086a4:	900a      	str	r0, [sp, #40]	; 0x28
 80086a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80086a8:	2200      	movs	r2, #0
 80086aa:	0020      	movs	r0, r4
 80086ac:	0029      	movs	r1, r5
 80086ae:	f7f9 fba7 	bl	8001e00 <__aeabi_dmul>
 80086b2:	9b07      	ldr	r3, [sp, #28]
 80086b4:	0004      	movs	r4, r0
 80086b6:	000d      	movs	r5, r1
 80086b8:	9310      	str	r3, [sp, #64]	; 0x40
 80086ba:	e7be      	b.n	800863a <_dtoa_r+0x562>
 80086bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80086be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086c0:	f7f9 fb9e 	bl	8001e00 <__aeabi_dmul>
 80086c4:	9a05      	ldr	r2, [sp, #20]
 80086c6:	9b05      	ldr	r3, [sp, #20]
 80086c8:	4694      	mov	ip, r2
 80086ca:	930a      	str	r3, [sp, #40]	; 0x28
 80086cc:	9b07      	ldr	r3, [sp, #28]
 80086ce:	9010      	str	r0, [sp, #64]	; 0x40
 80086d0:	9111      	str	r1, [sp, #68]	; 0x44
 80086d2:	4463      	add	r3, ip
 80086d4:	9319      	str	r3, [sp, #100]	; 0x64
 80086d6:	0029      	movs	r1, r5
 80086d8:	0020      	movs	r0, r4
 80086da:	f7fa f9ad 	bl	8002a38 <__aeabi_d2iz>
 80086de:	9017      	str	r0, [sp, #92]	; 0x5c
 80086e0:	f7fa f9e0 	bl	8002aa4 <__aeabi_i2d>
 80086e4:	0002      	movs	r2, r0
 80086e6:	000b      	movs	r3, r1
 80086e8:	0020      	movs	r0, r4
 80086ea:	0029      	movs	r1, r5
 80086ec:	f7f9 fdf4 	bl	80022d8 <__aeabi_dsub>
 80086f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086f4:	3330      	adds	r3, #48	; 0x30
 80086f6:	7013      	strb	r3, [r2, #0]
 80086f8:	0013      	movs	r3, r2
 80086fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80086fc:	3301      	adds	r3, #1
 80086fe:	0004      	movs	r4, r0
 8008700:	000d      	movs	r5, r1
 8008702:	930a      	str	r3, [sp, #40]	; 0x28
 8008704:	4293      	cmp	r3, r2
 8008706:	d12c      	bne.n	8008762 <_dtoa_r+0x68a>
 8008708:	9810      	ldr	r0, [sp, #64]	; 0x40
 800870a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800870c:	9a05      	ldr	r2, [sp, #20]
 800870e:	9b07      	ldr	r3, [sp, #28]
 8008710:	4694      	mov	ip, r2
 8008712:	4463      	add	r3, ip
 8008714:	2200      	movs	r2, #0
 8008716:	9307      	str	r3, [sp, #28]
 8008718:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <_dtoa_r+0x6b8>)
 800871a:	f7f8 fc01 	bl	8000f20 <__aeabi_dadd>
 800871e:	0002      	movs	r2, r0
 8008720:	000b      	movs	r3, r1
 8008722:	0020      	movs	r0, r4
 8008724:	0029      	movs	r1, r5
 8008726:	f7f7 feab 	bl	8000480 <__aeabi_dcmpgt>
 800872a:	2800      	cmp	r0, #0
 800872c:	d000      	beq.n	8008730 <_dtoa_r+0x658>
 800872e:	e07f      	b.n	8008830 <_dtoa_r+0x758>
 8008730:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008732:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008734:	2000      	movs	r0, #0
 8008736:	4916      	ldr	r1, [pc, #88]	; (8008790 <_dtoa_r+0x6b8>)
 8008738:	f7f9 fdce 	bl	80022d8 <__aeabi_dsub>
 800873c:	0002      	movs	r2, r0
 800873e:	000b      	movs	r3, r1
 8008740:	0020      	movs	r0, r4
 8008742:	0029      	movs	r1, r5
 8008744:	f7f7 fe88 	bl	8000458 <__aeabi_dcmplt>
 8008748:	2800      	cmp	r0, #0
 800874a:	d100      	bne.n	800874e <_dtoa_r+0x676>
 800874c:	e714      	b.n	8008578 <_dtoa_r+0x4a0>
 800874e:	9b07      	ldr	r3, [sp, #28]
 8008750:	001a      	movs	r2, r3
 8008752:	3a01      	subs	r2, #1
 8008754:	9207      	str	r2, [sp, #28]
 8008756:	7812      	ldrb	r2, [r2, #0]
 8008758:	2a30      	cmp	r2, #48	; 0x30
 800875a:	d0f8      	beq.n	800874e <_dtoa_r+0x676>
 800875c:	9307      	str	r3, [sp, #28]
 800875e:	9602      	str	r6, [sp, #8]
 8008760:	e054      	b.n	800880c <_dtoa_r+0x734>
 8008762:	2200      	movs	r2, #0
 8008764:	4b05      	ldr	r3, [pc, #20]	; (800877c <_dtoa_r+0x6a4>)
 8008766:	f7f9 fb4b 	bl	8001e00 <__aeabi_dmul>
 800876a:	0004      	movs	r4, r0
 800876c:	000d      	movs	r5, r1
 800876e:	e7b2      	b.n	80086d6 <_dtoa_r+0x5fe>
 8008770:	0800a3f8 	.word	0x0800a3f8
 8008774:	0800a3d0 	.word	0x0800a3d0
 8008778:	3ff00000 	.word	0x3ff00000
 800877c:	40240000 	.word	0x40240000
 8008780:	401c0000 	.word	0x401c0000
 8008784:	fcc00000 	.word	0xfcc00000
 8008788:	40140000 	.word	0x40140000
 800878c:	7cc00000 	.word	0x7cc00000
 8008790:	3fe00000 	.word	0x3fe00000
 8008794:	9b06      	ldr	r3, [sp, #24]
 8008796:	9e05      	ldr	r6, [sp, #20]
 8008798:	3b01      	subs	r3, #1
 800879a:	199b      	adds	r3, r3, r6
 800879c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800879e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087a0:	930a      	str	r3, [sp, #40]	; 0x28
 80087a2:	9a08      	ldr	r2, [sp, #32]
 80087a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a6:	0020      	movs	r0, r4
 80087a8:	0029      	movs	r1, r5
 80087aa:	f7f8 ff23 	bl	80015f4 <__aeabi_ddiv>
 80087ae:	f7fa f943 	bl	8002a38 <__aeabi_d2iz>
 80087b2:	9006      	str	r0, [sp, #24]
 80087b4:	f7fa f976 	bl	8002aa4 <__aeabi_i2d>
 80087b8:	9a08      	ldr	r2, [sp, #32]
 80087ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087bc:	f7f9 fb20 	bl	8001e00 <__aeabi_dmul>
 80087c0:	0002      	movs	r2, r0
 80087c2:	000b      	movs	r3, r1
 80087c4:	0020      	movs	r0, r4
 80087c6:	0029      	movs	r1, r5
 80087c8:	f7f9 fd86 	bl	80022d8 <__aeabi_dsub>
 80087cc:	0033      	movs	r3, r6
 80087ce:	9a06      	ldr	r2, [sp, #24]
 80087d0:	3601      	adds	r6, #1
 80087d2:	3230      	adds	r2, #48	; 0x30
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087d8:	9607      	str	r6, [sp, #28]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d139      	bne.n	8008852 <_dtoa_r+0x77a>
 80087de:	0002      	movs	r2, r0
 80087e0:	000b      	movs	r3, r1
 80087e2:	f7f8 fb9d 	bl	8000f20 <__aeabi_dadd>
 80087e6:	9a08      	ldr	r2, [sp, #32]
 80087e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ea:	0004      	movs	r4, r0
 80087ec:	000d      	movs	r5, r1
 80087ee:	f7f7 fe47 	bl	8000480 <__aeabi_dcmpgt>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d11b      	bne.n	800882e <_dtoa_r+0x756>
 80087f6:	9a08      	ldr	r2, [sp, #32]
 80087f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fa:	0020      	movs	r0, r4
 80087fc:	0029      	movs	r1, r5
 80087fe:	f7f7 fe25 	bl	800044c <__aeabi_dcmpeq>
 8008802:	2800      	cmp	r0, #0
 8008804:	d002      	beq.n	800880c <_dtoa_r+0x734>
 8008806:	9b06      	ldr	r3, [sp, #24]
 8008808:	07db      	lsls	r3, r3, #31
 800880a:	d410      	bmi.n	800882e <_dtoa_r+0x756>
 800880c:	0038      	movs	r0, r7
 800880e:	9904      	ldr	r1, [sp, #16]
 8008810:	f000 fd2a 	bl	8009268 <_Bfree>
 8008814:	2300      	movs	r3, #0
 8008816:	9a07      	ldr	r2, [sp, #28]
 8008818:	9802      	ldr	r0, [sp, #8]
 800881a:	7013      	strb	r3, [r2, #0]
 800881c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800881e:	3001      	adds	r0, #1
 8008820:	6018      	str	r0, [r3, #0]
 8008822:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008824:	2b00      	cmp	r3, #0
 8008826:	d100      	bne.n	800882a <_dtoa_r+0x752>
 8008828:	e4a3      	b.n	8008172 <_dtoa_r+0x9a>
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e4a1      	b.n	8008172 <_dtoa_r+0x9a>
 800882e:	9e02      	ldr	r6, [sp, #8]
 8008830:	9b07      	ldr	r3, [sp, #28]
 8008832:	9307      	str	r3, [sp, #28]
 8008834:	3b01      	subs	r3, #1
 8008836:	781a      	ldrb	r2, [r3, #0]
 8008838:	2a39      	cmp	r2, #57	; 0x39
 800883a:	d106      	bne.n	800884a <_dtoa_r+0x772>
 800883c:	9a05      	ldr	r2, [sp, #20]
 800883e:	429a      	cmp	r2, r3
 8008840:	d1f7      	bne.n	8008832 <_dtoa_r+0x75a>
 8008842:	2230      	movs	r2, #48	; 0x30
 8008844:	9905      	ldr	r1, [sp, #20]
 8008846:	3601      	adds	r6, #1
 8008848:	700a      	strb	r2, [r1, #0]
 800884a:	781a      	ldrb	r2, [r3, #0]
 800884c:	3201      	adds	r2, #1
 800884e:	701a      	strb	r2, [r3, #0]
 8008850:	e785      	b.n	800875e <_dtoa_r+0x686>
 8008852:	2200      	movs	r2, #0
 8008854:	4bad      	ldr	r3, [pc, #692]	; (8008b0c <_dtoa_r+0xa34>)
 8008856:	f7f9 fad3 	bl	8001e00 <__aeabi_dmul>
 800885a:	2200      	movs	r2, #0
 800885c:	2300      	movs	r3, #0
 800885e:	0004      	movs	r4, r0
 8008860:	000d      	movs	r5, r1
 8008862:	f7f7 fdf3 	bl	800044c <__aeabi_dcmpeq>
 8008866:	2800      	cmp	r0, #0
 8008868:	d09b      	beq.n	80087a2 <_dtoa_r+0x6ca>
 800886a:	e7cf      	b.n	800880c <_dtoa_r+0x734>
 800886c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800886e:	2a00      	cmp	r2, #0
 8008870:	d100      	bne.n	8008874 <_dtoa_r+0x79c>
 8008872:	e082      	b.n	800897a <_dtoa_r+0x8a2>
 8008874:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008876:	2a01      	cmp	r2, #1
 8008878:	dc66      	bgt.n	8008948 <_dtoa_r+0x870>
 800887a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800887c:	2a00      	cmp	r2, #0
 800887e:	d05f      	beq.n	8008940 <_dtoa_r+0x868>
 8008880:	4aa3      	ldr	r2, [pc, #652]	; (8008b10 <_dtoa_r+0xa38>)
 8008882:	189b      	adds	r3, r3, r2
 8008884:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008886:	9c08      	ldr	r4, [sp, #32]
 8008888:	9a08      	ldr	r2, [sp, #32]
 800888a:	2101      	movs	r1, #1
 800888c:	18d2      	adds	r2, r2, r3
 800888e:	9208      	str	r2, [sp, #32]
 8008890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008892:	0038      	movs	r0, r7
 8008894:	18d3      	adds	r3, r2, r3
 8008896:	930d      	str	r3, [sp, #52]	; 0x34
 8008898:	f000 fd96 	bl	80093c8 <__i2b>
 800889c:	0005      	movs	r5, r0
 800889e:	2c00      	cmp	r4, #0
 80088a0:	dd0e      	ble.n	80088c0 <_dtoa_r+0x7e8>
 80088a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	dd0b      	ble.n	80088c0 <_dtoa_r+0x7e8>
 80088a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088aa:	0023      	movs	r3, r4
 80088ac:	4294      	cmp	r4, r2
 80088ae:	dd00      	ble.n	80088b2 <_dtoa_r+0x7da>
 80088b0:	0013      	movs	r3, r2
 80088b2:	9a08      	ldr	r2, [sp, #32]
 80088b4:	1ae4      	subs	r4, r4, r3
 80088b6:	1ad2      	subs	r2, r2, r3
 80088b8:	9208      	str	r2, [sp, #32]
 80088ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	930d      	str	r3, [sp, #52]	; 0x34
 80088c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01f      	beq.n	8008906 <_dtoa_r+0x82e>
 80088c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d05a      	beq.n	8008982 <_dtoa_r+0x8aa>
 80088cc:	2e00      	cmp	r6, #0
 80088ce:	dd11      	ble.n	80088f4 <_dtoa_r+0x81c>
 80088d0:	0029      	movs	r1, r5
 80088d2:	0032      	movs	r2, r6
 80088d4:	0038      	movs	r0, r7
 80088d6:	f000 fe3d 	bl	8009554 <__pow5mult>
 80088da:	9a04      	ldr	r2, [sp, #16]
 80088dc:	0001      	movs	r1, r0
 80088de:	0005      	movs	r5, r0
 80088e0:	0038      	movs	r0, r7
 80088e2:	f000 fd87 	bl	80093f4 <__multiply>
 80088e6:	9904      	ldr	r1, [sp, #16]
 80088e8:	9007      	str	r0, [sp, #28]
 80088ea:	0038      	movs	r0, r7
 80088ec:	f000 fcbc 	bl	8009268 <_Bfree>
 80088f0:	9b07      	ldr	r3, [sp, #28]
 80088f2:	9304      	str	r3, [sp, #16]
 80088f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f6:	1b9a      	subs	r2, r3, r6
 80088f8:	42b3      	cmp	r3, r6
 80088fa:	d004      	beq.n	8008906 <_dtoa_r+0x82e>
 80088fc:	0038      	movs	r0, r7
 80088fe:	9904      	ldr	r1, [sp, #16]
 8008900:	f000 fe28 	bl	8009554 <__pow5mult>
 8008904:	9004      	str	r0, [sp, #16]
 8008906:	2101      	movs	r1, #1
 8008908:	0038      	movs	r0, r7
 800890a:	f000 fd5d 	bl	80093c8 <__i2b>
 800890e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008910:	0006      	movs	r6, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd37      	ble.n	8008986 <_dtoa_r+0x8ae>
 8008916:	001a      	movs	r2, r3
 8008918:	0001      	movs	r1, r0
 800891a:	0038      	movs	r0, r7
 800891c:	f000 fe1a 	bl	8009554 <__pow5mult>
 8008920:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008922:	0006      	movs	r6, r0
 8008924:	2b01      	cmp	r3, #1
 8008926:	dd33      	ble.n	8008990 <_dtoa_r+0x8b8>
 8008928:	2300      	movs	r3, #0
 800892a:	9307      	str	r3, [sp, #28]
 800892c:	6933      	ldr	r3, [r6, #16]
 800892e:	3303      	adds	r3, #3
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	18f3      	adds	r3, r6, r3
 8008934:	6858      	ldr	r0, [r3, #4]
 8008936:	f000 fcff 	bl	8009338 <__hi0bits>
 800893a:	2320      	movs	r3, #32
 800893c:	1a18      	subs	r0, r3, r0
 800893e:	e03f      	b.n	80089c0 <_dtoa_r+0x8e8>
 8008940:	2336      	movs	r3, #54	; 0x36
 8008942:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008944:	1a9b      	subs	r3, r3, r2
 8008946:	e79d      	b.n	8008884 <_dtoa_r+0x7ac>
 8008948:	9b06      	ldr	r3, [sp, #24]
 800894a:	1e5e      	subs	r6, r3, #1
 800894c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800894e:	42b3      	cmp	r3, r6
 8008950:	db08      	blt.n	8008964 <_dtoa_r+0x88c>
 8008952:	1b9e      	subs	r6, r3, r6
 8008954:	9b06      	ldr	r3, [sp, #24]
 8008956:	2b00      	cmp	r3, #0
 8008958:	da0c      	bge.n	8008974 <_dtoa_r+0x89c>
 800895a:	9b08      	ldr	r3, [sp, #32]
 800895c:	9a06      	ldr	r2, [sp, #24]
 800895e:	1a9c      	subs	r4, r3, r2
 8008960:	2300      	movs	r3, #0
 8008962:	e791      	b.n	8008888 <_dtoa_r+0x7b0>
 8008964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008966:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008968:	1af3      	subs	r3, r6, r3
 800896a:	18d3      	adds	r3, r2, r3
 800896c:	960e      	str	r6, [sp, #56]	; 0x38
 800896e:	9314      	str	r3, [sp, #80]	; 0x50
 8008970:	2600      	movs	r6, #0
 8008972:	e7ef      	b.n	8008954 <_dtoa_r+0x87c>
 8008974:	9c08      	ldr	r4, [sp, #32]
 8008976:	9b06      	ldr	r3, [sp, #24]
 8008978:	e786      	b.n	8008888 <_dtoa_r+0x7b0>
 800897a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800897c:	9c08      	ldr	r4, [sp, #32]
 800897e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008980:	e78d      	b.n	800889e <_dtoa_r+0x7c6>
 8008982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008984:	e7ba      	b.n	80088fc <_dtoa_r+0x824>
 8008986:	2300      	movs	r3, #0
 8008988:	9307      	str	r3, [sp, #28]
 800898a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800898c:	2b01      	cmp	r3, #1
 800898e:	dc13      	bgt.n	80089b8 <_dtoa_r+0x8e0>
 8008990:	2300      	movs	r3, #0
 8008992:	9307      	str	r3, [sp, #28]
 8008994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10e      	bne.n	80089b8 <_dtoa_r+0x8e0>
 800899a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800899c:	031b      	lsls	r3, r3, #12
 800899e:	d10b      	bne.n	80089b8 <_dtoa_r+0x8e0>
 80089a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80089a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089a4:	4213      	tst	r3, r2
 80089a6:	d007      	beq.n	80089b8 <_dtoa_r+0x8e0>
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	3301      	adds	r3, #1
 80089ac:	9308      	str	r3, [sp, #32]
 80089ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089b0:	3301      	adds	r3, #1
 80089b2:	930d      	str	r3, [sp, #52]	; 0x34
 80089b4:	2301      	movs	r3, #1
 80089b6:	9307      	str	r3, [sp, #28]
 80089b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089ba:	2001      	movs	r0, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1b5      	bne.n	800892c <_dtoa_r+0x854>
 80089c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089c2:	221f      	movs	r2, #31
 80089c4:	1818      	adds	r0, r3, r0
 80089c6:	0003      	movs	r3, r0
 80089c8:	4013      	ands	r3, r2
 80089ca:	4210      	tst	r0, r2
 80089cc:	d046      	beq.n	8008a5c <_dtoa_r+0x984>
 80089ce:	3201      	adds	r2, #1
 80089d0:	1ad2      	subs	r2, r2, r3
 80089d2:	2a04      	cmp	r2, #4
 80089d4:	dd3f      	ble.n	8008a56 <_dtoa_r+0x97e>
 80089d6:	221c      	movs	r2, #28
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	9a08      	ldr	r2, [sp, #32]
 80089dc:	18e4      	adds	r4, r4, r3
 80089de:	18d2      	adds	r2, r2, r3
 80089e0:	9208      	str	r2, [sp, #32]
 80089e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089e4:	18d3      	adds	r3, r2, r3
 80089e6:	930d      	str	r3, [sp, #52]	; 0x34
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dd05      	ble.n	80089fa <_dtoa_r+0x922>
 80089ee:	001a      	movs	r2, r3
 80089f0:	0038      	movs	r0, r7
 80089f2:	9904      	ldr	r1, [sp, #16]
 80089f4:	f000 fe0a 	bl	800960c <__lshift>
 80089f8:	9004      	str	r0, [sp, #16]
 80089fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dd05      	ble.n	8008a0c <_dtoa_r+0x934>
 8008a00:	0031      	movs	r1, r6
 8008a02:	001a      	movs	r2, r3
 8008a04:	0038      	movs	r0, r7
 8008a06:	f000 fe01 	bl	800960c <__lshift>
 8008a0a:	0006      	movs	r6, r0
 8008a0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d026      	beq.n	8008a60 <_dtoa_r+0x988>
 8008a12:	0031      	movs	r1, r6
 8008a14:	9804      	ldr	r0, [sp, #16]
 8008a16:	f000 fe69 	bl	80096ec <__mcmp>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	da20      	bge.n	8008a60 <_dtoa_r+0x988>
 8008a1e:	9b02      	ldr	r3, [sp, #8]
 8008a20:	220a      	movs	r2, #10
 8008a22:	3b01      	subs	r3, #1
 8008a24:	9302      	str	r3, [sp, #8]
 8008a26:	0038      	movs	r0, r7
 8008a28:	2300      	movs	r3, #0
 8008a2a:	9904      	ldr	r1, [sp, #16]
 8008a2c:	f000 fc40 	bl	80092b0 <__multadd>
 8008a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a32:	9004      	str	r0, [sp, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d100      	bne.n	8008a3a <_dtoa_r+0x962>
 8008a38:	e160      	b.n	8008cfc <_dtoa_r+0xc24>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	0029      	movs	r1, r5
 8008a3e:	220a      	movs	r2, #10
 8008a40:	0038      	movs	r0, r7
 8008a42:	f000 fc35 	bl	80092b0 <__multadd>
 8008a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a48:	0005      	movs	r5, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	dc47      	bgt.n	8008ade <_dtoa_r+0xa06>
 8008a4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	dc0d      	bgt.n	8008a70 <_dtoa_r+0x998>
 8008a54:	e043      	b.n	8008ade <_dtoa_r+0xa06>
 8008a56:	2a04      	cmp	r2, #4
 8008a58:	d0c6      	beq.n	80089e8 <_dtoa_r+0x910>
 8008a5a:	0013      	movs	r3, r2
 8008a5c:	331c      	adds	r3, #28
 8008a5e:	e7bc      	b.n	80089da <_dtoa_r+0x902>
 8008a60:	9b06      	ldr	r3, [sp, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	dc35      	bgt.n	8008ad2 <_dtoa_r+0x9fa>
 8008a66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	dd32      	ble.n	8008ad2 <_dtoa_r+0x9fa>
 8008a6c:	9b06      	ldr	r3, [sp, #24]
 8008a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10c      	bne.n	8008a90 <_dtoa_r+0x9b8>
 8008a76:	0031      	movs	r1, r6
 8008a78:	2205      	movs	r2, #5
 8008a7a:	0038      	movs	r0, r7
 8008a7c:	f000 fc18 	bl	80092b0 <__multadd>
 8008a80:	0006      	movs	r6, r0
 8008a82:	0001      	movs	r1, r0
 8008a84:	9804      	ldr	r0, [sp, #16]
 8008a86:	f000 fe31 	bl	80096ec <__mcmp>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	dd00      	ble.n	8008a90 <_dtoa_r+0x9b8>
 8008a8e:	e59f      	b.n	80085d0 <_dtoa_r+0x4f8>
 8008a90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a92:	43db      	mvns	r3, r3
 8008a94:	9302      	str	r3, [sp, #8]
 8008a96:	9b05      	ldr	r3, [sp, #20]
 8008a98:	9307      	str	r3, [sp, #28]
 8008a9a:	2400      	movs	r4, #0
 8008a9c:	0031      	movs	r1, r6
 8008a9e:	0038      	movs	r0, r7
 8008aa0:	f000 fbe2 	bl	8009268 <_Bfree>
 8008aa4:	2d00      	cmp	r5, #0
 8008aa6:	d100      	bne.n	8008aaa <_dtoa_r+0x9d2>
 8008aa8:	e6b0      	b.n	800880c <_dtoa_r+0x734>
 8008aaa:	2c00      	cmp	r4, #0
 8008aac:	d005      	beq.n	8008aba <_dtoa_r+0x9e2>
 8008aae:	42ac      	cmp	r4, r5
 8008ab0:	d003      	beq.n	8008aba <_dtoa_r+0x9e2>
 8008ab2:	0021      	movs	r1, r4
 8008ab4:	0038      	movs	r0, r7
 8008ab6:	f000 fbd7 	bl	8009268 <_Bfree>
 8008aba:	0029      	movs	r1, r5
 8008abc:	0038      	movs	r0, r7
 8008abe:	f000 fbd3 	bl	8009268 <_Bfree>
 8008ac2:	e6a3      	b.n	800880c <_dtoa_r+0x734>
 8008ac4:	2600      	movs	r6, #0
 8008ac6:	0035      	movs	r5, r6
 8008ac8:	e7e2      	b.n	8008a90 <_dtoa_r+0x9b8>
 8008aca:	9602      	str	r6, [sp, #8]
 8008acc:	9e07      	ldr	r6, [sp, #28]
 8008ace:	0035      	movs	r5, r6
 8008ad0:	e57e      	b.n	80085d0 <_dtoa_r+0x4f8>
 8008ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d100      	bne.n	8008ada <_dtoa_r+0xa02>
 8008ad8:	e0c8      	b.n	8008c6c <_dtoa_r+0xb94>
 8008ada:	9b06      	ldr	r3, [sp, #24]
 8008adc:	930c      	str	r3, [sp, #48]	; 0x30
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	dd05      	ble.n	8008aee <_dtoa_r+0xa16>
 8008ae2:	0029      	movs	r1, r5
 8008ae4:	0022      	movs	r2, r4
 8008ae6:	0038      	movs	r0, r7
 8008ae8:	f000 fd90 	bl	800960c <__lshift>
 8008aec:	0005      	movs	r5, r0
 8008aee:	9b07      	ldr	r3, [sp, #28]
 8008af0:	0028      	movs	r0, r5
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d01f      	beq.n	8008b36 <_dtoa_r+0xa5e>
 8008af6:	0038      	movs	r0, r7
 8008af8:	6869      	ldr	r1, [r5, #4]
 8008afa:	f000 fb71 	bl	80091e0 <_Balloc>
 8008afe:	1e04      	subs	r4, r0, #0
 8008b00:	d10c      	bne.n	8008b1c <_dtoa_r+0xa44>
 8008b02:	0002      	movs	r2, r0
 8008b04:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <_dtoa_r+0xa3c>)
 8008b06:	4904      	ldr	r1, [pc, #16]	; (8008b18 <_dtoa_r+0xa40>)
 8008b08:	f7ff fafb 	bl	8008102 <_dtoa_r+0x2a>
 8008b0c:	40240000 	.word	0x40240000
 8008b10:	00000433 	.word	0x00000433
 8008b14:	0800a2fb 	.word	0x0800a2fb
 8008b18:	000002ea 	.word	0x000002ea
 8008b1c:	0029      	movs	r1, r5
 8008b1e:	692b      	ldr	r3, [r5, #16]
 8008b20:	310c      	adds	r1, #12
 8008b22:	1c9a      	adds	r2, r3, #2
 8008b24:	0092      	lsls	r2, r2, #2
 8008b26:	300c      	adds	r0, #12
 8008b28:	f000 fb41 	bl	80091ae <memcpy>
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	0021      	movs	r1, r4
 8008b30:	0038      	movs	r0, r7
 8008b32:	f000 fd6b 	bl	800960c <__lshift>
 8008b36:	002c      	movs	r4, r5
 8008b38:	0005      	movs	r5, r0
 8008b3a:	9b05      	ldr	r3, [sp, #20]
 8008b3c:	9308      	str	r3, [sp, #32]
 8008b3e:	0031      	movs	r1, r6
 8008b40:	9804      	ldr	r0, [sp, #16]
 8008b42:	f7ff fa3d 	bl	8007fc0 <quorem>
 8008b46:	0003      	movs	r3, r0
 8008b48:	0021      	movs	r1, r4
 8008b4a:	3330      	adds	r3, #48	; 0x30
 8008b4c:	900e      	str	r0, [sp, #56]	; 0x38
 8008b4e:	9804      	ldr	r0, [sp, #16]
 8008b50:	9306      	str	r3, [sp, #24]
 8008b52:	f000 fdcb 	bl	80096ec <__mcmp>
 8008b56:	002a      	movs	r2, r5
 8008b58:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b5a:	0031      	movs	r1, r6
 8008b5c:	0038      	movs	r0, r7
 8008b5e:	f000 fde1 	bl	8009724 <__mdiff>
 8008b62:	68c3      	ldr	r3, [r0, #12]
 8008b64:	9007      	str	r0, [sp, #28]
 8008b66:	9310      	str	r3, [sp, #64]	; 0x40
 8008b68:	2301      	movs	r3, #1
 8008b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d104      	bne.n	8008b7c <_dtoa_r+0xaa4>
 8008b72:	0001      	movs	r1, r0
 8008b74:	9804      	ldr	r0, [sp, #16]
 8008b76:	f000 fdb9 	bl	80096ec <__mcmp>
 8008b7a:	900d      	str	r0, [sp, #52]	; 0x34
 8008b7c:	0038      	movs	r0, r7
 8008b7e:	9907      	ldr	r1, [sp, #28]
 8008b80:	f000 fb72 	bl	8009268 <_Bfree>
 8008b84:	2301      	movs	r3, #1
 8008b86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b8a:	4018      	ands	r0, r3
 8008b8c:	9b08      	ldr	r3, [sp, #32]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	9307      	str	r3, [sp, #28]
 8008b92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b94:	4313      	orrs	r3, r2
 8008b96:	4303      	orrs	r3, r0
 8008b98:	d10c      	bne.n	8008bb4 <_dtoa_r+0xadc>
 8008b9a:	9b06      	ldr	r3, [sp, #24]
 8008b9c:	2b39      	cmp	r3, #57	; 0x39
 8008b9e:	d025      	beq.n	8008bec <_dtoa_r+0xb14>
 8008ba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dd02      	ble.n	8008bac <_dtoa_r+0xad4>
 8008ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ba8:	3331      	adds	r3, #49	; 0x31
 8008baa:	9306      	str	r3, [sp, #24]
 8008bac:	9b08      	ldr	r3, [sp, #32]
 8008bae:	9a06      	ldr	r2, [sp, #24]
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e773      	b.n	8008a9c <_dtoa_r+0x9c4>
 8008bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	db03      	blt.n	8008bc2 <_dtoa_r+0xaea>
 8008bba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	4303      	orrs	r3, r0
 8008bc0:	d11f      	bne.n	8008c02 <_dtoa_r+0xb2a>
 8008bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	ddf1      	ble.n	8008bac <_dtoa_r+0xad4>
 8008bc8:	9904      	ldr	r1, [sp, #16]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	0038      	movs	r0, r7
 8008bce:	f000 fd1d 	bl	800960c <__lshift>
 8008bd2:	0031      	movs	r1, r6
 8008bd4:	9004      	str	r0, [sp, #16]
 8008bd6:	f000 fd89 	bl	80096ec <__mcmp>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	dc03      	bgt.n	8008be6 <_dtoa_r+0xb0e>
 8008bde:	d1e5      	bne.n	8008bac <_dtoa_r+0xad4>
 8008be0:	9b06      	ldr	r3, [sp, #24]
 8008be2:	07db      	lsls	r3, r3, #31
 8008be4:	d5e2      	bpl.n	8008bac <_dtoa_r+0xad4>
 8008be6:	9b06      	ldr	r3, [sp, #24]
 8008be8:	2b39      	cmp	r3, #57	; 0x39
 8008bea:	d1dc      	bne.n	8008ba6 <_dtoa_r+0xace>
 8008bec:	2339      	movs	r3, #57	; 0x39
 8008bee:	9a08      	ldr	r2, [sp, #32]
 8008bf0:	7013      	strb	r3, [r2, #0]
 8008bf2:	9b07      	ldr	r3, [sp, #28]
 8008bf4:	9307      	str	r3, [sp, #28]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	2a39      	cmp	r2, #57	; 0x39
 8008bfc:	d06c      	beq.n	8008cd8 <_dtoa_r+0xc00>
 8008bfe:	3201      	adds	r2, #1
 8008c00:	e7d6      	b.n	8008bb0 <_dtoa_r+0xad8>
 8008c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dd07      	ble.n	8008c18 <_dtoa_r+0xb40>
 8008c08:	9b06      	ldr	r3, [sp, #24]
 8008c0a:	2b39      	cmp	r3, #57	; 0x39
 8008c0c:	d0ee      	beq.n	8008bec <_dtoa_r+0xb14>
 8008c0e:	9b06      	ldr	r3, [sp, #24]
 8008c10:	9a08      	ldr	r2, [sp, #32]
 8008c12:	3301      	adds	r3, #1
 8008c14:	7013      	strb	r3, [r2, #0]
 8008c16:	e741      	b.n	8008a9c <_dtoa_r+0x9c4>
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	9a06      	ldr	r2, [sp, #24]
 8008c1c:	701a      	strb	r2, [r3, #0]
 8008c1e:	2301      	movs	r3, #1
 8008c20:	9a05      	ldr	r2, [sp, #20]
 8008c22:	1a9b      	subs	r3, r3, r2
 8008c24:	9a08      	ldr	r2, [sp, #32]
 8008c26:	189b      	adds	r3, r3, r2
 8008c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d03e      	beq.n	8008cac <_dtoa_r+0xbd4>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	220a      	movs	r2, #10
 8008c32:	9904      	ldr	r1, [sp, #16]
 8008c34:	0038      	movs	r0, r7
 8008c36:	f000 fb3b 	bl	80092b0 <__multadd>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9004      	str	r0, [sp, #16]
 8008c3e:	220a      	movs	r2, #10
 8008c40:	0021      	movs	r1, r4
 8008c42:	0038      	movs	r0, r7
 8008c44:	42ac      	cmp	r4, r5
 8008c46:	d106      	bne.n	8008c56 <_dtoa_r+0xb7e>
 8008c48:	f000 fb32 	bl	80092b0 <__multadd>
 8008c4c:	0004      	movs	r4, r0
 8008c4e:	0005      	movs	r5, r0
 8008c50:	9b07      	ldr	r3, [sp, #28]
 8008c52:	9308      	str	r3, [sp, #32]
 8008c54:	e773      	b.n	8008b3e <_dtoa_r+0xa66>
 8008c56:	f000 fb2b 	bl	80092b0 <__multadd>
 8008c5a:	0029      	movs	r1, r5
 8008c5c:	0004      	movs	r4, r0
 8008c5e:	2300      	movs	r3, #0
 8008c60:	220a      	movs	r2, #10
 8008c62:	0038      	movs	r0, r7
 8008c64:	f000 fb24 	bl	80092b0 <__multadd>
 8008c68:	0005      	movs	r5, r0
 8008c6a:	e7f1      	b.n	8008c50 <_dtoa_r+0xb78>
 8008c6c:	9b06      	ldr	r3, [sp, #24]
 8008c6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c70:	2400      	movs	r4, #0
 8008c72:	0031      	movs	r1, r6
 8008c74:	9804      	ldr	r0, [sp, #16]
 8008c76:	f7ff f9a3 	bl	8007fc0 <quorem>
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	3030      	adds	r0, #48	; 0x30
 8008c7e:	5518      	strb	r0, [r3, r4]
 8008c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c82:	3401      	adds	r4, #1
 8008c84:	9006      	str	r0, [sp, #24]
 8008c86:	42a3      	cmp	r3, r4
 8008c88:	dd07      	ble.n	8008c9a <_dtoa_r+0xbc2>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	220a      	movs	r2, #10
 8008c8e:	0038      	movs	r0, r7
 8008c90:	9904      	ldr	r1, [sp, #16]
 8008c92:	f000 fb0d 	bl	80092b0 <__multadd>
 8008c96:	9004      	str	r0, [sp, #16]
 8008c98:	e7eb      	b.n	8008c72 <_dtoa_r+0xb9a>
 8008c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dd00      	ble.n	8008ca4 <_dtoa_r+0xbcc>
 8008ca2:	0018      	movs	r0, r3
 8008ca4:	2400      	movs	r4, #0
 8008ca6:	9b05      	ldr	r3, [sp, #20]
 8008ca8:	181b      	adds	r3, r3, r0
 8008caa:	9307      	str	r3, [sp, #28]
 8008cac:	9904      	ldr	r1, [sp, #16]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	0038      	movs	r0, r7
 8008cb2:	f000 fcab 	bl	800960c <__lshift>
 8008cb6:	0031      	movs	r1, r6
 8008cb8:	9004      	str	r0, [sp, #16]
 8008cba:	f000 fd17 	bl	80096ec <__mcmp>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	dc97      	bgt.n	8008bf2 <_dtoa_r+0xb1a>
 8008cc2:	d102      	bne.n	8008cca <_dtoa_r+0xbf2>
 8008cc4:	9b06      	ldr	r3, [sp, #24]
 8008cc6:	07db      	lsls	r3, r3, #31
 8008cc8:	d493      	bmi.n	8008bf2 <_dtoa_r+0xb1a>
 8008cca:	9b07      	ldr	r3, [sp, #28]
 8008ccc:	9307      	str	r3, [sp, #28]
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	781a      	ldrb	r2, [r3, #0]
 8008cd2:	2a30      	cmp	r2, #48	; 0x30
 8008cd4:	d0fa      	beq.n	8008ccc <_dtoa_r+0xbf4>
 8008cd6:	e6e1      	b.n	8008a9c <_dtoa_r+0x9c4>
 8008cd8:	9a05      	ldr	r2, [sp, #20]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d18a      	bne.n	8008bf4 <_dtoa_r+0xb1c>
 8008cde:	9b02      	ldr	r3, [sp, #8]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	9302      	str	r3, [sp, #8]
 8008ce4:	2331      	movs	r3, #49	; 0x31
 8008ce6:	e795      	b.n	8008c14 <_dtoa_r+0xb3c>
 8008ce8:	4b08      	ldr	r3, [pc, #32]	; (8008d0c <_dtoa_r+0xc34>)
 8008cea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <_dtoa_r+0xc38>)
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	d001      	beq.n	8008cf8 <_dtoa_r+0xc20>
 8008cf4:	f7ff fa3b 	bl	800816e <_dtoa_r+0x96>
 8008cf8:	f7ff fa3b 	bl	8008172 <_dtoa_r+0x9a>
 8008cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	dcb6      	bgt.n	8008c70 <_dtoa_r+0xb98>
 8008d02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	dd00      	ble.n	8008d0a <_dtoa_r+0xc32>
 8008d08:	e6b2      	b.n	8008a70 <_dtoa_r+0x998>
 8008d0a:	e7b1      	b.n	8008c70 <_dtoa_r+0xb98>
 8008d0c:	0800a278 	.word	0x0800a278
 8008d10:	0800a280 	.word	0x0800a280

08008d14 <__sflush_r>:
 8008d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d16:	898b      	ldrh	r3, [r1, #12]
 8008d18:	0005      	movs	r5, r0
 8008d1a:	000c      	movs	r4, r1
 8008d1c:	071a      	lsls	r2, r3, #28
 8008d1e:	d45f      	bmi.n	8008de0 <__sflush_r+0xcc>
 8008d20:	684a      	ldr	r2, [r1, #4]
 8008d22:	2a00      	cmp	r2, #0
 8008d24:	dc04      	bgt.n	8008d30 <__sflush_r+0x1c>
 8008d26:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	dc01      	bgt.n	8008d30 <__sflush_r+0x1c>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008d32:	2f00      	cmp	r7, #0
 8008d34:	d0fa      	beq.n	8008d2c <__sflush_r+0x18>
 8008d36:	2200      	movs	r2, #0
 8008d38:	2180      	movs	r1, #128	; 0x80
 8008d3a:	682e      	ldr	r6, [r5, #0]
 8008d3c:	602a      	str	r2, [r5, #0]
 8008d3e:	001a      	movs	r2, r3
 8008d40:	0149      	lsls	r1, r1, #5
 8008d42:	400a      	ands	r2, r1
 8008d44:	420b      	tst	r3, r1
 8008d46:	d034      	beq.n	8008db2 <__sflush_r+0x9e>
 8008d48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	075b      	lsls	r3, r3, #29
 8008d4e:	d506      	bpl.n	8008d5e <__sflush_r+0x4a>
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	1ac0      	subs	r0, r0, r3
 8008d54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <__sflush_r+0x4a>
 8008d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d5c:	1ac0      	subs	r0, r0, r3
 8008d5e:	0002      	movs	r2, r0
 8008d60:	6a21      	ldr	r1, [r4, #32]
 8008d62:	2300      	movs	r3, #0
 8008d64:	0028      	movs	r0, r5
 8008d66:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008d68:	47b8      	blx	r7
 8008d6a:	89a1      	ldrh	r1, [r4, #12]
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d106      	bne.n	8008d7e <__sflush_r+0x6a>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	2b1d      	cmp	r3, #29
 8008d74:	d831      	bhi.n	8008dda <__sflush_r+0xc6>
 8008d76:	4a2c      	ldr	r2, [pc, #176]	; (8008e28 <__sflush_r+0x114>)
 8008d78:	40da      	lsrs	r2, r3
 8008d7a:	07d3      	lsls	r3, r2, #31
 8008d7c:	d52d      	bpl.n	8008dda <__sflush_r+0xc6>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	6063      	str	r3, [r4, #4]
 8008d82:	6923      	ldr	r3, [r4, #16]
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	04cb      	lsls	r3, r1, #19
 8008d88:	d505      	bpl.n	8008d96 <__sflush_r+0x82>
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	d102      	bne.n	8008d94 <__sflush_r+0x80>
 8008d8e:	682b      	ldr	r3, [r5, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d100      	bne.n	8008d96 <__sflush_r+0x82>
 8008d94:	6560      	str	r0, [r4, #84]	; 0x54
 8008d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d98:	602e      	str	r6, [r5, #0]
 8008d9a:	2900      	cmp	r1, #0
 8008d9c:	d0c6      	beq.n	8008d2c <__sflush_r+0x18>
 8008d9e:	0023      	movs	r3, r4
 8008da0:	3344      	adds	r3, #68	; 0x44
 8008da2:	4299      	cmp	r1, r3
 8008da4:	d002      	beq.n	8008dac <__sflush_r+0x98>
 8008da6:	0028      	movs	r0, r5
 8008da8:	f7fe fa72 	bl	8007290 <_free_r>
 8008dac:	2000      	movs	r0, #0
 8008dae:	6360      	str	r0, [r4, #52]	; 0x34
 8008db0:	e7bd      	b.n	8008d2e <__sflush_r+0x1a>
 8008db2:	2301      	movs	r3, #1
 8008db4:	0028      	movs	r0, r5
 8008db6:	6a21      	ldr	r1, [r4, #32]
 8008db8:	47b8      	blx	r7
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	d1c5      	bne.n	8008d4a <__sflush_r+0x36>
 8008dbe:	682b      	ldr	r3, [r5, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0c2      	beq.n	8008d4a <__sflush_r+0x36>
 8008dc4:	2b1d      	cmp	r3, #29
 8008dc6:	d001      	beq.n	8008dcc <__sflush_r+0xb8>
 8008dc8:	2b16      	cmp	r3, #22
 8008dca:	d101      	bne.n	8008dd0 <__sflush_r+0xbc>
 8008dcc:	602e      	str	r6, [r5, #0]
 8008dce:	e7ad      	b.n	8008d2c <__sflush_r+0x18>
 8008dd0:	2340      	movs	r3, #64	; 0x40
 8008dd2:	89a2      	ldrh	r2, [r4, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	81a3      	strh	r3, [r4, #12]
 8008dd8:	e7a9      	b.n	8008d2e <__sflush_r+0x1a>
 8008dda:	2340      	movs	r3, #64	; 0x40
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	e7fa      	b.n	8008dd6 <__sflush_r+0xc2>
 8008de0:	690f      	ldr	r7, [r1, #16]
 8008de2:	2f00      	cmp	r7, #0
 8008de4:	d0a2      	beq.n	8008d2c <__sflush_r+0x18>
 8008de6:	680a      	ldr	r2, [r1, #0]
 8008de8:	600f      	str	r7, [r1, #0]
 8008dea:	1bd2      	subs	r2, r2, r7
 8008dec:	9201      	str	r2, [sp, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	079b      	lsls	r3, r3, #30
 8008df2:	d100      	bne.n	8008df6 <__sflush_r+0xe2>
 8008df4:	694a      	ldr	r2, [r1, #20]
 8008df6:	60a2      	str	r2, [r4, #8]
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	dc00      	bgt.n	8008e00 <__sflush_r+0xec>
 8008dfe:	e795      	b.n	8008d2c <__sflush_r+0x18>
 8008e00:	003a      	movs	r2, r7
 8008e02:	0028      	movs	r0, r5
 8008e04:	9b01      	ldr	r3, [sp, #4]
 8008e06:	6a21      	ldr	r1, [r4, #32]
 8008e08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e0a:	47b0      	blx	r6
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	dc06      	bgt.n	8008e1e <__sflush_r+0x10a>
 8008e10:	2340      	movs	r3, #64	; 0x40
 8008e12:	2001      	movs	r0, #1
 8008e14:	89a2      	ldrh	r2, [r4, #12]
 8008e16:	4240      	negs	r0, r0
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	81a3      	strh	r3, [r4, #12]
 8008e1c:	e787      	b.n	8008d2e <__sflush_r+0x1a>
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	183f      	adds	r7, r7, r0
 8008e22:	1a1b      	subs	r3, r3, r0
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	e7e7      	b.n	8008df8 <__sflush_r+0xe4>
 8008e28:	20400001 	.word	0x20400001

08008e2c <_fflush_r>:
 8008e2c:	690b      	ldr	r3, [r1, #16]
 8008e2e:	b570      	push	{r4, r5, r6, lr}
 8008e30:	0005      	movs	r5, r0
 8008e32:	000c      	movs	r4, r1
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d102      	bne.n	8008e3e <_fflush_r+0x12>
 8008e38:	2500      	movs	r5, #0
 8008e3a:	0028      	movs	r0, r5
 8008e3c:	bd70      	pop	{r4, r5, r6, pc}
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d004      	beq.n	8008e4c <_fflush_r+0x20>
 8008e42:	6983      	ldr	r3, [r0, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <_fflush_r+0x20>
 8008e48:	f000 f892 	bl	8008f70 <__sinit>
 8008e4c:	4b14      	ldr	r3, [pc, #80]	; (8008ea0 <_fflush_r+0x74>)
 8008e4e:	429c      	cmp	r4, r3
 8008e50:	d11b      	bne.n	8008e8a <_fflush_r+0x5e>
 8008e52:	686c      	ldr	r4, [r5, #4]
 8008e54:	220c      	movs	r2, #12
 8008e56:	5ea3      	ldrsh	r3, [r4, r2]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0ed      	beq.n	8008e38 <_fflush_r+0xc>
 8008e5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e5e:	07d2      	lsls	r2, r2, #31
 8008e60:	d404      	bmi.n	8008e6c <_fflush_r+0x40>
 8008e62:	059b      	lsls	r3, r3, #22
 8008e64:	d402      	bmi.n	8008e6c <_fflush_r+0x40>
 8008e66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e68:	f000 f927 	bl	80090ba <__retarget_lock_acquire_recursive>
 8008e6c:	0028      	movs	r0, r5
 8008e6e:	0021      	movs	r1, r4
 8008e70:	f7ff ff50 	bl	8008d14 <__sflush_r>
 8008e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e76:	0005      	movs	r5, r0
 8008e78:	07db      	lsls	r3, r3, #31
 8008e7a:	d4de      	bmi.n	8008e3a <_fflush_r+0xe>
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	059b      	lsls	r3, r3, #22
 8008e80:	d4db      	bmi.n	8008e3a <_fflush_r+0xe>
 8008e82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e84:	f000 f91a 	bl	80090bc <__retarget_lock_release_recursive>
 8008e88:	e7d7      	b.n	8008e3a <_fflush_r+0xe>
 8008e8a:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <_fflush_r+0x78>)
 8008e8c:	429c      	cmp	r4, r3
 8008e8e:	d101      	bne.n	8008e94 <_fflush_r+0x68>
 8008e90:	68ac      	ldr	r4, [r5, #8]
 8008e92:	e7df      	b.n	8008e54 <_fflush_r+0x28>
 8008e94:	4b04      	ldr	r3, [pc, #16]	; (8008ea8 <_fflush_r+0x7c>)
 8008e96:	429c      	cmp	r4, r3
 8008e98:	d1dc      	bne.n	8008e54 <_fflush_r+0x28>
 8008e9a:	68ec      	ldr	r4, [r5, #12]
 8008e9c:	e7da      	b.n	8008e54 <_fflush_r+0x28>
 8008e9e:	46c0      	nop			; (mov r8, r8)
 8008ea0:	0800a32c 	.word	0x0800a32c
 8008ea4:	0800a34c 	.word	0x0800a34c
 8008ea8:	0800a30c 	.word	0x0800a30c

08008eac <std>:
 8008eac:	2300      	movs	r3, #0
 8008eae:	b510      	push	{r4, lr}
 8008eb0:	0004      	movs	r4, r0
 8008eb2:	6003      	str	r3, [r0, #0]
 8008eb4:	6043      	str	r3, [r0, #4]
 8008eb6:	6083      	str	r3, [r0, #8]
 8008eb8:	8181      	strh	r1, [r0, #12]
 8008eba:	6643      	str	r3, [r0, #100]	; 0x64
 8008ebc:	0019      	movs	r1, r3
 8008ebe:	81c2      	strh	r2, [r0, #14]
 8008ec0:	6103      	str	r3, [r0, #16]
 8008ec2:	6143      	str	r3, [r0, #20]
 8008ec4:	6183      	str	r3, [r0, #24]
 8008ec6:	2208      	movs	r2, #8
 8008ec8:	305c      	adds	r0, #92	; 0x5c
 8008eca:	f7fe f9d9 	bl	8007280 <memset>
 8008ece:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <std+0x38>)
 8008ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8008ed2:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <std+0x3c>)
 8008ed4:	6224      	str	r4, [r4, #32]
 8008ed6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ed8:	4b04      	ldr	r3, [pc, #16]	; (8008eec <std+0x40>)
 8008eda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008edc:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <std+0x44>)
 8008ede:	6323      	str	r3, [r4, #48]	; 0x30
 8008ee0:	bd10      	pop	{r4, pc}
 8008ee2:	46c0      	nop			; (mov r8, r8)
 8008ee4:	08009bfd 	.word	0x08009bfd
 8008ee8:	08009c25 	.word	0x08009c25
 8008eec:	08009c5d 	.word	0x08009c5d
 8008ef0:	08009c89 	.word	0x08009c89

08008ef4 <_cleanup_r>:
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	4902      	ldr	r1, [pc, #8]	; (8008f00 <_cleanup_r+0xc>)
 8008ef8:	f000 f8ba 	bl	8009070 <_fwalk_reent>
 8008efc:	bd10      	pop	{r4, pc}
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	08008e2d 	.word	0x08008e2d

08008f04 <__sfmoreglue>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	2568      	movs	r5, #104	; 0x68
 8008f08:	1e4a      	subs	r2, r1, #1
 8008f0a:	4355      	muls	r5, r2
 8008f0c:	000e      	movs	r6, r1
 8008f0e:	0029      	movs	r1, r5
 8008f10:	3174      	adds	r1, #116	; 0x74
 8008f12:	f7fe fa07 	bl	8007324 <_malloc_r>
 8008f16:	1e04      	subs	r4, r0, #0
 8008f18:	d008      	beq.n	8008f2c <__sfmoreglue+0x28>
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	002a      	movs	r2, r5
 8008f1e:	6001      	str	r1, [r0, #0]
 8008f20:	6046      	str	r6, [r0, #4]
 8008f22:	300c      	adds	r0, #12
 8008f24:	60a0      	str	r0, [r4, #8]
 8008f26:	3268      	adds	r2, #104	; 0x68
 8008f28:	f7fe f9aa 	bl	8007280 <memset>
 8008f2c:	0020      	movs	r0, r4
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}

08008f30 <__sfp_lock_acquire>:
 8008f30:	b510      	push	{r4, lr}
 8008f32:	4802      	ldr	r0, [pc, #8]	; (8008f3c <__sfp_lock_acquire+0xc>)
 8008f34:	f000 f8c1 	bl	80090ba <__retarget_lock_acquire_recursive>
 8008f38:	bd10      	pop	{r4, pc}
 8008f3a:	46c0      	nop			; (mov r8, r8)
 8008f3c:	20000328 	.word	0x20000328

08008f40 <__sfp_lock_release>:
 8008f40:	b510      	push	{r4, lr}
 8008f42:	4802      	ldr	r0, [pc, #8]	; (8008f4c <__sfp_lock_release+0xc>)
 8008f44:	f000 f8ba 	bl	80090bc <__retarget_lock_release_recursive>
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	20000328 	.word	0x20000328

08008f50 <__sinit_lock_acquire>:
 8008f50:	b510      	push	{r4, lr}
 8008f52:	4802      	ldr	r0, [pc, #8]	; (8008f5c <__sinit_lock_acquire+0xc>)
 8008f54:	f000 f8b1 	bl	80090ba <__retarget_lock_acquire_recursive>
 8008f58:	bd10      	pop	{r4, pc}
 8008f5a:	46c0      	nop			; (mov r8, r8)
 8008f5c:	20000323 	.word	0x20000323

08008f60 <__sinit_lock_release>:
 8008f60:	b510      	push	{r4, lr}
 8008f62:	4802      	ldr	r0, [pc, #8]	; (8008f6c <__sinit_lock_release+0xc>)
 8008f64:	f000 f8aa 	bl	80090bc <__retarget_lock_release_recursive>
 8008f68:	bd10      	pop	{r4, pc}
 8008f6a:	46c0      	nop			; (mov r8, r8)
 8008f6c:	20000323 	.word	0x20000323

08008f70 <__sinit>:
 8008f70:	b513      	push	{r0, r1, r4, lr}
 8008f72:	0004      	movs	r4, r0
 8008f74:	f7ff ffec 	bl	8008f50 <__sinit_lock_acquire>
 8008f78:	69a3      	ldr	r3, [r4, #24]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <__sinit+0x14>
 8008f7e:	f7ff ffef 	bl	8008f60 <__sinit_lock_release>
 8008f82:	bd13      	pop	{r0, r1, r4, pc}
 8008f84:	64a3      	str	r3, [r4, #72]	; 0x48
 8008f86:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008f88:	6523      	str	r3, [r4, #80]	; 0x50
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <__sinit+0x68>)
 8008f8c:	4a13      	ldr	r2, [pc, #76]	; (8008fdc <__sinit+0x6c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d101      	bne.n	8008f9c <__sinit+0x2c>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	61a3      	str	r3, [r4, #24]
 8008f9c:	0020      	movs	r0, r4
 8008f9e:	f000 f81f 	bl	8008fe0 <__sfp>
 8008fa2:	6060      	str	r0, [r4, #4]
 8008fa4:	0020      	movs	r0, r4
 8008fa6:	f000 f81b 	bl	8008fe0 <__sfp>
 8008faa:	60a0      	str	r0, [r4, #8]
 8008fac:	0020      	movs	r0, r4
 8008fae:	f000 f817 	bl	8008fe0 <__sfp>
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2104      	movs	r1, #4
 8008fb6:	60e0      	str	r0, [r4, #12]
 8008fb8:	6860      	ldr	r0, [r4, #4]
 8008fba:	f7ff ff77 	bl	8008eac <std>
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	2109      	movs	r1, #9
 8008fc2:	68a0      	ldr	r0, [r4, #8]
 8008fc4:	f7ff ff72 	bl	8008eac <std>
 8008fc8:	2202      	movs	r2, #2
 8008fca:	2112      	movs	r1, #18
 8008fcc:	68e0      	ldr	r0, [r4, #12]
 8008fce:	f7ff ff6d 	bl	8008eac <std>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	61a3      	str	r3, [r4, #24]
 8008fd6:	e7d2      	b.n	8008f7e <__sinit+0xe>
 8008fd8:	0800a240 	.word	0x0800a240
 8008fdc:	08008ef5 	.word	0x08008ef5

08008fe0 <__sfp>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	0007      	movs	r7, r0
 8008fe4:	f7ff ffa4 	bl	8008f30 <__sfp_lock_acquire>
 8008fe8:	4b1f      	ldr	r3, [pc, #124]	; (8009068 <__sfp+0x88>)
 8008fea:	681e      	ldr	r6, [r3, #0]
 8008fec:	69b3      	ldr	r3, [r6, #24]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d102      	bne.n	8008ff8 <__sfp+0x18>
 8008ff2:	0030      	movs	r0, r6
 8008ff4:	f7ff ffbc 	bl	8008f70 <__sinit>
 8008ff8:	3648      	adds	r6, #72	; 0x48
 8008ffa:	68b4      	ldr	r4, [r6, #8]
 8008ffc:	6873      	ldr	r3, [r6, #4]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	d504      	bpl.n	800900c <__sfp+0x2c>
 8009002:	6833      	ldr	r3, [r6, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d022      	beq.n	800904e <__sfp+0x6e>
 8009008:	6836      	ldr	r6, [r6, #0]
 800900a:	e7f6      	b.n	8008ffa <__sfp+0x1a>
 800900c:	220c      	movs	r2, #12
 800900e:	5ea5      	ldrsh	r5, [r4, r2]
 8009010:	2d00      	cmp	r5, #0
 8009012:	d11a      	bne.n	800904a <__sfp+0x6a>
 8009014:	0020      	movs	r0, r4
 8009016:	4b15      	ldr	r3, [pc, #84]	; (800906c <__sfp+0x8c>)
 8009018:	3058      	adds	r0, #88	; 0x58
 800901a:	60e3      	str	r3, [r4, #12]
 800901c:	6665      	str	r5, [r4, #100]	; 0x64
 800901e:	f000 f84b 	bl	80090b8 <__retarget_lock_init_recursive>
 8009022:	f7ff ff8d 	bl	8008f40 <__sfp_lock_release>
 8009026:	0020      	movs	r0, r4
 8009028:	2208      	movs	r2, #8
 800902a:	0029      	movs	r1, r5
 800902c:	6025      	str	r5, [r4, #0]
 800902e:	60a5      	str	r5, [r4, #8]
 8009030:	6065      	str	r5, [r4, #4]
 8009032:	6125      	str	r5, [r4, #16]
 8009034:	6165      	str	r5, [r4, #20]
 8009036:	61a5      	str	r5, [r4, #24]
 8009038:	305c      	adds	r0, #92	; 0x5c
 800903a:	f7fe f921 	bl	8007280 <memset>
 800903e:	6365      	str	r5, [r4, #52]	; 0x34
 8009040:	63a5      	str	r5, [r4, #56]	; 0x38
 8009042:	64a5      	str	r5, [r4, #72]	; 0x48
 8009044:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009046:	0020      	movs	r0, r4
 8009048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800904a:	3468      	adds	r4, #104	; 0x68
 800904c:	e7d7      	b.n	8008ffe <__sfp+0x1e>
 800904e:	2104      	movs	r1, #4
 8009050:	0038      	movs	r0, r7
 8009052:	f7ff ff57 	bl	8008f04 <__sfmoreglue>
 8009056:	1e04      	subs	r4, r0, #0
 8009058:	6030      	str	r0, [r6, #0]
 800905a:	d1d5      	bne.n	8009008 <__sfp+0x28>
 800905c:	f7ff ff70 	bl	8008f40 <__sfp_lock_release>
 8009060:	230c      	movs	r3, #12
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	e7ef      	b.n	8009046 <__sfp+0x66>
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	0800a240 	.word	0x0800a240
 800906c:	ffff0001 	.word	0xffff0001

08009070 <_fwalk_reent>:
 8009070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009072:	0004      	movs	r4, r0
 8009074:	0006      	movs	r6, r0
 8009076:	2700      	movs	r7, #0
 8009078:	9101      	str	r1, [sp, #4]
 800907a:	3448      	adds	r4, #72	; 0x48
 800907c:	6863      	ldr	r3, [r4, #4]
 800907e:	68a5      	ldr	r5, [r4, #8]
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	9b00      	ldr	r3, [sp, #0]
 8009084:	3b01      	subs	r3, #1
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	d504      	bpl.n	8009094 <_fwalk_reent+0x24>
 800908a:	6824      	ldr	r4, [r4, #0]
 800908c:	2c00      	cmp	r4, #0
 800908e:	d1f5      	bne.n	800907c <_fwalk_reent+0xc>
 8009090:	0038      	movs	r0, r7
 8009092:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009094:	89ab      	ldrh	r3, [r5, #12]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d908      	bls.n	80090ac <_fwalk_reent+0x3c>
 800909a:	220e      	movs	r2, #14
 800909c:	5eab      	ldrsh	r3, [r5, r2]
 800909e:	3301      	adds	r3, #1
 80090a0:	d004      	beq.n	80090ac <_fwalk_reent+0x3c>
 80090a2:	0029      	movs	r1, r5
 80090a4:	0030      	movs	r0, r6
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	4798      	blx	r3
 80090aa:	4307      	orrs	r7, r0
 80090ac:	3568      	adds	r5, #104	; 0x68
 80090ae:	e7e8      	b.n	8009082 <_fwalk_reent+0x12>

080090b0 <_localeconv_r>:
 80090b0:	4800      	ldr	r0, [pc, #0]	; (80090b4 <_localeconv_r+0x4>)
 80090b2:	4770      	bx	lr
 80090b4:	20000160 	.word	0x20000160

080090b8 <__retarget_lock_init_recursive>:
 80090b8:	4770      	bx	lr

080090ba <__retarget_lock_acquire_recursive>:
 80090ba:	4770      	bx	lr

080090bc <__retarget_lock_release_recursive>:
 80090bc:	4770      	bx	lr
	...

080090c0 <__swhatbuf_r>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	000e      	movs	r6, r1
 80090c4:	001d      	movs	r5, r3
 80090c6:	230e      	movs	r3, #14
 80090c8:	5ec9      	ldrsh	r1, [r1, r3]
 80090ca:	0014      	movs	r4, r2
 80090cc:	b096      	sub	sp, #88	; 0x58
 80090ce:	2900      	cmp	r1, #0
 80090d0:	da07      	bge.n	80090e2 <__swhatbuf_r+0x22>
 80090d2:	2300      	movs	r3, #0
 80090d4:	602b      	str	r3, [r5, #0]
 80090d6:	89b3      	ldrh	r3, [r6, #12]
 80090d8:	061b      	lsls	r3, r3, #24
 80090da:	d411      	bmi.n	8009100 <__swhatbuf_r+0x40>
 80090dc:	2380      	movs	r3, #128	; 0x80
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	e00f      	b.n	8009102 <__swhatbuf_r+0x42>
 80090e2:	466a      	mov	r2, sp
 80090e4:	f000 fe2a 	bl	8009d3c <_fstat_r>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	dbf2      	blt.n	80090d2 <__swhatbuf_r+0x12>
 80090ec:	23f0      	movs	r3, #240	; 0xf0
 80090ee:	9901      	ldr	r1, [sp, #4]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	4019      	ands	r1, r3
 80090f4:	4b05      	ldr	r3, [pc, #20]	; (800910c <__swhatbuf_r+0x4c>)
 80090f6:	18c9      	adds	r1, r1, r3
 80090f8:	424b      	negs	r3, r1
 80090fa:	4159      	adcs	r1, r3
 80090fc:	6029      	str	r1, [r5, #0]
 80090fe:	e7ed      	b.n	80090dc <__swhatbuf_r+0x1c>
 8009100:	2340      	movs	r3, #64	; 0x40
 8009102:	2000      	movs	r0, #0
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	b016      	add	sp, #88	; 0x58
 8009108:	bd70      	pop	{r4, r5, r6, pc}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	ffffe000 	.word	0xffffe000

08009110 <__smakebuf_r>:
 8009110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009112:	2602      	movs	r6, #2
 8009114:	898b      	ldrh	r3, [r1, #12]
 8009116:	0005      	movs	r5, r0
 8009118:	000c      	movs	r4, r1
 800911a:	4233      	tst	r3, r6
 800911c:	d006      	beq.n	800912c <__smakebuf_r+0x1c>
 800911e:	0023      	movs	r3, r4
 8009120:	3347      	adds	r3, #71	; 0x47
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	6123      	str	r3, [r4, #16]
 8009126:	2301      	movs	r3, #1
 8009128:	6163      	str	r3, [r4, #20]
 800912a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800912c:	466a      	mov	r2, sp
 800912e:	ab01      	add	r3, sp, #4
 8009130:	f7ff ffc6 	bl	80090c0 <__swhatbuf_r>
 8009134:	9900      	ldr	r1, [sp, #0]
 8009136:	0007      	movs	r7, r0
 8009138:	0028      	movs	r0, r5
 800913a:	f7fe f8f3 	bl	8007324 <_malloc_r>
 800913e:	2800      	cmp	r0, #0
 8009140:	d108      	bne.n	8009154 <__smakebuf_r+0x44>
 8009142:	220c      	movs	r2, #12
 8009144:	5ea3      	ldrsh	r3, [r4, r2]
 8009146:	059a      	lsls	r2, r3, #22
 8009148:	d4ef      	bmi.n	800912a <__smakebuf_r+0x1a>
 800914a:	2203      	movs	r2, #3
 800914c:	4393      	bics	r3, r2
 800914e:	431e      	orrs	r6, r3
 8009150:	81a6      	strh	r6, [r4, #12]
 8009152:	e7e4      	b.n	800911e <__smakebuf_r+0xe>
 8009154:	4b0f      	ldr	r3, [pc, #60]	; (8009194 <__smakebuf_r+0x84>)
 8009156:	62ab      	str	r3, [r5, #40]	; 0x28
 8009158:	2380      	movs	r3, #128	; 0x80
 800915a:	89a2      	ldrh	r2, [r4, #12]
 800915c:	6020      	str	r0, [r4, #0]
 800915e:	4313      	orrs	r3, r2
 8009160:	81a3      	strh	r3, [r4, #12]
 8009162:	9b00      	ldr	r3, [sp, #0]
 8009164:	6120      	str	r0, [r4, #16]
 8009166:	6163      	str	r3, [r4, #20]
 8009168:	9b01      	ldr	r3, [sp, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00d      	beq.n	800918a <__smakebuf_r+0x7a>
 800916e:	0028      	movs	r0, r5
 8009170:	230e      	movs	r3, #14
 8009172:	5ee1      	ldrsh	r1, [r4, r3]
 8009174:	f000 fdf4 	bl	8009d60 <_isatty_r>
 8009178:	2800      	cmp	r0, #0
 800917a:	d006      	beq.n	800918a <__smakebuf_r+0x7a>
 800917c:	2203      	movs	r2, #3
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	4393      	bics	r3, r2
 8009182:	001a      	movs	r2, r3
 8009184:	2301      	movs	r3, #1
 8009186:	4313      	orrs	r3, r2
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	89a0      	ldrh	r0, [r4, #12]
 800918c:	4307      	orrs	r7, r0
 800918e:	81a7      	strh	r7, [r4, #12]
 8009190:	e7cb      	b.n	800912a <__smakebuf_r+0x1a>
 8009192:	46c0      	nop			; (mov r8, r8)
 8009194:	08008ef5 	.word	0x08008ef5

08009198 <memchr>:
 8009198:	b2c9      	uxtb	r1, r1
 800919a:	1882      	adds	r2, r0, r2
 800919c:	4290      	cmp	r0, r2
 800919e:	d101      	bne.n	80091a4 <memchr+0xc>
 80091a0:	2000      	movs	r0, #0
 80091a2:	4770      	bx	lr
 80091a4:	7803      	ldrb	r3, [r0, #0]
 80091a6:	428b      	cmp	r3, r1
 80091a8:	d0fb      	beq.n	80091a2 <memchr+0xa>
 80091aa:	3001      	adds	r0, #1
 80091ac:	e7f6      	b.n	800919c <memchr+0x4>

080091ae <memcpy>:
 80091ae:	2300      	movs	r3, #0
 80091b0:	b510      	push	{r4, lr}
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d100      	bne.n	80091b8 <memcpy+0xa>
 80091b6:	bd10      	pop	{r4, pc}
 80091b8:	5ccc      	ldrb	r4, [r1, r3]
 80091ba:	54c4      	strb	r4, [r0, r3]
 80091bc:	3301      	adds	r3, #1
 80091be:	e7f8      	b.n	80091b2 <memcpy+0x4>

080091c0 <__malloc_lock>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	4802      	ldr	r0, [pc, #8]	; (80091cc <__malloc_lock+0xc>)
 80091c4:	f7ff ff79 	bl	80090ba <__retarget_lock_acquire_recursive>
 80091c8:	bd10      	pop	{r4, pc}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	20000324 	.word	0x20000324

080091d0 <__malloc_unlock>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4802      	ldr	r0, [pc, #8]	; (80091dc <__malloc_unlock+0xc>)
 80091d4:	f7ff ff72 	bl	80090bc <__retarget_lock_release_recursive>
 80091d8:	bd10      	pop	{r4, pc}
 80091da:	46c0      	nop			; (mov r8, r8)
 80091dc:	20000324 	.word	0x20000324

080091e0 <_Balloc>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091e4:	0006      	movs	r6, r0
 80091e6:	000c      	movs	r4, r1
 80091e8:	2d00      	cmp	r5, #0
 80091ea:	d10e      	bne.n	800920a <_Balloc+0x2a>
 80091ec:	2010      	movs	r0, #16
 80091ee:	f7fe f83d 	bl	800726c <malloc>
 80091f2:	1e02      	subs	r2, r0, #0
 80091f4:	6270      	str	r0, [r6, #36]	; 0x24
 80091f6:	d104      	bne.n	8009202 <_Balloc+0x22>
 80091f8:	2166      	movs	r1, #102	; 0x66
 80091fa:	4b19      	ldr	r3, [pc, #100]	; (8009260 <_Balloc+0x80>)
 80091fc:	4819      	ldr	r0, [pc, #100]	; (8009264 <_Balloc+0x84>)
 80091fe:	f000 fd5d 	bl	8009cbc <__assert_func>
 8009202:	6045      	str	r5, [r0, #4]
 8009204:	6085      	str	r5, [r0, #8]
 8009206:	6005      	str	r5, [r0, #0]
 8009208:	60c5      	str	r5, [r0, #12]
 800920a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800920c:	68eb      	ldr	r3, [r5, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d013      	beq.n	800923a <_Balloc+0x5a>
 8009212:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009214:	00a2      	lsls	r2, r4, #2
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	189b      	adds	r3, r3, r2
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	2800      	cmp	r0, #0
 800921e:	d118      	bne.n	8009252 <_Balloc+0x72>
 8009220:	2101      	movs	r1, #1
 8009222:	000d      	movs	r5, r1
 8009224:	40a5      	lsls	r5, r4
 8009226:	1d6a      	adds	r2, r5, #5
 8009228:	0030      	movs	r0, r6
 800922a:	0092      	lsls	r2, r2, #2
 800922c:	f000 fb76 	bl	800991c <_calloc_r>
 8009230:	2800      	cmp	r0, #0
 8009232:	d00c      	beq.n	800924e <_Balloc+0x6e>
 8009234:	6044      	str	r4, [r0, #4]
 8009236:	6085      	str	r5, [r0, #8]
 8009238:	e00d      	b.n	8009256 <_Balloc+0x76>
 800923a:	2221      	movs	r2, #33	; 0x21
 800923c:	2104      	movs	r1, #4
 800923e:	0030      	movs	r0, r6
 8009240:	f000 fb6c 	bl	800991c <_calloc_r>
 8009244:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009246:	60e8      	str	r0, [r5, #12]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e1      	bne.n	8009212 <_Balloc+0x32>
 800924e:	2000      	movs	r0, #0
 8009250:	bd70      	pop	{r4, r5, r6, pc}
 8009252:	6802      	ldr	r2, [r0, #0]
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	2300      	movs	r3, #0
 8009258:	6103      	str	r3, [r0, #16]
 800925a:	60c3      	str	r3, [r0, #12]
 800925c:	e7f8      	b.n	8009250 <_Balloc+0x70>
 800925e:	46c0      	nop			; (mov r8, r8)
 8009260:	0800a285 	.word	0x0800a285
 8009264:	0800a36c 	.word	0x0800a36c

08009268 <_Bfree>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800926c:	0005      	movs	r5, r0
 800926e:	000c      	movs	r4, r1
 8009270:	2e00      	cmp	r6, #0
 8009272:	d10e      	bne.n	8009292 <_Bfree+0x2a>
 8009274:	2010      	movs	r0, #16
 8009276:	f7fd fff9 	bl	800726c <malloc>
 800927a:	1e02      	subs	r2, r0, #0
 800927c:	6268      	str	r0, [r5, #36]	; 0x24
 800927e:	d104      	bne.n	800928a <_Bfree+0x22>
 8009280:	218a      	movs	r1, #138	; 0x8a
 8009282:	4b09      	ldr	r3, [pc, #36]	; (80092a8 <_Bfree+0x40>)
 8009284:	4809      	ldr	r0, [pc, #36]	; (80092ac <_Bfree+0x44>)
 8009286:	f000 fd19 	bl	8009cbc <__assert_func>
 800928a:	6046      	str	r6, [r0, #4]
 800928c:	6086      	str	r6, [r0, #8]
 800928e:	6006      	str	r6, [r0, #0]
 8009290:	60c6      	str	r6, [r0, #12]
 8009292:	2c00      	cmp	r4, #0
 8009294:	d007      	beq.n	80092a6 <_Bfree+0x3e>
 8009296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009298:	6862      	ldr	r2, [r4, #4]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	0092      	lsls	r2, r2, #2
 800929e:	189b      	adds	r3, r3, r2
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	6022      	str	r2, [r4, #0]
 80092a4:	601c      	str	r4, [r3, #0]
 80092a6:	bd70      	pop	{r4, r5, r6, pc}
 80092a8:	0800a285 	.word	0x0800a285
 80092ac:	0800a36c 	.word	0x0800a36c

080092b0 <__multadd>:
 80092b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092b2:	000e      	movs	r6, r1
 80092b4:	9001      	str	r0, [sp, #4]
 80092b6:	000c      	movs	r4, r1
 80092b8:	001d      	movs	r5, r3
 80092ba:	2000      	movs	r0, #0
 80092bc:	690f      	ldr	r7, [r1, #16]
 80092be:	3614      	adds	r6, #20
 80092c0:	6833      	ldr	r3, [r6, #0]
 80092c2:	3001      	adds	r0, #1
 80092c4:	b299      	uxth	r1, r3
 80092c6:	4351      	muls	r1, r2
 80092c8:	0c1b      	lsrs	r3, r3, #16
 80092ca:	4353      	muls	r3, r2
 80092cc:	1949      	adds	r1, r1, r5
 80092ce:	0c0d      	lsrs	r5, r1, #16
 80092d0:	195b      	adds	r3, r3, r5
 80092d2:	0c1d      	lsrs	r5, r3, #16
 80092d4:	b289      	uxth	r1, r1
 80092d6:	041b      	lsls	r3, r3, #16
 80092d8:	185b      	adds	r3, r3, r1
 80092da:	c608      	stmia	r6!, {r3}
 80092dc:	4287      	cmp	r7, r0
 80092de:	dcef      	bgt.n	80092c0 <__multadd+0x10>
 80092e0:	2d00      	cmp	r5, #0
 80092e2:	d022      	beq.n	800932a <__multadd+0x7a>
 80092e4:	68a3      	ldr	r3, [r4, #8]
 80092e6:	42bb      	cmp	r3, r7
 80092e8:	dc19      	bgt.n	800931e <__multadd+0x6e>
 80092ea:	6863      	ldr	r3, [r4, #4]
 80092ec:	9801      	ldr	r0, [sp, #4]
 80092ee:	1c59      	adds	r1, r3, #1
 80092f0:	f7ff ff76 	bl	80091e0 <_Balloc>
 80092f4:	1e06      	subs	r6, r0, #0
 80092f6:	d105      	bne.n	8009304 <__multadd+0x54>
 80092f8:	0002      	movs	r2, r0
 80092fa:	21b5      	movs	r1, #181	; 0xb5
 80092fc:	4b0c      	ldr	r3, [pc, #48]	; (8009330 <__multadd+0x80>)
 80092fe:	480d      	ldr	r0, [pc, #52]	; (8009334 <__multadd+0x84>)
 8009300:	f000 fcdc 	bl	8009cbc <__assert_func>
 8009304:	0021      	movs	r1, r4
 8009306:	6923      	ldr	r3, [r4, #16]
 8009308:	310c      	adds	r1, #12
 800930a:	1c9a      	adds	r2, r3, #2
 800930c:	0092      	lsls	r2, r2, #2
 800930e:	300c      	adds	r0, #12
 8009310:	f7ff ff4d 	bl	80091ae <memcpy>
 8009314:	0021      	movs	r1, r4
 8009316:	9801      	ldr	r0, [sp, #4]
 8009318:	f7ff ffa6 	bl	8009268 <_Bfree>
 800931c:	0034      	movs	r4, r6
 800931e:	1d3b      	adds	r3, r7, #4
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	18e3      	adds	r3, r4, r3
 8009324:	605d      	str	r5, [r3, #4]
 8009326:	1c7b      	adds	r3, r7, #1
 8009328:	6123      	str	r3, [r4, #16]
 800932a:	0020      	movs	r0, r4
 800932c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800932e:	46c0      	nop			; (mov r8, r8)
 8009330:	0800a2fb 	.word	0x0800a2fb
 8009334:	0800a36c 	.word	0x0800a36c

08009338 <__hi0bits>:
 8009338:	0003      	movs	r3, r0
 800933a:	0c02      	lsrs	r2, r0, #16
 800933c:	2000      	movs	r0, #0
 800933e:	4282      	cmp	r2, r0
 8009340:	d101      	bne.n	8009346 <__hi0bits+0xe>
 8009342:	041b      	lsls	r3, r3, #16
 8009344:	3010      	adds	r0, #16
 8009346:	0e1a      	lsrs	r2, r3, #24
 8009348:	d101      	bne.n	800934e <__hi0bits+0x16>
 800934a:	3008      	adds	r0, #8
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	0f1a      	lsrs	r2, r3, #28
 8009350:	d101      	bne.n	8009356 <__hi0bits+0x1e>
 8009352:	3004      	adds	r0, #4
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	0f9a      	lsrs	r2, r3, #30
 8009358:	d101      	bne.n	800935e <__hi0bits+0x26>
 800935a:	3002      	adds	r0, #2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	db03      	blt.n	800936a <__hi0bits+0x32>
 8009362:	3001      	adds	r0, #1
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	d400      	bmi.n	800936a <__hi0bits+0x32>
 8009368:	2020      	movs	r0, #32
 800936a:	4770      	bx	lr

0800936c <__lo0bits>:
 800936c:	6803      	ldr	r3, [r0, #0]
 800936e:	0002      	movs	r2, r0
 8009370:	2107      	movs	r1, #7
 8009372:	0018      	movs	r0, r3
 8009374:	4008      	ands	r0, r1
 8009376:	420b      	tst	r3, r1
 8009378:	d00d      	beq.n	8009396 <__lo0bits+0x2a>
 800937a:	3906      	subs	r1, #6
 800937c:	2000      	movs	r0, #0
 800937e:	420b      	tst	r3, r1
 8009380:	d105      	bne.n	800938e <__lo0bits+0x22>
 8009382:	3002      	adds	r0, #2
 8009384:	4203      	tst	r3, r0
 8009386:	d003      	beq.n	8009390 <__lo0bits+0x24>
 8009388:	40cb      	lsrs	r3, r1
 800938a:	0008      	movs	r0, r1
 800938c:	6013      	str	r3, [r2, #0]
 800938e:	4770      	bx	lr
 8009390:	089b      	lsrs	r3, r3, #2
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	e7fb      	b.n	800938e <__lo0bits+0x22>
 8009396:	b299      	uxth	r1, r3
 8009398:	2900      	cmp	r1, #0
 800939a:	d101      	bne.n	80093a0 <__lo0bits+0x34>
 800939c:	2010      	movs	r0, #16
 800939e:	0c1b      	lsrs	r3, r3, #16
 80093a0:	b2d9      	uxtb	r1, r3
 80093a2:	2900      	cmp	r1, #0
 80093a4:	d101      	bne.n	80093aa <__lo0bits+0x3e>
 80093a6:	3008      	adds	r0, #8
 80093a8:	0a1b      	lsrs	r3, r3, #8
 80093aa:	0719      	lsls	r1, r3, #28
 80093ac:	d101      	bne.n	80093b2 <__lo0bits+0x46>
 80093ae:	3004      	adds	r0, #4
 80093b0:	091b      	lsrs	r3, r3, #4
 80093b2:	0799      	lsls	r1, r3, #30
 80093b4:	d101      	bne.n	80093ba <__lo0bits+0x4e>
 80093b6:	3002      	adds	r0, #2
 80093b8:	089b      	lsrs	r3, r3, #2
 80093ba:	07d9      	lsls	r1, r3, #31
 80093bc:	d4e9      	bmi.n	8009392 <__lo0bits+0x26>
 80093be:	3001      	adds	r0, #1
 80093c0:	085b      	lsrs	r3, r3, #1
 80093c2:	d1e6      	bne.n	8009392 <__lo0bits+0x26>
 80093c4:	2020      	movs	r0, #32
 80093c6:	e7e2      	b.n	800938e <__lo0bits+0x22>

080093c8 <__i2b>:
 80093c8:	b510      	push	{r4, lr}
 80093ca:	000c      	movs	r4, r1
 80093cc:	2101      	movs	r1, #1
 80093ce:	f7ff ff07 	bl	80091e0 <_Balloc>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d106      	bne.n	80093e4 <__i2b+0x1c>
 80093d6:	21a0      	movs	r1, #160	; 0xa0
 80093d8:	0002      	movs	r2, r0
 80093da:	4b04      	ldr	r3, [pc, #16]	; (80093ec <__i2b+0x24>)
 80093dc:	4804      	ldr	r0, [pc, #16]	; (80093f0 <__i2b+0x28>)
 80093de:	0049      	lsls	r1, r1, #1
 80093e0:	f000 fc6c 	bl	8009cbc <__assert_func>
 80093e4:	2301      	movs	r3, #1
 80093e6:	6144      	str	r4, [r0, #20]
 80093e8:	6103      	str	r3, [r0, #16]
 80093ea:	bd10      	pop	{r4, pc}
 80093ec:	0800a2fb 	.word	0x0800a2fb
 80093f0:	0800a36c 	.word	0x0800a36c

080093f4 <__multiply>:
 80093f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093f6:	690b      	ldr	r3, [r1, #16]
 80093f8:	0014      	movs	r4, r2
 80093fa:	6912      	ldr	r2, [r2, #16]
 80093fc:	000d      	movs	r5, r1
 80093fe:	b089      	sub	sp, #36	; 0x24
 8009400:	4293      	cmp	r3, r2
 8009402:	da01      	bge.n	8009408 <__multiply+0x14>
 8009404:	0025      	movs	r5, r4
 8009406:	000c      	movs	r4, r1
 8009408:	692f      	ldr	r7, [r5, #16]
 800940a:	6926      	ldr	r6, [r4, #16]
 800940c:	6869      	ldr	r1, [r5, #4]
 800940e:	19bb      	adds	r3, r7, r6
 8009410:	9302      	str	r3, [sp, #8]
 8009412:	68ab      	ldr	r3, [r5, #8]
 8009414:	19ba      	adds	r2, r7, r6
 8009416:	4293      	cmp	r3, r2
 8009418:	da00      	bge.n	800941c <__multiply+0x28>
 800941a:	3101      	adds	r1, #1
 800941c:	f7ff fee0 	bl	80091e0 <_Balloc>
 8009420:	9001      	str	r0, [sp, #4]
 8009422:	2800      	cmp	r0, #0
 8009424:	d106      	bne.n	8009434 <__multiply+0x40>
 8009426:	215e      	movs	r1, #94	; 0x5e
 8009428:	0002      	movs	r2, r0
 800942a:	4b48      	ldr	r3, [pc, #288]	; (800954c <__multiply+0x158>)
 800942c:	4848      	ldr	r0, [pc, #288]	; (8009550 <__multiply+0x15c>)
 800942e:	31ff      	adds	r1, #255	; 0xff
 8009430:	f000 fc44 	bl	8009cbc <__assert_func>
 8009434:	9b01      	ldr	r3, [sp, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	3314      	adds	r3, #20
 800943a:	469c      	mov	ip, r3
 800943c:	19bb      	adds	r3, r7, r6
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4463      	add	r3, ip
 8009442:	9303      	str	r3, [sp, #12]
 8009444:	4663      	mov	r3, ip
 8009446:	9903      	ldr	r1, [sp, #12]
 8009448:	428b      	cmp	r3, r1
 800944a:	d32c      	bcc.n	80094a6 <__multiply+0xb2>
 800944c:	002b      	movs	r3, r5
 800944e:	0022      	movs	r2, r4
 8009450:	3314      	adds	r3, #20
 8009452:	00bf      	lsls	r7, r7, #2
 8009454:	3214      	adds	r2, #20
 8009456:	9306      	str	r3, [sp, #24]
 8009458:	00b6      	lsls	r6, r6, #2
 800945a:	19db      	adds	r3, r3, r7
 800945c:	9304      	str	r3, [sp, #16]
 800945e:	1993      	adds	r3, r2, r6
 8009460:	9307      	str	r3, [sp, #28]
 8009462:	2304      	movs	r3, #4
 8009464:	9305      	str	r3, [sp, #20]
 8009466:	002b      	movs	r3, r5
 8009468:	9904      	ldr	r1, [sp, #16]
 800946a:	3315      	adds	r3, #21
 800946c:	9200      	str	r2, [sp, #0]
 800946e:	4299      	cmp	r1, r3
 8009470:	d305      	bcc.n	800947e <__multiply+0x8a>
 8009472:	1b4b      	subs	r3, r1, r5
 8009474:	3b15      	subs	r3, #21
 8009476:	089b      	lsrs	r3, r3, #2
 8009478:	3301      	adds	r3, #1
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	9305      	str	r3, [sp, #20]
 800947e:	9b07      	ldr	r3, [sp, #28]
 8009480:	9a00      	ldr	r2, [sp, #0]
 8009482:	429a      	cmp	r2, r3
 8009484:	d311      	bcc.n	80094aa <__multiply+0xb6>
 8009486:	9b02      	ldr	r3, [sp, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	dd06      	ble.n	800949a <__multiply+0xa6>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	3b04      	subs	r3, #4
 8009490:	9303      	str	r3, [sp, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d054      	beq.n	8009544 <__multiply+0x150>
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	9a02      	ldr	r2, [sp, #8]
 800949e:	0018      	movs	r0, r3
 80094a0:	611a      	str	r2, [r3, #16]
 80094a2:	b009      	add	sp, #36	; 0x24
 80094a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a6:	c304      	stmia	r3!, {r2}
 80094a8:	e7cd      	b.n	8009446 <__multiply+0x52>
 80094aa:	9b00      	ldr	r3, [sp, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	b298      	uxth	r0, r3
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d01c      	beq.n	80094ee <__multiply+0xfa>
 80094b4:	4667      	mov	r7, ip
 80094b6:	2400      	movs	r4, #0
 80094b8:	9e06      	ldr	r6, [sp, #24]
 80094ba:	ce02      	ldmia	r6!, {r1}
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	b28b      	uxth	r3, r1
 80094c0:	4343      	muls	r3, r0
 80094c2:	0c09      	lsrs	r1, r1, #16
 80094c4:	4341      	muls	r1, r0
 80094c6:	b292      	uxth	r2, r2
 80094c8:	189b      	adds	r3, r3, r2
 80094ca:	191b      	adds	r3, r3, r4
 80094cc:	000c      	movs	r4, r1
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	0c11      	lsrs	r1, r2, #16
 80094d2:	1861      	adds	r1, r4, r1
 80094d4:	0c1c      	lsrs	r4, r3, #16
 80094d6:	1909      	adds	r1, r1, r4
 80094d8:	0c0c      	lsrs	r4, r1, #16
 80094da:	b29b      	uxth	r3, r3
 80094dc:	0409      	lsls	r1, r1, #16
 80094de:	430b      	orrs	r3, r1
 80094e0:	c708      	stmia	r7!, {r3}
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	42b3      	cmp	r3, r6
 80094e6:	d8e8      	bhi.n	80094ba <__multiply+0xc6>
 80094e8:	4663      	mov	r3, ip
 80094ea:	9a05      	ldr	r2, [sp, #20]
 80094ec:	509c      	str	r4, [r3, r2]
 80094ee:	9b00      	ldr	r3, [sp, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	0c1e      	lsrs	r6, r3, #16
 80094f4:	d020      	beq.n	8009538 <__multiply+0x144>
 80094f6:	4663      	mov	r3, ip
 80094f8:	002c      	movs	r4, r5
 80094fa:	4660      	mov	r0, ip
 80094fc:	2700      	movs	r7, #0
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3414      	adds	r4, #20
 8009502:	6822      	ldr	r2, [r4, #0]
 8009504:	b29b      	uxth	r3, r3
 8009506:	b291      	uxth	r1, r2
 8009508:	4371      	muls	r1, r6
 800950a:	6802      	ldr	r2, [r0, #0]
 800950c:	0c12      	lsrs	r2, r2, #16
 800950e:	1889      	adds	r1, r1, r2
 8009510:	19cf      	adds	r7, r1, r7
 8009512:	0439      	lsls	r1, r7, #16
 8009514:	430b      	orrs	r3, r1
 8009516:	6003      	str	r3, [r0, #0]
 8009518:	cc02      	ldmia	r4!, {r1}
 800951a:	6843      	ldr	r3, [r0, #4]
 800951c:	0c09      	lsrs	r1, r1, #16
 800951e:	4371      	muls	r1, r6
 8009520:	b29b      	uxth	r3, r3
 8009522:	0c3f      	lsrs	r7, r7, #16
 8009524:	18cb      	adds	r3, r1, r3
 8009526:	9a04      	ldr	r2, [sp, #16]
 8009528:	19db      	adds	r3, r3, r7
 800952a:	0c1f      	lsrs	r7, r3, #16
 800952c:	3004      	adds	r0, #4
 800952e:	42a2      	cmp	r2, r4
 8009530:	d8e7      	bhi.n	8009502 <__multiply+0x10e>
 8009532:	4662      	mov	r2, ip
 8009534:	9905      	ldr	r1, [sp, #20]
 8009536:	5053      	str	r3, [r2, r1]
 8009538:	9b00      	ldr	r3, [sp, #0]
 800953a:	3304      	adds	r3, #4
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	2304      	movs	r3, #4
 8009540:	449c      	add	ip, r3
 8009542:	e79c      	b.n	800947e <__multiply+0x8a>
 8009544:	9b02      	ldr	r3, [sp, #8]
 8009546:	3b01      	subs	r3, #1
 8009548:	9302      	str	r3, [sp, #8]
 800954a:	e79c      	b.n	8009486 <__multiply+0x92>
 800954c:	0800a2fb 	.word	0x0800a2fb
 8009550:	0800a36c 	.word	0x0800a36c

08009554 <__pow5mult>:
 8009554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009556:	2303      	movs	r3, #3
 8009558:	0015      	movs	r5, r2
 800955a:	0007      	movs	r7, r0
 800955c:	000e      	movs	r6, r1
 800955e:	401a      	ands	r2, r3
 8009560:	421d      	tst	r5, r3
 8009562:	d008      	beq.n	8009576 <__pow5mult+0x22>
 8009564:	4925      	ldr	r1, [pc, #148]	; (80095fc <__pow5mult+0xa8>)
 8009566:	3a01      	subs	r2, #1
 8009568:	0092      	lsls	r2, r2, #2
 800956a:	5852      	ldr	r2, [r2, r1]
 800956c:	2300      	movs	r3, #0
 800956e:	0031      	movs	r1, r6
 8009570:	f7ff fe9e 	bl	80092b0 <__multadd>
 8009574:	0006      	movs	r6, r0
 8009576:	10ad      	asrs	r5, r5, #2
 8009578:	d03d      	beq.n	80095f6 <__pow5mult+0xa2>
 800957a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800957c:	2c00      	cmp	r4, #0
 800957e:	d10f      	bne.n	80095a0 <__pow5mult+0x4c>
 8009580:	2010      	movs	r0, #16
 8009582:	f7fd fe73 	bl	800726c <malloc>
 8009586:	1e02      	subs	r2, r0, #0
 8009588:	6278      	str	r0, [r7, #36]	; 0x24
 800958a:	d105      	bne.n	8009598 <__pow5mult+0x44>
 800958c:	21d7      	movs	r1, #215	; 0xd7
 800958e:	4b1c      	ldr	r3, [pc, #112]	; (8009600 <__pow5mult+0xac>)
 8009590:	481c      	ldr	r0, [pc, #112]	; (8009604 <__pow5mult+0xb0>)
 8009592:	0049      	lsls	r1, r1, #1
 8009594:	f000 fb92 	bl	8009cbc <__assert_func>
 8009598:	6044      	str	r4, [r0, #4]
 800959a:	6084      	str	r4, [r0, #8]
 800959c:	6004      	str	r4, [r0, #0]
 800959e:	60c4      	str	r4, [r0, #12]
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	689c      	ldr	r4, [r3, #8]
 80095a4:	9301      	str	r3, [sp, #4]
 80095a6:	2c00      	cmp	r4, #0
 80095a8:	d108      	bne.n	80095bc <__pow5mult+0x68>
 80095aa:	0038      	movs	r0, r7
 80095ac:	4916      	ldr	r1, [pc, #88]	; (8009608 <__pow5mult+0xb4>)
 80095ae:	f7ff ff0b 	bl	80093c8 <__i2b>
 80095b2:	9b01      	ldr	r3, [sp, #4]
 80095b4:	0004      	movs	r4, r0
 80095b6:	6098      	str	r0, [r3, #8]
 80095b8:	2300      	movs	r3, #0
 80095ba:	6003      	str	r3, [r0, #0]
 80095bc:	2301      	movs	r3, #1
 80095be:	421d      	tst	r5, r3
 80095c0:	d00a      	beq.n	80095d8 <__pow5mult+0x84>
 80095c2:	0031      	movs	r1, r6
 80095c4:	0022      	movs	r2, r4
 80095c6:	0038      	movs	r0, r7
 80095c8:	f7ff ff14 	bl	80093f4 <__multiply>
 80095cc:	0031      	movs	r1, r6
 80095ce:	9001      	str	r0, [sp, #4]
 80095d0:	0038      	movs	r0, r7
 80095d2:	f7ff fe49 	bl	8009268 <_Bfree>
 80095d6:	9e01      	ldr	r6, [sp, #4]
 80095d8:	106d      	asrs	r5, r5, #1
 80095da:	d00c      	beq.n	80095f6 <__pow5mult+0xa2>
 80095dc:	6820      	ldr	r0, [r4, #0]
 80095de:	2800      	cmp	r0, #0
 80095e0:	d107      	bne.n	80095f2 <__pow5mult+0x9e>
 80095e2:	0022      	movs	r2, r4
 80095e4:	0021      	movs	r1, r4
 80095e6:	0038      	movs	r0, r7
 80095e8:	f7ff ff04 	bl	80093f4 <__multiply>
 80095ec:	2300      	movs	r3, #0
 80095ee:	6020      	str	r0, [r4, #0]
 80095f0:	6003      	str	r3, [r0, #0]
 80095f2:	0004      	movs	r4, r0
 80095f4:	e7e2      	b.n	80095bc <__pow5mult+0x68>
 80095f6:	0030      	movs	r0, r6
 80095f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095fa:	46c0      	nop			; (mov r8, r8)
 80095fc:	0800a4c0 	.word	0x0800a4c0
 8009600:	0800a285 	.word	0x0800a285
 8009604:	0800a36c 	.word	0x0800a36c
 8009608:	00000271 	.word	0x00000271

0800960c <__lshift>:
 800960c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800960e:	000c      	movs	r4, r1
 8009610:	0017      	movs	r7, r2
 8009612:	6923      	ldr	r3, [r4, #16]
 8009614:	1155      	asrs	r5, r2, #5
 8009616:	b087      	sub	sp, #28
 8009618:	18eb      	adds	r3, r5, r3
 800961a:	9302      	str	r3, [sp, #8]
 800961c:	3301      	adds	r3, #1
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	6849      	ldr	r1, [r1, #4]
 8009622:	68a3      	ldr	r3, [r4, #8]
 8009624:	9004      	str	r0, [sp, #16]
 8009626:	9a01      	ldr	r2, [sp, #4]
 8009628:	4293      	cmp	r3, r2
 800962a:	db11      	blt.n	8009650 <__lshift+0x44>
 800962c:	9804      	ldr	r0, [sp, #16]
 800962e:	f7ff fdd7 	bl	80091e0 <_Balloc>
 8009632:	0002      	movs	r2, r0
 8009634:	2300      	movs	r3, #0
 8009636:	3214      	adds	r2, #20
 8009638:	0006      	movs	r6, r0
 800963a:	0011      	movs	r1, r2
 800963c:	9203      	str	r2, [sp, #12]
 800963e:	4298      	cmp	r0, r3
 8009640:	d10d      	bne.n	800965e <__lshift+0x52>
 8009642:	21da      	movs	r1, #218	; 0xda
 8009644:	0002      	movs	r2, r0
 8009646:	4b27      	ldr	r3, [pc, #156]	; (80096e4 <__lshift+0xd8>)
 8009648:	4827      	ldr	r0, [pc, #156]	; (80096e8 <__lshift+0xdc>)
 800964a:	31ff      	adds	r1, #255	; 0xff
 800964c:	f000 fb36 	bl	8009cbc <__assert_func>
 8009650:	3101      	adds	r1, #1
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	e7e7      	b.n	8009626 <__lshift+0x1a>
 8009656:	2200      	movs	r2, #0
 8009658:	0098      	lsls	r0, r3, #2
 800965a:	500a      	str	r2, [r1, r0]
 800965c:	3301      	adds	r3, #1
 800965e:	42ab      	cmp	r3, r5
 8009660:	dbf9      	blt.n	8009656 <__lshift+0x4a>
 8009662:	43eb      	mvns	r3, r5
 8009664:	17db      	asrs	r3, r3, #31
 8009666:	401d      	ands	r5, r3
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	00ad      	lsls	r5, r5, #2
 800966c:	211f      	movs	r1, #31
 800966e:	0038      	movs	r0, r7
 8009670:	195d      	adds	r5, r3, r5
 8009672:	0023      	movs	r3, r4
 8009674:	6922      	ldr	r2, [r4, #16]
 8009676:	3314      	adds	r3, #20
 8009678:	0092      	lsls	r2, r2, #2
 800967a:	4008      	ands	r0, r1
 800967c:	4684      	mov	ip, r0
 800967e:	189a      	adds	r2, r3, r2
 8009680:	420f      	tst	r7, r1
 8009682:	d02a      	beq.n	80096da <__lshift+0xce>
 8009684:	3101      	adds	r1, #1
 8009686:	1a09      	subs	r1, r1, r0
 8009688:	9105      	str	r1, [sp, #20]
 800968a:	2100      	movs	r1, #0
 800968c:	9503      	str	r5, [sp, #12]
 800968e:	4667      	mov	r7, ip
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	40b8      	lsls	r0, r7
 8009694:	4301      	orrs	r1, r0
 8009696:	9803      	ldr	r0, [sp, #12]
 8009698:	c002      	stmia	r0!, {r1}
 800969a:	cb02      	ldmia	r3!, {r1}
 800969c:	9003      	str	r0, [sp, #12]
 800969e:	9805      	ldr	r0, [sp, #20]
 80096a0:	40c1      	lsrs	r1, r0
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d8f3      	bhi.n	800968e <__lshift+0x82>
 80096a6:	0020      	movs	r0, r4
 80096a8:	3015      	adds	r0, #21
 80096aa:	2304      	movs	r3, #4
 80096ac:	4282      	cmp	r2, r0
 80096ae:	d304      	bcc.n	80096ba <__lshift+0xae>
 80096b0:	1b13      	subs	r3, r2, r4
 80096b2:	3b15      	subs	r3, #21
 80096b4:	089b      	lsrs	r3, r3, #2
 80096b6:	3301      	adds	r3, #1
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	50e9      	str	r1, [r5, r3]
 80096bc:	2900      	cmp	r1, #0
 80096be:	d002      	beq.n	80096c6 <__lshift+0xba>
 80096c0:	9b02      	ldr	r3, [sp, #8]
 80096c2:	3302      	adds	r3, #2
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	9b01      	ldr	r3, [sp, #4]
 80096c8:	9804      	ldr	r0, [sp, #16]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	0021      	movs	r1, r4
 80096ce:	6133      	str	r3, [r6, #16]
 80096d0:	f7ff fdca 	bl	8009268 <_Bfree>
 80096d4:	0030      	movs	r0, r6
 80096d6:	b007      	add	sp, #28
 80096d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096da:	cb02      	ldmia	r3!, {r1}
 80096dc:	c502      	stmia	r5!, {r1}
 80096de:	429a      	cmp	r2, r3
 80096e0:	d8fb      	bhi.n	80096da <__lshift+0xce>
 80096e2:	e7f0      	b.n	80096c6 <__lshift+0xba>
 80096e4:	0800a2fb 	.word	0x0800a2fb
 80096e8:	0800a36c 	.word	0x0800a36c

080096ec <__mcmp>:
 80096ec:	6902      	ldr	r2, [r0, #16]
 80096ee:	690b      	ldr	r3, [r1, #16]
 80096f0:	b530      	push	{r4, r5, lr}
 80096f2:	0004      	movs	r4, r0
 80096f4:	1ad0      	subs	r0, r2, r3
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d10d      	bne.n	8009716 <__mcmp+0x2a>
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	3414      	adds	r4, #20
 80096fe:	3114      	adds	r1, #20
 8009700:	18e2      	adds	r2, r4, r3
 8009702:	18c9      	adds	r1, r1, r3
 8009704:	3a04      	subs	r2, #4
 8009706:	3904      	subs	r1, #4
 8009708:	6815      	ldr	r5, [r2, #0]
 800970a:	680b      	ldr	r3, [r1, #0]
 800970c:	429d      	cmp	r5, r3
 800970e:	d003      	beq.n	8009718 <__mcmp+0x2c>
 8009710:	2001      	movs	r0, #1
 8009712:	429d      	cmp	r5, r3
 8009714:	d303      	bcc.n	800971e <__mcmp+0x32>
 8009716:	bd30      	pop	{r4, r5, pc}
 8009718:	4294      	cmp	r4, r2
 800971a:	d3f3      	bcc.n	8009704 <__mcmp+0x18>
 800971c:	e7fb      	b.n	8009716 <__mcmp+0x2a>
 800971e:	4240      	negs	r0, r0
 8009720:	e7f9      	b.n	8009716 <__mcmp+0x2a>
	...

08009724 <__mdiff>:
 8009724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009726:	000e      	movs	r6, r1
 8009728:	0007      	movs	r7, r0
 800972a:	0011      	movs	r1, r2
 800972c:	0030      	movs	r0, r6
 800972e:	b087      	sub	sp, #28
 8009730:	0014      	movs	r4, r2
 8009732:	f7ff ffdb 	bl	80096ec <__mcmp>
 8009736:	1e05      	subs	r5, r0, #0
 8009738:	d110      	bne.n	800975c <__mdiff+0x38>
 800973a:	0001      	movs	r1, r0
 800973c:	0038      	movs	r0, r7
 800973e:	f7ff fd4f 	bl	80091e0 <_Balloc>
 8009742:	1e02      	subs	r2, r0, #0
 8009744:	d104      	bne.n	8009750 <__mdiff+0x2c>
 8009746:	4b40      	ldr	r3, [pc, #256]	; (8009848 <__mdiff+0x124>)
 8009748:	4940      	ldr	r1, [pc, #256]	; (800984c <__mdiff+0x128>)
 800974a:	4841      	ldr	r0, [pc, #260]	; (8009850 <__mdiff+0x12c>)
 800974c:	f000 fab6 	bl	8009cbc <__assert_func>
 8009750:	2301      	movs	r3, #1
 8009752:	6145      	str	r5, [r0, #20]
 8009754:	6103      	str	r3, [r0, #16]
 8009756:	0010      	movs	r0, r2
 8009758:	b007      	add	sp, #28
 800975a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975c:	2301      	movs	r3, #1
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	2800      	cmp	r0, #0
 8009762:	db04      	blt.n	800976e <__mdiff+0x4a>
 8009764:	0023      	movs	r3, r4
 8009766:	0034      	movs	r4, r6
 8009768:	001e      	movs	r6, r3
 800976a:	2300      	movs	r3, #0
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	0038      	movs	r0, r7
 8009770:	6861      	ldr	r1, [r4, #4]
 8009772:	f7ff fd35 	bl	80091e0 <_Balloc>
 8009776:	1e02      	subs	r2, r0, #0
 8009778:	d103      	bne.n	8009782 <__mdiff+0x5e>
 800977a:	2190      	movs	r1, #144	; 0x90
 800977c:	4b32      	ldr	r3, [pc, #200]	; (8009848 <__mdiff+0x124>)
 800977e:	0089      	lsls	r1, r1, #2
 8009780:	e7e3      	b.n	800974a <__mdiff+0x26>
 8009782:	9b01      	ldr	r3, [sp, #4]
 8009784:	2700      	movs	r7, #0
 8009786:	60c3      	str	r3, [r0, #12]
 8009788:	6920      	ldr	r0, [r4, #16]
 800978a:	3414      	adds	r4, #20
 800978c:	9401      	str	r4, [sp, #4]
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	0084      	lsls	r4, r0, #2
 8009792:	191b      	adds	r3, r3, r4
 8009794:	0034      	movs	r4, r6
 8009796:	9302      	str	r3, [sp, #8]
 8009798:	6933      	ldr	r3, [r6, #16]
 800979a:	3414      	adds	r4, #20
 800979c:	0099      	lsls	r1, r3, #2
 800979e:	1863      	adds	r3, r4, r1
 80097a0:	9303      	str	r3, [sp, #12]
 80097a2:	0013      	movs	r3, r2
 80097a4:	3314      	adds	r3, #20
 80097a6:	469c      	mov	ip, r3
 80097a8:	9305      	str	r3, [sp, #20]
 80097aa:	9b01      	ldr	r3, [sp, #4]
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	9b04      	ldr	r3, [sp, #16]
 80097b0:	cc02      	ldmia	r4!, {r1}
 80097b2:	cb20      	ldmia	r3!, {r5}
 80097b4:	9304      	str	r3, [sp, #16]
 80097b6:	b2ab      	uxth	r3, r5
 80097b8:	19df      	adds	r7, r3, r7
 80097ba:	b28b      	uxth	r3, r1
 80097bc:	1afb      	subs	r3, r7, r3
 80097be:	0c2d      	lsrs	r5, r5, #16
 80097c0:	0c09      	lsrs	r1, r1, #16
 80097c2:	1a69      	subs	r1, r5, r1
 80097c4:	141d      	asrs	r5, r3, #16
 80097c6:	1949      	adds	r1, r1, r5
 80097c8:	140f      	asrs	r7, r1, #16
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	0409      	lsls	r1, r1, #16
 80097ce:	430b      	orrs	r3, r1
 80097d0:	4661      	mov	r1, ip
 80097d2:	c108      	stmia	r1!, {r3}
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	468c      	mov	ip, r1
 80097d8:	42a3      	cmp	r3, r4
 80097da:	d8e8      	bhi.n	80097ae <__mdiff+0x8a>
 80097dc:	0031      	movs	r1, r6
 80097de:	9c03      	ldr	r4, [sp, #12]
 80097e0:	3115      	adds	r1, #21
 80097e2:	2304      	movs	r3, #4
 80097e4:	428c      	cmp	r4, r1
 80097e6:	d304      	bcc.n	80097f2 <__mdiff+0xce>
 80097e8:	1ba3      	subs	r3, r4, r6
 80097ea:	3b15      	subs	r3, #21
 80097ec:	089b      	lsrs	r3, r3, #2
 80097ee:	3301      	adds	r3, #1
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	9901      	ldr	r1, [sp, #4]
 80097f4:	18cc      	adds	r4, r1, r3
 80097f6:	9905      	ldr	r1, [sp, #20]
 80097f8:	0026      	movs	r6, r4
 80097fa:	18cb      	adds	r3, r1, r3
 80097fc:	469c      	mov	ip, r3
 80097fe:	9902      	ldr	r1, [sp, #8]
 8009800:	428e      	cmp	r6, r1
 8009802:	d310      	bcc.n	8009826 <__mdiff+0x102>
 8009804:	9e02      	ldr	r6, [sp, #8]
 8009806:	1ee5      	subs	r5, r4, #3
 8009808:	2100      	movs	r1, #0
 800980a:	42ae      	cmp	r6, r5
 800980c:	d304      	bcc.n	8009818 <__mdiff+0xf4>
 800980e:	0031      	movs	r1, r6
 8009810:	3103      	adds	r1, #3
 8009812:	1b09      	subs	r1, r1, r4
 8009814:	0889      	lsrs	r1, r1, #2
 8009816:	0089      	lsls	r1, r1, #2
 8009818:	185b      	adds	r3, r3, r1
 800981a:	3b04      	subs	r3, #4
 800981c:	6819      	ldr	r1, [r3, #0]
 800981e:	2900      	cmp	r1, #0
 8009820:	d00f      	beq.n	8009842 <__mdiff+0x11e>
 8009822:	6110      	str	r0, [r2, #16]
 8009824:	e797      	b.n	8009756 <__mdiff+0x32>
 8009826:	ce02      	ldmia	r6!, {r1}
 8009828:	b28d      	uxth	r5, r1
 800982a:	19ed      	adds	r5, r5, r7
 800982c:	0c0f      	lsrs	r7, r1, #16
 800982e:	1429      	asrs	r1, r5, #16
 8009830:	1879      	adds	r1, r7, r1
 8009832:	140f      	asrs	r7, r1, #16
 8009834:	b2ad      	uxth	r5, r5
 8009836:	0409      	lsls	r1, r1, #16
 8009838:	430d      	orrs	r5, r1
 800983a:	4661      	mov	r1, ip
 800983c:	c120      	stmia	r1!, {r5}
 800983e:	468c      	mov	ip, r1
 8009840:	e7dd      	b.n	80097fe <__mdiff+0xda>
 8009842:	3801      	subs	r0, #1
 8009844:	e7e9      	b.n	800981a <__mdiff+0xf6>
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	0800a2fb 	.word	0x0800a2fb
 800984c:	00000232 	.word	0x00000232
 8009850:	0800a36c 	.word	0x0800a36c

08009854 <__d2b>:
 8009854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009856:	2101      	movs	r1, #1
 8009858:	0014      	movs	r4, r2
 800985a:	001e      	movs	r6, r3
 800985c:	9f08      	ldr	r7, [sp, #32]
 800985e:	f7ff fcbf 	bl	80091e0 <_Balloc>
 8009862:	1e05      	subs	r5, r0, #0
 8009864:	d105      	bne.n	8009872 <__d2b+0x1e>
 8009866:	0002      	movs	r2, r0
 8009868:	4b26      	ldr	r3, [pc, #152]	; (8009904 <__d2b+0xb0>)
 800986a:	4927      	ldr	r1, [pc, #156]	; (8009908 <__d2b+0xb4>)
 800986c:	4827      	ldr	r0, [pc, #156]	; (800990c <__d2b+0xb8>)
 800986e:	f000 fa25 	bl	8009cbc <__assert_func>
 8009872:	0333      	lsls	r3, r6, #12
 8009874:	0076      	lsls	r6, r6, #1
 8009876:	0b1b      	lsrs	r3, r3, #12
 8009878:	0d76      	lsrs	r6, r6, #21
 800987a:	d124      	bne.n	80098c6 <__d2b+0x72>
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	2c00      	cmp	r4, #0
 8009880:	d027      	beq.n	80098d2 <__d2b+0x7e>
 8009882:	4668      	mov	r0, sp
 8009884:	9400      	str	r4, [sp, #0]
 8009886:	f7ff fd71 	bl	800936c <__lo0bits>
 800988a:	9c00      	ldr	r4, [sp, #0]
 800988c:	2800      	cmp	r0, #0
 800988e:	d01e      	beq.n	80098ce <__d2b+0x7a>
 8009890:	9b01      	ldr	r3, [sp, #4]
 8009892:	2120      	movs	r1, #32
 8009894:	001a      	movs	r2, r3
 8009896:	1a09      	subs	r1, r1, r0
 8009898:	408a      	lsls	r2, r1
 800989a:	40c3      	lsrs	r3, r0
 800989c:	4322      	orrs	r2, r4
 800989e:	616a      	str	r2, [r5, #20]
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	9c01      	ldr	r4, [sp, #4]
 80098a4:	61ac      	str	r4, [r5, #24]
 80098a6:	1e63      	subs	r3, r4, #1
 80098a8:	419c      	sbcs	r4, r3
 80098aa:	3401      	adds	r4, #1
 80098ac:	612c      	str	r4, [r5, #16]
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	d018      	beq.n	80098e4 <__d2b+0x90>
 80098b2:	4b17      	ldr	r3, [pc, #92]	; (8009910 <__d2b+0xbc>)
 80098b4:	18f6      	adds	r6, r6, r3
 80098b6:	2335      	movs	r3, #53	; 0x35
 80098b8:	1836      	adds	r6, r6, r0
 80098ba:	1a18      	subs	r0, r3, r0
 80098bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098be:	603e      	str	r6, [r7, #0]
 80098c0:	6018      	str	r0, [r3, #0]
 80098c2:	0028      	movs	r0, r5
 80098c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098c6:	2280      	movs	r2, #128	; 0x80
 80098c8:	0352      	lsls	r2, r2, #13
 80098ca:	4313      	orrs	r3, r2
 80098cc:	e7d6      	b.n	800987c <__d2b+0x28>
 80098ce:	616c      	str	r4, [r5, #20]
 80098d0:	e7e7      	b.n	80098a2 <__d2b+0x4e>
 80098d2:	a801      	add	r0, sp, #4
 80098d4:	f7ff fd4a 	bl	800936c <__lo0bits>
 80098d8:	2401      	movs	r4, #1
 80098da:	9b01      	ldr	r3, [sp, #4]
 80098dc:	612c      	str	r4, [r5, #16]
 80098de:	616b      	str	r3, [r5, #20]
 80098e0:	3020      	adds	r0, #32
 80098e2:	e7e4      	b.n	80098ae <__d2b+0x5a>
 80098e4:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <__d2b+0xc0>)
 80098e6:	18c0      	adds	r0, r0, r3
 80098e8:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <__d2b+0xc4>)
 80098ea:	6038      	str	r0, [r7, #0]
 80098ec:	18e3      	adds	r3, r4, r3
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	18eb      	adds	r3, r5, r3
 80098f2:	6958      	ldr	r0, [r3, #20]
 80098f4:	f7ff fd20 	bl	8009338 <__hi0bits>
 80098f8:	0164      	lsls	r4, r4, #5
 80098fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098fc:	1a24      	subs	r4, r4, r0
 80098fe:	601c      	str	r4, [r3, #0]
 8009900:	e7df      	b.n	80098c2 <__d2b+0x6e>
 8009902:	46c0      	nop			; (mov r8, r8)
 8009904:	0800a2fb 	.word	0x0800a2fb
 8009908:	0000030a 	.word	0x0000030a
 800990c:	0800a36c 	.word	0x0800a36c
 8009910:	fffffbcd 	.word	0xfffffbcd
 8009914:	fffffbce 	.word	0xfffffbce
 8009918:	3fffffff 	.word	0x3fffffff

0800991c <_calloc_r>:
 800991c:	434a      	muls	r2, r1
 800991e:	b570      	push	{r4, r5, r6, lr}
 8009920:	0011      	movs	r1, r2
 8009922:	0015      	movs	r5, r2
 8009924:	f7fd fcfe 	bl	8007324 <_malloc_r>
 8009928:	1e04      	subs	r4, r0, #0
 800992a:	d003      	beq.n	8009934 <_calloc_r+0x18>
 800992c:	002a      	movs	r2, r5
 800992e:	2100      	movs	r1, #0
 8009930:	f7fd fca6 	bl	8007280 <memset>
 8009934:	0020      	movs	r0, r4
 8009936:	bd70      	pop	{r4, r5, r6, pc}

08009938 <__sfputc_r>:
 8009938:	6893      	ldr	r3, [r2, #8]
 800993a:	b510      	push	{r4, lr}
 800993c:	3b01      	subs	r3, #1
 800993e:	6093      	str	r3, [r2, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	da04      	bge.n	800994e <__sfputc_r+0x16>
 8009944:	6994      	ldr	r4, [r2, #24]
 8009946:	42a3      	cmp	r3, r4
 8009948:	db07      	blt.n	800995a <__sfputc_r+0x22>
 800994a:	290a      	cmp	r1, #10
 800994c:	d005      	beq.n	800995a <__sfputc_r+0x22>
 800994e:	6813      	ldr	r3, [r2, #0]
 8009950:	1c58      	adds	r0, r3, #1
 8009952:	6010      	str	r0, [r2, #0]
 8009954:	7019      	strb	r1, [r3, #0]
 8009956:	0008      	movs	r0, r1
 8009958:	bd10      	pop	{r4, pc}
 800995a:	f7fe fa63 	bl	8007e24 <__swbuf_r>
 800995e:	0001      	movs	r1, r0
 8009960:	e7f9      	b.n	8009956 <__sfputc_r+0x1e>

08009962 <__sfputs_r>:
 8009962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009964:	0006      	movs	r6, r0
 8009966:	000f      	movs	r7, r1
 8009968:	0014      	movs	r4, r2
 800996a:	18d5      	adds	r5, r2, r3
 800996c:	42ac      	cmp	r4, r5
 800996e:	d101      	bne.n	8009974 <__sfputs_r+0x12>
 8009970:	2000      	movs	r0, #0
 8009972:	e007      	b.n	8009984 <__sfputs_r+0x22>
 8009974:	7821      	ldrb	r1, [r4, #0]
 8009976:	003a      	movs	r2, r7
 8009978:	0030      	movs	r0, r6
 800997a:	f7ff ffdd 	bl	8009938 <__sfputc_r>
 800997e:	3401      	adds	r4, #1
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d1f3      	bne.n	800996c <__sfputs_r+0xa>
 8009984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009988 <_vfiprintf_r>:
 8009988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800998a:	b0a1      	sub	sp, #132	; 0x84
 800998c:	0006      	movs	r6, r0
 800998e:	000c      	movs	r4, r1
 8009990:	001f      	movs	r7, r3
 8009992:	9203      	str	r2, [sp, #12]
 8009994:	2800      	cmp	r0, #0
 8009996:	d004      	beq.n	80099a2 <_vfiprintf_r+0x1a>
 8009998:	6983      	ldr	r3, [r0, #24]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <_vfiprintf_r+0x1a>
 800999e:	f7ff fae7 	bl	8008f70 <__sinit>
 80099a2:	4b8e      	ldr	r3, [pc, #568]	; (8009bdc <_vfiprintf_r+0x254>)
 80099a4:	429c      	cmp	r4, r3
 80099a6:	d11c      	bne.n	80099e2 <_vfiprintf_r+0x5a>
 80099a8:	6874      	ldr	r4, [r6, #4]
 80099aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ac:	07db      	lsls	r3, r3, #31
 80099ae:	d405      	bmi.n	80099bc <_vfiprintf_r+0x34>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	059b      	lsls	r3, r3, #22
 80099b4:	d402      	bmi.n	80099bc <_vfiprintf_r+0x34>
 80099b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099b8:	f7ff fb7f 	bl	80090ba <__retarget_lock_acquire_recursive>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	071b      	lsls	r3, r3, #28
 80099c0:	d502      	bpl.n	80099c8 <_vfiprintf_r+0x40>
 80099c2:	6923      	ldr	r3, [r4, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d11d      	bne.n	8009a04 <_vfiprintf_r+0x7c>
 80099c8:	0021      	movs	r1, r4
 80099ca:	0030      	movs	r0, r6
 80099cc:	f7fe fa80 	bl	8007ed0 <__swsetup_r>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d017      	beq.n	8009a04 <_vfiprintf_r+0x7c>
 80099d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099d6:	07db      	lsls	r3, r3, #31
 80099d8:	d50d      	bpl.n	80099f6 <_vfiprintf_r+0x6e>
 80099da:	2001      	movs	r0, #1
 80099dc:	4240      	negs	r0, r0
 80099de:	b021      	add	sp, #132	; 0x84
 80099e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e2:	4b7f      	ldr	r3, [pc, #508]	; (8009be0 <_vfiprintf_r+0x258>)
 80099e4:	429c      	cmp	r4, r3
 80099e6:	d101      	bne.n	80099ec <_vfiprintf_r+0x64>
 80099e8:	68b4      	ldr	r4, [r6, #8]
 80099ea:	e7de      	b.n	80099aa <_vfiprintf_r+0x22>
 80099ec:	4b7d      	ldr	r3, [pc, #500]	; (8009be4 <_vfiprintf_r+0x25c>)
 80099ee:	429c      	cmp	r4, r3
 80099f0:	d1db      	bne.n	80099aa <_vfiprintf_r+0x22>
 80099f2:	68f4      	ldr	r4, [r6, #12]
 80099f4:	e7d9      	b.n	80099aa <_vfiprintf_r+0x22>
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	059b      	lsls	r3, r3, #22
 80099fa:	d4ee      	bmi.n	80099da <_vfiprintf_r+0x52>
 80099fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099fe:	f7ff fb5d 	bl	80090bc <__retarget_lock_release_recursive>
 8009a02:	e7ea      	b.n	80099da <_vfiprintf_r+0x52>
 8009a04:	2300      	movs	r3, #0
 8009a06:	ad08      	add	r5, sp, #32
 8009a08:	616b      	str	r3, [r5, #20]
 8009a0a:	3320      	adds	r3, #32
 8009a0c:	766b      	strb	r3, [r5, #25]
 8009a0e:	3310      	adds	r3, #16
 8009a10:	76ab      	strb	r3, [r5, #26]
 8009a12:	9707      	str	r7, [sp, #28]
 8009a14:	9f03      	ldr	r7, [sp, #12]
 8009a16:	783b      	ldrb	r3, [r7, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <_vfiprintf_r+0x98>
 8009a1c:	2b25      	cmp	r3, #37	; 0x25
 8009a1e:	d14e      	bne.n	8009abe <_vfiprintf_r+0x136>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	1afb      	subs	r3, r7, r3
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	9b03      	ldr	r3, [sp, #12]
 8009a28:	429f      	cmp	r7, r3
 8009a2a:	d00d      	beq.n	8009a48 <_vfiprintf_r+0xc0>
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	0021      	movs	r1, r4
 8009a30:	0030      	movs	r0, r6
 8009a32:	9a03      	ldr	r2, [sp, #12]
 8009a34:	f7ff ff95 	bl	8009962 <__sfputs_r>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d100      	bne.n	8009a3e <_vfiprintf_r+0xb6>
 8009a3c:	e0b5      	b.n	8009baa <_vfiprintf_r+0x222>
 8009a3e:	696a      	ldr	r2, [r5, #20]
 8009a40:	9b05      	ldr	r3, [sp, #20]
 8009a42:	4694      	mov	ip, r2
 8009a44:	4463      	add	r3, ip
 8009a46:	616b      	str	r3, [r5, #20]
 8009a48:	783b      	ldrb	r3, [r7, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d100      	bne.n	8009a50 <_vfiprintf_r+0xc8>
 8009a4e:	e0ac      	b.n	8009baa <_vfiprintf_r+0x222>
 8009a50:	2201      	movs	r2, #1
 8009a52:	1c7b      	adds	r3, r7, #1
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	2300      	movs	r3, #0
 8009a58:	4252      	negs	r2, r2
 8009a5a:	606a      	str	r2, [r5, #4]
 8009a5c:	a904      	add	r1, sp, #16
 8009a5e:	3254      	adds	r2, #84	; 0x54
 8009a60:	1852      	adds	r2, r2, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	60eb      	str	r3, [r5, #12]
 8009a66:	60ab      	str	r3, [r5, #8]
 8009a68:	7013      	strb	r3, [r2, #0]
 8009a6a:	65ab      	str	r3, [r5, #88]	; 0x58
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	2205      	movs	r2, #5
 8009a70:	7819      	ldrb	r1, [r3, #0]
 8009a72:	485d      	ldr	r0, [pc, #372]	; (8009be8 <_vfiprintf_r+0x260>)
 8009a74:	f7ff fb90 	bl	8009198 <memchr>
 8009a78:	9b03      	ldr	r3, [sp, #12]
 8009a7a:	1c5f      	adds	r7, r3, #1
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d120      	bne.n	8009ac2 <_vfiprintf_r+0x13a>
 8009a80:	682a      	ldr	r2, [r5, #0]
 8009a82:	06d3      	lsls	r3, r2, #27
 8009a84:	d504      	bpl.n	8009a90 <_vfiprintf_r+0x108>
 8009a86:	2353      	movs	r3, #83	; 0x53
 8009a88:	a904      	add	r1, sp, #16
 8009a8a:	185b      	adds	r3, r3, r1
 8009a8c:	2120      	movs	r1, #32
 8009a8e:	7019      	strb	r1, [r3, #0]
 8009a90:	0713      	lsls	r3, r2, #28
 8009a92:	d504      	bpl.n	8009a9e <_vfiprintf_r+0x116>
 8009a94:	2353      	movs	r3, #83	; 0x53
 8009a96:	a904      	add	r1, sp, #16
 8009a98:	185b      	adds	r3, r3, r1
 8009a9a:	212b      	movs	r1, #43	; 0x2b
 8009a9c:	7019      	strb	r1, [r3, #0]
 8009a9e:	9b03      	ldr	r3, [sp, #12]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa4:	d016      	beq.n	8009ad4 <_vfiprintf_r+0x14c>
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	68eb      	ldr	r3, [r5, #12]
 8009aaa:	9f03      	ldr	r7, [sp, #12]
 8009aac:	783a      	ldrb	r2, [r7, #0]
 8009aae:	1c78      	adds	r0, r7, #1
 8009ab0:	3a30      	subs	r2, #48	; 0x30
 8009ab2:	4684      	mov	ip, r0
 8009ab4:	2a09      	cmp	r2, #9
 8009ab6:	d94f      	bls.n	8009b58 <_vfiprintf_r+0x1d0>
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	d111      	bne.n	8009ae0 <_vfiprintf_r+0x158>
 8009abc:	e017      	b.n	8009aee <_vfiprintf_r+0x166>
 8009abe:	3701      	adds	r7, #1
 8009ac0:	e7a9      	b.n	8009a16 <_vfiprintf_r+0x8e>
 8009ac2:	4b49      	ldr	r3, [pc, #292]	; (8009be8 <_vfiprintf_r+0x260>)
 8009ac4:	682a      	ldr	r2, [r5, #0]
 8009ac6:	1ac0      	subs	r0, r0, r3
 8009ac8:	2301      	movs	r3, #1
 8009aca:	4083      	lsls	r3, r0
 8009acc:	4313      	orrs	r3, r2
 8009ace:	602b      	str	r3, [r5, #0]
 8009ad0:	9703      	str	r7, [sp, #12]
 8009ad2:	e7cb      	b.n	8009a6c <_vfiprintf_r+0xe4>
 8009ad4:	9b07      	ldr	r3, [sp, #28]
 8009ad6:	1d19      	adds	r1, r3, #4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	9107      	str	r1, [sp, #28]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	db01      	blt.n	8009ae4 <_vfiprintf_r+0x15c>
 8009ae0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ae2:	e004      	b.n	8009aee <_vfiprintf_r+0x166>
 8009ae4:	425b      	negs	r3, r3
 8009ae6:	60eb      	str	r3, [r5, #12]
 8009ae8:	2302      	movs	r3, #2
 8009aea:	4313      	orrs	r3, r2
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	783b      	ldrb	r3, [r7, #0]
 8009af0:	2b2e      	cmp	r3, #46	; 0x2e
 8009af2:	d10a      	bne.n	8009b0a <_vfiprintf_r+0x182>
 8009af4:	787b      	ldrb	r3, [r7, #1]
 8009af6:	2b2a      	cmp	r3, #42	; 0x2a
 8009af8:	d137      	bne.n	8009b6a <_vfiprintf_r+0x1e2>
 8009afa:	9b07      	ldr	r3, [sp, #28]
 8009afc:	3702      	adds	r7, #2
 8009afe:	1d1a      	adds	r2, r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	db2d      	blt.n	8009b64 <_vfiprintf_r+0x1dc>
 8009b08:	9309      	str	r3, [sp, #36]	; 0x24
 8009b0a:	2203      	movs	r2, #3
 8009b0c:	7839      	ldrb	r1, [r7, #0]
 8009b0e:	4837      	ldr	r0, [pc, #220]	; (8009bec <_vfiprintf_r+0x264>)
 8009b10:	f7ff fb42 	bl	8009198 <memchr>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d007      	beq.n	8009b28 <_vfiprintf_r+0x1a0>
 8009b18:	4b34      	ldr	r3, [pc, #208]	; (8009bec <_vfiprintf_r+0x264>)
 8009b1a:	682a      	ldr	r2, [r5, #0]
 8009b1c:	1ac0      	subs	r0, r0, r3
 8009b1e:	2340      	movs	r3, #64	; 0x40
 8009b20:	4083      	lsls	r3, r0
 8009b22:	4313      	orrs	r3, r2
 8009b24:	3701      	adds	r7, #1
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	7839      	ldrb	r1, [r7, #0]
 8009b2a:	1c7b      	adds	r3, r7, #1
 8009b2c:	2206      	movs	r2, #6
 8009b2e:	4830      	ldr	r0, [pc, #192]	; (8009bf0 <_vfiprintf_r+0x268>)
 8009b30:	9303      	str	r3, [sp, #12]
 8009b32:	7629      	strb	r1, [r5, #24]
 8009b34:	f7ff fb30 	bl	8009198 <memchr>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d045      	beq.n	8009bc8 <_vfiprintf_r+0x240>
 8009b3c:	4b2d      	ldr	r3, [pc, #180]	; (8009bf4 <_vfiprintf_r+0x26c>)
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d127      	bne.n	8009b92 <_vfiprintf_r+0x20a>
 8009b42:	2207      	movs	r2, #7
 8009b44:	9b07      	ldr	r3, [sp, #28]
 8009b46:	3307      	adds	r3, #7
 8009b48:	4393      	bics	r3, r2
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	9307      	str	r3, [sp, #28]
 8009b4e:	696b      	ldr	r3, [r5, #20]
 8009b50:	9a04      	ldr	r2, [sp, #16]
 8009b52:	189b      	adds	r3, r3, r2
 8009b54:	616b      	str	r3, [r5, #20]
 8009b56:	e75d      	b.n	8009a14 <_vfiprintf_r+0x8c>
 8009b58:	210a      	movs	r1, #10
 8009b5a:	434b      	muls	r3, r1
 8009b5c:	4667      	mov	r7, ip
 8009b5e:	189b      	adds	r3, r3, r2
 8009b60:	3909      	subs	r1, #9
 8009b62:	e7a3      	b.n	8009aac <_vfiprintf_r+0x124>
 8009b64:	2301      	movs	r3, #1
 8009b66:	425b      	negs	r3, r3
 8009b68:	e7ce      	b.n	8009b08 <_vfiprintf_r+0x180>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	001a      	movs	r2, r3
 8009b6e:	3701      	adds	r7, #1
 8009b70:	606b      	str	r3, [r5, #4]
 8009b72:	7839      	ldrb	r1, [r7, #0]
 8009b74:	1c78      	adds	r0, r7, #1
 8009b76:	3930      	subs	r1, #48	; 0x30
 8009b78:	4684      	mov	ip, r0
 8009b7a:	2909      	cmp	r1, #9
 8009b7c:	d903      	bls.n	8009b86 <_vfiprintf_r+0x1fe>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0c3      	beq.n	8009b0a <_vfiprintf_r+0x182>
 8009b82:	9209      	str	r2, [sp, #36]	; 0x24
 8009b84:	e7c1      	b.n	8009b0a <_vfiprintf_r+0x182>
 8009b86:	230a      	movs	r3, #10
 8009b88:	435a      	muls	r2, r3
 8009b8a:	4667      	mov	r7, ip
 8009b8c:	1852      	adds	r2, r2, r1
 8009b8e:	3b09      	subs	r3, #9
 8009b90:	e7ef      	b.n	8009b72 <_vfiprintf_r+0x1ea>
 8009b92:	ab07      	add	r3, sp, #28
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	0022      	movs	r2, r4
 8009b98:	0029      	movs	r1, r5
 8009b9a:	0030      	movs	r0, r6
 8009b9c:	4b16      	ldr	r3, [pc, #88]	; (8009bf8 <_vfiprintf_r+0x270>)
 8009b9e:	f7fd fcc9 	bl	8007534 <_printf_float>
 8009ba2:	9004      	str	r0, [sp, #16]
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	d1d1      	bne.n	8009b4e <_vfiprintf_r+0x1c6>
 8009baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bac:	07db      	lsls	r3, r3, #31
 8009bae:	d405      	bmi.n	8009bbc <_vfiprintf_r+0x234>
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	059b      	lsls	r3, r3, #22
 8009bb4:	d402      	bmi.n	8009bbc <_vfiprintf_r+0x234>
 8009bb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bb8:	f7ff fa80 	bl	80090bc <__retarget_lock_release_recursive>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	065b      	lsls	r3, r3, #25
 8009bc0:	d500      	bpl.n	8009bc4 <_vfiprintf_r+0x23c>
 8009bc2:	e70a      	b.n	80099da <_vfiprintf_r+0x52>
 8009bc4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009bc6:	e70a      	b.n	80099de <_vfiprintf_r+0x56>
 8009bc8:	ab07      	add	r3, sp, #28
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	0022      	movs	r2, r4
 8009bce:	0029      	movs	r1, r5
 8009bd0:	0030      	movs	r0, r6
 8009bd2:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <_vfiprintf_r+0x270>)
 8009bd4:	f7fd ff6c 	bl	8007ab0 <_printf_i>
 8009bd8:	e7e3      	b.n	8009ba2 <_vfiprintf_r+0x21a>
 8009bda:	46c0      	nop			; (mov r8, r8)
 8009bdc:	0800a32c 	.word	0x0800a32c
 8009be0:	0800a34c 	.word	0x0800a34c
 8009be4:	0800a30c 	.word	0x0800a30c
 8009be8:	0800a4cc 	.word	0x0800a4cc
 8009bec:	0800a4d2 	.word	0x0800a4d2
 8009bf0:	0800a4d6 	.word	0x0800a4d6
 8009bf4:	08007535 	.word	0x08007535
 8009bf8:	08009963 	.word	0x08009963

08009bfc <__sread>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	000c      	movs	r4, r1
 8009c00:	250e      	movs	r5, #14
 8009c02:	5f49      	ldrsh	r1, [r1, r5]
 8009c04:	f000 f8e4 	bl	8009dd0 <_read_r>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	db03      	blt.n	8009c14 <__sread+0x18>
 8009c0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c0e:	181b      	adds	r3, r3, r0
 8009c10:	6563      	str	r3, [r4, #84]	; 0x54
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	4a02      	ldr	r2, [pc, #8]	; (8009c20 <__sread+0x24>)
 8009c18:	4013      	ands	r3, r2
 8009c1a:	81a3      	strh	r3, [r4, #12]
 8009c1c:	e7f9      	b.n	8009c12 <__sread+0x16>
 8009c1e:	46c0      	nop			; (mov r8, r8)
 8009c20:	ffffefff 	.word	0xffffefff

08009c24 <__swrite>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	001f      	movs	r7, r3
 8009c28:	898b      	ldrh	r3, [r1, #12]
 8009c2a:	0005      	movs	r5, r0
 8009c2c:	000c      	movs	r4, r1
 8009c2e:	0016      	movs	r6, r2
 8009c30:	05db      	lsls	r3, r3, #23
 8009c32:	d505      	bpl.n	8009c40 <__swrite+0x1c>
 8009c34:	230e      	movs	r3, #14
 8009c36:	5ec9      	ldrsh	r1, [r1, r3]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	f000 f8a2 	bl	8009d84 <_lseek_r>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	4a05      	ldr	r2, [pc, #20]	; (8009c58 <__swrite+0x34>)
 8009c44:	0028      	movs	r0, r5
 8009c46:	4013      	ands	r3, r2
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	0032      	movs	r2, r6
 8009c4c:	230e      	movs	r3, #14
 8009c4e:	5ee1      	ldrsh	r1, [r4, r3]
 8009c50:	003b      	movs	r3, r7
 8009c52:	f000 f81f 	bl	8009c94 <_write_r>
 8009c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c58:	ffffefff 	.word	0xffffefff

08009c5c <__sseek>:
 8009c5c:	b570      	push	{r4, r5, r6, lr}
 8009c5e:	000c      	movs	r4, r1
 8009c60:	250e      	movs	r5, #14
 8009c62:	5f49      	ldrsh	r1, [r1, r5]
 8009c64:	f000 f88e 	bl	8009d84 <_lseek_r>
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	1c42      	adds	r2, r0, #1
 8009c6c:	d103      	bne.n	8009c76 <__sseek+0x1a>
 8009c6e:	4a05      	ldr	r2, [pc, #20]	; (8009c84 <__sseek+0x28>)
 8009c70:	4013      	ands	r3, r2
 8009c72:	81a3      	strh	r3, [r4, #12]
 8009c74:	bd70      	pop	{r4, r5, r6, pc}
 8009c76:	2280      	movs	r2, #128	; 0x80
 8009c78:	0152      	lsls	r2, r2, #5
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	81a3      	strh	r3, [r4, #12]
 8009c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c80:	e7f8      	b.n	8009c74 <__sseek+0x18>
 8009c82:	46c0      	nop			; (mov r8, r8)
 8009c84:	ffffefff 	.word	0xffffefff

08009c88 <__sclose>:
 8009c88:	b510      	push	{r4, lr}
 8009c8a:	230e      	movs	r3, #14
 8009c8c:	5ec9      	ldrsh	r1, [r1, r3]
 8009c8e:	f000 f833 	bl	8009cf8 <_close_r>
 8009c92:	bd10      	pop	{r4, pc}

08009c94 <_write_r>:
 8009c94:	b570      	push	{r4, r5, r6, lr}
 8009c96:	0004      	movs	r4, r0
 8009c98:	0008      	movs	r0, r1
 8009c9a:	0011      	movs	r1, r2
 8009c9c:	001a      	movs	r2, r3
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	4d05      	ldr	r5, [pc, #20]	; (8009cb8 <_write_r+0x24>)
 8009ca2:	602b      	str	r3, [r5, #0]
 8009ca4:	f7fa f96b 	bl	8003f7e <_write>
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d103      	bne.n	8009cb4 <_write_r+0x20>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d000      	beq.n	8009cb4 <_write_r+0x20>
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	bd70      	pop	{r4, r5, r6, pc}
 8009cb6:	46c0      	nop			; (mov r8, r8)
 8009cb8:	2000032c 	.word	0x2000032c

08009cbc <__assert_func>:
 8009cbc:	b530      	push	{r4, r5, lr}
 8009cbe:	0014      	movs	r4, r2
 8009cc0:	001a      	movs	r2, r3
 8009cc2:	4b09      	ldr	r3, [pc, #36]	; (8009ce8 <__assert_func+0x2c>)
 8009cc4:	0005      	movs	r5, r0
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	b085      	sub	sp, #20
 8009cca:	68d8      	ldr	r0, [r3, #12]
 8009ccc:	4b07      	ldr	r3, [pc, #28]	; (8009cec <__assert_func+0x30>)
 8009cce:	2c00      	cmp	r4, #0
 8009cd0:	d101      	bne.n	8009cd6 <__assert_func+0x1a>
 8009cd2:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <__assert_func+0x34>)
 8009cd4:	001c      	movs	r4, r3
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	9100      	str	r1, [sp, #0]
 8009cda:	002b      	movs	r3, r5
 8009cdc:	4905      	ldr	r1, [pc, #20]	; (8009cf4 <__assert_func+0x38>)
 8009cde:	9402      	str	r4, [sp, #8]
 8009ce0:	f000 f81c 	bl	8009d1c <fiprintf>
 8009ce4:	f000 f895 	bl	8009e12 <abort>
 8009ce8:	2000000c 	.word	0x2000000c
 8009cec:	0800a4dd 	.word	0x0800a4dd
 8009cf0:	0800a518 	.word	0x0800a518
 8009cf4:	0800a4ea 	.word	0x0800a4ea

08009cf8 <_close_r>:
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	b570      	push	{r4, r5, r6, lr}
 8009cfc:	4d06      	ldr	r5, [pc, #24]	; (8009d18 <_close_r+0x20>)
 8009cfe:	0004      	movs	r4, r0
 8009d00:	0008      	movs	r0, r1
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	f7fa f957 	bl	8003fb6 <_close>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d103      	bne.n	8009d14 <_close_r+0x1c>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d000      	beq.n	8009d14 <_close_r+0x1c>
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	bd70      	pop	{r4, r5, r6, pc}
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	2000032c 	.word	0x2000032c

08009d1c <fiprintf>:
 8009d1c:	b40e      	push	{r1, r2, r3}
 8009d1e:	b503      	push	{r0, r1, lr}
 8009d20:	0001      	movs	r1, r0
 8009d22:	ab03      	add	r3, sp, #12
 8009d24:	4804      	ldr	r0, [pc, #16]	; (8009d38 <fiprintf+0x1c>)
 8009d26:	cb04      	ldmia	r3!, {r2}
 8009d28:	6800      	ldr	r0, [r0, #0]
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	f7ff fe2c 	bl	8009988 <_vfiprintf_r>
 8009d30:	b002      	add	sp, #8
 8009d32:	bc08      	pop	{r3}
 8009d34:	b003      	add	sp, #12
 8009d36:	4718      	bx	r3
 8009d38:	2000000c 	.word	0x2000000c

08009d3c <_fstat_r>:
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	b570      	push	{r4, r5, r6, lr}
 8009d40:	4d06      	ldr	r5, [pc, #24]	; (8009d5c <_fstat_r+0x20>)
 8009d42:	0004      	movs	r4, r0
 8009d44:	0008      	movs	r0, r1
 8009d46:	0011      	movs	r1, r2
 8009d48:	602b      	str	r3, [r5, #0]
 8009d4a:	f7fa f93e 	bl	8003fca <_fstat>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d103      	bne.n	8009d5a <_fstat_r+0x1e>
 8009d52:	682b      	ldr	r3, [r5, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d000      	beq.n	8009d5a <_fstat_r+0x1e>
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	2000032c 	.word	0x2000032c

08009d60 <_isatty_r>:
 8009d60:	2300      	movs	r3, #0
 8009d62:	b570      	push	{r4, r5, r6, lr}
 8009d64:	4d06      	ldr	r5, [pc, #24]	; (8009d80 <_isatty_r+0x20>)
 8009d66:	0004      	movs	r4, r0
 8009d68:	0008      	movs	r0, r1
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	f7fa f93b 	bl	8003fe6 <_isatty>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d103      	bne.n	8009d7c <_isatty_r+0x1c>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d000      	beq.n	8009d7c <_isatty_r+0x1c>
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	bd70      	pop	{r4, r5, r6, pc}
 8009d7e:	46c0      	nop			; (mov r8, r8)
 8009d80:	2000032c 	.word	0x2000032c

08009d84 <_lseek_r>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	0004      	movs	r4, r0
 8009d88:	0008      	movs	r0, r1
 8009d8a:	0011      	movs	r1, r2
 8009d8c:	001a      	movs	r2, r3
 8009d8e:	2300      	movs	r3, #0
 8009d90:	4d05      	ldr	r5, [pc, #20]	; (8009da8 <_lseek_r+0x24>)
 8009d92:	602b      	str	r3, [r5, #0]
 8009d94:	f7fa f930 	bl	8003ff8 <_lseek>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d103      	bne.n	8009da4 <_lseek_r+0x20>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d000      	beq.n	8009da4 <_lseek_r+0x20>
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	bd70      	pop	{r4, r5, r6, pc}
 8009da6:	46c0      	nop			; (mov r8, r8)
 8009da8:	2000032c 	.word	0x2000032c

08009dac <__ascii_mbtowc>:
 8009dac:	b082      	sub	sp, #8
 8009dae:	2900      	cmp	r1, #0
 8009db0:	d100      	bne.n	8009db4 <__ascii_mbtowc+0x8>
 8009db2:	a901      	add	r1, sp, #4
 8009db4:	1e10      	subs	r0, r2, #0
 8009db6:	d006      	beq.n	8009dc6 <__ascii_mbtowc+0x1a>
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d006      	beq.n	8009dca <__ascii_mbtowc+0x1e>
 8009dbc:	7813      	ldrb	r3, [r2, #0]
 8009dbe:	600b      	str	r3, [r1, #0]
 8009dc0:	7810      	ldrb	r0, [r2, #0]
 8009dc2:	1e43      	subs	r3, r0, #1
 8009dc4:	4198      	sbcs	r0, r3
 8009dc6:	b002      	add	sp, #8
 8009dc8:	4770      	bx	lr
 8009dca:	2002      	movs	r0, #2
 8009dcc:	4240      	negs	r0, r0
 8009dce:	e7fa      	b.n	8009dc6 <__ascii_mbtowc+0x1a>

08009dd0 <_read_r>:
 8009dd0:	b570      	push	{r4, r5, r6, lr}
 8009dd2:	0004      	movs	r4, r0
 8009dd4:	0008      	movs	r0, r1
 8009dd6:	0011      	movs	r1, r2
 8009dd8:	001a      	movs	r2, r3
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4d05      	ldr	r5, [pc, #20]	; (8009df4 <_read_r+0x24>)
 8009dde:	602b      	str	r3, [r5, #0]
 8009de0:	f7fa f8b0 	bl	8003f44 <_read>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d103      	bne.n	8009df0 <_read_r+0x20>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d000      	beq.n	8009df0 <_read_r+0x20>
 8009dee:	6023      	str	r3, [r4, #0]
 8009df0:	bd70      	pop	{r4, r5, r6, pc}
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	2000032c 	.word	0x2000032c

08009df8 <__ascii_wctomb>:
 8009df8:	0003      	movs	r3, r0
 8009dfa:	1e08      	subs	r0, r1, #0
 8009dfc:	d005      	beq.n	8009e0a <__ascii_wctomb+0x12>
 8009dfe:	2aff      	cmp	r2, #255	; 0xff
 8009e00:	d904      	bls.n	8009e0c <__ascii_wctomb+0x14>
 8009e02:	228a      	movs	r2, #138	; 0x8a
 8009e04:	2001      	movs	r0, #1
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	4240      	negs	r0, r0
 8009e0a:	4770      	bx	lr
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	700a      	strb	r2, [r1, #0]
 8009e10:	e7fb      	b.n	8009e0a <__ascii_wctomb+0x12>

08009e12 <abort>:
 8009e12:	2006      	movs	r0, #6
 8009e14:	b510      	push	{r4, lr}
 8009e16:	f000 f82d 	bl	8009e74 <raise>
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	f7fa f886 	bl	8003f2c <_exit>

08009e20 <_raise_r>:
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	0004      	movs	r4, r0
 8009e24:	000d      	movs	r5, r1
 8009e26:	291f      	cmp	r1, #31
 8009e28:	d904      	bls.n	8009e34 <_raise_r+0x14>
 8009e2a:	2316      	movs	r3, #22
 8009e2c:	6003      	str	r3, [r0, #0]
 8009e2e:	2001      	movs	r0, #1
 8009e30:	4240      	negs	r0, r0
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <_raise_r+0x24>
 8009e3a:	008a      	lsls	r2, r1, #2
 8009e3c:	189b      	adds	r3, r3, r2
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	d108      	bne.n	8009e56 <_raise_r+0x36>
 8009e44:	0020      	movs	r0, r4
 8009e46:	f000 f831 	bl	8009eac <_getpid_r>
 8009e4a:	002a      	movs	r2, r5
 8009e4c:	0001      	movs	r1, r0
 8009e4e:	0020      	movs	r0, r4
 8009e50:	f000 f81a 	bl	8009e88 <_kill_r>
 8009e54:	e7ed      	b.n	8009e32 <_raise_r+0x12>
 8009e56:	2000      	movs	r0, #0
 8009e58:	2a01      	cmp	r2, #1
 8009e5a:	d0ea      	beq.n	8009e32 <_raise_r+0x12>
 8009e5c:	1c51      	adds	r1, r2, #1
 8009e5e:	d103      	bne.n	8009e68 <_raise_r+0x48>
 8009e60:	2316      	movs	r3, #22
 8009e62:	3001      	adds	r0, #1
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	e7e4      	b.n	8009e32 <_raise_r+0x12>
 8009e68:	2400      	movs	r4, #0
 8009e6a:	0028      	movs	r0, r5
 8009e6c:	601c      	str	r4, [r3, #0]
 8009e6e:	4790      	blx	r2
 8009e70:	0020      	movs	r0, r4
 8009e72:	e7de      	b.n	8009e32 <_raise_r+0x12>

08009e74 <raise>:
 8009e74:	b510      	push	{r4, lr}
 8009e76:	4b03      	ldr	r3, [pc, #12]	; (8009e84 <raise+0x10>)
 8009e78:	0001      	movs	r1, r0
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	f7ff ffd0 	bl	8009e20 <_raise_r>
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	46c0      	nop			; (mov r8, r8)
 8009e84:	2000000c 	.word	0x2000000c

08009e88 <_kill_r>:
 8009e88:	2300      	movs	r3, #0
 8009e8a:	b570      	push	{r4, r5, r6, lr}
 8009e8c:	4d06      	ldr	r5, [pc, #24]	; (8009ea8 <_kill_r+0x20>)
 8009e8e:	0004      	movs	r4, r0
 8009e90:	0008      	movs	r0, r1
 8009e92:	0011      	movs	r1, r2
 8009e94:	602b      	str	r3, [r5, #0]
 8009e96:	f7fa f839 	bl	8003f0c <_kill>
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	d103      	bne.n	8009ea6 <_kill_r+0x1e>
 8009e9e:	682b      	ldr	r3, [r5, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d000      	beq.n	8009ea6 <_kill_r+0x1e>
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	2000032c 	.word	0x2000032c

08009eac <_getpid_r>:
 8009eac:	b510      	push	{r4, lr}
 8009eae:	f7fa f827 	bl	8003f00 <_getpid>
 8009eb2:	bd10      	pop	{r4, pc}

08009eb4 <_init>:
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	46c0      	nop			; (mov r8, r8)
 8009eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eba:	bc08      	pop	{r3}
 8009ebc:	469e      	mov	lr, r3
 8009ebe:	4770      	bx	lr

08009ec0 <_fini>:
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec6:	bc08      	pop	{r3}
 8009ec8:	469e      	mov	lr, r3
 8009eca:	4770      	bx	lr
